formal models heavy tailed behavior combinatorial search chen carla gomes bart selman department computer science cornell university ithaca ny usa gomes selman cs cornell edu 
cost distributions randomized backtrack search combinatorial domains heavytailed 
heavy tailed distributions explain high variability observed backtrack style procedures 
understanding phenomenon lead better search techniques 
example restart strategies provide mechanism eliminating heavytailed behavior boosting search performance 
state art sat solvers incorporate restart mechanisms 
study heavy tailed phenomena combinatorial search far largely empirical data 
introduce tree search models show formally heavy tailed cost distribution arise backtrack search 
discuss insights may facilitate development better combinatorial search methods 
series new insights high variability observed run time backtrack search procedures 
empirical shown backtrack style algorithms exhibit called heavy tailed behavior :10.1.1.21.1421
heavy tailed probability distributions highly non standard distributions capture unusually erratic behavior large variations random phenomena 
understanding phenomena backtrack search provided new insights design search algorithms led new search strategies particular restart strategies 
strategies avoid long tails run time distributions take advantage probability mass distributions 
randomization restart strategies integral part state art sat solvers example cha grasp relsat satz rand :10.1.1.102.1237:10.1.1.112.8065
research heavy tailed distributions restart strategies combinatorial search largely empirical studies run time distributions 
far detailed rigorous understanding phenomena lacking 
provide formal characterization tree search models show conditions heavy tailed distributions arise 
intuitively heavy tailed behavior backtrack style search arises fact wrong branching decisions may lead procedure explore exponentially large subtree search space contains solutions 
depending number bad branching choices expect large variability time find solution di erent runs 
analysis intuition precise providing search tree model formally prove run time distribution heavy tailed 
key component model allows highly irregular imbalanced trees radically di erent run run 
analyze tree search model leads fully balanced search trees 
balanced tree model exhibit heavy tailed behavior restart strategies provably ine ective model 
contrast balanced imbalanced model shows heavy inherent backtrack search general emerges backtrack searches highly irregular search spaces 
search trees encountered practice correspond closely balanced trees imbalanced ones determined combination characteristics underlying problem instance search heuristics pruning propagation methods employed 
balanced trees occur techniques relatively ine ective problem domain considerations 
example certain problem instances parity formulas specifically designed fool clever search technique 
parity problems derived ideas cryptography 
problem instances backtrack search tends degrade form exhaustive search backtrack search trees correspond nearly fully balanced trees depth equal number independent variables problem 
case balanced search tree model captures statistical properties search spaces 
fortunately csp sat problems real world applications structure branching heuristics dynamic variable ordering pruning techniques quite ective 
observing backtrack search instances observes highly imbalanced search trees 
short subtrees heuristics combined propagation quickly discover contradictions times search procedure branches deeply large subtrees making relatively little progress exploring search space 
result search tree highly irregular imbalanced search tree model shows exhibits heavy tailed behavior random restarts ective 
proceeding technical details analysis give brief summary main technical results 
balanced model show expected run time measured leaf nodes visited scales exponentially height search tree corresponds number independent variables problem instance 
underlying run time distribution heavy tailed restart strategy improve search performance 
imbalanced search tree model show run time randomized backtrack search method heavy tailed range values model parameter characterizes ectiveness branching heuristics pruning techniques 
heavy leads infinite vari ance infinite mean run time 
model restart strategy lead polynomial mean polynomial variance 
subsequently refine imbalanced model account general dealing finite size search trees size branching factor 
immediate consequence run time distribution backtrack search bounded strictly speaking heavytailed requires infinitely long fat tails 
analysis shows called bounded heavy tailed model provides framework studying search behavior trees 
bounded distributions share properties true heavy tailed distributions 
show model gives rise searches mean scales exponentially 
short runs su cient probability mass allow ective restart strategy mean run time scales polynomially 
results closely mimic properties empirically determined run time distributions certain classes structures instances explain practical ectiveness restarts large observed variability di erent backtrack runs 
key components lead heavy tailed behavior backtrack search exponential search space ective branching heuristics propagation mechanisms 
second criteria necessary create reasonable probability mass finding solution early search 
interestingly analysis suggests heuristics create large variability runs may ective uniform heuristics restart strategy take advantage short possibly relatively rare runs 
area research 
structured follows 
section balanced tree model 
section introduce imbalanced search tree model followed bounded version section 
section discusses general properties bounded heavy tailed distributions 
section gives discusses directions 
balanced trees consider case backtrack search balanced tree 
obtain base case analysis consider basic form backtrack search 
subsequently relax assumptions move practical forms backtrack search 
base model assume chronological backtracking fixed variable ordering random child selection propagation pruning 
consider branching factor analysis easily extends arbitrary finite branching factor 
shows examples basic setup 
full search space complete binary tree depth leaf nodes bottom 
interesting study chu min li argues asymmetric heuristics may quite powerful 
study shows heuristics lead skinny deep search trees ective heuristics uniformly try minimize depth trees creating relative short dense trees 
successful leaf successful leaf successful leaf fig 

balanced tree model 
assume single successful leaf 
bold faced subtrees shows visited nodes successful leaf 
abstraction actual search process di erent ways traverse bold faced subtrees referred search subtrees 
search tree corresponds tree visited nodes specification order nodes visited 
di erent runs backtrack search tree di erent concrete search trees nodes visited di erent order 
probabilistic characterization balanced tree model balanced tree search model number interesting properties 
example search subtree characterized unique number visited leaf nodes ranging successful leaf fixed subtree occurs probability number leaf nodes visited including successful leaf node discrete uniformly distributed random variable denoting random variable 
noted runs backtrack search method yield tree runs may visit set nodes di erent order 
useful consider actual traversals searches subtree 
see 
shows possible traversals subtree 
node gives name branching variable selected node arrow indicates visited child 
possible variation search model order children node visited 
obtain bold faced subtree having multiple solutions qualitatively change results 
full version discuss issue detail 
successful leaf successful leaf fig 

balanced tree model detailed view 
see top nodes need branch left 
reach complete subtree node total possible ways traversing subtree 
total possible searches correspond subtree 
note subtree figures possible corresponding traversal 
possible traversal search tree equally 
probability actual search traversal number distinct traversals corresponding subtree 
give brief derivation properties balanced tree search 
consider binary search trees 
nodes ancestors satisfying leaf bad nodes 
backtrack search starts root node probability descends bad node depth incurs time exploring leaves bad node 
leaves explored random choice take place node depth 
node probability descending node probability descending bad node case leaves bad node explored 
continue reason manner see cost search 

xn xn indicator random variable value bad node depth selected value 

exactly choice zero assignments variables equal cost expression assignment probability occurring probability cost stated di erently satisfying leaf fixed subtree determined completely random variables descendants bad sibling unique node depth explored 
give settings alongside tree 
choice level gets label bad choice gets label 
possible binary setting uniquely defines search tree number leaf nodes 
subtrees occurring probability search cost distribution uniform distribution range 
allows calculate expectation variance search cost terms number visited leafs 
expected value ip gives 
equals 
variance obtain var equals 
results show expected run time variance chronological backtrack search complete balanced tree scales exponentially course assume leaf located uniformly random fringe tree intuitive sense expected search time order half size fringe 
detailed analysis search process provide better understanding full probability distribution search trees search trees 
ect restarts conclude analysis balanced case considering randomized restart strategy beneficial setting 
discussed earlier restart strategies randomized backtrack search shown quite ective practice :10.1.1.21.1421:10.1.1.112.8065
restart strategy ective balanced search tree model 
analysis slightly relax assumptions search model 
assume branching factor assumptions order algorithm visits children internal node child picked randomly 
analysis applies arbitrarily intelligent heuristic select remaining unvisited children node 
note case model identical previous model 
see mean exponential 
observation gives probability number visited leaf nodes exceed power lemma 
integers proof 
follows directly fact guesses correct 
conclude follows expected run time exponential expect 
theorem 
expectation run time balanced tree model exponential proof 
lemma bounded exponential refine lemma obtain upper bound probability arbitrary function lemma 
function 
proof 
log set log log 
implying apply lemma obtain log log theorem implies probability search terminating polynomial time exponentially small exponentially small polynomial observation show exist restart strategy leads expected polynomial time performance 
formally restart strategy sequence times 
randomized algorithm problem instance run restart strategy executing time followed restarting running time expected time running restart strategy substantially di erent expected time running restarts 
particular run time distribution heavy tailed chance having long runs 
case restart strategy cut long runs dramatically reduce expected run time variance 
surprising result luby show optimal performance obtained purely uniform restart strategy 
uniform strategy restart interval 
uniform restart time 
looking restart strategy need consider uniform strategies 
theorem 
backtrack search balanced tree model restart strategy expected polynomial time 
proof 
prove contradiction 
assume restart strategy 
uniform restart time optimal uniform restart strategy 
function polynomial 
know optimal uniform strategy exists luby result 
strategy runs expected polynomial time function assumption 
implies restart parameter polynomial leave formal proof long version 
algorithm run time probability algorithm finds solution lemma bounded expected time uniform restart strategy bounded contradiction 
imbalanced tree model heavy tails restarts tree search model restart strategy useful understand intuitively restarts enhance search balanced tree consider cumulative run time distribution simply probability mass small search trees obtain polynomial expected run time restarts 
words probability encountering small successful search tree low 
course direct consequence balanced nature trees means search branches reach maximum possible depth 
means follows path top soon branching decision deviates path solution say depth full subtree depth needs explored 
assume branching heuristics error probability random branching 
probability making incorrect branching choice th level top consequence probability need explore half full search tree leads directly exponential expected search cost 
ways fix problem 
way clever heuristics manages eliminate branching errors leads reasonable chance postponing wrong choice close fringe search tree 
appears heuristics exist interesting search problem 
heuristics ect need solve problem 
way remedy situation having combination backtracking dynamic variable ordering pruning propagation clause constraint learning variable selection terminate branches early bad subtree 
techniques substantially shrink unsuccessful subtrees 
refer collection techniques csp techniques 
resulting search method allowed branching mistakes ect errors necessarily lead subtrees exponential full problem size 
course resulting search trees highly irregular may vary dramatically run run 
noted large variations runs observed practice range state art randomized backtrack search methods 
underlying distributions heavy tailed addition restart strategies highly ective 
heavy tailed probability distributions formally characterized tails power law polynomial decay distributions asymptotically heavy tails called tails pareto levy form cx constants 
moments heavy tailed distributions infinite 
particular distribution infinite particularly exciting development cha sat solver 
variety structured domains protocol verification cha substantially extends range solvable instances 
cha combines rapid restart strategy clause learning 
ect learned clauses help pruning branches subtrees restarts 
mean infinite variance mean finite variance infinite 
introduce probability model search tree size depending choice characteristic parameter setting leads heavytailed behavior ective restart strategy 

successful leaf fig 

generative model imbalanced trees 
consider model creating imbalanced trees 
model assumes csp techniques lead probability guiding search directly solution 
probability search space size needs explored 
general probability search space nodes needs explored 
parameter provides probability amount backtracking increases geometrically factor 
increase backtracking modeled global phenomenon 
formally generative model leads distribution 
probability integer 
random variable value probability integers 
note model 
note specified probability distribution 
course probability close zero 
straightforward generalization assume additional polynomial number backtracks reaching successful leaf 
generalization bounded case 
suggest di erent solutions note generative model successful leaves may correspond di erent ways reaching unique solution 
see larger heavier tail 
su ciently large product greater expectation infinite 
product expectation finite 
similarly product greater variance infinite finite 
state results formally 
expected run time derive 
pb probability size search space increasing factor su cient large get infinite expected search time 
better search control obtain finite mean pb 
variance run time obtain pb derived var variance infinite smaller values variance finite var pb pb illustrate boundary cases explicitly consider case 
probability larger doubling search tree obtain infinite mean infinite variance 
finite mean infinite variance 
finite mean finite variance 
describe asymptotics survival function lemma 
integers proof 
theorem 
fixed 
real numbers log 
particular log log proof 
show log log lower bound follows calculations 
log log log lemma log log log upper bound tail similar manner 
obtain log log log log theorem shows imbalanced tree search model leads heavytailed run time distribution equation 
bounded heavy tailed behavior finite distributions generative model imbalanced tree search put apriori bound size search space 
practice run time backtrack search procedure combinatorial problem instance generally bounded exponential function length input 
adjust analysis considering heavy tailed distributions bounded support socalled bounded heavy tailed distributions short 
analogous standard heavy tailed distributions bounded version power law decay tail distribution see equation finite exponential range values 
analysis bounded search space case shows main properties run time distribution observed unbounded imbalanced search model natural analogues dealing finite exponential search spaces 
highlights correspondence concepts unbounded heavy tailed model bounded heavy tailed model 
key issues heavy tailed distributions infinitely long tails power law decay bounded heavy tailed distributions exponentially long tails power law decay concept infinite mean context heavy tailed distribution translates exponential mean size input considering bounded heavy tailed distributions restart strategy applied backtrack search procedure heavy tailed behavior finite expected run time case bounded search spaces interested restart strategies lead polynomial expected run time original search algorithm restarts exhibits bounded heavy tailed behavior exponential expected run time 
furthermore point exactly phenomena lead heavy tailed behavior imbalanced generative model conjugation exponentially decreasing probability series mistakes exponentially increasing penalty size space search cause bounded heavy tailed behavior exponential mean bounded case 
infinitely long tail power law decay bounded exponentially long tail power law decay infinite moments exponential moments infinite mean infinite variance exponential variance size input exponential mean size input finite expected run time restart strategy polynomial expected run time restart strategy bounded search spaces heavy tailed behavior unbounded search spaces bounded heavy tailed behavior fig 

correspondence concepts heavy tailed distributions bounded heavytailed distributions 
bounding imbalanced search trees consider bounded version imbalanced tree model 
put bound depth generative model normalize probabilities accordingly 
run time search model take values probability cp 
note renormalized original model constant set equal guarantees obtain valid probability distribution cp 
note 
assume polynomial expected run time obtain cp cq pb distinguish cases 
constant depending case pb bounded constant 
cq 
obtain mean exponential cq pb compute variance follows 
cp cq pb var derive 
obtain polynomial scaling variance var constant depending 
variance scales exponentially establish probability distribution bounded heavy tailed distribution exhibits power law decay run time values assume set cp bp assumption 
implies cp consider value 
follows cp power law decay observe obtain expected polytime restart strategy 
seen considering uniform restart restart time 
expected run time expected run time scales polynomially general properties bounded heavy tailed distributions final section briefly show close relationship exponential expected mean polynomial restarts heavy tails bounded search space 
results shows run time exponentially long bounded heavy tail bounded constant times exponentially long region mean scales exponentially size input 
informally speaking decay tail su ciently slow su ciently long region cause expectation distribution exponential 
theorem 
run time algorithm 
suppose exist exponential function positive function constant constant property 
exponential proof result see 
theorem shows backtrack search procedure exponential expected run time restart policy runs polynomial time average underlying probability distribution fat tail power law decay exponentially long region 
theorem 
run time randomized search method guaranteed run time suppose unimodal peak function bounded polynomial restart strategy expected polynomial time exponential mean 
exists su ciently large proof theorem requires derivation series related properties 
refer reader 
intuitively theorem shows heavy inherent setting observes mean scales exponentially restart strategy results expected polynomial time scaling 
result require underlying probability distribution unimodal guarantees distribution certain sense behaved 
heavy tailed distributions provide right context studying scenarios 
heavy tailed phenomena backtrack style combinatorial search provide series useful insights behavior search methods 
particular phenomena provide explanation ectiveness random restart strategies combinatorial search :10.1.1.21.1421
rapid restart strategies incorporated range state art sat csp solvers 
far study phenomena combinatorial search largely analysis empirical data 
order obtain rigorous understanding heavy tailed phenomena backtrack search provided formal analysis statistical properties series randomized backtrack search cumulative run time visited leaf nodes log imbalanced bounded imbalanced imbalanced bounded imbalanced bounded fig 

example distributions balanced imbalanced bounded imbalanced models 
parameters 
models balanced tree search model imbalanced tree model bounded imbalanced tree model 
studied ect restart strategies 
analysis balanced tree model shows randomized backtrack search leads uniform distribution run times heavy tailed requiring search half fringe tree average 
random restarts ective setting 
bounded imbalanced model identified bounded heavy tailed behavior certain range model parameter parameter models ectiveness pruning power search procedure 
specifically probability branching pruning mistake occurs increasing size subtree requires traversal constant factor 
heavy tailed behavior occurs 
general heavy arises conjugation factors exponentially growing subtrees occurring exponentially decreasing probability 
illustrates contrasts distributions various models 
log log plot tail distribution highlight di erences distributions 
linear behavior orders magnitude imbalanced models characteristic heavy tailed behavior :10.1.1.21.1421
drop tail distribution bounded case illustrates ect boundedness search space 
relatively small deviation unbounded model distribution see boundary ect relatively minor 
sharp drop balanced model shows heavy 
bounded imbalanced model provides closest match heavy tailed behavior observed practice range problems 
particular depending model parameter settings model captures phenomenon exponential mean variance combined polynomial expected time restart strategy 
underlying distribution bounded heavy tailed 
imbalanced model give rise ective restart strategy 
suggests possible directions search methods 
particular suggests pruning heuristic search guidance may ective behaving asymmetrical manner 
ectiveness asymmetric methods vary widely di erent regions search space 
create highly imbalanced search tree restarts eliminate runs heuristic pruning methods relatively ine ective 
words trying shift run time distribution downwards may better create opportunities short runs significantly increases risk additional longer runs 
hope analysis shed light intriguing heavy tailed phenomenon backtrack search procedures may lead improvements design search methods 

bayardo schrag 
csp look back techniques solve real world sat instances 
proc 
th natl 
conf 
artificial intelligence aaai pages new providence ri 
aaai press 

chen gomes selman 
formal models heavy tailed behavior combinatorial search 
technical report intelligent information systems institute cornell university 

crawford kearns schapire 
minimal disagreement parity problem hard satisfiability problem 
technical report dimacs sat benchmark cirl 

gomes selman crato 
heavy tailed distributions combinatorial search 
smolka editor 
practice constraint programming cp 
lect 
notes comp 
sci pages 
springer verlag 

gomes selman kautz 
boosting combinatorial search randomization 
proceedings fifteenth national conference artificial intelligence aaai pages new providence ri 
aaai press 

gomes selman crato kautz 
heavy tailed phenomena satisfiability constraint satisfaction problems 
automated reasoning 

harchol balter crovella 
choosing task assignment policy distributed server system 
proceedings performance tools pages 
springer verlag 

li 
constrained approach narrow search trees satisfiability 
information processing letters 

li anbulagan 
heuristics unit propagation satisfiability problems 
proceedings international joint conference artificial intelligence pages 
aaai 

luby sinclair zuckerman 
optimal speedup las vegas algorithms 
information process 
letters pages 

marques silva sakallah 
grasp search algorithm propositional satisfiability 
ieee transactions computers 

moskewicz madigan zhao zhang malik 
cha engineering cient sat solver 
proc 
th design automation conf 

walsh 
search small world 
ijcai 

