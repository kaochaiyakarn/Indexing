fast functional lists hash lists deques variable length arrays phil inception functional programming mccarthy universally linked list underpinning data structure 
introduces new data structure vlist compact thread safe significantly faster linked lists nearly list operations 
space usage reduced typical list operations speed improved factors ranging 
important operations indexing length typically changed lgn respectively 
language interpreter dialect common lisp implemented benchmark comparison ocaml reported 
shown adapt structure create variable length arrays persistent deques functional hash tables 
requires resize copying average random access time 
comparisons previous dimensional arrays hash array trees hat carlsson demaine munro sedgewick 
categories subject descriptors information systems miscellaneous general terms functional data structures additional key words phrases hat arrays arrays linked lists functional lists deques hash lists 
inception functional programming mccarthy derived church lambda calculus linked list formed underlying data structure 
today implicit assumption remains manifested recursive type definition design modern functional languages 
link list proven versatile list structure limitations encourage complementary structures strings arrays 
employed achieve space efficient representation character lists provide structures support rapid random access necessitate additional special operators lead loss uniformity 
operations require working right left lists foldr merge example recursion 
leads stack overflow problems large lists optimizers fail identify eliminate tail recursion 
cdr coding developed allow cons cell follow car 
greenblatt hansen clark green li hudak clark bobrow clark 
flag bits indicate list status 
idea extended allow cells follow initial car typically compiler analysis avoid run time flag checking 
shao reppy appel shao 
different approach address es switzerland phil binary tree representation list structure create functional random access lists give lg indexing cost maintain constant head tail times 
okasaki similar concepts new technique recursive slow give functional deques constant insert remove times 
kaplan tarjan alternative structure vlist introduced combining extensibility linked list random access array 
shown lists built typically random element access time small constant space overhead 
verify new structure fact form basis general list manipulations cons car cdr real language implementation experimental vlist lisp interpreter created 
dialect common lisp test list performance ensure implementation stage vlist creation garbage collection 
basic vlist structure adapted support common atomic data types character integer float sub list 
efficient garbage collection significant consideration 
provided simple framework benchmarking typical list operations functional languages 
performance comparisons known respected implementation ocaml section 
interpreted list manipulation programs execute factor equivalent native compiled versions ocaml 
ocaml hand clear advantage operations dynamic scoping type checking degrade performance 
interestingly principles develop yield potential solutions important problems functional hash lists section variable size arrays section persistent deques section 
implementation variable sized arrays builds compared previous variable arrays hats arrays optimal time space carlsson demaine munro sedgewick 
unique allows growth data structure copying constant average random access time 
fascinating find simple concept varied application 

vlist concept vlist simple notion creating linked set memory blocks size successive block grows factor form geometric series ratio see fig 
list referenced pointer base added block offset added entry block 
base block block descriptor contains link previous smaller block base offset size block offset location block 
list manipulations considered constructed usual special functions cdr cons car 
vlist structure cdr accomplished simply decrementing offset part pointer 
zero fast functional lists hash lists deques variable length arrays level base offset size base offset level base offset size fig 

vlist structure level base offset size level base offset size block boundary link block base offset followed process continued 
car indirect load list pointer 
list constructor cons requires little consideration 
fig list created integers new list formed consing tail 
consing pointer offset compared offset 
block size simply incremented new entry updated 
occurred integers added 
hand pointer offset cons applied tail longer list case 
case new list block allocated base offset pointer set tail contained original list 
offset part set point tail extended 
new entry additional elements added 
expected lists share common tail just case linked list implementation 
new block filled just larger factor added new entries continued 
cost comparison new block allocation avoided completely 
location happens contain element identical consed frequently case applications pointer need updated conceptually simple form hash consing 
seen majority accesses adjacent locations yielding significant improvement sequential access time 
locality efficient cache line loads 
functional language implementations come built special functions allow indexing nth element list finding length list 
normally implemented costly linear time recursive functions 
vlist structure random probes nth element take constant time average 
consider starting list pointer fig find nth element subtract pointer offset 
result positive element block list calculated offset base 
result negative phil base offset size base offset base offset size base offset fig 

shared tail list base offset size base offset size move block base offset pointer 
add previous pointer offset negative offset 
remains negative keep moving block 
positive position required element 
compute average access time notice random accesses probability element block higher second higher third proportions dependant block size ratio chosen 
time proportional sum geometric series 

constant compute length list list traversed way offsets summed 
block traversed typically take time proportional number blocks 
case fig yield lg considerable improvement time linked list 
table give comparison results operations standard linked list vlist 
operations include cons add element list cdr tail list nth index elements length compute list length 
refining vlist table 
comparison linked list vlist ms operation llist vlist cons cdr nth days length requirement fields base offset describe list pointer cumbersome 
firstly time penalty memory accesses storage retrieval secondly additional space required twice normal pointer 
efficient single pointer represent list 
achieve possible recover base plist fast functional lists hash lists deques variable length arrays previous gc size ty data data data ix lu ty data data data ix lu ty data data data ix lu ty previous gc size ty data data data ix lu ty fig 

vlist single pointer data data previous gc lu ty ix index lu single ty data type gc garbage collector mark list block simple list data element pointer data element may bit character bit word bit integer 
trick accomplished breaking list block byte sub blocks double word aligned memory 
bytes sub block reserved index offset sub block block base data type field 
bytes available data 
see fig 
arrangement sub block base masking lower bits pointer block base simply calculated sub block index 
enable small lists represented efficiently block allocated new list structured differently 
contains locations data reserved previous pointer 
flag allows type block differentiated multiple entry 
arrangement degenerate vlist linked list overhead 
apparent byte sub block size chosen example byte 
larger size reduce average overhead large lists consequence high overhead small lists 
benefits accrue list representation 
double word alignment implies modern processors sub block fetched cache line 
cheap find data type data type size incrementing cdr cons operations 
reason sequential access adjacent data elements rapid 
index reserved bytes contains element offset sub block bits data type bits type sub block single multiple bit leaving bits sub block index 
remaining bytes available sub block storing data 
reserved part represents constant overhead data stored 
arrangement sub block contain twelve bit characters bit words bit data types list pointer integer float overhead incurred block phil average half filled 
amount depends value growth ratio chosen 
extending vlist assume pointer head character vlist new character element added 
sub block base recovered pointer masking lower bits 
data type size recovered element type field case byte character 
offset base pointer calculated list pointer incremented new element stored referenced location 
field updated new head list pointer returned 
offset equal greater memory block size recovered block descriptor compared current sub block index 
sub blocks available list pointer set sub block new element added 
sub blocks available new memory block allocated element added 
static typed functional languages lists usually homogeneous dynamic typed languages lisp lists allowed 
type mixing list achieved creating new block change type 
leads worst case degeneration simple linked list type change extension list 
compared linked lists offer considerable space saving 
assuming moment block added twice previous 
bit data type character overhead sub block index average half memory block allocated unused overhead total overhead 
static typed languages linked list requires pointer character value assuming takes bit words represent overhead 
character lists vlist order magnitude space efficient 
occasions advantage extend tail list 
case lazy list generation character buffering 
clearly trivial matter extend vlist geometric pattern element 
garbage collection data set longer reachable program considered garbage free memory 
typically done mark sweep copy activity 
linked lists gc algorithm pass element list marking potentially free ascertaining reachable program roots adding unreachable ones free list 
notice types sub lists memory block descriptor need inspected marked step mark sweep copy cycle turning process lg significant advantage 
vlist described require large blocks troublesome list consumed 
large parts unused list structure may garbage collected 
allocating large memory blocks difficult heap memory fragmented requiring costly de fragmentation fast functional lists hash lists deques variable length arrays processes performed frequently 
truncating lists garbage collection reducing list just size needed copying garbage collector problems avoided 
point vlist looks promising data structure 
order test viability basis practical functional language implementation interpreter created sub set slightly modified common lisp benchmarked 
main departure common lisp allowed infix operators 
interpreter details covered key design principles outlined 
lisp programs scanned simple parser converted vlist structures directly reflecting source structure 
optimizations performed 
benchmark tests extended block added list twice previous size 
functions written perform fundamental list operations car cdr cons reverse length nth 
arithmetic operations flow control functions function definition lambda defun added 
higher order function foldr written enable common list operations meaningfully benchmarked 
low cost indexing invited inclusion native infix operators small amount syntactic dressing allow writing meaning nth meaning return tail starting th position list 
complete interpreter including garbage collector written set classes simple ide provided allow programs developed interactively 
look feel developer interface similar ocaml 
benchmarking set simple benchmarks table written ocaml dialect lisp code examples listed fig 
ocaml versions compiled native byte optimizing compilers 
programs run interactively ide 
table contains benchmark results 
stack overflow ocaml list functions limited test lists elements 
ocaml windows runtime support provides time measurement ms resolution 
hand manipulate lists fit memory filter list elements executes error 
uses lisp dynamic scope function call pays price function call times overhead dynamic type checking apparent arithmetic performance 
functions reverse clone length append foldr built functions 
filter odd hybrid foldr interpreted filter function 
create test uses iterative interpreted function build list 
space integer list ocaml reported kb kb 
character list ocaml reported kb kb 
benchmarks notoriously difficult interpret 
speed space requirement differences suggest vlist considered seriously phil filter ocaml mod list filter filter defun filter foldr lambda funcall nil defun filter slow fib ocaml rec slow fib defun fig 

benchmark code examples alternative linked lists functional languages 
table 
benchmark tests test description create list create list initialize element common value create create list initiate unique value reverse reverse list clone create identical list existing append append list length compute length list filter odd return list odd list slow fib fib numbers exhaustive search function call intensive calc evaluates lengthy arithmetic intensive expression times table 
ocaml ms test create list create reverse clone append length filter odd slow fib calc gc prev fast functional lists hash lists deques variable length arrays prev prev dimensional vlist plist prev prev fig 

dimension vlist time constant associated random access individual elements vlist decreases growth ratio decreases 
size increment grows wasted space 
suppose size grows point block size new block considered dimensional array size new block arranged large block arranged block pointers blocks containing data 
arrangement depicted fig negligible impact cons cdr operations increasing random access times small constant time extra indirection 
list grows block required considered dimensional array entries 
block times larger previous random access time moderately large considered constant practical memory size 
notice average waste space tends constant recall index sub block allocated bits allow lists reasonably large 
dimensional arrangement index restricted bits allowing sub blocks implying integer data types elements stored character data types 
free bytes prev phil sub block data value 
structure overhead reduced just bytes sub block character types strings waste space restricted note gb bit environment need greater 
clearly garbage collection space allocation greatly helped arrangement 
blocks uniform size greater reducing problems memory fragmentation 
constant time garbage collection relaxed 
allocations sub block chunks garbage collection run respectable faster linked list data elements sub block 
thread safety functional programming naturally leads concurrent processing ability multi thread cons list extension essential 
seen earlier extensions list controlled state sub block 
multi thread environment race condition occur 
threads inspect decide cons simple insert location 
thread started activity context switched thread just thread test completed 
thread safe adding thread lock tl bit sub block atomic set bit test instruction test state 
tl normally zero 
thread wants update sets tests tl bit 
tl bit zero compared list pointer extended 
new block needed tl bit cleared activity started 
new element inserted location updated tl cleared 
tl bit set thread assumes conflict adds new block points back appropriate list tail sub block extended 
arrangement list thread safe occasionally optimal structure 

functional hash associations problem forming associations endemic programming languages 
modified vlist structure provide basis functional hash list insert lookup times approach standard chained hash table hash table doubling 
fig basic form vlist modified block contains portions data hash table form hash list 
time hash list grows data area hash table grow factor 
data element pair including list pointer entry normally list containing associated items hash table chain link pointer offset 
hash table portion set offsets block base chain associated items 
link hidden hash list behaves standard homogeneous list lists allowing standard list operations cons cdr assuming suitable hash function time new element cons ed hash list hash value key normally association pair computed 
offset value located corresponding hash table entry stored new hash list entry entry offset stored hash table entry fast functional lists hash lists deques variable length arrays prev prev fig 

hash table vlist prev creating standard chained hash table entries memory block 
search association little complicated accomplished constant time case degenerate list formation 
hash list may arbitrary tail hash list association hashing key 
hash value index block hash table chain followed match provided comparison function 
lies tail specified pointer equal list pointer return entry tail list 
match hash table entry zero follow block previous pointer repeat block list 
key hash value need recomputed 
list reached return empty list 
vlist probability finding association block higher block 
growth geometric lookup average constant times basic hash table lookup time 
turn governed hash table size number data entries lookup time chained hash tables document relationship 
knuth sedgewick notice structure fully functional persistent time penalty degenerate hash lists tail extended 
performance optimized allocating majority block hash table reducing actual entries grow 
duplicate entries tail returned list repeating search tail order maintained chaining sequence 
structure considered garbage collection friendly 
chain links offsets contained block safely ignored garbage collector 
naturally vlist concept create non functional hash tables 
common practice speed hash table implementations periodically doubling hash table size load factor increases 
entry re hashed copied new table high price pay 
alternative avoid growing hash table described 
shrinking efficient 
total load factor largest hash table block phil longer required table entries copied lower blocks 
re hashing required operation integrated deletes incremental 

arrays valuable wide range applications previous area described string manipulation buffers stacks queues randomized queues priority queues deques benefit 
carlsson demaine munro sedgewick hash array tree hat solution require copying part data structure resizing 
space overhead unused space proved proportional resizing may accomplished time addition deletion 
demonstrated cost constants improved copying avoided altogether 
vlist utilizes principles 
just infinite possible structures fig 
choosing equal sided dimensional sub block gives small time constants space waste proportional varying number dimensions side ratio gives different time constants space utilization 
suppose structure started 
initially blocks allocated pointers points sub block data locations 
data entries added second sub block created second entry pointer block created 
continues pointer entries filled 
structure repeated size blocks 
array header updated point new block updated point previous complete block 
notice append operation copying takes place array grows 
random accesses array shown previously take average time worst case time lgn 
worst case wasted space occurs new pointer block required 
previous size entries space size allocated sums increment example arrangement space grows proportionally explained reduced constant allowing dimensional blocks 
approaches hat benchmarked comparisons reported table 
results included versions different msb calculations 
algorithm performance critically dependent significant bit msb index computation 
modern computer architectures include leading trailing zero count instruction computation msb lsb indexes 
situations instructions available portability reasons exclude provides efficient alternative 
performance improved optimizing msb calculation 
set solutions faster msb lsb problem 
described briefly section 
notice applications arrays periodic size variations risk degenerate resize copying may appear solu fast functional lists hash lists deques variable length arrays parray prev length level tions 
performance benchmarks prev fig 

algorithm performance measured intel mhz mb memory ms win nt ms visual 
table times shown seconds benchmark run 
benchmark included appends array sequential probe elements random order probe element 
table entries test different msb computations 
prev table 
array comparison sec array append random sequential hat msb msb msb msb 
deque persistence vlist forms excellent basis functional non functional deques 
start structure fig double link blocks adding pointer accompany prev form 
access deque maintained front queue back phil sublist sublist fig 

persistent deques 
pair define sub list structure referred sublist illustrated fig 
elements added front deque consing front list contained sublist returning new sublist updated list 
retrieving item car list position back pointer moving item back update back pointer returning new sublist structure 
sub block block boundary passed available collection 
process proceeds nicely inserts performed structure 
cons works correctly forming branch path retrieval follow branch 
viable new branch sublist needs treated front existing operation covered shortly 
new block size computed differently vlist simply factor larger previous 
cause space grow retrieval rate equal insert rate 
new block created size fraction actual space front back 
arrangement blocks grow larger space grows inserts faster retrievals grow smaller retrievals faster inserts 
insert retrieval rates constant blocks containing queued elements 
individual element randomly accessed constant time 
insert retrieval constant time operations 
note structure yields non functional deques high space efficiency 
ideally functional deques offer persistence parts old deques accessible new ones derived 
kaplan tarjan okasaki show functional programming environment obtain deques may constant time 
concepts embodied development provide similar functionality 
catenation fast functional lists hash lists deques variable length arrays catenation appending list sublist 
routine slow approach copy appended list 
accomplished creating new data structure called comprises pointers elements blocks front back pointers sublist data structures front back 
branch represented structure linking new front sublist existing sublist 
see fig 
structure support deque operations base deque type support 
example cons performed deques 
front sublist pointer followed front element pointer equal greater sublist cons performed 
new sublist structure pointers allocated reflecting extension structure allocated pointing new sublist updated front pointer 
operations carried way achieves persistent 
slight change implementation notice sublist structures standard 
data structure constant time catenation achieved lists deques sub list selection 
cons retrieve operations proportional depth catenation 
program level sublist structure hidden appearing standard list deque 
base list type vlist defining operations allowed 
special functions directly internal structure need aware existence 

optimizing string data types adapted provide characteristics data type strings libraries 
applications strings tend small low overhead important space determinant 
modifications provide excellent storage structure strings 
efficient control variables size level pointer root tree node 
strings hand handled efficiently pointer string length resizing managed copy doubling constant extension 
length string corresponding size level derived 
integer arithmetic level msb length size shl shr length level level calculations take small constant time majority string manipulations insignificant required length suffices 
strings implemented just pointer length minimum constant overhead 
second performance space utilization may improved copy resizing small string sizes 
extra indirection avoided space may set closely match actual string length 
optimization allows phil class return pointer actual string 
requested array structure copied contiguous memory space pointer returned 
internally example setting string length negative signal state 

vlist deque hash list look promising solutions traditional functional programming problems giving significant speed gain space saving persistence 
described data structures implemented benchmarked experimental interpreter environment coded compared previous solutions 
outstanding task complete verification deques hash lists environment benchmarking alternative solutions functional non functional 
subject research 
fundamental change basic data structure lists requires solid characterization broad range actual application programs 
may unrecognized problems surprising benefits 
research needed 

msb lsb index computation problem computing msb lsb index provides interesting challenge satisfactory solutions apparently simple problems elusive 
developed compact solution derived fredman willard computation log 
computes lsb instructions branches multiplication 
implementation msb computation support constant time algorithm solves problem nicely lg number steps add conditional branching 
listing implementation solution labeled msb described shortly fig lsb algorithms fig 
cases represents input word 
performance basic algorithm improved significantly optimizing msb index computation demonstrated comparative benchmark results msb msb 
general removing conditional branches algorithm reduces pipeline stalls reducing constant sizes reducing code length speeding load times 
principles mind msb reorganized give faster functionally equivalent msb fewer steps 
msb provides solution uses conditional branches 
branches replaced property complement arithmetic zero minus results bits set index word length minus number leading zeroes 
step clears top bit shifting right position 
just msb top bits shifted word extracted subtracted 
bits zero bits result including leftmost bit set 
set left bit signifies bit positions zero shifted right appropriate bit result index 
shifted left amount allowing bits processed 
continues index computed 
benchmarking shows solution slightly slower msb msb 
fast functional lists hash lists deques variable length arrays msb carlsson demaine munro sedgewick new new new xff ff new new xf new new new return msb xff xf xc return msb fff return msb union int float float return fig 

msb index computation saving gained removing branches offset additional steps needed constant sizes 
modern processors built fast floating point unit exploited compute msb index efficiently 
recall floating point numbers represented normalized binary mantissa exponent exponent recording number positions mantissa moved right normalization index msb 
msb derives msb index simply converting floating point number extracting exponent 
surprisingly percent slower methods treated caution portability concern 
computation lsb index commences old trick set phil lsb lsb return const unsigned int const unsigned int kf xf kff xff ff count population kf kf return fig 

lsb index computation bits lsb clear bits 
problem counting number bits set 
lsb method analogous msb fewer steps required benefits small constants gained resulting fast algorithm uses shift add xor instructions 
alternative lsb uses tuned version count population algorithm achieve index instructions approximately time full scale constants offsetting benefit fewer instructions 
acknowledgments prof martin odersky christoph zenger 
des de programmation lamp epfl switzerland review draft valuable comments 
bobrow clark 
compact encoding list structures 
acm transactions programming languages systems oct 

computation significant set bit 
electrotechnical computer science conference slovenia volume pp 

carlsson demaine munro sedgewick 
arrays optimal time space 
workshop algorithms data structures pp 

clark 
list structure measurements algorithms encodings ph thesis 
technical report aug dept computer science carnegie mellon university 
clark green 
empirical study list structure lisp 
communications acm feb 
fast functional lists hash lists deques variable length arrays greenblatt 
lisp machine progress report 
technical report memo aug lab cambridge mass hansen 
compact list representation definition garbage collection system implementation 
communications acm 
kaplan tarjan 
persistent lists catenation recursive slowdown 
th annual acm symposium theory computing preliminary version acm press pp 

knuth 
art computer programming volume sorting searching nd ed 
addison wesley reading ma 
li hudak 
new list compaction method 
software practice experience feb 
okasaki 
purely functional random access lists 
functional programming languages computer architecture pp 

okasaki 
catenable double ended queues 
proceedings acm sigplan international conference functional programming icfp volume pp 

sedgewick 
algorithms rd ed 
addison wesley reading ma 
shao 
compiling standard ml efficient execution modern machines thesis 
technical report tr 
shao reppy appel 
unrolling lists 
conference record acm conference lisp functional programming pp 


algorithm hats hashed array trees 
dr dobb journal 
