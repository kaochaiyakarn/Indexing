event driven frp wan walid taha paul hudak department computer science yale university new haven ct usa taha hudak cs yale edu 
functional reactive programming frp high level declarative language programming reactive systems 
previous frp demonstrated utility wide range application domains including animation graphical user interfaces robotics 
frp elegant continuous time denotational semantics 
guarantees bounds execution time space making unsuitable embedded real time applications 
alleviate problem developed real time frp rt frp operational semantics permits formally guarantee bounds execution time space 
formally veri able compilation strategy new language rt frp imperative code 
new language called event driven frp frp tuned paradigm having multiple external events 
smaller rt frp features key construct allows compile language cient code 
language compiler generate code small robot controller runs pic micro controller 
formal speci cation compilation crafted clarity technical convenience describe implementation produces ecient code 
functional reactive programming frp high level declarative language programming reactive systems 
reactive system continually responds external stimuli 
frp successfully domains interactive computer animation graphical user interface design computer vision robotics control systems 
frp suciently highlevel domains frp programs closely resemble equations naturally written domain experts specify problems 
example domain control systems experience go traditional mathematical speci cation controller running frp code matter minutes 
frp implemented embedded language haskell provides guarantees execution time space programs diverge consume large funded nsf ccr nsf itr darpa dabt amounts space introduce unpredictable delays responding external stimuli 
applications frp programs fast real time applications careful frp programming informal reasoning best 
trying expand scope frp demanding settings identi ed subset frp called rt frp statically guaranteed programs require limited resources 
rt frp global clock state program updated clock ticks 
part program executed frequency 
key application domain interested micro controllers 
addition resource bounded hardware devices natural programming paradigm typical functional programming languages 
particular event driven 
systems event ects statically decidable part system state need propagate event system 
unfortunately rt frp designed concern mind 
addresses issue compiling variant rt frp called event driven frp frp 
variant rt frp global clock generalized set events 
framework clear need rt frp built notion time implement special case event stream treated clock 
di erent time bases necessarily linearly related general deal complex event driven periodic reactive systems natural ective manner 
frp suited programming interrupt driven micro controllers normally programmed assembly language dialect follows basic ideas frp example robocup challenge 
simple robot controller frp yale robocup team consists radio controlled robots overhead vision system tracking teams soccer ball central frp controller guiding team 
closed control loop 
relatively small system certain components developed low level languages 
particular interest controller running board robots 
speed sensor feedback increase decrease speed instructions coming central frp controller board controller determine exact signals sent motors 
robot pic micro controller execute code controls robot 
initially low level controller programmed specialized subset commercial compiler targeting pic exists 
written level controllers quite fragile important features design controller easily obscured 
reasoning combination main frp controller separate controllers non trivial 
problem exist controllers written frp subset thereof 
physical model robot wheels mounted common axis wheel driven independent motor 
simplicity focus wheel discuss interaction 
amount power sent motor controlled standard electrical engineering technique called pulse width modulation pwm varying voltage power rapidly switched 
percentage time power called duty cycle determines power transmission 
wheel monitored simple stripe detection mechanism frequently stripes observed infrared sensor faster wheel deemed moving 
simplicity assume wheel go direction 
computational model main goal controller regulate power sent motor maintain desired speed ds wheel 
control system driven independent interrupt sources increment decrement desired speed stripe occurs times full revolution wheel timer timer timers occur regular di erent intervals 
frequency timer higher timer 
register output determines state motor 
frp execution model presenting code controller basic features frp execution model need explained 
frp important concepts frp events behaviors 
events time ordered sequences discrete event occurrences 
behaviors values react events viewed time indexed signals 
frp behaviors change continuous time frp behaviors change value event occurs 
frp events mutually exclusive meaning events occur simultaneously 
decision avoids potentially complex interactions event handlers greatly simpli es semantics compiler 
occurrence event execution frp program proceeds distinct phases rst phase involves carrying computations depend previous state computation second phase involves updating state computation 
allow maximum expressiveness frp allows programmer insert annotations indicate phases particular change behavior take place 
source code ds init init timer stripe dc init timer ds xg count init timer output count target code hds ds output count hds ds output count hds ds output count hds ds output count timer hs dc dc dc dc ds dc dc output count hs dc dc output count stripe hs output count hs output count timer count count output count count output count fig 

simple robocup controller src frp controller presents frp controller target code produced compiler 
follows explain de nition ds dc count output detail 
desired speed ds de ned init construct viewed state machine changes state event occurs 
value ds initially incremented decremented occurs 
local variable capture value ds just event occurs 
current speed measurement initially incremented stripe detected stripe interrupt 
value inspected timer occurs point reset zero 
annotation means resetting carried rst phase activities triggered timer carried done second phase execution 
duty cycle dc directly determines amount power sent motor 
timer current speed compared desired speed ds recall reset timer second phase rst phase computations depend penultimate value completed 
wheel slow fast duty cycle incremented decremented 
additional conditions ensure value remains 
current position duty cycle maintained value count 
value incremented time timer occurs reset timer interrupts 
counts repeatedly 
actual signal going motor determined value output 
output count dc larger dc power sent motor speed 
note output updated count dc changes value 
compiler produces restricted form target code group event handlers 
event handler responsible particular event source consists sequences assignments phases 
event occurs assignment sequences executed turn update values behaviors 
highlights source program easy read concise 
minor extension subset frp inherits denotational semantics 
show simple operational semantics immediate program resource bounded 
compiler generates resource bounded target code 
able substantially enhance target code stage optimization process 
contribution organization key contribution identifying subset frp compiled clearly ecient resource bounded code suitable programming event driven applications 
compilation strategy optimization techniques interesting 
section presents syntax semantics frp 
section introduces target language 
section de nes compilation strategy frp imperative code 
section explains optimization techniques 
syntax semantics frp notation write hf ng sequence hf fn omit superscript ng obvious context 
write ff ng ff set ff 
fn write hx xn sequence non reactive behaviors hd reactive behaviors init event handlers fi phases behaviors programs fx fv fv fxg fv fv hd fv fv init fi fv fxg fig 

raw syntax frp de nition free variables hx xn write concatenation sequences write assuming 
write prim hc applying primitive function arguments hc results syntax frp de nes syntax frp notion free variables 
categories variables constants primitive functions respectively 
function symbol operator write category event names drawn nite set di erent target platforms events may di erent incarnations os messages interrupts case micro controllers 
simplicity frp event carry value occurrence 
category stands empty string 
event occur event handler variable de ned program non reactive behavior directly updated event 
behavior variable constant function application non reactive behaviors 
reactive behavior init fi initially value changes current value event occurs 
note bound old value occur free mentioned earlier execution frp program happens phases 
depending change value takes place rst second phase 
program just set mutually recursive behavior de nitions 
operational semantics store maps variables values fx 
de nes operational semantics frp program means judgments 
judgments read follows fx bg prim hc hd init fi dg fi dg init fi init init fi init init fx fx fx 
fx fig 

operational semantics frp event behavior yields 
event behavior updated event behavior yields updated shorthand event program yields store updated note di erence phase stepping phase stepping rst returns updated state second returns old state 

fx 
cg 

fs 
prim hc hd 

fg 
fx 
cg 
fx 

fx 
cg 

fi 



fig 

operational semantics imperative language pic need programmed assembly language commercial compiler takes input restricted compile frp simple imperative language call imperative language code trivially generated 
syntax syntax de ned follows assignment sequences hx programs program just collection event handler function de nitions name function 
function body split consecutive parts called rst phase second phase respectively 
idea interrupt occurs rst associated executed generate store matching store yielded source program associated executed prepare store event 
operational semantics gives operational semantics judgments read follows 
store evaluates 

executing assignment sets updates store 
event occurs program updates store rst phase second phase 
obvious operational semantics deterministic 
compilation compilation strategy described set judgments 
judgments read follows depend variable updated rst phase event handler 
second phase event handler 
compiles 
object program allocating variable behavior de ned source program allocate temporary variable reactive behavior named temporary variables needed compiling certain recursive de nitions 
compilation relation clearly decidable 
note program uniquely determine just speci cation compiler deterministic allows compilers implemented 
prove satisfying behave way 
note cyclic data dependency frp program able nd restriction set possible events known compile time events mutually exclusive events active time allows perform check 
target code uses xed number variables nite number assignments loops dynamically allocate space obvious target code executed bounded space time 
compilation examples workings compilation relation best illustrated examples 
consider source program init fi init fi depends depends depend di erent events 
event cyclic dependency 
program compiled program hx hx hx hx consider source program init fi init fi fv fxg fx hx hi fg fx dg fx init fi dg hg fx init fi hg fi fx init hg hi fg fx dg fx init fi dg hg fx init fi hg fi fx init hg fx ai pg fv fx ai fig 

compilation frp mutually dependent values updated di erent phases 
phase dependency graph acyclic 
program compiles acceptable compilation hx hx de nition init fi code rejected 
updated phase program init fi init fi possible translation hx hx concrete syntax code look void void correctness event occurs behavior frp program updated new value prove compiler correct need show executing event handler corresponding variable target program value concept useful formalizing intuition de nition state program written state store de ned state fx 
state fx 
state 
state fx fx state fx bg state state state hd prim state init show compilation correct sense updating frp program change translation source program generates result target program theorem compilation correctness 

state 
state 
proof theorem omitted focuses practical theoretical results 
fv lv fv lv fv fv lv rv rv fig 

optimization target code optimization compiler described provably correct generates na code leaves lot room optimization 
applying known techniques optimizing sequential imperative programs improve target code advantage knowledge compiler 
particular implemented compiler 
ine ective code elimination de nition source program ected particular event true reactive behavior reacts non reactive behavior variables fv ected obvious ected determined statically 
ected code updating event handler eliminated 
optimization helps reduce code size response time 

temporary variable elimination value temporary variable observed user system 
need keep eliminated program transformations 
technique reduces memory usage response time 
de ne right hand side variables written rv collection assignments left hand side variables written lv collection assignments rv rv hx fv rv rv rv rv lv lv hx fx optimizations carried stages stage consists sequence particular kind transformations 
stage keep applying transformation target code till applied 
purpose stage eliminate unnecessary updates variables 
update eliminated step 
code produced compiler property phase event handler hold value 
stage optimization preserves property 
stage safely replace occurrences right hand side assignment phase reduces usage helps stage 
stage stage simple easily write compiler directly generates code stage 
proof correctness partially optimizing compiler complicated 
choose stage stage separate optimization processes 
call transformation stage resemblance special move chess event handler updates phase assigns phase certain conditions update phase assign phase 
transformation reduces right hand side occurrences making easier eliminated stage 
note correctness transformation non trivial 
value temporary variable need keep 
stage 
formally de nes optimization 
source program write transformed step stage write transformed zero steps stage write furthest get applying stage transformations 
write compiles optimized hds ds hds dsi hds ds hds dsi timer hs dc dc dc dc ds dc dc output count hs dc dci stripe hs hs timer count count output count counti hds ds hds dsi hds ds hds dsi timer hs dc dc dc dc ds dc dc output count hs dc dci stripe hs hs timer count count output count counti hds ds hds dsi hds ds hds dsi timer hdc dc dc dc ds dc dc output count hs dc dci stripe hs hs timer count count output count counti hds ds hi hds ds hi timer hdc dc dc dc ds dc dc output count hi stripe hs hi timer count count output count hi fig 

optimization simple robocup controller example presents intermediate nal results optimizing src program 
stage optimization generates unnecessary updates output eliminated 
stage gets rid righthand side temporary variables phase change ds ds ds ds result stage rearrange updating get able remove temporary variables stage resulting optimized nal code 
discussion related refer reader general functional programming reactive especially real time applications 
frp slightly extended subset frp 
relation precise partial function translates frp frp lift hd ng ng init fi fi init fi fi fx fx fi foldr hx ng hx ng fx ng fv fxg key facility missing frp ability mix operations exactly reason total 
experience frp shows useful feature extending frp functionality interesting 
languages proposed synchronous data ow notion computation including signal lustre esterel speci cally designed control real time systems 
signal oriented language central concept signal time ordered sequence values 
analogous sequence values generated execution frp program 
lustre functional synchronous data ow language rooted notion sequence 
esterel synchronous imperative language devoted programming control dominated software hardware reactive systems 
compilers exist translate esterel programs automata electronic circuits 
languages similar frp subtle di erences signi cance deserves investigation 
guarantee bounded space time languages consider recursion 
language synchronous kahn networks developed extension lustre adds recursion higher order programming 
extension yields large increase expressive power sacri ces 
rt frp shown syntactic restrictions type system possible recursion guarantee resource bound 
expect able extend frp rt frp style recursion 
scr software cost reduction requirements method formal method tables specifying requirements safety critical software systems 
scr supported integrated suite tools called scr includes consistency checker detecting formedness errors simulator validating speci cation model checker checking application properties 
scr successfully applied large projects expose errors requirements speci cation 
noticed tabular notation scr specifying system behaviors similar avor frp interesting translate frp scr leverage scr toolset nd errors program 
frp systematic approaches program generation example metaml continually considered implementation nal program generation phase compiler 
far elementary technique generation programs 
number practical reasons code generate involve generation new variable names apparent need metaml hygiene fresh name generation mechanism 
metaml currently support generating code languages metaml 
target language simple type system essentially instructions generated type 
words assuring type safety generated code key feature metaml signi cant issue 
standard way metaml stage denotational semantics 
denotational semantics exists frp clear staging introduce imperative implementation behaviors natural way 
plan pursue direction 
alternative approach semantics program generation appropriate monad harrison kamin 
identi ed monad point interesting 
core rst order subset frp showed compiled natural sound manner simple imperative language 
implemented compilation strategy haskell 
prototype produces code readily accepted pic compiler 
compared previous rt frp focus shifted integration lambda language scrutiny feasibility implementing language program real event driven systems 
immediate intend extend language constructs especially behavior switching investigate correctness basic optimizations generated programs continue development compiler 

gerard berry laurent 
esterel synchronous programming language mathematical semantics 
roscoe brookes editors winskel editors seminar concurrency volume lect 
notes computer science pages 
springer verlag 

gerard berry esterel team 
esterel system manual 
centre de math ematiques appliqu ees ecole des mines de paris inria march 
available www inria fr meije esterel 

paul caspi halbwachs halbwachs nicolas pilaud john plaice 
lustre declarative language programming synchronous systems 
symposium principles programming languages popl january 

paul caspi 
synchronous kahn networks 
international conference functional programming 
acm sigplan may 

antony courtney conal elliott 
genuinely functional user interfaces 
haskell workshop 

conal elliott paul hudak 
functional reactive animation 
international conference functional programming pages june 

john peterson haskell non strict purely functional language 
technical report yaleu dcs rr department computer science yale university mar 
world wide web version haskell cs yale edu haskell report 

thierry gautier paul le guernic besnard 
signal declarative language synchronous programming real time systems 
gilles kahn editor functional programming languages computer architecture volume lect notes computer science edited goos hartmanis pages 
springer verlag 

william harrison samuel kamin 
modular compilers monad transformers 
proceedings ieee international conference computer languages 

heitmeyer 
applying practical formal methods speci cation analysis security properties 
proc 
information assurance computer networks lncs st petersburg russia may 
springer verlag 

heitmeyer james kirby bruce labaw ramesh bharadwaj 
scr toolset specifying analyzing software requirements 
proc 
computeraided veri cation vancouver canada 

paul hudak 
haskell school expression learning functional programming multimedia 
cambridge university press new york 

microchip technology pic datasheet 
available line www microchip com 

john peterson gregory hager paul hudak 
language declarative robotic programming 
international conference robotics automation 

alastair reid john peterson greg hager paul hudak 
prototyping realtime vision systems experiment dsl design 
proceedings international conference software engineering may 

robocup ocial site 
www robocup org 

walid taha paul hudak wan 
directions functional programming real time applications 
thomas henzinger christoph kirsch editors proc 
international workshop lncs pages tahoe city ca usa october 
springer verlag 

walid taha tim sheard 
multi stage programming explicit annotations 
proceedings symposium partial evaluation semantics program manipulation pages 
acm sigplan 

wan paul hudak 
functional reactive programming rst principles 
proceedings acm sigplan conference programming language design implementation pldi pages vancouver bc canada june 
acm acm press 

wan walid taha paul hudak 
real time frp 
proceedings sixth acm sigplan international conference functional programming florence italy september 
acm 
