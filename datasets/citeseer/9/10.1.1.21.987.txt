directory service configuring high performance distributed computations steven fitzgerald ian foster carl kesselman gregor von laszewski warren smith steven tuecke www globus org high performance execution distributed computing environments requires careful selection configuration computers networks resources protocols algorithms applications 
selection configuration turn require access accurate date information structure state available resources 
unfortunately standard mechanism exists organizing accessing information 
consequently different tools applications adopt ad hoc mechanisms compromise portability performance default configurations 
propose solution problem metacomputing directory service provides efficient scalable access diverse dynamic distributed information resource structure state 
define extensible data model represent information required distributed computing scalable high performance distributed implementation 
data representation application programming interface adopted lightweight directory access protocol data model implementation new 
example globus distributed computing toolkit illustrate availability directory service enables development flexible efficient distributed computing services applications 
high performance distributed computing requires careful selection configuration computers networks application protocols algorithms 
requirements arise traditional distributed computing configuration problems typically avoided standard default protocols interfaces 
situation quite different traditional high performance computing systems usually homogeneous configured manually 
high performance distributed computing defaults manual configuration acceptable 
defaults result acceptable performance manual configuration requires low level knowledge remote systems average programmer possess 
need information rich approach configuration decisions compile time link time run time information structure state system program run 
example way networking experiment illustrates difficulties associated configuration high performance distributed systems 
way composed massively parallel computers workstations archival storage systems visualization devices 
information sciences institute university southern california marina del rey ca mathematics computer science division argonne national laboratory argonne il resources interconnected internet dedicated mb sec ip atm network 
environment applications run single multiple parallel computers different types 
optimal communication configuration particular situation vendor optimized communication protocols computer tcp ip computers atm network available 
significant amount information available select configurations example ffl network interfaces ip addresses atm network internet 
ffl raw bandwidth atm network internet higher 
ffl atm network currently available 
ffl pairs nodes vendor protocols access fast internal networks 
ffl pairs nodes tcp ip 
additional information required resource location service select optimal set resources machines available way time 
experience configuration decisions difficult determine right information available 
information easily available lack access hindered application optimization 
furthermore making information available useful fashion nontrivial problem information required configure high performance distributed systems diverse scope dynamic value distributed network detailed nature 
article propose approach design high performance distributed systems addresses need efficient scalable access diverse dynamic distributed information structure state resources 
core approach definition implementation metacomputing directory service mds provides uniform interface diverse information sources 
show simple data representation application programming interface api lightweight directory access protocol ldap meet requirements uniformity extensibility distributed maintenance 
introduce data model suitable distributed computing applications show model able represent computers networks interest 
novel implementation techniques service address unique requirements high performance applications 
examples globus distributed computing toolkit show mds data guide configuration decisions realistic settings :10.1.1.25.8254
expect techniques equally useful systems support computing distributed environments legion netsolve condor nimrod prm apples heterogeneous implementations mpi :10.1.1.29.4786:10.1.1.40.5011
principal contributions article ffl new architecture high performance distributed computing systems information service called metacomputing directory service ffl design directory service addressing issues data representation data model implementation ffl data model able represent network structures commonly distributed computing systems including various types supercomputers ffl demonstration information provided mds guide resource communication configuration distributed computing toolkit 
rest article organized follows 
section explain requirements distributed computing information infrastructure satisfy propose mds response requirements 
describe representation section data model section implementation section mds 
section demonstrate mds information globus 
conclude section suggestions research efforts 
designing metacomputing directory service problem organizing providing access information familiar computer science potential approaches problem ranging database systems simple network management protocol snmp 
appropriate solution depends ways information produced maintained accessed 
requirements requirements shaped design information infrastructure distributed computing applications 
requirements expressed quantitative terms scalability performance subjective expressiveness deployability 
performance 
applications interest frequently operate large scale hundreds processors demanding performance requirements 
information infrastructure permit rapid access frequently configuration information 
acceptable contact server item caching required 
scalability cost 
infrastructure scale large numbers components permit concurrent access entities 
time organization permit easy discovery information 
human resource costs cpu cycles disk space network bandwidth creating maintaining information low individual sites total 
uniformity 
goal simplify development tools applications data guide configuration decisions 
require uniform data model application programming interface api common operations data represented model 
aspect uniformity standard representation data common resources processors networks 
expressiveness 
require data model rich represent relevant structure distributed computing systems 
particular challenge representing characteristics span organizations example network bandwidth sites 
extensibility 
data model define incomplete 
ability incorporate additional information important 
example application facility record specific information behavior observed bandwidth memory requirements subsequent runs 
multiple information sources 
information require may generated different sources 
consequently information infrastructure integrate information multiple sources 
dynamic data 
data required applications highly dynamic example network availability load 
information infrastructure able data available timely fashion 
flexible access 
require ability read update data contained information infrastructure 
form search capability required assist locating stored data 
security 
important control allowed update configuration data 
sites want control access 
deployability 
information infrastructure useful broadly deployed 
current case require techniques installed maintained easily sites 
decentralized maintenance 
possible delegate task creating maintaining information resources sites resources located 
delegation important scalability security reasons 
approaches instructive review respect requirements various incomplete approaches information infrastructure distributed computing systems 
operating system commands uname provide important information particular machine support remote access 
snmp network information service nis permit remote access defined context ip protocol suite add significant overhead high performance computing environment 
furthermore snmp define api preventing component software architectures 
high performance computing systems pvm mpich provide rapid access configuration data placing data machine names network interfaces files maintained programmer called 
lack support remote access means replicated host complicating maintenance dynamic update 
domain name service dns provides highly distributed scalable service resolving internet addresses values ip addresses general extensible 
furthermore update strategies designed support values change relatively rarely 
standard defines directory service provide extensible distributed directory services wide area environment 
directory service service provides read optimized access general data entities people corporations computers 
provides framework principle organize information interest 
complex requires iso protocols heavyweight asn encodings data 
reasons widely 
lightweight directory access protocol streamlined version directory service 
removes requirement iso protocol stack defining standard wire protocol ip protocol suite 
simplifies data encoding command set defines standard api directory access 
ldap seeing wide scale deployment directory service choice world wide web 
disadvantages include moderate performance see section limited access external data sources rigid approach distributing data servers 
reviewing various systems see way incomplete failing address types information needed build high performance distributed computing systems slow defining api enable uniform access service 
reasons defined metacomputing information infrastructure integrates existing systems providing uniform extensible data model support multiple information service providers uniform api 
metacomputing directory service analysis requirements existing systems leads define call metacomputing directory service mds 
system consists distinct components 
representation data access directory structure data representation api defined ldap 

data model data model able encode types resources highperformance distributed computing systems 

implementation set implementation strategies designed meet requirements performance multiple data sources scalability 
provide details components sections 
illustrates structure mds role high performance distributed computing system 
application running distributed computing environment access information system structure state uniform api 
information obtained mds client library may access variety services data sources servicing query 
object classes dit api metacomputing system application mds client library snmp nis ldap nws text file overview architecture metacomputing directory service representation mds design adopts data representations api defined ldap directory service 
choice driven considerations 
ldap data representation extensible flexible ldap play significant role web systems 
expect wide deployment ldap information services familiarity ldap data formats programming existence ldap directories useful information 
note ldap representations api constrain standard ldap implementations 
explain section requirements high performance distributed computing applications require alternative implementation techniques 
ldap provides attractive interface base implementation 
rest section talk mds representation representation comes directly ldap turn borrows representation 
representation related information organized defined collections called entries 
mds contains entries representing instance type object organization person network computer 
information entry represented attributes consisting name corresponding value 
attributes associated particular entry determined type object entry represents 
type information encoded mds associating object class entry 
describe entries named attributes associated objects 
naming mds entries mds entry identified unique name called distinguished name 
simplify process locating entry mds entries organized form hierarchical tree structured name space called directory information tree dit 
distinguished name entry constructed specifying entries path dit root entry named 
component path forms distinguished name identify specific dit entry 
enable require dit entry children entry attribute specified priori value distinguish siblings 
representation allows attribute disambiguate names 
entry uniquely named list attribute names values identify ancestors root dit 
example consider mds distinguished name hn dark mcs anl gov ou mcs argonne national laboratory globus components distinguished name listed little endian order component corresponding root dit listed 
distinguished name abbreviated attribute names typically 
example names distinguishing attributes host name hn organizational unit ou organization country 
country entry root dit host entries located beneath organizational unit level dit see 
addition conventional set country organizational entries anl usc incorporate entry pseudo organization named globus distinguished names define clash defined purposes 
object classes dit entry type called object class 
object class entry defines attributes associated entry type values attributes may contain 
example shows definition object classes shows values associated particular host 
object class definition consists parts parent class list required attributes list optional attributes 
subclass section object class definition enables simple inheritance mechanism allowing object class defined terms extension existing object class 
contain may contain sections specify required optional attributes entry object class 
attribute name type attribute value 
set attribute types extensible core set defined including case insensitive strings cis distinguished names dn 
inherits object class 
means entry entry type contains attributes required workstation workstation workstation workstation ibm sp argonne national laboratory isi usc california illinois ou isi mcs division anl ou mcs nn mcs lan lan lan wan hn dark mcs anl gov dark cold sunny hot hn cold mcs anl gov ian gregor steve warren carl steve cn ian foster cn gregor von laszewski cn warren smith cn steve tuecke ethernet switch 
hn sp node mcs anl gov hn sp node mcs anl gov nn sp switch nn sp ethernet usc nn wan globus 
cn carl kesselman cn steve fitzgerald subset dit defined mds showing organizational nodes globus anl usc organizational units isi mcs number people hosts networks 
class attributes defined contain section 
administrator attribute inherited 
entry may optionally contain attributes parent may contain section 
notice administrator attribute contains distinguished name 
distinguished name acts pointer linking host entry person entry representing administrator 
careful confuse link part entry relationships represented dit entry attributes 
dit thought separate structure organize arbitrary collection entries particular enable distribution entries multiple physical sites 
distinguished names attribute values enables construct complex relationships trees dit 
ability define complex structures essential purposes distributed computing structures naturally represented graphs 
data model mds representation particular purpose define data model information interest maintained 
data model specify dit hierarchy object classes define type entry 
upper levels dit mds see typical ldap directory structures looking similar organization multinational corporations 
root node object class country place organization organizational unit division department entries 
entries representing people computers placed appropriate organizational units 
representation computers networks central effective mds focus issue section 
object class object class subclass subclass top contain contain hostname cis administrator dn type cis vendor cis may contain model cis manager dn cis provider dn cis technician dn description cis may contain documentation cis dn cis cis cis cis simplified versions mds object classes representing networks computers adopt framework representing networks introduced rfc starting point representation mds 
rfc framework provides network centric view computers accessible networks connected 
require representation networks computers allows answer questions ffl computers network 
ffl latency computers 
ffl protocols available computers 
answering questions require access information networks questions posed perspective computational resource 
questions 
data model reflects perspective 
high level view dit structure mds shown 
indicated people hosts direct children organizations located 
example distinguished name hn dark mcs anl gov ou mcs argonne national laboratory globus identifies computer administered mathematics computer science mcs division argonne national laboratory 
communication networks explicitly represented dit children organization 
example distinguished name dn hn dark mcs anl gov ou mcs argonne national laboratory globus 
administrator cn john smith ou mcs argonne national laboratory globus 
hostname dark mcs anl gov type sparc vendor sun model sparcstation sunos sample data representation mds computer nn mcs lan ou mcs argonne national laboratory globus represents local area network mcs 
distinguished name identifies instance object 
attribute values object provides information physical network link link protocol atm ethernet network topology bus ring type physical media copper fiber 
shall soon see logical information network protocol specified object associated object 
networks span organizations represented placing object higher dit 
networks hosts connected objects hosts connected network interfaces network interfaces connected networks 
network interface object represents physical characteristics network interface interface speed hardware network address bit ethernet address case ethernet 
network interfaces appear hosts dit network interface associated network attribute value distinguished name pointing object 
reverse link exists object back interface 
illustrate relationship objects consider configuration shown 
configuration consists ibm sp parallel computer workstations located mcs 
sp networks internal high speed switch ethernet workstations connected ethernet 
sp ethernet workstation ethernet connected router choose represent single network 
alternative higher fidelity mds representation capture fact interconnected ethernets 
mds representation shown 
host network configuration appear dit directly entry representing mcs argonne national laboratory 
note individual sp nodes children mcs 
somewhat unexpected representation consequence sp architecture node fully featured workstation potentially allowing login 
representation mds captures dual nature sp parallel computer switch network object collection workstations 

sp workstations argonne national laboratory configuration comprising networks computers discussed objects located dit objects 
note network interface entry 
entry corresponds different physical network connection 
case sp node network interfaces high speed switch ethernet 
see distinguished names complete representation linking network interface network object 
logical views images point described representation physical network essentially link level aspects network characteristics network interface cards hosts plug 
physical network may support logical views may need associate additional information logical views 
example single network accessible different protocol stacks ip novell ipx vendor provided libraries mpi 
associated protocols distinct network interface performance information 
additionally partition created containing subset available computers associated object scheduling information 
rfc framework introduces valuable concept images mechanism representing multiple logical views physical network 
apply concept data model 
physical networks represented object classes network images represented object classes 
image object class contains new information associated logical view distinguished name pointing relevant physical object 
addition physical object distinguished name pointers images refer 
example may ip ipx protocols single ethernet interface card 
represent mds creating objects 
image object represent ip network contain ip address interface pointer back object class representing ethernet card 
second image object contain ipx address distinguished name pointing back entry ethernet card 
object include distinguished names interface images 
structure network images parallels corresponding physical networks ou mcs mcs lan sp switch 
sp node workstation workstation sp node nin nin nin nn hn hn mds representation configuration depicted showing host hn network nn network interface nin objects 
dashed lines correspond pointers represented distinguished name attributes exception network interfaces attached host need appear image 
see consider case ibm sp 
construct network image represent parallel computer view machine ibm proprietary message passing library communication 
protocol ethernet image network contain images representing ethernet card 
note produce network image sp representing ip protocols 
view may include images switch ethernet network interfaces 
questions revisited stage gone quite deeply representation computers networks far issue motivated mds design configuration highperformance distributed computations 
see mds information revisit questions posed section respect multiple computers way ffl network interfaces ip addresses atm network internet 
host ip address atm network looking pointing link protocol attribute value atm 
interface find representing ip network ip address stored attribute object 
ffl raw bandwidth atm network internet higher 
atm network currently available 
raw bandwidth atm network stored way object 
information availability atm network maintained object 
ffl pairs nodes vendor protocols access fast internal networks 
pairs nodes tcp ip 
nodes communicate vendor protocol point objects belong object 
note definition mds representation api data model means information obtained single mechanism regardless computers application runs 
implementation discussed information represented mds shown information answer questions system configuration 
turn attention mds implementation 
data model defined completely ldap framework principle adopt standard ldap implementation 
implementation uses wire protocol distributed collection servers server responsible entries located complete subtree dit 
approach suitable loosely coupled distributed environment significant drawbacks high performance environment ffl single information provider 
ldap implementation assumes information dit subtree provided single information provider 
ldap servers allow alternative backend mechanisms storing entries backend entries dit subtree 
restricting attributes information provider complicates design mds data model 
example ip address associated network interface image provided system call network bandwidth available interface provided service network weather service nws :10.1.1.46.3287
ffl client server architecture 
ldap implementation requires round trip network communication ldap access 
frequent access mds prohibitively expensive 
need mechanism mds data cached locally timely response 
ffl scope data 
ldap implementation assumes piece information may point network constraints access control 
efficient implementation attribute update obtained limit locations attribute values accessed 
scope helps determine information propagated information providers information safely cached 
note drawbacks relate ldap implementation api 
adopt ldap api mds modification 
furthermore dit subtrees contain information adversely affected limitations pass api calls straight existing ldap implementation 
general mds needs specialized implementation ldap api meet requirements high performance multiple information providers 
basic difference mds implementation standard ldap implementations allow information providers specified attribute basis 
referring example provide ip address interface snmp current available bandwidth nws name machine interface card connected ldap 
specification protocol entry attribute stored object class metadata entry 
metadata entries stored mds accessed ldap protocol 
addition specifying access protocol attribute mds object class metadata contains time live ttl attribute values update scope attribute 
ttl data enable caching ttl indicates attribute value cached ttl gamma indicates data constant 
positive ttl values determine amount time attribute value allowed provided cache refreshing 
update scope attribute limits readers updated attribute value 
initial implementation considers update scopes process computation global 
process scope attributes accessible process writer computation scope attributes accessed process single computation global scope attributes accessed node process network 
mds applications globus review briefly ways mds information high performance distributed computing 
focus applications globus infrastructure toolkit providing suite low level mechanisms designed implement range higher level services :10.1.1.25.8254
mechanisms include communication authentication resource location resource allocation process management form mds information infrastructure 
globus toolkit designed configuration problem mind 
attempts provide components interfaces allow higher level services manage low level mechanisms applied 
example consider problem referred earlier selecting network interfaces communication protocols executing communication code heterogeneous network 
globus communication module library called nexus allows user specify application communication operations single notation regardless target platform nexus api library language layered top api 
run time nexus implementation configures communication structure application selecting communication link nexus construct communication method communications link 
making selection particular pair processors nexus uses mds information determine low level mechanisms available processors 
selects mechanisms currently basis built rules atm better internet rules dynamic information atm current load low programmer specified preferences internet believe reliable supported principle 
result application source code run unchanged different environments selecting appropriate mechanisms case 
method selection mechanisms way testbed permit applications run diverse heterogeneous virtual machines 
example virtual machine connecting ibm sp sgi challenge computers atm internet networks nexus different protocols ibm proprietary mpl sp shared memory challenge tcp ip aal computers selected atm internet network interfaces depending network status 
application mds information investigating resource location 
resource broker basically process supports specialized searches mds information 
incorporate search capabilities mds servers plan construct resource brokers construct maintain necessary indexes querying mds periodically obtain upto date information 
summary argued complex heterogeneous dynamic nature high performance distributed computing systems requires information rich approach system configuration 
approach tools applications rely defaults programmer supplied knowledge configuration choices 
base choices information obtained external sources 
goal enabling information rich configuration designed implemented metacomputing directory service 
mds designed provide uniform efficient scalable access dynamic distributed diverse information structure state resources 
mds defines representation ldap data model capable representing various parallel computers networks implementation uses caching strategies meet performance requirements 
experiments conducted globus toolkit particularly context way show mds information effect practical situations 
currently deploying mds gusto distributed computing testbed extending additional globus components mds information configuration purposes 
directions immediate investigation include expanding set information sources supported evaluating performance issues applications developing optimized implementations common operations 
longer term interested sophisticated applications source routing resource scheduling recording application generated performance metrics 
acknowledgments gratefully acknowledge contributions craig lee steve schwab paul design implementation globus components 
supported defense advanced research projects agency contract mathematical information computational sciences division subprogram office computational technology research department energy contract eng 
abramson sosic giddy hall 
nimrod tool performing parameterised simulations distributed workstations 
proc 
th ieee symp 
high performance distributed computing 
ieee computer society press 
berman wolski schopf shao :10.1.1.40.5011
application level scheduling distributed heterogeneous networks 
proceedings supercomputing 
acm press 
butler lusk 
monitors message clusters parallel programming system 
parallel computing april 
henri casanova jack dongarra :10.1.1.29.4786
netsolve network server solving computational science problems 
technical report cs university tennessee november 
defanti foster papka stevens 
overview way wide area visual supercomputing 
international journal supercomputer applications 
foster geisler kesselman tuecke 
managing multiple communication methods high performance networked computing systems 
journal parallel distributed computing 
appear 
foster geisler smith tuecke 
software infrastructure high performance distributed computing experiment 
proc 
th ieee symp 
high performance distributed computing pages 
ieee computer society press 
foster kesselman :10.1.1.25.8254
globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
appear 
foster kesselman tuecke 
nexus approach integrating multithreading communication 
journal parallel distributed computing 
geist beguelin dongarra jiang manchek sunderam 
pvm parallel virtual machine user guide tutorial network parallel computing 
mit press 
grimshaw weissman west jr approach combining parallel processing heterogeneous distributed computing systems 
journal parallel distributed computing 
gropp lusk skjellum 
high performance portable implementation mpi message passing interface standard 
parallel computing 
reynolds 
technical overview directory services protocol 
rfc fy 
howes smith 
ldap application program interface 
rfc 
litzkow mutka 
condor hunter idle workstations 
proc 
th intl conf 
distributed computing systems pages 
clifford neumann santosh rao 
prospero resource manager scalable framework processor allocation distributed systems 
concurrency practice experience 
reed smirni 
frontier interactive closed loop performance steering 
proceedings icpp workshop challenges parallel processing pages august 
reynolds 
executive directory services protocol 
rfc 
rose 
simple book 
prentice hall 
gregor von laszewski 
parallel data assimilation system implications metacomputing environment 
phd thesis syracuse university december 
richard wolski :10.1.1.46.3287
dynamically forecasting network performance network weather service 
technical report tr cs san diego october 
howes 
lightweight directory access protocol 
rfc 
draft standard 

