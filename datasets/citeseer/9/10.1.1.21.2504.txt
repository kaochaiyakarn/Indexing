skyline operator stephan nyi donald kossmann konrad universit passau technische universit nchen passau germany nchen germany lastname db fmi uni passau de kossmann tum de propose extend database systems skyline operation 
operation filters set interesting points potentially large set data points 
point interesting dominated point 
example hotel interesting somebody traveling hotel cheaper closer beach 
show sql extended pose skyline queries evaluate alternative algorithms implement skyline operation show operation combined database operations join top 
suppose going holiday looking hotel cheap close beach 
unfortunately goals complementary hotels near beach tend expensive 
database system travel agents unable decide hotel best interesting hotels 
interesting hotels worse hotel dimensions 
call set interesting hotels skyline 
skyline final decision weighing personal preferences price distance beach 
computing skyline known maximum vector problem ps 
term skyline graphical representation see 
formally skyline defined points dominated point 
point dominates point better dimensions better dimension 
example hotel price distance miles dominates hotel price distance miles 
shows skyline cheap hotels near beach sample set hotels 
travel agency application skyline operation useful 
clearly applications area decision support finding low salary 
skyline operation useful database visualization 
skyline manhattan instance computed set buildings high close hudson river 
words building dominates building higher closer river position buildings seen 
shown 
nice properties skyline set monotone scoring function scoring function skyline 
words matter weigh personal preferences price distance hotels find favorite hotel skyline 
addition point skyline exists monotone scoring function maximizes scoring function 
words skyline contain hotels favorite 
mentioned earlier skyline operation studied previous ps 
assumes set points fits memory set result query join 
show skyline operation integrated database research supported german national research foundation contract dfg ke distance beach miles price skyline hotels skyline manhattan system 
describe possible sql extensions order specify skyline queries 
evaluate alternative algorithms compute skyline clear original algorithm ps terrible performance database context 
briefly discuss standard index structures trees trees exploited evaluate skyline queries 
addition show skyline operation interact query operations joins group top discuss related give suggestions 
sql extensions order specify skyline queries propose extend sql statement optional sky line clause follows select 


group 
having 
skyline distinct min max diff dm min max diff order dm denote dimensions skyline price distance beach 
min max diff specify value dimension minimized maximized simply different 
example price hotel minimized min annotation rating maximized max annotation 
skyline manhattan example buildings different coordinates seen may part skyline result dimension listed clause query annotation 
specifies deal duplicates described 
semantics skyline clause straightforward 
skyline clause executed select 


group 
having part query clause possibly clauses follow top ck 
clause selects interesting tuples tuples dominated tuple 
extending definition tuple pk pk pl pl pm pm pn dominates tuple qk qk ql ql qm qm qn skyline query skyline min dk max dl diff conditions hold pi qi pi qi pi qi select hotels city skyline price min distance min select name salary sum volume volume emp sales id repr year group name salary skyline salary min volume max query query select buildings city new york skyline distance min height max diff select name distance case price cheap price exp hotels city skyline min distance min query query example skyline queries pi qi incomparable may part skyline distinct specified 
distinct retained choice unspecified 
values attributes dm dn irrelevant skyline computation attributes course part tuples skyline implicit projection 
note matter order dimensions specified clause ease presentation put min dimensions dimensions 
addition dimensional skyline equivalent min max distinct sql query clause 
furthermore note dominance transitive relation dominates dominates dominates transitivity important property implement skyline operation section 
contains example skyline queries 
queries example queries cheap hotels near beach skyline manhattan 
third query asks successful low salary people eligible raise 
query fourth query asks cheap hotels near beach time hotels returned query specifies price categories price category user interested hotel smallest distance beach 
naturally attributes specified clause may clause 
eliminate expensive hotels example clause query extended price predicate 
implementation skyline operator approach implement skyline queries extend existing relational object oriented database system new logical operator refer skyline operator 
skyline operator encapsulates implementation clause 
implementation operators join need changed 
semantics skyline queries skyline operator typically executed scan join operators final sort operator query order clause 
section discuss exceptions rule 
result simple modifications parser query optimizer required integrating skyline operator traditional sql query processor extremely simple 
just join logical operators different physical ways implement skyline operator 
section describe variants variants block nested loops algorithm variants divide conquer special variant twodimensional 
furthermore show skyline queries implemented top relational database system changing database system clear approach performs poorly 
translating skyline query nested sql query show skyline queries implemented top relational database system translating skyline query nested sql query 
demonstrate hotel skyline query 
query equivalent standard sql query miles miles miles miles skyline sorting works miles miles miles miles skyline sorting select hotels city exists select hotels city distance distance price price distance distance price price express sql interested hotels dominated hotels 
approach shows poor performance number reasons essentially approach corresponds naive nested loops way compute skyline query unnested bck see subsections better 
skyline query involves join group third query join group executed part outer query part subquery 
see section skyline operation combined operations join top certain cases resulting little additional cost compute skyline 
result propose extend database system integrate skyline operator system 
focus approach remainder 
dimensional skyline operator mentioned section dimensional skyline trivial equivalent computing min max distinct 
computing skyline easy clause involves dimensions 
dimensional skyline computed sorting data 
data topologically sorted attributes clause test tuple part skyline cheap simply need compare tuple predecessor 
precisely need compare tuple previous tuple part skyline 
illustrates approach 
eliminated dominated predecessor 
likewise eliminated dominated predecessor eliminated 
sorting needs carried passes data fit main memory tuples eliminated generating run merge phase sort 
eliminating tuples run generation part replacement selection quicksort runs smaller possibly saves great deal disk doing early elimination tuples analogous early aggregation improve performance group operations bd lar 
shows sorting skyline involves dimensions 
example interested hotels low price short distance beach high rating stars 
hotel eliminated dominated direct predecessor 
example just hotel general hotels sorting help 
special algorithms deal dimensional brevity discuss algorithms 
block nested loops algorithm naive way compute skyline apply nested loops algorithm compare tuple tuple 
essentially happens skyline query implemented top database system described section 
naive nested loops algorithm applied skyline query just dimensional obviously inefficient 
section algorithm significantly faster considering tuple time algorithm produces block skyline tuples iteration 
basic block nested loops algorithm naive nested loops algorithm block nested loops algorithm repeatedly reads set tuples 
idea algorithm keep window incomparable tuples main memory 
tuple read input compared tuples window comparison eliminated placed window temporary file considered iteration algorithm 
cases occur 
dominated tuple window 
case eliminated considered iterations 
course need compared tuples window case 

dominates tuples window 
case tuples eliminated tuples removed window considered iterations 
inserted window 

incomparable tuples window 
room window inserted window 
written temporary file disk 
tuples temporary file processed iteration algorithm 
algorithm starts tuple naturally put window window empty 
iteration output tuples window compared tuples written temporary file tuples dominated tuples part skyline dominate tuples consideration 
specifically output ignore processing tuples inserted window temporary file empty iteration 
tuples window output eliminated iteration 
earlier tuple inserted window earlier tuple output iteration 
order keep track tuple window may output assign timestamp tuple window tuple temporary file 
timestamp simple counter records order tuples inserted window temporary file 
read tuple temporary file timestamp output tuples window timestamp smaller 
timestamping guarantees algorithm terminates tuples compared twice 
full algorithm appendix obviously algorithm works particularly skyline small 
best case skyline result fits window algorithm terminates iterations best case complexity order number tuples input 
worst case complexity order 
asymptotic complexity naive nested loops algorithm block nested loops algorithm shows better behavior naive algorithm similar way block nested loops join algorithm better naive nested loops join 
variants basic algorithm maintaining window self organizing list great deal time basic algorithm spent comparing tuple tuples window 
speed comparisons propose organize window self organizing list 
tuple window dominate eliminate tuple moved window 
result tuple input compared 
variant particularly attractive data skewed couple killer tuples dominate tuples significant number neutral tuples part skyline dominate tuples 
fact nested sql query approach worse naive nested loops algorithm tuple eliminated inner loop replacing tuples window variant propose try keep dominant set tuples window 
example assume window contains hotels mile mile assume hotel considered mile incomparable 
window capacity hotels basic algorithm write temporary file leaving window unchanged 
example easy see window containing eliminate hotels old window slightly expensive significantly closer beach 
words replace window written temporary file 
conceivable replacement policies 
option extend self organizing list variant implement lru replacement policy 
replacement policy area covered tuple order decide tuples kept window 
instance better terms price distance 
implementing replacement policy come free 
additional cpu costs determine replacement victim 
second tuple replaced window written temporary file needs compared tuples placed temporary file result tuple replacement possible tuples compared twice 
study tradeoffs replacement variant detail section 
divide conquer algorithm turn divide conquer algorithm ps proposed extensions algorithm efficient database context limited main memory 
algorithm theoretically best known algorithm worst case 
worst case asymptotic complexity order log log number input tuples number dimensions skyline 
unfortunately complexity algorithm best case expect algorithm outperform block nested loops algorithm bad cases worse cases 
basic divide conquer algorithm basic divide conquer algorithm ps works follows 
compute median mp approximate median input dimension dp price 
divide input partitions 
contains tuples value attribute dp better mp 
contains tuples 

compute 
done recursively applying algorithm partitioned 
recursive partitioning stops partition contains tuples 
case computing skyline trivial 

compute skyline result merging 
eliminate tuples dominated tuple 
tuples dominated tuple tuple better dimension dp tuple 
challenging step 
main trick step shown 
idea partition approximate median mg dimension dg dg dp 
result obtain partitions 
better dimension dp si better si dimension dg 
need merge ands 
beauty need merge tuples sets guaranteed incomparable 
merging pairs done recursively applying merge function 
partitioned 
recursion merge function terminates dg mp basic merge dg mg mg mp way merge merge merge merge merge merge merge merge bushy merge tree dimensions considered partitions empty contains tuple cases merge function trivial 
full definition algorithm appendix algorithm described great detail ps 
extensions basic algorithm way partitioning input fit main memory basic algorithm shows terrible performance 
reason input read partitioned written disk reread partitioned times partition fits main memory 
may argue main memories larger larger time databases larger larger concurrent queries executed database server available main memory query limited 
result database vendor today willing implement algorithm relies fact data fit memory 
fortunately behavior basic algorithm improved quite easily 
idea divide partitions way partition expected fit memory 
median quantiles computed order determine partition boundaries 
partition fit memory needs partitioned analogous recursive partitioning needed hash join processing gra 
way partitioning step basic algorithm third step 
step way partitioning produce partitions pm pi fits memory si skyline pi computed memory basic algorithm 
final answer produced third step merging si pairwise 
merge function way partitioning applied sub partitions merged main memory sub partitions occupy half available main memory 
shows sub partitions need merged way sub partitioning applied merge function 
shown propose apply merge function initial partitions bushy way 
result volume data read rewritten disk different merge steps minimized 
instance tuples involved log merge steps tuples involved merge steps merging carried left deep way 
algorithms define full divide conquer algorithm way partitioning appendix early skyline propose simple extension divide conquer algorithm situations available main memory limited 
extension concerns step data partitioned partitions 
propose carry step follows 
load large block tuples input precisely load tuples fit available main memory buffers 

apply basic divide conquer algorithm block tuples order immediately eliminate tuples dominated 
refer early skyline essentially kind prefiltering applied sorting algorithm section 
hotel price hotel distance miles miles miles miles miles miles 
ordered indices trees hotel query 
partition remaining tuples partitions 
tradeoffs approach quite simple 
clearly applying early skyline incurs additional cpu cost saves tuples need written reread partitioning steps 
general early skyline attractive skyline selective result skyline operation small 
skyline algorithms trees compute skyline possible ordered index tree 
way ordered index dimensional skyline scan index get tuples sorted order filter tuples skyline described section 
describe ordered indices scanning index 
go back favorite query asks cheap hotels close beach 
assume ordered indices hotel price hotel distance shown 
indices order find superset skyline 
adapting step fagin algorithm merging scores multi media databases fag 
words scan simultaneously indices soon match 
example match 
draw definitely part skyline 
hotel inspected indices definitely part skyline dominated 
example 
hotels may may part skyline 
determine hotels part skyline need execute algorithms section 
instance part skyline dominated 
algorithm applied query predicates clause 
case need search indices find match qualifies predicates 
presence predicates algorithm attractive takes longer find match 
general algorithm attractive result skyline small match quickly 
algorithm generalized dimensions 
case match indices needed algorithm effective typically match 
furthermore applicability algorithm limited skyline result join group computed 
tree tree compute skyline cheap hotels near beach exploit fact hotel need search branches tree guaranteed contain hotels dominated example know hotel costs located miles beach need consider branches tree include instance hotels price range distance range miles miles 
consequence idea traverse tree depth way prune branches tree new hotel 
related branch bound approach traverse tree proposed nearest neighbor search 
plan investigate different heuristics select branches tree depth search 
obviously tree tree involves dimensions specified skyline clause query addition tree may involve attributes part line clause 
trees trees particularly attractive skyline small attractive presence predicates growing number dimensions skyline 
applicability trees limited join group queries 
essentially limitations hold application indices 
skyline joins pushing skyline operator mentioned section skyline operator logically applied joins group bys 
join group non reductive defined ck skyline operator may applied join 
applying skyline operator join attractive skyline operator reduces size result skyline operator join join cheaper 
joins tend increase size result tuples get wider skyline operator cheaper pushed join 
furthermore pushing skyline operator join possible index compute skyline described sections 
example consider query asks young employees high salary department information select emp dept dno dno skyline age min salary max assuming employee works employee qualifies join 
non means 
example easy see skyline employees computed join doing beneficial 
extending query optimizer consider skyline push fairly easy essentially measures described ck top queries applied 
pushing skyline operator consider query asks emps high salary dept low budget select emp dept dno dno skyline budget min salary max assume emps dept roger salary mary salary phil salary 
knowing budget dept immediately eliminate roger phil 
compute salary max dno diff skyline directly emps join compute join skyline 
observation leads approach 
sort emp table dno salary desc eliminating emps lower salary 

sort table 

apply merge join 

compute skyline approach section 
effect apply early skyline additional overhead part sort merge join 
carrying approach loss situation sort merge join attractive 
skyline top mentioned section order top applied logically skyline operator query 
top operation subset columns skyline operation computation skyline top operations combined 
instance compute cheapest hotels interesting terms price distance criteria proceed follows 
sort hotels price criterion top operation 

scan sorted list hotels 
hotel test interesting comparing hotel hotels lower price 

soon hotels produced 
algorithm applied independently number dimensions top skyline operations 
restriction top dimensions subset dimensions skyline operation 
reason approach attractive step hotel need compared hotels lower price part skyline hotels price words comparisons sufficient hotel step 
small hotels fit memory typical situation top queries step carried single scan sorted list hotels cost combined skyline top operation dominated step 
ordered index hotels price step cheap combined skyline top operation executed faster skyline algorithms section 
ordered index exists index expensive index clustered range partitioning sorting applied proposed ck 
words combined skyline top algorithm applied say hotels cost 
hotels produced done need apply combined skyline top algorithm hotels price range 
described ck approach helps significantly avoid wasted sorting 
performance experiments results section study performance alternative skyline algorithms section 
experiments different kinds synthetic databases correlated uncorrelated 
furthermore vary number dimensions skyline query available main memory buffers 
experimental environment experiments carried sun ultra workstation mhz processor mb main memory 
operating system solaris 
benchmark databases intermediate query results stored gb seagate disk drive rpm disk cache 
experiments implemented algorithms section 
specifically implemented variants sort phase sorting early skyline described section 
runs generated quicksort 
mentioned section approach applicable dimensional bnl basic basic block nested loops algorithm section bnl sol block nested loops window organized self organizing list section bnl block nested loops windows organized self organizing list tuples window replaced section basic kung basic divide conquer algorithm section mpt divide conquer way partitioning section divide conquer way partitioning early skyline section 
furthermore run skyline queries commercial relational database systems approach described section 
rdbms installed machine 
results rdbms directly comparable results rdbms significantly complex system involves transaction processing 
results demonstrate need integrate skyline processing database system implementing top 
experiments reported indices 
experiment different kinds indices rdbms cases presence indices increased running time rdbms skyline benchmark queries 
simple cases indices help rdbms cases approaches indices sections done better rdbms exploiting indices 
stated benchmark database contains tuples mb 
tuple attributes type double bulk attribute garbage characters ensure tuple bytes long 
values doubles tuple generated randomly range 
experiments ask skyline queries look tuples low values dimensions 
study different kinds databases differ way values generated indep type database attribute values generated independently uniform distribution 
shows independent database points 
points part skyline marked bold circles 
twelve points part skyline 
corr correlated database represents environment points dimension dimensions 
instance students publication record typically preliminaries 
generate random point correlated database follows 
perpendicular distribution new point plane 
normal distribution select plane points middle ends 
plane individual attribute values generated normal distribution sure points located close 
points 
skyline database contains points 
anti anti correlated database represents environment points dimension bad dimensions hotels fall category 
correlated database generate point selecting plane perpendicular line 
normal distribution small variance points placed planes close plane point 
plane individual attribute values generated uniform distribution 
shows anti correlated database points 
skyline database contains points 
independent db correlated db anti correlated db corr indep anti skyline points indep corr anti skyline sizes dimensions shows size skyline type database growing number dimensions 
databases experiments points 
skyline fairly small correlated databases size skyline increases sharply anti correlated databases 
size skyline independent databases 
table shows running times seconds amount disk mb individual algorithms compute dimensional type database 
allocated mb main memory algorithms rdbms required significantly 
show results basic bnl variant bnl variants virtually identical performance experiment 
furthermore determine amount disk carried rdbms 
corr indep anti time time time bnl basic basic mpt sort rdbms table running time secs disk mb skyline algorithms time secs time secs bnl basic bnl sol bnl basic mpt dimensions time secs corr mb buff 
bnl basic bnl sol bnl basic mpt dimensions time secs anti mb buff 
time secs mb bnl basic bnl sol bnl basic mpt dimensions time secs indep mb buff 
bnl basic bnl sol bnl basic mpt dimensions mb anti mb buff 
clear winner experiment bnl algorithm 
databases window large bnl algorithm terminates iteration 
bnl algorithm outperforms special sort algorithm applicable 
sort algorithm quite fast early skyline applied run written disk runs extremely short 
different experiment shown database sort algorithm outperforms bnl algorithms 
experiment generated synthetic dimensional database skyline tuples 
early skyline effective algorithm clear winner variants applying early skyline partitions small rest algorithm completed quickly 
applying early skyline kung algorithm expensive sorting carrying nested loops experiment outperformed bnl algorithms sort 
variants apply early skyline show poor performance experiment high demands expected basic variant particularly bad 
rdbms carries naive nested loops computation shows poor performance experiment 
rdbms shows particularly bad performance anti correlated database database average tuples probed inner loop tuple eliminated 
multi dimensional figures show running times alternative algorithms varying number dimensions considered skyline query 
buffer limited mb implementation algorithms rdbms 
turning see bnl variants clear winner correlated databases 
situation different databases 
independent database bnl algorithms dimensions outperformed mpt algorithms 
anti correlated database break point earlier 
time secs buffer size mb bnl basic bnl sol bnl basic mpt time secs anti altogether draw mb buffer size mb bnl basic bnl sol bnl basic mpt mb anti bnl variants size skyline small 
result performance bnl algorithms sensitive number dimensions correlations data 
variants bnl sol winner differences great 
replacement clearly bad idea skyline large case replacement incurs additional overhead benefits 
variants sensitive bnl variants number dimensions correlations database 
clear winner variants 
bnl algorithms rdbms sensitive number dimensions correlations database 
experiments confirm standard shelf database system appropriate carry skyline queries 
correlated database rdbms unacceptable running time 
takes instance hours compute dimensional skyline anti correlated database cpu time 
summary propose system implement bnl sol algorithms 
shows amount disk carried alternative algorithms anti correlated database varying number dimensions mb main memory 
trends correlated independent databases 
determine cost rdbms 
see bnl algorithms lowest cost cases dimensional running time high high cpu overhead 
results expected better mpt turn better basic 
gap mpt narrows growing number dimensions early skyline effective 
differences bigger databases 
varying size buffer figures show running times disk costs algorithms compute dimensional skyline anti correlated database time vary size main memory buffers kb size database mb size database 
see performance algorithms improve larger memory gets 
hand running time bnl algorithm get slightly worse larger memory 
reason bnl algorithms memory help smaller window results comparisons 
words bnl algorithms attractive memory scarce system disk bound 
varying size database table shows running times bnl variants mb anti correlated database database points 
size skyline points 
buffer set mb database mb database bnl basic bnl sol bnl basic mpt table running time secs mb buffer anti correlated vary size database mb size database 
baseline table shows results mb anti correlated database previous experiments 
basically observe effects mb database mb database 
case outperforms bnl variants clear winner 
fact way partitioning early skyline computation important case larger database gets critical reduce complexity 
important note size skyline grow linearly size database particular case size skyline grew factor database times large 
result bnl variants attractive larger database gets 
believe points big case skyline operation 
expect skyline operation applied significantly points 
decision support instance expect skyline operation applied aggregated data query section 
related closest kung maximum vector problem 
basic divide conquer algorithm devised theoretically analyzed 
sense seen continuation extended algorithm better database environment proposed new block nested loops algorithm significantly better cases demonstrated indices showed skyline operator combined database operations 
algorithms maximum vector problem devised sm mat rdl 
works propose parallel algorithms maximum vector problem specific algorithms cases number dimensions large 
approaches applied database context 
theory literature number related problems studied contour problem mcl multi objective optimization linear programming ste 
related problem compute convex hull data set 
convex hull subset skyline 
skyline contains points may optimal monotonic scoring function contrast convex hull contains points may optimal linear scoring function 
computing convex hull studied intensively theory see ps best knowledge problem addressed database context 
computing convex hull tougher problem theory 
best known algorithm compute convex hull complexity log 
complexity best algorithm convex hull higher complexity algorithms skyline 
database area nearest neighbor search top query processing related 
instance roussopoulos studied branch bound algorithm nearest neighbor search algorithms nearest neighbor search multi dimensional search trees studied berchtold 
mentioned section ideas push skyline operators joins adopted previous top query processing ck 
nearest neighbor search top different problems 
nearest neighbor search ideal hotel costs miles distance beach certainly return interesting hotels interesting hotels extremely cheap far away beach 
furthermore nearest neighbor search return non interesting hotels dominated hotels 
likewise top query ck find interesting hotels return non interesting hotels 
practice envision applications users ask skyline order get big picture apply top query get specific results 
applications visualization skyline manhattan skyline operator indispensable nearest neighbor search top help 
showed database system extended order compute skyline set points 
proposed skyline clause simple extension sql statement experimentally evaluated alternative algorithms compute skyline discussed indices support skyline operation described skyline operation interacts query operators join top 
skyline operation useful number database applications including decision support visualization 
experimental results indicated database system implement block nested loops algorithm cases divide conquer algorithm tough cases 
specifically propose implement block nested loops algorithm window organized self organizing list divide algorithm carries way partitioning early skyline computation 
avenues 
open question kind statistics need maintained order estimate size skyline example estimate necessary order help query optimizer decide block nested loop divide conquer algorithm 
initial direction reported 
assumes attribute values independent unrealistic assumption instance hotels beach typically expensive 
open question find best algorithms compute skyline parallel database system study indices closely 
furthermore plan study approximate online skyline algorithms compute approximation quickly improve results longer run 
acknowledgments christian hm reinhard kemper helpful discussions 
berchtold hm keim 
kriegel 
cost model nearest neighbor search highdimensional data space 
proc 
acm sigmod sigact conf 
princ 
database syst 
pods pages tucson az usa may 
bck kemper 
evaluating functional joins nested sets object relational object oriented databases 
proc 
conf 
large data bases vldb pages new york usa august 
bd bitton dewitt 
duplicate record elimination large data files 
acm trans 
database systems 
kung thompson 
number maxima set vectors applications 
journal acm 
ck carey kossmann 
saying sql 
proc 
acm sigmod conf 
management data pages tucson az usa may 
ck carey kossmann 
reducing braking distance sql query engine 
proc 
conf 
large data bases vldb pages new york usa august 
fag fagin 
combining fuzzy information multiple systems 
proc 
acm sigmod sigact conf 
princ 
database syst 
pods pages montreal canada june 
kr ger heuer scholl 
query evaluation croque calculus algebra coincide 
proc 
british national conference databases pages london uk july 
gra graefe 
query evaluation techniques large databases 
acm computing surveys june 
haas carey livny shukla 
seeking truth ad hoc join costs 
vldb journal 
kung preparata 
finding maxima set vectors 
journal acm 
lar larson 
grouping duplicate elimination benefits early aggregation 
microsoft technical report january 
www research microsoft com 
mat matou sek 
computing en information processing letters june 
mcl 
drawing contours arbitrary data points 
computer journal november 
ps preparata shamos 
computational geometry 
springer verlag new york berlin 
rdl rhee 
minimum weight dominating set problem permutation graphs nc 
journal parallel distributed computing august 
roussopoulos kelley vincent 
nearest neighbor queries 
proc 
acm sigmod conf 
management data pages san jose ca usa may 
sm stojmenovic 
optimal parallel algorithm solving maximal elements problem plane 
parallel computing june 
ste steuer 
multiple criteria optimization 
wiley new york 
block nested loops algorithm input skyline operation set dimensional points output skyline operation set dimensional points temporary file set dimensional points main memory set dimensional points point dominated point function initialization scanning database repeatedly eof foreach propagate points compared timestamp save release load timestamp load point foreach compare points memory release break release write necessary save release eof continue run necessary flushing memory foreach save release return basic divide conquer algorithm function dimension return terminate recursion pivot median equi partition set partition dimension pivot dimension compute skyline recursively dimension return dimension function dimension trivial cases foreach dimension dimension low min minimum min general case pivot median partition sets partition dimension pivot partition dimension pivot dimension compare adjacent parts dimension dimension compare diagonally return way divide conquer algorithm function dimension minimum partition set quantiles quantiles dimension pp partition dimension quantiles compute skyline recursively pi si pi dimension si pi dimension si si dimension return function dimension trivial cases foreach dimension dimension dimension low min minimum min general case partition sets maximum quantiles quantiles dimension partitions partition dimension quantiles partition dimension quantiles compare parts dimension dimension append return 
