gass data movement access service wide area computing systems joseph ian foster carl kesselman jean steven tuecke wide area computing programs frequently execute sites distant data 
data access mechanisms required place limited functionality demands application host system permit high performance implementations 
address requirements propose data movement access service called global access secondary storage gass 
service defines global name space uniform resource locators allows applications access remote files standard interfaces 
high performance achieved incorporating default data movement strategies specialized patterns common wide area applications providing support programmer management data movement 
gass forms part globus toolkit set services high performance distributed computing 
gass globus services security communication globus components gass services executable staging real time remote monitoring 
application experiences demonstrate library practical utility 
frequent obstacle creation high performance computations operate ectively networked computing systems computational grids called need access data colocated site computation performed 
problem challenging desire solution simultaneously meet requirements impose requirements application programmer applications easily modified written scratch execute ciently grid environments impose requirements resource provider mathematics computer science division argonne national laboratory argonne il department computer science university chicago chicago il information sciences institute university southern california ca new resources easily incorporated grid environment allow high performance implementations support application oriented management bandwidth meet requirements high performance applications 
existing technology meets requirements 
distributed file systems provide convenient access remote data require substantial technology deployment interorganizational cooperation cross realm authentication web file systems provide transparent access remote resources require specialized kernel capabilities target systems 
condor avoids need kernel services relinking specialized versions libraries provides access data user home machine 
legion context space mechanism provides uniform access legion objects data stored conventional file systems 
rio remote system uses striping support highperformance remote access requires applications adopt mpi io parallel library 
describe new approach remote data access strategies address requirements provide mechanisms optimized common grid patterns executable staging reading configuration files error diagnostic output simulation output 
attempt provide full functionality distributed file system increase achieved performance simplify implementation 
define mechanisms implemented specialized services device drivers cross realm security arrangements participating site 
achieve considerable flexibility terms ability support dynamic grid communities varying resource availability application requirements 
provide mechanisms allow programmers guide override default data movement strategies controlling data source selection staging caching filtering data transfer 
bandwidth management mechanisms allow programmers optimize performance required 
exploit capabilities provided globus toolkit support cient communication execution dynamic grid environments resource location type may known runtime 
approach incorporated service called global access secondary storage gass forms part globus grid toolkit 
experiments range applications demonstrate practical utility microbenchmark studies provide insights performance issues 
rest article describe section nature grid problem sections describe design implementation gass respectively 
discuss gass applications section conclude section 
background consider scientist interested regional impacts global change 
user wants run regional scale atmospheric circulation model remote computer obtained national grid boundary conditions provided output separate global model 
issues typical requirements arise grid applications global model data stored hierarchical data format hdf files various centers having identified grid resource simulation run user wants locate access nearest version 
running regional model access input files topographic data files may located grid 
diagnostic data streamed back user applications runs 
output data stored user home machine national archives 
typical usage scenario user runs scenario repeatedly varying parameters part formal parameter study simply exploratory mode 
input files cacheable remote machine prevent having reload run parameter study 
furthermore may important cache output files inter run comparisons performed 
analysis applications leads identify principal requirements grid services uniform access files 
data location may taken account selecting resources computation computation input data colocated 
remote access introduce complexities authentication communication protocols access mechanisms naming 
heterogeneity mechanism policy encountered grid environments means assume resources computation share file system user id space common security mechanisms 
complexities hidden application programmer able uniform naming scheme providing global name space files access mechanisms access files regardless location 
diverse data sources 
grid environment provide access wider variety data sources encountered typical local area network 
uniform access mechanisms support data sources may include common stream data services ftp files remote disk tape dynamic information filtered data 
dynamic resource set 
communities users resources participate grid computation frequently dynamic forming short lived projects collaborations 
institutional overhead accessing remote data minimized 
example solution requires pairs security relationships established participating sites intractable cases 
support streaming unix environment frequent file pipe data interactive terminal stdout stderr stdin abstractions 
significant advantages supporting abstractions grid environment allows retarget interactive applications remote computing resources modification 
grid application runs large number processors specialized mechanisms combining tree may required address scalability concerns implementing abstractions remotely 
little program modification 
order reduce cost constructing maintaining grid applications remote mechanisms allow applications adapted wide area execution modifications 
example wish avoid having replace calls specialized grid calls 
support programmer directed performance optimization 
desirable common patterns implemented ciently appropriate default strategies application programmers able override default behaviors required performance optimization 
existing distributed systems review approaches service support distributed computations focusing satisfy partially needs grid applications 
kernel level distributed file systems andrew file system afs distributed file system dfs provide essentially standard unix file system operations wide area environment 
systems cumbersome deploy particularly leading edge supercomputer systems opinion form ubiquitous infrastructure 
di culties exist example file access rights multi institutional computation di cult coordinate 
kernel level services typical user control performance 
prospero file system designed integrate heterogeneous file access methods providing individual users customized views file organization 
focus organizing resources controlling complexity resource discovery management 
clearly important concerns prospero address performance requirements applications wish support 
condor high throughput computing system application codes linked runtime library replaces system calls remote procedure calls back computer submitted job remote machine 
approach provides transparent access remote files transfers requested data require access local storage remote machine 
lack support caching lead significant file access overhead especially large files 
addition programmer provided bandwidth management capabilities possible files access alternative data sets better network connectivity 
legion system global access data supported files explicitly copied legion space specialized methods 
restriction limits utility legion constructs typical applications want standard methods access data variety storage systems 
global access provided shell commands legion cp legion version unix copy command 
commands presumably implement bandwidth management strategies described legion papers describe implementations 
webfs ufo file system primitives provide access web data sources uniform resource locators urls provide global file namespace 
ufo runs user level application uses unix debugging trap interface replace unix file operations operations operate cached copies urls webfs uses unix vnode redirect calls remote webfs server 
approaches allow unmodified applications access remote data restrict portability 
webfs vnode kernel module runs protected space calls userlevel webfs daemon 
application specific redirection caching policies implemented rewriting daemon single daemon vnode interface webfs requires kernel module loaded issues user flexibility 
gass architecture gass service designed overcome limitations remote systems described 
distinguishing features gass optimized support file access patterns common grid computations ability user controlled management network bandwidth 
examine features detail 
common grid file access patterns designing gass goal build generalpurpose distributed file system support patterns common high performance grid applications 
patterns distinguished particularly simple access patterns coherency requirements read access entire file assumed contain constant data example topographic database example configuration file read determine problem parameters 
data may accessed multiple readers process parallel program accesses read data assumed constant coherency control needed 
shared write access individual file required meaning adopt policy multiple writers exist file written writer produces final value entire file example parallel application processes generate answer answer valid 
multiple writers supported coherency simple implement enforced file level 
append access file output required real time remote location example log program activity monitor execution 
case multiple writers output may interleaved arbitrarily record record basis source ordering preserved 
simple access pattern means coherency control simple 
unrestricted read write access entire file concurrent accesses example output data produced scientific simulation 
process accesses file time coherency control required 
operations require explicit coordination accessing processes property exploit gass implementation 
doing explicitly exclude multiprocess structures occur practice information exchange concurrent reading writing shared file cooperative construction single output file append operations 
second property selected operations coherency model fact readers writers assumed operate entire file implementation need communicate individual read write operations network simply transfer entire file reading site prior reading element writing site writing completed 
strategies implicitly exclude structures process accesses small part file basic gass structures deal case ciently 
gass defines functions optimize case required 
default data movement strategies optimal execution grid applications requires careful management limited network bandwidth available 
typically distributed file systems hide data movement operations application programmer 
control provided focused latency management block prefetching bandwidth management 
gass addresses bandwidth management issues providing file cache local secondary storage area copies remote files stored 
see discussed detail 
default data moved cache files opened gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma read access constant data read entire file multiple readers write access entire file multiple writers writer wins append access multiple writers gamma gamma concurrent write read access concurrent write access file read access just part file read read write write append append write read write write read read gass system optimized patterns patterns supported ciently closed files opened append mode see standard strategies 
strategy fetch cache read open 
remote file opened reading local cache checked entire remote file fetched 
local copy opened file descriptor returned count associated cached copy incremented 
file accessed application conventional calls cached file 
strategy optimizes data movement common situation parallel computing input file accessed processes 
input files typically read entirety unnecessary data transfers performed potentially large number round trip communications avoided 
strategy may inappropriate file large computation may delayed long file transferred local cache may small hold entire file 
alternative strategies specialized gass servers situations discussed 
second strategy flush cache transfer write close 
remote file created opened writing closed count associated file checked 
count file copied associated remote location deleted cache count simply decremented 
caching strategy reduces bandwidth requirements multiple processes location write output file 
conflicts resolved locally remotely file transferred 
special case remote file opened append mode placed cache communication stream unix systems tcp socket created remote location write operations file translated communication operations stream 
strategy allows streaming output applications require 
specialized data movement strategies gass provides mechanisms allow programmers refine default data movement strategies manage applied particular cases 
mechanisms fall general classes relatively high level mechanisms concerned data cache prior program access data subsequent program access low level mechanisms implement alternative data movement strategies 
commands natural extension cache management mechanisms described 
useful situation data files large files going multiple runs program example parameter study 
command equivalent open file reading call creates entry cache transfers file increments entry count 
subsequent open calls find file cache 
similarly command equivalent close file open writing call 
commands called application externally 
useful consequence ability call staging commands externally common access pat server ftp server hpss server gass server cache cache gass cache architecture 
files opened application processes represented circles maintained local cache directory copied remote location open opened reading remote location close created opened writing 
terns file staging redirection standard input output accomplished completely outside application avoiding need source modifications 
low level cache mechanisms provide fine grained control cache behavior 
example user specify file cached 
capability important reasons 
files accessed grid applications large typical distributed file system strategy placing cached data common pre allocated file area may impractical cache usage di erent users interfere precious scratch disk space partitioned normal afs dfs usage 
contrast gass mechanisms allow file caching directed specific locations file user basis example user file systems 
second benefit user level control cache location possible gass operations exploit local distributed file systems 
example cached files placed file system accessed computational resource nfs afs dfs high performance cluster file system distributed parallel storage system 
keeping globus philosophy providing interdomain service layer integrates diverse local services gass provides means remote file access resources achieved enabling application exploit performance advantages specific local policy required 
gass operation grid applications access remote files gass opening closing files specialized open close calls unix systems globus gass open globus gass fopen globus gass close globus gass fclose 
trigger gass cache management operations described optimize performance default data movement strategies 
application viewpoint gass open close calls act standard unix counterparts url file name specify location file data 
file descriptors streams returned calls normal read write operations open close calls need modified calls unchanged 
specialized open close calls means program modifications required application gass 
di culty inserting calls minimized ensuring gass call arguments semantically equivalent backward compatible unix functions replace 
relinking condor kernel support dfs webfs avoid need application modification cost increase implementation complexity portability 
url gass open call specifies remote file name physical location data resource file located protocol required access resource 
advantage making location file server explicit example dfs hides file server locations global file names application domain specific heuristics select alternative copies 
example file replicated di erent servers di erent processes may choose access nearer copy 
emphasizes point gass access files stored variety storage devices specialized gass servers ftp servers supported hpss servers progress 
gass system exposes additional lower level apis discussed implement specialized data movement access strategies 
integration globus toolkit gass services integrated globus services number mutually beneficial ways 
mention just 
globus resource allocation manager gram globus component allocate computational resources initiate manage computation 
application wants initiate computation remote resource issues request corresponding gram specifying parameters executable name arguments resource requirements 
availability gass services straightforward extend gram api allow executables standard input output error streams named urls gass mechanisms fetch url named executable cache fetch standard input redirect standard output error 
changes required provide support requires just additional gass calls 
gass implementation gass implemented layered set apis follows 
typical application programmers need apis available situations specialized data movement access strategies required 
file access api 
high level file descriptor file stream interface remote data accesses discussed 
caching decisions automatically file open parameters urls accessed interface exist cache process terminates 
file access api implemented terms cache client apis described 
operations api synchronous 
cache management api 
low level interface provides functions manipulation local caches permits user control directly insertion locking removal counting 
operations api synchronous structured allow overlapping multiple cache operations 
client implementation api 
low level interface remote data streams allows applications eliminate data copies providing bu ers communication system select transfer unit sizes proxy servers executable caching 
operations client api primarily asynchronous enabling data transfer operations overlapped local operations increase performance gass operations 
server implementation api 
low level interface implement gass remote file servers 
implements server side gass remote file access protocol making calls application specific server code implement data service 
user control similar set parameters client api 
client server implementations share common data queuing model 
operations api primarily asynchronous 
cache management api gass cache api provides calls add delete files cache cache state clean cache contents 
described contents cache stored local file system owned user application submitted read write request 
cache directory maintained contains information files stored cache including gass file name url local file name file time stamp tag list 
explain subtleties arise design implementation components 
gass uses modified counting scheme determine cache entries deleted 
entry associated simple count tag list 
time file added cache userspecified tag string added corresponding list 
delete operations specify tags entry tag list empty file purged file remains cache 
functions provided remove instances tag tag list 
functions possible clean cache application component fails clearing counts clearing application specific tag tag list clean failed application purging files applications 
globus gram service extended support mode files accessed computation tagged computation name application component terminates cleanup operation performed tag 
cache directory entries support cache timestamp value defined user cache management system 
time stamp variety purposes recording modify date remote file time add delete operation application specific interpretation 
gass implementation needs guard race conditions processes open file 
example processes attempt open file reading open call initiate file transfer operation return done second open call block file transfer initiated call completes 
gass cache api introduces concept locks simplify implementation behaviors 
function add entry directory associates lock entry 
subsequent operation entry blocks lock cleared separate function call 
cache management implementation uses locking protocol permit multiple threads processes insert remove cache entries concurrently 
provide wide area cache coherency example changes remote original file propagated cached copies 
cache coherency mechanisms layered top gass abstractions required 
client server implementation apis gass designed interface wide range data management services illustrated targets include specialized gass servers ordinary ftp servers high performance storage systems hpss 
date implemented 
gass client server apis designed simplify task providing remote access new data management services hpss services accessed srb 
operations provided apis establish network connections data servers issue read write requests remote servers manage movement data client server 
function client server apis provide cient transport mechanism moving file data client server 
transport layer provides connection oriented data stream moving data user allocated bu ers dynamically allocated bu ers directly local unix file descriptors 
situations availability alternative data sources sinks allows gass client server implementation eliminate need copy data multiple times 
example application specific gass client wants transfer remote file local memory local file file access api accomplish ciently sending data stream receiving data user provided bu er 
data transfer apis designed asynchronously thread safe 
communication performed stream protocol implemented unix file descriptors custom data transfer protocol nexus multimethod communication library 
situations nexus protocols deliver superior performance ip wide area networking protocols 
applications examples show gass applications 
globus executable management system wide area computing environments allocate computational resources dynamically identity type resource determined runtime executable staging automatically copying executable machine prior running executable important requirement grid programming system 
gass address requirement follows 
allow executable named url augment globus resource management system gass client caching api calls transfer executable remote executable repository machine question 
gass server providing executable specialized executable server commonly provided see generic program startup tool provided part globus 
performing simple variable substitutions executable urls sophisticated executable management strategies implemented example providing access architecture specific paths 
gass command line tools globus rcp globus toolkit includes small set command line tools provide access basic gass functionality 
tools include basic gass server commands get put remote files tool allows examine manipulate contents gass cache 
tools allow programmer implement pre staging post staging remote file operations modifying user applications 
command line tools implement globus rcp unix rcp command transfers files machines network including initiated data transfer 
combining gass functionality globus mechanisms remote process startup process process authentication useful tool constructed shell script 
second interesting globus utility gass program automates tasks associated performing remote computation potentially multiple computers 
uses gass executable staging redirection standard output error streams terminal program invoked 
functions implemented gass server api incorporate gass server functionality client 
job manager started globus remote site uses gass client api request executable gass server gass cache api create unique temporary file name executable 
cache avoids unnecessary downloads multiple processes share filesystem 
note gass server api calls embed gass server functionality just easily provide file service functions arbitrary application program 
output redirection achieved gass cache manage set output files process created program 
cache provides scalability number file descriptors available unix process provides line bu ered output 
systems scheduler starts processes compute nodes overhead minimal machines smps scheduler rely job manager fork process startup time roughly linear majority time spent cache operations manage standard output error streams 
utility implement variety tools applications 
example mpich wide area implementation message passing interface mpi uses initiate mpi programs remote computers 
sf express distributed supercomputing sf express large scale distributed interactive simulation dis application typical type application benefit gass services 
sf express harnesses multiple supercomputers meet computational demands large scale network simulation environments 
large simulation may involve tens thousands entities require thousands processors 
globus services locate assemble manage resources 
example march sf express run processors distributed supercomputers sites 
entity simulation set new world record met performance goal originally scheduled 
sf express run requires access various types data order initialize including terrain simulation take place descriptions entities take part simulation details specific simulation performed 
data may change simulation simulation scenarios example constant simulations example terrain data constant simulation run 
sf express input patterns fit gass model fact sf express modified gass services savings setup time complexity significant 
sf express uses gass purposes 
machines executable management facility described stage simulation code machines append mode file access redirect diagnostic data streams back initiating computer 
gass proved tremendous advantage 
early sf express experiment prior globus logistical obstacles meant took month retrieve just subset sf express log files various sites large run performed 
gass log files available immediately follow progress simulation 
performance studies perform experiments determine costs associated gass 
experiment conducted distinct environments cache local disk typical supercomputer large local scratch storage cache nfs mounted disk typical workstation distributed memory cluster 
sgi origin running irix tmp filesystem scsi disk sgi xfs filesystem 
nfs filesystem ibm rs running aix 
tests remote data located sgi onyx local scsi disk xfs filesystem located km distant connected oc network intermediate routers 
gass cache overheads experiments designed measure costs inherent gass cache 
interested costs overhead incurred data read disk read memory fetched memory directly remote location costs associated locking cache index file operations performed gass cache 
compare wallclock running time programs 
memory uses gass client api transfer data directly memory application process 
second gass cache calls globus gass open gass url stage remote data cache reads file memory closes file calling globus gass close remove cached copy 
gass cache overhead incurred gass calls 
third program cache uses gass client api gass url stage remote data local file gass cache opens file reads file info memory closes file removes local file 
ect measure overhead gass cache versus manually staging files prior opening 
results shown table 
comparison memory gass cache numbers shows large mb files significant advantage bypassing cache reading directly memory smaller files cache incur significant cost 
comparison gass cache cache lines shows gass cache operations cost approximately seconds local disk approximately seconds nfs disk small files 
overhead increases somewhat larger files understand gass cache operations regardless file size 
gass cache contention noted gass file access api avoid repeated fetches remote file read multiple processes system 
performed sets experiments determine ectively gass cache operates scenarios 
case parallel mpi program started origin node opening file reading memory 
measure wallclock time required nodes read entire file memory 
cases local disk access tmp filesystem 
experiments repeated di erent file sizes di erent numbers readers 
test nodes open read local file gass mechanisms 
gives performance baseline reported set numbers 
notice large files contention disk causes nearly linear scaling runtime 
program modified replacing open call globus gass open replacing tmp filename gass url 
node open file lock gass cache transfer file cache allow nodes proceed opens 
gass cache located tmp filesystem baseline test 
results second set numbers 
see small files contention gass cache index dominates cost 
large files cost dominated local disk plus transfer time 
final test run exactly program second test prior running program file gass cache 
ectively removes data transfer time previous numbers 
results third set numbers table 
expected see small files cost dominated gass cache operations large files cost dominated local disk local disk speeds transfer speeds increase gass cache costs relatively expensive 
currently cache operations require locking accessing single index file 
clearly needed remove contention index file 
gass client library supports data transfer gass servers standard ftp servers 
provide insight mechanisms compare measured average time seconds transfer mb file remote onyx tmp origin tmp methods 
sgi standard ftp client ftpd server took seconds gass ftp client sgi ftpd server took seconds gass client server protocols nexus took seconds 
see gass ftp client achieves slightly better bandwidth native sgi ftp client probably due better socket disk bandwidth achieved gass protocols somewhat slower ftp protocols gass client 
expected nexus currently performs extra copies data table time transfer remote files various sizes directly memory memory tmp file cache gass cache tmp gass cache 
times seconds average multiple runs 
see text details 
kb kb kb mb mb mb local disk memory cache gass cache nfs disk memory cache gass cache table results contention experiments multiple processes open read file time standard unix open close calls gass transfer followed read gass access file 
times seconds 
see text details 
nodes kb kb kb mb mb mb file read tmp gass mechanisms file transferred remote url gass mechanisms file read tmp gass mechanisms expect gass protocol performance improve copies eliminated version globus 
gass afs performance gass afs designed di erent goals mind instructive compare performance 
comparision uses versions parallel program gass performance evaluation 
version process accesses remote file gass mechanisms second version afs mechanisms 
cases parallel program run sgi origin afs client cache size mb parameters set medium default setup located ncsa urbana servers gass afs similar sun located site argonne national laboratory chicago similar networks identical routers 
afs cache carefully flushed measurement 
gass automatically cleans cache file referenced anymore flush necessary gass case 
see afs performs slightly better gass small files probably known ine ciencies gass file cache locking routines large files gass significantly faster 
appear asserted earlier significant performance advantages gass afs wide area environments 
described data access movement service high performance distributed computing environments 
service implements set strategies designed efficient network bandwidth allowing standard mechanisms data access urls provide table time required read content remote file gass afs access file 
times seconds 
see text details 
nodes kb kb kb mb mb file transferred remote url gass mechanisms file accessed afs uniform file namespace 
data access movement operations separated allowing programmers implement application specific data movement strategies modifying applications 
conceptually simple gass service proved remarkably useful 
wide variety higher level services application constructs implemented ease terms gass mechanisms 
addition performance experiments show deliver data movement performance applications 
believe gass represents interesting approach data management grid environments 
plan expand set storage systems supported gass order allow data management high performance environments 
example interfaces high performance storage system hpss distributed parallel storage system allow gass move data remote hierarchical storage system hpss locally distributed disk cache 
storage resource broker srb interface approach dealing heterogeneous storage systems hope explore interfacing srb gass 
planning investigate integration gass data movement mechanisms advance reservation capabilities currently prototyped globus 
acknowledgments gratefully acknowledge helpful discussions karl czajkowski steven fitzgerald nicholas karonis brian assistance noam freedman performance studies 
supported part mathematical information computational sciences division subprogram ce computational technology research department energy contract eng national science foundation asci flash center university chicago doe contract 
alexandrov schauser 
extending operating system user level ufo global file system 
annual technical conference unix advanced computing systems usenix january 
davis gottschalk messina kesselman 
implementing distributed synthetic forces simulations metacomputing environments 
proceedings heterogeneous computing workshop pages 
ieee computer society press 
czajkowski foster karonis kesselman martin smith tuecke 
resource management architecture metacomputing systems 
th workshop job scheduling strategies parallel processing 
foster kesselman 
globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
foster kesselman editors 
grid blueprint computing infrastructure 
morgan kaufmann publishers 
foster kesselman tuecke 
nexus approach integrating multithreading communication 
journal parallel distributed computing 
foster 
remote fast access distant storage 
proc 
pages 
acm press 
grimshaw wulf french weaver reynolds jr legion logical step nationwide virtual computer 
technical report cs department computer science university virginia 
gropp lusk skjellum 
highperformance portable implementation mpi message passing interface standard 
parallel computing 
james huber jr christopher daniel reed andrew chien david blumenthal 
ppfs high performance portable parallel file system 
technical report uiucdcs university illinois urbana champaign january 
steven kleiman 
vnodes architecture multiple file system types sun unix 
proc 
usenix summer conference pages 
usenix association 
kotz ellis 
prefetching file systems mimd multiprocessors 
ieee transactions parallel distributed systems april 
litzkow livny mutka 
condor hunter idle workstations 
proc 
th intl conf 
distributed computing systems pages 
messina davis gottschalk siegel 
distributed interactive simulation synthetic forces 
proceedings th international parallel processing symposium 
reagan moore baru richard rajasekar michael wan 
data intensive computing 
pages 
morris satyanarayanan conner howard rosenthal smith 
andrew distributed personal computing environment 
communications acm 
neuman 
prospero file system global file system virtual system model 
computing systems fall 
hugo patterson garth gibson satyanarayanan 
informed prefetching converting high throughput low latency 
proceedings dags pc symposium pages hanover nh june 
dartmouth institute advanced graduate studies 
tierney johnston chen herzog hoo jin lee 
distributed parallel data storage systems scalable approach high speed image servers 
proc 
acm multimedia 
acm press 
vahdat anderson 
webfs global cache coherent filesystem 
technical report department computer science uc berkeley 
