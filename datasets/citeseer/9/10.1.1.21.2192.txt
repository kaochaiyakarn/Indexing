merging polyhedral shapes scattered features presents technique merging genus polyhedra 
merging establishes correspondences vertices models step morphing process 
technique allows specification scattered features aligned 
accomplished performing steps initial embeddings polyhedra unit spheres computed 
second embeddings deformed user defined features vertices coincide spheres 
third overlay subdivisions computed aligned vertices fused merged model 
keywords 
polyhedra scattered features morphing 
property nature objects change shape 
metamorphosis dimensional objects useful applications computer graphics animation modeling 
right approaches shape metamorphosis turned difficult handle dimensional objects 
purpose animation task reduced image morphing number solutions problem known 
metamorphosis problem solved images open models 
large number representations shapes facet representations popular wide spread 
reason technique perform transformations facet representations shapes maintains representation intermediate steps desirable 
technique controllable way user provide information morph look 
specifically situations models share common features preserved transformation 
user identify features provide information location correspondence instance vertex vertex correspondence vertices 
algorithm exploit information possible provide adequate transformation 
author interactive graphics systems group gris department computer science darmstadt university technology 
darmstadt germany email alexa gris informatik tu darmstadt de phone fax marc alexa darmstadt university technology 
related common way generate transforms polyhedral models establish correspondence vertices models 
problem solved sederberg 
star skeleton representation transform polygons 
problem turned challenging dimensions 
attempts strong limitations class models processed results transformation 
kent gave correspondence algorithm wide class genus polyhedra earlier version treated star shaped polyhedra 
basic idea project polyhedra sphere compute overlay projections 
resulting model contains topology models easily deformed shape source models 
interpolation scheme yields transformation 
date problem mapping arbitrary genus polyhedron sphere remains challenging 
carmel cohen curve evolution task admit implementation problems dimensional case 
feature alignment transformation polyhedra considered lazarus mainly align major axes 
carmel cohen part transform affine transformation deformation inspired image warping align features 
decarlo gallier need user defined correspondences transform shapes different topology 

overview general idea approach follows kent 
try find polyhedral shape results merging input shapes 
shape represent source shapes metamorphosis shapes produced interpolating vertices 
interpolating vertices interesting right socalled vertex path problem consider merging problem 
contrast far approach takes account arbitrary number features points remain aligned transformation 
specification features vertices 
restriction introduce additional vertices face model 
complete process consists steps 
find embedding polyhedral model unit sphere 
embedding reflect spatial relationships model vertices 

sphere embeddings deform embeddings aligned vertices position unit sphere 

compute overlay graphs 
scheme aligned vertices fused merging step 
remain aligned transformation 
discuss steps detail upcoming sections 
purpose transformation merged model deformed represent source models covered fourth section 
section reports implementation issues results approach 

embedding polyhedron sphere consider genus polyhedra models topologically equivalent embedding sphere 
embedding defined graph reflecting relationship vertices 
graph genus necessarily planar dates back euler drawn plane edges intersect 
theory graphs especially planar graphs important way finding embedding sphere 
assume reader familiar basic terms graph theory textbook 
known planar graph straight line embedding edges represented straight non intersecting lines independently established wagner stein 
step procedure polyhedron triangulated 
terms graph theory graph maximal 
assures embedding graph unique extra effort spent order preserve topology mapping sphere 
general idea approach adopt algorithm producing straight line embedding planar graph produce straight arc embedding graph unit sphere 
define straight arc embedding edge connecting vertices represented shortest possible path surface sphere 
shortest path part great circle passing endpoints sphere 
existence embedding planar graphs follows steinitz theorem convex polytopes dimensions 

straight line embedding algorithm algorithms producing straight line embeddings simple suited needs 
describe algorithm case planar embeddings 
identify peripheral cycle graph fix vertices convex boundary 
case triangulated polyhedron source graph triangle bounding face peripheral cycle 

place vertex outer cycle centroid neighbors 
neighbors vertices connected edge 
positions vertices naturally described system linear equations 
proven matrix theory system unique solution 
solution planar embedding graph 

straight arc embedding algorithm want accommodate algorithm produce embedding sphere 
second step scheme easily adapted 
placing vertex centroid project centroid sphere 
simply normalizing vector centroid fact central projection center unit sphere 
due projection linear system equations linear anymore 
system equations solved relaxation methods 
describe process formally detail explained step 
case planar embeddings vertices sphere fixed 
remainder call fixed vertices anchors 
sufficient number placement anchors embedding sphere collapses vertices collinear position state vertices lie centroid neighbors 
contrary situation plane fix triangle 
case relaxation result embedding vertices lie inside triangle see embedding 
generally exists half sphere anchor vertex placed empty half sphere projection vertices centroid 
anchors needed distributed sphere half sphere contains fixed vertices 
natural place anchors edges regular tetrahedron unit sphere 
need anchors avoid collapse embedding anchor causes problem fixed vertices placed centroid neighbors 
experiments show results graph see embedding dramatic example 
anchor causes potential decide regular tetrahedron anchor embedding 
faced problems anchors occur second re problems sphere embedding collapsed embedding fixed vertices 
collapsed embedding fixed vertices regular tetrahedron 
graph 
turns sensitive initial state vertices 
tetrahedron anchor embedding collapse see embedding 
solved problems heuristics 
far valid embedding euler valid genus model 

resolving resolve anchors locality problem exploited 
speaking terms energy vertices far away anchors state low energy reached state vertex projection centroid neighbors 
idea resolve embedding simple effective anchors placed vertices reached minimum energy state 
heuristic vertices tetrahedron fixed 
relaxation scheme repeated 
able judge current state embedding 
criterion orientation vertices face 
embedding contains orientations consecutive vertices clockwise order face 
expect representation polyhedral model contain information order vertices face 

initializing relaxation heuristics find initial state relaxation process 
general idea find model center translated origin subsequently scaled unit sphere 
positions vertices initial state mapping sphere 
remains choose certain orientation tetrahedron anchors lead stable relaxation 
general causes problems center inside model 
smallest enclosing sphere model starting point search desired 
cases center sphere lie inside model center translated interior point 
models center mass point 
experience showed orientation anchor tetrahedron influence relaxation models 
cases orientations lead desired embedding 
case proved sufficient generate random orientations relaxation stable 
give overview complete algorithm formal way 
note places need normalize vectors pull back unit sphere 
notation abbreviation 

complete algorithm initial embedding dimensional model facet representation consisting faces edges vertices 
assume face information vertices incident face linear order boundary face 

compute smallest enclosing sphere model 
fast approximating approach described exact solution obtained randomized incremental algorithm 

translate center sphere point inside model 

transform model transformed unit sphere center origin coordinate space 

choose random regular tetrahedron vertices unit sphere fix vertices model closest tetrahedron 

relax vertices model repeating step neighbors vi sphere embeddings polyhedral models giraffe shark 
largest movement vertices predefined epsilon max vi vi 
embedding collapsed go back step 
check embedding collapsed compute distances nearest neighbors points vertices tetrahedron 
distance substantially half distance anchors consider embedding collapsed 

fix vertices tetrahedron step 
relax vertices step 
check orientation consecutive vertices boundary face 
orientation vertices sphere sgn orientation triple epsilon bound decreased step repeated 
embedding complete orientations 
shows initial sphere embeddings polyhedral models giraffe shark 

aligning features course overlay embeddings models retrieved initial step transform merged model shape source models perform linear interpolation 
left hand side shows transformation models pig horse 
clearly smooth transformation polyhedral shapes expect pig transformed horse 
see basic characteristics head legs mammals remain stable transformation 
done feature alignment 
right hand side shows transformation basic features aligned 
user knows features correspond models 
order specify correspondence features identified vertices 
simple way assure features preserved transformation place corresponding vertices approximately positions spheres 
merged model fused close 
characteristic change transformation 
approach alignment features independent actual interpolation technique assured topology merged model 
general idea achieve alignment corresponding vertices spheres deformation techniques 
borrow extensive research image morphing warping 
note deformation problem additional constraint edges graph intersect 
achieved warping techniques guarantee injective mapping 
map vertices define edges arcs connecting arcs intersect deformed mapping 
arcs de transformations models pig horse 
sequence left hand side uses features 
sequence right hand side aligns head legs tail 
note problems linear vertex interpolation 
formed overlay problem unsolvable intersections deformed arcs intractable 
problem elaborate warping techniques discarded take advantage mathematical properties 
developed simple iterative scheme inspired radial basis functions see 
deformation technique move vertex vertex position move map defined order remap couple vertices desired positions vertices repeatedly moved desired positions 
time vertex placed correctly vertices displaced 
amount displacement displacement vertex moved 
displacements necessary correct position vertex decreasing eventually vertices come stable position 
prefer iterative scheme displacements bounded easy control 
way possible check validity embedding step decrease deformation necessary 
explain complete algorithm align corresponding vertices 

algorithm aligning corresponding vertices embeddings vertices edges sphere ordered sets features represented number indices sets assume 
denote th element vs vi th element fs goal procedure written 
rotate sphere summed squared distance corresponding vertices minimized 

compute desired position pi pair vertices normalized sum corresponding vertices 
define displacement pi necessary move th feature 
apply map vertices vj check mapping embedding valid 
decrease length displacement vector 
repeat step positions vertices remain unchanged complete round 

features vertices desired positions greater zero decrease go back step 
topologies permit feature vertices aligned 
vj initial sphere embedding feature alignment note necessarily case mapping introduced rejected step 
case decreased zero features moved far movement introduce 
illustrates feature alignment step models pig horse 

merging embeddings embeddings need produce embedding contains faces edges vertices source models 
problem known map overlay 
algorithms proposed problem handle mainly case planar graphs see textbook 
general planar map overlay complexity logn number edges number intersections 
subdivisions connected case planar overlay computed 
publications overlay subdivision sphere clear solutions planar case applicable context 
kent give algorithm sphere overlay problem needs time 
give new solution particular problem reports intersection spherical subdivisions optimum time algorithm exploits topological properties initial sphere embedding feature alignment feature alignment process initial sphere embedding computed 
second deformed common features coincide spheres 
sions guarantee correct order intersections 
algorithm consists main parts finding intersections second constructing representation merged model 
cases sophisticated data structure needed represent models 
doubly connected edge list 
data structure contains information face directed edge vertex 
information stored different types face record contains pointer arbitrary half edge boundary 
edge record contains pointer vertex originating face bounds twin half edge connecting vertices pointing opposite direction half edge boundary bounded face 
vertex record contains information location space pointer arbitrary edge vertex origin 
reader consult textbook get information structure especially data sufficient algorithmic tasks 
note assume vertices embedding lies vertex edge graph 
assure general position assumption symbolic perturbation scheme described 

finding intersections algorithm geometric functions needed decide edges intersect sphere second decide point lies inside face 
cases adopt planar techniques 
edge edge intersection 
edges defined shortest path points sphere 
shorter arc circle center sphere passing points assume unit sphere 
obviously circles intersect 
points intersection computed follows circles defines plane intersection planes cuts sphere intersection points searching 
intersection planes orthogonal normals planes normal plane orthogonal unit vectors find intersection circles decide shorter arcs intersect solve equations sq pr sq arcs intersect iff sq point intersection point face 
model triangulated face described vertices assume vertices ordered counterclockwise triangle viewed outside sphere order known pointers edge list 
define planes subsequent vertices origin 
intersection positive half spaces planes contains exactly face 
point lies positive half space plane sign dot product normal plane positive 
point lies inside spherical triangle bounded iff answer basic geometric questions algorithm explained embeddings consisting vertices edges faces edge need list edges intersect vice versa 
lists generated traversing graph 
graphs traversed way describe process traversing generating intersection lists traversing find intersections 
basic idea traverse graphs breadth 
choose arbitrary vertex search face contains start edge contained record traversal stack edges inspect maintained 
half edge pushed stack face contains origin half edge pushed 
pushed stack 
procedure repeated stack empty 
pop working edge face 
mark edge twin 

initialize variable stores edge intersected 

test intersects boundary edges 
intersects ei replace face stored twin ei face side ei go back step 
intersections reported topologically ordered list intersections half edge generated 

face contains endpoint push unused edges originating endpoint stack 
procedure done second time exchanged 
useful generate new vertices traversals traversals slightly different 
need information relative positions vertices 
vertices making face graph stored vertices graph done edge face popped stack 
newly generated vertex vertices incident intersecting edges stored 
easy see algorithm linear number edges plus intersections edge intersection tests intersection edge additional intersection tests necessary constant costs edge intersection 
initialization traversal tested faces contain starting vertex 
linear number edges 

constructing representation want compute list vertices edges faces vertices edges faces intersection lists generated procedure 
subdivisions doubly connected edge lists doubly connected edge list constructed merged model 
start initializing vertices originating intersections part algorithm generated 
contrary vertices vertices contain valid information half edge 
basic idea process intersection lists edges intersection intersecting edges cut 
original edges changed step intersection lists updated new intersection lists created 
invariant maintain intersection lists valid current list edges 
intersections edge processed order intersection list 
intersections inserted edge topologically correct order 
clear information edges intersection lists edges edges cut topologically correct 
explain cut edges half edges 
intersection list contains information intersection edge faces subdivisions convex triangles leaving face bounded situation clockwise turn 
edges twins keep origin 
new edges new vertex origin 
remains update information edge boundary face twins 
intersection list edges valid anymore edges cut part newly generated edge originating new vertex call edge 
find edges information intersection list inspected 
edges intersection list browsed list list 
safely removed intersection list 
edges intersection list belong edges removed list new intersection list generated intersection lists edges new intersection list updated 
intersection lists originally pointed point updates invariant holds 
intersections processed way valid vertex edge lists embedding 
remains compute records faces 
faces easily cycles half edges loop edges 
edge contain information face follow pointers edges edge 
create new face set record edges face record face arbitrary edge 
edges processed complete information faces created 
note faces created intersecting triangles necessarily triangles convex 

reconstructing source models applications purpose merged model serve transformation original polyhedra 
merged model deformed exactly shape source models 
refer vertices edges faces previous sections 
note information edges faces remains unchanged 
vertex positions set 
course vertices elements set original values 
vertices additional information needed 
information computed finding intersections 
distinguish vertices new vertices 
vertex belongs face remember stored vertices face 
compute barycentric representation basis barycentric representation interpolate attributes values writing attributes columns matrix multiplying matrix way position easily computed color values texture coordinates interpolated 
vertex belong generated due edge edge intersection 
vertices intersecting edges stored vertex 
reconstruction processes vertices belong original model needed 
case vertices intersecting edge 
step barycentric representation calculated time respect 
barycentric representation interpolate attributes supporting vertices faces merged model necessarily triangles points necessarily coplanar cause problems transformation 
models triangulated prior transformation 

implementation results implemented explained procedures java java native function relaxation step 
table gives execution timing information initial embedding 
times average execution times cpu seconds sun ultra regular network normal workload 
initial embedding step native function coded model vertices edges faces time duck sec giraffe sec horse sec pig sec hh shark sec shuttle sec sec table information initial embedding step order feature specification feasible designed gui allows pick vertices source models 
feature vertices aligned second step 
deformation models alignment features coded completely java 
due nature algorithm cost increases linear number features 
table shows timing information models different number features aligned 
information features completely aligned creating 
models aligned features aligned time shark shuttle sec horse giraffe sec horse pig sec horse pig sec giraffe pig sec table information deformation step third step sphere subdivisions merged 
algorithm completely coded java 
course merging step depend number features directly depends number intersecting edges influenced deformation embedding 
table gives information merging step 
timing information upper triangle matrix seen respect number vertices output models lower triangle matrix 
giraffe horse pig shark giraffe sec sec sec sec horse sec sec sec pig sec sec shark sec table information merging step 
transformation obtained linear interpolating vertex positions 
color section shows transformation duck space shuttle feature alignment 
corresponding vertices defined 
picking vertices gui done minute 

technique merge arbitrary genus polyhedra 
merging procedure capable aligning scattered features corresponding vertices 
allows smooth transitions polyhedra common features preserved 
approach proven fast especially compared methods proposed far 
deepen understanding embedding deformation process able better predict control complete process 

nur daniel reisfeld 
image warping anchor points radial basis functions 
computer graphics forum mark de berg marc van kreveld mark overmars schwarzkopf 
computational geometry algorithms applications 
springer verlag heidelberg douglas decarlo jean gallier 
topological evolution surfaces 
proc 
graphics interface eyal carmel daniel cohen 
warp guided objectspace morphing 
visual computer eric chen richard parent 
shape averaging applications industrial design 
ieee computer graphics applications 
straight lines representation planar graphs 
acta sci 
math 
ulrich finke klaus hinrichs 
overlaying simply connected planar subdivisions linear time 
proceedings th annual acm symp 
computational geometry herbert edelsbrunner ernst peter cke 
simulation simplicity technique cope degenerate cases geometric algorithms 
acm trans 
graphics frank harary 
graph theory addison wesley reading ma hong magnenat thalmann thalmann 
general algorithm shape interpolation facet representation 
proc 
graphics interface anil jarek rossignac 
solid interpolating deformations construction animation pips 
eurographics eurographics association amsterdam james kent richard parent wayne carlson 
establishing correspondences topological merging new approach shape transformation 
proceedings graphics interface james kent wayne carlson richard parent 
shape transformation polyhedral objects 
computer graphics siggraph proceedings lazarus 
feature shape transformation polyhedral objects 
proceedings fifth workshop animation simulation muller preparata 
finding intersections convex polyhedra 
theor 
comp 
sc jack ritter 
efficient bounding sphere 
andrew glassner editor graphics gems academic press san diego london thomas sederberg eugene greenwood 
physically approach shape blending 
computer graphics siggraph proceedings michal ari 
shape blending star skeleton representation 
ieee computer graphics applications stein 
convex maps 
proc 
amer 
math 
soc steinitz rademacher 
ber die theorie der 
springer berlin tutte 
draw graph 
proc 
london math soc wagner 
zum 

deutsch 
math emo welzl 
smallest enclosing disks balls ellipsoids 
maurer editor new results new trends computer science springer verlag 
