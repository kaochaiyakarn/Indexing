performance modeling analysis environment recon gurable computers je rey vemuri email vemuri uc edu university cincinnati department ml cincinnati oh usa 
various layers software supporting architectures compilers operating systems synthesis tools forth primary objective deliver performance power cost advantages recon gurable architectures target application 
inherent tools various estimation procedures performance metrics throughput time power reliability cost 
analysis recon gurable computers arc comprehensive analysis modeling tool developing calculate performance metrics 
currently signi cant research development recon gurable architectures compilers automated synthesis tools various programming methodologies abstractions 
common nd tools estimation techniques various performance metrics execution time power consumption throughput rate reliability type estimation common thread developing comprehensive performance modeling analysis environment speci cally analysis recon gurable computers called arc shows application level view arc system analysis recon gurable computers 
allow limited analysis various performance metrics throughput rate reliability power consumption recon guration costs forth 
nature design possible arc perform analysis computable performance metric speci ed performance model speci cation 
arc modular system designed exibility doing performance modeling analysis various performance metrics number di erent recon gurable architectures including hardware software architectures 
inputs arc system architecture speci cation performance model speci cation 
architecture speci cation description target architecture 
performance model speci cation de nes performance metrics sponsored part darpa ito adaptive computing systems program monitored army contract number dabt 
reconfigurable architecture specification performance model specification arc system visualization tools fig 

view arc system 
application model cad cae tool command shell analyzed procedures calculating metrics 
performance model speci cations performance modeling language pdl 
architecture performance model separate inputs arc system easily modi ed con gured perform di erent performance analyses simply changing performance model speci cation 
addition performance model written applies family architectures just single architecture 
example performance model written calculate throughput time designs con gured fpga style architecture 
performance model speci cation written applies entire family fpgas 
inputs arc system internally creates exible executable performance model speci ed architecture 
exible con guration target architecture 
arc automatically updates modi es performance model time new con guration 
arc system analyze various performance metrics number di erent con gurations 
maintains stores data various information contained model results database visualization tools environments gnuplot 
shows system level view arc various components system 
sections describe details inputs arc system operation various components 
performance model speci cation performance model speci cation de nes performance attributes calculated evaluation rules calculating values various attributes 
modeling perspective design viewed collection modules carriers ports 
components actual design categorized types 
modules typically items gates logic blocks switch boxes transistors carriers typically wires net lists 
ports connecting modules carriers modules carriers 
component types declared model speci cation 
reconfigurable architecture specification performance model specification composer evaluator results database arc system scheduler api fig 

components arc system 
application application application component types de nitions various attributes evaluation rules 
attributes de ned particular data type real attached di erent component types 
evaluations rules de ne calculate various performance metrics aspects 
rules composed expressions functions programming statements may involve various attributes di erent design components 
important note performance model speci cation de ned independent speci design 
de ned family designs 
speci cation applied design contains design components declared model speci cation 
design components attributes evaluation rules written language performance modeling language pdl 
modeling language exible allow analysis computable performance metric de ned notation 
attribute types important aspect model speci cation attribute types 
particular data type attributes static dynamic 
static attributes attributes model computed static structure design modeled 
include things area maximum delay throughput supply voltage forth 
dynamic attributes attributes calculated dynamic behavior design 
example include things dynamic power dissipation size queues fo static attributes dynamic attributes require streams values 
dynamic attributes streams values speci ed externally api dynamic attributes depend values dynamic attributes model 
evaluation rules dynamic attributes static dynamic attributes rules static attributes depend static attributes 
recon guration modes important feature arc system ability performance modeling recon guration target architecture 
module carrier port associated con guration mode 
mode de nes various con gurations particular components 
module carrier port declared con guration mode builtin attribute called mode automatically attached component 
data type mode attribute de ned model speci cation referenced evaluation rule 
evaluation rules formulated calculate di erent values speci attribute particular mode certain component 
recon guration triggers builtin attribute trigger attribute 
attribute boolean type 
created modules carriers ports de ned con guration mode 
attribute slightly di erent govern evaluation semantics arc system evaluation 
attribute governs module carrier port change con guration 
attribute true mode particular design component corresponding mode 
con guration mode de ned rule assigned scheduler 
ectively evaluation rule de ning mode application de ne con guration mode 
mechanisms employed application application procedural interface 
recon gurable architecture speci cation architecture speci cation description actual components target architecture 
recall performance model description declarations various components architecture speci cation 
architecture speci cation contain instances component types hierarchy connectivity information may required 
composer composer creates executable performance model performance model speci cation architecture speci cation 
performance model speci cation architecture speci cation executable perform kind calculation 
composing executable performance model involves steps 
rst step component architecture speci cation taken augmented attributes de ned component model speci cation 
attributes attached components performance model merely collection various evaluation rules created 
executable model created analysis steps performed ensure model evaluated 
dependency graph representing dependencies various evaluation rules created entire performance model 
evaluation rule analyzed determine attributes depends correspondingly represented graph 
dependency graph searched cycles topologically sorted determine evaluation sequence evaluation rules 
cycles graph possible determine evaluation order 
composer reports cycles details attributes involved various cycles 
evaluator input evaluator sorted dependency graph 
evaluation involves starting attributes order obtaining values attributes 
attributes assigned value external source api 
user directly assign values command line shell assigned tools applications 
attributes order assigned values rest attributes evaluated correct order 
results evaluation stored results database 
results database maintained attributes evaluated various recon gurations 
possible di erent con gurations may attributes exist con gurations 
database maintains history attributes corresponding evaluation results various con gurations 
scheduler main function scheduler handle recon gurations performance model 
scheduler responsible controlling responding di erent trigger attributes design components 
triggered scheduler responsible assigning new con guration modes various design components ensuring dependency graph updated changes caused moving new con guration 
tightly coupled composer evaluator perform necessary operations updates recon guration 
triggers applications possible controlling input arc system exible variety target architectures application behavior 
arc views application series states state represents particular con guration application 
application behavior de ned 
application control arc system triggers con guration modes 
application behavior various transitions state state application triggers con guration modes change performance model required 
con gurations modes various levels abstraction depending architecture performance model speci cation 
con guration modes apply low level bitmap type con gurations 
arc system ongoing project currently development 
speci details ideas concepts see technical report entitled arc technical report arc home page url www uc edu research projects link 

sanchez 
compiler fpga custom units synthesis 
ieee conference fpgas custom computing machines pages 

michael brad hutchings 
dynamic instruction set computer 
ieee workshop fpgas custom computing machines pages 

vemuri ram vijay 
performance modeling pdl 
ieee computer pages april 

je rey vemuri 
symbolic evaluation performance models tradeo visualization 
proceedings th design automation conference pages 

nagl schurr 
speci cation environment graph grammars 
ehrig 
kreowski editors graph grammars application computer science volume pages 
springer verlag 

kastens 
ordered attribute grammars 
acta informatica volume pages 

kennedy warren 
automatic generation cient evaluators attribute grammars 
proceeding rd acm symposium principles programming languages pages 

jazayeri ogden rounds 
intrinsically exponential complexity circularity problem attribute grammars 
communications acm december 
