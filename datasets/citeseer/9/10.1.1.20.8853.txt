heuristic planning time resources patrik ector geffner department computer science linkoping university linkoping sweden ida liu se fax departamento de computaci universidad sim bol ivar hector usb fax algorithm planning time resources heuristic search 
algorithm minimizes makespan admissible heuristic derived automatically problem instance 
estimators resource consumption derived way 
goals twofold show flexibility heuristic search approach planning develop planner combines expressivity performance 
main issues definition regression temporal setting definition heuristic estimating completion time 
number experiments assessing performance resulting planner 
heuristic state space search shown framework developing different kinds planning algorithms 
successful non optimal sequential planning hsp ff applied optimal parallel planning results 
continue thread research developing domain independent planning algorithm domains metric time certain kinds resources 
algorithm relies regression search guided heuristic estimates completion time derived automatically problem representation 
algorithm minimizes execution time plan known makespan 
far aware effective domain independent planner matches expressivity planner exhibit common features 
example handles actions duration optimizes makespan grt handle resources respect expressive planner 
planners exceed planner expressivity zeno ixtet hsts reported significant domain independent performance jonsson describe need sophisticated engineering domain dependent search control hsts planner :10.1.1.35.724:10.1.1.24.9457
planners plan aspen expressive inherently 
action model assumptions action model propositional strips extensions time resources 
graphplan planners action set enriched op atom precondition effect 
apart fact duration variable op viewed treated regular actions 
time planning time action duration dur 
take time domain planning domains positive integers chosen employ reals demonstrate algorithm depend existence indivisible time unit 
smith weld assumptions action executed interval dur preconditions pre hold preconditions deleted hold dur ii effects add del take place point interior interval point dur 
actions compatible iff safely executed overlapping time intervals 
assumptions lead condition compatibility compatible iff atom pre add del vice versa pre add implies del 
resources planner handles types resources renewable consumable 
renewable resources refer resources needed execution action consumed machine 
consumable resources hand consumed produced fuel 
resources handled real valued quantities division unary discrete continuous determined way resource 
formally planning problem extended sets renewable consumable resource names 
resource name avail amount initially available action amount consumed example autonomous spacecraft smith planning domain autonomous spacecraft number scientific observations limited time window limited resources renewable consumable 
observation spacecraft turn target selected instrument may possibilities switched calibrated requires turning target 
turning operations take variable amount time 
spacecraft consumes fuel turning maintaining stable orientation 
likewise power constraints limit number concurrently active instruments 
course highly simplified description spacecraft operations presents challenging planning problem 
sample plan achieving goal image color earth cam maintain cam action plan preceded start time 
readability maintenance actions coalesced op excluded 
maintain pointing calibrate cam maintain pointing cam pddl description domain experiments 
planning time describe algorithm planning time considering resources 
case plan set action instances starting times incompatible actions overlap time action preconditions hold required intervals goals achieved completion provided initial state holds time 
cost plan total execution time makespan 
describe component search scheme search space branching rule heuristic search algorithm 
search space doing regression classical setting search space plan tails partial plans achieve goals provided preconditions partial plans met 
state regression summarizes information plan tail 
state obtained regressing goal plan tail plan achieves initial state concatenation yields valid plan 
similar decomposition exploited forward search plans 
case states sets atoms 
temporal setting situation different set atoms longer summarizes plan tail plan head 
set atoms true plan head time summarize actions completed plan tail maps goal state combination necessarily yield valid plan 
decomposition valid search states extended actions execution times needed completion 
temporal setting states pairs set atoms ffi ffi set actions time increments ffi formalizing idea useful alternative representation plans sets time stamped actions refers start time action represent plans equivalent form sequences ffi am ffi action sets positive time increments ffi plan actions executed time actions executed time ffi state representation search state pair consisting set atoms set actions corresponding time increments ffi ffi ffi dur 
plan achieves time atoms true schedules actions time gamma ffi initial search state goal set planning problem 
final states branching rule successor state constructed selecting atom regular action op add subject constraint selected actions compatible action action op 
se set selected new dur seg new state defined atoms true actions pending action new begins 
happen time increment ffi adv ffi adv ffi new op actions excluded consideration variable duration meaning action op persisted time slice 
setting duration op new ffi adv state succeeds ffi adv new ffi gamma ffi adv ffi new ffi ffi adv cost transition ffi adv fragment plan tail corresponds transition ffi adv fa ffi adv new accumulated cost plan tail state path obtained adding concatenating transition costs plan fragments path 
accumulated cost state minimum cost paths leading evaluation function search algorithm adds cost heuristic cost defined 
properties branching rule sound sense generates valid plans complete generate valid plans 
example plans regular action active time interval generated 
desirable feature 
rule optimality preserving sense generates optimal plans 
soundness needed optimality provided admissible search algorithm admissible heuristic 
heuristic derive admissible planning heuristic introducing approximations recursive formulation optimal cost function 
state optimal cost iff time plan achieves optimal cost function solution bellman equation ae final min regression set set states constructed branching rule 
approximations 
equation solved practice derive lower bound considering inequalities 
plan achieves state ffi time achieve preconditions actions times gamma ffi preconditions remain true max ffi ffi ffi ffi pre ffi ffi pre addition achieving set atoms implies achieving subset max je positive integer 
plans generated op start times regular action starts 
due way temporal increments ffi adv defined 
completeness achieved working integer time line setting ffi adv inefficient mentioned needed optimality 
temporal heuristics define lower bound optimal function transforming inequalities suitable equalities 
family admissible temporal heuristics arbitrary defined equations min jej max je jej max max ffi ffi ffi ffi pre ffi ffi pre relaxation result equations satisfied optimal cost function 
unfolding right hand side equation obtain equations define function completely jej implementation point view means fixed solve precompute sets atoms jej equations run time compute heuristic value arbitrary states operations tractable precomputation simple variation shortest path problem complexity low polynomial total number atoms 
fixed equation simplified limited set states appear regression set 
example state form fpg regression set contain states pre actions add 
result fpg min add dur pre stands 
planner uses heuristic corresponding equations :10.1.1.20.8853
search algorithm admissible search algorithm ida branch bound search scheme described find optimal solutions :10.1.1.24.9457
ida standard enhancements transposition table cycle checking optimality preserving pruning rule explained 
heuristic precomputed sets atoms described 
refinements temporal planner developed incorporates number refinements ideas 
incremental branching branching scheme implemented planner select set se 
set constructed incrementally action time 
action added set cost resulting partial state estimated dead ends detected early states cost exceeds bound 
similar idea graphplan 
temporal setting things bit subtle op duration fixed priori 
lower bound durations obtained durations regular actions participate set se 
selecting atom regress order atoms selected regression difference completeness difference size resulting search trees 
planner regress atoms decreasing order difficulty heuristic estimate fpg 
pruning rule mentioned necessary generate valid plans order guarantee optimality 
planner refines branching rule right shifted plans generated 
right shifted plan actions scheduled late possible affecting makespan structure plan 
non right shifted plans excluded pruning rule successor action compatible actions may establish atom atoms adds obtained op 
reason action support atoms shifted right delayed 
planning resources show planning algorithm deals renewable consumable resources 
renewable resources renewable resources limit set actions executed concurrently enter planning algorithm branching rule regressing state ffi fnew avail renewable resource heuristic heuristics admissible presence renewable resources order get better lower bounds exclude regression set set actions violate corresponding resource constraints 
unary resources capacity resulting heuristic remains informative multi capacity resources resulting bounds tend weak 
consumable resources consumable resources represent initial amount available avail amount resource left rem 
initial state rem avail state results rem rem gamma fnew heuristic heuristics remain admissible presence consumable constraints useful predict completion time conflicts due resources 
restrict consumable resources monotonically decreasing consumed produced estimate amount resource needed achieve state initial situation need prune state need rem 
amount resource needed estimated function need defined way analogous heuristic function estimates time 
planner implements resource estimator need 
resource consumption treated separately time solution suitable time resources needed complete goal interact complex ways 
estimator considers fastest way achieving goal regardless resource cost need estimator considers cheapest way achieve goal regardless time resources 
overcome problem estimates time resources integrated related ideas see 
time estimates optimize combination time resources opposed time 
maintenance actions planning normally assumed explicit action needed maintain truth fact established cases assumption true 
example spacecraft domain fuel consumed keep spacecraft pointing fixed direction 
ll refer noop consume resources maintenance actions 
incorporated maintenance actions planner branching scheme simple 
atom consumable resource quantity maintain provided part domain definition set default 
duration op variable assume maintain represent rate consumption 
rest maintenance actions treated regular actions 
changes needed planning algorithm 
experimental results implemented algorithm planning time resources described including maintenance actions restriction consumable resources monotonically decreasing planner called tp mentioned ida standard enhancements heuristic 
resource consumption estimators consider single atoms 
non temporal planning compare tp optimal parallel planners ipp blackbox stan standard planning problems time resources 
test set comprises random problems operator blocksworld domain ranging size blocks random logistics problems deliveries 
blocksworld problems generated slaney program 
presents results form runtime distributions point hx yi curve indicates percent problems solved treatment maintenance actions completely general 
recall branching rule generate valid plans plans op actions start time regular action 
presence maintenance actions may happen plans generated demand resources plans generated 
happens planning algorithm may produce non optimal plans may fail find plan exists 
subtle issue plan address 
tp implemented planner problems problem generators experiment scripts available www ida liu se 
experiments run sun ultra 
time seconds problems solved tp ipp blackbox stan time seconds problems solved blocksworld logistics time seconds obs obs obs runtime distributions tp optimal parallel planners non temporal problems 
note time axis logarithmic 
runtime distributions tp spacecraft domain 

seconds 
clearly tp competitive parallel planners 
expected considering overhead involved handling time 
performance logistics domain poor tp solves problems seconds planners solve seconds indicating causes involved branching rule see 
temporal planning tested tp temporal planning problems shows runtime distributions tp problems spacecraft domain varying number observation goals average solution complexities follows goals makespan actions simplified version real problem complex domain involving time renewable consumable resources maintenance actions 
plan makespan depends choices complicated ways problems directions average combinations instrument calibration target observation allow average concurrently active instruments 
pddl description domain appendix 
sequencing observations choice instrument affect number calibrations needed depending power constraints time calibrate depends available targets chosen instrument 
optimal planning hard 
aware domain independent planner model problems solve reasonable efficiency 
results seen point comparative studies 
trying compare tp temporal domains difficulties running results 
developed optimal heuristic planner handles concurrent actions time resources minimizes makespan 
main issues addressed formulation admissible heuristic estimating completion time branching scheme handling actions different durations 
addition planner incorporates admissible estimator consumable resources allows additional parts search space pruned 
similar ideas optimize combination resources time opposed time 
planner achieves tradeoff performance modern strips planners expressivity planners ixtet hsts 
competitive best parallel planners specialized schedulers 
approach improving performance plan explore combination lower bounds provided admissible heuristics different branching scheme 
see details 
acknowledgments research supported foundation sweden graduate study program 
appendix autonomous spacecraft domain main points formulation domain described experiments 
define domain spacecraft requirements strips typing 
action parameters dnew direction vars direction precondition pointing dnew effect pointing pointing dnew resources fuel duration dnew action parameters direction precondition pointing effect pointing resources fuel action parameters instrument effect calibrated resources power duration action parameters instrument precondition effect resources power action calibrate parameters instrument direction precondition pointing effect calibrated duration action parameters instrument quality direction precondition calibrated capability pointing effect duration complete domain random problem generator available www ida liu se 

bellman 
dynamic programming 
princeton university press 

blum furst 
fast planning graph analysis 
artificial intelligence 

bonet geffner 
planning heuristic search 
artificial intelligence 
appear 

fukunaga chien yan 
aspen framework automated planning scheduling spacecraft control operations 
proc 
international symposium ai robotics automation space 

geffner 
planning branch bound relation constraint 
www ldc usb hector 

ghallab 
representation control ixtet temporal planner 
proc 
nd international conference ai planning systems 

geffner 
admissible heuristics optimal planning 
proc 
th international conference artificial intelligence planning scheduling 
aaai press 

geffner 
heuristic planning time resources 
proc 
ijcai workshop planning resources 
appear 
www ida liu se 

hoffman 
heuristic domain independent planning enforced hillclimbing algorithm 
proc 
th international symposium methodologies intelligent systems 

jonsson morris muscettola rajan smith 
planning interplanetary space theory practice 
proc 
th international conference artificial intelligence planning scheduling aips 

koehler 
planning resource constraints 
proc 
th european conference artificial intelligence 

korf 
artificial intelligence search algorithms 
handbook algorithms theory computation chapter 
crc press 

muscettola 
integrating planning scheduling 
zweben fox editors intelligent scheduling 
morgan kaufmann 

penberthy weld 
temporal planning continous change 
proc 
th national conference artificial intelligence aaai 


heuristic planning resources 
proc 
th european conference artificial intelligence 

marsland 
enhanced iterative deepening search 
ieee transactions pattern analysis machine intelligence 

slaney 
blocks world revisited 
artificial intelligence 
see arp anu edu au bw html 

smith frank jonsson 
bridging gap planning scheduling 
knowledge engineering review 

smith weld 
temporal planning mutual exclusion reasoning 
proc 
th international joint conference artificial intelligence 

tate dalton 
plan knowledge planner application logistics 
advanced planning technology 
aaai press 
