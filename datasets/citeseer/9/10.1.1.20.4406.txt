vry incremental development wt synthetic multi agent system uva trilearn robotic soccer simulation team ut wt ut pt pt pt ot ot ot cg yl yr dr dl sl sr dl dr meters remco de boer kok february vry ut wt wt master thesis artificial intelligence computer science ut pt pt pt ot ot ot cg yl yr dr dl sl sr dl dr meters faculty science university amsterdam thesis describes incremental development main features synthetic multi agent system called uva trilearn 
uva trilearn robotic soccer simulation team consists eleven autonomous software agents 
operates physical soccer simulation system called soccer server enables teams autonomous software agents play game soccer 
soccer server provides fully distributed real time multi agent environment teammates cooperate achieve common goal winning game 
simulation models real world complexities noise object movement noisy sensors actuators limited physical abilities restricted communication 
thesis addresses various components uva trilearn robotic soccer simulation team provides insight way components incrementally developed 
main contributions include multi threaded layer agent architecture flexible agent environment synchronization scheme accurate methods object localization velocity estimation particle filters layered skills hierarchy scoring policy simulated soccer agents effective team strategy 
ultimately thesis regarded handbook development complete robotic soccer simulation team contains robotic soccer general survey prior research soccer simulation 
provides solid framework serve basis research field simulated robotic soccer 
project uva trilearn participated international robotic soccer competitions team reached th place german open th place official robocup world championship 
ii authors making master graduation project successful enjoyable experience 
cooperation pleasant stressful circumstances inevitable enabled achieve best abilities 
research described thesis truly team effort result certainly 
furthermore direct supervisor nikos vlassis comments suggestions regarding research helping difficult problems 
need mention nikos deserves credit proofreading thesis helping right track finding solution optimal scoring problem 
especially top seattle space needle proved valuable respect 
special go professor frans groen assigning project guiding initial stages elsevier science sponsoring trip seattle 
people friendship support years master students university amsterdam eugene eelco storm mart de mans scholten martin casper spaan barry manuel de vries 
continuing presence lectures practical sessions enjoyable hours away faculty effort graduating worthwhile 
outside university owe close friends relatives supported 
mention author rdb especially mother tjoa checking spelling parts thesis incredible support entire effort 
equally special go girlfriend gone entire graduation experience understanding supportive times 
thesis surely happened 
second author jk parents jan girlfriend barbara little brother sam sister laura close friends rose equal support encouragement 
doubt deserve credit graduation 
iii iv contents iii robot world cup initiative 
robotic soccer multi agent perspective 
main objectives approach 
guide thesis 
survey related prior research simulated robotic soccer domain 
cmunited 
essex wizards 
fc portugal 

karlsruhe 
magma freiburg 
humboldt 
windmill 
mainz rolling brains 

teams gemini 
guide 
robocup soccer server overview simulator 
sensor models 
visual sensor model 
aural sensor model 
body sensor model 
movement model 
action models 
kick model 
dash stamina model 
turn model 
say model 
turn neck model 
catch model 
move model 
change view model 
actions overview 
heterogeneous players 
referee model play modes 
coach model 
summary main features 
agent architecture 
functional architecture 
system components 
flow control 
synchronization problem synchronization 
timing incoming messages 
number synchronization alternatives 
method external basic 
method internal basic 
method fixed external windowing 
method flexible external windowing 
experimental setup comparing alternatives 
results 

agent world model 
attributes 
environmental information 
match information 
object information 
action information 
retrieval methods 
update methods 
update body sensor 
update visual sensor 
agent localization 
agent orientation 
dynamic object information 
update aural sensor 
prediction methods 
high level methods 
player skills 
low level player skills 
aligning neck body 
turning body point 
turning back point 
vi turning neck point 
searching ball 
point 
freezing ball 
kicking ball close body 
accelerating ball certain velocity 
catching ball 
communicating message 
intermediate player skills 
turning body object 
turning neck object 
moving position 
intercepting close ball 
kicking ball point certain speed 
turning ball 
moving position staying line 
high level player skills 
intercepting ball 
dribbling 
passing ball directly teammate 
giving leading pass 
passing ball depth pass 
opponent 
clearing ball 
marking opponent 
defending goal line 
agent scoring policy optimal scoring problem 
probability ball enters goal 
probability passing goalkeeper 
determining best scoring point 
implementation results 

team strategy 
formations strategic positioning 
heterogeneous player selection 
communication model 
action selection 
version de meer 
uva trilearn qualification team robocup 
uva trilearn team german open 
uva trilearn team robocup 
results 
heterogeneous player results 
communication results 
goalkeeper results 
team results 
vii 
competition results 
german open 
robocup world championship 
directions concluding remarks 

software engineering aspects implementation issues 
incremental development 
manpower distribution 
multi level log system 
viii list figures soccer monitor display 
positions names landmarks simulation 
visual range player 
area goalkeeper 
uva trilearn agent architecture 
uml class diagram showing main components uva trilearn agent architecture uml sequence diagram showing interaction different objects time 
histograms showing distributions see message arrivals second half cycle synchronization example external basic scheme 
synchronization example internal basic scheme 
synchronization example fixed external windowing scheme 
synchronization example flexible external windowing scheme 
field coordinate system assuming opponent goal right 
uml class diagram object type hierarchy 
determining agent global neck angle reported angle line 
agent localization flags 
range possible agent positions single flag perceived 
components calculating change information dynamic objects 
setup velocity estimation experiment 
average velocity estimation error standard deviation function distance uva trilearn skills hierarchy 
example situation kicking ball close body 
situations agent turns dashes moving desired position 
example situation intercepting close ball 
example situation skill called consecutive cycles 
example situation skill called consecutive cycles example situations skill 
determining optimal shooting point opponent 
steps process opponent 
example clearing area skill type clear 
ways mark opponent 
optimal guard point goalkeeper example situation 
experimental setup learning cumulative noise ball motion function traveled distance 
ix standard deviation ball function traveled distance 
situations shooting goal associated probability distributions experimental setup learning probability passing goalkeeper 
data set goalkeeper interception experiment derived statistics 
successive match situations associated scoring probability curves uml class diagram classes related formations positioning 
home positions field formations uva trilearn 
visible area left faces ball right side field 
areas field action selection ball kickable 
list tables comparison domain characteristics computer chess robotic soccer 
examples different behavior levels robotic soccer 
learning methods layered learning implementation cmunited 
reading successful soccer simulation teams 
server parameters important visual sensor model 
server parameters important aural sensor model 
server parameters important body sensor model 
server parameters important movement model 
server parameters important kick model 
server parameters important dash stamina models 
server parameters important turn model 
server parameters important say model 
server parameters important turn neck model 
server parameters important catch model 
server parameters important move model 
overview action commands available soccer server agents 
parameter values default players compared value ranges heterogeneous players server parameters heterogeneous player types 
possible referee messages including play modes 
server parameters important referee model 
server parameters important coach model 
percentage message arrivals cycle different system configurations 
comparative analysis different agent environment synchronization methods 
synchronization statistics uva trilearn full length matches 
global orientations lines perpendicular side lines 
localization performance different configurations iterations 
neck angle estimation performance different configurations iterations 
velocity estimation performance different configurations iterations 
grammar uva trilearn message syntax inter agent communication 
percentage successful scoring attempts top teams robocup 
complete specification formation uva trilearn 
trade offs player parameters heterogeneous players 
results games homogeneous heterogeneous uva trilearn team 
xi results games uva trilearn communication 
results games uva trilearn old new goalkeeper 
results matches played versions uva trilearn team top teams robocup 
cumulative scores matches versions uva trilearn team top teams robocup 
top teams past robocup competitions 
results uva trilearn german open 
final german open 
results uva trilearn robocup 
final robocup 
information hierarchy multi level log system 
xii list algorithms stamina model algorithm applied simulation step 
pseudo code implementation think sense act threads 
pseudo code implementation send time command program 
external basic synchronization method 
internal basic synchronization method 
fixed external windowing synchronization method 
flexible external windowing synchronization method 
pseudo code implementation moving desired position 
pseudo code implementation intercepting close ball 
pseudo code implementation kicking ball desired point certain speed 
pseudo code implementation turning ball 
pseudo code implementation moving position line 
pseudo code implementation intercepting ball 
pseudo code implementation dribbling 
pseudo code implementation passing ball directly player 
pseudo code implementation giving leading pass 
pseudo code implementation passing 
pseudo code implementation opponent 
pseudo code implementation clearing ball 
pseudo code implementation marking opponent 
pseudo code implementation defending goal line 
method determining strategic position player 
method determining player communicate world model 
action selection procedure soccer simulation team de meer 
action selection uva trilearn qualification team agent kick ball method german open agents determine action mode situation method german open agents generate action command 
action selection uva trilearn german open team agent kick ball method adjusting power dash agent stamina low 
action selection uva trilearn robocup team agent kick ball action selection procedure uva trilearn goalkeeper 
xiii xiv chapter eyes people soccer game way life 
quite share view denied game soccer plays prominent role society today 
despite probably common find students write master thesis large part revolves subject 
way probably common think soccer game played robots 
robotic soccer subject scientific community gained popularity years subject research 
chapter provides subject robotic soccer multi agent perspective 
chapter organized follows 
section describes robot world cup robocup initiative ultimate long term goal 
section discuss subject robotic soccer multi agent perspective 
main objectives research general approach followed achieve section 
chapter concluded section overview contents thesis 
robot world cup initiative robot world cup robocup initiative attempt foster artificial intelligence ai intelligent robotics research providing standard problem wide range technologies integrated examined 
robocup ultimate long term goal stated follows mid st century team fully autonomous humanoid robot soccer players shall win soccer game complying official rules winner world cup human players proposed goal grand challenges shared robotics ai community years 
challenge formidable current state affairs fields robotics ai sounds overly ambitious 
people sceptical think goal met 
history proven human predictive powers decade 
examples place 
th december wright man carrying powered flight aircraft built brother wilbur wright 
flight covered feet lasted seconds 
point claimed roughly years man set foot moon surely chapter 
diagnosed mentally 
th july neil armstrong stepped apollo lunar module surface moon 
took years release operational general purpose electronic computer computer chess program deep blue beat human world champion chess examples show things happen relatively short periods time careful robocup long term objective unrealistic 
reason believe building team humanoid soccer robots require equally long period time previous examples 
ultimate robocup goal met near important look short term objectives 
place intention robocup organization robocup vehicle promote robotics ai research providing challenging problem 
robocup offers integrated research task covers areas ai robotics 
include design principles autonomous agents multi agent collaboration strategy acquisition real time reasoning reactive behavior real time sensor fusion learning vision motor control intelligent robot control 
order humanoid robot team perform soccer game number technological breakthroughs technologies incorporated 
development technologies seen short term objective robocup project main goal achieved technological advancements emerge effort get 
second intention robocup organization robocup educational purposes stimulate interest general public robotics ai setting forth exciting broadly appealing long term objective 
currently intention succeeded 
increasing number universities world organize study projects related different aspects robocup 
furthermore interest media general public increasing successive robocup competitions held years 
aspect robocup provides standard problem evaluation various theories algorithms architectures 
standard problem purpose advantage different approaches easily compared progress measured 
computer chess typical example standard problem successful 
mainly evaluation development different search algorithms 
important reasons success computer chess standard problem strength computer chess program clearly defined elo rating result progress domain easily measured actual games human players 
case robotic soccer 
accomplishment deep blue computer chess achieved long term objective 
ai community needs new challenge problem general agreement robotic soccer suitable long range target 
main reason agreement domain characteristics robotic soccer sharp contrast computer chess illustrated table considered generate technologies important generation industries 
order achieve robocup long term objective robocup organization introduced robotic soccer leagues focus different abstraction levels problem 
currently important leagues middle size robot league 
league team consists maximum robots cm height cm diameter 
playing field approximately meters robots global information world 
important research areas league include localization vision sensor fusion robot motor control hardware issues 
built eckert john university pennsylvania 
may deep blue beat gary kasparov matches 
common rating system chess players called elo system named inventor 
chapter 
computer chess robotic soccer environment static dynamic state change turn real time information accessibility complete incomplete sensor readings symbolic non symbolic control central distributed table domain characteristics computer chess compared robotic soccer 

small size robot league 
league team consists robots cm height cm diameter 
playing field size table tennis table overhead camera provides global view world robot 
research areas important league include intelligent robot control image processing strategy acquisition 
sony legged robot league 
league team consists sony quadruped robots better known 
playing field similar size small size league 
robots global view world various colored landmarks placed field localize 
main research areas league intelligent robot control interpretation sensory information simulation league 
league team consists synthetic software agents operate simulated environment 
research areas explored league include machine learning multi agent collaboration opponent modeling 
currently simulation league far largest due fact expensive hardware needed build team 
furthermore easier cheaper test simulation team different opponents 
intention robocup organization introduce robocup humanoid league time robocup robotic soccer world championship fukuoka japan 
detailed account different robocup leagues plans leagues refer 
mainly concentrate robocup simulation league thesis 
simulation league soccer simulation system called robocup soccer server 
system enables teams autonomous software agents play game soccer 
soccer server provides multi agent environment happens real time sensing acting asynchronous 
various forms uncertainty added simulation sensor actuator noise noise object movement limited perception unreliable low bandwidth communication limited physical ability 
advantages soccer server abstraction relieves researchers having handle robot problems object recognition movement 
abstraction possible focus higher level concepts learning strategic reasoning 
robotic soccer multi agent perspective distributed artificial intelligence subfield ai concerned systems consist multiple independent entities interact domain 
traditionally field broken degrees freedom 
different types sensors image sensor audio sensor temperature sensor infrared distance sensor acceleration sensor pressure sensors head back chin legs vibration sensor 
chapter 
distributed problem solving dps multi agent systems mas 
dps focuses information management issues task decomposition solution synthesis systems consisting components common goal 
mas hand aims provide principles construction complex systems containing multiple independent agents focuses behavior management issues coordination behaviors systems :10.1.1.1.8859
robotic soccer example multi agent domain mainly interested thesis 
agent seen situated environment perceives environment sensors acts effectors 
agent additional knowledge domain possess sophisticated cognitive capabilities 
agent goal tries achieve 
multiple agents reside environment called multi agent system 
difference multi agent systems single agent systems multiagent systems consist agents model goals actions 
individual agent perspective main difference agents affect dynamics multi agent environment unpredictable way 
furthermore agents multi agent system interact directly form communication 
group agents multi agent system long term goal regarded team 
order achieve goal agents coordinate behaviors communication 
able act effectively autonomously part team 
case environment contains agents goals incompatible common team goal agents team adversaries 
general applications mas design complex systems offers advantages 
domains require mas discipline 
example cases different entities think people organizations different possibly conflicting goals proprietary information multi agent system necessary model interactions :10.1.1.1.8859
domains necessarily require mas bring advantages presence multiple agents provide method parallel computation speeding operation system 
especially case domains task broken independent subtasks handled separate agents 
multi agent system usually high degree robustness 
systems controlled single entity single failure cause entire system crash 
multi agent systems hand said degrade gracefully agents fail system operational 
multi agent systems inherently modular leading simpler programming 
programmers identify subtasks assign control subtasks different agents 
usually easier centralized agent task applications natural actions executed parallel output input 
modularity multi agent systems enables add new agents system necessary 
called scalability 
adding new capabilities monolithic system easy 
advantage multi agent systems single agent systems multi agent system observe environment perform actions environment multiple locations simultaneously 
said multi agent system take advantage geographical distribution :10.1.1.1.8859
multi agent systems usually higher performance cost ratio single agent systems 
single robot necessary capabilities accomplishing task expensive multiple cheaper robots subset capabilities 
chapter 
viewpoint distributed artificial intelligence robotic soccer game specific attractive multi agent environment interesting research issues arise 
robotic soccer game competing teams 
team consists multiple agents achieve common goal winning game 
fulfill goal team needs score seen subgoal 
order achieve subgoal agent behave quickly flexibly cooperatively local global situations account 
means perception action local agent part larger collaborative plan shared teammates 
goals competing teams incompatible opponent team seen dynamic environment disturb achievement common team goal 
domain collaborative adversarial time 
interesting characteristic robotic soccer domain highly dynamic requires real time decision making success depends acting quickly response dynamically changing environment 
furthermore agents accurately perceive affect world due sensor actuator noise 
addition deal fact large parts state space unobserved hidden perception range limited 
characteristics robotic soccer described apply simulated robotic soccer 
fully distributed multi agent domain teammates adversaries 
robocup soccer server models real world complexities noise object movement noisy sensors actuators limited physical ability restricted communication 
agents respond events decisions real time 
partial view world moment causes large parts state space remain hidden 
addition perception action cycles simulation asynchronous impossible rely traditional ai paradigm perceptual input trigger actions 
agent limited information environmental state transitions resulting fact actions performed teammates opponents unknown 
state space soccer game enormous large hand code possible situations agent behaviors essential agents learn play game strategically 
simulation soccer multi agent perspective suitable domain research direction 
main objectives approach past university amsterdam successful robocup simulation league team windmill third world championship 
sadly creator team died result soccer simulation project came halt 
revival came autumn year started master graduation project simulated robotic soccer 
main objective project twofold 
firstly restart soccer simulation project provide solid foundation enable continue effort graduation 
secondly put performance robocup world championship held summer 
clearly objectives completely compatible 
performing robocup mean set complete working team relatively short period time feasible complete component system optimal way 
challenge find satisfactory trade 
creating complete multi agent system simulated robotic soccer team straightforward task 
main difficulty arises fact system consists different components operate appropriate way 
furthermore building separate component difficult task 
obvious project scale success organized 
software engineering aspects play prominent role effort 
important chapter 
set software architecture allows various components combined modular fashion 
easier extend debug system facilitates 
project attention focused software engineering issues 
problem dealt competitions team participated provided strict deadlines producing complete working system 
meant needed necessary components system working successfully integrated time competitions started 
resources time manpower available achieve limited conflicted somewhat objective set solid platform project build 
initial objective strive optimal solutions various subproblems problem provide scientific validation 
result implementation system components need alterations enable successors concentrate mainly issues 
approach leave high quality components complete working system participate robocup 
decided implement system components optimize ones thought crucial success team 
initial intention available components windmill team basis develop agent control layers create better team 
studying literature subject simulated robotic soccer clear windmill agent architecture suitable build 
mainly single threaded restricted performance old version soccer server new features added 
started redesign current architecture multi threaded modular structure 
re engineering process encountered problems primarily caused fact existing code conform regular software standards structured scarcely documented 
difficulties investigated possibility low level implementation previously successful teams basis team soon discovered give problems windmill code 
felt time consuming reuse existing source codes restructure architecture desired write code 
furthermore opinion low level methods top teams years improved ways 
decided build new team scratch 
enable structure code exactly wanted additional advantage moment time know complete functionality system easier extend debug code 
main problem building large system simulated robotic soccer team big completely accurately specified advance complex built faults 
implemented team software development technique called incremental development 
approach dictates system run useful creating proper set dummy objects 
object gradually refined adding functionality system fully grown 
main advantage technique gave working system times moral tested compared previous versions 
way sure working team ready forthcoming robocup competitions 
furthermore approach easier locate faults system knew originate refinement step 
applied incremental development creating extremely simple system desired multi threaded architecture perform basic loop receiving information server processing information sending action server 
component system built having people yields benefits brings disadvantages 
addressed appendix 
problem large programs written people exactly know functions implemented done 
chapter 
simple way performing task elementary level 
components just implemented void subroutines correct place architecture 
initial system clearly certainly correctly regarded working version 
progressively refined simple implementation extending functionality different components keeping architecture intact 
eventually led version team participated robocup world championship 
guide thesis thesis describe incremental development main features uva trilearn robotic soccer simulation team developed master graduation project 
high level description various aspects team important details implementation lacking current literature 
publications related robocup describe main contributions team level fail provide information concerning implementation contributions 
despite fact teams release source code robocup tournament difficult find mapping described methodologies implementation team 
thesis try bridge gap providing detailed description component uva trilearn agent architecture underlying reasoning motivated design 
ultimately thesis regarded handbook development complete robotic soccer simulation team 
combination source code released provides solid framework new teams build serve basis research field simulated robotic soccer 
remainder section general description contents chapter follows 
chapter presents survey related resulted study literature multiagent systems simulated robotic soccer teams particular 
summary showing main features team studied 
way reader get idea research directions previously explored 
chapter introduces robocup soccer server simulation environment setting research 
describes soccer server detail provides context rest thesis 
topics discussed include sensor action models simulation object movement model heterogeneous players coach 
chapter describes uva trilearn agent architecture 
different layers architecture shown various components system way components interact 
chapter addresses agent environment synchronization problem introduces flexible synchronization method provides optimal synchronization agents simulation environment 
comparative analysis different synchronization schemes shows method clearly outperforms alternatives 
chapter presents uva trilearn agent world model regarded probabilistic representation world state past perceptions 
contains information choice name motivated follows 
part refers university amsterdam 
second part consists words tri learn 
tri derived number different meanings team team members students supervisor layer agent architecture threads 
learn refers learning aspect team 
time learning wanted intention machine learning techniques optimize agent behaviors 
chapter 
objects soccer field positions velocities various methods information derive higher level 
different attributes contained model described shown model updated various kinds sensory perceptions 
especially update methods object localization velocity estimation dynamic objects described detail 
chapter presents uva trilearn skills hierarchy gives detailed description various player skills available agents 
player skills discussed include turning object kicking ball desired position field intercepting ball dribbling ball passing teammate marking opponent 
chapter introduces scoring policy simulated soccer agents 
policy enables agent determine optimal target point goal associated probability scoring ball shot point situation 
shown problem dual solution underlying statistical framework computing scoring probability described 
framework partly approximate method developed learning relevant statistics ball motion regarded geometrically constrained continuous time markov process 
chapter describes uva trilearn team strategy 
topics discussed include team formations heterogeneous players model inter agent communication action selection mechanism agents choose appropriate action situation 
chapter presents results uva trilearn soccer simulation team international robotic soccer competitions participated 
discuss advantages disadvantages robotic soccer competitions scientific perspective 
chapter final chapter thesis 
summarizes main contributions presents important drawn project 
chapter outline promising directions 
appendix addresses software engineering aspects played important role project 
specifically focuses issues concerning implementation team shows tried avoid problems typically arise large software projects 
topics discussed include code documentation version management incremental software development manpower distribution debugging 
chapter survey related initial stages project time spent studying literature subject multi agent systems mas simulated robotic soccer particular 
enabled familiar robotic soccer domain provided great deal knowledge useful project 
retrospect important part effort feel appropriate discuss findings separate chapter 
way reader get idea research directions previously explored 
chapter organized follows 
section short survey main features soccer simulation teams studied provide reading methods teams 
team summarized section overview significant results team international robotic soccer competitions 
prior research simulated robotic soccer domain robotic soccer introduced interesting promising domain ai research vision interface conference june 
working robotic soccer systems described time 
robotic soccer proved particularly domain studying wide variety mas issues evaluating different mas techniques direct manner result domain gaining popularity years international competitions place real robots simulated soccer agents 
competitions held pre robocup abundance robotic soccer related research led immense body literature subject 
research issues studied real robots issues investigated simulation soccer 
space obviously permit exhaustive coverage area survey prior research related thesis 
means focus simulated robotic soccer teams successful past robocup competitions 
overview main features teams research directions explored section 
reading provided summarized team table chapter 
different teams different techniques play games 
chapter 
survey related cmunited team created peter stone carnegie mellon university extensively described phd thesis 
main contributions multi agent machine learning paradigm called layered learning 
paradigm designed enable agents learn common goal environment complex learn direct mapping sensors actuators 
layered learning provides bottom hierarchical approach learning agent behaviors various levels hierarchy 
framework learning level directly affects learning higher level 
possible set learned behavior levels shown table 
bottom layer contains low level individual agent skills ball interception 
second layer contains multi agent behaviors level player interacting 
example pass evaluation agent possession ball option passing particular teammate idea teammate able successfully intercept ball 
learning behavior agents learned ball interception skill part multi agent behavior 
technique incorporating learned behavior part important component layered learning 
third layer contains collaborative team behaviors pass selection choosing teammate ball passed 
agents learned pass evaluation skill create input space learning pass selection behavior 
subsequently pass selection behavior part training learning strategic positioning behavior layer 
combined strategic positioning pass selection behaviors form input representation learning adversarial behaviors strategic adaptation different types opponents 
layer strategic level behavior type example robot ball individual ball interception player multi agent pass evaluation player team pass selection team formation team strategic positioning team opponent adversarial strategic adaptation table examples different behavior levels robotic soccer 

layer learned behavior learning method ball interception neural network pass evaluation decision tree pass selection rl table learning methods layered learning implementation cmunited 

early implementations cmunited contain learned subtasks corresponding layers table 
shown table 
bottom layer ball interception behavior learned neural network 
pass evaluation behavior second layer learned decision tree algorithm see uses learned ball interception skill layer 
subsequently pass selection behavior third layer learned new multi agent reinforcement learning method called rl pass evaluation skill team partitioned opaque transition reinforcement learning method maximizing long term discounted reward multi agent environments agents limited information environmental state transitions 
considered main contributions version cmunited took part competition 
due fact requires training opponent possible situations 
chapter 
survey related layer input 
subtasks layers implemented suggested strategic positioning behavior learned observational reinforcement learning see memory algorithms suitable learning strategically adaptive 
additional important features cmunited implementation include agents predictive memory gives precise accurate model situation soccer field moment time enables model unseen parts world probabilistic way 
advanced communication protocol implemented enables efficient reliable inter agent communication despite limited communication facilities provided soccer server 
communication protocol ensure team coordination 
cmunited uses flexible teamwork structure agents flexible roles positions inside dynamically changing formations 
agents sophisticated method determining strategic position field called spar 
positioning spar agents multiple objective function attraction repulsion points 
way maximize distance players minimize distance ball opponent goal 
spar extension similar approaches potential fields positioning highly dynamic multi agent domains see 
agents pre defined special purpose plays set plays executed situations occur repeatedly soccer game 
examples situations kick offs goal kicks corner kicks agents cmunited opponent behavior models decisions adaptive different kinds opponents 
feature added 
cmunited successful soccer simulation team official robocup competitions started 
team reached th place robocup world champion robocup 
robocup cmunited reached th place cmunited st 
year cmunited managed th place new team att cmu finished rd 
essex wizards important characteristic team implementation multi threaded 
advantage agents perform various computations waiting completion slow operations server 
furthermore reinforcement learning technique called learning see learn decision making mechanism agents 
main objective team score goals local goal individual agent different due fact different roles team 
linking local goals efficient way cooperation emerges 
additional feature team agents possess position selection behaviors choosing optimal position field different situations 
example behavior marker psb 
psb selects opponent mark chooses strategic position position opponent position ball 
way agent tracker strategic positioning attraction repulsion 
winning team year participates championship unchanged version 
team serves benchmark measure progress domain 
chapter 
survey related psb offside trap psb essex wizards finished rd robocup 
year reached place european open th robocup 
fc portugal creators team decided base low level implementation entirely cmunited concentrate primarily high level issues 
main innovations fc portugal team positioning mechanism distinction strategic active situations 
strategic situations players method called situation strategic positioning calculate strategic position player type current game situation current tactic formation 
active situations player positions calculated specific ball possession ball recovery mechanisms 
fc portugal players mechanism called dynamic positioning role exchange enables exchange roles positions inside current formation 
utility exchange positive team 
position exchange utilities calculated distance player current position strategic position importance position inside formation current situation 
additional features team include intelligent communication mechanism strategic looking mechanism slm 
furthermore agents decision tree choose appropriate action situation 
fc portugal high level strategy easily configurable flexible different types opponents 
fc portugal won robocup 
implementation team hierarchy logic agent architectures captures certain types situated behavior basic classes complex tactical behavior 
lowest level hierarchy formed agent able distinguish sensory states different time values sensors apart timer 
agent characterized broader perception action feedback 
type agent different sensors reacts sensory input purely reactive fashion 
level find agent 
type agent defined reactive agent maintains internal state uses internal state sensory states activate effectors 
task oriented agent capable performing certain tactical elements real time activating subset behavior instantiations concentrating specified task 
highest level formed process oriented agent capable consolidating related tasks coherent processes 
resulting framework proved expressive captures desirable properties situated automata subsumption style architectures retaining rigour clarity logic representation 
additional feature team sophisticated agent environment synchronization method greatly enhances performance team 
finished rd pacific rim series pricai th 
robocup team reached th place 
karlsruhe main research issue addressed team development application reinforcement learning techniques complex domains 
long term goal develop learning system situated agent reacts changes environment relying representations inferential reasoning 
chapter 
survey related goal win match learn generate appropriate behavior 
complexity robotic soccer domain huge state space possible actions strategies partial observability state information traditional reinforcement learning methods difficult 
team tries tackle complexity sequences basic commands separate ones order reduce number actions decisions available agent 
call sequences moves real time dynamic programming methods see learn moves incrementally approximating optimal value function feedforward neural network 
examples moves successfully learned kick kick ball specified direction desired speed 
intercept ball intercept moving ball stochastic nature domain account 
dribble run ball losing control 
positioning move particular position avoiding collisions players 
ball control high speed ball 
hold ball keep ball away opponent 
tactical level agents learn available moves execute 
difficulty decision general complex sequence moves selected single move achieve final goal 
current version karlsruhe team uses intermediate step reinforcement learning solution problem 
call priority probability quality ppq approach 
approach possible move judged usefulness quality probability success 
quality move priority ordering probability success learned simple trial error training procedure 
approach karlsruhe successful competitions 
team runner fc portugal robocup 
magma freiburg magma stands motivation action control goal management agents 
action control mechanism magma freiburg team extended behavior networks 
extend original behavior networks see exploit information continuous domains allow concurrent execution behaviors 
extended behavior networks consist components goals 
represented static importance value goal goal condition describing situation goal satisfied relevance condition value represents dynamic relevance goal 
current state diverges goal state relevant urgent goal 
competence modules 
consist list preconditions satisfied module executable behavior executed module selected execution list effects expected behavior execution activation value module 
perceptions 
extended behavior networks real valued propositions order improve quality perception continuous domains 
resource nodes 
coordinate selection multiple concurrent behaviors 
chapter 
survey related achieve goal directed behavior competence module receives activation goal effect satisfies goal 
competence modules inhibited goal module effect preventing goal satisfied 
high activation value module increases probability corresponding behavior executed 
apart additional benefits extended behavior networks maintain advantages original behavior networks reactivity planning capabilities consideration multiple goals cheap computation 
approach successfully implemented magma freiburg soccer team runner robocup reached th place robocup 
humboldt team strong low level implementation 
agent architecture bdi belief desire intention approach 
means agent consists different components belief component models belief agent state environment sensory information 
desire component evaluates possible desires beliefs 
intention component specifies best plan committed desire 
execution component receives chosen action responsible synchronization soccer server 
situations agents information induce rules case reasoning learn experiences 
requires efficient case memories enable quick retrieval old cases 
humboldt won robocup runner robocup th robocup 
windmill old team university amsterdam created late 
uses layer agent architecture 
basic layer provides access functionality offered soccer server hides server possible layers 
subsystems exist receiving parsing information server sending actions server 
layer contains visual memory 
skills layer uses functionality offered basic layer define advanced agent skills 
distinction essential tasks intercept elementary tasks search ball feature extractors 
feature respect seen derived piece information important deciding perform certain action 
examples team mate free closest ball 
features calculated current information available visual memory internal state agent 
highest layer architecture control layer chooses optimal action skills layer current field situation 
strong aspect windmill team effective zone strategy positioning players field 
order improve local positioning players inside zone attraction repulsion algorithm attractive repulsive forces supplied directly players indirectly feature extractors indicating favorable locations 
furthermore generic learning algorithm implemented find optimal parameter values skills shooting dribbling 
windmill reached rd place robocup finished th robocup competition team called uva team chapter 
survey related mainz rolling brains team uses layer agent architecture 
bottom technical layer communicates server provides interface server layers 
middle transformation layer contains skills tools player 
player possibility choose skill levels 
low level skills correspond basic player commands turn kick high level skills consist sequences commands intercept dribble 
highest layer decision layer seen brain player 
mainz rolling brains hierarchical rule tree player control 
rule tree consists condition firing rule action performed condition satisfied 
significant feature team rule trees constructed ai techniques learning genetic algorithms 
different rule trees created different player types separate subtrees exist standard situations 
players models opponent behavior constructed match order adaptive different strategies 
mainz rolling brains finished th robocup reached place robocup 
team high quality low level implementation 
agents effective synchronization scheme accurate world model 
furthermore possess strong low level individual skills sophisticated stamina management system cleverly controls running behavior agents runs compared 
significant feature team explicit cooperation agents 
despite performed international competitions led conclude individual lowlevel skills world model accuracy prior importance cooperation 
research goal investigate cooperation realized communicating detailed numerical symbolic information global coordinates elaborate plan sequences 
intention demonstrate powerful cooperation achieved man communication form short utterances 
team th robocup 
year team won japan open reached th place robocup 
teams gemini literature study investigated small number teams successful past robocup competitions 
shortly mention teams exhibited significant features 

team uses hybrid agent architecture combines benefits traditional horizontal vertical architectures 
vertical architecture higher layer called needed layer uses functionality offered lower layer perform task 
horizontal architecture layers independent active time 
architecture combines benefits approaches hybrid architecture perception flow vertical action flow horizontal 
koblenz 
team copied low level skills cmunited uses multiagent scripts implemented programming language prolog describe multi agent behavior terminal rule action elementary action meta rule action consists set 
chapter 
survey related 
logic control language deciding agent behave situations possibly choice 
agents logical rules decision trees choices 
order specify procedural aspects agent behavior statecharts adopted 
koblenz th 
gemini 
significant feature team cooperation agents achieved inter agent communication 
reinforcement learning select best strategy opponent statistical information 
team th robocup th robocup finished th robocup 
guide conclude chapter presenting overview team discussed previous section 
summarize significant results teams international competitions top finishes 
important realize list exhaustive contains results including year 
team roll honour cmunited th wc st wc st th wc rd th wc essex wizards rd wc rd ec th wc fc portugal st ec st wc rd pr th ec th wc karlsruhe nd ec nd wc magma freiburg nd wc th wc humboldt st wc nd wc th wc windmill rd wc th wc mainz brains th wc th wc th wc st jo th wc koblenz th ec gemini th wc th wc table reading successful soccer simulation teams :10.1.1.34.2944
significant competition results teams shown right 
wc denotes world championship ec denotes european championship pr denotes pacific rim series jo denotes japan open 
chapter robocup soccer server robocup soccer server soccer simulation system enables teams autonomous agents play match soccer 
system originally developed dr noda etl japan 
years basis international competitions research challenges 
soccer server provides realistic domain sense contains real world complexities sensor actuator noise limited perception stamina agent 
purposes evaluation multi agent systems communication agents restricted 
chapter give detailed description version simulator 
information largely partly result experiments performed studying behavior soccer server 
address aspect simulation done discuss concepts parameters important understanding remainder thesis 
chapter organized follows 
section general overview main components simulator 
sensor movement action models discussed sections 
section devoted concept heterogeneous players followed explanation referee model section 
coach shortly discussed section 
chapter concluded section contains summary important features simulation 
overview simulator robocup simulator consists main components soccer server soccer monitor logplayer simulation soccer match carried client server style 
soccer server provides domain virtual soccer field simulates movements objects domain controls soccer game rules 
characteristics server specified set server parameters discussed chapter 
parameters define example amount noise added visual perceptions maximum speed player 
players controlled chapter 
robocup soccer server client programs act brain connect server specified port 
client program control single player 
communication server clients done udp ip sockets 
sockets client programs send requests server perform desired action kick 
server receives message handles request updates environment accordingly 
fixed intervals server sends sensory information state world player 
direct communication clients permitted allowed clients communicate indirectly server say hear protocols restrict communication 
match played teams consisting separate clients connection server 
objective team direct ball opponent goal preventing ball entering goal 
important realize server real time system working discrete time intervals cycles 
cycle specified duration defined server parameter simulator step current server version value ms 
period clients send requests player actions server server collects requests 
cycle server executes actions updates state world 
server uses discrete action model 
client sends multiple action requests server single cycle server randomly chooses execution discards 
important client sends action request cycle 
hand sending request cycle mean agent misses opportunity act remains idle 
undesirable real time adversarial domains may lead opponents gaining advantage 
slow decision making leading missing action opportunities major impact performance team 
complex feature soccer server sensing acting asynchronous 
version simulator clients send action requests server ms receive visual information ms intervals crucial agent perform action opportunity means cycles agents act receiving new visual information 
feature challenging agents requires prediction current world state past perceptions 
asynchronous sensing acting force agents find optimal balance need obtain information world need act possible 
furthermore actions need executed cycle arrive server right interval 
important synchronization method sending actions server greatly enhance performance team 
simulator includes visualization tool called soccer monitor allows people see happening server game 
soccer monitor displays virtual field soccer server computer screen window system 
soccer server soccer monitor connected udp ip 
soon server connected monitor send information monitor cycle concerning current state world 
shows soccer monitor display 
information shown monitor includes team names score current play mode current time number cycles passed field boundaries positions players ball 
note player drawn halved circle containing number 
light side represents front part player body dark side back 
black line visible light area represents player neck angle defines direction vision 
number denotes uniform number belonging particular player 
black bars visible left right represent goals 
note monitor provides visual interface server form buttons labeled kick quit 
teams connected server start match kick button allows human referee start game 
quit button break simulation disconnecting clients terminating server 
thesis names server parameters shown typewriter font 
default values server parameters simulator step send step 
pt ot ot ot chapter 
robocup soccer server cg yl yr dr dl sl sr dl dr meters soccer monitor display 
note soccer field objects twodimensional 
concept height plays role simulation 
field dimensions pitch length pitch width goals width goal width 
current server version means size field width goals 
goals doubled size compared ordinary soccer scoring dimensions difficult 
enforce rules game simulator includes referee module controls match 
artificial referee detect trivial situations team scores ball goes bounds 
referee enforces offside rule controls play mode kick corner kick suspends match second half finishes 
situations obstruction play hard detect intentions players mechanically deduced 
human referee judge kind 
human referee give free kicks team drop ball chosen spot field special server interface built monitor 
order enhance performance teams coach client 
coach example analyze strengths weaknesses enemy team give strategic advice communicating players 
third main component simulator logplayer 
tool thought video recorder replay games 
game possible run server option causes recording current match 
means server stores match data logfile 
logplayer combined soccer monitor replay game logfile needed 
useful analyzing team debugging clients 
facilitate fast debugging logplayer equipped fast forward rewind buttons just real video recorder 
addition logplayer possible jump particular cycle game 
useful want see particular game situation goal 
ot chapter 
robocup soccer server cg yl yr dr dl sl sr dl dr meters flag flag flag flag flag flag flag flag flag flag goal flag flag flag physical boundary flag line flag flag flag flag flag flag flag line line flag flag flag flag flag flag flag flag flag flag flag flag flag flag flag flag flag flag line flag flag flag flag goal flag flag flag flag flag flag flag flag flag flag positions names landmarks simulation 
taken 
sensor models robocup agent different types sensors visual sensor body sensor aural sensor 
sensors give agent reasonably picture environment 
section discuss characteristics sensor types 
visual sensor model visual sensor detects visual information field distance direction objects player current field view 
information automatically sent player send step ms visual sensor works proximity sensor seeing objects close player 
important realize visual information relative player perspective 
result player directly see global position global positions players ball 
relative information converted global information old relative information player moved position field 
agents need way derive global information visual message 
landmarks flags lines goals placed field 
illustrated shows positions names landmarks simulation 
combining known global positions landmarks relative positions included visual message agent determine global position global positions ball players 
player directly control frequency range quality visual information sent 
frequency visual information arrives server determined server parameter send step represents basic time step visual messages currently stands ms 
player choose trade frequency visual messages quality chapter 
robocup soccer server information width view cone 
adjusting set high default low set narrow normal default wide 
example setting low means player receive direction information objects distances 
receive information twice 
frequency player receives visual messages calculated follows view frequency send step view width factor view quality factor view width factor iff narrow iff normal iff wide view quality factor iff high iff low 
field view player determined server parameter visible angle represents number degrees player normal view cone player parameter see 
current server version default values parameters degrees normal respectively 
player view angle calculated equation view angle visible angle view width factor view width factor depends described 
note player see objects outside view cone visible distance currently meters away feel appropriate case 
receive information type object ball player goal flag name flag player 
visual information arrives server format see time time simulation cycle soccer server distance direction direction goalie distance positive real number direction degrees real number real number degrees degrees string chapter 
robocup soccer server object information provided visible objects objects player view cone 
amount information different object depending type distance object quality visual information determined player parameter 
set low information object name object direction object 
high information provided depending type object distance 
dist distance object question 
situation summarized follows landmarks flags lines goals information consists name landmark question distance landmark direction landmark 
note case line distance distance point line bisector player view cone crosses line direction angle line bisector 
players amount information depends dist way dist far length uniform number player team name team belongs visible 
furthermore values distance direction included visual message 
far length dist far length team far length team name visible values distance direction included 
probability player uniform number visible decreases linearly dist increases 
holds probability values 
dist far length team far length values included anymore information distance direction 
far length team far length dist team far length uniform number visible probability team name visible decreases linearly dist increases 
dist exceeds team far length team name visible anymore player simply identified anonymous player 
ball situation similar dist far length values distance direction included visual message 
far length dist far length team far length values distance direction included 
probability decreases linearly dist increases 
dist far length team far length values included anymore distance direction 
version soccer server values far length far length team far length team far length meters respectively 
taken shows visual range player provides example amount information object decreases distance object increases 
object names contain letter indicating type object players goals ball flags lines 
multiple objects type exist letter followed specifier indicates object type concerns 
seen case player possibly followed team name player uniform number depending chapter 
robocup soccer server cg yl yr dr dl sl sr dl dr meters client vision perspective illustrated visible distance far length far length team far length team far length view angle field length field width visual range player 
amount visual information object decreases distance object increases 
example sensing player shown halved circle light side front 
black circles represent players 
objects sensing player view angle visible distance sensing player seen 
players visible felt 
player directly front sensing player reported angle player player reported roughly player roughly player identified team name uniform number distance direction reported 
player identified team name distance direction player furthermore chance uniform number values reported 
player distance direction reported sure chance getting team name 
player simply identified anonymous player distance direction 
taken 
distance player 
player goalkeeper specified optional argument goalie 
ball simply identified 
naming convention landmarks motivated position field 
object example virtual flag center field virtual flag top corner penalty area right hand side 
note types flags located meters outside playing area 
flag example located meters bottom side line meters left center line 
way located meters right right side line meters center right goal 
refer back picture positions names landmarks field 
values distance direction calculated follows prx vry distance rx ry direction arctan prx ao prx distance chapter 
robocup soccer server ery distance vry ery ery vry distance body dir abs neck dir abs respectively denote global position global velocity target object global position global velocity sensing player global facing direction sensing player 
furthermore prx vry respectively relative position relative velocity target object ery denotes unit vector direction relative position 
values included target object player 
body direction observed player relative neck direction observing player 
body observed player turned direction neck observing player value 
way neck direction observed player relative neck direction observing player 
real world complexities contained soccer server precision visual information decreases distance object increases 
noise introduced visual sensor data quantizing values sent server 
distances objects example quantized follows distance quantize exp quantize ln distance distance distance exact quantized distance values respectively parameter denoting quantize step 
players ball parameter equal server parameter quantize step landmarks server parameter quantize step 
furthermore quantize rint rint denotes function rounds value nearest integer 
amount noise increases distance object increases 
example object roughly reported distance maximum noise reported distance roughly noise 
values direction quantized follows distance quantize distance direction quantize direction quantize quantize function shown direction denote quantized values distance change direction direction change respectively 
table lists server parameters important visual sensor model default values 
parameter value parameter value send step team far length visible angle team far length visible distance quantize step far length quantize step far length table server parameters important visual sensor model default values 
chapter 
robocup soccer server aural sensor model aural sensor detects spoken messages sent player coach issues say command 
calls referee received aural messages possible referee messages discussed section 
soccer server communication paradigm models crowded low bandwidth environment agents teams single unreliable communication channel 
spoken messages immediately broadcast nearby players teams perceptual delay 
aural sensor messages arrive server format hear time sender message time indicates current simulation cycle soccer server 
sender online coach left online coach right sender online 
referee sender referee 
self sender 
relative direction sender sender player 
message string representing contents message length string limited say msg size currently bytes 
note information player sent message distance sender 
furthermore capacity aural sensor limited 
server parameter hear max represents maximum hearing capacity player 
time player hears message hearing capacity decreased hear decay 
cycle hearing capacity player increased hear reaches hear max 
hearing capacity player negative player hear message hearing capacity hear decay 
current server parameter values means player hear message second simulation cycle 
multiple messages arrive time chosen order arrival rest discarded communication extremely unreliable 
messages referee treated privileged transmitted players 
players field communication channel possible communication opponent team useless overloading channel messages 
avoid players separate hearing capacities team 
means player hear single message team simulation cycles 
players deal fact communication range limited 
spoken message transmitted players audio cut dist meters speaker 
messages referee heard players 
server parameters important aural sensor model listed table default values 
parameter value parameter value say msg size hear decay hear max audio cut dist hear table server parameters important aural sensor model default values 
hold messages player say message hear player simultaneously 
chapter 
robocup soccer server body sensor model body sensor reports physical information player stamina speed neck angle 
information automatically sent player sense body step current server version ms body information arrives server basic format sense body time view mode stamina stamina effort speed neck angle kick dash turn say turn neck catch move change view time indicates current simulation cycle soccer server 
high low denotes quality visual information received 
narrow normal wide denotes width player view cone 
stamina positive real number representing player current stamina 
effort positive real number representing player current effort capacity 
represents player current speed 
noise incorporated value quantizing see equation speed follows quantize speed 
represents direction player current speed 
noise incorporated value quantizing direction equation 
represents direction player neck relative body quantized 
count variables counters total number commands certain type executed server means player far executed kick commands 
counters check command sent previous cycle performed corresponding counter value incremented 
parameters mentioned described extensively sections 
server parameters affect body sensor listed table default values 
parameter value sense body step table server parameters important body sensor model default values 
chapter 
robocup soccer server movement model soccer server object movement simulated stepwise simple way velocity object added position velocity decays certain rate increases acceleration object resulting certain client commands 
simulation cycle movement mobile objects players ball calculated equations accelerate move decay decay speed reset acceleration respectively denote position velocity acceleration object cycle noise vector wind vector added object movement 
decay parameter representing velocity decay rate object players equal server parameter player decay ball server parameter ball decay 
acceleration object results certain client commands sent server 
acceleration player example result player 
way acceleration ball results player kicking 
action commands described section 
objects overlap cycle objects collide movement objects moved back direction came overlap anymore velocities multiplied 
note possible ball go player long ball player overlap simulation cycle 
order reflect unexpected movements objects real world soccer server adds uniformly distributed random noise movement objects 
noise vector equation contains random numbers ri elements taken uniform distribution range rmax rmax 
value rmax depends speed object calculated follows rmax rand rand parameter representing random error object movement players equal server parameter player rand ball server parameter ball rand 
soccer server models wind vector natural form noise 
wind simulation represented vector wx wy wind force wind dir method converts polar coordinates cartesian coordinates 
actual vector added movement object result wind depends weight object calculated formula wx wy weight ei random number taken uniform distribution range wind rand wind rand 
furthermore weight parameter representing weight object players equal server parameter player weight ball equals ball weight 
noted current server version values wind related parameters set wind 
table shows server parameters important movement model soccer server default values 
chapter 
robocup soccer server parameter value parameter value ball decay player weight ball rand wind force ball weight wind dir player decay wind rand player rand table server parameters important movement model default values 
action models player client wants perform certain action sends action command server requesting server execute action desires 
player perform actions kick dash turn say turn neck catch move change view sense body score 
soccer server version sense body command obsolete body information automatically provided cycle body sensor 
earlier versions case player specifically ask server physical status command 
sense body command certain cycle server return body information reported body sensor cycle see section format message 
player issues score command server returns message form score time time indicates current simulation cycle integer denoting number goals scored player team integer denoting number goals scored opponent team 
actions listed change state world way 
remainder section separately discuss characteristics actions 
kick model player wants kick ball send kick command server 
command takes parameters power kick angle ball kicked relative body kicking player 
kick power determines amount acceleration ball kicking angle degrees 
kick command arrives server command executed ball kickable player issued command 
player kick ball maximal kick distance defined ball size player size kickable margin 
words means kick performed distance center ball center player minus radius ball minus radius player kickable margin 
important aspect kick model actual power ball kicked equal power argument supplied kick command depends relative position angle distance ball kicking player 
example angle ball relative body player negative influence kick power 
larger angle gets actual power reduced 
worst case ball angle player actual power reduced 
distance situation similar 
minimum distance outer shape player ball equals meters chapter 
robocup soccer server leaves kick power unaltered 
worst case distance equals kickable margin actual kick power reduced 
case ball player power argument supplied kick command reduced total 
actual power act pow ball kicked determined formula act pow power dir diff dist diff kickable margin power kick power supplied argument kick command dir diff absolute angle ball player body direction dist diff distance player ball minimum distance outer shape player outer shape ball 
actual kick power act pow calculate acceleration vector added global ball velocity vt cycle shown equation 
acceleration applied transition simulation cycle 
vector calculated follows act pow kick power rate cos sin kick power rate server parameter determine size acceleration vector direction ball accelerated cycle direction equals sum body direction kicking player angle parameter kick command 
furthermore noise added form small vector ki random number taken uniform distribution range kmax kmax 
value kmax depends power supplied kick command calculated formula kmax kick rand ower max power kick rand server parameter acceleration vector normalized maximum length ball accel max 
current server version value ball accel max equals product kick power rate 
means possible obtain maximum acceleration ball directly front kicking player kicked maximum power 
indicated equation acceleration vector added current velocity vt ball 
resulting velocity vector normalized maximum length ball speed max normalization step noise wind added ball velocity 
soccer server version values ball accel max ball speed max possible give maximum speed ball single kick 
earlier server versions possible multiple kicks successive cycles needed ball go faster note new ball position calculated vector addition see equation maximum distance ball travel simulation cycles equal ball speed max noise wind neglected 
note ball get accelerated means kicking kick acceleration ball remains see equation kick performed 
current server settings ball travel distance meters assuming optimal kick 
case ball covered distance meters cycles remaining velocity meter cycle 
cycles remaining velocity smaller meters cycle distance covered meters 
table shows server parameters important kick model soccer server default values 
current server settings value kick rand equals default players 
sequel assume noise added 
heterogeneous player types case discussed section 
order give maximum speed ball kick players kick ball times successive cycles continually increasing velocity 
final kick executed possible give maximum speed ball 
principle introduced robocup champion humboldt see 
chapter 
robocup soccer server parameter value parameter value kickable margin kick power rate kick rand ball accel max ball size ball speed max player size table server parameters important kick model default values 
dash stamina model dash command player accelerate direction body 
command takes single parameter power dash 
dash power determines amount acceleration player 
power argument dash command positive player accelerated forward direction power negative player dashes backwards 
soccer server prevents players constantly running maximum speed player speed max assigning limited stamina 
half stamina player set value server parameter stamina max 
time player performs dash certain amount stamina consumed 
backwards expensive forward forward dash power player stamina reduced power dash command backward dash power stamina reduced power 
player stamina lower amount needed dash power argument dash reduced way require available stamina 
player stamina modeled parts stamina represents current stamina player value stamina max power parameter dash command exceed value 
effort represents efficiency player movement lies effort min effort max 
recovery influences rate stamina restored lies recover min 
player stamina decreased dashes gets restored slightly cycle 
cycle value stamina lies certain threshold values effort recovery decreased minimum reached value stamina lies threshold effort increased maximum recovery value increased algorithm shows stamina model algorithm applied simulation step detail 
kick model see section actual power player dashes necessarily equal power argument dash command 
dash command arrives server stamina player issued command reduced power argument dash twice absolute power case backward dash 
server calculates actual dash power act pow case depends current effort player way act pow effort power soccer server version possible see soccer monitor display players tired 
case color player back fades stamina drops 
color returns slowly stamina restored 
restored half 
chapter 
robocup soccer server reduce stamina dash power power stamina stamina power stamina stamina power reduce recovery stamina recovery decrement threshold stamina recover dec thr stamina max recovery recover min recovery recovery recover dec recovery max recover min recovery reduce effort stamina effort decrement threshold stamina effort dec thr stamina max effort effort min effort effort effort dec effort max effort min effort increase effort stamina effort increment threshold stamina effort thr stamina max effort effort max effort effort effort effort min effort max effort restore stamina recovery value stamina min stamina max stamina recovery stamina max algorithm stamina model algorithm applied simulation step 
current server version maximum effort value player effort max 
long player manages stamina way effort value decreases actual dash power equal power argument supplied dash command 
actual dash power act pow generate acceleration vector player cycle acceleration applied transition simulation cycle simulation cycle calculated follows act pow dash power rate cos sin dash power rate server parameter determine size acceleration vector body direction player cycle acceleration vector normalized maximum length player accel max added current velocity vt player shown equation 
resulting velocity vector normalized maximum length player speed max new player position calculated vector addition see equation equals maximum distance player cover simulation cycles neglecting noise wind chapter 
robocup soccer server added normalization 
note single dash set acceleration vector simulation cycle velocity player decay 
acceleration player remain performs dash 
order keep sustained run time player keep sending dash commands server 
table shows server parameters important dash stamina models soccer server default values 
parameter value parameter value effort thr effort stamina max recover dec thr stamina max recover dec effort min recover min effort max player accel max effort dec thr player speed max effort dec dash power rate table server parameters important dash stamina models default values 
turn model player wants turn change body direction send turn command server 
command takes angle called moment turn parameter valid values degrees 
previous action models actual angle player turns equal moment argument turn command 
depends speed player 
player zero velocity angle turn equal moment argument turn command noise added 
player moves faster difficult turn result inertia 
actual angle act ang player turns issues turn command calculated follows act ang moment inertia moment player speed random number taken uniform distribution player rand player rand interval moment argument supplied turn command inertia moment server parameter denoting inertia player player speed current speed turning player 
current server version values inertia moment respectively default players 
default player moves maximum speed player speed max maximum effective turn degrees assuming noise 
player dash turn cycle maximum speed player executing turn equals player speed max player decay case effective turn degrees 
table shows server parameters important turn model default values 
parameter value parameter value player rand inertia moment table server parameters important turn model default values 
chapter 
robocup soccer server say model player wants broadcast message players say command 
command takes single parameter message player wants communicate 
length message restricted say msg size currently characters come set za 
square brackets 
spoken messages immediately broadcast players teams perceptual delay 
player limited communication range spoken message transmitted players audio cut dist meters speaker 
furthermore players limited hearing capacity 
modeled server parameters hear max hear hear decay refer back section detailed explanation meaning parameters 
current server settings player hear message teammate simulation cycles 
means player speak wants multiple times cycle useless speak frequently 
table shows server parameters important say model default values 
parameter value parameter value say msg size hear audio cut dist hear decay hear max table server parameters important say model default values 
turn neck model player turn neck somewhat independently body turn neck command 
command takes angle turn parameter valid values degrees 
turning neck player changes angle head relative body result field view changes 
note player field view changes issues turn command turn neck command executed 
neck angle player relative body body angle changes result turn 
real world player turn neck indefinitely direction 
minimum maximum angle player neck relative body server parameters 
neck angle assume illegal value result turn neck command angle argument command adapted way neck angle remains allowed boundaries 
important realize turn neck command executed cycle kick dash turn command 
furthermore actual angle player turns neck equal angle argument turn neck command noise added turn neck affected momentum turn table shows server parameters important turn neck model default values 
parameter value parameter value table server parameters important turn neck model default values 
recall section teams communication channel 
chapter 
robocup soccer server catch model wt wt ut pt pt pt goalkeeper wants catch ball sending catch command server 
command takes direction catches ball parameter valid values degrees 
catch command arrives server executed preconditions met 
goalkeeper player perform catch 
play mode play direction long ball inside penalty box inside area 
conditions satisfied catch fail 
goalkeeper area defined rectangle length area width area direction catch 
illustrated shows area goalkeeper performing catch ot ot ot angle 
ball inside area goalkeeper catch ball probability catch probability 
catch fails goalkeeper issue catch command catch ban cycle simulation cycles passed catch commands issued time effect 
goalkeeper succeed catching ball play mode change goalie catch ball free kick denoting left right team 
goalkeeper move command see section move ball inside penalty area 
goalie max moves times kicks ball 
server parameters important catch model shown table default values 
cg yl yr dr dl sl sr dl dr meters area catch angle area area goalkeeper performing catch angle 

parameter value parameter value catch probability catch ban cycle area goalie max moves area table server parameters important catch model default values 
move model move command place player directly desired position field 
command takes parameters denoting coordinate position 
value pitch length pitch length pitch width chapter 
robocup soccer server pitch width move command normal play play mode play exists purposes 
command set team formation half play mode equals kick goal scored play mode goal goal 
situations player placed position half field moved number times long play mode change 
player moved position opponent half server moves back random position half 
secondly move command goalkeeper move inside penalty area catching ball see section 
goalkeeper allowed move ball goalie max moves times kicking 
additional move commands effect 
table shows server parameters important move model default values 
parameter value parameter value pitch length goalie max moves pitch width table server parameters important move model default values 
change view model change view command player directly control range quality visual information sent server 
command takes parameters width player view cone quality visual information 
valid values width parameter narrow normal wide quality high low 
change view command issued multiple times cycle 
player change view command trade width view cone quality visual information frequency visual information arrives server 
higher view quality wider view cone example lead frequent visual information 
refer back section detailed discussion 
actions overview actions described section divided distinct categories primary actions kick dash turn catch move concurrent actions say turn neck change view sense body score 
cycle primary action executed multiple concurrent actions performed simultaneously primary action 
agent sends single primary action command cycle server randomly chooses execution discards 
table summarizes actions performed agent shows commands executed server 
heterogeneous players new feature soccer server version heterogeneous players 
earlier server versions players field physically identical values player parameters player 
soccer server version team choose different player types different characteristics 
player types randomly generated server specifying positions global coordinates coordinate system negative direction team goal defends negative direction left side field facing opponent goal 
chapter 
robocup soccer server syntax arguments executed frequency limit kick double double power direction cycle dash double power cycle turn double moment cycle cycle move double double position cycle catch double angle cycle say str message string instantly max 
heard cycles turn neck double moment cycle cycle change view str str width quality instantly cycle score instantly sense body instantly cycle table overview action commands available soccer server agents 
started 
match teams choose players set types 
number player types generated equals value server parameter player types currently 
types type default player types different time server started 
non default players different abilities certain trade offs defined values heterogeneous player parameters 
example players usually faster default player get tired quickly 
client program connects server server sends number messages contain information generated player types 
available type server sends message format player type id player speed max stamina max player decay inertia moment dash power rate player size kickable margin kick rand extra stamina effort max effort min messages define abilities player type providing specific values parameters hold type 
default player type values parameters fixed types randomly chosen different intervals defined certain heterogeneous player parameters 
table shows heterogeneous player parameters define intervals compares parameter values default players range parameter values heterogeneous players 
maximum speed default player example equal value server parameter player speed max heterogeneous player maximum speed value player speed max player speed max delta min player speed max player speed max delta max 
way maximum stamina increase cycle heterogeneous player default stamina max plus value player speed max delta min stamina max delta factor player speed max delta max stamina max delta factor 
shows heterogeneous players trade maximum speed player stamina increase cycle 
calculation value ranges remaining player parameters analogous done values table 
online coach team see section responsible selecting player types changing necessary 
long play mode equals kick coach change player types wants 
game coach subs max substitutions 
furthermore team allowed subs max players player type field simultaneously default player goalkeeper 
time values default player parameters equal shown earlier sections 
messages contain values server parameters player parameters case start half half time 
chapter 
robocup soccer server player parameters parameters heterogeneous players name value name value range player speed max player speed max delta min player speed max delta max stamina max delta factor stamina max player speed max delta min player speed max delta max player decay player decay delta min player decay delta max inertia moment delta factor inertia moment player decay delta min player decay delta max dash power rate dash power rate delta min dash power rate delta max player size delta factor player size dash power rate delta min dash power rate delta max kickable margin kickable margin delta min kickable margin delta max kick rand delta factor kick rand kickable margin delta min kickable margin delta max extra stamina extra stamina delta min extra stamina delta max effort max delta factor effort max extra stamina delta min extra stamina delta max effort min delta factor effort min extra stamina delta min extra stamina delta max table comparison parameter values default players value ranges heterogeneous players 
player parameter left heterogeneous player parameters define value range shown right 
clear trade offs exist player parameters 
coach substitutes player player new player gets initial stamina recovery effort values corresponding player type 
table shows server parameters heterogeneous player types default values 
referee model play modes enforce rules game simulator includes automated referee controls match 
referee changes play mode game different situations 
play mode changes automated referee announces sending message players 
way player constantly aware current state game 
furthermore referee announce events goal foul 
examples situations referee acts chapter 
robocup soccer server parameter value player types subs max table server parameters heterogeneous player types default values 
kick takes place center spot field start play goal 
just kick players half field 
goal referee suspend match seconds allow happen 
time players move command teleport position running slower consumes stamina 
player opposite half time kick take place referee moves player random position half field 
goal scored referee announces broadcasting message players 
updates score moves ball center spot 
changes play mode kick depending team perform kick suspends match seconds allow players move back half see 
ball goes bounds referee moves appropriate position changes play mode kick corner kick goal kick 
case kick referee places ball point side line left field case corner kick places ball just inside appropriate corner field exact position determined value server parameter margin goal kick places ball front corner goal area side field passed line 
play referee enforces offside rule 
player offside position opponent half field closer opponent line opponent players ball passed 
crucial moment offside decision ball kicked received player position receives ball offside position ball kicked 
referee call offside violation ball comes closer offside active area size currently meters player offside position ball played 
call give free kick opposite team 
kick free kick kick corner kick taken referee removes players located circle radius offside kick margin currently meters centered ball places perimeter circle 
case offside call offending players moved position 
furthermore play mode equals goal kick opponent players moved outside penalty area allowed re enter area goal kick takes place 
play mode equals kick free kick kick corner kick referee changes play mode play immediately ball starts moving result kick command 
case goal kick play mode changed play soon ball leaves penalty area 
second half referee suspends match 
half lasts half time currently seconds cycles scores tied match extended case team scores goal extra time wins game procedure known sudden death golden goal 
usually opponent goalkeeper 
happens knock stage official competition 
chapter 
robocup soccer server message sent referee format referee string string string denoting contents message play mode 
players receive messages referee hear messages 
referee messages treated privileged sense player hear situation independent number messages heard players 
possible referee messages including play modes shown table 
table shows server parameters important referee model default values 
message tc subsequent play mode comment kick kick side half play normal play time match kick side announce start play pressing kick button kick side play play mode changes ball kicked free kick side play play mode changes ball kicked corner kick side play play mode changes ball kicked goal kick side play play mode changes ball leaves penalty area drop ball play occurs ball put play drop ball time cycles offside side free kick free kick opposite side goal side kick announce nth goal side foul side free kick announce foul committed side goalie catch ball side free kick announce goalie catch side time team time sent opponent second half time time sent match time half time scores teams different half time kick half time extended kick second half scores tied table possible referee messages including play modes 
side denoting left right team opposite side tc time number cycles subsequent play mode announced 
parameter value parameter value margin forbid kick offside true offside active area size half time offside kick margin drop ball time offside true table server parameters important referee model default values 
chapter 
robocup soccer server coach model coach privileged client team assist players 
soccer server provides kinds online coach trainer 
receive noise free global information objects field 
furthermore substitute player types broadcast messages players 
main difference online coach may connect official games trainer may development stage team 
general trainer exercise control game online coach 
example trainer control play mode game deactivating automated referee necessary move ball players teams location field moment set directions velocities 
trainer automatically create training situations 
online coach hand games provide additional advice information players 
capabilities limited compared trainer control game allowed communicate players team 
order prevent online coach controlling players centralized way communication coach players restricted 
coach receives noise free global view field real time demands spend time strategies players 
online coach tool analyzing strengths weaknesses opponents giving strategic advice 
order enable coach different teams standard coach language developed 
play coach allowed communicate players language 
standard coach language low level concepts combined construct higher level concepts 
contains types messages info 
info messages contain information coach believes players know frequent positions player types opponents players 
advice 
advice messages tell players coach believes 
individual group team level 
advice messages consist condition directive specify type situation certain action performed 
define 
define messages introduce names facilitate shortcuts regions 
meta 
meta messages contain meta level information interaction coach players number messages sent version coach language 
freeform 
freeform messages sent coach non play play modes 
restriction format messages fact length may exceed say coach msg size characters 
note freeform messages probably universally understood coach different teams 
coach allowed send clang type win messages type type type equals info advice define meta clang win size simulation cycles 
current server parameter values means coach send message type cycles 
furthermore messages delayed clang mess delay cycles heard players 
note restrictions apply non play play modes clang mess cycle messages sent players cycle 
messages heard players delay count message number restriction 
freeform messages restriction coach allowed send say coach cnt max game 
full grammar standard coach language refer reader soccer server manual 
table shows server parameters important coach model default values 
chapter 
robocup soccer server parameter value parameter value coach port clang win size port clang info win say coach msg size clang advice win say coach cnt max clang define win player types clang meta win subs max clang mess delay send vi step clang mess cycle table server parameters important coach model default values 
summary main features simulator features described chapter provide challenging environment conduct research 
robocup soccer server provides realistic domain sense contains real world complexities agents handle 
section summarize important characteristics challenges soccer server simulation environment 
soccer server pseudo real time system works discrete time intervals simulation cycles lasting ms 
period agents receive various kinds sensory observations server send requests player actions server 
requires real time decision making 
cycle server executes actions updates state environment 
server uses discrete action model see section 
agent controlled separate client process enforces distributed approach see section 
agents communicate directly indirectly soccer server say hear protocols restrict communication ways 
furthermore agents field single communication channel low bandwidth extremely unreliable see section 
agent different types sensors visual sensor aural sensor body sensor 
visual sensor see section provides agent information distances directions objects current field view 
works proximity sensor seeing objects close agent 
amount information depends distance object 
visual information relative agent perspective converted global representation landmarks placed field see 
noise added visual sensor data quantizing values sent server 
view cone agent limited width result agent partial view world causes large parts state space remain unobserved 
agent choose trade frequency visual messages width view cone quality information 
aural sensor see section detects spoken messages sent players coach 
limited range capacity current server settings agent hear message nearby teammate simulation cycles 
messages referee treated aural messages 
body sensor see section provides agent physical information stamina current speed 
reports information number actions agent performed 
agent perform different types actions see section divided distinct categories primary actions kick dash turn catch move concurrent actions chapter 
robocup soccer server say turn neck change view sense body score 
cycle primary action executed multiple concurrent actions performed simultaneously primary action 
agent sends single primary action command cycle server randomly chooses execution discards 
guarantee action commands sent agent executed verified sensory information received 
real world complexities contained soccer server noise added actuator parameters different ways 
sensing acting soccer server asynchronous see section visual information arrives ms intervals default view cone view quality agents perform primary action ms 
crucial agent perform action opportunity means cycles agents act receiving new visual information 
requires ability predict current world state past perceptions 
soccer server simulates object movement see section stepwise simple way velocity object added position velocity decays certain rate increases acceleration object resulting certain action commands 
reflect unexpected movements objects real world uniformly distributed random noise added movement objects 
soccer server models wind natural form movement noise 
soccer server prevents players constantly running maximum speed assigning limited stamina see section 
player performs dash command consumes stamina stamina slightly restored cycle 
player stamina drops certain threshold affect efficiency movement 
new feature soccer server version heterogeneous players see section 
team choose different types players different characteristics 
player types randomly generated server started 
different player types different abilities certain trade offs respect player parameters 
example types faster tired quickly 
soccer server contains automated referee controls match see section 
referee changes play mode game different situations 
play mode changes automated referee announces sending message players 
way player constantly aware current state game 
referee messages treated privileged sense player hear situation independent number messages heard players 
possible define coach agent receives noise free global information objects soccer field see section 
coach tool analyzing strengths weaknesses opponent team giving advice players best possible strategy 
automatically creating training situations development stage team responsible selecting substituting heterogeneous player types 
chapter agent architecture chapter uva trilearn agent architecture 
define different layers architecture explain functionality layer 
furthermore describe various components system way components interact 
give reader clear picture structure system 
note architecture described chapter architecture agent team 
uva trilearn agents operate dynamic real time environment communication limited result time negotiate complex team plans 
architecture agents built way agent independently 
team behavior results combination behaviors individual agents 
chapter organized follows 
section provide general concept architecture discuss different ways architecture described 
section functional architecture uva trilearn agents 
various components system described section place architecture 
chapter concluded section explains control flow system gives example different processes interact time 
software engineering perspective architecture structure software ways structure provides conceptual integrity system 
simplest form architecture describes structure system components modules way components interact structure data components 
architecture serve framework abstractions detailed descriptions system developed 
architectural design represented number different models 
structural models represent architecture organized collection system components 
framework models increase level design abstraction attempting identify repeatable architectural design frameworks patterns encountered similar types applications 
dynamic models address behavioral aspects system architecture indicating structure system configuration may change function external events 
process models focus design process system accommodate 
functional models represent functional hierarchy system 
represent models number different architectural description languages developed remainder chapter 
chapter 
agent architecture autonomous systems point view architecture seen general description system looks behave 
description different levels detail 
levels abstraction distinguished description autonomous system represented respective architecture functional architecture 
architecture concerns functional behavior system exhibit 
describes system capable doing independent hardware constraints environmental conditions 
operational architecture 
architecture describes way desired behavior realized account constraints system environment operate 
assigns different pieces problem different logical modules responsibility solve part certain time 
implementation architecture 
architecture maps operational aspects hardware software modules gives detailed description realization system 
important realize splitting description system architectures quite arbitrary means universal 
choice seen roughly equivalent splitting development system analysis design implementation part 
researchers divide process different phases result distinguish different abstraction levels architectural descriptions 
chapter mainly focus functional aspects uva trilearn agent architecture 
operational implementational descriptions omitted feel contribute global picture want provide 
operational implementational aspects addressed chapters 
autonomous systems community general ways describing system functional level classical hierarchical approach behavioral approach 
common feature hierarchical architectures system divided progressive levels abstraction represented different architectural layers 
approach flow information main guideline decomposition system 
lowest level hierarchy takes care interaction physical world sensors actuators 
information enters system sensors gradually abstracted upwards form high level model world 
knowledge highest level decide action performed 
action gradually translated commands executed lowest level 
power approach transparent control structure system seen consist legs leg represents flow data upwards different levels represents flow commands downwards 
disadvantages overhead caused maintaining world model rigidity architecture 
due hierarchical structure system interaction different modules restricted adjacent layers 
module communicate layers directly defined interfaces 
interface module changed changes affect modules force major redesign system 
systems behavioral decomposition main idea break problem goals achieved stages information flow 
path data flow multiple parallel paths exploited called behaviors 
behavior data flow path sensors actuators omitting reasoning step 
behavior seen module accepts sensory input generates actuator control commands 
power approach leads robust systems easily extended 
single module breaks lead minor degradation system total failure 
furthermore multiple goals exist system module independent adding new goals qry vry chapter 
agent architecture easy 
drawbacks approach inefficiency interpretability lot equivalent processing computation performed modules clear advance different control signals combined 
implementation difficult 
views described summarized follows 
hierarchical approach decided best possible strategy chosen strategy worked 
behavioral ut approach possible alternative strategies worked subsequently decided strategy wt best 
practice case purely hierarchical purely behavioral decomposition autonomous system 
key observation high level reasoning completely sequential real time control system involves parallel processing 
type decomposition emerged combines characteristics wt views hybrid approach 
general trend hybrid architectures higher abstraction levels hierarchical lower levels behavioral 
resulting system ut enables high level reasoning low level reflexive control 
pt pt functional architecture pt ot ot complex tasks simulated robotic soccer hierarchically decomposed ot simpler subtasks 
naturally leads agent architectures consisting multiple layers 
shows uva trilearn agent architecture 
design hybrid approach described section 
choice wanted agents capable reasoning best possible action losing time sending receiving data 
order deal timing constraints caused real time nature domain desirable agents perform high level reasoning process independently care interaction environment 
characteristics clear hierarchical decomposition needed higher abstraction levels bottom level required benefit parallel processing 
adopting somewhat hybrid approach appropriate choice 
think control layer reasoning yr cg skills layer yl dr dl sl interaction layer sr dl dr meters modelling perception action refinement sense act actuator control sensors actuators uva trilearn agent architecture 
chapter 
agent architecture architecture shown hierarchical sense contains layers different levels abstraction 
bottom layer interaction layer takes care interaction soccer server simulation environment 
layer hides soccer server details possible layers 
middle layer skills layer uses functionality offered interaction layer build model world implement various skills agent ball interception 
highest layer control layer contains reasoning component system 
layer best possible action selected skills layer depending current world state current strategy team 
soccer game perceptions enter system interaction layer flow upwards skills layer update agent world model 
world state information control layer reason best possible action 
action selected control layer subsequently worked skills layer determines appropriate actuator command 
command executed actuator control module interaction layer 
uva trilearn agents capable perception reasoning acting 
setup agent shown activities performed parallel 
agents operate dynamic real time environment concurrent execution tasks important performance reasons 
chosen implement desired threads appeared intuitively appropriate requirements assuming implementation native support linux unix operating system 
thread thought set properties suggest sequence machine 
program started process created operates address space data 
process seen single thread execution 
single threaded program initial process generated executable file create additional threads result computations performed sequentially 
single threaded agent implementation meant perception reasoning action loop separate tasks performed serial order 
nature simulation clear put significant restriction agent performance caused fact wait slow operations server delay execution loop 
single thread process multiple threads share address space perform different operations independently 
agent architecture multi threaded sense allows agent separate thread main activities sense thread represents perception module act thread represents actuator control module think thread represents modules skills layer control layer 
main advantage approach delay caused server kept minimum 
threads perform sense thread act thread active necessary blocking wasting valuable computation time think thread 
way think thread gets maximum amount cpu time agent spend majority time thinking best possible action 
prior research soccer server simulation environment shown multi threaded approach clearly outperforms single threaded terms efficiency responsiveness see 
furthermore division separate threads leads modular programs different tasks agent clearly separated 
disadvantages multi threaded implementations complicated single threaded ones due synchronization protocols possible deadlocks race conditions 
linux unix provide different models blocking non blocking multiplexing signal driven asynchronous blocking means process requests data put sleep data available 
chapter 
agent architecture system components mentioned section architectural design represented number different models 
shows functional hierarchy uva trilearn agent architecture seen functional model 
models hierarchical decomposition guided flow data system 
software point view possible represent architecture organized collection system components 
type model called structural model identifies various components system specifies components interact 
view system collection components functions closely associated object orientation software development paradigm consequently followed project 
paradigm objects seen model identifiable aspect problem domain external entities occurrences roles organizational units places structures represented objects 
object oriented approach defines objects program components linked components defined interfaces 
objects categorized classes class hierarchies 
class contains set attributes describe objects class set operations define behavior 
objects seen encapsulate data methods manipulate data 
concept inheritance enables attributes operations class inherited subclasses class hierarchy objects instantiated subclasses 
consistently objectoriented approach lead modular systems easily extended inheritance various components objects reusable result encapsulation 
detailed account object oriented design methodology refer reader 
clearly object oriented design lays foundation component model system architecture 
order represent model number different architectural description languages 
example language unified modeling language uml 
uml language specifying visualizing constructing documenting artifacts software systems 
addition language modeling business processes types non software interactions 
uml represents collection best engineering practices proven successful modeling large complex systems 
language accepted object management group omg standard modeling object oriented programs seen proper successor object modeling languages previously leading object oriented methods booch omt oose 
uml defines different types graphical diagrams provides different perspective system analysis development 
types class diagram describes static structure system 
particular describes things exist system classes types internal structure relationships things 
classes represented rectangles divided compartments top compartment holds name class middle compartment holds list attributes describes class bottom compartment holds operations defined attributes 
relationships classes indicated different types connections lines arrows indicate kind relation 
relationships relevant subsequent discussion association 
represents static relationship classes 
association depicted filled arrow indicates direction relationship 
important realize arrow case represent flow data components seen indicate component needs know 
multiplicity notations placed near ends association indicate number instances class linked instance class diagrams object diagrams case diagrams sequence diagrams collaboration diagrams statechart diagrams activity diagrams component diagrams deployment diagrams 
ut pt pt pt chapter 
agent architecture ot ot ot control layer skills layer cg object yl interaction layer yr dr dl sl sr dl dr meters connection formations player uml class diagram showing main components uva trilearn agent architecture 
class 
example employees employee 
composition 
represents relationship classes class part 
composition depicted solid line ends filled diamond 
diamond connected class class contains class part 
multiplicity relations placed ends connection 
generalization 
name inheritance 
represents relationship classes class specialized version 
generalization depicted open arrow pointing specialized class subclass general class superclass 
represents uva trilearn agent architecture form uml class diagram 
attributes operations class omitted information contribute global picture want 
note interaction different components kept minimum order keep response time agents low possible 
furthermore gives system relatively simple structure enables maintain clear view different objects way interact 
diagram shown maps various components system functional architecture 
mapping roughly follows 
chapter 
agent architecture perception actuator control modules interaction layer represented object object respectively 
modeling module skills layer represented objects classes object action refinement module layer represented object 
reasoning module control layer represented player object object formations object 
role architecture components depicted explained 
issues related way components implemented discussed appendix connection 
component creates udp socket connection soccer server contains methods sending receiving messages connection 
communication soccer server goes component 

component handles processing messages agent receives server 
parses messages sends extracted information component 

component contains current representation world observed agent 
representation includes information objects field positions velocities players ball 
furthermore information concerning current play mode stored time score 
component contains types methods deal information different ways retrieval methods directly retrieving information objects agent world model 
update methods updating agent world model new sensory information received 
prediction methods predicting states world past perceptions 
high level methods deriving high level basic information state world determining fastest teammate ball 
object 
component contains information objects simulation 
implementation spread separate classes depicted reasons space clarity 
object class superclass contains estimations global positions objects defines methods retrieving updating information 
class subclasses 
class contains information stationary objects field lines flags goals 
class contains information moving objects adds velocity information general information provided object class 
class subclasses respectively contain information players teammates opponents ball 
class subclass called contains extra information agent 
note information class stored confidence value indicates reliability estimation 
confidence value related time passed object observed 
formations 
component contains information possible team formations method determining strategic position 
implementation spread separate classes depicted reasons space clarity 
formations class contains information different types team formations stores current formation type agent number formation determines role 
furthermore contains method determining strategic position field depending current formation position ball 
class contains information specific formation number possible team formations equal number objects instantiated class 
formation information read configuration chapter 
agent architecture file agent started 
information includes type formation home position player player type corresponding position wing defender central attacker 
strategic position player determined account home position formation ball attraction factors different player type 
ball attraction factors specific player type defined class positional restrictions central defender stay ball 

component contains values player parameters influence agent reasoning process defines methods retrieving updating values 
parameters class threshold parameters deciding particular type action performed 
parameters define behavior agent 
player 
component contains methods reasoning best possible action situation 
action selection information state world obtained component role agent current team formation 
making final decision particular type action performed agent uses parameter values specified class 

component contains necessary information performing agent individual skills intercepting ball kicking ball desired position field 
note class superclass player class 
general player component decides action performed action subsequently worked component uses information component determine appropriate actuator command 
command sent component responsible execution 

component responsible execution actuator commands receives component 
time command arrives stored possible lists primary command list contain single command type executed cycle 
examples commands kick dash turn catch move 
concurrent command list contain commands type executed multiple times cycle concurrently commands primary command list 
examples commands say turn neck change view see section 
primary command list contains command time new command list received old command overwritten new 
command concurrent command list overwritten new command type received 
ensures commands lists information state world 
cycle component stores command sent appropriate list receives signal indicates currently stored commands executed 
command converted string message accepted soccer server subsequently messages sent server connection component 
main components implemented auxiliary classes components shown 
functionality classes shortly discussed 
parse 
class contains static methods parsing string messages mainly component handles processing messages soccer server 
methods class skip characters specified point convert parts string chapter 
agent architecture integer double values 
main reason creating class standard parsing mechanism available function complex slow 
mainly caused fact interpret complete string parts 
methods class specific process characters having read entire string 
read integer string example characters representing digit processed non numeric character encountered 
performed experiments compared parsing methods cmunited 
results showed parsing integers method achieved performance increase method cmunited parsing doubles performance increase compared cmunited compared 
agents receive messages soccer server parsed extract relevant information methods offer considerable benefit processing time 

class contains server parameters current version soccer server 
examples maximum speed player player speed max stamina increase cycle stamina max 
agent initialized server sends message containing values parameters 
message parsed methods parse class resulting values stored class 

class contains enumerations different soccer types 
creates abstraction soccer related concepts referee messages clean consistent way code 
furthermore class contains methods converting parts string messages received server corresponding soccer types goal left 

class holds necessary information creating soccer command sent server 
contains variables denoting possible arguments angle power different soccer commands stores type current command 
variables related current type get legal value 
furthermore class contains method converting command string message accepted soccer server 

class contains coordinate denoting position defines methods operate position different ways 
methods defined relatively comparing positions converting relative positions global positions vice versa 
class allows specify positions polar coordinates contains method converting polar coordinates cartesian coordinates 
furthermore standard arithmetic operators overloaded positions 
line 
class contains representation line 
allows specify line different ways providing values giving points line specifying single point line angle indicating direction 
furthermore class contains methods determining intersection point lines determining line perpendicular current line goes point 
rectangle 
class contains representation rectangle contains methods deal rectangles 
rectangle specified objects denoting upper left corner bottom right corner respectively 
important method class determines point lies inside current rectangle 
circle 
class contains representation circle contains methods deal circles 
circle specified object denotes center value denoting radius 
methods defined computing area circumference circle determining intersection points circles size intersection area 
chapter 
agent architecture geometry 
class contains static methods performing geometrical calculations mainly component working action details 
methods defined dealing possibly infinite geometric series working abc formula 
timing 
class contains timer methods restarting timer determining amount wall clock time elapsed timer started 
mainly timing incoming messages server debugging purposes 
logger 
class possible log various kinds information debugging purposes component system 
allows programmer specify level abstraction desires debugging information see appendix contains output stream writing usually file 
logger uses timing object printing time information log 
flow control control flow system corresponds natural sequence tasks agent perform cycle sense think act 
agent receives sensory information create representation world 
representation thinks best possible action current situation action subsequently worked executed 
described section separate threads tasks sense thread listens information server parses incoming messages 
think thread processes information comes appropriate action 
act thread responsible sending action command server 
threads seen fit system architecture shown way sense thread represented component act thread represented component think thread represented components skills layer control layer 
main advantage multi threaded approach minimizes delay caused server allows agent spend majority time thinking action 
respect control flow multi threaded approach implementation complicated cooperating threads need correctly synchronize 
main problem caused fact sense thread think thread need exclusive access data agent world model 
sense thread parses information server adds world model 
think thread updates world model new information uses reason action 
threads able access data concurrently cause think thread base reasoning inconsistent world state sense thread busy writing world model think thread starts updating 
important ensure threads access world model simultaneously 
possible way achieve means mechanism called semaphore 
semaphore seen type variable operations defined signal wait 
semaphore typically represented integer queue 
definitions semaphore operations follows wait semaphore value semaphore greater zero decrement allow thread continue suspend thread blocks semaphore 
signal semaphore threads waiting semaphore increment free waiting threads continues instruction wait instruction 
idea described 
main difference sophisticated agent environment synchronization method determine send action server 
explained detail chapter 
chapter 
agent architecture order achieve exclusive access shared resource possible binary semaphore mutex value initialized 
wait mutex operation executed thread wants start resource signal mutex operation executed finished 
consider example 
thread wants access currently unused resource protected mutex variable executes wait mutex operation 
result value mutex decremented zero thread proceed 
second thread wants access resource executes wait mutex operation 
value mutex equals zero thread blocks put queue 
happen thread wants access resource thread 
soon active thread finishes resource executes signal mutex operation causes waiting threads freed queue time queue empty signal mutex operation executed active thread cause value mutex restored new thread wants access resource note important sure active thread block access resource prevent threads lead deadlocks 
algorithm shows pseudo code implementation threads agent program 
world model data protected binary semaphore called lock initialized 
procedure follows 
agent program started process created seen single thread execution main thread 
implementation main thread call think thread 
think thread starts creating threads sense thread act thread responsible performing operations 
think thread blocks receives ready signal sense thread indicate world model contains new information 
sense thread waits new information server 
receives information determines time act thread send action commands server sets send signal go time synchronization server discussed chapter 
sense thread executes wait operation obtain lock access parses information server adds world model 
releases lock executing signal operation sends ready signal think thread indicate new information available 
note think thread wait signal determining action useless repeatedly contents world model remain 
ready signal arrives think thread executes wait updates agent world model determines action 
subsequently sends appropriate actuator commands act thread releases lock executing signal operation 
time send signal goes act thread converts action commands primary concurrent command lists see section string messages accepted server sends messages 
note semaphores protect command lists act thread granted immediate access read lists received send signal 
note new action determined time sensory information arrives server 
case agent determines plan consisting sequence actions number cycles agent determines new actuator command cycle depending current world state 
form coordination reasoning execution referred weak binding ensures primary command list contain command completely information world 
control flow system visualized uml sequence diagram 
diagram describes interaction different objects terms exchange messages time 
policies exist scheduling wait queue come serve highest priority note seriously complicate way command lists component organized 
need way determine previously chosen plan useful current time way command lists adapted 
soccer simulation teams years reported methods 
chapter 
agent architecture think thread create sense thread create act thread server alive block ready signal arrives seconds passed seconds passed server alive false wait lock update world model determine action send commands act thread signal lock sense thread true block server message arrives determine send time act thread synchronization see chapter set send signal go time wait lock parse server message send world model signal lock send ready signal think thread act thread true block send signal arrives convert commands string messages send messages server algorithm pseudo code implementation think sense act threads 
sequence diagram dimensions vertical dimension represents time horizontal dimension represents different objects 
presence object time shown vertical dashed line called lifeline 
time object needs perform certain task directly subordinate procedure referred activation 
activation shown tall rectangle top aligned starting time corresponding task bottom aligned completion time 
communication objects called stimulus depicted horizontal arrow pointing lifeline object lifeline object 
different kinds communication specified different types arrows 
solid arrow filled arrowhead denotes procedure call 
return procedure call indicated dashed arrow filled arrowhead 
asynchronous communication objects represented solid line half arrowhead 
shows uml sequence diagram simulation cycle agent receives physical visual information server 
note cases sequence actions object resumes tasks immediately sending asynchronous message waiting response 
wt ut chapter 
agent architecture pt pt pt ot ot ot cg yl yr dr dl sl time sr dl dr meters connection player block block wait ready signal wait wait ready signal wait ready signal ready signal uml sequence diagram showing interaction different objects single cycle agent receives physical visual information server 
performed 
activation starts receives new message server containing physical information 
information added agent signals player new information available 
player updates determines command sent 
player blocks notified second time new visual information arrived 
happens midway diagram causes sequence actions performed 
cycle signaled send current command server 
example command information contained second message 
possible signaled second message processed 
case command sent server physical information message received start cycle 
time signaled command available agent receive visual information cycle 
way agent misses opportunity act 
fixed time receiving message sending commands time send signal goes chapter 
agent architecture chapter synchronization synchronization agent environment resides important issue development agent 
synchronization method greatly enhance agent performance time case team agents significant influence performance team 
chapter discuss synchronization problem soccer server simulation environment comparative analysis agent environment synchronization methods 
best methods agents uva trilearn soccer simulation team 
contains flexible synchronization scheme provides optimal synchronization agents simulation environment 
furthermore method guarantees action chosen agent latest sensory information server possible 
chapter organized follows 
section problem synchronization soccer server 
various aspects concerning timing incoming messages server discussed section 
section introduce agent environment synchronization methods 
experimental setup comparing methods described section results comparative experiments section 
section contains number concluding remarks 
problem synchronization robocup soccer server client server application client communicates server udp socket 
server responsible executing requests client agent updating environment accordingly 
specific intervals sends sensory information visual auditory physical state world agent 
agents information decide action want perform 
soccer server provides pseudo realtime simulation works discrete time intervals known server cycles 
current version server cycle lasts ms 
period clients send requests player actions collected server 
cycle server executes actions updates environment 
server uses discrete action model 
note agent execute primary action command see section simulation cycle 
sends multiple primary commands cycle server randomly chooses execution discards 
situation referred clash clearly avoided 
hand sending request cycle mean agent misses opportunity act remains idle 
situation referred hole undesirable real time adversarial domains usually leads opponents gaining advantage 
chapter 
synchronization important issue development player client synchronization soccer server 
actions need executed cycle arrive server right interval synchronization method sending actions server major impact agent performance 
synchronization problem trivial due fact arrival time messages server influenced factors available resources cpu time memory speed reliability network 
furthermore determining right moment send action complicated fact agent explicit information duration cycle starting time 
additional problem related synchronization sensing acting soccer server asynchronous 
current server version agents send primary action commands server ms receive visual information ms intervals furthermore physical information arrives ms auditory information received random 
challenge agents try base choice action cycle latest sensory information environment managing send command server cycle 
ideal case agent choose action visual information current state world 
possible visual information received cycle arrives late able determine action cycle finishes 
furthermore specified relationship start cycle arrival times sensory messages 
finding optimal balance need obtain information world need act possible straightforward task 
summary synchronization problem boils determining optimal moment cycle send action server 
general latest possible moment ensures action request reach server time maximizes chance basing chosen action visual information current world state 
bad synchronization method lead missing action opportunities action choices old information harm agent performance significantly 
due uncertain nature aspects problem follow empirical approach chapter experimentally comparing different agent environment synchronization alternatives 
proposed solutions partly ideas introduced 
timing incoming messages specific intervals soccer server sends agent various types sensory information state environment 
synchronization problem types server messages important sense body messages arrive ms provide agent physical information stamina 
remainder chapter referred sense messages 
see messages arrive ms provide agent visual information world 
order gain better understanding problem important recognize exact relationship types messages 
knowledge serves basis definition synchronization methods section 
relationship depends uncertain factors see section derived directly server implementation resort empirical methods 
created simple test program called message times shows arrival times various messages time differences 
enables see intervals consecutive messages correspond interval settings ms ignore possibility trading frequency visual messages quality information width player view cone 
see section 
chapter 
synchronization ms specified server manual see 
sample outputs program shown 
note second output generated server restarted 
sense previous msg see previous msg sense previous msg see previous msg sense previous msg sense previous msg see previous msg 
sense previous msg see previous msg sense previous msg see previous msg sense previous msg sense previous msg see previous msg 
lines format type previous msg type type message see sense simulation cycle message arrived number contained actual message arrival time seconds nth message type type relative starting time player time difference seconds arrival nth message type type arrival previous message type arrival time seconds previous message type concluded output actual time differences successive messages type correspond closely interval settings server specification seconds sense messages seconds see messages 
small differences visible 
output generated message times program shown intervals consecutive messages type longer specified length shorter 
caused network traffic 
case relationship cycle number message count certain message type expected server specification sense messages held see messages equaled depending arrival time see message 
fact ratio remains correct despite occasionally higher values indicates possible elasticity server cycles duration cycle may ms exceed value occasions 
come back 
chapter 
synchronization second important drawn output generated message times program cycle sense messages arrive see messages 
possible explanation arrival sense message indicates start new cycle 
decided investigate matter knowing starting time simulation cycle obviously important finding optimal solution synchronization problem 
interval consecutive sense messages equal duration cycle clear fixed relationship start cycle arrival sense message 
order gain better insight relationship created test program called send time command pseudo code shown algorithm 
program starts player waits sense message server arrives cycle number divisible determined looking time index message 
soon message arrives program waits specific number milliseconds sending turn command server 
waiting time incremented ms loop repeats 
reasons clear argument supplied turn command equals number milliseconds arrival sense message send time command 
waiting time implemented form signal set go specific number milliseconds 
current implementation signals blocking functions unix linux normal kernel timer mechanism resolution ms :10.1.1.26.9545
waiting times represented signals rounded upwards multiple ms 
means example difference waiting time ms ms 
chosen increment waiting time ms iteration loop order program general different timer resolutions obtain larger amount useful test results 
possible run soccer server option causes record commands sent client numbers cycles commands received server 
running send time command program server log check waiting times turn commands arrived server cycle 
give indication relationship arrival sense message start cycle 
part server log running send time command program quiet stand machine shown 
recv team turn recv team turn recv team turn recv team turn recv team turn recv team turn recv team turn recv team turn recv team turn 
server log format simple 
line shows cycle time server received command followed player sent command case player number left team followed command sent 
argument supplied turn equals waiting time output clearly shows values command arrived server cycle 
commands sent cycle times divisible waiting times ms server received cycle 
waiting time exceeded ms commands arrived cycle 
note results vary greatly depending state system time experiment 
repeated experiment times different system configurations 
configuration took factors account client program running amd athlon mhz mb running debian linux chapter 
synchronization wait time sent message false sent message false wait server message type message sense time index message mod wait wait time milliseconds send turn wait time command server sent message true algorithm pseudo code implementation send time command program 
locally remotely server machine quiet busy large processes running client machine quiet busy 
configurations tested configuration 
experiment performed machine server client program running machine large processes running 
configuration test optimal situation client server interaction 
configuration 
experiment performed machines network server client program 
large processes running machine 
configuration test difference performance network connection introduced 
configuration 
experiment performed machines network server client program 
experiment complete team consisting player clients running server machine large processes running client machine 
configuration test difference performance processes running server machine 
configuration 
experiment performed machines network server players belonging left team players belonging right team 
configuration test common situation server team run different machines server send messages players vice versa 
table shows results experiments different configurations 
note due system timer resolution ms results equivalent send times joined 
means percentage samples 
results show configuration commands arrive server cycle send times ms arrival sense message 
key observation point means ms arrival sense message cycle 
specified duration simulation cycle ms concluded arrival sense message coincides start cycle 
client program runs remote machine second configuration results show percentage message arrivals cycle slightly lower result network traffic 
case commands sent ms arrival sense message reach server cycle 
results third configuration busy server surprising commands sent ms arrival sense message reach server cycle cases 
implies cases duration cycle exceeds specified value ms indicates possible elasticity cycle length mentioned earlier 
effect explained follows 
additional client chapter 
synchronization configuration time ms nr client server client local quiet quiet remote quiet quiet remote busy quiet remote quiet busy table percentage message arrivals cycle different system configurations different send times 
configurations relevant problem hand tested 
processes running server machine consume certain amount cpu time 
result cpu time left server handle action requests update environment specified time 
server initiate new cycle finished processing requests previous means cycle longer specified ms time window 
note happen official competitions fourth configuration usually applies server runs separate machine teams running remote machines 
results show case commands sent ms arrival sense message reach server cycle 
waiting time equals ms commands reach server time 
compared results second configuration performance decrease attributed extra cpu load increased network traffic caused additional player clients running client machine 
output message times program shown section demonstrates fixed relationship arrival times see messages sense messages 
furthermore visible relationship different restart soccer server 
part output shows see messages arrive time sense messages halfway sense messages 
second output see messages arrive ms ms sense message 
general intervals consecutive sense see messages ms ms respectively arrival times types messages describe pattern repeated ms common multiple cycles 
clearly see messages arrive cycles half cycle second half cycle 
thing certain see message arrive ms sense message 
assume denotes time difference milliseconds arrival sense message arrival see message half cycle mod arrival times see messages relative start cycle arrival times sense messages repeat follows pattern denotes visual information arrives cycle 
note value known advance different time server started 
order gain deeper insight possible values distribution values experiment performed server single player restarted times time recorded see message arrived second half cycle 
done configurations defined earlier 
plotted various values influence performing tests environment machines available 
wt ut chapter 
synchronization pt pt pt pt ot ot ot cg yl yr dr dl sl sr dl dr meters cg yl yr dr dl sl sr dl dr meters see messages see messages time ms local client quiet server quiet client time ms remote client busy server quiet client wt ut pt pt ot ot ot cg yl yr dr dl sl sr dl dr meters cg yl yr dr dl sl sr dl dr meters see messages see messages time ms remote client quiet server quiet client time ms remote client quiet server busy client histograms showing distributions see message arrivals second half cycle 
server restart transformed plots corresponding histograms order get better view distribution arrival times configuration 
histograms shown 
shows distribution see message arrivals ideal situation uniform 
arrival times tend concentrate multiples ms referred time lines 
note probably caused limited timer resolution system majority see messages arrives ms sense message midway cycle 
furthermore visible server implementation apparently see message arrives exactly ms 
shows situation agent program runs remote machine 
case see due network traffic introduced configuration small number see messages arrive exactly multiple ms 
furthermore arrival times note timer resolution plays role measurements need compare arrival times see sense messages 
need signals timers simply wall clock time 
chapter 
synchronization evenly distributed time lines majority arrives midway cycle 
complete team consisting players running server machine time lines explicit arrival times start increase see 
caused extra cpu load server machine fact server send messages players 
results fourth configuration slightly surprising seen time lines disappeared completely 
recall case experiment performed machines network server team 
effect visible caused increased network traffic resulting configuration 
addition arrival times influenced extra cpu load client machine receives server messages players 
note server runs separate machine arrival times biased midpoint cycle 
number synchronization alternatives section discussed important issues concerning timing incoming messages 
issues closely related synchronization problem understanding prerequisite design successful synchronization scheme 
section describe different synchronization methods seen potential solutions synchronization problem 
naming convention methods categorization scheduling schemes introduced 
firstly timing mechanism called internal external 
internal timing thought biological clock regulation mechanism realized system timing routines 
external timing hand seen observation change environment 
soccer server domain expressed arrival sensory information 
furthermore windowing refers specification time window window opportunity defines amount time agent determine action 
soon time window expires send command server 
method external basic naive solution synchronization problem perform action visible change environment occurs 
means agent send action command server receiving see message 
algorithm shows pseudo code synchronization method refer external basic 
advantage approach linear single threaded agent waits visual information determines action sends command waits visual information way agent base action visual information world 
furthermore cycles visual information received need ability predict current world state perceptions past 
visual information arrives cycles see section agent utilize action opportunities 
remaining cycles agent remains idle slow significantly running ball 
big disadvantage real time adversarial domains usually allows opponents gain initiative 
shows example situation external basic synchronization scheme applied 
time runs horizontally left right 
different kinds arrows indicate different types messages server top agent bottom vice versa 
example shows server sends sense message agent cycle agent receives fraction 
soon agent receives see message determines action sends action command back server 
note actions sent cycles agent received visual information cycles 
note example commands arrive server chapter 
synchronization cycle time executed cycle 
caused fact agent receives see messages relatively early cycle gives time determine action send server 
general possible see messages arrive result action commands reach server cycle starts 
server alive wait see message determine action send action command server algorithm pseudo code external basic synchronization method 
ot ot cg yl yr cg yl dr yr dl cycle cycle cycle cycle cycle cycle sl dr sr dl dl sl dr sr meters dl dr meters sense message see message send command determine action synchronization example external basic scheme 
method internal basic possible solution synchronization problem send action server ms kind internal clock count intervals 
approach referred internal basic shown algorithm 
implemented installing mechanism sends signal exact ms intervals 
time signal arrives processed signal handler determines action sends server 
length interval equals duration cycle method advantage server receive command cycle 
agent utilize action opportunity 
due internal nature timing mechanism known part cycle signal arrives 
ideal situation signal arrive cycle increases probability agent determine action visual information cycle 
worst case signal arrives cycle agent choose action old visual information cycle 
shows example situation external basic synchronization scheme applied 
shows consecutive action commands arrive server adjacent cycles action opportunities missed 
actions chosen ms intervals main thread install signal comes ms signal handler called signal arrives determine action send action command server algorithm pseudo code internal basic synchronization method 
chapter 
synchronization way related arrival sensory information server 
note example cg action commands current visual information see message arrives half yl cycle 
means cycles command old visual yr cg information state world 
yl dr cycle cycle cycle cycle cycle dl sl dr sr dl dl sl dr sr meters dl dr meters msec sense message see message send command determine action synchronization example internal basic scheme 
method fixed external windowing seen section sending action server ms advantage action opportunities missed 
clearly method described section improved choosing appropriate time send action server 
problem internal basic scheme time sending related arrival server messages lead action choices old world state information 
external timing mechanism possible relate send time command start cycle 
done way high probability agent choose action current visual information time action command reach server cycle 
ideas incorporated fixed external windowing synchronization scheme 
method assumption arrival sense message indicates start new cycle see section 
time sense message arrives server signal set go ms time agent determine action sense message see message 
see message arrives signal goes agent new information better choice 
soon signal goes currently chosen action sent server 
example anytime algorithm see 
note send time ms results table 
show fourth configuration common commands sent exactly ms reach server cycle 
main advantage approach cycles see message arrives allows agent choose action visual information current world state 
addition action opportunities missed send time ms gives high probability command reach server cycle 
experiments shown choosing action average takes ms see message arrives ms start cycle agent time choose action new information 
disadvantage method commands reach server cycle leaving small margin start 
approach sensitive temporary increases cpu load network traffic cause command reach server late 
negative impact synchronization ways 
firstly current cycle hole agent misses opportunity act 
secondly clash occur note due limited timer resolution system value ms ms produce result 
ut ut wt wt chapter 
synchronization ut subsequent cycle server receives action commands wt commands information ut wrong cycle server randomly chooses execution chance action performed better action discarded 
pt pseudo code implementation fixed external windowing method shown algorithm 
note pt actual implementation slightly difficult compared previous methods pt threads needed determine action latest see message sending ot command server ms time period expired 
note threads ot sure command available signal goes 
command ot visual information cycle old information previous cycle 
shows example situation fixed external windowing scheme applied 
shows time sensory information received new action determined 
soon signal goes chosen command sent server 
note example agent succeeds sending action current visual information world possible see message arrives particular cycle 
main thread server alive block server message arrives type message sense set signal go ms current action determine action signal handler act thread called signal arrives send current action server algorithm pseudo code fixed external windowing synchronization method 
wt ut pt pt pt ot ot ot cg yl yr wt wt ut pt pt pt ot ot ot cg yl yr cg dr yl cycle cycle cycle cycle cycle cycle dl dr yr sl dl sr sl dr sr dl dl dr dl meters dr meters dl dr meters sl sr fixed time sense message see message send command determine action synchronization example fixed external windowing scheme 
method flexible external windowing important characteristics synchronization method send action server cycle base action world state information possible 
method described section exhibited characteristics problem fixed send time assuming command subsequent cycle reaches server time 
chapter 
synchronization ms carried risk causing holes clashes lay close cycle 
possible improve policy making send time flexible depending arrival times see messages ut wt equation shows arrival times see messages form pattern repeats cycles 
due wt repetitive nature pattern possible predict cycle see message arrive half cycle come 
example see message arrived cycle ut agent knows come half cycle second half cycle 
information determine appropriate send time situation 
pt clearly need postpone sending command ms start cycle pt knows additional visual information come server time 
cases pt see message arrive half cycle arrive sensible safer ot value send time order sure command reach server ot cycle 
possible value ms virtually ensures timely arrival gives agent ot time choose action 
send time remain ms cycles see message arrive second half cycle 
way agent able see message determining action action command chance reach server time 
note method improved immediately sending available command visual information current cycle 
case agent sure receive see messages cycle need wait longer 
especially improve performance see messages arrive second half cycle risky send time ms avoided 
ideas described incorporated flexible external windowing synchronization scheme shown algorithm 
important realize deliberately chosen fix send time exactly arrival times see messages cause problems play time differences see sense messages change reason 
send time depends part cycle see message arrive 
note pattern index indicating current position pattern see equation reset see message arrives half cycle see message arrived previous cycle 
proposed solution robust ensures execution remain correct reason cycles pass receiving visual information 
shows example situation flexible external windowing scheme applied 
shows visual information arrives command determined sent server immediately 
furthermore cycles see messages received command sent relatively early avoid risk hole 
ut wt wt ut pt pt pt ot ot ot cg yl yr ut wt wt ut pt pt pt ot ot ot cg yl yr cg dr cycle cycle cycle cycle cycle dl dr yr sl dl sr sl dr sr dl dl dr dl meters dr meters dl dr meters sl flexible sr time sense message see message send command determine action synchronization example flexible external windowing scheme 
differs method described sequence commands executed forthcoming cycles stored queue send time depends state queue empty 
chapter 
synchronization main thread pattern index see st half see nd half see server alive block server message arrives type message sense sent message false new cycle starts pattern index pattern index set signal go ms pattern index set signal go ms pattern index pattern index mod type message see see message arrived previous cycle pattern index reset pattern see nd half cycle current action determine action type message see sent message false set signal go immediately signal handler act thread called signal arrives sent message false send current action server sent message true algorithm pseudo code flexible external windowing synchronization method 
experimental setup comparing alternatives compare synchronization alternatives section experiment performed produced empirical measurement success method 
experiment player placed field period cycles sent actions server synchronization methods discussed earlier 
player additional players determining performing actions machine server team consisting players running separate machines 
done create situation similar real match 
procedure choosing action simulated blocking client process period ms 
quite high compared time needed restriction caused limited timer resolution system 
command sent cycle depended arrival time see message 
possible base command see message arrived cycle account ms needed choose action player sent dash command server 
command visual information previous cycle player sent turn command 
argument supplied commands equaled cycle number cycle command sent 
possible check server logfile command received server cycle 
experiment repeated times synchronization method 
note order obtain indication chapter 
synchronization success method necessary perform experiment multiple times arrival times see messages different server restarted 
duration cycles trial chosen reasons 
place number divisible arrival times see messages describe pattern repeated cycles see equation means arrival times equally distributed 
furthermore cycles long give indication method performance particular trial 
trial server logfile parsed compute statistics method 
subsequent discussion notation explain results boolean function returns player sent dash command cycle 
boolean function returns player sent turn command cycle 
function returns argument command received server cycle function undefined command received cycle function returns number commands received server cycle function returns boolean expression true 
experiment performed soccer server version amd athlon mhz mb machines running debian linux 
sequel refer action current visual information optimized action action old visual information called unoptimized 
experiment dash command optimized action turn command unoptimized 
method statistics extracted server log trial total number cycles number optimized actions received server correct cycle 
actions see message arriving current cycle reached server cycle 
obviously ideal situation 
number optimized actions received server wrong cycle 
actions see message arriving current cycle reached server start cycle 
number unoptimized actions received server correct cycle 
actions see message arriving previous cycle see message arrived current cycle arrived late reached server current cycle 
number unoptimized actions received server wrong cycle 
actions see message arriving previous cycle reached server start cycle 
number holes 
number cycles server receive action command equals number missed action opportunities 
number clashes 
number cycles server received action command 
commands randomly chosen execution 
chapter 
synchronization method method method method total cycles optimized time optimized late unoptimized time unoptimized late holes clashes table comparative analysis different agent environment synchronization methods 
results results experiment described section table 
method external basic scheme action commands sent see message 
results method clearly show inefficient 
see messages arrive simulation cycles third total number cycles automatically hole shown table 
agent action opportunities slow significantly running ball 
note action commands sent server optimized due fact action chosen directly arrival see message 
percentage commands reach server cycle attributed cycles see message arrived late 
cases cycle ended agent determines action sends server result action command arrives cycle 
second method internal basic scheme action sent server ms 
due internal nature timing mechanism ms intervals choosing action way related arrival sensory information server 
success method depends heavily relationship arrival times see messages send time commands 
relationship different trial results 
table shows large percentage commands unoptimized 
explained follows 
see messages arrive cycles commands unoptimized 
remaining cycles chance signal counts ms intervals go see message arrives cases action unoptimized 
total thirds commands sent unoptimized 
furthermore signal arrives late cycle command reach server cycle starts 
note method case command arriving cycle leads hole 
commands sent ms possible signal comes late commands reach server cycle cause holes 
note hole occurs lead clash number holes equal number clashes 
due heavy cpu load network traffic possible successive commands reach server slightly ms apart lead hole 
clash necessarily follow subsequent send signal comes ms previous cause command reach server cycle 
reversely clash occur hole due possible elasticity server cycles see section 
reason cycle lasts longer specified ms cause clash send times consecutive commands ms apart 
third method fixed external windowing scheme send time command related start cycle timing mechanism external 
scheme agent chapter 
synchronization sends action command server exactly ms arrival sense message 
compared second method see number optimized commands significantly larger maximum possible cycles agent performs optimized action 
unoptimized commands come cycles see message arrived cycles see message arrived ms start cycle account ms needed choosing action 
furthermore larger number commands reach server intended cycle due fact send time ms gives high probability command arrives time see table 
disadvantage approach number holes increased compared internal basic scheme 
late send time causes commands reach server cycle leaves small margin start 
temporary increases cpu load network traffic lead holes 
note due external nature timing mechanism number holes clashes balanced 
send time command related start cycle previous send time hole eventually lead clash clashes occur holes 
note number holes equal number times command reached server wrong cycle 
single hole followed late arrivals eventually followed single clash 
fourth method flexible external windowing scheme flexible send time depending arrival times see messages 
action commands current visual information sent immediately determined 
unoptimized actions sent ms ms start cycle depending visual information expected cycle expected second half 
results show compared third method percentage optimized actions 
look total number actions performed subtract number holes total number cycles see methods actions optimized 
results method show commands reach server correct cycle result number holes significantly lower 
caused fact commands sent server cycle necessary see message arrives late 
cases command sent earlier reduces risk late arrival 
note method number holes clashes equal number late arrivals 
flexible send time causes commands reach server cycle ends 
occasional hole followed late arrivals clash occurs 
command reaches server start cycle resulting hole usually directly followed clash 
altogether results table clearly show flexible external windowing scheme performs better methods 
summary synchronization method needs important properties 
sure action command sent server cycle 

sure send time command high probability command reach server cycle 

sure chosen action current visual information possible 
results section clearly show flexible external windowing scheme outperforms alternatives respect properties 
chosen method agents uva trilearn soccer simulation team 
integrated agent main chapter 
synchronization loop follows 
time agent receives message server world model completely updated 
case sense message update prediction past observations 
see message arrives previous world state updated new visual information 
updating world model agent chooses action new world state information 
action visual information current cycle sent server immediately 
action stored sent arrival signal overwritten see algorithm 
order enhance performance method real match extended implementation ways 
firstly action counters included sense message see section avoid clashes 
type action command sense message contains counter denotes number commands type executed server 
new sense message arrives possible check command sent previous cycle executed comparing appropriate counter value value previous sense message 
counter incremented sure command reach server time executed current cycle 
case record previous cycle hole avoid possible clash current cycle sending additional action command server 
second extension enabled agents adaptively lower ms send time large number holes occur 
caused example heavy network traffic fact system slower generating results table 
implementation sure agent sends action server cycle case turn degrees performed 
possible agents keep track number holes examining action counters sense message 
match agents check regular intervals cycles percentage holes exceeds normally see table case send time lowered 
note hole percentage calculated scratch separate interval calculation cumulative 
additional benefit sending action server cycle enables extract number holes clashes server logfile meaningful way 
clearly information meaningless player send action possible occasion occurrence hole necessarily caused synchronization failure 
current policy parsing server logfile give indication performance synchronization method 
note real match possible determine commands optimized type command sent server depend game situation arrival times visual messages 
furthermore possible find commands reached server correct cycle arguments supplied command longer equal cycle number command originated 
determined cycle command reached server sent 
numbers holes clashes statistics derived 
table shows statistics entire uva trilearn soccer simulation team consisting players full length match lasting cycles 
numbers left correspond match played machines amd athlon mhz mb generating results table numbers right generated playing mhz ghz total cycles holes clashes table synchronization statistics uva trilearn matches different systems 
chapter 
synchronization match faster machines pentium iii ghz mb 
expected results show mhz machines hole percentage entire team equal table method 
faster machines holes hardly occur anymore holes occur followed clash due fact command sent server hole observed previous cycle 
results concluded flexible external windowing scheme provides virtually optimal synchronization agent soccer server simulation environment 
note comparing statistics teams sense players teams send action server cycle save stamina statistics useless measuring synchronization performance 
chapter consistently ignored possibility trading frequency visual messages quality information width player view cone see equation 
pseudo code implementation flexible external windowing scheme algorithm assumption arrival times see messages describe pattern repeated cycles see equation 
implementation uva trilearn agents change width view cone certain situations cause pattern change 
note equation instance general formula describe new pattern mod gcd send step simulator step gcd function returns greatest common divisor arguments send step simulator step denote length interval consecutive see messages length cycle respectively 
fairly straightforward extend synchronization method appropriately different cases conclude chapter giving overview possible patterns patterns determine correct send times cycle 
view cone narrow degrees visual information come ms intervals hold 
repeating pattern 
view cone normal degrees visual information come ms intervals hold 
repeating pattern denotes visual information arrives cycle 
view cone wide degrees visual information come ms intervals hold 
repeating pattern 
ignore possibility changing view quality low 
reason happens implementation due limited usefulness visual information contains distances objects 
chapter agent world model order agent behave intelligently important keeps world model describes current state environment 
agent world model reason best possible action situation 
chapter describe world model agents uva trilearn soccer simulation team 
model seen probabilistic representation world state past perceptions 
contains various kinds information objects soccer field methods information derive higher level 
chapter organized follows 
section provides general discusses issues related world modeling 
various attributes stored world model agents described section 
sections devoted discussion different types methods deal world state information different ways 
common feature agents perceive environment sensors act actuators 
simplest form agent implemented direct mapping perceptions actions 
means agent respond immediately perceptual input associating certain action 
sophisticated agent base actions directly raw sensory data interpretation data 
interpretation sensory data requires stored kind internal representation processed internal model reflects current state world 
agent world model reason best possible action situation 
world model seen important parts agent architecture 
consists world currently perceived agent updated result processed sensory information predicted effects actions 
action selection model clear represent real world accurately possible 
furthermore world model provide abstraction attributes contained supplying methods enable agent reason information higher level 
methods seen form basis agent reasoning process 
robotic soccer agent aware position velocity positions velocities ball players 
agent keep world model contains kind information various objects 
soccer server agent different types sensors chapter 
agent world model cg yl yr dr dl sl sr dl dr meters field coordinate system assuming opponent goal right 
provide information current world state body sensor visual sensor aural sensor 
information sensors sent agents form messages update world model 
sensory information message contains time stamp indicates time information originated 
storing time stamp corresponding information agent distinguish date world model information older information 
important aspect soccer server sensory information relative agent perspective 
result agent directly observe global position global positions objects 
relative information converted global information old relative information useless agent moved position field 
agents uva trilearn soccer simulation team keep world model contains information objects soccer field 
world model seen probabilistic representation real world past perceptions 
object estimation global position velocity stored things confidence value indicates reliability estimate 
confidence value derived time stamp included sensory messages estimate date information associated confidence value high 
world model updated soon new sensory information received agent contains known information state world 
objects visible updated observed velocity 
confidence estimate decreases cycle object seen 
furthermore agents communication increase amount date information world model 
result ability cooperate teammates greatly enhanced 
mentioned visual information relative agent perspective converted global information 
done making fixed objects flags lines goals placed field see 
global positions landmarks known change agent localize combining landmark positions sensory data containing relative information objects 
subsequently agent global position determine global positions objects relative positions 
global coordinate system expressing positions angles agent world model shown 
center field chosen origin system axes running length field centers goals center line respectively 
coordinate system negative direction team goal defends chapter 
agent world model negative direction left side field facing opponent goal 
furthermore global angles specified range 
zero angle points center opponent goal increases clockwise direction 
note global positions angles specified terms opponent side field independent team plays left right right left 
possible reason positions angles universal way 
order reason best possible action world model provide various methods enable agent information higher level 
uva trilearn agent world model contains types methods deal world state information different ways retrieval methods directly retrieving information objects 
update methods update world model new sensory information 
prediction methods predicting world states past perceptions 
high level methods derive high level basic world state information 
remainder chapter types methods discussed separate section 
describe various attributes stored world model agents 
attributes attributes seen building blocks world model 
piece information contained model represented separate attribute 
attributes contain information agent reasoning process 
great importance attribute values represent current state world accurately possible 
time agent receives new sensory observation attribute values updated 
cases values retrieved directly new message cases contents message need processed particular attribute value determined 
uva trilearn agent world model contains large number different attributes divided main categories environmental information match information object information action information 
separate subsection devoted categories various attributes belong category described 
environmental information world model holds number attributes contain information specific environment provided soccer server 
attributes represent various server parameters parameters heterogeneous player types 
player client connection server receives types messages assign values attributes message contains values server parameters 
parameters specify behavior soccer server define dynamics simulation environment 
examples simulator step ball speed max respectively denote duration cycle maximum speed ball 
soon message arrives server values stored separate class called 
match perform calculations predict outcome specific actions 
note initial values player related server parameters apply default player type 
chapter 
agent world model second message contains values parameters define value ranges heterogeneous player parameters 
values stored class 
heterogeneous player type server sends message containing player parameter values specific type 
values randomly chosen different intervals defined values second message 
intervals abilities player type certain trade offs see section 
heterogeneous players example usually faster default players get tired quickly 
player type corresponding values stored object 
coach puts heterogeneous player certain type field player gets abilities defined parameter values type 
case player related parameters class updated player changed influence actions environment taken account 
match information world model holds attributes contain general information current state match 
time 
attribute represents server time current cycle match 
represented ordered pair denotes current server cycle number cycles clock stopped 
value equals time stamp contained message received server value game progress 
certain dead ball situations offside call leading free kick value different cases server time cycles continue pass actions performed 
representing time way advantage allows players reason number cycles events meaningful way 

attribute represents uniform number player 
value supplied server remains fixed match 
number identify players 
side 
attribute represents side player team playing 
value left right remains fixed match teams change sides half time 
value attribute important due fact positions landmarks fixed player coordinate system changes 
means team playing left right global position landmark different plays right left 

attribute represents name player team string value 
parsing messages server check information teammate opponent 

attribute represents current play mode play modes discussed section value 
general play mode equals play game progress change result certain dead ball situations free kicks corner kicks 

attribute represents goal difference teams 
value zero scores level positive agent team leading negative trailing 
chapter 
agent world model object information world model contains information objects soccer field 
objects divided stationary objects fixed position flags lines goals dynamic objects move players ball 
object information stored object class serves container data provides additional functionality methods setting getting information 
positions velocities stored global coordinates independent agent position field relative coordinates change agent moves 
agent uses stationary objects landmarks field localize relative perceptions objects 
global position able translate relative information objects global information 
shows uml class diagram object type hierarchy refer section details uml class diagrams 
note class important attributes shown auxiliary ones necessary calculating values 
relative positions objects obtained server messages example omitted 
furthermore operations class omitted space reasons provide functionality setting getting attribute values 
information contained class described detail 
object 
superclass object type hierarchy contains basic information object 
important attributes denote type object global position object time object observed 
note object type attribute uniquely defines identity object object ball object goal object teammate object opponent 
furthermore time seen attribute derive confidence value indicates reliability object information 
confidence value comes interval defined formula confidence tc tc denotes current time time object observed 
means confidence decreases cycle object seen restored object observed 
note confidence value introduced agent partial view environment moment 
object view number cycles current position estimated observed velocity 
estimate reliable number cycles increases due fact agent know actions object performed confidence value important reliability measure object information 

subclass object class contains information stationary objects field 
adds additional attributes inherited object superclass 

subclass object class contains information mobile objects 
adds velocity information general information provided object class 
important additional attributes denote global velocity object time velocity observed 

subclass class contains information specific player field teammate opponent 
adds attributes denoting global neck angle global body angle player time angles observed information provided class 
furthermore holds boolean attribute indicates player goalkeeper 
note agent member class 
note confidence value landmarks due fact landmarks fixed global position 
ot chapter 
ot agent world model cg yl yr dr dl sl sr dl dr meters object object type global position time seen global neck velocity angle global velocity body perception angle time angle observation time goalie stamina view angle view quality global velocity velocity perception observation time time uml class diagram object type hierarchy 

subclass class contains information ball 
adds additional attributes inherited superclass 

subclass class contains information agent 
adds attributes denoting stamina view angle view quality agent information provided class 
world model contains information visible flags furthest visible line 
visual sensor perceives line bisector agent view cone intersects line 
means agent located inside field see single line 
cases agent positioned outside field perform kick store information furthest visible line orientation line agent standing inside field facing direction 
furthermore world model contains information dynamic objects field ball opponent players teammates agent 
information players stored uniform number uniform number index player information 
biggest challenge keeping track players distance player large uniform number possibly team name visible see section 
visual information received agent identify player seen 
cases previous player positions help disambiguate identity 
combining position velocity information player currently stored world model possible determine observed player previously identified 
possible match assumed observed player information available 
match player information linked player confidence value dropped certain threshold 
note anonymous player information useful evaluation passing options example requires knowledge presence player uniform number 
chapter 
agent world model action information world model holds attributes contain information actions agent previously performed 

attributes counters total number actions certain type executed server equals means agent far executed turn commands 
values attributes directly obtained information included sense body messages see section 
counters determine action command sent previous cycle performed 
appropriate counter incremented sure command reach server cycle executed current cycle previous 

attribute represents list contains actions agent sent server previous cycle 

attribute represents list booleans indicate action list action performed 
booleans set making counter values 
attribute represents agent knowledge actions performed update world model accordingly 
retrieval methods retrieval methods directly retrieving information objects agent world model 
attributes described section method defined get corresponding value 
attributes representing environmental information match information action information methods called arguments 
method call example return current time 
attributes representing object information possible attributes defined multiple objects 
obtain attribute value specific object supply object identifier argument corresponding retrieval method 
identifier look information particular object 
method call object teammate example return currently stored global position teammate uniform number 
methods defined iterating group objects 
useful information different objects compared 
update methods update methods update world model new sensory information server 
attributes described section method defined set corresponding value 
attributes values directly extracted information sensory message need calculated new information 
world model updated time new sensory information arrives server 
update divided separate phases 
phase process phase object information contained message stored right location world model 
process phase value assigned attribute represents piece information chapter 
agent world model directly sensory message 
second phase update phase new values combined information world model determine date values remaining attributes 
way world model data known information state world 
note update world model new visual information predictions states 
section discuss type sensory message physical visual aural phases mentioned earlier implemented update values agent world model 
update body sensor body sensor reports physical information agent 
simulation cycle agent receives sense body message server contains information time current cycle information applies 
agent view angle view quality 
agent stamina 
counters number times agent performed certain action 
velocity agent relative direction neck 
neck angle agent relative body 
soon message arrives processed storing information appropriate location agent world model process phase 
agent speed neck angle update global position velocity update phase analytical way making known soccer server dynamics 
simulation cycle movement mobile objects soccer server calculated equations neglecting motion noise accelerate move decay decay speed reset acceleration respectively denote position velocity acceleration object cycle decay parameter representing velocity decay rate object 
equations update global position velocity agent information physical message 
equation shows difference global positions previous current cycles equals movement 
movement vector derived rewriting equation vt decay order determine movement compute global velocity agent current cycle 
done making relative velocity contained sense body message 
key observation definition magnitude representing speed 
directions different 
global velocity chapter 
agent world model determined performing simple rotation relative velocity vector 
denotes velocity agent relative direction neck rotation angle case equal agent global neck angle angle determined updating global neck angle stored world model actions agent sent server previous cycle 
note check actions performed comparing action counters included current sense message corresponding values previous 
determining interested turn turn neck commands change agent global neck direction performed 
command parameters actions update global neck angle way normalize respectively denote actual angles agent turned body neck previous cycle normalize function converts resulting angle equivalent angle interval 
recall section actual angle player turns body usually equal moment argument supplied turn command 
actual turn angle depends speed player player moves faster difficult turn due inertia 
player execute dash turn cycle acceleration zero turn performed 
result expression global velocity previous cycle derived combining vt decay turn performed previous cycle actual turn angle depends speed cycle 
speed determined inversely applying agent speed decay global velocity current cycle replacing vectors equation norms 
actual turn angle defined equation moment inertia moment moment denotes argument supplied turn command inertia moment server parameter representing player inertia random number taken uniform distribution player rand player rand interval 
past observations filter noise factor best prediction mean uniform noise distribution 
noise equation neglected computing actual turn angle 
resulting value actual angle agent turned neck definition equals argument supplied turn neck command determine agent global neck angle current cycle equation 
rotating relative velocity degrees gives global velocity current cycle update agent global position 
note derivation take previous velocity perceptions account improve global velocity estimation 
old perceptions neglected reasons 
firstly noise added motion object propagated meaning changes direction velocity vector 
noise affecting movement just included sensory data 
due noise propagation currently perceived velocity different direction movement velocity previous cycle 
secondly amount sensor noise perceived velocity small amount motion noise propagated previous cycle large see sections 
old perception little value prediction 
sense message arrives server global positions velocities players ball updated 
due fact information available actions performed chapter 
agent world model players assumptions behaviour previous cycle 
means positions velocities updated equations zero acceleration 
order update information ball checked agent performed kick previous cycle 
done comparing counter values kick command subsequent sense messages 
agent executed kick ball kickable distance time assumed ball accelerated result kick 
case ball global position velocity updated equations act pow kick power rate cos ball sin ball act pow actual kick power defined equation kick power rate server parameter determine size acceleration vector ball direction ball accelerated cycle 
direction equal sum agent body direction previous cycle angle parameter supplied kick command 
agent perform kick previous cycle assumed ball kicked case ball information updated equations zero acceleration 
positions ball agent overlap update positions adapted known soccer server collision model 
means objects moved back direction came overlap anymore 
velocities multiplied 
note order update agent world model sense body message unreliable assumptions due lack information 
examples assumed ball kicked players players perform actions 
arrival sense body message indicates start new cycle uncertainty represented fact confidence values associated world model information dropped equation 
agent receives visual information object confidence object information restored maximum value 
update visual sensor visual sensor detects visual information objects agent current field view 
information automatically sent agent send step current server version ms form see message contains information time current cycle information applies 
information visible objects field 
object information relative agent perspective relative neck angle contains elements name object uniquely identified 
distance object 
direction object 
distance change object 
direction change object 
body direction body object 
neck direction neck object 
assumptions players executing kicks meaningful way 
chapter 
agent world model stationary objects name distance direction 
dynamic objects amount information depends distance object 
name distance direction objects included probability receiving items listed decreases distance object increases see section 
world model updated soon message arrives 
process phase information contained see message directly stored right location world model 
information agent updated 
agent global position determined making visible landmarks field 
global position update positions velocities dynamic objects 
agent localization extremely important errors self localization method propagate object information 
section compare methods determining agent global position orientation available landmarks 
describe number methods updating positions velocities dynamic objects new information 
note global velocity agent calculated information visual message looking difference agent new global position previous 
necessary global velocity derived accurately information received body sensor described section 
agent localization various landmarks flags lines placed field shown 
landmarks self localization 
agent perceive different number landmarks depending neck direction location field 
example facing center field large number landmarks visible number smaller standing corner looking closest side line 
clearly localization method landmarks needs important properties accurate error resulting position estimate small possible 
robust small number landmarks visible 
fast computationally cheap satisfy agent real time demands 
section describe methods agent localization soccer server 
methods experimentally compared number possible configurations determining agent global position 
results experiment section 
method agent localization line flag method uses relative visual information line flag determine agent global position 
direction line calculate agent global neck angle subsequently global position making fixed global position flag known agent 
lb bisector agent view cone half line starting agent global position extends direction neck 
agent sees line reported visual information consists distance intersection point lb angle lb 
shows example situation 
note reported angle equals acute angle lb rotated intersection point aligned angle positive case clockwise rotation negative see 
order obtain agent global neck chapter 
agent world model cg yl yr dr dl sl sr dl dr meters lb determining agent global neck angle reported angle line angle need determine angle lb perpendicular line lp depicted 
angle calculated formula lp sign sign function returns argument positive 
note case sign sign orientation agent neck relative line reverse orientation relative perpendicular line lp 
order determine global neck angle agent need know global orientation perpendicular line lp 
possible lp orientation easily derived 
global orientations lines perpendicular side lines top bottom left right shown table team plays left right 
opposite team opponent goal located side field degrees added orientation 
side line perpendicular orientation object line object line object line object line table global orientations degrees lines perpendicular side lines left team 
right team degrees added orientation 
note assume side line perceived location inside field values table agent global neck angle calculated follows orientation lp position flag relative agent determine global position field 
visual information flag consists distance fr direction flag relative neck agent 
visual message effectively contains relative position fr flag polar coordinates 
furthermore agent knows fixed global position fx fy flag combining global relative information flag possible determine agent global position px py 
perform rotation align relative coordinate store information furthest visible line agent sees lines outside field 
global positions stationary objects landmarks stored agent world model 
chapter 
agent world model system polar global coordinate system cartesian 
visual information relative neck agent rotation angle equal agent global neck direction 
agent global position px py obtained converting polar coordinates cartesian coordinates performing translation matches flag relative position global position 
summary px py calculated follows px py fx fy fr function converts polar coordinates cartesian coordinates method agent localization flags cos sin second method uses relative visual information flags determine global position agent 
information included visual message distance fr direction flag named distance gr direction flag named addition agent knows global positions fx fy gx gy stored world model 
combining distance flag known global position flag gives circle possible agent positions 
circle flag center perceived distance radius 
way second flag defines circle possible positions 
clearly correct agent position lie circles 
general circles intersection points denotes actual position agent 
determined points correct looking difference angles flags perceived 
example situation shown 
approach agent localization problem amounts finding correct intersection point circles 
order determine point calculate orthogonal projection line segment connects flags 
compute distance making known global positions gx fx gy fy distance seen consist parts denote distance distance distance consider triangles fpp gpp follows pythagorean theorem equations fact derive value gives global coordinates determined follows fx cos fy sin chapter 
agent world model cg yl yr dr dl sl sr dl dr meters agent localization flags 
cos sin normalized values depicted cos sin global position agent px py sign sin sign cos derived sign equals positive 
value sign determines intersection points denotes correct position agent 
note possible third landmark disambiguate agent global position definition resulting third circle provide unique intersection point 
done reasons 
firstly circles exactly intersect common point due noise included sensory observations 
furthermore landmarks better meets robustness property mentioned section 
method agent localization particle filter third method particle filter determine global position agent 
convenient way look agent localization problem state space approach 
agent seen controllable markov process hidden unobserved low dimensional states xt time step current problem states correspond positions 
assume initial state initial distribution time 
furthermore regard known soccer server dynamics including noise stochastic transition model xt xt brings agent stochastically state xt state xt action issued time assuming sensory observations yt sent server cycle conditionally independent states xt agent localization problem boils estimating time step posterior density xt yt state space describes agent current belief state time bayes rule proportionality derived posterior xt yt yt xt xt chapter 
agent world model prior density xt corresponds propagated posterior previous time step xt xt xt xt yt dxt markov assumption past effect previous time step implicitly 
equations provide efficient iterative scheme bayesian filtering 
order determine posterior analytically able compute integral 
result multiplied likelihood yt xt resulting density xt yt normalized unit integral 
turns posterior analytically computed transition observation models linear gaussian 
case soccer server simulation environment resort approximations simulation 
particle filter attractive simulation approach problem computing intractable posterior distributions bayesian filtering 
idea determine discrete approximation continuous posterior density set particles associated probability masses empirical estimate posterior xt yt xt xt delta function centered particle integration computing prior replaced summation xt xt integrals replaced sums continuous densities discrete ones required normalization step filtered posterior xt yt yt xt trivial normalization discrete masses unit sum 
xt problem agent localization soccer server visual information received current cycle determine agent position 
visual message contains multiple pieces information information objects regarded subsequent observations light theory 
implemented particle filter method agent localization follows 
assume initial estimate xt agent global position previous position methods described earlier 
posterior density xt yt approximated grid particles centered estimated position 
particle grid associated probability mass equal total number particles 
reason choosing uniform distribution measure quality initial estimate 
initially probability particle particle seen candidate position 
perceived distance direction flag reduce number candidates 
recall section noise incorporated visual sensor data quantizing values sent server 
distances flags quantized follows quantize exp quantize ln quantize step chapter 
agent world model cg yl yr dr dl sl sr dl dr perception flag yields range possible agent positions indicated shaded area 
due sensor noise incorporated visual observations 
exact quantized distances respectively quantize step server parameter represents quantize step 
furthermore quantize rint rint denotes function rounds value nearest integer 
quantization procedure effectively means range real distances flag mapped quantized distance included visual message 
quantized distance determine minimum maximum value real distance note equation second argument supplied quantize formula constant value quantize step equals soccer server version 
assuming quantize enables calculate minimum maximum possible value argument inverting equation 
gives vmin rint vmax rint applying twice get range real distance originate rmin exp ln quantize step rmax exp ln quantize step perceived distance update particle grid removing particles fall computed range rmin rmax real distances 
update particle grid account perceived direction flag 
directions flags lines quantized rounding real value nearest integer see equation 
means quantized direction deviate degrees real value 
holds agent global neck angle estimated directional observation see section 
quantized direction range real direction originate equals information remove particles perceived direction flag agent global neck angle falls outside range 
example perception flag yields range possible agent positions shown 
removing illegal particles grid range information original number particles restored resampling chapter 
agent world model grid legal area posterior 
done randomly selecting remaining particles centering gaussian kernel point standard deviation reflects local density 
choose follows xi number remaining particles mean remaining particles dimension data case particles denote positions 
property minimizes mean integrated squared error hypothetical gaussian posterior distribution resampled particle set 
new particle created drawing sample gaussian 
done randomly selected particles original number samples restored 
particle filter procedure repeated observation yt 
means particle grid updated visible flag grid resampled 
flags processed determine average remaining set particles obtain global position estimate 
results compared performances methods described conducting agent localization experiment 
experiment number different configurations configuration 
method applied localize agent furthest visible line closest visible flag 
configuration 
method applied localize agent furthest visible line visible flags 
flag visual information combined information line obtain global position estimate 
estimate weighted depending distance flag 
seen perceived distance flag possible determine range values rmin rmax real distance originate inverting 
new measurement yi weighted variance possible range values 
values range uniformly distributed gives rmax rmin simple recursive parameter estimation method kalman filter current estimate updated account new measurement associated variance 
new measurement yi current estimate xi corrected adding weighted difference follows correction term equals xi xi yi xi means sample weight smaller distance consequently perceived flag larger 
variance updated note kalman filter method corresponds gaussian approximation posterior distribution xt yt 
chapter 
agent world model configuration 
second method localize agent closest visible flags 
configuration 
second method applied localize agent possible combinations visible flags 
resulting estimates weighted depending distances perceived flags updated kalman filter update equation see 
measurement generated information visible flags get ranges possible distance values base weight 
seen perceived distance flag defines circle possible agent positions 
result range rmin rmax real distances corresponding seen define ring area contains agent true position 
combining information flags gives intersection area rings agent position located 
clearly size intersection area depends possible distance ranges represents measure confidence estimate area gets larger weight decrease measurement taken larger set possibilities 
size intersection area weight samples represents 
resembles spherical gaussian centered mean area 
configuration 
particle filter method applied determine agent global position 
second method fourth configuration obtain initial position estimate center grid particles estimate distance explained 
update original number particles restored resampling posterior gaussian sampling method described earlier 
visible flags processed remaining set particles averaged obtain estimate agent global position 
configuration 
agent global position determined applying particle filter algorithm second method fourth configuration obtain initial estimate 
difference previous configuration resampling step omitted number particles increased way total computation time configurations 
turns approximately case grid particles separated keep constant size 
idea investigate accurate estimate obtained amount time points resampled 
configurations tested placing agent times random position field random orientation 
placement agent calculated global position visual information received 
done configuration 
resulting estimates compared noise free global information received coach determine estimation error configuration particular trial 
table displays results experiment performed pentium iii ghz mb machine running red hat linux 
configuration average error standard deviation total time table localization performance different configurations iterations 
setup localization experiment random placement previous agent positions 
chapter 
agent world model results clearly show configurations outperform alternatives respect accuracy estimates 
average error configuration furthest visible line closest visible flag twice high method faster 
method visible flags configuration total time obviously increases average error larger 
reason estimate partly visual information flags located larger distance agent configuration 
noise incorporated information despite fact samples weighted estimate negative influence estimation error 
average error third configuration closest flags highest 
general second method faster accurate 
explained due fact noise included visual observations defines larger area possible agent positions second method method 
estimate obtained applying second method larger set possibilities increases possible estimation error 
possible combinations visible flags weight resulting samples distances flags configuration estimate improved significantly 
agent placed random position field done experiment sees flags average standard deviation 
gives total number approximately pairs flags base estimate weighted average taken large number measurements causes noise filtered 
concluded fourth configuration outperforms terms accuracy 
justifies choice fourth configuration obtain initial position estimate particle filter algorithm configurations 
note total width particle grid chosen approximately equal twice sum average error standard deviation fourth configuration 
way particle grid certainly cover agent true position centered initial estimate 
configurations clearly yield best results achieve low estimation error small standard deviation 
surprising filter uses visual information flags improve initial estimate 
note obviously method significantly slower previous ones 
consider fact total time applies iterations method fast meet agent real time demands 
note hardly difference fifth configuration resamples particles sixth configuration resample uses points 
configurations achieve error equal time 
due slightly better estimation error sixth configuration uva trilearn agents configuration localize 
turns agent localization method accurate compared teams report estimation errors range 
agent orientation agent visible landmarks field determine global neck angle global body direction 
methods calculate agent global neck angle 
method uses perceived direction furthest visible line determine agent global neck angle 
method described section explanation agent localization method 
note resulting angle includes noise due fact actual direction line quantized rounding value nearest integer 
matches number larger agent positioned centrally field enables see flags 
random placement causes agent positions small number flags visible 
especially considers fact field size 
chapter 
agent world model second method uses perceived direction flag combines information known global position fx fy calculated global position px py agent determine agent global neck angle 
step compute angle fx fy px py 
agent global neck angle obtained subtracting relative direction flag 
summary global neck angle calculated follows normalize atan fy py fx px normalize function converts resulting angle equivalent angle interval atan function computes value arc tangent range signs arguments determine quadrant return value 
note resulting estimate includes noise directional observation result rounding real value nearest integer 
furthermore quality estimate depend accuracy calculated global position px py 
results remainder section estimates px py obtained sixth configuration described section 
compared performances methods described performing agent orientation experiment 
experiment different configurations configuration 
method applied determine agent global neck angle perceived direction furthest visible line 
configuration 
second method applied determine agent global neck angle perceived direction closest visible flag 
configuration 
second method applied determine agent global neck angle visible flags 
flag perceived direction combined flag known global position global position agent obtain estimate agent global neck angle 
estimate computed averaging measurements flags 
note necessary weight samples case noise added observation way rounding real direction flag nearest integer 
configurations tested placing agent times random position field random orientation 
placement calculated global neck angle visual information received 
done configuration 
resulting estimates compared noise free global information received coach compute estimation error trial table displays results experiment performed pentium iii ghz mb machine running red hat linux 
results show method accurate slightly faster second compare configurations 
second method visible flags configuration estimation error significantly reduced increase total computation time iterations negligible 
note scaling approach possible method agent sees single line positioned inside field 
uva trilearn agents third configuration determine global neck angle 
calculate global orientation body angle combining neck angle information contained sense body messages denotes agent neck angle relative body 
note case possible improve neck angle estimate particle filtering 
chose average error third configuration extremely small coach receives directions rounded integers 
experiment adapt soccer server implementation way real directional values sent coach enable comparison 
comparison strong simulation team years reports angle estimation errors degrees 
chapter 
agent world model configuration average error deg standard deviation deg total time table neck angle estimation performance different configurations iterations 
dynamic object information agent global position orientation updated information update world model attributes dynamic objects ball players 
objects values need computed global position qx qy 
global velocity vx vy 
global body angle body players global neck angle neck players global position qx qy dynamic object determined combining relative visual information object derived global information agent 
visual message effectively contains relative position qr object polar coordinates 
order determine object global position align relative coordinate system polar global coordinate system cartesian performing rotation 
visual information relative agent neck rotation angle equals agent global neck angle computed earlier 
polar coordinates converted cartesian coordinates result added agent global position px py 
gives formula calculating object global position qx qy qx qy px py qr function converts polar coordinates cartesian coordinates shown equation 
note past observations improve estimate object global position 
reason agent information actions performed players 
way determine relevance old positional information dynamic objects players dashed ball kicked 
result current visual perception completely reliable source information position dynamic objects field 
distance visible player large see message contains body direction body neck direction neck player relative neck direction agent 
values calculate player global body angle body global neck angle neck simply adding agent global neck angle relative directions included visual message body body neck neck note visual message contain body neck player far away assumptions concerning player behavior previous cycle 
means values body neck stored world model remain unchanged 
chapter 
agent world model pt pt cg yl yr dr dl sl sr dl dr meters vry qry components calculating change information dynamic objects 
estimating velocity dynamic objects prominent part updating agent world model 
accurate estimate ball velocity example important determining optimal interception point 
describe methods estimating velocity dynamic objects compared different configurations 
remainder section concentrate estimating ball velocity methods applied players 
method velocity estimation change information method uses distance change direction change included visual message estimate ball velocity vx vy 
recall section values calculated equations vry ery ery vry vry respectively denote distance ball ball velocity relative agent neck direction 
furthermore ery equal unit vector direction relative position qry ball ery qry qry qx qy px py relative ball position equals difference ball global position qx qy agent global position px py 
graphical depiction quantities shown example situation 
distance change regarded difference coordinates current previous ball positions relative coordinate system agent direction change regarded quotient difference coordinates positions distance ball 
distance change direction chapter 
agent world model change distance possible recover relative ball velocity vry substituting rewriting result 
gives ery vry ery visual information relative agent global neck angle global ball velocity vx vy obtained rotating relative velocity vector vry degrees 
note resulting velocity estimate vx vy assumption environment noiseless server fact adds noise simulation ways 
forms noise affect accuracy ball velocity estimate 
movement noise 
order reflect unexpected movements objects real world soccer server adds uniformly distributed random noise movement ball cycle shown section 
amount noise added depends speed ball ball goes faster noise added 
important note movement noise changes direction velocity vector just included sensory observations 
sensor noise 
real world complexities contained soccer server noise incorporated visual sensor data quantizing values sent server 
examples precision visual information object decreases distance object increases angles rounded nearest integer 
values distance direction distance change direction change quantized equations 
quantized values possible determine ranges real values originate inverting equations accordingly 
range information recursive parameter estimation methods filtering algorithms improve velocity estimate 
method position velocity estimation second method uses difference global position ball previous cycle current global position estimate global ball velocity current cycle 
agent information concerning actions performed players assumed ball kicked 
equation shows ball kicked zero acceleration movement cycle cycle equal velocity vt vt cycle 
concluded vt vt equals difference qt qt qt qt 
order compute velocity cycle multiply velocity cycle velocity decay rate ball represented server parameter ball decay 
gives formula calculating velocity vt vt consecutive ball positions ball decay method velocity estimation particle filter third method uses particle filter algorithm described section estimate current ball velocity 
particle represented quadruple vx vy contains relative position velocity ball cartesian coordinates 
visual observation received agent included distance direction ball determine ranges rmin rmax min max real values originate 
done inverting chapter 
agent world model inverse quantize range vmin vmax defined 
done distance change direction change information yields ranges rmin rmax min max 
ranges initialize set particles randomly selecting value range 
polar coordinates converted cartesian coordinates equation values compute vx vy estimate method described 
results set particles vx vy 
initial velocity estimate obtained computing average velocity components particles 
start cycle position velocity information contained particle updated known soccer server dynamics noise model 
exact equations server uses meaning uniformly distributed random noise added way 
new visual message arrives checked particle values position velocity possible new information 
done computing ranges possible values current observation checking particle values fall corresponding ranges 
certain particle case particle removed set 
particle set resampled randomly selecting remaining particles making exact copy repeated original number particles restored 
velocity estimate equal average velocity components particles 
note possible new observation causes particles removed set ball kicked completely changes position velocity 
case possible value ranges corresponding current observation re initialize particle set 
note particle filter differs agent localization experiment section 
method described particles reinitialized subsequent position estimate 
current case propagated step reinitialized particle set empty 
difference particles needed filter described section state space 
results compared performances methods described conducting velocity estimation experiment 
experiment different configurations configuration 
method applied estimate ball velocity neglecting movement noise ball noise contained visual sensor data 
configuration 
method applied estimate ball velocity past estimates account noise added visual observations 
done kalman filter principles discussed earlier 
main difference case velocity estimate updated different ways 
update takes place start new simulation cycle agent receives sense body message 
new visual information arrived stage possible update velocity estimate known soccer server dynamics 
means estimated ball velocity previous cycle multiplied speed decay ball obtain new estimate follows ball decay note include position information particle movement ball cycle says velocity shown second method 
furthermore position information provide alternative equation estimating global ball position 
currently working direction 
note identical particles result resampling step spread cycle due fact noise added particle update random character 
qry vry chapter 
agent world model note movement noise added server neglected equation 
added noise direction non white due fact depends speed ball previous cycle taken account increasing variance associated previous estimate way equation clarifies ball decay ball rand vt ball rand vt second update performed agent receives new visual information 
ranges possible values distance change direction change calculated quantized values received visual message 
gives possible ranges rmin rmax min max perceived values originate 
method applied mean ranges values uniformly distributed compute prediction vt current ball velocity 
prediction weighted current estimate ut wt wt ut obtain improved estimate velocity ball current cycle 
gives pt pt pt correction term equal ot ot ot variance updated variance current measurement determined ranges rmin rmax min max see possible ball coordinate changes relative coordinate frame agent 
values ranges uniformly distributed gives rmax rmin max min configuration 
second method applied estimate ball velocity information global position ball consecutive cycles 
configuration 
third method particle filter applied estimate ball velocity particle set consists particles 
configurations tested means experiment depicted 
players placed field respectively positions facing cg center spot 
iteration second player shot ball random power random yl yr dr dl sl sr dl dr meters setup velocity estimation experiment 
chapter 
agent world model configuration average error standard deviation table velocity estimation results different methods iterations measurements 
direction degrees shaded area shows part field ball shot 
player move visual information received estimate ball velocity subsequent cycle ball stopped moved outside view cone 
done configurations described 
resulting estimates compared noise free global information received coach determine relative estimation error configuration 
experiment repeated times leading total measurements 
note positions players chosen way distance value server parameter far length currently 
meant player receive distance change direction change information ball visual message see section 
furthermore players put edges view cones ensure player able see ball long possible 
table displays results experiment performed pentium iii ghz mb machine running red hat linux 
results clearly show position velocity estimation method configuration yields largest error 
caused sensor noise added true distance direction values observed player 
noise increases significantly distance ball increases leads large error estimated ball position 
results better distance change direction change information included visual messages estimate ball velocity method 
noise completely neglected past observations ignored configuration method performs better algorithm 
results improved computing velocity combination estimate obtained current perception noise account prediction past observations configuration 
case error reduced 
particle filter method configuration yields best results 
explained due fact method takes visual sensor noise ball movement noise account 
calculation possible value ranges values included visual messages originate provides effective way initializing filtering particle set 
furthermore possible movement noise incorporated simulating soccer server dynamics including noise model particle update 
particle seen possible ball state number particles chosen large average possible states represents accurate estimate true situation 
shows results velocity estimation experiment function distance second fourth configurations 
clear plots average estimation error decreases distance ball smaller 
caused fact noise perceived values distance distance change larger ball away 
furthermore setup velocity estimation experiment ball moved player calculated velocity 
single iteration distance player ball decreased time 
result estimation methods past observations estimate current ball velocity configurations achieved better results distance got smaller estimates previous cycles accurate 
effect clearly visualized shortly ball kicked second player average error standard deviation chapter 
agent world model cg yl yr dr dl sl sr dl dr meters average error configuration configuration configuration distance cg yl yr dr dl sl standard deviation sr dl dr meters configuration configuration configuration distance average velocity estimation error standard deviation function distance 
second configuration drop rapidly distance decreases 
case fourth configuration quite significantly 
note concluded results small distances results second configuration particle filter algorithm 
uva trilearn agents particle filter algorithm estimating velocity dynamic objects due better estimation error larger distances 
update aural sensor aural sensor detects spoken messages sent player coach issues say command 
calls referee treated aural messages 
aural messages contain information time current cycle information applies 
sender message referee online coach left online coach right self relative direction sender sender player 
note information player sent message distance sender 
string maximum length bytes representing contents message 
referee messages contain information concerning changes current play mode 
happens example goal scored ball goes bounds 
soon message arrives processed storing information appropriate location agent world model 
actions taken update phase 
messages coach usually contain advice players observations current match 
players messages adapt strategy 
currently uva trilearn coach selecting heterogeneous player types certain field positions changing players positions 
players informed changes referee 
coach passes messages players 
soccer server communication paradigm models crowded low bandwidth environment agents teams single unreliable communication channel 
spoken messages limited chapter 
agent world model length characters heard players certain distance metres speaker furthermore player hear message teammate simulation cycles 
note permitted message length characters possible communicate considerable amount information 
enables agents example communicate world model teammates clearly possible short messages allowed 
uva trilearn agents communication gather information parts field currently visible 
agent best view field situation communicates world model team members information increase reliability world state representation 
remainder section describe exact syntax messages way processed received agent 
policy determines player communicate situation defines frequently broadcasting take place discussed chapter 
player communicates world state information teammates message contains side left right team current cycle uniform number speaker 
players field communication channel part message encoded way recognized message comes teammate opponent 
furthermore encoding scheme protects agents communicative interference opponent players 
opponents example try corrupt world model agent re sending previously spoken messages team time 
coding scheme prevents damage situations encoded cycle number reveal information message outdated 
encoded part message followed global position velocity speaker ball values accompanied corresponding confidence values 
remainder message contains positional information players confidence higher certain threshold 
player information consists uniform number followed global position associated confidence value 
order indicate player goalkeeper important know optional added uniform number 
necessary uniform number 
uniform number player unknown due fact distance player large uniform number player set 
note information objects associated confidence low communicated 
grammar message syntax shown table 
shows encoded time stamp message takes form 
encoding letter chosen ranges digits current cycle number 
range consists consecutive letters respectively correspond numbers 
example cycle number encoded cycle number 
encoding scheme uniform number speaker analogous letter chosen range consecutive letters correspond numbers 
note double values represent position velocity coordinates specified digit decimal point order sure message string exceed maximum length bytes 
agent receives aural information determined message sent teammate looking letter denotes side sender 
side matches agent checked message contains date information decoding encoded time stamp 
turns time stamp corresponds current cycle world state information extracted message compared information currently stored agent world model 
object information message inserted model associated confidence value higher confidence current information object 
positional information included player uniform number unknown agent looks closest player current world state information 
distance closest player anonymous player referee messages messages coach exception heard players 
chapter 
agent world model message encoding agent info ball info team info opp info encoding side enc time enc uniform nr side enc time enc uniform nr agent info glob pos glob vel glob pos double double glob vel double double ball info glob pos glob vel conf conf double team info uniform nr goalie glob pos conf team info null uniform nr goalie null opp info uniform nr goalie glob pos conf opp info null table grammar uva trilearn message syntax inter agent communication 
position contained message smaller certain threshold new position assigned closest player 
distance exceeds value information assigned player lowest confidence threshold 
note entire message discarded side indicator start message match receiver time stamp outdated equal current cycle time 
note case aural message calculations performed update phase 
prediction methods prediction methods predict states world past perceptions 
methods important action selection process 
agent world model currently contains low level prediction methods methods predicting low level world state information positions dynamic objects 
predictions higher level success certain strategy behaviour opponent players 
prediction methods contained world model divided main categories methods predicting state agent performing certain action 
methods receive action command input argument return prediction agent state global position global velocity global body angle global neck angle stamina command performed 
state information calculated simulating soccer server movement model action models command parameters 
server equations sections 
noise equations ignored 
methods predicting states dynamic objects field 
note difficult players due fact agent knowledge actions chapter 
agent world model players intend perform 
general predictions players methods category mainly focus ball 
ball positions velocities easier predict ball movement random player movement 
players perform different kinds actions influence state different ways ball generally moves certain trajectory changed kicking 
possible estimate ball positions consecutive cycles making known soccer server dynamics updating state ball 
key observation respect ball movement modeled geometric series 
geometric series defined series ratio consecutive terms constant 
expressed follows ar ar ar 
referred term ratio series 
seen soccer server simulates movement ball cycle adding ball velocity current position decreasing velocity certain rate 
ball velocity decays rate cycle possible describe movement model geometric series consecutive terms represent successive ball velocities movement 
ratio series equal value server parameter ball decay represents velocity decay rate ball cycle 
clearly model predict movement ball number cycles 
equals ball velocity current cycle velocity cycles equal ar ball decay 
ball movement cycle obtained adding velocity vector current ball position determine distance ball traveled period adding consecutive ball velocities 
need compute sum geometric series 
assuming want know distance ball traveled period cycles sum calculated follows ar rn gives simple closed formula computing traveled distance 
furthermore enables predict positions ball arbitrary number cycles adding result current ball position 
leads formula predicting global ball position pt cycles pt ball ball decay vt vt vt denotes ball velocity cycle polar coordinates function converts polar coordinates cartesian coordinates shown equation 
note prediction neglect noise added movement ball observations filter noise 
best prediction lies mean uniform noise distribution 
furthermore neglect fact ball kicked player cycles knowledge intentions players 
method predicting long take player reach certain position field 
method receives target position player arguments returns estimate number cycles player need get current position target position 
estimate fact maximum distance player cover cycle neglecting noise wind equals maximum player speed denoted server parameter player speed max 
note general player able cover distance cycle needs turn right direction due noise added chapter 
agent world model motion reach maximum speed single dash 
prediction number cycles player needs get position position calculated follows rint player speed max rint function rounds value nearest integer denotes player global body angle corresponds global angle parameter represents correction value number cycles player needs turn right direction 
note resulting estimate intended rough approximation 
high level methods agent world model contains high level methods deriving high level basic world state information 
methods gain knowledge state world hide soccer server details influence parameter values action commands 
section describe important high level methods contained world model 
divided main categories methods return information number players certain area 
methods receive specific area description input return value denoting number teammates opponents located area 
area circle rectangle cone 
examples methods 
methods return closest fastest player certain position object 
methods receive position object field input return closest fastest player teammate opponent input argument 
examples object ball 
determined iterating teammates comparing global positions position computed iterating ball positions steps cycle geometric series discussed section looking opponents reach positions ball 
opponent reach ball position equal smaller number cycles ball considered fastest opponent ball 
boolean methods indicate specific object satisfies certain high level constraint 
methods determine characteristics situation best possible action chosen 
important examples returns true ball located agent kickable range 
returns true ball located goalkeeper range 
returns true fastest player ball teammate 
returns true ball heading goal speed reach relevant knowledge goalkeeper 
methods return true current play mode satisfies certain constraint 
examples done teammates associated confidence higher certain threshold chapter 
agent world model methods return information angles players certain area 
currently category contains single method 
method returns global direction interval safest trajectory ball opponents located distance current ball position 
widest angle opponents area determined global direction bisector angle returned 
methods computing actual argument supplied action command order achieve desired result 
methods known soccer server equations manipulating command parameters see section invert equations determine parameter value produces wanted effect 
important examples 
method needed actual angle player turns equal argument supplied turn command depends speed player 
player moves faster gets difficult turn due inertia 
method receives desired turn angle input returns angle value supplied turn command achieve 
value computed formula direct result inverting equation neglecting noise turn parameter inertia moment vx vy inertia moment server parameter denoting player inertia vx vy equal speed scalar player 
note resulting turn parameter larger maximum turn angle argument supplied turn command equal maximum angle 

method needed actual power player kicks ball equal power argument supplied kick command depends position ball relative player 
example ball located player side short distance away kick effective ball straight front close 
method uses distance ball player absolute angle ball player body direction determine actual kick power rate situation 
value computed formula act kpr kick power rate kickable margin kick power rate server parameter determining size acceleration vector kickable margin server parameter defines player kickable range 

method receives desired speed agent wants give ball kick returns kick power supplied kick command order achieve 
value computed follows kick parameter act kpr act kpr actual kick power rate obtained 
note kick parameter larger maximum kick power 
way possible identify situations desired speed reached see sections 

method returns speed ball kick remaining speed equal traveling distance geometric series predict number cycles ball need cover distance chapter 
agent world model speed note reason backwards term series denoted speed subsequent terms denote different speeds ball slowing ratio series equal ball decay case 
seen section traveled distance amounts sum consecutive velocities sum terms series 
order determine number cycles need compute length series term ratio sum length calculated formula log log initial speed ball calculated follows ball decay 
method receives relative position agent wants move returns power supplied dash command order come close position possible 
agent move forwards backwards closest point target position agent reach orthogonal projection target point line extends direction body forwards backwards 
denote distance agent current position maximum distance player cover cycle player speed max 
distance agent wants cover cycle desired speed equals min 
order compute acceleration required achieve subtract agent current speed direction body obtained projecting current velocity vector distance covered automatically 
parameter dash command calculated follows dash parameter vr dash power rate effort vr agent global velocity polar coordinates agent global body angle function converts polar coordinates cartesian coordinates dash power rate server parameter determining size acceleration vector effort current effort value agent representing efficiency actions see section 
note resulting dash parameter larger maximum dash power argument supplied dash command equal maximum power 
direction agent relative coordinate frame 
chapter 
agent world model chapter player skills skill regarded ability execute certain action 
behavior agent depends individual skills agent perform 
general skills divided simple skills correspond basic actions advanced skills simple skills parts complex behaviors 
strategy team agents seen way individual agent behaviors coordinated 
chapter describe skills available agents uva trilearn robotic soccer simulation team 
skills form hierarchy consisting layers different levels abstraction 
skills lowest level specified terms basic action commands known soccer server higher level skills functionality offered layer generate desired behavior 
execution skill current state world represented agent world model described chapter 
chapter organized follows 
section give overview different skills layers notation chapter define various skills 
section describe low level player skills followed intermediate player skills section 
high level player skills section 
note choice skill selected situation depends strategy team discussed chapter 
skills available uva trilearn agents include turning point kicking ball desired position dribbling intercepting ball marking opponents skills divided different layers form hierarchy skills 
shows uva trilearn skills hierarchy consists layers 
layers hierarchical sense skills layer skills layer generate desired behavior 
bottom layer contains low level player skills directly specified terms basic action commands known soccer server 
abstraction level skills correspond simple actions turning point 
middle layer contains intermediate skills low level skills 
skills layer deal exact format server messages anymore specified terms skills layer 
skills highest level intermediate skills 
way skill executed depends arguments supplied 
skills level receive arguments values depend current world state 
behavior agent result selecting appropriate skill situation 
note agent chapter 
player skills cg yl yr dr dl sl sr dl dr meters high level skills intermediate skills low level skills soccer server commands uva trilearn skills hierarchy consisting layers 
low level skills soccer server commands higher level skills skills layer 
allowed select skills layer restricted selecting high level skills 
skill selected certain situation depends team strategy discussed chapter 
important realize execution skill eventually leads basic soccer server action command 
low level player skills mapping clear directly specified terms basic action commands 
higher levels skills implemented terms various skills level depends current situation lower level skills executed 
high level skills choice depends configurable threshold parameters introduced chapter 
current implementation values parameters test results observations practice games 
note selecting skill lead generation corresponding action command directly execution 
possible adapt command parameters stage necessary 
happen example exhausted agent wants move strategic position perform dash command full power order achieve 
executing command dash power reduced account agent current stamina see section 
furthermore note agent commit single action cycle regardless skill selected 
agent commitment previous plan executed part ball interception skill previous cycle guarantee continue execute part current cycle 
situation completely reevaluated action opportunity skill selected current situation 
form coordination reasoning execution referred weak binding see section 
chapter detailed description available skill form equations algorithms information methods available world model utility classes see section 
notation agent global position cycle denoted pt 
global positions objects generally referred qt 
relative positions indicated qt 
velocity agent cycle denoted vt velocities objects generally referred wt 
agent global neck angle cycle chapter 
player skills angle agent body relative neck cycle note agent global body angle equals predicted value cycle position agent objects velocity agent objects agent global neck angle agent body angle relative neck 
cmd method returns predicted value cycle value cycle performing action command cmd 
methods described section 
vr vector represented polar coordinates vr denotes length vector global direction 
method converts polar cartesian coordinates shown equation 
method rotates vector degrees 
method converts supplied angle equivalent angle interval 
referred normalization angle 
method returns angle value supplied turn command order turn player body desired angle 
method corresponds method described section 
turn parameter computed equation account speed inertia player 
note return value exceed maximum turn angle come interval 
method returns power supplied dash command order come close desired relative position possible 
method corresponds method described section 
dash parameter calculated equation account velocity effort value agent 
agent move forwards backwards closest point target position reach closest point lies continuation body direction 
note return value exceed maximum dash power explained section 
method returns actual kick power rate situation 
method corresponds method described section 
actual kick power rate computed equation account position ball relative agent 
value multiplied actual kick power kick gives size resulting acceleration vector 
method returns power supplied kick command order give desired speed ball kick 
method corresponds method described section 
kick parameter determined equation actual kick power rate account 
note return value exceed maximum kick power 
possible identify situations desired speed reached see sections 
method returns initial speed ball kick remaining speed equal traveling distance method corresponds method described section 
initial speed calculated equation account velocity decay rate ball 
min max method returns global direction interval min max bisector widest angle opponents located distance ball 
method corresponds method described section 
chapter 
player skills method returns average list angles 

note computing average list angles trivial due fact angles go degrees back 
average degree degrees 
wrap problem solved calculating average sines angles average cosines angles 
true average angle reconstructed computing arc tangent quotient respective averages 
method implemented formula atan sin cos atan function computes value arc tangent signs arguments determine quadrant return value converts resulting angle equivalent angle interval defined 
low level player skills low level player skills correspond simple individual actions directly specified terms basic action commands known soccer server 
way actions executed depends current state agent environment 
section describe low level player skills available uva trilearn agents 
skills returns basic action command correct parameter values depend current world state 
exists direct mapping low level player skills basic action commands skills contain complex decision procedures 
implementation completely known soccer server specifications 
aligning neck body skill enables agent align neck body 
returns turn neck command takes angle agent body relative neck argument 
note angle directly extracted agent world model 
leads definition skill turning body point turn neck skill enables agent turn body point 
receives global position field returns turn command turn agent body point 
agent global position cycle predicted current velocity 
done compensate fact remaining velocity move agent position cycle 
global angle position predicted position determined agent global body direction subtracted angle order relative agent body 
resulting angle normalized supplied argument method order compute angle value passed turn command 
speed inertia agent impossible turn position single cycle agent turns far possible 
leads definition skill turn chapter 
player skills turning back point skill enables agent turn back point difference skill angle position predicted position agent cycle relative back agent subtracting agent global back direction 
skill goalkeeper case wants move back goal keeping sight rest field 
defined follows turn turning neck point skill enables agent turn neck point 
receives global position field primary action command cmd executed agent current cycle returns turn neck command turn agent neck agent global position neck direction executing cmd command predicted methods world model 
global angle position predicted position determined predicted neck direction subtracted angle order relative agent neck 
resulting angle normalized directly passed argument turn neck command actual angle player turns neck definition equal argument see section 
resulting turn angle causes absolute angle agent neck body exceed maximum value agent turns neck far possible 
note necessary supply selected primary command argument skill turn neck command executed cycle kick dash turn move catch command see section 
turning neck point defined follows cmd turn neck pt cmd cmd searching ball skill enables agent search ball see 
returns turn command causes agent turn body angle equals width current view cone denoted attribute class see 
way agent see entirely different part field turn maximizes chance see ball cycle 
note agent turns direction ball observed avoid turning back forth seeing ball 
sign equal relative angle point ball observed positive 
angle value supplied turn command order turn desired angle computed supplying sign argument method 
leads definition skill point turn sign skill enables agent dash point 
receives global position argument returns dash command causes agent come close point possible 
agent move forwards backwards closest point target position reach chapter 
player skills orthogonal projection line extends direction body forwards backwards 
power supplied dash command computed method takes position relative agent input 
skill defined follows freezing ball dash pt skill enables agent freeze moving ball returns kick command stops ball dead current position 
ball movement soccer server implemented vector addition see equation ball cycle kicked way resulting acceleration vector length opposite direction current ball velocity 
desired speed ball kick equals current ball speed wt power supplied kick command achieve computed method 
furthermore direction kick equal direction wt current ball velocity plus degrees 
note direction relative agent global body angle passed argument kick command 
definition skill kick kicking ball close body skill enables agent kick ball close body 
receives angle argument returns kick command causes ball move point relative angle degrees close distance kickable margin precise agent body 
ball kicked current position qt desired point relative predicted position agent cycle example situation shown 
general skill agent wants kick ball certain position field reached single kick 
efficiency kick highest ball positioned just front agent body see section calling skill effect agent kick ball power executed 
order get ball desired point cycle ball movement vector ut equal ut player size ball size kickable margin qt follows equation acceleration vector resulting kick ut wt wt denotes current ball velocity 
power supplied kick command achieve desired acceleration computed passing length acceleration vector argument method 
direction kick equal direction acceleration vector relative agent global body angle leads definition skill kick note skill executed possible reach desired ball position single kick return value method smaller equal maximum kick power 
required power exceed maximum ball frozen current position skill described section 
general possible shoot motionless ball desired point cycle 
note ball go agent result fact positions updated cycle 
chapter 
player skills cg yl yr dr dl sl sr dl dr meters example situation skill 
acceleration vector takes current ball velocity wt account produce movement vector ut 
result kick moves ball current position position just front predicted position agent cycle 
dotted circle indicates agent kickable range cycle accelerating ball certain velocity skill enables agent accelerate ball way gets certain velocity kick 
receives desired velocity wd argument returns kick command causes ball accelerated velocity 
acceleration vector required achieve equals wt ut wd wt wt denotes current ball velocity 
power supplied kick command get desired result exceed maximum kick power desired velocity realized acceleration vector single kick 
kick direction equal direction relative agent global body angle leads definition skill wd kick desired velocity great current ball velocity high required acceleration realized single kick 
case ball kicked way acceleration vector maximum possible length direction aligns resulting ball movement wd 
means kick ball move direction wd lower speed 
acceleration vector compensate current ball velocity wrong direction component 
gives formula computing acceleration vector skill defined follows wd asin wt wd wd kick catching ball skill enables agent catch ball executed agent goalkeeper 
returns catch command takes angle ball relative body agent chapter 
player skills argument 
correct value argument computed determining global direction current ball position qt agent current position pt making direction relative agent global body angle skill expressed definition communicating message catch qt pt skill enables agent communicate players field 
receives string message argument returns say command causes message broadcast players certain distance speaker 
skill defined follows intermediate player skills communicate say intermediate player skills correspond actions higher abstraction level section 
skills level deal exact format server messages anymore low level player skills generate desired behavior 
section describe intermediate player skills available uva trilearn agents 
skills eventually lead execution basic action command generated skill layer 
simplest form intermediate skill uses current state environment determine correct argument values specific low level skill called 
cases contain simple decision procedure selecting small number related skills 
note intermediate skills form parts complex high level skills discussed section 
turning body object skill enables agent turn body object supplied argument 
object global position cycle predicted current velocity 
predicted position passed argument skill generates turn command causes agent turn body object 
leads definition turning neck object skill enables agent turn neck object 
receives arguments object primary action command cmd executed agent current cycle 
turning neck object amounts predicting object global position cycle passing predicted position cmd command arguments skill 
low level skill generate turn neck command causes agent turn neck object 
note cmd command supplied argument predicting agent global position neck angle executing command 
necessary turn neck command executed cycle kick dash turn move catch command see section 
definition skill cmd cmd chapter 
ot player skills moving position skill enables agent move global position field supplied argument 
agent move forwards backwards direction body crucial decision execution skill perform turn dash 
turning advantage cycle agent orientated correctly point wants reach 
disadvantage performing turn cost cycle reduce agent velocity acceleration vector added cycle apart target position skill receives additional arguments determining cg turn dash performed current situation 
target point front yl agent dash performed relative angle point smaller yr angle 
target point agent dash performed distance point value angle relative back direction agent smaller 
cases turn performed 
shows dr situations agent turn dash depending position target point 
dl dl dr meters sl sr turn turn dash dash turn situations agent turns dashes skill assuming false 
note case goalkeeper desirable moves backwards goal order keep sight rest field 
additional boolean argument supplied skill indicates agent move backwards target point 
equals true agent turn back target point angle relative back direction larger 
cases perform backward dash regardless distance point larger complete definition skill algorithm 
ang pt dist pt true ang ang turn back target point ang return return ang ang dist return return algorithm pseudo code implementation moving desired position 
recall section agent accelerates maximum speed executing sequence dash commands 
breaking sequence slow need cycles reach maximum speed 
vry chapter 
player skills intercepting ball ut skill enables agent intercept ball close 
objective move wt way ball come small distance agent cycles 
prediction methods world model predict ball position cycle cycles 
determined possible move agent distance positions logical combinations turn dash commands 
wt possible intercept ball cycles skill returns illegal command indicate performed 
note distance supplied argument skill 
field players ut equal kickable distance goalkeeper distance 
determined agent intercept ball cycle 
position ball cycle predicted calculation performed decide single dash move agent distance position 
order able kick ball efficiently intercepting important agent moves position relative ball ball front 
time agent sure collide ball trying intercept 
line runs forwards backwards predicted position agent cycle direction body 
line denotes possible movement direction agent 
note agent predicted position cycle current velocity taken account 
addition circle centered predicted ball position pt pt pt ot ot ot radius equal sum radius agent radius ball small buffer kickable margin 
determined agent intercept ball cycle looking number intersection points exactly point common point desired interception point cycle 
number intersection points equals desired point absolute angle ball relative point smallest 
amounts intersection point closest agent ball lies front furthest ball back 
result desired interception point agent ball front cycle 
example situation shown 
skill generate dash command bring agent close possible desired point 
position agent executing command predicted turns predicted position lies distance ball dash performed 
predicted position close ball points common assumed ball intercepted single dash 
cases alternatives explored see ball intercepted cycles 
cg yl yr dr dl sl sr dl dr meters example situation intercepting close ball cycle 
agent moves line intersection points case desired interception point ball lies front agent 
dotted circles indicate agent kickable range 
alternative determine agent intercept ball performing turn followed dash 
global position ball predicted cycles chapter 
player skills skill generate turn command turn agent point 
agent position executing command predicted skill generate dash command bring agent close possible turns predicted position agent dash lies distance ball command turn sequence performed 
second alternative tried determine agent intercept ball performing dash commands 
skill twice predicted ball position cycles argument occasions 
predicted position agent dashes lies distance ball dash performed 
illegal command returned indicate skill performed 
close interception procedure largely similar method introduced 
complete definition skill algorithm 
try intercept ball cycle single dash line goes direction circle centered radius player size ball size kickable margin 
number intersection points greater zero determine intersection point si si minimal 
si return si try intercept ball cycles turn followed dash return try intercept ball cycles dashes return return cmd illegal algorithm pseudo code implementation intercepting close ball 
kicking ball point certain speed skill enables agent kick ball current position ot position way remaining speed equal reaches position 
order ball reach target position desired speed ball velocity wd executing kick equal wd ot ot chapter 
player skills possible ball reach velocity single kick magnitude wd exceeds maximum speed ball due fact current ball speed combination position ball relative agent impossible achieve required acceleration 
magnitude wd larger ball speed max certain optimal situation ball lies directly front agent zero velocity agent able kick ball target position desired speed 
case expected ball movement computed executing kick maximum power direction wd 
magnitude resulting movement vector larger percentage maximum ball speed kick performed despite fact produce wanted effect 
agent shoots ball close body directly front skill 
way able kick ball power cycle 
magnitude wd smaller ball speed max possible reach target point desired speed optimal situation 
acceleration vector required achieve equal wd wt wt denotes current ball velocity 
power supplied kick command achieve acceleration equal maximum power skill perform desired kick 
agent uses skill put ball better kicking position cycle 
shows example situation skill called consecutive cycles 
cycle possible shoot ball point desired speed due fact ball speed wrong direction 
agent shoots ball point just front 
cycle able perform desired kick 
complete definition skill algorithm 
wd ot ot desired ball velocity kick wd ball speed max wt wd wd asin max power see equation wt ball speed max return wd shoot maximum power direction wd return put ball better position wd wt required acceleration vector return wd target reached return put ball better position algorithm pseudo code implementation kicking ball desired point certain speed 
current implementation usually equal threshold parameter value 
cg yl chapter 
player yr skills dr dl sl sr dl dr meters wt ut wt ut example situation skill called consecutive cycles 
cycle agent kicks ball front body causing ball movement ut 
cycle able kick ball desired speed 
note example position agent changes cycle cycle due remaining velocity 
turning ball skill enables agent turn global angle keeping ball front 
example defender intercepted ball defensive area faces goal 
situation defender usually wants pass ball field area currently visible skill turn ball opponent goal 
turning ball requires sequence commands performed 
ball kicked desired position relative agent stopped dead position agent turn ball 
time skill called determined part sequence executed done follows 
absolute difference desired angle global angle qt pt ball relative position agent larger value skill kick ball position close agent desired angle 
checked ball speed previous action 
remaining ball speed exceeds value ball stopped dead current position skill 
cases agent turns body predicted position ball cycle 
note current implementation usually equal threshold parameters respective values 
complete definition skill algorithm 
qt pt return return return algorithm pseudo code implementation turning ball 
note case sequence finished 
possible sequence external event opponent coming close causes agent decide action passing teammate 
ut wt chapter 
player skills wt moving position staying line ut skill enables agent move line position line 
example goalkeeper wants stay line front goal move different positions line depending ball located 
furthermore defenders marking opponent player moving line player ball 
idea agent try move fast possible desired point line keeping number turns minimum avoid wasting cycles 
apart target position skill receives additional arguments determining agent turn dash current situation 
agent move forwards backwards direction body important tries keep orientation body aligned direction order able move quickly target point 
angle denotes desired body angle global agent point line defined going having global direction 
due noise added movement agent orientation body exactly equal result agent position start deviate line 
time skill called agent desired orientation slightly adjusted depending position respect distance agent current position line smaller value remains unchanged 
exceeds adjusted way agent move closer subsequent cycles 
done increasing decreasing desired orientation corr degrees depending side line agent located prediction agent movement forthcoming cycles 
prediction represented value sign equals agent expected move direction move opposite direction 
adjusting way effect subsequent cycles agent move closer line necessary 
final decision turn dash comparing agent current body angle desired orientation 
absolute difference angles larger thr degrees agent uses skill turn desired direction 
skill called move target position 
cg yl yr dr dl sl sr dl dr meters ot ot ot pt pt example situation skill called consecutive cycles 
agent wants move point keeping sight ball 
shows example situation skill called consecutive cycles 
agent wants move line point keeping sight ball 
values sign equal degrees respectively indicating agent body turned left picture reaches movement cycles opposite direction 
cycle distance agent position pt line larger agent body direction differs thr degrees desired orientation 
agent turns positive clockwise direction corrected value 
backward dash cycle moves closer complete definition skill algorithm 
pt chapter 
player skills sign thr corr line global direction goes perpendicular projection agent position pt dist pt dist line pt origin set intersection pt side agent stands side runs pt sign side corr correct desired body angle thr return pt return algorithm pseudo code implementation moving position line 
high level player skills high level player skills correspond actions highest abstraction level skills hierarchy depicted 
skills level intermediate player skills section generate desired behavior 
section describe high level player skills available uva trilearn agents 
skills current state world decide intermediate skill called eventually leads execution basic action command 
cases correct intermediate skill chosen number configurable threshold parameters introduced section 
current implementation values parameters experimental results observations test matches 
important realize high level player skills regarded strategic behaviors 
called result strategic decision making procedure discussed chapter 
intercepting ball skill enables agent intercept ball distance 
intercepting ball important available player skills frequently type player 
player wants kick ball intercept get close 
main objective determine optimal interception point current position velocity ball move point fast possible order reach ball opponent 
obviously requires sequence commands performed 
ball interception soccer server straightforward task due noise added sensory observations movement ball 
noise difficult accurately predict ball trajectory optimal interception point 
interception point determined important estimate agent move forwards backwards direction body 
intercept sequence turns chosen interception point predicted agent forced turn newly chapter 
player skills calculated point slow considerably 
possible methods described equipping simulated soccer agents ability intercept moving ball 
analytical method ball velocity estimated past positions movement ball predicted velocity 

empirical method neural network create general ball interception behavior examples successful 
statistics show empirical method neural network gives slightly better results analytical solution 
noted experiments performed test methods performed old version soccer server version player receive distance change direction change information dynamic objects visual information sent players larger intervals making accurate prediction ball trajectory difficult 
mentioned results generalized versions soccer server 
turns results analytical method improve significantly visual messages received frequently change information mobile objects predict velocity ball 
ball interception skill uva trilearn agents analytical method 
ball interception skill called determined possible agent intercept ball cycles intermediate player skill 
agent field player skill takes agent kickable range argument goalkeeper range supplied see section 
turns ball intercepted cycles agent uses iterative scheme compute optimal interception point 
loop executed prediction methods described section predict position ball number cycles say predict number cycles say agent need reach position 
repeated increasing values case assumed agent able reach point ball 
point value larger value current implementation illegal command returned indicate agent try intercept ball 
point chosen interception point skill move point 
recall section decision turn dash current situation depends angle target point relative agent body direction distance target point lies agent 
case skill uses threshold parameters decision pseudo code implementation ball interception skill algorithm 
current implementation parameters respective values degrees meters 
chapter 
player skills intercept agent goalkeeper dist area dist kickable distance player size ball size kickable margin command dist command cmd illegal return command repeat object ball see section object agent see section return false return cmd illegal algorithm pseudo code implementation intercepting ball 
dribbling skill enables agent dribble ball move ball keeping certain distance 
amounts repeatedly kicking ball certain speed desired direction intercepting 
arguments type supplied skill respectively denote global direction agent wants dribble kind dribble performed 
distinguish kinds dribbling dribble fast fast dribble action agent kicks ball relatively far ahead 
dribble slow slower dribble action agent keeps ball closer fast dribble 
dribble ball safe dribble action agent keeps ball close body 
important realize skill called ball located agent kickable range 
means responsible kicking part dribbling behavior causes ball kicked certain distance ahead desired direction 
absolute angle agent body direction larger currently value degrees agent uses skill turn ball global angle 
uses skill kick ball desired direction point lies certain distance ahead depending type dribble 
kick ball move agent kickable range result agent try intercept intercept skill 
dribbling skill called agent succeeded intercepting ball 
sequence kicking intercepting repeat agent decides perform skill 
note dribble power kick depends distance ball travel chapter 
player skills speed reaches target point 
current implementation speed equals type dribble 
experiments shown lower speed values cause agent intercept ball reaches target point slows dribble significantly 
pseudo code implementation dribbling skill algorithm 
dribble type type dribble ball dist current implementation type dribble slow dist current implementation type dribble fast dist current implementation return return qt dist qt current ball position algorithm pseudo code implementation dribbling 
passing ball directly teammate skill enables agent pass ball directly player 
receives arguments type respectively denote object usually teammate agent wants pass ball kind pass normal fast 
skill uses skill pass ball current location qt object certain desired speed depending type pass 
pseudo code implementation skill algorithm 
type type pass normal return qt currently equals type pass fast return qt currently equals algorithm pseudo code implementation passing ball directly player 
giving leading pass skill enables agent give leading pass player 
leading pass pass open space leads receiver passing ball directly player kicked just ahead 
way receiver able intercept ball moving forward direction speed attack 
skill receives arguments object usually teammate dist respectively denote intended receiver leading pass leading distance ahead receiver 
uses skill pass ball point lies dist front current qry vry chapter 
player skills position ot front means positive direction global angle degrees 
current implementation dist usually equal parameter value meters 
note desired speed leading pass equal currently ut leading aspect pass cause ut receiver ball speed higher 
pseudo code wt implementation skill wt algorithm 
dist return wt ot dist wt ut algorithm pseudo code implementation giving leading pass 
pt pt passing ball depth pass pt pt skill ot enables agent give advanced type pass called pass 
pass ot ball passed directly player just ahead kicked open space ot opponent defenders opponent goalkeeper way teammate usually attacker able reach ball opponent 
pass executed successfully causes opponent defense enable attacker get ball close enemy goal 
skill takes object usually teammate argument denotes intended receiver pass 
position field ball kicked determined drawing line object current position ot point supplied argument computing safest trajectory ball point line 
function calculate widest angle opponents current ball position qt point speed ball reaches point determined distance current ball position qt number cycles need reach turns required speed falls outside range set closest boundary range 
skill kick ball desired point required speed 
example situations shown 
player ball safely pass ball directly teammate located bottom picture decides give pass 
result ball moves opponent defenders side field opponent defense team keeps possession ball 
shows situation pass leads scoring opportunity 
pseudo code implementation passing algorithm 
ot ot ot cg cg yl yr dr dl sl sr dl dr meters opponent defenders 
qry vry ut pt pt yl yr dr dl sl sr dl dr meters creating scoring opportunity 
example situations skill 
red players opponents 
chapter 
player skills line segment runs ot current position ot qt qt qt direction widest angle opponents line goes qt direction set intersection see section kick speed min ball speed max qt ball decay speed kick speed ball decay speed speed speed speed return speed algorithm pseudo code implementation passing 
opponent skill enables agent opponent 
example attacker wants get past enemy defender 
done passing ball open space defender way attacker beat defender ball 
note attacker advantage situation knows point passing ball turned right direction defender 
result attacker defender trying intercept ball 
player move faster ball main objective kick ball far possible past opponent able reach opponent 
skill receives arguments respectively denote point agent wants move ball object usually opponent agent wants doing 
determined possible opponent current situation 
line segment runs agent current position pt point best point kick ball furthest point pt line agent reach opponent 
simple geometric calculation find point equal distance agent opponent 
perpendicular projection opponent position ot respectively denote distance pt distance ot distance see 
determine need compute unknown value values derived world model 
distance pt equal distance ot pythagorean theorem guarantees hold value compute coordinates shooting point follows pt pt situations shooting ball point eventually result opponent way values determine possible current situation best shooting point 
situations distinguished 
parameter value meters current implementation 
condition holds opponent located relatively large chapter 
player skills cg yl yr dr dl sl sr dl dr meters ot pt determining optimal shooting point opponent red player way values known compute 
distance agent attempt successful 
checked agent body turned sufficiently point case skill turn ball right direction 
skill kick ball point line agent able intercept 
note general agent able reach point opponent despite fact players need travel distance point 
agent turned body opponent probably 
actual point ball kicked chosen slightly closer agent point defined order absolutely sure intercept ball opponent 
safety margin represented parameter value meters current implementation 
shooting point pt pt skill desired speed ball reaches equals 
note value parameter chosen low cause agent intercept ball reaches target point see section 

condition holds opponent located close agent difficult 
agent turned right direction implies distance opponent line denoting agent desired movement trajectory large agent opponent ball kicked hard direction ahead 
agent start ball immediately opponent turn right direction 
result agent dashed past opponent time turned correctly puts position intercept ball opponent 
checked agent body sufficiently turned skill turn ball right direction 
skill kick ball past opponent 
case point ball kicked lies meters ahead agent current position pt direction equals distance smaller value 
cases skill returns illegal command indicate possible opponent way point shows steps process opponent way point situation distance agent opponent quite large 
agent chapter 
cg player skills yl yr dr dl sl sr dl dr meters ii iii steps process opponent red player moving ball position denotes point desired trajectory equal distance agent opponent point ball kicked 
kick ball directly point opponent able intercept 
agent kicks ball point reach opponent 
kick agent opponent start moving ball agent reaches 
shown second situation ii 
opponent come close agent orientated agent decides kick ball hard point immediately starts move 
opponent turn right direction lose time enables agent dash past 
result depicted third situation iii shows opponent successfully 
pseudo code implementation skill algorithm 
line segment runs agent current position pt perpendicular projection ot current position pt ot pt pt pt min pt pt return cmd illegal pt return pt return algorithm pseudo code implementation opponent 
clearing ball skill enables agent clear ball certain area field 
useful example defender dribble pass ball teammate dangerous situation 
skill kick ball field away defensive zone 
important realize skill called agent alternative options current situation 
clearing ball wt ut pt chapter 
player skills pt pt ot amounts kicking ot maximum power widest angle opponents certain area 
shooting direction determined ot function returns direction bisector widest angle 
area field angle selected depends type clear supplied argument skill 
distinguish types clearing clear ball defensive ball away defensive zone triangular area defined current ball position qt center line field 
clear ball offensive clearing ball offensive zone triangular area current ball position qt line segment coincides front line opponent penalty area extends left right side lines 
clear ball goal clearing ball triangular area front opponent goal defined current ball position qt line segment runs center opponent goal center front line penalty area 
example clearing area type clear shown 
area starting leftmost player corresponds clear ball defensive type areas drawn middle rightmost players correspond clear ball offensive clear ball goal types respectively 
pseudo code implementation cg skill algorithm 
yl yr dr dl sl sr dl dr meters example clearing area type clear 
left right areas respectively correspond clear ball defensive clear ball offensive clear ball goal types 
type type clear ball defensive pitch width pitch width type clear ball offensive penalty pitch width penalty pitch width type clear ball goal penalty goal line type clear ball goal goal line penalty min qt max qt shoot min max max qt qt return qt shoot ball speed max algorithm pseudo code implementation clearing ball 
vry chapter 
player skills marking opponent ut skill enables agent mark opponent guard purpose minimize wt usefulness opponent team 
example block path ball opponent opponent goal 
way agent prevent opponent receiving pass moving closer goal obstructing possible shot 
skill amounts calculating desired marking position arguments moving position 
wt receives arguments object usually opponent agent wants mark distance representing desired distance marking position type indicator denotes ut type marking required 
distinguish types marking pt mark ball marking pt opponent standing distance away line ball 
case marking position computed follows pt ot ot ot respectively denote predicted positions opponent ball cycle 
type marking difficult opponent receive pass 
mark goal marking opponent standing distance away line center point cg goal attacks 
marking position cg type marking difficult opponent score goal 
mark bisector marking opponent standing distance away bisector ball opponent goal angle 
marking position computed follows cg function computes average angles supplied see section 
type marking enables agent intercept direct leading pass opponent 
shows marking positions types marking example situation 
cg point corresponds marking position mark ball type points yl correspond marking positions mark goal mark bisector types respectively 
yr dr dl sl sr dl dr meters ways mark opponent 
marking positions respectively correspond mark ball mark goal mark bisector types marking 
determining marking position agent uses skill move position 
note decision turn dash current situation depends angle chapter 
player skills relative agent body direction distance point lies agent 
case skill uses threshold parameters decision 
values parameters condition hold allowing dash fairly flexible 
done marking position different consecutive cycles due fact opponent ball move cycle 
result agent able progress point lies close constantly turning newly calculated marking position cycle 
pseudo code implementation marking opponent algorithm 
type type mark ball type mark goal cg type mark bisector cg return false algorithm pseudo code implementation marking opponent 
defending goal line skill enables agent usually goalkeeper defend goal line 
agent moves position line runs parallel goal line small distance supplied argument goal 
guard point agent moves depends predicted position ball cycle chosen anticipation shot goal 
means guard point selected way difficult opponent team pass goalkeeper 
find point need look angle ball respect left right need determine point covers angle optimal way 
line segments run predicted ball position left right respectively intersection points furthermore distances 
optimal guard point defined point ratio distances equal ratio 
way distance goalkeeper travel intercept ball proportional distance ball travel crosses note current implementation goalkeeper stays front goal mouth avoid leaving open goal ball passed opponent center penalty area 
computed guard point adjusted lies far side computing guard point goalkeeper needs move point keeping sight ball 
distance current goalkeeper position pt line larger currently value meters skill move directly happen example goalkeeper moved forward line intercept ball move back line 
note fourth argument supplied skill equals true indicate goalkeeper wants turn back order keep ball sight moving 
distance pt skill move point recall section skill receives argument sign note protects goalkeeper moving far side ball lies line pt pt pt ot ot ot chapter 
player skills representing prediction agent movement 
value adjust agent body direction necessary 
case expected goalkeeper move direction ball sign determined looking ball velocity wt cycle shows example situation goalkeeper green player positioned optimal guard point line note goalkeeper body aligned enable move quickly line keeping number turns minimum 
movement noise introduced soccer server cause deviate moves 
body direction goalkeeper slightly adjusted skill soon deviation large 
enable move back subsequent cycles 
note goalkeeper body orientated center field harder intercept shot goal need turn right direction 
aligning body able move immediately intersection point trajectory ball turning 
pseudo code implementation skill algorithm cg yl yr dr dl sl sr dl dr meters optimal guard point line example situation 
holds line parallel goal line distance goal line segment left line segment right intersection intersection desired guard point zy goal width zy sign zy goal width sign pt zx return true sign qt zy desired orientation point keeping ball sight sign sign wt wt ball velocity cycle return sign algorithm pseudo code implementation defending goal line 
respective values current implementation 
chapter agent scoring policy main objectives soccer game score goals 
important robotic soccer agent clear policy attempt score situation point goal aim 
chapter describe implementation scoring policy uva trilearn agents robocup world championship 
scoring policy enables agent determine best target point goal associated probability scoring ball shot point 
partly approximate method developed learning relevant statistics ball motion regarded geometrically constrained continuous time markov process 
method led publication titled optimal scoring policy simulated soccer agents accepted th international conference intelligent autonomous systems ias serves basis chapter see :10.1.1.106.3003
consider chapter main contributions thesis 
organized follows 
section provide general scoring problem show decomposed independent subproblems 
solution subproblems sections 
section describe solutions combined determine best scoring point 
remarks implementation scoring policy included section presents results concerning performance 
section contains briefly discusses possible extensions 
optimal scoring problem important decision robotic soccer agent action choose control ball 
possible options example passing ball teammate dribbling ball shooting ball goal clearing ball field 
especially decision shoot goal crucial scoring goals main objectives soccer game 
important robotic soccer agent clear policy attempt score situation point goal aim 
ideally decision shoot goal probability scoring current state environment 
achieve need solve problem referred optimal scoring problem stated follows find point goal probability scoring highest ball shot point situation 
expected probability scoring depend position angle ball respect goal position chapter 
agent scoring policy goalkeeper relative ball 
solving optimal scoring problem straightforward 
reason total number possible situations extremely large different variables decisive different situations 
furthermore problem depends uncertain factors 
example noise ball movement exactly predicted different different distances ball travels 
find optimal scoring point iterating possible goal points take different functions account distance shooting position scoring point different point goal 
top behavior opponent goalkeeper easily predicted important factor solving problem 
result simple analytical solution problem exists look different methods 
key observation solving optimal scoring problem decomposed independent subproblems 
determining probability ball enter goal shot specific point goal position 

determining probability passing goalkeeper situation 
solve optimal scoring problem find solutions subproblems combine 
subproblems independent probability scoring shooting certain point goal equal product probabilities 
remainder chapter describe statistical framework computing probabilities 
need mention number simplifying assumptions solution scoring problem 
firstly assume ball shot goal maximum power giving initial velocity meters simulation cycle current version soccer server 
ball shot power velocity obviously lower result movement noise cycle 
case ball need cycles reach target point movement noise added 
interaction factors slightly complicates problem shooting goal maximum power common case practice decided assumption 
secondly chosen neglect possibility players goalkeeper blocking path goal 
reason easier goalkeeper intercept ball regular field player due fact goalkeeper allowed catch ball 
furthermore players different teams intercept ball equally 
finding correct interpretation angle goalkeeper field player comes determining safe trajectory ball straightforward 
clear goalkeeper superior capabilities passing main objective chosen neglect regular field players solution scoring problem 
assume experiments ball shot distance smaller meters target point goal 
amounts approximately third total field length pitch length meters 
distance ball travel shot maximum power equals meters neglecting movement noise see section case ball comes halt reached goal 
note assumption yield approximation impossible score larger distances anyway due fact goalkeeper usually time cases intercept ball reaches goal line 
fairly straightforward relax assumptions extend method appropriately chosen avoid having concentrate details situations rarely occur 
current server parameter values pitch length pitch width current precision visual observations decimal coordinates rounded nearest integer angles perceived state space consists states positions orientations body neck considered players ball positions player body orientations possible neck angles 
state space larger velocities physical parameters considered 
chapter 
agent scoring policy probability ball enters goal noise movement ball enter goal shot point inside goal position 
due limited goal width noise introduced soccer server ball may goal attempt score 
section show determine probability ball inside goal shot specific goal point 
need compute deviation ball aiming point 
deviation caused noise added ball velocity vector simulation cycle 
recall section ball velocity cycle equal ball decay random numbers uniformly distributed interval rmax rmax rmax ball rand 
ball decay ball rand server parameters respective values 
note ball motion regarded diffusion process position ball time step diffuses time 
treat markov process development completely determined state independent way state developed ball velocity cycle depends current ball velocity past 
statistical properties process different time step process called non stationary interesting aspect soccer server underlying noise statistics ball motion known finding analytical solution corresponding diffusion process difficult reasons motion noise added server cycle construction non white due fact noise depends speed ball previous cycle shown 
process geometrically constrained ball inside goal 
analytical computation process statistics nontrivial 
treat ball motion continuous time markov process computing exact statistics time step require solution corresponding fokker planck equation diffusion drift 
non white noise complicates 
furthermore lead solution generic dependent current server parameter values 
avoid problems propose learn ball motion statistics experiments calculate required probabilities statistics 
gives approximate solution problem computing statistical properties geometrically constrained continuous time markov process believe relatively simple alternative allows easy adaptation server noise parameters change useful applications brownian motion problems 
solution amounts estimating cumulative noise directly experiments 
computed deviation ball perpendicular shooting direction function distance ball traveled 
function learned repeating experiment ball placed distances meters front center goal zero coordinate player directly 
player shot ball times distance maximum power perpendicularly goal line center goal 
example setup depicted 
instance recorded coordinate point goal line ball entered goal 
values compute sample standard deviation ball zero mean points xi equal expected saw stochastic process called stationary statistical properties invariant shift origin 
means processes statistics term brownian motion describe movement particle liquid subjected collisions forces 
qry vry yl yr chapter 
agent scoring policy dr dl sl sr dl cg dr meters ut experimental wt setup learning cumulative noise ball motion function traveled distance 
ball lies front center goal distance meters goal line 
agent stands directly ball shoots maximum power point cg 
motion noise cause ball deviate desired trajectory dotted line 
wt ut cumulative noise different distance empirically standard deviation ball perpendicular pt shooting direction monotone increasing function distance 
approximation function represented formula pt pt ot ot ln ln denotes natural logarithm 
note formula distance values 
assumptions distances outside interval data collected situations 
shows plot function recorded deviation values 
qualitative explanation result follows 
cycle ball remaining speed equal speed previous cycle 
speed ball decreases cycles needed travel distance 
noise added cycle means noise added ball motion 
added noise cycle decreases decreasing speed results indicate cumulative noise traveling particular distance increases monotonically 
surprisingly simple formula function implies standard deviation process increases linearly time 
shown solving differential equation forward motion ball ignoring noise expressing time function distance 
result contrasts brownian motion problems ot 
expect difference mainly attributed non white motion noise 
cg yl yr dr dl sl sr dl dr meters standard deviation measured standard deviation modelled ln travelled distance standard deviation ball function traveled distance 
chapter 
agent scoring policy step compute distribution ball reaches goal line 
fundamental result probability theory called central limit theorem 
theorem states certain conditions distribution sum random variables xi gaussian goes infinity 
versions central limit theorem exist proved different conditions 
common form due lindeberg theorem shown hold sequences mutually independent random variables common distribution 
clear version apply current situation motion noise cycle depends speed ball cycle 
required condition independence satisfied case 
noted dependency represented server parameter ball rand currently value 
low value cause slight dependence expect independence condition approximately hold 
furthermore general versions central limit theorem exist see require common distribution weaken assumption independence allowing xi dependent long dependent 
case current problem result find model distribution ball goal line 
note deviation ball caused noise added cycle conditions expect central limit theorem distribution noise cumulative noise approximately gaussian 
gaussian zero mean standard deviation 
gives model exp model compute probability ball inside goal shot arbitrary position field perpendicularly goal line 
probability equals area lies respective gaussian density function shown 
coordinates left right respectively denoted yl yr yl yr computed follows yr yr yl goal dy dy dy yr yl yl denotes cumulative distribution function gaussian 
note implemented erf function defined mathematical libraries compute probability ball enters goal shot angle goal line see 
case somewhat involved previous due fact noise cause ball travel different distances reaches goal 
different traveled distances imply different deviations ball distribution goal line longer gaussian exact calculation total probability difficult 
detailed analysis involve bounding corresponding diffusion process appropriately computing statistics bounded process formidable task 
key observation want compute probability masses equal masses particular shape distribution produces masses irrelevant 
observation directly motivates solution problem computing distribution ball goal line analytically solving constrained diffusion process equations integrating find probability mass compute probability mass identity goal goal goal denotes probability ball misses goal going left right 
probability mass easier compute approximation tails including math library 
ot chapter 
agent scoring policy ot cg dr dl sl sr dl dr meters yl yr shooting perpendicularly goal line 
cg yl yr meters dl sl sr dr dl shooting angle goal line 
dr situations shooting goal light gray associated distributions 
gaussian distributions corresponding 
shown ball reaches left effectively traveled distance dl corresponding distribution perpendicular shooting line gaussian deviation dl 
probability ball misses goal going left approximately equal shaded area left left sl dl dy integration runs sl denotes negative shortest distance left shooting line 
situation ball misses goal going right post analogous 
difference ball travel larger distance case 
result deviation larger corresponding gaussian flatter seen 
respective probability approximately equal shaded area right right sr dr dy integration runs sr shortest distance right shooting line gaussian standard deviation dr obtained traveled distance dr probability ball ends inside goal written goal left right directly computed equations 
small probability ball ends right left traveling illegal trajectory outside field 
ball went left case neglect probability 
chapter 
agent scoring policy probability ut passing goalkeeper intercepting moving ball easier goalkeeper regular field player 
reason goalkeeper allowed catch ball field player kick 
distance goalkeeper larger kickable distance field player means field player come closer ball order intercept goalkeeper 
attempt score goal superior capabilities passing opponent goalkeeper main objectives 
section approach estimating probability passing goalkeeper situation 
exact second subproblem optimal scoring task stated follows shooting point goal determine probability goalkeeper intercepts ball reaches goal line 
propose empirical method learning probability examples successful unsuccessful scoring attempts 
clearly problem depends heavily behavior opponent goalkeeper provably optimal goalkeeper behavior implemented currently case experiments existing goalkeeper implementations 
experiments goalkeeper robocup winner fc portugal appeared best available 
cast problem proper mathematical framework note ball interception goalkeeper scoring attempt regarded class classification problem shooting point goal positions goalkeeper ball input feature vector predict class intercepting probable 
interested posterior probability associated prediction class 
formalizing problem way allows direct application various methods field statistical pattern recognition 
collect training set performed experiment player repeatedly shot ball fixed position straight goal goalkeeper placed randomly different positions relative ball 
setup experiment shown precisely 
data set formed recording situations boolean indicating goalkeeper intercepted ball 
analysis resulting data revealed relevant features classification wt ut pt pt pt ot ot ot absolute angle goalkeeper shooting point seen 
distance ball goalkeeper 
wt yl yr dr dl sl sr dl dr meters experimental setup learning probability passing goalkeeper situation 
ball lies front center goal distance meters goal line 
yellow player stands directly ball shoots maximum power point cg 
goalkeeper purple player placed random position inside shaded area angle degrees distance meters ball 
principled methods automatic feature extraction described 
cg ut qry pt pt vry pt ot ot chapter ot 
agent scoring policy ot values form dimensional feature vector classification 
recorded data set depicted shows linear discriminant function classes 
determined discriminant function linear regression boolean class indicator 
procedure known give optimal fisher linear discriminant property maximizes ratio group variance group variance classes 
details definitions linear discrimination method 
resulting discriminant function characterized equation ut ut wt wt wt ut pt pt pt cg ot ot yl ot yr dr dl msl sr dl dr meters cg yl yr dr dl sl sr dl dr meters angle sees goalie shooting point distance goalie ball data set discriminant function 
passed normalized passed normalized passed passed ut qry pt pt vry pt ot ot wt pt cg ot ot yl ot yr dr dl msl sr dl dr meters gaussian approximations near discriminant 
ut pt pt cg yl yr dr dl sl sr dl dr meters passed passed class histograms 
passing goalie bayes sigmoid feature estimated posterior probability non interception 
data set goalkeeper interception experiment derived statistics 
chapter 
agent scoring policy distance values 
interpreted follows new angle distance pair sample mean subtracted inner product projection vector computed 
resulting vector stands perpendicular discriminant boundary shifted appropriately offset 
pairs equation equals zero form boundary classes 
plotted dotted line 
projecting ai di pairs perpendicularly discriminant line equation gives set dimensional points ui approximation describe classes 
histogram class distributions points plotted 
upper histogram corresponds situations goalkeeper succeed intercepting ball lower situations intercept 
trying model distributions parametrically note relevant range classification histograms overlap interval 
easy see posterior probability non interception zero approximately increase smoothly zero interval 
posterior probability represented sigmoid 
principled way find sigmoid optimize unknown parameter respect likelihood procedure known logistic discrimination 
amounts fitting posterior sigmoid maximum likelihood directly available data 
low dimensionality problem allows propose simpler solution 
region class distributions interception non interception overlap fit univariate gaussian function class shown 
class gives gaussian model class conditional density function 
model easily compute posterior probability class bayes rule sigmoid function 
simple class classification problem refers class case prior probability class computed proportion points ui data set belong plotted posterior probability non interception class bayes rule sigmoid approximation allows easy implementation 
pass goalkeeper exp determining best scoring point having computed probability ball inside goal equation probability goalkeeper intercept equation assumption independence gives total probability scoring situation product values 
order determine best scoring point goal discretize goal interval goal width goal width compute total probability ball discretized bin 
total probability bell shaped function represents probability ball enter goal valley position goalkeeper 
best scoring point determined global maximum curve 
note curve local maxima correspond left right starting point valley 
maxima located simple hill climbing search algorithm starting position goalkeeper lowest point valley move parameter goal width value current version soccer server 
chapter 
agent scoring policy left right curve long function value increases 
peaks way highest denotes global maximum selected best scoring point 
implementation results scoring policy described chapter implemented small number modifications improve quality result various situations 
modifications needed aspects current solution optimal scoring problem specific 
especially solution second subproblem probability passing goalkeeper number assumptions general 
example experiment described section see learning single probability passing goalkeeper situation performed fixed distance meters center goal 
result value returned equation represents probability goalkeeper intercept ball traveled distance meters 
definition situations stands close goal give inaccurate results ball crossed goal line intercepted goalkeeper 
distance scoring point meters returned probability passing goalkeeper low 
furthermore probability passing goalkeeper solely goalkeeper robocup winner fc portugal 
result unnecessary risks taken 
compensate factors adjustments ball located distance meters scoring point determine theoretically possible goalkeeper intercept 
done computing intermediate positions ball cycle reaches goal line checking positions optimal case goalkeeper reach time 
distance goalkeeper calculated ball position compared maximum distance goalkeeper cover number cycles 
turns goalkeeper able intercept ball reaches goal line returned probability passing goalkeeper adjusted 
cases probability remains unaltered 
compensate lower quality fact returned probability passing goalkeeper low distance scoring point meters consider scoring points respective single probability ball enter goal larger specified threshold 
threshold represented parameter value current implementation 
ensures probability ball inside goal high independent particular goalkeeper behavior 
incorporated scoring policy agent main decision loop follows 
agent control ball checks probability scoring larger certain threshold 
threshold represented parameter value current implementation 
total scoring probability exceeds threshold agent tries score shooting ball maximum power best scoring point 
considers different options passing teammate dribbling ball performs predicted success rate high 
possible alternatives fail agent stands close distance goal decides shoot best scoring point 
shows successive situations taken real match played uva trilearn yellow team 
player ball stands left goal covered pt ot ot ot ot chapter 
agent scoring policy ut wt wt ut pt pt pt ot ot cg pt ot ot ut wt wt pt ot yl yr yl yr dr dl sl sr dl dr dr dl sl sr dl dr meters meters goalkeeper covers goal 
pass 
goalkeeper 
chance score 
ot cg yl yr dr dl sl sr dl dr meters probability prob 
pass goalkeeper prob 
ball enters goal prob 
scoring coordinate scoring point low scoring probability goal points 
ut pt pt ot ot cg yl yr dr dl sl cg probability sr dl dr meters coordinate scoring point prob 
pass goalkeeper prob 
ball enters goal prob 
scoring high scoring probability right half goal 
successive match situations associated scoring probability curves 
chapter 
agent scoring policy opponent goalkeeper 
player decides give pass right wing attacker better position 
shows situation cycles 
right wing attacker intercepted ball chance score 
scoring probability curves correspond situations shown figures 
figures horizontal axis represents coordinate goal line ball shot 
note left right respectively located coordinates 
shows situation total scoring probability solid line low points goal line player ball rightly decides shoot goal 
cycles situation completely different 
right wing attacker high probability scoring right half goal due fact goalkeeper stands far left 
right slope total scoring probability bounded probability ball enters goal left slope bounded probability goalkeeper intercepts ball 
total scoring probability equals coordinates decides shoot scores result 
scoring policy described chapter uva trilearn robocup robotic soccer world championship 
table shows statistics concerning percentage successful scoring attempts top teams tournament 
percentages matches played teams second group stage double elimination stage competition 
results show stages success rate uva trilearn higher teams 
noted difficult compare percentages due fact different teams different attacking strategies 
furthermore statistics different matches different opponents decision shoot goal different factors team 
example try score probability success moderate 
impossible deduce intentions players observing behavior factors incorporated results 
results show uva trilearn agents manage score high percentage attempted goal shots 
team attempts success percentage fc portugal uva trilearn table percentage successful scoring attempts top teams robocup 
statistics generated logplayer analysis tool robocup logfiles 
chapter described methodology allows simulated soccer agent determine probability scoring shoots ball specific point goal situation 
single probability ball enters goal subproblem depends values various server parameters control movement noise ball size goal approach section general sense enables learn probability server parameter values change version server 
single probability passing goalkeeper second subproblem depends opponent goalkeeper different note noise ball movement causes non zero scoring probability ball shot point just outside goal 
implementation points selected consider points goal line single probability entering goal 
chapter 
agent scoring policy exhibit different behaviors 
current implementation probability entirely goalkeeper robocup winner fc portugal 
goalkeeper approach section useful 
ideally probability passing goalkeeper adaptive model incorporate information current opponent goalkeeper particular team 
desired case model adapt game little prior information current goalkeeper 
difficult problem learning scoring attempts 
important extract relevant features parametrize intercepting behavior opponent goalkeeper compact manner permits line learning statistics collected coach 
drawback solution second subproblem set learning experiment includes fixed distance scoring point 
consequently equation reflects probability ball travel distance meters intercepted opponent goalkeeper 
current setup result generalized different distances 
distance scoring point smaller example goalkeeper able intercept ball traveled meters crosses goal line 
returned probability passing goalkeeper low cases 
conversely returned probability high distance scoring point larger possible goalkeeper intercepts ball goal line traveled meters 
better solution clearly adapt learning experiment randomly placing ball different distances goal incorporate extra feature model represents distance scoring point 
slightly complicate problem separation classes longer linear 
chosen base classification features angle distance goalkeeper fix distance scoring point meters experiment 
note resulting model yields approximation distance equal average shooting distance 
importantly distance provides clear cut point distinct classes situations 
class represents samples goalkeeper able intercept ball quickly traveled large distance 
happens example goalkeeper stands close ball trajectory 
case high speed ball resulting kick usually causes move past goalkeeper 
result goalkeeper run ball catch speed decreased sufficiently 
cases represented second class goalkeeper need time intercept ball time ball travels large distance 
important realize nearly scoring attempt occurs match belongs classes 
empirically traveled distance meters clearly separated class 
expect provides approximation non interception posterior probability 
chapter 
agent scoring policy chapter team strategy chapters discussed important aspects individual agent world model creates perceptions skills perform 
behavior agent defined bridge components 
determines skill selected situation information world model 
robotic soccer game agent part team consists agents cooperate achieve common goal 
perception action local agent part larger collaborative plan shared teammates 
chapter describe team strategy uva trilearn soccer simulation team 
focus team behaviors address various issues concerning coordination cooperation individual agents 
chapter organized follows 
section provide general list important aspects multi agent soccer strategy 
team formations introduced section strategic positioning mechanism agents 
section discuss heterogeneous players followed description uva trilearn communication model section 
section devoted topic action selection 
development action selection procedure agents incremental process procedure explained uva trilearn team means intermediate teams team evolved 
results showing effectiveness implementations described earlier sections section 
section contains number concluding remarks 
strategy team agents defined collective plan followed trying achieve common goal available resources 
soccer team amounts way different players team act accomplish common goal winning game 
soccer agent able execute certain individual skills learn act strategically part team 
means estimating long term effects actions context soccer game selecting skill best serves purpose team 
behavior individual agent constitutes mapping perceptions actions agent builds world model perceptions uses model select appropriate action situation 
decision skill execute depends strategy team seen define way individual agent behaviors coordinated 
result cooperation agents emerge strategy 
consider important aspects multi agent soccer strategy chapter 
team strategy strategy specify formation team position agents inside formation 
furthermore define formations appropriate game situations 
strategy define different roles inside formation assign roles various player positions 
indicate kinds heterogeneous players useful roles 
type player defender strategy specify behavior associated current role 
defensive player example play conservatively attacking player result consider different actions 
strategy incorporate information agent adapt behavior current situation 
action agent chooses example depend part field currently located positions teammates opponents 
strategy specify coordinate individual agent behaviors 
important team members may agree current strategy mapping teammates roles strategy 
results immediately disastrous different agents temporarily adopt different strategies team members achieve goal stay coordinated 
possible ways achieve coordination pre defined information known teammates communication 
strategy indicate player manage stamina game 
example player tired run ball absolutely necessary 
furthermore strategy team agents influenced various external factors 
factors considered strength opponent team 
strategy successful weak opponent necessarily stronger team 
important difference respect accuracy certain actions performed 
opponent players intercepting ball example important ball passed accurately team wants keep possession 
weaker team possible pass risk 
type opponent playing style 
offensive team adopt different strategy defensive team 
state game 
strategy team related current score 
example team leading game possible switch defensive strategy order preserve advantage 
team trailing near decide start risks attempt deficit 
current game situation 
team focus defense opponent team building dangerous attack team behavior aggressive teammate possession ball inside opponent penalty area 
available resources 
soccer server randomly generated heterogeneous players important adapt team strategy current player types 
depending available player types decided types selected role fulfill inside current formation 
furthermore turns certain players performing badly tired quickly substituted 
note choices current state game playing style opponent team 
chapter 
team strategy problem addressed chapter incorporate aspects common strategic framework 
noted initial decision build team scratch forced spend majority time implementation low level intermediate level issues perception actuator control world modeling skills execution 
result highlevel team strategy received attention contains necessary components put working soccer team setup profound lower levels 
main principle distinction active passive situations agent depending currently active role game 
general player active situation located near ball passive situation 
agent passive situation moves strategic position field anticipation possibility active 
position current team formation role agent inside formation position ball field see section 
certain roles inside formation heterogeneous player types characteristics suitable roles see section 
agent active situation chooses action current position position players field 
reasons simplicity agents explicitly take strength opponent team account selecting appropriate action 
active passive agents determine new action cycle commit previous plan 
soccer game provides highly dynamic environment action sequence adapted significantly soon opponents counteract 
chosen base action selection procedure see section current state environment 
furthermore individual agent behaviors coordinated implicitly pre defined information known teammates 
kind information referred room agreement 
explicit coordination agents form inter agent communication soccer server communication channel low bandwidth extremely unreliable see section 
important agents depend communication action performed 
current implementation agents communication increase amount date information world model see section significantly improves ability cooperate teammates 
formations strategic positioning collaboration agents achieved making formations 
formation seen specified arrangement group agents decomposes task space defining set roles 
role inside formation filled single agent roles specified independently agents fill 
formations principal concept soccer team take care distribution players field 
formation players able keep important parts field covered match avoiding clustering team members certain area ball usually case soccer formations 
implementation formations deal positioning agents passive situations situations agent active role game 
regard situation agent located close ball passive 
largely positioning mechanism method called situation strategic positioning introduced fc portugal 
means formations define set roles consist player type wing attacker home position field 
inside current formation agent assigned role fulfill long formation 
passive situations agent determines strategic position field computing weighted sum home position current position ball serves attraction point 
important cg chapter 
team strategy yl yr dr dl sl sr dl dr meters formations current formation number formation type formation home position player type type player attraction attraction minimum coordinate maximum coordinate stay ball uml class diagram classes related formations positioning note attraction ball different player type 
various home positions seen define positioning pattern teammates ball attraction defines way pattern stretched field situation 
implementation positioning mechanism consists separate classes contain information various types formations 
shows uml class diagram classes relations 
reasons space clarity class methods omitted 
contents classes explained detail 
formations 
class contains collection objects hold necessary information different types formations 
furthermore stores current team formation agent number formation determines role 
method determine strategic position field contained class 

class contains information specific formation 
stores type formation agent home position formation player type wing defender central 
furthermore contains collection objects hold necessary information different player types 

class contains information specific player type 
stores type number values determine strategic position player 
attraction ball direction direction 
values interval determine weight ball position determining strategic position 
minimum maximum allowed coordinates strategic position player type 
boolean indicating player type allowed move strategic position front ball 
allowed example central defender called 
agent initialized information different types formations read configuration file stored appropriate class 
agent reads file knows roles player type information teammates 
result player uniquely determine strategic position teammates current ball position 
type pre defined information team members example room agreement 
example determine player perform free kick awarded 
implementation player stands closest ball player strategic position closest ball 
way formation stay intact dead ball situation 
player able determine strategic position teammates determine teammate including take free kick having resort unreliable communication 
method compute strategic position sx sy player shown algorithm 
chapter 
team strategy ut current ball position wt wt get home position px py ball attraction factors attr attr get coordinate range min max boolean sx sy px py attr attr qx qy wt wt true sx qx sx qx ut sx max sx max sx min sx min return sx sy algorithm method determining strategic position sx sy player 
important realize match various situations occur agent move strategic position returned method 
example situation returned position offside 
player offside position stands front ball opponent half field closer opponent line opponent players ball passed 
avoid caught offside player stay called offside line determined opponent player second highest coordinate ball ball position forward player 
turns returned strategic position lies past offside line coordinate position adjusted accordingly position 
example situation strategic position returned algorithm illegal opponent team awarded goal kick case allowed enter opponent penalty area ball left area 
agent strategic position sx sy located inside area value sx adjusted 
current implementation types formations initial formation start half goal scored formation pt pt pt ot ot ot pt pt pt ot ot ot cg cg yl yr dr dl sl sr dl dr meters home positions initial formation ut ut yl yr dr dl sl sr dl dr meters home positions formation home positions field formations uva trilearn 
usually opponent goalkeeper 
goal kick awarded defending team ball goes bounds line touched attacking team 
ball touched defending team attacking team awarded corner kick 
soccer formations typically described numbers defenders forwards respectively 
assumed th player goalkeeper 
chapter 
team strategy number formation home home pl type attr attr beh ball min max table complete specification formation uva trilearn 
player type numbers denote types goalkeeper central defender wing defender central wing wing attacker central attacker 
normal play 
shows home positions agents formations 
complete specification formation including ball attraction factors coordinate ranges player type table 
chosen formation standard formation analysis logfiles previous matches 
analysis showed difficult pass goalkeeper attack originated center field 
reason goalkeeper stood front center goal able save shots goal travel small distance catch ball 
attack originated wings goalkeeper move side goal cover scoring angle 
quick pass wing attacker central attacker usually goalkeeper travel large distance cover goal led scoring opportunity 
attacking wings proved effective decided formation standard formation wing attackers 
initial formation shown chosen specify formation due time constraints 
way able concentrate specific formation sure team played 
led results defensive offensive play shown section 
heterogeneous player selection group agents called homogeneous agents physically behaviorally identical heterogeneous different way 
heterogeneous players new feature soccer server version 
earlier versions players field homogeneous player parameters values player 
version team choose different player types different characteristics 
player types randomly generated server started 
default player type types different server restart 
characteristics non default players certain trade offs respect player parameter values default player type 
current server implementation trade offs defined specific combinations player parameters 
trade offs shown table 
case parameters combination gets improved value compared default worse 
actual values player parameters randomly chosen different intervals defined server 
exact description value ranges mentioned trade offs refer reader table 
chapter 
team strategy improvement weakness trade description player speed max stamina max player faster stamina recovery slower player decay moment player speed decays slower turn dash power rate player size player accelerate faster smaller kickable margin kick rand kickable distance larger noise added kick extra stamina effort min effort max player stamina dash efficient table trade offs player parameters heterogeneous players 
coach team responsible selecting player types substituting players necessary 
server started players initialized default players 
coach allowed change player non default player restriction permitted put non default players type field simultaneously 
player types selected depend current strategy team 
strategy certain player types useful particular role 
seen section uva trilearn team uses formation standard attacking wings 
formation wing attackers able move fast order cut enemy defense opponent defenders passing ball central attacker front goal 
furthermore players capable sustaining long sprint opponent line getting tired 
policy heterogeneous player selection characteristics formation 
order determine player types best suited certain roles developed utility function returns numeric value type player parameters 
value represents measure quality particular player type respect number properties crucial successfully filling roles inside formation 
heterogeneous player type utility function considers characteristics maximum speed mi player type value represented player parameter player speed max denotes maximum distance player cover cycle neglecting noise wind 
player capable reaching higher maximum speed able move faster important characteristic wing player formation 
amount stamina li player type loses cycle moves maximum speed 
value gives indication long player able maintain maximum speed running 
recall section amount stamina lost player dashes depends power supplied dash command forward dash stamina loss equals power equals twice absolute value power player dashes backwards 
furthermore player stamina gets restored stamina max cycle reached stamina max 
dash power di required player type maintain maximum speed calculated formula di player speed max player decay max power effort max dash power rate max power numerator fraction denotes amount speed lost cycle result speed decay assuming player moving maximum speed denominator denotes maximum amount speed added cycle maximum power 
multiply ratio values maximum power supplied dash command get dash power di required compensate note deliberately eliminated occurrences max power formula keep result intuitive 
chapter 
team strategy lost speed 
note numerator fraction larger denominator speed lost cycle gained possible player reach maximum speed dash power required achieve exceeds maximum 
value di calculate amount stamina li effectively lost cycle maximum speed maintained 
amount li equals stamina lost result dash minus amount added cycle li di stamina max heterogeneous player type utility function combines maximum speed mi stamina loss li obtain utility value type 
done creating simple ordering characteristics maximum speeds player type listed ascending order stamina losses listed descending order 
note lists ordered worst best higher index list better 
player type assign numbers denote index sorted lists maximum speeds stamina losses respectively 
gives mi mj li lj function returns boolean expression true 
sum represents measure player capable moving high speed consuming stamina process 
player type highest value assumed suitable playing wings formation 
note possible utility function returns highest value default player type 
case players team remain default players 
default wing attackers replaced non default player type highest utility value 
done central attacker player capable running fast order keep wing players attack chance receiving cross pass 
furthermore wing defenders changed player type second highest utility value value higher default type 
done create better defense possible wing attack opponent team 
note best type players type players field maximum non default type 
players formation kept unchanged default due fact higher stamina loss non default types big disadvantage central defender 
current implementation player types assigned role stay match 
coach substitutions game 
reason decision substitute player requires form multi agent modeling coach currently implemented 
communication model agents soccer server allowed communicate directly indirectly server defined say hear protocols restrict communication 
soccer server communication paradigm models crowded low bandwidth environment agents teams single unreliable communication channel 
spoken messages limited length characters transmitted players certain distance meters speaker 
information player sent message distance sender 
furthermore aural sensor limited capacity 
player hear message teammate simulation cycles extra messages arrive time discarded 
chapter 
team strategy sure spoken message reach intended receiver 
unreliability important agents depend communication perform action 
current implementation agents communication help teammates improve knowledge state world 
depending position ball agent best view field communicates world model nearby teammates 
teammates hear message communicated information parts field currently visible elucidate hidden state increase reliability world model 
result amount date information world model agents increase significantly extra information taken account action selection process 
extra information necessary agents able maintain reasonable approximation world state determine appropriate action 
important agents robust lost messages 
uva trilearn communication model defines player speak situation frequently broadcasting take place 
game player team determines currently best player communicate world model 
decision depends position ball field role player inside current team formation 
main objective communication model increase amount date information world model agents important communicating player view field sees lot teammates opponents 
especially part field ball action located clearly visible player 
empirically average wings best view field usually located center line close side see action facing ball 
current implementation wing ones communicate world model 
note view field central position players brings additional advantages 
firstly teammates located distance meters speaker means team take full advantage communication 
secondly objects speaker view cone average quite close increases precision visual information see section reliability world model communicates 
algorithm shows method agents determine communicate world model 
ball located right side field positive coordinate left selected view large playing area faces ball 
furthermore player currently active part game allows trade frequency visual information width view cone 
shows visible area left facing ball right half field bottom half picture view cone degrees 
wider view cone enables player see larger part field haven spoken cycles current ball position qy role left communicate teammates qy role right communicate teammates algorithm method determining player communicate world model 
chapter 
team strategy cg yl yr dr dl sl sr dl dr meters visible area shaded left faces ball right side field 
player uses wide view cone enables see playing area 
result communicate information teammates 
receive visual information frequently role game currently passive acceptable 
way right communicates world model ball located left side field negative coordinate 
note method algorithm guarantees agent communicate world model cycles 
result sure message received players messages overload communication channel 
possibility wing able communicate reason taken account occurs regular matches 
action selection order satisfy goals autonomous agent select moment time appropriate action possible actions execute 
known action selection problem asp 
context asp action selection mechanism asm regarded computational mechanism produce selected action output various external internal stimuli inputs 
asp refers action agent select situation asm specifies actions selected 
soccer game provides highly dynamic environment difficult create fixed attacking plan form action sequence works situation 
soon opponents move counteract attack example plan adapted changed environment 
sequence actions uva trilearn agents determine just single action cycle base action choice current world state 
section solution asp describe asm agents 
impossible create complete action selection strategy step development action selection procedure agents incremental process 
iteration consisted simple decision procedure test low level performance basic agent skills 
testing performance resulting team gradually extended version introducing advanced skills creating sophisticated strategy 
main advantages approach working system times knew occurring problems originate refinement step 
furthermore effects added functionalities tested playing previous versions team contain 
describe action selection procedure uva trilearn team help intermediate teams team evolved 
apart team team described section qualify participate international competition 
chapter 
team strategy version de meer initial stages project spent majority time solving low level intermediate level problems agent environment synchronization world modeling 
order create real team needed kind high level decision procedure 
complete version team play game soccer ironically called de meer 
idea team motivated simple team released creators robocup winner fc portugal 
basic team refer simple portugal consisted simple high level decision procedure top low level implementation world champion cmunited 
claimed team able beat teams participated robocup provide starting point new teams practice 
de meer consisted basic action selection mechanism equal high level procedure simple portugal put top low level implementation 
intention test implementation de meer playing simple portugal 
high level decision procedure teams clear lower levels difference 
playing simple portugal test quality low level implementation effectively meant comparing lower levels cmunited 
algorithm shows action selection procedure agents de meer soccer simulation team 
confidence associated current ball position drops certain threshold de meer agent searches ball 
determines currently active part game checking ball located kickable range fastest teammate ball 
case kicks ball maximum power random corner opponent goal regardless position field case start intercept 
agent role game currently passive moves strategic position formation described section close position simply turns ball 
furthermore implemented goalkeeper uses slightly different decision loop regular field players 
strategic position goalkeeper determined defining rectangle front goal intersection point closest ball rectangle line runs ball center goal line 
goalkeeper fastest player ball point interception located inside penalty area tries intercept ball 
note goalkeeper implemented exhibited similar behavior simple portugal 
way difference teams low level implementation 
confidence associated current ball position low search ball ball kickable kick ball maximum power random corner opponent goal fastest teammate ball intercept ball distance strategic position go strategic position turn ball algorithm action selection procedure soccer simulation team de meer 
father authors plays team name 
name chosen team weekly performance failed impress corresponding author performance working version 
chapter 
team strategy action selection procedure de meer agents simple contains important skills soccer player kicking intercepting positioning 
tested implementation de meer playing simple portugal team 
initially de meer performed badly team 
mainly intercept method inferior opponents 
simple portugal players succeeded intercepting ball quickly players failed intercept correctly suboptimal interception point 
spent long time improving particular skill see sections able beat simple portugal team combined score full length matches 
point concluded low level implementation cmunited decided concentrate version team 
uva trilearn qualification team robocup qualify robocup provide logfile full length game uva trilearn fc portugal winning team robocup page research describing research focus scientific contributions team 
stage de meer clearly beat previous champion little time produce winning logfile estimated best chance qualifying temporarily tune high level strategy completely playing fc portugal 
quick visual analysis team revealed wing attack strong passed ball accurately 
attack center effective defending strongest point 
order play team able defend wing attack test defense 
action selection procedure qualification team identical de meer apart agent control ball 
situation de meer agent kicks ball maximum power random corner opponent goal regardless position field 
clear order qualify agents needed sophisticated strategy considered alternative options ball kickable 
qualification agent shoots goal distance large scoring angle wide 
furthermore kick ball random corner goal corner provides widest shooting angle 
distance goal large agent considers different action 
version qualification team agent cleared ball forward case kicking widest angle opponents forward direction 
result team succeeded moving ball rapidly enemy half field 
disadvantage usually led loss possession ball picked enemy defender 
extended version enabling agents pass ball free teammate available 
preferred clearing order try keep team possession ball longer period time 
problem version team players passed ball back forth consequently progress opponent half field 
result fc portugal defense tested 
adapted decision procedure allowing agents pass free teammate forward direction 
teammate agent action depended current position 
agent located half cleared ball forward 
ball usually moved enemy half gave team starting point setting attack 
implemented simple wing attacking pattern effective fc portugal defense 
problem ball picked opponent cleared forward solved making slight alteration clearing action ball cleared center 
considering forward directions agent cleared ball widest angle opponents side field 
chapter 
team strategy crowded area opponents usually able intercept ball quickly 
sure players reach 
defined slightly aggressive formation making small changes ball attraction factors de meer 
result players attracted ball enabled wing attacker intercept opponent 
player dribble ball wing side opponent penalty area gave cross pass central attacker 
central attacker able get ball usually chance score wing player drawn goalkeeper side 
note addition attack implemented simple marking scheme reduce effectiveness fc portugal wing attack 
marking scheme improved versions discussed detail section 
complete action selection procedure qualification agent control ball shown algorithm 
note omitted action selection special play modes kick free kick show procedure play mode 
play modes agents generally moves position directly ball facing opponent goal selects action procedure uses play situations 
tested qualification team repeatedly playing fc portugal tuned play opponent 
lost won team able beat occasions 
best result victory logfile game qualified robocup 
noted decision procedure described section designed solely playing fc portugal represented temporary solution order meet robocup qualification requirements 
result qualification team lacked lot flexibility 
distance goal large scoring angle wide kick ball maximum power open corner opponent goal free teammate front pass ball free teammate forward direction position located half clear ball forward widest angle opponents position located side opponent penalty area free teammate inside opponent penalty area pass ball free teammate inside opponent penalty area give cross pass point just front opponent penalty area position located wing opponent half opponents close dribble ball wing side opponent penalty area clear ball forward widest angle opponents side field algorithm action selection uva trilearn qualification team agent kick ball 
uva trilearn team german open robocup qualification deadline expired designed new setup action selection procedure knowledge gathered previous versions 
resulting team german open paderborn germany 
explicitly divided action selection process distinct parts agent determines action mode depending current state environment coarse action selection agent generates appropriate chapter 
team strategy confidence associated current ball position low return act search ball ball kickable return act kick ball fastest teammate ball return act intercept true return act mark distance strategic position return act goto strategic position return act watch ball algorithm method german open agents determine action mode situation 
action command action mode current situation refined action selection 
algorithm shows method german open agents determining action mode 
method seen form basis action selection process 
note basis slightly different decision procedure de meer see algorithm 
main difference teams nature action selection policy way policy refined generate specific action command 
de meer agent considers small number actions situation german open agent options choose especially control ball 
result german open agent flexible 
german open team action modes chosen information directly stored world model agent 
exception decision mark opponent 
decision mapping teammates opponents constructed method 
method creates list containing opponents located agent defensive quarter field coordinate position smaller pitch length assigns priority factor opponents represents importance marking 
priority factor depends distance opponent penalty spot opponent currently located side field ball 
priority factor fi assigned opponent calculated formula fi sign pt sign penalty spot pt pt qt respectively denote current positions opponent ball function returns boolean expression true 
opponent assigned higher priority factor located close penalty spot side field ball 
list opponents sorted factor opponent list determined teammate marker 
highest priority opponent assigned teammate closest second highest priority opponent closest remaining teammates resulting mapping agent determine mark opponent opponent mark 
note opponent assigned agent method returns true player variable set opponent 
determining action mode current situation agents method generate appropriate action command mode 
method shown algorithm 
chapter 
team strategy qry vry mode mode act search ball action mode act ut kick ball action wt mode act intercept action intercept mode act mark action wt mark ball mode act goto strategic position action ut mode act watch ball action object ball pt pt action action pt mode send action command ot algorithm method german open agents generate action command ot ot cases mapping action mode action command straightforward amounts direct application player skills described chapter 
exception action choice ball kickable 
complicated active agent needs take various aspects current situation account determine best action team 
general behavior agent ball depend position ball field 
divided field different areas see action choice dependent area ball currently located 
agent ball half example considers different actions close opponent goal 
algorithm shows decision procedure agents german open team control ball 
procedure contains different action selection policy specified areas extension algorithm 
qualification team main idea get ball away defensive area clear sectors side field 
wing attacker moves ball side opponent penalty area gives cross pass free teammate front goal 
teammate labeled free opponents inside cone teammate cg yl yr dr dl sl sr dl dr meters areas field action selection ball kickable 
chapter 
team strategy distance ball large scoring angle wide kick ball maximum power open corner opponent goal ball located area consider actions order conditions brackets turn ball opponent goal facing goal opponents close pass ball normal speed free teammate forward direction free dribble slowly forward direction widest angle opponents angle wide clear ball forward widest angle opponents condition ball located area consider actions order conditions brackets clear ball forward left right wing depending widest clearing angle angle wide pass ball normal speed free teammate forward direction free turn ball opponent goal facing goal opponents close dribble slowly opponent goal opponents blocking desired path clear ball forward widest angle opponents condition ball located area consider actions order conditions brackets clear ball forward side field teammate reach ball fastest pass ball normal speed free teammate forward direction free pass ball high speed free teammate forward direction fairly free dribble slowly forward direction widest angle opponents angle wide kick ball maximum power front edge opponent penalty area condition ball located area consider actions order conditions brackets dribble fast side opponent penalty area outside penalty area path blocked pass ball normal speed free teammate areas free pass ball high speed free teammate areas fairly free dribble slowly forward direction widest angle opponents angle wide kick ball maximum power front edge opponent penalty area condition ball located area consider actions order conditions brackets pass ball normal speed free teammate areas free pass ball high speed free teammate areas fairly free dribble slowly side opponent penalty area outside penalty area path blocked kick ball maximum power front edge opponent penalty area condition ball located area consider actions order conditions brackets pass ball normal speed free teammate areas free pass ball high speed free teammate areas fairly free kick ball maximum power open corner opponent goal condition algorithm action selection uva trilearn german open team agent kick ball 
chapter 
team strategy base ball point 
note width cone represents measure degree freeness indication required speed pass 
reason desired action executed due presence opponents alternatives considered team strategy flexible 
desired ball trajectory blocked opponent example agent try dribble ball different direction means temporarily deviate standard attacking pattern 
options pass ball free teammate available clear ball forward widest angle opponents 
noted despite alternatives german open team lacked necessary flexibility play different types opponents 
algorithm shows action command generated agent passed stamina management method called 
necessary method adapts command parameters agent current stamina 
note relevant dash command generated stamina consumed agent dashes 
idea determine current situation allows agent save stamina case low 
agent currently intercepting ball marking opponent important keep moving strategic position 
marking intercepting dash power adjusted amount stamina lost result dash causes agent stamina drop recovery decrement threshold see section 
undesirable situation lead permanent decrease agent recovery value subsequently slower recovery stamina remainder game 
avoid dash power adjusted way agent stamina stays threshold 
agent currently active part game located large distance ball important keep gives opportunity save stamina 
cases adjust dash power depending difference recovery decrement threshold order try keep agent stamina threshold 
result agent stamina act active 
stamina management procedure shown detail algorithm 
action mode type action dash return action consumes stamina backward dash dash power consumes twice stamina sta loss action power action power stamina max diff thr recover dec thr stamina max mode act intercept mode act mark diff thr sta loss action power action power diff thr stamina max diff thr stamina max action power save stamina diff thr stamina max distance ball action power action power consume stamina slowly return action algorithm method adjusting power dash agent stamina low 
chapter 
team strategy uva trilearn team robocup uva trilearn team participated robocup robotic soccer world championship seattle usa extension german open team described section 
comparison team important features added heterogeneous players 
team roles filled different types players different characteristics 
wing attackers example faster greatly enhances effectiveness uva trilearn wing attack 
issues related heterogeneous player selection described section 
inter agent communication 
agents increase reliability world state representation 
result ability cooperate teammates mark opponent attackers improves significantly 
uva trilearn communication model described section 
scoring policy 
policy enables agents determine best target point goal associated probability scoring ball shot point situation 
underlying statistical framework policy chapter 
refined action selection procedure agent control ball 
new goalkeeper defends goal line efficient way 
german open high level team strategy rigid play different types opponents 
especially defensive opponents proved difficult beat agents action alternatives attack 
extended action selection strategy ball kickable increase flexibility team 
general setup resulting decision procedure german open agent agent determines current action mode subsequently generates action 
agent control ball action depends area ball located see 
main difference respect german open agent uva trilearn robocup agent perform additional high level skills passing opponent 
ball kickable uses priority action selection method extension algorithm 
depending area ball located agent considers various action alternatives different priorities represented order considered 
situation selects highest priority alternative predicted success rate exceeds certain threshold 
note ordered alternatives area soccer knowledge information contained soccer literature 
general safest effective options tried predicted success rate options low risky actions considered 
exact decision procedure agent kick ball shown algorithm 
procedure agents preference standard wing attacking pattern described section behavior flexible easily deviate pattern find alternative way scoring 
result team able perform offensive defensive opponents 
uva trilearn robocup team implemented new goalkeeper action selection procedure completely different old goalie originating de meer 
moving rectangle front goal new goalkeeper moves line parallel goal line small distance goal 
depending position ball picks optimal guard point line strategic position 
detailed explanation optimal guard point computed refer reader section 
main feature new goalkeeper movement efficient due fact keeps direction body aligned direction line moves 
result able move point line having waste cycles turning chapter 
team strategy scoring probability best scoring point kick ball maximum power best scoring point returned scoring policy ball located area 
procedure german open agent see algorithm ball located area consider actions order simplified conditions brackets turn ball opponent goal facing goal opponents close dribble fast opponent goal opponents blocking desired path pass ball normal speed free teammate forward direction free pass ball high speed free teammate forward direction fairly free give pass teammate side field angle opponents wide clear ball forward widest angle opponents condition ball located area consider actions order simplified conditions brackets turn ball opponent goal facing goal opponents close opponent opponent close dribble fast side opponent penalty area opponents blocking desired path clear ball forward side field teammate reach ball fastest pass ball normal speed free teammate forward direction free dribble slowly forward direction widest angle opponents angle wide clear ball forward widest angle opponents condition ball located area consider actions order simplified conditions brackets dribble fast side opponent penalty area outside penalty area path blocked pass ball normal speed free teammate areas free give pass teammate area angle opponents wide opponent opponent close pass ball high speed free teammate areas fairly free clear ball penalty area widest angle opponents condition ball located area consider actions order simplified conditions brackets pass ball normal speed free teammate areas free dribble slowly side opponent penalty area outside penalty area path blocked opponent opponent close give pass teammate area angle opponents wide pass ball high speed free teammate areas fairly free clear ball penalty area widest angle opponents condition ball located area consider actions order simplified conditions brackets dribble fast opponent goal opponents blocking desired path dribble slowly forward direction widest angle opponents angle wide pass ball normal speed free teammate areas free give pass teammate area angle opponents wide pass ball high speed free teammate areas fairly free kick ball maximum power best scoring point returned scoring policy condition algorithm action selection uva trilearn robocup team agent kick ball 
chapter 
team strategy body 
match goalkeeper stay line long possible 
passive situation ball far away heading goal uses skill move optimal guard point line 
furthermore stay line ball heading goal enter goal cycles 
case moves intersection point ball trajectory line attempt block path goal catch ball comes distance 
general take goalkeeper fewer cycles catch ball manner having turn intercept skill 
situation goalkeeper leaves line clearly fastest player ball point interception inside penalty area 
complete decision procedure uva trilearn goalkeeper shown algorithm 
confidence associated current ball position low return ball return fastest player ball clearly interception point lies inside penalty area return intercept ball heading goal enter goal cycles desired guard point agent global body angle cycle intersection ball trajectory goalie line return return algorithm action selection procedure uva trilearn goalkeeper 
results features described section merged single robotic soccer system isolate effects controlled testing 
proper way establish effectiveness technique single aspect team team play games side uses technique side 
section empirical results demonstrate effectiveness heterogeneous players communication model new goalkeeper 
full length game soccer server lasts cycles minutes game scores generally vary greatly due large amount noise incorporated simulation 
reported results games 
compiled statistics include number games won drawn lost team average number goals scored team standard deviation average 
section presents results games teams described sections top teams robocup 
results meant give rough estimate strength uva trilearn intermediate versions 
tests described section performed pentium iii ghz mb machines server team running red hat linux 
heterogeneous player results described section uva trilearn team uses faster players wings formation enhance effectiveness wing attack 
tested benefit approach playing matches standard uva trilearn team uses heterogeneous players homogeneous chapter 
team strategy uva trilearn team uses default players 
behavior players teams identical 
table shows results course full length games 
noted outcome match regarded measure actual performance heterogeneous player 
give indication effect 
results clearly speak favor heterogeneous team lose single game concede single goal 
superiority visible games 
heterogeneous players able move faster intercepted ball easily opponents attack homogeneous team hand hardly managed create scoring opportunity due lack speed gave heterogeneous team time reorganize defense contained faster players wings 
result wing attack homogeneous team effective 
test statistical significance results played heterogeneous team homogeneous team 
course games heterogeneous team scored average goals standard deviation homogeneous team scored average goals standard deviation 
outcomes confirmed earlier observations heterogeneous team manages score goals game uva trilearn goalkeeper homogeneous team fails score due lack speed wings reduces effectiveness team strategy 
wins draws losses av 
score st dev 
heterogeneous players homogeneous players table results games homogeneous heterogeneous uva trilearn team 
communication results uva trilearn agents communication increase reliability world model see section 
depending position ball agent best view field left right implementation communicates world model nearby teammates 
tested effect communication model team performance playing matches standard uva trilearn team communication adapted version team uses communication 
ability communicate behavior players teams identical 
table shows results course full length games 
results clearly show communication positive effect performance team 
team communication wins game goals matches 
furthermore world model communicating agents contains date information larger number players field 
average communicating agents see players cycle number non communicating agents 
despite fact agent limited view cone receives visual information communicating agents global representation environment 
result communicating agents date player information consider action selection process increases ability cooperate teammates 
test statistical significance results wins draws losses av 
score st dev 
players seen st dev 
communication 
table results games uva trilearn communication 
despite number goals scored low 
mainly due goalkeeper lot saves 
chapter 
team strategy played non communicating team 
course games team scored average number goals standard deviation 
results standard team uses communication section games scored average goals standard deviation 
compared table results expected communicating team scores slightly better opponent non communicating team scores slightly worse opponent 
goalkeeper results test new goalkeeper moves line see section improvement old moves rectangle see section played full length games uva trilearn old goalkeeper uva trilearn new goalkeeper 
goalkeeper teams identical 
table shows results 
results clearly show new goalkeeper positive effect team uses new goalkeeper wins games goals 
played team old goalkeeper average number goals scored team course games standard deviation 
shows general easier pass old goalkeeper new 
wins draws losses av 
score st dev 
new goalkeeper old goalkeeper table results games uva trilearn old new goalkeeper 
team results get indication performance uva trilearn team intermediate versions relative best teams previous year played trial competition contained teams described sections top teams robocup 
competition teams played games 
results summarized tables 
table gives indication strength teams relative 
contains matrix matches played shows number games won drawn lost team teams 
column denotes number points gathered team matches standard soccer rules points win draw 
points measure seen create ordering teams indicating strength competition 
table shows cumulative score course games teams 
gives indication teams able score easily concede fewer goals specific teams 
explain results remarks order 
matches played soccer server version robocup teams originally built version xx 
main differences versions server version ball accelerated single kick version stamina players increases cycle 
players team aware changed settings read configuration file start match clear robocup teams adapt strategy accordingly 
fc portugal team example normally highly configurable uses different strategy different types opponents changing team configuration 
done manually game automatically game situation asks 
publicly released fc portugal binary experiments created specifically play lower stamina increase cycle 
result team aggressive new chapter 
team strategy team points 
de meer 
trilearn qualification 
trilearn german open 
trilearn robocup 
fc portugal 

att cmu table results matches played versions uva trilearn team top teams robocup 
entry shows number games won drawn lost team specific opponent 
right column denotes number points team gathered win draw create ordering teams indicating strength 
team total 
de meer 
trilearn qualification 
trilearn german open 
trilearn robocup 
fc portugal 

att cmu table cumulative scores matches versions uva trilearn top teams robocup 
entry denotes number goals scored team playing specific opponent course games 
right column shows total score teams 
server settings 
results team slightly 
furthermore complexity simulation causes result game influenced different factors 
consequently potential danger drawing invalid results tables 
examples invalid conclude team beats team techniques team successful team teams identical respect individual aspect team conclusively credited blamed result 
final score game measure abilities teams played 
derived result example team best positioning method team best goalkeeper team possessed best individual skills result game gives indication combined effect team characteristics generally seen test team strength individual components 
game results transitive 
concluded team beats team team beats team team beat team different teams different strategies successful certain opponents successful 
uva trilearn qualification team example tuned play fc portugal able beat team 
fc portugal wins matches qualification team nearly loses 
chapter 
team strategy goal difference game measure better winning team performed compared losing team 
score due fact losing team unsuccessfully changed strategy match attempt force positive result 
fc portugal team example changes formation starts play trailing goals 
cases result counterproductive intention defense weaker easier opponents score 
result team usually beaten heavily opponents lead goals 
look results top teams robocup clear fc portugal offensive team manage score lot concede quite large number goals hand defensive team conceded goals able score lot 
att cmu able score conceded goals 
results incremental versions uva trilearn show general version clear improvement previous 
exception uva trilearn qualification team gathered fewer points de meer 
purpose qualification team play fc portugal order qualify robocup results clearly show qualification team performs better fc portugal de meer 
high level strategy de meer simple score goals opponent 
conceded relatively goals due fact kicked ball opponent half field difficult opponent team set attack 
qualification team able score goals agents able pass ball 
result keep attack going 
disadvantage ball lost defensive half opponents intercepted pass happen de meer explains higher amount goals conceded 
uva trilearn german open team clear improvement earlier versions performs reasonably teams 
proved difficult opponent team due tight defense difficult score 
despite german open team succeeded beating occasions 
uva trilearn robocup team clearly outperformed team played 
team won matches able score goals games conceding single goal 
compared german open team robocup team flexible play offensive opponents fc portugal defensive opponents 
tight defense proved tough penetrate robocup team managed score goals game 
chapter described high level team strategy uva trilearn soccer simulation team participated robocup robotic soccer world championship 
addition intermediate versions team respectively testing lowlevel implementation qualify robocup compete german open 
intermediate versions shown development uva trilearn team strategy incremental process 
demonstrated effectiveness individual components strategy heterogeneous players communication showed combination features enables team play different types opponents 
final version uva trilearn team described chapter able comprehensively beat top teams previous world championship 
teams best teams practice start world cup concluded preparation robocup 
noted number goals scored fc portugal results due fact change formation trailing goals 
furthermore incremental versions uva trilearn extensively tested team 
chapter competition results project uva trilearn soccer simulation team participated international robotic soccer competitions german open official robocup world championship 
chapter results competitions discuss performances 
reading chapter important realize robotic soccer competitions regarded controlled experiments 
want emphasize fact competition results scientific validation techniques 
techniques discussed previous chapters number controlled experiments serve empirical validation 
believe competition results seen useful evaluation system 
participating robotic soccer competitions information concerning strengths weaknesses various approaches 
critical importance development team 
chapter organized follows 
section discuss advantages disadvantages robotic soccer competitions overview past competition results 
section discuss results uva trilearn german open section describe performance robocup world championship seattle usa 
robotic soccer discipline clearly competitive nature important realize robocup primarily research initiative 
presence competitions prerequisite domain exist 
organizing robotic soccer competitions advantages 
example competitions form hard deadlines creating complete working systems 
team wants compete need get system components operational working 
natural desire perform provide strong motivation solving challenging aspects domain 
furthermore robotic soccer competitions bring researchers tried solve problems 
competitions provide common platform exchanging ideas 
participants implemented ideas underlying architecture relatively easy compare different approaches standard test bed 
additional benefit competitions cause wide pool teams created 
competition large number source codes binary files participating teams publicly available controlled testing various techniques 
fact papers published containing research contributions teams lead continually improving solutions competition chapter 
competition results participants know order win able outperform top teams previous event concluded competitions potential accelerate scientific progress robotic soccer domain 
organizing robotic soccer competitions involves number potential dangers slow scientific progress 
obvious winning competitions main priority expense including science 
especially monetary prizes awarded people focus winning keep successful techniques secret competition 
monetary prizes generally 
order keep focus scientific contributions scientific challenge awards teams demonstrated best scientific research results regardless performance competitions 
potential danger winning solutions tuned low level details domain 
competitions serve science winning techniques obviously generally applicable domain question 
general possible avoid domain dependent solutions competitions sufficient produce winning team 
pre robocup simulated robotic soccer competition soccer server 
held osaka japan conjunction iros conference meant informal competition test server preparation robocup 
teams tournament generally simple strategies keeping players fixed locations moving ball close 
robocup held nagoya japan conjunction ijcai conference formal simulated robotic soccer competition 
competition won team exhibited best low level skills 
years progressed crucial differences teams higher strategic levels 
reason low level techniques proven successful basis teams subsequent competitions 
result differences participating teams shifted general levels 
interesting respect tradition previous champion participated minimal modifications order measure progress year 
robocup paris held conjunction icmas conference robocup champion humboldt participated benchmark team finished roughly middle final 
proved field entries stronger year 
subsequent competitions benchmark team started perform better indicating difficult outperform previous champion 
direct result fact teams solved low level problems shifted focus strategic levels 
best performance benchmark team came robocup melbourne held conjunction pricai conference champion cmunited reached fourth place 
apart official world held year competitions organized 
top teams official robocup competitions taken place including shown table 
remainder chapter discuss results uva trilearn soccer simulation team german open robocup world championship 
robotic soccer competitions regarded controlled experiments believe competition results seen useful evaluation system 
goal create team agents operate adversarial environment interesting observe team performs wide range previously unseen opponents 
participating robotic soccer competitions provides insight strengths weaknesses various approaches 
note benefit holds similar rules basis competition year 
chapter 
competition results competition location winner runner third nr pre robocup osaka sekine waseda robocup nagoya humboldt isis japan open tokyo ii pacific rim singapore ii ku robocup paris cmunited humboldt windmill japan open nagoya monkeys robocup stockholm cmunited magma freiburg essex wizards japan open monkeys takai china rc city ii amsterdam fc portugal essex wizards robocup melbourne fc portugal german open paderborn fc portugal japan open fukuoka fc team harmony robocup seattle fc portugal china rc wright eagle shu everest table top teams official robocup competitions taken place 
column denotes number participants excluding non qualified teams withdrawals 
german open german open held heinz museums forum paderborn germany th th june 
official robotic soccer competition uva trilearn participated mainly served testcase robocup world championship year 
initial decision build team scratch majority time point spent solving low level problems 
result uva trilearn simple rigid high level strategy tournament agent high level skills choose 
total number teams different countries registered competition start 
remaining teams divided groups played round robin tournament teams group 
teams group proceeded stage played double elimination system meant remaining teams eliminated competition losing twice 
losing match team chance win tournament increased likelihood final reflect true order merit teams 
table shows results statistics games played uva trilearn competition 
round robin stage played matches won lost drawn 
results significant loss fc portugal win 
meant uva trilearn team official competition managed score goals match fc portugal won robocup conceding single goal 
match important uva trilearn win difference goals order avoid finishing fourth group format remaining team starts winner bracket continues compete title lost matches 
team loses time moved loser bracket plays teams lost 
eventually winner loser bracket play winner winner bracket final 
final won team won winner bracket team champion 
loser bracket winner wins final teams lost play determine champion 
chapter 
competition results round opponent affiliation score poss def mid att group aras univ technology fc portugal universities porto lucky beck university beck univ technology university ck elimination dr web saint petersburg university university koblenz landau dr web saint petersburg university table results statistics games played uva trilearn german open 
poss column denotes percentage total time match uva trilearn ball possession 
columns respectively denote percentage time ball located defensive middle attacking part field 
note zones correspond equal length field parts full width field 
statistics generated logplayer analysis tool robocup logfiles 
uva trilearn reached th place competition 
having play winner group stage 
exciting goal chase succeeded beating meant finished group third place 
winner bracket double elimination stage lost match defensive dr web rarely able reach defensive area managed score 
loser bracket beat prolog german team lost close match dr web sudden death overtime 
resulted fifth place final shown table 
tournament won fc portugal beat karlsruhe repeat robocup final 
place team affiliation 
fc portugal universities porto portugal 
university karlsruhe germany 
university technology iran 
dr web saint petersburg university russia 
uva trilearn university amsterdam netherlands 
aras university technology iran 
university koblenz landau germany 
rolling brains university mainz germany table final top teams robocup german open 
tournament discovered quality participating teams higher year 
differences teams smaller especially group uva trilearn drawn proved strong teams qualified group finished top final 
lot teams formation mechanism similar situation strategic positioning introduced fc portugal year positioning players controlled 
important drawn mistake organization play dr web soon official double elimination rules dr web placed part loser bracket 
chapter 
competition results competition high level strategy flexible play different types opponents 
especially teams played proved difficult beat trouble creating scoring opportunities 
visible example matches played dr web succeed scoring goal despite fact time action located defensive area 
clear practiced fc portugal high level strategy tuned perform teams offensive playing style 
results german open promising convinced lower levels worked rigid high level strategy competitive 
tournament test case robocup months 
robocup world championship robocup robotic soccer world championship held washington state convention center seattle usa nd th august conjunction seventeenth international joint conference artificial intelligence ijcai 
uva trilearn qualified tournament means qualification logfile beat robocup champion fc portugal page research describing research focus scientific contributions team 
comparison german open improved team areas introducing interagent communication heterogeneous players advanced scoring policy 
furthermore improved team high level strategy increased flexibility different types opponents 
done extending decision procedure players giving options choosing action different situations 
addition improved defensive strategy implemented new goalkeeper better capabilities german open 
total number teams different countries pre registered robocup teams qualified main event 
teams just start competition tournament consisted teams divided groups teams 
group stage played round robin system teams qualified round 
remaining teams divided groups played round robin teams progressed team double elimination stage 
table shows results statistics games played uva trilearn competition 
tournament started dramatically defeat game eventual winner china 
main problem team players controlling ball high speed keeping away close opponents 
dribble action moved ball quickly side side kickable range 
result defenders predicted ball move fast side field due speed uva trilearn recovered finishing second group winning remaining group games conceding single goal 
especially victory living systems successor team robocup runner magma freiburg promising result stage 
second group stage successful uva trilearn group winning matches conceding single goal 
included victory round group winner australia 
significant result round came robocup winner fc portugal benchmark team see section won matches group stage group stage corrected setting estimated ball speed zero player ball kickable range 
result defenders exhibited stable behavior easily 
number practice matches uva trilearn played competition showed modification difference teams smaller average uva trilearn lost 
chapter 
competition results round opponent affiliation score poss def mid att group tsinghua university living systems living systems ag harmony university univ new south wales group ii tut groove univ techn 
team tokyo institute techn 
fc portugal univ porto csiro australia rolling brains university mainz elimination wright eagle univ science techn 
fc portugal univ porto fc portugal univ porto university karlsruhe table results statistics games played uva trilearn robocup 
statistics generated logplayer analysis tool robocup logfiles 
meaning statistics refer table 
uva trilearn reached th place competition 
combined score 
beat fc portugal team record victory official competition 
winner bracket double elimination stage won tight match chinese team wright eagle sudden death overtime mistake goalkeeper 
semi final played tournament favourites fc portugal successor team robocup champion fc portugal 
lost game leading quarters total playing time 
point fc portugal changed formation moving goalkeeper center line gave extra field player 
new strategy proved effective 
longer able penetrate defense positioned far forward resulting pressure enabled score goals match 
match loser bracket play benchmark team fc portugal beat occasion 
eliminated competition robocup runner karlsruhe beat close match 
took lead early goal managed put pressure opponents occasions able score due tight defense goalkeeper 
best chance equalize came match shot just missed goal 
meant uva trilearn finished competition fourth place 
final robocup karlsruhe beaten fc portugal loser bracket final 
won match sudden death overtime 
final top teams robocup simulation league tournament shown table 
competition clear uva trilearn high level strategy flexible compared german open 
able play different types opponents managed score goals defensive teams 
main philosophy uva trilearn keep ball moving quickly player preferably forward direction 
addition players tried cut opponent defense passing ball depth front wing attackers side field 
way team succeeded moving ball rapidly enemy half field opponent team 
effectiveness strategy greatly enhanced fact heterogeneous players wings 
chapter 
competition results place team affiliation 
tsinghua university china 
karlsruhe university karlsruhe germany 
fc portugal universities porto portugal 
uva trilearn university amsterdam netherlands 
fc portugal universities porto portugal 
wright eagle university science technology china 
fc university keio japan 
tokyo university electro communications japan table final top teams robocup 
players generally tired quickly greater speed enabled reach deep ball opponent defenders usually led dangerous situation front enemy goal 
surprised see teams heterogeneous players consider main strategic advantages uva trilearn teams 
robocup won team exhibited best round performance ball control strategy 
obviously disappointed lose top position satisfied result shown fully competitive teams 
furthermore managed defeat strong teams participated years 
final meant uva trilearn best newcomer robocup year 
apart regular simulation league competition uva trilearn took part scientific evaluation competition organized yearly encourage transfer results robocup scientific community large 
competition participating team played full length game benchmark team fc portugal result served base line 
game played opponent participating team deal handicap known advance handicap affect benchmark team 
year handicap consisted fact dash power rate significantly lower player tried dash upper half field seen soccer monitor 
result slower area 
expected adaptive team able cope better respond opposite wing 
unfortunately uva trilearn finish top teams competition competition participated coach substitution competition 
competition fixed team chosen gemini group humboldt group played matches different sides 
coach allowed select heterogeneous players various field positions substitutions game coach associated winning team winner match 
competition organized time mainly served testcase subsequent years 
participated competition coach substitute players uva trilearn team reached second place total number 
noted format competition results regarded scientifically conclusive 
coach select player types start match information team coach 
idea team strategy know effective faster player certain position 
outcome game depended selected player types fitted unknown team strategy giving results random character 
apart top full result competition announced 
different standard coach competition coach gives advice players game 
order enable coach different teams standard coach language communication 
chapter 
competition results chapter directions thesis described incremental development main features uva trilearn robotic soccer simulation team see 
thesis regarded handbook development simulated robotic soccer team 
combination source code released provides solid framework new teams build serve basis research field robotic soccer simulation 
chapter provide number concluding remarks summarize main features team section 
furthermore outline promising directions section 
concluding remarks main objective soccer simulation project twofold 
firstly set project provide solid foundation enable continue graduation 
secondly put performance robocup robotic soccer world championship seattle usa 
despite fact objectives completely compatible see section feel met best abilities 
designed modular agent architecture contains necessary components simulated soccer agent available time allow implement component optimal way able optimize ones crucial success team 
addition managed produce relatively simple effective implementation remaining components result team clear weak points 
enabled reach fourth place robocup outperforming teams participated years performed previous competitions 
remainder section outline main features team discuss way enhanced performance 
mention related aspects enabled set solid framework contributed final result 
main features uva trilearn robotic soccer simulation team summarized follows multi threaded layer architecture chapter 
uva trilearn agents capable perception reasoning acting 
multi threaded agent architecture allows agents separate thread tasks 
way delay caused server minimized agents spend majority time thinking chapter 
directions action 
furthermore architecture agent consists layers 
threads perception acting form interaction layer takes care interaction environment hides soccer server details possible layers 
top skills layer uses functionality offered interaction layer build model world implement various skills agent 
top layer control layer selects best possible action skills layer depending current world state current strategy team 
uva trilearn agent architecture provides solid foundation development simulated soccer agent 
highly modular contains components necessary performance aspect game 
flexible agent environment synchronization scheme chapter 
scheme enables agents determine optimal moment cycle sending action command server 
result agents capable performing action cycle information state world possible 
significant influence performance team 
compared teams clear agents capable executing larger number actions action opportunities missed 
allowed gain advantage opponents 
furthermore agents able respond quickly changes environment due fact synchronization method maximizes chance basing action choice visual information current cycle 
accurate methods object localization velocity estimation chapter 
agent world model regarded probabilistic representation world state past perceptions 
contains information objects soccer field various methods low level world state information derive higher level 
object estimation position velocity stored things confidence value indicating reliability estimate 
integrating known soccer server dynamics particle filter algorithm able compute accurate estimates positions velocities dynamic objects 
increased performance team agents base reasoning process accurate world state representation 
layered skills hierarchy chapter 
skills available uva trilearn agents divided different layers form hierarchy skills 
layers hierarchical sense skills layer skills layer generate desired behavior 
skills bottom layer specified terms basic soccer server action commands 
framework possible reason various skills agent perform high level abstraction having deal directly low level server commands 
current implementation uva trilearn agents capable performing skills gives large number action alternatives situation 
despite fact skills hand coded implementation proved effective 
scoring policy chapter 
policy enables agents determine optimal target point goal associated probability scoring ball shot point situation 
partly approximate method developed learning relevant statistics ball motion regarded geometrically constrained continuous time markov process 
scoring goals main objectives soccer game scoring policy proved useful 
effective team strategy chapter 
select appropriate action uva trilearn agents distinction active passive situations depending currently active role game 
agent passive situation moves strategic position field anticipation active 
agent active situation chooses action current position ball positions players 
chapter 
directions uva trilearn team uses formation proved effective 
main philosophy keep ball moving quickly player preferably forward direction 
addition agents try cut opponent defense passing ball depth front wing attackers side field 
way team succeeds moving ball rapidly enemy half field opponent team 
furthermore effectiveness strategy greatly enhanced fact heterogeneous players wings 
greater speed players compared default players enables reach deep ball opponent defenders usually leads dangerous situation front enemy goal 
features mentioned clearly formed basis success uva trilearn robocup 
important aspects contributed positively final result incremental development appendix 
project consequently followed incremental software development approach 
main advantage approach working system times tested compared previous versions 
helped meet deadlines provided competitions uva trilearn participated enabled build large system lines code relatively short period time 
study related soccer server simulation environment chapters 
initial stages project time spent studying literature subject multi agent systems simulated robotic soccer particular 
enabled familiar robotic soccer domain provided great deal knowledge useful project 
furthermore studied feature soccer server wrote small test programs observe behavior 
way developed thorough understanding simulation worked remainder project proved 
enabled tune low level implementation optimally characteristics server led faster debugging low level algorithms 
software engineering issues appendix 
facilitate code attention project focused software engineering issues 
consequently followed object oriented design methodology leading logical class hierarchy highly modular code 
noted distribution tasks project members preserved conceptual integrity system appendix 
furthermore extensively documented code lines documentation developed multi level log system accelerated debugging process considerably appendix 
soccer server simulation environment contains challenges interesting domain conduct research 
thesis solutions various problems inherent simulated robotic soccer domain 
uva trilearn robocup world championship possible improve team ways 
section outline promising directions 
necessarily positive scientific perspective essential success team 
important realize order create standard simulation testbed choices concerning implementation realistic models 
algorithms developed domain tuned choices 
simulation changes general properties solutions correct details implementation altered 
real world algorithms longer produce correct results laws physics change 
chapter 
directions multiple pieces information single particle 
possible improve position orientation velocity estimates dynamic objects world model agents including single particle 
resulting particle set updated propagating particles cycle current observation case agent action performed 
note need particles filter due increased dimensionality state space 
integrating uncertainty visual perceptions confidence object information 
current implementation world model agents explicitly store uncertainty visual perceptions indicate reliability object information 
uncertainty implicitly included position velocity estimates result particle filtering 
reliability measure currently comes form confidence value object represents time object observed 
confidence value drops certain threshold object information neglected reasoning process 
accurate include perceptual uncertainty reliability measure 
done example incorporating variance perception confidence value letting propagate time 
addition possible resulting confidence value explicitly reasoning process 
learning techniques implementing skills 
current implementation skills available agents hand coded 
configurable parameters value observations practice matches 
principled way implement skills learn machine learning algorithm 
example reinforcement learning 
main advantage approach provides way programming agents means reward punishment needing specify task achieved 
complexity robotic soccer domain huge state space possible actions strategies partial observability state information traditional reinforcement learning methods difficult 
possible way tackle complexity define sequences basic commands separate ones order reduce number actions decisions available agents 
stronger commitment previous decisions 
current implementation agent commits single action cycle weak binding generating plan consisting sequence actions number cycles 
means agent executed part skill previous cycle guarantee continue execute part current cycle 
situation completely reevaluated action opportunity action selected current situation 
advantage dynamic domains provided soccer server agents flexible changes environment select best possible action current state world 
disadvantage lead oscillations different skills consecutive cycles better solution agent commit certain skill longer period time 
important time period long dynamic nature soccer server simulation environment requires agent remain flexible environmental changes 
adaptive scoring policy 
current solution scoring problem fixed goalkeeper fixed distance goal 
solution improved incorporating extra feature model representing distance scoring point outlined section 
furthermore probability passing goalkeeper adaptive different 
means model incorporate information current opponent goalkeeper particular team 
desired case model adapt note practice happen due fact environment changes gradually 
chapter 
directions game little prior information current goalie 
difficult problem learning scoring attempts 
important extract relevant features parametrize intercepting behavior opponent goalkeeper compact manner permits line learning 
possible way statistics collected coach 
extended positioning mechanism 
current implementation strategic position agent depends agent home position inside current formation position ball serves attraction factor 
possible extend positioning mechanism incorporating additional factors positions players 
strategic position agent computed multiple objective function maximizes distance opponents passive teammates repulsion factors minimizes distance enemy goal teammate ball attraction factors 
switching roles inside dynamically changing formations 
current implementation uva trilearn team uses formation agent fixed role 
possible extend implementation defining multiple formations switching formations depending score game tactic opponent team 
furthermore desirable agents capable switching roles inside formation situation asks 
happen example agent moves far strategic position intercepting ball 
agents decide switch roles sum distances respective strategic positions decrease doing 
general decision switch roles depend resources available filling particular role 
assume example agent role agent role 
case clear reason switching roles resources necessary filling likewise 
switching roles important agents involved agree making switch order avoid single role filled multiple agents 
problem arises switch involves heterogeneous players different abilities 
certain roles abilities desired effect 
exploiting potential heterogeneous players various field positions 
current implementation roles inside formation team filled non default players wing attackers central attacker wing defenders 
player types roles selected utility function combines values various player parameters 
noted choice roles filled heterogeneous players observations practice games assumption team uses formation standard attacking wings 
general solution develop method predicting utility player type depending role player 
way determined player types best suited roles formation 
possible approach machine learning techniques genetic algorithm learn effective distribution heterogeneous players field 
multi agent modeling coach agent 
current implementation individual agent decisions affected behavior opponent players strategic decisions team fixed 
ideally team strategy adjusted response adversarial behavior 
promising approach coach agent purpose 
coach receives noise free global information state world real time demands players 
result spend time strategies 
online coach tool analyzing strengths weaknesses opponent team giving advice best possible strategy 
coach able classify enemy behavior certain features 
decide strategy appropriate behavior class 
coach determine example playing style opponent team chapter 
directions recommend change formation switch player types certain role inside current formation 
turn players know interpret coach advice act 
appendix software engineering aspects creating complete multi agent system simulated robotic soccer team straightforward task 
main difficulty arises fact system consists different components operate appropriate way 
furthermore building separate component difficult task 
obvious project scale success organized 
project paid attention software engineering aspects implementation 
order facilitate code set software architecture allows various components combined clear orderly manner 
enabled enable extend debug large amounts code structured way possible follow incremental software development approach 
unfortunately current literature field simulated robotic soccer pays little attention subject software engineering exception 
feel appropriate provide details appendix 
mainly focus problems typically arise large software projects tried avoid 
appendix organized follows 
section discuss implementation issues documentation system programming language 
section devoted incremental development software development approach followed project 
section shortly addresses issue manpower distribution presents model dividing tasks various programmers protects conceptual integrity system 
section contains description tool developed speed debugging process 
implementation issues important choices implementation team programming language platform developed 
chosen programming language compile code gcc compiler 
mainly chosen reasons performance language supports object oriented approach 
especially performance aspect crucial soccer server simulation environment due real time nature domain 
consequently followed object oriented design methodology leading logical class hierarchy highly modular code 
team built tested linux red hat operating system represents standard competitions 
furthermore soccer simulation teams developed platform released linux binaries web 
linux works solaris making changes compensate differences gcc libraries systems 
appendix software engineering aspects easier test teams 
multi threaded agent architecture described section implemented posix threads appeared intuitively appropriate requirements assuming implementation native support linux operating system 
facilitate code time implementation spent extensively documenting code 
documentation system 
system different programming languages java idl automatically generate manual set documented source files 
currently documentation system gnu standard library red hat linux packaging manager 
system needs document various parts program classes class variables methods describing functionality location defined 
advantage documentation located close definition easier keep consistent source code 
extracts information generates line documentation browser html line manual 
support generating output rtf ms word postscript hyperlinked pdf compressed html unix man pages 
extract code structure set source files visualizing relations various elements automatically generated dependency diagrams inheritance diagrams collaboration diagrams 
functionalities utilized development uva trilearn soccer simulation team 
people case working project version management important issue 
version control system development team cvs concurrent versions system 
widely system allows store old versions files keep log changes 
simpler systems rcs sccs cvs operate file directory time hierarchical collections directories consisting version controlled files 
cvs helped manage different versions team control concurrent editing source files multiple authors 
enabled store various releases convenient way possible return previous version extension update show intended result 
currently implementation team consists approximately lines code documentation lines large amount code fact extensions required year improve team accommodate changes soccer server simulation environment indicates necessary keep code structured 
incremental approach mentioned tools easier achieve 
incremental development main problem building large system simulated robotic soccer team conceptual structure complex completely accurately specified advance complex built faults 
implemented team software development technique called incremental development 
approach dictates system run useful creating proper set dummy objects 
object gradually refined adding functionality system fully grown 
main advantage approach gives working system times moral tested compared earlier versions 
furthermore necessitates top design amounts top growing software 
applied incremental approach creating extremely simple system consisted threads perform basic loop receiving information server processing checked outputs formatted source code comments 
appendix software engineering aspects information sending action server 
component system built simple way performing task elementary level 
components just implemented void subroutines correct place architecture 
initial system clearly certainly correctly regarded working version 
progressively refined simple implementation extending functionality different components keeping architecture intact 
started refining component see implementing flexible external windowing synchronization scheme see section 
possible send command server cycle enabled agent perform basic actions 
implemented component parsed messages arrived server stored information simple world model 
world model gradually extended information contained started create version team play game soccer 
led de meer soccer simulation team see section mainly testing low level implementation 
subsequently action selection policy agents progressively refined create sophisticated versions team 
approach advantages 
firstly working system result sure team ready competitions participated 
incremental development seen protect schedule overruns cost possible functional shortfall 
furthermore approach enabled thoroughly test various components system easier locate faults knew originate refinement step 
manpower distribution important aspect software project divide different case team members 
conventional method partition task equally available people responsible design implementation part 
disadvantages 
firstly usually leads systems lack conceptual integrity unity design 
better system reflects set design ideas contains independent uncoordinated ideas 
large programming systems usually conceptually integrated design separated tasks done men 
achieve conceptual integrity design proceed mind small group agreeing minds 
part system reflect philosophies 
furthermore partitioning task multiple people occasions extra communication effort form training 
especially extra usually large software projects increases quadratically number team members quickly dominates decrease individual task time brought partitioning major part cost system lies communication correcting ill effects miscommunication 
number minds coordinated affects total cost quality system 
suggests want system built minds possible 
schedule deadlines usually dictate building large system requires hands 
leads difficult problem 
efficiency conceptual integrity system needs small team people design implement 
large systems desires way bring considerable manpower bear system finished time 
needs reconciled 
proposal mills offers creative solution problem consequently followed project 
suggests large system built small team small teams software developers organized surgical team 
surgeon mills calls chief programmer leader team responsible product shows adding manpower late software project brooks law 
appendix software engineering aspects assistants help design construct system 
example pilot seen alter ego surgeon knows complete design code written gives advice possible improvements 
surgeon information making changes code bounded 
examples editor reviews code including documentation tester responsible testing system 
setup conceptual integrity system lies hands surgeon 
means team member cutting away problem person real cutting give support enhance effectiveness productivity 
chief programmer surgical team organization offers way get product integrity minds total productivity helpers radically reduced communication 
adopted approach implementation uva trilearn team team member played role surgeon performed combined tasks members surgical team combination incremental approach described section enabled build large system relatively short period time 
multi level log system development autonomous agents important designer able trace action choices understand act 
agent unexpected undesirable designer needs way isolate precisely agent took action 
soccer server simulation environment straightforward 
caused fact enormous amount data passes system game played difficult find source problem 
agent controlled separate client process average receives parses messages sense body messages see messages say messages server second 
result impossible keep track complete data flow running system minute match 
printing information debugging purposes example quickly leads huge data files drawing relevant data time consuming effort 
difficult identify exactly caused agent act situation 
agent performs unexpected action caused example error processing sensory information fault reasoning process 
avoid overwhelmed data clearly desirable observer able trace certain parts agent program level abstraction chooses 
implemented multi level log system ideas 
system enables user specify abstraction level desires information log information debugging purposes 
programmer trace recorded information find agent took actions identify parts agent altered 
key approach fact relevant agent information organized layers defined user 
layers correspond agent specific information internal state higher level reasoning processes particular purpose skills execution action selection 
general far information available display times 
furthermore usually necessary receive information layers debugging process 
imposed hierarchy allows user select level detail probe agent 
possible zoom details important current situation hide details layers 
implemented multi level log system form logger class see section 
class allows programmer specify abstraction level desires information contains similar recipe followed effort writing thesis 
difference authors switched roles task 
appendix software engineering aspects output stream writing information usually file 
execution agent logs certain information calling method logger class 
information written specified output stream number associated layer information originates falls range layers user desires information 
table shows information hierarchy defined implementation log system 
noted completely specified level reasons clarity 
show ranges levels correspond main components agent 
match replayed logplayer gathered information certain level determine agent executed specific action situation 
project log system crucial tool development uva trilearn agents accelerated debugging process considerably 
levels information communication server updates world model state world model skills execution action selection table information hierarchy multi level log system 
appendix software engineering aspects bibliography 
refinement soccer agents positions reinforcement learning 
kitano editor robocup robot soccer world cup pages 
springer verlag nov 
bacon 
concurrent systems 
international computer science series 
addison wesley nd edition 
burkhard 
learning kick artificial soccer 
van der hoek editor proceedings european robocup workshop may 
barman little mackworth pai sahota wilkinson zhang 
dynamo real time experiments multiple mobile robots 
proceedings ieee intelligent vehicles symposium pages tokyo july 
barto bradtke singh 
learning act real time dynamic programming 
artificial intelligence 
bond gasser 
analysis problems research dai pages 
morgan kaufmann publishers los angeles ca 
bowling stone veloso 
predictive memory inaccessible environment 
proceedings iros workshop robocup pages osaka nov 
brooks jr mythical man month essays software engineering 
addison wesley berkeley ca 
brooks 
intelligence reason 
proceedings th international joint conference artificial intelligence ijcai pages sydney 
morgan kaufmann 
burkhard 
humboldt development practice theory 
kitano editor robocup robot soccer world cup pages 
springer verlag 
burkhard sander 
humboldt team description 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 

programming posix threads 
addison wesley 
butler howard 
flexible synchronisation robocup environment comparative analysis 
stone balch editors robocup robot soccer world cup iv pages 
springer verlag berlin 

art soccer 
soccer books 
bibliography collins jr apollo moon 
nasa sp 

windmill source code 
university amsterdam 
publicly available 
groen 
team description uva team 
robocup team descriptions simulation league pages 
link ping university press 

team description windmill 
proceedings second robocup workshop pages paris 
de boer kok groen 
uva trilearn robotic soccer simulation team 
newsletter aug 
de boer kok groen 
uva trilearn research 
part qualification material robocup 
www science uva nl robocup apr 
de boer kok groen 
uva trilearn team description 
robocup robot soccer world cup springer verlag berlin 
de boer kok vlassis groen 
optimal scoring policy simulated soccer agents jan 
submitted robocup workshop fukuoka japan 
www science uva nl robocup 
dean boddy 
analysis time dependent planning 
proceedings seventh national conference artificial intelligence aaai 
morgan kaufmann 

behavior networks continuous domains situation dependent motivations 
proceedings th international joint conference artificial intelligence ijcai pages stockholm 
morgan kaufmann 

extended behavior networks magma freiburg team 
robocup team descriptions simulation league pages 
link ping university press 

magma freiburg soccer team 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 

personal correspondence robocup 
seattle 
doucet de freitas gordon 
sequential monte carlo methods practice 
springer verlag 
elo 
rating past 

feller 
probability theory applications volume 
john wiley sons new york 
feller 
probability theory applications volume 
john wiley sons new york 
heintz noda riley 
robocup soccer server user manual soccer server version 
sourceforge net projects 
garlan shaw 
software architecture 
advances software engineering knowledge engineering volume 
bibliography girault 
team description hybrid recursive agent architecture 
robocup team descriptions simulation league pages 
link ping university press 
goetz 
attractors recurrent behavior networks 
phd thesis state university new york buffalo 
hu hunter 
essex wizards team description 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 
hu liu 
coordination learning team mobile robots 
proceedings iasted robotics applications conference california oct 
hughes 
soccer tactics teamwork 
ep publishing 
hunter hu 
behavior approach position selection simulated soccer agents 
van der hoek editor proceedings european robocup workshop may 

visions flying machine wright brothers process invention 
smithsonian institution press washington 
kaelbling cassandra littman 
acting optimally partially observable stochastic domains 
proceedings twelfth national conference artificial intelligence aaai 
kaelbling rosenschein 
action planning embedded agents 
maes editor designing autonomous agents theory practice biology engineering back pages 
mit elsevier 
kalman 
new approach linear filtering prediction problems 
journal basic engineering pages 
kitano asada 
robocup humanoid challenge small step robot giant leap mankind 
proceedings ieee rsj international conference intelligent robots systems iros 
kitano asada kuniyoshi noda osawa 
robocup robot world cup initiative 
proceedings ijcai workshop entertainment ai alife 
kitano asada kuniyoshi noda osawa 
robocup robot world cup initiative 
proceedings international conference autonomous agents agent 
kok de boer 
official uva trilearn website 
university amsterdam 
www science uva nl robocup 
kok de boer 
uva trilearn source code 
university amsterdam 
www science uva nl robocup 
kok de boer vlassis 
optimal scoring policy simulated soccer agents 
proceedings seventh international conference intelligent autonomous systems ias marina del rey california mar 
appear short 
bibliography hu 
essex wizards 
robocup team descriptions simulation league pages 
link ping university press 
hu 
reinforcement learning cooperation simulated multi agent system 
proceedings ieee rsj international conference intelligent robots systems iros korea oct 
hu 
multi threaded approach simulated soccer agents robocup competition 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 
hunter hu 
design patterns development multi agent systems 
proceedings ieee international conference systems man cybernetics smc oct 
henshaw 
world encyclopedia soccer 
visible ink press 

latombe 
robot motion planning 
kluwer academic publishers boston 
lau reis 
fc portugal interesting research overview 
overview fc portugal team 
www pt robocup 
lenz bartsch burkhard wess 
case reasoning technology 
foundations applications lnai 
springer verlag 
lindeberg 
eine neue des der 
mathematische zeitschrift 
mackworth 
seeing robots 
computer vision systems theory applications pages 
world scientific press singapore 
maes 
dynamics action selection 
proceedings eleventh international joint conference artificial intelligence ijcai detroit 
morgan kaufmann 
mills 
chief programmer teams principles procedures 
technical report fcs ibm federal systems division gaithersburg md 
mills 
top programming large systems 
editor debugging techniques large systems 
prentice hall englewood cliffs nj 
murray 
koblenz 
van der hoek editor proceedings european robocup workshop may 
murray 
logical approach soccer agents engineering 
stone balch editors robocup robot soccer world cup iv 
springer verlag berlin 
ohta 
gemini learning cooperative behaviors communicating 
robocup team descriptions simulation league pages 
link ping university press 
papoulis 
probability random variables stochastic processes 
mcgraw hill rd edition 
patterson hennessy 
computer organization design hardware software interface 
european adaptation 
morgan kaufmann publishers san francisco ca 
pressman 
software engineering practitioner approach 
mcgraw hill th edition 
bibliography 
situated reasoning multi agent systems 
aaai spring symposium hybrid systems ai pages stanford 
butler 
tactical reasoning synthetic multi agent systems case study 
proceedings ijcai workshop nonmonotonic reasoning action change pages stockholm 
butler howard 
experiments emergent tactical behavior 
university melbourne 
www csiro au aai robocup publications 
butler howard 
emergence scalable tactical strategic behavior 
stone balch editors robocup robot soccer world cup iv 
springer verlag berlin 
butler wong howard 
tactical agents robocup simulation league 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 
kowalczyk lee wong 
designing modeling situated agents systematically 
proceedings pricai workshop robocup pages singapore 
quinlan 
programs machine learning 
morgan kaufmann san mateo ca 
reis lau 
fc portugal team description robocup simulation league champion 
stone balch editors robocup robot soccer world cup iv pages 
springer verlag berlin 
reis lau lopes 
portugal team description 
part qualification material robocup 
riedmiller 
concepts facilities neural reinforcement learning control architecture technical process control 
journal neural computing application 
riedmiller meier hoffman 
karlsruhe reinforcement learning approach robotic soccer 
stone balch editors robocup robot soccer world cup iv pages 
springer verlag berlin 
riedmiller meier hoffmann kill 
karlsruhe design principles 
part qualification material robocup 
riley stone veloso 
layered disclosure revealing agents internals 
proceedings seventh international workshop agent theories architectures languages atal 
ripley 
pattern recognition neural networks 
cambridge university press cambridge 
rumbaugh jacobson booch 
unified modeling language manual 
addison wesley 
russell norvig 
artificial intelligence modern approach 
prentice hall englewood cliffs nj 
bibliography sahota mackworth barman 
real time control soccer playing robots board vision dynamite testbed 
proceedings ieee international conference systems man cybernetics pages 
schaeffer 
kasparov versus deep blue re match 
journal international computer chess association 
sear 
logplayer analysis tool robocup logfiles 
university manchester 
www cs man ac uk 
shaw garlan 
formulations formalisms software architecture 
lecture notes computer science volume 
murray 
spatial agents implemented logical expressible language 
veloso editor proceedings third international workshop robocup pages stockholm 
ijcai press 
stone 
layered learning multi agent systems 
phd thesis computer science department carnegie mellon university pittsburgh pa dec 
stone 
cmunited source code 
carnegie mellon university pittsburgh pa 
www cs cmu edu robocup cmunited source tar gz 
stone riley veloso 
cmunited champion simulator team 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 
stone veloso 
layered approach learning client behaviors robocup soccer server 
applied artificial intelligence 
stone veloso 
communication domains unreliable single channel low bandwidth communication 
collective robotics pages berlin july 
springer verlag 
stone veloso 
cmunited simulator team 
kitano editor robocup robot soccer world cup pages 
springer verlag nov 
stone veloso 
collaborative adversarial learning case study robotic soccer 
international journal human computer studies jan 
stone veloso 
decision tree confidence factors multi agent control 
kitano editor robocup robot soccer world cup pages 
springer verlag nov 
stone veloso 
task decomposition dynamic role assignment real time strategic teamwork 
intelligent agents proceedings fifth international workshop agent theories architectures languages atal volume pages heidelberg 
springer verlag 
stone veloso 
task decomposition dynamic role assignment low bandwidth communication real time strategic teamwork 
artificial intelligence june 
stone veloso 
layered learning flexible teamwork robocup simulation agents 
veloso kitano editors robocup robot soccer world cup iii 
springer verlag 
bibliography stone veloso :10.1.1.1.8859
multi agent systems survey machine learning perspective 
autonomous robotics july 
stone veloso achim 
collaboration learning robotic soccer 
proceedings micro robot world cup soccer tournament nov 
stone veloso riley 
team partitioned opaque transition reinforcement learning 
robocup robot soccer world cup ii 
springer verlag berlin 
stone veloso riley 
cmunited champion simulator team 
robocup robot soccer world cup ii 
springer verlag berlin 
stroustrup 
programming language 
addison wesley rd edition 
suzuki 
team description 
robocup team descriptions simulation league pages 
link ping university press 
suzuki takeuchi 
team description 
stone balch editors robocup robot soccer world cup iv pages 
springer verlag berlin 
robocup federation 
official robocup website 
www robocup org 
thomas finney 
calculus analytic geometry 
addison wesley th edition 
thrun fox burgard dellaert 
robust monte carlo localization mobile robots 
artificial intelligence may 
meyer schulz 
team characteristics mainz rolling brains 
van der hoek editor proceedings european robocup workshop may 
meyer schulz 
description team mainz rolling brains simulation league robocup 
stone balch editors robocup robot soccer world cup iv pages 
springer verlag berlin 

teaching learning development team mainz rolling brains simulation league robocup 
robocup team descriptions simulation league 
link ping university press 
van 
documentation system 
www org 
veloso stone bowling 
anticipation key collaboration team agents 
proceedings third international conference autonomous agents 
visser van van dam dev groen kr se wiering 
organization design autonomous systems 
university amsterdam sept 
vlassis kr se 
auxiliary particle filter robot localization high dimensional sensor observations 
proceedings ieee international conference robotics automation icra washington usa may 
appear 
wand 
fast computation multivariate kernel estimators 
journal computational graphical statistics 
