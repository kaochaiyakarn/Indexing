input output dependencies normal logic programs robert st rk cis universit nchen nchen germany cis uni muenchen de sldnf resolution complete allowed programs allowed queries 
condition stringent excludes common prolog constructs 
show special case general principle 
show clauses normal program correct respect input output specification complete 
input output specification assigns predicate set positive set negative mode specifications 
mode specification declares arguments predicates input arguments output arguments normal arguments 
positive modes positive calls negative modes negative calls 
definite programs definite goals allowed programs allowed goals programs goals practice correct respect input output specification 
results imply valued fitting kunen completion right declarative semantics negation failure 
keywords logic programming negation failure sldnf resolution completion programs valued logic 
clark conjectured ranges variables negative literals body clauses bounded program complete query evaluation procedure 
complete means query derived completed database completion program predicate calculus successful evaluation successful sldnf refutation 
sufficient condition ensures ranges variables negative literals bounded 
kunen proved allowed programs sldnf resolution complete respect completion programs valued logic 
condition stringent excludes common prolog constructs 
instance clauses definition standard member allowed 
appeared journal logic computation vol 
pp 

show special case general principle 
prove clauses program correct respect input output specification sldnf resolution complete 
input output specification set positive negative mode specifications predicate 
mode specification predicate saying arguments input arguments arguments output arguments arguments normal arguments 
allow different mode specifications predicate 
input output specification program written way computed answer free variables output terms contained free variables input terms 
particular input arguments ground computed answers output arguments ground 
furthermore free variables negative literal instantiated ground terms computation 
simple syntactic test ensures properties 
definite programs allowed programs correct respect canonical input output specification 
definite programs correct respect input output specification declares arguments predicates normal arguments 
allowed programs correct respect input output specification declares arguments predicates output arguments 
point view programmer input output specifications natural 
procedural meaning clause 

bm 
cn 
procedure called input values 
values passed procedure computes output values inputs 
tests 
cn fail output values bm returned output values think input output specifications natural generalized cover axioms generalization 
big difference imperative functional programming languages logic programming input output arguments unique 
output arguments input arguments input arguments output arguments 
instance standard append predicate concatenate lists decompose list 
input output specifications differ definition 
input output arguments allowed relation mode specification 
completeness proved terminating programs 
exist founded reduction relation terms program computations terminate 
completeness result general 
depend termination 
think logic program declarative meaning independently terminates certain inputs 
input output specifications prolog predicates read write 
semantics real output predicates write characters output stream see 
input output specifications order language set function symbols fun set relation symbols rel 
sets fun rel finite infinite 
normal program finite set clauses form 
ln positive literal 
ln positive negative literals 
goal expression form 
ln 
assume programs goals contain equality 
capital greek letters denote finite lists literals 
clauses denoted goals simply 
empty goal 
write indicate form indicate form 
write iff exists substitution 
expression vars set free variables unexplained notions refer 
tuple 
xn normal called mode specification place relation symbol rel 
xi ith argument called input argument 
xi ith argument called output argument 
xi normal ith argument normal argument 
denote mode specifications small greek letters 
terms 
tn set input variables atom 
tn respect 
xn set variables occur input arguments 
defined 
tn 
xn vars ti xi 
set output variables defined analogously 
tn 
xn vars ti xi 
input output specification function assigns place relation symbol set positive mode specifications set negative mode specifications allow different mode specifications relation normal normal negative mode specifications output arguments negative calls compute output 
negative calls considered tests 
empty 
input output specification extended natural way rel set literals 
atom 
tn set 
tn 
tn similarly idea program written way computed answer output variables contained input variables 
certain way input output specification reflects data flow normal logic program 
formally expressed definitions 
definition clause called correct respect input output specification correct iff positive modes exists permutation literals body form 
bm 
cn positive mode bi bi bj bj ci vars ci bj negative modes positive literals exists negative mode negative literals exists positive mode 
particular body empty clause correct iff modes 
program called correct respect input output specification iff clauses correct 
definition goal called correct respect input output specification correct iff exists permutation 
bm 
cn literals positive mode bi bi bj ci vars ci bj 
particular 
atom correct goal iff exists 
definition goal called closed respect input output specification closed iff positive literal exists negative mode negative literal exists positive mode 
note goal closed negative literals goal 
input output specifications best understood looking example programs 
example example shows input output specifications 
append 
append append 
program correct respect input output specification append append 
examples correct goals append 
append 
goal concatenate list second decompose list 
example actual reason introduce input output specifications programs nested negation 
member 
member member 
member member 
subset 
program correct respect input output specification member normal normal member normal normal normal normal subset subset 
means subset called ground terms 
example transitive closure program 
member 
member member 
member 
member member 
intended meaning exists path graph nodes list typical goal form 
ak bk 
ak 
bk constants ai bi means edge ai bi graph 
goal computes transitive closure graph uses prolog search strategy 
program correct respect input output specification normal normal normal normal member normal normal member normal normal 
example example known discussed literature 
assume relation move defined program correct respect input output specification move modes 
move normal move normal normal 
relation win defined clause 
win move win 
enlarge program remains correct 
win normal win normal 
known classes logic programs correct respect non trivial input output specification 
example definite programs canonical input output specification definite programs defined normal normal 
normal normal normal 
normal 
means atom 
definite clause correct 
goal correct iff negative literals ground 
goal closed 
example allowed programs define relations 
normal normal 
normal 
means atom vars 
clause 
bm 
cn definition reduces vars vars bj vars ci vars bj 
goal 
bm 
cn definition reduces vars ci vars bj 
words clause correct iff variable clause occurs positive literal body clause 
goal correct iff variable goal occurs positive literal goal 
way obtain exactly allowed programs allowed goals 
goal closed 
example decomposable programs class programs introduced 
decomposable programs interesting negation complete 
decomposable program canonical input output specification 
assume rel rel decomposition set relation symbols disjoint sets 
rel take mode specification 

rel take mode specification normal normal 
normal 
cases take normal normal 
normal 
clause correct respect specification iff satisfies conditions 
relations symbol head rel variable head occurs positive literal body relation symbol rel 
variable occurs negative literal body occurs positive literal body relation symbol rel 
goal correct iff variable occurs negative literal occurs positive literal relation symbol rel 
natural partial ordering set input output specifications define iff relation symbols rel 
input output specifications define union rel 
easy see program correct respect correct respect 
lemma 
lemma normal program greatest input output specification correct 
proof 
take union input output specifications program correct 
instance general input output specification relation member example programs member normal normal normal normal member normal normal normal normal 
course general input output specification program trivial function assigns empty set modes relation symbols 
correct goals closed goals closed certain operations 
lemma input output specification 
goal correct closed substitution correct closed 
clause correct substitution correct 
goal correct closed clause correct correct closed 
proof 
immediate consequences definitions 
closure properties 
generalize concept correctness concept programs 
definition sets goals language program called program iff conditions satisfied 



ak ai ground ai 

note resp 
imply set resp 
closed resolution input clauses conversely assume sets goals satisfy conditions 
resp 
variant clause general unifier resp 


ak ai ground ai 
set easy see program 
notion program notion sense program goal decidable exist sets goals program fact problem complete 
decidable subclasses 
input output specification define set correct goals set closed goals 
obtain lemma 
lemma correct program program 
proof 
lemma definitions 
notion program 
reader keep lemma mind relativize results correct programs correct goals 
negation failure consider extension sldnf resolution possible select nonground negative literals constructing finitely failed trees 
extension described rules 
atom fails ground succeeds 
atom succeeds renaming substitution fails 
set goals terminating sldnf computation extension described inductive definition 
program rp set pairs successful sldnf derivation answer fp set goals finitely failed sldnf tree 
words rp rp means goal returns answer goal succeeds answer fp means goal finitely fails 
sets rp fp sets satisfying closure conditions 
drop parameter 

empty goal succeeds answer identity substitution 
variant clause vars disjoint vars general unifier vars 
ground 
variant clause general unifier 
renaming substitution write exist substitutions 
condition rewritten follows 
note clause required atom ground 
convenient slightly general sets 
correspond sequent calculus sp buchholz 
idea sets rp fp 
sets sets satisfying closure conditions 
drop parameter 



ak 
ak 


condition special case 
shown exactly set goals proof answer terminology set goals finitely failed tree 
rp fp 
fact converse true general arbitrary programs 
lemma program 
exists substitution rp 
fp proof 
prove induction definition simultaneously statements 
set protected variables vars exists substitution vars 
set vars set variables vars 
case 
take 
case 
assume variant clause vars disjoint vars exists idempotent general unifier substitution vars 
define new set protected variables vars vars 
induction hypothesis exists substitution vars 
set vars vars 
case 
assume 
ak ai 
atom ai ground ai ai ai induction hypothesis see ai 
case 
assume clauses 
variant clause general unifier induction hypothesis clause chosen arbitrarily obtain case 
assume 
induction hypothesis 
obtain fact closed substitutions 
lemma 

completion completion logic program introduced clark 
program ary relation symbol assume clauses head form 
ith clause form ti 
ti li 

clause literals body 
defining formula defined dr 
xn xj ti li completed definition formula 
xn 
xn dr 
xn cases treated natural way 
empty disjunction constant empty conjunction constant 
notion indicate free variables list completion comp obtained completed definitions relations equality freeness axioms called theory cet clark equational theory 

xn yn 
xn 
yn ary 
xn 
yn xi yi ary 
xn 
ym ary ary term occurs strong valued logic kleene semantics completion 
programs monotonic operator valued structures defined 
valued structure differs interpretation relation symbols 
completed definition dr dr 
increasing sequence canonical valued structures defined way 
herbrand structure relations undefined 
iff exists ground instance clause form literals iff ground instances clauses form exists literal 
main theorem 
theorem kunen comp exists 
different proof theorem corollary 
survey methods relating valued semantics valued semantics completion 
main theorem results clark formulated way 
program 
ln goal 

ln rp comp 
ln 

ln fp comp 
ln 
main theorem programs correct respect input output specification converse holds 
course certain restrictions goals 
positive queries obvious restriction correctness respect input output specification 
motivate restriction negative queries consider example program 
isc 
isc 
isc 
clauses correct respect input output specification 
isc normal isc normal normal 
comp comp fp goal excluded 
contains input variable 
restriction negative queries closed respect input output specification 
come main theorem prove technical lemma 
lemma true arbitrary programs 
lemma program 
cn pairwise different constants occur obtained replacing constant ci variable xi 
proof 
proof induction definition 
expression expression obtained replacing ci xi assume case 
show 
case 
substitution variables need fact proved induction length expression constants 
cn occur 
special case obtain 

induction hypothesis obtain 

case 

ak ai ground 
cn occur 
lemma goes back ideas kunen 
assume language contains infinitely constants 
lemma program 
lk goal 
nk natural numbers 

lk 
lk ground ini li 
lk 

lk substitutions 
lk ground exists ini li 
lk 
proof 
natural number greater number literals body clause prove simultaneously induction nk case 

lk 
lk ground ini li exists li positive assume positive 
exist clause 
substitution mj ground mj 

lk nk nk induction hypothesis obtain 

lk 

lk 
case ii 

lk substitutions 
lk ground exists ini li exists li positive ni assume positive 

substitutions 
goal 

lk 
want show 
ground substitution 
assume ground 
assumption exists ini li exists mj nk nk induction hypothesis 

lk 
case iii 

lk substitutions 
lk ground exists ini li li positive ni assume variables 
lk 
xm 
cm distinct constants occur 
lk program substitution 
cm xm 
assumption exists ini li li negative form 
lk ini case previous lemma 
definition 
lk 
case iv 

lk 
lk ground ini li li negative li ai ai ground ai ini ai case ii ai 

lk 
theorem program 
lr goal 
comp 
lr 
lr exists substitution 
lr rp 
lr 
lr 
comp 
lr 
lr 
lr fp proof 
assume comp 
lr 
lr 
xm variables 
lr 
cm new distinct constants occur 
lr 
cm xm 
comp 
lr 
theorem exists 
lr previous lemma obtain 
lr lemma 
lr obtain 
lr 
lemma exists substitution 
lr 
lr 
lr 
assume comp 
lr 
lr exists 
lr means ground substitutions exists li previous lemma 
lr lemma 
lr necessary theorem underlying language contains infinitely constants may sight 
assume extension 
set 
program program 
theorem language follows theorem language 
special case theorem 
theorem normal program correct respect input output specification 
lr goal 
comp 
lr 
lr correct respect exists substitution 
lr rp 
lr 
lr 
comp 
lr 
lr closed respect 
lr fp proof 
theorem lemma 
shown normal logic program correct respect input output specification function assigns predicate finite set positive modes finite set negative modes goal correct respect input output specification correct answer computed 
precisely substitution true valued models completion exists general substitution computed sldnf resolution 
programs written practice correct input output specification write logic program modes predicates mind clauses write correct respect modes 
surprising result programs apply developed theory logic programming 
completeness result generalized finds solutions 
generalization parametrize definition computation rule selection function order obtain similar results 
gap theory practice 
completeness result means completeness computational completeness 
say exists sldnf computed answer interpreter breadthfirst search strategy find answer 
interpreter flexible selection rule 
think candidate 
second programs theory applies pure prolog programs operator 
doubt exists mathematical semantics style completion logic programs impure operators cut assert findall see 
acknowledgment am grateful kees doets john shepherdson helpful comments earlier version 
apt 
logic programming 
van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier 
apt pedreschi 
proving termination general prolog programs 
ito meyer editors theoretical aspects computer software pages 
springer verlag lecture notes computer science 

operational denotational semantics prolog input output predicates 
proc 
informatica grenoble 
inria 
rger 
mathematics set predicates prolog 
gottlob editors computational logic proof theory 
proceedings third kurt del colloquium pages 
springer verlag lecture notes computer science 
rger 
mathematical definition full prolog 
science computer programming 
buchholz 
negation failure calculus 
technical report university munich 
clark 
negation failure 
gallaire minker editors logic data bases pages 
plenum press new york 
fil 
graph properties normal logic programs 
theoretical computer science 
decker 
generalized cover axioms 
furukawa editor proc 
international conference logic programming pages paris 

completeness sldnf resolution non floundering queries 
logic programming 
fitting 
kripke kleene semantics logic programs 
logic programming 
hill lloyd 
del programming language 
mit press 
kunen 
negation logic programming 
logic programming 
kunen 
signed data dependencies logic programs 
logic programming 
lloyd 
foundations logic programming 
springer verlag berlin second edition 
shepherdson 
logics negation failure 
moschovakis editor logic computer science pages 
springer verlag 
shepherdson 
mints type deductive calculi logic programming 
annals pure applied logic 
st rk 
complete axiomatization valued completion logic programs 
logic computation 
st rk 
proof theory logic programs negation 
phd thesis university berne switzerland 
st rk 
negation complete logic programs 
rger ger ning martini richter editors computer science logic selected papers csl pages 
springer verlag lecture notes computer science 

completeness result sldnf resolution 
logic programming 

