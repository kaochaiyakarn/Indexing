gossip style failure detection service robbert van renesse yaron minsky mark hayden dept computer science cornell university upson hall ithaca ny failure detection valuable system management replication load balancing distributed services 
date failure detection services scale badly number members monitored 
describes new protocol gossiping scale provides timely detection 
analyze protocol extend discover leverage underlying network topology improved resource utilization 
combine protocol broadcast handle partition failures 
accurate failure detection asynchronous non realtime distributed systems notoriously difficult 
system process may appear failed slow network connection slow partitioned 
impossibility results 
systems minimal progress face process failures important try determine process reachable 
false detections allowable long reasonable respect performance 
acceptable report exceedingly slow process badly connected failed 
unfortunately scaled dozens members failure detectors unreasonably slow false detections 
aware publications know experiences isis horus ensemble systems see example experiences transis 
failure detector random gossiping informally properties 
probability member falsely reported having failed independent number processes 

algorithm resilient message loss message delivery timing failures process failures small percentage lost late messages small percentage failed members lead false detections 
supported part arpa onr arpa radc afosr 
views contained authors interpreted necessarily representing cial policies endorsements expressed implied organizations government 
current address mark hayden dec src lytton ave palo alto ca 

local clock drift negligible algorithm detects failures accurately known probability mistake 

algorithm scales detection time detection time increases log number processes 

algorithm scales network load required bandwidth goes linearly number processes 
large networks bandwidth subnets approximately constant 
protocol minimal assumptions network 
bound message delivery time messages may lost altogether 
assume message delivered predetermined reasonable time 
processes may crash unreachable 
assume fail byzantine failure model basically means processes lie know 
actual implementation uses checksums sanity checks messages approximate fail model closely possible 
assume clock rate host close accurate low drift assume synchronized 
basic version failure detector place limit hosts may unreachable 
final version drop limitation tolerate arbitrary crashes network partitions 
protocol host network runs failure detector process executes protocol ers continuous process failure recovery reports interested clients 
output failure detector processes department generate automatically update web page www cs cornell edu home html gives overview department network status log activity 
view failure detector middleware service 
middleware services system management replication load balancing group communication services various consensus algorithms rely reasonably accurate failure detection pioneered failure detection service optimize performance face failures 
approaches hierarchical tree protocols potential cient ones described 
aware publications describing protocols 
having tried build believe tree failure detector protocols require complex agreement protocols construct tree repair failures occur 
gossip protocols problem fact important advantages simplicity 
simple protocol assumes uniform network topology bounded number host crashes 
analyze protocol section 
section extend protocol discover information actual network topology information optimize network resources 
section presents protocol combined gossiping deals arbitrary host failures partitions 
basic protocol basic protocol simple 
gossiping pioneered clearinghouse project 
long baker shostak describe gossip protocol ladies telephones absence widespread availability computers networks 
gossip protocols member forwards new information randomly chosen members 
gossip combines ciency hierarchical dissemination robustness flooding protocols member sends new information neighbors 
case clearinghouse directories resolve inconsistencies 
protocol gossips gossiping 
member maintains list known member address integer going failure detection 
call integer heartbeat counter 
gossip seconds member increments heartbeat counter selects member random send list 
receipt gossip message member merges list message list adopts maximum heartbeat counter member 
member occasionally broadcasts list order located initially recover network partitions see section 
absence broadcast capability network gossip servers di er members hosted known addresses placed unavailable due network partitioning 
member maintains member list time corresponding heartbeat counter increased 
heartbeat counter increased fail seconds member considered failed 
fail selected probability anybody erroneous failure detection small threshold mistake member considered faulty immediately forgotten 
problem members detect failures time member may receive gossip member previously detected faulty 
forgotten membership list think seeing heartbeat time 
continue gossip information members ect faulty member quite disappears membership 
failure detector remove member membership list cleanup seconds cleanup fail 
cleanup chosen probability gossip received member detected faulty small threshold cleanup cleanup equal fail setting cleanup fail see failed member consider member heard heartbeat time probability fail member heard heartbeat fail process fail time fail set cleanup fail probability fail failed member reappear list members member removed 
note protocol detects hosts entirely unreachable 
detect link failures hosts 
particular hosts talk communicate host suspect way 
kinds partial connectivity occur commonly systems protocol may cycle adding removing hosts 
dynamic internet routing protocols eventually take care problem 
section extend protocol scale internet 
requires part network topology discovered accomplish gossiping 
analyze basic protocol come reasonable value fail possible heartbeat counter overflows necessary window sliding window protocols 
analysis order find suitable parameters basic protocol particular rate gossiping fail necessary understand parameters ect probability false detection 
section analyze protocol system population processes static new processes added known members 
discovery new members poses problem large number new members join lengthen time takes dissemination information potentially cause processes learned enlarged membership suspect processes falsely 
section discusses behavior system situations sharp changes membership 
probabilities involved gossiping calculated epidemic theory see example 
typical way doing stochastic analysis assumption execution broken synchronous rounds process gossips 
member new information called infected 
analysis initially member infected source infection system reality new information may introduced multiple processes 
round probability certain number members infected number infected members calculated 
done number infected members 
allowing members gossip round analysis stochastically complex usually approximations upper bounds example see 
section suggests simplified analysis believe may accurate boot 
practice protocols run rounds 
member gossips regular intervals intervals synchronized 
time propagation gossip message typically shorter length intervals 
define di erent concept round necessarily infected member gossiping 
member chosen random chooses member gossip random 
round number infected members grow simplifies analysis 
total number members number infected members round arrival probability gossip successfully arrives chosen member start round 
probability chosen conservatively required gossip arrives member gossips 
probability arrival independent message 
note system behaves better arrival instance messages dropped protocol cient 
initially member infected 
assume members fail 
simplicity assume conservatively members failed protocol 
gossiped pass gossips 
way number infected members shrink 
assume initially infected member fail 
members infected probability number infected members incremented round arrival probability number infected members round believe assumption ect outcome round 
initially infected member gossip crash infected member thing 
scenario 
members graph depicts failure detection time di erent mistake probabilities mistake 
bandwidth member bytes second member failed 
protocol log behavior appears approximately linear graph 

probability process get infected rounds mistake 
find mistake probability process infected process need range members 
processes mistake mistake independent 
bound mistake inclusion exclusion principle pr pr 
principle bound mistake follows mistake mistake calculate rounds needed achieve certain quality detection 
calculation best done recursively suggested iteratively starting round 
costly 
appendix alternative analysis works number members calculated easily 
calculate members gossip worst case bandwidth linear number members 
say member allowed send bytes second bytes member necessary gossip message bytes address bytes heartbeat counter 
interval gossips gossip seconds 
small large may wish place minimum gossip assume common communication delay gossip 
case pure switched network opposed broadcast network ethernet bandwidth link bytes second independent number members 
total load switches increases number members 
note members receive average bytes second worth gossip information result limiting incurred overhead protocol 
interested time takes reach certain low probability false failure detection 
iterating mistake find rounds takes multiply gossip plotted di erent values mistake probability mistake members members members graph shows cost quality detection 
note scale logarithmic cost better quality excellent 

near linearity confirmed visually 
actuality growth curve log number rounds increases logarithmically number members spacing rounds linearly 
readers familiar presentations gossip protocols may disappointed expected see better linear degradation detection time 
reason gossip disseminated information grow linearly number members interested message complexity bandwidth taken messages 
decided slow gossiping linearly number members growing message size introduces linear factor detection time 
trade minimizing probability making false detection failure detection time 
show trade satisfactory little extra detection time necessary better quality 
look resilience protocol process failures 
obviously members fail gossips wasted take longer distribute new heartbeat counters 
show ect 
notice assume half members fail takes twice long detect failure assumed members fail 
half processes fail half gossips wasted roughly equivalent gossiping half 
general easy show allowing failure fraction members increase detection time approximately 
detection time begins rise rapidly larger half note axes graph logarithmic 
case network partition small subgroup members get partitioned large group basic gossip algorithm perform satisfactorily viewpoint small subgroup 
reasonable detection time members subgroup presume faulty gossip 
section presents solution 
failed members graph shows di erent probabilities message loss ect failed members detection time 
observed algorithm quite resilient process failures half members failed 
probability message loss members members members graph shows ect message loss detection time mistake 
observed algorithm quite resilient message loss 
investigate impact message loss 
show di erent group sizes ect message loss failure detection time 
see satisfactory resilience 
assume gossips get lost pay small price detection time 
multi level gossiping large system basic protocol ine ciency corrected fairly easily important improvement scalability 
problem members choose members random concern topology network connected 
result bridges physical networks overloaded redundant information 
section show members correct automatically detecting bounds internet domains subnets reducing gossips cross bounds 
modified gossiping protocol review structure internet domains subnets 
internet addresses bit numbers subdivided fields 
call fields domain number subnet number host number 
example cornell university campus domain number hosts roughly ethernet lan subnet number 
host number identifies individual hosts subnet 
fields form hierarchy reflects fairly accurately underlying physical topology networks 
fields variable length 
length domain number determined looking bits 
length subnet host numbers determined way di erent particular domain 
case cornell happens subnet host numbers bits visible externally 
fact cornell may decide change overnight notifying anybody outside cornell need ects routers outside cornell 
modified protocol 
aspects protocol 
lengths subnet host numbers domain gossiped heartbeat counters host 
secondly gossips done subnets gossips going subnets fewer domains 
aspect hosts maintain lists 
basic protocol contains hosts heartbeat counters 
second list contains domain numbers called subnet masks determine length subnet host numbers 
invariant protocol host list entry second corresponds host domain subnet 
typically hosts subnet second list shorter 
second list gossiped merged arrival maintains invariant 
subnets run basic protocol described section 
gossips cross subnets domains run modified version protocol 
modified protocol tunes probability gossiping round average member subnet gossip subnet domain member domain gossip domain 
bandwidth level proportional number entities contained level 
example cross subnet bandwidth domain depend number subnets domain 
achieve average behavior member tosses weighted coin time gossips 
times size subnet picks random subnet domain subnet random host gossip 
member tosses weighted coin time probability number subnets domain picks random domain random subnet domain random host subnet gossip 
protocol significantly reduces amount bandwidth flows internet routers gossiping concentrated lower levels hierarchy 
protocol allows accelerated failure detection times subnets resilient network subnets may add level hierarchy 
currently take account optimal ect correctness protocol 
chosen keep bandwidth subnet domain equal bandwidth member subnet level 
protocol trivially generalized 
members graph shows result simulating protocol members evenly distributed number subnets 
partitions 
side negative influence number rounds needed information disseminated system failure detection times subnets domains 
show negative ect simulated protocol plotted average number rounds takes gossip new heartbeat counter members group members 
spread members evenly number subnets ranging subnet members subnets member single domain 
see may pay approximately certain subdivisions 
appear pay number subnets sizes subnets equal case 
point cient bandwidth times bandwidth flat broadcast network 
fact may conclude bandwidth approximately constant large networks 
see see happens double number members large network 
doubling number members subnet doubling number subnets doubling number domains 
double number members size gossip messages doubles time gossiping slows factor 
subnets domains bandwidth remains 
increase bandwidth highest level hierarchy consisting messages domains 
fortunately internet designed accommodate constant amount tra domain 
calculations appendix generalizing section complex particular division members subnets domains failure detection times members particular subnets 
failure detection times members subnet improve times longer generally longer 
problem may choose gain bandwidth increase gossip frequency reduce failure detection times 
previous agarwal shown possible exploit network topology membership total ordering protocols 
called totem necessary run special software gateway machines networks protocol automatically discovers boundaries subnets require special software host machines 
intention totem providing rigorous guarantees failure detections cient membership totally ordered multicast local area network consisting multiple physical networks 
vogels suggests multiple confidence levels failure reports node failure monitors subnet order enhance scalability failure detection 
implicitly follows suggestion 
provide analysis scalability quality detection 
catastrophe recovery gossip algorithms large percentage members crash partitioned away see 
problem gossips get wasted sending unreachable processes 
order deal failure detector immediately report members heard time fail waits longer gossiping members 
broadcast protocol attempt restore connections remaining members 
know subnet masks subnet protocol section determine broadcast addresses subnet zeroes ones host number 
protocol guarantee high probability broadcast generated seconds 
failure free environment generate average broadcast seconds imposing low load hosts network 
chosen exact parameters ease explanation parameters chosen arbitrarily 
member decides second probabilistically send broadcast received broadcast 
member broadcasts low probability 
member received broadcast seconds ago broadcast high probability 
probability chosen expected time somebody sends broadcast seconds 
function appears probability member sends seconds receiving broadcast constant chosen expected broadcast sent member seconds 
find calculate probability anybody sends broadcast seconds 
probability broadcast sent time expected time broadcast sent example find approximately 
plotted functions example seen high probability broadcast seconds 
expected number absence broadcast capability small set hosts known addresses may gossip 
gossip servers placed strategically remain available case partitions 
analyzed approach 
probability graph shows probability particular member sends broadcast seconds probability member probability broadcast sent seconds 
number members 
size partition graph shows size partition group members probability members broadcast time 
note axes logarithmic 
senders seconds making member broadcasts time 
large fraction members unreachable 
clearly high probability broadcast seconds 
members unavailable closer expected time gets seconds 
concern expected time gets closer seconds probability member sends broadcast goes rapidly 
members may broadcast time leading storm broadcasts 
turns probability members broadcast time group members see appendix 
reason smaller partition smaller number prospective senders sets growing probability members send 
broadcast protocol may scale better hierarchy determined gossip protocol 
subnet run instance broadcast protocol hosts domain subnets domains 
improvement partitions arbitrary occur boundaries subnets domains 
host determine values decide broadcast subnet entire domain 
levels hierarchy increase total number broadcasts factor may corrected adjusting protocol parameters 
time broadcast bound calculate quickly members new partition find 
taken account broadcast messages may get lost bound probabilistic may somewhat larger seconds ignoring issue 
broadcast new partition members know just originator broadcast gossip 
seconds bandwidth assigned member originator know entire membership gossip information ignoring probability message loss 
calculate amount time necessary gossip entire membership analysis section 
maximum size partition members chosen section 
maximum time broadcast chosen members partition time locate report failed 
particular instance catastrophic situation cold start hosts know members gossip 
problem situation domains subnets initially known 
information determine broadcast address subnet 
currently extract list subnets domain know subnet mask scanning hosts data base computer networks maintain 
knowledge subnets domains manually configured 
failure detection service gossip protocol 
service provides accurate failure detection known probability false detection resilient transient message loss permanent network partitions host failures 
service uses separate protocols automatically take advantage underlying network topology scale number members 
implemented system ideas run cs cornell edu domain weeks 
period measured failures recoveries missing failures making single false failure detection 
output failure detector observed www cs cornell edu home html 
implemented basic protocol ensemble system 
failure detection service distributed applications directly support middleware services system management replication load balancing group communication membership services 
failure detection valuable extension current services 
acknowledgments authors wish ken birman nancy lynch dexter kozen anonymous referees helpful comments 
agarwal moser melliar smith 
reliable ordered delivery protocol interconnected local area networks 
proc 
international conference network protocols pages tokyo japan november 
yair amir danny dolev shlomo kramer malkhi 
transis communication subsystem high availability 
proc 
second int 
symp 
fault tolerant computing pages boston ma july 
ieee 
norman bailey 
mathematical theory infectious diseases applications second edition 
hafner press 
brenda baker robert shostak 
gossips telephones 
discrete mathematics june 
kenneth birman mark hayden mihai budiu yaron minsky 
bimodal multicast 
technical report cornell university dept computer science january 
tushar deepak chandra hadzilacos sam toueg 
weakest failure detector solving consensus 
proc 
th annual acm symposium principles distributed computing august 
tushar deepak chandra hadzilacos sam toueg charron bost 
impossibility group membership asynchronous systems 
proc 
th annual acm symposium principles distributed computing philadelphia pa may 
alan demers dan greene carl hauser wes irish john larson scott shenker howard sturgis dan swinehart doug terry 
epidemic algorithms replicated database maintenance 
proc 
sixth acm symp 
principles distributed computing pages vancouver british columbia august 
acm sigops sigact 
michael fischer nancy lynch michael patterson 
impossibility distributed consensus faulty process 
journal acm april 
richard golding kim taylor 
group membership epidemic style 
technical report ucsc crl uc santa cruz dept computer science may 
dexter kozen 
design analysis algorithms 
springer verlag 
derek oppen dalal 
clearinghouse decentralized agent locating named objects distributed environment 
acm transactions ce information systems july 
robbert van renesse kenneth birman mark hayden david karr 
building adaptive systems ensemble 
software practice experience 
accepted publication 
robbert van renesse kenneth birman ma eis 
horus flexible group communication system 
comm 
acm april 
werner vogels 
world wide failures 
proc 
th acm sigops workshop ireland september 
appendix cient particularly small numbers members approximate analysis basic protocol 
terminology call analysis deterministic 
show large members deterministic analysis basic protocol approximates quite precise analysis section 
deterministic analysis computed ciently generalized analyze multi level protocol clear closely approximate 
number members system 
assume members execute protocol rounds 
initially ignore possibility failed members message loss introduce 
assume member increases heartbeat counter 
call members heard infected 
interested probability members infected round infected members probability infection non infected member infected round infection minus probability member infected currently infected members 
number infected members round 
calculate done 
step analysis approximation behavior 
doing assuming round system follows expected behavior round 
problem expected behavior system rounds necessarily composition expected behavior various rounds 
basic protocol approximation 
infection probability particular member infected round probability everybody infected probability somebody non infected mistakenly report particular process failed round order bound probability anybody erroneously reports anybody inclusion exclusion principle mistake admit message loss call message lost hasn delivered round call probability timely message arrival arrival infection members graph compares analysis section deterministic analysis appendix 
cases message loss probability mistake probability 
infection arrival compatibility analysis section assume members fail immediately initially infected member fail 
certain number members failed members gossip unnecessarily gossiped 
case mistake infection mistake turns identical derived section large see 
better analysis section 
reason initial drop curve absolute percentage members 
overhead doing way quickly expensive better switch deterministic analysis appendix 
easy improve current analysis substitute fail probability hosts round assuming set host failed start 
appendix appendix section 
find probability members broadcast calculate conditional probability members broadcast time seconds 
senders time find probability members seconds just need multiply probability time broadcast sent senders time time senders time senders time probability members broadcast seconds broadcast senders senders time 
