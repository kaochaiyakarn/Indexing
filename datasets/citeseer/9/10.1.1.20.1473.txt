distilling software architectural primitives architectural styles mehta medvidovic computer science department computer science department university southern california university southern california los angeles ca usa 
los angeles ca usa mehta usc edu usc edu architectural styles codify commonly idioms system structures organizations interactions 
existing classifications architectural styles provide empirical guidelines style selection fail systematically characterize styles reveal foundations 
mapping architectural styles implementations generally poorly understood 
introduces approach systematic understanding architectural styles small set recurring architectural primitives 
proposed extensible composition framework architectural styles primitives turn basis style implementation 
framework called alfa applied successfully different architectural styles date 
lightweight compositional models styles created alloy formal modeling notation implementation infrastructures styles developed java 
premature claim alfa sufficiently expressive represent arbitrary architectural style experience date suggests converged set primitives effectively captures characteristics large number styles 
feel alfa presents unique contribution worthy careful study 

software systems complex increasing need employing higher level abstractions better represent system structure behavior interactions ways support reasoning system properties 
software architectures provide high level abstractions form coarse grained system components computational building blocks connectors component interaction facilities configurations specific compositions components connectors constraints placed :10.1.1.135.5430
system composition patterns constraints comprise architectural styles targeted families systems shared characteristics 
styles reusable software architectural idioms 
architectural styles currently client server pipe filter push layered blackboard forth 
large number styles formally described exact characteristics style usually unclear 
difficult systematic comparison different styles understand strengths weaknesses order enable selection styles appropriate application 
attempts develop systematic techniques dealing architectural styles resulting formalisms describe styles preliminary taxonomies informal discussions differences newly codified style existing styles influenced 
part studies fail clarify key dimensions architectural style may differ 
related critical issue ensuring property established model system architecture holds true system eventual implementation 
current research begun address issue creating architectural implementation execution frameworks specific architectural styles 
remains difficult provide uniform economical implementation techniques wide variety architectural styles sufficient flexibility adapted real applications 
proposes create understanding result composition framework architectural styles called alfa small reusable set architectural primitives 
turn primitives reused styles reified precise transformations produce implementation infrastructures faithful style 
attempts answer fundamental questions nature architectural styles 
architectural styles comprehensively characterized 

essential similarities differences architectural styles 

complex divergent architectural styles composed reusable set simple primitives 
order answer questions date successfully modeled analyzed implemented structural compositional aspects known architectural styles alfa client server pipe filter push 
styles representative cross section architectural styles collection embody large number recurring architectural concepts distribution concurrency events implicit invocation dynamism remote procedure calls layering publish subscribe dataflow forth 
representing architectural styles single substrate allowed formally demonstrate reusing compositions patterns alfa elements various informal claims intuitions stated literature shared aspects different styles 
example similarities client server push systems terms topology architectural elements 
example similarity style implicit invocation client server request dispatch 
similarities exploited create opportunities low level reuse models implementations architectural styles 
main contributions 
novel approach architectural style characterization understanding composition 
small set architectural primitives reused styles 
formal models styles compositional lightweight 
effective style implementation infrastructures 
organized follows 
motivating section section presents related concepts 
section introduces alfa formal model implementation infrastructure 
process section discusses architectural composition explains nature architectural primitives 
section presents details alfa evaluation applying different architectural styles 
section evaluates framework terms reusability discusses limitations 
concludes brief overview plans 

motivation widely believed compositional approaches software development key developing large complex systems 
existing approaches including software architectures provided support abstractions layered top provided programming languages ensuring continuity reuse past investments newer abstraction techniques mapped existing ones 
delivering full value architecture design require identify primitives underlying software architectural elements correspondence various levels software design abstractions analogously done computer hardware architecture 
complete lack understanding software architectural primitives directly motivating study 
architectural styles particular represent potentially fertile area attempting codify architectural primitives 
styles facilitate systematic high level reuse form recurring organizational patterns coarse grained architectural elements software components connectors 
difficulty associated styles real world software systems built single pure architectural style 
architects required select relevant aspects various styles fit application needs 
daunting task compose model analyze hybrid architectural styles absence common architectural primitives building blocks 
difficulty architectural styles current lack support systematically implementing systems particular style 
availability composition frameworks architectural styles effective implementation architectural primitives mitigate difficulties principled styles feasible 
identifying primitives architectural styles requires systematic characterization styles existing classifications go empirical comparisons styles provide little information underlying style elements 
architectural styles available architect precise understanding relative merits limitations different styles terms comparable characteristics enable reasoning choice style designing applications 
need style characterization approach linked shared primitives 
identifying primitives improve understanding architectural styles possibly understanding nature software architectures 
unsatisfied current level understanding architectural primitives compositions styles create architectural assembly language 
believe unified approach modeling architectures levels abstraction architectural primitives architectural elements architectural styles software system architectures possible approach propel systematically economically supporting levels abstraction 
clearly outside scope current architectural assembly language primitives ultimately mapped implementation constructs practical programming languages help create systems provably consistent architectural models 

related influenced number research areas focus conceptual implementation aspects large scale systems 
focus existing research concepts domains architectural styles middleware platforms 
architectural styles architectural styles proposed reduce complexity software design leveraging successful solutions past problems 
styles codify best design practices successful system organizations 
considered economical way developing architecture systems 
architectural styles embody collections constraints define legal configurations components connectors family systems 
time existing styles typically share view software components application specific entities placing constraints functionality behavior internal structure 
formal techniques conjunction styles provide rigor definitions enable analyses styles applications developed styles 
approaches formally modeling styles proposed 
abowd developed approach capturing syntax semantics styles 
method allows compare style terms syntactic semantic constraints approach identifies fundamental elements style provides support implementing styles 
jackson describe analyze architectural styles terms order logic expressions alloy lightweight notation describing structures 
approach unable deal complex configurations architectural elements model distribution concurrency 
propose calculus compositional approach styles 
interesting aspect approach composition low level primitives agents model processes channels model communication paths forms model data create architectural elements components connectors 
major shortcomings approach inability support distribution low scalability agent runs different thread 
le metayer provides graph grammar technique formal counterpart box line diagrams describing software architectures 
approach enables visualization interconnections style elements extend understanding internal organization style elements 
preliminary classification architectural styles highlights nature communication coordination styles 
interesting proposition classification types interactions supported style largely govern characteristics 
classification distinguishes styles basis control data interactions types analyses relevant styles 
architectural styles may differ terms basic interaction patterns require possibly conflicting configurations components connectors combined certain architectural styles single system lead unpredictable mismatches expensive resolve 
initial efforts study architectural mismatches insufficient understanding style incompatibilities cause mismatches 
middleware effective architectural styles development settings requires availability robust middleware technologies 
various middleware platforms emerged corba com enterprise java beans specific forms component interactions rpc distributed transactions security 
middleware platforms provide standard interface lowlevel operating system network services runtime environment deploying components interoperability guarantees 
reflective composable middleware enables developers specify complex interaction patterns applications high level abstractions carefully separating structure behavior 
middleware technologies adopt inflexible approach interaction aspects systems allowing forms interactions components 
approaches understanding fundamental building blocks software architecture styles focus creating libraries adaptable glue code put meet deployment interoperability needs 

details alfa order answer research questions posed propose composition framework styles architectural primitives 
framework includes systematic characterization technique styles static dynamic aspects 
framework contains initial set primitives composing style elements support extension initial set 
framework provides precise implementation technique architectural primitives style elements composed 

characterizing styles architectural styles constrain architectural models syntactically semantically 
general syntactic aspects described terms structure topology semantic aspects captured form behaviors interactions 
propose characterize architectural styles dimensions 

external structure architectural elements allowed style structure denotes interfaces offered elements terms entry exit points required provided services 

allowed topologies architectural elements topological constraints determine elements legally connected system 

allowed behavior style element behavior captures element internal state dynamics modes operation transitions function details processing algorithms implemented element 

types supported interactions style elements allowed specializations interactions captured terms basic service categories communication coordination conversion facilitation 

quantity types data exchanged style elements 
dimensions necessarily capture aspects architectural style form sufficiently expressive foundation study 
approach called alfa assembly language architectures embodies dimensions architectural styles set basic architectural assembly primitives recur various styles may extended composed create advanced style elements entire styles 

basics alfa shows basic alfa primitives visual metaphor defined legend way representing alfa primitives compositions 
structural primitives called particles portals 
particles serve containers functionality autonomous reactive behaviors depending ability control threads execution 
portals mark entry exit points particles conduits interaction loci data control transfer particles 
topological primitives called jumpers provide connectivity particles 
jumpers simple create paths interaction particles additional semantics 
important separation concerns alfa structure behavior alfa primitives 
particle portal provides separate controller specifying behavior 
controllers alfa behavioral primitives handle style specific interaction protocols client server style requirement connection setup teardown 
particles associated portals provide form architectural style elements controllers provide substance allows compose structure alfa primitives independently behavior dynamically alter affecting 
controllers manage life cycle primitives move basic states halted executing suspended 
associated alfa primitive thread provides multi tasking ability 
computation behavior separated interaction behavior style elements providing types con alfa primitives fragments transports 
fragments provide computational logic varies application style transports provide semantics interaction fragments repeats applications 
separation maps nicely dichotomy software architectures 
continuing previous client server example message distribution managed transport controller fragment controller focus application specific processing 
data primitives organize carry contents interaction jumpers particle 
types data primitives available messages calls 
messages carry type identifier payload information calls carry parameters results exceptions addition call type identifier 
messages oneway communication calls way communication sending parameters processing element retrieving results exceptions processing 
interaction primitives various connector dimensions synchronization notification delivery policies particles provide interaction services required particles 
basic interaction primitive dispatcher acts schedule processing incoming messages 
default dispatching done synchronously instantaneously execution thread sender message 

formal model alfa legend entry portal portal controller exit portal portal controller particle transport controller message jumper dispatcher particle fragment controller alfa structural topological primitives modeled lightweight compositional notation alloy suited formal architectural modeling 
alloy simple syntax expressing structures constraints order logic 
alloy models may analyzed automated tools discover inconsistencies model constraints simulate instances model 
alloy helped develop measure confidence alfa structural topological primitives providing automated analysis formal module alfa core sig portal sig particle part sig input output extends portal sig structure particles set particle output particles output input particles input jumper output input particles particles input jumper particles output jumper particles output input jumper input jumper input jumper input output jumper output alloy model alfa primitives descriptions primitives generating valid instances systems models 
analyses helped uncovering constraints loose tight allow correct compositions alfa primitives 
example due vertical layering alfa primitives early versions alloy alfa model considered orientations portals top bottom 
analysis alfa models revealed irrelevant input output portals required 
analysis helped debug models correct 
particular help visualization support alloy analysis tool helps create graphical view instances model 
generic alloy model view may relatively easily compared native alfa view recall 
alloy moving target model alfa primitives 
additions modularity alloy simplified development compositional model alfa 
shows excerpt alloy model describing basic alfa structural topological primitives 
model supports arbitrarily complex interconnections particles jumpers composed simple rules alfa composition input portal may connected output portal jumper system contains non empty set particles 
alloy model provides analyzable description structural topological primitives shown aspects particles portals jumpers providing formal support visual modeling notation developed alfa 
addition static invariants alfa structural architectural dynamism modeled alloy 
full model comprises lines alloy code may 
alfa imposes set simple constraints valid configurations alfa primitives 
sense alfa may considered architectural style 
stylistic constraints described separate alloy model layered top alfa core model excerpt line model shown transports may linked fragments vice versa particle may 
module alfa style 
open alfa core 
part sig transport fragment extends particle 
sig system extends structure 
link particles particles 
particles input jumper output link 
particles transport link fragment 
particles fragment link transport 
particles link 
particles particles link particles particles link alloy model alfa style linked nodes valid system form connected graph 
constraints directly ensure important architectural concerns alfa compositions computation separate interaction modeling analysis system architectures global perspective possible 

implementation alfa chosen model behavioral interaction data primitives alfa alloy suited algorithmic details distribution limited scalability number objects model instance 
selecting modeling language chosen implement alfa primitives directly java ensuring correspondence structural topological aspects captured alloy 
complete implementations alfa primitives 
shows view uml model alfa implementation 
note alfa structural topological primitives particle portal mapped corresponding classes associations uml design particle portal 
jumper primitive represented association jumper portal objects 
stylistic constraints alfa recall enforced class shown class control creation composition alfa primitives form style elements discussed 
complete design implemented java create alfa implementation framework 
alfa implementation framework allowed experiment learn key aspects alfa extension architectural styles constructed top alfa manner completely faithful model 
alfa behavioral interaction data primitives modeled directly java framework helped refine characteristics primitives evaluate suitability composing architectural styles discussed section 
particle owner uses owner output manager portal portal jumper controller dispatcher 
modeling styles alfa dispatcher isactive sendmessage controller message gettype due variety heterogeneity general lack precision architectural styles chose iterative approach developing composition framework styles 
dimensions style client server pipe filter push inputs uses call getexception getresult uml model alfa primitives iteration involved arriving starting set primitives bootstrapping step 
step consisted careful study number existing architectural styles identified fundamental style characteristics dimensions identified section 
leveraged experience designing building implementation frameworks specific set architectural styles 
led small initial set basic alfa primitives modeled alloy implemented java described previous section 
initial set primitives identified iteration involved applying alfa specific architectural styles 
performed iteration different styles client server pipe filter push 
styles representative cross section architectural styles collection embody large number recurring architectural concepts distribution concurrency events implicit invocation dynamism remote procedure calls layering dataflow forth 

style characterization style characterization results step iteration characterization candidate style terms dimensions identified previous section shown 
characterization enables systematic analysis similarities differences styles 
example similarity styles topology clients structure topology behavior interaction data separable components explicit connectors independent servers specialized clients distributed protocol stacks explicit filters pipes input output ports filters sources sinks pipes independent producers explicit distributors channel access subscribers receiver user interface limited component dependencies partially ordered connectivity top bottom relations dynamic creation connections may connections clients servers dynamic creation connections stream pipe filter sources sinks connected port instances producers connected distributors may channels receivers distributors exposed named services data queuing buffering connectors multi tasking mechanisms threads listening server connection setup teardown buffering queuing requests multi tasking mechanisms threads exposed named services stream transformation state machine data buffering pipes content filtering distributors buffering queuing distributors subscription setup content storage expiration asynchronous coordination implicit invocation event interaction direction oriented events propagated recipients server location remote connection communication protocol implicit server invocation data marshalling unmarshalling client call synchronization request response protocol synchronization filter reads writes propagation stream contents sinks distributor location remote connection communication protocol data marshalling unmarshalling distribution policy implicit invocation discrete events data tuples parameterized request typed response streams typed records channel notification subscription request servers connection setup behavior clientserver style topology subscribers producers subscription setup behavior push style 
differences seen client server earlier style requires server listening incoming requests response triggered request style require listening server involves transmission independent requests notifications 
styles formally modeled composed top alloy model alfa primitives 
additionally developed architectural implementation infrastructures styles build java implementation alfa 
key concern constructing implementation infrastructures fidelity particular architectural style 
properties infrastructures performance flexibility frequently desirable initial goal research understand style infrastructure facilitate effective implementation applications style 

modeling implementing styles section describes applications alfa architectural styles order completed 
exception client server brief summaries experiences styles provided due space constraints 
additional details style models implementations 
client server initially alfa visual representation client server style elements created shown 
visual representation helped develop alloy model style elements alfa core style models 
mapping model consisted style elements block abstraction clients servers protocol individual element protocol stack connection 
shows excerpt mapping model extends constraints alfa style system recall adds new alloy signatures connection legend entry portal portal controller exit portal portal controller particle transport controller message jumper dispatcher particle fragment controller client client protocol server client server alfa server protocol client server style elements 
constraints define mappings compositions alfa primitives required client server style elements constraints shown define structure protocol prescribe blocks link protocols form client server system 
additional style model shown formalizes topological constraints clients servers connections 
style elements identified formalized created uml design behavior interaction data aspects style semantics inherent alfa model shown alloy model 
alfa message primitive extended form client server request response primitives 
exception characteristics clientserver satisfied existing alfa primitives 
exception resulted addition interaction primitives alfa 
added primitives inter process communication ipc server location behavior order support ipc data marshalling unmarshalling connection style element 
interaction primitives useful styles involve distribution identified previous software connector dimensions 
primitives implemented java sockets dns host location services object serialization mechanisms respectively 
addition primitives provided data queuing buffering primitive ensure scalability processing client requests 
primitive integrated dispatcher primitive creating queues messages asynchronously dispatches particle controller thread pool 
addition ipc client server style created extension style uses process communication 
extension achieved simply replacing ipc primitives process equivalents 
implementation client server structured 
module alfa cs mapping 
open alfa core 
open alfa style 
sig block 
sig protocol 
sig extends system 
blocks set block 
protocols set protocol 
blocks fragment 
stack blocks protocols 
protocols 
transport 
protocols 
transport 

protocols 
blocks stack link stack link stack 
alloy model alfa client server ing different java packages package shared aspects style package ipc extensions style 
took roughly model alloy loc implement style java loc 
modeling task completed authors implementation performed undergraduate student provided uml design style 
benchmarking application created assess round trip performance processing single object requests client server host 
application compare performance overhead created alfa client server ipc framework native java socket object serialization solution forms basis java client server implementations 
result benchmark consistent expectations unoptimized alfa client server framework runs roughly half fast requires slightly twice bandwidth plain java mechanism 
area concern initialization memory required alfa times required plain java implementation 
entirely surprising object instances running alfa client server infrastructure compared plain java solution 
alfa amenable eliminating entire layers portal particle objects connection objects affecting fidelity style 
currently investigating extent optimizations diminish flexibility compositionality alfa models reversible 
style modeled implemented approach client server style 
style modeled elements brick connection 
brick composed particles transport top bottom sides input output ports brick dialog modeled fragment 
seen shows part alloy model 
module alfa mapping 
open alfa core 
open alfa style 
sig brick 
sig connection 
sig system extends system 
bricks set brick 
bricks 
fragment 
bricks 
transport 
bricks 
transport 
bricks 
transport 
bricks 
transport 

bricks link link link 
bricks 
alloy model alfa mapping style elements alfa primitives 
connection modeled different fragments 
additional primitives required model style controllers extended provide required logic components connectors 
buffering dispatching requests notifications extensions alfa message primitive 
pipe filter style mapped naturally top alfa 
modeled elements block stream descriptor 
block composed particle fragment filter block transport pipe block 
descriptor identifies block connections source destination information precisely identified terms block 
additional primitives required model style fragment controller extended provide required logic filters 
filter provided thread state machine 
alfa message primitive extended form pipe filter record 
versions style modeled implemented involving unbounded buffer single element buffer 
push style mapped similar manner client server style required additional distributor element notification place request response mechanisms clientserver style 
far created process infrastructure push style uses direct push approach variety distributors possible 

evaluation alfa formally modeled analyzed implemented 
furthermore utility potential architectural style assessed developing applications plain alfa 
example moderate sized application approximately java loc developed alfa implementation framework showing performance order magnitude implementation application plain java 
diverse architectural styles successfully grafted top alfa requiring additional primitives process 
section discuss reusability alfa primitives prime importance answering research questions guiding posed 
reusability alfa evaluated different ways reuse alloy models alfa reuse alfa primitives reuse alfa implementation infrastructure 
compositionality alfa formal models enabled support reuse alloy turn allowing reuse alfa model black box modeling architectural style 
style models created layered fashion order systematically reuse primitives 
layers order abstraction level model alfa reuse level particle portal primitive reuse primitives alfa style model composition model style elements alfa primitives model topological constraints style elements 
possible create specialized style models top layers impose additional constraints basic styles 
layered approach ensures consistency reusability alfa style models 
reuse alfa primitives measured terms creating models individual styles 
certain primitives reused specialized style 
additionally basic alfa primitives obtained bootstrapping iteration reused supplementary primitives introduced second iteration 
graphically depicts reusability various alfa primitives styles modeled date 
notice basic primitives call reused data queue achieves reusability supplementary alfa primitives 
controller primitives portal controller transport fragment reused specialization composition 
consistent behavioral nature varies style 
worth mentioning alfa style primitive infrastructure totals documented source lines code spread classes 
style implementation infrastructure involves top alfa implementation 
small sizes style infrastructures attributed high level composition reuse alfa primitives styles 

transport fragment jumper thread dispatcher message call data queue host location remote connection data marshalling alfa primitives specialized composed reuse level alfa primitives 
basic primitives particle call 
architectural styles bring benefits software architectures system development economical way form widely accepted industrial practice 
systematic development styles ensure benefits development applications necessary provide better techniques characterizing composing implementing styles 
presents novel approach called alfa address concerns architectural primitives 
architectural primitives provide lowlevel reuse standard set building blocks designing new styles 
primitives increase understanding essential similarities differences existing styles serve bridge software architectures implementations promoting systematic style infrastructure implementations leveraged develop style applications 
discussed evaluation alfa context different architectural styles spanning wide array architectural choices 
evaluations suggest set alfa primitives kept relatively small high levels reuse obtained styles 
initial results show promise effective style infrastructure implementations 
clearly architectural styles need studied alfa primitives established applicable styles answer questions posed complete confidence 
time believe support contention existing alfa primitives starting point understanding compositionality architectural styles 
goals apply approach additional architectural styles 
foresee challenges endeavor 
despite level reusability achieved far alfa approach remains seen kind results achieved broader set architectural styles 
potential difficulty foresee lack standardized descriptions styles 
styles originate different areas computer science difficult perform evaluation alfa number currently styles 
focused invariant aspects styles identified originators style 
variable aspects style treated extensions modeled implemented way depending variation chosen 
final difficulty deals mechanics approach limited scalability automated alloy analysis tools 
number object instances involved small sized system overwhelm tool difficult perform automated analyses larger systems 
chosen focus alloy tools model checking generating instances alfa style models generating visualizations instances proving correctness underlying models 
authors acknowledge michael contribution preliminary version alfa framework nick implementing architectural style infrastructures java 
research supported national science foundation number ccr 
effort sponsored defense advanced research projects agency rome laboratory air force materiel command usaf agreement number 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency rome laboratory government 
abowd allen garlan formalizing style understand descriptions software architecture acm trans 
software engineering methodology oct pp 

nierstrasz scripting coordination styles proc 
coord eds 
antonio porto roman springer verlag sep pp 

agha adaptive middleware comm 
acm june pp 

aldrich chambers notkin connecting software architecture implementation proc 
icse orlando fl may pp 

alfa web site 
sunset usc edu alfa allen garlan formal basis architectural connection acm trans 
software engineering methodology july pp 

batory malley design implementation hierarchical software systems reusable components acm trans 
software engineering methodology oct pp 

bell newell computer structures reading examples mcgraw hill new york 
berson client server architecture mcgraw hill new york 
garlan allen architectural mismatch reuse hard ieee software nov pp 

hauswirth jazayeri component communication model push systems acm sigsoft software engineering notes proc 
esec fse toulouse france oct pp 

jackson sridharan mechanism acm sigsoft software engineering notes proc esec fse vienna austria sep pp 

javasoft java enterprise edition specification sun microsystems line java sun com ee 
kon case reflective middleware comm 
acm june pp 

le metayer describing software architecture styles graph grammars ieee trans 
software engineering july pp 

macdonald carrington guiding object oriented design proc 
tools melbourne australia nov pp 

medvidovic mehta family software architecture implementation frameworks proc 
montreal canada aug 
medvidovic taylor separating fact fiction software architecture proc 
orlando fl nov pp 

medvidovic taylor classification comparison framework software architecture description languages ieee trans 
software engineering jan pp 

medvidovic modeling software architectures unified modeling language acm trans 
software engineering methodology jan pp 

mehta medvidovic taxonomy software connectors proc icse limerick ireland pp 

microsoft developer network library common object model specification microsoft 
medvidovic adaptable architectural middleware programming small submitted icse 
monroe garlan style reuse software architectures proc 
orlando fl apr pp 

monroe architecture styles design patterns objects ieee software january pp 

object management group common object request broker architecture specification document number revision omg december 
parnas criteria decomposing systems modules comm 
acm december pp 

perry wolf foundations study software architecture acm sigsoft software engineering notes october pp 

shaw clements field guide preliminary classification architectural styles software systems proc 
compsac washington dc aug pp 

shaw garlan software architecture perspectives emerging discipline prentice hall 
taylor component message architectural style gui software ieee trans 
software engineering june pp 

