finding duplication near duplication large software systems brenda baker bell laboratories mountain ave murray hill nj bsb research att com describes program called dup locate instances duplication software system 
dup reports textually identical sections code sections textually systematic substitution set variable names constants 
processing locates longer sections code small modifications 
experimental results running dup millions lines large software systems show dup effective locating duplication fast 
applications include identifying sections code replaced procedures elimination duplication reengineering system include copies debugging 

focuses locating duplication large software system aid maintenance reengineering 
duplication problem large software systems programmers modifications copying modifying sections code 
long known copying code larger complex difficult maintain 
particular bug copy bug fix may copy bug copies 
copying modifying code may occur reasons 
making copy modifying may simpler major revisions introduce new bugs immediately especially programmer making bug fixes wrote original code 
second multiple versions created interactions versions may intractable versions grow apart time eventually may simpler maintain code separately 
third process management may encourage duplication evaluation programmers performance part new code write programmers little incentive rewrite old code 
fourth copies may required need avoid overhead procedure call efficiency considerations 
addresses problem locating exact near duplication code created copying modifying code editor 
code copied modified editor types changes may include insertions deletions lines modifications lines global substitutions 
goal find copies substantially line line global substitutions copy variant sections code evolved different 
software reuse terminology problem locate instances ad hoc black box white box software reuse software system 
problem reverse engineering 
systems examined may legacy systems running millions lines code 
approach find maximal sections code threshold length exactly global substitution names parameters variables constants occurrences changed occurrences pchar changed pc 
case call sections code exact match case parameterized match match 
approach text 
comments white space ignored 
tool find maximal exact parameterized matches program called dup 
find longer sections code copied changed locally middle exact parameterized matches analyzed locate pairs sequences matches match sections code separated small gaps alternatively regions examining scatter plots 
example match contains code fragments taken window system source code 
fragments identical differing indentation ignored dup correspondence variable names pfi pairs structure member names left right 
fragments line sections code match parameter correspondences 
fragment pmin pmax pfi pfi pmin pmax pmin pmax pfi pfi pmin pmax fragment pmin pmax left left pmin pmax pmin pmax right right pmin pmax fragments code source window system 
addition finding possibly distant sections code match dup finds locally repetitive sections code short section repeated immediately different parameters typically names number array numbered parameters repetitive code replaced loop 
sections generated automatically program generator instances created hand specification specification language lacked arrays structures 
programmers dup describes matching sections code correspondence parameter names sections 
programmer wants turn multiple copies code calls new procedure correspondences parameter names sections suggest formal parameters procedure 
hand better leave duplication avoid overhead procedure call time rewriting profile generated shows line code copies occur system maximal exact parameterized matches bug occurs copy code programmer fix copies 
comments location copies code added code 
managers postprocessor computes duplication system estimates code saved duplication eliminated computes files pairs files contain duplication 
information provides new measure software quality system reengineered information guide eliminating duplication 
case repetitive code information dup identifies code rewritten arrays loops 
visualization scatter plot output apparent sections code contain large amounts duplication sections code similar small gaps duplication local distant 
dup postprocessor applied millions lines code large software systems 
complete source window system minus tables including lines code dup located matches lines matches involved code dup estimated input duplication eliminated rewriting 
matches divided groups apparently represents instance copying editing code 
dup run subsystems line production system 
production subsystem lines parameterized matches length lines included code dup estimated subsystem duplication eliminated rewriting 
matches divided groups apparently representing instance copying editing code 
interesting anomalies production system dup 
included unusually complex files obsolete file place bug fix apparently applied copy code copy 
directories lines sys change parameter names line break 
subsystem contained line procedures date calculations identical shorter identifiers 
dealing large systems millions lines code essential tool efficient techniques attain reasonable processing speed 
dup runs fast mhz processor process lines code minutes 
speed comes partly choice text line tool partly efficient algorithms new data structure called parameterized suffix tree 
dup postprocessor implemented non commentary lines lex run unix 
experiments lines production code suggest practice thresholds fifteen lines running time dup code excluding tables linear input size quadratic worst case 
tables depending values data number matches reported quadratic table size 
locally repetitive code lead locally quadratic amount output dominant effect system 
data show production systems contain large amount duplication apparently created copying editing code 
concept maximal matches appears useful just exact matches locating duplication 
dup runs fast useful systems millions lines code 
appears duplication information useful practice finding previously unknown features code maintenance reengineering large systems 
researchers taken different approaches finding commonality code 
approaches included finding common style complexity measures common parse trees common data flow fingerprints files unix diff command data compression graphical user interfaces guis 
methods deficient various reasons 
approaches common style complexity characteristics guarantees exactly code related 
parse tree method exhaustive search slow 
data flow methods applied toy programming languages 
fingerprint approaches aimed finding similar files copies parts files 
diff approaches edit distance take quadratic time designed comparing files slow millions lines code 
data compression methods find cases exact duplication maximal matches certainly parameterized matches local editing changes 
church gui dotplot requires user pick patterns similarity eye patterns dominated repetitive code structure 
section describes definition maximal parameterized matches code leads design useful tool finding duplication 
section describes data structure dup 
section discusses results applying dup software systems 
section contains discussion directions 
exact parameterized matches design dup 
basic tool identifying duplication software program dup finding maximal exact parameterized matches threshold length specified user 
postprocessor analyzes matches 
currently dup processes code written front ends easily written input languages 
section defines maximal exact parameterized matches definitions adapted dup task finding interesting duplication near duplication code 
sections code said maximal exact match lines match exactly character character preceding lines match lines match 
white space comments ignored 
scatter plot helps visualize maximal exact matches 
shows scatter plot exact matches production system file lines lines pruning white space comments minimum match length lines 
approximately diagonal line represents match lines lines strictly diagonal white space comments ignored line numbers original line numbers file 
part plot main diagonal shown match corresponds exactly line segment 
full plot symmetric main diagonal contain line segments match 
case exact matches involving lines file 
sections code parameterized match match function maps set parameters section set param exact matches file 
eters second section text section transformed text second textually substituting occurs section 
comments white space ignored 
example code function maps left right pfi identity parameter candidates copy number pmin 
parameters dup currently defined include identifiers constants field names structures macro names 
keywords candidates parameters 
sections code maximal match match match extended preceding lines lines 
shows scatter plot maximal file exact matches plotted 
threshold lines maximal parameterized matches involving file compared exact matches involving file 
maximal parameterized match lines compared lines exact matches 
sections code match generally look related 
certain circumstances sequences lines consisting case variable statements matches sections code don appear related arbitrary variable names paired line line 
experiments shown effective way avoiding output report matches number parameter pairs half number non commentary lines match generally turned percentage set matches file 
user 
quality output improved pruning closing braces start match 
definition maximality frequency lines containing just closing brace maximal matches closing braces closing braces usually belong code preceding interesting part match 
input code provided dup standard input list file names 
case dup allow matches cross file boundaries 
allow matches cross procedure boundaries files match 
option restrict matches crossing procedure boundaries may added 
postprocessor analyzes matches generates statistics plots 
number kinds output available postprocessor 
match program outputs number matching non commentary lines pairs matching intervals list parameter correspondences match 
gives example window system match fragments extracted 
intervals described file number path name range line numbers 
file number useful visually path names long differ character 
match length specified ncsl means non commentary source lines number lines match excluding comments blank lines 
postprocessor calculates summary information including number matches number non ncsl mit clients mit fonts clients parameters pfi left right output parameterized match excerpt 
commentary lines system involved matches percentage non commentary lines system involved matches distribution match lengths 
calculations straightforward 
postprocessor computes estimate percentage lines eliminated code rewritten alternative methods procedures copying 
estimate derived simple assumption line appears sufficiently long matching sections code gamma occurrences avoided 
example file matches plotted postprocessor estimates potential shrinkage code rewritten avoid parameterized duplication 
computation estimate complicated matches pair lines code overlap intervals 
example possible lines maximal match lines maximal match longer match possible correspondence lines conflicts correspondence lines 
example matches match lines lines 
calculations redundancy handle situation counting extra copy lines ranges 
situations caused conflicting pairings values pairings small integer constants especially zero may values variable section code 
option postprocessor prints profile code showing duplication occurs 
particular identifies intervals sequences lines input involved exactly set matches 
sequence lines prints range line numbers number distinct matches list match numbers 
example lines match lines match matches match lines lines 
situation postprocessor identify intervals sequences line numbers lines involved matches 
count matches distinct matches intervals overlap pair lines 
system contain thousands files duplication may unevenly distributed postprocessor option calculate percentage redundancy number redundant lines file pair files input 
efficiency calculations done intervals participating matches defined preceding paragraph individual lines 
sorting identify files file pairs duplication 
processing matches done group matches appear related sense represent region code copied edited 
classes matches arise follows 
case described matches match parameter conflict middle code 
detected overlaps intervals identical distances second intervals matches 
pairs sequences successive matches relationship detected labeled part longer match conflict parameters 
second code copied modified middle detected dup pair matches pairing sections code close overlapping match pairing lines match pairing lines lines 
pairs matches identified sorting matches endpoint looking pairs matches intervals ffi lines ffi specified user 
grouped labeled apparently due copying modifying section code 
matches arise locally repetitive region code identified grouped labeled 
repetitive region code contains short code segments immediately repeated change parameter names 
repetitions may generated automatically program generators may generated hand result system conventions 
example code generated hand specification language permit fields structures include arrays 
repetitions result locally number matches quadratic number repetitions similarly matches areas repetitive code 
especially helpful group matches user 
see kinds maximal matches expect repetitive region consider exact duplication case successive occurrences lines abc represent lines code 
threshold line dup report matches length positions representing overlapping match length positions representing match length positions representing match copy abc copy abc 
contrast natural factorization abc desirable 
overlapping match example dup deduces region contains repetitive code algorithm replace multiple matches abc type factorization 
matches repetitive region repetitive regions grouped labeled matches repetitive region 
dup finds maximal matches fast 
dup finds matches means efficient algorithm new data structure called parameterized suffix tree 
section gives overview algorithm details proofs correctness 
line input lexical analyzer generates string consisting non parameter symbol zero parameter symbols 
non parameter symbols parameter symbols represented disjoint sets integers 
line transformed list suffix tree string 
non parameter symbol generated represent parameter symbols generated represent manner parameter candidates positions recorded resulting string 
input parameterized matching algorithm string resulting concatenating individual strings non parameter parameter symbols lines 
string called parameterized string string 
encoding strings underlies algorithm 
occurrence parameter symbol replaced 
occurrence parameter symbol replaced distance string previous occurrence parameter symbol 
non parameter symbols left unchanged 
example represent symbols represent parameter symbols string encoded 
string resulting encoding called prev 
significance encoding string match string prev prev 
example string parameter symbols encoding prev string preceding paragraph match 
encoding test matches 
lexical analysis dup builds data structure called parameterized suffix tree suffix tree string representing input 
call ith suffix suffix tree generalization suffix tree data struc ture 
suffix tree compacted trie containing suffixes string suffix tree compacted trie containing prev trie labels arcs children node distinct symbols trie compacted sense labels allowed strings non leaf children 
leaf suffix tree represents prev sense concatenating labels arcs path root leaf yields prev 
suffix tree represented space linear input size provided access value symbol prev calculated dynamically value prev access depth tree 
example 
non parameter symbols parameter symbols 
suffixes encoded tree 
notice parameter pointers change preceding part string shortened 
suffix tree shown 
algorithms construct suffix tree recurse find parameterized duplication complicated detailed description proof correctness analysis worst case performance see 
practice running time dup experimentally linear input length worst case scenario quadratic 
experiments production systems experiments described section run source window system subsystem call ss production system 
case dup maximal matches threshold length postprocessor calculated statistics amount duplication 
matches grouped described section matches placed group matches overlap pair lines separate matches conflict parameters matches overlap intervals lines second intervals lines suggesting entire region copied edited middle 
overlapping matches indicating repetitive regions counted number repetitive regions computed 
parameterized matches source minus tables extent duplication parameterized matches include substantial amount code case 
complete source window system minus files tables including lines code lines removing white space comments dup located matches lines included code program estimated program duplication eliminated rewriting 
matches plotted 
longest match non commentary lines matches non commentary lines 
grouping matches resulted groups 
overlapping matches indicating repetitive regions code distributed repetitive regions 
ss lines lines removing white space comments dup matches length lines included code dup estimated program duplication eliminated rewriting 
matches plotted 
longest match non commentary lines matches non commentary lines 
grouping matches resulted groups 
overlapping matches indicating repetitive code distributed subsystem include machine generated code expected large amounts duplication 
parameterized matches code production system 
regions repetitive code 
may drawn data 
systems contained substantial amount duplication 
grouping matches regions apparently copied editor modified middle significant reduction number separate pieces information examined user 
repetitive regions code number matches region small average 
approach viewing duplication problem finding code copied editor modified just finding matches appears justified grouping repetitive code data 
running times dup quite fast 
processing lines subsystem ss threshold lines took minutes additional time seconds postprocessor 
times represent cpu time mhz processor primary cache kb secondary mb main mb sgi irix 
effect threshold lengths amount duplication reported increases dramatically match lengths small 
small threshold say lines half lines match may closing braces little information value 
match length reduced line lines number matches generated grows quadratically input length due lines consisting closing braces amount output huge meaningless 
reason threshold lengths appear meaningful 
alternative filter closing braces case smaller thresholds reasonable 
individual matches lines examined matches code usually look reasonable 
particular correspondence parameters usually pairs similar tokens small integers small integers strings strings variables variables related names 
recall parameterization algorithm treats parameter candidates principle pair integer string structure member names floating point number 
gives example match non commentary lines source pairings pfi left right 
ss pairs match turned line procedures converting date julian date 
examples ss match non commentary lines pairings non commentary lines pairings 
practice parameters related error checking handling systems studied 
example ss match non commentary lines pairs parameters pair involved error handling 
remainder error code numbers unique strings representing current point execution defensive programming case fault 
visualization anomalies plots large amounts code figures useful managers visualizing complexity interrelationships software system 
scatter plots figures appear dense near main diagonal sparse 
line segments plotted exactly main diagonal scale merely appear main diagonal 
fact line segments near main diagonal represent matches code segments near system file directory 
apparent density near main diagonal somewhat misleading line segments plotted minimum length match corresponds visible mark plot 
away main diagonal matches quite scattered candidates investigate origin duplication 
types interesting features casual browsing scatter plots smaller amounts code unusually complex files obsolete file deleted place bug fix apparently applied copy code copy 
obsolete file noticing extensive duplication files module 
shows scatter plot gap collinear line segments representing long matches 
gap corresponds sections code loop runs array correct loop comment describing correction apparently bug fix applied copy 
discussion directions 
duplication dup 
cases apparent copying done editor copies level indentation copy wrong amount indentation local control structure 
dup ignores indentation case 
course easy way measure instances missed code sections considered duplication person don get picked maximal match search done dup 
dup estimate percentage code shrunk optimistic predicting number copies section code replaced copy size copies generally complete semantic units directly turned procedures cases may valid reasons separate copies efficiency 
obvious question output dup generate procedures parameters automatically input reduce size code 
answer appears negative 
code segments identified matches usually correspond exactly subtrees parse tree program obvious semantic unit programmer need rewrite code hand 
output dup helpful determining scope procedures formal parameters 
problem partially solved dup factor duplication repetitions short blocks code factoring plot file anomaly small gap matches 
abc represent distinct lines code 
real code copies abc parameter changes exactly 
dup identify repetitive regions code overlapping matches needs done algorithms find abc factorization 
challenge aid programmer examining large amount output generated large software system 
graphical user interface probably useful regard 
useful program searches code parameterized match particular code segment 
programmer making bug fix search related sections code require bug fix having obtain maximal matches body code dup 
author developed algorithms generalization boyer moore type algorithm parameterized pattern matching 
sections code reused informally copying may candidates formal reuse library 
especially true copied system 
interesting compare different systems see procedures common 
acknowledgments author brian kernighan calling attention code duplication problem suggesting part encoding done lexical analyzer 
william chang providing code suffix tree construction modified generate suffix trees 
useful discussions ken church ken clarkson bryan giancarlo eric grosse jon andrew hume brian kernighan eric sumner jr 
alpern wegman zadeck 
detecting equality variables programs 
th acm symposium principles programming languages pages 
brenda baker 
theory parameterized pattern matching algorithms applications extended 
proceedings th annual acm symposium theory computing pages may 
brenda baker 
parameterized pattern matching algorithms applications 
comput 
syst 
sci 
appear 
brenda baker 
parameterized pattern matching boyer moore type algorithms 
proc 
sixth annual acm siam symposium discrete algorithms pages january 

measurements program similarity identical task environments 
sigplan notices august 
kenneth ward church jonathan isaac 
dotplot program exploring selfsimilarity millions lines text code 
journal computational graphical statistics june 
susan horwitz 
identifying semantic textual differences versions program 
proc 
acm sigplan conference programming language design implementation pages june 

detecting plagiarism student pascal programs 
computer journal 
howard johnson 
substring matching clone detection change tracking 
proc 
international conf 
software maintenance pages 
ralph johnson october 
personal communication 
brian kernighan rob pike 
unix programming environment 
prentice hall englewood cliffs new jersey 

detecting plagiarism pascal programs 
technical report helsinki univ technology espoo finland 
lab 
information processing science 
udi manber 
finding similar files large file system 
proc 
winter usenix technical conference pages jan 
mccabe 
reverse engineering reusability redundancy connection 
american programmer oct 
mccreight 
space economical suffix tree construction algorithm 
acm 
prieto diaz 
status report software reusability 
ieee software pages may 
rodeh pratt 
linear algorithms data compression string matching 
acm 
scheifler gettys 
window system 
acm transactions graphics 
ziv lempel 
universal algorithm sequential data compression 
ieee trans 
inf 
theory 
