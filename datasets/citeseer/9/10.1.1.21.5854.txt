framework defining logics robert harper furio honsell gordon plotkin edinburgh logical framework lf provides means define logics 
general treatment syntax rules proofs means typed calculus dependent types 
syntax treated style similar general martin lof system arities 
treatment rules proofs focuses notion judgement 
logics represented lf new principle judgements types principle judgement identified type proofs 
allows smooth treatment discharge variable occurrence conditions leads uniform treatment rules proofs rules viewed proofs higher order judgements proof checking reduced type checking 
practical benefit treatment formal systems logic independent tools proof editors proof checkers constructed 
categories subject descriptors logics meanings programs specifying verifying reasoning programs mathematical logic formal languages mathematical logic 
general terms algorithms theory verification 
additional key words phrases typed lambda calculus formal systems proof checking interactive theorem proving 
devoted building systems checking building formal proofs various logical systems 
research area initiated de bruijn automath project purpose formalize mathematical arguments language suitable machine checking 
interactive proof construction considered milner lcf system 
fundamental idea exploit type mechanism ml provide safe means interactively building proofs pp 
ideas subsequently taken paulson lcf petersson martin lof type theory 
coquand huet inspired girard extended language automath impredicative features developed interactive proof checker 
building experience automath lcf nuprl system full scale interactive proof development environment type theory provides support interactive proof construction notational extension abbreviations library management automated proof search 
great logics interest computer science example equational order higherorder modal temporal relevant linear logics type theories set theories type assignment systems operational semantics programming languages 
implementing interactive proof development environment style presentation logics daunting task 
level syntax support provided management binding operators substitution formula term rule schemes 
level formal proofs representation formal proofs defined mechanisms associated proof checking proof construction provided 
includes means instantiating rule schemes constructing proofs rules checking associated contextsensitive applicability conditions 
effort needed support automated search tactics tacticals lcf unification matching forth 
highly desirable develop general theory logical systems isolates uniformities wide class logics school computer science carnegie mellon university pittsburgh pa usa dipartimento di matematica informatica universit di udine udine italy laboratory foundations computer science edinburgh university edinburgh eh jz united kingdom effort expended 
particular important define presentation language defining logical systems suitable basis logic independent proof development environment 
edinburgh logical framework lf intended provide means presentation 
comprises formal system yielding formal means presentation logical systems informal method finding presentations 
important part presenting logics played judgements types principle regarded metatheoretic analogue known propositions types principles 
formal system lf typed calculus order dependent types closely related automath languages 
proof theoretic strength quite low equivalent simply typed calculus 
fact lf type system chosen weak possible provide scope development practical unification matching algorithms applications 
type system levels terms objects types classify objects kinds classify families types 
formal notion definitional equality take fi conversion matters relating encodings logics treated equality 
logical system signature assigns kinds types finite set constants represent syntax judgements assertions rule schemes 
type system sufficiently expressive represent conventions associated binding operators schematic abstraction instantiation variable occurrence discharge conditions associated rules systems natural deduction 
formal structures logical system expressions assertions proofs encoded lf terms type checking rules enforce formedness conditions 
particular proof checking reduced type checking 
treatment syntax lf inspired church martin lof system arities binding operators represented abstractions lf 
presence dependent types allows smoother treatment syntax commonly occurring examples 
treatment rules proofs focuses notion judgement assertion stressed martin lof logical systems viewed calculi constructing proofs collection basic judgement forms 
logics lf introduce judgements types principle mentioned judgements represented types proofs represented terms type representation judgement prove 
structure lf type system provides uniform extension basic judgement forms higher order forms introduced martin lof hypothetical representing consequence schematic representing generality 
exploiting forms possible view inference rules primitive proofs higher order judgements 
allows collapse notions rule proof eliminates distinction primitive derived rules inference 
higher order judgements essential achieve smooth representation systems natural deduction 
having means presentation logic natural correctness presentation 
signature said adequate presentation logical system iff encoding compositional bijection syntactic entities terms formulas proofs logical system certain valid lf terms called canonical forms signature 
compositional mean substitution commutes encoding particular substitution logical system encoded substitution lf relies identification object logic variables variables lf 
adequate mean full introduce additional entities faithful encodes entities uniquely 
flexibility statement adequacy specific logical systems 
example examples consider achieve adequate presentation proofs consequence just pure theorems 
may general achievable interest 
hand lf automatically provides richer structure mere proofs consequence 
example possible express derivability inference rules consider proofs assumption new rules inference 
adequacy theorem ensures additional structure conservative extension underlying logic 
methodology representing formal systems differs substantially nuprl calculus constructions 
concerned problem representation arbitrary formal systems developing internal mathematics specific constructive set theory 
detailed explanations illustrations see nuprl book papers coquand huet 
closer relationship automath project 
hand automath project concerned formalizing traditional math reasoning foundational prejudice 
regard aims lf similar may seen carrying forward aims automath project 
hand approach differs automath seek develop general theory representation formal systems computer 
particular stress notion adequate encoding number formal systems apparent sequel 
organized follows 
section lf calculus state basic metatheoretic properties proofs appendix 
main result section decidability type system essential reduction proof checking type checking 
take granted proof checking logical systems interest decidable 
section lf theory syntax 
consider example logical systems order higher order logic 
section lf theory rules proofs 
take examples order higher order logic 
section discuss related 
appendix devoted proofs metatheoretic results stated section consideration stronger notion definitional equality 
initiated summer reported july symposium logic computer science ithaca new york 
gratefully acknowledge influence martin lof particularly lectures delivered edinburgh spring inspired 
especially indebted members lf project avron ian mason valuable contributions 
david pym don sannella andrzej tarlecki comments earlier drafts 
support research provided science engineering research council united kingdom number gr computer assisted formal reasoning logics modularity esprit basic research action logical frameworks design implementation experiment italian murst defense advanced research projects agency arpa order 
type theory lf lf type theory predicative dependently typed calculus closely related pi fragment language belonging automath family 
lf fruitfully compared systems aut qe martin lof early type theories huet coquand calculus constructions meyer reinhold 
comparisons superficial substantial carried appropriate notational transliteration 
variant lf type theory shall discuss greatest detail essentially subsystem calculus constructions 
study lf type theory greatly benefited previous related systems particular 
purpose section define lf type system state key metatheoretic properties 
systems dependent types notion definitional equality fundamental equivalence relation imposed expressions lf type theory plays central role 
definitional equality handle definitions instantiation schemes essential establishing adequacy theorems 
confused equality may represented logic 
consider version definitional equality fi axioms considered appendix briefly consider strengthening definitional equality relation admit axioms 
principal result section decidability system 
state properties bearing nature representation logical systems lf 
introduce notion canonical form needed proofs adequacy sections 
proofs results stated section deferred appendix 
definition type theory lf type theory calculus deriving typing equivalence definitional equality assertions 
system structured levels terms level objects level types families types simply families level kinds 
objects denoted represent syntactic entities proofs inference rules formal system 
types families types denoted represent syntactic classes judgement assertion forms 
types classify objects families types may thought ary functions mapping objects types 
kinds denoted introduced purely technical reasons order classify families particular distinguished kind type classifies types 
general terms designating kinds types objects denoted assume countably infinite set variables countably infinite sets constants disjoint variables object level constants family level constants 
metavariables range variables range object level constants family level constants 
syntax entities lf grammar kinds type pix families pix am objects mn pi binding operators binding variable second argument position 
usual identify terms differ choice bound variable names 
notions free bound variables binding occurrence variable occurrence capture avoiding substitution may defined accordingly 
write result simultaneously substituting 
free occurrences 
renaming bound variables avoid capture 
write pix occur free avoid excessive parentheses regard successive occurrences associating right adopt convention infix operators 
lf type theory signatures keep track types kinds assigned constants contexts similarly keep track types assigned variables 
distinction signature context introduced pragmatic reasons distinction constant variable 
main differences formed signature variables may occur free types kinds assigned constants formed context types kinds may assigned variables 
syntax signatures contexts grammar signatures sigma hi sigma sigma contexts gamma hi gamma signatures contexts consist finite sequences declarations 
write gamma gamma indicate contexts gamma gamma various versions lf type system strength definitional equality willing consider 
various styles notational 
system consider style trades conciseness readability 
lf type theory formal system deriving assertions forms intended meaning brackets sigma sig sigma valid signature sigma gamma gamma valid context sigma gamma sigma kind gamma sigma gamma sigma kind gamma sigma gamma sigma type gamma sigma write gamma sigma ff arbitrary assertion forms gamma gamma gamma rules deriving formation assertions lf type theory tables 
inference rules lf type theory unspecified notion definitional equality consisting forms assertion gamma sigma definitionally equal kinds gamma sigma gamma sigma definitionally equal families gamma sigma gamma sigma definitionally equal objects gamma sigma relations directly rules conv fam conv obj third define 
definitional equality plays important role usage lf type theory encoding proofs example essential section 
choices definitional equality relations discussed shortly 
valid signatures hi sig empty sig sigma sig sigma dom sigma sigma sig kind sig sigma sig sigma type dom sigma sigma sig type sig valid contexts sigma sig sigma hi empty ctx sigma gamma gamma sigma type dom gamma sigma gamma type ctx valid kinds sigma gamma gamma sigma type type kind gamma sigma gamma sigma pix pi kind table lf type system part simply write gamma sigma ff mean indicated assertion derivable system 
term said typed valid signature context shown kind kind type signature context 
similarly speak terms valid kinds valid types families signature context speak valid contexts relative signature valid signatures 
definitional equality definitional equality relation shall consider extremely simple fi conversion entities levels 
stronger notions definitional equality discussed briefly appendix 
case definition signature context usually dropped 
define definitional equality relation entities levels symmetric transitive closure parallel nested reduction relation defined rules table 
transitive closure parallel reduction denoted 
immediate benefit choice definitional equality diamond property parallel reduction proposition diamond property exists result readily established adapting method tait martin lof system 
follows satisfies church rosser property corollary church rosser property exists valid families sigma gamma sigma gamma sigma const fam gamma sigma type gamma sigma pix type pi fam gamma sigma gamma sigma pix abs fam gamma sigma pix gamma sigma gamma sigma am app fam gamma sigma gamma sigma gamma sigma gamma sigma conv fam valid objects sigma gamma sigma gamma sigma const obj sigma gamma gamma gamma sigma var obj gamma sigma gamma sigma pix abs obj gamma sigma pix gamma sigma gamma sigma mn app obj gamma sigma gamma sigma type gamma sigma gamma sigma conv obj table lf type system part ii refl beta obj beta fam mn app obj am app fam abs obj abs fam pix pix pi fam pix pix pi kind table parallel reduction noteworthy church rosser property holds notion reduction irrespective terms typed 
property lost added term reduces fi ff convertible diamond completed common reduct case certain ill typed terms 
reason introducing context argument definitional equality relation church rosser property general established typed terms 
fundamental properties type system turnstile symbol lf type system reminiscent consequence relation 
theorem bears naturality formal systems may encoded lf proofs adequacy 
theorem derived rules 
weakening gamma sigma ff sigma gamma gamma gamma gamma sigma ff 

strengthening gamma gamma sigma ff gamma gamma sigma ff provided fv gamma fv ff 

transitivity gamma sigma gamma gamma sigma ff gamma gamma sigma ff 

permutation gamma gamma gamma sigma ff gamma gamma gamma sigma ff provided occur free gamma valid type kind gamma 
rule may viewed substitution principle prefer name transitivity stress intended application lf 
derivability strengthening may viewed evidence fact lf assertions martin lof terminology analytic judgements derivability assertion gamma sigma ff depends variables occur ff 
contrast property hold extensional type theories martin lof 
natural algorithm type checking proceeds computing type kind term testing definitional equality type kind 
approach relies property type system theorem unicity types kinds 
gamma sigma gamma sigma gamma sigma 
gamma sigma gamma sigma gamma sigma parallel reduction enjoys strong normalization property reduction sequences arrives normal form theorem strong normalization 
gamma sigma strongly normalizing 

gamma sigma strongly normalizing 

gamma sigma strongly normalizing 
principal goal lf uniform reduction proof checking object logic type checking lf type theory 
lf decidability lf typing assertions paramount importance 
martin lof account kreisel dictum slightly different context particularly appropriate 
recursively decidable closed term formally proves closed formula 
formal counterpart experience decide purported proof proof proposition kreisel words recognize proof see 
church rosser property strong normalization theorem entails decidability definitional equality typed expressions test reduce unique normal forms check identical names bound variables 
theorem decidability assertions lf type system recursively decidable 
canonical forms proofs adequacy shall stronger notion normal form called canonical form 
intention canonical forms type speak long fij normal forms type 
order give definition need lemma characterization normal forms 
normal form kind shape pix pix type normal form types 

normal form family shape piy piy bm normal form types normal form objects variable constant 

normal form object shape normal form types normal form objects variable constant 
proof induction structure terms bearing mind normal form term subterms form arity valid type kind number pi prefix normal form 
arity constant respect valid signature arity type kind signature 
similarly arity variable respect valid context arity type context 
arity bound variable occurrence valid term arity type label attached binding occurrence 
definition occurrence constant variable valid term fully applied respect sigma gamma iff occurrence context form mn arity definition valid term canonical respect valid signature sigma valid context gamma iff normal form constant variable occurrence fully applied respect sigma gamma 
valid signature canonical iff type kind assigned constant canonical respect declarations preceding similarly valid context canonical iff type assigned variable canonical respect preceding declarations 
valid term canonical form iff normal form canonical 
decidable valid term canonical form 
terms convertible canonical form consider example variable functional type 
reason consider stronger notions definitional equality achieve property formed term convertible unique canonical form strengthenings strictly necessary lf encoding methodology 
lemma characterizes canonical forms lemma characterization canonical forms 
kind canonical respect sigma gamma iff form pix pix type canonical respect sigma gamma gamma gamma 
family canonical canonical kind pix pix type respect sigma gamma iff form piy piy bm arity variable constant canonical respect sigma gamma xn gamma gamma canonical respect sigma gamma xn ym bm 
object canonical canonical type pix pix respect sigma gamma iff form arity canonical respect sigma gamma xn proof characterization normal forms definition canonical forms 
note normal form applications constant variable application canonical form product type kind head constant variable fully applied 
shown exists establish gamma sigma sigma gamma canonical form exists term canonical form gamma sigma established 
ensures restriction canonical forms affect existence term canonical type canonical signature context 
theory expressions method representing syntax language inspired church martin lof 
general approach associate lf type syntactic category declare constant corresponding expression forming construct object language way bijective correspondence expressions object language canonical forms suitable type established 
operators typically represented constants domain functional type contrast usual representations syntax programming languages ml prolog 
principal advantage approach enables machinery associated handling binding operators ff conversion capture avoiding substitution shifted metatheory repeated presentation 
course binding operators behave similarly binding operators lf represented way object logics non standard variable binding means necessary 
particular notion judgement explained section enforce context dependent conditions directly expressible lf type system 
see examples 
noted lf type system considerably richer system arities correspondingly better able provide natural representation syntax see example encoding higher order logic 
section consider representation syntax order logic higherorder logic 
sake specificity assume case language individuals arithmetic 
clear method applies signature order higher order logic 
shall treat order logic example detail order illustrate issues involved 
presentation syntax order logic form part signature sigma fol section discuss extension sigma fol represent rules proofs 
similarly presentation syntax higher order logic form part signature sigma hol order logic order language syntactic categories terms stand individuals objects domain quantification formulas stand propositions 
case order arithmetic language terms syntax succ theta ranges set variables order language 
write indicate variable may occur simply result substituting language formulas syntax oe metavariables range formulas order arithmetic 
write indicate variable may occur free simply result substituting free occurrences 
syntactic categories order logic represented lf types individuals propositions 
sigma fol begins declarations type type order represent terms signature sigma fol includes constant term constructor language follows succ theta terms encoded lf function finite set variables mapping terms order arithmetic free variables terms type sigma fol gamma gamma context xn xn standard enumeration encoding defined induction structure terms follows succ succ theta theta note sigma fol declaration type variables variables object logic identified variables lf seen definition example term succ context declaring represents open term succ 
approach syntax fundamental treatment quantification described 
relationship terms order arithmetic lf terms precise theorem theorem adequacy syntax encoding bijection terms order arithmetic free variables canonical forms type sigma fol gamma encoding compositional sense xn term free variables xn terms free variables xn proof encoding function evidently injective maps term canonical form type sigma fol gamma surjectivity proved defining function ffi left inverse function ffi defined induction structure canonical forms follows 
ffi ffi ffi succ succ ffi ffi ffi ffi ffi theta ffi theta ffi lemma canonical form type gamma form constant variable canonical 
arity inspection sigma fol gamma see choices succ theta 
follows types constants ffi total defined 
easy show induction structure ffi compositionality property shown straightforward structural induction order terms 
formulas order arithmetic represented introducing constants formula constructors follows oe formulas encoded lf function mapping formulas free variables lf terms type sigma fol gamma gamma 
encoding defined induction structure formulas follows oe oe clauses assume chosen write note encoding treats quantifiers fact binding operators handled representation functions type example formula encoded term xx approach relies identification object logic variables variables lf 
remarked allows avoid explicitly formalizing machinery associated binding operators 
relationship formulas order arithmetic lf terms precise theorem theorem adequacy syntax ii encoding bijection formulas firstorder arithmetic free variables canonical forms type sigma fol gamma encoding compositional sense xn free variables xn free variables xn proof proof similar terms 
easy show induction structure formulas yields canonical form appropriate type 
consider example case 
induction gamma sigma fol gamma necessarily form gamma follows theorem gamma sigma fol gamma sigma fol encoding clearly injective 
surjectivity established defining decoding map ffi left inverse decoding ffi defined induction structure canonical forms follows ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi oe ffi oe ffi ffi ffi ffi ffi tacitly assume cases quantifiers chosen ffi total follows lemma inspection sigma fol gamma particular fact domain consists canonical forms entails case constants argument abstraction indicated form 
easy show induction structure ffi example ffi ffi ffi compositionality property established straightforward induction structure order formulas 
addition correspondence open formulas open canonical terms treatment syntax provides formal representation notions schematic abstraction instantiation 
specifically may regard canonical term type free variable type incomplete formula 
abstracting respect free variable obtain formula scheme may instantiated application 
rules fi reduction correctly formalize capture avoiding form schematic instantiation 
order achieve effect capture incurring schematic instantiation simply respect variables higher type 
example term oe may viewed representation formula scheme oe understood may instantiated formula free occurrences instantiate scheme apply term type example xx definitionally equal oe xx xx encoding oe higher order logic ways higher order logic see example 
version follow church simply typed calculus form expressions logic 
language simple functional types oe syntax oe oe 
basic types individuals propositions 
language expressions syntax oe ranges countably infinite set variables set constants take succ theta oe oe oe oe oe 
notions ff equivalence substitution fij equivalence defined ff equivalent expressions treated identical 
formed expressions type oe defined relative assignments form oe xn oe different write oe assume occur needs types constants follows succ oe theta oe oe oe oe oe oe oe write oe mean type oe relative expressions type formulas denoted type terms denoted type oe 
functional expressions 
note contrast order logic quantifiers constants functional type object language applied application constructor language higher order logic 
simple functional types represented lf declarations signature sigma hol type note change notation avoid confusion lf type theory 
type type higher order logic types 
type contains base types closed function space constructor 
obvious bijective encoding types canonical forms type sigma hol represent expressions associate higher order logic type lf type objects type encoded constant obj kind type 
expressions type defined set constants corresponding expression constructors higher order logic 
representation quantifiers lf dependent types essential way dependency type matrix domain quantification directly expressed simple types sense adequacy 
constant representing equality similarly indexed type encoded dependent types 
abstraction operator higher order logic written avoid confusion abstraction operator lf application operator explicit 
declarations sigma hol infix operator obj type obj succ obj obj theta obj obj obj obj obj oe obj pis obj pis obj pis obj pis pit obj obj obj ap pis pit obj obj obj contrast church formulation domain range type abstraction explicitly attached representation abstractions applications 
introduce complications proof adequacy domain range types uniquely determined formed expression functional type 
assignment oe xn oe define context gamma obj oe xn obj oe assignment type oe encoding function oe mapping expressions type oe relative lf terms type obj oe sigma hol gamma encoding defined follows oe 
oe oe oe similarly constants oe 
oe oe obj oe oe ee ap oe clause oe 
theorem 
encoding bijection simple functional types canonical forms type sigma hol empty context 
encoding compositional oe 
oe 

assignment type oe encoding oe bijection expressions type oe relative canonical forms type obj oe sigma hol gamma encoding compositional sense expression xn type oe relative assignment oe xn oe expressions types oe oe relative assignment oe oe oe xn oe proof similar order logic 
note second case covers terms formulas functional expressions 
theory rules proofs treatment rules proofs lies heart lf 
approach organized notion judgement assertion 
logics viewed systems generating proofs judgements 
logic characteristic set basic atomic judgements 
example order logic form basic judgement assertion formula true written true 
basic judgements uniformly extended higher order judgements hypothetical schematic general 
judgements hypothetical judgement expresses form consequence provable assumption category language judgement involving variable ranging schematic judgement expresses form generality provable uniformly set proofs logic generated collection rule schemes viewed functions mapping syntactic entities proofs proofs 
higher order judgements central treatment systems natural deduction 
rules pure hilbert type systems take arguments proofs basic judgements shall see rules systems natural deduction may understood proofs higher order judgements arguments 
worthwhile compare hypothetical judgements consequence relations 
traditional logic martin lof notable exception single form basic judgement syntactic indication needed attention focuses notions consequence sets multisets sentences basic judgements 
consequence relations arise variety ways different consequence relations interest logical system 
example order logic truth validity consequence relations differ scoping free variables consequence correct validity interpretation incorrect truth interpretation 
take example propositional modal systems consequence relations interest called somewhat confusingly truth validity expressing consequence world expressing consequence worlds see details 
hypothetical judgements sense general general consequence relations 
additional generality stems ability consider hybrid notions consequence stemming consideration multiple basic judgements 
example modal logic may consider forms basic judgement true valid allow expression consequence valid true instance truth validity consequence relation 
hand hypothetical judgements general fixed interpretation logical system external consequence relation associated provability assumptions 
exact interpretation precise shortly 
hypothetical judgement form available means immediate corresponds consequence relation logical system established adequacy theorem representation far proofs basic judgements proofs consequence concerned 
choice type system lf motivated considering representation rules proofs 
lf methodology representing rules proofs new principle judgements types principle judgements represented type proofs 
basic judgement form associated family types indexed type corresponding syntactic category subject judgement 
example order logic basic judgement form true represented type true true true type constant signature sigma fol higher order forms available correspondences pix type representing category closely related ideas appear automath literature 
example section type proofs boolean expressions considered 
type system exploited encoding inference rules 
primitive rule associated constant higher type arguments values parameters proofs premises 
shall see context sensitive discharge variable occurrence conditions associated systems natural deduction directly representable lf type system contrast explicit side conditions discharge conventions usual order presentations 
way proofs represented terms judgement type proof checking reduced type checking 
judgements types principle proofs higher order judgements lf terms functional type 
significant consequences 
rules simply proofs higher order judgement type 
primitive rules represented constants term higher order judgement type may viewed rule inference 
fact derived rules may representable terms higher type shall see 
lf distinction rules proofs 
second structural properties lf type theory stated section proved appendix provide important information potential encoding consequence 
expect encode case order logic type true delta delta delta true true consequence relation satisfy weakening contraction due properties lf function type 
specifically term type term type true delta delta delta true true true similarly term type true delta delta delta true true true term type true delta delta delta true true weakening contraction satisfied relevance linear logics cases encoding treatment consequence lf changed 
consequence relation induced pure hilbert system system natural deduction correctly captured correspondences 
thesis lf approach pure hilbert systems systems natural deduction adequately represented lf 
pure mean non local applicability conditions rules associated rules proof may applied premises depend assumptions 
see avron discussion point 
stress judgements types principle general propositions types principle curry howard debruijn judgements types principle merely formal expression fact assertion judgement formal system precisely claim formal proof system 
principle correct formal system just associated intuitionistic logic 
argued employing propositions types principle level lf level object logic effect treating higher order judgement forms intuitionistic connectives associated simple dependent variants function space constructor lf 
illustrate ideas consider representation higher order logic lf 
case natural deduction formulation system 
sake brevity consider representative selection rules remaining cases additional difficulties 
order logic give rigorous account proofs natural deduction enable give precise statement adequacy 
roughly speaking proof natural deduction tree nodes labeled inference rules values parameters discharge function assigning rule occurrences hypothesis occurrences specifying hypothesis occurrences discharged rule raa imp oe provided free assumption depends 
provided free assumptions depends 
table rules order logic occurrence 
proof valid iff rule occurrence correct instance rule scheme labels particular side conditions applicability rule satisfied 
illustrative selection rule schemes natural deduction formulation order logic taken table 
presentation employs parenthesis convention rules imp indicate zero occurrences indicated hypothesis discharged application rule 
note hypotheses discharged application explicit rule indicated discharge function 
worth remarking device discharge functions necessitated fact hypothesis occurrences hypotheses discharged inference discharges may leave certain occurrences undischarged 
sake precision proof adequacy proceed give formal definition proofs natural deduction 
introduce language proof expressions pi defined grammar pi hyp raa pi imp pi pi pi pi pi ranges countably infinite set occurrence markers disjoint set order variables 
idea hypothesis discharged certain set occurrences discharged marked particular markers play variable role 
grammar explicitly written binding occurrences cases occurrences bound cases occurrences pi bound cases imp occurrences pi bound occurrences free 
distinguish proof expressions differ choice bound variables bound occurrence markers 
substitute terms 
proof expressions pi 
pi free occurrences 
xm 
proof expression pi xm obtaining pi pi pi omit evident formal definition 
formula proof expression defined follows cases hyp raa oe case imp case case case 
note case necessary appear parameter rule possibility vacuous substitution precludes recovering parameters 
proof expressions valid just lf terms valid 
proof context pair delta finite set variables order logic delta sequence different free variable occurring write fv delta set free variables formulas delta dom delta set delta 
table give rules proving assertions form delta pi read pi valid proof respect proof context delta 
derivability assertion means number general rules obeyed occurrences mark different formulas restrictions rules table obeyed 
say pi valid respect proof context delta iff delta pi holds necessarily consider selection rules table 
delta delta hyp hyp delta pi gamma raa pi delta pi dom delta delta imp pi oe imp delta pi delta pi delta pi delta pi delta pi delta pi dom delta delta pi pi table valid proof expressions formula pi 
minimal proof context exists take set free variables pi take delta list set hyp sub expression pi different appear context exists anyway 
validity preserved substitution sense pi xm valid proof xm respect xm 
terms variables pi 
pi valid proofs 
respect delta pi pi pi valid proof respect delta 
turn presentation order logic lf 
remarked basic judgement form assertion formula logical truth represented including sigma fol declaration true type formula proof order logic represented term type true context providing declarations free variables undischarged assumptions proof 
rules table represented constant signature sigma fol type encodes variable occurrence discharge conditions associated rule 
effect shift burden implementing machinery natural deduction object meta level just shifted burden implementing machinery binding operators object meta level section 
follows give representation rule lf brief justification choice representation 
precise correspondence natural deduction representation lf content theorem 
reductio ad rule represented declaration raa pip true true rule schematic proposition premise term type true 
proposition term type true raa term type true 
implication rule uses non dependent function types model discharge 
represented declaration imp pip true true true oe say formulation imp table takes premise hypothetical proof discharges occurences hypothesis formulation imp lf takes premise proof hypothetical judgement shifting handling discharge lf 
example imp true lf encoding proof oe order logic 
elimination rule universal quantifier represented declaration pif pix true true rule parameters matrix universally quantified proposition represented variable term instantiate represented variable rule takes argument term represents proof universal proposition result term represents proof instance 
example term type true term type true definitionally equal true encoding 
see substitution modeled fi conversion rule conv obj needed show term type true 
variable occurrence condition associated rule represented dependent function space type lf pif pix true true may say natural deduction takes premise schematic proof judgement lf takes premise proof schematic judgement shifting enforcement condition object logic lf 
note similarity encoding imp stemming fact non dependent function space special case dependent function variable occurrence discharge conditions closely related 
existential elimination rule discharge variable occurrence conditions pif pip true 
pix true true true note variable occurrence condition rule matter scoping bound outside scope instance free required existential elimination rule 
encode natural deduction proofs lf terms assume lf variables include order variables occurrence markers 
proof context delta inductively define function delta valid proofs respect delta defined table lf terms follows delta hyp delta raa pi raa delta pi delta imp pi imp true delta pi delta pi delta pi delta pi delta pi delta pi pi delta pi true delta pi cases involving individual variables occurrence markers assumed chosen variable occurrence marker standard enumeration occurring delta respectively 
illustrate encoding consider proof pi imp oe imp hyp oe oe empty proof context 
discharge second occurence imp vacuous 
encoding pi respect empty proof context canonical lf term imp oe true imp true easy verify term type true oe oe sigma fol empty context 
notice vacuous discharge natural deduction proof corresponds non occurrence body innermost abstraction corresponding lf term 
give relationship valid proofs order logic terms lf 
notation delta proof context xm delta gamma delta lf context xm true true theorem adequacy proofs order formula encoding delta bijection valid proofs respect delta canonical terms type true sigma fol gamma delta furthermore delta compositional sense proof contexts delta delta xm delta 
order terms variables pi 
pi valid proofs 
respect delta proof expression pi xm valid respect delta delta pi pi pi delta pi delta pi xm delta pi proof straightforward verify induction structure proof expressions hypothesis theorem delta pi canonical term type true sigma fol gamma delta example consider case delta imp pi 
pi valid proof wrt delta 
induction hypothesis delta pi canonical term type true sigma fol gamma delta result follows 
consider case delta pi 
pi valid proof wrt delta fv delta fv delta 
induction hypothesis delta pi canonical term type true sigma fol gamma delta sigma fol gamma delta permutation fv delta result follows 
routine matter show induction proof expressions delta injective 
establish surjectivity exhibit left inverse ffi delta defined induction structure canonical forms follows ffi delta hyp ffi true gamma delta ffi delta raa raa ffi ffi gamma ffi delta imp true imp ffi ffi ffi delta ffi pi ffi delta ffi ffi delta ffi delta ffi ffi ffi delta ffi delta true ffi ffi pi pi pi ffi delta pi ffi delta ffi pi chosen standard enumeration variable occurrence marker proof context 
ffi delta total defined follows definition canonical forms inspection signature sigma fol definition validity proof expressions 
remains show ffi delta delta pi pi 
proved induction structure pi 
just illustrate proof case implication ffi delta delta imp pi ffi delta imp true delta pi imp ffi ffi ffi delta ffi delta pi imp pi note conventions bound variables bound occurrence markers may assume chosen lf term proof expression 
compositionality encoding established straightforward induction relevant proof expression pi 
important stress way defined set free variables proof crucial correctness adequacy theorem 
example imp hyp valid proof oe 
variable occurs free proof argument formula 
accounted lf encoding resulting term typed 
glossing details usual presentations systems natural deduction appear build assumption domain quantification non empty see lf representation case 
adequacy theorem deals pure order logic language peano arithmetic deal logic equality arithmetic 
way add suitable axiom rule schemes natural deduction system sketched 
example add substitution rule sub induction rule ind succ side condition occur free assumption discharged application rule 
rules lf declarations sub pit piu pi true true true ind pi true 
pix true true succ true straightforward extend formal treatment natural deduction include equality arithmetic 
encoding proofs suitably extended adequacy theorem representation lf obtained 
interesting adequacy theorem general notion extension order logic additional axiom schemes rules inference 
adequacy theorem minimal correctness criterion delineate extent type structure lf may exploited representing forms inference characteristic logical system represented 
example possible express lf derivability rules inference constructing term higher judgement type 
illustrate potential showing rule existential ex oe oe oe ee lam oe oe oe 
oe eq fi oe oe oe 
provided oe occur free assumption ex depends 
provided oe oe 
provided oe oe 
provided oe occur table axioms rules higher order logic elimination rule universal quantifier schroder heister formal counterpart term lf signature sigma fol schroder heister elimination rule specified follows pif pia true 
pix true true true easily mechanically verified term true pix true true type 
term may viewed witness derivability schroder heister rule order logic 
regard derived rules important stress view fact weakening admissible rule lf type theory judgements open concepts 
precludes encoding proof admissibility inference rule principle induction type proofs 
example proof deduction theorem hilbert style formalization order logic encoded lf term usual encoding hilbert systems lf 
closely related point representation rules proof hilbert system rules may applied premises pure theorems rule necessitation hilbert style formulation modal logic typical example 
cases possible exploit multiple judgements achieve faithful representation system 
see details 
higher order logic natural deduction style presentation higher order logic lines case order logic 
difference proves formula relative assignment governing free variables proof assignments explicit writing parentheses formula 
rules equality include fij conversion rule eq governing interaction truth equality 
order logic illustrative selection rules see table 
remaining rules including arithmetic choice additional difficulties 
turn representation higher order logic lf 
depart church natural deduction presentation hilbert type system 
declare constant sigma hol representing basic judgement form asserting formula logical truth 
formulas higher order logic just terms declaration true obj type adequacy theorem syntax higher order logic ensures type obj faithfully represents formulas justified introducing constant 
inference rules lf techniques similar case order logic 
declarations corresponding selection rules table 
declarations corresponding rules governing universal quantifier follows write arguments applications subscripts enhance readability pis pif obj pix obj true ap true ap pis pif obj pix obj true ap true ap remaining rules involve equality relation higher order logic 
notational expedient externalization equality constant obj obj ap ap type pis obj obj obj write infix form 
rule eq follows eq pi obj pi obj true true true rule lam equality abstractions declaration lam pis pif obj 
obj pix obj true true obj fx obj gx obvious notational convention variables type introduced single pi 
fi axioms equality follows fi pis pif obj 
obj pix obj true ap obj fx pis pif obj true obj ap proceeding analogously order case give language proof expressions higherorder logic formal system deriving valid proofs respect proof context delta consisting assignment labeled hypothesis list delta 
lf context gamma delta defined obvious way pattern order logic 
encoding valid proofs canonical lf terms defined manner similar order logic 
adequacy encoding expressed theorem theorem adequacy higher order logic assignment delta labeled set hypotheses free variables declared compositional bijection delta mapping valid proofs formula respect delta canonical lf terms type sigma hol gamma delta related design lf strongly influenced automath martin lof foundations intuitionistic logic 
seminal machine assisted proof initiated de bruijn late subsequently developed workers 
goal develop framework expressing arbitrary mathematical arguments notation suitable checking machine 
approach representing mathematical texts terms typed calculus reducing proof checking type checking 
variety mathematical theories developed checked notably formalization landau textbook mathematical analysis 
considerable importance development machine assisted proof especially nuprl system constable workers calculus constructions coquand huet 
subsequent differs spirit automath concerned formalization constructive mathematics automath sought encompass classical mathematics 
viewed development automath ideas seeks keep clear distinction object meta level seeks handle proof checking wider class logical systems 
remarked earlier martin lof considerable importance design lf 
particularly influenced emphasis notion judgement uniform extension higher order forms 
large extent proceeded parallel 
lf began developed system logical types unpublished see basis intuitionistic set theory 
formally system logical types quite similar lf type theory applications substantially different 
particular concerned encoding formal proofs arbitrary logical systems concerned specifically intuitionistic problems proof normalization 
contrast martin lof uses system logical types foundation set theory consider application general formal systems 
research initiated conducted members lf project 
surveying lf project 
number example logical systems encoded lf 
include different variations hoare logic modal logics various calculi including linear calculus various type theories including lf type system martin lof type theory damas milner type assignment system 
natural deduction approach operational semantics ideas lf developed 
general theory search including unification algorithm lf type theory developed 
elliott developed unification algorithm lf pfenning basis logic programming language lf type theory 
equational variant lf introduced basic model theoretic results 
different implementations undertaken griffin cornell program synthesizer hagino ml pollack ml 
concurrently development lf paulson extended isabelle system ideas similar lf context higher order logic 
constable howe demonstrated nuprl logical framework emphasizing richer type structure nuprl type theory encoding 
felty studied representation logics prolog particular lf type theory 
mendler aczel developing theory system doing interactive mathematics machine similarly general theory logical systems albeit different flavor considered 
feferman proposed theory formal systems general system finitary inductive definitions 
andrews resolution type theory 
journal symbolic logic 
avron simple consequence relations 
information computation 
avron honsell mason overview edinburgh logical framework 
current trends hardware verification automated theorem proving birtwistle eds 
springer verlag pp 

avron honsell mason pollack typed lambda calculus implement formal systems machine 
tech 
rep ecs lfcs laboratory foundations computer science edinburgh university june 
appear journal automated reasoning 
burstall honsell operational semantics natural deduction setting 
huet plotkin 
church formulation simple theory types 
journal symbolic logic 
clocksin mellish programming prolog 
springer verlag 
constable howe nuprl general logic 
logic computation odifreddi ed 
academic press 
constable implementing mathematics nuprl proof development system 
prentice hall 
coquand une th eorie des constructions 
phd thesis universit paris vii jan 
coquand algorithm testing conversion type theory 
huet plotkin 
coquand huet constructions higher order proof system mechanizing mathematics 
european conference computer algebra buchberger ed vol 
lecture notes computer science springer verlag pp 

coquand huet calculus constructions 
information computation february march 
curry feys combinatory logic 
north holland 
de bruijn survey project automath 
seldin hindley pp 

elliott extensions applications higher order unification 
phd thesis school computer science carnegie mellon university may 
feferman finitary inductively logics 
logic colloquium amsterdam north holland pp 

felty specifying implementing theorem provers higher order logic programming language 
phd thesis department computer information science university pennsylvania july 
gordon milner wadsworth edinburgh lcf mechanized logic computation vol 
lecture notes computer science 
springer verlag 
griffin environment formal systems 
tech 
rep cornell university ithaca new york june 
harper equational formulation lf 
tech 
rep ecs lfcs laboratory foundations computer science edinburgh university oct 
harper systems polymorphic type assignment lf 
tech 
rep cmu cs school computer science carnegie mellon university june 
howard formulas types notion construction 
seldin hindley pp 

huet plotkin eds 
logical frameworks 
cambridge university press 
huet unification typed lambda calculus 
theoretical computer science june 
jutting checking landau grundlagen automath system 
phd thesis eindhoven university netherlands 
martin models intuitionistic type theories notion definitional equality 
proceedings third scandinavian logic symposium kanger ed studies logic foundations mathematics north holland pp 

martin intuitionistic theory types predicative part 
logic colloquium rose shepherdson eds vol 
studies logic foundations mathematics north holland pp 

martin constructive mathematics computer programming 
sixth international congress logic methodology philosophy science north holland pp 

martin meanings logical constants justifications logical laws 
tech 
rep di logica matematica dipartimento di matematica universit di siena 
martin truth proposition evidence judgement validity proof 
lecture workshop theories meaning florence italy june 
mendler aczel notion framework framework ltc 
third symposium logic computer science edinburgh july pp 

meyer reinhold type type preliminary report 
thirteenth acm symposium principles programming languages 
milner tofte harper definition standard ml 
mit press 
mitchell type systems programming languages 
handbook theoretical computer science van leeuwen ed vol 
formal models semantics 
elsevier amsterdam ch 
pp 

om petersson smith programming martin lof type theory vol 
international series monographs computer science 
oxford university press 
paulson interactive theorem proving cambridge lcf 
tech 
rep computer laboratory university cambridge nov 
paulson natural deduction proof higher order resolution 
journal logic programming 
paulson foundations generic theorem prover 
tech 
rep computer laboratory university cambridge 
petersson programming system type theory 
tech 
rep programming methodology group university goteborg chalmers institute technology mar 
pfenning logic programming lf logical framework 
huet plotkin 
plotkin call name call value lambda calculus 
theoretical computer science 
prawitz natural deduction proof theoretical study 
almquist wiksell 
pym proofs search computation general logic 
phd thesis edinburgh university 
available edinburgh university computer science department technical report ecs lfcs 
pym wallen proof search pi calculus 
huet plotkin 
reps teitelbaum synthesizer generator manual 
tech 
rep cornell university ithaca new york 
robinson machine oriented logic resolution principle 
journal acm 
proof church rosser property edinburgh lf conversion 
lecture workshop logical frameworks sophia antipolis france may 
mathematical logic 
addison wesley 
schr oder heister natural extension natural deduction 
journal symbolic logic dec 
sch proof theory 
springer verlag 
seldin hindley eds 
curry essays combinatory logic lambda calculus formalism academic press 
combinators terms proof theory 
reidel 
takeuti proof theory 
north holland 
van language theory automath 
phd thesis technical university eindhoven eindhoven netherlands 
metatheoretic properties lf type system appendix outline proofs results section ultimate goal give proof decidability lf type system 
lengthy difficult task surprisingly complicated stronger notions definitional equality 
order simplify proofs variant type theory lacks signatures context validity judgement 
system related lf type system simple way may transfer metatheoretic results directly system 
proof decidability requires number properties established system 
interesting merely technical lemmas simplify proofs 
tool establishing decidability introduce presentation system closer spirit implementations lf 
algorithmic version proof derivability strengthening 
outline possible decidability proof extension lf admits rule definitional equality 
simplified type theory simplify introduce variant lf type theory somewhat easier handle 
eliminate constants signatures favor variables general form context admitting kind type declarations 
eliminate context validity assertion favor derivability gamma type automath 
compensation generalization contexts introduce premises pi rules ensure domain type kind 
definitional equality relation section 
rules system appear tables 
regarding constants lf type system defined section variables simplified system may obtain equivalence theorem theorem gamma context containing declarations form sigma signature 

sigma sig iff sigma type 

sigma gamma iff sigma gamma type 

gamma sigma ff iff sigma gamma ff 
proof induction definitions type systems 
theorems stated section lf type theory obtained immediate corollaries corresponding results simplified type system theorem relating 
valid kinds type type kind gamma dom gamma gamma type var gamma type dom gamma gamma type var gamma type gamma gamma pix pi kind valid families gamma type gamma gamma var fam gamma type gamma type gamma pix type pi fam gamma type gamma gamma pix abs fam gamma pix gamma gamma am app fam gamma gamma gamma gamma conv fam table simplified variant lf valid objects gamma type gamma gamma var obj gamma type gamma gamma pix abs obj gamma pix gamma gamma mn app obj gamma gamma type gamma gamma conv obj table simplified variant lf continued fundamental properties simplified system theorem 
transitivity derived rule gamma gamma gamma ff gamma gamma ff 

weakening permutation derived rules gamma gamma valid contexts declaration occurring gamma occurs gamma gamma ff implies gamma ff 
proof induction structure proofs hypotheses 
proof strengthening property theorem 
lemma simplifies proofs come lemma subderivation property 
proof gamma ff proof gamma type sub proof 

proof gamma type proof gamma type sub proof 

proof gamma type proof gamma sub proof 

gamma gamma 
gamma gamma type 
proof induction structure proof premise 
induction structure proofs show theorem unicity types kinds 
gamma gamma gamma 
gamma gamma gamma particularly easy establish simple nature definitional equality relation 
unicity types kinds church rosser property allow straightforward derivation lemma needed proof subject reduction theorem 
lemma abstraction typing 
gamma pix gamma 
gamma pix gamma 
gamma pix gamma 
gamma pix gamma proof lemma stronger systems definitional equality extremely delicate 
non trivial property prove 
church rosser available proof lemma include part complexity full church rosser proof 
subject reduction theorem stated relation step reduction 
relation defined restriction parallel reduction relation defined table read simplified system obtained dropping rule reflexivity eliminating premises fi rules duplicating remaining rules reduction performed possible subterms 
easy see coincide 
theorem subject reduction 
gamma gamma 
gamma gamma 
gamma gamma proof simultaneous induction structure derivation premises 
illustrate case step typing derivation rule app obj reduction step rule beta obj gamma gamma pix gamma abstraction typing lemma rule conv obj gamma gamma result follows application transitivity 
essential ingredient needed order achieve decidability property strong normalization proof give interesting reasons 
depend church rosser property applicable lf stronger notions definitional equality 
second yields interesting corollary product theorem 
theorem strong normalization 
gamma strongly normalizing 

gamma strongly normalizing 

gamma strongly normalizing 
theorem gamma erase typed curry type assignment system erase denotes untyped term obtained removing type labels abstractions 
proof strong normalization proceeds follows 
start defining dependency translations kinds type families set simple types base type delta type families objects set untyped terms set constants oe oe translation extended contexts natural way 
definition type 
pix 

am pix 
jxj jam jmn jm pix bj jaj jbj jx jm jaj fv jx bj jbj jaj fv note dependency ordinary variables eliminated translation 
idea proof embed lf curry typeable terms untyped calculus way cf 
clauses definition delta 
translation sufficiently faithful preserve number fi reductions strong normalization lf follows strong normalization simply typed calculus 
need lemmas 
lemma 
gamma 

gamma 
proof easy show induction structure proofs similarly 
result follows definition definitional equality 
lemma 
jn jm 
bj jn jbj 
proof induction structure lemma shows translation consistently lemma 
gamma gamma sigma jaj 
gamma gamma sigma jm 
sigma denotes type assignment system curry augmented infinite set rules sigma oe 
oe 
oe proof induction structure proof gamma gamma formed simple types results hold trivially rules applied lf derivation rules var fam var obj 
deal cases pi fam induction hypothesis gamma sigma jbj gamma sigma jaj gamma sigma jbj 
gamma sigma jaj jbj abs fam induction hypothesis gamma sigma jbj gamma sigma jaj gamma sigma jbj jaj 
app fam induction hypothesis gamma sigma jaj 
gamma sigma jm result achieved 
conv fam induction hypothesis gamma sigma jaj lemma gamma sigma jaj remaining cases handled similarly 
extra combinatorial complexity lf terms due possibility reductions type labels lost translation seen lemma lemma 
jaj ja 
jm jm transitive closure untyped calculus 
proof induction proof non trivial cases arise rule applied fi rules pi rules 
case example jm jn jn jm lemma second case lemma suffices result 
prove strong normalization 
lemma implies translation reduct reached translation redex reduction 
translations typed lf terms curry typable terms curry typable terms strongly normalizing conclude infinite reduction sequence start typed lf term 
follows relation definitional equality decidable typed terms church rosser strong normalization gamma iff identical normal forms 
proof corollary induction structure easily seen jm erase lemma subject reduction curry type assignment yield result 
ready prove major result section decidability relations gamma ff 
achieve introducing implementation oriented variant lf equivalent original system may establish decidability simple induction complexity assertions 
algorithmic system defines forms assertion gamma kind gamma gamma type kind type kind gamma kind dom gamma gamma type kind var gamma type dom gamma gamma type kind var gamma type gamma kind gamma pix kind pi kind gamma type kind gamma gamma nf var fam gamma type gamma type gamma pix type pi fam gamma type gamma gamma pix nf abs fam gamma pix gamma gamma am nf app fam gamma type kind gamma gamma nf var obj gamma type gamma gamma pix nf abs obj gamma pix gamma gamma mn nf app obj table algorithmic version lf intended meaning kind normal form kind normal form type context gamma respectively 
rules derivation assertions appear table 
rules function nf yields normal form expression respect leftmost outermost reduction strategy 
rules table nf rule 
temporarily adopt convention rule apply required normal form exists direct consequence soundness theorem normal forms question exist 
easy induction structure terms easily see gamma normal form 
relationship algorithmic system system tables precise theorems 
theorem soundness 
gamma kind gamma 
gamma gamma 
gamma gamma proof induction structure proof premises 
consider case rule application app obj cases dealt similarly 
induction gamma pix gamma rule app obj gamma mn assumption normal form nf exists theorem gamma nf type 
application rule obj gamma mn nf required 
theorem completeness 
gamma gamma kind 

gamma gamma nf 

gamma gamma nf 
proof induction structure proofs premises 
consider cases handled similarly 
conv obj induction hypothesis gamma nf 
gamma type strongly normalizing gamma nf nf church rosser theorem establishes result 
app obj induction hypothesis gamma nf pix gamma nf noting nf pix pix nf nf nf nf nf church rosser theorem result follows application rule app obj 
ready establish crucial lemma lemma 
recursively decided gamma kind 

recursively decided exists gamma 
recursively decided exists gamma proof result follows observations 
algorithmic system deterministic sense proof assertion completely determined form assertion 
second measure complexity assertion gamma kind respectively gamma gamma suitable measure size gamma respectively gamma gamma proof assertion determined proofs strictly smaller measure 
note follows soundness theorem required normal forms exist 
decidability simplified system follows immediately soundness completeness decidability algorithmic system theorem decidability assertions gamma ff recursively decidable 
algorithmic system introduced establish decidability theorem extremely valuable establishing derivability structural rule strengthening 
theorem strengthening strengthening derived rule gamma gamma ff gamma gamma ff provided fv gamma fv ff 
proof relatively straightforward prove analogue strengthening property holds algorithmic system 
prove induction derivations gamma delta holds occur free delta free strengthening property lf type theory follows easily strengthening property algorithmic system keeping mind subderivation property soundness completeness algorithmic system 
example suppose gamma gamma fv gamma fv fv 
completeness gamma gamma nf gamma gamma nf soundness gamma gamma nf 
hand subderivation lemma gamma gamma type reasoning gamma gamma type 
application rule conv obj gamma gamma required 
systems stronger definitional equality relation definitional equality considered far appendix weakest form adequate purposes 
possible consider strengthening relation include rules ffi reduction 
systems environments gamma explicitly mentioned definitional equality assertions order resulting systems behaved 
see analysis lf systems kind 
subsection outline theory lf system arises extension definitional equality considered obtained including reduction 
rules definitional equality stated typed terms typing premises introduced rules 
sample list rules gamma gamma gamma gamma gamma gamma mx gamma fv gamma mx number variations possible version consider inspired van 
system henceforth called clearly advantage allowing smoother treatment adequacy typed term convertible unique canonical form 
note term type sigma fol ruled correct encoding order formula safely treated representation advantage considering simplifies considerably unification problem lf 
preferred study detail elementary system extremely complicated delicate metatheory 
achieving decidability surprisingly difficult task provide deeper insight uses virtues lf principal concern 
difficulties arising establishing decidability pointed section 
sketch conjecture proof decidability adapting techniques van introduced study aut qe 
account lacking respects details specification shape equality rules 
clearly various systems chosen notion fij reduction parallel step modelled typing constraints enforced 
major difficulty handling arises fact church rosser property established arbitrary terms proved typed terms stage great number syntactic properties system available 
reason order results proved essential 
fortunately proof strong normalization weaker system readily adapts 
strong normalization established early soon structural properties proved 
church rosser property available outset proofs unicity domains theorem subject reduction theorem established immediately 
possible establish property elaborate argument previous case 
hand subject reduction theorem shown stage system 
way prove subject reduction assume strengthening rule system prove new system properties far established 
stage church rosser proved typed terms strengthening modification van technique label conversion 
decidability strengthening provable similar way weaker system 
particular appropriate equivalent algorithmic system introduced 
system strengthening proved redundant manner similar prove admissibility strengthening weaker system 
variants obtained altering choice conversion rules shown equivalent 
note added proof written inspired outline carried complete proof church rosser property 
different approach coquand proof church rosser property similar type system 

