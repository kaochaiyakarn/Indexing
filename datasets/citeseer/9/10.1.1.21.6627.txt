polymorphic type system extensible records variants mark jones technical report tr november department computer science university nottingham university park nottingham ng rd england 
cs nott ac uk records variants provide flexible ways construct datatypes restrictions imposed practical type systems prevent flexible ways 
limitations result concerns efficiency type inference difficulty providing accurate types key operations 
describes new type system remedies problems supports extensible records variants full complement polymorphic operations offers effective type inference algorithm simple compilation method 
practical system understood implemented natural extension languages standard ml haskell 
area received great deal attention research community type system described combine features practical framework 
important aspect emphasis places rows construction record variant types 
result small extensions core type system able introduce new powerful operations records features row polymorphism class labels 
products sums play fundamental roles construction datatypes products describe grouping data items sums express choices alternatives 
example represent date product integer components specifying day month year date int theta int theta int simple example sum consider type input events window system alternative indicating character entered keyboard indicating mouse click particular point screen event char point definitions adequate particularly easy practice 
example easy confuse datatype components accessed position product sum programs written way hard maintain 
avoid problems programming languages allow components products alternatives sums identified names drawn set labels 
labelled products commonly known records structs labelled sums better known variants unions 
example date event datatypes described defined date rec int month int year int jg event var char mouse point jg notation captures common feature construction record variant types rows form fjl jg describe mappings associate type distinct labels record types obtained preceding rows symbol rec 
variant types constructed var example fjl jg types respectively form record type rec distinct variants hl hl type var day month year represent values type date event respectively 
polymorphism extensibility unfortunately practical languages flexible operations provide manipulate records variants 
example languages standard ml sml allow programmer select component record type uniquely determined compile time languages support polymorphic operations records general selector function extract value record field 
weakness languages provide real support extensibility general operators adding field removing field renaming field replacing field possibly value different type record value 
previous attempts design type systems records variants support polymorphism extensibility 
important just right application study object oriented database programming languages facilities particularly useful 
summarize key features earlier systems describing proposal 
subtyping subtyping widely techniques building type systems records variants 
define subtyping relation specifying row written contains fields possibly 
intuition example record type rec context value type rec expected conversely variant type var substituted context value type var required 
particular selection operator treated function type ff fjl rec ff operation implemented conceptually coercing rec known type singleton rec fjl extracting required field 
weakness approach information fields record lost harder describe operations record extension 
example observing bounded quantification sufficient cardelli mitchell overriding operator types overcome problem 
row extension motivated studies objectoriented programming wand introduced concept row variables allow incremental construction record variant types 
example record type rec fjl jg fields record type rec field type wand discuss compilation approach supports polymorphism extensibility 
example implementations boxed representations values set labels needed actual component types required 
selection operator type ff rec fjl ff jg ff operations types wand system unchecked example extending row field may add completely new field replace existing field labelled result programs principal types 
flags emy developed flexible treatment extensible records variants natural extension ml 
key feature system flags encode positive negative information indicate fields absent 
concept row variables deal fields presence absence significant particular situation 
example selection operator type ff rec fjl pre ff jg ff pre ff flag indicating presence field type ff row variable representing rest record 
intuitively records emy system represented tuples slot possible label 
type system prevents access undefined components lead directly simple efficient implementation 
predicates harper pierce studied type systems extensible records predicates types capture information presence absence fields restrict attention checked operations 
example writing assertion rows disjoint sets labels selection operator operator type ff fjl rec fjl ff row obtained merging defined harper pierce deal variants type inference compilation provide operational interpretation predicates 
approach record typing motivating examples jones qualified types general framework type inference compilation developed including type system records special case 
achievements refine extend practical system avoiding problems lack general unifiers jones full system result including record restriction type language 
kinds ohori described type system extends sml polymorphic operations records variants 
significantly ohori simple effective compilation method input programs translated target language adds extra parameters specify field offsets 
fact result suggested jones qualified types approaches developed independently 
ohori differs substantially systems kind system allows variables ranging record types annotated specification fields expected contain 
example selection operator operator type ff fjl rec ff main limitation ohori type system lack support extensibility 
type system described combines ideas previous practical type system implicitly typed languages sml haskell 
particular supports polymorphism extensibility records variants type inference compilation 
type system application qualified types extended deal general concept rows 
positive information fields row captured type language row extension negative information reflected predicates 
obvious benefit approach adapt results properties general framework qualified types type inference algorithm compilation method having go back principles 
result considerable simplification presentation specific proofs 
important advantage approach guarantees compatibility applications qualified types 
example type system prototype implementation conjunction type class mechanisms haskell 
remaining sections follows 
section provides general overview new type system detailed formal presentation section 
followed discussions type inference section compilation section 
small extensions core system section shows framework support new powerful operations records variants row polymorphism labels class values 
section concludes pointers 
overview record variant types defined terms rows constructed extension starting empty row 
convenient introduce abbreviations rows obtained way fjl jg fjl fjl jg jg fjl jg fjl note treat rows record variant types equals include fields regardless order fields listed 
basic operations intuitively record type rec fjl ff jg pair component value type ff second component record type rec motivates choice basic operations records correspond directly projections pairing constructor products category theory logic 
complication allow repeated uses label particular row expression fjl ff jg valid appear reflected prefixing types predicate pronounced lacks restricts instantiation rows field ffl selection extract value field rec fjl ff jg ff ffl restriction remove field labelled gamma rec fjl ff jg rec ffl extension add field existing record ff rec rec fjl ff jg basic operations implement number additional operators including ffl update replace update value particular field possibly value different type ff rec fjl fi jg rec fjl ff jg gamma simplify notation assume implicit universal quantification free type variables 
example full type selection operator ff rec fjl ff ff 
ffl renaming change label attached particular field rec fjl ff jg rec fjm ff jg gamma empty record plays important role proper value type rec 
convenient introduce abbreviations construction record values repeated extension specify basic operations variants similar way 
correspond closely standard operations sums category theory logic ffl injection tag value label hl ff var fjl ff jg ffl embedding embed value variant type allows new label hl var var fjl ff jg ffl decomposition act value variant labelled var fjl ff jg 
ff fi 
var fi fi empty variant hi value type var 
sophisticated language constructs example pattern matching facilities record update easily described operations listed 
addition expect practical implementations display predicates implied context appear 
example types include row fjl ff jg valid displaying predicate sense redundant 
see section predicate plays central role implementation basic operations 
implementation details task explain data structures operations described implemented 
focus treatment records particular implementation selection probably frequently basic operation 
naive approach represent record association list pairing labels values 
allow simple implementations basic operations type system providing guarantee search labelled field fail 
major disadvantage allow constant time access record components 
avoid problems assume record value represented contiguous block memory contains value individual field 
select particular component record need know offset field block memory representing languages polymorphic selection usually allow expression form offset value structure full type known compile time 
necessary know position field compile time treat unknown offsets implicit parameters values supplied run time full types records concerned known 
essentially compilation method ohori suggested independently jones 
forget typing issues moment assume records implemented arrays tuples operator implemented function extra parameter supply offset example expression day month year day implemented compiling evaluates expected 
course run time overheads calculating passing offset values extra parameters 
attractive feature system costs incurred extra flexibility polymorphic selection required 
predicate type function signals need extra run time parameter specify offset field labelled inserted record type rec obviously offset locate remove field record type rec fjl ff jg treated ordinal numbers access tag values variant 
extra piece information need implement basic operations 
operations record extension restriction general implemented copying 
optimizations combine multiple extensions restrictions records avoiding unnecessary allocation initialization intermediate values 
example compiler generate code allocate initialize storage record single step sequence individual allocations extensions naive interpretation suggest 
typechecker gathers simplifies predicates generated operator records variants 
example today value type date expression today month generate single constraint int year int 
predicates involving rows structure known compile time easily discharged calculating appropriate offset value 
obviously compiler information produce efficient code inlining specializing selector function month 
predicates discharged section code reflected type assigned 
example definition indicate full type day month inferred type rec int month int jg bool expect definition accepted compiler sml requires set labels record uniquely determined program context 
meaning phrase defined loosely informal note definition sml 
ideas way precise definition acceptable sml inferred type contain predicates 
programs written restrictions language type system offer levels performance sml 
possible general treatment record operations result compiled programs unwanted offset parameters experience prototype implementations help substantiate dismiss concerns 
case simple steps taken avoid problems 
example compiler reject definition inferred type containing predicates explicit type signature signal programmer acceptance 
closely related monomorphism restriction haskell proposals value restriction sml 
formal presentation section provides formal presentation type system particular ingredients ffl theory qualified types provides general framework describing restricted polymorphism overloading 
current application constraints capture assumptions occurrences labels rows 
ffl higher order version hindley milner type system originally introduced study constructor classes 
things provides simple way introduce new constructs rows records variants need special ad hoc syntax 
split presentation sections kinds section types constructors section predicates section typing rules section 
kinds important aspects described kind system distinguish different kinds type constructor 
formally set kinds specified grammar kind types row kind rows function kinds intuitively kind represents constructors take kind return kind row kind new system part type system development constructor classes 
types constructors kind collection constructors including variables ff kind constants ff variables applications types usual collection types represented symbol just constructors kind purposes assume set constant constructors includes writing indicate kind associated constant function space row empty row fjl jg row row extension rec row record construction var row variant construction example ffl result applying function space constructor types type functions written conventional notation 
ffl result applying rec constant empty row kind row type rec kind ffl result applying extension constructor fjl jg type row row usually written fjl jg obtained extending field labelled type note include extension constructor different label avoid problems need prohibit partial application extension constructors 
kind system ensure type expressions formed 
convenient annotate individual constructors kinds need practice programmer supply annotations 
calculated automatically simple kind inference process 
consider rows equivalent include fields regardless order listed 
described formally equation fjl jg fjl jg extends obvious way equality arbitrary constructors 
purposes sections define membership relation describe particular field appears row fjl jg fjl jg restriction operation gamma returns row obtained deleting field labelled fjl jg gamma fjl jg gamma fjl gamma jg easy prove operations defined respect equality constructors confirm intuitions interpretation showing fjl gamma jg 
predicates syntax rows allows examples fjl jg single label appears field 
useful applications appropriate records variants allow field label 
clearly additional mechanisms needed enable specify type form rec fjl jg example valid row contain field labelled way achieve sophisticated kind system sets labels kinds single row kind 
example rows field labels represented kind fl essentially approach adopted ohori 
unfortunately complicated try extend deal extensible rows 
particular need assign families kinds indexed label sets constructor constants introduced previous section fjl jg 
flg rec var alternative adopt theory qualified types predicates capture side conditions required ensure type expression valid 
fact single form predicate needed purpose row nl predicates intuitively predicate read assertion row contain field 
precisely explain meaning predicates entailment relation defined 
fg fjl predicate entailment rows 
tion rules understood proof predicates set hold easy prove relation defined respect equality constructors 
typing rules damas milner distinguish simple types described type schemes oe described grammar oe ae ff ae type schemes ae qualified types restrictions instantiation universal quantifiers polymorphism described encoding required constraints set predicates qualified type form set free type variables object written tv 
term language just core ml implicitly typed calculus extended constants construct described grammar assume set constants includes operations values required manipulating records variants described section constant assigned closed type scheme oe typing rules 
judgement form oe represents assertion predicates hold term type oe assumptions provide types free variables 
just standard rules qualified const oe var oe oe ef ae ae fg ae ae ff oe ff oe oe ff tv tv ff oe oe oe typing rules 
types extending rules damas milner account predicates 
note uses symbols ae oe rules particularly important restricting application particular classes types type schemes 
type inference section provides formal presentation type inference algorithm system 
important feature section account non trivial equalities row expressions unification 
unification insertion unification standard tool type inference example ensure formal actual parameters function type 
formally substitution unifier constructors sc sc general unifier unifier constructors written form rs substitution rules provide algorithm cal id id bind ff ff ff ff ff tv apply ud ud cd row ir ir gamma fjl jg ui kind preserving unification 
unifiers writing assertion unifier constructors rules standard suitable unifying row expressions list exactly components exactly ordering 
fourth rule row needed deal general problems row unification 
understand rule works consider task unifying rows fjl jg fjl jg distinct labels distinct row variables 
goal find substitution fjl sr jg jg jg fjl sr jg clearly row left includes field row right includes field 
types equal purposes restrict attention substitutions substitutions map variables ff constructors corresponding kind choose substitution insert missing fields rows respectively 
particular case assuming tv choose fjl jg fjl jg new type variable 
generally say substitution inserter row sr general inserter inserter written form rs substitution rules define algorithm calculating writing assertion inserter row note invar fjl jr jg tv new fjl jg fjl jg kind preserving insertion 
rule unification algorithm algorithms mutually recursive 
important properties algorithms soundness completeness captured result theorem unification insertion algorithm defined rules calculates unifiers exist 
algorithm fails precisely unifier inserter exists 
type inference algorithm unification algorithm described previous section type inference algorithm qualified types type inference algorithm type system 
completeness include definition algorithm rules 
emy rules understood attribute grammar typing judgement ta type assignment term inherited attributes predicate assignment type substitution synthesized 
rule uses auxiliary function var ff fi new fi ff fi ff ta ta ff ff new ut ta ef ff ff ff new ta ff 
ta oe gen ta ta oe ta type inference algorithm calculate generalization qualified type ae respect type assignment defined gen ae ff ae fff tv ae type inference algorithm sound complete respect original typing rules 
theorem algorithm described rules calculate principal type term assumptions algorithm fails precisely typing compilation previously described informally programs involving operations records variants compiled executed language adds extra parameters supply appropriate offsets 
section shows process formalized including calculation offset values 
compilation translation general treatment qualified types programs compiled translating language adds extra parameters supply evidence predicates appearing types values concerned 
process described extending typing rules judgements form oe include original source term possible translation change switch predicate sets predicate assignments symbol represents set pairs variable appears twice 
variable corresponds extra parameter added compilation evidence corresponding predicate required current setting predicates expressions form evidence offset field labelled inserted 
calculation evidence described rules fv fjl predicate entailment rows evidence 
direct extensions earlier rules predicate entailment 
intuitively derivation tells evidence predicate environment assumptions valid 
second rule interesting tells find position label inserted row fjl jg ffl comes total ordering labels required offset offset ffl comes need offset account insertion general rules calculate offsets fixed natural number fixed offset variables simplicity assumed boxed representation record components occupy amount storage 
quite easy allow varying component sizes replacing calculation size 
reasons space omit complete description translation restrict describing rules account offset parameters 
variation function application ae ae tells need supply suitable evidence translation program type qualified predicate second rule analogous function abstraction allows move constraints predicate assignment inferred type fv ae ae rules direct extensions combined simple extensions rules construct translation term source calculus 
extensions type system described previous sections offers flexible fairly conventional set operations records variants 
section consider extensions original system 
section describes generalization record variant operations include class extensible case statements 
section shows system modified allow labels treated firstclass values 
row polymorphism working general notion rows provided elegant way deal common structure record variant types 
seen compelling examples previous sections essential consider rows separately records variants just defined completely independent sets record variant types 
applications ability separate rows records variants offers significant benefits 
illustrate consider basic operations discussed section 
example generalize rules category theory logic decomposing sum deal ary sums obtain rule terms records variants rule provides method decomposing variant represented sum record functions represented hypotheses suggests general operation variant elimination ff rec ff var ff construct defined follows fjl jg fjl jg behaves particular kind map operation rows replacing component type type form example operation may prove useful consider type integer lists obtained fixpoint functor data var rec cons rec hd int sum list integers calculated general catamorphism cata nil cons hd tl example clear alternative case construct languages haskell sml 
languages builtin part syntax allows treat case constructs class extensible values 
similar way adapt rules constructing sums decomposing constructing products functions involving records variants 
full set operations specified type signatures ff rec ff var ff ff var ff ff var ff var ff rec ff ff rec ff ff rec earlier representations records variants easy implement operations builtin primitives 
technical difficulty face approach extending treatment unification deal uses constructs 
turns straightforward potential complications caused presence empty rows 
example unifying rows simply unify empty direct relationship precisely obtain general unifiers constructs need restrict non empty rows 
alternatives consider 
example obvious approach empty row original type system 
satisfactory solution adopt ff construct types defined obvious dual ff construct previously 
kind system distinguishes empty nonempty rows 
leave investigation topic 
class labels previous sections considered labels refer fields part basic syntax language 
result describe selection record family functions rec fjl ff jg ff function choice label attractive approach allow primitive operations records variants parameterized labels 
extend type system described previous sections accomplish treating selection example single function type rec fjl ff jg label ff requires extension kind system section new kind lab new type constant label kind lab 
intuitively type form label contains unique label value 
parameter important establishes connection types label values nullary label type provided way express necessary typing constraints 
dispense family extension constructors defined section replacing single constructor constant fj jg lab row row need generalize lacks predicate section place relation takes row label kind lab 
defined way interpretation offset value underlying implementation 
generalize basic operations records variants similar way 
example expression involves uses extension assigned type fjx int label label rec fjx int int jg knowledge implicitly explicitly typed record variant calculi consider type system labels treated class values 
increases expressiveness system quite dramatically interesting applications new features 
remains see practice implications language design leave topics 
described flexible polymorphic type system extensible records variants effective type inference algorithm compilation method 
prototype implementations written sml haskell implementation records added hugs implementation haskell 
experience date shows implementations works practice 
number areas object systems 
potential application rows type system object oriented programming 
example constructor obj kind row describe objects row methods 
sophisticated basic operations 
type system support record append database join original motivations ohori 
approach adopt ideas harper pierce choosing appropriate form evidence predicates described section 
new approach datatypes 
languages sml haskell provide facilities defining new datatypes overlap extent mechanisms described 
unifying combining different approaches obviously useful long term goal developing general framework extensible datatypes 
supported part epsrc studentship 
colleagues colin taylor graham hutton functional programming group nottingham valuable contributions described 
abadi cardelli 
semantics object types 
proceedings th symposium logic computer science pages july 
bruce 
paradigmatic object oriented programming language design static typing semantics 
journal functional programming april 
cardelli 
semantics multiple inheritance 
kahn macqueen plotkin editors semantics data types volume lecture notes computer science pages 
springerverlag 
full version information computation 
cardelli 
extensible records pure calculus subtyping 
research report dec systems research center jan 
carl gunter john mitchell editors theoretical aspects object oriented programming types semantics language design mit press 
cardelli mitchell 
operations records 
mathematical structures computer science 
carl gunter john mitchell editors theoretical aspects objectoriented programming types semantics language design mit press available dec systems research center research report august proceedings mfps springer lncs volume 
damas milner 
principal type schemes functional programs 
proceedings th acm symposium principles programming languages pages 
harper pierce 
record calculus symmetric concatenation 
proceedings th annual acm symposium principles programming languages orlando fl pages 
acm jan 
extended version available carnegie mellon technical report cmu cs 
harper pierce 
extensible records subsumption 
technical report cmu cs school computer science carnegie mellon university feburary 
hindley 
principal type scheme object combinatory logic 
transactions american mathematical society december 
hofmann pierce 
unifying framework objects 
journal functional programming 
previous versions appeared symposium theoretical aspects computer science pages title view objects subtyping preliminary report university edinburgh lfcs technical report ecs lfcs 
jones 
qualified types theory practice 
distinguished dissertations computer science 
cambridge university press 
jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming jan 
earlier version appeared proc 
fpca 
leroy 
polymorphism name continuations 
principles programming languages pages 
acm press 
meijer hutton 
bananas space extending fold unfold exponential types 
proc 
th international conference functional programming computer architecture 
acm press san diego california june 
milner 
theory type polymorphism programming 
journal computer system sciences august 
milner tofte harper 
definition standard ml 
mit press 
mitchell honsell fisher 
lambda calculus objects method specialization 
ieee symposium logic computer science june 
ohori 
polymorphic record calculus compilation 
acm transactions programming languages systems nov 
preliminary version proceedings acm symposium principles programming languages title compilation method ml style polymorphic record calculi 
ohori buneman 
type inference database programming language 
acm conference lisp functional programming pages 
acm 
peterson hammond 
report programming language haskell non strict purely functional language version 
technical report yaleu dcs rr yale university department computer science may 
pierce turner 
simple foundations object oriented programming 
journal functional programming apr 
preliminary version appeared principles programming languages university edinburgh technical report ecs lfcs title objectoriented recursive types 
emy 
programming objects ml art extension ml record types 
hagiya mitchell editors theoretical aspects computer software volume lecture notes computer science pages 
springer verlag april 
emy 
type inference records natural extension ml 
gunter mitchell editors theoretical aspects object oriented programming type semantics language design foundations computing series 
mit press 
early version appeared sixteenth annual symposium principles programming languages 
austin texas january 
emy 
typing record concatenation free 
gunter mitchell editors theoretical aspects object oriented programming 
types semantics language design foundations computing series 
mit press 
robinson 
machine oriented logic resolution principle 
journal association computing machinery january 
wand 
complete type inference simple objects 
proceedings ieee symposium logic computer science ithaca ny june 
wand 
corrigendum complete type inference simple objects 
proceedings ieee symposium logic computer science 
wand 
type inference record concatenation multiple inheritance 
information computation 
preliminary version appeared proc 
th ieee symposium logic computer science 
wright 
simple imperative polymorphism 
lisp symbolic computation december 

