functional nets martin odersky ecole polytechnique de lausanne 
functional nets combine key ideas functional programming petri nets yield simple general programming notation 
theoretical foundation join calculus 
presents functional nets reviews join calculus shows relate 
functional nets way think programs computation born fusion essential ideas functional programming petri nets 
functional programming basic computation step functional net rewrites function applications function bodies 
petri nets rewrite step require combined presence inputs case inputs function applications 
fusion ideas di erent areas results style programming time simple expressive 
functional nets theoretical foundation join calculus 
relation join calculus classical functional programming calculus 
functional nets constitute programming method derives simplicity elegance close connections fundamental underlying calculus 
calculus ideally suited basis functional programs support mutable state indirectly nondeterminism concurrency 
pair join calculus functional nets broader applicability functional imperative concurrent program constructions supported equal ease 
purpose fold 
aims promote functional nets interesting programming method wide applicability 
sequence examples show functional nets concisely model key constructs functional imperative concurrent programming lead better solutions programming problems conventional methods 
second develops concepts link programming notation functional nets underlying calculus 
scale calculus programming language essential means aggregating functions data 
introduce qualified definitions new syntactic construct revised proc 
european symposium programming lecture notes computer science springer verlag 
aggregation 
context functional nets qualified definitions provide flexible control visibility initialization conventional record object constructors 
excellent fit underlying join calculus maintain convention value name 
object join calculus extension join calculus qualified definitions 
extension comes surprisingly low cost sense calculus needs changed minimally concepts carry unchanged 
contrast conventional record constructors create anonymous values odds name passing nature join 
notation writing examples functional nets derived funnel small language maps directly object extension join 
implementation funnel publicly available 
languages form join calculus express constructs functional nets di erent way join jocaml 
chosen develop new notation wanted support functions objects way simple possible 
program notation functional nets intended strongly typed sense type errors detected leading unspecified behavior 
leave open type checking done statically compile time dynamically run time 
examples mention types form checkable standard type system recursive records subtyping polymorphism 
rest structured follows 
section introduces functional nets qualified definitions 
sections show common functional imperative programming patterns modeled functional nets 
section discusses concurrency shows functional nets model wide spectrum process synchronization techniques 
section introduces object join calculus formal foundation functional nets 
section discusses programming notation previous sections encoded calculus 
section discusses related concludes 
example consider task implementing place bu er connects producers consumers data 
producers call function put deposit data bu er consumers call function get retrieve data bu er 
datum bu er time 
put operation bu er full blocks bu er empty 
likewise get empty bu er blocks bu er full 
specification realized simple functional net def get full empty put empty full previously named silk original published version 
changed name possible confusion concurrent dialect cilk 
net contains definitions define functions 
functions put get meant called producer consumer clients bu er 
full empty reflect bu er internal state called bu er 
function put takes single argument write function argument surrounding parentheses put put 
admit functions get take argument imagine occurrence function augmented implicit empty tuple argument get get 
equations define rewrite rules 
set function calls matches left hand side equation may rewritten equation right hand side 
symbol denotes parallel composition 
call fork appears equation right hand side join appears left 
consequently left hand sides equations called join patterns 
instance equation get full empty states concurrent calls get full value calls may rewritten expression empty 
expression returns get result parallel calls function empty 
get empty return result sole purpose enable second rewrite rule calls put proceed 
call result returning functions get synchronous functions empty called asynchronous 
general leftmost operand fork join return result 
function symbols left hand side asynchronous 
likewise operands fork asynchronous result discarded 
easy interpret second rewrite rule put empty full rule states concurrent calls put empty may rewritten full result part expression unit value signals termination carries interesting information 
clients bu er need initialize calling empty 
simple usage place bu er illustrated example 
def get full empty put empty full put val get val print put val get val print put empty initializer empty client processes composed parallel 
process puts number bu er 
processes try get bu er contents put back modified value 
construct val get evaluates right hand side expression get defines name resulting value 
defined name remains visible expression semicolon 
contrast written def get defined function time called call turn get 
definition evaluate 
usual semicolon expressions stands sequencing 
combined expression print put prints argument puts bu er 
sequence client processes example execute arbitrary controlled bu er rewrite rules 
ect running example program output numbers depending client process came 
objects previous example mixed definition place bu er client program 
better de coupling obtained defining constructor function place bu ers 
constructor program written follows 
def er def get full empty put empty full get put empty val get put er put val get val print put val get val print put defining equations place bu er local block pair locally defined functions get put returned 
parallel returning result bu er initialized calling empty 
initializer empty part constructor function clients longer call explicitly empty defined local block returned result block 
er defines object externally visible methods get put private methods empty full 
object represented tuple contains externally visible methods 
representation feasible long objects externally visible methods objects methods resulting long tuples quickly unmanageable 
furthermore tuples support notion subtyping object substituted fewer methods 
introduce records suitable means aggregation individual methods accessed names subtyping possible 
idiom record access standard 
denotes record denotes field named call form qualified names 
idiom record creation conventional 
programming languages records defined enumerating field names values 
notion interacts poorly forms definitions employed functional nets 
functional net wants export functions defined join pattern functions remain hidden 
necessary call hidden functions part object initialization 
streamline construction objects introduce qualified names record accesses record definitions 
instance re formulation er function qualified definitions 
def er def get full empty put empty full empty val buf er buf put val buf get val print buf put val buf get val print buf put note occurrence qualified names get put left hand side local definitions 
definitions introduce local names local name denotes record fields get put local names empty full denote functions 
note naming arbitrary name equally 
note empty full part record returned er accessed internally 
identifiers occur period join pattern define new record names defined enclosing definition 
possible form qualified definition add new fields record defined 
notes syntax assume order precedence strong weak 
function application selection bind strongest followed parallel composition followed equal sign followed comma followed semicolon 
function application selection left associative associative right 
standard operators fall function application usual order precedence 
precedence risks unclear ll parentheses disambiguate 
syntactic convenience allow indentation separators inside blocks delimited braces 
significance indentation braces equivalent parentheses 
rules follows block delimited braces semicolon inserted front non empty line starts indentation level symbol opening brace provided symbol insertion point start expression definition 
modification rule inserted semicolons separate def blocks yielding def def say def blocks merged single block def 
top level program treated block delimited braces indentation significant 
rules er example alternatively written follows 
def er def get full empty def put empty full empty val buf er buf put val buf get val print buf put val buf get val print buf put common special case qualified definition definition record externally visible methods def 

idiom abbreviated omitting qualifier writing definitions 
def 

functional programming functional net contain occurrences purely functional program 
example factorial function written functional net 
def factorial factorial minor syntactical details distinguishes program program written functional language haskell ml 
assume evaluation function arguments strict call evaluated value passed functional programs recursive data structures trees lists 
lisp scheme data structures primitive expressions ml haskell definable algebraic data types 
functional net notation primitive tree type constructs defining algebraic data types pattern matching values 
need constructs represented records visitor pattern 
visitor pattern object oriented version standard church encoding algebraic data types 
visitor encodes branches pattern matching case expression 
represented record method branch 
instance visitor lists methods def nil def cons xs 
intention translation pattern matching call nil method cons method visitor depending kind list encountered 
encountered list resulted cons need pass arguments original cons visitor cons 
assume defined method match lists takes list visitor argument behavior just described 
write isempty test function lists follows def isempty xs xs match def nil true def cons xs false generally function lists defined terms match 
order define record represents list need provide match method 
match defined 
clearly behavior depend called empty non empty list 
define list constructors nil cons di erent di erent implementations match 
implementations straightforward val list def nil def match nil def cons xs def match cons xs case match simply calls appropriate method visitor argument passing parameters 
chosen wrap nil cons constructors record named list 
list acts module provides constructors list data type 
clients list module construct lists qualified names list nil list cons 
example def concat xs ys xs match def nil ys def cons xs list cons concat xs ys note qualification list lets distinguish constructor cons defined list visitor method cons defined locally 
imperative programming imperative programming extends purely functional programming addition mutable variables 
mutable variable modeled cell object constructed follows 
def initial def value state state update state state state initial structure definitions similar place bu er section 
synchronous functions value update access update variable current value 
asynchronous function state serves remember variable current value 
cell initialized calling state initial value 
simple example val count def increment count update count value increment building cell objects express usual variable access notation imperative languages simple syntactic expansions var expands val def value expands update count example written conventionally follows 
var count def increment count count object oriented design programming area object characterized having state behavior identity 
encoding objects expresses state collection applications private asynchronous functions behavior collection externally visible functions 
identity 
functional net objects observable identity possible define method eq returns true argument object current object 
sameness interpreted created operation structural equality 
assuming hypothetical eq method added objects possible write val eq true eq false 
functional nets predefined operation tests names 
possible implement eq method 
attempt needs refined 


gn fig 

analogy petri nets def def eq flag flag true flag flag result flag flag false flag false defines generator function objects eq method tests identity 
implementation eq relies helper functions flag 
calls eq method flag false asserted 
trick eq method asserts flag true time tests flag true 
current object object test yield true 
hand current object object di erent test yield false provided time ongoing eq operation object 
arrived solution problem provided prevent overlapping eq operations objects 
section develop techniques 
concurrency previous sections shown functional nets express sequential programs functional imperative style 
section show utility expressing common patterns concurrent program execution 
functional nets support resource view concurrency calls model resources expresses conjunction resources definition acts rewrite rule maps input sets resources output sets resources 
view similar petri nets 
fact direct analogies elements petri nets functional nets 
illustrated 
transition petri net corresponds rewrite rule functional net 
place petri net corresponds function symbol applied formal actual arguments 
token petri net corresponds actual call execution functional net analogy petri nets call applications asynchronous functions tokens 
basic execution step petri net firing transition precondition going places tokens 
quite similarly basic execution step functional net rewriting rewrite rule precondition function symbols rule left hand side matching calls 
functional nets considerably powerful conventional petri nets 
function applications functional net arguments tokens petri net unstructured 
second functions functional net higher order functions arguments 
petri nets self possible 
third definitions functional net nested inside rewrite rules evolving net topologies possible 
petri net hand fixed connection structure 
colored petri nets pass parameters arrows connecting places transitions 
nets equivalent order functional nets global definitions 
express higher order evolution aspects functional nets 
asperti translated join calculus ideas standard petri net formalisms 
mobile petri nets support class functions evolution drop time locality restrictions join calculus functional nets 
notation separates function name rewrite rule definition allows function defined collectively unrelated definitions 
known schemes process synchronization expressed functional nets 
semaphores common mechanism process synchronization lock semaphore 
lock ers atomic actions 
implementation lock functional net def newlock def typical usage semaphore val newlock critical region semaphores complete example define objects identity val global newlock def def eq global global flag flag true flag flag result flag flag false flag false code global lock serialize calls eq methods 
admittedly brute force approach mutual exclusion serializes calls eq disjoint pairs objects 
refined locking strategy hard come 
conceptually critical region consists pair objects locked 
naive approach lock object 
carry risk deadlocks concurrent eq operations involve objects di erent order 
asynchronous channels quite similar semaphore definition asynchronous channel operations read write def def read write asynchronous channels fundamental communication primitive asynchronous calculus languages pict :10.1.1.127.1777
typical usage scenario asynchronous channel val def producer var true val write def consumer true val read print producer consumer producer scenario writes consecutive integers channel read printed consumer 
writing done asynchronously parallel rest body producer loop 
guarantee numbers read printed order written 
synchronous channels potential problem previous example producer produce data rapidly consumer consumes 
case number pending write operations increase indefinitely memory exhausted 
problem avoided connecting producer consumer synchronous channel 
synchronous channel reads writes return operation blocks operation called 
synchronous channels fundamental communication primitive classical calculus 
represented functional nets follows 
def def read read read write write write read write write read implementation involved asynchronous channels 
added complexity stems fact synchronous channel connects synchronous operations join pattern function returns 
solution similar double handshake protocol 
splits read write sub operations read read write write 
sub operations matched join patterns opposite senses 
pattern read sub operation returns second write sub operation 
tokens necessary serializing reads writes second write operation start previous read operation finished vice versa 
synchronous channels producer consumer example written follows 
val def producer var true write def consumer true val read print producer consumer monitors scheme process communication common store mutable variables mutual exclusion mechanisms prevent multiple processes updating variable time 
simple mutual exclusion mechanism monitor ensures set functions active time 
monitor easily represented additional asynchronous function turn 
turn token acts resource consumed start function reproduced def turn 
turn 
turn 
turn instance example counter incremented decremented def var count def increment turn count count turn def decrement turn count count turn readers writers complex form synchronization distinguishes readers access common resource modifying writers access modify 
synchronize readers writers need implement operations multiple concurrent readers writer time pending write requests priority pending read requests don preempt ongoing read operations 
form access control common databases 
implemented traditional synchronization mechanisms semaphores far trivial 
arrive functional net solution problem steps 
initial solution top 
auxiliary tokens 
token readers keeps track argument number ongoing reads writers keeps track number pending writes 
operation requires pending writes proceed writers asserted 
case continues writers increments number ongoing readers returns caller 
contrast operation immediately increments number pending writes 
continues waits number readers returns 
note symmetry di erent order actions reflects di erent priorities readers writers 
solution simple trust correctness 
formulation valid funnel numeric arguments join patterns 
instance readers expresses condition number readers zero 
arrive equivalent formulation funnel factorization 
function readers represents condition split sub functions partition condition cases interest 
case token expresses fact ongoing reads token readers required positive 
similarly writers augmented case 
splitting introducing necessary case distinctions obtains functional net listed bottom 
foundations join calculus functional nets formal basis join calculus 
basis stages 
stage study subset join initial solution def writers readers writers readers writers writers readers readers readers writers writers readers readers writers factorization def def readers readers readers writers writers writers readers readers writers writers fig 

readers writers synchronization taken formal basis purely functional programs 
calculus equivalent call value calculus takes opposite position naming functions 
calculus knows anonymous functions functional join calculus insists function name 
furthermore insists intermediate result named 
quite similar common forms intermediate code compilers functional languages 
second stage adds fork join operators constructs introduced stage 
calculus developed stage equivalent principle original join calculus syntactical details changed 
third stage adds qualified names definitions accesses 
calculus developed stage model object functional nets 
stages represent functional nets reduction system 
syntax names 
terms def definitions left hand sides reduction contexts def structural equivalence renaming 
reduction def def fig 

pure functional calculus case single rewrite rule similar reduction rule calculus closely matching intuitions functional programming 
contrast original treatment join calculus chemical machine concept established concurrency theory 
versions join calculus complement modulo minor syntactical details equivalent 
pure functional calculus presents subset join calculus express purely functional programs 
syntax calculus quite small 
term function application term local definition def stand sequence 
xn names 
definition single rewrite rule form left hand side rewrite rule function application 
require formal parameters left hand side pairwise disjoint 
right hand side rewrite rule arbitrary term 
set defined names dn definition form consists just function name local names ln formal parameters free names fn term names defined local definition free names definition defined names names free definition right hand side di erent local names names occurring term free called bound presents formal definition sets object extension join calculus 
avoid unwanted name capture free names bound inadvertently write terms subject hygiene condition assume set free bound names term write disjoint 
achieved suitable renaming bound variables renaming law 
law lets rename local defined names definitions provided new names clash names exist scope 
formalized equations 
def def fn fn 
second def def fn elements pairwise disjoint 
substitutions map generally substitutions idempotent functions names map finite number names 
domain dom substitution set names mapped 
generally give case structural equivalence relation assumed reflexive transitive compatible closed formation contexts 
terms related identified 
purely functional calculus just renaming 
extended calculi richer notions structural equivalence 
execution terms calculus defined rewriting 
defines single rewrite rule analogous reduction calculus 
rule sketched follows def 

def 

application matches definition say rewrite application definition right hand side replacing formal parameters actual arguments formulation completely precise specify exactly reducible application located term 
clearly application definition scope 
want reduce applications contained local definition 
instance def def want reduce second application contained body function restriction choice reducible applications avoids potentially unnecessary 
instance code fragment called sense reduce body 
importantly add side ects language essential body function executed reduced function applied 
characterization reducible applications formalized idea reduction context context term hole written 
expression denotes term resulting filling hole context reduction context context special form hole places function application reducible 
set possible reduction contexts calculus generated simple context free grammar 
grammar says reduction take place top term scope local definitions 
reduction contexts formulation reduction law 
generally reduction relation terms smallest compatible relation contains reduction law 
alternative formulation reduction rule abstracts concrete substitution operator def def substitution names names dom ln 
advantage alternative formulation generalizes readily complex join patterns introduced sub section 
example functional reduction consider forwarding function def def slightly complex example reduction call evaluation function takes arguments applies def apply apply print def apply print canonical join calculus presents standard version join calculus 
compared purely functional subset syntax additions second introduced fork operator terms join operator left hand sides 
third definitions consist rewrite rule multiple definitions function symbol possible 
addition essentially convenience translate program definitions consisting multiple rewrite rules program uses just rewrite rule definition 
convenience great warrant syntax extension encoding heavy 
notion structural equivalence refined purely functional subset 
renaming sets laws identify terms 
fork operator assumed associative commutative 
second comma operator rewrite rules taken concept usually known name evaluation context evaluate 
syntax names 
terms def definitions left hand sides reduction contexts def structural equivalence renaming 
terms associative commutative 
definitions associative commutative identity 
scope extrusion def def dn fn 
reduction def def substitution names names dom ln 
fig 

canonical join calculus associative commutative empty definition identity 
scope extrusion law states scope local definition may extended dynamically operands parallel composition provided lead clashes names bound definition free names terms brought scope 
just reduction rule rule essentially functional subset 
major di erence rewrite step may involve sets function applications composed parallel 
laws structural equivalence necessary bring parallel subterms far apart match join pattern left hand side 
instance example semaphore synchronization structural equivalences necessary rewrite steps performed 
syntax names 
identifiers terms def definitions left hand sides reduction contexts def structural equivalence renaming 
terms associative commutative 
definitions associative commutative identity 
scope extrusion def def dn fn 
reduction def def substitution names identifiers dom ln 
fig 

object join calculus def def commutativity def def scope extrusion def def def def def def object calculus presents final stage progression object join calculus 
syntactical addition respect identifiers dn dn dn dn dn dn dn ln 
xn 
xn ln ln ln fn 
jn 
jn fn def fn fn dn fn fn fn fn dn fn ln fn fn fn fig 

local defined free names qualified names 
qualified name simple name qualified name followed period simple name 
qualified names appear operands function application defined function symbols definition 
surprisingly changes 
structural equivalences reduction rules stay exactly formulated canonical join calculus 
bit care required definition permissible renamings 
instance consider object functional net def net consistently renamed 
instance expression considered equivalent previous def hand qualified function symbol renamed changing meaning expression 
instance renaming yield def clearly di erent expression started 
new expression passes record field continuation function previous expressions passed record field 
reflects observations definition local defined free names object join calculus 
note names occurring field selectors free term defined local 
renaming apply record selectors 
renaming rule formalized follows 
renaming substitution names names injective considered function dom remember dom 
def def renaming dom dn codom fn fn 
furthermore def def funnel program def newchannel def read write val chan newchannel chan read chan write join calculus program reduction def newchannel def read write def chan chan read chan write newchannel def newchannel def read write def chan chan read chan write def read write def newchannel def read write def chan chan read chan write def read write read write def newchannel def read write def chan chan read chan write def read write fig 

reduction involving asynchronous channel object renaming dom ln codom fn 
definitions renaming rule apply stated versions join calculus final object version 
reduced simpler syntax previous calculi new definitions equivalent old ones 
example object reduction consider funnel program top 
program defines asynchronous channel function newchannel reads writes channel 
program form mandated join calculus uses synchronous function val definition 
map program join calculus adding continuation functions control flow function returns value definitions explicit 
second half shows program coded object join calculus reduced 
schemes map programming notation join calculus discussed section 
syntactic abbreviations extended calculus discussed section lot smaller funnel programming notation preceding sections 
section fills gap showing funnel constructs directly supported object join calculus mapped equivalent constructs supported 
direct style important di erence funnel join calculus funnel synchronous functions val definitions bind results synchronous function applications 
see simplifications orded additions su ces compare funnel program join calculus counterpart 
join calculus version cluttered occurrence continuations programs synchronous functions value definitions said direct style programs don said continuation passing style 
join calculus supports continuation passing style 
translate direct style programs join calculus need continuation passing transform 
transformation gives synchronous function additional argument represents continuation function result synchronous function passed 
source language continuation passing transform object join calculus extended result expressions value definitions val single names results value definitions included expressed tuples length 
sake explanation assume di erent alphabets synchronous asynchronous functions 
range identifiers final selector synchronous function ranges identifiers final selector asynchronous function 
practice distinguish synchronous asynchronous functions means type system di erent alphabets required 
continuation passing transform terms expressed function tc takes term source language name representing continuation arguments mapping term object join calculus 
helper function td maps definition source language object join calculus 
emphasize distinction transforms tc td syntactic expression arguments write syntactic expressions brackets 
transforms defined follows 
tc val def tc tc tc tc tc tc def def td tc td tc tc td td td td equations tc td represent fresh continuation names 
original join defines di erent passing transform 
transform allows functions join pattern carry results 
consequently body function specified functions left hand side result returned 
advantage approach simplifies implementation situations synchronous channel section 
disadvantage complex construct function returns 
structured terms funnel function part arguments function application arbitrary terms join calculus admits identifiers 
terms function arguments expanded introducing names intermediate results 
val val val resulting expression mapped join calculus applying continuation passing transform tc 
principle applied situations structured terms appear identifiers supported 
val val val assume names expanded term original source term fresh 
related sections shown large variety program constructs modelled functional nets 
sections shown functional nets expressed object join calculus 
taken steps constitute approach large body notations patterns programs distilled minimal kernel 
reduction essentials useful helps clarify meaning derived program constructs interactions 
inception lisp landin iswim functional programming pioneered idea developing programming languages calculi 
extremely large body aims emulate fp approach general setting 
strand devised extensions lambda calculus state nondeterminism concurrency 
strand designed concurrent functional languages operational semantics 
landin programme repeated concurrent programming field instance occam csp pict calculus oz kernel :10.1.1.127.1777
approach closest join calculus 
largely functional nets described constitute simplification streamlining original treatment join object join calculus qualified definitions main innovation 
matthias zenger christoph zenger designing examples suggesting numerous improvements 

nierstrasz 
applications components scripts tour 
software architectures component technology 
kluwer 

agha mason smith talcott 
foundation actor computation 
journal functional programming 

ariola sabry 
correctness monadic state imperative call need calculus 
proc 
th acm symposium principles programming languages pages 

asperti 
mobile petri nets 
technical report ublcs university may 

barendregt 
lambda calculus syntax semantics volume studies logic foundations mathematics 
north holland amsterdam revised edition 

berry boudol 
chemical machine 
proc 
th acm symposium principles programming languages pages january 

boudol 
lambda calculus concurrent communicating systems 
orejas editors proceedings tapsoft pages new york march 
springer verlag 
lecture notes computer science 

boudol 
asynchrony pi calculus 
research report inria may 

boudol 
pi calculus direct style 
proc 
th acm symposium principles programming languages pages 

church 
calculi lambda conversion volume annals mathematics studies 
princeton university press second edition 

crank felleisen 
parameter passing lambda calculus 
proc 
th acm symposium principles programming languages pages january 

de 
non deterministic extensions untyped calculus 
information computation nov 

felleisen hieb 
revised report syntactic theories sequential control state 
theoretical computer science 


jocaml manual 
inria rocquencourt 
available join inria fr 

fournet gonthier 
reflexive chemical machine 
proc 
rd acm symposium principles programming languages pages jan 

fournet gonthier 
levy remy 
calculus mobile agents 
th international conference concurrency theory concur pages pisa italy aug 
springer verlag 
lncs 

fournet 
join calculus language 
inria rocquencourt 
available join inria fr 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

mishra prasad 
facile symmetric integration concurrent functional programming 
international journal parallel programming april 

hansen 
structured multiprogramming 
communications acm july 

hoare 
monitors operating system structuring concept 
communications acm oct 

hoare 
communicating sequential processes 
prentice hall englewood cli new jersey 

honda yoshida 
reduction process semantics 
proc 
th conf 
foundations technology theoretical computer science pages dec 

jensen 
coloured petri nets 
basic concepts 
eatcs monographs theoretical computer science 
springer verlag 

landin 
programming languages 
communications acm march 

mccarthy edwards hart levin 
lisp programmer manual 
mit press 

milner parrow walker 
calculus mobile processes 
information computation 

odersky rabin hudak 
call name assignment lambda calculus 
proc 
th acm symposium principles programming languages pages january 

petri 
kommunikation mit 
des iim institut fur mathematik bonn 
english translation technical report vol 
suppl 
applied data research princeton new jersey contract af 

pierce turner 
pict programming language pi calculus 
technical report computer science department indiana university 

plotkin 
call name call value calculus 
theoretical computer science 

reisig 
petri nets volume eatcs monographs theoretical computer science 
springer verlag 

reppy 
cml higher order concurrent language 
proc 
acm sigplan conf 
programming language design implementation pages june 

sabry field 
reasoning explicit implicit representations state 
acm sigplan workshop state programming languages copenhagen denmark pages june 
yale university research report yaleu dcs rr 

smolka wurtz 
object oriented concurrent constraint programming oz 
van hentenryck saraswat editors principles practice constraint programming chapter pages 
mit press 

swarup reddy ireland 
assignments applicative languages 
hughes editor functional programming languages computer architecture pages 
springer verlag august 
lecture notes computer science 
article processed macro package llncs style 
