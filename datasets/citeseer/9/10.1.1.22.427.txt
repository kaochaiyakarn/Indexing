concept checking binding parametric polymorphism jeremy siek andrew lumsdaine department computer science engineering university notre dame notre dame lsc nd edu 
generic programming characterized template parameters represent data types concepts 
language provide mechanism explicitly handling concepts 
result difficult insure concrete type meets requirements concept supposed represent 
error messages resulting incorrect concrete type particularly difficult decipher 
techniques check parameters generic libraries 
techniques standard introduce run time overhead 
concept set requirements valid expressions associated types semantic invariants complexity guarantees type fulfill correctly context generic algorithm 
concepts represented formal template parameters function templates generic algorithms 
explicit mechanism representing concepts template parameters merely placeholders 
convention parameters names corresponding concept required compiler enforce compliance concept template parameter bound actual type 
naturally generic algorithm invoked type fulfill syntactic requirements concept compile time error occur 
error se reflect fact type meet requirements concept 
error may occur deep inside instantiation hierarchy point expression valid type presumed associated type available 
resulting error messages largely uninformative basically impenetrable 
required mechanism enforcing concept safety close point instantiation 
re engineering template system accommodate concepts daunting task feel better mechanisms simply adding providing concept safe genericity 
tech nique uses standard constructs enforce early concept compliance provides informative error messages non compliance 
applied mechanism sgi implementation stl changes main distribution 
note technique address syntactic requirements concepts valid expressions associated types 
address semantic invariants complexity guarantees part concept requirements 
example simple example illustrate incorrect usage template library resulting error messages 
code generic std stable sort algorithm standard template library stl applied linked list 
bad error cpp include list include algorithm struct foo bool operator const foo const return false int main int char std list foo std stable sort return stable sort algorithm prototyped follows template class randomaccessiterator void stable sort randomaccessiterator randomaccessiterator attempting compile code gnu produces compiler error 
output compilers listed appendix 
stl algo function void merge sort loop list iterator foo foo foo foo int list iterator foo foo foo list iterator foo foo foo foo int stl algo instantiated merge sort buffer list iterator foo foo foo foo int list iterator foo foo foo list iterator foo foo foo foo int stl algo instantiated stable sort adaptive list iterator foo foo foo foo int list iterator foo foo foo list iterator foo foo foo foo int stl algo instantiated stl algo match list iterator foo foo foo list iterator foo foo foo case fundamental error std list iterator model concept randomaccessiterator 
list iterator bidirectional fully random access vector iterator 
unfortunately error message indicate user 
programmer having experience template libraries error obvious 
reasons message hard understand 
location error line bad error cpp pointed error message despite fact gnu prints levels deep instantiation stack 
textual correlation error message documented requirements stable sort randomaccessiterator 
error message overly long listing functions internal stl user 
know care 
internal library functions listed error message programmer easily infer error due library code 
example expect informative message fact system produce concept checks method void concept list iterator foo foo foo constraints concept checks instantiated randomaccessiterator concept list iterator foo foo foo constraints bad error cpp instantiated stable sort list iterator foo foo foo list iterator foo foo foo list iterator foo foo foo concept checks match list iterator foo foo foo list iterator foo foo foo message shortcomings standard error messages 
location error bad error cpp specified error message 
message refers explicitly concepts user look stl documentation randomaccessiterator 
error message shorter reveal internal stl functions 
presence checks error message alerts user fact error lies user code library implementation 
concept checks ideally catch indicate concept violation point instantiation 
mentioned error caught exercising requirements needed function template 
exactly requirements valid expressions particular exercised tricky issue want code compiled executed 
approach exercise requirements separate function assigned function pointer 
case compiler instantiate function invoke 
addition optimizing compiler remove pointer assignment dead code run time overhead added assignment trivial case 
conceivable compiler skip semantic analysis compilation constraints function place function pointer technique ineffective 
removal unnecessary code functions typically done stages compiler 
successfully function pointer technique gnu microsoft visual edg compilers kai sgi 
code shows technique applied std stable sort function template class randomaccessiterator void stable sort constraints randomaccessiterator typename std iterator traits randomaccessiterator difference type exercise requirements randomaccessiterator template class randomaccessiterator void stable sort randomaccessiterator randomaccessiterator typedef void type randomaccessiterator type stable sort constraints 
large set requirements need checked cumbersome library implementor write constraint functions constraints public function 
group sets valid expressions definitions corresponding concepts 
concept define concept checking class template concept suffix naming convention 
template parameter type checked 
class contains member function exercises valid expressions concept 
objects constraints function declared data members concept checking class 
template class iter struct randomaccessiterator concept void constraints typename std iterator traits randomaccessiterator difference type iter 
function pointer mechanism cause instantiation constraints function member function pointer 
easy library implementor invoke concept checks wrap member function pointer mechanism macro 
code snippet shows sure iterator randomaccessiterator 
template class void stable sort require randomaccessiterator 
definition follows 
thetype var type wish check name corresponds concept checking class 
assign address constraints member function function causes instantiation constraints function checking concept valid expressions 
assign avoid unused variable compiler warnings wrap loop prevent name collisions 
define require type var concept void concept concept type var concept concept type var constraints check type parameters class templates provide requires macro inside body class definition requires macro inside function body 
macro declares nested class template template parameter function pointer 
nested class type typedef function pointer type constraint function template argument 
type var concept names nested class typedef names help prevent name collisions 
define class requires type var concept typedef void concept concept type var func type var concept template func type var concept struct dummy struct type var concept typedef dummy struct type var concept concept concept type var constraints dummy typedef type var concept addition versions require class requires take arguments handle concepts include interactions types 
class requires implementation stl concept checks compilers implement template parameters function pointer type 
concept randomaccessiterator defines set requirements check parameters sort 
show complete concept checking class concept constructed 
expressions constraints function correspond valid expressions section documentation randomaccessiterator 
typedefs added enforce associated types concept 
randomaccessiterator concept builds refines bidirectionaliterator require macro invoke concept checking class concept 
organizing concepts way reuse concept checking classes bidirectionaliterator concept concept concept checking classes refined concepts randomaccessiterator 
template class iter struct randomaccessiterator concept void constraints require iter bidirectionaliterator require iter require typename std iterator traits iter iterator category std random access iterator tag convertible typedef typename std iterator traits iter iter iter typename std iterator traits iter difference type potential pitfall designing concept checking classes expressions constraint function necessary 
example easy accidentally default constructor create objects needed expressions concepts require default constructor 
reason write constraint function member function class 
objects involved expressions declared data members class 
objects constraints class template instantiated default constructor concept checking class instantiated 
data member default constructors instantiated standard section 
programming concepts process deciding group requirements concepts deciding concepts algorithm difficult important part building generic library 
guiding principle process call requirement minimization principle 
requirement minimization principle minimize requirements input parameters component increase reusability 
natural tension statement 
definition input parameters component order component accomplish task component mean function class template 
challenge implement component way fewest assumptions minimum requirements inputs accomplishing task 
traditional notions abstraction tie directly idea minimal requirements 
input fewer requirements 
concepts simply embodiment generic data types template programming 
designing concepts problem domain important keep mind purpose express requirements input components 
respect requirement minimization principle means want minimize concepts 
important note minimizing concepts mean simply reducing number valid expressions concept 
example function requires value type iterator includes operator operator operator operator 
turns std stable sort uses operator 
question arises std stable sort specified terms concept terms concept requires operator 
really violate requirement minimization principle operators trivially implemented terms operator 
trivial mean line code constant run time cost 
fundamentally violate requirement minimization principle comparison operators conceptually equivalent mathematical sense 
adding conceptually equivalent valid expressions violation requirement minimization principle new semantics added new syntax 
added syntax increases re usability 
example maintainer std stable sort may day change implementation places operator operator equivalent 
requirements part public interface change potentially break client code 
requirement std stable sort maintainer reasonable amount flexibility 
minimality concepts property associated underlying semantics problem domain represented 
problem domain basic containers requiring traversal single direction smaller requirement requiring traversal directions distinction forwarditerator bidirectionaliterator 
semantic difference easily seen difference set concrete data structures forward iterators versus set bidirectional iterators 
example singly linked lists fall set data structures having forward iterators bidirectional iterators 
addition set algorithms implement forward iterators quite different set implemented bidirectional iterators 
important factor families requirements fine grained concepts 
example requirements iterators factored stl iterator concepts trivial output input forward bidirectional random access 
concept covering discussed important select minimal requirements concepts inputs component equally important verify chosen concepts cover algorithm 
possible user error caught concept checks slip 
concept coverage verified archetype classes 
archetype class exact implementation interface associated particular concept 
run time behavior archetype class important functions left empty 
simple test program compiled archetype classes inputs component 
program compiles sure concepts cover component 
code shows archetype class concept 
care taken ensure archetype exact match concept 
example concept states return type operator convertible value type 
state stringent requirement return type bet 
means mistake return type archetype class 
correct approach create artificial return type convertible done input proxy 
validity archetype class test completely dependent exact match concept verified careful manual inspection 
template class struct input proxy operator return static template class class trivial iterator archetype typedef trivial iterator archetype self public trivial iterator archetype trivial iterator archetype const self self operator const self return friend bool operator const self const self return true friend bool operator const self const self return true input proxy operator return input proxy namespace std template class struct iterator traits trivial iterator archetype typedef value type generic algorithms tested instantiated number common input types 
example apply std stable sort basic pointer types iterators 
appropriate testing run time behavior algorithm helpful ensuring concept coverage types match particular concepts provide minimal functionality required concept 
function template compiles type concept requirements may fall short covering functions actual requirements 
important compile archetype classes addition testing common input types 
alternative approaches concept checking tests certain expressions valid compile successfully 
alternative approach declare signature provided input 
approach generic java theta signatures extension 
signature methods approaches subtype approach clause approach 
subtype approach uses equivalent base class java interface group required method signatures 
base classes place requirements input types component interface declaration 
java non classes explicitly declare classes implement signatures extension necessary relationship implicit determined compiler function call site 
clause approach lists required function signatures directly component interface grouping base classes 
example similar shows look 
typically vector class require element type comparable include closely follow stroustrup example 
template class class comparable bool operator const bool operator const template class comparable class vector 
problems signature methods 

signatures appropriate template programming relationship expressions signatures implement expression 
example operator implemented free function member function different signatures 
overly restrictive list signatures interface requirement 

languages subtype approach applies class types builtin types 
built certainly comparable class member 

template programming heavily parametric polymorphism different subtype polymorphism 
example characteristic type constraints function templates involve functions argument comparison operators 
kind constraints particularly difficult express subtyping quite natural express concept checks parametric polymorphism 
advantage signatures allow separate type checking generic components type checking instantiation template particular context 
negates need clumsy archetype classes described 
signature approach allow separate compilation dynamic dispatch 
looking designing implementing verify concept checks generic libraries presently done manually 
result process time consuming error prone 
implementors benefit greatly process automated 
step tool statically analyzes class function template records kinds expressions involve template parameter types 
tool ease task verifying concept coverage 
second step pattern match set required expressions standard set library defined set concepts summarizing requirements terms concepts 
information ways 
create readable reports library documentation 
second provide informative compiler error messages need manually insert concept checks 
exciting done general area generic programming 
step back task providing better support generic programming framework existing language number approaches take designing language directly supports concepts 
acknowledgments go alexander stepanov originating idea function pointers trigger instantiation concept checking code 
matthew establishing concepts stl 
acknowledge helpful suggestions reviewers 
parts performed author sgi second author sabbatical lawrence berkeley national lab 
partially funded nsf aci 

generic programming stl 
professional computing series 
addison wesley 
baumgartner russo 
signatures language extension improving type abstraction subtype polymorphism 
software practice experience august 
bracha odersky stoutamire wadler 
making safe past genericity java programming language 
oopsla 
bruce cardelli castagna hopkins objects group leavens pierce 
binary methods 
theory practice object systems 
day gruber liskov myers 
subtypes vs clauses constraining parametric polymorphism 
oopsla pages 
musser 
stl tutorial guide 
addison wesley reading 
stepanov lee 
standard template library 
technical report wg iso programming language project may 
stroustrup 
design evolution 
addison wesley 
appendix error messages kai edg frontend excerpt error message compiling bad cpp kai concept checking 
algorithm line error instance overloaded function std min matches argument list argument types std iterator traits std list foo std allocator foo iterator difference type error type distance len min second distance detected instantiation void std stable sort randomaccessiterator randomaccessiterator excerpt error message compiling bad cpp kai concept checking 
concept checks line error operator matches operands operand types std list foo std allocator foo iterator std list foo std allocator foo iterator detected instantiation void concept iter constraints line instantiation void randomaccessiterator concept iter constraints line bad error cpp instantiation void std stable sort randomaccessiterator randomaccessiterator error messages microsoft visual excerpt error message compiling bad cpp microsoft visual concept checking 
algo error distance cdecl std operator const class std reverse iterator randomaccessiterator tp pointer distance const class std reverse iterator randomaccessiterator tp pointer distance deduce template argument const class std reverse iterator randomaccessiterator tp pointer distance struct std list iterator struct foo struct std traits struct foo algo see function template instantiation void cdecl std inplace stable sort struct std list iterator struct foo struct std traits struct foo struct std list iterator struct foo struct std traits struct foo compiled excerpt error message compiling bad cpp microsoft visual concept checking 
concept checks error binary struct std list iterator struct foo struct std traits struct foo define operator conversion type acceptable predefined operator concept checks compiling class template member function void randomaccessiterator concept struct std list iterator struct foo struct std traits struct foo constraints void 
