business process model consistent implementation case formal verification methods koehler ibm zurich research laboratory ch switzerland email zurich ibm com ibm watson research center po box rte yorktown heights ny usa email ibm com today business applications underlying process models complicated making implementation processes increasingly challenging task 
hand tools methods exist describe business processes 
hand different tools method exist describe artifacts implementing 
significant gap exists 
overcome gap new methodologies sought 
discuss pattern modeling mapping process 
starting business process model emphasizes underlying structural process pattern associated requirements map model corresponding model nondeterministic automata state variables 
model checking techniques automatically verify elementary requirements process termination reachability states 
example involving coupled repetitive activities discuss advantages iterative process correcting refining model insights gained interleaved verification steps 
business process modeling reengineering longstanding activities corporations years 
internal processes streamlined optimized external processes focus business analysts middleware providers 
full integration processes supply network upcoming challenge addressed network partners solution providers 
static integration inter enterprise processes common past years longer meet new requirements customer orientation flexibility dynamics cooperation 
dynamic integration processes mandatory obviously harder achieve 
major prerequisite dynamic integration reliability flexibility processes involved 
companies form known virtual enterprise usually reveal details internal processes 
furthermore integrated business processes subject change commits providing process certain input result wants retain freedom internally reorganize optimize processes necessary 
consequently traditional business process modeling techniques fail describe loosely coupled business processes structure opaque completely hidden 
new modeling methods sought allow challenges reliability flexibility addressed 
new paradigm web services allows companies describe external structure processes invoked xml messaging wsdl web services description language 
standards rosettanet ebxml provide means describe choreography message exchanges implementation independent way crucial enabling trading partners communicate placing constraints implementation 
wsfl xlang xml choreography languages explicitly describing service flows business process may composed multiple web services 
assume execution environment orchestration engine programs written language 
wsdl languages provide externally visible description individual web services composition 
new languages communication interaction structure business process explicit prerequisite flexible composition processes 
fur thermore languages wsfl xlang possess operational semantics enables orchestration engine directly execute flow models specified language 
different business process modeling languages uml allow business process described detail specification translated implementation human expert 
various views provided uml business process strongly support translation process mismatches communication misunderstanding happen 
flow models reduce need directly translate business process model lowlevel programming language 
business process model mapped flow model regarded form high level implementation language model directly executable automatically translated target language 
flow model provides useful abstraction business process mapping 
mapping business model flow model proceed unexplored issue 
new approach potential yielding executable business process specifications expect flow models written hand 
derived higher level business process specification 
addressing derivation process hope continuity design implementation process improved gap business analyst view specialist view reduced 
key problem 
business process model example uml model example wsfl know consistent 
words determine model preserves essential requirements business process model 
question explore organized follows 
section discuss representation business process models need process requirements explicit 
section explores mapping business models automata models translation process requirements logical formulas automatically verified model checking techniques 
section describes iterative process model correction refinement subsequent model checking process requirements verified 
section briefly review related conclude summary outlook section 
business process requirements various approaches business process modeling tool sets implementing numerous features common 
try capture business tasks going automated automating system going deployed integrate systems 
nutshell find typical elements business process modeling language organizational model describes roles areas responsibilities organization respect activities business process 
presents static view process 
control flow describes order execution dependencies various activities 
data flow describes business entities artifacts manipulated various activities 
cases describe context business process externally visible behavior 
collaboration diagrams document business agents artifacts perform function 
information provides accurate semiformal specification business process 
particular process requirements activity executes execute conditions usually described informally form cases textual descriptions natural language 
precisely information crucial business process perform reliable partner larger dynamic business environment 
order guarantee reliability process model contain specification requirements includes properties requirement specification unambiguous carry model automatically verifiable model 
conditions able guarantee model implements business process model 
candidate unambiguous formal specification exists mathematical logic hard imagine business analyst describe process requirements 
friendly formalisms proposed see example 
explore approach 
focus typical structural patterns occur frequently business processes 
map typical automata structures provide semantics model orchestration engine executing models 
define typical properties patterns particular interest subject automatic verification 
aim having business analyst providing typical patterns hope facilitate communication business expert 
furthermore believe model mapping business model consistent refinement 
properties provide additional information example choice particular web service implement business activity process 
summary requirements business process explicit verify subsequent refinements model preserve requirements 
discuss approach help example introduced 
formalization verification process requirements common pattern occurring business processes loosely coupled repetitive activities 
request quotation process typical instance pattern request quotation sent various business partners returned quotes received collected best quote selected 
example sending receiving quotes typical repetitive activities 
pattern frequent poses real challenge modern flow management systems 
illustrates pattern 
decide disposition edit catalogue approve vendors select vendors send notification receive quotes 
pattern loosely coupled repetitive activities context business processes 
remainder section start informal natural language detailed description process 
map business process model formal model nondeterministic automata 
step facilitated explicitly stating business process pattern 
translate business process requirements formal language stating properties corresponding automata model 
formal model plus properties corresponding process requirements automatically check properties satisfied model help model checking procedure explores possible traces behavior described model :10.1.1.111.7245
case violations properties undesired behaviors model checking procedure output counterexample demonstrates courses wrong behavior 
analysis counterexample provides information helps correct refine model 
process process starts purchasing agent sends request quotation set selected vendors 
having received quote vendor deadline elapsed evaluation process select best quote begun 
business process composed activities 
send notification activity models repetitive sending request quotation purchasing agent preselected set vendors 

receive quotes activity occurs purchasing agent receives quote vendor 

decide disposition activity compares various quotes 
takes place quote vendor received deadline elapsed quote received 
identifying process instance coupled repetitive activities structural pattern important step business process modeling 
allows requirements various activities explicit send repeats certain number times selected vendors notified 
process model course corresponding model foresee times activity executed 
receive repetitive activity definitely linked send 
assuming orchestration engine provides message correlation process able check quote received corresponds request sent 
case corresponding event occur quote added collection quotes answering previous send activity 
obvious expect quotes arrive requests sent non correlated messages dealt separate process fewer vendors respond 
natural associate linking condition activity deadline timeout event waiting arriving quotes deadline set send activity elapsed 
decide repetitive activity model takes place send receive terminated 
happen timeout occurred expected quotes arrived 
evaluation sense quote received 
structural pattern business process model side associate possible patterns model side nondeterministic communicating automata 
emphasize choice model unique possible control patterns may applicable order implement business process 
believe providing pattern libraries extracted best practices potential cases facilitate partially automate difficult process mapping business model model 
pattern mapping models example involving loosely coupled repetitive activities choose model linked counting automata shown 

initial automata model coupled repetitive activities 
general nondeterministic automata model state variables transition guards 
state automaton assignment values state variables 
state variable activity represents business activity executed agent human system 
activity variable take possible values initialize send request sending receive quote error evaluate 
state variable alternative models discussed section 
stage represents stage business process activity executed 
stage variable take possible values notification hold disposition failure 
state variables represent number sent received quotes respectively 
shared sub automata modeling send receive activities allow automata link 
constant bound arbitrary fixed value represents maximum finite number requests sent 
states stage notification marked initial states process fragment consider states stage disposition represent goal states 
state variable timeout boolean variable change value nondeterministic manner 
automaton interacts state variables ways 
guards transition occur condition state variables holds 

assignments transition modify value state variables 
transition state occurs guard condition true 
transition leads state modifying value state variables 
remarks regarding model explicitly model occurrence external events output process capture possible occurrence nondeterminism automaton 
second symbolic representation allows speak sets states single states 
circles subsequent figures represent sets states precisely sequences states stage variable change value state variables change 
example process remains stage notification long activity send request guard condition bound satisfied 
unfolding automaton obtain state graph showing possible transitions cf 

initialize activity models entry process fragment wish implement model 
adopted pattern linked counting automata accompanied initialization counter variables model contains explicit failure state foreseen original business model represents refinement analysis hold stage 
process remains stage long quotes received timeout occurred 
furthermore evaluation activity fact stage variable redundant model 
leave purpose illustrating different phases process 
hopefully easier understand definition transition relation follow 
sense quote received 
information guard conditions possible nondeterministic transitions extracted timeout process loops hold stage 
timeout process enters disposition stage 
inspecting conditions realizes important case timeout covered business model 
model refines business model adding third transition failure state guarded precisely condition 
disjunction possible guard conditions forms logical tautology clear indication possible situations covered 
furthermore see transitions satisfied situation hold stage left deterministically defined 
nondeterminism example remains timeout event control process consider 
automaton supposed represent refinement original business process model obtained mapping business pattern coupled repetitive activities pattern linked counters 
verify claim need ensure requirements placed process model carry model 
local requirements activity formalized manually introducing guard conditions transitions 
imagine formulation guard conditions supported providing guard templates various patterns designing model remain highly skilled activity 
design process expert needs feedback regarding global consistency model 
achieved examining possible traces behavior implied model verifying global properties model 
types properties particular importance reachability liveness discuss section 
global requirements models reachability property states particular situation reached 
model particular interest verify reachability goal state examine sequences activities goal state reached 
liveness property expresses certain conditions situation ultimately occur 
formulates readers unfamiliar basic logical notation stands negation formula represents logical conjunction conjuncts evaluate true order formula true stands non exclusive means logical implication 
stronger condition mere reachability 
liveness property require independent system behavior particular situation reached 
termination process liveness property 
reachability requires trace behavior leading goal state liveness requires goal state reachable possible traces behavior 
pattern linked counters termination particular interest property obvious see 
means similarly associating business process models certain structural patterns mapping possible patterns associate certain business process requirements properties model subject automatic verification 
identifying initial goal state model automaton corresponding termination condition termination designated goal states derived automatically 
discuss automatic verification termination property detail 
principle base verification techniques identify property process described bounded strictly monotonically decreasing function 
conducting mathematical proof shows function ultimately reach bound independent trace behavior establish termination process 
second symbolic model checking procedure enumerate exhaustively set possible reachable states underlying process model 
trace behavior ends designated goal state process terminate 
experiences second approach 
verifying termination model checking far automata basis operational models specify behavior processes implementing systems wish investigate 
approach new successfully development reactive systems vlsi design process 
step formalism formulate precisely properties wish investigate 
ideal candidate computation tree logic ctl temporal logic especially suited behavioral descriptions reactive systems discrete time 
ctl extends standard order predicate logic temporal operators path quantifiers help express statements possible traces behavior system 
review main constructs ctl allow verify termination model 
reader referred details :10.1.1.111.7245
denotes logical formula representing property satisfied state states property satisfied successor state globally states property satisfied states saying states states property satisfied state 
operators express properties possible trace behavior process path execution automata 
different traces behavior possible need path quantifiers allow express tree aspect behavior 
formula paths states executions current state satisfy property formula exists path states path execution satisfying combining temporal operators path quantifiers formulate termination property interest ag initial state af goal state states invariantly true paths execution starts initial state set states satisfying ctl formula eventually reach goal state independent execution path taken 
writing ctl statements requires experience understanding ctl statements written require experience reason opt support modeling process providing predefined structural patterns 
automata model automatically derive corresponding termination property ctl formula ag stage notification af stage disposition advantage ctl availability numerous model checking tools allow verify properties interest automatically 
experiments nusmv model checker improved implementation famous widely smv model checker 
smv performs symbolic model checking ctl formulas networks automata shared variables 
order nusmv automata model translated input language smv 
process automated starting representation limited predefined patterns 
require skill model checking tools 
may requirement architects anyway case area vlsi design 
going excessive detail smv representation summarized follows 
declare state variables stage timeout activity variables smv program 
bound constant assigned specific value smv represent arbitrary fixed values clear drawback termination proofs want prove termination arbitrary bounds counters limitation repeating model checking process possible bounds somewhat clumsy 
example show model checking process case bound 
module main var stage notification hold disposition failure time boolean activity send request sending receive quote error evaluate initialize assign initial values state variables want model checker assign value nondeterministically assign init stage notification init init init activity initialize complicated part program defines value state variable state depending value state variables evaluated current state 
case statements describe different possible conditions 
information extracted guarded transitions automata model 
state variable case statement needed 
smv requires transition relation total final default case marked standing true simply asserts previous cases applies value state variable remains unchanged 
stage case stage notification notification stage notification hold stage hold time hold stage hold time failure stage hold time disposition stage esac limitation smv interested alternative methods termination checking alternative representations loops see section 
show original smv syntax standing negation standing conjunction standing disjunction 
case statement syntax condition new value 
case stage notification stage notification esac case stage hold stage hold esac activity case stage notification stage notification send request stage notification stage hold sending stage hold stage hold receive quote stage hold stage failure error stage hold stage disposition evaluate activity esac property want verify added specification smv program 
spec ag stage notification af stage disposition feeding smv program nusmv model checker obtain counterexample showing program terminate desired goal states gets locked state satisfying stage failure 
counterexample shows execution path listing sequence states forming execution 
state variables shown value changes 
specification ag stage notification af stage disposition false demonstrated execution sequence state stage notification time activity initialize state activity send request state state state state stage hold time activity sending loop starts state stage failure time activity error simply removing failure stage eliminate deadlock 
example business model failure situation mentioned 
removing model failure stage transition leading nusmv detect deadlock hold stage left case timeout occurs quotes received 
means model checker discovers incomplete specification transition relation business model discussed 
loop starts state stage hold time activity sending counterexample provides interesting insight model 
tells architect timeout occurs immediately reaching hold stage failure stage entered process remains 
loop indicating failure stage entered infinitely triggered default transition case statement specifying values stage variable 
means specified transitions fire path execution shown counterexample default transition taken infinitely 
counterexamples may suggest refinements corrections model order meet required behavior 
section discuss possible changes model 
refining model design phase enter process iterative changes model subsequent verification termination property 
recalling discussion example idea introduce explicit failure situation model 
business model mention situation business analyst assume process repeated case 
reasonable correction model redirect transition back notification stage timeout restart entire process case failure changing conditions detail discussed 
corrected model depicted 

corrected model restart loop 
timeout occurs quotes received transition fired restarts notification process resets counter back zero 
verify termination model detect loop time caused locking process non goal state infinite transition subsequent states 
specification ag stage notification af stage disposition false demonstrated execution sequence state stage notification time activity initialize loop starts state activity send request state state state state stage hold time activity sending state stage notification time activity restart process state activity send request model checker provides counterexample demonstrating termination property false 
fact possible behavior model loop starting state satisfying stage notification arriving stage hold going immediately back stage notification continuing loop indefinitely 
loop caused fact immediately entering state satisfying stage hold timeout occurs fires restart process activity 
means case broken communication pipeline vendors process restarted infinitely 
quotes arrive timeout eventually occur 
situation impossible rare 
termination guaranteed refined model 
assume infinitely possible quotes arrive timeout occurs expect termination guaranteed 
assumption added model fairness constraint making explicit confidence communication pipeline 
fairness constraint expresses certain conditions event property occur fail occur infinitely 
case want add model conviction timeout event fail occur infinitely entering hold stage 
fairness constraints directly expressed ctl require extension language 
model checking tools allow assert certain fairness properties hold model 
causes model checker consider fair paths paths satisfying fairness constraint 
mean fairness constraint verified trickier issue 
fairness constraint case reads fairness stage hold timeout fairness assumption model checker confirms automata terminate goal state 
fairness constraint trigger refinement model bound restart loop shown 
new variable introduced model counts times restart loop iterated 
loop iterated max times quotes received process terminates state satisfying stage failure reintroduced model 
cases reach goal state satisfying stage disposition 
formally verify termination reformulating corresponding ctl formula specifying failure disposition legal goal states process 
ag stage notification af stage disposition stage failure specification verified fairness constraint dropped model 

final model bound restart loop 
formal verification techniques allowed express termination condition model verify 
case failing verification attempt able correct model information provided counterexample 
approach helped identify assumptions termination guaranteed 
assumptions remain implicit model lead implementation failures quite frequently business process changing model adapted change 
want show alternative model implement process 
model considered far introduces separate notification hold stages process requests quotation sent quotes received 
situations flexible process design send request receive quote activities interleaved 
achieved merging notification hold stages allowing nondeterministic transition stages process 
briefly discuss second variant 
shows possible starting point model interleaved sending receiving activities 
note loops occur sending receiving quotes 
loop caused interrupting notification stage order receive quotes resume send activity return notification stage 
second loop caused timeout event case quotes received uses activity restart process repeat process 
guaranteeing termination complex realistic process model important task supported formal verification methods 
example true nondeterminism transitions occur reflects agent freely decide perform process 

alternative model interleaved sending receiving activities 
termination process modeled verified fairness assumption fairness stage hold 
timeout bound expresses infinitely true state satisfying stage hold timeout occurs quotes received 
related formal specification system process models automatic verification properties longstanding area research 
practical widespread applications area reactive systems vlsi design 
model checking popular method verify properties finite state concurrent systems :10.1.1.111.7245
methods attracted increasing interest area business process automation integration 
various research approaches observed 
approaches try formal methods amenable business analysts 
example proposes new interface language smv combines objectoriented representation action language 
language promela model business processes process requirements specified temporal logic ltl 
spin model checking tool verify ltl specifications promela models 
library elementary process patterns provided business processes composed 
patterns simpler discussed focus ordering activities 
example authors distinguish activity follow activity activity follow 
activities named ordering constraints specified conditions activity executes explicit 
verification focuses reachability properties asking certain state reached process spin output counterexamples showing sequences activities reaching state exist 
sequences investigated may lead refinement model 
need equip languages uml semantics model checking techniques applicable discussed discusses standardized ontologies semantic foundation business process models 
proposals published far initiate discussion suitability different modeling formalisms 
far able identify approach petri nets graph grammars 
action oriented representation business processes language congolog applicability language action approach ecommerce discussed 
investigated usability automata state variables formalism appears especially attractive due availability model checking tools 
limited experience formal methods business modeling approaches appears superior compared 
agree authors activity centered view business process models state view adopted model checking concurrent systems pose particular challenge needs explored 
summary outlook discussed pattern approach mapping problem business process automation integration 
starting business process model common modeling language emphasized need explicitly state requirements process underlying structural pattern 
example showed process structural pattern coupled repetitive activities mapped model linked counting nondeterministic automata state variables 
example discussed automatic verification process requirements case termination process designated set goal states support iterative approach correcting refining model making explicit assumptions remain hidden model 
symbolic model checking general approach verification finite state concurrent systems 
model checking computationally hard problem argue complexity business processes prevent technique 
symbolic representation methods allow talk entire sets states individual states 
second business process models appear bounded reasonable size large inhibit structural information permits decomposition process subprocesses 
current devoted analyzing various structural patterns business process models corresponding models 
typical examples branching merging activities interruption interleaving activities 
especially interested verifying termination processes designated states 
example counters showed clear limitation smv model checking tool allow specify arbitrary fixed bound state variable 
verification process repeated possible bounds 
currently developing alternative representations loops avoid limitation 
systems software verification modelchecking techniques tools 
springer 
bloom 
seeing owl light symbolic model checking business application requirements 
submitted publication 
christensen curbera meredith weerawarana 
web services description language wsdl 
www ibm com software solutions webservices resources html 
cimatti clarke giunchiglia roveri 
nusmv new symbolic model verifier 
proceed ings eleventh conference computer aided verification cav number lncs pages 
springer 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
clarke grumberg peled 
model checking 
mit press 
compton gurevich shen 
automatic verification tool uml 
technical report university michigan 
ebxml 
ebxml specification 
www ebxml org 
eriksson 
business modeling uml business patterns 
wiley computer publishing 
gordijn akkermans van vliet 
electronic business model 
proceedings th international conference knowledge engineering knowledge management ekaw number lncs pages 
springer 
harel 
modeling reactive systems statecharts statemate approach 
mcgraw hill 
janssen van der 
model checking managers 
theoretical practical aspects spin model checking number lncs pages 
springer 

business model process pattern commerce 
proceedings th international workshop language action perspective communication modelling pages 

temporal logic events states 
application theory petri nets number lncs pages 
springer 

mueller 
formal business process engineering graph grammars 
international journal production economics 
koubarakis plexousakis 
formal model business process modeling design 
conference advanced information systems engineering pages 
leymann 
wsfl web services flow language 
www ibm com software solutions webservices pdf wsfl pdf 
leymann roller 
production workflow 
prentice hall 
mcmillan 
symbolic model checking 
kluwer academic publishers 
rosettanet 
rosettanet lingua franca business 
www rosettanet org 
logic synthesis asics 
ibm journal research development 

xlang web services business process design 
www com 
