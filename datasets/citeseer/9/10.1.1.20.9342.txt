abstraction planning scheduling bradley clement anthony barrett gregg edmund durfee jet propulsion laboratory california institute technology oak grove drive pasadena ca usa barrett aig jpl nasa gov artificial intelligence laboratory university michigan beal avenue ann arbor mi usa durfee umich edu 
algorithm summarizing metric resource requirements task resource usages potential refinements 
summary information aspen planner scheduler coordinate team rovers conflict shared resources 
find analytically experimentally iterative repair planner experience exponential speedup reasoning summary information resource usages state constraints cases extra overhead involved degrade performance 
hierarchical task network htn planners represent actions decompose choices action sequences may htn planning problems requests perform set actions initial state 
planner subsequently refines tasks subtasks ultimately generate schedule primitive actions executable initial state 
differs strips planning planner find sequence actions execution achieve set goals 
htn planners find sequences perform tasks domain expert intuitively define hierarchies tasks planner rapidly generate sequences interest 
previous research shown certain restrictions hierarchical refinement search reduces search space exponential factor 
subsequent research shown restrictions dropped reasoning refinement conditions embodied actions 
summarized conditions represent internal external requirements effects action possible primitive actions decompose 
information planner detect resolve conflicts actions find solutions determine particular decomposition choices inconsistent 
apply reasoning techniques tasks metric resources 
algorithm processes task hierarchy description offline summarize plan operators metric resource requirements 
performed jet propulsion laboratory california institute technology contract national aeronautics space administration 
supported part 
fig 

example map established paths points rover domain thinner edges harder traverse labeled points associated observation goals planning scheduling efficiency major focus research support flexible plan execution systems prs raps jam exploit hierarchical plan spaces interleaving task decomposition execution 
postponing task decomposition systems gain flexibility choose decompositions best match current circumstances 
means refinement decisions acted actions decomposed detailed level 
refinements levels introduce unresolvable conflicts detailed levels system get stuck part way executing tasks perform requested tasks 
summary information system interleaves planning execution detect resolve conflicts levels avoid getting stuck provide ability recover failure 
section uses traveling rover example describe represent actions summary information 
representations subsequent section presents algorithm summarizing task potential resource usage possible refinements 
analytically show summary information accelerate iterative repair planner scheduler empirical measurements multi rover planning domain 
representations illustrate approach focus managing collection rovers explore environment lander mars 
exploration takes form visiting different locations making observations 
traversal locations follows established paths minimize effort risk 
paths combine form network mapped vertices denote distinguished locations edges denote allowed paths 
paths hard ground loose sand traversal harder rover slip 
resources tasks formally represent rover status terms state resource variables 
values state variables record status key rover subsystems 
instance rover position state variable take label vertex location network 
representation state information tasks preconditions effects represent equality constraints assignments 
rover example traveling arc point point done go task 
task precondition position effect position 
high path go go min min go min move take low path rays rays rays min min min go min min min go go morning activities middle path fig 

tree defining tasks decompose morning drive point point shortest paths example map addition interacting state variables tasks resources 
resources task persists task finishes 
type resource examples solar power immediately available task stops 
hand battery energy resource consumption persists task battery 
model task resource consumption subtracting usage amount resource variable task starts resources adding back completion 
approach simplistic conservatively approximate resource consumption profile breaking task smaller subtasks 
primitive tasks affect state resource variables task non leaf node tree tasks 
task executed executing subtasks set specified temporal constraints 
task executed executing subtasks 
gives example task 
imagine rover wants early morning trip point point example map 
trip sun slowly rises horizon giving rover ability progressively rays tasks provide solar power motors wheels 
addition collecting photons morning traverse moves rover resultant go tasks require path dependent amounts power 
rover traveling point point take number paths shortest involve steps 
summary information task state variable summary information includes elements pre postconditions 
summary preconditions conditions met initial state previous external tasks order task decompose execute successfully task summary postconditions effects decomposition execution undone internally 
summary conditions required asserted task decomposition interval execution 
summary conditions reason state variables affected performing task orthogonal types modalities may indicates condition holds decompositions task respectively indicates condition holds task execution interval 
trivial extend algorithms handle state resource constraints specified tasks 
instance move task example position summary precondition position postcondition decompositions move rover move task decomposes paths summary form may position 
state summary conditions formalized 
extending summary information include metric resources involves defining new representation algorithm summarization 
summarized resource usage consists ranges potential resource usage amounts performing task represent summary information structure min range local max range persist resource local usage occurs task execution persistent usage represents usage lasts task terminates resources 
usage ranges capture multiple possible usage profiles task multiple decomposition choices timing choices loosely constrained subtasks 
example high path task summary power minute interval 
case ranges single points due uncertainty task simply uses watts minutes followed watts minutes 
move provides slightly complex example due decompositional uncertainty 
task summary power minute interval 
cases persist range power resource 
summary resource usage structure range persistent usage resource ranges minimum maximum local usage resources minimum maximum usage limits want detect conflict occurs violating limits 
example reasoning resource usage summaries suppose watts power available move task 
local max range know unresolvable problem decomposing 
raising available power watts task executable depending gets decomposed scheduled raising watts task executable possible decompositions 
resource summarization algorithm state summarization algorithm recursively propagates summary conditions upwards tree leaves algorithm resource summarization takes approach 
starting leaves find primitive tasks constant amounts resource 
resource summary task units resource task duration resources respectively 
moving tree come branch 
branch combined summary usage comes computation min children lb local min range max children ub local min range min children lb local max range max children ub local max range min children lb persist range max children ub persist range lb ub extract lower bound upper bound range respectively 
children denote branch children durations extended length longest child 
duration extension alters child resource summary information child usage profile resource usage extension 
instance determine resource usage move combine minute tasks minute task 
resulting summary information minute task profile zero watt power usage minutes 
extension move local min range 
planners reason variable durations duration ranging 
computing branch summary information bit complicated due timing choices loosely constrained subtasks 
take path examples illustrate simplest subcase subtasks tightly constrained execute serially 
profiles appended resulting summary usage information comes form serial computation min children lb local min range pre lb min children ub local min range pre ub max children lb local max range pre lb max children ub local max range pre ub children lb persist range children ub persist range pre lb pre ub respective lower upper bounds cumulative persistent usages children execute computations form computations final persist range 
case subtasks execute parallel identical durations slightly simpler 
usage profiles add branch resultant summary usage comes parallel computation children lb local min range max children ub local min range non ub min children lb local max range non lb children ub local max range children lb persist range children ub persist range non ub non lb respective sums local max range upper bounds local min range lower bounds children handle tasks loose temporal constraints consider legal orderings child task endpoints 
example rover early morning tasks serial solar energy collection subtasks running parallel subtask drive location shows possible ordering subtask endpoints breaks move pieces rays children half 
ordering endpoints children determine subintervals compute summary information child task subinterval combination combine parallel subinterval summaries parallel computation chain subintervals serial computation 
task summary computed combining summaries possible orderings computation 
describe step generates different summary resource usages subintervals child task 
child task summary resource usage contributes summary resource usages intersecting subinterval summary resource usages interval intersecting child task replace persist range 
rays move rays rays fig 

possible task ordering rover morning activities resulting subintervals 
usage tighter local ranges second looser local ranges 
bounds apply subintervals containing subtask minimum maximum usages tighter ranges apply subtask intersecting subintervals 
minimum maximum usages may occur subinterval symmetry arguments connect computation 
subinterval tighter local ranges intersecting subintervals get looser local ranges extra complexity comes having investigate subtask subinterval assignment options 
instance subintervals intersecting move different assignments summary resource usages subintervals placing subinterval 
placement options result subtask subintervals having possible subinterval assignments 
child tasks alternate assignments combinations potential subtask subinterval summary resource usage assignments 
propagating summary information branch exponential number subtasks multiple internal subintervals 
number subtasks controlled domain modeler usually bounded constant computation tractable 
addition summary information derived offline domain 
propagation algorithm takes form consistent ordering endpoints consistent subtask subinterval summary usage assignment parallel computations combine subtask subinterval summary usages subinterval 
serial computation subintervals combined summary usages get consistent summary usage 
computation combine consistent summary usages get task summary usage 
summary information section describe techniques summary information local search planners reason levels effectively discuss complexity advantages 
reasoning plan operators summary information result exponential planning performance gains backtracking hierarchical planners 
iterative repair planning technique called aggregation involves scheduling hierarchies tasks similarly outperforms movement tasks individually 
summary information iterative repair planner improve performance aggregation 
demonstrate summarized state resource constraints exponential improvements collapsing constraints levels 
describe aggregation summary information schedule tasks iterative repair planner 
analyze complexity moving detailed tasks aggregation summary information 
describe heuristic iterative repair planner exploit summary information 
aggregation summary information htn planners commonly take generative commitment approach problem solving research community illustrates simple local search surprisingly effective 
heuristic iterative repair planning uses local search generate plan 
starts initial flawed plan iteratively chooses flaw chooses repair method changes plan applying method 
generative planning local search backtracks 
random walk large space plans inefficient heuristics guide choices determining probability distributions choice 
build approach planning aspen planner 
moving tasks central scheduling operation iterative repair planners 
planner effectively schedule tasks moving related groups tasks preserve constraints 
hierarchical task representations common way representing groups constraints 
aggregation involves moving fully detailed task hierarchy preserving temporal ordering constraints subtasks 
moving individual tasks independent siblings subtasks shown efficient 
valid placements task hierarchy schedule computed state resource usage profile hierarchy 
profile represents instantiation decomposition temporal ordering task hierarchy 
summarized state resource usage represents potential profiles task decomposed 
approach involves reasoning summarized constraints order schedule tasks decomposed 
scheduling task computationally cheaper scheduling task hierarchy aggregation summarized constraints compactly represent constraint profiles hierarchy 
improves performance planner scheduler resolves conflicts finds solutions levels fully decomposing tasks 
complexity analysis move hierarchy tasks aggregation valid intervals computed resource variable affected hierarchy 
valid intervals intersected valid placements tasks children 
complexity computing set valid intervals resource cc number constraints usages task children variable number constraints tasks schedule variable 
similar task hierarchies entire schedule complexity computing valid intervals nc 
computation done resource variables constant domain moving task complexity vnc 
summary information task represents constraints children children share constraints resource information collapsed single summary resource usage task 
moving task number different constraints involved may far fewer depending domain 
scheduler trying place summarized analysis applies state constraints restrict discussion resource usage constraints simplicity 
task summarized tasks computation valid placement intervals greatly reduced vnc smaller 
consider extreme cases constraints fully collapsed collapsed 
case tasks hierarchy constraints resource number constraints hierarchy hierarchy depth branching factor number child tasks parent aggregation hierarchies fully detailed means complexity moving task 
consider aggregation moving partially expanded hierarchy leaves summarized tasks 
hierarchies schedule decomposed level tasks hierarchy summarized constraint representing subtasks beneath constraint variable 
complexity moving task 
moving task summary information factor times faster aggregation 
extreme tasks place constraints different variables 
case hierarchy constraint variable 
fully detailed hierarchies contain different variables complexity moving task case nb 
moving summarized task tasks schedule decomposed level task summarizes constraints subtask hierarchy beneath constraints different variables constraints combine summarized 
complexity moving partially expanded hierarchy fully expanded 
experiments section exhibit great improvement cases tasks constraints common resource variables 
dimension scheduling summarized tasks exponentially faster fewer temporal constraints higher level tasks 
task hierarchies moved aggregation local temporal constraints preserved 
valid intervals move entire hierarchy 
scheduler may able move constraining lower level tasks resolve conflict 
case temporal constraints may violated moved task parent siblings 
scheduler move adjust durations parent siblings resolve conflicts movements affect higher level temporal constraints produce conflicts 
depth level hierarchy decompositions branching factor task movement affect siblings worst case produce number conflicts exponential depth task 
conflicts resolved level scheduling operations may avoided 
section empirical data shows exponential growth computation respect depth aspen finds solutions 
complexity analyses shown certain restrictions different forms hierarchical problem solving reduce size search space exponential factor 
basically restrictions algorithm needs backtrack lower levels higher levels problem 
words subproblems introduced different branches hierarchy interact 
assumption problems 
speedup described assume hierarchies need fully expanded find solutions 
decomposition heuristics iterative repair despite optimistic complexity reasoning summarized constraints translates better performance movement summarized tasks resolves conflicts advances search solution 
may way resolve conflicts tasks decomposing detailed ones 
summary information reason tasks decomposed 
describe techniques reasoning summary information tasks detailed 
explored approaches reason tasks top level abstraction manner described 
initially planner reasons summary information fully abstracted tasks 
planner manipulates schedule tasks gradually decomposed open new opportunities resolving conflicts detailed child tasks 
strategy refer level decomposition interleave repair decomposition separate steps 
step planner repairs current schedule number conflicts reduced 
step decomposes tasks level returns step 
spending time particular level expansion appears effective planner attempts find highest decomposition level solutions exist wasting time level 
approach decomposition repair methods applied conflict planner gradually decomposes conflicting tasks 
strategy tends decompose tasks involved conflicts task involved conflict potentially expanded conflict repaired 
idea scheduler break overconstrained tasks smaller pieces offer flexibility conflicts 
resembles expand threats heuristic expands decomposes tasks involved conflicts 
refer heuristic 
heuristic avoids unnecessary reasoning details non conflicting tasks 
similar constrained variable heuristic employed constraint satisfaction problems 
heuristic improving planning performance prefers decomposition choices lead fewer conflicts 
effect constraining value heuristic constraint satisfaction approaches 
summary information planner test child task decomposing child replacing parent summarized constraints summarize children particular child summarized constraints 
child number conflicts schedule counted child creating fewest conflicts chosen 
fewest threats heuristic shown effective pruning search space backtracking planner 
likewise experiments section show similar performance improvements 
empirical comparisons experiments describe show summary information improves performance significantly tasks hierarchy constraints resource solutions level abstraction 
time find cases reasoning incurs significant overhead solutions deeper levels 
domains decomposition choices critical show overhead insignificant heuristic finds solutions deeper levels better performance 
experiments show heuristic outperforms level decomposition certain decomposition rates 
addition show time find solution increases dramatically depth solutions supporting analysis section 
stochastic planners aspen children chosen probability decreasing respective number conflicts 
summary information aggregation cpu seconds summary information aggregation cpu seconds aggregation cpu seconds summary information aggregation cpu seconds aggregation cpu seconds fig 

plots channel mixed channel domains domain problems expands single rover problem described earlier sections team rovers resolve conflicts shared resources 
paths waypoints assigned random capacities rovers traverse path simultaneously rover waypoint rovers may traverse paths opposite directions 
addition rovers communicate lander telemetry shared channel fixed bandwidth 
depending terrain required bandwidth varies 
problems generated rovers observation locations rover waypoints 
schedules ranged tasks 
note prototype interface summary information aspen optimized scheduling techniques 
compare aspen aggregation summarization variations domain 
summary information includes decomposition heuristics 
domain excludes communications channel resource channel excludes path capacity restrictions channel includes mentioned resources mixed 
movement tasks reserve channel resource expect greater improvement performance summary information complexity analyses previous section 
tasks rover hierarchy rarely place constraints variables channel domain corresponds case summarization collapses constraints 
top exhibits distributions problems channel domain 
cases points axis aspen summary information finds solution quickly level abstraction 
cases summary information performs notably worse points axis 
find problems finding solution requires planner dig deep rovers hierarchies decomposes hierarchies levels difference additional time find solution approaches negligible time spent reasoning summary information higher levels incurred unnecessary overhead 
previous shows overhead rarely significant backtracking planners sum average depth hierarchies solution fig 

cpu time solutions varying depths 
mary information prune inconsistent search spaces levels 
non backtracking planners aspen opportunity prune search space levels heuristic avoid greater numbers conflicts particular branches 
explain helpful domain effective modified domain 
left shows significant improvement summary information mixed domain compared channel domain 
adding channel resource rarely affected summary information collapse summary constraints incurred insignificant additional complexity 
channel resource scheduling task noticeably difficult aspen summary information 
channel domain right summary information finds solutions level immediately problems complicated aspen summary information 
results support complexity analysis previous section argues summary information exponentially improves performance tasks hierarchy constraints resource solutions level abstraction 
shows cpu time required aspen summary information mixed domain depths solutions 
depths average depths leaf tasks partially expanded hierarchies 
cpu time increases dramatically solutions greater depths supporting claim finding solution levels exponentially easier 
described domain choosing different paths observation location usually significant difference number conflicts encountered rovers cross paths path choices lead conflict 
created new set problems obstacles force rovers take paths corridors connection paths 
problems path choices lead different corridor get target location usually path avoids conflict path causes 
planner heuristic dominates planner choosing decompositions randomly problems left 
right shows performance vs level decomposition different rates decomposition problems selected set 
plotted points averages runs problem 
depending choice rate decomposition probability task decompose conflict encountered performance varies significantly 
best decomposition rate vary problem problem making potentially difficult domain expert choose 
include investigating relation decomposition rates performance problem structure 
experiments decomposition rate 
summary information cpu seconds cpu seconds decomposition rate level decomp level decomp level decomp fig 

performance vs level decomposition heuristics 
reasoning constraints exponentially accelerates finding schedules constraints collapse summarization solutions level abstraction 
similar speedups occur decomposition branches result varied numbers conflicts 
offline algorithm summarizing metric resource usage performance gains available larger set expressive planners schedulers 
shown performance advantages improve aspen effectiveness scheduling tasks multiple spacecraft 
summary information enables planner preserve decomposition choices robust execution systems handle degree uncertainty failure 
includes evaluating tradeoffs optimizing plan quality approach developing protocols allow multiple spacecraft planners coordinate tasks asynchronously execution 

chien knight sherwood engelhardt estlin smith fisher barrett tran 
automating space mission operations automated planning scheduling 
proc 


clement durfee 
theory coordinating concurrent hierarchical planning agents 
proc 
aaai pages 

clement durfee 
performance coordinating concurrent hierarchical planning agents summary information 
proc 
atal pages 

erol hendler nau 
semantics hierarchical task network planning 
technical report cs tr university maryland 

firby 
adaptive execution complex dynamic domains 
phd thesis yale univ 

georgeff lansky 
procedural knowledge 
proc 
ieee oct 

huber 
jam bdi theoretic mobile agent architecture 
proc 
intl 
conf 
autonomous agents pages 

knight chien 
computing valid intervals collections activities shared states resources 
proc 
aips pages 

knoblock 
search reduction hierarchical problem solving 
proc 
aaai pages 

korf 
planning search quantitative approach 
artificial intelligence 

lee huber durfee kenny 
implementation procedural reasoning system multirobot applications 
proc 
aiaa nasa conf 
intelligent robotics field factory service space pages march 

papadimitriou steiglitz 
combinatorial optimization algorithms complexity 
dover publications new york 
