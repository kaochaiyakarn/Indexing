categorization classes visualization internal structure class blueprint michele lanza software composition group university bern bern switzerland lanza iam unibe ch note proceedings reader heavy colors figures 
please obtain read online colored version order better understand ideas 
reengineering reverse engineering software systems gaining importance software industry accelerated turnover software companies creates legacy systems shorter period time 
especially understanding classes key activity object oriented programming classes represent primary abstractions applications built 
main problem task quickly grasp purpose class inner structure 
help reverse engineers contact foreign system propose categorization classes visualization internal structure 
contributions novel categorization classes visualization classes call class blueprint 
validated categorization case studies 
keywords reverse engineering program understanding software visualization visual patterns smalltalk 
object oriented programming understanding certain class key wider understanding system class contained 
especially industrial context turnover developers accelerating reverse engineering code important 
basic approach class understanding basically changed past decades 
independently implementation language development environment mainly source code reading 
argue reading source code written poses problem 
current state software industry st phane ducasse software composition group university bern bern switzerland ducasse iam unibe ch man projects rare cases reuse understand foreign code form frameworks apis class libraries 
cross put usually system maintainers designers expend resources examine learn system 
benefit high level languages source code read text written english 
names developers classes methods attributes convey substantial understanding requiring depth analysis source code 
apart obvious difficulties stem acronyms domain specific terminology inheritance object oriented software code hard read inheritance represents form incremental definition classes 
fully understand class understand super subclasses 
problem represented dynamic self calls meaning completely change superclass changed new superclass inserted inheritance hierarchy 
contact foreign software system need quick intuitive understanding classes 
note understand class need read line code need understand piece functionality contained 
propose simple approach ease understanding classes visualizing static structure class 
goal visualization gain certain quality comprehension taste class intuitive quick understanding internal structure way interacts super subclasses 
approach strive understand exact functionality class requires reading code 
take account dynamic run time aspects context reverse engineering relevant point time 
focus static structure classes way inheritance leave collaboration aspects 
coined term class blueprint visualization 
obtained insights establish vocabulary class blueprints ease understanding common language reverse engineers communicate 
stress approach depend particular language underlying metamodel language independent 
results obtained smalltalk case studies features language 
contributions novel categorization classes visualization classes call class blueprint 
structured follows section concept class blueprint build categorization section 
validation categorization applied case studies 
reengineering environment concluding discussion obtained results give outlook topic 

blueprint class section class blueprint way visualize internal structure classes 
layered structure blueprint 
discuss way display methods attributes including color schema 
shortly discuss layout algorithm displaying discussing class blueprint visualization 
layers class blueprint template class blueprint 
left right layers initialization interface implementation accessor attribute 
layers methods contained placed left right method invocation sequence method invokes method placed right class name initialization interface implementation accessor attributes invocation sequence decomposition class layers 
concrete class mapped template class blueprint layers described 
layer list conditions fulfilled assigned layer 
note layers mutually exclusive attribute layer 
note conditions listed follow lightweight approach considered complete 
seen sufficient purposes 

creation initialization layer 
methods contained layer responsible creating object initializing values attributes object 
consider method belonging initialization layer conditions holds method name contains substring initialize init 
method constructor 
case smalltalk methods clustered called method protocols methods placed protocols name contains substring initialize 
current approach take account static initializers java covered metamodel 

external interface layer 
methods layer considered entry points functionality provided class 
method belongs layer holds invoked methods initialization layer 
languages java declared public protected 
invoked methods class method invoked outside class methods collaborator classes subclasses 
method invoked inside outside class placed implementation layer 
count accessor methods layer layer show 

internal implementation layer 
methods layer ones doing main class assuring class provide functionality promised interface layer 
method belongs layer holds languages java declared private 
method invoked method class 

accessor layer 
layer composed accessor methods methods sole task get set values attributes 

attribute layer 
attribute layer contains attributes class 
attributes connected layers means access relationships attributes accessed methods 
representing methods attributes class blueprint layers class represent methods attributes colored boxes various size shape 
width metric method attribute height metric graphical representation methods attributes metrics 
size shape methods attributes width height boxes reflect metric measurements entities represented boxes see 
approach 
method boxes metric lines code loc number non blank lines method body height number invocations ni number static call sites width 
attribute boxes metrics number direct accesses class width number direct accesses outside class nga height 
note total number accesses attribute sum nga 
explanations metrics please refer 
colors class blueprint colors display supplementary information class blueprint 
table list colors figures 
note proceedings version printed color 
please obtain online version order see colors class blueprint 
description color attribute blue method cyan extending method 
method orange name superclass performs super invocation overriding method 
method completely redefines behavior method superclass name invoking superclass method brown delegating method 
method delegates functionality supposed provide forwarding method call object yellow constant method 
method returns constant value grey initialization layer method green interface implementation layer method white accessor layer method red invocation method black line invocation accessor 
semantically direct access cyan line access attribute cyan line table color schema class blueprints 
layout algorithm class blueprint placement methods attributes layers context method initialization method placed initialization layer 
enhance placement simple tree layout algorithm left right method invokes method placed right connected edge represents invocation relationship 
case method accesses attribute edge represents access relationship 
class name initialization interface implementation accessor attributes invocation sequence basic filled structure class blueprint 
see template blueprint 
see initialization methods interface methods 
see accessors ones ellipse invoked unused attributes accessed 
visualization class blueprint ideas described section presents blueprint visualization real class 
see class initialize layer methods invoked leftmost 
see class wide external interface composed methods 
class attributes empty accessor layer 
see color scheme table class contain overriding extending delegating constant methods 
actual blueprint visualization class 

categorization classes class blueprints section categorization classes blueprints way display approach described previous section 
categorization stems experiences obtained applying approach case studies 
subdivide section parts part categorize classes internal structure second part extend context inheritance hierarchy class resides 
term pure class blueprint falls unequivocally categories proposed section 
kind collaboration classes discuss inheritance 
due limited size show figures contain kind blueprint 
blueprints discussed 
single class perspective part introduce categorization classes blueprint considering surrounding sub superclasses 
class blueprint statements regarding internal implementation aspects class 
note class belong categories 
single entry 
define single entry class entry point interface layer 
large implementation layer levels invocation relationships 
classes designed deliver complex functionality 
classes implement specific algorithm belong type 
see actual single entry class 
blueprint class single entry class accessors 
data storage 
define data storage class class mainly contains attributes values read written accessor methods 
class implement complex behavior merely stores retrieves data classes 
implementation layer empty class functionality need complex mechanisms delivered 
attribute layer contains attributes accessed directly accessor methods 
see example data storage class 
blueprint class data storage class 
see accessors attributes 
internal implementation layer empty 
wide interface 
wide interface offers entry points functionality respect implementation layer 
example class gui class buttons user interface offers method button user press 
note data storage class belongs type class 
see examples wide interface class blueprints 
blueprint class wide interface class 
large implementation 
implementation class large implementation layer methods invocations methods 
single entry class belong type invocation tree deep narrow 
large classes large implementation layer 
see large implementation class class moose case study contains layers invocations 
delegator 
class defines delegating methods 
class defines delegating methods name pure delegator 
class delegates calls functionality classes implement needed functionality 
class methods interface layer marked delegator methods 
delegator represent design pattern facade wrapper 
see example delegator 
constant definer 
constant definer class defines default methods return constant values 
see blueprint class large implementation class delegator wide interface 
example constant definer constant methods grey color 
small class 
define small class class contains methods attributes 
understand class know name especially class standalone class belong inheritance hierarchy 
inheritance perspective expand categorization class blueprints considering way classes inheritance relationships ancestors descendants 
perspective adds considerable meaning class functionality provided class fact distributed inheritance chain class belongs 
case inheritance visualize class blueprint separately put subclasses superclasses similar inheritance tree layout see 
account inheritance hierarchy approach leads range new class categories 
section distinction 
classes reside top hierarchy 
may define kind interface behavior subclasses apart providing functionality 
visualization class blueprints context inheritance 

specializers leaf classes inheritance hierarchies implement refine behavior bottom hierarchies 

classes 
put categories 
example class higher part inheritance hierarchy definer class classified shows properties definer class 
definer classes definer class resides higher levels inheritance hierarchy main purpose define behavior state common subclasses 
defines attributes inherited subclasses default hook methods overridden extended subclasses 
list types definer classes way defined behave 
types listed mutually exclusive class types 
pluggable 
pluggable class establishes inheritance policy defining methods overridden subclasses compliant policy 
tightly ties subclasses pluggable class 
pure pluggable class defines methods 
example pluggable class 
class hierarchy duploc case study consisting pluggable superclass pure talking 
attribute definer 
definer class purpose define attributes instance variables inherited accessed subclasses 
see superclass defines heavily accessed attributes size attributes shows 
blueprints classes moose case study show attribute definer superclass talking subclasses 
blueprints classes moose case study show constant definer superclass talking twins 
specializer classes specializer classes classes specialize extend behavior superclasses 
section introduce categories discuss detail 
ways classes specialize behavior superclasses ways communicate 
combination result possible categories 
context inheritance classes possibilities extend behavior superclasses 
extending 
subclass contains method contains super call 
subclass extends superclass tightly bound direct functionality defined 

overriding 
subclass contains method overrides definition method signature superclass functionality method defined superclass completely redefined 
super call overridden superclass method 

adding 
subclass add functionality defined higher hierarchy adding methods superclass 
distinguish different ways communication classes inherit 
talking 
subclass communicates talks superclasses invoking methods accessing attributes superclasses 

mute 
subclass mute invoke superclass methods access superclass attributes 
inheritance classification summarize possible combinations table 
note mute extender possible definition extension includes call superclass 
mute talking extending talking ex tender overriding mute talking rider adding mute adder talking adder table classification schema inheritance 
list combinations listed table properties class blueprints 
talking extender 
talking extender class communicates superclasses invoking methods accessing attributes 
contains extending methods methods super call method name 
note classes may fragile change superclass example removal method direct effect depending subclasses 
case pure talking extender see marked rare 
mute 
mute class contains overriding method bound superclass 
invoke methods contained access attributes superclass 
talking 
talking overrides methods contained superclass communicates method invocations attribute accesses 
mute adder 
mute adder communicate superclass override methods 
contains added functionality 
occasions may result wrong subclassing subclass superclass 
subclass moved breaking functionality 
talking adder 
adder class adds functionality superclass invokes methods accesses attributes superclass 
case pure talking adder check class extend override methods 
note classes belong category time 
rare pure blueprints pure adder pure extender 
frequent case example talking adder class subclasses see 
special class blueprints detected special cases class blueprints list micro specializer 
specializer small class defines overriding extending methods 
classes mainly specialize kind behavior 
twin 
encounter twins sibling classes impressive similarity terms methods attributes method invocations attribute accesses 
case programmer forgot refactor common functionality superclass twins 
see example 
pure accessor 
class invoke superclass methods directly accesses attributes defined superclasses 
examples pure accessing seen 
unfinished realizer 
unfinished realizer class fulfill inheritance contract superclass override methods defined superclass 
easy detect number overridden methods subclass inferior number methods superclass 
interpreting suspicious class blueprints sight class blueprints may hard classify contain suspicious parts 
section frequent cases splittable classes 
may class doing done 
blueprint comes separate clusters methods attributes connected way 
martin fowler suggests case extract class refactoring 
note current blueprint layout algorithm clearly show splittable classes manual post processing needed 
inconsistent accessor 
shown cases inconsistent accessors 
method accesses attribute directly accessor 
note situation haphazard case accessor lazy initialization accessed attribute may undefined state 
second accessor invoked 
case accessor method adds unneeded complexity class 
justification class part framework class intended reuse subclassing 
classes blueprint 
questions remains answered happens visualized class match blueprints 
happens quite larger method method accessor accessor invoked attribute attribute cases inconsistent accessor 
classes say methods 
classes need necessarily sign bad design think classes suspicious examined 
misuse inheritance hierarchy policy 
approach inheritance hierarchies seen hierarchy built main inheritance concept example extension 
case extender subclasses 
happen class hierarchy compliant policy established hierarchy 
conclude class question unfinished added developer unfamiliar inheritance policy local hierarchy 
seen lower level means definer class defines methods expect see overriding methods subclasses 
case means misuse inheritance subclass finished 
pure mute 
case pure mute subclass invoke access superclass method overrides 
case subclass may really need subclass moved sibling superclass overridden methods behavior defined pushed higher new superclass new 
subclass sibling 
detection cases provoke major changes inheritance hierarchy enhancing flexibility design system 
situation shown similar extract superclass refactoring discussed martin fowler 
new extract superclass refactoring 

validation approach validate approach procedure class case studies visualized approach 
blueprint visualization put class categories mentioned previous section 
selected case studies knowledge 
case choose application developed able verification obtained categorization 
second case chose foreign application evaluate approach unbiased fashion 
keep limits possible discuss blueprint 
prefer discuss examples show benefits blueprints summarize discuss final results 
moose reengineering environment moose reengineering framework written smalltalk developed 
contains deep hierarchies language independent metamodel tool support 
contains classes mainly responsible graphical user interface 
see overview moose codecrawler 
inheritance tree overview moose case study 
case boxes represent classes 
number attributes width number methods height boxes 
color represents lines code 
summarized classes moose version table 
root classes standalone classes leaf classes classes total number classes table summary classes moose 
treated standalone classes examples shown previous section exemplify insights get blueprint visualization 
seen class single entry class methods invoke linear fashion left right 
attribute right side accessed method 
seen example wide interface class interface layer class wide compared rest class 
focused small inheritance tree classes right side marked see blueprint classes 
hierarchy see subclasses heavy extension 
class extending methods marked long methods shown size method rectangles 
deduce class implemented rapidly deep blueprints classes hierarchy inheritance policy method extension 
subclasses comply marked class marked pure talking extender 
knowledge inheritance policy inheritance hierarchy 
see marked small talking extender 
case root class define large implementation class layers attribute definer 
see attributes class heavily accessed subclasses 
example shown composed small subtree composed classes 
superclass root larger inheritance hierarchy constant definer class wide interface 
subclasses nearly identical talking twins 
classifying classes moose blueprints summarized findings table 

drawn moose shows characteristics mature application act facades tightly bound hierarchy heavy extending methods 
developers moose surprises 
example detected mute adders actual cases wrong subclassing 
insights triggered refactorings especially inconsistent accessors 
detected low number false positives classes blueprint indicated wrong category 
average sized classes clear blueprint categorize normal 
see limit approach especially context reverse engineering legacy systems tendency classes 
single entry data storage wide interface large implementation delegator small class pluggable attribute definer constant definer talking extender mute talking mute adder talking adder talking adder extender twin pure blueprint table final summary moose class blueprints 
duploc duplication detection tool duploc application written smalltalk developers 
duploc development years complex mature application goal support detection duplicated code large industrial applications 
version duploc examined consisted classes standalone resided small inheritance hierarchies 
shown blueprints duploc classes 
want show class give impression information class blueprint conveys user class obviously wide interface delegator class 
defines constants 
peculiarity class fact parts behave single entry class 
single entry data storage wide interface large implementation delegator small class pluggable attribute definer constant definer talking extender mute talking mute adder talking adder talking adder extender twin pure blueprint table final summary duploc class blueprints 

summarized findings table 
drawn duploc looking class blueprints contained innumerable small classes wide interface class duploc delegator shows characteristics single entry 
constant definer 
code contained pattern structures facades wrappers classes classified blueprints due considerable size complexity 
findings concerning inconsistent accessors unfinished classes overly large methods 

codecrawler moose codecrawler tool visualize class blueprints 
codecrawler supports reverse engineering combination metrics software visualization 
power flexibility simplicity scalability repeatedly proven large scale industrial case studies list table 
classes java kloc classes xxx smalltalk kloc classes cobol kloc table list industrial case studies code crawler applied 
codecrawler implemented top moose 
moose language independent reengineering environment written smalltalk 
famix metamodel provides language independent representation object oriented sources contains required information reengineering tasks performed tools 
language independent need legacy systems written different implementation languages 
extensible know advance information needed tools reengineering problems tools need language specific information allow language plug ins extend model language specific features 
allow tool plugins extend model tool specific information 
simplified view famix metamodel 
simplified view famix metamodel comprises main object oriented concepts class method attribute inheritance plus necessary associations invocation access see 

related software visualization 
various approaches support reverse engineering proposed literature graphical representations software long accepted comprehension aids 
tools static information visualize software rigi hy seesoft tango commercial tools see www com name prominent examples 
publications tools address problem large scale static software visualization treat classes smallest unit visualizations 
tools instance field programming environment visualized internals classes usually limited showing method names attributes color codes classification browser uses colors denote methods substantial research conducted runtime information visualization various tools approaches dynamic trace information program explorer ancestors 
various approaches discussed interactions program executions visualized name 
provide visualization internal structure classes terms implementation static behaviour context inheritance relationships classes 
sense approach proposes new dimension understanding systems 
metrics 
metrics long studied way assess quality complexity software applied object oriented software 
metrics profit scalability case simple ones reliable definition 
metrics assess internal complexity classes example counting number methods attributes 
metrics provide combined view class internal structure 

section discuss lessons learned application categorization case studies 
list benefits limits approach give outlook 
lessons learned case studies case studies shown approach useful 
visualizations class blueprints classify blueprints seconds 
obtained insights especially system places class blueprints indicated possible problems 
seen case specializer classes number pure blueprints small 
frequent case subclasses time override extend add functionality superclasses 
case foreign case study approach useful assumptions classes terms purpose coding style coding conventions 
furthermore number false positives classes wrongly classified small 
statement seen light fact system case study determine false positives requires know system 
benefits approach main benefits approach reduction complexity taste class 
simple visualization named class blueprint assumptions class having read source code 
taste class conveys purpose class contexts 
single class perspective 
blueprint assumptions gain insights structure internal implementation class 

inheritance perspective 
blueprints classes related inheritance statements way class embedded inheritance hierarchy way inheritance 
common vocabulary 
defined common vocabulary different class categories blueprints 
vocabulary utmost importance reverse engineering process complex contexts situations communicated person efficient way 
limits approach approach limited ways cognitive science 
visualization algorithm methodology coming ad hoc 
provably useful shows little connection research field cognitive science 
time striving update knowledge field example 
layout algorithm 
approach relies heavily efficient layout algorithm terms space readability 
especially case large classes may happen real statement class large 
furthermore minor manual post processing required time 
functionality 
blueprint class give viewer taste class glance 
show functionality class provides 
approach proposed complementary approaches understand classes 
collaboration 
address collaboration aspects classes time 
static analysis 
approach dynamic information 
means ignoring runtime information methods get invoked class 
especially relevant context polymorphism switches code 
sense class blueprint seen visualization possible combination method invocations 
plan experiences refine blueprint naming scheme enhance visualization part success approach heavily depends 
particular apply legacy systems evaluate percentage classes categorized class blueprints 
plan extend approach classes inheritance hierarchy collaborate 
plan integrate approach methodology proposed extend refine reverse engineering methodology 
empirical usability analysis qualitative validation approach letting reverse engineers system collect experiences 
second possibility want explore compare reverse engineering efficiency groups users tool 
plan apply approach applications developed java 
evaluate layers defined especially public interface layer valid languages 
metrics engine supports metrics evaluate metrics ones 
acknowledgments 
wish oscar nierstrasz sander tichelaar reviewing drafts 
wish anonymous reviewers helpful comments 

chikofsky cross ii 
reverse engineering design recovery taxonomy 
ieee software pages jan 
consens mendelzon 
hy query visualisation system 
proceeding acm sigmod international conference management data sigmod record volume pages 

novel approach architectural recovery evolving object oriented systems 
phd thesis vrije universiteit brussel 
demeyer ducasse lanza 
hybrid reverse engineering platform combining metrics program visualization 
blaha rugaber editors proceedings wcre th working conference reverse engineering 
ieee oct 
demeyer tichelaar ducasse 
famix information exchange model 
technical report university berne 
appear 
ducasse lanza 
methodology understanding object oriented systems 
technique science informatique 
appear techniques sciences edition 
ducasse lanza tichelaar 
moose extensible language independent environment reengineering object oriented systems 
proceedings second international symposium constructing software engineering tools coset june 
eick steffen jr seesoft tool visualizing line oriented software statistics 
ieee transactions software engineering november 
fenton pfleeger 
software metrics rigorous practical approach 
international thomson computer press london uk second edition 
flanagan 
java nutshell rd edition 
reilly rd edition 
fowler beck brant opdyke roberts 
refactoring improving design existing code 
addison wesley 
gamma helm johnson vlissides 
design patterns 
addison wesley reading ma 
henderson sellers 
object oriented metrics measures complexity 
prentice hall 
jerding ball 
visualizing interactions program executions 
proceedings icse pages 
kazman 
assessing architectural complexity 
technical report university waterloo 

understanding object oriented systems concurrently animated views 
proceedings oopsla acm sigplan notices pages nov 
published proceedings oopsla acm sigplan notices volume number 
lange nakamura 
interactive visualization design patterns help framework understanding 
proceedings oopsla pages 
acm press 
lanza 
combining metrics graphs object oriented reverse engineering 
diploma thesis university bern oct 
lorenz kidd 
object oriented software metrics practical guide 
prentice hall 
ller 
rigi model software system construction integration evaluation module interface specifications 
phd thesis rice university 
pauw helm vlissides 
visualizing behavior object oriented systems 
proceedings oopsla acm sigplan notices pages oct 
pauw 
visualizing patterns solving memory leaks java 
guerraoui editor proceedings ecoop pages lisbon portugal june 
springer verlag 
reiss 
interacting field environment 
software practice experience 
stasko 
tango framework system algorithm animation 
ieee computer september 
steyaert lucas mens hondt 
reuse contracts managing evolution reusable assets 
proceedings oopsla conference pages 
acm press 

storey ller 
manipulating documenting software structures shrimp views 
proceedings international conference software maintenance 
ware 
information visualization 
morgan kaufmann 
wilde 
maintenance support object oriented programs 
ieee transactions software engineering se dec 
