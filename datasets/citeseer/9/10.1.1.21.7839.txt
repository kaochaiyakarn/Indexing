disambiguation filters scannerless generalized lr parsers van den brand visser centrum voor wiskunde en informatica cwi kruislaan sj amsterdam netherlands mark van den brand jurgen cwi nl department philosophy utrecht university cs utrecht netherlands js phil uu nl institute information computing sciences utrecht university box tb utrecht netherlands visser acm org real world problems call parsing power offered widely established deterministic parsing techniques 
techniques create artificial divide lexical context free analysis phases cost significant complexity interface 
fusion generalized lr parsing scannerless parsing 
combination supports syntax definitions aspects lexical context free syntax language defined explicitly formalism 
furthermore restrictions class grammars allowing natural syntax tree structure 
ambiguities arise unrestricted grammars handled explicit disambiguation constructs implicit defaults taken traditional scanner parser generators 
syntax definition full declarative description language 
disambiguation constructs interpreted filters parse forests 
depending kind disambiguation filters applied parser generation time parse time parsing 
scannerless generalized lr parsing viable technique applied various industrial academic projects 
efficient deterministic parsing techniques parsing considered closed topic research computer scientists compiler construction 
tools deterministic parsing algorithms lex yacc lalr javacc recursive descent considered adequate dealing modern programming languages 
development powerful parsing techniques prompted domains reverse engineering domain specific languages languages user definable mixfix syntax 
field reverse engineering concerned automatically analyzing legacy software producing specifications documentation 
area provides numerous examples parsing problems tackled powerful parsing techniques 
grammars languages cobol pl fortran naturally lalr 
default resolution conflicts needed implement parser languages yacc 
maintenance grammars pain changing adding productions lead new conflicts 
problem aggravated different dialects need supported vendors implement cobol dialect 
grammar formalisms modular usually leads forking grammars 
trouble caused embedding foreign language fragments assembler code sql cics common practice cobol programs 
merging grammars languages leads conflicts context free grammar level lexical analysis level 
just examples problems encountered deterministic parsing techniques 
need tackle problems area reverse engineering led revival generalized parsing algorithms earley algorithm variants tomita algorithm glr recursive descent backtrack parsing 
generalized parsing solves problems area generalized parsing 
describe benefits practical applicability scannerless generalized lr parsing 
section discuss merits scannerless parsing generalized parsing argue combination provides solution problems ones described 
section describe disambiguation separated grammar structure allowing natural grammar structure declarative selective specification disambiguation 
section discuss issues implementation disambiguation 
section practical experience parsing technique discussed 
section figures performance implementation scannerless generalized parser 
related discussed needed 
conclude section 
scannerless generalized parsing generalized parsing generalized parsers class parsing algorithms constrained restrictions class grammars handle contrary restricted parsing algorithms various derivatives ll lr algorithms 
algorithms deal context free grammars ll lr form generalized algorithms earley tomita algorithms deal arbitrary context free grammars 
major advantages arbitrary context free grammars 
firstly class context free grammars closed union contrast proper subclasses context free grammars 
example composition lalr grammars lalr grammar 
compositionality context free grammars opens possibility developing modular syntax definition formalisms 
modularity programming languages formalisms key beneficial software engineering concepts 
striking example modularity grammar obviously practical definition hybrid languages cobol cics assembly 
sdf example modular syntax definition formalism 
secondly arbitrary context free grammar allows definition declarative grammars 
need massage grammar ll lr lalr form 
grammar reflect intended structure language resulting concise readable syntax definition 
grammar documentation implementation language changes 
generalized parsers deal arbitrary grammars deal ambiguous grammars 
deterministic parser produces single parse tree non deterministic parser produces collection forest trees compactly representing possible derivations grammar 
helpful developing grammar language 
parse forest visualize grammar aiding improvement grammar 
contrast solving conflicts lalr table 
disambiguation filters reduce forest intended parse tree 
filters disambiguation rules priority associativity declarations 
filters solve frequent ambiguities natural intuitive way hampering clear structure grammar 
short generalized parsing opens possibility developing clear concise language definitions separating language design problem disambiguation problem 
scannerless parsing traditionally syntax analysis divided lexical scanner contextfree parser 
scanner divides input string consisting characters string tokens 
tokenization usually regular expression matching 
choose overlapping matches number standard lexical disambiguation rules 
typical examples prefer keywords prefer longest match prefer non layout 
tokenization tokens typically interpreted parser terminal symbols lr grammar 
architecture proves practical cases globally accepted standard solution parser generation problematic limitations 
existing programming languages designed fit architecture languages generally ambiguous lexical syntax 
examples illustrate misfit cobol pl pascal 
embedded language sql cobol identifiers reserved keywords cobol allowed inside sql statements 
implicit prefer keywords rule lexical scanners automatically prohibit sql 
cobol example particular picture clause look pic recognized list 
part cobol program number recognized numeric 
character classes obviously overlap context free level ambiguity picture clauses appear numerics 
see cobol syntax definition 
example scanner parser interference stems pascal 
consider input sentence array integer range tokenized different manners real followed real integer followed range operator followed integer 
order come correct tokenization scanner know processing array declaration 
problem imminent language reserved keywords 
pl language 
means straightforward tokenization possible scanning valid pl sentence 
similar examples existing programming language 
number techniques tackling problem discussed 
parser generators provide complex interface scanner parser order profit speed lexical analysis power parser 
lexical scanners expressive means regular expressions able detailed decisions 
parser implementations allow arbitrary computations expressed programming language guide scanner parser 
cumbersome develop maintain grammars solve simple lexical approaches result declarative syntax specifications 
scannerless parsing alternative parsing technique suffer problems 
term scannerless parsing introduced indicate parsing separate lexical analysis phase 
scannerless parsing syntax definition context free grammar characters terminals 
integrated syntax definition defines syntactic aspects language including full details lexical syntax 
parser derived grammar directly reads characters input string finds phrase structure 
scannerless parsing suffer problems implicit lexical disambiguation 
problematic lexical ambiguities exist context free level case cobol pascal pl examples 
hand lack implicit rules prefer keywords longest match give rise new ambiguities context free level 
ambiguities solved providing explicit declarative rules syntax definition language 
making disambiguation decisions explicit possible apply selectively 
instance specify longest match single specific sort entire grammar shall see section 
short scannerless parsing need assumptions lexical syntax language generically applicable language engineering 
combining scannerless parsing generalized parsing syntax definitions lexical context free syntax fully integrated usually fit restricted class grammars required deterministic parsing techniques lexical syntax requires arbitrary length lookahead 
scannerless parsing go deterministic parsing 
reason adjacency restrictions exclusion rules partly implemented extension slr parser generator led complicated grammars 
generalized parsing techniques hand deal arbitrary length lookahead 
generalized parsing technique solves problem lexical lookahead scannerless parsing 
requires solution disambiguation lexical ambiguities resolved parsing context 
rest describe syntax definitions disambiguated means declarative disambiguation rules classes ambiguities particular lexical ambiguities 
furthermore discuss disambiguation rules implemented efficiently 
disambiguation rules ways disambiguation ambiguous grammars ranging simple syntactic criteria semantic criteria 
concentrate ambiguities caused integrating lexical context free syntax 
classes disambiguation rules turn adequate 
follow restrictions simplification adjacency restriction rules achieve longest match disambiguation 
reject productions called exclusion rules designed implement reserved keywords disambiguation 
priority associativity rules disambiguate expression syntax 
preference attributes selecting default alternative derivations 
follow restrictions suppose simple context free grammar terms 
id defined ore characters class terms separated whitespace consisting zero spaces newlines 
lexical disambiguation grammar ambiguous 
example sentence hi parsed term id hi term id ws term id 
assuming intended derivation add follow restriction id indicating id may directly followed character range 
entails character part identifier 
similarly follow restrictions added nat ws 
specified longest match lexical constructs 
term id nat term ws term id nat ws restrictions id nat ws 
term language follow restrictions 
languages necessary character lookahead decide follow restriction 
extend layout definition comments 
expression indicates character asterisk 
expression defines restriction consecutive characters 
result longest match ws nonterminal including comments 
follow restriction star prohibits recognition string comment 
note straightforward extend definition deal nested comments 
star star comment ws comment restrictions star ws 
extended layout definition follow restrictions 
reject productions reject productions implement keyword reservation 
extend grammar definition construction 
sentence hi interpreted consecutive id terms separated ws program single term hi 
rejecting strings id interpretation filtered 
program ws term ws id reject id reject 
prefer keywords reject productions reject mechanism reject strings entire context free languages nonterminal 
focus keyword reservation refer discussion 
priority associativity completeness show example priority associativity expression language 
note left ws nonterminal brevity see binary operators defined left associative operator higher priority operator 
consequently sentence interpreted 
exp exp exp exp left exp exp exp left priorities exp exp exp exp exp exp preference attributes 
associativity priority rules 
preference rule generally applicable rule choose default ambiguous parse trees 
example disambiguate notorious dangling construction 
left ws nonterminal brevity 
extend term language construct 
term nat term prefer term nat term term id reject id reject id reject 
dangling construction disambiguated input sentence hi ho parsed ways hi ho hi ho 
select derivation adding prefer attribute production part 
parser construct ambiguity node containing hi doing grammar normalization parse table generator automatically insert layout members right hand side 
see section 
prefer ho hi ho prefer 
fact top node derivation tree prefer attribute derivation selected tree removed ambiguity node 
dual prefer avoid attribute 
tree preferred tree avoided top production 
uses prefer keywords reserving entirely 
example add avoid id production add reject productions 
sentence valid program single derivation program containing single id 
implementation issues implementation scannerless generalized parsing consists syntax definition formalism sdf supports concise specification integrated syntax definitions grammar normalizer injects layout regular expressions parse table generator parser interprets parse tables 
parser glr algorithm 
basic glr algorithms refer publication generalized lr parsing lang tomita various improvements implementations 
complete algorithm essentially standard glr algorithm character separate token 
detailed description implementation glr refer respectively 
algorithmic differences standard glr scannerless glr parsing centered disambiguation constructs 
declarative point view disambiguation rule corresponds filter prunes parse forests 
view parse table generation glr algorithm remain unchanged parser returns forest containing derivations 
parsing number filters executed single tree smaller forest obtained 
view conceptually attractive fully exploit possibilities pruning parse forest created 
filter implemented statically parse table generation dynamically parsing parsing 
sooner filter applied faster parser return filtered derivation tree 
phase applicable depends particulars specific disambiguation rules 
section discuss implementation classes disambiguation rules 
follow restrictions parser generator generates simple slr parse table deviate number places standard algorithm 
modification calculation follow set 
follow set calculated individual production rule nonterminal 
modification transitions states item sets lr automaton labeled nonterminal production rule 
fine grained transitions increase size lr automaton allows generate parse tables fewer conflicts 
follow restriction declarations single lookahead parse table generation remove reductions parse table 
done intersecting follow set production rule set characters follow restrictions produced nonterminal 
effect filter reduction question performed characters follow restriction set 
restrictions lookahead dealt dynamically parser 
parse table generator marks reductions produce nonterminal restrictions character 
parsing reduction done parser retrieve required number characters string check restrictions 
characters input match restrictions reduction allowed performed 
parse time implementation prohibits shift reduce conflicts normally occur saves parser performing unnecessary 
note possible generate follow restrictions automatically lexical syntax definition 
doing enforce global longest match rule 
reject productions disambiguation means reject productions implemented statically require computing intersection syntactic categories possible general 
computing intersections regular grammars lead large automata 
generalized parser filtering reject productions implemented effectively parsing 
consider reject production id reject declares valid id way 
derivation produces id illegal 
parsing reject production substring recognized id keyword program 
adding reject production grammar derivation created id resulting ambiguity 
derivation ambiguity node rejected entire parse stack node deleted 
recognized identifier way 
note parser wait ambiguous derivation returned delete stack stack substring recognized id survive actions performed stack 
derivation remains keyword program 
parser synchronizes parallel stacks shifts wait shift delete ambiguity node 
reject productions implemented backend filter 
terminating stacks reject productions occur soon possible dramatic reduction number ambiguities obtained 
reject productions keyword reservation automatically generated adding keyword reject production nonterminal lefthand side lexical production rule overlap lexical production rule keyword occurs 
priority associativity associativity productions priority relations processed construction parse table 
informal description refer details 
phases parse table generation process associativity priority information 
place construction lr automaton 
item sets lr automaton contain dotted productions 
prediction new items item set takes associativity priority relations consideration 
predicted production conflict production current item production added item set 
second place shifting dot nonterminal item 
case associativity priority conflict production rule item production rule transition transition added lr automaton 
illustrate approach described discussing construction part lr automaton grammar 
creating transitions lr automaton state si contains item set exp exp exp exp exp exp exp order shift dot nonterminal exp production rule exp exp exp item si checked conflict 
new state sj item set exp exp exp note sj contain item exp exp exp cause conflict priority relation 
pruning transitions parse table manner conflicts parse time pertaining associativity priority ruled 
want priority declarations ignore injections chain rules implementation suffice 
natural ignore injections applying disambiguation rules visible syntax 
priorities module chain rules require extension method parse time filter 
preference attributes preference filter typical example parsing filter 
principle applied parsing complicate implementation parser tremendously gaining efficiency 
filter operates ambiguity node set ambiguous subtrees selects subtrees highest preference 
simplest preference filter compares trees ambiguity node comparing avoid prefer attributes top productions 
preferred tree remains set removed 
preferred tree avoided trees removed remain 
ignoring injections top straightforward extension filter 
implementing filter backend parser exploit redundancy parse trees caching filtered subtrees reusing result filtering identical subtrees 
aterm library representing parse forest 
maximal sharing subterms limiting amount memory making subtree identification trivial matter pointer equality 
number grammars simple preference filter powerful production rules avoid prefer root modulo subtrees deeper subtree 
order disambiguate ambiguous subtrees subtle preference filters needed 
filters heuristic counting number preferred avoided productions applying selection basis numbers looking depth preferred avoided production occurs 
principle chosen heuristic counter examples constructed heuristic fails achieve intended goal yielding undesired results 
applications section describe systems formalisms parsing technique applied successfully 
asf sdf meta environment claimed generalized parsing techniques applicable fields reverse engineering language prototyping development new domain specific languages 
asf sdf meta environment fields 
environment interactive development environment automatic generation interactive systems manipulating programs specifications texts written formal language 
parser environment generated environments parser 
language definitions written asf sdf formalism allows definition syntax sdf syntax definition formalism semantics asf algebraic specification formalism 
restrict example sdf specification asf 
syntax previous examples modular sdf definition 
illustrates features sdf modular structuring syntax specifications integrated definition lexical context free syntax follow restrictions reject productions preference attributes layout nonterminal inserted context free production regular expressions definition multiple start nonterminals asf sdf number industrial scientific projects 
parsing compiling asf sdf specifications automatically cobol code program analysis legacy code called island grammars development new action notation syntax 
elan elan modular algebraic specification language sophisticated mixfix syntax 
elan supports prototyping theorem provers constraint solvers decision procedures 
elan system provides environment specifying prototyping deduction systems language rewrite rules controlled strategies 
elan system uses specialized earley parser parse specifications input terms 
implementation parser offers possibilities improve elan language syntax hard wired parser 
new elan environment designed component system 
prototype simpler powerful elan parser parser parse table generator 
new parser allows experiments respect changes syntax elan 
xt xt collection basic tools building program transformation systems including stratego transformation language syntax definition formalism sdf supported 
tools standardize aterms common exchange format 
meta tools provided generating transformation components syntax definitions including data type declaration generator generates data type corresponding syntax sdf syntax definition pretty printer generator generates default tables 
optional alternative list module program imports exports sorts program context free syntax term program id reject module imports terms exports context free syntax nat term term prefer nat term term term id reject module terms imports comment exports sorts term lexical syntax nat id lexical restrictions id nat context free syntax term term term left id nat term module comment exports lexical syntax star star comment comment layout lexical restrictions star context free restrictions layout 

modular sdf definition combining previous examples 
grammar average tokens second tokens second file size filter tree filter tree aterms chars bibtex chars box chars cobol chars java chars java lr chars table 
figures performance 
grammar productions states actions actions gotos conflicts aterms bibtex box cobol java java lr table 
figures grammars generated parse tables 
promote reuse standardization syntax definitions xt project initiated creation online grammar base currently syntax definitions various general purpose domain specific languages including cobol java sdl stratego yacc xml 
syntax definitions semi automatically reengineered lex yacc definitions grammar manipulation tools xt producing compact syntax definitions 
sdf parsers numerous projects built xt areas ranging software renovation grammar recovery program optimization compiler construction 
benchmarks benchmarked implementation parsing number larger files measuring user time 
table shows results parse tree construction backend filtering 
filters implemented parse table parsing active measurements 
table shows parser fast industrial 
interesting observation construction parse tree slows entire process quite bit 
speedup achieved optimizing parse tree construction 
www program transformation org gb benchmarks performed mhz amd athlon tm mb mem ory running linux 
table shows details slr parse tables grammars 
downloaded grammar online grammar base 
aterms grammar prefix terms annotations bibtex bibliography file format box mark language pretty print tools 
cobol java grammars known programming languages 
benchmarked different java grammars 
written scratch sdf second obtained transforming yacc grammar sdf 
natural definition java syntax second lr form 
number productions measured sdf grammar normalization mention number states gotos actions parse table 
remember parse table specified character level states usual 
actions gotos productions nonterminals resulting bigger parse table 
parse table generator fast interactive programming environment outside scope 
number actions reduce shift conflict gives indication amount ambiguity grammar 
java results table show ambiguity grammar limited effect performance 
note filtering parse testset resulted single derivation 
discussed combination generalized lr parsing scannerless parsing 
parsing technique allows development modular definition grammars second relieves grammar writer interface problems scanner parser 
combination supports development declarative maintainable syntax definitions forced harness restricted grammar class ll lr 
proves beneficial developing grammars legacy languages cobol pl provides greater flexibility development new domain specific languages 
assets approach separation disambiguation grammar structure 
necessary encode disambiguation decisions extra productions non terminals 
number disambiguation filters driven disambiguation declarations solve ambiguities pruning parse forest 
lexical ambiguities traditionally handled adhoc default decisions scanner handled filters 
filters implemented points time parser generation time parse time parsing 
usable practice 
implementation elan mixfix syntax expressive syntax definition formalism sdf 
fast interactive tools asf sdf meta number reflect size grammar definition 
environment parse huge amounts cobol code industrial environment 
sdf parse table generator open source downloaded www cwi nl projects 
user feedback indispensable developing 
de jong pieter olivier dedicated considerable time improving efficiency 
de jonge joost visser instrumental development online grammar base serves testbed standardization tool syntax definitions 
jan heering paul klint provided valuable input discussing design implementation 

aho sethi ullman 
compilers 
principles techniques tools 
addison wesley 

aycock horspool 
schr dinger token 
software practice experience 

john aycock nigel horspool 
faster generalized lr parsing 
editor compiler construction cc volume lecture notes computer science pages amsterdam netherlands march 
springer verlag 

john aycock nigel horspool 
directly executable earley parsing 
wilhelm editor compiler construction cc volume lecture notes computer science pages genova italy april 
springer verlag 

bergstra heering klint editors 
algebraic specification 
acm press addison wesley 

borovansk kirchner kirchner 
moreau ch 
ringeissen 
overview elan 
kirchner kirchner editors second intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 

van den brand van deursen heering de jong de jonge kuipers klint olivier visser visser 
asf sdf meta environment component language development environment 
wilhelm editor compiler construction cc volume lecture notes computer science pages 
springer verlag 

van den brand de jong klint olivier 
efficient annotated terms 
software practice experience 

van den brand ringeissen 
asf sdf parsing tools applied elan 
futatsugi editor electronic notes theoretical computer science volume 
elsevier science publishers 

cordy halpern 
txl rapid prototyping system programming language dialects 
computer languages 

de jonge 
pretty printer occasion 
ferguson gray scott editors proceedings nd international symposium constructing software engineering tools coset 
university australia 

de jonge eelco visser joost visser 
xt bundle program transformation tools 
van den brand editors workshop language descriptions tools applications volume electronic notes theoretical computer science 
elsevier science publishers 

van deursen heering klint editors 
language prototyping volume amast series computing 
world scientific 

goo peter mosses 
composing programming languages combining action semantics modules 
mark van den brand didier parigot editors electronic notes theoretical computer science volume 
elsevier science publishers 

heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 

johnson 
yacc compiler compiler 
technical report cs bell laboratories murray hill 

paul klint eelco visser 
filters disambiguation context free grammars 
san pietro editors proc 
workshop parsing theory pages milano italy october 
tech 
rep dipartimento di scienze dell informazione universit di milano 

mmel verhoef 
vs cobol ii grammar 
grammar accessible 

lang 
deterministic techniques efficient non deterministic parsers 
editor proceedings second colloquium automata languages programming volume lecture notes computer science pages 
springer verlag 

lesk schmidt 
lex lexical analyzer generator 
bell laboratories 
unix programmer supplementary documents volume ps 

moonen 
generating robust parsers island grammars 
proceedings th working conference reverse engineering 
ieee computer society press 

rekers 
parser generation interactive environments 
phd thesis university amsterdam 
ftp ftp cwi nl pub reports ps 
daniel salomon gordon cormack 
scannerless nslr parsing programming languages 
sigplan notices 

daniel salomon gordon cormack 
disambiguation scannerless parsing complete character level grammars programming languages 
technical report department computer science university manitoba canada 

scott johnstone 
technical report tr royal holloway university london computer science department 

tomita 
efficient parsing natural languages 
fast algorithm practical systems 
kluwer academic publishers 

eelco visser 
scannerless generalized lr parsing 
technical report programming research group university amsterdam july 

eelco visser 
syntax definition language prototyping 
phd thesis university amsterdam september 

eelco visser 
stratego language program transformation rewriting strategies 
system description stratego 
middeldorp editor rewriting techniques applications rta volume lecture notes computer science pages 
springer verlag may 
www cs vu nl grammars browsable vs cobol ii 
