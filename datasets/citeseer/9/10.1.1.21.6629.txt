cost effective hardware acceleration multimedia applications john laboratory computer architecture department electrical computer engineering university texas austin tx ece utexas edu general purpose microprocessors augmented simd execution units enhance multimedia applications exploiting data level parallelism 
supporting overhead related instructions instructions necessary feed simd execution units address generation packing unpacking permute loads stores loop branches dominate media instruction streams accounting dynamic instructions 
leads utilization simd execution units resulting throughput ranges peak throughput 
accelerate multimedia applications providing explicit hardware support eliminate reduce impact supporting overhead related instructions 
performance evaluation shows hardware significantly improve performance conventional simd enhanced general purpose processors 
investigate cost incorporating hardware efficient execution supporting overhead related instructions high speed simd enhanced general purpose processor perform area power timing tradeoffs 
results indicate added hardware requires simd execution units chip area chip area power consumption total processor power 
achieved critical path processor 
keywords microprocessor design multimedia simd general purpose processors hardware accelerators area power timing tradeoffs 
john supported part state texas advanced technology program national science foundation ccr eia dell intel microsoft ibm 

multimedia workloads characterized structured regular computations large data sets small element widths 
increasing number desktop workstation execution cycles spent media applications general purpose processors gpps enhanced single instruction multiple data simd execution units 
sixteen data elements bits width subwords operated simultaneously single register bit wide 
assembly libraries compiler intrinsics limited compiler capabilities media rich applications benefited simd extensions 
characterizing media workloads exposes inefficiencies execution simd enhanced applications spite performance improvement non simd code 
experiments general purpose processors simd extensions media applications show peak available simd units throughput achieved 
instructions required preprocessing data feed simd units contribute utilization simd execution units 
instructions include address generation address transformation permute data packing unpacking loads stores loop branches 
conceptually classifying instruction stream useful computations core computations required media algorithm supporting overhead instructions assisting useful computation instructions dynamic instructions supporting overhead related instructions useful computation instructions 
increasing width number simd execution unit results diminishing returns performance improvement parallelism exploited mainly useful computation instructions 
efficient execution media workloads mandates exploiting parallelism supporting overhead related instructions concentrating solely useful computation instructions 
media applications data level parallelism dlp useful computations plenty available instruction level parallelism ilp supporting overhead related instructions 
providing explicit hardware support processing supporting overhead related instructions significantly accelerates multimedia applications 
analysis media applications invocation address patterns multiple simultaneous sequences 
simple hardware devised generate patterns general purpose risc instruction sets efficient available addressing modes limited 
likewise keeping track multiple array bounds involves combination addressing modes instructions leading considerable address generation overhead conventional general purpose risc processors 
similarly hardware implement multiple nested loops overly complicated supporting multiple loops general purpose instruction sets may efficient 
philosophy mediabreeze architecture designed augment simd enhanced gpp simple hardware providing effective seamlessly integrated solution media workloads sacrificing performance generalpurpose workloads 
results multimedia benchmarks show adding simple hardware generalpurpose core simd extensions exhibits performance improvement 
addition total number dynamic instructions reduced benchmark suite 
primary contribution investigate associated cost adding hardware highspeed gpp simd extensions 
cell methodology targeting different asic libraries optimized performance density lowpower technologies micron attempt answer questions chip area increase due adding hardware assist processing supporting overhead related instructions 
power consumed additional logic 
added hardware critical path high speed processor words bottleneck determining maximum clock rate 
pipeline stages hardware add processor core 
find mentioned performance improvement mmx sse extensions obtained area cost simd execution unit area mmx sse increase chip area 
power consumption total processor power 
timing results show added hardware critical path gpp core 
rest organized follows 
section provides brief overview mediabreeze architecture 
section discusses tools methodology 
section presents implementation details added hardware 
section evaluates costs associated implementing mechanism mediabreeze architecture applicability mainstream commodity general purpose microprocessor pipelines 
section summarizes 

description mediabreeze architecture analyzing media instruction execution streams results distinct sets operations useful computations required algorithm supporting computations overhead address generation address transformation packing unpacking permute loads stores loop branches 
sole purpose overhead instructions aid execution useful computation instructions 
execution overhead instructions mandatory due programming conventions general purpose processors abstractions control flow structures programming mismatch data computations versus data stored 
due dominance overhead instructions need eliminated alleviated overlapped useful computations better performance 
mediabreeze architecture designed accelerate simd enhanced media applications decoupling useful computation overhead instructions process overhead related instructions efficiently 
fig 
illustrates block diagram mediabreeze architecture 
order perform simd operations mediabreeze architecture uses existing hardware units hardware current state ofthe art simd enhanced gpps introduces new hardware units 
existing hardware units programmed differently conventional control path explained section 
existing hardware units lightly shaded blocks fig 
load store units simd computation unit data reorganization address transformation data station 
new hardware units shaded blocks fig 
address generation units hardware looping breeze instruction memory breeze instruction decoder 
functionality existing hardware units load store units loading storing data memory simd registers 
simd computation unit arithmetic logical simd computations multiplication special media operations sum executed unit 
current gpps typically simd alus simd multiplier simd datapath 
data reorganization simd processing mandates data reorganization mechanisms packing unpacking permute reduction opera cache cache main memory load store units hardware looping address generation units data reorganization address transformation functionality newly added hardware units address generation address arithmetic functions moved execution unit subsystem current processors mediabreeze hardware unit dedicated address arithmetic hardware generate input output address data structures streams concurrent simd computation unit 
mechanism providing dedicated ad instruction stream instruction decoder starting address breeze instruction simd pipeline overhead tions scaling shifting results required simd processing 
current commodity simd enhanced gpps data reorganization hardware simd datapath 
data station data station acts register file simd computation 
current simd enhanced gpps dedicated simd register files share floating point register file intermediate simd results 
breeze instruction memory breeze instruction interpreter decoder normal superscalar execution data station os 

mediabreeze architecture non simd pipeline new hardware useful computations simd computation unit input stream existing hardware differently os output stream dress arithmetic hardware reduce overhead address calculations performed explicitly alus current ilp processors 
involves combination extra instructions parts instructions registers memory accesses computation time 
looping dedicated hardware looping branch processing branch instructions related loop increments eliminated 
breeze instruction memory decoder order program control hardware units existing newly added units mediabreeze architecture special instruction called breeze instruc loop count loop count loop count loop count loop count starting address starting address starting address loop index counts bounds indicated breeze instruction support level nested loops hardware 
level deep nest accommodate algorithms 
mediabreeze architecture allows input data structures streams produces output structure 
chosen media algorithms benefit capability current simd execution units operate input registers produce output value 
data structure stream dedicated address generation unit compute address clock cycle base address specified breeze instruction 
due sub block access pattern media programs data accessed different strides various points algorithm 
breeze instruction facilitates multiple strides level loop nesting total strides input streams output stream 
strides indicate address increment decrement values loop nest level 
depending mask values stream indicated breeze instruction level possible strides update address pointer 
data types stream structure indicated breeze instruction 
depending size element data structures different amount simd parallelism achieved 
data stream bit data way parallelism bit wide execution unit bit data way parallelism simd processing achieves way parallelism 
maximum achievable simd parallelism minimum data structures commercial simd extensions limitation 
current simd extensions provide data reorganization instructions solving problem having different element sizes data structures starting address os 

structure breeze instruction tion formulated 
breeze instruction memory stores instructions enter processor 
fig 
illustrates structure breeze instruction 
opr shift ll stride stride stride stride stride stride stride stride stride stride stride stride stride stride stride stride os stride os stride os stride os stride os masks masks multicast data types stream os remaining bits unused bits legend input stream os output stream opr operation code reduction operation ll loop level write results packing unpacking permute introduce additional instruction overhead 
providing information breeze instruction special hardware mediabreeze perform function 
mediabreeze performs reduction operations indicated breeze instruction example multiple independent results single simd register combined dot product require additional instructions current dlp techniques 
support signed unsigned arithmetic saturation shifting scaling final results indicated breeze instruction 
eliminates additional instructions needed conventional risc processors 
support multiple levels looping multiple strides breeze instruction complex instruction decoding instruction complex process current risc processors 
mediabreeze handles task interpreting decoding breeze instruction 
mediabreeze instruction memory hold breeze instruction 
additional bit instructions added isa general purpose processor starting interrupting mediabreeze 
bit instructions fetched decoded traditional instruction issue logic contain length breeze instruction 
breeze instruction encountered dynamic instruction stream dynamic instructions prior breeze instruction allowed finish mediabreeze instruction interpreter decodes breeze instruction 
current implementation halt superscalar pipeline execution breeze instruction completed mediabreeze reuses existing hardware units 
arbitration resources necessary allow overlap breeze instruction superscalar instructions 
simd instructions reduce dynamic instruction count operate multiple data single instruction 
due repetitive operations required media applications technique reduces total number instruction fetches decodes 
simd instructions capture useful computation operations 
encoding overhead supporting operations simd useful computation instructions advantage breeze instruction potentially replace millions dynamic risc instructions fetched decoded issued cycle normal superscalar processor 
results giving mediabreeze architecture advantages similar acceleration 
possible exception interrupt occurs breeze instruction progress 
state loops current counts loop bounds saved restored instruction returns 
similar handling exceptions move instructions rep repeat prefix 
mediabreeze registers hold loop parameters loops 
code development mediabreeze architecture currently done hand 
similar developing code simd extensions compiler intrinsics may employed utilize mediabreeze architecture 
speedup 
implementation methodology estimate area power timing requirements mediabreeze architecture developed vhdl models various components 
synopsys synthesis tools cell methodology target vhdl models asic cell libraries lsi logic 
table lists libraries technologies evaluating implementation costs 
want underestimate challenge compiling mediabreeze architecture effort comparable compiling simd extensions 
evaluated performance mediabreeze architecture multimedia benchmarks performance improvement mediabreeze architecture ranges way outof order processor simd extensions 
fig 
presents results incorporating mediabreeze hardware way way order processor simd extensions 
summary mediabreeze architecture performs media program execution efficiently exploiting significant amounts ilp overhead component 
scenario loop nests data streams processed mediabreeze executes hardware equivalent number software instructions conventional ilp processors cycle branches loads store address value generation stream simd operation way way parallelism depending data element size accumulation simd result simd reduction operation simd data reorganization pack unpack permute operations shifting saturation simd results 
way simd way simd mb way simd way simd mb cfa dct mot scale aud jpeg ijpeg decrypt 

performance speedup mediabreeze mb versus simd synopsys synthesis tools estimate area power timing circuits asic technology library 
asic technology library provides kinds information 
structural information 
describes cell connectivity outside world including cell bus pin descriptions 
functional information 
describes logical function output pin cell synthesis tool map logic design actual asic technology 
timing information 
describes parameters pin pin timing relationships delay calculation cell library 
environmental information 
describes manufacturing process operating temperature supply voltage variations design layout 
design layout includes wire load models estimate effect wire length design performance 
wire load modeling estimates effect wire length fanout resistance capacitance area nets 
default wire load models provided lsi logic cell libraries 
synopsys synthesis tools compute timing information cells design corresponding parameters defined asic technology library 
area information provided synthesis tools prior layout computed wire load models associated cells design 
average power consumption measured switching activity nets design 
experiments switching activity factor originates rtl models tool gathers information simulation 
area power timing estimates obtained performing maximum optimizations performance synthesis tools 
high speed commodity gpps implemented custom circuit design techniques 
results obtained reflect worst case estimate customized placement custom circuit design techniques give better results automated placement cad tools 
interested reader referred information regarding capabilities limitations synthesis tools 
table 
list cell libraries synthesis lsi logic library name description 
hardware implementation mediabreeze units address generation mediabreeze architecture supports input output data structures streams 
data streams dedicated address generation hardware unit 
address arithmetic stream performed strides mask values indicated breeze instruction 
clock cycle depending micron drawn micron effective cmos process 
highest performance solution high drive cells optimized long interconnects associated large designs 
micron drawn micron effective cmos process 
optimized performance density power applications micron drawn micron effective cmos process 
ultra low power high density solution low dynamic standby leakage current micron drawn micron effective cmos process 
highest performance solution micron drawn micron effective cmos process 
ultra low power cost sensitive solution micron drawn micron effective cmos process 
optimized high performance mask bits loop index counts possible strides selected 
new address value computed selected stride previous address value 
fig 
depicts block diagram address generation circuitry single data stream structure 
val comparators determine inner level loop counters reached upper bound 
outermost loop comparison necessary breeze instruction finishes execution instant outermost loop counter reaches upper bound 
cond combine blocks generate flag signals output val comparators mask values breeze instruction 
flag signals true stride update prev address appropriate stride selected depending flag 
block uses bit adder add selected stride previous address 
exception stall prev address value needs stored loop counters stored hardware looping circuitry 
data structures streams val comparators portion logic shared remaining hardware needs replicated 
combine looping loop count val comparators mask mask mask mask cond cond cond cond stride prev address combine combine combine flag flag flag flag address generate updated address 

block diagram address generation stream mediabreeze architecture incorporates levels loop nesting hardware eliminate branch instruction overhead loop increments 
similar mechanism commercially implemented ti asc levels loop nesting addition loop 
conventional dsp processors tms ti technique levels loop nesting 
fig 
shows block diagram looping hardware 
loop index values produced clock cycle loop bound level nesting bounds loops specified breeze instruction 
value loop index varies lower bound corresponding loop bound upper bound resets lower bound upper bound reached previous cycle 
execution breeze instruction ends outermost loop loop fig 
reaches upper bound 
encountering exception stall loop indices stored increment logic halted counting process started exception stall serviced 
comparators bit wide operates parallel generate flag bit wide signals priority encoded determine loop counters increment 
loop counter incremented circuit incrementing bit value loop counters belonging inner level reset example loop loop loop reset lower bound 
loop count loop count loop count loop count loop count index index index index index comparator comparator comparator comparator comparator flag flag flag flag flag loops increment index priority encoder incl incl incl incl increment index increment index breeze instruction decoder stand instruction decoder breeze instructions eliminates need modify conventional instruction decoder current gpps 
breeze instruction needs decoded various control parameters stored hardware registers decoding process 
implementation breeze instruction decoder merged address generation looping circuitry 
breeze instruction memory breeze instruction memory stores breeze instruction enters processor 
estimate cost storage asic libraries targeted memory cells 
area power timing estimates breeze instruction memory similar sram structure 
size breeze instruction typically bytes 
existing hardware units increment index increment index index index index index index 

block diagram hardware loops remaining hardware units required operation mediabreeze architecture simd computation unit data reorganization load store units data station 
hardware units commodity simd gpps 
breeze instruction decoder controls operation units opposed conventional control path 
mandates extra multiplexer differentiate control conventional control path breeze instruction decoder 
model existing hardware units 

area power timing results table shows composite estimates area power timing hardware looping address generation circuitry implemented cell methodology described section 
results breeze instruction decoder merged looping address generation hardware 
table 
timing area power estimates hardware looping address generation time ns hardware looping loops area power mw ghz time ns address generation stream area power mw ghz ns mw ns mw ns mw ns mw ns mw ns mw ns mw ns mw ns mw ns mw ns mw ns mw area commercial simd gpp units comparison vis mm micron process mmx mm micron process altivec mm micron process pentium iii processor mm micron process mmx sse pentium iii processor mm micron process area chip area required implementing hardware loops address generation data streams breeze instruction interpreter merged looping address generation logic approximately mm micron library optimized high performance mm micron library optimized density performance power 
table shows hardware area cost commercial simd gpp implementations comparison 
micron process increase chip area implementing visual instruction set vis hardware sparc processor family mm mmx pentium family mm altivec powerpc family mm 
micron proc ess altivec hardware expected occupy mm 
micron technology die size pentium iii processor mm mmx sse execution units requiring approximately mm 
increase area due mediabreeze units simd related hardware increase chip area 
furthermore order maintain placement automation tools typically achieve active area area cells packed closer custom design 
facilitate number available wiring tracks optimal routing placement tool 
fig 
shows fraction area required interconnect hardware looping address generation logic 
area interconnect loop add 
gen 

percentage interconnect area area 

breakdown dynamic power cell internal power net switching power power power consumed looping address generation streams breeze instruction interpreter approximately mw micron library optimized performance mw library optimized low power 
gpps speeds ghz typically consume power ranging mediabreeze hardware consumes total processor power 
believe energy consumption mediabreeze architecture superscalar processor simd extensions breeze instruction reduces total dynamic instruction count 
breeze instruction densely encoded breeze instructions needed algorithm 
number dynamic instructions need fetched decoded reduces tremendously leading minimal instruction fetch decode issue logic superscalar processor 
instruction fetch issue logic expected consume greater total execution power including clock power speculative processors 
breeze instruction interpreted instruction fetch decode issue logic superscalar processor shutdown save power 
fig 
shows divisions dynamic power net switching power cell internal power added mediabreeze hardware units 
dynamic power consists parts net switching power cell internal power 
net switching power power consumed net signal carrying toggling proportionally dependent switching activity net load square voltage 
cell internal power power consumed cell input signals toggle 
transition time input output signal changes state pull pull transistor open large current flow cell short circuit power 
cell internal power proportionally dependent switching activity square voltage 
cell internal power net switching power timing pipelining hardware looping logic stages allow incorporating current highspeed superscalar order processors ghz clock frequency 
similarly address generation stage needs divided pipe stages achieve frequencies greater ghz 
timing results show incorporating mediabreeze hardware highspeed processor critical path processor pipelining 
breeze instruction decoder multiplexers control hardware units introduce extra gate delay pipeline 
cell methodology gives worst case result custom design typically commercial generalpurpose processors allow greater clock frequencies added mediabreeze hardware 
spite adding pipeline stages pipeline depth processor affected looping address generation stages bypass conventional fetch decode issue pipe stages 

summary hardware looping address generation contemporary simd techniques extract data level parallelism useful computation instructions multimedia applications simd execution units utilized due dominance overhead instructions 
eliminating reducing overhead specialized hardware dramatically improve performance media workloads deteriorating performance general purpose workloads 
mediabreeze architecture designed decouple useful overhead instructions exploit instruction level parallelism overhead instructions realizing performance improvement simd enhanced general purpose processor 
estimated cost incorporating explicit hardware support simd gpp execute supporting instructions 
asic cell meth targeting libraries technologies obtained area power timing information mediabreeze architecture components 
major findings area cost simd execution unit area mmx sse 
compared processor chip area increase 
power consumption added units total processor power 
mediabreeze hardware units increase effective pipeline depth high speed gpp 
simd gpp mediabreeze hardware operated ghz micron technology 
expect energy consumption potentially lower mediabreeze augmented processor breeze instruction heavily encoded encompasses multiple operations 
power consumption decreased due reduced traditional instruction fetch decode issue logic duration breeze instruction execution 
scales altivec extension powerpc accelerates media processing ieee micro vol 
pp 
mar apr 
lee multimedia extensions general purpose processors proc 
ieee workshop signal processing systems pp 
nov 
ranganathan adve jouppi performance image video processing general purpose processors media isa extensions proc 
th ieee acm sym 
computer architecture pp 
may 
bhargava john evans radhakrishnan evaluating mmx technology dsp multimedia applications proc 
st ieee acm sym 
microarchitecture pp 
dec 
architectural techniques accelerate multimedia applications general purpose processors ph thesis university texas austin aug 
technical report laboratory computer architecture available www ece utexas edu phd thesis pdf altivec powerpc microprocessor report vol 
may 
watson ti advanced scientific computer ieee computer magazine pp 
jan 
lapsley bier shoham lee dsp processor fundamentals architectures features chapter ieee press series signal processing isbn 
synopsys online sold documentation system version 
lsi logic asic technologies available online www com products asic technologies index tml lsi logic documentation system 
allen custom circuit design driver microprocessor performance ibm journal research development vol 
nov 
available www research ibm com journal rd allen html gonzalez horowitz energy dissipation general purpose microprocessors ieee journal solid state circuits pp 
sep 
smith weiss pang simulation study decoupled architecture computers ieee trans 
computers vol 
pp 
aug 
chang dally carter lee effects explicitly parallel mechanisms multi alu processor cluster pipeline proc 
ieee conf 
computer design pp 
oct 
wilcox manne alpha processors history power issues look cool chips tutorial conjunction ieee acm sym 
microarchitecture nov 
ia implementation intel 
available www sandpile org impl htm 
hansson reducing power risc dsp core electronic engineering times aug 
available www com story oeg 
practical low power digital vlsi design kluwer academic publishers 
