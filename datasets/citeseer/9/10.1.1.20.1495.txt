brewer conjecture feasibility consistent available partition tolerant web services seth gilbert nancy lynch designing distributed web services properties commonly desired consistency availability partition tolerance 
impossible achieve 
note prove conjecture asynchronous network model discuss solutions dilemma partially synchronous model 
podc brewer invited talk conjecture impossible web service provide guarantees consistency availability partition tolerance properties desirable expected real world web services 
note rst discuss brewer meant conjecture formalize concepts prove conjecture laboratory computer science massachusetts institute technology cambridge ma 
eric brewer professor university california berkeley founder chief scientist inktomi 
nally describe attempt formalize real world solutions practical diculty 
web services today attempt provide strongly consistent data 
signi cant research designing acid databases new frameworks building distributed web services depend databases 
interactions web services expected behave transactional manner operations commit fail entirety atomic transactions observe result inconsistent data consistent uncommitted transactions isolated isolated transaction committed permanent durable 
clearly important example billing information commercial transaction records handled type strong consistency 
web services similarly expected highly available 
request succeed receive response 
service goes may create signi cant real world problems classic example potential legal diculties trade web site go 
problem exacerbated fact web site unavailable needed 
goal web services today available network run service network available web service accessible 
highly distributed network desirable provide amount fault tolerance 
nodes crash communication links fail important service perform expected 
desirable fault tolerance property ability survive network partitioning multiple components 
note consider stopping failures cases stopping failure modeled node existing unique component partition 
formal model section formally de ne meant terms consistent available partition tolerant 
atomic data objects natural way formalizing idea consistent service atomic data object 
atomic linearizable consistency atomic consistent isolated durable condition expected web services today 
consistency guarantee exist total order operations operation looks completed single instant 
equivalent requiring requests distributed shared memory act executing single node responding operations time 
consistency guarantee generally provides easiest model users understand convenient attempting design client application uses distributed service 
see chapter complete de nition atomic consistency 
available data objects distributed system continuously available request received non failing node system result response 
algorithm service eventually terminate 
ways weak de nition availability puts bound long algorithm may run terminating allows unbounded computation 
hand quali ed need partition tolerance seen strong de nition availability severe network failures occur request terminate 
partition tolerance de nitions availability atomicity quali ed need tolerate partitions 
order model partition tolerance network allowed lose arbitrarily messages sent node 
network partitioned messages sent nodes component partition nodes component lost 
pattern message loss modeled temporary partition separating communicating nodes exact instant message lost 
atomicity requirement implies response atomic arbitrary messages sent part algorithm delivered 
availability requirement implies discussing atomic consistency somewhat di erent talking acid database database consistency refers transactions atomic consistency refers property single request response operation sequence 
di erent meaning atomic acid subsumes database notions atomic consistent 
brewer originally required requests receive response 
allowing probabilistic availability change result arbitrary failures occur simplicity requiring availability 
node receiving request client respond arbitrary messages sent may lost 
note similar wait free termination pure shared memory system node network fails node unique component partition valid atomic response generated 
set failures total network failure allowed cause system respond incorrectly 
asynchronous networks impossibility result proving conjecture asynchronous network model formalized lynch chapter 
asynchronous model clock nodes decisions messages received local computation 
theorem impossible asynchronous network model implement read write data object guarantees properties availability atomic consistency fair executions including messages lost 
proof prove contradiction 
assume algorithm exists meets criteria atomicity availability partition tolerance 
construct execution exists request returns inconsistent response 
methodology similar proofs attiya lynch theorem 
assume network consists nodes 
divided disjoint non empty sets fg basic idea proof assume messages lost 
write occurs read occurs read operation return results earlier write operation 
formally initial value atomic object 
pre execution single write value equal brewer pointed talk partitions node irrelevant equivalent node failing 
restricting attention partitions containing components size greater change results note 
occurs termination write operation 
assume client requests occur assume messages received messages received know write completes availability requirement 
similarly pre execution single read occurs client requests occur termination read operation 
messages received messages received know read returns value availability requirement 
value returned execution write operation occurred execution continuing nodes indistinguishable messages lost include client requests nodes execution read request return read request write request completed 
contradicts atomicity property proving algorithm exists 
corollary impossible asynchronous network model implement read write data object guarantees properties availability fair executions atomic consistency fair executions messages lost 
proof main idea asynchronous model algorithm way determining message lost arbitrarily delayed transmission channel 
existed algorithm guaranteed atomic consistency executions messages lost exist algorithm guaranteed atomic consistency executions 
violate theorem 
formally assume sake contradiction exists algorithm terminates guarantees atomic consistency fair executions messages delivered 
theorem implies guarantee atomic consistency fair executions exists fair execution response atomic 
nite point execution algorithm returns response atomic 
pre invalid response 
extend fair execution messages delivered 
execution fair execution messages delivered 
execution atomic 
algorithm exists 
solutions asynchronous model impossible provide properties atomicity availability partition tolerance properties achieved 
atomic partition tolerant availability required easy achieve atomic data partition tolerance 
trivial system ignores requests meets requirements 
provide stronger liveness criterion messages execution delivered system available operations terminate 
simple centralized algorithm meets requirements single designated node maintains value object 
node receiving request forwards request designated node sends response 
acknowledgment received node sends response client 
distributed databases provide type guarantee especially algorithms distributed locking quorums certain failure patterns occur liveness condition weakened service longer returns responses 
failures liveness guaranteed 
atomic available partitions clearly possible provide atomic available data 
fact centralized algorithm described section meets requirements 
systems run intranets lans example types algorithms 
available partition tolerant possible provide high availability partition tolerance atomic consistency required 
consistency requirements service trivially return initial value response request 
possible provide weakened consistency available partition tolerant setting 
web caches example weakly consistent network 
section consider possible weaker consistency conditions 
partially synchronous networks partially synchronous model obvious way try circumvent impossibility result theorem realize real world networks purely asynchronous 
allow node network clock possible build powerful service 
rest assume partially synchronous model node clock clocks increase rate 
clocks synchronized may display di erent values real time 
ect clocks act timers local state variables processes observe measure time passed 
local timer schedule action occur certain interval time event 
furthermore assume message delivered known time msg lost 
node processes received message known time local local processing takes zero time 
formalized special case general timed automata model described lynch chapter 
impossibility result impossible available atomic data object arbitrary messages may lost partially synchronous model 
analogue theorem holds theorem impossible partially synchronous network model implement read write data object guarantees properties availability atomic consistency executions messages lost 
proof proof similar proof theorem 
follow methodology divide network components fg construct admissible execution write happens component followed read operation component 
read operation shown return inconsistent data 
formally construct execution theorem single write request acknowledgment occur messages components fg lost 
construct second execution slightly di erently 
execution begins long interval time client requests occur 
interval long entire duration append events de ned theorem single read request response assuming messages components lost 
construct superimposing executions long interval time ensures write request completes read request begins 
theorem read request returns initial value new value written write request violating atomic consistency 
solutions partially synchronous model partially synchronous model analogue corollary hold 
proof corollary fact depend nodes unaware message lost 
partially synchronous algorithms return atomic data messages execution delivered partitions return inconsistent particular stale data messages lost 
example algorithm centralized protocol described section modi ed time lost messages 
read write request message sent central node 
response central node received node delivers requested data acknowledgment 
response received msg local node concludes message lost 
client sent response best known value local node read operation acknowledgment write operation 
case atomic consistency may violated 
weaker consistency conditions useful guarantee atomic data returned executions messages delivered time bound equally important specify happens executions messages lost 
section discuss possible weaker consistency condition allows stale data returned partitions place formal requirements quality stale data returned 
consistency guarantee require availability atomic consistency executions messages lost impossible guarantee asynchronous model result corollary 
partially synchronous model sense base guarantees long algorithm rectify situation 
consistency model ensures messages delivered eventually notion atomicity restored 
atomic execution de ne partial order read write operations require operation begins ends precede partial order 
de ne weaker guarantee connected consistency de nes partial order similar manner requires operation precede interval operations messages delivered 
de nition timed execution read write object connected consistent criteria hold 
executions messages lost execution atomic 
second executions messages lost exists partial order operations 
orders write operations orders read operations respect write operations 

value returned read operation exactly written previous write operation initial value previous write 
order consistent order read write requests submitted node 

assume exists interval time longer messages lost 
assume operation completes interval begins operation begins interval ends 
precede partial order guarantee allows stale data messages lost provides time limit long takes consistency return partition heals 
de nition course generalized provide consistency guarantees nodes connected connections available time 
generalizations examined 
variant centralized algorithm described section connected consistent 
assume node centralized node 
algorithm behaves follows read node sends request value 
receives response time 
msg local saves value returns client 
concludes message lost returns value highest sequence number received initial value value received 
client read request occurs acts node sending messages 
write sends message new value 
waits 
msg local receives acknowledgment sends acknowledgment client 
point learned new value message lost events occurred 
concludes message lost periodically retransmits value values lost earlier write operations receives acknowledgment 
case read operations client write request occurs acts node sending messages 
new value received serializes write requests hears assigning consecutive integer tags 
periodically broadcasts latest value sequence number nodes 
theorem modi ed centralized algorithm connected consistent 
proof clear executions messages lost operations atomic 
execution atomic operation acts executed single instant case single instant occurs processes operation 
serializes operations ensuring atomic consistency executions messages delivered 
examine executions messages lost 
partial order constructed follows 
write operations ordered sequence number assigned central node 
read operation sequenced write operation value returns 
clear construction partial order satis es criteria de nition connected consistency 
algorithm handles requests order received criterion clearly true 
showing partial order respects criterion cases write followed read write followed write read followed read read followed write 
time long write operation complete assign sequence number new value periodic broadcasts occur 

write followed read assume write occurs aw interval time longer passes messages delivered 
read requested node 
interval things happened 
aw noti ed central node new value write operation assigned sequence number 
second central node rebroadcast value value partial order nodes periodic broadcasts 
result read operation return earlier value come write partial order 
write followed write assume write occurs aw interval time longer passes messages delivered 
write requested node 
previous case interval messages delivered central node assigned sequence number write operation aw result write operation sequenced central node rst write operation 
second write comes rst write partial order 
read followed read assume read operation occurs interval time longer passes messages delivered 
read requested node 
write operation value rst read operation returns 
interval messages delivered central node assigned sequence number broadcast value value partial order nodes 
result second read operation return value earlier partial order second read operation precede rst partial order 
read followed write assume read operation occurs interval time longer passes messages delivered 
write requested node 
write operation value rst read operation returns 
interval messages delivered central node assigned sequence number result write operations interval serialized write operation precede read operation partial order satis es criterion de nition algorithm connected consistent 
note shown impossible reliably provide atomic consistent data partitions network 
feasible achieve properties consistency availability partition tolerance 
asynchronous model clocks available impossibility result fairly strong impossible provide consistent data allowing stale data returned messages lost 
partially synchronous models possible achieve practical compromise consistency availability 
particular real world systems today forced settle returning data time 
formalizing idea studying algorithms achieving interesting subject theoretical research 
acknowledgments eric brewer interesting podc talk providing talk slides notes encouraging writing note 
charles leiserson suggesting problem interesting helpful discussions 
attiya bar noy danny dolev daphne koller david peleg reischuk 
achievable cases asynchronous environment 
th annual symposium foundations computer science pages los angeles california october 
eric brewer 
robust distributed systems 
invited talk principles distributed computing portland oregon july 
maurice herlihy jeannette wing 
linearizability correctness condition concurrent objects 
acm transactions programming languages systems july 
leslie lamport 
interprocess communication parts ii 
distributed computing april 
nancy lynch 
distributed algorithms 
morgan kaufman 
