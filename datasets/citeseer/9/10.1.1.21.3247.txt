persistent suffix trees suffix binary search trees dna sequence indexes hunt robert irving malcolm atkinson department computing science university glasgow glasgow qq uk rwi dcs gla ac uk technical report tr october constructed stored disk reused suffix trees suffix binary search trees elegans chromosomes measured performance orthogonal persistence java pjama 
compare implementation performance transient suffix tree discuss suitability indexes pursuing long term goal indexing large genomes 
identify potential persistent dna indexes variety biological medical contexts believe complement current string searching methods transient data structures 
keywords suffix tree suffix binary search tree dna sequence genome storage persistence 
field sequence searching analysis changing rapidly 
due exponential growth available sequence data change improving knowledge protein structure expression 
publicly available dna resources approach base pairs bp corresponding gb string data sequence searching analysis rely flat file storage high throughput parallel computers reading data sequentially 
high cost sequence comparison heuristics 
results delivered different methods hard compare directly increasingly combination databases characterising protein structure 
expression databases available picture transient mean data structure lifetime duration program execution persistent indicate data structure stored reused subsequent program executions www ncbi nlm nih gov genbank html complex requirement unify access sequence structure expression data pronounced 
context set explore possible suffix trees suffix binary search trees persistent indexes sequence 
issue sequence indexing different indexing textual fields accompany sequence record successfully addressed existing database technologies knowledge 
known string indexing techniques concentrate prefix searches sufficient sequence comparison grams index short substrings dna 
hand exciting new developments large scale sequence analysis algorithms suffix trees extensively look sequence alignments repeats 
suffix tree structures interrogation characteristics need created time needed take considerable time build 
propose build suffix trees develop database solution sequence searching start investigating alternative structures suffix tree suffix binary search tree sbst 
aim find data structure suitable database server application 
initial results report larger indexes comparison suffix tree sbst multi threading access collection trees 
compare transient suffix tree implementation 
structured follows 
section characterises sequence data section reviews alternative data structures section introduces suffix trees section discusses suffix binary search trees 
pjama introduced section 
section results section discuss 
section outlines section concludes 
sequence data biological sequence data strings dna length counted base pairs letters protein length expressed bases 
dna sequences form strings alphabet letters proteins alphabet letters 
example genomic sequence lengths saccharomyces mbp drosophila mbp human sequence gbp protein sequences shorter total number may human genes bacterium 
purpose sequence searching analysis derive biologically significant information sequence data direct laboratory sequences model organisms may shed light origin diseases lead development new drugs preventive measures 
sequence searching currently performed blast fasta families algorithms 
blast fasta require piping sequence data computer memory 
similarly smith waterman algorithm reads sequence data compares query 
approaches scalable purchasing processors disk channels ram 
research addresses alternative strategy storing indexes sequence data persistent trees 
goal achieved design databases providing integrated access sequence mapping www cbs dtu dk services protein expression clinical data compute sequence similarity measures part database query evaluation 
string indexing structures choice suffix trees premises 
note successful transient suffix trees existence approximate matching algorithms may easily reimplemented sequences stored databases 
suffix tree combined genetic map construction 
secondly see sbst potential rival suffix tree space requirement database resident sbst approximately suffix tree 
quantify performance difference persistent forms trees 
suffix arrays store grams explored persistent context led development large database 
manber myers reported suffix array dna takes bp compared suffix tree 
newer suffix tree implementations report bp 
suffix trees suffix binary search trees suffix arrays investigated point view algorithmic theory tested sufficiently database context 
select appropriate persistent indexing technology large sequences stored databases need consider costs incurred time sequence stored replaced costs supporting searches inquiries properties sequence 
logically combined cost minimised currently assume large numbers searches enquiries 
focus minimising search costs 
interested developing database indexing wide variety biological uses think suffix trees offer advantages versatility performance 
plan develop compact indexes exact string matching progress approximate matching algorithms 
suffix trees suffix tree description suffix trees established string processing biology provided gusfield 
suffix tree indexes suffixes string tree storage structure lends space optimisations 
suffix tree sequence length construction costs time space searched time pattern length number pattern occurrences 
show suffix tree string unique terminator character appended suffix prefix suffix 
suffix tree indexing string length leaf nodes suffix suffixes numbered 
edge labelled non empty substring branching node starting letters outgoing edges different path root leaf spells suffix starts sequence position held leaf 
suffix tree optimisations efficient disk access root suffix tree search substring string length query length number occurrences 
schemes discussed uses suffix trees biological sequence analysis reviewed 
suffix trees string searching repeat identification 
example search substring length traced 
search starts root traces substring edges 
substring completely traced search visits children leading leaves indicating starting positions substring 
complex operations include finding repeats entire tree traversed build table repeats frequencies 
comparison species may repeat identification 
object oriented suffix tree prototype java implementation suffix trees ukkonen algorithm optimised space incurs overheads resulting object orientation persistence 
focus viability object oriented tree construction retrieval persistent context 
store dna sequence array bytes bp tree consists nodes 
internal node represents substring occurs suffixes represents leftmost start index sequence 
leaf nodes hold suffix numbers 
data structure class node node child sibling link children suffix link int right left indices incoming edge int suffix suffix number stored leaf nodes 
space requirements reflect java implementation 
node consists object integers 
overhead object header giving total node 
store byte array holding sequence 
additional persistence overheads currently result stores times larger sequence array mbp sequence produces gb store 
space free space allocated store segments 
bp indexed storage plus persistence 
suffix binary search trees java suffix binary search trees new data structure potential string indexing 
space efficient suffix trees built nh time nlogn balanced version height tree string length searched time length query length path traversed tree 
simplified representation sbst string shown 
structure uses direction maximum values speed node insertions searching 
class left right children boolean direction direction longest common prefix lcp int suffix maximum suffix number lcp length strings lcp length longest common prefix node sbst left right ancestor node right left subtree closest left right ancestor left right ancestor descendant left right ancestor context maximum defined root max lcp taken ancestors node direction undefined maximum left node left subtree node maximum adopted right maximum adopted left ancestor 
values direction maximum facilitate character skipping nodes search insertion character query string inserted involved equality comparison 
maximum values decide way branch having compare characters comparison required find index character node compared current query character depending result comparison direction values left right subtree may explored 
implementation holding object integers bit object overhead plus sequence www dcs gla ac uk love tech report ps ta max max root max tta max max direction undefined max max max max suffix binary search tree structure nodes corresponding search string totalling bp 
largest space saving comes fact sbst nodes tree indexing mbp including byte array mb needed 
database overhead mb leads gb store 
pjama database experiments pjama issues data serialisation disk access 
pjama persistent distributed object platform java developed cooperation university glasgow sun microsystems laboratories 
pjama offers orthogonal persistence reachability 
practice application programmer wanting store application data persistently adds just lines code software application data persists disk unlimited length time pjama evolution facilities enabling new versions software data replace old ones recovery support uses logging guarantee system recovery failure distribution support 
pjama stores offer performance ideally suited fast application development free programmer www dcs gla ac uk pjama chores managing data transfer disk 
projects demonstrated power persistent programming pjama bioinformatics applets give public access stores updated external users transactional facilities pjama investigated 
currently pjama produce stores excess gb 
building larger stores advances improvements pjama necessary 
modification involved new log compaction scheme allowed build larger suffix trees exceeding mbp 
results test data performed tests dna elegans chromosomes totalling mbp 
query set elegans cdna sequences retrieved ftp server retired site replaced longer 
sequence identifiers traced entrez embl computing environment tests carried pjama java new log compaction scheme java production version transient trees 
enterprise sun machine mhz ultrasparc ii cpus gb ram disks mounted disk controller 
single suffix tree sbst code currently multithreading processors 
tests multithreading took advantage processors 
machine ran sun solaris operating system 
pjama configuration file single trees gb log file gb sbst gb suffix tree stores 
tests gb log file store consisted files gb gb 
log data files placed physical disks gb fujitsu mab rpm disk contention observed 
test overview tree building transient persistent suffix trees built tests carried longest chromosome chromosome mbp 
subsequently store built chromosome indexing 
building transient suffix tree chromosome took minutes elapsed time minutes sbst 
difference due lack code optimisation 
persistent suffix tree mbp took hours build disk sbst took minutes hours 
forest persistent took hrs min hours elapsed time 
shared disks users presence background processes influenced store building times 
gla ac uk ftp ftp sanger ac uk pub elegans sequences chromosomes www ncbi nlm nih gov entrez www embl heidelberg de srs progress supposed reduce times dramatically 
measuring query performance measurement followed similar plan single tree multiple tree tests 
queries read file passed individual tree forest trees 
timing single trees performed follows 
query obtained time recorded query submitted time taken results kept queries new queries infile int byte get query starts system set matches tree query submit query ends system results matches save results case forest strategy modified large batches broken smaller groups queries placed queue cycling trees pairs consisting pointer tree byte array queries 
number java threads initialised access queue remove entry process 
results recorded 
recording number hits resulting query elapsed time batch measured query preparation job queue formation time measured threads initiated threads completed time measured 
mean time query computed 
testing scenario tests transient trees involved batches queries query lengths 
test set persistent suffix tree single sbst consisted invocations pjama sending batched queries derived cdna set submitted stores batches store batch submitted alternation file system cache flushed time new batch store combination tested batch contained queries length 
batch sizes queries 
query lengths transient trees cdna initial bases taken 
calculated mean query response time number hits batch 
transient tree query results transient suffix trees tested chromosome mbp 
summarise total query response times different query lengths batch queries 
show sum time spent performing retrievals explores favoured scenario single queries small query batches submitted index needs brought disk memory 
query length st total time seconds sbst total time seconds note transient sbst performance short queries better transient suffix tree performance 
predicted search time suffix tree number pattern occurrences query length dominated transient sbst query length little influence performance length path traversed tree deciding factor 
persistent tree query results avg query time query length queries queries queries queries queries persistent suffix tree mbp mean time query 
overview mean query times suffix tree shown sbst mean times 
show query lengths longer queries avg query time query length queries queries queries queries queries persistent sbst mbp mean time query 
mean length 
expected small batches short queries queries length processed slowly average seconds sequence looked suffix tree seconds sbst 
query length significant 
short queries bring back lot matches persistent sbst returns results faster suffix tree 
respect query behaviour resembles behaviour transient trees 
combinations query length batch size took long process possible strings length queries brought back results reported average query time sbst suffix tree 
short queries serial search original sequence may faster suffix tree index insufficiently selective 
queries bp performance sbst better suffix tree average response times queries bp response times level trees required response trees batch queries 
batches containing queries exhibited better performance typical database server operation 
worth noting observed quasi linear relationship trees number returned hits time taken return results illustrated 
large batches tree cached memory slow disk performance deciding factor 
similarly transient trees number returned hits dominates equation suffix tree suffix tree slightly inferior sbst short queries 
longer queries behaviour trees similar 
response time query mean hits query length length length st queries st queries sbst queries sbst queries quasi linear relationship number hits time retrieve short queries bps 
query lengths marked vertical bars 
measuring effects multithreading queries forest set store containing gb indexes indexing mbp 
modified test plan described 
timed runs queries length threads 
shows mean time recorded different iterations test 
observed large variations mean times query runs resulting graph rough small number threads 
optimum system performance reached threads stays seconds query 
time short queries length response better longer ones 
comparison tested package measure performance highly tuned suffix tree implementation 
different purpose application 
interactive reports sequence repeats building tree performing full traversal 
test allowed measure tree creation time plus avg query time number threads query length query length query length query length query length average query times mbp gb pjama store 
traversal chose parameters minimising possible calculations 
test data concatenated file elegans chromosomes 
options mem peak memory usage repeat length equal suppress calculations print maximum repeats 
runs configuration tests 
mean time observed minutes 
mean peak memory usage mb 
exactly mbp gave bp memory usage 
discussion pursuing new avenue research takes different direction usual transient performance analysis 
faced lack appropriate theory explain non linear behaviour large persistent suffix trees building phase query time 
realise disk caching cpu caching play significant role performance trees 
produced results types tree significantly needs done understand fully empirical implications building large suffix indexes decide tree structures preferable 
demonstrated persistent suffix tree persistent sbst deliver fast response queries stores measuring gb 
multi threading requests forest delivered satisfactory results query results returned seconds similar tests suffix tree forests need carried 
transient suffix trees currently limited size 
largest transient trees index mbp suffix tree sbst 
think worth investigating structures produce efficient implementations surpass limit bp inherent human chromosomes require larger suffix trees 
shown transient suffix trees implemented realistically context sequence searching supported query interface cheap memory available 
human genome require gb virtual memory dedicated data 
memory shared applications query cost include time taken build tree 
elegans genome building time minutes 
assume hypothetical traversal time equate cost tree construction execution queries forest trees seconds query 
evaluate get batch size required cost tree construction 
comparison transient suffix trees persistent trees built usable pre processing 
gb disk space multi processor machine enable index human genome 
constructing suffix trees identified bottlenecks building large suffix trees extremely hard 
irregular topology suffix tree splitting nodes tree construction costs 
leads high rate update data structures consequent write back costs caching technology leads object graph growth pattern correlates poorly final structure 
effect means incremental allocation disk sites parts tree checkpoints results poor locality final structure 
reason chromosome suffix tree currently takes hours build 
conclude new suffix tree storage structures suited disk access patterns needed 
similar structures applicable tree types 
encompass efficient storage structures approximate matching algorithms testing including methods providing persistence 
planning release public web server characterise actual workloads target optimisation persistent tree structures applications 
increasing demand searches large genomic sequences provoked investigation persistent indexes 
relatively large times needed construct transient indexes relative stability genomic sequence data suggest applications storing indexes disk advantageous 
initial investigations orthogonally persistent platform java pjama prototypes built explored rapidly 
different indexing structures suffix trees suffix binary search trees subjected preliminary performance evaluations mbp elegans genome 
tested cdna query sequences server performance evaluated range query sizes lengths various levels concurrency 
preliminary results suggest approach promising 
large sequences optimisations approximate matching algorithms expect outperform current serial searching techniques techniques rebuild indexes time needed 
research needed develop efficient methods directly applicable biological context 
altschul basic local alignment search tool 
mol 
biol 
arne andersson stefan nilsson 
efficient implementation suffix trees 
software practice experience 
atkinson jordan 
providing orthogonal persistence java 
lecture notes computer science 
atkinson jordan spence 
orthogonally persistent java 
acm sigmod record 
atkinson hamilton 
scalable recoverable implementation object evolution pjama platform 
proc 
th international workshop persistent object systems pos norway 
springer verlag september 
atkinson jordan 
review rationale architectures pjama durable flexible evolvable scalable orthogonally persistent programming platform 
technical report tr sun microsystems laboratories department computing science university glasgow san antonio road palo alto ca usa glasgow qq scotland 
atkinson morrison 
orthogonal persistent object systems 
vldb journal 
ukkonen 
predicting gene regulatory elements silico genomic scale 
genome research 
steven brenner chothia tim hubbard 
assessing sequence comparison methods reliable structurally identified distant evolutionary relationships 
pnas 
burkhardt ferragina 
rivals 
gram database searching suffix array 
pevzner waterman editors proceedings rd annual international conference computational molecular biology recomb pages lyon france 
acm press 
cox 
pjama implementation efficient dna protein sequence storage retrieval 
master thesis department computing science university glasgow 
es 
implementation automated fine granularity locking persistent programming language 
software practice experience 
delcher kasif peterson white salzberg 
alignment genomes 
nucleic acids research 
atkinson 
evolutionary data conversion pjama persistent language 
proceedings st ecoop workshop object oriented databases lisbon portugal june 
evans peter 
drastic run time architecture evolving distributed persistent systems 
proc 
th ecoop 
evans peter 
zones contracts absorbing change approach software evolution 
conference proceedings oopsla 
appear 
paolo ferragina roberto grossi 
string tree new data structure string search external memory applications 
journal acm march 
heather fraser 
genome annotation comparison system res 
dissertation university glasgow institute biomedical life sciences department computing science 
jackson burden wallis 
comparison persistent storage tools implementing search engine 
proc 
th international workshop persistent object systems pos norway 
springer verlag september 
dan gusfield 
algorithms strings trees sequences computer science computational biology 
cambridge university press 
hamilton 
recovery management sphere recovering persistent object store 
technical report tr university glasgow department computing science december 
hamilton atkinson 
providing evolution support pjama sphere 
technical report tr university glasgow department computing science december 
hunt 
pjama stores suffix tree indexing bioinformatics applications 
th phd workshop ecoop www inf hu timetable html 
irving love 
suffix binary search tree suffix avl tree 
technical report tr university glasgow department computing science 
www dsc gla ac uk love tech report ps 
jagadish nick koudas divesh srivastava 
effective multi dimensional indexing strings 
proceedings acm sigmod conference management data 
kurtz 
fast computation maximal repeats complete genomes 
bioinformatics pages 
stefan kurtz 
reducing space requirement suffix trees 
software practice experience 
larsson 
structures string matching data compression 
phd thesis department computer science lund university 
fujitsu inch magnetic disk drives 
www fujitsu jp hypertext hdd drive overseas mab xx mab xx html january 
manber myers 
suffix arrays new method line string searches 
siam comput october 
laurent marsan marie france 
extracting structured motifs suffix tree algorithms application promoter consensus identification 
proceedings fourth annual international conference computational molecular biology recomb 
appear 
mccreight 
space economic suffix tree construction algorithm 
journal april 
miller brass 
rapid algorithm sequence database comparisons application identification vector contamination embl databases 
bioinformatics 
pearson lipman 
improved tools biological sequence comparison 
proc natl acad sci 

management long running high performance persistent object stores 
phd thesis department computing science university glasgow 
atkinson 
efficient promotion algorithm persistent object systems 
submitted software practice experience 
smith waterman 
identification common molecular subsequences 
mol 
biol 
spence 
remote method invocation persistent system 
proceedings international symposium distributed objects applications doa 
spence 
limited copies leased distributed persistent objects 
phd thesis university glasgow may 
spence atkinson 
scalable model distribution promoting autonomy cooperation pjava object stores 
proceedings thirtieth hawaii international conference system sciences hawaii usa january 
ukkonen 
line construction suffix trees 
algorithmica 
tr department computing science university helsinki finland 
anne laurent marsan marie france 
inferring regulatory elements genome 
analysis oe family promoter signals 
mol 
biol 
weiner 
linear pattern matching algorithm 
proceedings th annual ieee symposium switching automata theory pages washington dc 
ray malcolm atkinson 
architecture large scale system evolution 
proc 
rd intern 
software arch 
workshop 
young 
suffix binary search trees java 
master thesis department computing science university glasgow 

