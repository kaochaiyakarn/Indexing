webquilt proxy approach remote web usability testing jason hong jeffrey sarah james landay group user interface research computer science division university california berkeley berkeley ca usa landay cs berkeley edu parc xerox com webquilt web logging visualization system helps web design teams run usability tests local remote analyze collected data 
logging done proxy overcoming problems server side client side logging 
captured usage traces aggregated visualized zooming interface shows web pages people viewed 
visualization shows common paths taken web site task optimal path task designated designer 
discusses architecture webquilt describes extended new kinds analyses visualizations 
categories subject descriptors models principles user machine systems human factors information storage retrieval online information services web services information interfaces presentation user interfaces evaluation methodology information interfaces presentation hypertext hypermedia user issues general terms measurement design experimentation human factors keywords usability evaluation log file analysis web visualization web proxy webquilt 
half effort developing testing software applications put user interface 
unfortunately successful user interfaces simple systems difficult create 
web interface challenging get right evidenced studies showing users trouble completing common tasks line 
usability testing necessary help find eliminate problems traditional testing techniques inadequate 
developed system assist web usability testing 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
www may hong kong 
copyright acm 
background evidence web site usability remains serious problem today 
survey experienced web users said somewhat extremely difficult find product wanted buy 
furthermore said looking product past days 
study fifteen large commercial sites showed users find information wanted time 
usability web site key success particularly increasing sales repeat business commerce site 
key increasing usability web site improving design making structure web site navigation flow pages layout wording individual pages coherent meaningful users 
problems web design teams face doing understanding tasks people trying accomplish figuring difficulties people encounter completing tasks 
knowing insufficient 
example design team know wants find purchase gifts useful know problems preventing completing task 
likewise design team know person left site checkout page meaningful design team knows truly intended buy simply browsing doing price comparison 
variety methods discovering people want web site structured interviews ethnographic observations focus groups questionnaires example see 
concentrate techniques designers tackling problem understand obstacles people facing web site context specific task 
traditionally kind information gathered running usability tests web site 
usability specialist participants representative target audience 
participants brought usability lab asked complete predefined realistic tasks 
usability engineer observes stumbling blocks people come follows survey interview gain insights issues 
drawback type usability test time consuming run large numbers people 
takes considerable amount schedule participants observe analyze results 
consequently data tends reflect people qualitative 
small numbers hard cover possible tasks site 
furthermore small samples convincing asking 
server side logging done web server data available owners server 
management potentially expensive changes site 
lastly small set participants may find majority usability problems 
despite previous claims participants find majority usability problems study spool schroeder suggests number may near 
better tools techniques needed scale number participants number tasks managed usability test 
contrast traditional usability testing server log analysis see way quantitatively understanding large numbers people doing web site 
easy collect data hundreds thousands people approach nearly web server automatically records page requests 
server logging advantage letting test participants remotely environments coming single place usability test participants evaluate web site location time equipment network connection 
lastly tools server log analysis available research commercial freeware tools currently 
perspective web design team problems server logs 
interpreting actions individual user extremely difficult pointed cantor davison 
web caches client browser caches intranet isp caches intercept requests web pages 
requested page cache request reach server logged 
multiple people share ip address making difficult distinguish requesting pages example america online united states largest isp 
dynamically assigned ip addresses computer ip address changes time connects internet quite difficult determine individual user doing ip addresses identifiers 
researchers novel ways extracting useful user path data server logs statistical level exact paths individual users remain elusive 
furthermore standard server logs users tasks goals highly ambiguous 
information provided server logs useful terms improving usability 
example knowing web site visitors came com domain pm day give web design team hints problems 
hints visitors coming site tasks trying accomplish successful left experience web site 
access server logs restricted just owners web server making difficult analyze sub sites exist server 
example may single web server different owned separate divisions 
impractical log file analysis competitor web site 
competitive analysis important understanding features people consider important learning parts site easy 
alternative gathering data server collect client 
clients instrumented special software usage transactions captured see 
clients modified running software transparently records user actions web browser modifying existing web browser creating custom web browser specifically capturing usage information 

client side logging done client computer requires special software running background having special web browser 
advantage client side logging literally recorded low level events keystrokes mouse clicks higher level events page requests 
valuable usability information 
drawbacks client side logging 
special software installed client users may unwilling unable 
severely limit usability test participants experienced users may representative target audience 
second needs mechanism sending logged data back team wants collect logs 
third software platform dependent meaning software works specific operating system specific browser 
limits reach logging software 
needed logging technique easy deploy web site compatible number operating systems browsers 
webquilt better understand usability problems designers need logging tools conjunction known tasks sophisticated methods analyzing logged data 
gathering web usability information simple task current tools 
recap things greatly streamline current practices web usability evaluations 
way logging web usage fast easy deploy web site 
way logging compatible range operating systems web browsers 
tools analyzing visualizing captured data address needs developed webquilt tool capturing analyzing visualizing web usage 
second needs developed proxy approach logging faster easier deploy traditional log analysis techniques see 
proxy better compatibility 
proxy logging done intermediate computer avoids deployment problems faced client side server side logging 
existing operating systems browsers requires downloads part users 
easier compatible operating systems browsers handheld devices cellular phones 
address third need designed visualization takes aggregated data test sessions displays web pages people viewed paths took 
interviews number web designers identified important indicators look analyzing results task usability test 
indicators include identifying various paths users take recognizing classifying differences browsing behavior knowing key entry exit pages understanding various time metrics average time spent page time download 
data framework task means analyze help designers discover users encounter obstacles confusing navigation difficult find links missing information 
knowing immediately solutions analyzing resulting data webquilt designed extensible new tools visualizations implemented help web designers understand captured data 
example webquilt conjunction existing online survey participant recruitment tools provided 
allows designers gather qualitative demographic data site users incorporate information visualization analysis 
webquilt intended follows 
web designer set tasks 
recruit participants try tasks email starting url uses webquilt proxy 
participants go tasks proxy automatically collect data 
data collected web designer webquilt tools aggregate visualize interact data pinpoint usability problems 
problems fixed entire process repeated iterative design process 
point especially important iteration widely considered valuable technique designing successful user interfaces 
rest describe architecture webquilt give description current visualization tool 
close discussion related directions plan take 

webquilt architecture webquilt separated independent components proxy logger action inferencer graph merger graph layout visualization see 
proxy logger mediates client browser web server logs communication 
action inferencer takes log file single session converts list actions clicked link hit back button graph merger combines multiple lists actions aggregating multiple people web site directed graph nodes represent web pages edges represent page requests 
graph layout component takes combined graph actions assigns location node 
visualization component takes results graph layout component provides interactive display 
components designed independent possible 
minimal amount communication component easy possible replace components better algorithms techniques developed 
rest section describe components detail 
proxy logger goal proxy logger capture user actions web 
proxy lies clients servers assumption clients requests proxy 
traditionally proxies things caching firewalls 
webquilt web proxy usability purposes special features logging useful 
webquilt dataflow overview 
proxy logger captures web sessions generating log file session 
log file processed action inferencer converts log page transactions log actions 
results combined graph merger laid graph layout visualized visualization component 
usability analysis 
section discuss webquilt proxy approach addresses problems current logging techniques continue description proxy implementation 
advantages proxy logging discussed existing methods capturing generating web usage logs designed gathering useful usability data 
proxy approach key advantages server side approach 
proxy represents separation concerns 
special modifications needed tracking purposes done proxy leaving server deal just serving content making easier deploy server content modified way 
second proxy allows run usability tests web site web site 
simply set proxy ask testers go proxy 
proxy simply modifies url targeted site go proxy 
users change settings get started 
easy run log usability tests competitor site 
having testers go proxy allows web designers tag uniquely identify test participant 
way designers know tester trying ask thought site supported accomplishing task 
proxy logger advantages client side logging 
require special software client web browser making faster simpler deploy 
proxy easier test site wide variety test participants including novice users may unable afraid download special software 
compatible wider range operating systems web browsers clientside logger works modifying html platform independent way 
permits testing realistic sample participants devices browsers 
important note approach slightly different traditional proxies 
traditional proxies corporate firewall serve relay point user web traffic user browser configured send requests proxy 
webquilt proxy differs url redirects links urls point proxy time tid tid parent id response frame id link id method intended destination encoded url query string 
approach web www anonymizer com 
url proxy avoids need users manually configure browsers route requests webquilt proxy allows easy deployment remote usability tests simply providing proper link 
webquilt proxy logger implementation current webquilt proxy logger implementation uses java servlet technology 
heart component log file format log files processed action inferencer step 
webquilt analysis tools matter technologies logging logger lies server proxy client long log format followed 
presently webquilt proxy logger creates log file test participant session 
webquilt log file format table shows sample log 
time field time milliseconds page returned client start time session 
tid tid fields transaction identifiers 
webquilt transaction id represents nth page person requested 
tid field represents page person came tid field represents current page person 
transaction id numbers action inferencer inferring person browser back button went back 
table shows example test participant went page back page forward 
parent id field specifies frame parent current page 
number tid frameset current page belongs current page frame 
response field just response server ok link id field specifies link clicked document object model dom useful understanding links people page 
representation link html link id second link id 
area tags considered links 
value denote link clicked get current page 
frame id field indicates frame enclosing frameset current page numbered similarly link url query get www weather com get www weather com worth html get www weather com html get www weather com html post www weather com local table 
sample webquilt log file tabular format 
highlighted cells show person went back second requested page transaction id transaction id forward transaction id 
client browser webquilt proxy web server proxy editor cached pages webquilt logs ids frame id indicates frame frameset 
current page frame value 
method field specifies method request current page 
currently proxy supports get post methods 
fields url query fields represent current page person query data cgi parameters sent request 
webquilt log format supports features log formats 
example row shows start time msec second row msec 
means person spent seconds page www weather com 
additional features logging tools formats 
link id information difficult tell link person clicked redundant links page common practice web design 
important understanding links users ignored 
second finding person back button 
highlighted cells table show example person back button go transaction id back transaction id forward time different destination 
understanding difference help improve site reduce ping pong behavior commonly observed web 
webquilt proxy logger architecture illustrates proxy logger architecture 
mentioned webquilt proxy built java servlet technology 
central component system servlet run servlet java server page jsp engine jakarta tomcat ibm websphere 
servlet engine provides facilities communicating client intercepts requests hands servlet handles session management provides output streams sending data back client 
servlet processes client requests performs caching logging page transactions 
aided module updates links document point back proxy 
underlying library extended java networking library providing full support connections including cookie handling 
servlet package 
proxy architecture overview sequence operations 
step client request processed 
step requested web page retrieved 
step links redirected proxy web page returned client 
step web page cached letting designers review web pages traversed 
step entire transaction logged 
step processing client requests step request received client proxy 
webquilt specific parameters destination url transaction id extracted saved 
time proxy collects data saved log file 
example time elapsed session calculated various parameters transaction ids parent id link id stored 
ways person start proxy 
requesting proxy default web page submitting url proxy see 
technique mainly debugging 
way person start proxy link page 
example suppose wanted run usability study yahoo web site 
proxy url cs berkeley edu webquilt participants just link cs berkeley edu webquilt replace www yahoo com 
method easy deploy proxy link just sent email users 
expect tools recruiting participants specifying tasks 
proxy flexible easily integrated tools 
step retrieving requested document 
default page webquilt proxy 
proxy retrieve dynamically modify url entered 
client request received analyzed proxy attempts retrieve document specified request 
document requested replace parameter absent proxy returns default start page 
proxy opens connection specified site requests document get post method depending method client request page proxy 
proxy downloads document server 
time rest data needed log entry stored including response code final destination url case proxy redirected server 
step redirecting links proxy downloaded page sent back client edited links page redirected proxy 
done proxy editor module 
initially proxy checks content type page 
content type provided server form text html proxy assumes page html document returns client editing pdf ps file 
proxy runs page proxy editor 
editor works dynamically modifying requested pages requests actions proxy 
document base href updated links including page hyperlinks frames form actions redirected proxy 
base tag updated added page page enclosing head tags 
tag href field points document base location resolve relative links 
allows client browser request stylesheets images embedded page items correct web location proxy 
proxy editor modifies link urls page proxy page request 
person started proxy links automatically rewritten continue proxy 
includes standard text links client side image map links 
editor adds transaction ids link 
transaction ids represent nth page person requested 
embedding transaction id link url lets proxy identify exactly page person came 
link ids added link url 
allows proxy identify exactly link page person clicked 
current page frame proper parent id frame id parameters included 
link url parameters included variables query string link 
link url rewritten absolute link added parameters query read proxy 
example viewing page www yahoo com proxy link href computers html rewritten href cs webquilt 
replace www yahoo com computers html ti linkid html frame tags dealt similarly urls target frames rewritten pass proxy extra information frame parent tid frame id included 
form tags dealt little differently 
form tag action field set point back proxy usual actual target url current tid necessary parent id frame id encapsulated input tags input type hidden tags inserted directly enclosing form tag 
type hidden appear user browsing included resulting query string form submit 
proxy editor handles tags form meta equiv refresh 
tags cause browser load new url specified time duration 
editor updates tags sure new url requested proxy 
proxy editor implementation uses simple lexical analysis approach edit page 
editor linearly scans html comments plain text passed client unchanged 
tag encountered type tag table compared set tags require editing 
tag set link simply passed client handed proper module updates tag contents described sent 
steps page caching logging performing necessary editing sending requested document client proxy saves cached copy html page 
writing disk database original document run proxy editor time base tag updated 
links modified step 
feature added web designers open web pages locally see content test participants saw making robust changes web site 
log entry current transaction written appropriate log file 
additional proxy functionality base case handling standard html straightforward 
special cases dealt 
example cookies typically sent web servers client browsers 
cookies sent back web server client browser page request 
problem security privacy reasons web browsers send cookies certain web servers ones domain web server created cookie place 
address proxy logger manages cookies user session 
keeps table cookies mapping users domains 
page request proxy simply looks user sees cookies associated requested web server page forwards cookies request web server 
currently handled proxy library modifications ensure separate cookie tables active user session 
user session finished cookies session cleared system 
special case dealt https protocol secure communication 
https uses ssl secure socket layer encrypt page requests page data 
proxy logger handles https connections separate secure connections 
client connects proxy secure connection proxy turn creates new https connection destination server ensuring network communication remains secure 
implementation uses sun freely available java secure socket extension underlying network layer enable encrypted communication proxy 
proxy logger limitations trapping possible user action web daunting task limitations webquilt proxy logger capture 
pressing cases links redirects created dynamically javascript browser scripting languages 
consequence javascript generated pop windows menus popular web sites captured proxy 
elusive cases include embedded page components java applets flash animations 
technologies change develop proxy need updated handle new cases 
obvious way overcome limitations traditional proxy approach requests transparently routed proxy 
certainly allow capture user interactions introduces serious deployment issues 
significantly traditional proxy approach require users configure browsers proxy undo setting performing usability tests 
seriously hamper ease remote usability tests performed 
furthermore users currently sit firewall unable participate changes proxy settings render unable connect internet 
situation webquilt handle server side image maps 
server side image maps client browser sends location user clicked server returning appropriate url 
url rewritten dynamically change 
image maps longer commonly 
lastly users may experience additional delays web sites proxy due overhead retrieving processing web pages 
delays noticeable problematic requires investigation 
action inferencer action transform log page requests log inferred actions action currently defined requesting page going back hitting back button going forward hitting forward button 
reason actions inferred log generated proxy captures page requests 
proxy capture person uses back forward buttons browser navigation pages may loaded local browser cache 
webquilt comes default action inferencer architecture designed developers create plug new ones 
noted logging approach inferencer certain pages requested certain back button certain back forward combinations 
additionally current implementation specifically identify user clicks browser refresh button 
example shows graph sample log file 
shows default action inferencer interprets actions log file 
know person gone back transaction id know exactly times hit back forward buttons 
shows happens assume person went directly back tid node tid node going tid node 
shows valid way inferring happened log file 
person gone back forth tid node node times returning tid node 

graphical version log file 
letters graph part log file 

possible way interpreting log file table 
assumes person hit back button twice clicking new link 

way interpreting log file 
assumes person uses back forward buttons times clicking new link 
graph merger graph merger takes actions inferred action inferencer merges 
words merges multiple log files aggregating actions test participants 
graph web pages nodes actions edges task available step completed 
graph layout log files aggregated passed graph layout component prepares data visualization 
goal step give location web pages 
algorithm tried simple force directed layout graph 
algorithm tries place connected pages fixed distance apart spreading unconnected web pages reasonable distance 
problem approach non deterministic nodes positioned different places time 
currently webquilt uses edge weighted depth traversal graph displaying path top incrementally placing followed paths 
algorithm uses grid positioning help organize align distances nodes 
variety graph layout algorithms available simply defined way developers plug new algorithms 
visualization final part webquilt framework visualization component 
ways visualizing information 
built visualization shows web pages traversed paths taken 
web pages represented screenshots page rendered web browser 
images created saved html internal browser currently provided 
saved html visualization display pages user saw 
arrows indicate traversed links people hit back button 
thicker arrows indicate heavily traversed paths 
color indicate average amount time spent traversing link colors closer yellow meaning short amounts time colors closer red meaning longer amounts time 
zooming show pages paths varying levels detail 
see 
shows example visualization twelve usage traces task find specific piece information berkeley web site 
pages highlighted path top represent optimal designer defined path 
looking thickness lines see people took optimal path number people took longer path get place 
longer paths see users come page decide backtrack back button link 
shows zoomed view pages 
red arrows indicate people took long time going page 
red arrows optimal path meaning people took path spend large amount time get page 
key feature visualization ability zoom provide various levels detail 
example overview entire task viewer see red arrow indicating long time spent page zooming page viewer see text heavy page user probably spent time reading filling form 
providing context task framework add details needed visualization offers number simple useful quick analysis user experience see figures 
graph shows results participants asked find specific product www com web site 
thick arrows show participants problem finding page information user quickly ping back forth site map various pages looking information 
shows trace participants site performing different tasks finding information purchasing item 
places graph red arrows indicate pages path participants spent longest time performing tasks 
top zoomed image reveals pages order form 
sense people spend lot time enter shipping credit card information 
lower zoomed image shows information page took participants surprising amount time find 
turns clear images home page clicked confusing participants 

related order address problems faced client side server side logging national institute standards technology nist developed 
intended tool help run usability tests local copy entire site instruments link special identifiers event handling code 
code activated link clicked 
shares advantages webquilt logging software better compatibility existing operating systems browsers html modified ability run logged usability tests sites 
webquilt proxy approach logging lets having download entire site realistic situations 
webquilt avoids problems stale content invalid path specifications complex sites works database backed sites dynamically generate html page requests 
system similar webquilt logging software cantor web event logging technique wet 
wet automated usability testing technique works modifying page server 
automatically remotely track user interactions 
wet takes advantage event handling capabilities built netscape microsoft browsers 
wet sophisticated event logging webquilt currently supports logging mouse motion plans merging wet advanced event handling capabilities webquilt see section 
webquilt differs proxy approach require ownership server requires changes server 
advantages important trying accomplish web evaluations designers usability team allowed changes access production server 
usability log visualization long history 
colleagues review introduce desktop systems 
visualizations notion paths 
example footprints web history system displays aggregate user paths hints pages followed people 
extends shows individual paths overlaid top visualization web site 
commercially available tools share similar goals webquilt 
visualizes individual aggregate user paths web site 
uses clientside logging problems associated technique 
furthermore webquilt visualization differs combines aggregate path information designated optimal paths easier see pages people trouble 
webquilt uses zooming interface show different portions web site including screenshots individual pages provide better context 
visual insight sophisticated server log visualization tool generating custom reports interacting log data 
providing number interesting useful chart style visualizations targets marketing management audience eventually affect designer decisions intended tool designer works 
uses server side logging problems mentioned earlier technique 
closest visualization logging visualization environment java applications 
webquilt builds extending logging visualization web domain 
webquilt adds zooming uses screenshots web pages detail circles 

extend proxy logging system overcome current limitations especially handling javascript 
possible approach include full javascript parser proxy editor module 
javascript code updated ensure dynamically created links pop windows pass proxy 
care taken ensure parsing editing done reasonable amount time user browsing experience adversely affected 
capture richer set user interactions surf perform task 
wealth data available client loggers proxy currently collect 
includes page locations mistaken links clicked page scrolling events 
writing javascript code captures events inserting code pages may able remotely log forms interaction additional effort part user 
currently investigating approach wet captures low level events mozilla browser microsoft internet explorer browser done edmonds tracking user actions 
technologies limit variety internet enabled devices proxy framework 
ideally webquilt gather data just traditional web browsers 
currently extending webquilt capture visualize web experience variety devices pdas cellular phones 
fairly straightforward capture transactions devices standard html browser modifications needed extend webquilt capture wap enabled phones 
currently looking additional visualizations displaying interacting traces 
done visualizing server logs visualizing individual aggregate user paths 
plan reimplement ideas demonstrated visualizations add interactions visualizations useful web designers 
example visualization modified zoomed arrows re anchored show exactly link clicked page 
example semantic zooming details visualization changes depending zoom level 
lines include methods accessing details filtering information depending needs individual designer 
lastly plan doing rigorous evaluation webquilt real designers usability experts assess quality tool exploration larger complex data sets 

described webquilt extensible framework helping web designers capture analyze visualize web usage task known 
webquilt proxy approach logging overcomes problems encountered server side client side logging fast easy deploy site usability tools online surveys compatible wide range operating systems web browsers 
described architecture webquilt shown new algorithms visualizations built framework 
knew solutions analyzing visualizing captured data system extensible new tools easily built 
demonstrated simple zooming interface displaying aggregated results captured web traces currently building sophisticated visualizations interactions understanding data 
webquilt homepage berkeley edu projects webquilt 
acknowledgments james lin francis li feedback development webquilt 
kevin fox tim sohn tara matthews andy edmonds group user interface research ideas improving portions webquilt 
lastly providing copies java web browser component 

example visualization twelve usage traces single defined task 
circle top left shows start task 
circle top right shows task 
thicker arrows indicate heavily traversed paths users 
thick blue arrows mark designer indicated optimal path 
darker red arrows indicate users spent time page clicking link lighter pink arrows indicate time 

zoom slider left change zoom level 
individual pages selected zoomed actual page url people went 

example users task finding piece information casa de web site www com 
thick arrows show users information clicks 
user quickly ping site map page pages finding information 

task users asked find information casa de web site purchase specific item 
red arrows show places users spent time zooming designer see expected result 
top instance user filling form lower view user needed read text page find desired information 


myers rosson survey user interface programming 
proceedings conference human factors computing systems 

norman design everyday things 
new york doubleday 

shop drop 
glimpse internet shopping success 
www com samples zap htm 
spool web site usability designer guide 
san diego ca academic press 

web site design lead healthy sales www com library tech cyber commerce html 

beyer contextual design defining customer centered systems 
san francisco morgan kaufmann 

rubin handbook usability testing plan design conduct effective tests 
john wiley sons 

refining test phase usability evaluation subjects 
human factors 


nielsen landauer 
mathematical model finding usability problems 
acm interchi 

amsterdam netherlands 

spool schroeder testing web sites users near 
acm chi conference human factors computing systems 

seattle wa 

access log analyzers www uu se software analyzers html 


cantor getting wet web event logging tool mean web usability 
fifth human factors web conference 


davison web traffic logs imperfect resource evaluation 
ninth annual conference internet society inet 

san jose 

pitkow pirolli mining longest repeated subsequences predict world wide web surfing 
second usenix symposium internet technologies systems 

choo turnbull 
behavioral model information seeking web preliminary results study managers specialists web 
asis annual meeting 


tauscher evaluating history mechanisms empirical study reuse patterns www navigation 
department computer science 
university calgary calgary 

laboratories www com htm 

browser www com resources public solutions demo demo print htm 

suite com 

www com 

gould lewis designing usability key principles designers think 
communications acm 


anonymizer com www anonymizer com 

www innovation ch java index htm 


sun java secure socket extension java sun com products index html 


www com 

browser www com products html ds ht ml 


nist zing ncsl nist gov vip process html 


analyzing visualizing log files computational science usability georgia institute technology 

wexelblat maes footprints history rich tools information foraging 
proceedings acm chi conference human factors computing systems 

pittsburgh pa 
scholtz visualization paths web sites 
international workshop web information visualization 

florence italy ieee computer society 

www com resources public solutions demo demo print htm 

www com 

landay quantitative user interface profiling home net 

edmonds sourceforge net projects 

chi visualizing evolution web ecologies 
acm chi conference human factors computing systems 


shneiderman understanding patterns user visits web sites interactive starfield visualizations www log data university maryland college park 

pitkow bharat tool world wide web access log analysis 
international conference world wide web 


bederson hollan pad zooming graphical interface exploring alternative interface physics 
acm symposium user interface software technology uist 

marina del rey ca 
