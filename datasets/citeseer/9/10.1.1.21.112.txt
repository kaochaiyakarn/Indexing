proc 
th intl 
workshop formal methods industrial critical systems pp model testing real inhouse card case study pretschner institut ur informatik technische universit unchen tum de model validation ag de gmbh stefan gdm de describe modeling concepts case tool autofocus constraint logic programming approach model test case generation lines inhouse smart card case study 
testing model generated test cases validate respective properties actual hardware 
keywords 
automatic test case generation case reactive systems validation 
summarizes results feasibility study carried tu unchen model validation ag gmbh 
purpose determine industrial applicability combination case tool autofocus prototype automatic generation test cases grounds constraint logic programming clp 
article application domain smart cards 
generating test cases systems turns tedious dicult task potentials automatization assessed 
main result study application domain techniques question convincing candidates exploration expressed concrete plans collaboration partners 
overview 
organized follows 
section brie case tool autofocus speci cation simulation validation reactive systems 
section describes case study 
section describe discuss approach generation test cases embedding incremental development process experimental results 
concludes assessment results feasibility study takes account modeling formalisms autofocus generation test cases 
related 
theory formal testing tackled 
share commonality de ning observational congruence selection hypotheses systems 
sim ilar relations compute system model conforms speci cation 
di er approach want prove conformance relation approximate proof done traditional testing explicit formalization conformance relation 
constraint logic programming test case generation approach di ers class systems consider input language concept interface combined approach behavior speci cations automata functional de nitions transitions induced necessity powerful existing constraint handlers grounds constraint handling rules chr 
tool generation test cases lustre see 
difference approach model checkers random number generators generation test cases restriction boolean data types 
code generation grounds clp various non modular automata considered 
relationship model checking lp possibly tabled resolution procedures discussed :10.1.1.32.949:10.1.1.43.1094
approach mixture enumerative explicit symbolic approaches bounded model checking 
symbolic nature characterized fact constraints allow storing possibly nite sets states inputs 
explicit nature stems search algorithms depth rst breadth rst best rst tabu deploy 
approach directly applicable proving general properties properties interested usually existentially path quanti ed properties general proved referring universally path quanti ed formulas means shifting negations 
issues discussed detail :10.1.1.10.9748:10.1.1.10.9748
extension approach symbolic model checking subject current 
context mutation testing constraints generation test cases transformational systems 
idea formulate constraints approximate criteria killing mutants 
uses mixture bdds presburger constraints representation sets states reactive systems 
uses linear constraints real numbers model checking hybrid systems 
clearly focus model checking 
di erence approach mixing enumerative symbolic techniques computing xed points sets constraints chr constraint solvers arbitrary domains fd allowing convenient interactions user de ned speci cations test cases 
evolutionary approaches test case generation similar approach importance nding tness functions search strategies 
usually approaches concerned transformational systems technique generation test cases modi cation random tests di ers 
sake simplicity synonymously speak test cases test sequences sequences traces system 
contains precise terminology 
autofocus autofocus autofocus tum de tool graphical speci cation validation reactive embedded systems 
terms focus behavior models automata quite similar subset uml rt consider simple formalized semantics prerequisite validation techniques model checking testing 
components 
systems structured decomposing components 
component represents single unit computation 
components synchronously communicate typed directed channels 
channel connected port 
ports belong component channels directed holds true ports ports component constitute interface 
components connected channel say composed 
composition components depicted system structure diagrams 
may hierarchical boxes represent components arrows represent channels 
case study merely consists single component depicted fig 
complexity example system lies behavior structure 
components may associated set local variables manipulated component behavior local variables form component data space 
behavior 
bottom level components components composed components equipped behavior 
behaviors speci ed means extended state machines nite state machines access input output ports local variables bottom level component belong 
fig 
shows pictorial representation automaton state transition diagram std 
circles represent control states arrows represent transitions 
transitions may re certain pattern matching pm conditions form channel pattern input channels hold guard holds 
firing means update local variables pc write outputs performed pattern may empty string means input allowed channel 
called postconditions 
postconditions assignments local variables output channels 
transition associated quadruple pm pcv parts may omitted lack guard instance means condition may re provided input pattern matching condition satis ed 
note fig 
transitions simply labeled respective quadruples clutter diagram 
data functions 
channels said typed 
types include standard types integers booleans may user de ned gofer functional language 
enables concisely describe enumeration inductive types 
functional language may definition new possibly recursive functions 
functions guard postcondition transition 
execution 
autofocus components execute concurrently simultaneously time synchronous manner 
existence global clock ensures existence called ticks 
tick component reads input ports 
computes pattern matching conditions preconditions possible transitions 
possibly non deterministically chosen system 
addition computes new values local variables output ports 
instantaneous tick updates respective variable writes new values output ports 
channels connect output input ports transferring messages consume time values immediately available connected component tick 
procedure repeats 
results time synchronous communication scheme bu er size 
interaction 
architecture ssd behavior std data views interaction view plays important role coping reactive systems 
sequence diagrams play integral part speci cation systems test cases simulation results requirements capture 
appropriate editors connected autofocus 
validation 
modeling capabilities autofocus tools validating speci ed models 
include simulators grounds code generators languages java prolog ada 
furthermore model checkers smv cke propositional solvers test case generation sato theorem provers vse connected tool 
currently test tools coverage unit test doors requirements tracing connected autofocus 
inhouse card section describe equivalent models inhouse card sample study 
purpose smart card serve security token personal access control various areas site personalized computer access 
model built modeler point view application designer view 
focus application view show di erences model 
inhouse card secure device allows storage secret keys 
smart card comes contact terminal authentication protocols run start communication 
encryption secret keys ensure secure communication 
application programming interface card con card read ok signal interface inhouse card forms iso comprises relevant commands authentication smart card terminal veri cation user terminal user smart card routines 
authentication process symmetric cryptography secret keys 
veri cation process known personal identi cation number pin handling 
number failings limited counters 
model describes behavior card determine test sequences 
test sequences shall coverage available commands 
interfaces models interface structure see ssd 
structure shows interfaces modeled component card 
receives commands environment channel read sends return values channel ok commands inhouse card return values described speci cation manual 
restrict giving abstracted version actual card computation actual test cases 
appropriate transformations fed actual hardware case study test model implementation 
instance equivalence classes verify command integral part veri cation protocol data verify correct state pin verify wrong parameters verify wrong state verify wrong pin command sent reading device card 
equivalence classes encode command parameters return value card verify denotes sending command correct parameters return value ok autofocus elements input type entered time necessary di erentiate allowed cases impossible cases 
instance successful verify command entered state equivalence classes verify verify disjoint tested states 
modeling task included exclusion commands states 
model sends signals single valued type data signal environment indicate received command admissible 
generation test sequences interested admissible sequences sequences accept command signal return channel ok behavior mentioned inhouse card access control 
user puts card card reader correct pin access respective part building 
card super user mode personal unblocking key 
authentication achieved card reader super user terminals 
authentication encryption random numbers socalled challenges 
di erent follow scheme 
command equivalence classes simpli ed sequence depicted 
counters count number authentication attempts di erent card read ok read ok read ok authentication sequence simpli ed situations 
counters int int declared local variables component card 
di erent maximum values declared counters constants model fact pin entered times wrongly times blocked maximum value rst counter instance declared const 
description behavior consists main states called authentication states requirements speci cation transitions 
transitions instance reset transition change main state directly authentication process requires intermediate states connected authentication states 
ways modeling intermediate states autofocus modeler view model intermediate states control states see fig 

leads large number control states reset transitions intermediate state 
example transi reset possible command autha autha autha autha autha autha possible command possible command possible command possible command possible command possible command mf df init df admin df user df user df admin df user reset reset reset reset reset reset auth key auth key pin key pin key auth auth auth auth auth auth auth auth auth key read ok ready cmd read ok inhouse card authentication data states tion card model res intermediate state application state df user read ok 
application view encodes intermediate states variable type data ready fig 

reduces number states reset transitions application states std similar informal diagram requirement document 
case transition takes care identi cation terminal read ok ready 
modeling task di erentiate possible impossible commands di erent states 
done possible command transitions see cmd read ok 
transition acknowledges commands satisfy predicate cmd value 
predicate cmd describes com key kfpc read verify ok key kfpc key kfpc key kfpc read verify ok key kfpc key kfpc key kfpc read ok key kfpc key kfpc read ok key kfpc key kfpc command command command command command command command mf df init df admin df user df user df user df admin read select ok read ok read ok key kfpc read ok key kfpc read reset ok read reset ok read reset ok read reset ok cmd key kfpc read ok key kfpc cmd read reset ok read reset ok read reset ok read reset ok read reset ok read ok read ok read ok read ok read ok read ok cmd cmd cmd cmd key kfpc read verify ok key kfpc read reset ok read ok cmd read ok read reset ok read reset ok read ok read ok key kfpc read ok key kfpc key kfpc read ok key kfpc key kfpc read ok read ok cmd read reset ok read reset ok read reset ok read ok read ok cmd cmd key kfpc read ok key kfpc key kfpc key kfpc read ok key kfpc key kfpc key kfpc read verify ok key kfpc read reset ok key kfpc read ok key kfpc read ok read ok read ok read ok cmd cmd read reset ok read reset ok inhouse card authentication control states mands admissible authentication state df admin 
predicate de ned fun cmd true cmd true 
cmd false denotes states successful reading allowed described equivalence class updating results error command equivalence class 
state predicate de ned 
allows exible modeling process command allowed excluded explicitly changing layout transitions std 
model testing section describe approach model testing grounds constraint logic programming 
restrict coarse description basic ideas details translation may embedding incremental development process discussed 
contains detailed discussion approach 
smart card example exact nature development process crucial think ideas test case generation clari ed embedding process 
process modern sw development processes emphasize bene ts iterative incremental proceeding 
include instance rational uni ed process rup extreme programming xp cleanroom model crm classical prototyping approaches 
main bene usually seen possibility early interactions customer 
similar white box level speci cations state machines crm advocate high level graphical speci cation languages implemented autofocus 
rup extreme modeling xm focus models integral entity speci cations 
model artifact abstracts reality focusing speci aspects 
processes necessitate manual step speci cations implementations code generators autofocus permit partial automatization step 
clearly due focus behavior models integral part uml rt 
prefer formally de ned semantics autofocus consider crucial able compute test cases 
di erence xm due statecharts uml focuses modeling validation 
sequel referring models speak behavior models 
incremental development process test generation techniques naturally lend application regression testing 
suitable management tools test cases derived earlier increment may regression testing ones 
note give suitable de nition increment extends additional functionality de nition embedding development process subject ongoing 
furthermore code generators satisfy requirements posed production code test cases models suitable transformations test cases respective hand written code 
naturally leads question test cases models functional xp structural satisfying coverage criterion relate test cases implementation code 
question particularly important structural test cases certi cation issues enter game 
vision structural test cases models transform test cases implementations maintaining respective coverage criterion switching suitable criterion models suitable implementations 
see application domain approach testing models debugging aid error location testing implementations speci cation oracle recognize need structural tests implementations 
oppose view brooks believe hard part building software speci cation design testing conceptual construct labor representing testing delity representation 
test case generation basic idea algorithm symbolic execution model see details 
generate set predicates pa automaton remember automata occur bottom level components 
predicate pa encodes transition arguments con tain state destination state 
furthermore predicates arguments contain formal parameters input output local variables 
guards postconditions encoded predicate body evaluated see encoded transition may re local variables updated 
predicates pa form step src tr loc dst pre tr loc post tr loc 
pre post encode guards postconditions assignments transition tr state src state dst account values local variables loc input values output values 
pre postconditions may involve arbitrary constraints 
practice loc tuples pairs tuples values 
pairs encode values variable ring transition tr 
composition 
composing set components putting new ssd connecting ports driver predicate needed 
predicate subsequently calls predicates correspond state machine elements furthermore takes care communication components 
internal channels channels connect components encoded internal variables interface driver predicate terms structure exactly bottom level component 
storing pairs values ring particular transition set components re simultaneously store complete histories done interested complete traces test cases 
histories lists contain values particular channel variable single tick 
way possible update local variables output channels value simply concatenating value respective history list remember containing free variables parameters prolog transient free parts passed 
predicate head contains tuple lists input histories tuple lists local variables tuple lists output histories 
components tuple correspond involved system components may input output channel local variable usually tuples 
way composition levels hierarchy achieved applying composition procedure recursively 
top level component necessary take care stimuli environment input channels channels connect ports ssd modeling level inter ssd communication consists chunks connect port atomic ssd interfaces set interface point ssd contains atomic ssd 
connection atomic ssd forms nal chunk 
joining chunks yields conceptual channel connects atomic components 
communication channel achieved tick 
note simple translation scheme works simple synchronous communication semantics autofocus 
necessary model asynchronous communication explicit bu er components 
execution 
symbolic execution means successively calling top level driver predicate 
usually idea restrict maximum possible length system runs 
exact number crucial terms eciency determination important task consider 
stimuli known form part test case speci cation inserted input history list holds true values output channels internal variables 
backtracking mechanism ensures potentially transition particular automaton re tried 
ensures predetermined output achieved choosing particular transition possible transitions tried 
addition free unspeci ed unbound variables prolog enables compute test cases unspeci ed stimuli execution encoded free variables 
choice transition respective driver predicate scheduled prolog backtracking mechanism binds variable concrete value 
way completely instantiated system traces computed 
far happens explicit generation system state space including traces led state 
simple 
problem prolog depth rst strategy possible executes transition predicates order written 
results loops transitions emanate control state rst leads state second transition taken backtracking performed 
problem obvious traces length taken account 
implemented solutions problem 
consists simply memorizing state choosing ordering transitions gives rise di erent search strategies best rst grounds appropriate tness functions :10.1.1.10.9748
transition taken state re entered transition chosen 
second implementation probabilities transitions uence choice transition tried rst 
probabilistic models crm source transition probabilities usually esoteric 
cases mentioned idea try probability knowing happens real system 
constraints 
consider guard transition merely requires local variable inside certain range point time instance 
local variable hitherto unbound principle bound value 
instantiation necessarily essential system may continue execution knowledge 
kind information accompanies computation called constraint 
particular trace turns greater say corresponding constraint updated 
possible turns particular trace impossible necessary 
situation computation discarded particular constraint satis able 
bad news case obviously went wrong backtracking performed 
news need continue computation know constraint satis ed 
results priori pruning search tree opposed usual test strategy common logic programming 
order additional steps taken 
autofocus allows de nition recursive data types functions guards postconditions translate data type declarations function de nitions kind constraint incidentally prede ned constraint clp systems 
done means constraint handling rules chr meta language constraint handlers constraint handlers parts system take care checking satis ability constraints 
function de nitions calls compiled eager constrained predicates generation test cases involve function inversions introduced upper bound number recursions order avoid nite loops 
lazy evaluation achieved means delaying constraints 
note constraints representing sets space cient storage sets states 
constraint instantiation 
piece puzzle concerned answer question remaining constraints 
point constraint input value tick may lead execution trace satis es test case speci cation instance particular coverage criterion 
test case speci cation satis ed restricting value words just computed test sequence set traces input time greater 
kind situation naturally occurs constraints user de ned types real numbers 
question choose value nitely possibilities signi cant test case 
kind situation heuristics developed case called equivalence class heuristics try values say 
naturally clever instantiations major problem generation test cases 
note approach di ers instance deliberately heuristics determination test cases theoretical approach de nition hopefully suitable notion observation 
discussion di erence approach test case generation possibly bounded non symbolic model checking apparent handling nite systems 
relationship lp model checking nite systems subject :10.1.1.32.949:10.1.1.43.1094
intention testing model checking di erent terms intended completeness result see major advantage approach higher exibility generating counter examples 
constraint languages crucial intended interactivity consider key scalability method abstracting model excluding certain system runs transitions states achieved easily 
terms performance predetermined maximum length generated test cases plays important role contains example changing maximum length little results change orders magnitude terms time needed compute speci ed test case 
reason behavior prolog search strategy better performing strategies intelligent choice transitions generally better search strategies depth rst search simple prevention loops probabilistic approaches needed 
current aims strategies ideas consists topological structure automata determining tness functions search strategies implemented instance algorithm 
show tness function speci class test cases reaching states transitions de ned means reordering order transitions chosen :10.1.1.10.9748
unanswered question appropriate input languages test case speci cations 
constraint languages chr input language certainly best choice 
graphical input languages sequence diagrams automata probably better suited certain class test cases 
constraint languages chr choice back interfaces 
instantiation remaining constraints done grounds simple heuristics random instantiations 
question created sequences relate model tested lies heart theoretical investigations 
particularly interesting impossible traces occur instance robustness tests application test cases computed single components composed component 
application generated test cases example 
objective derive test sequences coverage criteria states transitions functional purposes 
restrict giving numbers smaller version smart card authentication protocol implemented data states local variables control states 
memory requirements generation test cases smaller mb omit details 
measurements performed sun ultrasparc gb memory mhz 
test purposes achieve state coverage 
system computed corresponding test cases seconds maximum length ranging 
constraint specifying test case macro cover states automatically rewrites set membership constraints history states visited execution 
sake random testing system compute test sequence length sense mentioned interleaving transitions 
rst sequence took seconds compute subsequent ones obtained immediately 
fig 
shows experimental data functional tests required counters reach zero 
counters max steps time table required time tem quickly determine required test sequences 
counters case stopped computations hours 
reason behavior easily number transitions emanating state strategy interleaving transitions large 
counters instance necessary decrements exactly looping transitions taken 
interleaving exactly surprise nd test case 
rst step system decrement respective counter task system handle 
knew order compute trace counter reaches zero sucient remain state mentioned looping transitions simply speci ed respective test case follows system decrement respective counter remain state counter reaches zero 
sliced model ad hoc restricting particular state looping transitions enabled 
way simple nally compute test sequences lines table indicate helped system described manner 
noteworthy selection strategy choosing transitions means probabilities able nd test cases helping system reasonable times minutes 
way workaround loop transitions questions high probabilities know problem di erent forbidding certain states transitions 
shows knowledge system possible compute di cult systems consider possibility interaction key factor scalability approach graceful degradation 
show fully instantaneous automatic determination test cases tab :10.1.1.10.9748
combination best rst tabu search mentioned tness function de ned means shortest paths state machine implicitly implemented transition reordering 
tabu search implemented different strategies storing sets visited states 
interesting note case counter able nd corresponding test case hints model checkers connected autofocus smv trace card 
discussion relationship bounded model checking testing refer consider remarks paragraph related rst section 
model checking approach quite close complexity limit state explosion problem 
application modeler model state bits transitions 
model checking smv required seconds bdd nodes mb storage 
bounded model checking sato fails nd examples 
approach best rst search see succeeds nding test case seconds :10.1.1.10.9748
results feasibility study aimed assessing practicability test case generator grounds constraint logic programming 
results show test case generator combination suitable modeling tool autofocus allows compute relevant test cases industrial applications 
alleviates tedious task test developers 
fact authors institutions agreed continue cooperation 
remainder brie assess modeling capabilities autofocus test generator 
modeling 
speci cation formalisms gui tool support autofocus perceived easier grasp comprehensive approaches previous studies product nets 
possibility quickly alter model able immediately compilation simulate considered helpful 
possibility replay simulate computed test cases interactively important indus trial testing 
addition integration modeling testing tools identi ed crucial 
test case generation 
addition generating complete test sequences speci cations transition tour important verify test sequence satis es intended test purpose formalized test case speci cation 
approach obviously facilitates task computed test sequences ought construction conform test case speci cation 
ability formulate arbitrary test case speci cations means constraint handling rules considered strengths approach 
requires expert knowledge tradeo tool computation power interaction acknowledged 
formulating test case speci cations means chrs considered acceptable 
terms current research focusing de nition tness functions best rst search strategies di erent classes test cases 
includes reckoning procedures values maximum depth search tree 
storing states means constraints directly lends abstractions considering convex hulls sets states exact sets 
quantitative results clearly lack comparative numbers 
part due fact example publicly available academic example course mean system re modeled lustre existing test tools test case generation 
reason hardly tools graphical speci cation test case generation situation enormous industrial interest tools change 
alur courcoubetis halbwachs henzinger ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science february 
beck 
extreme programming explained embrace change 
addison wesley 
baier lamersdorf 
extreme modeling 
proc 
extreme programming flexible processes sw engineering xp 
brinksma 
theory derivation tests 
proc 
th intl 
conf 
protocol speci cation testing veri cation pages 
brooks 
silver bullet 
proc 
th ifip world computing conference pages 

automated symbolic analysis reactive systems 
phd thesis university maryland 
fr 
constraint logic programming software validation 
th workshop bilateral programme scienti technological cooperation germany march 
cui dong du narayan kumar ramakrishnan ramakrishnan smolka warren 
logic programming model checking 
proc 
plilp alp springer lncs pages 
podelski 
model checking clp 
proc 
tools algorithms construction analysis systems tacas pages 
demillo utt 
constraintbased automatic test data generation 
ieee transactions software engineering 
du bousquet 
overview speci cation tool testing synchronous software 
proc 
th ieee intl 
conf 
automated sw engineering october 
fribourg 
constraint logic programming applied model checking 
proc 
th int 
workshop logic program synthesis transformation lncs venice 
springer verlag 
fribourg veloso 
automates contraintes 
technique science 
fr 
constraint handling rules 
constraint programming basics trends lncs pages 
springer verlag 
fr 
theory practice constraint handling rules 
logic programming october 
gaudel 
testing formal 
proc 
intl 
conf 
theory practice software development tapsoft lncs pages aarhus denmark may 
gupta 
constraint approach speci cation veri cation real time systems 
proc 
ieee real time symposium pages san francisco december 
huber sch 
consistent graphical speci cation distributed systems 
industrial applications strengthened foundations formal methods fme lncs pages 
springer verlag 
international organization standardization 
international standard iso iec integrated circuit cards contacts 

rational uni ed process 
addison wesley nd edition 
pretschner 
autofocus constraint logic programming 
proc 
constraint logic programming software engineering london july 
pretschner 
testing concurrent reactive systems constraint logic programming 
proc 
nd workshop rule constraint reasoning programming singapore september 

test sequence generation lustre descriptions 
proc 
th ieee intl 
conf automated software engineering ase grenoble 

automatic test data generation constraint logic programming symbolic execution 
proc 
st intl 
workshop automated program analysis testing veri cation limerick 
uller 
modelling veri cation linear hybrid automata 
mathematical computer modeling dynamical systems march 
pretschner :10.1.1.10.9748
classical search strategies test case generation constraint logic programming 
submitted fates 
pretschner 
model testing constraint logic programming results challenges 
submitted nd icse intl 
workshop automated program analysis testing veri cation 
pretschner 
model testing evolutionary software development 
proc 
th ieee intl 
workshop rapid system prototyping rsp monterey june 
appear 
linger 
cleanroom software engineering 
addison wesley 
du bousquet 
approach symbolic test generation 
proc 
integrated formal methods 
tretmans 
test generation inputs outputs repetitive quiescence 
software concepts tools 
pretschner 
speci cation test sequence generation propositional logic 
software testing validation reliability 

