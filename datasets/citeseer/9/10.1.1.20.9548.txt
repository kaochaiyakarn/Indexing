predicate migration optimizing queries expensive predicates joseph hellerstein 
traditional focus relational query optimization schemes choice join methods join orders 
restrictions typically handled query optimizers predicate pushdown rules apply restrictions random order joins possible 
rules assumption restriction essentially zero time operation 
today extensible object oriented database systems allow users define time consuming functions may query restriction join predicates 
furthermore sql long supported subquery predicates may arbitrarily time consuming check 
restrictions considered zero time operations model query optimization enhanced 
develop theory moving expensive predicates query plan total cost plan including costs joins restrictions minimal 
algorithm implement theory results implementation postgres 
experience newly enhanced postgres query optimizer demonstrates correctly optimizing queries expensive predicates produces plans orders magnitude faster plans generated traditional query optimizer 
additional complexity considering expensive predicates optimization small 
traditional relational database rdbms literature query optimization stresses significance choosing efficient order joins query plan 
placement standard relational operators selection projection plan typically handled pushdown rules see ull state restrictions projections pushed query plan tree far possible 
rules place importance ordering projections restrictions pushed joins 
rationale pushdown rules relational restriction projection operators take essentially time carry reduce subsequent join costs 
today current address computer sciences department university wisconsin madison wi 
material supported national science foundation graduate fellowship 
computer science division eecs department university california berkeley ca cs wisc edu mike postgres berkeley edu michael stonebraker systems restriction longer considered zero time operation 
extensible database systems postgres sr starburst hcl various object oriented dbmss ms wlh ont allow users implement predicate functions general purpose programming language 
functions arbitrarily complex potentially requiring access large amounts data extremely complex processing 
unwise choose random order application restrictions predicates may optimal push query plan tree 
traditional model query optimization produce optimal plans today queries shall see plans traditional optimizers generate orders magnitude slower truly optimal plan 
illustrate significance ordering restriction predicates consider example example 
find maps week showing snow cover 
channel contains images frequency range interests 
retrieve maps name maps week maps channel coverage maps picture example function coverage complex image analysis function may take thousands instructions compute 
quite clear query run faster restrictions maps week maps channel applied restriction coverage maps picture doing minimizes number calls 
restriction ordering important correctly ordering restrictions table access sufficient solve general problem place predicates query execution plan 
consider example example 
find channel maps weeks starting june show snow cover 
information week kept weeks table requiring join 
retrieve maps name maps week weeks number weeks month june maps channel coverage maps picture traditionally dbms execute query applying single table restrictions clause performing join maps weeks early restriction lower complexity join processing 
example cost evaluating expensive restriction predicate may outweigh benefit gained doing restriction join 
words may case predicate pushdown precisely wrong technique 
needed predicate postponing restriction coverage maps picture computing join 
general clear joins restrictions interleaved optimal execution plan clear migration restrictions effect join orders methods plan 
describes proves correctness predicate migration algorithm produces minimal cost query plan queries expensive predicates 
predicate migration modestly increases query optimization time additional cost factor polynomial number operators query plan 
compares favorably exponential join enumeration schemes query optimizers easily circumvented optimizing queries expensive predicates expensive predicates parsing query techniques need invoked 
queries expensive predicates gains execution speed offset extra optimization time 
implemented predicate migration postgres modest overhead optimization time execution time practical queries reduced orders magnitude 
illustrated 
application existing systems sql subqueries important note expensive predicate functions exist generation research prototypes 
current relational languages industry standard sql iso long supported expensive predicate functions guise subquery predicates 
subquery predicate form expression operator query 
evaluating predicate requires executing arbitrary query scanning result matches operation arbitrarily expensive depending complexity size subquery 
subquery predicates converted joins subject traditional join optimization strategies sophisticated sql rewrite systems starburst convert subqueries joins 
forced compute subquery order evaluate predicate predicate treated expensive function 
applicable majority today production rdbmss support sql 
related stonebraker raised issue expensive predicate optimization context postgres multi level store sto 
questions posed stonebraker directly addressed vary slightly definition cost metrics expensive functions 
main applications system described sto project sequoia sd university california project manage terabytes geographic infor mation system gis data support global change researchers 
expected researchers writing queries expensive functions analyze data 
benchmark queries 
ibaraki kameda ik krishnamurthy boral zaniolo kbz swami iyer si developed refined query optimization scheme built notion rank 
scheme uses rank reorder joins restrictions 
techniques consider possibility expensive restriction predicates reorder nodes single path left deep query plan tree technique optimizes paths arbitrary tree 
furthermore schemes proposal completely new method query optimization extension applied plans query optimizer 
possible fuse technique develop ik kbz si focus issue schemes widely 
notion expensive restrictions considered context logic programming system cgk 
solution model restriction relation join virtual relation infinite cardinality containing entire logical predicate restriction 
modeling restrictions joins able join query optimizer order predicates appropriately 
unfortunately traditional dbms query optimizers complexity exponential number joins 
modelling restrictions joins query optimization prohibitively expensive large set queries including queries single relation 
scheme cause traditional optimizers exhibit exponential growth optimization time 
caching return values function calls prove vital techniques 
jhi explored number issues involved caching procedures query optimization 
model slightly different caching scheme value simply storing results function set argument values 
focus caching complex object attributes instance 
structure section develops model measuring cost selectivity predicate describes advantages caching expensive functions 
section presents predicate migration algorithm scheme optimally locating predicates join plan 
section details results implementation experience postgres 
section summarizes provides directions research 
background expenses caching query optimization schemes typically attempt find query plan minimal estimated cost 
develop optimizations enhance traditional model analyzing query plan cost 
involve modifications usual metrics expense relational operators require function caching techniques 
preliminary discussion model prove critical analysis 
relational query language sql postquel rs may clause contains arbitrary boolean expression constants range variables query 
break clauses maximal set conjuncts boolean factors sac refer boolean factor distinct predicate satisfied result tuple query 
term predicate refer boolean factor query clause 
join predicate refers multiple tables restriction predicate refers single table 
traditional query optimizers compute selectivities joins restrictions 
predicate join restriction estimate value output card input card selectivity assumption selectivities different predicates independent 
typically estimations default values system statistics sac suggests accurate inexpensive sampling techniques hot 
cost user defined functions postgres extensible system postgres arbitrary userdefined functions may introduced restriction join predicates 
functions may written general programming language database query language sql postquel 
section discuss programming language functions handle query language functions 
user defined functions may written general purpose language little hope database correctly estimate cost selectivity predicates containing functions initially section extend postgres function definition syntax capture function expense 
selectivity modeling user defined operators postgres described mos 
introduce function postgres user writes function compiles issues postquel define function command 
capture expense information define function command accepts number special flags summarized table 
cost predicate postgres computed adding costs expensive function expression 
postgres predicate expense tuple recursively defined cpu cpu byte pct bytes access cost function constant tuple variable recursively computed expense argument bytes expected return size argument bytes access cost cost retrieving data necessary compute function 
data may stored various levels postgres multi level store sto require user define constants specific repeated applications function collect performance statistics curve fitting techniques estimates function behavior 
techniques scope 
different levels multi level store 
computed postgres system statistics providing accurate information distribution caching data storage levels 
cost sql subqueries query language functions sql allows variety subquery predicates form expression operator query 
predicates require computation arbitrary sql query evaluation 
simple uncorrelated subqueries query blocks higher nesting levels correlated subqueries refer tuple variables higher nesting levels 
principle cost check uncorrelated subquery re cost materializing subquery cost scanning subquery tuple 
need cost estimates help reorder operators query plan 
cost initially materializing uncorrelated subquery paid regardless subquery location plan ignore overhead materialization cost consider uncorrelated subquery cost tuple correlated subqueries materialized value checked subquery predicate tuple expense correlated subqueries ignore scanning done materialization represent separate cost 
postquel functions postgres costs equivalent correlated subqueries sql arbitrary access plan executed tuple relation restricted postquel function 
cost estimates query language functions form simple model raise issues setting costs subqueries 
cost subquery predicate may lowered transforming subquery predicate ldh early techniques materializing scanning subquery soon predicate resolved day 
incorporating schemes scope including framework sections merely requires careful estimates subquery costs 
join expenses subsequent analysis treating joins restrictions uniformly order optimally balance costs benefits 
order need measure expense join tuple join input tuple cartesian product relations joined 
done join method costs linear cardinalities input relations including common algorithms nested loop join hash join merge join 
note join linear cardinalities input relations 
systems including postgres join situations merge join requires sorting input hash join nested loop join preferable sort merge 
query may contain join predicates set relations 
execution plan query predicates processing join call primary join predicates 
join expensive primary join predicates cost tuple join reflect expensive function costs 
add expensive functions costs flag name description cpu execution time invocation regardless size arguments cpu execution time byte arguments byte pct percentage argument bytes function need access described section join costs tuple 
join predicates applicable processing join merely restrict output refer secondary join predicates 
secondary join predicates essentially different restriction predicates treat 
predicates may reordered pulled higher join nodes just restriction predicates 
note secondary join predicate remain corresponding primary join 
secondary join predicate impossible evaluate 
function caching existence expensive predicates motivates research richer optimization schemes suggests need dbmss cache results expensive predicate functions 
assume system caches return values functions duration query lowers cost function probability function evaluated simply checking cache 
distribution data function cache distribution inputs function derive ratio cache misses cache lookups function 
ratio serves probability cache tuple factored tuple cost function 
addition lowering function cost caching allow pull expensive restrictions joins modifying total cost restriction nodes plan 
general join may produce tuples product cardinalities inner outer relations 
produce new values attributes tuples recombine attributes 
move restriction query plan join may dramatically increase number times evaluate restriction 
caching expensive functions increase number expensive function calls number cache lookups quick evaluate 
results fact pulling restriction set function calls distinct arguments 
cases primary join predicates fact decrease number distinct values passed function 
see function caching pulling restrictions joins increase number function calls decrease number 
current sql systems support arbitrary caching results evaluating subquery predicates 
benefit techniques described sql system enhanced caching duration query 
interesting note original optimizing discussed hel done functions functions calculate time day :10.1.1.20.9548
functions unusual result ill defined queries answer queries dependent order tuples scanned non deterministic relational systems 
table function expense parameters postgres table tuple size tuples maps weeks emp dept table benchmark database sql queries system sac description limited form caching correlated subqueries 
system saved materialization correlated subquery evaluation subsequent tuple values columns referenced subquery predicate evaluated scanning saved materialization subquery 
system cache single materialization subquery cache result subquery predicate 
subquery form expression operator query system cached result query expression operator query 
environment performance measurements uncommon queries take hours days complete 
techniques improve performance orders magnitude cases converting night query interactive 
demonstrating fact course discussion measuring performance effect optimizations various queries 
section environment measurements 
focus complex query workload involving subqueries expensive user defined functions transaction workload queries relatively simple 
accepted standard complex query workload proposed tob measure performance effect predicate migration constructed benchmark database combined gis business application 
tuple maps contains postgres large object ols map picture taken satellite 
map pictures taken weekly maps table contains foreign key weeks table stores information week picture taken 
familiar emp dept tables store information employees departments 
physical characteristics database shown table 
performance measurements done development version postgres similar publicly available version contains predicate migration optimizations 
postgres run decstation workstation equipped mb main memory mb dec rz disks running ultrix operating system 
measured elapsed time total time taken system cpu time time cpu busy optimizing executing example query predicate migration 
numbers examples appear rest 
min cost plans queries expensive predicates glance task correctly optimizing queries expensive predicates appears exceedingly complex 
traditional query optimizers search plan space exponential number relations joined multiplying plan space number permutations restriction predicates traditional plan enumeration techniques prohibitively expensive 
section prove reassuring results 
particular query plan restriction predicates optimally interleaved simple sorting algorithm 

result previous point need merely enhance traditional join plan enumeration techniques interleave predicates plan appropriately 
interleaving takes time polynomial number operators plan 
optimal predicate ordering table accesses discussion focusing simple case queries single table 
queries may arbitrary number restriction predicates may complicated boolean function table range variables possibly containing expensive subqueries user defined functions 
task order predicates way minimize expense applying tuples relation scanned 
access path query index scan predicates match index applied scan applied 
predicates essentially zero cost evaluated indices retrieve tuples qualify 
note possible index tables function values table attributes ms ls 
scan done function index predicates function may applied scan considered zero cost regardless function expense 
represent subsequent non index predicates subscript predicate represents place order predicates applied tuple base table 
represent expense predicate selectivity assuming independence distinct predicates cost applying non index predicates output scan containing tuples lemma demonstrates cost minimized simple sort predicates 
lemma cost applying expensive restriction predicates set tuples minimized applying predicates ascending order metric rank selectivity cost tuple restrict week restrict channel restrict coverage picture scan emp plan rank rank rank restrict coverage picture restrict week restrict channel scan emp plan execution plans example rank rank rank proof 
results directly done smith smi job scheduling 
reviewed database context han ik kbz hel :10.1.1.20.9548
intuitively ordering gives priority execution restrictions low selectivity low cost 
reduces number tuples processed expensive predicates 
see single table queries predicates optimally ordered simply sorting rank 
swapping position predicates equal rank effect cost sequence 
see effects reordering restrictions return example 
ran query postgres rank sort optimization generating plan rank sort optimization generating plan 
expect lemma plan higher cost second plan second correctly ordered rank 
optimization execution times measured runs illustrated table 
see correctly ordering restrictions improve query execution time orders magnitude 
predicate migration moving restrictions joins previous section established optimal ordering restrictions 
section explore issue ordering restrictions joins 
eventually applying optimization plan produced typical join enumerating query optimizer model fixed join plan want minimize plan cost constraint may change order joins 
section develops polynomial time algorithm optimally place restrictions secondary join predicates join plan 
definitions thrust section handle join predicates ordering scheme way handle restriction predicates having participate ordering rank 
joins binary operators generalize model single table queries handle restrictions joins 
refer generalized model global model encompass costs inputs query just cost single input single node 
execution plan optimization time execution time cpu elapsed cpu elapsed plan sec sec min sec min sec plan ordered rank sec sec min sec min sec definition plan tree tree leaves scan nodes internal nodes joins restrictions 
tuples produced scan nodes flow upwards edges plan tree 
optimization schemes constrain plan trees particular class left deep trees scans right child join 
methods require limitation 
consider non tree queries queries common subexpressions recursion 
definition stream plan tree path leaf node root 
shows tree plan streams outlined 
framework single stream join node simply predicate different number inputs restriction treated identical fashion 
considering predicate tree restriction join operator entire input set query 
consider input query cartesian product relations referenced query model node operator cartesian product 
modeling predicate global fashion naturally compare restrictions joins different streams 
correctly modify notion tuple cost predicate definition query relations global cost predicate relations defined cost tuple global cost card card cost tuple cost attribute predicate described section 
define cost predicate entire input query divide cardinalities tables affect predicate 
illustration consider case single table restriction relation push directly follow table access cost applying table cost tuple card new global model consider input node cartesian product note cost applying global single table models card global cost cost tuple card recall function caching pull top tree cost reflect cardinalities relations global model change cost analysis plan 
merely provides framework treat predicates uniformly 
selectivity predicate independent predicate location plan tree 
follows fact table performance example card card global rank card predicate easily derived definition global rank predicate defined rank selectivity global cost note global cost predicate single table query user defined cost tuple global rank node single table query rank defined previously 
see global model generalization single table queries 
subsequent discussion refer rank predicate mean global rank 
analysis prove useful assume nodes distinct ranks 
assumption prove swapping nodes equal rank effect cost plan 
lemma swapping positions equi rank nodes effect cost plan tree 
proof 
note swapping nodes plan tree affects costs nodes 
consider nodes equal rank operating input cardinality order joint cost swapping results cost ranks equal matter simple algebra demonstrate cost plan tree independent order equi rank nodes 
knowing achieve unique ordering rank assigning unique id numbers node tree ordering nodes pair rank id 
introduce id numbers simplifying assumption ranks unique 
moving restrictions plan tree possible push restriction location restriction evaluated 
notion captured definition definition plan stream semantically incorrect predicate stream refers attributes appear predicate input 
streams rendered semantically incorrect pushing secondary join predicate corresponding primary join pulling restriction input stream join pushing join input stream 
need careful rule possibilities 
subsequent analysis need identify plan trees equivalent location restrictions secondary join predicates 
formalize follows definition plan trees join order equivalent contain set nodes mapping streams streams stream contain join nodes order 
predicate migration algorithm optimizing plan tree optimizing streams approach optimizing plan tree treat streams individually sort nodes streams rank 
unfortunately sorting stream general plan tree simple sorting restrictions table access order nodes stream constrained ways 
allowed reorder join nodes join order enumeration handled separately predicate migration 
second ensure stream remains semantically correct 
situations constraints may preclude option simply ordering stream ascending rank predicate may constrained precede predicate rank rank situations need find optimal ordering predicates stream subject precedence constraints 
monma sidney ms shown finding optimal ordering large class precedence constraints done fairly simply 
analysis key results 
stream broken modules module defined set nodes constraint relationship nodes outside module 
optimal ordering module forms subset optimal ordering entire stream 

predicates constrained pre rank rank optimal ordering directly preceding unconstrained predicates 
monma sidney principles develop series parallel algorithm parallel chains algorithm optimizing streams large class constraints 
algorithm repeatedly isolates modules stream optimizing module individually resulting orders modules find total order stream 
constraints appear query plan stream subsumed considered monma sidney algorithm subroutine optimization algorithm 
predicate pushdown traditionally considered heuristic systems construct plan trees restriction secondary join predicates pushed far possible 
algorithm designed plan trees predicates pushed 
completeness include pushdown step algorithm unnecessary rdbms implementations 
predicate migration algorithm optimize plan tree push predicates far possible repeatedly apply series parallel algorithm parallel chains ms stream tree progress 
termination predicate migration algorithm produces tree stream ordered optimally ordered subject precedence constraints 
proceed prove predicate migration algorithm guaranteed terminate polynomial time prove resulting tree ordered streams represents optimal choice predicate locations plan tree 
theorem plan tree input predicate migration algorithm guaranteed terminate polynomial time producing join order equivalent tree stream semantically correct ordered 
proof 
proof appears hel deleted due space constraints :10.1.1.20.9548:10.1.1.20.9548
develops conservative upper bound algorithm running time number nodes plan tree 
theorem demonstrates predicate migration algorithm terminates ms assures stream resulting tree ordered 
sufficient establish optimality algorithm output prove resulting tree ordered streams minimal cost tree 
guaranteed theorem plan tree unique join order equivalent plan tree semantically correct streams 
minimal cost tree join order equivalent semantically correct 
proof 
deleted due space constraints 
appears full hel :10.1.1.20.9548
theorems demonstrate predicate migration algorithm produces desired minimal cost interleaving predicates 
simple illustration efficacy predicate migration go back example 
illustrates plans generated query postgres running predicate migration 
performance measurements plans appear table 
implementation measurement predicate migration algorithm pruning optimizations described hel implemented post generation dbms optimizer system addition predicate migration postgres fairly straightforward requiring slightly person month programming :10.1.1.20.9548
implementation consists files containing total lines statements language code 
clear enhancing optimizer support predicate migration fairly manageable task 
ease implementation potential benefits standard sql extensible query languages belief predicate migration worthwhile addition dbms 
motivate examples model sql queries natural run commercial dbmss 
simulate sql correlated subquery postquel query language function postgres support sql 
noted sql correlated subqueries postquel query language functions require processing evaluate execution subplan value 
major distinction postquel queries sql system postquel may return different number duplicate tuples sql postquel assigns semantics duplicates query output 
benchmark database example queries return tuples issue affect performance examples 
unoptimized plan stream restrict channel restrict coverage picture scan maps rank join outer week inner num rank rank rank predicate migration restrict month june scan weeks restrict channel scan maps restrict coverage picture join outer week inner num rank rank rank rank predicate migration plans example predicate migration execution plan optimization time execution time cpu elapsed cpu elapsed predicate migration sec sec min sec min sec predicate migration sec sec min sec min sec example 
query finds technical departments low budgets employee age 
sql query select name dept category tech budget exists select emp emp dno dno emp age existential subquery nested subquery converted join 
simulate query postquel define function takes argument type integer executes postquel query retrieve emp dno emp age function sql query simulated postquel query retrieve dept name dept category tech dept budget dept dno predicate migration ensures expensive clause containing applied restriction dept category tech shown table predicate migration speeds execution time orders magnitude affecting optimization time marginally 
additional optimization postgres orders operands rank quits evaluating expression soon operand evaluates true 
issue left discussion previously order simplify matters 
straightforward extension techniques 
table performance plans example restrict month june scan weeks example 
final example uses subquery join find managers departments previous example 
sql version query select dept name mgr name dept emp mgr category tech dno mgr dno budget exists select emp dno dno age uses subquery previous example equivalent postquel query reuse retrieve dept name mgr name mgr emp dept category tech dept dno mgr dno dept budget dept dno predicate migration query pulls clause join dept emp resulting dramatic execution speedup shown table 
increase optimization time comfortably low 
examples demonstrate short queries standard sql techniques improve execution time orders magnitude 
highlight fact database query optimization ignored costs associated restriction 
framework measuring costs argue necessity caching expensive functions dbms 
develop predicate migration algorithm execution plan optimization time execution time cpu elapsed cpu elapsed unoptimized plan sec sec min sec min sec optimized plan sec sec min sec min sec table performance plans example execution plan optimization time execution time cpu elapsed cpu elapsed unoptimized plan sec sec min sec min sec optimized plan sec sec min sec min sec proven transform query plans way optimally interleaves restriction join predicates 
implemented postgres measurements show predicate migration low overhead optimization produce query plans run orders magnitude faster produced systems predicate migration 
applied advanced research dbmss postgres dbms supports sql 
additions current dbmss produce dramatic performance gains modest implementation cost 
predicate migration addition 
optimization schemes useful run time re optimization 
query optimized resulting plan stored period time statistics shaped choice optimal plan may changed 
predicate migration re applied stored plan runtime little difficulty 
may produce optimal plan join orders methods may longer optimal 
optimize stored plan incurring exponential costs completely re optimizing query 
particularly beneficial queries subqueries costs subqueries change time 
represents initial effort optimizing queries expensive predicates substantial remaining done area 
important question assumptions relaxed making query optimization time unreasonably slow 
basic assumptions function caching implemented join costs linear size inputs 
assumptions obvious directions pursue polynomial time algorithm predicate migration 
function caching cost model longer applies restriction function called tuple flows predicate value attributes defined 
assume linear join costs algorithm ms longer applies 
interesting discover problem predicate migration solved polynomial time general assumptions fact crucial polynomial time solution 
implementation function caching postgres completed 
accomplished able perform complex experiments ones carefully tailored produce duplicate function calls 
comprehensive performance table performance plans example study develop test suite queries expensive functions compare performance predicate migration algorithm naive predicate heuristics 
interesting attempt extend handle queries common subexpressions recursion 
pulling restriction common subexpression may require duplication restriction cyclic recursive query plans clear predicate means defined 
cost analyses user defined functions dramatically improved techniques correctly assess expected running time function set inputs 
particularly postgres define function command includes implicit assumption users functions complexity linear size data objects 
simplifying assumption ease implementation certainly possible add curve fitting algorithms better model function running time complexity 
acknowledgments wei hong invaluable resource providing extensive regular feedback 
jeff naughton encouragement patience support helped bring project completion 
mike olson mark sullivan kurt brown comments earlier drafts 
completed assistance suggestions friendly support entire postgres research group 
cgk ravi krishnamurthy 
open architecture ldl 
proc 
th international conference large data bases amsterdam august 
deux story ieee transactions knowledge data engineering march 
day dayal 
nests trees unified approach processing queries contain nested subqueries aggregates quantifiers 
proc 
vldb pro pages 
han michael 
optimal evaluation boolean expressions online query system 
communications acm may 
hcl haas chang lohman lapis lindsay pirahesh carey shekita 
starburst mid flight dust clears 
ieee transactions knowledge data engineering pages march 
hel joseph hellerstein 
predicate migration optimizing queries expensive predicates 
technical report sequoia university california berkeley december 
hot wen chi hou ozsoyoglu 
statistical estimators relational algebra expressions 
proc 
th acm sigact sigmod sigart symposium principles database systems pages austin march 
ik ibaraki kameda 
optimal nesting computing relational joins 
acm transactions database systems october 
iso iso ansi 
database language sql iso iec 
jhi anant 
performance study query optimization algorithms database system supporting procedures 
proc 
vldb pro 
kbz ravi krishnamurthy boral carlo zaniolo 
optimization nonrecursive queries 
proc 
th international conference large data bases pages kyoto august 
ldh guy lohman dean daniels laura haas ruth kistler patricia selinger 
optimization nested queries distributed relational database 
proc 
vldb pro 
richard lipton jeffrey naughton donovan schneider seshadri 
efficient sampling strategies relational database operations 
appear theoretical computer science 
ls lynch stonebraker extended user defined indexing application textual databases 
proc 
vldb pro 
mos claire ed 
postgres manual volume 
technical report electronics research laboratory university california berkeley july 
ms monma sidney 
sequencing series parallel precedence constraints 
mathematics operations research 
ms maier stein 
indexing object oriented dbms 
klaus dittrich dayal editors proc 
workshop object oriented database systems asilomar september 
ms maier stein 
development implementation object oriented dbms 
bruce shriver peter wegner editors research directions object oriented programming 
mit press 
ols michael olson 
extending postgres database system manage tertiary storage 
master thesis university california berkeley may 
neil 
revisiting dbms benchmarks 
datamation pages september 
ont ontos ontos object sql guide february 
ontos db database release 
hamid pirahesh joseph hellerstein hasan 
extensible rule query rewrite optimization starburst 
proc 
acm sigmod international conference management data pages san diego june 
pro proc 
th international conference large data bases brighton september 
pro proc 
th international conference large data bases los angeles august september 
rs rowe stonebraker 
postgres data model 
proc 
vldb pro pages 
sac patricia selinger astrahan chamberlin raymond lorie price 
access path selection relational database management system 
proc 
acm sigmod international conference management data boston june 
sd michael stonebraker jeff 
sequoia large capacity object servers support global change research 
technical report sequoia university california berkeley march 
michael stonebraker james jeff meredith 
sequoia storage benchmark 
proc 
acm sigmod international conference management data washington may 
si arun swami iyer 
polynomial time algorithm optimizing join queries 
research report rj ibm almaden research center june 
smi smith 
various optimizers single stage production 
naval res 

quart 
sr stonebraker rowe 
design post 
proc 
acm sigmod international conference management data washington may 
sto michael stonebraker 
managing persistent objects multi level store 
proc 
acm sigmod international conference management data pages denver june 
tob dina bitton 
ap comparative relational database benchmark 
proc 
ieee compcon spring february 
ull jeffrey ullman 
principles database knowledge base systems volume 
computer science press 
wlh wilkinson hasan 
iris architecture implementation 
ieee transactions knowledge data engineering march 
