practical gram index text retrieval allowing errors gonzalo navarro ricardo baeza yates department computer science university chile blanco santiago chile dcc uchile cl propose indexing technique approximate text searching practical powerful especially optimized natural language text 
indices kind able retrieve string approximately matches search pattern words 
text substring fixed length stored index pointers text positions appears 
search pattern partitioned pieces searched index occurrences text verified complete match 
reduce space requirements pointers blocks exact positions increases querying costs 
design algorithm optimize pattern partition pieces total number verifications minimized 
especially suited natural language texts allows know advance expected cost search expected relevance query user 
show experimentally building time space requirements querying time index finding practical alternative text retrieval 
retrieval times reduced best line algorithm 
keywords approximate string matching information retrieval text indexing 
problem approximate string matching number applications computer science text retrieval computational biology signal processing pattern recognition defined follows long text length comparatively short pattern length retrieve segments occurrences text edit distance pattern edit distance strings defined minimum number character insertions deletions replacements needed equal 
common report endpoints occurrences 
call ff error ratio 
line version problem possible preprocess pattern text 
classical solution involves dynamic programming mn time 
number algorithms improved classical instance 
sublinear sense inspect characters text course line problem omega gamma taken constant 
shown fastest algorithm moderately low error ratios pattern length 
seen line version algorithm 
supported part chile 
index applicable scenarios particularly interested natural language text retrieval text normally large line algorithms practical 
queries frequent changes text preprocessed query patterns large letters alphabet size oe small expected error ratios query returns matches useless user 
classical indices text databases allow fast search exact patterns 
indices unable retrieve word misspelled 
common texts obtained optical character recognition ocr quality assurance content database indexing world wide web 
query may misspelled may remember exact spelling foreign name 
edit distance defined captures errors 
indexing schemes approximate text retrieval appeared years ago 
types indexing mechanisms word oriented sequence oriented 
index capable retrieving word edit distance pattern second useful text natural language index capable retrieving sequence notion word separation 
indices kind store set different words text vocabulary line algorithm vocabulary obtaining set words retrieve 
point problem need involve approximate matching anymore 
vocabulary sublinear size respect text achieve acceptable performance 
indices capable retrieving occurrence complete word 
instance ocr system erroneously inserted space middle word text removed space words indices able retrieve words just error allowed 
examples indices glimpse :10.1.1.17.6054
indices second kind words disregarded 
suitable natural language text scenarios exist words dna protein databases 
useful text retrieval languages finnish german words concatenated subwords sought 
class indices case building suffix tree text traversing text avoid redundancies 
main problem approach suffix trees pose heavy space requirements index compressed twelve times size text 
approaches compress suffix tree beginnings implemented 
index fit main memory usually case construction process costly suffix tree converted suffix array adapted 
second class reduces problem exact matching substrings pattern uses index searches substrings errors 
occurrences matching substrings verified search complete pattern 
indices efficiently built take space 
tolerant errors 
propose sequence retrieving index especially aimed text retrieval scenarios lines reducing problem exact matching 
show algorithm optimize partition pattern order minimize number text positions verify 
allows predict cost search give early feedback user approximate size result set 
case verifications involves probably results user may preempt search poor precision obtained 
index reduces retrieval times line algorithms depending number errors allowed 
organized follows 
section review previous 
section explain new index 
section analyze 
section show experimental results 
section give 
earlier version appeared 
previous idea reduction exact partitioning times line searching 
basic idea follows pattern occurs text errors cut pattern pieces arbitrarily pieces occurrence errors 
easily seen considering error modifies piece pattern piece survives unchanged see 
find approximate occurrences suffices search pieces check neighborhood 
exact partitioning algorithm errors pattern split parts part appear unaltered 
generalizations idea studied 
shown pattern cut pieces say subpatterns searched bk jc errors 
overlapping pieces considered 
pieces length called grams pattern searched search needs inspect text position samples separated characters inspected 
may force pieces candidate text area modifying related 
particular case matching piece proposed pattern cut pieces pieces occurrence observe positional constraints 
increases tolerance errors long patterns 
pattern long partitioning gives short pieces tend trigger verifications 
despite generalizations original partitioning idea leads fastest line algorithm moderate pattern length error ratios shown 
typical case natural language text retrieval 
idea apply reduction exact partitioning indexing grams approach 
positions grams stored 
search pattern length text divided blocks size gamma 
number grams pattern fall block computed 
text block having gamma grams verified dynamic programming 
independently alternative glimpse proposed allow general searches :10.1.1.17.6054
indexing word glimpse index substring fixed length originally conceived exact search mentioned possibility combining index exact partitioning answer approximate search queries 
idea grams different approach oriented sampling text 
text sample stored index space requirements reduced 
search pattern grams searched index rest proceeds line version 
dependence allows single index samples separated characters different values adjusted accordingly 
compression schemes considered time complexity increases significantly 
grams schemes small space overhead tolerance errors low typical text retrieval applications shown line version 
particular lower line algorithm adapting 
somewhat different idea proposed 
uses index sequence text length stored list positions text 
structure index similar propose 
reduction exact search completely different 
search pattern shorter gamma maximal strings edit distance pattern generated searched index 
lists merged 
handle longer patterns split pieces necessary required length 
length strings stored index small able represent computer integers 
allows build index quickly practice 
strings short avoid explosive numbers strings generated search time 
query complexity shown sublinear sufficiently low error ratios 
maximum allowed error ratio increases alphabet size 
example formula shows oe oe 
scheme gets worse number strings generated oe grows typical case text retrieval 
useful concept reduce space requirements indices block addressing 
main idea cut text number blocks 
storing exact positions word gram occurs blocks appears stored 
search time candidate blocks completely verified increases search times 
concept word retrieving indices results 
approximate search implemented 
opposed block addressing denote letter addressing case positions recorded 
new indexing scheme proposal aims specifically building powerful practical index text retrieval purposes 
indexes grams uses simplest partitioning disjoint pieces 
seen line version studied detail 
combined new pattern splitting optimization technique minimize number verifications perform especially useful natural language texts 
pointers exact occurrences blocks show letter addressing gives useful index 
indexing time select fixed length gram text stored index lexical order 
resemble traditional inverted lists call vocabulary set different grams 
number different grams denoted text characters gamma grams different grams 
gram store list text positions appears ascending positional order 
shows small example 

text 
index text indexing scheme 
block addressing text divided blocks fixed length grams start block considered lie inside block 
ascending list blocks gram appears stored case 
index smaller occurrences gram single block pointers blocks smaller 
search pattern length errors split pattern pieces search piece index grams text take union occurrences pieces candidate position match 
neighborhood candidate position verified sequential algorithm 
blocks candidate block completely traversed line algorithm 
illustrates search process 
course pieces may length piece shorter grams piece prefix considered occurrences piece contiguous index grams 
piece longer simply truncated letters possible vocabulary occurrences text index online approx pattern search vocabulary occurrences text index pattern verification search process exact addressing block addressing 
verify text gram starts fact occurrence piece verifying area 
describe splitting optimization technique query time 
pattern split pieces free select pieces 
idea mentioned line algorithm follows knowing assuming letter distribution text search pieces selected probabilities pieces similar 
minimizes total number verifications perform average 
better 
key point cheap compute advance exact number verifications perform piece 
just locate piece gram index binary search 
general case obtain contiguous region pieces shorter storing gram accumulated length lists occurrences subtract lengths endpoints region obtain immediately number verifications perform 
complete process takes log log 
describe dynamic programming algorithm compute partition minimizes total number verifications perform 
side result know advance total cost pay retrieve results explained useful early feedback user 
pat gamma search pattern 
number verifications perform piece pat gamma computed explained build matrices ffl sum verifications pieces best partition pat gamma errors ffl says piece start order obtain 
need space 
computing described previously takes log algorithm computes optimal partition time 
final number verifications 
beginnings pieces gamma gamma 
gamma min gammar gamma minimizes expression optimization dynamic programming algorithm 
analysis section analysis time space requirements index retrieval performance 
building index build index scan text single pass hashing store grams appear text 
selected large possible small total number grams small practical values natural language text 
scan gram hash function gram takes time total expected time kept nq technique similar karp rabin hash value gram obtained current 
occurrences ascending order insertion takes time 
index built expected time single pass text 
worst case modifying ukkonen technique build suffix tree linear time 
index space analyze space 
determine number different grams random text consider oe different urns grams balls grams text 
probability gram selected trial oe probability gram hit trials gamma oe average number grams hit trials oe gamma gamma oe theta oe gamma gamman oe theta min oe 
shows kept log oe vocabulary space sublinear 
show practical sizes experiments 
consider lists occurrences 
index positions grams space requirements effectively bit architecture block addressing blocks size consider entry list occurrences different gram mentioned different block 
reusing analysis vocabulary block store just pointer gram position 
allows index gb text 
bytes index longer texts 
hand considering possibility compressed list positions considerably reduce space requirements typically bytes pointer 
theta min oe different grams 
multiplying number blocks total size occurrence lists min oe oe log oe 
retrieval time turn attention time answer query 
splitting optimization phase log explained 
positions verify check zone classical algorithm cost 
cost exactly line version related number occurrences pieces text 
analyze case random text natural language shown experiments 
assumption discard effect optimization assume pattern split pieces lengths similar possible 
fact optimization technique difference natural language texts making approach case similar performance case random text 
clear fixed index sublinear time simply random text number occurrences pattern grows linearly text grows verify positions 
analysis follows speak terms derive order conditions reasonable control grow grows 
conditions imply grow function obtain fact meaning reasonable consider achievable 
split pattern pieces length bm dm terms probability occurrence shorter pieces oe times probable oe size alphabet 
total cost verifications oe sublinear ff log oe ff ff log oe log oe log oe 
involve sublinear verification cost achievable 
considering small possible pieces longer case truncate pieces length list occurrences resulting grams 
triggering verification occurrence grams verify text occurrence gram fact occurrence longer piece 
takes time average occurrence lists additional time kn oe sublinear provided log oe 
hand block addressing find exact candidate positions verifying technique 
line version algorithm turn finds candidate areas verifies 
excluding considered verifications line algorithm runs linear time show restrictions sublinear part text sequentially traversed 
new condition goes ff log oe case block addressing 
probability text position matching piece explained oe bm probability block size sequentially traversed gamma gamma oe blocks traversing costs expected amount traverse blocks times expression gamma gamma oe bm oe jj expression sublinear approximately ff log oe bm 
low practice 
experiments show experimentally index building times sizes different values letter block addressing 
show querying effectiveness indices comparing percentage query time index line algorithm 
experimental values agree analysis terms error ratios block sizes indices useful 
tests run sun ultrasparc mhz mb ram running solaris 
tests collection mb english literary text filtered lower case separators converted single space 
test cases letter addressing block addressing blocks size kb kb 
blocks smaller kb interest index size letter addressing larger kb interest query times close line algorithm 
shows index build time space overhead different values block sizes 
size vocabulary file kb kb mb shows sharp increase 
show query times 
tested queries length word short phrase 
queries randomly chosen text non stopwords stopwords words carry meaning normally allowed queries 
setup mimics common text retrieval scenarios 
show tests 
data point obtained averaging unix user time random trials 
shows percentage text traversed index online algorithm traverse text 
seen percentage text traversed low index stores exact occurrences grams 
block addressing indices hand traverse text useful small block sizes 
consider actual execution times percentage traversed text situation worsens 
shows query times percentage line algorithm 
important overhead manipulating index 
plays indexed algorithms better line algorithm filtration efficiency left index construction times minutes user time 
right space overhead index space divided text space 
dotted line shows overhead 
index indices larger better overhead verifications 
letter addressing index happens ff 
point search times seconds 
block addressing indices hand cease useful soon ff 
show effect splitting optimization technique comparing letter addressing indices retrieval times optimization 
shows improvement due optimization significant 
length grams allow select longer pieces optimization technique selects frequent grams 
described practical indexing scheme especially suited text retrieval capable retrieving sequence matching pattern maximum number errors 
storing text grams index occurrences 
querying performed searching index pieces pattern verifying candidate positions 
variant pointing blocks exact positions described 
analyze experimentally test approach 
experiments show scheme practical index points exact occurrences 
value may giving tradeoff index space query performance 
depending reasonable error level ff english text querying index takes time line algorithm 
space overhead depends times text size 
pattern pieces longer truncated 
loses part information pattern 
case justify approach splitting pattern pieces forcing piece match verifying 
extending scheme matching piece reduces number verifications leads complex algorithm costs may gains verifications 
interesting idea pursued percentage text traversed index 
rows correspond 
columns correspond 
dashed line corresponds letter addressing full lines block addressing 
lower upper correspond kb 
query time index divided query time line algorithm percentage rows correspond 
columns correspond 
dashed line corresponds letter addressing full lines block addressing 
lower upper correspond kb 
comparison retrieval times splitting optimization technique dashed line versus solid line letter addressing index 
rows correspond 
columns correspond 
try splits intersect results resembling 
currently studying issues 
leave experimental comparison indexing schemes implemented improved implementation index reduce construction time space usage querying overhead index 
anonymous referees suggestions improve 
ara navarro ziviani 
large text searching allowing errors 
proc 
th south workshop string processing wsp pages 
carleton university press 
baeza yates 
space time trade offs text retrieval 
proc 
st south american workshop string processing wsp pages 
baeza yates navarro 
fast heuristic approximate string matching 
proc 
rd south american workshop string processing wsp pages 
carleton university press 
baeza yates navarro 
faster algorithm approximate string matching 
proc 
th combinatorial pattern matching cpm lncs pages 
extended version appear algorithmica 
baeza yates navarro 
block addressing indices approximate text retrieval 
proc 
th acm conference information knowledge management cikm pages 
baeza yates navarro 
multiple approximate string matching 
proc 
th workshop algorithms data structures wads lncs pages 
baeza yates navarro 
practical index text retrieval allowing errors 
monge editor proc 
xxiii latin american conference informatics pages 
baeza yates navarro sutinen tarhio 
indices approximate information retrieval 
technical report tr dcc dept computer science univ chile 
baeza yates 
fast practical approximate pattern matching 
proc 
rd combinatorial pattern matching cpm pages 
lncs 
chang 
theoretical empirical comparisons approximate string matching algorithms 
proc 
rd combinatorial pattern matching cpm pages 
lncs 

fast approximate matching suffix trees 
proc 
th combinatorial pattern matching cpm pages 
gonnet 
tutorial computational biochemistry darwin 
technical report informatik zurich switzerland 
greene parnas yao 
multi index hashing information retrieval 
proc 
foundations computer science focs pages 
ieee press 
heaps 
information retrieval computational theoretical aspects 
academic press ny 
jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
mathematical foundations computer science mfcs volume pages 
sutinen 
lempel ziv index grams 
proc 
th european symposium algorithms esa pages 
lncs 
ukkonen 
lempel ziv parsing sublinear size index structures string matching 
proc 
rd south american workshop string processing wsp pages 
carleton university press 
karp rabin 
efficient randomized pattern matching algorithms 
ibm res 
development march 
sutinen tarhio 
experiments block indexing 
proc 
rd south workshop string processing wsp pages 
carleton university press 
manber myers 
suffix arrays new method line string searches 
symposium discrete algorithms soda pages 
manber wu :10.1.1.17.6054
glimpse tool search entire file systems 
proc 
usenix technical conference pages 
usenix association berkeley ca usa winter 
myers 
sublinear algorithm approximate keyword searching 
algorithmica oct nov 
myers 
fast bit vector algorithm approximate pattern matching dynamic progamming 
proc 
th combinatorial pattern matching cpm new jersey usa july 
springer verlag 

accuracy approximate string matching algorithms 
computer instruction 
sellers 
theory computation evolutionary distances pattern recognition 
algorithms 
shi 
fast approximate string matching blocks sequences 
proc 
rd south american workshop string processing wsp pages 
sutinen tarhio 
gram locations approximate string matching 
proc 
rd european symposium algorithms esa 
lncs 
sutinen tarhio 
filtration samples approximate string matching 
proc 
th combinatorial pattern matching cpm pages 
ukkonen 
finding approximate patterns strings 
algorithms 
ukkonen 
approximate string matching suffix trees 
proc 
th combinatorial pattern matching cpm pages 
ukkonen 
constructing suffix trees line linear time 
algorithmica sep 
witten moffat bell 
managing gigabytes 
van nostrand reinhold new york 
wu manber 
fast text searching allowing errors 
comm 
acm 
wu manber myers 
sub quadratic algorithm approximate limited expression matching 
algorithmica 

