java quality assurance detecting code smells eva van emden cwi netherlands www cwi nl eva eva cwi nl leon moonen cwi netherlands www cwi nl leon leon cwi nl software inspection known technique improving software quality 
involves carefully examining code design documentation software checking aspects known potentially problematic past experience 
code smells metaphor describe patterns generally associated bad design bad programming practices 
originally code smells find places software benefit refactoring 
investigate quality code automatically assessed checking presence code smells approach contribute automatic code inspection 
approach automatic detection visualization code smells discuss approach design software inspection tool 
illustrate feasibility approach development prototype code smell browser detects visualizes code smells java source code 
show tool applied case study 
keywords software inspection quality assurance java refactoring code smells 

software inspection known technique improving software quality 
introduced fagan reported numerous example 
software inspection involves carefully examining code design documentation software checking aspects known potentially problematic past experience 
generally accepted cost repairing bug lower bug early development cycle 
advantages software inspection appears proceedings th working conference reverse engineering 
ieee computer society press october 
visiting research assistant rigi group computer science department university victoria victoria canada 
corresponding author 
software analysed tested 
potential problems identified cycle solved early cheap fix 
traditionally software inspection formal process involves labor intensive manual analysis techniques formal code reviews structured walk throughs 
inspection systematic disciplined process guided defined rules 
strict requirements resulting code inspections performed performed 
problems addressed tools automate software inspection process 
distinguish approaches 
tools automate inspection process making easier follow guidelines record results 

tools perform automatic code inspection relieving programmers manual inspection burden 
concentrate second type tools perform automatic inspection 
tools interesting automatic inspection reporting code quality conformance coding standards allows early repeated detection signs project deterioration 
early feedback enables early corrections lowering development costs increasing chances success 

code smells existing tools support automatic code inspection example known analyzer lint tend focus improving code quality technical perspective 
fewer bugs defects piece code higher quality code 
perspective code inspection boils low level bug chasing see reflected tools typically look problems pointer arithmetic memory de allocation null array bounds errors focus different aspect code quality inspired metaphor code smells introduced refactoring book review code problems generally associated bad program design bad programming practices 
beck fowler introduce metaphor code smells describe patterns code indicate refactoring applied 
refactoring process changing software system way alter external behavior code improves internal structure 
improves design software system written tidying code reducing complexity 
resulting software easier understand maintain 
code smells answer question refactor 
idea necessarily code smells permitted code smells hints tell refactoring may beneficial 
examples code smells duplicated code methods long classes contain functionality classes violate data hiding encapsulation rules classes delegate majority functionality classes 

coding standards important code quality aspect large scale software development conformance coding standards 
coding standards ensure understand code 
conformance achieved code written organized programming guidelines harder large team programmers develop integrate maintain particular piece software 
important environment developers geographically distributed example commonly open source development projects 
unfortunately conformance coding standards easy achieve practice 
developers involved project know appreciate guidelines build software 
experience shows just publishing set programming guidelines 
developers really understand ideas particular rule feel restricted just believe rule useful ignore rule development 
cases set guidelines may large easy overlook development 
project comes time constraints effects stronger 
consequently code quality improved ensuring code conforms coding standards 
process supported automatic conformance checking 
allowing definition additional project specific smells automatic smell detection turns conformance checking process 
please note regard type quality important better 
aspects considered trying improve software quality 
decided focus second type currently supported type 
investigate detection code smells contribute automatic software inspection 
section discusses general approach building software inspection tool detection code smells 
section introduces case study investigate feasibility approach 
section describes implementation prototype code smell browser developed case study 
conclude evaluation case study overview related discussion contributions section 
approach number important questions need answered automate detection code smells program code software inspection code smells going detect 
going detect smells 
going results 
remainder section discusses questions issues surround detail 
results generic approach building software inspection tools code smell detection 

smells going detect 
refactoring book beck fowler list code smells look refactoring potential 
smells range simple patterns discourages code duplication long methods complex patterns originate object oriented design issues parallel inheritance hierarchies extend change hierarchy need message chains known law demeter client navigate object structure example foo 
examples code smells large class especially classes fields feature envy methods access methods fields class class switch statements inheritance specialization data class classes contain functionality fields refused classes leave fields methods inherit unused data clumps clusters data seen class members method signatures grouped class 
observations list influence design 
list code smells complete domains projects different set code smells applied 
example earlier identified number smells occur unit test code described corresponding refactorings remove 
second code smells subjective opinions experiences 
creators list include patterns useful indicators potentially problematic aspects code 
smells may supported concrete evidence may inspired aesthetic considerations 
example developers strive minimize consider smell see absolutely harm want regard smells 
code smells precise thing won try give precise criteria refactoring overdue 
experience set metrics rivals informed human intuition 
related subjectivity code smells 
project needs decide actual parameters example variable naming convention maximum size classes methods allowed observations conclude main design requirements code smell inspection tool smells configurable user 
tool builders predefine number smells configurability needed allow definition additional smells removal smells considered precise definition smell parameters tuned 

going detect smells 
examination list code smells shows characterized number smell aspects visible source code entities packages classes methods code smell detected aspects code 
distinguish types smell aspects primitive smell aspects observed directly code derived smell aspects inferred aspects 
example primitive aspect method contains switch statement example derived aspect class methods offered superclasses 
distinction design smell detection process separated steps 
find entities interest code 

inspect primitive smell aspects 

store information entities primitive smell aspects repository 

infer derived smell aspects repository 
process constructs called source models program text 
source models abstraction system source code needed smell detection 
structure source models described metamodel 
meta model designed analysis java programs mind 
contains information regarding program entities packages classes interfaces exceptions methods constructors static blocks fields 
furthermore describes relations entities composition inheritance interface implementation thrown exceptions inner classes method calls field accesses field assignments 
meta model similar java analysis tools shimba 
furthermore considerable overlap famix meta model designed generic oo reverse engineering refactoring mind 
current focus java programming language feel overlap indicates possible generalize approach object oriented languages 
find inspect entities interest code 
code smells described terms program patterns terms behavior patterns dynamic runtime information needed smell detection 
source models extracted static analysis program parser reads source code produces parse tree containing structural information contained code 
second analyzer reads parse trees traverses program structure 
traversal analyser visits program entities stores structure relations repository 
primitive smell aspects observed stored repository 
note possible extend approach include code smells need runtime information detection 
need add separate extractor augment source models necessary dynamic information 
general dynamic extractor collect information source code instrumentation 
case java analysis attractive alternative monitoring runtime environment debugging interface 

going results 
question ask smells user detected 
ways done 
intended tool substantial influence type presentation 
distinguish classes users detection results programmers detected smells development maintenance system improve code 
code inspectors reviewers detected smells assess quality code 
tools detected smells perform analysis transformations code example software refactoring tools 
generally tools primitive properties extract artifacts system model source visualize smells query artifacts parse derived properties infer program structure extract tree parse views graph 
architecture code smell browser need specific presentations just repository content processing 
note consider software integrators separate class assume switch inspector developer roles 
smell presentation programmers integrated normal development process 
done intrusion treating smells similarly compilation errors warnings 
depending ide smells shown separate message panes integrated class browser example done compiler errors ibm visualage java new eclipse platform 
possibility building dedicated smell browser explore repository similar windows explorer interface 
main focus software inspection investigate approach 
software inspectors special presentation requirements assessing quality potentially large software systems 
need able get quick overview complete system showing system contains bad smells parts affected concentration smells highest 
support requirements generating graphical representations software system particular visualizing source model structured graphs 
nodes graphs program entities source models packages classes methods edges relations program entities composition inheritance method calls 
nodes edges distinguished types represent different colors selectively hide various views graph 
graph layout algorithms applied views improve comprehensibility 
number options visualization code smells graphs 
example vary node attributes color size nodes represent code entities possess code smells 
furthermore code smells visualized additional nodes connected entity 
possible code smells computation graph layout example ordering way nodes smells come upper left corner picture 

modular architecture seen important code smell inspection tool easily extendable new smells added lifetime 
particular possible users add code smells 
support design modular architecture encapsulates detection primitive smell aspects inference derived smell aspects separate units 
architecture addition new code smells simple extending set detectors inference rules 
presentation side tool robust addition new smells 
aspects addition new smells break existing visualizations preferably want new smells included main views extra 
overview architecture shown 
boxes depict inputs outputs ellipses depict processing 
double lined shapes indicate item occur number times example exist extractors different primitive smell aspects extractor program structure 

case study investigate feasibility described approach performed case study developed prototype software inspection tool code smell detection applied java software system 
system analysed called tool developing dimensional animations facial expressions 
originally developed research prototype cwi direction paul hagen 
research group formed process reviewing code intensively preparation releasing commercial product 
principal software engineers involved task consulted see provide tool support refactoring quality assurance 
discussions guided coding standards added detection specific code smells prototype 
remainder section discusses additional smells detail 

instanceof code smell java instanceof operator check object instance class implements certain interface 
considered code smell aspects concentration instanceof operators block code may indicate place inheritance hierarchy method overloading better solution 
typical patterns occurs characterized sequence conditional statements test object type 
type object cast type method called 
refactored introducing common interface defines method lets runtime environment call appropriate method dynamic method dispatch known late binding 
second pattern characterized method takes variable type object supertype java classes parameter body contains sequence conditional statements perform different actions depending object type 
case original method broken series overloaded methods types tested parameter 
removes instanceof statements making code modular easier understand 

code smell code smell added case study involves 
explicitly convert object class type 
people consider problematic possible write illegal casting instructions source code detected compilation result runtime errors 
typical pattern create smell observed objects stored container classes java api 
classes written generic containers objects type items automatically generic supertype object put container 
programmer retrieves items container explicitly type 
type known storage methods accept types objects possible perform illegal casting results runtime error 
pattern creating wrapper container specific type container going hold 
way casts hidden wrapper class static type checking sure correct type put container 
addition wrapper class get descriptive name clear objects contained 
especially useful container passed program 

prototype implementation illustrate approach described section implemented prototype code smell browser 
tool created architecture described 
consists main phases code smell extraction visualization 
extraction source code parsed source model generated describes program structure code smells 
source model read visualization generate different views source code smells 

extraction extraction program structure primitive smell aspects implemented asf sdf environment developing language centered tooling developed cwi centre mathematics computer science netherlands direction paul klint 
environment supports generation parsers syntax directed editors language processing tools interpreters source source transformations 
takes types input language syntax definitions written formalism sdf language processing definitions written term rewriting language asf 
parser generator produces generalized lr glr parsers 
generalized parsing allows definition complete class context free grammars restricting non ambiguous subclass ll lr lalr common parser generators 
allows natural definition intended syntax grammar developer longer needs encode restricted subclass 
full class context free grammars closed composition restricted subclasses generalized parsing allows better modularity syntax reuse 
information sdf refer 
programming asf done functional fashion means term rewriting rules describe term translated term 
rewrite rules defined pattern matching concrete syntax defined sdf grammar 
patterns contain variables bound matching reused build reduct 
concrete syntax advantage extractor writer learn new language processing terms 
prototype instantiated asf sdf meta environment sdf definition java 
complete smell detection graph small test system classes loc grammar set asf modules specify processing needed extraction program structure primitive smell aspects 
extraction performed steps java input parsed parser generated sdf grammar 
parse trees processed term rewriting traversals asf derive desired source model 
model describes structure primitive smell aspects detected code 
source models represented plain text tuple notation known rsf rigi standard format 
chosen analyse java source code java byte code done tools operate java software 
choice number advantages source code analysis allows treat parts software systems compile incompleteness 
source code parsing island grammars possible analyse source code contains syntax errors 
extraction program structure primitive smell aspects source code expressed pattern matching concrete syntax java programming language 
easy users adapt extend extractor order detect new code smells learn new language 
coding standards checked byte code byte code contains information original source code regarding layout variable names 
case byte code system available analysed tool feeding decompiler 
wonder code quality system needs assessed place 
extraction program structure primitive smell aspects facts combined abstracted infer number derived smell aspects regarding code smells 
derived smell aspects stored repository 
tools inferring derived aspects grok calculator relational algebra 
relational algebra provides operators relational composition computing transitive closure relation computing difference relations 
example compute refused smell child classes methods offered parents 

visualization visualization implemented rigi software visualization tool developed university victoria canada direction uller 
rigi infrastructure general graph model 
graph model adapted specific domain defining entity types relations interest domain model 
usually graphs created parser extracts facts 
collapsed smell detection graph classes loc software system stores graph model rigi standard format rsf 
graphs visualized programmable graph editor 
generally rigi graphs consist artifacts software engineers understand software system 
examples software components subsystems procedures variables dependencies composition calls control data flow 
prototype new domain added describes structure java software systems code smell aspects 
unfortunately possible rigi vary color size node indicate possesses smell nodes type color nodes size 
choose smells additional nodes connected code entities possess 
smell node type distinct color graph 
advantage visualization easy see parts system smells benefit refactoring 
alternative approach store code smell information attributes node 
method attributes visual representation graph editor 
generally querying graph values inspected separate window 
results smell detection extended rigi user interface separate toolbar user browse detected smells invoke dedicated functionality 
includes various visualizations provide customized views extracted data special filtering functions show hide certain nodes arcs labels 
provides special pruning function allows user select particular subgraph hide rest 
view provided shows packages classes interfaces methods constructors attached smell nodes 
gives basic overview system distribution code smells 
example view shown 
disadvantage previous view scale large systems 
provide improved view class members methods constructors collapsed enclosing classes 
smell nodes shown attached containing class method contains smell inherited class contains method 
spring layout algorithm clear code smells clustered system 
example view shown 
class nodes view called composite nodes view smell distribution class user double click class new view opened shows class members smells 
please note shows greyscale view developed color displays 
color available www cwi nl projects wcre gif 
color version available www cwi nl projects wcre gif 
clarity decided hide node labels views 
time user interface command 
smell nodes labeled types casting known 
information number filtering functions hide certain show casts certain type 
functions accessible user interface user quickly easily see kind concentrated 
third view orders program entities code smells program structure 
uses number smells detected entity determine place graph layout 
nodes graphs ordered grid packages arranged top row distributed axis average number smells contain 
classes arranged single row distributed way 
methods system arranged bottom row number smells contain 
prevent cluttering graph view hides containment inheritance arcs 
furthermore smells collapsed containing nodes 
selecting node view user filter graph prune command 
pruning leaves parents children selected node 
pruning selecting method node sees class package defined pruning selecting class node shows methods class package defined pruning selecting package node shows classes methods package 

concluding remarks 
evaluation system consists loc comments empty lines classes 
extraction step takes sec 
computer amd athlon processor ghz mb main memory running linux 
extracted source model contains facts 
number classes methods involved useful view examining collapses members classes leaving smell nodes attached class 
view shown 
code smells indicated shown dark nodes 
node filtering examined distribution separate smell disturbing layout graph 
immediately revealed instanceof nodes clustered class 
opening class node revealed class fairly evenly distributed methods 
suggested linked switch statement code benefit overloaded methods 
inspection source code showed refactoring performed 
clear switch statements package 
hint statements may switching type eliminated inheritance hierarchy 
furthermore majority code smells originated 
predefined filtering functions new views created show particular type time 
views showed clusters identical particular areas system suggests small amount refactoring remove large number smells 
feedback maintainer generally positive 
felt views useful conformance checking refactoring support 
additionally provided useful information re documenting system developers management 
interested able repeat detection major revisions conformance coding standards changes software quality monitored 
concerns possible difficulties installing tool learning interface 
address issues added toolbar described earlier support web page instructions downloading installing running tool links available documentation 
installation easier working single packaged distribution installs necessary components 

related automatic code inspection number tools perform sort automatic code inspection 
known include analyzer lint java variant check type violations portability problems anomalies flawed pointer arithmetic memory de allocation null array bounds errors known defect analysis service provided reasoning identifies location potential crash causing errors 
providing detailed description defect report defect metrics measuring software defect density average number defects lines source code relation standard industry norms 
generally tools focus improving code quality technical perspective 
fewer bugs defects piece code higher quality code 
differs approach focuses code quality seen program design programming practice perspective 
closely related approach java analysis tool developed software engineering research centre netherlands 
performs design review architectural conformance checking 
reads java byte code facts derived metrics collected 
information apply critics system check particular design rules violated 
large number critics predefined users add 
reporting done means class browser shows rule violations class method browser starts critics shows entities violate critic 
support visualization rule violations suitable getting overview large software systems 
software metrics approach assessing quality software systems software metrics 
typically metrics computed facts extracted system source code similar analysis 
chidamber kemerer describe suite software metrics object oriented systems 
syst report suite java quality analysis tool shimba 
approach shimba represents programs graphs nodes program entities 
computed metrics stored attributes node inspected separate window querying 
metrics determine color layout nodes graph 
codecrawler program understanding tool combines software metrics graphs 
nodes represent program entities codecrawler distinguishing feature reports metrics entity varying size color position nodes graph 
number commercial tools software metrics compute complexity quality software systems results colored structure charts scatterplots metric charts diagrams 
tools include mccabe qa mccabe reengineer tools mccabe associates hindsight tool 
extension design pattern idea design patterns describe solutions frequently occurring problems patterns describe frequently observed bad solutions problem 
explain solution looks attractive turns bad positive patterns applicable 
brown describe number software development software architecture software project management 
software development similar code smells describe commonly seen patterns code benefit refactoring 
generally somewhat higher level referring source code entities class level higher 
examples development include blob large classes processing golden hammer familiar solution possible problem classes limited responsibility lifetime cut paste programming duplicate near duplicate code 
refactoring tools approach related growing body tools support automatic refactoring software systems 
original refactoring tool smalltalk refactoring browser developed john brant don roberts 
commercial open source tools started offer refactoring support 
include development environments eclipse platform borland idea refactoring tools instantiations act add ons popular programming environments 
tools common focus actual code transformation analyse certain refactoring applied 
smell detection described add analysis programming environment allowing intelligent refactoring assistant signals refactoring applied 

beck fowler describe number smells characterize maintenance smells 
mean smells obvious code manifest maintenance code 
smells include divergent change different parts class changed different situations 
shotgun surgery smell occurs making changes requires changing different classes 
parallel inheritance hierarchies case making new subclass place necessary add new subclass place 
automatic detection smells done analysing program code described earlier analyse changes program find program suffers smells 
interesting topic research investigate data configuration management system esp version managers cvs check smells 
approach feasible analysis type data done example context software evolution research 

contributions discussed design considerations software inspection tool code smell detection 
shown code smells broken aspects automatically detected 
furthermore described code smell concept may expanded include coding standard conformance 
investigated feasibility described approach case study prototype tool developed applied software system 
development prototype implemented extendable java code smell detector reused tools 
extended rigi additional user interface allows code smell browsing visualization developed strategies visually representing code smells program context 
smell detection fully automated tied development cycle providing continuous quality assessment conformance checking 
graphical overviews immediately show maintainers system contains bad smells parts affected concentration smells highest 
furthermore analysis require complete application subsystems inspected integration 
allows incremental checking large software systems especially interesting distributed development 
availability distribution downloaded www cwi nl projects acknowledgments serge providing source code feature requests case study 
biere 
applying static analysis large scale multi threaded java programs 
proc 
th australian software engineering conference pages 
ball kim porter 
version control system talk 
proc 
workshop process modelling empirical studies software engineering may 
bergstra heering klint 
algebraic specification formalism asf 
algebraic specification chapter pages 
acm press addison wesley 
van den brand asf sdf component language development environment 
proc 
compiler construction volume lncs pages 
brown mccormick iii 
refactoring software architectures projects crisis 
wiley sons 
chidamber kemerer 
metrics suite object oriented design 
ieee transactions software engineering june 
demeyer ducasse lanza 
hybrid reverse engineering approach combining metrics program visualization 
proc 
th working conference reverse engineering wcre pages 
van deursen moonen van den kok 
refactoring test code 
proc 
nd international conference extreme programming flexible processes software engineering xp pages may 
eick graves karr marron mockus 
code decay 
assessing evidence change management data 
ieee transactions software engineering 
fagan 
design code inspections reduce errors program development 
ibm systems journal 

design critiques architectural conformance checking java software 
white 
serc netherlands 
see www serc nl people htm 
fowler 
refactoring improving design existing code 
addison wesley 
graham 
software inspection 
addisonwesley 
holt 
structural manipulations software architecture tarski relational algebra 
proc 
th working conference reverse engineering wcre pages 
johnson 
lint program checker 
unix programmer manual volume chapter pages 
bell laboratories 
moonen 
generating robust parsers island grammars 
proc 
th working conference reverse engineering wcre pages october 
roberts brant johnson 
refactoring tool smalltalk 
theory practice object systems 
russell 
experience inspection scale developments 
ieee software 
zs 
hagen 
system animate cartoon faces 
short papers demos proc 
eurographics 
syst yu uller 
analyzing java software combining metrics program visualization 
proc 
th european conference software maintenance reengineering 
tarski 
calculus relations 
journal symbolic logic 
tichelaar 
modeling object oriented software reverse engineering refactoring 
phd thesis university berne december 
tilley wong 
storey uller 
programmable reverse engineering 
international journal software engineering knowledge engineering pages december 
tomita 
efficient parsing natural languages 
fast algorithm practical systems 
kluwer 
visser 
syntax definition language prototyping 
phd thesis university amsterdam 

