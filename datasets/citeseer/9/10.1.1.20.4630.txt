representing executing agent systems michael fisher department computing manchester metropolitan university manchester gd united kingdom fisher doc mmu ac uk 
describe approach representation implementation agent systems behaviour individual agent represented set logical rules particular form 
provides logical specification agent allows directly execute rules order implement agent behaviour 
agents communicate simple logically founded broadcast communication mechanism 
addition agents grouped 
restricts extent broadcast messages provides structuring mechanism agent space 
purpose threefold motivate particular computational model show logic approach possible potentially powerful assert narrowing gap agent theory agent programming language able bring prospect formal specification verification multi agent systems nearer 
multi agent systems developed applied variety contexts traditional ai operating systems concurrent programming languages robotics artificial life 
spite little agreement core attributes general computing agent little evidence engineering approach development multi agent systems 
example development methods verification techniques multi agent systems rare 
fact definitions agents difficult understand effectively analysed humans complex verification purposes 
outline approach representation development implementation multi agent systems developing 
notion concurrent object systems object executes temporal specification behaviour whilst communicating objects form broadcast message passing 
address issues relating approach particular motivate particular computational model showing combination executable specifications broadcast message passing object grouping able represent range behaviours individual agents multi agent systems show logic language description implementation agents desirable temporal logic potentially powerful particularly logic contains simple elements fundamental representation dynamic behaviour outline combining executable specifications powerful logical framework narrows gap theory implementation multi agent systems provides step goal formal specification verification development systems 
describe approach modelling individual agent behaviours agent communication grouping respectively 
give brief outline implementation mechanism logic descriptions 
applications approach indicated formal development multiagent systems described 
summarise general utility approach comment related 
representing agent behaviour section motivate approach representation behaviour individual agents 
encompass outline advantages general logic approach specific description benefits temporal logic notation representing dynamic activity 
outline context view individual agents 
agents objects agent typically described encapsulated entity traditional ai capabilities 
take view distinction object concurrent object systems agent defined vague flexible useless 
believe multi agent system simply system consisting concurrently executing objects 
researchers example attempted distinguish agents objects stating agents control execution meta level capabilities objects take view object objects degree meta level control special distinguishes agent object 
sake discussion refer objects exhibit form intelligence agents recall certain times system able distinguish intelligent dumb objects treated 
requirements agent description languages representing internal behaviour individual agent argued require notation satisfying criteria 
high level concise consisting small range powerful constructs 
possess semantics intuitive possible obvious syntax language 
able represent static dynamic behaviour agents 
impose operational constraints system designer possible example concurrent activities single agent able defined 
representing individual agent behaviour choose utilise formal logic 
advantages approach notation welldefined usually understood semantics 
formal logic language allows narrow gap agent descriptions agent theory semantics agent close logical description 
allows possibility employing specification verification techniques formal logic development multi agent systems 
representing dynamic behaviour temporal logic general logic approach satisfies criteria choose temporal logic basis formal description agent behaviour 
temporal logic form non classical logic model time provides basis system 
case simple discrete linear sequence states basic temporal model 
state temporal sequence thought model classical logic 
temporal logic powerful corresponding classical logic useful description dynamic behaviour reactive systems 
advantages description technique agents multi agent systems outline 
discrete linear model structure basis logic intuitive matching steps execution sequence identified starting state infinite execution 
logic contains core elements describing behaviour basic dynamic execution 
example contains main descriptive elements declarative description current state imperative description transitions occur current states description situations occur unspecified state 
logic able describe behaviour agent transition moment time time 
basic set concepts sufficient complex temporal properties translated normal form consisting concepts 
general temporal specification transformed set rules basic form 
particular importance representation dynamic behaviour execution temporal formulae simplicity logic 
spite simplicity contains core elements characteristic general computation state agent current moment transitional constraints agent moves forward moment time temporally indeterminate properties true point agent 
think core elements expressing current state agent longer term goals 
provide detailed description temporal logic exact rules approach detailed description see 
simplified version follows 
behaviour agent static dynamic represented set temporal rules 
rule form formula formula simple examples include representing rule true state false state representing rule true true time 
form rules formula logic rewritten set rules consisting initial constraints true start state rules forms 
simply literals 
note formula logic rewritten set rules form represent restriction logic temporal horn clauses full power temporal logic utilised 
see additional operational constraints simple form rules means behaviour system usually obvious description 
temporal rules seen capture mixture declarative imperative aspects system 
comprise declarative description state agent classical logic imperative description allowable transitions states declarative description things happen time 
agent communication turn representation communication agents 
argued multi agent systems essentially form concurrent object system 
key attributes system objects agents message passing 
concurrent object systems employ point point message passing basic communication mechanism argue approach restricts power multi agent systems 
particular advocate combination agent grouping structures broadcast message passing order achieve communication flexible adaptable prohibitively inefficient 
point point message passing point point message passing widely concurrent object systems example actor systems 
messages sent specific address receiver known sender 
advantages approach agent knows message sent security controls easily introduced agent ensure important information sent wrong agents style message passing common efficiently implemented concurrent object systems 
disadvantages simple form message passing agent know message sent framework hard model open systems example disappearance message recipient usually problematic 
final disadvantage specific logic approaches form communication fit naturally view computation limited form theorem proving 
examined approaches communication attempt find mechanism natural flexible point topoint message passing 
broadcast message passing broadcast message passing natural mechanism consider matches logical view computation utilise widely distributed computer systems 
broadcast message passing involves sending message specific address agents 
advantages compositional particular agent system replaced agent having observationally equivalent behaviour behaviour system unchanged name address agent changed ideal systems tasks announced agents compete cooperate contract example contract nets widely adaptable fault tolerant systems example distributed operating systems agents die replaced shadows allowing system continue certain processors fail 
spite advantages years broadcast message passing avoided due perceived disadvantages broadcast secure agent examine contents message distributed system broadcast perceived prohibitively inefficient perceived difficult program 
agent groups multicast message passing obvious way avoid perceived problems broadcast developed distributed operating systems dai structuring agent space groups 
agent member group agent broadcasts message sent members depending system agent groups 
way full broadcast message passing replaced multicast message passing 
distributed operating systems approach called process groups ensure replication fault tolerance dai example organisational model method structuring organising agents 
utilising form group structuring broadcast messagepassing able retain advantages full broadcast avoiding major drawbacks 
bonus years low level mechanisms efficient broadcast developed computer systems 
broadcast basic communication mechanisms local area networks advent novel parallel architectures data parallelism meant powerful programming techniques broadcast communication developed 
implementing agent behaviour having considered representation behaviour individual agents communication mechanism agents describe behaviours implemented system 
whilst logic language gives clear link agent theory agent description language may certain language implemented semantics logic 
way ensure directly execute logical statements 
move executable logic specifications narrows gap actual implementation language theory underlying system 
unfortunately particular problem executable logics general expressiveness logic increases execution mechanism correspondingly expensive implement 
reasons popular logic languages prolog restrict logic operational model full power logic available execution remains relatively efficient 
executing logical descriptions basis execution logical statements construct model set statements 
general involves theorem proving 
example prolog model constructed represents particular refutation constructed 
unfortunately representing agent behaviours concisely forms logic expressive horn clauses 
prolog decidability property executable logic 
expressive logics completeness lost 
advocate logic languages representation agent behaviours direct execution languages provisos 
execution formula just attempt build model formula 
want avoid full theorem proving expensive 
theorem proving mechanisms model construction process operational constraints imposed order execution efficient 
formal properties logic lost operational restrictions power logic 
example completeness decidability lost 
similarly execution formula analogous model construction formula unable construct finite model 
expressive logics execution process attempting construct model 
important formal logical properties language pragmatic attributes 
example execution mechanism sound relatively efficient 
importantly core logical features language concise applicable 
wish directly execute set logical rules representing agent behaviour decide particular execution mechanism employ 
section outline approach adopt contrasting predominant approach execution logical formulae logic programming 
execution agent whilst advocate logic languages agent descriptions direct execution languages order provide agent behaviour argue standard logic programming model inappropriate executing general agent behaviours reasons 
cases require programs non terminating 
cases expect execution mechanism return finite object model 
leads away standard logic programming necessary concurrent logic languages 
importantly agents want specify attempt achieve simultaneous goals 
difficult impossible represent directly single goal directed framework logic programming 
horn clauses similar classes formulae required logic programming may restrictive 
representing executing agent descriptions interaction environment required certainly disallow backtracking observable actions 
backtracking agents 
execution mechanism employ natural style logic advocate temporal logic avoids problems 
essential features execution mechanism follows 
forward chaining initial constraints set temporal rules representing agent behaviour 
execution constrained execution eventualities 
formula executed eventuality true point 
satisfied immediately added list outstanding eventualities 
execution mechanism non deterministic choice example execute disjunction outstanding eventualities constrain choice execution mechanism attempts satisfy eventualities soon possible oldest outstanding eventuality attempted 
terms agents eventualities seen goals agent attempts satisfy soon 
agent independent asynchronously executing object 
order implement communication natural logical way predicates agent rules split categories environment internal component 
environment predicates control agent environment categories predicate true false agent 
agent execution mechanism internal predicate true just records fact internal memory component predicate true broadcasts predicate agents 
environment predicate executed agent wait predicate value provided environment broadcasting value 
allows agents synchronise agents selected messages 
agents allowed backtrack 
agent execution mechanism range non deterministic choices finds contradiction backtrack previous choice point continue executing basis different choice 
agents part open object system allow agent backtrack past broadcast message 
agent broadcast message effectively committed execution choice 
allows agents carry search backtracking internally avoids problem attempting rollback actions distributed system 
having discussed motivated execution communication mechanisms individual agents system give flavour aspects currently development addition grouping framework 
implementing agent groups recall group essentially set agents 
restrict extent broadcast communication structure agent space 
basic properties require groups agents able send message group add agent group ascertain certain agent member group remove specified agent group construct new subgroup 
properties useful ability list members group essential 
alternative approaches implementation groups agents con current metatem currently investigated 
described great detail provide outline order show little range representations available 
simple mechanisms allow represent group agents 
set named agents manager solver solver worker 
set construction formula agent satisfying formula considered member group agent solver involves generating group bottom top declarative description 
note able carry forms expressive second style agent manager agent solver agent solver 
formula true members group explicitly represented 
similarly add agent group adding disjunct agent added defining formula remove agent group adding negated conjunct agent removed formula 
checking particular agent group slightly difficult second case involves logical manipulation just string matching 
ask group object give list members difficult second approach explicit representation agents group simply statement properties group members 
discussion particular technique appropriate continues 
approaches group computation described evaluated practical efficiency logical consistency 
applications multi agent systems section briefly indicate approach applied variety different agent scenarios 
cover representation implementation single agents societies dynamically interacting agents 
applications language give indication applied 
purpose section indicate reader approach logical merit applied range simple multiagent scenarios 
main elements system executable temporal specifications communication grouping mechanism applied separately 
communication grouping mechanism useful structuring agent space temporal logic useful representing executing dynamic behaviour individual objects 
dynamic objects utilising power temporal logic able specify internal behaviour dynamic objects 
particular represent agents internal state changes time whilst interacting environment 
giving range examples refer reader survey concurrent metatem applications 
reaction versus deliberation continuing debate relative merits reactive architectures versus deliberative architectures typically planning 
arguing approach take view types behaviour possible agents 
particular argue allowing concurrent activities individual agent able represent behaviour reactive deliberative 
agents react immediately certain stimuli carrying longer term planning process background 
example agent contain range transition rules representing reactive situations stimuli response stimuli response note response occurs step agent variety immediate responses represented 
useful reactive architectures dai rules part traditional applications process control 
able represent typical deliberative activities planning example problem plan plan broadcast plan states time agent generated plan solve particular problem agent broadcast plan 
ways agent construct plan follows 

plan add rules constraining production plan example pre plan pre plan states plan achieved preconditions pre pre achieved 
subgoals turn solved adding rules problem pre problem pre attempt utilise deductive backtracking aspects system order achieve construction plan 

alternative approach plan backtracking 
approach represent rest search space 
approach expensive safer see 
planner built top concurrent metatem directly exploit execution mechanism system 
general problem approach may difficult mix reactive deliberative aspects agent 
planning process depends backtracking sort reactive rules broadcast message point effectively committing execution certain path stopping system backtracking past point 
simplest solution problem require agent planning reactive capabilities spawn separate planning agent carries planning activity parallel original agent 
original agent acts reactively environment having spawned planning agent planning agent succeeded producing plan original agent liberty act 
type behaviour leads examples multi agent systems cooperative problem solving occur 
distributed problem solving shown able define range simple distributed problem solving systems 
utilising power temporal specifications individual objects simple problem solving agents implemented concurrent metatem 
agents organised form variety problem solving architectures 
particular represent hierarchical cooperative competitive problem solving 
combination broadcast message passing agent grouping allows develop rich structures 
simulating societies combining definition individual dynamic agents broadcast message passing grouping structures enables develop complex agent societies 
details see 
particular able represent range group behaviours cooperation competition individual agents groups agents 
grouping structures dynamic new agents added groups agents removed 
physical attributes allowing development complex structuring object space grouping mechanism provides potential innovative applications represent physical properties objects 
example assume objects group see movement broadcast object detected object 
similarly object moves sight moves group objects remain group lose sight 
fault tolerance described notion groups broadcast message passing allows represent powerful form fault tolerance 
able build multi agent systems addition purely functional behaviour 
note possibility having agents recognising broadcasting messages develop powerful forms competition adaptability seen applications genetic algorithms artificial life 
development multi agent systems formal methods productively development variety software hardware systems 
particularly complex safety critical systems formal approach seen vital 
believe multi agent systems complex applied critical areas increasingly requirement form formal validation verification 
long term goal provision formal framework specification animation development distributed multi agent systems 
identified important features multi agent systems modelling systems extending executable temporal logics variety features able model prototype range practical systems 
basing simple temporal logic variety proof methods outlined approach specification verification multi agent systems 
section briefly identify key areas need developed 
actively investigating remain long term goals 
temporal specifications temporal logics widely specification verification reactive systems 
area feed development framework multi agent systems just particular class reactive system 
particular compositional temporal specification verification bearing ability effectively verify large multi agent systems 
object computational model broadcast message passing avoid problems associated large scale verification multi agent systems 
agent transformation currently able specify verify properties individual agents simple multi agent systems 
verifying properties agents systems stage development process intend provide suitable transformation rules individual agents groups agents 
rules preserve certain temporal properties 
particular able transform agent specification specification logically equivalent implies original specification 
structural transformations utilised enabling refinement groups agents 
allow merging splitting agent groups development process 
important note formula logic transformed set temporal rules required form 
system developer control process logically equivalent sets rules execute comparable speeds 
similarly logical specification identical behaviour executed specification distributed multiple agents 
expressive descriptions temporal logic described provides simple powerful basis description dynamic agents 
potential extension logical base features including reflection meta level capabilities common modalities intention knowledge belief 
intend investigate extended logics particularly simple extensions knowledge belief 
powerful logics applicable wider range complex systems logical properties unknown manipulation agent descriptions expensive frameworks 
questions additional modalities really necessary core set 
certain cases wish specify agents complex descriptions decide concepts intention belief agents 
purely temporal specification may carried elements intention belief introduced stage single agent refinement 
expect agent able send messages concepts receiving agent understand exactly semantics require complex specification framework 
heterogeneous agents important aspect approach main elements executable temporal logic communication grouping mechanism separated 
particularly useful consider heterogeneous agents 
temporal logic description agent simply specification 
variety programming languages implement individual agents 
example agent implemented lisp 
long agent satisfies temporal specification obeys common communication rules heterogenous agents able form multi agent system 
important aspects relating need studied 
refinement temporal specification particular programming language requires appropriate refinement rules variety languages 
second verification properties agents implemented standard programming languages 
may able achieve process temporal model checking allows check simple finite state systems satisfy certain temporal properties 
investigating direct translation temporal specification lower level programming language 
improve efficiency part compilation process 
verification system logic relatively simple 
agents execute asynchronously agent effectively refer infinite domain logical base complex consider verification global properties multi agent systems 
logic undecidable order temporal logic incomplete 
due asynchrony execution require temporal logic dense model time discrete 
possibility powerful augmented logics means development verification system approach require research proof methods temporal logics particularly links inductive semi automatic theorem proving 
progress area 
note simple temporal logic able verify useful properties multi agent systems 
able tackle large systems systems agents particularly powerful 
addition proof rules developed incorporate full range operational constraints occurring concurrent metatem 
proofs system assume execution mechanism perfectly implements semantics temporal formulae 
attempt implement temporal logic completely propositional case 
order reason implemented systems just specifications incorporate operational constraints inherent concurrent metatem proof system 
example formula temporal logic means formula satisfied point executed concurrent metatem simply attempt satisfy soon 
problem studied related general problem logical formula purely declaratively add operational constraints order able execute efficiently 
constraints turn affect declarative semantics original formula 
summary motivated executable temporal logics broadcast message passing grouping mechanisms 
discussed development range multi agent systems justified approach logical practical terms 
notion autonomous objects con current metatem provides larger structuring mechanism groups extension 
restricts extent object communications provides extra mechanism development strategies organisations 
particular provides basis agent cooperation competition interaction 
shown logic approach theoretically desirable practical 
language developed captures range agent behaviours natural way 
believe regardless utility combined approach notions executable agent specifications group agent communication may separately systems 
shown narrowing gap theory implementation able retain elements agent description require opening possibility formal development multi agent systems 
related wide variety logical theories represent agents proposed provided basis agent programming language 
example languages april agentspeak appear directly logical theory agency 
closest described shoham proposed agent oriented programming aop 
framework consists logical system defining mental state agents interpreted language programming agents 
logical basis aop contains notions time modalities belief intention capability programming language provides syntactic support concepts clear formal link language logic 
mentioned expecting exactly implement semantics logical specifications believe concurrent metatem provides closer link logic programming language aop attempts implement practical logical basis 

abadi manna 
temporal logic programming 
journal symbolic computation 

agha 
actors model concurrent computation distributed systems 
mit press 

barringer kuiper pnueli 
really concurrent model temporal logic 
proceedings thirteenth acm symposium principles programming languages st beach florida 

birman joseph 
reliable communication presence failures 
acm transactions computer systems february 

birman 
process group approach reliable distributed computing 
report tr department computer science cornell university july 

borg 
message system supporting fault tolerance 
proceedingsof ninth acm symposium operating system principles new hampshire october 
acm 
acm operating systems review vol 


clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 

finger fisher owens 
metatem modelling reactive systems executable temporal logic 
sixth international conference industrial engineering applications artificial intelligence expert systems iea edinburgh june 
gordon breach publishers 

fisher 
survey concurrent metatem language applications 
international conference temporal logic ictl july 

fisher 
semantics concurrent metatem 
fisher owens editors executable modal temporal logics 
springer verlag 

fisher wooldridge 
logical approach representation societies agents 
gilbert doran editors artificial societies 
ucl press london 

fisher wooldridge 
specifying verifying distributed intelligent systems 
portuguese conference artificial intelligence 
springer verlag october 

fisher 
resolution method temporal logic 
proceedingsof twelfth international joint conference artificial intelligence ijcai sydney australia august 
morgan kaufman 

hillis 
connection machine computer architecture cellular automata 
physica 

hillis steele 
data parallel algorithms 
comm 
acm december 

manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag new york 

ichikawa tokoro 
modelling autonomous agents groups 
demazeau muller editors decentralized ai proceedings nd european workshop modelling autonomous agents multi agent worlds maamaw 
elsevier north holland 

mccabe clark 
april agent process interaction language 
volume 

metcalfe boggs 
ethernet distributed packet switching local computer networks 
comm 
acm july 

shoham 
agent oriented programming 
artificial intelligence 

smith 
framework distributed problem solving 
research press 


incompleteness order temporal logic 
theoretical computer science 

thomas 
placa agent programming language 
volume 

rao ramamohanarao 
design concurrent agent oriented language 
volume 

wooldridge jennings 
agent theories architectures languages survey 
volume 
article processed macro package llncs style 
