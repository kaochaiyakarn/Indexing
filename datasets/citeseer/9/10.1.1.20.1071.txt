xpath query evaluation improving time space efficiency georg gottlob inst 
informationssysteme technische universit wien vienna austria gottlob dbai tuwien ac contemporary xpath query engines evaluate queries time exponential sizes input queries fact gone unnoticed long time 
mainmemory evaluation algorithm xpath polynomial time combined complexity runs polynomial time respect size data queries published cf 

important improvements extensions including new xpath processing algorithms improved time space efficiency 
define large practically relevant fragment xpath optimized form query evaluation possible 
apart immediate relevance xpath query processing sheds new light features xpath costly relative practical usefulness 

xpath distinguished member family xml related technologies proposed xslt xpointer xquery cf 
technologies xpath core mechanism addressing nodes xml documents 
order xpath successfully practice xpath processors run efficiently size xml data growing size queries usually referred combined complexity 
past years related problems query containment xpath xpath query transformation optimization contributions formal semantics definition xpath 
expressiveness supported austrian science fund fwf project 
inf 
methods algorithms covered pending patent 
christoph koch inst 
informationssysteme technische universit wien vienna austria koch dbai tuwien ac reinhard pichler inst 
technische universit wien vienna austria logic tuwien ac complexity various fragments xslt xml query pattern matching investigated 
polynomialtime algorithm evaluating arbitrary xpath queries published cf 

contrast experiments existing xpath processors xalan xt microsoft internet explorer revealed consume time exponential size queries worst case cf 

main contributions approaches evaluating xpath expressions 
efficient referred top evaluation works time space denotes size data size query 
clearly better previous exponential time algorithms fully satisfactory 
new algorithm allows push time complexity space complexity 
size data usually dominates size queries reducing degree bounds clearly substantially improves practical scalability xpath evaluation algorithms 
define extended wadler fragment large fragment xpath provide evaluation algorithm works time space 
fragment great practical value vast majority useful queries fall 
pinpoints features xpath expensive practical value questionable 
algorithm combines previous results query processor properties 
supports xpath improved runtime bounds obtained 
subexpressions queries fall quadratic time extended wadler fragment linear time core xpath fragment introduced opt algorithm adheres best known bounds 

preliminaries 
data model xml document thought unranked ordered labeled tree 
dom denote set nodes tree 
labeling alphabet tags 
define function dom node test assigns label xml tag set nodes labeled dom 
document tree represented number binary axis relations dom dom 
consider axes self child parent descendant ancestor self ancestor self preceding preceding sibling carry intuitive semantics defined 
actual computation node sets resulting location step axis relation define corresponding axis function inverse axis function 
definition xpath axis relation define function dom dom overload relation name dom 
inverse axis function dom dom defined dom 
shown axis node set dom sets computed time linear size data viz 
order keep notation simple nodes assumed type distinguish element attribute processing instruction nodes 
lack space discuss namespace attribute axes local name namespace uri name core library functions 
doc document order doc nodes dom holds iff opening tag precedes opening tag xml document 
function doc returns node set document order 
relation doc defined relative axis 
self child descendant descendant sibling doc standard document order doc 
remaining axes reverse document order 
node set nodes write idx denote index doc smallest index 
node xml document may identified unique id function deref ids string dom interprets input string whitespace separated list keys returns set nodes id contained list 
function dom string returns string value node concatenation non tag strings non comment strings node start tags document 
functions string number convert number string string number respectively rules specified 

syntax semantics xpath concerning syntax xpath stick form see 
assume type conversions explicit conversion functions string number boolean 
variable replaced constant value input variable binding 
main structural feature xpath expressions types node set number string boolean 
expression evaluates relative context consisting context node context position context size 
represent types denoted nset num str bool relations shown table cn cp cs cn dom cp cs dom domain contexts 
expression type associated relation num bool true false nset dom str char semantics function definition introduce notation ary operation op vectorized version op defined op 

xm 
xm op 
xm 
op 
xm instance 
xk 
yk 
xk yk xi yj dom 
definition xpath expression list 
cl contexts semantics function list list determines list 
rl results xpath types number string boolean node set 
xl kl nl 
xl position 
xl kl nl constant number num num num num count nset num sum nset num number id nset nset deref ids id str nset deref ids constant string str bool bool bool bool bool bool bool bool true bool true false bool false relop nset nset bool relop relop nset num bool number relop relop nset str bool relop relop nset bool bool boolean relop bool str num bool bool boolean num str num bool number str str bool str num bool str num bool bool number number string num str string string nset str doc string bool str true true false boolean str bool true false boolean num bool nan true false boolean nset bool true false number str num number number bool num true number nset num number string 
effective semantics function 
kl 
xl kl nl 
nl op 
em 
cl op 
cl 
em 
cl effective semantics function xpath operations op defined lack space string number operations omitted cf 

location paths auxiliary semantics function list dom list dom defined follows em 
xk xi ascending order fix order 
xl yl 
rl ei 
tl tj yj idx yj sj sj sj xj xi yi ri true ri xi return 
rk times 
xk root 
root 
xk 
xk 
xk 
xk 
xk 
context value table principle main principle proposed obtain xpath evaluation algorithm polynomial time complexity notion context value table relation expression described section 
works follows expression occurs input query context value table specifies valid combinations contexts values evaluates context table expression obtained computing context value tables direct subexpressions subsequently combining context value table size context value tables polynomial bound combination steps carried polynomial time fact shown query evaluation total principle polynomial time bound 
resulting semantics function called indicating strict bottom evaluation 
second method evaluating xpath corresponds semantics function recalled definition follows top intuition 
immediately obvious closely bottom method avoiding computation parts intermediate context value tables subexpressions subsequent computations 

running example sample xml document 
algorithms illustrated applying various sample xpath queries xml document 
element document uniquely determined attribute id 
context example notation xi refer xml version id id id id id id id id id 
sample xml document 
element attribute id value dom 
sample xpath query 
descendant descendant position self xpath query evaluated context parse tree depicted 
correspondence nodes subexpressions table 
slightly simplified omitted separate child nodes corresponding subexpressions 
node subexpression descendant descendant position self descendant position self position self position self position self context value table node depicted 
cn cp cs denote context node context position context size 
column table result res 
note tables nodes simplified ways tables omitted columns context position context size 
justified cp cs irrelevant path expressions corresponding nodes 
shall come back point section 
table corresponding result absolute location path possible contexts 
filled row table 
table correspond ing resulting node set empty values cn 
omitted remaining rows table corresponding effect result evaluating anyway 
tables corresponding nodes 
improvement due top evaluation semantics function definition apparent considering dom possible triples cn cp cs suffices evaluate position self subexpressions values cn cp cs reached preceding location steps descendant descendant 
generally top evaluation guarantees context value table contains dom entries corresponding possible pairs previous current context node axis location step 
final result evaluating 
read context value table root node 
parse tree sequel convenient notation nodes parse tree expr denote xpath expression corresponding node conversely expression write node denote node parse tree corresponding table denote context value table node convenient write syntactic equality 

algorithm 
main ideas primary goal new algorithm keep context information considered stage small possible 
achieved combining ideas cn res cn cp cs res false false false true true true true true false true true false true true cn cp cs res false false false true false false false true false false true false false true cn cp cs res cn res cn cp cs res false false false false true true true true false true true false true true cn cp cs res cn cp cs res 

cn cp cs res 

context value tables restriction relevant context 
suppose want evaluate xpath expression context value table principle 
compute table dom entries node parse tree 
improved bound due topdown evaluation semantics function 
strict bottom evaluation function mentioned section bound deteriorates dom 
cases result subexpression depends solely parts context information 
restrict context value table node ni parse tree relevant context relev ni cn cp cs computed single bottom traversal parse tree follows base cases 
leaf node parse tree distinguish possible cases concerning form subexpression expr corresponding expr constant expression form true false set relev 
case expr position expr set relev cp relev cs respectively 
expr location step parameterless xpath core library function refers context node string number set relev cn 
compound expressions 
inner node parse tree corresponds location step location path set relev cn 
cases 
nk denote set child nodes set relev relev ni 
relev depends input xpath query xml document 
obviously computation sets relev done time 
example leaf nodes relev cp relev cs relev cn relev 
nodes correspond location paths 
relev relev cn holds 
remaining inner nodes get relev relev cn cp cs relev cn 
note tables corresponding reduced relevant context 
nodes relev relev simplification possible 
reduced tables nodes 
shown 
special treatment location paths outermost level 
location paths occur inside xpath expression 
note context value table algorithm computes table size dom location self cn res false false false true false false false false cs res position cp res res self cn res 
restriction relevant context 
steps input location path semantics function recalled definition 
due fact compute possible context node cn resulting node set 
stage computation really interested information node xj dom reached previous node xi dom 
suffices know set nodes xj dom reached previous nodes xi dom 
results location steps outermost level treated subset dom relation dom dom course final result read context value table corresponding location step context value table root node parse tree 
example xpath query section fact location path outermost level 
dimensional context value tables location paths descendant descendant 
node descendant 
replaced node sets equivalently dimensional tables respectively 
final result node set corresponding node parse tree 
treating position size loop 
central idea context value table principle simultaneous evaluation subexpression possible contexts single table 
close inspection various kinds expressions evaluated cf 
section reveals simultaneous evaluation possible contexts necessary order avoid exponential time complexity context node cn 
contrast context position context size loop possible values cp cs leads significant improvement space complexity deterioration time complexity 
evaluation predicate done follows subtree parse tree corresponding predicate traversed evaluate subexpressions depend current context position context size 
evaluation predicate complete context possibly involving position size done loop possible values cn cp cs example recall query section 
location steps descendant descendant left set candidates may possibly selected descendant descendant expr 
restricted way set nodes expr evaluates true 

traverse subtree parse tree rooted top evaluate parts independent value cp cs 
set context value tables 
loop dom pairs previous current context nodes descendant axis compute set nodes predicate expr true cn cp cs expr evaluates true context cn cp cs 
course comes checking rows context table 
contrast set entire tables 
treat contexts cn cp cs loop cn cp cs compute rows table table table cp cs 
look row value cn 
get value true predicate expr single context added 
procedures algorithm algorithm consists main procedures eval outermost eval eval single context 
briefly explained 
section pseudo code presentation procedures provided 
procedure eval outermost evaluates input expression case location path 
takes node parse tree node set dom input returns set nodes reached path context node procedure eval takes node parse tree set possible context nodes input 
return result value 
node subtree rooted computes table provided expr depend current context position size 
procedure eval single context evaluates arbitrary xpath expressions single context cn cp cs takes node parse tree context cn cp cs input returns result value expr context 
eval single context may called procedure eval called node section shall give pseudo code auxiliary procedure eval inner called inside eval case location path inside predicate 
note procedures parse tree input query context value tables table nodes parse tree treated global variables order increase readability 
input xpath expression cn cp cs input context 
denote root node parse tree algorithm location path return eval outermost cn eval cn return eval single context cn cp cs fi algorithm put detailed example section 
state main result section theorem xpath evaluated time space 
proof sketch 
far space complexity concerned note set context value tables number possible contexts bounded dom nodes parse tree relev cp 
course context value tables required 
remains show result value subexpression context node cn dom restricted 
case result types bool nset clearly case 
result types str num observe values selected xml document bounded 
xpath core library functions concat may possibly produce string longer arguments 
resulting string clearly bounded 
time complexity evaluate subexpression input query dom different contexts single context value table loop possible values cn cp cs corresponding previous current context node 
shown induction structure time required computing result value bounded 

extended wadler fragment wadler considers useful fragment xpath predicates location paths hand arithmetic expressions functions position hand 
fragment key big fragment xpath processed linear space quadratic time size xml data 
shall identify restrictions xpath guarantee linear space complexity 
turn restrictions suffice guarantee quadratic time complexity 
fact easy check fragment fulfills restrictions 
shall refer xpath fragment extended wadler fragment 
suppose want evaluate xpath expression result type scalar num bool str simply evaluate section 
just sure size scalar values independent xml data 
require restriction 
xpath functions select data xml document allowed local name namespace uri name string number string length normalize space 
hand result linearly big node set simply evaluated simultaneously linearly possible context nodes require quadratic space 
course treat context nodes loop identified reason previous xpath evaluation algorithms require exponential time 
need different strategy 
recall assume type conversions xpath expression explicit 
restriction expressions evaluate node set occur forms boolean nset nset relop scalar nset relop nset count nset sum nset relop nset denotes expression result node set scalar denotes expression 
shall optimization cases 
unfortunately method case ones 
require restriction 
expressions form nset relop nset calls functions count sum allowed 
expressions form nset relop scalar require scalar depend context 
form nset expression distinguish principal cases location paths expressions form id 
course calls id arbitrarily nested 
ultimately id id 

id id 

string expression location path 
case rewrite id id 

form id id 
id words consider id new axis 
case expressions form id id 

treated location paths 
case impose restriction 
expressions form id id 

string expression require depend context 
nset expressions form id id 

depend context simply evaluated algorithm section linear space 
nset expressions location paths possibly involving id axis observe restriction nset expressions allowed occur operands expressions yield boolean result value 
particular context value table expression form nset relop scalar boolean nset clearly requires linear space 
just avoid explicit computation context value table location path nset 
achieved follows 
bottom evaluation certain location paths 
location path inside expression form boolean relop semantics boolean evaluates true context node cn iff exists node node set resulting evaluation 
set nodes cn boolean relop evaluates true computed follows compute initial node set expression boolean set dom 
expression relop type bool treated boolean relop type set cn self relop evaluates true context node cn 
compute propagating backwards inverse location steps 
backward propagation node set inverse location steps proceed follows 
set xn xi xi denotes inverse axis definition 

desired node set 
note id axis xi op xi 
shown op xi computed time node set xi dom 


tn en 

restrict node set xi set nodes node test ti holds apply inverse axis function cates proceed analogously algorithm calling procedures eval eval single context 
section give pseudocode procedure eval bottomup path plus auxiliary procedure propagate path backwards expressions relop boolean respectively 
note procedure propagate path backwards assume occurrences removed 
easily achieved replacing boolean 

relop boolean 
boolean relop 
relop 

algorithm order incorporate ideas bottom evaluation certain location paths algorithm modified new algorithm context follows algorithm evaluate bottom location paths starting innermost ones case nesting call course subexpressions evaluated bottom evaluated illustrate algorithms min context example example denote xpath query applied xml document defined child descendant boolean position preceding sibling preceding 
order facilitate discussion assign names subexpressions child descendant boolean position preceding 
parse tree depicted 
correspondence subexpressions nodes shown table node subexpression child descendant boolean descendant boolean boolean position position preceding sibling preceding preceding 
parse tree inner location paths evaluated bottom 
start innermost initial node set corresponds context nodes self evaluates true 
node set apply preceding yields node set 
applying sibling preceding sibling get 
context value table node dimensional table dom true false exactly nodes value true second column 
bottom evaluation path take node tests predicate account 
start evaluation dom 
apply inverse step restrict set nodes node test yields true 
applying preceding get 
apply location step backwards 
restrict elements name get 
check nodes appropriate values cp cs predicate evaluates true 
call procedure eval evaluate nodes parse tree rooted depend current values cp cs 
case subtree rooted property 
table determined bottom evaluation 
call procedure eval effect 
note 
order evaluate predicate cp cs procedure eval single context consider combinations previous current context node axis 
nodes extended appropriate values cp cs context triple evaluates true context obtained previous context node 
predicate lead restriction desired context value table dom true false node value true second column exactly nodes call procedure eval outermost evaluate location path outermost level location step child yields set independent input context 
step descendant get dom 
nodes intersected set computed 
final result query 
claim restrictions lead desired improvement efficiency 
theorem extended wadler fragment set xpath expressions fulfilling restrictions section evaluated space time 
easy check slightly stronger property holds algorithm corollary arbitrary xpath query algorithm applied 
subexpression extended wadler fragment 
location path require occurs form boolean relop independent context evaluated space time 
called core xpath defined recall 
shown xpath expression fully contained fragment evaluated linear time 
analogous result corollary shown core xpath fragment 
definition core xpath language defined ebnf syntax follows pred pred pred pred pred pred pred pred start production stands axis node test 
theorem arbitrary xpath query algorithm applied 
suppose location path core xpath occurs subexpression outermost level form boolean relop independent context 
evaluated time 
proof sketch 
core xpath expressions form short hand boolean 
core xpath clearly contained linear space fragment 
reason quadratic time complexity theorem possibly evaluate predicates loop quadratically pairs previous current context node order take context size account 
core xpath position allowed loop required 
get linear time upper bound subexpressions 

pseudo code presentations procedure eval outermost input node parse tree set possible context nodes output set nodes reached expr 
expr return eval outermost node root elseif expr eval outermost node eval outermost node return elseif expr eval outermost node return eval outermost node elseif expr 
eq nodes reachable eval node ei od 
cp cs relev node ei holds 
eval single context node ei true fi od ei depends cp cs 
zm ordered axis document order reverse order eval single context node ei zj true zj fi od dom 
ei hold od od fi predicates ei independent context 
return fi case distinction possible forms expr procedure eval input node parse tree set context nodes cn relev may consist wild card 
output modifies global data table nodes cp cs relev 
nk child nodes parse tree eval ni elseif expr table eval inner expr op 
ek eval node ei od table op 
rk 

ci ri table node ei holds ci projection relevant context node ei fi procedure eval single context input node parse tree single context triple cn cp cs wild card may irrelevant part context 
output result value expr context cn cp cs cp cs relev table proj cn cp cs return result value table expr op 
ek eval single context node ei cn cp cs od return op 
rk fi procedure eval inner input node parse tree set possible context nodes output table dom dom expr eval inner node root return root elseif expr eval inner node eval inner node return elseif expr eval inner node eval inner node return elseif expr 
eq nodes reachable eval node ei od 
cp cs relev node ei holds 
eval single context node ei true fi od ei depends context position size 
zm ordered axis document order reverse order eval single context node ei zj true zj fi od dom 
ei hold od od fi predicates ei independent context 
return fi case distinction possible forms expr eval bottomup path input node parse tree expr boolean expr relop bottom location path independent context type nset str num 
output global data structure table filled 
step determine initial node set expr boolean dom elseif expr relop eval node assumption independent context type nset table node relop elseif type str val denote element table node relop val elseif type num val denote element table node number relop val fi fi step propagate backwards fill table node corresponds location step denote node parse tree corresponding location step propagate path backwards table true false dom propagate path backwards input node set dom nodes parse tree corresponding step bottom path output node set dom dom reachable return fi location step top absolute location path dom case treated elseif location step id op elseif location step 
eq node test true eval node ei od 
cp cs relev node ei holds 
eval single context node ei true fi od ei depends context position size 
zm ordered axis eval single context node ei zj true zj fi od dom 
ei hold od od fi predicates ei independent context 
fi case distinction possible location steps return reached top location path father node corresponds location step return propagate path backwards fi 
new xpath evaluation algorithm leads significantly improved time space complexity behavior previous approach 
identified large fragment xpath evaluated efficiently new algorithm called opt 
algorithms aim efficient main memory xpath processor implementations place 
improving complexity bounds size xml data clearly great relevance techniques xpath processors query xml documents stored database 
abiteboul buneman suciu 
data web relations semistructured data xml 
morgan kaufmann 
benedikt fan kuper 
structural properties xpath fragments 
proc 
icdt 
appear 
neven 
formal model expressive fragment xslt 
proc 
cl lncs pages 
springer 
bruno koudas srivastava 
twig joins optimal xml pattern matching 
sigmod madison wisconsin 
acm press 
bry meuss 
symmetry xpath 
technical report pms fb lmu nchen 
short version 
chan fan felber garofalakis rastogi 
tree pattern aggregation scalable xml data dissemination 
proc 
vldb 
clark 
xt 
java implementation xslt available www com xml xt html 
deutsch tannen 
containment integrity constraints xpath 
proc 
krdb 
fankhauser 
mapping xpath xml query algebra clark fernandez sim nov 
personal communication 
gottlob koch 
monadic queries tree structured data 
proc 
lics 
gottlob koch pichler 
efficient algorithms processing xpath queries 
proc 
vldb 
mchugh widom 
query optimization xml 
vldb pages 
miklau suciu 
containment equivalence xpath expressions 
proc 
pods pages 
milo suciu vianu 
typechecking xml transformers 
proc 
pods pages 
srivastava jagadish koudas patel wu 
structural joins primitive efficient xml query pattern matching 
proc 
icde san jose california 
wadler 
semantics xpath 
www research com user wadler 
wood 
equivalence xml patterns 
cl lncs pages 
world wide web consortium 
xpath recommendation www org tr xpath 
xalan java version 
xml apache org xalan 
