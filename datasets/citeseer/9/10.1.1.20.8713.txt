real time simulation deformable objects tools application joel brown stanford university comp 
sci 
dept stephen sorkin stanford university comp 
sci 
dept kevin montgomery stanford nasa center presents algorithms animating deformable objects real time 
focuses computing deformation object subject external forces detecting collisions deformable rigid objects 
targeted application domain surgical training 
application relies visual realism exact deformation requires computations performed real time 
contrast pre operative surgical planning computations may done offline provide accurate results 
achieve realtime performance proposed algorithms take advantage facts deformations local human body tissues damped motions surgical instruments relatively slow 
integrated virtual reality system simulating suturing small blood vessels 

real time simulation deformable objects needed areas graphic animation example generate cloth motions interactive video games provide realistic graphic rendering soft human body tissues surgical training systems 
deformable objects raise complex combination issues ranging estimating mechanical parameters solving large systems differential equations detecting collisions modeling responses collisions 
see problems techniques cloth modeling issues arising surgical simulation :10.1.1.107.3296
issues lack adequate solutions especially simulation real time 
focus main problems computing deformation object subject external forces detecting collisions deforming cynthia stanford nasa center michael stanford nasa center jean claude latombe stanford university comp 
sci 
dept rigid objects 
main goal develop efficient data structures algorithms process large models rate compatible real time graphic animation hz 
achieve goal exploit fact deformations local 
propagating forces carefully ordered fashion elastic mass spring mesh effectively limit computations portions objects undergo significant deformations 
accelerate collision detection pre compute hierarchical representations objects scene objects deformed update parts hierarchies need modified 
algorithms techniques build system training 
involves repair approximately mm vessels nerves microscope 
forceps surgeon maneuvers suture needle thread ends severed vessel ties knots ends 
parts vessel undergo deformations caused interactions suture forceps 
surgeon receives visual feedback vessel small produce perceptible reaction force 
acquire initial skills months practice animal lab 
goals system include decrease training time objective evaluation training alternative lab animals 
need suture simulation previously addressed 
sections simulation algorithms 
section describes system 
section discusses current 

computation object deformations research modeling deformable objects increased dramatically past years 
proposed models fall broad categories mass spring meshes finite elements 
mass spring mesh set point masses connected elastic links 
represents tissue geometry discretize equations motion 
models facial animation cloth motion surgical simulation cite works 
relatively fast easy implement allow realistic simulation wide range objects including tissues encountered surgery 
finite element models mesh decompose domain differential equations motion solved discretize equations 
mesh represents domain initially occupied object fem technique computes vector field representing displacement point domain 
example model facial tissue predict surgical outcomes 
may accurate mass spring models computationally intensive especially complex geometries large deformations 
systems mass spring fem techniques depending situation 
preprocessing steps reduce fem computation extends tensor mass model nonlinear 
examples mass spring models alternate models numerous cite 
mass spring meshes better suited surgical training application domain considered relies visual realism exact deformation requires simulations performed real time 
contrast may address better needs applications pre operative surgical planning predicting long term outcome surgery computations done line provide accurate patient specific results 

mass spring elastic mesh represent geometry deformable object mesh nodes ni connected links lij node maps specific point object displacements nodes describe deformation object 
nodes links object surface triangulated nodes links unrestricted convenient arrange tetrahedral lattice 
shows surface underlying links mesh representing severed blood vessel mesh contains nodes links 
complex mesh consists nodes links forming tetrahedral lattice 
mechanical properties surgical simulation applications object described data stored nodes links mass mi damping coefficient ci associated node ni stiffness kij associated link lij 
internal force nodes ni nj ij kij ij lij current length link minus resting length uij unit vector pointing ni nj 
stiffness kij may constant function ij 
case ij function coordinate vectors xi xj ni nj 
representation describe objects nonlinear non homogeneous anisotropic 
typically initialize parameter values available biomechanical data tune comments surgeons interacting models 
time motion deformation described system differential equations expressing motion node ni ij xi xj mig ext xi coordinate vector ni vi ai velocity acceleration vectors respectively mig gravitational force ext total external force applied ni 
denotes set indices nodes adjacent ni 
simulation algorithm developed dynamic quasi static simulator 
dynamic simulator uses classical numerical integration techniques fourth order runge kutta solve eq 

situations encountered surgical simulation simpler algorithm assumptions gives realistic results faster rate 
describe quasi static simulator 
assumptions 
refer nodes subject external forces control nodes 
assume position node time 
surgical simulation system control nodes correspond portions tissue pulled pushed surgical instruments held fixed bone structures clamping tools 
positions displaced control nodes obtained online reading positions orientations tracking devices 
assume velocity control nodes small mesh achieves static equilibrium instant 
reasonable assumption soft objects relatively high damping parameters case human body tissues 
assumptions hold dynamic simulator 
quasi static algorithm 
assumptions neglect dynamic inertial damping forces 
shape defined system equations expressing non control node ni static equilibrium ij xi xj mig 
set indices non control nodes constant time step implementation set 
time quasi static simulator solves eq 
positions non control nodes 
achieve real time animation returns positions time 
algorithm algorithm qss 
acquire positions control nodes 
repeat time elapsed ij mig xi xi step computes residual force applied node displaces node force 
style method moving node combination old new forces 
ideally value scaling factor chosen large possible iteration converges 
choice typically requires experimental trials 
timeout condition step guarantees qss operates real time size mesh increases 
step guaranteed reach exact equilibrium step ni non zero force acting amount time 
mesh size increases iteration step take longer fewer loops possible allowed time 
comparing positions computed qss actual equilibrium positions computed timeout measure accuracy simulation degrades mesh complexity increases 
step updates position non control node computed positions adjacent nodes computed previous iteration step 
scheme advantageous nodes processed wave propagation order starting displaced control nodes expanding 
mesh examples 
simulation cutting operation nodes farthest away displaced node 
ordering computed breadth scan mesh algorithm node ordering 
initialize empty list 
mark displaced control nodes level 
mark unmarked nodes adjacent node level level store non control nodes marked 
displaced nodes may arbitrarily distributed mesh 
outcome node ordering list nodes index appears index level ni equal nj 
qss processes nodes ordered node ordering enables major computational savings 
iteration step positions nodes level modified small pre specified amount algorithm stops propagating deformation 
way number levels treated iteration adjusts automatically 
computation cutout especially useful object deformations local 
qss executed change set displaced nodes requires re invoking node ordering compute new ordered set similarly mesh topology may change time 
example cutting operation performed 
links removed mesh crossed scalpel mesh qss changes frequently 
principle cutting operation violates assumptions dynamic simulator 
qss produce gives realistic results 
performance evaluation 
algorithms written run mhz processor sun ultra workstation gb ram 
address visual realism asked surgeons verify deformations similar shape velocity encountered clinical operations 
shows deformations 
experiments quantitatively evaluate performance qss 
particular created regular mesh nodes form rectangular lattice 
node linked neighbors directions 
diagonally linked neighbors xy xz yz planes 
links constant stiffness 
meshes ranged box nodes links box nodes links 
mesh fix nodes bottom face displace middle node top face upwards unit 
run qss running step fixed amount time fixed number iterations iteration involves updating xi non control nodes 
repeat times cycle displacing control node additional unit doing iterations cycle record position node 
errors computed distances positions actual equilibrium positions 
equilibrium positions running qss force non control node zero 
shows maximum average errors different mesh sizes consecutive cycles unit displacement followed iterations 
see errors increase slightly box grows nodes minimally size increases nodes 
larger boxes nodes may moving hardly contribute lowering average error 
maximum error follows pattern twice average error remains magnitude displacement control node mesh sizes 
shows maximum error unit displacement different numbers iterations 
compares qss computation cutout described previously 
plots different boxes shown see errors quite low cases largest box lowest number iterations 
cutout errors strictly drop number iterations increases important dif ference sharp decrease time required iteration 
table displays number iterations qss performs maintaining hz update rate cutout 
experiments demonstrate objects reasonably maintain small relative error fewer iterations qss step time interval 
furthermore cutout method complete iterations appropriate second scale meshes containing thousands nodes significant performance penalty 

collision detection research collision detection rigid objects long history robotics graphics solid modeling 
main families methods proposed feature hierarchical :10.1.1.52.9953
feature method exploits temporal spatial coherence geometric model maintain pair closest features 
hierarchical method pre computes hierarchy bounding volumes object 
collision test hierarchies quickly discard large subsets object surfaces far apart possibly collide 
hierarchies various primitive volumes proposed 
volumes allow closer fit approximation yield costly intersection checks 
spheres give results broad range objects 
approach distinct advantages hierarchical approach better suited objects highly concave 
main issue deformable objects pre computed hierarchies may invalid objects deform re computing new ones collision query time consuming 
propose algorithm modify topology hierarchy representing object updates size location primitive volumes labeling nodes hierarchy 
algorithm derives proposed quinlan rigid objects :10.1.1.52.9953
fewer works exist deformable objects 
algorithm closest 
builds tree fixed topological structure 
tree balanced may seriously increase cost collision queries nodes aabbs 
main difference tree maintenance algorithm 
algorithm exploits locality deformations minimize number node updates 
algorithm specifically aimed detecting cloth objects issue carefully studied far 

maximum solid lines average dashed lines error vs box size maximum error solid lines dashed lines computation cutout vs number iterations 
quinlan algorithm mesh nodes edges iterations hz iterations hz cutout cutout table 
effect computation cutout simulation rate sphere tree object 
rigid object represented triangulated surface quinlan algorithm covers triangle small spheres predefined radius constructs approximately balanced binary tree leaf sphere radius 
node sphere encloses leaf spheres sub tree rooted constructed recursively partitioning set leaf spheres contained sub tree initially set leaf spheres subsets equal cardinality subset contains single leaf sphere 
partitioning operation tries minimize intersection radii spheres respectively enclose leaf spheres 
technique partition set computes box aligned object coordinate frame contains centers leaf spheres divides leaf spheres longest side box 
collision detection 
respective sphere trees rigid objects 
collision query specified position orientation relative 
collision detection performed depth traversal pairs spheres trees examined 
intermediate spheres null intersection leaf spheres contain possibly intersect traversal pruned children nodes examined 
leaf spheres intersect triangles tiled spheres explicitly tested collision 
root spheres respectively algorithm returns detects collision algorithm collision 
null intersection return 
leaf spheres test corresponding triangles collision return collide smaller switch collision left child return collision right child return return 
application deformable objects collision maintain sphere tree deforming object 
propose new sphere tree balanced structure computed 
object deforms structure tree remains fixed sphere added removed radii positions spheres adjusted 
maintenance algorithm performs adjustments needed 
construction sphere tree 
triangulated surface deformable object initial shape 
pre computed tree differs ways tiling triangles small spheres assign triangle single leaf sphere smallest sphere enclosing triangle :10.1.1.52.9953
undergoes deformation number leaf spheres remains constant 
updating radius position sphere enclosing deforming triangle faster computing new tiling 
approximately balanced structure generated recursively partitioning leaf spheres subsets equal size 
radius position non leaf sphere computed enclose sphere children 
yields slightly bigger sphere computed contain descendant leaf spheres computation faster 
collision detection 
collision unchanged 
maintenance sphere tree 
deformation triangle requires adjusting radius position corresponding leaf sphere ancestors root algorithm performs changes prior processing query 
operation done bottomup priority queue spheres sorted decreasing depths initialized contain leaf spheres enclose triangles deformed update follows algorithm maintenance empty 
extract 
adjust radius position 
insert parent spheres modified contain deformed triangle 
sphere modified contains deformed triangles 
clearly maintenance perform better deformations local scattered specifically local deformation affecting triangles total number triangles results total update time log 
triangles spread leaves cost 
collision detection performance log 
worst case triangles changed shape maintenance operation takes time 

performance evaluation algorithms implemented 
give results experimental performance tests intel mhz pentium ii processor mb memory running windows 
sphere tree construction 
pre computation object sphere tree need particularly efficient done object prior simulation 
software runs time proportional number triangles takes order milliseconds triangle 
sphere tree maintenance 
evaluate nance considered surface initialized flat horizontal grid square split triangles 
consists triangles 
create local deformation pick vertex radius deformation direction upward downward random 
vertex distance translated distance inversely proportional distance create scattered deformations repeat process times 
computing sphere tree flat surface ran maintenance update tree various deformations 
measured running time maintenance milliseconds deformed triangle 
collision queries considered objects 
modeled flat square mesh units tessellated triangles 
object spherical ball units diameter tessellated triangles 
moved ball straight path center square mesh units separation unit penetration 
query times different relative positions objects shown 
objects far apart query extremely fast takes order tenths millisecond 
get closer unit query time grows quickly dark curve 
setup asymptote just milliseconds spheres trees examined rule possible collision 
objects collision query time drops sharply milliseconds grey curve 
sharp drop suggests timeout imposed sion relatively minor risk detecting collision 
similar experiments deforming objects updating sphere trees maintenance 
observed significant degradation query times large deformations objects 

simulation system system overview 
shows user interacting system manipulating real surgical instruments forceps mounted electromagnetic tracking devices 
positions orientations trackers read hz opening closing forceps obtained online reading sensor 
instruments rendered graphic display deformable objects simulation severed blood vessel suture needle thread 
graphic display updated hz 
user complete control viewpoint may stereo glasses 
simulator qss section computes deformations vessel suture deformations computed described 
collisions handled algorithm section 
frequent collisions forceps vessel needle vessel thread vessel thread forceps thread half vessel 
implementation dual processor machine sun ultra mhz processors allows processing deformations collision detection conflict rendering 
models 
half vessel modeled truncated double cylinder 
inner outer cylinders modeled layers nodes layers evenly spaced layer consisting sev eral nodes evenly spaced circle 
node connected deformable links neighbors layer neighboring layers 
connections nodes inner outer cylinders 
layer vessel fixed space representing fact vessels clamped surgery portion length manipulated 
parts vessel touch meshes merged assume sticking contact qss computes deformation new mesh 
simulation suture 
thread deformable elastic 
model suture articulated object short straight links sequentially connected nodes acting spherical joints 
node suture may constrained object 
example node grasped forceps position constrained forceps 
suture vessel node constrained position vessel 
motion suture calculated follow leader technique 
pulling ends suture results deforming thread remaining slack suture vessel displacement causes vessel deform 
examples interactions 
figures show deformations generated forceps holding parts blood vessel 
figures suture vessel pulls vessel ends bring 
figures show example suture wrapped forceps collides vessel 
examples full set computations deformation collision detection tool simulation done hz 
note diversity deformations achieved vessels 

designed new fast algorithms simulating deformations soft objects detecting collisions deforming rigid objects 
algorithms take advantage characteristics surgical training visual realism important accurate simulation deformations local human body tissues damped surgical instruments relatively slow motions 
simulator exploits characteristics solve quasi static equations wave propagation technique automatic computation cutout deformations insignificant 
collision algorithm exploits deformation locality minimize number updates hierarchical representations deforming objects 
algorithms integrated virtual 
forceps deforming severed vessel suture pulling vessel suture pulling vessels suture wrapped forceps suture colliding self vessel reality system simulating suturing small blood vessels 
system plastic reconstructive surgeons lab various exhibits deemed realistic potentially useful 
step experimental clinical verification having surgeons learning procedure tool assessing quality virtual repairs measurements angle position vessel piercing 
try establish quantitatively practicing simulator affects quality real vessel repairs 
investigating surgical applications 
force feedback irrelevant critical applications :10.1.1.107.3296
qss compute force applied displaced control node elastic mesh 
achieve update rate compatible haptic interaction roughly hz 
connect simulator haptic devices developing fast techniques interpolate forces computed qss 
elastic mesh model allow explicit representa tion incompressibility constraints encountered human body tissues 
technique proposed overcome limitation apply artificial corrective forces surface nodes keep object volume approximately constant 
extending collision detection module efficiently detect collisions object short term goal 
issues consider detection mesh degeneracies link crosses modeling collision responses 
issues addressed simulation system algorithms run concurrently efficiency critical 
acknowledgments research conducted stanford nasa center 
supported national aeronautics space administration nas ncc national science foundation iis nih national libraries medicine nlm 
benefited equipment gifts sun microsystems intel 
improved discussions fr ric 
produced performance data collision detection algorithms 
baraff 
curved surfaces rigid body simulation 
computer graphics 
baraff witkin 
dynamic simulation flexible bodies 
computer graphics 
baraff witkin 
large steps cloth simulation 
acm siggraph conference proceedings pages 
bro nielsen cotin 
real time volumetric deformable models surgery simulation finite elements condensation 
computer graphics forum eurographics 
brown montgomery 
latombe 
simulation system 
fourth international conference medical image computing computer assisted intervention miccai oct 
cohen lin manocha ponamgi 
collide interactive exact collision detection system large scale environments 
proceedings acm interactive graphics conference pages 
cotin delingette ayache 
hybrid elastic model allowing real time cutting deformations surgery training simulation 
visual computer 
delingette :10.1.1.107.3296
realistic soft tissue modeling medical simulation 
proceedings ieee special issue surgery simulation pages apr 
gottschalk lin manocha 
obb tree hierarchical structure rapid interference detection 
acm siggraph conference proceedings pages 
house breen editors 
cloth modeling animation 
peters 

dynamic simulation model basic algorithms optimization 

laumond overmars editors algorithms robotic motion manipulation pages 
peters 
girod girod 
surgery simulation 
proceedings th international conference visualization biomedical computing vbc pages sept 
girod girod 
anatomy facial tissue modeling finite element method 
proceedings ieee visualization 
klosowski held mitchell 
efficient collision detection bounding volumes hierarchies dops 
ieee transactions visualization computer graphics 
koch gross von ren fankhauser 
simulating facial surgery finite element models 
acm siggraph conference proceedings pages 
maa 
endoscopic surgery training virtual reality deformable tissue simulation 
computers graphics 
lin canny 
fast algorithm incremental distance calculation 
proceedings ieee international conference robotics automation pages 
mirtich 
clip fast robust polyhedral collision detection 
acm transactions graphics 
toole blank roberts bell raibert 
measuring developing suturing technique virtual reality surgical simulator 
journal american college surgeons july 
palmer 
collision detection animation sphere trees 
computer graphics forum 
delingette ayache 
non linear anisotropic elastic soft tissue models medical simulation 
proceedings ieee international conference robotics automation may 
pieper jr rosen 
facial model simulating plastic surgery 
plastic reconstructive surgery oct 
quinlan :10.1.1.52.9953
efficient distance computation nonconvex objects 
proceedings ieee international conference robotics automation pages 
smith kitamura kishino 
simple efficient method accurate collision detection deformable polyhedral objects arbitrary motion 
proceedings ieee virtual reality annual international symposium pages 
terzopoulos waters 
physically facial modelling analysis animation 
journal visualization computer animation 
van den bergen 
efficient collision detection complex deformable models aabb trees 
journal graphics tools 
volino magnenat thalmann 
collision detection efficient robust solutions highly deformable surfaces 
eurographics workshop animation simulation 
