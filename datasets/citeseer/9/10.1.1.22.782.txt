type classes overloading higher order logic markus wenzel technische universit nchen institut informatik nchen germany www informatik tu muenchen de informatik tu muenchen de type classes overloading shown independent concepts added simple higher order logics tradition church gordon demanding logical expressiveness 
particular model theoretic issues affected 
metalogical results may serve foundation systems isabelle pure offer user haskell style order sorted polymorphism extended syntactic feature 
describe simple theories single carrier type fixed signature operations 
higher order logic hol dates back church formulation simple theory types originally intended foundation mathematics 
gordon extended system object level order language types including type variables type constructors importantly definitional mechanisms guarantee safe theory extensions 
various implementations theorem provers gordon hol proved successful applications computer science mathematics 
paulson generic theorem proving environment isabelle intuitionistic version hol isabelle 
isabelle haskell type system ordered type classes added investigating logical foundation issues 
somewhat conceptual bug concerning handling empty classes discovered isabelle meta logic implementation inconsistent 
embarrassing slips kind illustrate mechanized proof assistants understood logical frameworks lest formal proofs conducted users inherit uncertainty 
aims close foundational gap isabelle 
main contributions research supported dfg spp 
interpretation type classes higher order logic 
definitional mechanism axiomatic type classes 
generalization constant definitions admitting overloading recursion types 
particular see type classes implicitly gordon hol systems time 
extensions isabelle pure basic hol explained just additional syntactic features offered user convenience 
really goes gordon hol extra logically overloaded constant definitions 
concepts type classes overloading explained independently hol closely related practice type classes syntactic device overloading tends 
overloaded definitions type classes defined instantiated useful manners 
initial motivation arose isabelle setting subsequent presentation general 
results easily applied similar hol systems 
note terminology hol shall refer logical system explain concepts 
concrete incarnations isabelle pure isabelle meta logic isabelle hol object logic isabelle pure gordon hol 
quite harmless simplification hol identified directly isabelle pure 
structured follows section starts examples type classes giving formal background 
section sketches syntax deductive system hol logic 
section discusses issue safe theory extension general concludes generalized constant definitions including overloading recursion types 
section introduces type classes interpretation hol 
section concludes safe mechanisms definition instantiation axiomatic type classes 
examples type classes type classes programming languages quickly review aspects type classes languages haskell 
setting kind classes supposed describe collections types provide implement operations certain names types 
example consider class definition modulo concrete class ord ord ord bool class ord requires instances provide relation bool 
witnessed instance construct suitable definition 
example instance nat ord nat le specific required nat nat bool type 
chosen name think order course 
shall implemented appropriately program text nat le 
observe haskell type classes viewed signature part simple algebraic structures consisting carrier type associated operations member functions 
additional semantic properties class axioms may come mere convention 
speaking terms example concrete instance understood poset structure nat nat 
type classes hol haskell notion instances type classes provide operations certain names types amenable logical systems hol 
just express logic objects declared meaningful 
extra logical point view notions appropriate 
hol world total sense type meaningful 
constants arbitrary type safely declared time changing 
worst case may happen useful theorems derived objects 
consider just boundary case loose specification 
argue straightforward interpretation classes simply set theoretic predicates type classes denote classes types 
view classes algebras recovered frugal interpretation 
example consider class orders hol consts prop class ord reflexive transitive antisymmetric note consts part class definition 
declaration just ensures class axioms syntactically formed 
meaning ord type predicate stating prop order relation 
express available type trivially true hol anyway 
concrete instances ord required corresponding prop specified way order properties derivable 
typically achieved means constant definition prior actual instantiation 
example consider defs nat le instance nat ord observe defs part instance construct just consts independent class 
assuming term nat le expresses suitable relation able derive reflexive transitive antisymmetric type nat theory 
instantiation nat ord justified logic 
note concrete system implementations user provide witness theorems instance explicitly 
version hol definitions admit overloading primitive recursion types 
mimic lifting polymorphic operations 
example consider definition defs fst fst snd snd enabling derive order properties assumption hold 
justifies instantiation form instance ord ord ord type operator understood functor direct binary products order structures 
note overloaded definitions overlap 
particular may equation type scheme 
example having defined component wise rules redefine lexicographic order 
signature part theories described fixed 
type classes carrier type parameter operations 
drawback specific hol 
type classes may instantiated current haskell languages 
examples applications type classes light weight mechanism simple theories isabelle library especially hol hol directories 
tutorial axiomatic type classes available part isabelle documentation 
examples illustrated extend concepts overloaded definitions type classes joined practically useful mechanism 
understood independently hol 
logical foundations defs explained especially 
exact meaning class instance 
overloaded general may different instantiations 
hol logic briefly sketch syntax deductive system version hol 
presentation somewhat reminiscent differs details 
hol syntax types terms syntax hol just simply typed calculus order language types 
types variables applications 
place constructor applied types drop parentheses 
binary constructors written infix function types associate right 
terms built explicitly typed atomic terms constants variables application tu type provided abstraction type provided 
usual application associates left binds tightly 
abstraction body ranges dot far right possible 
nested abstractions abbreviated note atomic terms consist components name type 
particular variables name different types treated different 
furthermore assume suitable functions tv types terms fv terms yielding type variables free term variables respective arguments 
type substitutions instances type substitutions 
shall defined usual 
application types terms written postfix 
types terms call type instance written iff substitution 
set types terms denote closed set type instances 
theories consist signature part constants types axioms 
notation 
meaning theory extension declaring type constructor arity constants representing set asserting axioms set 
assume theories contain signature prop propositions functions prop prop prop implication prop equality prop prop universal quantification usual written nested abbreviated nested logical operators true false introduced obvious way 
simplify presentation really necessary 
term type prop formula 
type propositions called literature gordon hol analogous type bool 
hol deductive system due space limitations give full calculus hol 
suffices say theory inductively defined relation derivable sequents antecedents finite sets formulas 
usual abbreviations clear context 
full set inference rules consists schemas 
example mp get single sequent calculus similar gordon hol 
rules chosen suitably system may read natural deduction preferred isabelle literature 
details classical vs intuitionistic hol matter 
subsequently general idea theorems derivable higher order logic sufficient level abstraction 
meta level definitions important contribution gordon hol original formulation church disciplined mechanisms theory extension 
unrestricted axiomatizations guarantees certain nice properties theories preserved 
extensions usually called conservative definitional sound confusion exact meaning phrases 
introducing generalized constant definitions cf 
set discuss qualifies extension mechanisms safe hol setting 
consistency preservation theory called syntactically consistent iff formulas derivable 
inconsistent theory certainly models formula theorem including false 
theory extension mechanism called consistency preserving iff extension consistent theories consistent 
nice concept consistency preservation certainly key property qualifies theory extensions safe hol setting syntactic consistency theories strong property 
particular necessarily imply existence suitable models 
require completeness deductive system wrt 
underlying model theory generally hold higher order logic 
surprisingly kinds safe extensions necessarily preserve consistency general notably gordon hol type definitions see 
syntactic conservativity definition 
extension theory called syntactically conservative iff formula signature holds 
syntactic conservativity traditional 
ensures extensions change derivability formulas contain newly introduced syntactic objects constants types 
easy see syntactic conservativity implies consistency preservation 
consider syntactic conservativity minimum requirement wellbehaved extension mechanisms purely deductive logical frameworks 
model preservation briefly review gordon hol extension mechanisms way justified conservative 
basically system features kinds theory extensions constant definition provided new occur fv tv tv 
type definition 

ary type constructor term representing set notation shall abbreviate suitable formula stating isomorphic definition shall formed provided new occur fv tv 
non emptiness derivable 
gordon hol admits general forms loose specifications 
ignore loss generality level abstraction 
mechanisms justified safe extensions preserve gordon hol standard models model 
models specifically tailored gordon hol logic quite special ways classical 
standard types interpreted subset closed universes 
particular property crucial type definitions safe 
quickly sketch counterexample gordon hol type definitions preserve syntactic consistency 
consider base theory formula expressing cardinality 
false 
easy see consistent example give simple model non standard gordon hol sense interpretations types sets cardinality 
thr thr observe thr derivable false 
theory inconsistent 
furthermore type definitions necessarily syntactically conservative theories involved gordon hol standard model 
counterexample simple modification previous basically just substitute proper constant definition false 
relatively easy see standard models 
argument similar shows derivable 
definition type thr changed derivability existing formulas syntactically conservative 
course wrong gordon hol type definitions long leave dedicated model theory 
examples illustrate justify extensions setting hol serve meta logical framework expressing different kinds deductive systems object logics isabelle parlance 
words results safeness extensions applicable isabelle pure just particular object logics isabelle hol 
focusing solely gordon hol standard model theory basically restrict object logics known shallow embeddings hol community 
justifying example full zermelo fr set theory framework difficult encoded purely deductive system isabelle way 
standard sense treats certain kind non standard models 
may interpret proper subsets full function space 
interestingly deductive system classical hol complete wrt 
class general models 
meta safe extensions introduce notion safe theory extensions appropriate meta logical hol setting definition 
extension theory called meta safe iff syntactically conservative 
introduced objects syntactically realizable new function types terms 
notation shall denote replacement 
observe syntactic conservativity object logics free ignore meta safe extensions just referring syntactically 
syntactic realizability seen generalized counterpart model preservation staying deductive system hol 
newly introduced names seen just abbreviation pre existent syntactic objects properties theorems derivable 
ways object logics cooperate meta safe extensions just consider object level formulations modulo expansion meta definitions changing semantics adjust model theory interpret defined objects utilizing realization function 
overloaded constant definitions having provided preliminaries generalization constant definitions overloaded constant definition set equations definition shall formed provided new fv tv tv furthermore instances different may common instances recursive occurrences may types strictly simpler founded sense 
practice strictly simpler notion just structural containment 
get constant definitions general primitive recursion types 
example consider nat zero think gordon hol type definitions representing sets may contain meta safely introduced constants example 
defines nat lifting binary products function spaces 
unspecified types instances nat 
note extension mechanism requires defining equations time right constant declaration 
want relax concrete system implementations allowing user augment theories additional equations constants new type instances incremental way 
system keep track partial definitions ensuring resulting equations sorted proper overloaded constant definitions time 
briefly sketch overloaded constant definitions 
due space limitations gloss various technical lemmas hol deductions importantly freeness unspecified constants deduction theorem 
key property generalized constant definitions lemma 
overloaded constant definition partial function types terms establishes type instances proof exploits formedness restrictions set equations straightforward ways canonical constructed founded recursion types equations hold 
mainly works different common instances recursive occurrences simpler 
tv tv plays important le 
note really partial general necessarily eliminate type instances 
views convergent term rewriting system leaves exactly unchanged normal wrt 
easily extend total eliminates leftover replacing term type 
main result issue meta level definitions theorem 
overloaded constant definitions meta safe 
proof exploits constructed 
syntactic conservativity realizability relatively simple consequences lemma 
unfortunately give details technical level abstraction 
type classes order sorted type system hol language provides syntactic layers higher order terms annotated order types 
conceptually add third level ordered type classes sorts qualify types 
algebra types order sorted structure amenable known techniques order sorted unification 
particular ml style type inference easily generalized order sorted system 
order sorted type signatures consist basic components finite set type classes class inclusion relation set type arities 
initial class structure canonically extended quasi ordered sort structure sorts finite sets classes sort 
cn supposed represent intersection 
cn 
inclusion extended classes sorts accordingly 

note greatest sort empty intersection shall subsequently written 
type arities declarations form 
sn place type constructor 
sn sorts 
supposed partial specification acts certain subsets universe types 
sort assignment assume type variables carry globally fixed sorting information 
think variables consisting components base name sort order sorted type signature sorts assigned types set rules sn 
sn 
may type arities constructor introduces overloading partiality level types 
fact type arity declarations change formedness types defined 
influence sort assignment second rule 
having arities constructor problem just derive interesting sort assignments 
general may sorts assigned type 
literature calls type signature regular iff types set assigned sorts element modulo sort equivalence 
holds setting sort structures closed wrt 
intersection 
nice property regularity guarantees unitary order sorted unification types principal type schemes arbitrary terms 
technical issues matter 
interested logical content order sorted type signatures see 
representing type classes hol expressing type predicates hol difficult sight objects type prop reasons type types 
type predicates needed class objects 
kind propositional language types capable express class membership sufficient 
hol obviously provides sort thing formula potentially contains type variable may viewed proposition types 
example consider 
describes class singleton types 
remains problem encode class constants way admits meta safe mechanism class definitions 
probably ways accomplish particularly easy motivate 
encoding augment basis theory simply adding unspecified types constants type type class introduced user declare polymorphic constant prop 
applications form prop type type prop shall considered represent proposition member 
subsequently telling notation abbreviate terms 
encoding elaboration folklore technique lcf community express flatness domains 
motivation far just introduced abbreviations terms prop type 
understand representation member 
motivation simple set theoretic semantics hol types denote sets type constructors functions operate sets 
choose interpret function types 
words type constructor builds singleton sets containing argument 
sole element type see type represent type 
consider prop 
interpreted assuming set theoretic function space prop just boolean values 
observe general function spaces singleton domain set may viewed just isomorphic copy marked parameterized prop propositions parameterized types objects prop understood expressing type membership 
formal application canonical elements type strictly speaking redundant type prop syntactically 
wrong terms objects representing types collections objects higher order logic 
note interpretation type enforced means gordon hol style definitions true type true unfortunately object level type definition unavailable meta level hol 
prefer leave type unspecified place 
important note hol terms representing type classes se 
leave hol conceptually position contexts form viewed extra logical representations actual type predicates 
interpreting order sorted type system ready explain order sorted concepts terms hol meaning primitive type signature components defined quite obvious manner 
derived notions depend sort assignment shown consistent appropriate logical counterparts 
order sorted type signatures logical content classes appear polymorphic constant declarations prop theory signature cf 

recall class membership encoded terms written class inclusion simply expressed point wise logical implication formula sorts 
cn supposed represent intersections finitely classes 
sort membership 
cn expressed conjunction cn term shall abbreviated 
cn note interpretation defined independently order repetition 
cn 
sort inclusion defined terms class inclusion 
show compatible logic demonstrate formula derived hol assumption class inclusions taken corresponding relation type signature 
proof fact just relies basic deductive properties 
type arities 
sn simple schematic statements image type constructors 
express point wise follows sn 
ordinary mathematical notation arity declarations 
sort contexts sorted type variables supposed express implicit restriction types certain sorts 
formulas 
interpreted additional assumptions 
general term type denote set implicit sort constraints shall called sort context sort assignment defined relatively type signature certain set inference rules 
show compatibility corresponding logical notion holds syntactically derivable hol having implicit sort constraints appear explicit assumptions 
order prove simply mimic syntactic sort assignment rules suitable logical counterparts 
example rule rules logical just variants modus ponens combined instantiation recalling meaning 
sn certain implications 
putting results see syntactic operations performed type signature level order sorted unification type inference understood correct approximation logical reasoning 
seen way round simple fragment propositional logic types hol reflected type signature level automating portions logical reasoning scenes user benefit 
class definitions instantiations give logical meanings class instance sketched 
basic mechanism introduces type classes disciplined way class definition prop provided new occur fv tv 
theorem 
class definitions meta safe 
proof simple class definitions formed definitions constants prop 
just equation looks odd sight equivalent proper definition prop 
explain class construct general form class 
cn 

cn superclasses 
class axioms tv 

shall just considered concrete user interface syntax proper class definition prop cn closures ensuring fv 
theorems derivable definition simply equivalence apart stripping class inclusions ci ci class axioms class instantiation rule 

instance construct comes variants instance called instantiation instance 
sn called concrete instantiation provided class inclusion type arity derivable corresponding theories sn 
effect instantiations augment current order sorted type signature stated inclusion type arity 
sn theorem 
class instantiations meta safe 
proof just note instance logically vacuous axiomatic additions type signature derivable 
seen simple traditional hol systems providing object level type variables implicitly contain propositional language types may serve interpretation type classes type arities related notions type systems 
supported general qualified types notably ary type relations programming language gofer proposed extensions haskell 
order sorted type system turns just addition user convenience really changing expressiveness logic 
introduced new safe theory extension mechanisms overloaded constant definitions possible recursion types class definitions class instantiations 
justified purely deductive metalogical level referring model theory 
surprising results simplicity 
leave seemingly old fashioned hol favour full blown theories dependent types 
sort theories type classes capable offered hol additional cost apart implementation efforts 
acknowledgments tobias nipkow controversial encouraging discussions topic 
olaf ller wolfgang david von oheimb oscar commented draft versions 

andrews 
mathematical logic type theory truth proof 
academic press 

church 
formulation simple theory types 
journal symbolic logic pages 

gordon 
set theory higher order logic 
proc 
th tphols volume lecture notes computer science pages 
springer verlag 

gordon melham editors 
hol theorem proving environment higher order logic 
cambridge university press 

henkin 
completeness theory types 
journal symbolic logic 

hudak jones wadler editors 
report programming language haskell non strict purely functional language version 
sigplan notices march 

isabelle library 
www informatik tu muenchen de nipkow isabelle 

jones 
qualified types theory practice 
phd thesis university oxford 

nipkow 
order sorted polymorphism isabelle 
huet plotkin editors logical environments pages 
cambridge university press 

nipkow prehofer 
type checking type classes 
th acm symp 
principles programming languages 

paulson 
foundation generic theorem prover 
journal automated reasoning 

paulson 
isabelle generic theorem prover volume lecture notes computer science 
springer verlag 

pitts 
hol logic 
gordon melham pages 

schmidt schau 
computational aspects order sorted logic term declarations volume lecture notes artificial intelligence 
springer verlag 

wenzel 
axiomatic type classes isabelle tutorial 
available www informatik tu muenchen de nipkow dvi gz 

