assembly high level language translation cristina cifuentes doug simon antoine department computer science electrical engineering university queensland brisbane qld australia email csee uq edu au translation assembly code high level language code importance maintenance legacy code areas program understanding porting recovery code 
techniques asm translator sparc assembly translator 
techniques involve data control flow analyses 
data flow analysis eliminates machine dependencies assembly code recovers high level language expressions 
control flow analysis recovers control structure statements 
simple data type recovery done 
techniques extensions improvements previously developed cisc techniques 
choice intermediate representation allows risc cisc assembly code supported analyses 
tested asm spec sparc assembly programs generated compiler 
results unoptimized optimized assembly code 

recovery high level language code assembly machine code area research widely researched years partly due complexity problem lack techniques available field 
context fixing year bug gartner group estimated organizations missing source code portfolios 
means information systems organization software portfolio lines code easily sponsored university queensland sun microsystems laboratories 
missing lines 
large organisations thousands lines code written assembly code benefit state art object oriented assembly code reengineered high level language 
facts point need research ways translating machine assembly code highlevel language code sound compiler technology 
essence problem program comprehension able understand existing code generated assembler compiler tools apply techniques undo assembler compiler done 
transformation converts low level assembly code higher level abstraction resembles today high level language hll programs 
techniques industry involve proprietary techniques published source recovery ibm decompiler 
concentrate translation sparc assembly code imperative procedural language target languages benefit techniques chose due popularity unix community 
reader referred ways translating machine code assembly :10.1.1.14.8073
translation assembly hll code requires series analyses order away hardware features assembly languages recover high level features available common procedural programming languages 
aim process recover hll code comparable produced native programmers assembly code written emulates features machine registers stack 
main types analyses ffl data flow analysis recover high level language expressions statements control transfer statements actual parameters function return values remove hardware code registers pipeline stack ffl control flow analysis recover control flow structure information loops conditional statements nesting level ffl type analysis recover high level type information variables formal actual parameter types function return types 
concentrate data flow control flow analysis techniques applied risc assembly code 
simple type analysis performed implicitly algorithms 
express properties techniques intermediate representation asm 
tested techniques large set assembly programs created compiling spec benchmarks assembly code 
rest structured way explains intermediate representation analysis summarizes properties techniques handle risc assembly code shows sample code obtained techniques optimized unoptimized code shows results obtained assembly version spec benchmarks discusses previous area 
provides 

intermediate representation assembly programs parsed stored intermediate representation suitable hll recovery analysis 
levels representation order perform different types analyses control flow graph procedure high level instruction sequence assembly instructions 
parsing assembly code machine idioms checked order remove particularities machine 
case sparc idioms relate synthetic instructions described sparc manual replace instructions expressive ones 
example increment instruction replaced addition instruction explicit operands implicit ones subtract carry destination register replaced compare instruction register hardwired zero 

control flow graph control flow graph cfg procedure stores information instructions basic blocks 
types nodes instruction block existence label target block ffl way block ends unconditional branch ffl way block ends conditional branch ffl way block ends unconditional branch register ffl call block ends procedure call ffl ret block ends return restore ffl fall fall block followed labelled instruction 
constructing cfg straight forward extra analysis needed case way nodes 
branch register met possible determine target address es branch static analysis 
techniques commonly solve problem intraprocedural backwards slicing pattern matching 
technique performed register branch order obtain set instructions indexed branch depends 
register take series different values values determined forward walk sliced instructions making possible determine size indexed table offsets search 
hand pattern matching technique requires patterns determined example different ways compilers generate switch statements matching performed patterns 
cases indexed jump resolved flag basic block having zero edges graph incomplete non connected graph assembly code parsed basic blocks procedure 
cfg generation technique risc binary profilers qpt decompiling cisc code easily implemented risc machines due stylized code fragments compilers generate indexed jumps :10.1.1.14.8824
contrast cisc code harder analyse indexed jumps 
generation cfg needs remove dependencies hardware pipeline analysing delayed instructions 
sparc instructions transfer flow control combination instruction delayed instruction 
delayed instruction may may executed type branch 
enabled executed prior target branch reached 
semantic behaviour documented sparc manual needs removed graph order build machine independent graph 
framework removal delayed instructions dealt pattern matching idioms 
support transformational approach proved produce right code combinations delayed instructions 

high level opcodes assembly mnemonic instructions applications programs represented set different high level opcode instructions ffl assignment assigns right hand side expression left hand side location ffl conditional jcond checks value expression determine target address branch ffl unconditional jump unconditional transfer control equivalent goto ffl call call procedure call invocation ffl return ret return procedure 
mapping assembly instructions high level instructions requires traversal code 
definition analysis condition codes required merge compare conditional jump instructions jcond instructions 
note stage expressions form part assignment simple machine dependent registers 
analysis expressions instructions merged regenerate complex expressions remove register 
important point control structure recovery analysis performed stage unknown conditional jcond instruction header structure 
analysis purposes definition du ud chains constructed register condition code instruction 
chains procedure level cross procedure boundaries 
take account summary information provided called procedure 
shows program implements string length function strlen uses main 
corresponding unoptimized assembly code shown 
extraneous text lines data removed code annotated ud du chains 

data control flow analysis techniques techniques described section extension data control flow techniques dcc cisc decompiler recovery code dos binary executables :10.1.1.14.8073
extend techniques deal risc code stating properties underlying techniques int strlen char char return int main void char hello int size size strlen return strlen way ret way main call ret 
string length strlen program corresponding control flow graph lead improvements algorithms 
testing techniques done context large programs optimized code cisc techniques tested small unoptimized code exposed large unstructured examples restructuring process harder achieve 

data flow analysis high level language statements translated series assembly load store instructions machine registers 
registers normally carriers intermediate values calculate new result transfer new memory location 
reverse process forward substitution registers 
definition register instruction terms set registers fa forward substituted register instruction fr definition unique definition reaches paths program register redefined path 
resulting instruction look follows ff fa need instruction disappear 
previous relationship partly captured du ud chains instruction register uniquely defined reached instruction ud chain set element 
relationship known clear relationship register formally ff fa iff ud du ffl clear note definition place restriction number uses definition strlen livein liveout save sp sp st fp ud ld fp du st fp ud ll ld fp du ud du sll ud du sra ud du cmp ud du cc bne ll ud cc ll ll ld fp du add ud du mov ud du st fp ud ll ll ld fp du ld fp du sub ud ud du mov ud ll ll ret main livein liveout sethi hi llc mov llc du st fp ud ld fp du call strlen ud du st fp ud mov ll ll ret restore strlen return ll fall way ll way way ll way ll return ll main fall way 
unoptimized sparc assembly code strlen program annotated definition chains 
cfgs strlen main shown 
number elements du instruction potentially substituted different instructions provided satisfy clear jk property 
analysis treat registers condition codes way registers 
condition code treated different register 
needed instructions may set condition codes condition codes 
purposes illustration condition codes grouped overlaps definition sample example 
forward substitution analysis uses clear jk relationship intra interprocedural way 
able eliminate condition codes intermediate registers places actual arguments procedure call argument lists determine return value functions 
achieved noting high level instructions define registers condition codes way ffl assignment defines registers condition codes left hand side uses registers condition codes right hand side ffl conditional uses condition codes registers ffl call uses registers passed actual arguments defines returned registers 
case register windowed architectures sparc summarized livein liveout information procedure needs mapping callee registers caller registers seen strlen function 

control flow analysis transfers control modelled assembly code conditional jumps value condition codes unconditional jumps goto 
forward backward jumps denote traditional way conditionals loops respectively 
control flow graph procedure cfg captures transfers control relationships basic blocks program basis analysis 
process involves determination conditionals loops followed restructuring conditionals 
node contains control transfer instruction called header node 
follow node node contains instruction executed equivalent hll control structure executed 
header node follow denote conditionals loops denoted header latching node phi latching node node loop back edge header node 
structuring conditionals subgraph headed way conditional node exists unique node paths edges header converge 
define follow node conditional convergence node point header immediate post dominator satisfies property 
set nodes paths starting successor conditional header called branch 
formally succ branch set fn path fh fgg 
definition implies branch may empty 
subgraph represents structured conditional satisfies properties 
branches ffl 
branches ffl ffl fhg 
property states membership branches mutually exclusive node may belong branch conditional second property states predecessor node branch node branch conditional header 
unstructured conditional violate properties 
type conditional determined header node way node equivalent start switch case statement way node statements ffl successor header follow node successor reached back edge 
ffl false successor follow node 
ffl true successor follow node 
structuring loops ordering nodes cfg post order walk graph depth search traversal 
ordering implies leaf nodes underlying depth search tree smaller order nodes higher tree header cfg order equal number nodes graph 
established loop phi determined back edge node lower underlying higher node tree order order edge interval theory determine nesting level loops nodes belong loop 
different methods purpose 
intervals nodes belong loop determined set phi fn ffl order order order denotes interval belongs 
nodes belong loop tagged belonging nested loop belong 
type loop determined header latching nodes way ffl pre tested loop header way node controls loop iterations latching node solitary edge back loop header 
edges pre tested loop header lead follow node header previously structured way conditional 
ffl post tested loop may way node header node way latching node 
loop way header node statement loop way conditional 
ffl endless loop way header node reasons post tested loop way latching node 
difference endless loop way header pre tested loop follow conditional node loop 
note back edges way conditional structured loops generate goto generated code arm way conditional 
restructuring conditionals improve code generated way conditional overlaps loop way conditional nodes way header tag loop header tag 
way conditional represents unstructured jump loop loop header tag different loop header tag 
similarly unstructured jump way conditional respective way header tags different 
information modify type way conditional follow simple condition goto label emitted code generation 
example restructure way conditional branch unstructured exit loop detect branch testing conditions 
different loop header 
succ ffl path latch node loop enclosing may latch node 
conditions hold determined new follow conditional headed successor true branch type conditional changed set 
allows generation goto part branch 
similar rules created unstructured entries loop way structures 
point unstructured forward exits way structure possible conditional way structure follow way node construction 
lastly way nodes successor reached back edge structured latch node loop restructured 
case includes unstructured back edge way structure 
case set new follow way successor reached backedge 
type node changed successor true false branch 
concrete details implementations algorithms examples 

sample generated code applying data flow method example leads pseudo code left hand side 
right hand side shows code control flow analysis 
code comparable initial code 
local variables names loc loc names available assembly code 
registers remain types registers formal parameter list removed naming formal parameters registers redundant eliminated dead register analysis registers eliminated equivalent register variables loc loc strlen replaced new named local variables procedure 
applied techniques optimized level assembly code strlen program 
optimized assembly code shown annotated ud du chains cfg routine 
generated code data flow analysis left hand side control flow analysis variable renaming right hand side 
clear code longer different generated unoptimized case programs functionally equivalent initial code 
example consider left hand side strlen loc loc loc ll jcond loc ll jump ll ll loc loc jump ll ll loc loc jump ll ll ret main hi llc loc llc loc strlen loc jump ll ll ret strlen arg loc arg loc loc loc loc loc res loc loc ret res main loc loc strlen loc ret 
generated pseudo code data flow analysis unoptimized assembly code left hand side control flow analysis right hand side shows pseudo code generated recursive fibonacci routine 
code compiled optimization level 
right hand side shows code control flow analysis 
case due base types program integers available machine word generated code trivially supports types variables integers 

results tested asm assembly version integer spec benchmark programs gathered statistical data number type assembly instructions transformed high level instructions 
statistical information aids comparing complexity recovery hll code explained paragraphs 
benchmarks testing purposes ffl go artificial intelligence plays game go ffl ksim chip simulator runs test program ffl gcc gnu compiler builds sparc code ffl compress compresses decompresses file memory ffl li lisp interpreter ffl ijpeg graphic compression decompression strlen livein liveout du cmp ud du cc ud cc ba mov du ba ll mov du add du du du ll ud ud du cmp ud du cc ud cc ba add ud ud du du du ba ll ll sub ud ud ud ud main livein liveout sethi hi llc mov llc du call strlen ud ret strlen way way way delayed fall delayed return way ll way way main fall return 
optimized level sparc assembly code strlen program annotated definition definition chains ffl perl manipulates strings prime numbers perl 
benchmark programs compiled gcc sparc machine option produce assembly code 
compiled assembly large test assembly programs unable get sample programs industry 
compilations assembly optimization optimization level 
shows number assembly lines benchmark program unoptimized optimized cases 

data flow results shows results unoptimized version benchmarks 
program strlen jcond jump jump ll ll jcond jump jump ll ll ret main hi llc strlen llc ret strlen arg arg glb arg glb arg arg arg arg arg arg arg arg glb ret arg main loc strlen ret 
generated pseudo code optimized assembly code left hand side control flow analysis right hand side fib fib arg loc arg jcond arg jump arg arg jump ll fib loc fib loc ret arg fib fib ll ret 
generated pseudo code recursive fibonacci function optimized code left hand side control flow analysis right hand side benchmark asm loc asm loc go ksim gcc li ijpeg perl 
number assembly lines code loc processed asm tool 
column shows original number assembly instructions second column shows generated number hll assignment call statements simple conditionals 
average reduction rate clearly shows code explosion generated compiler emitting assembly code optimizations 
results comparable results cisc machine reduction number instructions results achieved text compression method code 
spec optimization go ksim gcc compress li ijpeg perl 
comparison results unoptimized assembly code shows results level optimization case 
clear figures final difference number instructions small reduction rate 
small difference shows compiler doing generating assembly code correlation average number assembly instructions high level instructions 
checking generated high level code clear extra analysis optimized code needed improve quality recovered code code valid code generated 
example loop optimized loop unrolling recovered loop duplicated code checking duplicated code folding code extension analysis improve quality generated code 
generated code high level abstraction resemble assembly code 

control flow results collected data types control transfer statements way conditionals loops way spec optimization go ksim gcc compress li ijpeg perl 
results level optimized assembly code conditionals goto 
figures provide comparative data number control transfer statement way statements loops statements goto respectively 
bars represent different information program left right order unoptimized regenerated code optimized regenerated code original code 
data regenerated code gathered asm data original programs gathered aid scripts 
recovered loops combination way conditionals goto statements 
seen number loops original programs normally higher recovered unoptimized optimized assembly code 
shows generated code contains conditionals states generated code contains goto statements original code 
figures imply loop recovery algorithm improved order deal way conditionals gotos transformed loop 
loops unstructured ones design decisions invariably lead different code 
large number goto statements due fact short circuit evaluated expressions assembly code 
noticed redundant goto statements generated code legacy labels original assembly code need removed extra pass code 

maintainability generated code seen examples section generated code resembles original code number hll way conditionals gcc go ijpeg li ksim perl vortex 
comparison number way statements number hll loops gcc go ijpeg ksim perl vortex 
comparison number loop statements high level statements program emulation original machine exists generated code 
lack meaningful variable names lack comments hard understand functionality program 
clearly names comments exist assembly code exist recovered hll code 
companies provide translation service human resources aid area 
reported freeman source recovery supporting information clients provide file layouts source jcl programs documentation program application specifications recover meaningful variable names 
clearly code maintainable impact performance application 
informal comments received software familiar assembly code points usefulness translation scheme number hll switch case statements gcc go ijpeg li ksim perl vortex 
comparison number way statements number goto gcc go ijpeg ksim perl vortex 
comparison number goto statements saves hours hand crafted translation time 
asked code maintain pointed generated code smaller assembly version control structures 
thought generated code needs improvements form data types variables particularly compound data types variable naming conventions 
general agreement naming convention thought changing names variables hand needed 
comments code needed maintainer need add 
generally believed interactive tool helpful making changes generated code tool check impact changes data types 
generated code rated useful acknowledged documentation data types name changes required 

previous recovery hll code assembly code widely studied literature 
techniques studied mainly consider nowadays toy languages varian data machine assembler 
techniques studied decompilation assembly language framework 
results area forward substitution order eliminate intermediate loads stores examples 
area control flow analysis algorithms structure hll code uses goto structured form 
baker restructured control flow fortran programs remove goto 
graph transformations restructure flow control program 
cifuentes recovered underlying control structures disassembled assembly code general structuring algorithms 
proebsting recovered underlying control structured java bytecode programs pattern matching techniques :10.1.1.39.5640
commercial assembler cobol translation tools available market 
example asm translator micro processor services translates mainframe assembler pennington systems translates pdp assembler source recovery offers machine assembly code translations cobol ibm machines 
pattern matching techniques recover cobol code code compiler generates 

summary properties underlying algorithms translation assembly code imperative high level language code 
aim techniques remove low level dependencies machine registers stacks condition codes recover high level abstractions control statements assignments expressions parameters function calls 
simple type recovery supported 
results show high percentage highlevel language statements control structures recovered 
room improvements recovery unstructured code 
maintenance point view asm initial stage source code recovery framework 
human resources required enhance documentation readability recovered code lift maintainable level 
asm provides maintainers quick way translating large percentage assembly code high level language representation 
allen 
control flow analysis 
sigplan notices july 
baker 
algorithm structuring flowgraphs 
acm jan 
cifuentes 
interprocedural dataflow decompilation 
journal programming languages june 
cifuentes 
structuring decompiled graphs 
editor proceedings international conference compiler construction lecture notes computer science pages linkoping sweden april 
springer verlag 
cifuentes 
intraprocedural slicing binary executables 
harrold editors proceedings international conference software maintenance pages bari italy october 
ieee cs press 
cifuentes gough :10.1.1.14.8073
decompilation binary programs 
software practice experience july 
freeman 
don missing source code stall year project 

year survival guide 
hoffman 
recovery firm hot missing source code 
computer world march 

decompilation 
phd dissertation university california irvine computer science 

study decompiling machine languages high level machine independent languages 
phd dissertation purdue university computer science aug 
larus ball :10.1.1.14.8824
rewriting executable files measure program behavior 
software practice experience feb 

decompilation control structures means graph transformations 
proceedings international joint conference theory practice software development tapsoft berlin 
proebsting :10.1.1.39.5640
krakatoa decompilation java bytecode reveal source 
proceedings conference object oriented technologies systems portland oregon usa june 
usenix 
ramsey cifuentes 
transformational approach binary translation delayed branches 
technical report university queensland department computer science electrical engineering sept 
simon 
structuring assembly programs 
thesis university queensland department computer science electrical engineering 
sites chernoff kirk marks robinson 
binary translation 
commun 
acm feb 
sparc international menlo park california 
sparc architecture manual version 
