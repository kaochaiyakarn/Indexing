overview aspectj gregor kiczales erik hilsdale jim hugunin mik kersten jeffrey palm william griswold department computer science university british columbia main mall vancouver bc canada gregor cs ubc ca xerox palo alto research center coyote hill road palo alto ca usa hilsdale hugunin palm parc xerox com department computer science engineering university california san diego la jolla ca usa cs ucsd edu 
aspectj simple practical aspect oriented extension java 
just new constructs aspectj provides support modular implementation range crosscutting concerns 
aspectj dynamic join point model join points defined points execution program pointcuts collections join points advice special method constructs attached pointcuts aspects modular units crosscutting implementation comprising pointcuts advice ordinary java member declarations 
aspectj code compiled standard java bytecode 
simple extensions existing java development environments possible browse crosscutting structure aspects kind way browses inheritance structure classes 
examples show aspectj powerful programs written easy understand 
aspect oriented programming aop proposed technique improving separation concerns software 
aop builds previous technologies including procedural programming object oriented programming significant improvements software modularity 
central idea aop hierarchical modularity mechanisms object oriented languages extremely useful inherently unable modularize concerns interest complex systems 
believe say separation concerns mean idea possible design implementation system natural units concern concept goal team structure units imposed tools 
modularity system reflect way want think way language tools force think 
software parnas generally credited idea 
implementation complex system concerns inherently crosscut natural modularity rest implementation 
aop crosscutting concerns oop done object encapsulation inheritance provides language mechanisms explicitly capture crosscutting structure 
possible program crosscutting concerns modular way achieve usual benefits improved modularity simpler code easier develop maintain greater potential reuse 
call crosscutting concern aspect 
example aspect crosscuts classes shown 
aspectj simple practical aspect oriented extension java 
presents overview aspectj including number core language features basic compilation strategy development environment support examples aspectj 
examples show aspectj code clear form crosscutting concerns lead tangled code 
main elements language design fairly stable aspectj project nearly finished 
continue fine tuning parts language building third generation compiler expanding integrated development environment ide support extending documentation training material building user community 
plan user community empirically study practical value aop 
section describes basic assumptions aspectj language design 
section presents core language 
section outlines compiler 
section describes aspectj aware tool extensions developed 
section shows aspectj capture crosscutting structure elegant easy understand ways 
conclude discussion related 
overview detailed design rationale detailed compiler tool implementation issues outside scope 
basic design assumptions aspectj basis empirical assessment aspect oriented programming 
want know happens real user community uses aop language 
kinds aspects write 
understand code 
kinds idioms patterns emerge 
kinds style guidelines develop 
effectively crosscutting modularity 
develop code modular reusable easier develop maintain 
goals designing implementing aspectj really just part project 
develop support substantial user community 
aop support added languages object oriented 
key property aop language provides crosscutting modularity mechanisms 
add aop oo language add constructs crosscut hierarchical modularity oo programs 
add aop procedural language add constructs crosscut block structure procedural programs 
written correspond aspectj version 
possible chosen design aspectj compatible extension java facilitate adoption current java programmers 
compatible mean things upward compatibility legal java programs legal aspectj programs 
platform compatibility legal aspectj programs run standard java virtual machines 
tool compatibility possible extend existing tools support aspectj natural way includes ides documentation tools design tools 
programmer compatibility programming aspectj feel natural extension programming java 
programmer compatibility goal responsible feel language 
previous aop languages domain specific aspectj general purpose language java 
aspectj java balance declarative imperative constructs 
aspectj statically typed uses java static type system 
aspectj programs classes traditional class modularity structure aspects concerns crosscut class structure 
potentially valuable aop research goals aspectj intended meet 
intended clean room incarnation aop ideas formal aop calculus aggressive effort explore aop language space 
aspectj intended practical aop language provides java compatible package solid worked set aop features 
language aspectj extends java support kinds crosscutting implementation 
possible define additional implementation run certain welldefined points execution program 
call dynamic crosscutting mechanism 
second possible define new operations existing types 
call static crosscutting affects static type signature program 
presents dynamic crosscutting 
dynamic crosscutting aspectj small powerful set constructs 
join points defined points execution program pointcuts means referring collections join points certain values join points advice method constructs define additional behavior join points aspects units modular crosscutting implementation composed pointcuts advice ordinary java member declarations 
section presents main elements dynamic crosscutting support language 
presentation informal example 
fig 

uml description simple editor 
box labeled shows aspect crosscuts methods point line classes 
aspect discussed detail section join point model point getx int gety int setx int sety int int int int int line getx int gety int setx int sety int int int join point model critical element design aspect oriented language mechanism 
model provides common frame possible execution program aspect non aspect code properly coordinated 
previous different kinds join point model including primitive application nodes dataflow graph method bodies 
early versions aspectj model join points principled places source code 
dynamic crosscutting elements aspectj model join points certain defined points execution program 
model gives important additional expressive power discussed section 
model join points considered nodes simple runtime object call graph 
nodes include points object receives method call points field object referenced 
edges control flow relations nodes 
model control passes join point twice way sub computation rooted join point way back 
illustrate join points simple editor kernel shown serves running example 
complete code aspectj org doc papers ecoop 
classes executing lines code builds objects shown 
picture large circles represent objects square boxes represent methods small numbered circles represent join points 
executing line starts computation proceeds join points labeled 
case join point reached just action described begins executing 
control passes back join point action described returns 
point pt new point point pt new point line ln new line pt pt ln ln pt getx gety sety setx 
method call join point corresponding method called object ln 

method call reception join point ln receives call 

method execution join point particular method defined class line begins executing 

field get join point field ln read 

method call join point method called object pt 

method call join point getx method called object pt 

field get join point field point pt read 
control returns back join points 

method call join point setx method called 
control returns back different kinds join points provided aspectj shown table 
note aspectj defines number kinds join points kinds suffice programs kinds join points behave respect pt fig 

lines code build objects shown large circles 
rectangles represent methods executing final line code starts computation includes sequence join points shown small numbered circles 
table 
dynamic join points aspectj 
join points marked examples 
kind join point points program execution method call constructor call method call reception constructor call reception language features 
substantially reduces complexity learning program aspectj 
pointcut designators method constructor class called 
call join points calling object object call static method 
object receives method constructor call 
reception join points method constructor dispatch happen inside called object point control flow control transferred called object particular method constructor called 
individual method constructor invoked 
method execution constructor execution field get field object class interface read 
field set field object class set 
exception handler execution exception handler invoked 
class initialization static initializers class run 
object initialization dynamic initializers class run object creation 
pointcut set join points plus optionally values execution context join points 
aspectj includes primitive pointcut designators 
programmers compose define anonymous named user defined pointcut designators 
pointcuts higher order pointcut designators parametric 
exception rule 
possible define advice constructor reception constructor execution join points 
simple way think pointcut designators terms matching certain join points runtime 
example pointcut designator receptions void point setx int matches method call reception join points java signature method call void point setx int intuitively refers time point receives call change coordinate 
similarly receptions void int int intuitively refers time kind element instance point line receives call shift certain distance 
pointcuts combined operators 
compound pointcut designator refers receptions calls point change coordinate 
receptions void point setx int receptions void point sety int primitive pointcut designators aspectj includes variety primitive pointcut designators identify join points different ways 
primitive pointcut designators identify pointcuts kind example receptions matches method call reception join points 
match kind join points certain property holds 
example instanceof point matches join points currently executing object value instance point subclass point 
kinds join point designators combined identify join points useful ways 
example instanceof calls void int int matches method calls come object element 
mean calls come object type calls come static methods 
primitive pointcut designators summarized table 
explained 
currently executing object static methods instanceof match join points 
table 
primitive pointcut designators 
typename position normal sub type matching 
id position matching string equality 
see section information sophisticated wild card matching positions calls signature receptions signature executions signature matches call reception execution join points method constructor called matches signature 
syntax method signature meth id syntax constructor signature new gets signature gets signature val sets signature sets signature oldval sets signature oldval newval matches field get set join points field accessed matches signature 
syntax field signature field id handles matches exception handler execution join points specified type 
instanceof classname signature matches join points kind currently executing object type code contained classname code contained member defined method constructor signature cflow pointcut designator matches join points kind occur strictly dynamic extent join point matched pointcut designator 
pointcut designator matches method call join points step lead reception execution join points matched pointcut designator 
typename initializations typename matches class object initializations specified type 
user defined pointcut designators 
user defined pointcut designators defined pointcut declaration 
declaration pointcut moves receptions void int int receptions void line setp point receptions void line setp point receptions void point setx int receptions void point sety int defines new pointcut designator moves identifies element receives call method move 
user defined pointcut designators pointcut designator appear 
advice advice method mechanism declare certain code execute join points pointcut 
aspectj supports advice 
additionally special cases advice returning throwing corresponding ways sub computation return join point 
advice kinds advice strictly additive respect normal computation join point 
advice special capability selectively preempting normal computation join point 
advice framework declarative method combination mechanism clos modeled demon methods flavors 
advice declarations define advice associating code body pointcut time relative join point pointcut code executed 
advice declaration moves flag true defines advice pointcut moves 
means advice parameters 
effect declaration ensure flag variable set true element finishes handling move method call 
declaration variable shown example section simple model behavior advice terms runtime dispatch 
section outlines techniques compiler uses ensure matching overhead happens compile time 
arrival join point advice system examined see apply join point 
collected ordered specificity described section executed follows 
advice run specific 
body advice calling proceed invokes specific piece advice advice remain goes step 

advice run specific 

computation associated join point proceeds 

execution returning throwing advice depends computation step prior returning throwing advice terminate 
terminate normally returning advice run specific 
terminate throwing exception throwing advice match exception run specific 
means throwing advice handle exceptions thrown specific returning throwing advice 

advice run specific 

advice run return value step returned innermost call proceed step piece advice continues running 

innermost piece advice returns returns surrounding advice 

outermost piece advice returns control continues back join point 
aspects aspects modular units crosscutting implementation 
aspects defined aspect declarations form similar class declarations 
aspect declarations may include pointcut declarations advice declarations kinds declarations permitted class declarations 
declaration defines aspect implements behavior keeping track element moved 
aspect screen update mechanism find changed time screen updated 
sophisticated versions aspect proceeds 
aspect static boolean flag false static boolean boolean result flag flag false return result pointcut moves receptions void int int receptions void line setp point receptions void line setp point receptions void point setx int receptions void point sety int moves flag true advice aspect similar methods access members class 
case advice static variable flag 
aspect instances aspectj default behavior non aspects single instance 
advice run context instance 
aspect declaration accepts modifier called provides kinds aspect instance behavior 
discussion functionality outside scope 
aspect precedence general piece advice may apply join point 
different advice come different aspects aspect 
relative order advice executes defined 
ordering fact aspects primary units crosscutting functionality 
advice ordering specificity resolved respect relative precedence aspects advice defined 
pieces advice defined aspects respectively relative specificity determined follows whichever piece advice appears aspect declaration body specific 
rule exists aspect may need define multiple advice apply join point 
commonly happens matching advice happen pieces advice kind 
directly indirectly extends specific 
rule natural extension method overriding rules oo languages 
supports common case related advice defined aspects naturally exist extends relationship 
section discusses aspect inheritance overriding detail 
declaration includes dominates modifier mentions specific 
rule exists cases programmer needs control precedence aspects exist extends relationship 
cases relative specificity undefined 
common case conceptually semantically independent aspects define advice apply join point programmer need control relative ordering advice 
mobility aspect example dominates modifier 
simple aspect implements global flag freezes elements move 
aspect works checking flag move operation simply doing quiet abort operation moves disabled 
aspect mobility dominates private static boolean true static void true static void false returns void moves proceed sense aspect extend doesn define specialized version move tracking functionality 
essential precedence abort move gets registered 
note code aspect shows aspect refer pointcut defined aspect way static fields referred java 
pointcut parameters cases useful advice access certain values execution context join points 
example sophisticated version move tracking aspect record specific elements moved just single bit saying element moved 
aspectj provides parameter mechanism possible advice see subset values execution context join points 
mechanism operates advice pointcut declarations 
advice declarations values passed pointcut designator advice 
pointcut declarations values passed constituent pointcut designators user defined pointcut designator 
cases flow values right left 
net effect values available primitive pointcut designators body advice 
example piece advice access object receiving method call argument call point int receptions void setx system println value set parameter mechanism uses combination positional name matching 
list parameters left declares piece advice parameters type point int named respectively 
right colon parameter names position type name normally appear say parameter get corresponding value 
setx mean effective signature point setx int get object receiving call get value argument call 
definition parameters works similar way user defined pointcuts 
code pointcut fe receptions void fe int int bound element pointcut declaration says exposes single parameter type receiver method call 
advice declaration says bound parameter element moved 
note name parameter pointcut declaration advice declaration 
values exposed primitive pointcut designators 
common case instanceof parameter provide access object making call follows pointcut gets object caller instanceof caller calls int point getx calls int point gety calls point line calls point line primitive pointcut designators expose values suggested naming convention table 
position method signatures exposes object receiving method call 
static typing receiver highly polymorphic pointcut designator moves common super type accepts method calls pointcut type accepts setp setp setx sety 
means isn possible write moves expose element moving simply plugging common parameter receiver position receptions 
write pointcut moves fe receptions void fe int int receptions void fe setp point receptions void fe setp point setp defined 
object receiving calls picked instanceof follows pointcut moves fe instanceof fe receptions void int int receptions void line setp point receptions void line setp point receptions void point setx int receptions void point sety int access return values cases returning advice may want access value returned join point 
done special syntax clear return value returning advice point returning int receptions int getx system println returned getx parameters proceed advice parameters proceed accepts parameters signature advice 
calling proceed different actual values parameters cause remaining advice rest computation see new values 
implement advice pre processing values follows int nv returns void receptions void point setx nv receptions void point sety nv proceed math max nv effect advice ensure method call change coordinate point parameter clipped greater zero change proceeds 
reflective access join point certain kinds advice easier write aspectj provides simple reflective access information current join point 
body advice declaration special variable bound object representing current join point 
join point object provides information common join points kind join point signature surrounding method 
provides information specific kind join point field join point provides access field signature 
inheritance overriding advice pointcuts support aspect libraries aspectj provides simple mechanism pointcut overriding advice inheritance 
mechanism programmer defines aspect pointcuts advice pointcut 
kind library aspect parameterized aspects extend 
example defines simple library tracing functionality 
aspect pointcut entering exiting void string joinpoint code print informative message information join point library aspect specific situation just requires extending aspect supplying concrete definition pointcut 
aspect extends pointcut receptions void int int making pointcut concrete sub aspect effect inheriting advice declaration super aspect sub aspect 
sub aspect includes dominates modifier modifier affects precedence inherited advice 
property crosscutting pointcuts defined terms explicit enumeration method signatures 
appropriate cases useful able define pointcut means certain properties join points 
enable property crosscutting aspectj includes kinds features pointcut designators control flow pointcut designators 
pointcut designators 
aspectj includes simple mechanism pointcut designators 
examples mechanism allows programmer say receptions point matches receptions calls method defined class point int int getx gety setx int sety int 
receptions point new matches receptions calls constructor object type point point int int constructor 
receptions public com xerox scanner matches receptions calls public method defined type com xerox scanner package 
receptions point get matches receptions calls method defined point id starts get accepts zero arguments nullary getx gety control flow crosscutting 
aspectj includes primitive pointcut designators allow picking join points particular control flow relationship join points 
order designators differ accept pointcut designators parameters 
cflow pcd pointcut designator matches join points strictly dynamic extent join points matched pcd 
points matched pcd matched cflow pcd 
canonical cflow distinguish top level versus recursive calls method 
example pointcut moves fe pointcut fe moves fe cflow moves match calls methods defined class object 
programmer explicitly wants exclude write receptions point receptions object 
definition reads join point matched moves control flow moves 
words move operation invokes move operation recursively recursive operation matched 
implementation section briefly outlines current language implementation 
main aop language implementation ensure aspect non aspect code run properly coordinated fashion 
coordination process called aspect weaving involves making sure applicable advice runs appropriate join points 
case language features aspect weaving done special pre processor compilation processor load time part virtual machine residual runtime instructions combination approaches 
aspectj language design strives silent issue aspect weaving done 
provide compiler implementation language weaving compile time 
exposes programming errors possible compile time avoids unnecessary runtime overhead 
certain special cases advice involve residual dispatch overhead runtime 
compiler uses pay go implementation strategy 
parts program unaffected advice compiled just standard java compiler 
compiler transforms source program ways body advice declaration compiled standard method parts program advice applies transformed insert static points corresponding dynamic join points code implement residual dynamic dispatch inserted static points 
compilation advice bodies advice body compiled standard method advice run call method appropriate points code 
potentially means advice add overhead single method call 
methods static final easily inlined jvms 
means generally observable performance overhead additional method calls 
advice body compiled method body corresponding static point code 
allows pass needed state efficiently call stack implement proceed statement needing java reflection mechanisms 
implementation strategy trades increase bytecode size significantly reduced runtime overhead 
corresponding method compiler transforms source program form explicit corresponding method dynamic join point advice runtime 
transformation performed join points advice join points 
example program advice pointcut designated gets int point compiler transform form point point jp add method class point private static int jp point obj return obj corresponding method generated advice implemented making corresponding method call advice methods needed 
cases including compiler add additional method calls order create corresponding methods 
happens method call method call reception field access join points 
extra method calls added part implementation strategy advice 
overhead methods small jvm static final optimized away jvms 
expect version aspectj compiler provide optimizing modes eliminate minor overheads 
dynamic dispatch certain pointcut designators cflow instanceof require run time test determine particular corresponding method matches particular join point designator 
cases corresponding method includes residual testing code guards execution advice 
overhead relatively small 
tool support fig 

portion screen extension 
main window right shows code class point 
structure view left shows class point shows setx sety crosscut advice setx expanded show advice crosscuts 
user click advice jump 
object oriented programming development tools typically allow programmer easily browse class structure programs 
support enables programmer see inheritance overriding structure program seeing compact representations contents individual classes 
aspectj developing analogous support browsing aspect structure 
enables programmer see crosscutting structure programs 
works showing bi directional coupling aspects advice classes members advice affect 
shows extensions 
extension structure view tool allows programmer easily see summary crosscutting affecting class point 
structure view window focused aspect show targets aspect advice 
second kind environment extension provides light weight reminder aspect structure 
extension works annotating source code seen editor indication aspects crosscut code 
shows extended emacs functionality 
automatically generated annotations name aspects crosscut method 
keystroke command pop menu advice choose jump 
currently support aspectj aware extensions emacs forte java 
additional tool support includes debugger extensions understand advice display correctly stack extensions javadoc understand crosscutting structure generate appropriate hyper links fig 

portion screen aspectj aware extension emacs 
text square brackets method declarations automatically generated serves remind programmer aspects crosscut method 
extensions consulting database maintained compiler 
api stabilizes intend public develop tools 
understanding crosscutting structure important questions answer easy program aspectj 
particular crosscutting structure implemented aspectj appears easy understand 
experience say sure experience date suggests answer 
modular concise explicit consider simple aspect part editor example 
aspect implements simple error logging functionality public method defined type com xerox printers package logs errors throws back caller 
aspect log log new log pointcut receptions public com xerox printers throwing error log write aspect appears better plain java implementation functionality ways aspect modular 
ordinary java implementation code aspect spread public method 
aspect concise 
plain java version lines code added public method wrap body try catch statement 
aspect explicit 
code structural invariant underlying crosscutting clear 
quick look code takes understand public methods defined com xerox printers package error logging 
consider program maintenance scenario programmer system kind functionality 
plain java implementation programmer discover logging code method time 
seeing methods programmer guess logging done public methods class package 
careful tool grep sure 
course guess 
aspectj implementation public method carry annotation similar figures programmer look public method see annotation figures tell method crosscut aspect 
quickly go aspect read lines code understand intent code 
structural invariant underlying functionality public methods log clear enforced 
aspects explicit enumeration method signatures modular concise explicit plain java counterparts 
consider familiar moves pointcut pointcut moves fe instanceof fe receptions void int int receptions void line setp point receptions void line setp point receptions void point setx int receptions void point sety int pointcut enumeration property putting complete set method signatures single place crosscutting structure explicit clear 
reading aspect easy tell invariant preserves moves records fact 
writing mobility aspect terms moves clear multiple aspects implementation crosscut move operations 
ide support ensures happen looking setx method point see mobility crosscut 
navigating aspect show structure fact mobility defined terms 
clarity preserved enumeration crosscutting property crosscutting 
evident pointcut 
pointcut fe moves fe cflow moves experience cflow pointcut designator takes short people learning aspectj learn find quite easy understand code 
certainly easier understand going middle classic tangled implementation functionality 
clear explicit crosscutting structure come way multiple advice declarations interact 
aspect section advice declarations entering exiting knowing join points match understand important structure code entering exiting messages happen pairs way back join points matched 
role ide technology ide technology plays important role scenarios 
course preparing encountered bug mobility inconsistent moves pointcuts 
bug immediately apparent environment showed numerous methods tagged mobility aspects method tagged just 
standard practice oo programmers kind ide support easy incorporate aspectj support ide believe reasonable expect programmers ide support available scenarios 
ability ide structure program depends degree code declaratively captures structure 
oo ides job presenting inheritance structure code oo programming languages captures inheritance explicitly 
aspectj ide support works code aspectj captures crosscutting explicitly 
related earlier proposed aspect oriented programming examples domain specific aop languages developed 
aspectj differs systems general purpose language integrated java dynamic join point model developing full compiler just pre processor 
aop adaptive programming provides special purpose declarative language writing class structure traversal specifications 
language prevents knowledge complete class structure tangled code 
adaptive components build adaptive programming similar graph language techniques allow flexible linking aspectual components classes 
aspectual components reusable 
aspectj supports reusable aspects pointcut overriding advice inheritance mechanism requires special graph language 
composition filters wrap objects inside filters operate messages objects receive 
filters crosscutting access messages received object 
attachment filters objects done part class definitions composition filters suited aspectj crosscuts involve class 
de proposed logic meta programming lmp approach serve kind aop language toolkit 
approach equivalent pointcut designators logical queries specify crosscuts 
approach take advantage unification define parametric pointcut designators 
supports higherorder pointcut designators 
considered extending aspectj kind power decided order keep language simpler easier java developers learn quickly 
may re consider issue release believe current pointcut designator syntax leaves room upward compatible way 
multi dimensional separation concerns subject oriented programming means composing integrating disparate class hierarchies subjects represent different concerns 
multi dimensional separation concerns intended separate concerns multiple dimensions 
hyper specific proposal 
hyper works having programmer write kinds meta declarations describes slice concerns set classes second describes re compose concerns new program 
hyper potential slice concern code re factoring classes 
comparison aspectj separation crosscutting concerns done original code writing aspect 
believe re factoring code aspect easier maintain slicing concerns soon know 
reflection computational reflection enables crosscutting programs 
example possible write small piece meta code runs methods 
smalltalk included meta level functionality 
krs proposed different meta level architectures oo languages pcl provided efficient metaobject protocol 
research reflection explored varying meta level architecture support different kinds crosscutting achieve flexibility sacrificing performance 
exception reflective access aspectj designed semantics advice meta programming reflective semantics 
particular aspectj identifiers pointcut designators refer program representation interpreter state involve reification 
object oriented programming flavors new flavors clos support multiple inheritance declarative method combination open classes 
supports multiple inheritance 
aspectj includes elements aspectj provides powerful modular support crosscutting achieved features 
declarative method combination clos line languages sufficient aop lacks pointcut mechanisms enable crosscutting 
ordinary multiple inheritance mi sufficient aop reasons 
single aspect include advice different participants multi class interaction 
mi separate mixin class defined participant class 
second aspects reverse inheritance aspect declares classes affect vice versa 
means adding removing aspects system require editing affected class definitions 
completely unstructured open classes clos ancestors enable degree crosscutting modularity totally unstructured way 
aspectj classes aspects modular units aspect crosscut classes 
flavors new flavors clos common lisp module system called package system 
typically coarse grained ways certainly level single classes java usually level single packages java 
walker murphy proposed system implicit context intended improve separation concerns 
implicit context similar aspectj separation explicit source code 
differs aspectj provides reflective access entire call history system 
explicit context reason wider dynamic context possible cflow 
aspectj programmers write aspects manually gather call history information duplicate explicit context functionality 
implicit parameters provide dynamically scoped variables statically typed milner framework 
implicit parameters lexically distinct regular identifiers bound special construct scope dynamic static 
implicit parameters power cflow pass dynamic context 
implicit parameters powerful binding create set site 
explicit crosscutting modularity support parameter spread code 
implementations scheme provide fluid construct dynamically binds variables side effect re previous binding evaluation body completed 
plan aspectj basis empirical assessment aspect oriented programming 
want develop real aop user community understand practical effects aop 
main focus building supporting user community 
enable focusing fine tuning language design improving quality compiler ide extensions documentation 
compiler main limitations currently working uses javac back generating class files directly requires access source code system performs full recompilation part user program changes 
believe know build incremental compiler perform reasonably modestly large systems fast incremental compilation language aspectj definitely area research 
tools area plan support ides 
crosscutting structure browsing api allow develop tools understand aspectj code 
existing navigation model doesn capture structure cflow pointcuts area 
release plan explore new kinds pointcut designators dataflow properties program 
goal functionality call able capture crosscuts extent value control boundary crossings 
summary aspectj seamless aspect oriented extension java 
programming aspectj feels small extension programming java 
aspectj programs largely ordinary java programs ordinary java class modularity aspects implement crosscutting modularity 
implementing crosscutting concerns aspectj benefits ways plain java implementation functionality implementation modular concise structure crosscutting captured explicit form properties programming environment tools help programmer navigate understand structure 
looking forward goal aspectj user community assess benefits aspect oriented programming complex systems continue explore language design methodological issues 
aspectj users 
suggestions questions bug reports invaluable getting project today 
users project possible 
brian de chris gail murphy helped detailed comments 
extensive comments bob filman robert anonymous reviewers helpful 
builds contributions numerous past members research group 
particular john lamping cristina lopes played major roles getting aop aspectj today 
partially supported defense advanced research projects agency contract number 
partially supported natural sciences engineering research council nserc canada xerox canada limited sierra systems 
java forte trademarks sun microsystems 
trademark 

proceedings conference domain specific languages dsl 
usenix santa barbara california usa 
bobrow merging lisp object oriented programming 
proceedings conference object oriented programming systems languages applications oopsla 
acm portland oregon 
cannon flavors non hierarchical approach object oriented programming 
symbolics 
kiczales feeley exploring aspect oriented approach operating system code 
position advanced separation concerns workshop conference object oriented programming systems languages applications oopsla 
acm minneapolis minnesota usa 
aspect oriented logic meta programming 
meta level architectures reflection reflection 
springer saint malo france 
filman friedman aspect oriented programming quantification obliviousness 
position advanced separation concerns workshop conference object oriented programming systems languages applications oopsla 
acm minneapolis minnesota usa 
friendly design javadoc 
design distributed hyperlinked programming documentation 
springer verlag montpellier france 
goldberg smalltalk interactive programming environment 
wesley reading ma 
goldberg robson smalltalk language implementation 
addison wesley 
green petre usability analysis visual programming environments cognitive dimensions approach 
journal visual languages computing 


griswold java hotspot virtual machine architecture 
sun microsystems 
matsuoka yonezawa reflective object oriented concurrent language run time kernel 
international workshop new models software architecture imsa reflection meta level architecture 
city tokyo 
irwin aspect oriented programming sparse matrix code 
proceedings international symposium computing object oriented parallel environments 
springer marina del rey ca usa 
kiczales aspect oriented programming 
proceedings european conference object oriented programming ecoop 
springer verlag finland 
kiczales rodriguez efficient method dispatch pcl 
lisp functional programming 
acm press nice france 
lewis implicit parameters dynamic scoping static types 
proceedings th annual acm sigplan sigact symposium principles programming languages 
boston massachusetts 
lieberherr adaptive object oriented software demeter method propagation patterns 
pws publishing boston 
lopes kiczales language framework distributed programming 
technical report spl 
xerox palo alto research center palo alto ca 
maes concepts experiments computational reflection 
proceedings conference object oriented programming systems languages applications oopsla 
acm orlando florida 
matsuoka yonezawa designing oo reflective language massively parallel processors 
position workshop object oriented reflection metalevel architectures conference object oriented programming systems languages applications oopsla 
washington dc 
matsuoka watanabe yonezawa hybrid group reflective architecture object oriented concurrent reflective programming 
proceedings european conference object oriented programming ecoop 
springer geneva switzerland 
coda mop 
position workshop object oriented reflection metalevel architectures conference object oriented programming systems languages applications oopsla 
washington dc 
mendhekar kiczales lamping rg case study aspect oriented programming 
technical report spl 
xerox palo alto research center palo alto ca 
mezini lieberherr adaptive plug play components evolutionary software development 
proceedings conference object oriented programming systems languages applications oopsla 
acm vancouver british columbia canada 
moon object oriented programming flavors 
proceedings conference object oriented programming systems languages applications oopsla 
acm portland oregon 
okamura ishikawa tokoro metalevel decomposition international symposium object technologies advanced software 
springer verlag 
ossher subject oriented composition rules 
proceedings conference object oriented programming systems languages applications oopsla 
acm austin texas 
ossher tarr hyper multi dimensional separation concerns java 
proceedings international conference software engineering icse 
acm limerick ireland 
parnas criteria decomposing systems modules 
communications acm 


parnas software engineering methods multi person construction multi version programs 
lecture notes computer science 
programming methodology 

shneiderman direct manipulation step programming languages human computer interaction multidisciplinary approach baecker buxton editors 
morgan kaufmann publishers los altos ca 
smith reflection semantics procedural language phd thesis 

smith reflection semantics lisp 
proceedings symposium principles programming languages popl 
acm 
steele common lisp language 
nd ed 
digital press 
stroustrup programming language 
rd ed 
addison wesley 
tarr degrees separation multi dimensional separation concerns 
proceedings international conference software engineering icse 
acm los angeles ca 
walker murphy implicit context easing software evolution reuse 
proceedings conference foundations software engineering fse 
acm san diego california 
watanabe yonezawa reflection object oriented concurrent language 
proceedings conference object oriented programming systems languages applications oopsla 
acm san diego ca 
