workflow activity model wamo research johann eder walter liebhart institut fr informatik universitt klagenfurt klagenfurt austria email eder walter ifi uni ac workflow technology lived expectations social problems technical problems inflexible rigid process specification execution mechanisms insufficient possibilities handle exceptions 
aim workflow model significantly facilitates design reliable management complex business processes supported automatic mechanism handle exceptions 
strength model simplicity application independent transaction facility advanced control mechanism workflow units guarantees reliable execution workflow activities 
cooperative information systems workflow management key technologies providing efficiency effectiveness office 
workflow management system wfms system completely defines manages executes workflow processes execution software order execution driven computer representation workflow process logic 
course steps tasks workflow process restricted execution software programs modules unit done phone call 
success stories area workflow generally acknowledged workflow lived expectation 
social problems cultural resistance change lot technical problems insufficient tools methodologies describe processes exceptions 
additionally current available workflow systems support automatic operation execution status monitoring enforcement consistency concurrency control recovery failure 
want address mentioned shortcomings introducing transaction oriented workflow activity model wamo enables workflow designer modeling correct business processes potential exceptions may arise process execution 
exceptions handled automatically underlying workflow system partially developed 
main goals provide mechanisms defining controlling long lived activities just transactions traditional dbmss control short computations 
ideas transactional workflows combination workflow systems database management systems dbmss intention incorporate advantages technologies 
remainder organized follows rest section focus exceptions failures related research activities area workflow specification execution 
section describe workflow activity model wamo help workflow metamodel 
section define semantics model workflow activity description language describe workflow processes wamo 
additionally analyze safety questions modelled processes small example 
example shows workflow arrangement trip reservation including dependencies units payment may start flight reservation done car room reservation may started flight reservation terminates positive result compensation units exception handling client cancels flight flight reservation undone 
section concludes 
exceptions failures exceptions failures basic characteristics cooperative information systems 
type level examples unexpected exceptions process definition level structure modelled process handle special case change order processing important client expected exceptions wamo level process steps fails client pay bill flight booked booked application failures application level program failures constraint violations basic failures system level system crash deadlocks connection problems printer breakdown classification failures exceptions adequate efficient treatment exceptions failures cooperative information systems especially workflow systems critical success factor 
identified different types failures exceptions associated corresponding levels failures exceptions handled 
classification summarized table precisely explained remaining part subsection 
basic failures failures kind handled system level corresponding components underlying system dbms operating system network software 
typical failures database area deadlocks connection problems media failures 
known techniques rollback redo reread record manage failures consistent way 
failure system crash happens wfms responsible storing necessary context information process information order automatically restart interrupted processes soon underlying dbms consistent state available 
application failures failures mainly comprise programming failures unexpected components tasks application program 
wfms interrupt current process execution faulty task wait human expert eliminated failures 
ideally workflow administrator possibilities handle failures temporarily order enable process progress perform task manually skip faulty task lead inconsistent states failure corrected corresponding person 
case process restarted workflow administrator 
expected exceptions characterize expected exceptions represent normal case may arise frequently special mechanisms available handle special cases 
workflows typically consist tasks depend progress success failure result tasks 
wamo workflow designer possibility specify process definition process behave particular task terminates negatively flight booked booked 
general aim forward progress positive execution task expected definitely possible may necessary undo previous computations especially compensate previous tasks order reach consistent state try continue process execution executing alternative path order reach process 
want emphasize situations occur frequently necessary support modeling automation exceptions 
mentioned wamo offers adequate simple mechanism handle exceptions usage special transaction specific constructs process definition see subsection 
main advantage concept workflow designer needs specify possible process execution alternatives lead complex incomprehensible process description computed executed reliably system runtime execution 
unexpected exceptions important class exceptions concern necessity change current process structure defined workflow runtime totally new unexpected requirements change order processing important client 
course recommended feasible model possible exceptions wfms open handle situations adequate runtime skip activity change order activities 
exceptions level detailed described 
related important areas related research activities concerning advanced transaction models 
step evolution traditional flat transaction model development closed nested transactions 
main advantages nested transaction model support modularity decomposition transactions failure handling granularity subtransactions parallelism 
interesting extension area nested transactions open nested transactions 
relax isolation requirements nested transactions results committed subtransactions visible concurrently executing nested transaction 
new dimension evolution transaction models opened concept compensation example saga model 
sagas long lived transactions interleaved order subtransactions sagas 
saga requires subtransactions complete execution compensating transactions run undo effects partial execution 
lot related done area distributed transaction management example development dom transaction model allows closed nested open nested transactions 
flexible transactions model nested transaction model proposed transaction model suitable multidatabase environment 
objective multidatabase systems integrate autonomous software systems legacy systems close objective workflow systems try integrate local services institution text systems services autonomous institutions 
multidatabase systems interesting research activities defining general purpose flow languages 
important issues related transactional workflow models example addressed long running activities transactional workflows contract model 
long running activity consists recursively multiple application steps activity nested transaction 
control flow data flow activity may specified statically activity script dynamically eca rules 
model includes compensation communication steps exception handling 
precise overview transactional workflows including description model task state machine introduced 
contract model tries provide formal basis defining controlling longlived complex computations 
contracts seen mechanism grouping transactions multi transaction activity 
contract consists set predefined actions acid properties called steps execution plan called script 
main difference related model easier require skilled programmers flexible modeling complex business processes possibility selectively easy expressive control structures intuitive simple transaction specific features 
additionally model supports automatic handling exceptions presume existence database system advanced transaction mechanism 
workflow activity model wamo wamo enables workflow designer easily model complex business processes simple straightforward manner 
basic idea decompose complex business process smaller units activities consist ideally preexisting tasks guarantee reliable flow control automatic exception handling control structures special transaction parameters input workflow scheduler 
conceptual wamo architecture general accepted workflow metamodel lot efforts defining model 
developed metamodel incorporates traditional workflow modeling features transaction specific features 
metamodel adopted purpose contain necessary components workflow metamodel 
workflow typically consists multiple activities forms agents 
activities represent description units business process 
form data container folder stores process application relevant data 
forms passed activities necessary communication 
agent processing entity responsible execution activities 
wam agent precisely modelled help users roles 
characteristic feature approach seq rc fc par complex compensate typ part related vital order agent form activity task user role input output executes workflow isa parent sub wamo metamodel activities may consist activities representing subprocesses 
furthermore possible certain activity takes part activities especially times activity 
design level related association activities 
allows new workflows easily composed predefined activities 
subprocesses occur times different processes designed 
maintenance necessary change subprocess changed workflows appears 
definition dependencies activities occurrence activity workflow aware process context 
transform design information contained metamodel activity trees tree workflow 
activity trees different occurrences activity unambiguously distinguished define dependencies activities basis activity occurrences 
distinguish activities activity occurrences necessary clarity 
additionally exist complex activities model specify control structures behavior activities 
control structures illustrated edges nested activities activity tree 
leave activities activity tree tasks elementary units decomposable database transactions application programs software modules autonomous services network human interactions 
want emphasize treat tasks black boxes developed workflow designer corresponding interface order communicate start task data exchange 
additionally task activity tree corresponding parent activity 
control structures structuring mechanisms support decomposition business processes smaller units define flow control units activity tree 
simple powerful control structures sequence sequence activities executed strictly sequential 
means activity execution activity terminated 
ranked choice construct enables modeling alternative contingency activities 
alternative activity executed immediate previous activity fails commits unsuccessfully 
free choice free choice construct similar ranked choice activation order alternative activities free choice list computed dynamically run time 
parallel parallel control structure enables activities tasks run concurrently 
nesting decomposition activities supported concept nesting 
activity decomposed smaller complex 
execution activities tasks run time activities associated unique identifiers activity tree defines execution order activities tasks activity execution tree aet 
activities tasks different execution states execution active forth 
additionally activities tasks able react events start abort commit 
activities tasks aet executed control advanced transaction manager 
main characteristics underlying transaction model relaxed atomicity application may application dependent failure atomicity 
workflow may survive forward progress tasks terminate successfully 
relaxed serializability possible execute entire workflow single isolated transaction achieve data consistency 
approach consistency guaranteed user defined semantic serializability concurrent interleaving workflows dependencies correct execution individual workflow intra workflow dependencies 
traditional conflict serializability criterion necessary traditional db transactions tasks 
relaxed isolation isolation relaxed means activities may externalize uncommitted results release resources achieve higher degree concurrency 
dangerous feature complemented concept compensation enables semantic undo committed activities 
advanced transaction features easy control workflow designer process specification construction aet example control structures control structures simple expressive mechanisms handle activity coordination requirements dependencies 
transaction specific features tasks specified detailed type force parameter 
additionally activities essential successful termination corresponding parent activity defined non vital nv 
type force parameters task necessary eventual compensation transactions 
type workflow designer may specify specific task behaves case compensation 
possibilities committed task need compensated relevant application point view 
committed task undone corresponding compensation task side effects 
database state time original task tc compensation task 
database state executing tc sequence equals previous state time operation executed 
client flight reservation cancels reservation paying cancellation fee expert attaches notice document may undone simply removing 
compensatable committed task semantically undone corresponding compensation task side effects 
database states original task tc compensation task 
database state executing tc sequence may equal previous state regardless time operations executed client flight reservation cancels reservation pay cancellation fee money transfer back transfer transfer fees 
critical task undone compensated exists compensation task undo committed effects drilling hole mailing sensitive information 
tasks real world situations expected terminate successfully open account print document 
natural feature may demanded tasks model parameter force specification task 
task terminates negatively connection problem similar repeated re executed times specified workflow designer positive achieved 
process execution stops workflow administrator intervene manually fix defect restart task change state task 
activities tasks may exist activities workflow aet essential parent activity terminate successfully 
parent child relations introduced transaction specific parameter non vital 
non vital activity fails workflow continue forward progress compensation actions travel agency booked flight possible rent car specified non vital activity necessary interrupt compensate trip reservation 
normally activities workflow aet essential vital parent activity 
case vital activity fails compensation mechanism activated 
example vital activity sequence fails sequence fails means previous successful committed activities tasks sequence compensated 
definition workflow activity description language formalization complex business process developed simple high level workflow activity description language 
explained basic elements model activities tasks control structures transaction specific parameters 
introduce syntactic sketch complete definition backus naur form definition activity id sequence nv nv sequence ranked choice ranked choice free choice free choice parallel nv nv parallel task activity definition definition task id type force acid transaction inverse task id inverse task necessary type compensatable task definition usage workflow designer able decompose complex business processes smaller complex units subprocesses 
semantics language especially workflow coordination requirements control data flow units described formally dependency rules valid state transitions nodes activities tasks aet 
possible state transitions mainly depend execution states flight reservation possible task commits successfully output values activities tasks 
main idea implement language define necessary dependencies help acta transaction metamodel map specifications production rules 
rules integrated existing prototype active database system 
currently moving active dbms 
short overview acta acta transaction framework facilitates formal description properties extended transaction models 
allows specification transaction types transaction type intentionally describes set transaction instances share structure behavior 
acta effects transactions transactions dependencies effects objects visibility conflicts operations objects constraints histories formally specified 
transaction instances issue events mainly transaction events commit object events data manipulation events 
event causes unit switch particular state 
concepts important history concurrent execution set transactions contains events associated transactions indicates partial order events occur 
predicate true event precedes event history false 
condition denotes implication specifies event belong history condition satisfied 
words condition necessary condition predicate involving events condition specifies condition holds history words condition sufficient typically parts semantics transaction type depend relationships types may expressed dependencies 
dependency implication constrains occurrence order events transactions 
dependency definition meaning abort dep 
ad abort ti abort tj aborts aborts commit termination dep 
ctd commit tj commit ti abort ti terminates commits serial dep 
sd tj tj commit ti abort ti execution commits aborts dep 
bd tj ti tj execution begun commit dep 
bcd tj commit ti tj execution commits abort dep 
bad tj abort ti tj execution aborts force commit abort dep 
cmd abort ti commit tj aborts commits table examples acta dependencies dependencies arise due structure dependencies parent child transactions due behavior operations objects 
examples structural dependencies summarized table 
semantics subsection briefly describe parts semantics help structural acta dependencies 
define essential events states model 
activity started initial state 
triggering event start activity changes state active 
corresponding child activities finished activity succeeds fails depending execution result child 
events semantics succeed commit successfully commit positive result 
fail corresponds commit unsuccessfully commit negative result abort semantically 
corresponding termination states called committed successfully committed unsuccessfully 
important feature wamo compensation concept 
normally compensation initiated vital activity fails 
general solution compensate previous successful committed activities current control structure inverse order 
important strategies compensating activities compensation successful committed activity propagated child activities task level reached 
task level corresponding task compensated type 
soon activity compensated successfully compensating activity changes state compensated 
compensation fails error raised manual intervention necessary 
soon relevant activities current control structure compensated parent activity control structure changes state committed unsuccessfully 
depending current system forward progress try alternative choice start new compensation process higher level 
mentioned compensation process shows successful committed activities compensated 
wamo possible abort active activity user system client trip reservation arranged falls ill reservation interrupted 
mentioned abort possible may endanger safety process see subsection 

nice feature wamo reusability compensation concept abortion vice versa 
abortion active activity roughly consists steps active activity changes state aborting intermediate activity state start state final state start active compensated compensating error aborted aborting committed unsuccessfully committed successfully compensate succeed fail fail succeed abort succeed fail event state diagram activities propagates abortion child activities tasks reached 
currently active task aborted state parent activity task changed aborted corresponds committed unsuccessfully 
remaining steps necessary complete abortion executed ordinary compensation compensate previously successful committed activities control structure 
change state parent activity aborted corresponds commit unsuccessfully continue compensation initial aborted activity reached 
point active activity aborted successful committed compensated 
state aborting activity changed aborted corresponds unsuccessful commit 
abortion process finished may necessary aborted activity vital activity 
abortion task demands additional actions necessary distinguish state task currently task corresponding mechanism handle abort event 
priori demand functionality task treat tasks black boxes 
possibilities handle abort task active task 
task reacts immediately abort event executes rollback leads state aborted corresponds committed unsuccessfully 
task active task means direct mechanism execute internal task specific rollback 
necessary wait task finished execution 
depending termination state task correct state failed 
task compensated type immediately 
state task changed aborted 
previous mentioned termination events activities tasks additional abort events tasks 
task may abort failure system level failure program level 
failure system level task restarted automatically times configured process specification time task succeeds 
possible task state changed committed unsuccessfully case task 
task manual intervention workflow administrator necessary safety reasons 
situation serious expected workflow designer system urgent request payment sent file necessary data corrupted 
way manual intervention necessary task aborts failure program level 
manual intervention depends current situation means correct failure restart task change execution state task order support process progress 
rest section analyze structural dependencies activities sequence 
abbreviations pa parent activity ca child activity vital child activity relation ca pa vital compa compensation activity implementation aspects activity corresponding compensation activity controls compensation number activity sequence structural dependencies activities sequence ca bd pa dependency pa ctd ca commit termination dep 
pa ad abort dependency ca sd ca serial dependency ca bcd commit dep 
semantics logical clauses child activity ca sequence started parent activity pa started 
pa succeeds soon ca sequence terminates succeeds fails vital child activity activity fails sequence pa fails 
sequence consists child activities activity ca sequence started soon previous activity ca terminated 
previous child activity vital activity child activity ca sequence started succeeds 
structural compensation dependencies activities sequence vital child activity fails compensation process activated 
previous executed activities committed successfully compensated inverse order 
parent activity fails 
compa bad abort dep 
compa cmd force commit abort dep 
compa bcd commit dep 
compa bcd compa commit dep 
semantics logical clauses compensation activity compa immediately previous succeeded successful committed activity vital activity started failed 
vital child activity fails compensation activity compa immediately previous successful committed activity succeed 
activity compensated succeeded 
successful committed activities sequence compensation activity compa successful committed activity started compa successful committed activity committed successfully 
complete definition structural dependencies workflow activity language 
safety defined processes workflow designer defined complex business process concepts wamo helpful compile specified process order check specified process unsafe 
define process unsafe process execution compensation critical task necessary proceed process execution 
pessimistic approach declare processes unsafe soon detect possible activation order activities tasks may lead unsafe process point forbid process specifications want inform workflow designer fact 
detection unsafe processes influenced parameters existence different control structures process definition 
usage special transaction parameters vital non vital activities 
concept compensation reason safety computations required compensation initiated vital activity terminates negatively 
usage task specific transaction parameter type 
tasks type critical play central role computation safety checked come compensation process 
usage task specific transaction parameter force 
tasks help improve safety process terminate positively 
stated task specific parameters critical force crucial safety computations 
inherited upwards parent activities leads critical activities activities 
activity critical activity iff conditions holds critical task parent sequence activities activity sequence critical activity parent ranked free choice activities activity choice critical activity parent set parallel activities activity parallel activities critical activity activity activity iff conditions holds task parent sequence activities vital activities sequence activities parent ranked free choice activities activity choice activity parent set parallel activities vital activities parallel set activities want emphasize semantics activity slightly different semantics task 
achieve semantics necessary tasks safe critical safe explained rest subsection 
able compute safety activities done bottom leave nodes aet root node aet 
distinguish different safety states safe critical safe unsafe 
activity safe critical task specified process critical task task process 
activity critical safe critical tasks process definition guaranteed process execution compensation critical task attempted 
important rules critical safe activities parent activity sequence activities critical safe iff conditions holds critical activities sequence critical safe vital activities critical activity sequence activities parent activity ranked free choice critical safe iff condition hold critical activities critical safe parent activity set parallel activities critical safe iff conditions hold critical activities critical safe vital activities activity unsafe safe critical safe 
possibility safety computations workflow designer warned compile time unsafe states process specification 
additionally possibilities transform automatically unsafe process definitions safe process definitions topic research 
small example subsection simplified incomplete business process example emphasizes important features model 
example illustrated graphically see formal usage activity trip reservation sequence flight reservation car room reservation nv payment document handling sequence activity flight reservation sequence prepare exec fr sequence activity flight reservation activity exec fr pay nv trip reservation flight reservation car room payment exec fr 
nv room res car res hilton cash cheque document reservation deliver handling archive deliver nv archive res res comp 
res comp 
res prepare activity ranked choice free choice sequence parallel nv non vital critical task task task compensation task trip reservation task res activity res activity car room reservation parallel room res car res nv parallel activity car room reservation activity payment free choice cash cheque free choice activity payment activity document handling parallel deliver archive parallel activity document handling task res compensatable res inverse task comp res task res 
activity trip reservation trip reservation consists activity sequence flight reservation car room reservation payment document handling 
car room res 
vital nv parent activity trip res activities sequence vital default 
means activities terminates negatively compensation process started automatically trip reservation fail 
example vital activity payment terminates negatively activities car room res 
flight res 
undone compensated 
flight res 
decomposed activities activity exec fr realized task res corresponding compensation task comp 
res 
car room res 
consists parallel executable activities room res car res 
modelled ranked choice consisting alternatives activation order left right room hilton system attempts different hotel 
non vital car res fails parent activity car room reservation may terminate successfully 
payment modelled free choice means activation order alternatives depends information computed execution time 
choice cash critical task pay executed means compensation task return money back client possible 
document handling consists activities may executed parallel 
additionally activity deliver succeed 
defined workflow activity model wamo supports workflow designer modeling complex business processes 
model concepts transactional workflows order guarantee reliable execution workflow activities advanced transaction management facility 
particular developed workflow metamodel incorporates traditional workflow modeling features transaction specific features high level workflow activity description language model transactional workflows 
strength language mainly simple structuring mechanisms possibility express application specific transactional requirements 
typically workflow activities long duration highly concurrent cooperative nature 
transaction facility enables relaxation atomicity serializability isolation example possibility compensate activities 
main advantages wamo exception handling mechanism 
workflow designer needs model possible process execution alternatives exceptions needs specify special tasks essential workflow compensation tasks 
process execution system automatically control reliable execution exceptions failures 
carefully compensating tasks tasks compensatable possible compute safety modelled processes warn workflow designer case modelled unsafe processes 
proposed transaction oriented workflow activity model integrated prototype system active database management system 
developing graphical application development interface design workflows possibility generate automatically 
workflow management coalition members glossary workflow management coalition specification 
november 
eder liebhart transaction oriented workflow activity model 
proc 
ninth int 
symposium computer information sciences turkey nov 
eder workflow system active databases 
th informatics conference austria 
mccarthy sarin workflow transactions inconcert 
bulletin technical committee data engineering vol 
june 
rusinkiewicz transactional workflows 
bulletin technical committee data engineering vol 

rules exceptions 
information modeling knowledge bases iv concepts methods systems eds 
ios press amsterdam pp 
exception handling office information systems proc 
third international conference dynamic modeling information systems noordwijkerhout 
moss nested transactions approach reliable distributed computing 
mit press cambridge ma 
weikum concepts applications multilevel transactions open nested transactions 

garcia molina salem sagas 
proc 
acm sigmod conf 
management data 
buchmann transaction model active distributed object systems 

elmagarmid leu litwin rusinkiewicz multidatabase transaction model 
proc 
th vldb conf 
brisbane australia 
bright hurson taxonomy current issues multidatabase systems 
ieee computer march 
kuehn general purpose flow languages 
appear int 
journal parallel distributed databases 
dayal hsu ladin transactional model long running activities 
proc 
th int 
conf 
barcelona sept 
contract model 

workflow model 
workflow management coalition specification document version june 
breitbart merging application centric data centric approaches support multi system workflows 
sigmod record vol 
sept 
liebhart formal description workflow activity description language 
tech 
report university klagenfurt austria 
chrysanthis ramamritham acta saga continues 

dittrich rule implementation transaction model specifications 
paton williams 
eds rules database systems 
workshops computing springer 
elmagarmid database transaction models advanced applications 
morgan kaufmann 
