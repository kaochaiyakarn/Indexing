compressed bloom filters michael mitzenmacher harvard university oxford st cambridge ma eecs harvard edu bloom filter simple space cient randomized data structure representing set order support membership queries 
bloom filters allow false positives applications space savings outweigh drawback probability error su ciently low 
introduce compressed bloom filters improve performance bloom filter passed message transmission size limiting factor 
example bloom filters suggested means sharing web cache information 
setting proxies share exact contents caches periodically broadcast bloom filters representing cache 
compressed bloom filters proxies reduce number bits broadcast false positive rate amount computation lookup 
cost processing time compression decompression simple arithmetic coding memory proxies utilize larger uncompressed form bloom filter 

bloom filters excellent data structure succinctly representing set order support membership queries 
describe detail section simply note data structure randomized uses randomly selected hash functions probability giving false positive may incorrectly return element set 
applications probability false positive su ciently small space savings significant bloom filters useful 
fact bloom filters great deal potential distributed protocols systems need share information data available 
example fan describe bloom filters web cache supported part nsf career ccr alfred sloan research fellowship 
sharing 
reduce message tra proxies transfer url lists corresponding exact contents caches periodically broadcast bloom filters represent contents cache 
proxy wishes determine proxy page cache checks appropriate bloom filter 
case false positive proxy may request page proxy find proxy page cached 
case additional delay incurred 
small chance false positive introduced bloom filter greatly outweighed significant reduction network tra achieved succinct bloom filter sending full list cache contents 
technique open source web proxy cache squid bloom filters referred cache digests 
bloom filters suggested distributed protocols 
insight situation bloom filter plays dual role 
data structure proxies message passed 
bloom filter data structure may tune parameters optimal performance data structure minimize probability false positive memory size number items 
approach taken analysis 
data structure passed message introduce performance measure may wish optimize transmission size 
transmission size may greater importance amount network tra concern memory available endpoint machines 
especially true distributed systems information transmitted repeatedly endpoint machine 
example web cache sharing system described required memory proxy linear number proxies total message tra rate quadratic number proxies assuming point point communication 
amount memory required endpoint machines fixed life system tra additive life system 
transmission size ected compression 
show compressing bloom filter lead improved performance 
compressed bloom filters protocols reduce number bits broadcast false positive rate amount computation lookup 
tradeo costs increased processing requirement compression decompression larger memory requirements endpoint machines may larger original uncompressed form bloom filter order achieve improved transmission size 
start defining problem optimization problem solve simplifying assumptions 
consider practical issues including ective compression schemes actual performance 
recommend arithmetic coding simple compression scheme suited situation fast implementations 
follow showing extend important cases case possible update sending changes deltas bloom filter new bloom filters 
underscores important general principle distributed algorithms data structure message consider parameters data structure roles mind 
transmission size important tuning parameters compression ectively may yield dividends 

compressed bloom filters theory bloom filters introducing bloom filters framework analysis 
bloom filter representing set 
sn elements described array bits initially set 
bloom filter uses independent hash functions 
hk range 

natural assumption hash functions map item universe random number uniform range 
mathematical convenience 
element bits set location set multiple times change ect 
check item check set 
clearly member set assume wrong probability 
bloom filter may yield false positive suggests element 
applications acceptable long probability false positive su ciently small 
probability false positive element set false positive rate calculated straightforward fashion assumption hash functions perfectly random 
elements hashed bloom filter probability specific bit kn kn kn probability false positive kn kn kn note asymptotic approximations represent respectively probability bit bloom filter probability false positive convenience 
clear discussion worth noting fundamental performance metrics bloom filters traded computation time corresponding number hash functions size corresponding array size probability error corresponding false positive rate 
suppose wish optimize number hash functions minimize false positive rate competing forces hash functions gives chances find bit element member fewer hash functions increases fraction bits array 
optimal number hash functions minimizes function easily derivative 
conveniently note equals exp ln kn 
ln kn 
minimizing false positive rate equivalent minimizing respect find dg dk ln kn kn kn kn easy check derivative ln orts reveal global minimum 
case false positive rate practice course integer smaller preferred reduce amount computation necessary 
comparison results useful frame optimization way 
letting function find ln ln ln 
symmetry expression easy check minimizes false positive rate optimal results achieved bit bloom filter probability roughly 
note bloom filters highly ective cn small constant 
alternative approach bits available simply hash item log bits send list hash values 
bloom filters allow significantly fewer bits sent achieving false positive rates 
compressed bloom filters optimization number hash functions assumption wish minimize failure false positive function array size number objects correct optimization consider bloom filter object residing memory 
web cache application bloom filter just object resides memory object transferred proxies 
fact suggests may want optimize number hash functions optimize number hash functions size data needs sent transmission size 
transmission size need able compress bit array 
choose parameters minimize failure probability compression 
consider standard uncompressed bloom filter optimized ln equivalently 
gain compressing resulting bit array 
assumption random hash functions bit array appears random string entry independently probability 
compression gain choice suppose choose entries bit array probability 
take advantage fact compress bit array reduce transmission size 
transmission bit array decompressed actual 
note uncompressed bloom filter size bits 
choice optimal uncompressed size goal optimize transmission size compression may yield better result 
question compression gains better simply smaller number bits array optimizing size 
assume lookup computation bloom filter done decompression proxies 
compression scheme provided random access allow compute compressed bloom filter achieving random access ciency compression simultaneously generally di cult 
possibility split bloom filter pieces compress piece 
look bit require decompressing certain piece filter entire filter reducing amount memory required 
approach slightly reduce compression greatly increase computation lookups occur updates 
contrast original bloom filter discussion note compressed bloom filters fundamental performance metrics bloom filters traded 
computation time corresponding number hash functions probability error corresponding false positive rate metrics uncompressed filter size bloom filter proxy memory continue denote number array bits transmission size corresponding size compression denote starting point consideration technically precisely true bits completely independent fact bit set ects probability bits set 
asymptotically practice ect negligible see example 
henceforth simplifying assumption independence bit values array 
precise argument interested reader appendix 
situations transmission size may important uncompressed filter size 
may establish problem optimization problem follows 
desired compressed size 
recall bit bit array probability treat bits independent 
mathematically convenient approximation assume optimal compressor 
assume bit filter compressed mh bits log log entropy function 
compressor uses optimal bits average bit original string 
consider practical implications carefully subsequently 
note just near optimal compressors exist arithmetic coding example requires average bits character suitably large strings 
optimization problem follows choose minimize subject mh possibility choose ln original optimized bloom filter 
guarantee better 
theory choice worst choice possible allow compression 
see write function ln subject may loss generality choose large possible 
equivalently ln nh fixed may equivalently seek minimize simple calculations show ln ln exp ln ln log ln ln 
interesting compare equation equation relevant expression shows similar symmetry additional terms due compression 
value maximized exponent maximized equivalently term ln ln minimized 
note dp ln ln ln ln value dp clearly symmetry easy check dp negative positive 
maximum probability false positive compressed bloom filter occurs equivalently ln 
emphasize point number hash functions minimizes false positive rate compression fact maximizes false positive rate compression 
said way idealized setting compression decreases false positive rate 
argument shows minimized minimized limiting situations goes 
case example expansion ln 
find goes 
goes limiting cases theory achieve false positive rate arbitrarily close letting number hash functions go infinity 
interesting worthwhile exercise try understand intuitively expression limiting case arises 
suppose start large bit array just hash function bloom filter 
way compressing bloom filter simply send array indices contain 
note equivalent hashing item bit string hash function suitably large values compressed bloom filter equivalent natural hashing solution 
thinking terms hashing clear increasing number bits items hashes drops false positive probability approximately gives insight result bloom filters 
practice significantly constrained limiting situations suggest general letting go corresponds respectively infinite number zero hash functions 
course hash function 
note theory shows may achieve improved performance ln compressed bloom filter 
additional benefit compressed bloom filter uses fewer hash functions requires computation lookup 
practical considerations discussed section 
optimization framework developed possible 
example fix desired false positive rate optimize final compressed size compare situation note limit number hash functions goes zero compressed bloom filter false positive rate tending standard bloom filter false positive rate tending ln best possible compressed bloom filter achieving false positive rate standard bloom filter ln savings size roughly 
significantly better realized practice 
primary point theoretical analysis demonstrate compression viable means improving performance terms reducing false positive rate desired compressed size reducing transmission size fixed false positive rate 
compressed bloom filter allows performance metric provides flexibility standard original bloom filter 
additional benefit compressed bloom filters smaller number hash functions lookups cient 
theory consider implementation details specific examples 

compressed bloom filters practice theoretical analysis avoided issues important real implementation restrictions size compressed bloom filter may primary importance limitations size uncompressed bloom filter constrain possibilities 
example theoretically hash function compressing achieving false positive rate hash function requires may large real applications 
may desirable power various computations 
restrict powers 
compression overhead compression schemes achieve optimal performance compression schemes associated overhead 
gain compressed bloom filter overcome associated overhead costs 
compression variability greater practical importance absolute maximum packet size generally want compressed array exceed packet size 
may send multiple packets leading increased network tra 
situations may want bound number packets send compressed bloom filter idea 
compression performance varies depending input number elements set exactly determined advance misprediction yield insu cient compression 
hashing performance depending data hash functions chosen real hash functions may behave di erently analysis 
issue achieving hashing performance arbitrary data sets outside scope consider raise points 
practice suspect standard universal families hash functions md suitable 
second situations hashing performance su ciently random expect compressed bloom filters generally outperform uncompressed bloom filter 
point false positive rate compressed bloom filter increased weak hash functions expect false positive rate uncompressed bloom filter increase compressed bloom filters fewer hash functions expect ect worse uncompressed filter 
compressed bloom filters additional problem weak hash functions may yield bit arrays compress expected 
choice parameters may tuned particular data type 
compression issues arithmetic coding provides flexible compression mechanism achieving near optimal performance low variability 
loosely speaking random bit string bit values independent bit probability probability arithmetic coding compresses string near mh bits high probability deviation average having cherno bound 
information arithmetic coding refer reader 
precise statements details regarding low variability arithmetic coding refer reader appendix 
note compression schemes may suitable including example run length coding 
compression scheme suggest approach 
choose maximum desired uncompressed size design compressed bloom filter theory slightly smaller compressed size desired example goal compressed size design structure compressed size 
provides room variability compression amount room necessary depends similar ect may achieved slightly overestimating uncompressed filter half full zeroes fewer expected elements set filter tend zeroes expected compress better 
design compressed filter desired size range high probability 
deal cases compress adequately suggest multiple filter types 
filter type associated array size set hash functions decompression scheme 
types agreed ahead time 
bits header represent filter type 
filter types standard bloom filter compression set sent appropriately types 
cases types compressed uncompressed su cient 
examples test theoretical framework examining specific examples performance improvements possible compressed bloom filters 
consider cases sixteen bits compressed bloom filter element corresponds configurations examined 
suppose wish bits set element transmission bloom filter 
optimal number hash functions yields false positive rate 
false positive probability preferable practice 
willing allow array bits uncompressed bloom filter set element reduce false positive rate reduce number hash functions keeping theoretical transmitted bits element shown table 
interesting compare standard bloom compressed bloom filter pictorially case 
show false positive rate function number hash functions theoretical analysis sections allow behave continuous variable 
note theory predicts optimized uncompressed filter yields largest false positive rate introduce compression 
tested compressed bloom filter simulation 
repeated experiment times 
bloom filter elements bits created element hashed positions chosen independently uniformly random bit array 
resulting array compressed publicly available arithmetic coding compressor mo neal witten 
mh suggests compressed size near bytes meet bound bits element requires compressed size exceed bytes 
trials average compressed array size bytes including overhead standard deviation bytes maximum compressed array size bytes giving bytes room spare 
larger expect greater concentration compressed size mean smaller variance larger fraction compressed size 
believe example provides insight achievable real situations 
theoretically better just hash function greatly increases number array bits element seen table 
similarly considering specific case bloom filter eleven hash functions achieve optimal false positive rate 
eleven hash functions somewhat large note reduce number hash functions applying compression hash functions doubles 
table summarizes improvements available compressed bloom filters 
allow array bits element false positive rate falls hash functions 
allow array bits element false positive rate falls hash functions 
simulated case elements bits hash functions trials 
theoretical considerations suggest compressed size bytes 
simulation trials average compressed array size bytes including overhead standard deviation bytes maximum compressed array size bytes bytes available 
tested case array bits table 
expect case may prove useful practical situations false positive rate high 
case standard bloom filter optimal hash functions yields false positive rate hash function gives false positive rate 
performed random experiments 
largest compressed filter required bytes just shy byte limit 
note adaptive compressor bases prediction bit bits seen far 
technically slightly suboptimal purposes generally know probability distribution bits ahead time 
practice di erence quite small 
hash functions standard compressed false positive rate function number hash functions compressed standard bloom filters bits element 
hash functions false positive rate standard compressed false positive rate function number hash functions compressed standard bloom filters bits element 
array bits element transmission bits element hash functions false positive rate table bits item compressed 
array bits element transmission bits element hash functions false positive rate table sixteen bits item compressed 
array bits element transmission bits element hash functions false positive rate table bits item compressed 
array bits element transmission bits element hash functions false positive rate table maintaining false positive rate 
array bits element transmission bits element hash functions false positive rate table maintaining false positive rate 
previously mentioned may consider optimization problem light may try maintain false positive ratio minimizing transmission size 
tables er examples scenario 
results yield transmission size decreases range roughly systems reasonable size 
simulations bear theoretical analysis 
example elements bits hash functions trials find average compressed filter required bytes closely matching theoretical prediction 
largest filter trials required bytes 

delta compression web cache sharing setting proxies periodically broadcast updates cache contents 
described updates new bloom filters representations changes updated filter old filter 
di erence delta updated old filter represented exclusive corresponding bit arrays size compressed arithmetic coding 
example may decide updates broadcast underlying array bits changed case compressed size delta roughly mh 
may wish optimize array size target size compressed delta allow time cost longer initial messages establish base bloom filter 
sense cast problem optimization problem manner similar done previously 
show compressed bloom filters conjunction delta compression yield greater performance gains 
emphasize delta compression may suitable applications 
example sending deltas may suitable systems poor reliability missed delta may mean proxy filter remains improperly synchronized long period time assuming full filters sent occasionally resynchronize 
cases sending deltas preferred 
suppose set elements changes time insertions deletions size fixed elements 
send delta fraction entries set changed 
consider case goal minimize false positive rate maintaining specific size delta 
power choose array size number hash functions compressed delta size denote setting probability bit delta fraction entries changed 
similar case compressed bloom filters constraint mh 
kn probability bit bloom filter 
determine expression terms parameters 
bit delta cases 
case corresponding bit bloom filter originally entries changed 
probability bit originally just probability cn new entries fail change bit asymptotic approximation probability case 
second case corresponding bit bloom filter originally entries changed 
equivalent previous case 
probability bit just probability cn deleted entries failed set bit probability case 

false positive rate satisfies ln ln nh minimizing equivalent minimizing ln ln unfortunately lost appealing symmetry array bits element transmission bits element hash functions false positive rate table comparing standard bloom filter compressed bloom filters delta encoding 
array bits element transmission bits element hash functions false positive rate table comparing standard bloom filter compressed bloom filters delta encoding 
standard compressed bloom filter making analysis expression unwieldy 
value appears minimized simple formal proof appears challenging 
worthwhile consider behaves limiting case 
algebraic manipulation yields case approaches cn result intuitive reasoning limiting case corresponds hashing element large number bits 
exponent cn updates represent deletions insertions cn items half bits sent describe array elements deleted 
examples results setting tables 
important note tables false positive rate bloom filter isolation additional false positives negatives may arise filter changed delta sent 
tables analysis take account compression overhead variability tend greater ect number transmitted bits smaller 
table consider case set elements change updates 
standard bloom filter bits element hash functions uses bits item delta compression 
alternative configurations array bits item fewer hash functions achieve transmission size dramatically reducing false positive rate times memory bits element decompressed filter lowers factor 
scenario hash functions tested simulations 
trials average compressed filter required bytes closely matching theoretical prediction bytes 
maximum size required bytes 
alternatively aim false positive ratio improving compression 
shown column table achieve false positive ratio standard bloom filter item reduction 
frequent updates elements change updates transmission requirements drop bit item standard bloom filter 
shown table substantial reductions false positive rate bits item achieved 

counting bloom filters authors describe extension bloom filter bit array bloom filter array uses small number bits entry keep counts 
jth entry incremented hash function element represented filter counting bloom filter useful items deleted filter item deleted decrement value location array hash functions emphasize counting bloom filters passed messages locally 
note passing wanted pass counting bloom filters messages compression yield substantial gains 
entropy array entry smaller number bits entry large counts extremely 
optimization approach finding appropriate parameters extended situation arithmetic coding remains highly effective 
expect similar variations bloom filters benefit compression 

shown compression improve bloom filter performance sense achieve smaller false positive rate function compressed size bloom filter compression 
generally example situation data structure message distributed protocol 
setting transmission size may important compression ects tune parameters data structure 
interesting find useful examples data structures tuned ectively di erent manner compressed 
suggests interesting theoretical questions 
example analysis depends highly assumption hash functions bloom filter behave completely random functions 
open question determine sort performance guarantees possible practical hash function families 
clear bloom filter necessarily best data structure problem data structure allow better results 
implemented compressed bloom filters context full working system application distributed web caching 
expect significant performance improvement occur minor costs compression decompression time factored 
interaction compressed bloom filter full system may lead interesting questions 
acknowledgments author andrei broder introducing bloom filters helpful discussions 

adler chakrabarti mitzenmacher rasmussen 
parallel randomized load balancing 
random structures algorithms pages 
alon spencer 
probabilistic method 
john wiley sons new york 
bloom 
space time tradeo hash coding allowable errors 
communications acm july 
mo neal witten 
source code arithmetic coding version 
available www cs mu oz au alistair arith coder 
march 
carter wegman 
universal classes hash functions 
journal computer system sciences pages 
czerwinski zhao hodes joseph katz 
architecture secure service discovery service 
proceedings fifth annual international conference mobile computing networks mobicom 
fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol 
proceeding sigcomm 
extended version available technical report computer sciences department univ wisconsin madison february 
howard vitter 
analysis arithmetic coding data compression 
information processing management vol 
pages 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
proceedings asplos 
mcilroy 
development spelling list 
ieee transactions communications january 
mo neal witten 
arithmetic coding revisited 
acm transactions information systems july 
ramakrishna 
practical performance bloom filters parallel free text searching 
communications acm october 
wessels 
cache digests 
computer networks isdn systems 
snoeren partridge sanchez jones kent strayer 
hash ip traceback 
appear sigcomm 
wessels 
squid frequently asked questions 
www squid org 
witten mo bell 
managing gigabytes nd edition 
morgan kaufmann san francisco 
appendix mathematical details section briefly discuss mathematical issues glossed previously 
specifically wish show size compressed bloom filter close mh high probability 
sketch argument omitting fine detail focusing main points 
calculated expected fraction bits bloom filter bits hash functions elements nk proceeded bits bloom filter independent probability nk di erence known small converges quickly ignore distinction subsequently 
bits bloom filter independent 
fact describe subsequently arithmetic coding perform suffices fraction bits highly concentrated mean 
concentration follows standard martingale argument 
theorem 
suppose bloom filter built hash functions elements bits model perfectly random hash functions 
number bits 
pr mp nk proof 
standard application azuma inequality 
see theorem 
pick order elements hashed 
expected number bits hashes 

martingale 
theorem follows 
arithmetic coding suppose adaptive arithmetic coder works follows 
counters incremented time bit value seen 
initially set avoid zero problems 
encoder decoder model probability bit determine perform arithmetic coding 
initially information encoder decoder assume bit equally 
recall arithmetic coding total length encoding logarithm inverse product model probabilities bit 
case bits total bits regardless position bits total length encoding satisfies log 

see example 
consider case constant 
simplifying log 

log log mh log 
approximation mh logm follows stirling formula constant 
high probability close close total number bits encoding close mh high probability 
