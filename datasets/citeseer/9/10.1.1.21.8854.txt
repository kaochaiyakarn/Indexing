indexing querying xml data regular path expressions advent xml standard data representation exchange internet storing querying xml data important 
xml query languages proposed common feature languages regular path expressions query xml data 
poses new challenge concerning indexing searching xml data conventional approaches tree traversals may meet processing requirements heavy access requests 
propose new system indexing storing xml data numbering scheme elements 
numbering scheme quickly determines ancestor descendant relationship elements hierarchy xml data 
propose algorithms processing regular path expressions join searching paths element join scanning sorted elements attributes find element attribute pairs join finding kleene closure repeated paths elements 
join algorithm highly effective particularly searching paths long lengths unknown 
experimental results prototype system implementation show proposed algorithms process xml queries regular path expressions sponsored part national science foundation career award iis research infrastructure program eia 
authors assume responsibility contents 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference roma italy li moon dept computer science university arizona tucson az cs arizona edu der magnitude faster conventional approaches 
extensible markup language xml emerged new standard information representation exchange internet 
xml data self describing xml considered promising means define semi structured data expected ubiquitous large volumes diverse data sources applications web 
xml allows users new tags descriptive markup applications 
user defined tags data elements identify semantics data 
relationships elements defined nested structures 
example xml metadata describe web site structure facilitate navigation generating interactive site maps 
retrieve xml semi structured data query languages proposed 
examples lorel xml ql xml gl quilt xpath xquery 
xquery public working draft query language xml released world wide web consortium 
xquery language designed broadly applicable types xml data sources documents databases object repositories 
common features languages regular path expressions ability extract information schema data 
users allowed navigate arbitrary long paths data regular path expressions 
example xpath uses path notations urls navigating hierarchical structure xml document 
despite past research efforts widely believed current state art relational database technology fails deliver necessary functionalities efficiently store xml semi structured data 
furthermore comes processing regular path expression queries straightforward approaches conventional tree traversals reported literature 
approaches fairly inefficient processing regular path expression queries overhead traversing hierarchy xml data substantial path lengths long unknown 
propose new system called indexing storing xml data new numbering scheme elements attributes 
index structures allow efficiently find elements attributes name string common operations process regular path expression queries 
proposed numbering scheme quickly determines ancestor descendant relationship elements attributes hierarchy xml data 
propose algorithms processing regular path expression queries join searching paths element join scanning sorted elements attributes find element attribute pairs join finding kleene closure repeated paths elements 
join algorithm highly effective particularly searching paths long lengths unknown 
main contributions proposed solutions proposed numbering scheme designed notion extended preorder accommodate insertions gracefully 
numbering scheme allows determine relationship elements attributes constant time 
major index structures proposed element index attribute index structure index 
index store xml data objects support search name string structure efficiently 
proposed join algorithms process regular path expression queries traversing hierarchy xml data 
experimental results prototype system implementation show proposed algorithms process xml queries times faster conventional approaches 
rest organized follows 
section numbering scheme major index structures proposed system 
section discuss potential inefficiency conventional query processing regular path expressions 
describe decomposition regular path expressions proposed join algorithms 
section presents results experimental evaluation proposed system join algorithms 
overview related briefly section 
section summaries contribution gives outlook 
xml indexing storage system xml data queried combination value search structure search 
search value done matching xml values document names element names values attribute names values 
search structure done examining relationships regular path expression queries 
facilitate xml query processing value structure searches crucial provide mechanisms quickly determine relationship xml elements fast accesses xml values 
section propose numbering scheme xml documents elements attributes enables efficient search value structure 
propose new xml indexing storage system composed major index structures element index attribute index index data loader query processor 
numbering scheme xml data objects commonly modeled tree structure nodes represent elements attributes text data parent child node pairs represent nesting xml data components 
speed processing regular path expression queries important able quickly determine ancestor descendant relationship pair nodes hierarchy xml data 
example query regular path expression chapter elements included elements 
chapter elements elements element sets joined produce qualified chapter element pairs 
join operation carried traversing xml data trees ancestor descendant relationship pair chapter elements determined quickly 
main idea proposed algorithms section 
best knowledge dietz numbering scheme tree traversal order determine ancestor descendant relationship pair tree nodes 
proposition nodes tree ancestor occurs preorder traversal postorder traversal 
example consider tree nodes annotated dietz numbering scheme 
node labeled pair preorder postorder numbers 
tree tell node ancestor node node comes node preorder node postorder 
obvious benefit approach ancestor descendant relationship determined constant time examining preorder postorder numbers tree nodes 
hand limitation approach lack flexibility 
preorder postorder may need recomputed tree nodes new node inserted 
get problem propose new numbering scheme uses extended preorder range descendants 
proposed numbering scheme associates node pair numbers follows 
tree node parent words interval contained interval 
sibling nodes predecessor preorder traversal dietz numbering scheme preorder postorder proposed numbering scheme pair numbering scheme examples tree node direct child 
arbitrary integer larger total number current descendants allows accommodate insertions gracefully 
difficult show nodes ordered proposed numbering scheme equivalent preorder traversal 
proposed numbering scheme guarantees pair tree nodes comes preorder traversal 
furthermore ancestor descendant relationship pair nodes determined examining values 
node labeled pair defines interval 
interval node properly contained interval parent node 
example node contained 
node order descendant nodes order 
observation leads lemma 
lemma nodes tree ancestor proof 
proof induction 
compared dietz scheme numbering scheme flexible deal dynamic updates xml data efficiently 
extra spaces reserved call extended preorder accommodate insertions global reordering necessary reserved spaces unused order values consumed 
note numbering schemes deleting node cause renumbering nodes 
easier numbering scheme recycle order values deleted nodes 
elements attributes pair unique identifier document tree 
attributes additional care needs xml raw data document loader query query result processor element index attribute index structure index paged file index structure overview name index value table exercised ensure attribute nodes placed sibling elements order numbering scheme 
discuss section enable faster element attribute join operations 
index data organization mentioned system supports search element attribute name structure 
achieve goal system provides mechanisms process operations efficiently 
element name string find list elements having name string grouped documents belong 
attribute name string say find list attributes having name string grouped documents belong 
element find parent element child elements attributes 
attribute find parent element 
index structure composed major components element index attribute index structure index shown 
components name index storing name strings value table values 
value entities xml data considered variable length character strings distinct name strings collected name index implemented ab tree 
distinct name string uniquely identified name identifier nid returned name index 
name index minimizes storage computational overhead eliminating replicated strings string comparisons 
reason string values attribute value text value collected value table 
xml document assigned unique document identifier index key retrieve document name 
element attribute uniquely identified order entire system 
element index attribute index structure index indexes support essential functionalities listed respectively 
element index attribute index implemented tree name identifiers keys 
entry leaf node points set fixed length records elements attributes having identical name string grouped document belong 
element index allows quickly find elements name string element nid document id tree document id list element list name document element index tree array elements attributes document structure index order size depth parent id element record nid order size parent order child order sibling order attribute order common operations process regular path expression queries 
element record includes pair related information element element records sorted order values shown 
attribute index structure element index record attribute index value identifier vid key obtain attribute value value table 
organization structure index shown 
collection linear arrays stores set fixed length records elements attributes xml document 
array elements attributes sorted value preorder traversal 
record structure index stores name identifier values sibling child attribute 
path join algorithms section propose new path join algorithms efficiently process regular path expression queries xml data 
consider sample query borrowed xquery working draft 
chapter tree frogs symbol function symbol denotes single node denotes separator nodes path denotes union nodes denotes zero occurrence node denotes occurrences node denotes zero occurrences node encloses predicate expression denotes attributes indicates precedence table notations regular path expressions find figures frogs chapters 
query chapter xml elements xml attribute 
query running example sections 
note notations slightly different xquery working draft 
see table full notations regular path expressions 
conventional approaches straightforward approaches processing regular path expression queries traverse hierarchy xml objects top bottomup fashion 
process query topdown approach example downward paths starting element followed find exists element descendant 
step needs repeated chapter elements xml database 
implies absolutely necessary examine possible path elements leaf nodes xml trees usually known elements paths 
element root xml tree entire tree traversed 
cost tree traversal may reduced bottomup approach 
query elements tree frogs searched 
elements corresponding xml tree examined traversing tree find exists element ancestor 
upward traversal simpler costly exists upward path 
elements frogs elements cost bottom approach higher top approach 
hybrid approach proposed traverses top bottom fashions meeting middle path expression 
hybrid approach take advantages top bottom approaches xml data certain structural characteristics 
effectiveness guaranteed 
sections describe decomposition regular path expression propose new path join algorithms process regular path expression queries traversing xml trees 
decomposition path expressions main idea proposed path join algorithms complex path expression decomposed simple path expressions 
simple expression produces intermediate result subsequent stage processing 
results simple path expressions combined joined obtain final result query 
interesting analogy way regular path expression decomposed processed combined way multi way join operation processed series way joins relational query processor 
example regular path expression forme decomposed ee join ea join ee join kc join ee join ee join union decomposition path 
intermediate results ande joined 
general regular path expression decomposed combination basic subexpressions 
subexpression single element single attribute 
subexpression element attribute tree frogs 
subexpression elements chapter 
subexpression kleene closure subexpression 
subexpression union subexpressions 
illustrates way decomposing complicated regular path 
leaf nodes top subexpressions single element attribute 
circle represents subexpression types described 
subexpression single element attribute processed accessing element index attribute index system described section 
union subexpressions processed merging intermediate results grouping documents straightforward way 
subexpression types propose path join algorithms join subexpression type join subexpression type join subexpression type 
algorithms described sections 
join algorithm join algorithm joins intermediate results subexpressions list elements list attributes 
example regular path expression tree frogs searches elements tree frogs xml documents system 
intermediate results input join algorithm list elements list attributes grouped documents belong 
join algorithm described algorithm 
algorithm join element attribute join input set elements having common document identifier set attributes having common document identifier output pairs element parent attribute 
sort merge doc 
identifier 
foreach sort merge parent child relationship 
foreach parent output element attribute index maintains element attribute records sorted order document identifiers values join intermediate results obtained stage operation additional cost sorting 
element sets attribute sets merged document identifiers stage 
second stage pair element list attribute list matching document identifier extracted document elements attributes merged examining parent child relationship values numbering scheme 
mentioned briefly section important ensure attributes placed sibling elements order numbering scheme 
performance impact join operation potentially high additional requirement numbering scheme guarantees elements attributes matching document identifier merged single scan 
specifically lists grouped document scanned outer foreach loop line algorithm element list attribute list scanned inner foreach loop line algorithm 
best explained example shown 
note tree nodes annotated pairs 
consider xml tree left hand side attribute name numbered sibling element chapter 
time parent child relationship chapter name examined attribute name passed 
consequently examine parent child relationship name attribute lists 
contrast xml tree right hand side attribute name numbered sibling element chapter 
parent child relationships chapter name pair chapter name pair determined 
chapter chapter name name chapter name element node attribute node name chapter examples correct incorrect cases join algorithm join algorithm joins intermediate results list elements obtained subexpression 
example regular path expression chapter searches pairs ancestor descendant relationship xml documents system 
intermediate results input join algorithm list chapter elements list elements grouped documents belong 
join algorithm described algorithm 
algorithm join element element join input set elements having common document identifier 
output pairs element ancestor element 
sort merge doc 
identifier 
foreach sort merge ancestor descendant relationship 
foreach ancestor output join algorithm join algorithm perform join sets elements stage operation additional cost sorting 
element sets merged document identifiers stage 
second stage pair element sets matching document identifier extracted document element sets merged examining ancestor descendant relationship values numbering scheme 
join algorithm sets elements matching document identifier merged single scan join algorithm 
lemma pair example ancestor descendant relationship determined examining point extended preorder contained range extended preorder 
join sets elements ancestor descendant relationship viewed join range set point set 
just point contained range element descendant chapter chapter chapter chapter extreme case element element join element 
see extreme case chapter element match element 
may necessary scan list elements 
despite fact element set may scanned multiple times inner foreach loop line algorithm join algorithm highly effective particularly searching paths long lengths unknown 
section compare join algorithm conventional approaches tree traversal 
effectiveness join corroborated experimental results 
worth noting join algorithm support element element join fixed length path element pairs great grandparent relationship 
coupled depth element xml tree numbering scheme determine great grandparent relationship constant time 
special case processed join algorithm subexpression chapter 
subexpression contains pair element attribute join algorithm process single scan 
subexpression processed join algorithm 
join algorithm algorithm kleene closure algorithm input group elements xml document 
output kleene closure 
apply join algorithm repeatedly 
set set repeat set set join empty output union join algorithm processes regular path expression represents zero occurrences subexpression chapter chapter 
processing stage join algorithm applies join result previous stage repeatedly results produced 
example find chapter join obtains chapter chapter self joining set data set size byte files elements attributes shakespeare sigmod nitf nitf table xml data set chapter elements 
stage chapter chapter joining results chapter chapter chapter 
final result union results previous stages 
join algorithm described algorithm 
experiment implemented prototype store xml data index 
primitive query interface provided 
gnome xml parser parse xml data 
gist library tree indexing 
query processing directly implemented query interface 
experiments performed sun ultrasparc ii workstation running solaris 
workstation mbytes memory gbytes disk storage seagate st ultra eide interface 
disk locally attached workstation store xml data index 
direct feature solaris experiments avoid operating system cache effects 
data sets performance metrics chosen data sets shakespeare sigmod real world applications synthetic data sets generated xml generator ibm 
data sets described characteristics data sets summarized table 
columns numbers entry represent total number elements attributes number distinct elements attributes respectively 
shakespeare plays data set shakespeare plays xml format marked jon available 
sigmod record data set xml version acm sigmod record small files containing line issues sigmod record 
nitf nitf xml generator nitf news industry text format dtd generated different versions xml data sets data set stored single large document file nitf data set stored separate document files nitf 
performance query processing section performance measurements analyze proposed algorithms www acm org sigmod record xml element element join element attribute join operations 
conventional top bottom methods compared proposed algorithms 
cost output generation regardless algorithms applied output cost included measurements 
measured performance join algorithm largely determined performance join algorithm 
join query queries element element join operations forme 
example query chapter find elements descendants chapter element 
actual queries experiments shown table 
queries compared join bottom method 
top method expected outperformed bottom method data sets 
bottom method processes queries steps 
search elements 
second starting element traverse tree find elements 
third output path toe 
show elapsed time real world data sets shakespeare sigmod synthetic data sets nitf nitf respectively 
join algorithm performs small number buffer pages 
bottom method takes longer time process query especially synthetic data size buffer pool small 
join algorithm accesses sorted elements disk sequential manner bottom method accesses elements structure index randomly 
results relatively low rate page faults join algorithm relatively high rate page faults bottom method 
vertical lines show severely elongated processing times bottom method extreme case buffer page 
obviously point buffer pages available performance measurements remain constant irrespective number buffer pages 
experiments done real world synthetic data sets join algorithm outperformed bottom method wide margin 
real world data sets join order magnitude faster bottom method 
synthetic data sets join times faster bottomup method 
measured io time separately observed trend performance 
disk io dominant cost factor query evaluations 
experiments percent total elapsed time spent disk accesses join algorithm 
join query queries element attribute join operations form 
example query find elements attribute 
type queries compared performance join algorithm time second data set element element results shakespeare act speech sigmod articles author nitf body content block nitf body content block shakespeare bottom sigmod bottom shakespeare ee join sigmod ee join number buffer pages table summary join queries time second nitf bottom nitf bottom nitf ee join nitf ee join number buffer pages real world data sets synthetic data sets top bottom methods 
actual queries experiments summarized table 
shakespeare data set data set contains attribute 
total elapsed times shown 
data set relatively small number attributes sigmod data set bottom method expected outperform top method traversing tree small number attributes efficient traversing tree branches 
experiments sigmod data set bottom method best followed join closely top method 
synthetic data sets number attributes larger number elements 
data sets performance bottom method degenerated substantially look parent elements attributes 
see 
attributes allowed child nodes scope traversal element child attributes limited level tree 
top method fairly efficient synthetic data sets 
performance join algorithm better topdown method 
main reason join needs scan element list attribute list traversing trees 
scalability test carried scalability tests proposed algorithms large data set generated nitf document type definition 
element element element attribute joins observed query processing time increased linearly size xml data increased 
result shows linear scalability proposed algorithms provides total elapsed time query evidence proposed path join algorithms improve performance query processing xml path expressions conventional methods order magnitude 
previous xml databases graph data models path traversals play central role query processing optimizing navigational path expressions important issue 
optimal query plan depends values database shape graph containing data 
query evaluation strategies proposed lore cost query optimizer 
top strategy exploiting path expression bottom strategy exploiting value predicates hybrid strategy 
speed query processing lore database different types index structures proposed 
value index text index search objects specific values link index path index provide fast access parents object objects reachable labeled path 
keyword search important query xml data structures xml data known users 
efforts integrate keyword search xml query processing 
florescu kossmann propose extend xml ql query language keyword search capabilities 
indexes facilitate keyword searching structure inverted files extended support full text indexing additional information granularity xml elements type keywords depth related element instances 
wolff structural information xml documents retrieval process probabilistic model 
propose index structures structure time second data set element attribute attributes results sigmod author id nitf block dir nitf block dir sigmod top sigmod ea join sigmod bottom number buffer pages table summary join queries time second nitf bottom nitf top nitf ea join number buffer pages time second nitf bottom nitf top nitf ea join number buffer pages sigmod data nitf data nitf data index preserves hierarchical structure underlying data text index supports evaluation textual queries 
problem optimizing regular path expressions studied context navigating semi structured data web sites 
semistructured data modeled edge labeled graph nodes denote html pages edges denote hyperlinks 
abiteboul vianu deal path query evaluation takes advantage local knowledge path constraints data graphs may capture structural information web site 
address issue equivalence decidability regular path queries constraints 
fernandez dan suciu propose query optimization techniques rewrite regular path expression query reduces scope navigation 
new index structures search algorithms proposed performing efficient filtering xml documents selective information dissemination environments 
systems roles queries data reversed 
effectively target right information right users user profiles posed standing queries applied incoming xml documents order determine users document sent 
standing queries written xpath language allows regular path expressions queries 
determine ancestor descendant relationships document tree viewed complete ary tree virtual nodes 
identifier node assigned level order tree traversal 
ancestors children node calculated just identifier 
problem approach arity height complete tree getting large identifier may huge number 
example ary complete tree height total node number large store byte word integer 
approach unrealistic large xml documents 
tree location address locates total elapsed time node tree selecting ancestor node level tree 
identifier ancestor node prefix descendants 
method take space store identifiers time determine ancestor descendant relationship constant 
depends length identifiers 
proposed position depth tree node indexing occurrence xml elements 
non leaf node position pair locations depthfirst traversal order 
containment properties position depth similar extended preorder independently invented proposed 
developed xml indexing storage system store index xml data efficiently process regular path expression queries 
proposed numbering scheme extended preorder determines ancestor descendant relationship nodes hierarchy xml data constant time 
numbering scheme adapt gracefully dynamics xml data objects allocating numbering region extra space 
plan investigate document type definition dtd determine size numbering region element attribute 
major drawback conventional methods tree traversals may require extensive search xml data trees 
avoid drawback proposed innovative approach processing regular path expression query decomposes complex path expression collection basic path subexpressions 
subexpression processed directly accessing index structures system applying proposed join join join algorithms 
subexpression having pair elements example join algorithm performs processing sort merge operation 
experimental results prototype implementation show pro posed algorithms achieve performance improvement conventional methods order magnitude 
new query processing paradigm proposed poses interesting issue concerning xml query optimization 
regular path expression decomposed different ways 
decomposition leads different query processing plan performance may affected substantially way regular path expression decomposed 
important optimization task find best way decompose expression 
conjecture document type definitions statistics xml data may estimate costs sizes intermediate results 
current prototype implementation index structures organized paged files efficient disk io 
observed trade disk access efficiency storage utilization 
worth investigating way find optimal page size break point criteria 
abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
international journal digital libraries april 
serge abiteboul victor vianu 
regular path queries constraints 
th acm sigact sigmod sigart symposium principles database systems pages tucson az may 
mehmet michael franklin 
efficient filtering xml documents selective dissemination information 
proceedings th vldb conference pages cairo egypt september 
tim bray jean paoli sperberg mcqueen eve maler 
extensible markup language xml second edition recommendation 
technical report world wide web consortium october 
stefano ceri sara damiani fraternali stefano paraboschi letizia tanca 
xml gl graphical language querying restructuring xml documents 
proceedings th international world wide web conference pages toronto canada may 
don chamberlin daniela florescu jonathan robie simon stefanescu 
xquery query language xml working draft 
technical report wd xquery world wide web consortium february 
don chamberlin jonathan robie daniela florescu 
quilt xml query language heterogeneous data sources 
international workshop web databases webdb dallas tx may 
james clark steve derose 
xml path language xpath version recommendation 
technical report rec xpath world wide web consortium november 
robin cover 
xml cover pages 
xml org xml html february 
deutsch mary fernandez daniela florescu alon levy dan suciu 
query language xml 
proceedings th international world wide web conference pages toronto canada may 
angel luis diaz douglas lovell 
xml generator 
www alphaworks ibm com tech september 
paul dietz 
maintaining order linked list 
proceedings fourteenth annual acm symposium theory computing pages san francisco california may 
mary fernandez dan suciu 
optimizing regular path expressions graph schemas 
proceedings th inter 
conference data engineering pages orlando fl february 
daniela florescu donald kossmann 
performance evaluation alternative mapping schemes storing xml data relational database 
technical report inria rocquencourt france may 
daniela florescu donald kossmann ioana manolescu 
integrating keyword search xml query processing 
proceedings th international world wide web conference amsterdam netherlands may 
roy goldman jennifer widom 
dataguides enabling query formulation optimization semistructured databases 
proceedings rd vldb conference pages athens greece september 
joseph hellerstein jeffrey naughton avi pfeffer 
generalized search trees database systems 
proceedings st vldb conference pages zurich switzerland september 
eliot 
hytime sgml understanding hytime query language 
technical report version ibm august 
olivier mark ichikawa 
structured graph format xml metadata describing web site structure 
computer networks isdn systems 
jason mchugh jennifer widom 
query optimization xml 
proceedings th vldb conference pages edinburgh scotland september 
jason mchugh jennifer widom serge abiteboul luo anand rajaraman 
indexing semistructured data 
technical report stanford university stanford ca february 
jens wolff holger armin cremers 
searching browsing collections structural information 
ieee advances digital libraries adl pages bethesda md may 

xml library gnome 
org january 
yong lee yoo yoon 
index structures structured documents 
acm international conference digital libraries pages bethesda maryland march 
chun zhang jeffrey naughton david dewitt luo guy lohman 
supporting containment queries relational database management systems 
proceedings acm sigmod conference santa barbara ca may 
