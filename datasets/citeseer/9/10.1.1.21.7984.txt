potter wheel interactive data cleaning system cleaning data errors structure content important data warehousing integration 
current solutions data cleaning involve iterations data auditing find errors long running transformations fix 
users need endure long waits write complex transformation scripts 
potter wheel interactive data cleaning system tightly integrates transformation discrepancy detection 
users gradually build transformations clean data adding undoing transforms spreadsheet interface effect transform shown records visible screen 
transforms specified simple graphical operations showing desired effects example data values 
background potter wheel automatically infers structures data values terms user defined domains accordingly checks constraint violations 
users gradually build transformation discrepancies clean data writing complex programs enduring long delays 
organizations accumulate data want access analyze consolidated 
data inconsistencies schema formats adherence constraints due factors including data entry errors merging multiple sources :10.1.1.46.6676
data purged discrepancies transformed uniform format 
data cleaning key challenge data warehousing 
data transformation needed extracting data legacy data formats business business enterprise data integration 
current approaches data cleaning data cleaning components auditing data find discrepancies choosing transformations fix applying transformations dataset 
currently commercial solutions data cleaning see overview 
come forms auditing tools permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference roma italy raman joseph hellerstein university california berkeley cs berkeley edu transformation tools 
user audits data detect discrepancies auditing tool systems acr data evoke software migration architect 
writes custom script uses etl extraction transformation loading tool data junction software transform data fixing errors converting format needed analysis 
data hard find special cases process auditing transformation repeated data quality 
approach problems 
lack interactivity transformation typically done batch process operating dataset feedback 
leads long frustrating delays users idea transformation effective 
delays compounded decoupling transformation discrepancy detection done separate steps separate software 
forces users wait transformation finish check fixed anomalies 
importantly nested discrepancies arise fixed 
typo year field running suitable algorithm year values dates converted uniform date type year values isolated date strings 
decoupling hard find multiple discrepancies pass leading unnecessary iterations 
need user effort transformation discrepancy detection need significant user effort making step cleaning process painful error prone 
commercial etl tools typically support restricted transforms small set formats gui provide ad hoc programming interfaces general transforms essentially libraries conversions standard formats data junction 
system supported transforms need specified sophisticated ways involve regular expressions grammars section 
discrepancy detection technique match data domain may standard method spell checking specialized spotting non standard names automobile parts 
unfortunately data values composite structures values different domains rebecca daphne du april amazon com search results transform noun denote single operation transformation denote sequence operations 
daphne du 
users write custom programs structure design transforms parse data values atomic components anomaly detection back unified wholes output 
potter wheel approach data cleaning intrinsically complex task interrelated problems 
solution support transformation discrepancy detection integrated fashion 
hand transforms provided general powerful tasks explicit programming system support variety discrepancy detection algorithms applicable different domains 
hand cleaning process involves user interaction system support transformation discrepancy detection simple specification interfaces minimal delays 
potter wheel interactive data cleaning system integrates transformation discrepancy detection single interface 
software publicly available berkeley main ideas content workbench 
users gradually build transformations potter wheel composing debugging transforms step time spreadsheet interface see details explained sections 
transforms specified graphically effect shown immediately records visible screen undone easily effects undesirable 
discrepancy detection done automatically background latest transformed view data anomalies flagged 
pipelining transformation discrepancy detection data cleaning tight closed loop users gradually develop refine transformations discrepancies 
interactive transformation literature transformation languages adapted small set transforms support common transformations explicit programming :10.1.1.52.7860
simple easy specify graphically 
transforms parse split values atomic components quite complex 
specification requires users enter regular expressions grammars cases write custom programs section 
potter wheel lets users specify desired results example values automatically infers suitable transform structure extraction techniques described 
describe graphical specification incremental application transforms section 
potter wheel compiles sequence transforms program user satisfied applying piecemeal iterations 
users specify undo transforms orders find natural discrepancies exploratory behavior result redundant sub optimal transforms 
addition main cost transformation memory allocation copying 
full version discuss final sequence transforms converted optimal form including ways pipelining transforms minimize memory allocations copies 
snapshot potter wheel user interface flight delay data www gov 
extensible discrepancy detection potter wheel allows users define custom domains corresponding algorithms enforce domain constraints 
data values composite structures system needs automatically parse string value structure composed user defined domains apply suitable discrepancy detection algorithms 
similar problem inferring regular expression structures examples addressed machine learning literature 
interested structures regular expressions structures terms user defined domains 
example parsing flight records taylor jane jfk ord april coach za za za help detecting anomalies satisfy basic pattern 
parsing za airport airport date class allow detect logical errors false airport codes dates 
believe application developers specify useful application specific domains corresponding domain constraints date airport code construction part name provided potter wheel automatically infer patterns terms domains apply suitable algorithms 
difficulty domains typically specified explicit patterns encapsulated set membership functions potter wheel understand 
second unique feature pattern learning data cleaning context values discrepancies structure potter wheel detect approximate structures 
tradeoff choosing structures match values column choosing structures overfit data values 
section describes minimum description length principle extract approximate structures values way balances tradeoff 
potter wheel architecture main components potter wheel architecture data source engine applies transforms paths online reorderer support interactive scrolling sorting user interface automatic discrepancy detector 
data source potter wheel accepts input data single pre merged stream come odbc source ascii file descriptor pipe 
odbc source query data dbmss distributed sources middleware 
practice schematic differences sources restrict tightness integration query shows poor mapping source destination columns 
potter wheel flag areas poor integration errors user transform data moving values columns unify data format 
reading ascii files record viewed single wide column 
user identify column delimiters graphically split record constituent columns 
parsing complex timeconsuming poorly structured data web pages 
potter wheel helps process split transform specified example section 
column types delimiters specified metadata file 
dataset parsed transformation stored macro easy application similar datasets 
interface displaying data data read input displayed scalable spreadsheet interface allows users interactively re sort column scroll representative sample data large datasets 
user starts potter wheel dataset spreadsheet interface appears immediately waiting input completely read 
important transforming large datasets data streams 
interface supports behavior online reorderer continually fetches tuples source divides buckets dynamically computed histogram sort column disk needed 
user scrolls new region reorderer picks sample tuples bucket corresponding scrollbar position displays screen 
users explore large amounts data dimension 
exploration helps users spot simple discrepancies observing structure data values sort column change 
transformation engine transforms specified user need applied scenarios 
need applied records rendered screen 
spreadsheet user interface done user scrolls jumps new scrollbar position 
number rows displayed screen time small users perceive transformations instantaneous clearly depends nature transforms return issue section 
second transforms need applied records discrepancy detection argued earlier want check discrepancies transformed versions data 
automatic discrepancy detector user specifying transforms exploring data discrepancy detector runs background applying appropriate algorithms find errors data 
scroll check errors spreadsheet display specify undo transforms discrepancy detector transformation engine compile get page scrollbar 
optimized program potter wheel architecture input data source online reorderer tuples fetched source transformed sent discrepancy detector addition sent online reorderer 
discrepancy detector parses values field sub components structure inferred column 
structure column sequence user defined domains inferred soon formed input stream started new column formed transform describe section 
suitable applied sub component depending domain 
example structure column number word time value january discrepancy detector finds january sub components belonging number word time domains applies detection algorithms specified domains 
compiling sequence transforms user satisfied sequence transforms potter wheel compile transformation export perl program potter wheel macro invoked datasets reapply transformation transform 
want support compilation declarative languages sql xslt database system perform optimizations 
extensible discrepancy detection potter wheel allows users define arbitrary domains corresponding discrepancy detection algorithms 
describe api specifying domains section 
domains system automatically infers appropriate structures values column section 
domains structure parameterized specific column values discussed section 
detailed structure inferred system parses values sends individual components suitable discrepancy detection algorithms section 
domains potter wheel domains potter wheel defined interface shown 
function required implemented inclusion function match identify values domain 
optional cardinality function helpful structure extraction describe section 
public class domain required inclusion function checks value satisfies domain constraints 
sections public boolean match char value optional function finds number values domain length 
vary parameterization 
sections public int cardinality int length optional function updates state domain value 
sections public void char value optional function checks value discrepancy certain probability 
typically needs know total number tuples data set see 
section public float char value int optional function checks pattern redundant 
section public boolean domain api user defined domains 
functions explained sections indicated 
mainly parameterize domains section 
discrepancy detection algorithm accumulate state data 
accumulated state catch multi row anomalies set values individually correct violate constraint 
example duplicate elimination algorithm build approximate hash table bloom filter values seen far 
confidence method helpful probabilistic incremental discrepancy detection algorithms sampling algorithms 
method enumerating structures described section 
potter wheel provides default domains arbitrary ascii strings henceforth called character strings called words likewise refer words capitals capitalized words respectively integers sequences punctuation style floating point values henceforth called doubles english words checked common names checked referring online census results money generic regular expression domain checks values library 
structure extraction value typically terms default user defined domains multiple ways 
example march parsed za name possible structures 
structure extraction involves choosing best structure values column 
formally set column values vn set domains dm want extract suitable structure ds ds dsp sp know domains functions defined function match may available 
general inferred structure approximate data errors structure 
describe evaluate appropriateness structure set values look ways enumerating structures choose best 
evaluating suitability structure characteristics want structure column values 
recall structure match column values possible 
precision structure match values possible 
conciseness structure minimum length 
criteria standard ir metrics evaluating effectiveness pattern 
need consider recall values erroneous structure unmatched values considered discrepancies 
considering precision helps avoid overly broad structures uniquely match column 
criterion conciseness avoid overfitting structure example values 
instance want parse march za march 
example highlights importance allowing user defined domains alphabet create structure 
instance word integer domains alphabet march better structure za recall better precision avoids matching date smaller pattern length za intuitively concise pattern think za domain word kleene closure set characters 
criteria typically conflicting broad patterns having high recall conciseness low precision specific patterns having high precision low conciseness 
effective way tradeoff fitting fitting minimum description length mdl principle minimizes total length required encode data structure 
description length metric structure quality derive description length dl encoding set values structure measure appropriateness structure better structures result smaller dls 
mdl principle dl structure describe set column values defined length theory structure definition plus length required encode values structure 
need dl encapsulate goals recall precision conciseness penalties 
conciseness directly captured length theory structure 
values match structure length required encoding data values captures precision 
tackle erroneous data values positing values matching structure encoded explicitly writing structure encoding typically space intensive assumes structure forcing values written explicitly 
capture recall 
example consider structure word integer integer value may 
number bits needed encode structure log number domains 
encode value specifying length sub component sub component specifying actual value values length 
case sub component lengths 
domains strings alphabets size za 
description length log number domains log maximum length values sub component log log log example able calculate lengths value encodings integers words know properties domains 
look encodings structures arbitrary domains 
consider structure domains ds ds dsp 
denote cardinality set description length string vi length len vi dl vi length theory length encode vi domains represent domain log bits 
probability vi matches structure vi match encode explicitly 
dl vi log log len vi space express vi parts right hand side representing penalties conciseness recall precision respectively 
vn values column allen len vj average length values column 
easy see average space needed encode values dl log log allen avg 
space express vn just example express values vi encoding lengths components domain encoding actual values components 
string falls domain du length sp du space required uniquely encode len length strings du 
suppose value vi matches structure ds ds dsp concatenation sub components vi wi wi wi wi parsing vi easy discuss efficient parsing section 
maximum length values column 
average space required encode values column log log allen transformation log sp wi log allen log fp log log values length len wi satisfy values length len wi best way compute cardinality expression int cardinality int length function domain defined 
domains approximate fraction directly repeatedly choosing random strings appropriate length checking satisfy fractions independent actual values pre computed cached 
length high may need check values estimate fraction 
absence user defined cardinality function compute fraction matches small lengths extrapolate larger lengths assuming number matches strict exponential function string length 
choosing best structure seen compute description length measures suitability structure set values 
want enumerate structures match values column choose suitable 
enumeration needs done carefully structures arbitrary strings alphabet domains expensive enumerate strings 
apply algorithm set sample values column take union structures enumerated 
values default proven adequate cases encountered 
enumeration prune extent recursion handling structures meaningless combinations domains word word integer decimal 
unnecessarily complicated versions simpler structures word decimal result structures identical precision recall lesser conciseness 
identify unnecessary sequences domain method domain determines domain redundant immediately domain 
exponential algorithm pruning reduces number structures enumerate column considerably 
shown number enumerated structures typically 
structures parameterized domains far structures extracted simply strings domains 
column values restricted consisting certain parameterizations domains 
example sub components domain constant value constant length shown examples 
potter wheel currently detects parameterizations automatically domains constant values domains enumerate structures domains ds dsp match value vi 
void enumerate vi dp vi string characters wm domains matching prefix wk vi enumerate wk wm ds dsp avoid structures domains satisfy prepend structures enumerated enumerating various structures set values values constant length 
parameterized structures especially useful automatically parsing values column inferring split transforms example section 
addition users define domains infer custom parameterizations method 
domains specialized algorithms refine structure sub components fall domain 
example default integer domain potter wheel computes mean standard deviation values uses parameters flag values standard deviations away potential anomalies 
likewise domain accept strings default parameterize inferring regular expression matches subcomponent values 
description length values structure reduces structure parameterized 
default parameterizations constant values constant lengths easy adjust formulas previous section 
custom parameterizations regular expression inference discussed user define cardinality function parameterization 
example structures extracted consider snapshot shown containing flight delay statistics 
shows structures extracted column values columns web access log 
see dominant structure chosen face inconsistencies system flag structural inconsistencies errors user parse apply suitable detection algorithms values match structure 
system flags discrepancies earlier added data 
example system flags dates date column anomalies integer domain year column parameterizes mean standard deviation 
finds poor mapping source destination columns structural anomalies 
shows column ip addresses values structure inferred double double integer integer integer integer 
arises double concise structure integer integer 
avoided example column value structures final structure chosen example erroneous values enumerated punc punctuation integer united delta american sfo lax 
jfk oak int punc int punc int tu thu capitalized word int len punc int len ferret com double punc double get punc punc xia sld htm punc double structures extracted different kinds columns default domains listed section 
structure parameterizations parenthesis 
ing short domain values form short short short short allowing parameterization form integer len 
interesting example fitting choice flight carriers 
flight carrier names occur dictionary twa 
chosen cheaper encode twa explicitly structure encode carriers best structure 
system flags twa anomaly user choose ignore specify minimum recall threshold avoid overfitting 
case example highlights importance involving user data cleaning process 
gives examples inferred structures 
interactive transformation having seen potter wheel infers structures identifies discrepancies turn attention support interactive transformation 
want users construct transformations gradually adjusting continual feedback 
breaks sub goals ease specification transforms specifiable graphical operations custom programming 
operations want avoid regular expressions grammars allow users specify transforms example far possible 
ease interactive application user specified transform immediate feedback results application correct 
data lineage users able easily undo transforms seeing effect 
addition lineage errors clear errors intrinsic data differentiable resulting transforms 
transforms supported potter wheel transforms potter wheel adapted existing literature transformation languages :10.1.1.52.7860
describe briefly proceeding discuss interactive application graphical specification 
table gives formal definitions transforms 
additional illustrative examples proofs expressive power full version 
transform definition format ai ai ai add drop ai ai copy ai merge glue ai ai aj aj ai glue aj split splitter ai ai left ai splitter right ai splitter divide pred ai ai ai null pred ai ai ai null ai pred ai fold ik ai ai ai ai ai ai ai select pred pred notation relation columns 
column indices ai represents value column row 
glue values 
function mapping values values 
concatenates splitter position string regular expression left splitter left part splitting splitter 
pred function returning boolean 
table definitions various transforms 
unfold defined full 
stewart bob format bob stewart anna davis anna davis jerry jerry joan marsh joan marsh split bob anna stewart davis merges anna davis bob stewart jerry jerry joan marsh joan marsh format merge split clean name format differences value translation format transform applies function value column 
provide built functions common operations regular expression substitutions arithmetic operations allow user defined functions 
column table names demoted column values special characters regular expressions useful conjunction fold transform described 
mappings rows transforms column operations transform individual rows 
illustrated figures unify data collected different sources 
merge transform concatenates values columns optionally interposing constant delimiter middle form single new column 
split splits column parts typically parse value constituent parts 
split positions difficult specify data structured 
allow splitting specifying character positions regular expressions interactively performing splits example values section 
drop copy allow users drop copy column add new column 
occasionally logically different values multiple sources bunched column want transform 
divide conditionally divides column sending values new columns predicate 
mappings rows transforms help tackle higher order schematic heterogeneities information stored partly data values partly schema shown 
fold flattens tables converting row multiple rows folding set columns column replicating rest 
conversely unfold tables takes columns collects rows values columns unfolds chosen columns 
values column column names align values column 
figures show example student grades subject names demoted row format grades folded split separate subject grade 
fold unfold adapted restructuring operators discussed detail full 
power transforms prove full transforms perform row mappings rows 
fold unfold latten tables converting form column table names literals data values 
formal definition un flattening analysis power fold unfold see 
interactive application transforms want apply transforms tuples incrementally stream effects transforms immediately shown tuples visible screen ui 
lets system pipeline discrepancy detection results transforms giving interactivity advantages described 
transforms discussed transforms fold transform functions single row 
easy apply incrementally 
unfold operates set rows matching values 
potentially involve scanning entire data allow unfold specified graphically 
displaying records screen avoid problem showing complete row showing columns distinct values filling data values columns corresponding input rows read 
progressive column addition spreadsheet interface confuse user plan implement abstraction interface newly created columns shown rolled column 
bob ann jerry joan divide davis song bob ann davis jerry joan song formats ann name math bio name ann math bio bob bob math bio name ann ann bob bob math bio math bio split divide ing separate various name formats user clicks unroll column expands set columns corresponding distinct values far 
fold name ann math ann bio bob math bob bio fold ing fix higher order variations graphical specification transforms transforms add drop copy fold simple specify graphically 
users highlight desired columns pick appropriate transform 
split hard specify precisely 
splits needed parse values column parts illustrated 
important problem commercial integration products 
tools microsoft sql server access wizards parsing ascii data files constant delimiters 
research commercial wrapper generation tools araneus net query nodose tackle problem screen scraping unstructured data web pages :10.1.1.28.2722
tools require sophisticated specification split ranging regular expression split delimiters context free grammars 
split unambiguously 
instance entry commas occur delimiters data values 
result users write custom scripts parse data 
split example potter wheel want users able parse split values specifying complex regular expressions writing programs 
want allow users specify splits performing example values 
user selects example values vn graphical direct manipulation way shows positions values split sub components xn xn respectively 
done discrepancy detection system infers structure new columns mdl uses structures split rest values 
structures general ranging simple ones constant delimiters constant length delimiters structures involving parameterized user defined domains word len word len integer len time integer len output unix date command 
better simple regular expressions identifying split positions 
contains sample structures potter wheel extracts example splits different datasets 
see ambiguous delimiter case described earlier extract structures split unambiguously 
name anna math anna anna bio unfold bob bob math joan bob bio joan sci bio sci unfold ing columns split string characters wm structures sk void sk check empty prefixes wj satisfying wj wm sk void sk vn example values infer structures split 
xi xi xi user specified split vi 
section compute structures sj spj space needed express xn sj choose structure sj value spj 
substrings wa wb satisfying sj wa sj wb wm sj sp methods splitting value 
values may unambiguously inferred structures 
values may anomalous match inferred structure 
flag values errors user apply transforms split clean data 
splitting inferred structures structures inferred involve domains match functions splitting value easy 
algorithm recursive algorithm parsing value considers inferred structures left right tries match prefixes unparsed value 
algorithm potentially expensive imprecise structures match prefixes 
quick parsing particularly needed split applied large dataset user chosen needed sequence transforms 
alternative algorithm called dec specificity second algorithm matches inferred structures decreasing order specificity 
tries find match specific structure recursively tries match remaining part data value structures 
motivation initial stages specific structures typically constant delimiters match substrings value quickly broken smaller pieces parsed 
specificity structure computed sum description lengths appropri example values split user inferred structure comments user specified split position taylor jane blair john tony smith maa sin jfk sfo lax ord sea oak blake berkeley ca road ca money len identifier len identifier number word letter word letter integer parse structures inferred various split examples ate substrings example values structure 
specific structures need value decomposed smaller substrings splitting expensive 
study effect parsing specificity ran structures 
exact opposite considers structures starting specific illustrates crucial choice starting structure compares throughput split values methods 
see performs better improvement dramatic splits involving structures 
undoing transforms tracking data lineage ability undo incorrect transforms important requirement interactive transformation 
specified transforms directly applied input data transforms regular expression substitutions arithmetic expressions undone unambiguously exist compensating transforms 
undoing requires physical undo system maintain multiple versions potentially large dataset 
potter wheel changes actual data records 
merely collects transforms user adds applies records displayed screen essence showing view transforms specified far 
done logically removing concerned transform sequence redoing rest screen 
approach solves ambiguous data lineage problem discrepancy due error data poor transform 
user wishes know lineage particular discrepancy system needs apply transforms checking discrepancies transform 
related commercial data cleaning process etl tools auditing tools described 
give descriptions process popular tools 
literature transformation languages especially performing higher order operations relational parsing doable despite delimiter 
regular expression domain infer structure component 
parsing possible despite multiple delimiters 
parsing easy consistent delimiter 
data 
horizontal transforms similar restructuring operators 
focus ease specification incremental application merely expressive power 
research literature finding discrepancies data focused main things general purpose algorithms finding outliers data algorithms finding approximate duplicates data 
finding hidden dependencies data correspondingly violations 
general purpose algorithms useful default algorithms potter wheel discrepancy detector 
believe cases discrepancies domain specific data cleaning tools handle domains 
companion problem data cleaning integration schemas various data sources 
intend extend potter wheel system handles interactive specification schema mappings clio 
extracting structure poorly structured data increasingly important wrapping data web pages tools exist research commercial world 
discussed section tools typically require users specify regular expressions grammars sufficient unambiguously parse data users write custom scripts 
learning approaches automatic text wrapping segmentation 
believe semi automatic interactive approach combination graphical operations statistical methods powerful 
machine learning literature database literature inferring regular expressions set values 
argued detecting discrepancies important infer structures terms generic user defined domains way robust structural data errors 
data cleaning transformation important tasks contexts data warehousing data integration 
current approaches data cleaning timeconsuming frustrating due long running noninteractive operations poor coupling analysis trans example values structure split split throughput value int integer dbl double int int int int int may get 
dbl dbl may get 
dbl dbl may get 
int int dbl dbl int word int get int int comparison split throughputs methods 
formation complex transformation interfaces require user programming 
described potter wheel interactive system data transformation cleaning 
integrating discrepancy detection transformation potter wheel allows users gradually build transformation clean data adding transforms discrepancies detected 
users specify transforms graphical operations examples see effect instantaneously allowing easy experimentation different transforms 
seen parsing strings structures userdefined domains results general extensible discrepancy detection mechanism potter wheel 
domains provide powerful basis specifying split transformations example values 
investigate specification complex transforms format transform examples 
focus potter wheel far flat tabular data 
nested data formats xml increasingly common 
research efforts transformation query languages data interesting investigate graphical example approaches specifying 
far looked potter wheel data cleaning tool investigate effectiveness client interface interactive query processing system 
transformations applied client interface viewed refinements ongoing query fed back query processor combining query specification execution result browsing 
acknowledgments scalable spreadsheet interface developed andy chou 
miller subramanian gave pointers related handling schematic heterogeneities 
supported ibm california micro nsf iis ri cda microsoft fellowship sloan foundation fellowship 
abiteboul tools data translation integration 
data engg 
bulletin 

nodose tool semi automatically extracting structured semistructured data text documents 
sigmod 
linear method deviation detection large databases 
proc 
kdd 
borkar deshmukh sarawagi 
automatic segmentation text structured records 
sigmod 

efficient algorithm learning simple regular expressions noisy examples 
intl 
wksp 
algorithmic learning theory 
chaudhuri dayal 
overview data warehousing olap technology 
sigmod record 
chen kifer warren 
hilog foundation higher order logic programming 
journal logic programming volume pages 
www com 
data extraction transformation loading tools etl 
www org clean html 
galhardas florescu shasha simon 
ajax extensible data cleaning tool 
sigmod 
garofalakis system extracting document type descriptors xml documents 
sigmod 
grumbach mecca 
search lost schema 
icdt 
hernandez stolfo 
real world data dirty data cleansing merge purge problem 
data mining knowledge discovery 
kivinen approximate dependency inference relations 
theoretical computer science 
kushmerick 
wrapper induction efficiency expressiveness 
artificial intelligence 
lakshmanan language relational multi database systems 
vldb 
lee cleansing data mining warehousing 
dexa 
miller 
schematically heterogeneous structures 
sigmod 
miller haas hernandez 
schema mapping query discovery 
vldb 
pitt 
inductive inference dfas computational complexity 
analogical inductive inference 
raman scalable spreadsheets interactive data analysis 
dmkd workshop 
raman hellerstein 
potter wheel 
control cs berkeley edu abc ucb csd 
raman raman hellerstein 
online dynamic reordering interactive data processing 
vldb 
rissanen 
modeling shortest data description 
automatica 
shneiderman 
interactive systems emergence direct manipulation 
behavior information technology 
stonebraker hellerstein 
content integration commerce 
sigmod 
van rijsbergen 
information retrieval 
butterworths 
