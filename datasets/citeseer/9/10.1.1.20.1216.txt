national research national council canada de recherches canada institute institut de technologie information technology de information substring matching clone detection change tracking howard johnson software engineering laboratory september nrc report appears proceedings international conference software maintenance icsm victoria british columbia september pp 

copyright national research council canada permission granted quote short excerpts reproduce figures tables report provided source material fully acknowledged 
additional copies available free charge publication office institute information technology national research council canada ottawa ontario canada ii copyright par national de recherches du canada il est de de courts de des figures ou tableaux du pr sent rapport condition en identifier la source 
des suppl peuvent tre bureau des publications institut de technologie de information national de recherches du canada ottawa ontario canada substring matching clone detection change tracking legacy systems pose problems maintainers solved partially effective tools 
prototype tool determining collections files sharing large amount text developed applied megabyte source tree containing releases gcc compiler 
similarities source code documentation corresponding software cloning movement inertia releases effects preprocessing easily stand way immediately conveys structural information maintainer responsibility system 
keywords legacy code string matching clone detection program understanding textual redundancy reverse engineering design recovery provide useful tools program understanding important part software maintenance legacy systems 
tools mimic front compilation process yield useful information compiler acquires generate code normally available programmers 
information analysed transformed summarized way leads significant insights done code executes 
different approach consider source text analyse way documents analysed 
closer way software developers maintainers see code provides language independent manner powerful set tools access information inaccessible compiler approaches 
nrc howard johnson software engineering laboratory national research council canada ottawa canada replacement approaches provides information difficult obtain 
identifying software clones understanding software changes releases important issues maintainers text approach useful 
experience obtained prototype textual analysis system bears 
useful similarities source provide useful information 
section outlines phenomena software cloning reorganization large systems studied technology 
section describes technology study textual matches 
section example approach demonstrates utility 
current research directions outlined section 
sources textual similarity text different files similar number reasons 
particular interest software maintenance point view software cloning change lack change versions system 
particular example software cloning occurs approaches management multiple configurations 
discusses tool solutions useful describe problems effect software maintenance 
software cloning maintenance large software systems pressure leads phenomenon referred software cloning 
scenario typically lines process enhancing functionality system removing defect requirement sub component similar existing subcomponent identified 
functionality required sub component sufficiently different existing component substantial change needed affect existing uses existing component 
analysis usage pattern existing component expected lengthy difficult 
furthermore significant regression testing required ensure old features correctly changed way 
interest meeting production targets copy existing component systematic renaming done avoid naming conflicts tailor component new 
internals module completely understood time pressure unnecessary artifacts previous usage preserved current code red maintainers 
artifacts accessed constitute dead code 
cut paste activity happen code fragments lines modules thousands lines 
happen procedural code declarations 
happen documentation 
software cloning number negative effects software maintenance mentioned red dead code created 
component copied subsequently discovered defect defect probably repaired clones 
clones impact correction assessed context 
errors systematic renaming lead unintended aliasing resulting latent bugs show 
bulk code grows faster extending functionality existing module meet new requirement 
effect form software aging hardening arteries results small design changes difficult 
say software cloning bad 
meets short term goal quicker reliable change 
necessary programming language employed lacks abstraction mechanism 
example generic algorithm may result different code different contexts language support instantiation generic procedures 
programmer thinks instances algorithm way saying just 
cloning bad understanding large source depends finding understanding cases code copied modified 
motivation tools clone detection 
approaches common approach understanding source perform lexical analysis followed semantic analysis natural look clones subtrees syntax semantic trees match part 
advantages combined easily semantic analysis identifies common recurring code fragments clich approach group mcgill 
number software metrics calculated subtree clone signaled metrics agree 
approach similar discussed baker 
calculates position tree source uses information contained identify large matches 
approach described slightly different view matches designed scale larger sources handled position trees 
change large systems natural evolution large systems content individual files changes large files split smaller ones files renamed directories reorganized 
introduce confusion maintainer things 
maintainer needs able visualize system relates understanding previous version 
change shows activity going remove bugs enhance functionality 
identify important parts system maintenance purposes useful consider changed previously 
identifying change reasons supported usefully tools especially large systems 
support multiple configurations large systems usually expected run environment 
strategies maintaining number similar different versions modules 
strategy involves maintaining separate files variant specific system build 
understanding structure multiple configurations important maintenance modifications may affect environments different ways 
substring matching large bodies source approach taken summarized file considered apply text text transformation discard characters considered matching 
exact matching identity transformation output equals input 
various types approximate matching accommodated discarding different parts input 
generate set substrings cover source character text appears substring 
identify matching substrings sequence characters 
transform database raw matches form concisely expresses information 
perform task specific data reduction 
summarize high level matches 
steps information collecting phases information preserving transformation aggregation simplification phase presents results useful form 
phase provides greater sensitivity particular types input 
subsections phases described prototype implementation tool identifies clusters files significant text common 
section show means realistic example application tool identify code result software cloning code changed releases 
text text source transformation ensure approach scales idea exact matching 
restriction means sorting bring simultaneously identical substrings 
approach usual models approximate matching require complex expensive approaches 
exact matching generalized weak fashion handle form approximate matching referred exact matching partial information text text transformation applied source substrings generated 
candidate transformations plausible remove white space characters blank tab carriage return line feed 
resulting matches sensitive different layout page effected white space 
remove white space line separators 
results similar line boundaries preserved 
replace maximal sequence white space characters single blank 
variants approach 
matches white space places 
remove comments 
retain comments 
replace identifier identifier marker 
various combinations 
text text transformations involving parsing text pretty printing parse trees possible may provide useful match information 
baker approach modification done substrings generated 
generation candidate substrings second phase process involves producing collection substrings checked matches 
done carefully producing substrings causes processing required producing result matches missed completely 
important rate substrings generated controlled user system 
average length measured number characters number lines necessary parameter 
subtlety possible substrings sampled feasible produce substrings requested length 
large match missed sampling strategy 
sampling strategy depend string bounded number characters string 
details approach described 
purpose investigation sampling done sequences lines considered matches 
identification raw substring matches straightforward sorting file containing content substring indication origin 
file containing line chunks text times large original text case study section gigabytes 
megabyte source tree considered target problem size unacceptable 
result fingerprinting scheme karp rabin string matching approach 
approach byte fingerprint stands content substring 
fingerprints agree underlying substrings agree disagree high probability underlying substrings disagree 
probability false matches kept low careful design long bit fingerprint 
details appear 
information preserving simplification match database raw substrings matching purposes length overlap 
matches larger substring length represented raw matches 
simplify database matches facilitate processing important replace raw substring match information new minimal set non overlapping substrings matches preserves information obtained matching phase 
set substrings minimum number substrings substring maximum length 
reducing number substrings lengthening substrings result overlapping substrings loss match information 
achieved formal proof uniqueness answer discussed 
data reduction way looking set matches nonoverlapping substrings association substring content sequence characters set places set places collectively constitutes total source 
place offset file information naturally reduced association substring content set files occurs 
subset files total lengths substring contents occur exactly set files 
problem occurs matches files 
times matches counted 
obvious answer combinatorial counting number binary matches leads matches dominating interesting application matches 
decided purposes study ignore matches reduce sizes files corresponding fashion 
type data reduction particular application just discussed 
applications basic technology result different data reduction strategies 
simplification section loses significant information step result loss information context important 
presentation file clusters multi file matches considers graph nodes files arcs added match involves set files containing pair define clusters files corresponding connected components graph 
intuitively clusters large uninformative case study section example demonstrated case 
cluster corresponds sharing text comprehensible maintainer noise 
report produced groups associations cluster 
associations clusters sorted descending order size important clusters associations clusters appear 
study gnu gcc compiler system developed analysis legacy systems 
tend large proprietary written languages conventions known outside organizations 
gnu compiler gcc 
chosen example generally known accessible understood conforms common source organization 
source publicly available number internet archives 
gcc compiler tailored wide spectrum platforms system configuration files 
expects see textual similarities configuration files request behaviour different environments pairs releases 
copies current release subsequently referred release year ago release basis study 
contents gcc tar gcc tar gz unpacked processing kind subjected text analysis 
prototype implementation allow selection files analysis 
files directories analysed 
total corresponds files megabytes 
exact matches lines discussed section substrings length lines generated matches substring content produced 
raw matches simplified involve minimal set non overlapping substrings discussed data reduction clustering performed 
result clusters indicates useful source 
clusters fall naturally categories depending size releases represented cluster containing files considered complex 
cluster containing file release file release file names different considered type abx 
cluster containing file releases name considered type ab 
cluster containing files release considered type aa 
cluster containing files release considered type bb 
cluster containing file release considered type cluster containing file release considered type table shows breakout clusters types 
clusters files characters unique characters abx ab aa bb total table exact matching cluster breakout expected bulk clusters files characters associated abx ab type clusters 
files involved type cluster unique release similar file release 
recognition fact year large part code remain unaffected intense development underway 
interesting substantial number clusters correspond files changed names releases 
closer investigation seen primarily result reorganization configuration subdirectory config rs md config rs rs md 
file act probably address file system naming restriction 
addition reorganization gcc info files example gcc info large match gcc info 
analysis revealed useful piece information change 
file similarities computed file sizes extent match 
appears indication extent location change clusters types abx ab 
clusters type represent source changed massive way discarded favour new versions 
clusters type correspondingly represent source created releases 
expected new files created old files discarded 
categories config files revealing massive change gone subdirectory 
aa bb clusters identify number files names copying means link 
example object object identical fact hard linked 
files config config mips identical copied 
file config pa properly contained config pa 
type cluster contains small part source 
analysis complex clusters requires sophisticated tools subject current 
files participating identifies part source sharing file contents releases 
largest complex clusters summarized follows parse cexp cp parse bi parser decl cp decl common cp type cp calls expr install gcc info gcc info gcc info gcc info gcc info gcc info config files hp mot news tower fx config dpx config files fx md md gcc info gcc info gcc info gcc info gcc info gcc info gcc info table shows sizes clusters 
case possible file names imagine types commonalities 
cluster clearly contains different versions grammars ready processed bison parser generator source files generated parser generator 
clusters collection related documentation files 
clusters configuration files similar result software cloning 
files characters unique characters table exact matching cluster breakout largest complex clusters approximate matches lines exact matches previous subsection required exact matching consecutive lines detected 
attempt find matches performing transformations text line matches done white space characters line separators deleted 
maximal sequence alphanumeric characters replaced single letter 
effect changing line line line define iii 
aggressive loss information keeping requirement line match ensured explosion match information 
basically files moved simpler clusters complex ones complex clusters merged 
process clusters complex 
breakout summarized table 
clusters files characters unique characters abx ab aa bb total table approximate matching cluster breakout brief examination new matches indicates reasonable file names 
example characters matching respectively match 
generated application file identical directories 
outputs quite different lines different order layout similar 
summary results tool identified clearly changes release release pointed number associations files releases worth 
addition nonsense associations seen 
study detailed information doubt provide additional insight 
current directions clues legacy source help understand structure 
sifting clues effective way requires tools right tools gold 
approach exact matching sequences lines appears provide information comparatively little noise 
preliminary analysis reveals understanding high level structure releases megabyte source directory achieved relatively automated fashion 
focusing elaborating technique understanding wealth information produced process 
example ideas software visualization quite useful understanding complex clusters 
aggregating matches level file important types applications 
baker program identifying duplicated code proceedings computing science statistics th symposium interface 
biggerstaff design recovery maintenance reuse computer pp 
july 
buss de mori gentleman henshaw johnson kontogiannis ller mylopoulos paul prakash stanley tilley wong investigating reverse engineering technologies cas program understanding project ibm syst 
journal press 
buss henshaw experiences program understanding proceedings cas conference pp 
november 
chikofsky cross ii reverse engineering design recovery taxonomy ieee software pp 
january 
johnson identifying redundancy source code fingerprints proceedings cas conference pp 
october 
karp combinatorics complexity randomness communications acm pp 
february 
karp rabin efficient randomized pattern matching algorithms ibm res 
develop 
pp 
march 
