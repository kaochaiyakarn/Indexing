infrastructure reasoning william farmer department computing software mcmaster university main street west hamilton ontario canada mcmaster ca may 
little theories method mathematical reasoning distributed network theories powerful technique describing analyzing complex systems 
presents infrastructure reasoning support applications little theories method 
infrastructure includes machinery store theories theory interpretations store known theorems theory theory de nitions theory extending theory place 
infrastructure extension infrastructure employed imps interactive mathematical proof system 
mathematical reasoning performed context includes vocabulary notation expressing concepts assertions axioms inference rules proving conjectures 
informal mathematical reasoning context entirely implicit 
fact substantial mathematical training needed see context 
situation quite di erent formal mathematics performed logical systems aid computers 
context formalized mathematical structure 
favored mathematical structure purpose axiomatic theory formal logic 
axiomatic theory theory short consists formal language set axioms expressed language 
speci cation set objects language provides names objects axioms constrain properties objects 
sophisticated mathematical reasoning usually involves related di erent mathematical contexts 
main ways dealing th international conference automated deduction cade pittsburgh pa usa june 
published mcallester ed automated deduction cade lecture notes computer science vol 
pp 
springer verlag 
multitude contexts theories 
big theory method choose highly expressive theory set theory type theory represent di erent contexts 
context arises represented theory extension theory 
contexts related theory 
alternate approach little theories method separate contexts represented separate theories 
structural relationships contexts represented interpretations theories see 
interpretations serve conduits passing information de nitions theorems theories concrete theories equally theories 
result big theory replaced network theories include small compact theories large powerful theories 
little theories approach mathematics computer science see 
argue little theories method ers important advantages mechanized mathematics 
advantages demonstrated imps interactive mathematical proof system supports little theories method 
mechanized mathematics system little theories method requires di erent infrastructure big theory method 
big theory method reasoning performed single theory little theories method reasoning 
presents infrastructure reasoning employed kinds mechanized mathematics systems including theorem provers software speci cation veri cation systems computer algebra systems electronic mathematics libraries 
infrastructure closely related infrastructure imps includes capabilities provided imps infrastructure 
little theories method major element design software speci cation systems including iota kids obj specware 
infrastructures systems mainly constructing theories linking network 
support rich interplay making de nitions proving theorems transporting de nitions theorems theory needed developing exploring theories network 
ergo theorem proving system theorem proving system imps directly supports little theories method 
infrastructure reasoning provides full support constructing theories theories inclusion interpretation partial support developing theories making de nitions proving theorems 
ergo theory interpretation static theorems source theory interpretation transported target theory interpretation interpretation created 
theory interpretation dynamic infrastructure imps 
theorem proving systems indirectly support little theories methods allowing network theories formalized big theory 
rest organized follows 
underlying logic infrastructure section 
section discusses design requirements infrastructure 
infrastructure section 
applications infrastructure described section 
underlying logic infrastructure assumes underlying logic 
formal systems including rst order logic zermelo fraenkel set theory serve underlying logic 
sake convenience precision chosen speci underlying logic infrastructure treating underlying logic parameter 
choice church simple theory types denoted underlying logics theorem proving systems example underlying logic imps infrastructure version called lutins :10.1.1.20.7997
lutins admits unde ned terms partial functions subtypes 
virtue support partial functions subtypes theory interpretations expressed directly lutins 
give brief presentation missing details lled consulting church original logic textbooks contains full presentation de ne number logical notions context including notions theory interpretation 
syntax types de ned inductively follows 
type denotes type individuals 

type denotes type truth values 

types type denotes type total functions map values type values type 
denote set types tagged symbol symbol tagged member tagged symbol symbol tag written set tagged symbols called variables set members tagged countably nite 
constant tagged symbol language set constants 
language mean language 
expression type nite sequence symbols de ned inductively follows 
expression type 
expression type expression type expression type 
expression type expression type 
expressions type expression type 

expressions type expressions type 

expression type expressions type 
expressions type denoted denote set expressions free variable closed expression similar notions de ned obvious way 
denote set sentences set closed expressions type semantics language set ml models relation models sentences read model 
language ml model written logically implies written model model theories theory pair language serves set axioms 
theory mean theory 
semantic theorem written consistent sentence theorem theory extension written conservative extension written lemma theory extensions easy prove 
lemma 
theories 




consistent consistent 
interpretations theories total functions 
de ned inductively follows 



translation 
type 

type 
suppose translation member de ned inductively follows 















interpretation translation maps theorems theorems 
theorem relative consistency 
suppose interpretation consistent 
consistent 
proof 
assume interpretation consistent inconsistent 
theorem theorem contradicts consistency theorem gives sucient condition translation interpretation 
theorem interpretation theorem 
suppose translation 
interpretation proof 
proof similar proof theorem design requirements minimum infrastructure reasoning provide capabilities store theories interpretations record theorems discovered 
section naive infrastructure just capabilities 
show naive infrastructure lacks important capabilities 
results formulate requirements infrastructure satisfy 
naive infrastructure naive infrastructure 
design state infrastructure set infrastructure objects 
infrastructure state initially empty set 
changed application infrastructure operations add new objects state modify objects state 
kinds infrastructure objects storing theories theorems interpretations respectively infrastructure operations creating kinds objects installing theorems theories 
infrastructure objects denoted boldface letters 
infrastructure objects de ned simultaneously follows 
theory object tuple string language set theorem objects 
called name denoted 
called theory denoted thy 

theorem object tuple theory object justi cation thy 
interpretation object tuple theory objects translation justi cation interpretation thy thy 
denote infrastructure state 
infrastructure operations de ned follows 
string language input theory objects thy thy create thy obj adds theory object operation fails 

theory object sentence justi cation input theorem object create thm obj adds operation fails 

theory objects translation justi cation input interpretation object create int obj adds operation fails 

theorem object theory object input thy thy install thm obj replaces theory object fag operation fails 
notion justi cation speci ed 
example formal proof 
missing capabilities naive infrastructure missing important capabilities de nitions suppose de nition constant zero predicate theory stored theory object naive infrastructure ers way create extension fis zero fis zero store new theory object invoking create thy obj 
zero regarded theory zero eliminated expression replacing occurrence 
de nitions time mathematics implementing de nitions way lead explosion theory objects storing theories essentially 
better way implementing de nitions extend place replacing resulting object theory object theorem theorem approach introduce new problem 
interpretation object thy extended place making definition interpretation longer interpretation de ned 
basic solutions problem 
rst automatically extend interpretation de ning 
solution disadvantage expression containing translated expression extended expression expanded possibly bigger expression second solution automatically transport de nition making new de nition form de ning implementation solution require care similar theories interpreted third theory common de nitions source theories may transported multiple times target theory resulting de nitions target theory de ne di erent constants exactly way 
nal solution user extend hand necessary 
solution exible rst solutions impose heavy burden user 
experience developing imps suggests best solution combination basic solutions 
pro les suppose de nition constant non zero value equal theory stored theory object add new constant non zero value speci ed necessarily uniquely determined sentence non zero 
precisely fa non zero non zero non zero sentence theorem call de nitions kind pro les 
pro le introduces nite number new constants satisfy property 
ordinary de nitions pro les produce conservative extensions ordinary de nitions constants introduced pro le generally eliminated 
pro le viewed generalization de nition de nition expressed pro le 
pro les useful introducing new machinery theory 
example pro le introduce collection objects plus set operations objects called algebra mathematics datatype computer science 
new machinery compromise original machinery resulting extension conservative 
conservative extension reasoning performed just performed availability normally obsolete 
making pro les naive infrastructure leads theory objects store obsolete theories 
way implementing de nitions extending theories place just pro les 
de nitions extending theories place cause interpretations break 
combination second third basic solutions problem de nitions pro les 
rst basic solution applicable pro les generally property de nitions 
theory extensions suppose contains theory objects thy thy 
cases want theorem object installed installed naive infrastructure capability 
support having theorem objects installed theory object automatically installed preselected extensions theory object 
infrastructure guarantee theory object preselected extension theorem de nition pro le installed installed theory copies naive infrastructure allow infrastructure state contain theory objects storing theory 
consequence possible add copy theory object infrastructure state 
see section creating copies theory object useful modularization technique 
pro les called constant speci cations constraints 
requirements analysis naive infrastructure suggests infrastructure satisfy requirements infrastructure enables theories interpretations stored 
known theorems theory stored theory 
de nitions theory extending theory place 
pro les theory extending theory place 
theorems de nitions pro les installed theory automatically installed certain preselected extensions theory 
interpretation extended place interpretation extended de nitions pro les 
copy stored theory created developed independently original theory 
naive infrastructure satis es requirements 
imps infrastructure satis es requirements 
infrastructure section presents infrastructure satis es requirements section 
naive infrastructure infrastructure objects operations di erent 
infrastructure state set infrastructure objects initially empty set changed application infrastructure operations add new objects state modify objects state 
naive infrastructure denote infrastructure state 
objects kinds infrastructure objects 
rst de ned simultaneously follows 
theory object tuple 
string called name denoted 
languages called base language current language respectively 
members called base axioms current axioms respectively 

fa sl members 
called known theorems 
denoted thms 
nite sequence theorem de nition pro le objects called event history 
set names theory objects called principal subtheories 
subsequence 
base theory theory current theory written thy theory 

theorem object tuple theory object thy 
called theorem 
justi cation 
de nition object tuple theory object thy 
constant 
called de ning axiom 
justi cation occur called obligation 
pro le object tuple theory object thy 
fc set constants 

distinct variables 

called pro ling axiom 
justi cation 

called obligation event object theorem de nition pro le object 
mean thy thy mean thy thy 
structural subtheory true 

structural subtheory principal subtheory structural structural subtheory theory object 
event object justi cation correct theory object de ned follows 
theorem object 

fa hei unde ned 

de nition object 
fc fa 
fa hei de ning axiom unde ned 
holds justi cation needed logics lutins justi cation needed hold unde ned 

pro le object 
fa 
fa hei pro ling axiom unde ned 
event history correct justi cation member correct 
correct event history de ned 
hi 

hei 
de ned unde ned 
base written base theory object base hi proper conditions satis ed 
event history correct 

thy thy base 

thms thms base 
lemma 
proper theory object known theorem base axiom theorem de ning axiom pro ling axiom event object event history proof 
follows immediately de nitions 
theorem 
proper theory object base proof 
proper event history correct thy thy base 
show base induction length 
basis 
assume 
thy thy base base obviously true 
induction step 
assume 
suppose hei 
induction hypothesis base base 
claim base base 
theorem object clearly thy base thy base base base 
de nition pro le object base base justi cation base follows part lemma 
de ne fth infrastructure object interpretation object tuple 
theory object called source theory 
theory object called target theory 
translation 

justi cation interpretation thy base thy base initial segments event histories respectively 
operations infrastructure design includes operations 
operations creating infrastructure objects 
string language set sentences theory objects input 








tm theory object theory object create thy obj adds operation fails 

theory object sentence justi cation input theorem object create thm obj adds operation fails 

theory object constant expression justi cation input de nition object create def obj adds operation fails 

theory object set constants expression justi cation input pro le object create pro obj adds operation fails 

theory objects translation justi cation input interpretation object create int obj adds operation fails 
operations installing theorem de nition pro le objects theory objects 
theorem object theory object install thm obj replaces structural operation fails 

de nition object theory object de ned structural install def obj replaces structural operation fails 

pro le object theory object de ned structural install pro obj replaces structural operation fails 
operations extend interpretation object copy theory object 
interpretation object translation justi cation input extends interpretation object extend int replaces operation fails 

string theory object 
input theory object create thy copy adds theory object 
operation fails 
infrastructure operations guarantee theorem holds theorem 
justi cation event object correct 
object de ned theory theorem de nition pro le interpretation object 

theory object proper 

distinct theory objects distinct names 
remarks infrastructure 
theory interpretation objects modi able event objects 

event history theory object records theory object constructed base theory 

theory stored theory object extends theories stored principal subtheories 
theorem de nition pro le objects installed theory automatically installed structural 
infrastructure allows de nitions pro les theory object modifying install def obj install prof obj creating extension create thy obj 

theorem translation thy thy maps base axioms known theorems interpretation thy thy 

interpretation stored interpretation object allowed incomplete 
extended needed extend int 
applications theory development system infrastructure provides strong foundation build system developing axiomatic theories 
infrastructure operations enable theories interpretations created extended 
additional operations built top infrastructure operations 
examples include operations transporting theorems de nitions pro les theory instantiating theories 
theorem object installed interpretation object input operation transport thm obj invoke create thm obj install thm obj create new theorem object install justi cation formed constant de nition object installed interpretation object input current language operation transport def obj invoke create def obj install def obj create new de nition object install operation fails 
justi cation formed operation transport pro obj de ned similarly 
theory objects interpretation object input operation instantiate thy invoke create thy obj create new theory object create int obj create new interpretation object extension obtained instantiating part outside determined 
constants may need renamed avoid con icts constants interpretation thy thy extends 
details see 
notion theory instantiation closely related notion theory instantiation proposed burstall goguen approaches theory instantiated interpretation 
approach theory instantiated respect subtheories 
burstall goguen approach parameterized theories instantiated respect explicit parameter parameterized theory 
foundational theory development system theory development system foundational theory developed system consistent relative foundational theories known regarded consistent 
operations installing theorems de nitions pro les theory produce conservative extensions original theory theorem operations preserve consistency 
foundational theory development system implemented top infrastructure design simply new operation creating theory objects successful theory stored object consistent relative foundational theories 
new operation de ned follows 
suppose foundational theory 
string language set sentences theory objects tm translation justi cation input justi cation interpretation thy new operation invoke create thy obj tm create theory object invoke create int obj create interpretation object operation fails 
operation successful correct thy consistent relative thy theorem 
encapsulated theory development proving theorem theory may require introducing de nitions proving lemmas theory useful theorem proved 
local de nitions lemmas logical clutter theory 
strategy handling kind clutter encapsulate local development auxiliary theory separated development main theory 
infrastructure design encapsulation possible 
suppose prove theorem theory stored theory object local de nitions lemmas 
create thy copy create copy create int obj create interpretation object storing identity interpretation thy thy 
needed local de nitions lemmas installed de nition theorem objects theorem proved installed theorem object theorem transported back interpretation stored local development needed prove theorem reside completely outside development di erent way encapsulate local theory development acl theorem prover 
sequent style proof system goal oriented sequent style proof system built top infrastructure 
sequent form theory object called context sentence current language called assertion 
system include usual inference rules sequent style proof system plus rules install theorem de nition pro le context sequent 
transport theorem de nition pro le theory object context sequent 
proof rules deduction rule add remove axioms context sequent de ning new theory objects 
proof rules rules universal generalization existential instantiation elimination implemented installing pro le context sequent 
sentence current language theory object proved follows 
create thy copy create copy create int obj create interpretation object storing identity interpretation thy thy 
sequent proved possibly help local imported de nitions lemmas 
contexts created course proof distinct theorem de nition installed context appearing part proof available context appeared proof 
proof nished installed theorem object theorem transported back interpretation stored theory objects needed proof separated theory objects acknowledgments ideas originated design implementation imps done jointly dr joshua guttman dr javier thayer author 

andrews 
mathematical logic type theory truth proof 
academic press 

burstall goguen 
semantics clear speci cation language 
advanced course software speci cations volume lecture notes computer science pages 
springer verlag 

church 
formulation simple theory types 
journal symbolic logic 

enderton 
mathematical logic 
academic press 

farmer 
partial functions version church simple theory types 
journal symbolic logic 

farmer 
simple type theory partial functions subtypes 
annals pure applied logic 

farmer 
general method safely overwriting theories mechanized mathematics systems 
technical report mitre 

farmer 
theory interpretation simple type theory 
heering editor higher order algebra logic term rewriting volume lecture notes computer science pages 
springer verlag 

farmer guttman thayer 
imps updated system description 
slaney editors automated deduction cade volume lecture notes computer science pages 
springerverlag 

farmer guttman thayer 
little theories 
kapur editor automated deduction cade volume lecture notes computer science pages 
springer verlag 

farmer guttman thayer 
imps interactive mathematical proof system 
journal automated reasoning 

goguen winkler 
introducing obj 
technical report sri csl sri international august 

gordon melham 
hol theorem proving environment higher order logic 
cambridge university press 

hamilton 
interpretation instantiation theories reasoning formal speci cations 
patel editor proceedings twentieth australasian computer science conference volume australian computer science communications pages 

kaufmann moore 
structured theory development mechanized logic 
available www cs utexas edu users moore publications acl papers html 

nakajima editors 
iota programming system volume lecture notes computer science 
springer verlag 


ergo sum providing structured theorem prover support speci cation formalisms 
ramamohanarao editor proceedings nineteenth australasian computer science conference volume australian computer science communications pages 

rushby von henke owre 
formal speci cation veri cation 
technical report sri csl sri international 

eld 
mathematical logic 
addison wesley 

smith 
kids knowledge software development system 
lowry editors automating software design pages 
mit press 

srinivas 
specware formal support composing software 
proceedings conference mathematics program construction 

