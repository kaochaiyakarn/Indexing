knowledge recommender systems robin burke department information computer science university california irvine burke ics uci edu appear encyclopedia library information science 

recommender systems provide advice users items wish purchase examine 
recommendations systems help users navigate large information spaces product descriptions news articles items 
line information commerce recommender systems increasingly important tool 
survey recommender systems maes guttman moukas 
see goldberg resnick resnick varian accompanying articles 
known type recommender system collaborative type 
systems aggregate data customers purchasing habits preferences recommendations users similarity purchasing patterns 
example ringo music recommender system shardanand maes users express musical preferences rating various artists albums get suggestions groups recordings similar preferences liked :10.1.1.30.6583
content recommender systems classifier systems derived machine learning research 
example news filtering system recommender system suggests news stories user read billsus pazzani 
systems supervised machine learning induce classifier discriminate items interest user uninteresting 
third type recommender system uses knowledge users products pursue knowledge approach generating recommendation reasoning products meet user requirements 
recommender system offers dialog effectively walks user discrimination tree product features 
adapted quantitative decision support tools task bhargava sridhar 
class systems concentrate draws research case reasoning cbr hammond kolodner riesbeck schank 
restaurant recommender entree burke hammond cooper burke hammond young recommendations finding restaurants new city similar restaurants user knows likes 
system allows users navigate stating preferences respect restaurant refining search criteria 
approaches strengths weaknesses 
collaborative filtering system collects ratings users probability increases url www com url ils nwu edu entree system match new user 
collaborative filtering system initialized large amount data system small base ratings useful 
accuracy system sensitive number rated items associated user shardanand maes :10.1.1.30.6583
factors contribute ramp problem large number users habits known system useful users sufficient number rated items collected system useful particular user 
similar ramp problem associated machine learning approaches recommendation 
typically classifiers learned user rated items 
system avoids problem nearest neighbor classifier works examples system base recommendations ratings recommend stories similar ones user previously rated 
knowledge recommender system avoids drawbacks 
ramp problem recommendations depend base user ratings 
gather information particular user judgements independent individual tastes 
characteristics knowledgebased recommenders valuable systems highly complementary types recommender systems 
return idea article 
example shows initial screen entree restaurant recommender 
user starts known restaurant wolfgang puck main los angeles 
shown system finds similar chicago restaurant combines asian french influences cafe user interested cheaper meal selects button 
result creative asian restaurant cheaper price bracket note french influence lost consequence move lower price bracket 
figures show similar interaction sequence knowledge recommender system commerce portal site recommender com 
search starts user enters name movie liked verdict drama paul newman 
system looks movie finds handful similar appears 
top rated recommendation comedy user case wants 
add feature menu seen allows user push search slightly different direction specifying movie mystery suspense component 
shows results search system finds jagged edge movie combines drama murder mystery 
note connection pacific new wave cuisine asian french components part system knowledge base 
entry point entree system similarity retrieval entree navigation tweak entry point recommender com movie recommender similarity retrieval movie recommender applying add feature tweak result adding mystery suspense feature tweak 
history entree recommender com findme knowledge recommender systems 
findme systems distinguished recommender systems emphasis examples guide search search interaction proceeds tweaking altering characteristics example 
findme technique knowledge similarity retrieval 
fundamental retrieval modes similarity finding tweak application 
similarity case user selected item catalog called source requested items similar 
perform retrieval large set candidate entities initially retrieved database 
set sorted similarity source top candidates returned user 
tweak application essentially candidate set filtered prior sorting leave candidates satisfy tweak 
example user responds item tweak nicer system determines value rejects candidates value greater 
findme system car navigator information access system descriptions new car models 
system cars rated long list criteria horsepower price gas mileage directly manipulated 
retrieval performed turning individual criteria similarity finding query get new set cars 
experimentation interface added capability making large jumps feature space buttons alter variables 
user wanted car currently examining imply number changes feature set larger engine quicker acceleration willingness pay example 
buttons marked findme signature conversational interaction focused high level responses particular examples retrieval fine grained details 
direct manipulation features appealing situations users preferred redirect search 
prototype turned attention complex domain movies gotten attention collaborative filtering researchers 
returned retrieval approach letting users find movies similar ones knew liked 
movie recommender sets suggestions introducing idea multiple retrieval strategies different ways assessing similarity items 
user entered name movie bringing baby classic comedy cary system locate similar movies different strategies 
look movies similar genre fast paced 
shows finds girl friday comedy era cary 
second strategy looks movies similar casts 
strategy discard movies recommended finds classic particular philadelphia story features team 
director strategy returns movies howard hawks preferring similar genre 
multi strategy retrieval system apartment finding recommender system 
cars movies easy way name particular apartments standard entry point known example effective domain 
fairly traditional set query menus initiate interaction 
list apartments meeting constraints forms starting point continued browsing 
natural language processing generate database starting text file classified ads apartments 
terse language classified ads difficult parse rigorously simple parser schank riesbeck worked better simple keyword extraction 
entree findme system sufficiently stable robust efficient serve public web site 
previous findme systems implemented common lisp kept entire corpus examples memory 
design advantage quick access easy manipulation data scalable large data sets 
entree system written external database restaurant data 
publicly accessible web august 
domain specific findme system allowed users navigate configurations home theater systems 
user browse configurations adjusting budget constraint features room adding removing replacing components 
database individual stereo components features entire configurations properties 
dealing configurations items possible construct system component component system starting point 
search space somewhat different systems discussed far combination features expressed exists system 

recommender personal shopper evolution findme systems demonstrates characteristics share centrality examples ii conversational navigation iii knowledgebased similarity metrics iv task specific retrieval strategies 
recommendation engine recommender com site recommender personal shopper rps represents culmination findme research program 
domain independent implementation findme algorithm interfaces standard relational databases 
task building rps create generic recommendation capability customized domain addition product data declarative similarity knowledge 
similarity initial findme experiments demonstrated case reasoning researchers known similarity simple uniform concept 
part counts similar depends goals shoe similar hammer looking bang wants extract 
findme similarity measures goal consider adapted version part web presence usa 
see burke 
multiple goals tradeoffs 
typically handful standard goals product domain 
goal define similarity metric measures closely products come meeting goal 
restaurants price get maximum similarity rating metric price may differ greatly metric quality type cuisine 
various findme prototypes looked interactions goals experimented combinations metrics achieve intuitive rankings products 
defined priorities attached important goals treated independently 
example restaurant domain cuisine paramount importance 
part reason cuisine category defines meaning features high quality french restaurant really comparable high quality burger joint partly means serve french cuisine 
think primary category important goal recommendation satisfy goals factored similarity calculation 
example entree restaurant recommender system goals cuisine price quality atmosphere applied rank order capture intuition important restaurants 
course possible different users different goal orderings different goals altogether 
findme system may different retrieval strategies capturing different notion similarity 
retrieval strategy selects goals comparing entities orders giving rise different assessments similarity 
example created multiple lists similar movies employing retrieval strategies concentrated genre focused actors third emphasized direction 
sorting algorithm findme sorting algorithm begins source entity item similarity sought initial entry point provided user retrieval strategy ordered list similarity metrics mm 
task return fixed size ranked list target entities length ordered similarity task obtain unranked set candidates product database 
retrieval process discussed section 
similarity assessment alphabetic sort list buckets 
bucket contains set target entities 
bucket list initialized bucket contains sort performed applying important metric corresponding important goal retrieval strategy 
result new set buckets containing items integer score 
starting count contents buckets reach number items ultimately return discard remaining buckets 
contents result list 
process repeated remaining metrics singleton buckets remaining point sorting effect metrics 
multi level sort replaced single sort provided score target entity reflect position complex version 
consider case metrics 
bi upper bound score comparing target entity metric mi bi max mi target entity 
single pass scoring function combination metrics 
function sort target entity list set buckets obtained pass sort applying 
general case scoring function mi bj number metrics 
final optimization note rarely interested complete sort candidate list 
generally returning small set best answers case movie recommender 
get top targets performing operations length candidate list 
list large faster performing log complete sort 
max finding operation optimized comparison function applying metrics decreasing order importance multiplier magnitude 
high targets may need metric applications rule top retrieval algorithm original implementations findme algorithm retrieved large candidate sets 
promiscuous retrieval deliberately steps tweaking steps filtered candidates important exclude potentially useful target 
lisp implementations large candidate set reasonably efficient candidates memory 
true moved relational databases storing entity data 
queries return large numbers rows highly inefficient retrieved entity allocated heap 
employed relational store original algorithms yielded unacceptable response times greater minutes 
necessary retrieve precisely get back just items highly rated sort algorithm 
solution natural outgrowth metric strategy system developed sorting inspired system performs nearestneighbor retrieval relational databases kitano shibata 
metric responsible generating retrieval constraints source entity 
constraints turned sql clauses retrieval took place 
approach especially powerful 
properly constrained query tweak cheaper retrieve entities pass cheaper filter avoiding reading instantiating entities immediately discarded 
retrieval algorithm works follows 
retrieve candidates comparison source entity metric creates constraint 
constraints ordered priority metric current retrieval strategy 
query tweak constraint created implements tweak highest priority 
practical matter noted metrics large scoring range function large 
example metrics range exceeds capacity bit unsigned integer constraint considered non optional sql query created conjoining constraints passed database 
entities returned lowest priority constraint dropped query resubmitted 
process continue optional constraints dropped 
interaction constraint set candidate set size dramatic query returns return thousands entities relaxed constraints 
considering flexible constraint scheme metric propose small set progressively inclusive constraints just 
database access time dominates processing time system expect additional computation involved outweighed efficiencies accurate retrieval 
product data generic findme engine implemented rps knows restaurants movies domain recommendation 
simply applies similarity metrics entities described feature sets 
architecture decomposed task creating recommender system parts creation product database unique items associated sets features specification similarity metrics retrieval strategies appropriate items 
entity represented rps simply set integer features 
representation extremely generic compact efficient easily stored relational database 
product database single table associates entity id features 
create feature set product information available item qualities 
domains rps applied product databases typically consist handful fields describing product qualities price chunks natural language text intended product description 
natural language processing needed descriptive information 
important note interested comparing descriptions dining experience restaurant experience restaurant 
experience watching movie similar movie 
build sophisticated linguistic structures transform natural language description atomic features represent aspect entity 
product descriptions general tend complex syntactically consisting largely descriptive adjectives nouns 
typically categories information interest 
restaurants qualities atmosphere loud romantic qualities cuisine traditional creative wines descriptions flavor wine berry tobacco descriptions wine body texture category identify commonly terms usually nouns 
identify modifiers quantity lots lacking quality lovely ugly 
applications level keyword identification sufficient 
cases depth analysis required including phrase recognition parsing 
descriptions wines evocative language difficult texts tackled 
metrics similarity metrics retrieval strategies really heart knowledge recommendation findme system 
metrics determine counts similar items compared retrieval strategies determine important different aspects similarity calculation 
creation new findme system requires creation refinement crucial kinds information 
similarity metric function takes entities returns value reflecting similarity respect goal 
original findme systems implemented similarity metric idea different domain specific ways 
rps created small set metric types general cover similarity computations findme systems 
example included give flavor kinds comparisons metrics perform 
price obvious candidate similarity metric consumer items compared price 
price simple 
user looking restaurant similar restaurant price indicating willing spend prices shouldn penalized different way prices 
prices necessarily preferred user evidently willing spend amount 
price comparison implemented directional scalar metric form source entity item user chosen 
target entity comparing source 
directional metric decreasing preference features set set price features 
fs ft features respectively 
cardinality set score returned metric ft fs ft fs 
restaurant price price bracket restaurant price bracket metric report restaurant gets score possible price bracket expensive restaurant typical tab price bracket get maximum score price penalize cheaper price special case product usually price 
similarity metrics handle cases multiple features compared source target 
multiple feature version metric goes target features aligning feature source gives best score 
scalar metric non directional 
example comparing shirts possible compare weight different fabrics scalar quantity direction preference assumed shirts different weights just different 
score absolute value ft fs cases 
findme metrics return integer values facilitate bucket sort 
larger numbers mean better match 
note metric depends actual numeric difference integer features 
metrics impose semantics mapping features integers scalar metrics features category mapped integer range 
feature cuisine restaurants presents complex matching problem 
entree system represents semantic network uses marker passing calculate distances 
performance reasons opted networks rps metric set 
table metric represent network adjacency matrix records distance feature features reachable 
matrix course represent just semantic networks mapping feature pair integer 
retrieval strategies arrangement similarity metrics priority relationships 
usually important metric obvious cuisine restaurants grape wines genre movies 
selecting ordering lower priority metrics harder requires experimentation 
easy get users respond questions form similar item surveys consisting chosen comparisons useful determining priority assign different aspects item 
obviously different individuals may hold goals different relative priorities 
obvious example goal paying money 
restaurants distinguish strategies normal retrieval strategy puts money second cuisine strategy puts money third cuisine quality money object strategy consider money 
ultimately findme system knows domain fairly shallow different ways items similar standard ways prioritizing individual assessments strategies 
steps required gather knowledge particularly complex part longer term research agenda creation tools automate majority process 
stage development technology significant obstacle construction effective findme systems practical problem getting high quality date product data 

hybrid recommender systems knowledge engineering type described necessary building knowledge recommender system 
inevitable price admission knowledge approach price incurred knowledge weak method collaborative filtering machine learning 
weak methods suffer ramp problem mentioned earlier 
differing strengths approaches suggest may complementary competing approaches generation recommendations 
particular benefit findme systems gather preference information requiring users ratings explicit 
requiring user input preferences starting point findme systems user browse catalog qualitative ratings navigation aids 
navigation step informs system user preferences finer grain detail single buy decision user navigation steps average entree system 
table contrasts collaborative filtering knowledge approaches identifying positive negative aspects 
third row suggests achieved ideal hybrid combines techniques 
despite necessary investment knowledge engineering hybrid offer performance little user data benefits collaborative filtering data collected 
technique pluses knowledgebased collaborative filtering ramp required detailed qualitative preference feedback findme systems sensitive preferences changes identify niches precisely 
domain knowledge needed 
quality improves time 
personalized recommendations 
ideal hybrid possible synergy findme systems appears particularly promising systems preference browsing permit collection detailed user ratings rarely purchased items automobiles houses 
combining recommendation techniques findme systems case retrieval strategy fails discriminate returned items completely 
system required arbitrarily select items return example topmost bucket size 
case consider result discriminated eliminating discriminated results findme systems difficult requires addition new similarity metrics attendant knowledge engineering tasks may require depth representation products 
collaborative filtering add additional discrimination requiring knowledge engineering 
consider system addition findme recommender component collaborative filtering engine ratings obtained recording example user seen user reaction 
user names item starting point consider high rating user seeking similar seen liked 
exit point system considered high rating user stops searching reliable user may finding satisfactory 
tweak way consider negative rating user dislike 
technique accumulate ratings typically negative positive users overhead logging findme activity 
ratings compute correlations users 
operation recommender weak starts small amount data want suggestions directly users 
bad suggestion examine items topmost discriminated bucket 
performed normal findme ranking look user profile rate rank item topmost bucket 
little risk applying collaborative filtering 
worst case ratings collaborative filter random selecting items equally similar far knowledge system concerned 
consider example alice connects version entree includes collaborative filtering component 
registers new user starts browsing chicago restaurants entering name favorite restaurant home knowledge engineering 
suggestion ability static 
quality dependent large historical data set 
subject statistical anomalies data 
insensitive preference changes table tradeoffs knowledge collaborative filtering recommender systems 
restaurant san francisco 
characterized serving vegetarian cuisine 
top recommendation west serves turns alice fact vegetarian system cuisine choice moves back vegetarian recommendations 
system built bigger user base new user ben approaches system starting point recommendation alice discriminated feedback users allows system fully discriminate ben recommendation return jane vegetarian restaurant preferring west thought experiment suggests combination knowledge collaborative filtering techniques may produce recommender system characteristics ideal hybrid 
initial suggestions knowledge base rely 
system database ratings increases move knowledge base characterize users precisely 
knowledge base users trapped past behavior 
alice decides vegetarian system difficult get recommendations 
test validity approach data gathered entree system years public total interactive sessions 
treat session individual user entree way identify unique returning users 
individually identified data available increase accuracy collaborative filtering fewer users ratings user 
users training remaining selected active users rated restaurants 
highly active users 
active user performed trials selecting examples provide training data user examples testing including restaurant know user likes 
goal system predict test examples user rate positively 
task reasonable correlate system perform select best recommendation unordered bucket 
shows results conditions compared precision top suggestion percent times correct restaurant selected user 
random condition recommendation chosen random test set 
effectively findme system 
average condition system chooses recommendation highest average rating users 
collaborative filtering condition cf chooses suggestion correlating user known ratings users perform prediction 
collaborative filtering average preference suggest better chance 
small number ratings collected user collaborative filtering contributes substantially 
precision training examples random average results hybrid recommender experiments precision top ranked item findings suggest type hybrid recommender system suggested effective incorporate data available navigational actions findme systems 
collaborative filtering technique experiment ignores difference user liking restaurant expensive user liking restaurant cuisine traditional 
ideally aggregate users reasons restaurants 
difficulty qualitative tweak data increases sparseness sparse data set 
research directions findme systems explore ways manage increased dimensionality qualitative ratings 
particularly interested possible application singular value decomposition deerwester 

related knowledge recommender systems gotten relatively little research attention date 
discussed earlier closest precedent knowledgebased methods retrieval comes case reasoning 
case reasoning system solves new problems retrieving old problems similar solutions 
researchers working retrieval cbr cases concentrated developing knowledge methods precise efficient retrieval represented examples 
tasks case educational systems cases serve variety purposes cbr systems explored multiple goal retrieval strategies discussed burke kass 
obviously related cbr research case adaptation 
note term different 
tweaking context cbr means adapt returned case closely match problem situation cf applied 
user invokes findme applied differently 
invent new movie change existing match user desires best attempt new retrieval keeping user preference mind 
problem intelligent assistance browsing especially web browsing topic active interest ai community 
number lines research directed understanding browsing behavior users konstan perkowitz etzioni extracting information pages craven knoblock cohen automatically locating related information lieberman 
web presents unconstrained domain systems methods typically statistical ones 
information retrieval research retrieval seen main task interacting information source browsing 
ability tailor retrieval obtaining user response retrieved items implemented information retrieval systems retrieval clustering cutting relevance feedback salton mcgill 
approach differs relevance feedback approaches explicitness flexibility 
relevance feedback approaches user selects retrieved documents relevant detailed feedback features retrieval process 
findme systems supply concrete domain specific feedback 
addition findme systems limited finding items similarity 
user say give items aim relevance feedback clustering systems asks items different item particular way 
examples basis querying databases development query example ullman 
full featured database systems offer ability construct queries form fictitious database record certain features fixed variable 
rabbit system williams took capacity step allowed retrieval incremental reformulation letting user incorporate parts retrieved items query successively refining 
systems findme uses examples help user elaborate queries unique knowledge reformulation redirect search specific user goals 
schneiderman dynamic query systems approach database navigation schneiderman 
systems dimensional graphical maps data space examples typically represented points 
queries created moving sliders correspond features items retrieved query shown appropriately colored points space 
technique effective dimensional data maps relevant retrieval variables scalar values 
rps dynamic query approach benefit letting users discover tradeoffs data users watch pattern retrieved data change values manipulated 
early car navigator experiments direct manipulation effective features manipulated especially users may aware relationships 

knowledge recommender systems perform needed function world expanding information resources 
recommender systems depend large bodies statistical data particular rated items particular users 
experience shown knowledge component systems need prohibitively large need knowledge judge items similar 
knowledge recommender systems help users explore understand information space 
users integral part knowledge discovery process elaborating information needs course interacting system 
need general knowledge set items informal knowledge needs system knows tradeoffs category boundaries useful search strategies domain 
knowledge recommender systems strongly complementary types recommender systems 
shown way hybrid knowledgebased collaborative system successfully constructed fertile research area room experimentation 
article part findme approach assisted browsing robin burke kristian hammond benjamin young appeared ieee expert pp 
july august 
ieee 
recommender com engine developed kristian hammond jim silverstein author recommender com assistance national science foundation program contract 
findme research supported university chicago office naval research 
interface entree system designed created robin university chicago 
contributed findme effort university chicago including terrence kai martin kass schmitt robb thomas 
daniel billsus university california irvine designed performed collaborative filtering experiments reported 
development recommender com personal shopper system benefited insights gained workshop efforts jeff barth cate brady drew scott paul peter 
bhargava sridhar 
spreadsheets tools building decision support systems 
ieee computer 
billsus pazzani 
hybrid user model news story classification 
proceedings seventh international conference user modeling 
banff canada june 
burke 
personal shopper case recommender system 
proceedings th annual conference innovative applications artificial intelligence 
pp 

menlo park ca aaai press 
burke kass 
supporting learning active retrieval video stories 
journal expert systems applications 
burke hammond cooper 
knowledge navigation complex information spaces 
proceedings th national conference artificial intelligence pp 

menlo park ca aaai press 
burke hammond young 
findme approach assisted browsing 
ieee expert 
cohen 
web information system reasons structured collections text 
proceedings second international conference autonomous agents pp 

new york acm press 
craven dipasquo freitag mccallum mitchell nigam slattery 
learning extract symbolic knowledge world wide web 
proceedings fifteenth national conference artificial intelligence pp 

menlo park ca aaai press 
cutting pederson karger tukey 
scatter gather cluster approach browsing large document collections 
proceedings th annual international acm sigir conference pp 

new york acm press 
deerwester dumais landauer furnas harshman 
indexing latent semantic analysis 
journal society information science 
goldberg nichols oki terry 
collaborative filtering weave information tapestry 
communications acm 
hammond 
case planning viewing planning memory task 
boston ma academic press 
knoblock minton ambite ashish modi muslea tejada 
modeling web sources information integration 
proceedings fifteenth national conference artificial intelligence pp 

menlo park ca aaai press 
kolodner 
case reasoning 
san mateo ca morgan kaufmann 
konstan miller maltz herlocker gordon riedl 
grouplens applying collaborative filtering usenet news 
communications acm 
maes guttman moukas 
agents buy sell 
communications acm 
perkowitz etzioni 
adaptive web sites automatically synthesizing web pages 
proceedings fifteenth national conference artificial intelligence pp 

menlo park ca aaai press 
resnick varian 
recommender systems 
communications acm 
resnick iacovou suchak bergstrom riedl grouplens open architecture collaborative filtering netnews 
cscw proceedings conference computer supported cooperative pp 

new york acm press 
riesbeck schank 
inside case reasoning 
hillsdale nj lawrence erlbaum 
salton mcgill 
modern information retrieval 
new york mcgraw hill 
schank riesbeck 
inside computer understanding programs 
hillsdale new jersey lawrence erlbaum associates 
schneiderman 
dynamic queries visual information seeking 
ieee software 
shardanand maes 
social information filtering algorithms automating word mouth chi conference proceedings human factors computing systems pp 

new york acm press 
kitano shibata 
retrieving cases relational data bases stride corporate wide case base systems 
proceedings international joint conference artificial intelligence pp 

new york morgan kaufmann 
ullman 
principles database knowledge base systems vol 
computer science press 
wiener 
book video lists 
kansas city andrews 
williams tou fikes henderson malone 
rabbit cognitive science interface design 
fourth annual conference cognitive science society pp 

ann arbor mi 

