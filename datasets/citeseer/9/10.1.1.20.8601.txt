framework authentication access control client server group communication systems yair amir cristina jonathan stanton department computer science johns hopkins university north charles st baltimore md usa cs jhu edu 
researchers progress designing secure scalable protocols provide speci security services data secrecy data integrity entity authentication access control multicast group applications 
emphasis put integrate security protocols modern highly ecient group communication systems issues arise secure group communication systems 
exible modular architecture integrating di erent authentication access control policies protocols existing group communication system allowing applications provide protocols control policies 
architecture maintains possible scalability performance characteristics system 
discuss challenges designing framework show implementation spread wide area group communication toolkit 
internet today global information resource support collaborative applications voice video conferencing whiteboards distributed simulations games replicated servers types 
collaborative applications require secure message dissemination group ecient synchronization mechanisms 
secure group communication systems provide services simplify application development 
secure group communication system needs provide con dentiality integrity client data integrity possibly con dentiality server control data client authentication message source authentication access control system resources services 
protocols policy languages algorithms developed provide security services groups 
study supported defense advanced research projects agency 
integration techniques group communication systems 
needed scheme exible accommodate range options simple ecient appeal application developers 
complete secure group communication systems rare research transition protocols complete systems scarce 
secure group systems really involve intersection major distinct research areas networking protocols distributed algorithms systems cryptographic security protocols 
simplistic approach building secure group system select speci key management protocol standard encryption algorithm existing access control policy language integrate messaging system 
produce working system complex xed abilities hard maintain security features mixed networking protocols distributed algorithms 
contrast sophisticated approach construct architecture allows applications plug desired security policy mechanisms enforce policy 
application particular security policies natural give application control specifying policy implementation services part policy 
proposes new approach group communication system architecture 
precisely provides architecture authentication access control 
architecture exible allowing di erent protocols supported executing time modular security protocols implemented maintained independently network distributed protocols group messaging system allows applications control security services protocols con gure eciently enforces chosen security policy impacting messaging performance system 
group communication systems built client server architecture relatively small number servers provide group communication services numerous clients focused systems utilizing architecture 
implemented framework spread wide area group communication system 
evaluate exibility simplicity framework case studies di erent authentication access control methods 
show simple ip access control password authentication sophisticated pam anonymous payment group protocols supported framework 
note defense particular access control policy authentication method group trust model 
provides exible complete interface allow polices methods models expressed enforced existing actively group communication system 
rest organized follows 
section overviews related 
authentication access control framework im may apply network level multicast explored 
plementation spread toolkit section 
provide brief case studies diverse protocols policies supported framework section 
conclude discuss directions 
related major directions secure group communication research 
rst aims provide security services ip multicast reliable ip multicast 
research area assumes model consisting sender receivers focuses high scalability protocols 
presence shared secret foundation eciently providing data con dentiality data integrity lot done designing scalable key management protocols 
lack space cite ones framework group secure association key management protocol 
second major direction secure group communication research securing application level multicast systems known group communication systems 
systems assume communication model member group receiver sender provide reliability strong message ordering group membership guarantees moderate scalability 
initially group communication systems designed high availability fault tolerant systems local area networks 
rst group communication systems isis horus transis totem rmp concerned addressing security issues focused ordering synchronization semantics provided application virtual synchrony extended virtual synchrony models 
number secure group communication systems small 
system spread implementation group communication systems focus security rampart system securering project ucsb horus ensemble cornell 
special case antigone framework designed provide mechanisms allowing exible application security policies 
relevant ensemble antigone systems 
ensemble focused optimizing group key distribution chose allow application dependent trust models form access control lists treated replicated data group 
authentication achieved pgp 
antigone allows exible application security policies rekeying policy membership awareness policy process failure policy access control policy 
uses xed protocol authenticate new member negotiate key access control performed pre con gured access control list 
consider frameworks designed purpose providing authentication access control addressing group communication issues 
complementary 
frameworks pluggable authentication module pam provides authentication services unix system services login ftp 
pam allows application choose authenticate users switch dynamically authentication mechanisms rewriting recompiling pam aware application 
frameworks providing access control authentication services systems kerberos akenti 
common idea authenticating users allowing access resources di erence kerberos uses symmetric cryptography akenti uses public key cryptography achieve goals 
exible module system supports various security protocols flexinet 
flexinet object oriented framework focuses dynamic negotiations provide group oriented semantics services 
general system architecture goal provide framework integrates di erent security protocols supports types applications changing authentication access control policy requirements maintaining clear separation security policy group messaging system implementation 
section discussing design considerations authentication access control frameworks 
general framework needed 
communication system may particular application integrating speci security policy needed protocols system may sense 
communication system needs support di erent applications may cooperative separating policy issues unique application enforcement mechanisms applications avoids unworkable size ts security model maintaining eciency 
separating policy implementation application group communication system useful live production environment policy restrictions access rules change code system changes 
modi cations policy modules require recompiling changing application code 
features general framework opposed features particular authentication access control protocol 
individual policies application 

ecient policy enforcement messaging system 

simple interface authentication access control modules 

independence messaging system security protocols 

policies protocols framework including access control lists password authentication public private key certi cates role access control anonymous users dynamic peer group policies 
distinguish authentication access control modules provide exibility 
type module distinctive interface supports speci task 
authentication module veri es client claims 
access control module decides group communication speci actions client attempts authenticated join leave group send unicast message client multicast message group 
decides client allowed connect server access control module deny connection authentication succeeded 
framework supports dynamic policies 
main challenge policies allow changes execution 
framework knowledge actual policy example cache decisions restrict form actual policies take possible access control modules change decisions independently server 
modules need sure activate dynamic changes consistent way synchronized clocks group communication services agree activate changes 
framework implementation spread implemented framework spread group communication system give concrete real world basis evaluating usefulness general architecture 
implemented framework spread system model interface framework quite general set events access control decisions includes available actions group messaging service join leave group send unicast send connect 
spread group communication toolkit spread local wide area messaging infrastructure supporting reliable multicast group communication 
provides reliability ordering messages fifo causal total ordering membership service 
toolkit supports di erent semantics membership closely synchronous extended virtual synchrony evs view synchrony vs 
system consists servers library linked application 
servers maintain state system provide reliable multicast dissemination ordering messages membership services 
library provides api basic services message oriented applications 
application library run machine spread server case communicate ipc separate machines case client server protocol runs tcp ip 
note order implement framework needed modify spread client library spread daemon 
application implements authentication access control method needs implement relaxed version evs reliable fifo messages 
client side server side modules need modify spread library spread daemon 
spread member group sender receiver 
system designed support small medium size groups accommodate large number di erent collaboration sessions spans internet 
achieved unicast messages wide area network routing spread nodes overlay network 
spread scales number groups application imposing overhead network routers 
group naming addressing shared resource ip multicast addressing large space strings unique collaboration session 
spread toolkit available publicly organizations research practical projects 
toolkit supports applications ported unix platforms windows java environments 
authentication framework clients authenticated connecting server trusted 
client attempts actions sending messages joining groups authentication needed 
attempted user actions checked speci ed policy controls actions permitted denied user 
approach explicitly assumes long connection server maintained user authenticated 
server spread daemon session layer server auth 
module client application spread client library 
sp set auth method 
sp connect 
chosen auth 
methods 
available auth 
methods 
userid library ver 

auth client connection 
sess session report auth result legend tcp communication call function client auth 
module 
protocol specific auth 
messages 
authenticate fig 

authentication architecture communication ow presents architecture process authentication 
client server implement authentication module 
change client side consists addition function see allows application set authentication protocol wishes pass necessary data protocol connecting spread server 
function speci es request client connect server called sp connect connection tries method application set establish connection 
authentication method chosen application applies connections established application 
int sp set auth method const char auth name int authenticate int void void auth data int sp set auth methods int num methods const char auth name int authenticate int void void auth data declaration authenticate function int authenticate int fd void user data pointer fig 

client authentication module api server authentication module needs implement functions listed auth ops structure see line 
module register spread daemon calling acm auth add method function 
default module registered disabled state 
system administrator enable module con guring spread 
struct session auth info int ses void module data int num required int completed required int required auth methods max auth methods int required auth results max auth methods struct auth ops void auth client connection struct session auth info sess auth struct acp ops bool open connection char user bool open monitor char user currently bool join group char user char group void acm token bool leave group char user char group void acm token bool send char user char dests max group name int service type bool mcast send char user char groups max group name int service type auth functions bool acm auth add method char name struct auth ops ops access control policy functions bool acm acp set policy char policy name bool acm acp add method char name struct acp ops ops fig 

server authentication access control module api authentication process begins session layer daemon receives connection request client 
initial information exchange negotiation allowed authentication protocols session module constructs session auth info structure containing list agreed authentication protocols 
structure passed parameter authentication function handle entire process authenticating client 
authentication function module data pointer store module speci data needs authentication 
session layer calls auth client connection method protocol forgets client connection 
minimal state client stored messages received delivered client point 
auth client connection function responsible authenticating client connection 
authenticating client take substantial amount cpu real time function directly setup callback function called example messages arrive client return 
approach fork process handle authentication 
required daemon blocked function running 
auth client connection function returns decision value decision may reached 
decision server authentication module calls sess session report auth result releases control session layer 
sess session report auth result function reports current authentication module successfully authenticated session 
authentication method required connection succeeds methods succeed 
access control framework model authenticated client connection automatically allowed perform actions 
action client may request server sending message joining leaving group checked time attempted access control policy module 
enforcement checks implemented having session layer server call appropriate access control policy module callback function see lines return decision 
implementation check functions optimized direct impact performance system called client action 
module chooses allow request server handles normally 
case rejection server creates special reject message sent client normal stream messages 
reject message contains data included original attempt possible 
application able identify message rejected information stored body message application level sequence number respond appropriately 
response noti cation user establishing new connection di erent authentication credentials retrying request logging error server reject action points server receives action client action going take ect 
example client joins group join rejected join request received directly connected client join request sent servers totally ordered 
rejecting request rst time seen avoids processing requests rejected simpli es decision making server client directly connected decision 
disadvantage time request accepted rejected module knows current state group system state request acted servers 
states di er type decisions may possible early decision point 
case studies provide intuition building spread authentication module requires section discusses implementation real world modules ip access control module password authentication module pam authentication module anonymous payment authentication anonymous access control module dynamic peer group authentication module 
details implementation code see 
ip access control 
simple access control method involve interaction client process library ip address clients 
connection allowed considering ip address client connected server 
module restricts open connection see line operation 
password authentication 
common form authentication uses type password username establish identity user 
types password authentication supported framework passwords sent clear telnet challenge response passwords 
implement password authentication method client server side need implemented 
server module events subsystem spread wait network events occur avoid blocking server user entering password client server modules communicating 
client module consists function called establishment connection returns success failure 
function le descriptor socket connection established data pointer registered sp set auth method 
case application prompted user username password created user password structure 
authenticate function sends username password server waits response informing authentication succeeded 

popular authentication method rsa 
method uses server authenticate client unique randomly generated identi er pin 
cases server ask client provide new credentials 
discuss internal authentication mechanism see details focus framework accommodate method 
main di erence previous examples server authentication module needs communicate server 
mentioned auth client connection function block 
blocking happen opening connection server retrieving messages 
auth client connection forks process responsible authentication protocol registers event get noti ed forked process nished 
forked process establishes connection server authenticates user 
nishes server authentication module gets noti ed call sess session report auth result function inform spread daemon decision taken pass control back 
pam 
popular method authentication modular pam system standard solaris linux systems 
authentication module act client pam system request authentication standard pam function calls 
authentication pam module provide way pam communicate interact actual human user system prompt password information 
module register interactivity function pam pass requests write user request input user spread communication socket spread client authentication module pam 
client module act pam requests interact user send reply back spread authentication module return results actual pam function 
anonymous payments 
interesting approach access provided anonymous clients exchange payment 
systems perform transactions client merchant assuming accounts bank 
cryptographic techniques system provides anonymity client basic security services 
detail cryptographic details show method accommodated framework 
assume support anonymous payments system form api require servers client account bank 
client connects server client authentication module generates check identi er client account passes server authentication module contact bank validate check necessary process forked case 
validated server authenticated module register client identi er access control policy paid user appropriate groups 
long payment valid client permitted access groups paid server knowledge client identity 
group authentication 
previous authentication methods authentication client handled server client connects 
larger non homogeneous environments authentication may involve group communication system servers 
protocols may complex provide better mappings administrative domains possibly better scalability 
example protocol server sucient knowledge check client credentials instance certi cate 
case sends credentials servers con guration server attempts check credentials sends answer back 
server succeeds client authenticated 
particularity protocol servers need communicate part authentication process 
servers communicate system framework provides necessary features allows integration group authentication method 
access control 
realize case studies focused authentication 
standard access control protocols case studies exist 
demonstrate ability access control architecture create case study imaginary secure irc system 
consider set users users allowed chat intelligence group restricted operations group 
allowed multicast group allowed read group messages virtual drop box 
framework supports access control policies appropriate implementation join multicast hooks de ned 
access control modules support identity role credential restrictions 
exible implementation authentication access control framework spread wide area group communication system 
approach allows application write authentication access control modules needing modify spread client server code 
exibility system showed showing wide range authentication methods implemented framework 
lot open problems subject 
include providing tools allow application specify policy handling policies system supporting network partitions example merging components di erent policies providing support meta policies de ning entity allowed create modify group policies developing dynamic group trust protocols authentication 

amir replication group communication partitioned network 
phd thesis institute computer science hebrew university jerusalem jerusalem israel 

amir awerbuch stanton flow control multicast cost bene approach 
tech 
rep cnds johns hopkins university center networking distributed systems 

amir stanton low latency loss tolerant architecture protocol wide area group communication 
proceedings international conference dependable systems networks june pp 


amir dolev kramer malki transis communication sub system high availability 
digest papers nd international symposium fault tolerant computing systems 

amir moser melliar smith agarwal totem single ring ordering membership protocol 
acm transactions computer systems november 

amir stanton framework authentication access control client server group communication systems 
tech 
rep cnds johns hopkins university center networking distributed systems 
www cnds jhu edu publications 

amir stanton spread wide area group communication system 
tech 
rep johns hopkins university center networking distributed systems 

birman joseph exploiting virtual synchrony distributed systems 
th annual symposium operating systems principles november pp 


birman renesse reliable distributed computing isis toolkit 
ieee computer society press march 

waldvogel sun weiler plattner framework versatile group key management 
ieee journal selected areas communication september 

fekete lynch shvartsman specifying partitionable group communication service 
proceedings th annual acm symposium principles distributed computing santa barbara ca august pp 


harder meth fleischer group secure association key management protocol 
draft irtf txt november 

hayton herbert donaldson flexinet exible component oriented middleware system 
proceedings sigops www ansa uk 

moser melliar smith securering protocols securing group communication 
proceedings ieee st hawaii international conference system sciences hawaii january vol 
pp 


kohl neuman kerberos network authentication service version 
rfc september 

mcdaniel prakash honeyman antigone exible framework secure group communication 
proceedings th usenix security symposium august pp 


moser amir melliar smith agarwal extended virtual synchrony 
proceedings ieee th international conference distributed computing systems june ieee computer society press los alamitos ca pp 


neuman requirements network payment perspective 
proceedings ieee compcon march 

nystrom mechanism 
rfc april 

reiter secure agreement protocols reliable atomic group multicast rampart 
proceedings nd acm conference computer communications security november acm pp 


renesse birman maffeis horus exible group communication system 
communications acm april 

rodeh birman dolev architecture performance security protocols ensemble group communication system 
acm transactions information system security appear 

samar uni ed login pluggable authentication modules pam 
osf rfc october 

thompson johnston hoo jackson certi cate access control widely distributed resources 
proceedings eighth usenix security symposium august pp 


montgomery kaplan high performance totally ordered multicast protocol 
theory practice distributed systems international workshop september lecture notes computer science 
