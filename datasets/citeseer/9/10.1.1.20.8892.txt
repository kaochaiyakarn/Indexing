branch check hybrid framework integrating mixed integer programming constraint logic programming graduate school industrial administration carnegie mellon university park pittsburgh pa mail cmu edu branch check hybrid framework integrating mixed integer programming constraint logic programming encapsulates traditional benders decomposition branch bound special cases 
particular describe relation benders nogoods linear relaxations 
give examples problems modelled solved branch check computational results demonstrating order magnitude speedup compared previous approaches 
mention important research issues hierarchical dynamic adjustable linear relaxations 
rst goal propose modeller solver framework branch encompasses traditional benders decomposition branch bound schemes mixed integer programming mip special cases spectrum solution methods adds extra dimension allowing integration constraint logic programming clp mip style branching search 
framework model problem mixture clp mip 
clp part model adds relaxation mip part added explicitely 
parts variables model include mapping relations shadowed variables 
solution method branching search solving lp relaxation mip part node branching discrete variables solving clp part nodes branching tree advantageous necessary di cult large mip part compared clp part easy strengthen mip part clp solution quality cuts 
second goal identify key elements integration clp mip adequately addressed propose pertinent pressing research topic area integration dynamic linear relaxations global constraints 
computational results indicate cient communication di erent parts hybrid model double modelling required constraint parts model clp mip form 
vital di erent forms constraint communicate intra constraint communication 
previously termed mixed propagation mixed clp mip global constraints 
holds regardless scheme tight cooperation mixed logical linear programming branch check see sec 
integration approach :10.1.1.122.3727
double modelling explicit preferably implicit mixed global constraints post dynamically update linear relaxation addition classical clp propagation discrete parts mixed propagation discrete continuous parts 
extends idea proposed de backer 
argued standard clp architecture optimal cooperation different solvers done value propagation 
addition proposed solvers clp mip solvers able communicate exchanging information variable bounds 
variable bounds special type linear constraints linear relaxations take idea step open possibilities clp mip integration 
exemplify experiences developing branch framework previous line research 
organised follows 
section outlined focus research 
section reviews history orts integrating clp mip classical mip techniques benders decomposition branch bound 
sec 
introduce branch check framework discuss generalises benders branch bound show clp integrated 
section gives examples scheduling dissimilar parallel machines capacitated vehicle routing time windows presents computational results demonstrating order magnitude speedup compared previous approaches 
background classical mip techniques branch bound assume reader familiar classical branch bound approach solving mips 
due di erent vocabulary elds note technique referred branch relax 
benders decomposition classical benders decomposition exploits fact problems xing values certain di cult variables simpli es problem tremendously 
enumerating di cult variables solving resulting subproblem selecting best subproblem solution original problem solved 
benders method ingenious 
solves master problem assign values di cult variables 
solution subproblem generates benders cut added master problem resolving 
solution master problem satisfy benders cuts obtained far avoiding searching similar regions solutions space 
similar role nogoods play clp 
classical benders decomposition applies problem written min cx fy ax gy denotes solution master problem subproblem lp min cx fy gy ax easily solved 
procedure iterative interleaving solving master problem optimality resulting subproblem 
applying duality theory solution subproblem cuts generated added master problem min ax cx ax dual solution subproblem subproblem feasible iterations infeasible iterations resolving master problem iteration 
detailed description benders decomposition 
previous integration schemes properties number di erent problems considered little ect performance clp mip approaches 
reported experimental results illustrate key properties techniques mip cient problems relaxations su ers relaxation weak restricted modelling framework results large models 
clp expressive constraints smaller models closer problem description behaves highly constrained problems lacks global perspective relaxations 
tight cooperation de backer proposed clp mip solvers coupled common shadowed variables double modelling framework way communication mip solver sends clp solver values common variables xed relies mip solver able detect implied inequalities clp solver sends mip solver strengthened bounds common variables 
compared solving multi knapsack problem pure clp pure mip cooperation solvers obtained favourable results 
proposed extension framework mip model dynamic restated variable bounds tightened variables xed clp solver 
mixed logical linear programming hooker proposed new modelling paradigm ciently integrate clp mip 
framework constraints form conditionals link discrete continuous elements problem 
model form min cx antecedents conditionals constraints treated clp techniques 
consequents linear inequality systems form lp relaxation 
problem solved branching discrete variables 
conditionals assign roles clp lp clp applied discrete constraints reduce search help determine partial assignments satisfy antecedents 
node branching tree lp solver minimises cx subject inequalities determined true 
delayed posting inequalities leads small lean lp problems solved ciently 
hooker extended proposing adding mixed global constraints discrete continuous elements 
mixed global constraint dynamically stated linear relaxation part continuous part propagates information discrete continuous parts model 
framework mixed global constraints serve modelling tool way exploit structure solution process 
mixed global constraints written form conditionals analogous global constraints clp improve solution process improving propagation 
hybrid decomposition jain grossmann jain grossmann scheme problem decomposed sub parts handled mip clp 
demonstrated multi machine scheduling problem assignment tasks machines modelled mip sequencing tasks assigned machines handled clp 
search scheme iterative procedure assignment problem rst solved optimality identifying machine task clp feasibility problem solved trying sequence assignment 
sequencing fails cutting planes added mip problem forbid subsumed assignments process iterated 
approach similarities benders fact shown problem written benders 
approaches kasper proposed interesting framework combining clp mip approaches integration synergy possible dividing constraints clp mip di erent categories primitive non primitive 
primitive constraints exists polynomial time solution algorithm non primitive constraints true 
systematic approach transforming clp model corresponding mip model 
clp linear relaxations single search tree prune domains establish bounds 
downside approach systematic procedure creates shadow mip model original clp model includes rei ed arithmetic constraints big constraints 
translation involving numerous big constraints may result poor mip model poor linear relaxation 
branch check description general method branch check builds certain extent benders decomposition 
basic idea identify part problem basic part delayed 
solution process branching search basic part delayed part checked feasibility late seldom possible 
rationale delayed part necessary check correctness solution may large computationally expensive include step calculations want delay looking long possible 
going refer basic part master problem delayed part subproblem 
strategy applied problem general form min cx ax problem naturally split mixed integer linear part nonlinear part mixed global constraints piecewise linear alldifferent constraints 
constraints master problems top part constraints subproblems lower part 
non linear part include linear constraints mappings variables 
examples problem forms strategy applied min cx ax min cx dy min cx ax third form represents mapping values variables mapping variables variable set variables ng xn 
second mapping common mapping clp mip 
master problem relaxation original problem solution master problem branching search guaranteed solution truly feasible objective value correct 
nodes branching tree variables master problem instantiated branching search subtree solve subproblem determine solution feasible correct objective function value solve subproblem consult subproblem matter large computationally expensive subproblem compared master problem 
completely ignoring subproblem solution process solving selected nodes going augment master problem relaxation subproblem simpler computationally expensive representation subproblem focuses master problem candidate solutions respect subproblem 
example third form master problem min cx ax relaxation hierarchical possible subproblem clp relaxation preferably union relaxations individual global constraints comprise subproblem 
dynamic solution process progresses updated variables xed adjustable possible ciently incremental changes recompute node 
subproblem solved cuts added master problem 
add lower bounding cut subproblem feasible bounding objective function infeasibility cut nogood subproblem infeasible disallowing solution similar 
example third form master problem min cx ax subproblem case min mapping variables master subproblems variables subproblem may xed restricted values current solution master problem 
examples look sec 
solution master problem determine subproblem decomposes 
master problem general form min cx ax lh corresponding subproblem min cx solution master problem 
special cases benders decomposition correspondence branch check framework problem solved classical benders empty basic part see relaxation subproblem see 
general non problem speci lower bounding cuts see nogoods see derived lp duality theory 
branch bound classical branch bound min cx ax extreme empty delayed part relaxation subproblem lower bounding cuts nogoods trivial nogoods implicit branching scheme see 
basic part see 
integrating mip clp immediately obvious spectrum techniques exist classical benders decomposition branch bound 
particular benders solution process accelerated adding cuts valid inequalities priori adding linear relaxation subproblem starting empty master problem waiting benders cuts accumulate start guiding process master problem promising candidate solutions 
looking entire problem node branch bound search tree part set variables constraints delayed examined need arises 
result smaller problems solved node nodes may needed may result savings 
note addition merger benders branch branch check framework allows additional dimension exibility 
subproblem form particular mip clp integrated clp model solve subproblems 
mip search master problem guided subproblem relaxation lower bounds nogoods 
true subproblem lp accurately duality theory available put deriving lower bounds nogoods 
survey di erent duality concepts variety problem classes 
uncommon clp mip tailor methods speci structures 
example global constraints clp require propagation algorithms designed mip problem speci cutting planes widely 
similar fashion integrating clp mip put deriving linear relaxations mixed global constraints 
relation previous decomposition methods nogoods rst key idea extensions classical benders framework due jeroslow wang 
envisioned dual problem case classical benders lp inference problem showing lp demonstrates unsatis ability set horn clauses propositional logic dual solution contains information unit resolution proof unsatis ability 
hooker de ned general inference dual hooker yan logic benders scheme context logic circuit veri cation 
similarities jain grossmann hooker yan specialised inference algorithm general clp package subproblem problem logic circuit veri cation machine scheduling 
benders decomposition branching generating benders cuts lp subproblem process solving master problem described hooker 
essence branch check context classical benders examples solve subproblem clp 
go step clp solver get cuts branch check addition give rst computational results branch check benders context 
branch de ned form generalised benders partitions variables uses master problem core benders generates cuts process solving master problem 
idea nogoods branching standard ai technique 
branchand check di erent relaxation problem full problem solved node 
full problem consulted nodes nogoods generated accordingly 
classical ai full problem generally checked node 
optimisation community apparently nogoods branching search constraint satisfaction community apparently generalised benders means generate nogoods de backer done related 
integration benders clp give new life idea nogood received limited attention practical optimisation algorithms 
examples section examine problems scheduling dissimilar parallel machines capacitated vehicle routing time windows bene clp model solve subproblems demonstrate issues arise 
scheduling dissimilar parallel machines problem decompositional method solve rst jain grossmann 
problem described follows cost schedule derived processing set orders release due dates set dissimilar parallel machines 
machines dissimilar sense di erent cost processing time associated order machine pair machines perform job 
jain grossmann modelled problem min ts pim xim ts xim pim xim max fd min fr im start start duration requires decompositional method solves class mip problems subset variables appears objective function 
problem decomposes optimisation problem suitable mip variables objective function tight relaxation feasibility problem solved ciently clp 
variables parts linked mapping 
constraints necessary correctness problem valid inequalities problem added mip part 
problem model size find prove opt 
solution number mach 
jobs iter 
nogoods mip sec clp sec table 
results problems jain grossmann approach 
problem model size find opt 
solution prove opt 
number mach 
jobs iter 
nog 
mip sec clp sec iter 
nog 
mip sec clp sec table 
results problems branch check 
solution process alternates solving optimisation problem optimality resulting feasibility problems 
feasibility problems feasible solution optimal cuts added optimisation problem exclude solution similar 
approach bears striking resemblance benders decomposition 
fact hooker showed problem written benders 
studying result idea branch check took form 
note correspondence branch check function subproblem part objective function identically zero see lower bounding cuts see simple relaxation subproblem master problem see problem solved multiple search trees adding nogoods see form im xim im jain grossmann nice computational result comparing pure clp mip approaches 
studying problem branch check applied problem wondered power method 
looking nogoods turns real power method lies linear relaxation 
removed formulation problems solved matter seconds relaxation run hours making progress 
indicates research linear relaxations global clp constraints mixed global constraints important 
study results revealed signi cant di erence time took solve mips vs factor times solving mips 
indicated veri ed results see tables master problem necessarily solved optimality clp subproblems solved regularly tree 
result intuitive note clp subproblem decomposes problems problem model size find prove opt 
solution number mach 
jobs iter 
nogoods mip sec clp sec table 
results problems jain grossmann approach 
problem model size find opt 
solution prove opt 
number mach 
jobs iter 
nog 
mip sec clp sec iter 
nog 
mip sec clp sec table 
results problems branch check 
individual machine small compared larger mip master problem considers machines time 
compared approach original data jain grossmann obtained favourable results 
instances trivially solved method include 
implemented branch check approach problem opl opl script halted mip master problem feasible solution solved clp subproblems 
infeasible added nogoods master problem re solved 
feasible recorded new current best solution constrained objective function master problem re solved 
process iterated master problem infeasible indicating solutions current bound objective function nogoods posted 
signi cant overhead implementation redundant calculations re start master problem adding cuts continuing left resolve similar nodes search tree repeatedly 
better tool allow dynamic modi cations master problem node search tree obtain substantially better results 
capacitated vehicle routing time windows problem visiting set customers vehicles central depot respecting constraints capacity trucks time window promised customer precedence constraints customers goal produce low cost routing plan specifying vehicle customers visit order 
cost generally proportional number vehicles maximum time total travel time 
note problem decomposes 
assignment trucks routes assigns customer speci truck obeys capacity constraints sequence truck solving travelling salesman problem time windows satis es time window precedence constraints minimises objective 
global cumulative count constraints variable index sets state problem follows branch check minimising cost trucks min count cumulative equations time windows capacity constraints ensure truck customers assigned 
cumulative constraint imposed truck schedules customers assigned 
parameters customers assigned truck start time variables time windows durations service transition times pairs customers vector ones indicating customer requires truck nally truck available 
xed subproblem truck cumulative subproblem infeasible nogoods generated avoid assignment added master problem 
call accumulated set nogoods th iteration ij 
write master problem mip min ij ij ij ij note variables ij correspond general integer variables index sets fj add dynamic relaxation subproblem master problem approximating total travel time follows truck travel customer 
customer nd nearest neighbour sum distances services times customers assigned truck lower bound actual travel time 
solving master problem customers assigned particular truck branching 
happens update lower bound noting nearest neighbour assigned trucks 
truck set customers assigned truck set unassigned customers 
truck add min qj ij max min master problem 
sets relaxation updated ij xed set propagation customers start pq xed customer moves pj xed 
relaxation propagation calculate table shortest distances sort list solving customer list length customers increasing distance order 
build graph nearest neighbours 
node outgoing arc nearest neighbour incoming arcs nodes consider nearest neighbour 
trigger propagation customer moves outgoing arc propagation customer may revise choice nearest neighbour look list nd rst customer incoming arc propagation node notify nodes consider nearest neighbour 
node perform outgoing arc propagation revising choice nearest neighbour looking rst customer list addition add various valid inequalities master problem symmetry breaking constraints trucks identical cost capacity 
require rst assigned truck equal rst assigned truck 
stated inequality form ij order trucks adding constraints form number trucks variable 
clp mip approaches potential integration bene solution combinatorial optimisation problems 
proposed modeller solver framework branch check encompasses traditional benders branch bound schemes mip special cases spectrum solution methods adds extra dimension allowing integration clp mip style branching search 
particular described relationship branch check benders 
intuition branch check delay parts problem veri ed computational experiments 
addressed key elements integration clp mip dynamic linear relaxations global constraints 
computational results indicate cient communication di erent parts hybrid model requires double modelling constraint clp mip form 
preferably double modelling implicit mixed global constraints post dynamically update linear relaxation 
relaxation adjustable possible ciently incremental changes recompute node 
indirectly mentioned issue availability exible tools testing integration ideas lack thereof 
conclude pressing need community access branching solver cient highly customisable allow customisation node search tree processed solved propagated problem modi ed node branching backtracking 
prof john hooker helpful comments 
benders 
partitioning procedures solving mixed variables programming problems 
numer 
math 
de backer 
combinatorial problem solving constraint logic programming cooperating solvers 
editors logic programming formal methods practical applications studies computer science arti cial intelligence chapter pages 
elsevier 
kasper 
branch infer unifying framework integer nite domain constraint programming 
informs journal computing 
ken james little 
signi cance constraint logic programming operational research 
operational research tutorial papers pages 
ken james little 
properties combinatorial optimization problems ect performance integer programming constraint logic programming 
informs journal computing summer 
de johnson nemhauser 
branch cut approach binary variables combinatorial optimization problems continuous variables combinatorial constraints 
knowledge engineering review special issue ai submitted 
andrea milano 
cutting planes constraint programming hybrid approach 
cp ai workshop integration ai techniques constraint programming combinatorial optimization problems march 
geo 
generalized benders decomposition 
journal optimization theory applications 
jain grossmann 
hybrid mixed integer constraint logic programming strategies solving scheduling combinatorial optimization problems 
computers chemical engineering 
hooker 
logic methods optimization 
alan borning editor principles practice constraint programming volume lecture notes computer science 
springer may 
second international workshop orcas island seattle usa 
hooker 
logic methods optimization 
wiley new york 
hooker 
mixed logical linear programming 
discrete applied mathematics 
john hooker jin kim 
declarative modeling framework integrates solution methods 
annals operations research special issue modeling languages approaches appear 
john hooker 
logic benders decomposition 
mathematical programming 
submitted 
john hooker jin kim 
integrating constraint propagation linear programming combinatorial optimization 
proceedings sixteenth national conference arti cial intelligence aaai pages 
aaai aaai press mit press july 
john hooker jin kim 
scheme unifying optimization constraint satisfaction methods 
knowledge engineering review special issue arti cal intelligence operations research 
john hooker hong yan 
logic circuit veri cation benders decomposition 
saraswat van hentenryck editors principles practice constraint programming newport papers pages 
mit press 
jain grossmann 
algorithms hybrid milp cp models class optimization problems 
informs 
informs salt lake city sd 
jeroslow wang 
dynamic programming integral polyhedra horn clause knowledge bases 
orsa journal computing 
milano philippe 
global constraints constraint programming meets operation research 
informs journal computing special issue merging mathematical programming constraint programming march 
submitted 
john hooker 
mixed global constraints inference hybrid clp ip solvers 
annals mathematics arti cial intelligence special issue large scale combinatorial optimisation constraints march 
accepted publication 
philippe 
tight cooperation application piecewise linear optimization 
ja ar editor principles practice constraint programming volume lecture notes computer science 
springer october 
robert mark wallace 
new approach integrating mixed integer programming constraint logic programming 
annals operations research advances combinatorial optimization 

linear relaxations reduced cost propagation continuous variable subscripts 
annals operations research special issue integration constraint programming arti cial intelligence operations research methods january 
submitted 
van hentenryck 
opl optimization programming language 
mit press 
