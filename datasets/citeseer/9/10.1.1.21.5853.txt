representing incomplete knowledge abductive logic programming marc denecker danny de schreye leuven department computing science celestijnenlaan heverlee belgium mail cs kuleuven ac gelfond lifschitz formal language representing incomplete knowledge actions states sound translation language extended logic programming 
alternative translation abductive logic programming integrity constraints prove soundness completeness 
addition show abductive procedure explanation deduction proving satisfiability uncertainty 
general perspective viewed declarative representation automated reasoning incomplete knowledge abductive logic programming 
key issue representation incomplete knowledge logic programming formalism 
pure prolog incomplete knowledge represented due negation failure atom proved assumed false 
extended programs represent incomplete knowledge context temporal domains :10.1.1.34.7448
introduced new temporal language allows represent number known benchmark problems involving incomplete temporal knowledge proposed sound transformation extended programs programs negation failure classical explicit negation 
past approach explored temporal reasoning event calculus 
proposes solutions benchmarks :10.1.1.34.7448
approach formalism abductive logic programming 
may interpret abductive program incomplete logic program sense contains definitions non abducible predicates 
completion semantics abductive logic programs reflects completion abductive program set completed definitions non abducible predicates 
consequence completion impose restriction interpretation abducible predicates incomplete knowledge represented undefined predicates 
observe treatment differs totally treatment defined predicate empty definition predicate false 
rest talk incomplete programs abductive programs undefined predicates abducible predicates 
prefer names commonly terminology refers specific procedural way executing programs abduction 
general incomplete program allow uncertainty 
applications knowledge engineer knowledge implicitly restricts possible states undefined predicates 
declarative way representing knowledge order logic integrity constraints 
order illustrate approach transformation domain descriptions incomplete programs integrity constraints section 
despite fact benchmarks solved abductive incomplete event calculus turns difficult transform domain descriptions event calculus programs situation calculus branching time philosophy event calculus linear time philosophy 
incomplete programs way restricted event calculus 
proposed transformation maps domain description incomplete situation calculus 
secondary goal illustrate abductive procedure useful automated reasoning incomplete programs integrity constraints 
abductive procedure explanation observation known 
known abductive procedure deduction proving consistency theory 
section apply abductive procedure called sldnfa solve distinct computational tasks involving complete incomplete knowledge 
structured follows 
section recall language semantics 
section transformation situation calculus programs soundness completeness stated 
section abduction explanation deduction illustrated 
section gives comparison transformation transformation section discusses transformation proposed related :10.1.1.34.7448
proofs omitted 
temporal language language allows describe relationships fluents time dependent properties world actions :10.1.1.34.7448
propositional language fluents actions represented propositional symbols 
types expressions occur 
proposition describes value fluent possibly empty sequence actions 
syntax follows sequence action symbols fluent expression positive negative literal containing fluent 
expression means true executing sequence actions sequence actions empty proposition describes initial situation 
usually writes initially proposition describes effect actions fluents 
form causes fluent expressions action symbol 
expression means true effect current situation true 
called preconditions 
writes causes domain description set propositions 
example recall yale turkey shooting problem formulated :10.1.1.34.7448
fluents loaded alive action names shoot ait load 
domain description contains propositions initially alive initially loaded load causes loaded shoot causes alive loaded shoot causes loaded example murder mystery domain variant obtained substituting alive shoot ait initially loaded prototypical problem want obtain initially gun loaded 
semantics defined follows 
state set fluent names describes possible state world 
fluent symbol state oe holds oe oe holds oe 
transition function phi maps pairs oe action symbols states oe set states 
phi describes situation changes application action structure pair oe phi oe represents initial state phi transition function 
denotes state phi phi gamma phi oe 
proposition holds structure oe phi iff holds definition structure oe phi model domain expression rules satisfied ffl proposition holds ffl state oe fluent symbol action exists causes hold oe holds phi oe 
proposition causes hold oe holds phi oe 
holds phi oe iff holds oe 
observes propositions domain completely determine transition function phi :10.1.1.34.7448
domain description called consistent model 
introduce new notion consistency 
domain description consistent set propositions consistent 
simple necessary sufficient condition domain description consistent 
lemma domain description consistent iff pair rules causes causes pm exists complement condition satisfied complementary literals bodies rules appear body rule shoot causes alive loaded loaded 
rule inconsistent body 
applied cause inconsistency 
action exists pair rules causes causes complement literal contained second called self contradicted 
contains similar proposition lemma 
say fluent non inertial action state oe iff exists expression causes expression causes hold oe 
expression entailed domain description iff holds model domain description called complete unique model 
domain murder mystery domain examples complete domain descriptions 
share propositions models identical transition function phi maps tuples ait oe oe load oe oe maps shoot oe oe loaded oe oe 
model initial situation 
model initial situation 
incomplete domain description obtained dropping expression initially alive murder mystery domain 
additional model structure transition function phi initial situation fg 
provides restricted expressivity language propositional relationships fluents defined indeterminate events allowed 
allows formalise interesting domains 
clear semantics language interesting experiments :10.1.1.34.7448
translation incomplete logic programs section general translation domain description incomplete logic program integrity constraints 
transformation produces programs situation calculus style 
traditionally options available represent fluent logic formalism predicate holds state argument 
translated holds 
approaches equivalent meta approach advantage frame axiom stated fluents approach frame axiom fluent predicate needed 
holds :10.1.1.34.7448
order language ld contains predicate symbols holds noninertial initially 
fluent action symbol occurs ld constant 
addition constant denote initial state functor result result denotes state obtained applying action state sequel result shorthand notation term result result gamma result 
denotes allows uncertainty initial state 
correspondingly incomplete program comprises undefined predicate initially 
translation maps domain description theory consisting incomplete logic program pd set integrity constraints icd pd defined follows ffl initialisation holds initially ffl law inertia holds result holds noninertial ffl proposition causes pm positive literals holds result holds holds pm holds holds introduce convention negative literal holds textual denotation holds :10.1.1.34.7448
handsome convention allows say causes translated clause holds result holds holds considering sign literals aware program contain literals form holds literals stand holds 
ffl proposition causes positive negative fluent literal noninertial jf holds holds fluent symbol jf denote term set integrity constraints icd defined follows ffl proposition holds result syntactic convention holds 
example domain description problem transformed holds initially holds result holds noninertial holds loaded result load true noninertial loaded load true noninertial loaded shoot true noninertial alive shoot holds loaded holds alive holds loaded clause noninertial loaded load true may dropped program effect semantics holds 
general noninertial rules initiating effects actions may dropped effect semantics holds 
strongly resembles solution 
propose prolog program analogous obtained substituting program clause holds alive true program clauses holds initially noninertial loaded load true integrity constraints note resulting program entails integrity constraints 
proves resulting program acyclic 
holds fact transformed domain descriptions proposition translation domain description acyclic 
types semantics defined incomplete programs 
due fact acyclic clause pd variables body occur head semantics coincide weak sense set ground atoms implied semantics identical 
extension results proven formally 
soundness completeness proven wrt completion semantics 
incomplete program contain clauses undefined predicates head clark completion contains undefined predicate completed definition false 
completion comp incomplete program defined clark completion dropping undefined predicate completed definition 
comp contains axioms free equality feq clark equality theory completed definitions defined predicates 
semantics theory pd icd fol theory comp pd icd way defines indirectly model semantics ic sequel talk model mean classical model comp pd icd translation domain description contains defined predicates holds noninertial 
completed definition holds form holds em initially result holds noninertial result holds holds precisely expression causes positive literal exists disjunct completed definition 
map state oe result functor phi holds oe completed definition holds similar second item definition 
completed definition noninertial form noninertial em jf holds holds precisely expression causes positive negative exists corresponding disjunct completed definition 
formula expresses directly fluent non inertial action state transformation considered correct set entailed formulas equivalent 
translation defined sound iff domain expression entails defined complete reverse holds entails theorem soundness domain description :10.1.1.34.7448
entails theorem completeness consistent 
proposition entails example shows condition consistency necessary complete general 
example consider domain description uses fluent alive action shoot 
shoot causes alive shoot causes alive obviously inconsistent transition function phi exist satisfies propositions 
proposition entailed holds initially holds result holds noninertial holds alive result shoot true noninertial alive shoot true program consistent 
shoot denotes term result shoot shoot occurrences shoot 
herbrand model set alive shoot noninertial alive shoot shoot jn model proposition shoot causes alive contradicting rule shoot causes alive 
complete entails propositions 
inconsistent consistent inconsistent 
consistent incomplete iff consistent 
case possible restore equivalence extending follows 
proposition causes positive literal add rule initiates holds holds proposition causes positive literal add rule terminates holds holds addition add integrity constraint initiates terminates example additional rules initiates shoot alive true terminates shoot alive true trivial resulting program violates integrity constraint 
interesting situations solution 
consider example example domain flipping light switch 
action switch fluents switch causes switch causes switch causes switch causes initially initially consistent phi switch fon defined consistently 
starting initial situation true false applying switch consecutively flips state way true state 
initial state problematic state fon reached 
reason consistent terminating initiating 
interpretation model initially holds switch holds switch odd noninertial switch switch noninertial switch switch initiates switch switch odd terminates switch switch initiates switch switch terminates switch switch odd example semantics differ 
semantics preferred 
matter taste intuitively find domain description sensible theory model sensible model theory 
considering inconsistent semantics taste severe reasoning incomplete logic programs traditionally incomplete programs associated abduction procedural paradigm 
show important procedural paradigms deduction proving satisfiability feasible emulated suitable abduction procedure 
notice inconsistency easily repaired dropping fluent replacing 
unclear solution exists general semantics differ 
proposed sldnfa abductive procedure normal abductive programs 
soundness sldnfa proven 
completeness results proven sldnfa execution terminates failure query comp pd abductive solutions exist 
sldnfa execution terminates generates abductive solutions delta delta abductive solution delta exists delta general delta sense skolem substitution exists delta delta 
delta contains skolem constants simply means delta delta sldnfa developed dealing fol integrity constraints general technique transform incomplete program theory fol integrity constraints ic equivalent incomplete program transformation technique trivial extension transformation proposed 
step extended false integrity constraint ic 
result general incomplete program 
second step transformed normal incomplete program technique 
transformation correct sense ic equivalent falseg completion semantics 
remaining integrity constraint false added extra literal query solved abductive solver 
result shows fol feq incomplete logic programming expressivity strongest possible sense level logical equivalence 
proof result trivial extension proof 
domain description transformation integrity constraints incomplete program trivial 
ground atom holds result transformed false holds result ground negative literal holds result transformed false holds applying technique integrity constraints murder mystery domain obtain incomplete program rules false holds alive false holds alive shoot ait substituted integrity constraints abductive procedure generates explanations observation problem domain 
take false observation 
sldnfa abductive procedure satisfies completeness results 
time writing sldnfa advantages published procedures senses suffers floundering flounder abducible atoms powerful completeness results proved 
solves query false returns solution delta loaded initially alive gives explanation false proves consistent 
precise reasoning goes follows resulting program delta acyclic program consistent wrt completion semantics 
delta comprises pd entails false false icd model delta model abductive procedure deduction 
example want prove initially loaded equivalently initially loaded inconsistent 
prove add extra rule false initially loaded sldnfa fails finitely query false 
completeness result sldnfa follows initially loaded inconsistent 
notice completeness result abduction soundness result deduction 
abductive procedure allows reasoning uncertainty 
dropping initially alive murder mystery domain incomplete domain description obtained 
sldnfa answers goal false returning answer delta fg 
original solution delta solution generated 
conflict completeness result sldnfa delta ae delta uncertainty domain description obvious want know initially alive possible done posing query false initially alive 
sldnfa proves initially alive possible returning delta deduction uncertainty possible 
observe entails initially alive initially loaded sldnfa prove 
done transforming negation disjunction false initially loaded false initially alive adding rules sldnfa fails finitely query false 
proves disjunction 
experiments show place incomplete abductive logic programs traditionally associated abduction procedural paradigm procedural paradigms deduction consistency proving interest 
illustrates argument abductive program better called incomplete program 
second place experiments show suitable abductive procedure emulate paradigms 
gelfond lifschitz approach recall transformation proposed domain descriptions extended programs :10.1.1.34.7448
domain description defined extended program containing extended clauses ffl inertia rules holds result holds noninertial holds result holds noninertial holds holds result noninertial holds holds result noninertial ffl proposition transformed holds result recall holds denotes holds 
ffl proposition causes translated rules 
holds denotes complement holds respect 
holds result holds holds noninertial jf holds holds holds holds holds result holds holds result holds holds gamma holds holds gives intuition translation gives soundness theorem domain descriptions provided contain similar propositions differ preconditions :10.1.1.34.7448
comparison interest 
observe negations extended programs mapped incomplete programs find clauses formulas corresponding positive literal lack striking fact contains inertia rules 
forward persistence rules respectively positive negative fluents 
backward persistence rules positive negative fluents 
clearly natural rules expected hold correct formalisation 
subsumed sound complete 
matter fact straightforward prove extended rules corresponding clause subsumed comp pd 
example notice classical logic point view rules equivalent rules 
immediately gives comp pd subsumes 
clauses corresponding derived completed definition holds 
substitute result simplification obtains holds result form holds noninertial proposition causes positive literal form holds holds easy see comp pd satisfies holds holds noninertial dropping noninertial disjunct substituting noninertial disjuncts find holds result holds noninertial simple rewriting gives formulas corresponding 
shortcoming gl incompleteness 
gives example causes clearly entails initially initially entailed hand notice consistent :10.1.1.34.7448
implies initially sldnfa prove 
problem gl shows extended allow predicates 
consider rule obj causes thief owner obj says thief picks object obj 
translation incomplete programs require modification 
produces holds thief result pick obj holds owner obj noninertial thief obj holds owner obj gl problems rules type holds owner obj holds thief holds thief result pick obj holds thief holds thief result pick obj rules say thief picking situation owner situation equal contradiction 
problem universally existentially quantified 
formulas subsumed extended clauses obj holds owner obj holds thief holds thief result obj obj holds thief holds thief result obj translation incomplete programs performs better translation gl extended programs 
gl creates higher number rules incomplete suffers problems similar propositions directly extendible predicate case 
incomplete program approach understandable negation occurs sound similar propositions complete reasonable domain descriptions applies modification predicate case 
proofs easy compared proofs :10.1.1.34.7448
discussion independent approach quite similar number aspects developed translating domain descriptions logic program formalism 
described maps special purpose logic logic program formalism new semantics adapted specific application 
semantics variant completion semantics 
shown logic partial deduction procedure generate abductive solutions consisting goals initial situation 
differs essential points map general purpose logic standard abductive logic programming showing special purpose treatment unnecessary transformation simpler general purpose abductive procedure partial deduction procedure show procedure useful implement computational paradigms deduction satisfiability proving :10.1.1.34.7448
differences applies predicate extension context database updating spend attention issue temporal reasoning example analysing relationship backward persistence forward persistence axioms approach showing extended indeterminate actions :10.1.1.34.7448
formalises database evolution situation calculus theories order logic 
completion program shows strong relationship theories 
replaces result 
meta predicate holds fluent predicate added additional argument atom holds contracted atom 
consequence law inertia stated fluent 
investigates representation additional features necessary preconditions actions defined predicates indeterminate actions 
introduces induction axiom order deal formulas universally quantified time points 
investigate features integrated logic programming formalism 
past approach explored temporal reasoning event calculus 
simplified event calculus extended abduction purpose planning 
extended event calculus deal necessary preconditions actions 
implemented planning system formalism 
done extend event calculus continuous actions time granularity 
applied abductive event calculus solve number benchmark problems temporal reasoning murder mystery stolen car problem walking turkey shooting problem russian turkey shooting problem 
problem contains indeterminate action 
situation event calculus non equivalent ways representing time action 
deep analysis situation versus event calculus scope 
representation indeterminate actions interesting case representing 
turns technique represent indeterminate actions easily translated incomplete situation calculus 
russian turkey shooting problem variant yale turkey shooting problem additional action spinning spinning gun chamber occurs 
effect gun possibly unloaded 
allow propositions form possibly causes problem formalised follows initially alive initially loaded load causes loaded shoot causes alive loaded shoot causes loaded spinning possibly causes loaded semantics easily adapted 
corresponding incomplete program captured introducing undefined luck predicate noninertial loaded spinning luck spinning clause effect rule inertia disabled loaded iff luck occurs spinning action state general clause possibly causes rule introduced noninertial jf holds holds luck positive addition rule added holds result holds holds pm luck research partially supported flemish goa non standard applications esprit bra ii contract belgian national fund scientific research 
apt bezem 
acyclic programs 
proc 
international conference logic programming pages 
mit press 
clark 
negation failure 
gallaire minker editors logic databases pages 
plenum press 
console torasso 
relationship abduction deduction 
journal logic computation 
denecker 
knowledge representation reasoning incomplete logic programming 
phd thesis department computer science leuven 
denecker de schreye 
family abductive procedures normal abductive programs soundness completeness 
technical report department computer science leuven 
denecker de schreye 
sldnfa abductive procedure normal abductive programs 
apt editor proc 
international joint conference symposium logic programming pages 
denecker de schreye 
justification semantics unifying framework semantics logic programs 
proc 
logic programming nonmonotonic reasoning workshop pages 
denecker bruynooghe 
temporal reasoning abductive event calculus 
proc 
european conference artificial intelligence 
dung 
representing actions logic programming applications database updates 
proc 
international conference logic programming 
eshghi 
abductive planning event calculus 
kowalski bowen editors proc 
international conference logic programming 
evans 
macro event calculus representing temporal granularity 
proc 
pricai tokyo 
gelfond lifschitz 
logic programs classical negation 
warren szeredi editors proc 
th international conference logic programming page 
mit press 
gelfond lifschitz :10.1.1.34.7448
describing action change logic programs 
proc 
th int 
joint conf 
symp 
logic programming 
kakas mancarella 
generalised stable models semantics abduction 
proc 
european conference artificial intelligence 
kowalski sergot 
logic calculus events 
new generation computing 
lloyd topor 
making prolog expressive 
journal logic programming 

localized abductive planning event calculus 
phd thesis department computer science leuven 
montanari 
dealing time granularity event calculus 
proc 
international conference fifth generation computer systems pages 
pereira alferes 
hypothetical reasoning founded semantics 
editor proc 
th scandinavian conference ai 
ios press 
reiter 
formalizing database evolution situation calculus 
proc 
international conference fifth generation computer systems pages 
shanahan 
prediction deduction explanation abduction 
proc 
ijcai page 
shanahan 
representing continuous change event calculus 
proc 
european conference artificial intelligence page 
