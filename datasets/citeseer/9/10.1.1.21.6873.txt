formalizing requirements distributed systems trace diagrams stephan university oldenburg fb informatik box oldenburg germany email informatik uni oldenburg de 
graphical formalisms useful bridge gap informal requirements written application experts formal requirements formal methods experts 
trace diagrams new graphical formalism developed case studies telecommunications area express relations allowed disallowed sequences communications 
introduces graphical textual syntax formal semantics 
shown trace diagrams easily extended informal formal level serve applications 
research project provably correct communication networks abbreviated carried close cooperation philips research laboratories aachen department computer science university oldenburg 
goal project improve software quality communication systems application formal methods 
precisely aim project support stepwise verified development communication systems requirement phase specification phase implementation 
method results esprit basic research action provably correct systems 
wide spectrum verification project embedded communicating systems studied various levels abstraction ranging requirements capture specification language programming language machine language 
emphasizes constructive approach correctness stepwise transformations specifications designs programs compilers hardware 
ideas extended method development extensible systems 
extensibility means new functionality added step step existing system 
step important fix new set requirements fulfilled final result step 
task finding requirements called requirements engineering difficult part application formal methods gap informal formal world closed point 
case studies come different telecommunication areas intelligent network private alternating branch exchange multiuser multimedia systems general property set usable communications research supported leibniz programme deutsche forschungsgemeinschaft dfg 
ol components fixed informal description protocols exists 
requirements formalized describe relations sequences communications called traces 
choose trace logic requirement language see section logic deals directly communications sequences thereof 
problem come agreement engineers detailed knowledge logic requirements formalized trace logic formalization informal requirements 
solution find language fits needs engineers experts formal methods 
graphical language trace diagrams abbreviated trds 
graphical visualisation requirements applied areas timing diagrams nowadays successfully applied development hardware 
formalization application diagrams described 
diagrams formalized terms temporal logic formulas 
temporal logics allow reasoning properties protocols useful graphical representations 
supported logics range ctl interval logics duration calculus 
graphical support formalization requirements existing protocols studied detail far 
approaches mentioned applied tricky self explaining encoding communications properties needed 
standardisation committees message sequence charts time sequence diagrams describe allowed sequences standardized protocols 
extension languages development nowadays describe examples allowed traces 
approach allows formal reasoning desired relation arbitrary traces 
case studies shown requirements usually form happens happened happen 
logical implication important constructor approach 
turns safety possible trace fulfils certain conditions trace follow executed trace requirements particularly important practice 
trds suited support features 
approach focuses distributed systems synchronous communication sender receiver execute common communication discussed section requirements asynchronous systems supported 
shown trds structured complex trds composition auxiliary diagrams reused trds 
important property visual formalisms fulfil intuitive power 
intuitive power means possible non experts short understand requirements information 
intuitive power reached trds approach number symbols kept small possible loosing expressive power 
section presents examples trds 
section introduces textual representation trds sections define formal semantics 
possible simplifications extensions enhancing practicality discussed section 
case study application area systems sketched section 
section adds short remarks relation logics trace logic 
conclude remarks 
graphical representation typical requirements part section presents general structure trds second part explains details examples 
conditions fig 

different elements trds shows general structure trds 
long horizontal line separates conditions line line 
requirement represented trd fulfilled system holds system conditions imply 
conditions described lines composed symbols conjunction disjunction 
vertical line see express conjunction square bracket general comb see express disjunction 
represents 
possible structures lines explained examples 
informal requirements graphical representation motivated case study things protocol multiuser multimedia system formalized 
parts protocol simplified text avoid presentation unnecessary details formalized protocol 
assumed sites connected network arbitrary subsets sites connected conference 
sites joined conference send receive data 
types messages general exchange informations 
assume information shall transmitted site site site initiates transmission request message network suffix rq identify requests message transmitted indication id receiver answers response message rp network transmitted final confirm message cf typical informal requirement sender sends value msg site gets confirm message transmission successful guaranteed communications received value msg answered positive response communication 
follows detailed analysis informal text application requirement contains additional assumption confirm message belongs transmitted value request site sent mentioned request confirm 
send cf ok send rq msg comm send id msg send rp ok send cf send rq fig 

graphical representation requirement trace diagram graphical representation informal requirement 
line trd denotes arbitrary sequence communications happens simple horizontal line 
sequence followed send rq msg communication 
second arbitrary sequence communications followed confirmation communication send cf second line denotes second arbitrary sequence member language denotes empty sequence second arbitrary sequence projected projection operator set cf similarly third line denotes communication send rq arbitrary sequence 
general formal language alphabet possible communications system replace trds 
right margin describe restrictions observed alphabet 
summarized lines describe request followed confirm confirm request communications 
line long horizontal line denotes exists splitting second arbitrary trace parts 
dashed horizontal lines general existential quantification 
line formalizes middle part sequence send id send rp communications belong denoted set comm 
restrictions parts trace 
lines long horizontal line lines combined conjunctions default combination lines 
second informal requirement site gets message conference member joined conference 
graphical representation requirement trd 
send id msg leave rq join cf ok term rq fig 

information received members conference line denotes receives message arbitrary sequence com communication form name list parameters send rq sent site parameters msg 
communication parameters surrounding brackets omitted 

second part long horizontal line ensures sequence divided parts joined conference join cf second part left conference leave rq third part conference terminated term rq known fixed initiator conference third part 
restriction set relevant communications line join cf right margin communications relevant line 
note simplifications graphical representation remarks handling indices parameters added section 
requirements far safety requirements 
examples show possible requirements possible communications trds 
informal requirement site asks join conference communications message allowed join denied conference terminated 
join rq join cf ok join cf denied term rq term rq comm comm fig 

possible answers trying join conference lines denote asks join conference waits participate communication processes continue 
lines denote exists extension trace communication join cf ok join cf denied term rq 
informal requirement site member conference site decide time leave conference conference terminated initiator 
term rq leave rq leave rq join cf ok term rq comm term rq fig 

conference left time lines trd denote joined conference left conference conference terminated 
lines long horizontal line denote sequence exists possible extension transmit leave rq participating communication 
line denotes alternative conference terminated initiator 
sequence annotated unique name called trace variable 
annotations section come textual representation trds 
trd annotations figures called simple trd trd called annotated trd 
annotations usually necessary process formalizing informal requirements needed formalization graphical representation 
textual syntax trace diagrams textual representation graphical entity useful ways easier store transmit manipulate simple ascii files computers formal semantics textual syntax 
textual representation trace diagrams uses idea 
line annotated trd translated text line 
refer initial final point sequence called selectors selector denotes initial point final point trace order lines recorded strictly increasing line numbers line 
describe logical combination lines add link lines textual representation 
trd described bnf rules non terminal link 
decorated different subscripts clause occurrences distinguished trd 
init 
cond 
concl 
link link 
init ln list 
seq 
ln line number 
list list 


comm 

comm 
comm cond ln quantifier 
sel sel list 
ln sel sel 
language 
proj alphabet 
quantifier forall exists sel 
sel 
concl 
ln quantifier 
new list 
cond 
cond 
link ln 
link 
ln 
link 
link 
ln 
shows relation graphical representation nonterminals mentioned clause 
trd textual representation 
term rq leave rq leave rq join cf ok term rq comm term rq init link cond concl link fig 

relation graphical textual representation seq join cf ok proj leave rq term rq exists new proj comm leave rq proj term rq proj term rq non contextfree conditions fulfilled trd important ones mentioned informal explanations 
clause bnf grammar presents general structure trd 
special initial line followed arbitrary number additional conditions 
keyword denotes long horizontal line followed hold 
parts denote combination lines 
clause describes typical structure line trd 
trace variables declared possible trace variables communications see clauses occur keyword seq 
note line lines line begins line number natural number 
line numbers unique increasing trd 
condition form 
denotes sequence trace variables split 
selector denotes initial point split sequence second selector denotes final point 
assumed trace variables mentioned selectors clauses introduced line trd 
sequence new trace variables follows assignment symbol 
condition claims sequence trace variables fixed projected certain alphabet proj shall element certain language 
clause form describe requirements 
keyword new declare subsequent list trace variables follows sequence described clause 
extension allowed version 
general version properties omitted technical details formalized semantics 
clause describe combination numbered lines 
required line number exactly link 
lines 
line numbers appear link part clause second link part 
grammar representing languages mentioned clause omitted desired presentation chosen 
solution restriction regular languages represented regular expressions 
summarize different kinds lines possible textual representation 
lines show examples different cases 
missing case possibility split sequence traces sequence traces 
splitting appears textual representation trd form exists important question possible translate textual representation back graphical form 
answer problems occur 
problem textual representations trd 
example part trd 
line diagram forall forall 
problem derived context denote point 
fig 

possible problems translation serious problem related informal understanding trds trds equivalent suggests point point suggests order points 
problem trds define relation intermediate points different lines 
desired point point suggested possible add auxiliary trace variable shown substitute parts 
strict expressed additional condition 
question answered kinds properties expressed trds 
mentioned trds focus requirements form 
requirements forms translated form 
problem allowed express properties trace variables declared trd 
formulas prefix disallowed far needed case studies 
extension formalism allow formulas possible additional notations declared intuitive power gets lost 
restriction finite traces taken account 
arbitrary liveness requirements sense communication eventually happens expressed see short discussion section 
case studies shown form liveness requirements usually needed weakened expressed trace logic 
short trace logic informal semantics far formalized logics 
particularly appropriate trace logic deals directly sequences communications relations 
section short trace logic shows trace logic requirement language distributed systems 
semantics system formalized logical predicate suitable free variables describing observable behaviour 
concrete values substituted variables logical predicate evaluated true false 
result true values describe desired allowed behaviour 
interested possible traces system 
semantics formalized predicate free variable tr ranging traces 
resulting situation sketched 
trace specification semantics allowed allowed tr true tr false predicate tr free variable trace fig 

predicative semantics system denote semantics trace logic predicate 
example communication observe empty trace trace performed 
predicate tr tr formal proof communication happen tr tr ffl tr tr false true true tr denotes substitution tr predicate letters tr denote trace variables denotes logical equivalence 
possible formalize requirements systems trace logic 
additionally employ second order free variable ranging simple trace predicates tr free variable 
stands unknown system specify requirements traces 
requirements form communications happen special order possibly interrupted sequences communications sequences fulfil certain conditions 
formalized trace form possible system side conditions fulfilled desired behaviour guaranteed 
trace variables formalization introduced describe possible splittings trace variables 
shown case studies requirements telecommunication systems expressed way 
definition syntax basic trace logic predicates delta finite set communications delta formal basic requirement trace logic form ffl tr side conditions desired behaviour predicates side conditions desired behaviour form described bnf grammar 
true pq 

subset delta free ft free denotes set free variables predicate set equations pq holds index appears right hand side index appears right hand side disallowed 
remarks disjunction expressed terms negation conjunction 
operators equivalent formulae described bnf grammar projection operator delta delta delta fw delta jw lg equality trace word fwg delta relation length trace delta denotes length constant jtj pi fw delta jwj pi ng pi 
example requirement req ffl tr formalizes communication possible system communication 
requirement req fulfilled specification iff substituted requirement req resulting trace predicate tautology 
req ffl tr tr tr ffl ffl true detailed version proof 
experienced specifier possible shorten proof summarizing steps 
term basic previous definition possible express requirements formulas introduced far 
desired behaviour extended way free variable occurs 
possible describe requirements form communication happens guaranteed communication happen 
formal trace requirement ffl tr 
ffl tr fug semantics trace diagrams semantics trd defined textual representation translation trace logic formula 
trd translated line line algorithm 
denote mapping textual trds trace logic formulas 
general structure formula function translation clause non terminals place holders concrete derived parts formula replaced replaced 
trd ffl 
link 
ffl 
link symbols special place holders quantification variables replaced translations lines 
line number concrete link expressions translated line smallest translated line number far 
shown possible kinds lines described bnf grammar way line number substituted formula changes happen context sensitive rules 
part rule states syntax examined line parts denote substitutions place holders line number formula 
ln list 
seq 
leads substitutions list 
denotes exchanged ln 
tr auxiliary variable seq gets value 
variable store initial trace sequence possible extensions sequence part 
ln quantifier 
sel sel list 
ln lines 
link 
lines denote set line numbers appearing leads substitutions list 
quantifier forall list 
quantifier exists ln 
sequence sel sel 
ae list 
function sequence delta calculates sequence trace variables mentioned note ffl ffl 
ffl ffl 
ffl free sel 
sel 
part 
calculation uses previous lines trd additional input 
function ae delta exchanges commas dots ae ln quantifier 
sel sel list 
ln lines 
link leads substitutions list 
quantifier forall list 
quantifier exists ln 
sequence sel sel 
ae list 
ln sel sel 
language 
proj alphabet 
leads substitutions ln 
sequence sel sel 
alphabet language ln quantifier 
new list 
leads substitutions ln 
seq ae list tr list 
quantifier forall list 
quantifier exists line translated removed 
semantics trd calculated way steps omitted rules applied sequence 
small simplifications languages 

trd ffl 
link 
ffl 
link ffl 
ffl join cf ok tr 
ffl ffl join cf ok tr rq term rq 
ffl join cf ok tr comm leave rq rq trace logic formulas difficult read guess right pair matching brackets 
long formulas lamport notation ffl join cf ok tr rq term rq ffl join cf ok tr comm leave rq rq semantics section defined translation algorithm implemented straightforwardly tool 
alternative approaches denotational semantics rewriting rules expressing semantics written allow formal reasoning inside semantics 
enhancing applicability simplifications 
syntax semantics trds easily extended things done add line grammar textual representation formalize transformation formula transformation algorithm 
important keep number symbols small intuitive understanding graphics possible 
fig 

mixture trace variables communications extensions formalized translation known syntax 
typical example need lines express new trace variables communications 
presents abbreviation requirement translation known formalized form 
fig 

reducing number trace variables simplification useful reduce time verifying requirement fulfilled number trace variables reduced 
possible reduction number trace variables 
shows initial requirement simplified 
trace variable substituted parts simplified version 
equivalence 
tricky part necessary express equivalence implication 
example want express trace belongs language possible desired system 
way express add new symbol proposed 
disadvantage new symbol introduced needed 
solution split equivalence conjunction implications figures 
note case necessary guarantee fig 

expressing equivalence trace possible final system system allowed perform trace fulfil requirement 
guarantees possible trace belongs guarantees empty trace traces holds possible system belong delta denotes set possible communications traces belong possible 
logical combinators 
extensions trds possible 
approach allow main combinators implication 
expressiveness needed allowed combine set lines kind combinators 
approach chosen graphical interval logic 
negation 
note special symbol negation appears trds 
reason possible transform requirement negation requirement negations placed formal languages 
denotes complement formal language set possible sequences communications trace logic formula equivalent delta gammal delta gammal 
quantification free variables 
look carefully trace logic formula previous section observe index free variable formula 
course requirement hold arbitrary information included trd 
case studies shown case quantifiers indices parameters derived quantifiers surrounding trace variables universal quantification derived example 
default quantification leads wrong results possible express quantification left margin trd solid box variable universal quantification dashed box variable existential quantification 
member join cf ok leave rq term rq fig 

auxiliary predicate diagram structuring 
problem application trds praxis requirements quite complicated lines needed express 
increasing number lines intuitive power graphical representations decreases drastically 
related problem necessary express certain property certain communication happens system certain mode 
modular hierarchical approach needed solve problem 
solution trds properties summarized auxiliary predicate graphical way name auxiliary predicate trds 
necessary possible replace predicate graphical representation come complete trd abbreviations 
join rq join cf member member comm comm fig 

trace diagram auxiliary predicate typical auxiliary predicate 
predicate member formalizes member conference trace predicate trds 
example requirement site member conference asks member information site member transmitted 
trd requirement 
note easy substitute simple renaming 
auxiliary predicates textual representation straightforward omitted 
non determinism 
possible extension trds deal special form non determinism 
set possible communications called ready sets needs fixed system executed trace expressible trds 
ready sets labels graphical representation trace 
introduced trace logic extended observables ready sets information state reached executed trace 
msg msg fig 

formalizing asynchronous communication asynchronous communication 
mentioned trds formalize requirements synchronously communicating systems 
communication appears trd meant executed sender receiver 
support asynchronous communication desired communications put sender input buffer receiver sender continue synchronization send receive actions distinguished trds 
solution add communication indicate communication sent received 
presents property communication sent received assumed communication unique 
sketch railway case study section sketches example application trds enhancements previous section 
example taken railway case study currently studied project uniform unified formal methods workbench industrial partner gmbh berlin 
task develop control system single track railway part track trains directions 
describes scenario 
train enter left pass entrance sensor es pass sensor cs indicating critical section entered pass sensor ls indicates train left critical part 
train entering right hand side passes sequence es cs ls sensors 
es cs cs ls ls ls es cs ls es cs ls es cs ls es cs ls free ls cs cs cs free es es allowed direction trains track cs es ls ls es cs es es free fig 

requirements single track railway control signals direction 
values transmitted signals red light trains green light trains pass red flashing light shows incoming train signalling system recognized train train 
signal names values combined communication name communication denotes red light go signal default situation 
requirement ensures train entered critical section left cs train enters right train left left critical section train right entered simplicity assumed es happen ls train direction critical section 
requirement ensures train approaches left train right critical section communication signal starts flashing red light 
line denotes allowed situation communication followed es far 
shows auxiliary predicate case track free ls ls passed sensors happened far 
predicate requirement 
train approaches left track free communication guarantees green signal train approaches immediately side 
indices exchanged requirements 
requirement ensures trains approaching directions nearly time jjj denotes interleaving operator csp denotes arbitrary traces length smaller train gets green light red flashing light 
approach develop specification fulfils requirements 
information distributed solution omitted due lack space 
trace diagrams logics sections shown trds trace logic semantics appropriate reason communicating systems set communications known 
advantage semantics programming specification language sl mind target language extended trace logic semantics encoded interactive theorem prover 
sl roughly described language finite automata extended local variables 
main limitation trds trace logic finite sequences taken account 
problem case studies far wants reason arbitrary liveness infinite traces considered 
example requirement expressed trace logic communication happens eventually communication happens 
ways solve problem 
possible give fixed bound eventually communications requirement formalized introduced trace logic 
possible infinite sequences studied 
trds extended handle infinite traces lead promising graphical representation requirements area stream approach focus uses trace logic infinite sequences requirement language 
hand possible express requirements temporal logic see overviews 
disadvantage logics deal properties communications 
automaton translated called kripke structure transition system states labelled properties hold state 
possibility guess properties informal description protocols 
possibility encode communications 
examples encoding shown 
automata translated structures 
communication encoded properties rd denotes system ready execute ex rd rd rd rd rd rd kripke structure automaton rd rd ex rd ex rd ex rd ex rd ex rd rd ex ex ex rd ex rd ex rd ex rd ex rd ex rd kripke structure automaton fig 

relation automata kripke structures system executed communication 
encoding guarantees executed communication identified formula rd ex denotes temporal operator 
different transitions lead state states doubled structure allow identify communication executed 
note requirements far described example linear temporal logic ltl informations sequences arbitrary length communications stored analyzed times directly possible ltl solved tricky encodings 
possible express operator introduced trace logic corresponds branching operator 
final alternative logics possible argue directly communications 
possible rewrite transformation algorithm section operation monadic second order logic strings 
logic offers model checkers applied non trivial case studies 
possible encode trace logic formulas calculus efficient decision procedures 
mentioned logics applications motivation research trace logic 
appendix shown restrict regular languages clause definition trds possible write model checking algorithm trace logic 
possible check algorithm set requirements trds specification formalized finite automaton specification fulfils requirements 
negative case possible produce counter examples 
timing diagrams formalized temporal logics hardware development synthesize hardware diagrams 
shown synthesis possible subset trds 
allowed quantification universal quantification part requirement focus regular languages finite automaton derived accepts unique largest language fulfils requirement 
remarks trace diagrams introduced suitable graphical approach formalizing requirements distributed systems goes possibilities message sequence charts describe allowed sequences communications 
typical form requirements graphical formalism developed intuitive informal semantics formalized trace logic 
case studies telecommunication protocols single track railway control point formalism applied real applications 
shown formalism easily extended informal formal level areas distributed systems served 
course tool support development complex systems requirements level needed 
tools considered may lead small changes syntax 
case studies areas done observe extensions trace diagrams needed serve special interests 

author philips research laboratories aachen 
olderog members semantics group oldenburg helpful discussions 

alpern und schneider defining liveness information processing letters 
antoine le timing diagrams writing checking logical behavioural properties integrated systems eds correct hardware design methodologies elsevier science publishers 

automatic interactive design communicating systems brinksma cleaveland larsen margaria steffen eds proceedings tacas lncs springer 
bjrner langmaack hoare final deliverable technical report id dth db january 
formalized timing diagrams proc 
european conference design automation belgium 
broy fuchs weber design distributed systems focus revised version technical report tum technical university munich 
burch symbolic model checking states proc 
fifth annual logic computer science 
clarke automatic verification finite state concurrent systems temporal logic specifications acm toplas 
dietz graphical formalization real time requirements jonsson parrow eds formal techniques real time fault tolerant systems lncs springer 
dillon kutty moser melliar smith ramakrishna graphical interval logic specifying concurrent systems acm transactions software engineering methodology vol 
april 
predicative programming comm 
acm 
hoare programs predicates hoare shepherdson eds mathematical logic programming languages prentice hall london 
hoare communicating sequential processes prentice hall london 
iso revised text cd information technology open systems interconnection conventions definition osi services technical report iso oec jtc sc iso 
itu ts itu ts recommendation message sequence chart mcs itu ts geneva 
jifeng hoare muller 
olderog hansen ravn rischel provably correct systems langmaack de roever eds formal techniques real time fault tolerant systems lncs springer 
mona monadic second order logic practice brinksma cleaveland larsen margaria steffen eds proceedings tacas lncs springer 
margaria mendler flexible toolset monadic second order logic brinksma ed proc 
tacas lncs springer 
incremental development correct specifications distributed systems 
gaudel woodcock eds formal methods europe lncs springer 
formal approach development reliable multiuser multimedia applications philips research laboratories aachen technical report ftp ftp informatik uni oldenburg de pub ps gz 

formal methods development protocols multi user multimedia systems eds formal description techniques ix chapman hall london 

incremental development deadlock free communicating systems brinksma ed proc 
tacas lncs springer 
krieg bruckner 
olderog balzer baer uniform universal formal methods workbench des bmbf berlin march 
lamport write long formula technical research report digital equipment www research digital com src proofs proofs html 
manna pnueli temporal verification reactive systems safety springer 
algebraic semantics basic message sequence charts computer journal 

olderog design calculus communicating programs lncs springer 

olderog sander oldenburg interface specification language occam programming language 
technical report bericht univ oldenburg fachbereich informatik 

ramakrishna melliar smith moser dillon kutty really visual temporal reasoning proc 
th rtss durham ieee press 
damm specification verification system level hardware designs timing diagrams proc 
european conference design automation paris france 
vardi automata theoretic approach linear temporal logic moller eds logics concurrency lncs springer 
compositionality concurrency partial correctness proof theories networks processes relationship lncs springer 
