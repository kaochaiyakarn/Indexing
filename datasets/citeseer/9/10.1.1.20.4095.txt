knowledge discovery series interval events roy cs ucf edu hua cs ucf edu cs ucf edu university central florida oracle com oracle 
knowledge discovery data sets extensively automated data mining software tools 
techniques mining series interval events considered 
time series common applications 
propose mining techniques discover temporal containment relationships series 
speci cally item said contain item event oftype occurs time span event oftype frequent relationship data set 
mining relationships provides insight temporal relationships various items 
implement technique analyze trace data collected real database application 
experimental results indicate proposed mining technique discover interesting results 
introduce quantization technique preprocessing step generalize method time series 
keywords data mining knowledge discovery time series event sequence temporal 
data mining techniques developed conventional time series agrawal shatkay zdonik agrawal ra ei mendelzon ozsoyoglu 
general time series collection values set parameters ordered time 
existing mining techniques treat values discrete events 
events considered happen instantaneously point time speed miles hour time consider event active period time 
applications events better treated intervals time points 
example consider database application data item locked unlocked 
treating lock unlock operations discrete events advantageous interpret single interval event better captures signi cance placing holding releasing lock 
research funded oracle state florida 
kluwer academic publishers 
printed netherlands 
tex roy events series interval events formed 
note name series interval events imply interval events happen uniquely overlap occurrences 
example interval event begins ends time interval event occurs 
furthermore interval event happens time interval event happens active 
relationship described contains contains formally ime ime denote start time time event respectively 
event said contain event ime ime ime ime 
note containment relationship transitive 
contains example edges shown avoid clutter 
data mining performed series interval events gathering information happen 
associated relationship count instances series 
example relationship contains observed times 
threshold mining algorithm search containments including transitive ones count meets exceeds threshold 
mined containments shed light entity represented series interval events 
proposed technique applications 
discuss section 
initial techniques 
problems data mining association rules sequential patterns time series received attention lately data warehousing olap line analytical processing techniques mature 
data mining techniques facilitate automated search knowledge large data stores exist built organizations 
association rule mining agrawal imielinski researched problem 
extensions problem include inclusion ect time association rules chakrabarti ramaswamy continuous numeric categorical attributes rastogi shim 
mining sequential patterns explored agrawal srikant 
pattern sequence events attributed entity items purchased customer 
association rule mining agrawal srikant reduces search space knowledge size patterns looking size patterns 
explained optimization mining series interval events 
mannila items sequence sequence simply long list events 
limit size mined events algorithm tex knowledge discovery series interval events runtime time window width speci ed events occur time detected 
agrawal srikant fact sub event frequent optimization purposes 
related das 
rule discovery technique time series introduced 
scheme nds rules relating patterns time series patterns series 
example algorithm uncover rule period low telephone call activity usually followed sharp rise call volume 
general rule format follows ah occur units time occurs time rule format di erent containment relationship de ned current 
mining strategies di erent 
technique das uses sliding window limit comparisons patterns window time 
approach signi cantly reduces complexity 
choosing appropriate size window di cult task 
discuss technique problem 
remainder organized follows 
section covers applications technique useful 
functions measures items related mining process discussed sections 
mining algorithms treated section 
experimental studies covered section 
provide concluding remarks section 
applications applications exist mining containment relationships provide insight operation system question 
database log le input mining algorithm discover events happen duration events resource record locking behavior mined log le 
behavior probably obvious deduced looking query program source code 
behavior may unexpected di cult detect nd deduced easily case large distributed concurrent database systems 
application area mining system performance data 
example le open le close event contain operations performed time le open 
operations may ect le operations directly associated le shown occur times tex roy le open 
interesting facts relating performance cpu disk performance example studied 
performance data usually interval event format converted format quantization methods 
medical eld containment relationship data mined medical records study symptoms surround duration disease diseases surround duration diseases symptoms arise time disease 
example may nd flu infection certain strain bacteria patient relationship arises 
discovery presence bacteria patient fever brie surpasses degrees fahrenheit 
factory behavior mined looking sensor similar data 
time sensor active certain threshold considered interval event 
sensors active time window considered relationship rst sensor 
example possible detect time interval pressure relief valve activated happens time interval new part moved speci conveyor belt 

interval events interval event series containment graphs interval event formally de ned contiguous period time entity state 
period de ned time interval ime ime ime 
entity bear state multiple times lifetime di erent amounts time instances interval event 
considered interval event type 
interval events ap bq containment relationship exists ap contains bq ime ap ime bq ime ap ime bq 
instance speci just demonstrated generic interval event type 
refer instances ap contains bq appropriate contains subscripts 
containments limited levels 
consequently generically de ne containment tuple form cc nj event type contains 
instances containment cc composed di erent combination interval events 
tex 
interval events 
containment graph knowledge discovery series interval events partial order imposed interval events transform series containment graph 
relation called containment relation 
applying relation series yields graph 
graph represents containment relationship events 
directed edge event event indicates contains note longer series interval events normally consist directed graphs illustrated 
furthermore events repeat series 
instance events type occur twice 
event unique instance nodes labeled 
event types edges din containment graph represent instances containment relationship 
tex roy algorithm 
input list event endpoints sorted time stamp form time stamp event id point event type output containment event nodes event type time stamp time stamp variables list open events algorithm null event point new event considered open events add point endpoint event id open events remove event id event oe open events oe time stamp time stamp create edge current start time add graph edge oe appropriate nodes endif endfor directed edge ee edge ee node node pointed edge ee edge node ee node time stamp time stamp remove graph edge ee edge endif endfor endif endwhile containment graphs shown fully connected simplicity illustration 
algorithms measures described transitively closed containment graph 
graph embodies possible combinations containment instances interval events 
gure example transitively closed containment graph include edges tex knowledge discovery series interval events left subgraph edge rightmost subgraph 
straightforward algorithm converts interval event series kind graph 
takes input list tuples corresponding interval event endpoints sorted time stamp form time stamp interval event id point interval event type interval event tuples time time 
providing input format entire graph loaded built pass input data 
searching graph location insert new containments added unnecessary 
furthermore necessary keep entire graph line larger problem sizes solved described algorithms section 
output directed containment graph node corresponds individual interval event property tuple attributes interval event id interval event type time stamp time stamp directed edge node vi vk exists interval event vi contains interval event vk 
constructed graph transitively closed 
algorithm outlines process 

quantization desirable apply interval event mining dataset interval event form 
conventional time series data data mining method 
large potentially nite number di erent values parameter assume irrespective parameter numerically discrete integers continuous real numbers 
cases repetition containments rendering mining algorithm useless 
consequently setting thresholds discretizing quantitative performance data classi ed bins bins considered intervals event types interval event occurs contiguous time parameter value speci ed bin value range 
suppose worth log data cpu disk network interface usage 
carefully selecting predicates cp busy cp busy cp busy tex roy disk busy disk busy network busy network busy parameter values conventional time series transformed discrete bin values predicate satis ed measurement point 
predicates occur contiguously time happens interpreted interval wherex fc 
bin events containments network usage disk usage disk usage observed cpu usage time dips discovered 
quantization done ways methods researched various areas outside computer science 
important considerations include determining discrete values data number bins number observations fall discrete value number instances bin value range continuous values discrete value represent 
achieve kind grouping clustering methods parameter range observations coalescing similar values 
output regression tree methods morimoto partition continuous values meaningful subgroups 
course assumes groups exist data 
numeric ranges chosen attributes output rastogi shim utilized segmentation 
absence patterns method statistically separate continuous data standard deviation average metrics 
approach transforming computer system performance data experiments 
method select equally sized ranges guaranteeing range equal signi cant number observations 
contrast observations sorted parameter values divided bins equal size regard signi cance numeric attribute ranges formed thereof 
choice quantization method heavily dependent domain data coming 

counting predicates support measures eld data mining key concept constraint measures user speci es piece knowledge extracted tex knowledge discovery series interval events satisfy 
support con dence common 
mining series interval events constraint measures functions selecting useful knowledge 
measures counting predicate 
usefulness interestingness mined containments depend counting predicates chosen 
traditional association rule mining primary counting predicates support con dence 
factor driving selection domain data mined consequently form interval event data takes 

counting predicates counting predicate member function de ned containment graph takes parameter containment form cc nj previously de ned 
instance containment cc graph exists directed edge labeled containment graph interval event instance type 
applying counting predicate set instances containment cc yields value properties set 
table provide example containment 
assume containment graph cg containment cc set subgraph instances containment cc cg 
notation represents size number interval event types containment 
counting predicates measure properties containment frequency number instances cc cg number instances cc node frequency number unique nodes interval events edge frequency number unique edges containment relationships having interval events nodes edge node coe cient number unique edges divided number unique nodes min edge node coe cient enc min min enc temporal length sum sum ime nt ime nt unique interval events nt divided tex roy maximum minimum fan fan node nt maximum minimum number incoming outgoing edges simplest counting predicates involve measures graph characteristics set instances node frequency edge frequency 
temporal length sum measure accounting amounts time containment relationship observed 
relationship observed times seconds interesting observed times spanning hours opposite true depending observer 
counting predicates edge node coe cient variations maximum minimum fan fan max max min min expose information structure mined containments 
maximum fan example limits mined facts cases containment instance interval event containment relationship instances interval event serves cases desirable avoid nding containments single long interval event computer system powered contains numerous instances short interval events disable interrupts 
exhaustive list counting predicates 
additional predicates speci ed inspired data mining techniques graph theory 
furthermore de nitions counting predicates de ned altered slightly alter form mined containments 
variant temporal length sum dened simply sum lengths interval events example 
incidentally counting predicates need applied isolation mining operation 
multiple counting predicates combined form boolean expression called counting predicate function mined containment satisfy 
allowing freedom broadens applications mining method user greater control constitutes useful mined knowledge 

multipath counting predicates containment graph lattice internal node parent nodes 
property translates entire subpaths shared nodes 
counting frequency path nodes allowed appear path 
example containment graph containment occur 
nodes appear path counting predicate multipath containment frequency value containment 
tex knowledge discovery series interval events nodes path prohibited appearing path counting predicate simply containment frequency result 
examples counting predicates follow 
de nitions multipath counting predicates multipath containment frequency number distinct paths instances cc cg number paths instances cc multipath node frequency number nodes distinct instances cc cg product multipath containment frequency cc multipath edge frequency number edges distinct instances cc cg product multipath containment frequency cc note multipath equivalents edge node coe cient maximum minimum fan fan necessary 
relaxation uniqueness nodes edges results consisting set disconnected paths path instance containment cc 
multipath edge node coe cient 
similarly multipath fan interval events contained interval events multipath fan interval events containing interval events 
multipath temporal length sum considered counting time period multiple times result sum exceeds time period entire dataset 
relationships containment frequency edge frequency node frequency multipath variations counting predicates vary shape containment graph turn determined interval events contain 
table shows counting predicates values containment gure 
interval event lengths 
multipath counting predicate favored non shared counterpart 
non shared counting predicate typically indicates percentage containment graph supports containment 
readily di erentiate overlap instances containment 
example containment frequency unique occurrences containment restrictions counting predicate 
contrast multipath containment frequency 
likewise node frequency contrast multipath node frequency 
certain problem tex roy 
shared table counting predicates counting predicate value containment frequency multipath containment frequency edge frequency multipath edge frequency node frequency multipath node frequency edge node coe cient temporal length sum multipath temporal length sum domains fact overlap instances containment useful information 
suppose interval event type disk failure interval event type network adapter failure interval event type network failure 
fact events happen approximately time causing amount seen example di erent meaning containments happened di erent times 
events probably occur malicious program virus attack set speci time day example 
tex knowledge discovery series interval events 
multiple shared 
containment support association rule mining data mining methods support con dence measures specify statistical strength signi cance mined fact 
thresholds speci ed priori mining algorithms return facts frequently represented dataset 
consistency data mining methods de ne support con dence measures mining series interval events 
counting predicates de ned 
support mined containment loosely de ned percentage counting graph contributes value counting predicate 
de nition value counting predicate containment divided value counting predicate entire containment graph containment instances exclusively comprised graph 
semantics support vary counting predicates ned containment graph cg containment cc support measures follows containment support containment frequency divided maximum containment frequency possible containment edge support edge frequency divided thenumber edges cg node support node frequency divided number nodes cg temporal length sum support temporal length sum divided time span cg represents tex roy ime ak ime bm interval events ak bm cg node support edge support identify percentage containment graph existence mined containment 
attain optimal containment support nodes containment graph need restructured node part instance containment cc obviously nodes correspond interval events type cc impossible 
restructuring graph means input data require alteration impossibility 
absence manipulations containment number instances cc mined real containment graph divided number containments mined hypothetically restructured graph 
de ne support measures edge node coe cient maximum minimum fan fan measures ected subgraphs outside representing 
consequently specifying counting predicate threshold similar specifying support measure 
de ne maximal traversal path path rst node parent node node node multipath support measures exist follows multipath containment support multipath containment frequency divided maximum multipath containment frequency possible multipath edge support multipath edge frequency divided sum number edges unique maximal traversal paths cg multipath node support multipath node frequency divided sum number nodes unique maximal traversal paths cg closely related support con dence loosely de ned percentage number subcomponents mined fact dataset contribute existence fact 
cg cc con dence measures follows node local con dence number nodes divided number nodes nt interval events cg type nt types cc edge local con dence number edges divided number edges ecg way containment relationships cg tex knowledge discovery series interval events ecg instance containment ype ecg ype ecg containment form cc support corresponding multipath con dence measures follows multipath node local con dence product multipath containment frequency cc divided number nodes nt interval events unique maximal traversal paths cg type nt types cc multipath edge local con dence product multipath containment frequency divided number edges ecg way containment relationships unique maximal traversal paths cg ecg instance containment ype ecg ype ecg containment form cc note edge local con dence interesting containments size having interval events greater containments size edge local con dence 
carefully selecting support con dence thresholds user mine containments happen frequently large support containments relationships interval event types limited large edge local con dence large number combinations 
combinations formed building counting predicate function local confidence node support edge node ratio 
nal note computing value counting predicates support con dence measures trivial containment frequency best algorithm compute np time complexity 
computing multipath counting predicates rst np time complexity respect containment graph depth 
dynamic programming methods graph traversal helps reduce eliminates penalty 

mining algorithms ways mine data nd frequent containments 
naive approach traverse lattice depth rst basis point traversal enumerate count paths 
tex roy way search containments incrementally path size approach 
path described ordered sequence node types path 
oneto mapping node types node instances path exist multiple times entire containment graph 
traversed lattice traversal algorithms stored relational database tables mined sql statements 

naive algorithm mining containments perform depth rst traversal lattice possible paths lattice explored 
node visit traversal exists traversal path tp node reached 
corresponds recursive calls program 
path tp tp tp tp tpn tp topmost node path tpn current node internal leaf node visited traversal algorithm 
de nition tp parent interval event contains represented tp 
subpath containment tp broken tp tpn tp tp tpn tp tp tp tpn consider element set labelled tps containment instance 
note containment instances 
necessary skip graph nodes example tp tp tp considering tps elements containment graph transitively closed 
consequently enumeration possible paths equivalent possible containment instances 
de ne path dictionary having entries form tps cp cp cpi corresponds value counting predicate containment tps 
containment graph traversed path dictionary updated adding modifying information containment instance encountered 
entire lattice traversed containments path dictionary satisfy counting predicate containment frequency minimum mining containment frequency user 
exhaustive counting method enumerate possible containments 
lies disadvantage number mined containments typically small subset possible containments 
algorithm run completion large amount storage required store paths 
discuss algorithm helps illustrate mining technique 
tex knowledge discovery series interval events 
growing snake traversal algorithm 
input containment graph cg containment predicate function cpf output set final cont mined containments variables containment bucket array ca element containing containments containment bucket final cont algorithm int containment size cs cg max containment size containment ccl cg size cs put ccl current bucket ca ca full sort ca allocate new bucket ca endif endfor merge ccls ca buckets final cont bucket inserting meet speci ed counting predicate function way merge merge buckets alternatively way merges 
delete containments ca 
endfor data mining methods association rule mining nding frequent containments possible prune search space mining results previous iterations 
containment frequency counting predicate example 
corresponding statement held containment containment containment frequency 
unfortunately property consistently exploited mining stages incrementally larger containments larger containments potentially share smaller containment 
sharing leads violation property 
containment shown illustrates containment frequency tex roy containment frequency higher value 
results similar counting predicates 
reduce amount storage required intermediate results growing snake traversal name implies starts mining size containments 
traversal done transitively closed containment graph naive algorithm paths form tp tpn enumerated 
containments satisfy selected counting predicate function retained 
containments size having form tp tp tpn enumerated counting predicate function applied select useful containments 
repeated maximum containment size maximum user speci ed containment size reached 
algorithm contains details 
containment size cs step containment enumeration followed merge count enumeration happen stages order ectively limited amount ram random access memory 
example hours worth interval data discretized performance data system running oracle database application memory usage algorithm times exceed mb 
algorithm accesses large structures non sequentially 
su cient disk space store ram line excessive swapping encountered rendering algorithm ine ective 
merge count allows large datasets 
parameter chosen thatthe size ca small physical ram 
explicitly shown implementation algorithm ensures containment counted twice 
done pruning paths exist entirely subsections graph visited 
remaining duplicate edges nodes arise merge step result paths partially explored region graph eliminated merge phase algorithm 
experiments entire containment graph kept line 
graph need stored completely line 
modi cation algorithm permits mining datasets containment graph larger available ram space events memory active current timestamp 
required traversal order required enumerating containments long possible containment instances explored shown algorithm 
explore graph temporal order corresponds order interval event endpoints read input 
build containment graph mining algorithm run 
step dispose sections tex knowledge discovery series interval events graph visited longer necessary 
sections readily identi ed 
recall graph traversal path tp current node reached 
containment graph nodes gn discarded ime gn minimum ime tpi tpi tp section containment graph mined built dynamically access required 
merge count enumeration partial containment graph yields algorithm limited available secondary storage 
data access patterns graph traversal enumeration multiple way merges sequential 
extremely large problem cases group devices support sequential access tape drives algorithm 

experimental results experiments run dell server gb ram dual mhz pentium processors synthetic data dell pentium pro mhz workstation mb ram 
rst experiment consisted mining containment relations arti cially generated event list 
zipf distribution selecting event types poisson arrival rate inter event times 
smaller list bene cial testing correctness programmed algorithm output readily checked correctness 
second experiment disk performance data oracle client server database application converted quantitative measurements interval events quantizing continuous values discrete values 
disk performance data consists various parameters disks measured minute time intervals 
discrete values chosen assumed normal distribution parameter parameter statistical score 
low average high assigned value assigning score range discrete value 
values low corresponding score average corresponding score high corresponding score 
resulting quantized versions parameters close uniformly distributed terms number occurrences range 
containment results gathered looking output sar utility sun machine database running shown table 
additionally containments average service time parameter disk id near mean value contained quantized values parameters tex roy disks revealing interesting interactions disk performance metrics obtained running mining algorithm 
shows relationship varying zipf poisson arrival times number mined interval events synthetic data set consists events event types 
table shows cpu run times mining oracle dataset pentium pro workstation 
algorithm processes acyclic directed graph depth rst traversal complexity depends greatly shape graph 
consequently di cult provide space time complexity measures 
guidelines provided traverse graph form temporal order discussed algorithms section 
sequential pattern methods discussed user specify window size relationships discovered 
problem intractable event combinations considered 
due nature containment relationships window exponential number combinations considered determined temporal length interval events 
respect breadth containment graph greater concentrations interval events interval events having longer temporal length lead subgraph sections greater depth greater possibilities intractability 
data mining methods general mercy combinatorial explosion worst cases containment relationship mining exempt 
fortunately addressed extent limiting explored combinations method data mining techniques 
respect breadth containment graph mining algorithm linear 
containment graph somewhat homogeneous subsections temporal order traversal time process subsections similar 
collected system performance data disk operation server parameters 
counting predicate speci ed node support node local confidence edge node coefficient 
node support chosen due high number parameters 
mined containments table show interaction interrupt processing time processors dpc deferred procedure call rate 
containments show times average load processing interrupts cpu assigned lower number deferred procedure calls cpu deferred procedure calls equally distributed processors 
reason balancing implemented possible cpu tex knowledge discovery series interval events table ii 
oracle dataset results param param description page faults high namei high time number page faults average number namei function requests high 
probably indication les opened accessed increasing ram le cache size reducing amount ram available execute code average cpu usage system average cpu usage system low average usage cpu system code number address translation page faults average 
indication system code non little page faults generated average average usage cpu system average number lock requests requiring physical table iii 
cpu time execution mining algorithm vs number containments mined oracle data cpu time sec assigned dpc queue cpu reaches speci load necessarily negative situation 

concluding remarks various data mining techniques developed conventional time series 
investigated techniques series interval events 
consider event active period time tex roy table iv 
windows nt operation param param description proc interrupt time avg proc interrupt time avg proc interrupt time avg proc interrupt time avg 
synthetic data results proc dpc rate avg system total dpc rate avg proc dpc rate low system total dpc rate low time spent cpu handling interrupts average number cpu average time spent cpu handling interrupts average number entire system average time spent cpu handling interrupts average number cpu low time spent cpu handling interrupts average number entire system low series interval events collection interval events 
pointed existing techniques conventional time series sequential patterns 
basically series interval events mined di erently event series event starting point containment relationship di erent semantics simply happens happens 
tex knowledge discovery series interval events address di erence proposed new mining algorithm series interval events 
assess ectiveness technique ran mining algorithm system performance trace data acquired application running oracle database 
traditionally spreadsheet olap line analytical processing tools visualize performance data 
approach requires user expert knowledge explore 
interactions behavior anomalies run undetected 
data mining tools implemented study address problem 
experimental study indicates automatically uncover interesting results 
techniques universal proposed quantization technique transforms conventional time series data interval event time series mined proposed method 
illustrate strategy discussed number applications 
agrawal faloutsos swami 

ciency similarity search sequence databases 
proceedings conference foundations data organization 
agrawal imielinski swami 

mining association rules sets items large databases 
acm sigmod 
agrawal psaila wimmers zait 

querying shapes histories 
proceedings vldb 
agrawal srikant 

mining sequential patterns 
ieee data engineering 
jensen 

point versus interval temporal data models 
ieee data engineering 
chakrabarti sarawagi dom 

mining surprising patterns temporal description length 
proceedings th vldb conference 
das lin mannila smyth 

rule discovery time series 
fourth international conference knowledge discovery data mining 
morimoto ishii morishita 

cient construction regression trees range region splitting 
proceedings rd vldb conference 
mannila toivonen verkamo 

discovery frequent episodes event sequences 
data mining knowledge discovery 
ra ei mendelzon 

similarity queries time series data 
sigmod record 
ramaswamy mahajan silberschatz 

discovery interesting patterns association rules 
proceedings th vldb conference 
tex roy rastogi shim 

mining optimized association rules categorical numeric attributes 
ieee data engineering 
shatkay zdonik 

approximate queries representations large data sequences 
proceedings th international conference data engineering 
hua tran 

mining interval time series 
proceedings international conference data warehousing knowledge discovery 
ozsoyoglu 

sequence matching images 
proceedings th international conference scienti statistical database management 
tex 
