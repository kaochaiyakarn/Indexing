object mapping non stationary environments mobile robots rahul biswas benson scott sebastian thrun stanford university stanford ca usa rahul cs stanford edu carnegie mellon university pittsburgh pa usa thrun cs cmu edu propose occupancy grid mapping algorithm mobile robots operating environments objects change locations time 
virtually existing environment mapping algorithms rely static world assumption rendering inapplicable environments things chairs desks 
move 
natural goal robotics research learn models nonstationary objects determine point time 
proposes extension known occupancy grid mapping technique 
approach uses straightforward map differencing technique detect changes environment time 
employs expectation maximization algorithm learn models non stationary objects determine location objects individual occupancy grid maps built different points time 
combining data multiple maps learning object models resulting models higher fidelity obtained single map 
bayesian complexity measure applied determine number different objects model making possible apply approach situations objects times map 
field robotic mapping active mobile robotics research 
mapping addresses problem acquiring environment model mobile robot suitable navigation visualization 
innovations include scalable online techniques concurrent mapping localization algorithms generating compact dimensional maps autonomous exploration techniques controlling robots mapping 
existing robotic mapping algorithms possess important deficiency assume world static 
things may move acquiring map 
dynamic effects people may briefly obstruct robot sensors filtered away best lead mapping failure worst 
static world assumption robotic mapping motivated fact static worlds mapping problem hard 
natural environments stationary 
example office environments contain objects chairs desks people frequently change location 
goal research devise methods identify non stationary objects model time varying locations 
proposes occupancy grid mapping algorithm called robot object mapping algorithm roma capable modeling non stationary environments 
approach assumes objects environment move sufficiently slowly safely assumed static time takes build occupancy grid map 
locations may change longer time periods day 
example situation office delivery robot may enter offices regular time intervals 
visit configuration environment may changed unpredictable ways chairs moved room 
robot may witness motion directly conventional tracking techniques inapplicable :10.1.1.126.7850
algorithm described capable identifying moving objects learning models determining locations point time 
estimates total number different objects environment making approach applicable situations nonstationary objects visible times 
roma builds known occupancy grid mapping paradigm 
regular time intervals robot acquires static occupancy grid map 
map captures snapshot environment specific point time 
changes environment detected straightforward map differencing technique 
approach learns models objects modified version expectation maximization em algorithm way similar techniques previously developed traffic surveillance 
step roma em establishes correspondence different object sightings different points time 
step uses probabilistic correspondences generate refined object models represented occupancy grid maps 
iterating steps high fidelity object models learned multiple sightings location individual object map determined 
total number non stationary objects may unknown approach employs model selection technique determining plausible number objects exponential prior 
empirical evaluation roma algorithm highly reliable identifying localizing objects learning high fidelity models 
provides experimental results room style environments collection natural objects moved time 
roma algorithm static mapping map segmentation roma identifies objects move comparing multiple grid maps environment recorded different points time 
point time robot builds static occupancy grid map environment denoted nutshell occupancy grid maps represent robot environments fine grained grid grid cell carries probability occupancy 
implementation technique described simultaneously localizes robots mapping 
preprocessing step roma algorithm decomposes environmental model static occupancy grid map collection smaller occupancy grid maps non stationary object 
non stationary objects identified map differencing technique builds known algorithms field computer vision 
approach identifies objects finding regions maps occupied free 
occupancy grid cell maps belong non stationary object part permanent free region part static object wall 
occupancy varies maps potentially part non stationary object maps grid cell occupied 
map differencing technique yields set candidate objects 
standard low pass computer vision filter employed remove noise usually border free occupied space 
result list snapshots non stationary objects represented local occupancy grid map 
denote number non stationary objects snapshots th map individual objects 
th snapshot extracted th map extracted objects arranged specific order 
snapshot local occupancy grid map extracted single occupancy grid map set sets object snapshots denoted 
pioneer robot collect laser range data 
robotics lab second data set collected 
actual images non stationary objects second data set 
total number available maps 
set input roma algorithm 
models moving objects object snapshots roma algorithm constructs models non stationary objects 
total number non stationary objects nonstationary object model refers set nonstationary objects denoted 

model individual non stationary object represented small occupancy grid map 
learn snapshots roma uses probabilistic model 
notice models snapshots represented grid cells 
grid cell real number interval 
interpret occupancy value probability occupancy 
robot scans grid cell multiple times mapping gaussian distribution representing single real valued observation 
yields probability observing true underlying object function denotes snapshot optimal alignment denotes th grid cell 
rotation translation parameters alignment specified alignment easily determined search space possible alignments 
parameter variance noise 
expected log likelihood data measurement probability enables calculate likelihood snapshots models necessary step defining maximum likelihood maps learning models nonstationary objects fixed number objects map 
overlay optimally aligned maps 
difference map low pass filtering 
algorithm finding new models 
convenient define called correspondence variables specifies correspondence set snapshots set models 

correspondence variable assigns th observed object index corresponding model 
great importance mutual exclusion constraint specifies model observed different locations maps implies different snapshots correspondence variables point different models clearly correspondences latent variables observed 
problem identifying maximum likelihood models optimization problem latent variables 
derive exact likelihood function maximize joint probability snapshots learned occupancy grids alignment parameters maps learning models nonstationary objects variable number objects map 
overlay optimally aligned maps 
difference map low pass filtering 
objects clearly identifiable 
argmax em starts random initial set correspondences generate sequence models 
alignment parameters 
non decreasing likelihood 
th set parameters 
em find th model achieve goal maximizing expected log likelihood argmax log mathematical expectation latent correspondence variables relative distribution 
probability inside logarithm factors follows exploiting natural independences assuming uniform priors correspondences probability snapshots object models correspondences essentially defined 
recast notation conditioning explicit indicator function argument true 
substituting product expected log likelihood gives argmax deriving expression exploit linearity expectation allows replace indicator variables probabilities expectations 
defines step em algorithm 
step step generate new set models 
step requires calculation object models snapshots correspondences 
assuming constant alignment calculation carried separately grid cell exploiting additive nature 
occupancy value model grid cell set weighted sum corresponding snapshot grid cells calculating new set models alignments models individual snapshots recomputed 
disadvantage formulation sum exponential number map objects test environments generally small case full sum easily computed 
cases exponential complexity poses serious computational burden mcmc sampling techniques chain flipping algorithm adopted lead provably polynomial approximations true expectation 
iteration em algorithm progression match probabilities observed sofa robot object model box object model robot object model sofa object model iterations em data set containing fixed number objects map 
iterations em data set containing variable number objects map 
correspondence probabilities observed object different object models 
determining number objects roma algorithm outlined far assumes knowledge total number objects practice unknown 
bounds easily extracted data 
particular bounded maximum number objects identified single map bounded total number object snapshots max estimation standpoint increasing model capacity increases likelihood 
maximum number objects model likelihood complexity penalty model score vs number objects graph model score vs number objects 
hood estimation fail estimate number objects reasonable way 
approach follows common statistical methodology assigning exponential prior priori assume large values exponentially const pn penalty factor 
robot object mapping algorithm optimized bayesian posterior logarithmic form log const log log const log pn log approximated expected loglikelihood defined previous section 
put differently approach maximizes expected log likelihood simultaneously minimizing complexity penalty term 
usually small approach running em fixed values starting lower bound established 
log posterior goes search terminated value maximizes log posterior assumed reflect correct number objects map 
experimental results roma algorithm extensively tested simulated physical environments 
brevity omit simulation results provide real robot results 
consistently roma able infer correct number objects learn models accurate snapshots extracted single occupancy grid map long objects sufficiently apart segmented correctly preprocessing stage 
correspondence estimates accurate objects looked different 
multiple objects shape correspondence estimates split accordingly 
sections cover results data collected real world room style environments 
laser range data mapping collected pioneer robot shown 
data set collected maps fixed number objects map shown 
second data set collected maps robotics lab shown 
maps variable number non stationary objects map actual photos objects maps shown 
collected maps data set shown 
map segmentation object extraction object snapshot extraction worked reliably 
figures show maps learning data sets 
overlay maps respective data sets shown figures 
results image differencing overlay shown respective data sets figures 
maps produced run low pass noise filter 
filtering object sufficient size extracted occupancy grid map 
data sets final step worked extracting exactly number expected non stationary objects respective static maps 
roma applied fixed number objects set results provide assumes fixed number objects uses map data shown 
shows successive em iterations roma algorithm starting initial random models 
successive iteration em algorithm note models resemble objects original maps increasingly higher fidelity final set objects clearly represents fairly accurate representation objects original maps 
furthermore final maximum likelihood correspondences perfectly match objects original maps objects final iteration models 
roma applied variable number objects second set results provide allows variable number objects map uses map data shown 
algorithm uses extension previously described determining number objects model equations 
entire roma algorithm run hypothesized number objects compute final iteration model score bayesian posterior algorithm run 
score log model likelihood minus complexity penalty 
shows model score varying number model objects current data set 
note complexity penalty coefficient graph peaks objects fact actual number different objects original set maps 
shows successive em iterations data set maximal bayesian posterior estimate objects 
correspondences sample observed object different models shown 
correspondences initially randomly distributed observed object quickly establishes strong correspondence correct model em progresses 
successive iteration clear object models closely reflect objects original maps 
additionally maximal model score hypothesis objects final maximum likelihood correspondences perfectly match objects original maps objects final iteration models 
proposed occupancy grid mapping algorithm non stationary environments objects may change locations time 
preprocessing stage algorithm extracts sets non stationary object snapshots collection occupancy grid maps recorded different points time 
em algorithm applied learn object models individual non stationary objects world represented local occupancy grid maps 
number objects estimated 
experimental results demonstrate robustness approach 
simulated real world setting consistently high fidelity object models learned multiple sightings object different locations 
state roma algorithm possesses range limitations warrant research 
objects move slowly captured static objects occupancy grid map 
precludes inclusion fast moving people map 
second desirable develop hierarchy objects paying tribute fact objects may look alike chairs see 
believe techniques applied advanced representation occupancy grid maps integrating multimodal sensor input camera images 
extension subject research 

supported darpa mars program contract number national science foundation career number iis regular number iis completed sebastian thrun visiting stanford university 
biswas koller thrun 
learning hierarchical object maps non stationary environments mobile robots 
proc 
uai 
bar shalom fortmann 
tracking data association 
academic press new york 
dellaert seitz thorpe thrun 
em mcmc chain flipping structure motion unknown correspondence 
machine learning forthcoming 
dempster laird rubin 
maximum likelihood incomplete data em algorithm 
journal royal statistical society series 

optimization simultaneous localization map building algorithm real time implementation 
ieee transaction robotic automation may 
konolige 
visually realistic mapping planar environment stereo 
proc 

kortenkamp bonasso murphy editors 
artificial intelligence mobile robots case studies successful robot systems 
mit press 
leonard feder 
computationally efficient method large scale concurrent mapping localization 
proc 

maccormick blake 
probabilistic exclusion principle tracking multiple objects 
proc 
iccv 
mclachlan krishnan 
em algorithm extensions 
wiley 
moravec 
sensor fusion certainty grids mobile robots 
ai magazine 
pasula russell ritov 
tracking objects sensors 
proc 
ijcai 
simmons burgard fox moors thrun younes 
coordination multi robot exploration mapping 
proc 
aaai 
smith self cheeseman 
estimating uncertain spatial relationships robotics 
autonomous robot vehicles 
springer 
thorpe durrant whyte 
field robots 
proc 

thrun 
probabilistic online mapping algorithm teams mobile robots 
international journal robotics research 
zucker 
region growing childhood 
comput 
graphics image processing 
