reasoning concurrent execution prioritized interrupts exogenous actions situation calculus giuseppe de giacomo dipartimento di informatica sistemistica universita di roma la sapienza salaria roma italy dis uniroma yves lesp erance department computer science college york university ave toronto canada yorku ca hector levesque department computer science university toronto toronto canada hector cs toronto edu alternative planning approach highlevel agent control concurrent program execution considered 
formal definition situation calculus programming language illustrated detailed example 
language includes facilities prioritizing concurrent execution interrupting execution certain conditions true dealing exogenous actions 
language differs procedural formalisms concurrency initial state incompletely specified primitive actions user defined axioms situation calculus 
comes providing high level control robots agents dynamic incompletely known worlds approaches plan synthesis may demanding computationally simple settings 
alternative approach showing promise highlevel program execution idea roughly searching sequence actions take agent initial state goal state task find sequence actions constitutes legal execution high level non deterministic program :10.1.1.54.7045
planning find sequence necessary reason preconditions effects actions body program 
program happens deterministic little searching required non determinism included search task begins resemble traditional planning 
formulating high level program user gets control search effort required 
hope domains agent needs conveniently expressed suitably rich highlevel programming language 
previous golog language considered reason actions programs containing conditionals iteration recursion nondeterministic operators primitive actions fluents characterized axioms situation calculus :10.1.1.54.7045
explore execute programs incorporating rich account concurrency 
execution task remains changes programming language call congolog concurrent golog considerably expressive 
nice features language allows conveniently formulate agent controllers pursue goal oriented tasks concurrently monitoring reacting conditions environment 
course formal model concurrency 
fact developed approaches available inherits intuitions 
distinguished fundamental ways 
allows incomplete information environment surrounding program 
contrast typical computer programs initial state congolog program need partially specified collection axioms 
second allows primitive actions elementary instructions affect environment complex way 
contrast typical computer programs elementary instructions simple predefined statements variable assignments primitive actions congolog program determined separate domain dependent action theory specifies action preconditions effects deals frame problem 
rest organized follows section briefly review planning situation calculus 
section review golog programming language variant original specification high level execution task 
section explain informally sort concurrency concerned related notions priorities interrupts 
section concludes changes golog specification required handle concurrency 
section detailed example reactive multi elevator controller formulated congolog 
section discuss properties congolog implementation topics research 
situation calculus number ways making planning task precise appealing formulate specification terms general theory action 
candidate direct approaches model concurrent complex actions ai investigated 
language formulating theory situation calculus go language note components special constant denote initial situation situation actions occurred distinguished binary function symbol denotes successor situation resulting performing action relations truth values vary situation situation called relational fluents denoted predicate symbols situation term argument special predicate poss state action executable situation language formulate domain theories describe world changes result available actions 
possibility theory form ffl axioms describing initial situation ffl action precondition axioms primitive action characterizing poss 
ffl successor state axioms fluent stating conditions holds function holds situation take place called effect axioms provide solution frame problem ffl unique names axioms primitive actions 
ffl foundational domain independent axioms 
domain theory sort clean specification planning task dates back green classical planning domain theory axioms goal formula oe single free variable planning task find sequence actions axioms legal oe abbreviation gamma legal stands poss poss gamma words task find sequence actions executable action executed context precondition satisfied achieves goal goal formula oe holds final state results performing actions sequence 
golog golog logic programming language primitive actions background domain theory :10.1.1.54.7045
includes constructs ff primitive action oe wait condition oe oe sequence oe oe nondeterministic choice actions oe nondeterministic choice arguments oe nondeterministic iteration oe oe oe conditional oe oe loop proc fi oe procedure definition basic form high level program execution task special case planning task program execution domain theory axioms program oe execution task find sequence actions axioms oe oe abbreviation formula situation calculus says program oe executed starting situation legal terminating situation 
simple inductive definition containing rules oe oe def oe oe oe oe def oe oe oe oe oe def oe oe oe oe construct language :10.1.1.54.7045
kind semantics associates programs called evaluation semantics complete evaluation program 
goal eventually handling concurrency convenient give slightly refined kind semantics called computational semantics single steps computation transitions 
step primitive action testing condition holds current state 
introducing special predicates final trans final oe intended say program oe may legally terminate situation trans oe oe intended say program oe situation may legally execute step situation program oe remaining 
final trans characterized set equivalence axioms depending structure argument 
necessary quantify programs need encode golog programs firstorder terms including introducing constants denoting variables :10.1.1.54.7045
laborious quite straightforward omit details simply programs oe stands situation calculus formula situation arguments suppressed oe denote formula obtained restoring situation variable fluents appearing oe :10.1.1.34.2562
exogenous actions concurrent processes golog waiting oe amounts testing oe holds current state 
space reasons ignore 
types semantics belong family structural operational semantics introduced observe final trans occur tests disallowed 
formulas order terms 
equivalence axioms gamma final follows universally closing final nil true final ff false final oe false final oe oe final oe final oe final oe oe final oe final oe final oe final oe final oe true final oe oe oe oe final oe oe final oe final oe oe oe final oe oe equivalence axioms gamma trans follows universally closing ffi trans nil ffi false trans ff ffi poss ff ffi nil ff trans oe ffi oe ffi nil trans oe oe ffi final oe trans oe ffi ffi ffi ffi oe trans oe ffi trans oe oe ffi trans oe ffi trans oe ffi trans oe ffi trans oe ffi trans oe ffi ffi ffi ffi oe trans oe ffi trans oe oe oe ffi oe trans oe ffi oe trans oe ffi trans oe oe ffi oe ffi ffi ffi oe oe trans oe ffi easy verify induction structure argument theorem golog program oe exist situation calculus formulas phi oe psi oe ffi mentioning final trans gamma gamma final oe phi oe gamma gamma ffi trans oe ffi psi oe ffi final trans place may give new definition oe def ffi trans oe ffi final ffi trans transitive closure trans defined second order situation calculus formula trans oe oe def oe oe oe ellipsis stands oe oe ffi ffi oe ffi trans ffi ffi oe oe ffi convenient include special empty program nil 
words oe holds possible repeatedly single step program oe obtaining program ffi situation ffi legally terminate get result theorem definitions equivalent non nil golog program oe situations gamma gamma oe oe concurrency ready define congolog extended version golog incorporates rich account concurrency 
say rich handles ffl concurrent processes possibly different priorities ffl high level interrupts ffl arbitrary exogenous actions 
commonly done areas computer science model concurrent processes interleavings primitive actions component processes 
concurrent execution processes primitive actions processes occur interleaved fashion 
fact primitive action happening time 
discussed model actions intuitively occur simultaneously actions extended duration instantaneous start clipping actions interleaving appropriate 
important concept understanding concurrent execution process blocked 
deterministic process oe executing reaches point primitive action situation poss false wait action oe oe false execution need fail golog 
congolog current interleaving continue successfully provided process oe executes 
net effect oe suspended blocked execution continue 
congolog language exactly golog additional constructs oe oe concurrent execution oe ii oe concurrency different priorities oe jj concurrent iteration oe oe interrupt 
oe oe denotes concurrent execution actions oe oe 
oe ii oe denotes concurrent execution actions oe oe oe having higher priority oe restricts possible interleavings processes oe executes oe done blocked 
construct oe jj nondeterministic iteration instances oe executed concurrently sequence 
oe oe interrupt 
parts trigger condition oe body oe 
idea body see hints proof theorem 
just actions golog external internal variable assignment congolog blocking unblocking happen externally poss wait actions 
internal synchronization primitives easily added 
oe execute number times 
oe true oe execute 
interrupt gets control higher priority processes oe true oe execute 
completed execution interrupt ready triggered 
means high priority interrupt take complete control execution 
example true highest priority ring bell 
interrupts easily write controllers task doing handle various concerns arise 
dare say reactive 
show final trans need extended handle constructs 
handle interrupts separately 
final extension straightforward final oe oe final oe final oe final oe ii oe final oe final oe final oe jj true observe clause says legal execute oe oe jj zero times 
trans trans oe oe ffi ffi ffi ffi oe trans oe ffi ffi oe ffi trans oe ffi trans oe ii oe ffi ffi ffi ffi ii oe trans oe ffi ffi oe ii ffi trans oe ffi ffi trans oe ffi trans oe jj ffi ffi ffi ffi oe jj trans oe ffi words single step oe oe single stepping oe oe leaving process unchanged 
oe ii oe construct identical allowed single step oe legal step oe ensures oe execute long possible 
single step oe jj single stepping oe left remainder oe oe jj 
allows unbounded number instances oe running 
observe oe oe oe oe able execute amount interleaving left completely open 
legal execute completely starting legal switch back forth primitive wait action 
hard define new concurrency constructs min kmax require amount interleaving minimized maximized respectively 
omit details 
exogenous actions primitive actions may occur part user specified program 
assume background theory user declares predicate exo actions occur exogenously 
modify specification trans primitive actions wait actions golog follows trans ff ffi exo poss ffi ff true immediately obvious trans remains properly defined axioms containing negative occurrences trans 
see details 
similarly test actions 
executing program exogenous actions preconditions satisfied occur primitive action waiting condition true 
regarding interrupts turns explained constructs congolog oe oe def interrupts running oe oe false 
see works assume special fluent interrupts running true 
interrupt oe oe gets control repeatedly executes oe oe false point blocks releasing control able execute 
note definition trans transition occurs test condition loop ifthen body 
effect oe false process blocks right loop action oe true resumes loop 
terminate loop special primitive action interrupts effect interrupts running false 
imagine execute program oe containing interrupts execute program interrupts oe ii interrupts effect stopping blocked interrupt loops oe lowest priority actions oe executed 
reactive multi elevator controller illustrate concurrency primitives reactive elevator controller example 
example terms stands elevator ffl ordinary primitive actions move elevator floor move elevator floor turn call button floor change state elevator fan ring smoke alarm ffl exogenous primitive actions call button floor pushed elevator temperature changes smoke detector senses smoke smoke alarm reset ffl primitive fluents loor elevator floor temp elevator temperature elevator fan call button floor smoke smoke detected ffl defined fluents def temp def temp gamma basic action theory primitive actions fluents ffl initial state loor temp ffl exogenous actions exo ffl precondition axioms poss jf loor poss jf loor poss poss poss poss poss poss smoke poss ffl successor state axioms poss oe loor nj loor gamma loor loor poss oe temp tj temp gamma temp temp poss oe anon poss oe poss oe smoke smoke note fluents affected exogenous programmed actions 
instance fluent true exogenous action calls elevator false programmed action elevator serves floor 
ready consider basic elevator controller 
defined loor loor fluent defined select buttons currently served 
example choose button longest 
purposes take 
procedure loor consist actions elevator take serve request floor purposes loor def loor loor bothered formalizing opening closing doors nasty complications passengers 
controller oe get execution traces axioms oe 
particular run exogenous actions 
controller big drawback buttons loop terminates elevator returns floor stops buttons pushed way 
better structure interrupts loor loor 
second lower priority 
buttons re floor go floor reconsider point buttons pushed exogenously pick serve floor checking 
elevator quits floor buttons 
scheme easy handle emergency requests 
add loor interrupt higher priority assuming suitable additional actions fluents 
deal fan add new interrupts 

executed highest priority 
case serving floor amounts temperature hot fan turned continuing similarly cold 
note check state fan interrupt loop repeatedly releasing control lower priority processes 
imagine ring bell smoke detected disrupt normal service smoke alarm reset exogenously 
add interrupt smoke 
priority emergency button higher normal service 
interrupt triggered elevator ring bell repeatedly 
handle fan serve emergency requests 
putting get controller 

ii loor ii smoke 
ii loor ii loor 
note elevator controller uses different levels priority 
programmed golog interrupts code lot 
suppose write controller handles independent elevators 
congolog done elegantly oe oe oe program replaced elevator oe program replaced elevator allows processes completely independently terms priorities 
elevators oe delta delta delta oe 
applications useful unbounded number instances process running concurrently 
example ftp server may want instance manager process active ftp session 
programmed oe jj concurrent iteration construct 
desirable elevator continue working indefinitely adding interrupt true wait 
lowest possible priority wait op terms fluents 
satisfied elevator simply waits higher priority interrupt triggered exogenously 
programs terminate semantics behavior specified trans discussion procedural richness important lose sight logical framework 
congolog programming language execution planning depends reasoning actions 
crucial part congolog program declarative part precondition axioms successor state axioms axioms characterizing initial state 
central language differs superficially similar procedural languages 
congolog program definition foundational axioms situation calculus formal logical theory possible behaviors agent environment 
theory explicitly congolog interpreter 
developed prototype congolog interpreter prolog see 
simple somewhat inefficient interpreter lifted directly final trans introduced 
example oe ii oe prolog clauses trans trans sigma sigma delta sigma trans sigma delta 
trans sigma sigma sigma delta trans sigma delta trans sigma 
implementation requires program precondition axioms successor state axioms axioms initial course elevator requested floor elevators may decide serve 
easy program better strategy coordinates elevators elevator decides serve floor immediately fluent true floor elevator serve floor fluent true 
different emphasis approach shared logical formalism proposed concurrent database transactions 
exogenous actions simulated generating probabilistically asking user runtime occur 
state expressible prolog clauses 
limitation implementation theory 
summary shown basic action theory describing initial state preconditions effects collection primitive actions possible combine complex ways appropriate providing highlevel control 
semantics complex actions ends deriving directly underlying primitive actions 
sense inherit solution frame problem provided successor state axioms primitive actions 
areas research 
mention incorporating sensing actions actions effect change world provide information agent runtime handling non termination developing accounts program correctness fairness liveness appropriate controllers expected operate indefinitely 
longer version preparation 
bonner kifer 
concurrency communication transaction logic 
proc 
icdt 
de bakker de 
control flow semantics 
mit press 
de giacomo chen 
reasoning nondeterministic concurrent actions process algebra approach 
proc 
aaai pages 
green 
theorem proving resolution basis question answering systems 
machine intelligence vol 
pages 
edinburgh university press 
hennessy 
semantics programming languages 
john wiley sons 
hoare 
communicating sequential processes 
prentice hall int 
leivant :10.1.1.34.2562
higher order logic 
handbook logic artificial intelligence logic programming vol 
pages 
clarendon press 
levesque reiter lesperance lin scherl :10.1.1.54.7045
golog logic programming language dynamic domains 
appear journal logic programming 
mccarthy hayes 
philosophical problems standpoint artificial intelligence 
machine intelligence vol 
edinburgh university press 
milner 
communication concurrency 
prentice hall 
plotkin 
structural approach operational semantics 
technical report daimi fn computer science dept aarhus univ denmark 
pym pryor murphy 
processes plan execution 
proc 
uk planning scheduling sig workshop 
reiter 
frame problem situation calculus simple solution completeness result goal regression 
artificial intelligence mathematical theory computation papers honor john mccarthy pages 
academic press 
reiter 
natural actions concurrency continuous time situation calculus 
proc 
kr pages 
stirling 
modal temporal logics processes 
logics concurrency structure versus automata lncs pages 
springer verlag 
