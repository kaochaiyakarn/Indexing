integrated distributed manufacturing multi agent perspective jos matos raymond paulo leit francisco restivo mohammed new university lisbon fst da torre portugal 
email cam pt universit paris nord 
saint denis cedex 
france 
email iut univ paris fr polytechnic institute portugal 
email pt faculty engineering univ porto rua dr roberto porto portugal 
email fjr fe pt large rapid evolution terns paradigms technologies support development distributed manufacturing systems real time applications 
starts survey main proposals area experience gained authors various fields pertaining manufacturing device modelling control supervision industrial messaging production management reengineering methodology 
rational multi agent approach discussed available technologies support development agent applications summarised 
implementation controlling agents flexible manufacturing system described discussed 
nowadays rapid changes economic technical environments associated new manufacturing paradigms mass customisation require capability agile fast adaptation environment changes 
social reasons changing scenario increasing level human education advanced economies new requirements terms quality product diversity new environment regulations centralised systems efficiently master complexity 
furthermore wide availability communication technologies potential economy reached designing large control applications smaller building blocks components easier develop check time saving replacing identified component represent technical factors motivate new approaches design development manufacturing systems 
geographical distribution responsibility control leading network collaborative manufacturing entities high level autonomy entities crucial face capability agile dynamic adaptation changes 
technology may play important role supporting development control supervision applications manufacturing systems fulfil requirements imposed new manufacturing environments 
examines integration interaction logical supervisory part physical devices standard communication protocols crucial point successful development new generation agile control integration applications 
techniques distribution control applications protocols packets objects agents basic condition distributed computing develop possibility efficiently exchanging data 
packet switching technique implemented ubiquitous ethernet step 
efficient perennial programming take place higher levels software protocols necessary reach called application layer operations usual computer attainable remote managing files executing programs 
tcp ip protocols brought network distance independent programming opportunities 
sections give schematic overview straightforward path higher higher abstraction standardisation levels distributed programming 
iso osi stack versus internet 
layers protocol stack iso osi model communication standard computer education 
supersede structured udp tcp ip layer protocols 
tcp ip stack utilities included free soon early unix platforms 
reason iso protocols accepted large organisations long distance applications 
early tcp stacks utilities available dos pc letting communicate unix systems 
time propose open machine tool controller linked transparent manner cad cam sources 
distributed application programming ip world internet protocol ip routes packets data kbytes large supports essentially transport level protocols tcp transport control protocol reliable stream mode connection protocol partners negotiate open communication session particular port number near osi tp protocol applicable applications file transfer ftp remote connection telnet 
limit set size transmitted data 
fragmentation packet numbering take place sizes larger kb udp user datagram protocol connectionless protocol flow control error recovery applicable local small volume interactions data value reports trivial file transfer protocol tftp 
tcp ip programming socket interface sockets de facto standard interface tcp udp protocols 
opening socket returns handle 
low level programmers care platform specific details byte ordering sockets limited system programming 
possible improvement standardise description encoding transmitted data 
case syntax number asn basic encoding scheme ber iso protocols tcp ip simple network management protocol 
server side client side socket returns socket bind binds local ip address port nr listen listens connexion registrations accept accepts client connexion waiting connect establishes connexion recv receives data stream mode send send send data stream mode recv closes connexion example stream mode communication tcp sockets client server programming remote procedure calls remote procedure calls originally developed sun available unix platforms extended standardised open group osf open distributed computing environment frame 
slightly altered version dce rpc integrated microsoft windows family platforms 
function arg arg arg arg return client stub runtime network messages server stub runtime remote procedure call simplified representation rpc high level mechanism client program invoke procedure distant server manner transparent possible programmer 
achieve goal interface calling return type called procedures described interface definition language corba idl compiled generate called local stubs 
runtime calling program invokes rpc package generated image distant function local stub stub packs call network messages distant stub turns invokes real distant procedure distant procedure executes returns possible value calling program path 
port mapping conversion arguments messages managed rpc runtime infrastructure 
order avoid homonyms server procedures register bits globally unique identifier guid 
distributed object corba dcom request brokers orb designated software buses middleware allow local object invoke methods distant local 
order mask networking details middleware runtime installs points stub skeleton proxy names client side server side 
client object submits invocation local image distant server object 
signature call forwarded distant host converted actual method invocation server object results returned client object indirect way 
behaviour close rpc mechanism rpc remote procedure offered dedicated server orb methods attached object server handle objects 
scheme conditions required 
language independent interface definition language idl describing interfaces generating stubs various target languages object registering mechanism object locating schemes unambiguous referencing easy object access java rmi language specific prototyping tool sun java remote method invocation lightweight solution developing distributed object applications 
jini distributed application environment brings services near corba added dynamics 
language specific scheme better applicable prototyping heterogeneous manufacturing applications 
sun jdk includes simple corba orb brings paragraph 
corba global approach common object request broker architecture distributed programming architecture specification corresponding post client server era set object management group www omg org 
corba allows object interaction independently source language 
orb specification corba architecture defines general low level object services naming object life cycle event notification security persistence may provide vertical corba application level facilities manufacturing omg 
orbs available vendors written java platform independent 
corba orbs various origins interoperable internet inter orb protocol 
new constraints industrial world video monitoring real time response distant control introduce quality service qos concern 
field classical tcp ip may adequate experimenting jonathan flexible orb complying retina model time constrained distributed processing 
jonathan communications pass binding object may encapsulate various network configurations atm tested protocols handled 
dcom clipboard distributed component object model 
dcom microsoft distributed component object model result progressive approach offer users increasing package interoperability 
began simple clipboard cut paste concept continued dynamic data exchange experienced great improvement ole com stage called component objects register activated applications 
com client object request particular interface passed back default generic interface 
client communicates directly proxy server stub 
communication proxy stub messages window messages client server platform rpc separate ones 
microsoft promotes extension dcom scheme unix platforms corba dcom gateways exist 
dcom lan protocol microsoft investigating inter object operation internet xml simple object access protocol soap 
developing distributed manufacturing applications 
approach hierarchical holonic efficient functioning distributed manufacturing applications relies communication various manufacturing monitoring equipment 
manufacturing applications need reasonable level standardisation accepted 
standardisation guarantees relatively easy configuration important reconfiguration period time 
significant example lack standardisation number specific drivers supervisory software vendors develop 
hand universal standards accepted expensive hard set far away common programming practices 
case iso mms exceedingly dependent underlying architecture reach small companies 
lifting mms object approach manufacturing message specification mms iso brought manufacturing specialists define common framework developing communication support industrial computerised equipment 
key concept mms virtual manufacturing device associated real device machine cell 
vmd offers services concerning related abstractions mainly domains represent resources possibly downloadable named variables domain vmd scope program invocations corresponding execution machine task events various associated mechanisms 
adaptations general model particular classes devices machine tools robots logic controllers process control proposed companion standards 
shows iso mms architecture possible adaptations frequently adopted solution rfc emulate iso services tcp ip cumbersome unrealistic solution consisting implementing mms services tcp ip sockets transitory solution rpcs stable state oo mms approach cedric teams 
approach translation mms pdus specifications asn corba idl allows conversion conventional mms service requests object vmd method invocations 
iso mms application 
iso ass ctrl sce iso asn ber pres 
iso connection iso prot 
class iso iso token bus iso mms iso iso asn ber pres 
iso connection rfc adaptation layer tcp ip layers layers mms specific protocol sockets tcp ip layers layers mms pdu client server interactions asn ber transcoding remote procedure calls tcp ip layers layers object adapted mms asn idl transcoded remote method invocation object bus corba retina tcp ip layers 
layers various approaches mms implementation various prototypes oo mms concept developed 
worked sun chorus micro kernel environment cool orb conference heterogeneous system environment windows linux orb automatic translation asn pdu specification idl 
retina model jonathan distributed environment promising approach applications subject specific transport schemes 
opc ready proprietary opc ole process control model implementation strategy promoted opc foundation www org consortium vendors measurement control equipment originally perspective supervision control data acquisition 
model standardised data access servers event servers 
data servers contain groups groups contain items images real data 
data assigned time stamps quality indexes 
event servers behave state machines contain opc conditions control conditions send event notification client applications 
implementation strategy opc requires servers ole dcom compliant written 
offer automation interface allows final developers users write visual basic clients import data standard windows applications 
alternative project java opc java package implementing opc java testing various interaction schemes rmi corba xml mortensen 
mms vmd manufacturing agents clear preceding section necessity defined public interfaces technical objects 
re lifting mms building object oriented basis integrate real time constraints believe get framework building agent architectures workshop level 
mms structured allows great variety particular vmds 
existing object invocation scheme allow limited flexibility dynamic invocation corba parameter naming soap 
interesting evaluate integration mms concepts jini framework 
anticipating paragraph may suggested world various changing object instances higher level collaboration may significant flexible perennial supervisory systems 
software agents expected negotiate interaction environment speech acts constructs appear step abstraction 
multi agents manufacturing domain multi agent system concept originated distributed artificial intelligence area defined set nodes designated agents ferber 
spite existing definitions possible define agent component software hardware capable acting decision making order accomplish tasks 
manufacturing systems domain agent software entity represents manufacturing system entities physical devices tasks 
motivation multi agents multi agent systems represent suitable technology support distributed manufacturing environment manufacturing applications characteristics modular decentralised changeable ill structured complex agents best suited parunak 
analysing benefits multi agent technology possible conclude fulfils main requirements actual distributed manufacturing systems autonomy agent operate direct intervention external entities kind control behaviour cooperation agents interact agents order achieve common goal reactivity pro activity agents perceive environment respond changes occur 
agents organised decentralised structure easily different organisational structures leit restivo 
platforms support development multi agents applications multi agent systems adequately developed usual languages 
better suitability support development systems dependent provided features deal basic requirements imposed multi agent systems concurrency object oriented approach serialisation remote access building multi agent systems set complex features implemented supported usual languages increases programming effort 
communication channels agent level agent communication language yellow white pages services ontologies common understanding code mobility agent management services examples features directly implemented programming languages 
reduce programming effort interesting resort multi agent environments concordia concordia java stanford edu www trl ibm jp aglets fipa os fipa os jade sharon cselt projects jade 
platforms java language various features implement distributed systems 
development environments provide predefined features agent models ease development multi agent systems vary platform platform 
differences reflect philosophy target problems envisioned platform developers 
necessary choose adequate environment type problem hands 
research addressed platforms initially considered analysed fipa os jade 
main reason choice need free platform documentation support previous experiences research groups authors close relationship 
platforms analysed items available support ease programming effort documentation standards fipa facilities implement rule oriented programming features support management agent communities white pages yellow pages 
standards important increase interoperability different type agents allow increasing agents 
agent communication languages acl important aspects standards 
current major acls kqml knowledge query manipulation language finn fipa acl 
dealing acl integration problem syntactic translation important verify semantic content preserved exchange messages 
agents need common understanding concepts domain knowledge known ontology 
platforms fipa os jade jade choice better responds mentioned requirements 
effect jade support active supporting mailing list 
behaviours supplied platform documentation easy connection jess java expert shell system friedman hill rule oriented programming infrastructure helped reducing programming effort 
jade fipa os implements fipa acl kqml speech act theory searle 
fipa acl describes communicative act narrative form formal semantics modal logic includes normative description set high level interaction protocols requesting action contract net labrou 
interesting feature jade functionalities provided manage community agents fipa architecture multi agent platforms 
includes remote monitoring agent rma tool control life cycle agent platform 
rma start kill new agents debugging purposes 
agent white pages life cycle services agent management service ams included 
ams exerts supervisory control access multi agent platform maintains directory agent identifiers agent state 
agent yellow pages services directory finder df included federated dfs existing platforms 
fipa os similar jade architecture point view fipa complaint open source 
fipa os easier model concurrent tasks task model provides better functionalities jade behaviours 
main difference platforms resides documentation supplied easiness start implementing favours jade 
final word poor documentation features support management agents 
programming functions available infrastructure lower level jade fipa os increases programming effort 
interaction physical devices development agent control supervision applications manufacturing presents important delicate aspects operation agents communication decision making scheduling self organisation learning disturbance handling interaction legacy systems interaction physical devices 
course integrating control supervision distributed manufacturing systems biggest problems interaction physical devices due mainly factors proprietary communication protocols different specifications functionalities physical device complexity cost standard protocols 
agents represents physical devices sensors robots cnc machines interface module implements communication logical part agent physical device 
cooperation communication logical part decision making kb local interaction mechanism physical part agent logical physical components order facilitate development agent control applications distributed manufacturing systems important standard mechanisms protocols implement interaction layer logical component physical device 
described previous section trends distributed communication platform corba dcom communication architectures mms inspired manufacturing specialisation 
solution implement standard interaction process development reusable libraries objects represents functionality physical devices implements basic services variables read write program manipulation download upload start pause resume events notifications 
libraries objects agents easily access physical device 
agent control flexible platform flexible assembly cell installed institute facilities composed subsystems assembly cell nr nr automatic warehouse transportation subsystem 
assembly cell built axes abb irb robot 
cell comprises tool exchange mechanism composed tool warehouse grippers mechanism installed robot wrist 
fixing device installed conveyor placed front robot 
assembly cell built bosch sr robot 
cell includes tool exchange mechanism different tools fixing device mounted conveyor front robot 
automatic warehouse places store bosch loaded raw materials finished unfinished products 
warehouse loads transportation subsystem 
raw materials finished unfinished products transported different subsystems bosch basis transportation subsystem 
fake clock demonstration product assembled 
platform agile complex cell composed different heterogeneous controllers intended turned agile easily changeable configurable assembly cell system test case show system support shop floor reengineering designed 
reach goal multi agent approach various manufacturing components 
step establishing community agents 
community supports different types organisational structures 
various agents share specific aspects related environment installed 
level really direct connections organisation acts common shell community agents belonging 
organisation defines ontologies services available community skills competencies available community communication protocols mechanisms job opportunities tasks served shop floor manufacturing agents eager find structure called manufacturing cluster analogy clusters enterprises 
second type organisation consortium group agents cooperating pursue common objective 
cluster long term organisation consortium seen short term exists objective triggered consortium creation valid 
consortium dissolved soon objectives achieved 
dynamically created structures serve tasks asked users 
shop floor domain cluster formed group manufacturing components robots grippers potential support creation certain kinds 
consortium defined domain represents manufacturing components operating achieve objective 
robot cooperating gripper chosen tools magazine illustrates simple example consortium matos 
contracts mechanism regulates behavioural relationships consortium members cluster consortium levels 
entity regulated different contracts different behaviours 
regulated contracts represented declarative configurable information structures manufacturing components lead significantly agile manufacturing systems possible exploit physical system different ways depending organised 
important point manufacturing components process connecting physical controller agent 
easy task physical component controlled directly agent 
outdated legacy controllers close architectures control existing physical components 
integrate legacy components agents framework necessary develop software wrapper hide details component 
wrapper acts machine agent supplying primitives represent functionality physical component local controller 
agents access wrapper local software interface proxy services wrapper defined 
shows high level representation operative agent indicating wrapper integrates manufacturing component robot 
agenda agent manager agent awarded contracts robot access move proxy set acceleration internet connection server wrapper robot controller physical component integration wrappers subsystems developed dcom particular superiority computers available control running microsoft operating systems windows nt builder development language tools develop dcom applications developers better trained microsoft environment 
effect distributed object architectures intention prove distributed objects adequate integrate physical controllers agents better old tier architecture rpcs 
consider irb robot 
controlled teach pendent commands sent serial rs port 
commands control large number tasks issued lowlevel protocol 
control robot remote host track timeouts error state messages protocols abb data link protocol abb robot application protocol 
defined classes 
software layer robot control kernel implement robot controller commands move acceleration developed top protocols threads 
class implements methods required control serial port sending receiving bytes 
hand uses send control datagrams robot abb protocol 
class manages timeouts 
class implements functionalities robot 
uses construct message sent robot 
class set attributes model physical controller variables 
methods control de robot defined 
int read digital input int dig inp number bool dig inp value read digital port 

int write digital output int number int value write digital port 

int open grip open robot 

int close grip close robot gripper 

int read status int prog number int inst number int tcp int frame int inf double double double double double double double get robot status 
int move xyz int move type int orient type int coord type int double double double double double double double move robot 
int write program robot unsigned char buf int prog block type int prog block numb 
int read program robot int prog block numb int prog block type unsigned char buf 
methods important aspect stress resume functionality component 
control robot remotely sufficient include definition class client application 
test component client application graphical user interface developed 
client allows remote operation robot execution functionalities provided component 
discussed technological trends distributed systems multi agent approach implement agile manufacturing means solution fast frequent reconfigurations production system collaboration possible temporary industrial partners virtual enterprise 
distributed highly dynamic situation frequent manufacturing 
various partial developments realised order prove feasibility proposed approach 
steps requiring research include development functionalities support dynamic consortium formation modification cluster installation perspective re engineering 
agent builder web site integrated toolkit constructing intelligence software agents www com 
poggi 
object oriented framework realize agent systems proceedings may 
horn laurent 
providing real time object oriented messaging services 
proc 
ecoop brussels july 
matos 
shop floor reengineering support agility virtual enterprise environments proc 
pro br dec matos 
contract approach shop floor re engineering submitted low cost automation international conference 
concordia web site www com projects concordia 
dang tran horn st 
open distributed processing environment java 
proc 
middleware lake district uk sep ferber 
multi agent systems distributed artificial intelligence addison wesley 
finin weber wiederhold genesereth fritzson mckay mcguire shapiro 
specification kqml agent communication language darpa knowledge sharing initiative 
fipa os web site fipa os sourceforge net 
friedman hill 
jess java expert system shell sandia national laboratories livermore ca 
herzberg ca sandia gov jess 
laurent 
component oriented control architecture coca project microprocessors microsystems journal 
lefebvre tcp ip manufacturing experiment mms rpc 
proc 

sidney dec 
weis 
cool mms corba approach iso mms 
proc 
ecoop sf june 
iso iso industrial automation systems manufacturing message specification part international standard organisation genova 
labrou finin peng 
agent communication languages current landscape 
ieee intelligent systems 
vol 
pp 
leit restivo 
agile cooperative architecture distributed manufacturing systems appear proceedings robotics manufacturing international conference cancun mexico may mortensen 
project www com omg corba machine control white 
omg doc 

opc foundation ole process control presentation document www org parunak van dyke agents industry 
overview oriented cec industrial technology institute cia 

sp temps el un de num pour machine 
revue herm paris 
searle 
speech acts essay philosophy language cambridge university press 
simple object access protocol soap note may www org tr soap 
