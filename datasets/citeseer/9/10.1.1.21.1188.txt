active names flexible location transport wide area resources amin vahdat department computer science duke university michael dahlin department computer science university texas austin thomas anderson amit aggarwal department computer science engineering university washington explore flexible name resolution way supporting extensibility wide area distributed services 
approach called active names maps names chain mobile programs customize service located results transformed transported back client 
illustrate properties system implement prototypes server selection performance measurements location independent data transformation caching composable active objects demonstrate fold performance improvement users 
show new services developed composed secured framework 
develop set algorithms control mobile active name programs mapped available wide area resources optimize performance availability 
address question architecture deploying advanced distributed services internet 
argue programmable naming abstraction called active names combines location transport resources provides programmability supports different extensions supports mobile location independent code 
approach motivated efforts extend current internet domain naming system dns efforts interpose services clients servers :10.1.1.156.7859
historically dns developed supported part defense advanced research projects agency national science foundation cda cda cisco systems dell sun microsystems novell hewlett packard intel microsoft mitsubishi 
anderson supported national science foundation presidential faculty fellowship 
dahlin supported nsf career ccr 
support simple mapping machine names ip addresses today internet services identified single name distributed machines lead application router dns enhancements basic mapping abstraction 
broadly academic industrial researchers proposed bewildering array new services mediating clients servers including dynamic redistribution replicas wide area compression distillation multimedia content proxy cache extensions support hit counting dynamic content client customization web content network address translators nats packet delivery services mobile hosts forth :10.1.1.141.3942:10.1.1.1.2034
approach deploying extensions develop new protocol closely coordinate browsers proxies servers name system support extensions 
system complex difficult modify new services desired improvements developed existing services 
address need rapid deployment extensibility internet services variety proposals support active dynamically computation inside network leveraging machine independent languages java 
example active networking proposals include active networks active caches active services :10.1.1.141.3942:10.1.1.141.3942
addition number proposals single point non extension code front ends nats router load balancing :10.1.1.1.2034:10.1.1.1.2034
approaches varied protocol stack computation applied packet filtering connection filtering transparent proxies giving transparency making application responsible 
active computation applied protocol stack protocol stack done 
argue active naming unifying principle efficiently support wide variety new services providing correct behavior 
active names system maps name chain mobile programs responsible locating remote service transporting response destination 
service owning portion namespace complete control protocols access service control network protocols run 
similarly client machine active names customize services user 
example mobile user small screen expensive wireless connection europe refers cnn com user probably wants go different replica fetch different data transform data differently user united states large screen connection 
constructed prototype active naming system implement study set complex distributed services including replica selection performance observations ii image retrieval protocols migrate distillation code dynamically network optimize client response time iii cache enhanced support client customization caching active content 
experiments demonstrate fold performance improvements users system 
believe set experiments prove extensibility idea algorithm demonstrates large gains extensible system principle deployed part new non extensible protocol 
trying resolve argument extensibility desirable premise examine properties active naming architecture programming model way support advanced internet services 
particular experiments provide evidence system complete support wide variety extensions extensions easily constructed system significantly improve performance compared existing protocols performance information easily gathered model providing performance information important building simple algorithms performance programming model supports location independent program execution location independence important performance programming model supports efficient extensions important performance 
argue significant drawback active names modify existing naming abstraction 
traditionally internet name resolution returns ip address application uses ip address establish socket connection host 
active names name resolution retrieval specified resource single step combines location transport 
similar debate structure naming occurred file systems databases dangerous separate naming 
superficially simpler naming system return id ip address inode number physical memory location system access named resource 
id visible applications id hard state continue supported system binding changed invalid 
support legacy applications change hidden inside application specific proxy example web browsers configured connect proxy mediates browser interaction network 
remainder covers issues detail 
discuss strengths weaknesses active names contrasting popular alternatives 
outline architecture system describe applications built top system 
conclude related summary contributions 
background motivate decision provide extensibility naming compare approach popular alternatives active networks active services comprise extreme endpoints design space 
extreme applying arbitrary computation packets flow routers active networks completely general transparent hosts transparency comes cost efficiency making difficult express semantics 
extreme active services provides framework applications execute arbitrary computation network application free encouraged link different framework customized needs making difficult share extensions applications 
active names attempt combine best worlds course approach set limitations 
principal advantage approach naming top network protocol stack hijacking name resolution gain control extend network access 
spectrum hijacking packet processing inside routers likewise offers ability extend network access 
example consider anycast service routes client requests best different servers selection criteria 
system new policy server selection implemented mapping service name program selects replica 
equivalently policy implemented packet level inside programmable routers mapping name group address dynamically routing packets desired server 
extending names offers simpler failure semantics possible extensibility applied protocol stack 
today possible build highly available services inside machine room 
availability wide area services depends external factors power outages packets routed client machine room 
example routing pathologies service appear unavailable clients service 
cope external factors service needs replicated multiple geographic locations may fail independently 
case read replicas straightforward redirect requests failed replica member group multiple points protocol stack 
replicas writable maintain state require authentication recovery protocol require coordinated activity client replicas 
example bayou guarantees session consistency restricting clients bind replicas seen client updates :10.1.1.12.7323:10.1.1.12.7323
implementing session consistency correctly transparent packet processing requires network maintain hard state behavior client worse state largely duplicates client stored cache 
cheriton skeen cataloged numerous examples failure recovery correctly implemented inside transparent transport layer protocol 
model replica failures reflected back client handled transparently control program providing binding name server 
active names efficient packet level filtering services provided model 
interposing connection setup overhead programmability typically paid connection packet 
services provided packet layer supported system include packet level scheduling resource allocation routers multi host transparent packet filtering firewalls 
extreme researchers proposed customized application level frameworks way supporting application specific computation inside network 
example active services framework implements dynamically relocatable multimedia gateways suggest different frameworks needed support different applications 
approach differs active services trying provide single general purpose framework capable supporting composition wide range new services 
goal allow active name modules developed reused variety contexts instance active services supports customizable filtering media gateways support customizable protocols locating managing communicating gateways framework support dynamic installation new implementations client software 
code transform multimedia stream fit limited link capacity client gateway gateway server protocols active services fixed non extensible 
contrast active names allows aspects service location transport customized namespace owner code referenced name allowing active names locate download new implementations extension code namespace binding changed 
active name architecture support functionality discussed goals drive architectural decisions 
architecture support customization extensibility namespace ii support different namespace customizations iii support efficient network resources iv support execution namespace resolution 
core system simple describe providing overview examining key concepts design microkernel approach location independent active name programs namespace delegation methods programming model 
major motivations active names improve performance clients accessing services design careful allow room performance optimizations complicate straightforward design 
core system fully functional constructed number useful applications 
system complete stable internal 
detailed aspects security fully integrated prototype 
active names architecture summary 
overview client wishes access service constructs active name service consisting name resolve name namespace program resolve 
client hands name nearest resolver executes namespace program resolution name 
illustrates basic active names architecture 
namespace program tasks locate program run transport data program 
doing namespace programs effectively establish path series namespace programs request source reply sink 
program acts filter transports transforms input output 
program locates program run mechanisms 
active name resolved recursively hierarchical delegation mechanism client specifies root namespace program partially resolves name determines namespace program jurisdiction remainder name root program hands name namespace program continues process 
second support services increase efficiency programming model follows continuation passing style names resolved system constructs methods list uses list active names describe pipeline services transport result destination 
name recursively resolved service returning service output call path resolve leaf namespace program pops top active name methods list resolves active name remaining methods list transport service output client 
resolvers provide basic resource necessary execute namespace programs distributed system 
principle resolvers may located practice useful located interesting points network near clients near servers near bottleneck network links 
envision system provides suitable resolver infrastructure points 
microkernel approach support extensibility architecture follows microkernel philosophy providing basic set building blocks allowing services clients maximum freedom customize systems needs 
minimum resolver provide loader fetching loading active name program safe execution untrusted code local soft state interfaces communicating invoking programs remote nodes 
safe execution prototype relies java security system just easily chosen mechanism hardware protection domains software fault isolation :10.1.1.142.4909
top basic security mechanism individual programs define policies delegating namespaces control accepting requests namespaces 
provide hook active name programs enforce security interface provides input capability certificate identifies caller may subset caller rights callee 
program invoked remote node certificate authenticated encryption techniques program called locally identity caller guaranteed integrity local operating system 
active name program free information caller access control 
example program choose run behalf previously registered users 
similarly program needs enforce method invoked downstream program right reply right reply original caller 
certificates may required machines run programs methods program results trusted run trusted machines 
expect active names programs leverage researchers showing provide authentication access control mobile computation 
implemented prototype capability system integrated functionality active names prototype 
production system nodes enforce resource limitations technology functionality implemented prototype 
active name programs support efficient network resources active name programs represent services handle name resolution 
run namespace program resolvers fetch load code program 
resources system code identified active name describes locate transport resolver 
allows active name system load programs provides ability customize locate available nearby replica storing program maintain version consistency compress decompress binary 
course recursion small number initial programs dns loaded active name machine bootstrap system 
active names programs run resolver important question determining run 
program responsible locating data computational resources needs complete task program works minimize cost accessing resources 
example pipeline programs needs data particular node step pipeline take request closer data 
details decisions namespace dependent range simple name resolved includes ip address node run sophisticated running cost benefit analysis comparing different locations 
location preferences namespace dependent program typically know prefers run 
program generally invokes program locally invoked program prefers run uses remote execution interface invoke program resolver node liking 
hierarchical name space active names organized hierarchically namespaces analogous domains domain naming system dns directories unix file system 
names namespace turn namespaces subdomains dns subdirectories unix terminal leaves naming tree machines dns files unix 
namespace program associated responsible interpreting portion namespace program free interpret names namespace fashion wants 
root namespace interprets names 
namespace owner right determine program bound namespace 
client default owner root 
allows client install program mediate names translated 
example pda install root program take returned lower level name spaces compress images fit screen size :10.1.1.1.2034
illustrate delegation works consider system implements www namespace support service naming transport 
traditionally users type web requests specify specific transport protocol service name cnn com 
transport communicate service concern user 
framework users simply name service wish contact services specify transport names control hierarchical namespace delegation mechanism 
particular root namespace sends web requests www root active name program implements www root namespace 
bootstrapping default www root delegates incoming requests series active name programs implement default caching transport protocol 
active names paradigm delegate resolution names default www root namespace right delegate portions www namespace active name programs policy chooses 
www root policy set mappings follows response request url may include mime header directive specifying active name program invoked subsequent requests url prefix 
example reply request www cs utexas edu home smith delegate www cs utexas 
edu home smith active namespace delegate www cs utexas edu home jones namespace www cs utexas edu namespace www cs duke edu home smith namespace 
methods support network efficiency transport services programming model construct chain unidirectional filters request source intermediate services reply sink 
intuitively active name program acts layer protocol stack program provide bidirectional pipe layer layer provide path bytes sent client server 
layer able filter bytes sent connection needed 
efficiency reasons take slightly complicated approach 
frequently active name program forwarding agent points named resource 
case inefficient treat chain active name programs pipe forcing bytes traverse back chain programs led server inefficiency particularly pronounced forwarding agent runs machine remote client server 
system uses form multi way rpc distributed programming model passing control namespace program interpret remainder name current namespace program bundles remaining active name representing method prepends list methods created earlier programs 
chain methods effectively script filters transport transform data returned service name fully resolved 
example program compress data increase network bandwidth add decompression routine 
active name programs free run subsequent programs may reorder list 
api api level namespace program takes string remaining part name resolved data stream input service name represents list methods active names services needed transport result service destination 
namespace program determines namespace program call partially evaluating name delegating resolution sub namespace namespace leaf name fully resolved popping top method methods list 
program wants additional done result call adds corresponding methods methods list 
program calls program partially resolved name remaining list methods data stream comes passing incoming data stream program unchanged creating new data stream filtering incoming data stream creating new data stream local state reading data cache 
practical active name architecture able smoothly integrated legacy clients servers name databases 
accomplish library proxy provides default translations legacy names corresponding active names 
example provide web proxy allows unmodified browsers active names system 
replicated service access 
applications active names framework described section demonstrates power key active name principles extensibility location independence 
describe active names support flexible bindings clients replicated internet services 
show active name filters dynamically allocated strategic wide area locations maximize client performance reduce consumed wide area bandwidth server load 
demonstrate generality system showing individual active name extensions composed provide significant performance benefits individual extension 
extensibility active names allow service specific programs account number variables choosing server replicas including client server network characteristics 
scope determine appropriate replica selection policy arbitrary services 
attempt motivate need programmability locating wide area resources benefits information replica selection 
conduct experiment demonstrate points 
measurements eighteen clients located berkeley attempted access service replicated servers berkeley second university washington 
clients policies choose replicas ffl dns round robin extension dns hostname mapped multiple ip addresses particular binding returned client requesting hostname resolution done round robin fashion 
services employing dns round robin achieve randomly load balanced access replicas 
experiments implement round robin approach active names randomly choosing available replicas 
ffl distributed director product cisco executes specialized code routers allow services register current replica set 
requests ip routing level bound particular service automatically routed closest replica measured hop count 
extensible distributed director achieves geographic locality service requests 
experiments implement distributed director approach active names choosing nearest replica 
ffl active names instance programmable replica selection program uses number hops reported traceroute client replica determine choice replica 
replicas away chosen nearby replicas 
weighing biased decaying histogram previous performance 
replica demonstrated better performance past chosen 
example replica hops client replica hops away randomly chosen time 
probability equally weighed observed performance replicas 
performance histograms predict second access time second access time performance chosen time 
confidence performance prediction desire localize traffic different weights assigned components 
experiments components weighed equally 
plots average latency function offered load perceived clients continuously requesting kb file replicated service 
low load proper replica selection policy choose nearest replica berkeley 
distributed director policy shows best performance low load 
load increases berkeley replica begins loaded proper policy send approximately half requests university washington replica 
regime high load berkeley server offsets cost going wide area 
load balancing implemented dns round robin achieves best performance high load 
note simple active names policy able track best performance policies accounting distance previous performance 
low load factors heavily bias active names berkeley replica 
load increases performance berkeley replica degrades increasing number requests routed university washington achieving better performance 
algorithm replica selection purported optimal 
demonstrates utility programmable replica selection importance performance measurements choosing wide area replicas 
example measures performance latency accessing fixed size files sophisticated active names programs account size requested objects optimizing latency small objects bandwidth larger objects cost dynamically generating content server selecting strictly estimates server load making computationally intensive requests 
client information type request generated client information influence replica selection application specific manner 
schemes dns round robin distributed director static far removed clients utilize relevant information replica selection process 
type application active networks suffer similar lack information focus applying programs individual packets middle network 
location independence discussed earlier proper way web content particular client depends individual characteristics 
example little sense transmit kb color image handheld device black white screen wireless link 
address mismatch current approach mediate client access web proxies :10.1.1.1.2034
proxies retrieve requested resources dynamically distill content match individual client characteristics shrinking color image converting black white 
high level clients name web resource resource transformed characteristics 
model fits active names 
clients specify name resource url retrieved namespace program method specifies distillation program applied resource located 
distillation program ensures object returned client match characteristics 
benefit active names encapsulate distillation ability flexibly place transformation requested resource arbitrary points network 
example network path server proxy congested may sense transmit large image congested network perform transformation greatly reduces size image 
classic function versus data shipping tradeoff usually efficient perform transformation server transmit smaller image proxy directly client 
conversely transformation function expensive fast network connection available server cpu heavily loaded efficient transmit larger image proxy client cpu cycles available 
location independent programs comprise active names allow flexible evaluation function versus data shipping trading network bandwidth computation time 
demonstrate points implemented distillation active names framework ran experiment evaluate utility 
client berkeley requests local proxy image located duke university 
request number different circumstances 
variable place distillation takes place 
active name resolvers available berkeley duke distillation take place location 
different policies evaluated choosing distillation point statically assigning distillation proxy current approach distillation ii statically assigning distillation server transmitting smaller image bottleneck wide area links iii active approach distillation randomly assigned biased estimates distillation cost proxy server sites 
active scheme active name method caches cpu load information server proxy 
cache values considered fresh minute 
cached load information expires separate thread spawned refresh cache information program responsible maintaining load information active name run locally remotely 
distillation active name program uses load information addition estimate cost unloaded distillation size image calculate distillation cost server proxy 
program calculates cost transmitting full distilled image proxy arrive cost distilling image locations 
distiller uses information bias random selection location distillation 
estimated twice expensive perform distillation proxy chance performing proxy distillation 
variable considered experiments load server machine duke 
case name resolver duke university runs unloaded machine 
resolver compete cpu intensive processes 
load server cpu impact placement distillation program 
third variable experiment dynamically changing available bandwidth berkeley duke located opposite ends continent 
experiment variables modified 
available bandwidth kept constant possible running experiment late night 
plan investigate spand estimate available bandwidth wide area sites information intelligently choose location distillation 
active name resolvers including distillation code compiled run java development kit version beta 
target image kb distilled kb 
distillation image consumes approximately second cpu time 
graphs client perceived latency retrieving distilled versions target jpeg image function number clients simultaneously requesting image duke evaluated policies static proxy static server active 
shows performance case server unloaded addresses heavily loaded server competing cpu intensive processes 
shows low levels offered load simultaneous clients unilaterally placing distillation server produces best results smaller amount data versus shipped wide area 
number clients increases server duke overloaded performance degrades relative active policy intelligently allocates distillation random percentage requests proxy 
shows low levels offered load high server cpu load beneficial place distillation proxy site 
case distillation server expensive operation justify larger long haul transmission costs 
offered load increases active policy splitting requests server proxy sites outperforms static policy single processor proxy overloaded 
unloaded server loaded server mobile distillation performance 
key design goal active names 
applications able inject extensions network able combine extensions provide new services optimize existing ones 
subsection examine costs imposes system 
study benefits composable extensions bring key problem web caching 
caching key technique reducing long haul bandwidth latency 
table breaks reason web caching relatively low hit rates hang near 
table suggests composing different extensions may key technique addressing web caching problem 
extensions provided implemented number different entities ranging clients service providers third party software vendors 
experiments section demonstrate active name framework utilized compose multiple independent extensions resulting greater performance gain available single approach 
continuation passing architecture imposes overhead indirection methods script active name program transfers control 
sun ultra mhz ultrasparc ii process running jdk fcs takes active name program call return mechanism compared allowed procedure call directly 
order magnitude worse performance sufficient support composition relatively coarse grained services envision 
determine worth cost examine composition customizations client initiated customization 
semantics sample service implement client fetches base page service uses server side include interface update page current request randomly selects candidate banner ad inline images repeating random selection viewing page logs cookies provided ads selected request 
implement server semantics ways 
construct standard mechanisms run server server uses server side includes update page execute perl program randomly selects advertisements include page add additional logging provided server 
second implement version service delegating portion namespace set active name programs provided service 
default namespace delegates control requests destined www cs utexas edu users anonymized service controller active name program alters return path requests ssi active name program provides server side include semantics advertise active name program ad rotation logging 
configuration requests base page go server requests inline images may cached 
second configuration delegation active name programs installed base page inline images may cache cached results pass ssi advertise active name programs returned client 
client initiated customizations clients active names customize namespace source fraction requests available approaches client server initiated compulsory isp prefetching server replication push caching server increase number clients sharing cache system client transcoding compression delta encoding client consistency verify unmodified isp server driven consistency server consistency delta encoding dynamic cgi query isp active cache hpp server trec server pragma cache isp hit logging server active cache function shipping server server driven consistency server redirection isp server selection anycast server table workload requirements :10.1.1.31.5701:10.1.1.141.3942:10.1.1.34.4398:10.1.1.43.33:10.1.1.1.2034
numbers taken literature noted trace large isp serves requests containing gb clients day period images sent slow modem link 
clients control namespace adding transformation pipeline straightforward 
main subtlety clients store distilled images standard cache lest client mapping url customized image disturb clients 
cache results namespace client caches results distiller namespace 
experimental set consists machines 
client mhz pentium machine running microsoft nt sun jdk beta communicates proxy mhz sun ultrasparc ii machine running solaris jdk fcs kbit modem 
client proxy run active name framework 
service tested hosted departmental web server running dual processor sun running solaris netscape enterprise server server 
proxy server connected department wide switched mbit ethernet 
base page header bytes bytes depending customization occurs advertising banner images range size bytes distillation bytes distillation 
jar files containing server controller advertise ssi customization programs bytes respectively 
experiment cold caches fetch unrelated documents system cause jvms pre load basic classes associated system standard data path fetch unrelated image files cause proxy load client distiller active name program 
shows cases representing permutations distillation server customization 
client driver program uses active name system running client fetch base document parallel connections fetch inline images specified base document 
driver receives page associated inline images pauses seconds repeats process 
variation response times request request caused cache hits misses base page randomly selected inline images 
respect server customizations phases consider 
request delegation specified client active name system server performance closely matches server performance 
reacting delegation directive request client active name system spawns background thread download install specified customizations 
background thread active second phase experiment request case distillation turned requests distillation 
result performance requests noticeably worse server customization standard case 
third phase request client installed server customization namespace longer needs go server ad rotation hit logging ssi expansion 
performance significantly better customized version modulo cache hits inline images example indicates cache warm inline images hits server case provides response times case requires request 
situation active names system provides fold performance improvement 
result particularly significant light human factors studies suggest driving computer response time second significantly second may result linear increase user productivity system truly interactive 
shows distillation significantly improves performance initial series requests little difference images cached client 
example server customization response time request number server distillation server distillation server distillation server distillation cumulative average response time request number server distillation server distillation server distillation server distillation request cumulative average performance customizations namespace 
turned expensive requests require average distillation expensive requests averaged distillation speedup 
server customization expensive requests average distillation speedup distillation 
researchers noted advantage caching distillation :10.1.1.1.2034
experiment suggests combination server client customizations may particularly effective 
average request sequence combination outperforms distillation case outperforms server case 
related discussed section active names inspired provide alternative related research active networks active services 
closely related active names transaction processing monitors tp monitors 
tp monitors provide functionality similar active names access databases 
tp monitor directs transactions resource managers accounting load machines rpc program number affinity client server 
resource managers usually sql databases server supports transactions 
active names tp monitors target number similar applications active names provides general environment programmable access wide area resources 
contrast tp monitors tend static closely associated service 
active names related intentional name system 
similar active name approach intentional names take stance applications naming describe looking opposed find 
intentional names utilize declarative style data structures maintaining attribute value pairs bind user specified name appropriate instance target resource 
intentional names programmable difficult specialize individual application requirements designed operate wide area environments targeting single administrative domains 
intentional names support flexible resource location incorporate efficient transport resources back clients 
systems supported programmable name translation 
example object oriented systems smalltalk long provided application control binding caller callee 
mercury rpc system mid distributed client server environment 
current wide area computing research proposals globe globus legion propose number schemes locating computational resources wide area :10.1.1.21.987:10.1.1.21.987
proposals orthogonal incorporated extensible active names framework 
ninja proposes pipelined data flow model composing services clustered mobile environment :10.1.1.26.4797
model attractive date address dynamic migration computation demonstrated crucial performance 
proposal implementing urn advocates leveraging dns rewriting names matching iterative manner locate wide area resources 
scheme implemented generally active names framework namespace programs responsible name rewriting namespace delegation 
prospero supports extensible naming support mobile hosts integration multiple widearea information services wais gopher 
prospero allows users customize namespaces grouping related information individual perspective 
customization code runs client 
relative prospero demonstrates utility location independent portable programs name resolution 
programmability active names similar smart clients 
smart clients retrieve service specific code client mediate access set server replicas 
active names general smart clients location independent code able run system allowing deployment broader range applications 
query routing allow resource discovery replica selection 
allow name bound multiple servers single request transmitted single replica policy routers hosts 
uses replicated catalogs distributed indices locate wide area resources 
system integrates data multiple repositories heterogeneous query processing 
query routing uses compressed indexes multiple resources sites route requests proper destination 
approaches show promising results fit extensible framework 
active caches allow customization cache content java programs similar extensible cache management system 
active caches retrieved data files contain programs cache promising execute program may change contents file returning data client 
hand extensible cache management system uses service specific programs mediate accesses service 
approach general allowing example program manage local cache replacement policy perform load balancing cache technique similar active caches delegating programs individual names keeping namespace paradigm allow parent directories control delegation entire subdirectories doing delegation object object basis 
note approach associating program level hierarchical namespace new 
hp mit exokernel research file systems example examined allowing users define application specific programs directory file system :10.1.1.130.1539
directory program completely responsible managing bits stored inside directory example allows applications customize disk data structures optimize application specific patterns storing html files cross links disk cylinder 
describes framework supporting extensibility wide area distributed services location independent programs interpose naming interface 
active names example customize service located results transformed transported back client 
approach compared existing schemes introducing programmability network active networks active services 
describes implementation active name prototype illustrates utility number sample services including replicated service selection mobile distillation service content 
case application performance information leveraged match exceed existing static approaches 
need illustrated internet service access incorporates extensions multiple sources 
results show active name extensions offer fold performance improvement relative existing static approaches necessary compose multiple extensions achieve benefit single extension achieves comparable performance 
william adjie winoto schwartz hari balakrishnan 
architecture intentional name application level routing 
progress february 
scott alexander william angelos keromytis jonathan smith 
safety security programmable network infrastructures 
ieee communications magazine 
elan amir steven mccanne randy katz 
active service framework application realtime multimedia transcoding 
proceedings sigcomm september 
thomas anderson david culler david patterson team 
case networks workstations 
ieee micro february 
martin arlitt carey williamson 
web server workload characterization search invariants 
proceedings acm sigmetrics conference measurement modeling computer systems pages may 
amin vahdat thomas anderson michael dahlin 
crisis wide area security architecture 
proceedings usenix security symposium san antonio texas january 
time berners lee robert cailliau jean francois groff bernd 
world wide web information universe 
electronic network research applications policy number spring 
ammar zegura sha fei 
application layer anycasting 
proceedings ieee infocom april 
brady 
theory productivity creative process 
ieee cg may 
breslau cao fan phillips shenker 
implications zipf law web caching 
technical report university wisconsin april 
pei cao jin zhang kevin beach 
active cache caching dynamic contents web 
proceedings middleware 
david cheriton dale skeen 
understanding limits causally totally ordered communication 
proceedings th acm symposium operating systems principles pages december 
stuart cheshire mary baker 
internet mobility 
proceedings acm sigcomm conference august 
cisco 
distributed director 
www 
cisco com warp public technical shtml 
grzegorz czajkowski thorsten von eicken 
resource accounting interface java 
proceedings acm oopsla conference october 
ron daniel michael internet draft 
resolution uniform resource identifiers domain name system 
internet draft see www 
acl lanl gov urn txt may 
fred douglis antonio michael rabinovich 
hpp html macro preprocessing support dynamic document caching 
proceedings usenix symposium internet technologies systems monterey california december 
brad david michael feeley 
measured access characteristics world wide web client proxy caches 
proceedings usenix symposium internet technologies systems monterey california december 
fitzgerald foster kesselman von laszewski smith tuecke :10.1.1.21.987
directory service configuring high performance distributed computations 
proc 
th ieee symp 
highperformance distributed computing pages 
marc fiuczynski vincent lam brian bershad 
design implementation ipv ipv network address protocol translator 
proceedings usenix conference june 
martin tim connors steve bart sears tim sullivan john wilkes 
design 
technical report hpl osr hp laboratories april 
armando fox steven gribble chawathe eric brewer :10.1.1.1.2034
cluster scalable network services 
proceedings th acm symposium operating systems principles saint malo france october 
james gosling henry 
java tm language environment white 
java com whitepaper java whitepaper html 
jim gray andreas reuter 
transaction processing concepts techniques 
morgan kaufmann 
steve gribble matt welsh eric brewer david culler :10.1.1.26.4797
multispace evolutionary platform infrastructural services 
proceedings usenix technical conference june 
steven gribble eric brewer 
system design issues internet middleware services deductions large client trace 
proceedings usenix symposium internet technologies systems monterey california december 
griffioen appleton 
automatic prefetching wan 
ieee workshop advances parallel distributed systems october 
grimshaw nguyen wulf 
campus wide computing results legion university virginia 
technical report cs university virginia march 
james gwertzman margo seltzer 
world wide web cache consistency 
proceedings usenix technical conference pages january 
norm hutchinson larry peterson 
architecture implementing network protocols 
ieee transactions software engineering january 
ibm 
economic value rapid response time pages 
number ge 
white plains 
frans kaashoek dawson engler gregory ganger russell hunt david thomas robert grimm john jannotti kenneth mackenzie 
application performance flexibility exokernel systems 
proceedings th acm symposium operating systems principles october 
eric dean katz michelle butler robert mcgrath 
scalable server ncsa prototype 
international conference world wide web april 
kroeger long mogul 
exploring bounds web latency reduction caching prefetching 
proceedings usenix symposium internet technologies systems december 
leach 
query routing applying systems thinking internet search 
proceedings sixth workshop hot topics operating systems pages cape code ma 
liu cao 
maintaining strong cache consistency world wide web 
proceedings eighteenth international conference distributed computing systems may 
manley seltzer 
web facts fantasy 
proceedings usenix symposium internet technologies systems 
mockapetris dunlap :10.1.1.156.7859
development domain name system 
proceedings sigcomm april 
jeffrey mogul fred douglis anja feldmann balachander krishnamurthy :10.1.1.31.5701
potential benefits delta encoding data compression 
proceedings acm sigcomm pages august 
clifford neuman 
prospero tool organizing internet resources 
electronic networking research applications policy pages spring 
ordille barton miller 
distributed active catalogs meta data caching descriptive name services 
ieee international conference distributed computing systems pages may 
john ousterhout 
cmu computer science th anniversary chapter role distributed state 
acm press 
padmanabhan mogul 
predictive prefetching improve world wide web latency 
proceedings acm sigcomm conference communications architectures protocols pages july 
david patterson garth gibson randy katz 
case redundant arrays inexpensive disks raid 
proceedings acm conference management data sigmod pages chicago il june 
srinivasan seshan mark stemm randy katz 
spand shared passive network performance discovery 
proc 
st usenix symposium internet technologies systems usits december 
douglas terry marvin theimer karin petersen alan demers mike spreitzer carl hauser :10.1.1.12.7323
managing update conflicts bayou weakly connected replicated storage system 
proceedings fifteenth acm symposium operating systems principles pages december 
tewari dahlin vin kay 
design considerations distributed caching internet 
proceedings twentieth international conference distributed computing systems may 
amin vahdat thomas anderson 
transparent result caching 
proceedings usenix technical conference new orleans louisiana june 
amin vahdat thomas anderson michael dahlin david culler paul chad yoshikawa :10.1.1.141.3942
webos operating system services wide area applications 
proceedings seventh ieee symposium high performance distributed systems chicago illinois july 
van steen hauck tanenbaum 
locating objects wide area systems 
ieee communications magazine pages january 
robert wahbe steven lucco thomas anderson susan graham :10.1.1.142.4909
efficient software fault isolation 
proceedings th acm symposium operating systems principles pages december 
dan wallach dirk balfanz drew dean edward felten 
extensible security architectures java 
proceedings th acm symposium operating systems principles pages france october 
david wetherall john guttag 
introducing new network services 
ieee network magazine special issue active programmable networks july 
yahoo 
yahoo 
yahoo com 
yin alvisi dahlin lin 
leases support server driven consistency large scale systems 
proceedings nineteenth international conference distributed computing systems may 
chad yoshikawa brent chun paul amin vahdat thomas anderson david culler 
smart clients build scalable services 
proceedings usenix technical conference january 
