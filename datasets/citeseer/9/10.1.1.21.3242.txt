searching metric spaces edgar ch avez de ciencias matem universidad 
gonzalo navarro ricardo baeza yates 
de ciencias de la computaci universidad de chile 
jos luis centro de en matem 
problem searching elements set close query element similarity criterion vast number applications branches computer science pattern recognition textual multimedia information retrieval 
interested general case similarity criterion defines metric space restricted case vector space 
large number solutions proposed different areas cases cross knowledge 
ideas reinvented times different presentations approaches 
basic results explain intrinsic difficulty search problem 
includes quantitative definition elusive concept intrinsic dimensionality 
unified view known proposals organize metric spaces able understand common framework 
approaches turn variations different concepts 
organize works taxonomy allows devise new algorithms combinations concepts noticed lack communication different communities 
experiments validating results comparing existing approaches 
finish recommendations practitioners open questions development 
categories subject descriptors analysis algorithms problem complexity algorithms problems computations discrete structures geometrical project partially supported vii project authors author second third authors 
address edgar ch avez de ciencias matem universidad mich 
zeus ccu umich mx 
gonzalo navarro ricardo baeza yates 
de ciencias de la computaci universidad de chile blanco santiago chile 
dcc uchile cl jos luis centro de en matem de gto 

fractal mx 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
delta ch avez problems computations sorting searching database management physical design access methods information storage retrieval content analysis indexing indexing methods information storage retrieval information storage file organization information storage retrieval information search retrieval clustering search process pattern recognition models geometric pattern recognition clustering general terms algorithms additional key words phrases vector spaces nearest neighbors similarity searching curse dimensionality 
searching fundamental problem computer science virtually computer application 
simple applications pose simple search problems complex application require general sophisticated form searching 
search operation traditionally applied structured data numerical alphabetical information searched exactly 
search query number string exactly equal search query retrieved 
traditional databases built concept exact searching database divided records record having fully comparable key 
queries database return records keys match search key 
sophisticated searches range queries numerical keys prefix searching alphabetical keys rely concept keys equal total linear order keys 
years databases included ability store new data types images search done predetermined number keys numerical alphabetical types 
evolution information communication technologies unstructured repositories information emerged 
new data types free text images audio video queried possible anymore structure information keys records 
structuring difficult manually computationally restricts types queries posed 
classical structuring possible new applications data mining require access database field marked keys 
new models searching unstructured repositories needed 
scenarios require general search algorithms models classically simple data 
unifying concept similarity searching proximity searching searching database elements similar close query element similarity modeled distance function satisfies triangular inequality set objects called metric space 
problem appeared diverse areas solutions term approximate searching misleading referring approximation algorithms 
searching metric spaces delta appeared unrelated fields statistics computational geometry artificial intelligence databases computational biology pattern recognition data mining name 
current solutions come diverse fields surprising solutions reinvented times obvious combinations solutions noticed thorough comparisons done 
importantly attempts conceptually unify solutions 
applications metric space turns particular type called vector space elements consist real valued coordinates 
lot done vector spaces exploiting geometric properties normally extended general metric spaces available information distance objects 
general case distance normally quite expensive compute general goal reduce number distance evaluations 
contrast operations vector spaces tend simple goal mainly reduce important advances done general metric spaces general concept building index data structure reduce number distance evaluations query time 
ciaccia prabhakar tries achieve time goals reducing number distance evaluations amount performed :10.1.1.145.5268
main goal unifying framework describe analyze existing solutions problem 
show existing indexing algorithms proximity searching consist building set equivalence classes discarding classes searching exhaustively rest 
main techniques equivalence relations pivoting voronoi partitions shown encompass existing methods 
consequence analysis able build taxonomy existing algorithms proximity search classify essential features analyze efficiency 
able identify essentially similar approaches point combinations ideas previously noticed identify main open problems area 
quantitative methods assert intrinsic difficulty searching metric space provide lower bounds search problem 
includes quantitative definition conceptual notion intrinsic dimensionality show appropriate 
experimental results help validate assertions 
concerned essential features search algorithms general metric spaces 
try extract basic features wealth existing solutions able categorize analyze common framework 
focus mainly number distance evaluations needed execute range queries fixed tolerance radius basic ones 
pay attention total cpu time time space cost build indexes nearest neighbor queries dynamic capabilities indexes considerations 
features definitely cover order keep scope reasonably bounded complex similarity queries involving similarity predicate ciaccia works exist elaboration simple similarity queries particular case polygon searching vector spaces delta ch avez 
sub queries searching small element inside larger element solutions basically domain dependent transformation done inverse queries find elements closest neighbor total queries find closest neighbors algorithms built simple ones 
organized follows 
part sections pure survey state art searching metric spaces attempt provide new way think problem 
second part sections presents basic results difficulty search problem unifying model allows understanding essential features problem existing solutions 
section gives points research directions 

motivating applications sample applications concept proximity searching appears 
formal model try explain connections different applications 
delay discussion section 
query content structured databases general query posed database presents piece record information needs retrieve entire record 
classical approach piece fixed key 
allowed search incomplete erroneous key 
hand general approach required nowadays concept searching key generalized searching arbitrary subset record allowing errors 
possible types searches point key search key information range search fields range values specified proximity search addition records close query considered interesting 
types search data mining interesting parts record predetermined information precise looking range values search key may errors misspelled word general solution problem range queries record field grid file nievergelt hinterberger 
domain database seen hyper rectangle dimensions record field dimension ordering domain field numerical alphabetical 
record database considered point inside hyperrectangle 
query specifies sub rectangle range dimension points inside specified query retrieved 
address problem searching non traditional data types allowing errors recovered range query 
converts original search problem problem obtaining space points close query point 
grid files essentially disk organization technique efficiently retrieve range queries secondary memory 
searching metric spaces delta query content multimedia objects new data types images fingerprints audio video called multimedia data types meaningfully queried classical sense 
ordered compared equality 
application interested searching audio segment exactly equal 
probability different images pixel wise equal negligible digital copies source 
multimedia applications queries ask objects similar 
example applications face recognition fingerprint matching voice recognition general multimedia databases apers ichikawa 
think example repository images 
interesting queries type find image lion background 
repository tagged tag contains full description inside image example query solved classical scheme 
unfortunately classification done automatically available image processing technology 
object recognition real world scenes immature state perform complex tasks 
predict possible queries posed tag image possible query 
alternative automatic classification consists considering query example image system searches images similar query 
built inside complex feedback system user approves rejects images new query submitted approved images 
possible query just part image system retrieve image 
approaches definition similarity function objects 
functions provided expert pose assumptions type queries answered 
cases distance obtained set features extracted object image useful feature average color 
object represented features point dimensional space case range queries vector spaces 
growing community scientists deeply involved development similarity measures cascia bhanu 
text retrieval considered multimedia data type unstructured text retrieval poses similar problems multimedia retrieval 
textual documents general structured easily provide desired information 
text documents may searched strings cases searched semantic concepts interest 
instance ideal scenario allow searching text dictionary concept free obligation retrieving word 
search problem properly stated classical tools 
large community researchers working problem long time ago salton mcgill frakes baeza yates baeza yates ribeiro neto :10.1.1.27.7690
number measures similarity emerged 
problem delta ch avez basically solved retrieving documents similar query 
user document query system finds similar documents 
similarity approaches mapping document vector real values dimension vocabulary word relevance word document computed formula coordinate document dimension 
similarity functions defined space 
notice dimensionality space high thousands dimensions 
problem related text retrieval spelling 
huge text databases low quality control emerging web typing spelling ocr optical character recognition errors commonplace text query documents contain misspelled word longer retrievable correctly written query 
models similarity words exist variants edit distance sankoff kruskal capture kind errors 
case give word want retrieve words close 
related application spelling checkers look close variants misspelled word 
particular ocr done low level classifier misspelled words corrected edit distance find promising alternatives replace incorrect words 
computational biology adn protein sequences basic object study molecular biology 
modeled texts problem finding sequence characters inside longer sequence 
exact match occur computational biologists interested finding parts longer sequence similar short sequence 
fact search exact due minor differences genetic streams describe beings closely related species 
measure similarity related probability mutations reversals pieces sequences rearrangements waterman sankoff kruskal 
related problems build phylogenetic trees tree sketching evolutionary path species search patterns properties known 
pattern recognition function approximation simplified definition pattern recognition construction function approximator 
formulation problem finite sample data data sample labeled belonging certain class 
fresh data sample provided system required label new sample known data labels 
words classifier thought function defined object data space set labels 
sense classifiers considered function approximators 
objects dimensional vectors real numbers natural choice neural nets fuzzy function approximators 
popular universal function approximator nearest neighbor classifier consists finding objects nearest unlabeled sample assigning sample label having majority nearest objects 
opposed neural nets fuzzy classifiers searching metric spaces delta nearest neighbor rule zero training time indexing algorithm linear complexity duda hart 
applications universal function approximator density estimation devroye reinforcement learning sutton barto 
general problem want infer function finite set samples potential application 
audio video compression audio video transmission narrow band channel important problem example internet audio video conferencing wireless communication 
frame static picture video fragment audio thought formed number possibly overlapped theta subimages video example 
succinct description problem solved sending frame frames sending having significative difference previously sent 
description encompasses mpeg standard 
algorithms fact buffer 
time frame sent searched tolerance buffer entire added buffer 
index similar frame sent 
implies naturally fast similarity search algorithm incorporated server maintain minimum frames second rate 

basic concepts applications previous section share common framework essence find close objects suitable similarity function finite set elements 
section formal model comprising cases 
metric spaces introduce basic notation problem satisfying proximity queries model group analyze existing algorithms 
set denote universe valid objects 
finite subset size juj set objects search 
called dictionary database simply set objects elements 
function theta gamma 
denote measure distance objects smaller distance closer similar objects 
distance functions properties symmetry reflexivity cases strict 
delta ch avez similarity properties enumerated ensure consistent definition function save comparisons proximity query 
metric satisfies triangular inequality pair called metric space 
distance satisfy strict property space called pseudo metric space 
simplicity consider pseudometric spaces techniques easily adapted simply identifying objects distance zero single object 
works holds easily prove 
cases may quasi metric symmetry property hold 
instance objects corners city distance corresponds car travel move existence way streets distance asymmetric 
exist techniques derive new symmetric distance function asymmetric 
able bound search radius query symmetric function need specific knowledge domain 
relax triangular inequality ffd fid ffi scaling search space algorithms designed metric spaces 
distance symmetric need ff fi consistency 
rest term distance understanding refer metric 
proximity queries basically types queries interest metric spaces range query retrieve elements distance fu rg 
nearest neighbor query nn 
retrieve closest elements fu cases satisfied element continuous spaces normally just answer anyway 
give maximum distance closest element distance want reported 
nearest neighbor query nn 
retrieve closest elements retrieve set jaj gamma 
note case ties satisfied set elements satisfying condition 
basic type query range query 
left part illustrates query set points running example metric space clarity 
range query pair element xand real number indicating radius tolerance query 
set fu rg called outcome range query 
nn abbreviation nearest neighbor give generic name nn query types queries nn searching techniques searching metric spaces delta solve 
see nn queries systematically built range queries 
total time evaluate query split distance evaluations theta complexity extra cpu time time minimize applications evaluating costly components cost neglected 
model number distance evaluations performed measure complexity algorithms 
allow linear reasonable amount cpu linear traversal database disk long number distance computations kept low 
pay marginal attention called extra cpu time 
time dominant factor applications negligible depending amount main memory available relative cost compute distance function 
cover little existing relating metric spaces considerations section 
clear type query answered examining entire dictionary fact allowed preprocess data build index data structure exhaustive examination way proceed 
indexing algorithm line procedure build data structure called index designed save distance computations answering proximity queries 
data structure expensive build amortized saving distance evaluations queries database 
aim design efficient indexing algorithms reduce number distance evaluations 
structures basis discarding elements triangular inequality property allows saving distance evaluations 

case vector spaces elements metric space tuples real numbers tuples field pair called finite dimensional vector space vector space short 
dimensional vector space particular metric space objects identified real valued coordinates 
number options distance function widely family distances defined jx gamma right part illustrates distances 
instance distance accounts sum differences coordinates 
called block manhattan distance dimensions corresponds distance walk points city rectangular blocks 
distance better known euclidean distance corresponds notion spatial distance 
member family corresponds limit formula goes infinity 
result distance points maximum difference delta ch avez coordinate max jx gamma searching distance corresponds directly classical range search query range dimensional hyper rectangle 
distance plays special role survey 
fig 

left example range query set points 
right set points distance center point different ls distances 
applications metric space vector space objects dimensional points similarity interpreted geometrically 
vector space permits freedom general metric space designing search approaches possible geometric coordinate information unavailable general metric space 
framework optimal algorithms database size exist average worst case bentley closest point search 
search structures vector spaces called spatial access methods sam 
popular kd trees bentley bentley trees guttman quad trees samet trees berchtold :10.1.1.102.7240
techniques extensive coordinate information group classify points space 
example kd trees divide space different coordinates trees groups points hyper rectangles 
unfortunately existing techniques sensitive vector space dimension 
closest point range search algorithms exponential dependency dimension space chazelle called curse dimensionality 
vector spaces may suffer large differences representational dimension intrinsic dimension real number dimensions points embedded keeping distances 
example plane embedded dimensional space intrinsic dimension representational dimension 
general case real applications searching metric spaces delta data clustered lead attempts measure intrinsic dimension concept fractal dimension faloutsos kamel 
despite techniques cope intrinsic dimension higher higher representational dimensions handled dimensionality reduction techniques faloutsos lin cox cox hair 
efficient techniques cope vector spaces exist application designers try give problems vector space structure 
easy feasible 
example experts image processing try express similarity images distance vectors features extracted images cases better results obtained coding specific functions compare images despite easily expressed distance vectors cross talk features faloutsos :10.1.1.40.9013
example resists conversion vector space similarity functions strings compare dna sequences instance 
reason authors resort general metric spaces knowing search problem difficult 
course possible treat vector space general metric space distances points 
immediate advantage intrinsic dimension space shows independent representational dimension requires extra care vector spaces 
interesting ciaccia preliminary results showing metric space data structure tree outperform known vector space data structure tree applied vector space :10.1.1.145.5268
specific techniques vector spaces different world intend cover see samet white jain gaede gunther surveys 
discuss section technique treating vector space metric space tries embed general metric space vector space 
concept central survey despite specific knowledge specific techniques vector spaces shortly show necessary understand 
resorting vector spaces interesting natural reduction similarity search problem consists mapping phi original metric space vector space 
way element original metric space represented point target vector space 
spaces related distances original distance projected space phi phi 
mapping contractive phi phi pair elements process range queries projected space radius 
spurious elements captured target space outcome query projected space candidate list verified element wise original distance obtain actual outcome query 
intuitively idea invent coordinates map points vector space vector space technique filter actual answer query 
main thesis large subclass existing algorithms regarded relying mapping kind 
widely method explained detail section select fp map delta ch avez phi 
seen mapping contractive proximity preserving 
hand mapping proximity preserving phi phi phi phi nn queries directly performed projected space 
current algorithms nn queries range queries care done projected space mapping contractive proximity preserving 
type mapping special case general idea literature says find cheaper compute distances lower bound real cheaper distance filter elements images average color cheaper compute differences color histograms 
general domain dependent mapping vector space done knowledge domain 
mapping done identified data element point projected space general purpose spatial access method sam vector spaces retrieve candidate list 
elements projected space checked original distance function 
types distance evaluations obtain coordinates projected space check final candidates 
called internal external evaluations respectively 
clearly incrementing internal evaluations improves quality filter reduces external evaluations seek balance 
notice search projected space evaluations original distance costless complexity measure 
kd trees trees data structure aims reducing extra cpu time difference number evaluations distance 
metric space techniques perform comparison vector space methods 
difficult give formal answer different cost models involved 
metric spaces number distance evaluations basic measure complexity vector space techniques may coordinate manipulations single evaluation distance 
model cost method maps vector space trim candidate list measured number distance evaluations realize mapping plus final distances filter trimmed candidate list artificial coordinates seen just extra cpu time 
central question related reduction metric space embedded vector space 
coordinates considered original metric space target vector spaces similar candidate list vector space larger actual outcome query original space 
difficult question lies return section 
issue better developed vector spaces 
different techniques reduce dimensionality set points preserving original distances possible cox cox hair faloutsos lin find intrinsic dimension data 
searching metric spaces delta 
current solutions metric spaces section explain existing indexes structure metric spaces range nn searching 
developed concepts unifying perspective description kept intuitive level attempt analyze ideas better worse 
add final subsection devoted advanced issues dynamic capabilities considerations approximate probabilistic algorithms 
range searching divide presentation parts 
deals tree indexes discrete distance functions functions deliver small set values 
second part corresponds tree indexes continuous distance functions set alternatives infinite large 
third consider methods tree 
table summarizes complexities different structures 
obtained source papers different incompatible assumptions cases give just gross analyses analysis just heuristic considerations give complexities claimed authors proven fact 
best results analytical rely diverse simplifying assumptions 
worst results incomplete experiments 
keep mind hidden factors depending cases exponentially dimension space query complexity average worst case forced compare elements 
simple case orthogonal range searching vector spaces exist omega gamma ff lower bounds worst case 
trees discrete distance functions 
start describing tree data structures apply distance functions return small set different values 
show cope general case trees 
bkt 
probably general solution search metric spaces burkhard keller 
propose tree called burkhard keller tree bkt suitable discrete valued distance functions 
defined follows arbitrary element uis selected root tree 
distance define fu ig set elements distance root nonempty build child labeled recursively build bkt process repeated element process elements store bucket size 
elements selected roots subtrees called pivots 
query distance root enter children gamma proceed recursively 
arrive leaf bucket size compare sequentially elements 
time perform comparison pivots bucket elements report element triangular inequality ensures answer 
subtrees traversed contain elements distance node delta ch avez data space construction claimed query extra cpu structure complexity complexity complexity query time bkt ptrs log ff log ptrs log ff nh ptrs nh log ff fqa bits nh log ff log vpt ptrs log log mvpt ptrs log log ptrs gammaff gammaff log bst ptrs log analyzed ght ptrs log analyzed gnat nm nm log analyzed vt ptrs log analyzed mt ptrs log analyzed sat ptrs log log log gamma theta log log kn kn log kn log 
valid searching small radii 
empirical analysis case large table 
average complexities existing approaches source papers 
time complexity considers parameters dimension 
space complexity mentions expensive storage units ptrs short pointers distances 
ff number different structure letters parameters particular structure 
jd gamma ij triangular inequality gamma shows example element selected root 
built level bkt simplicity 
query shown emphasized branches tree traversed 
examples section discretize distances example return integer values 
results table extrapolated fixed queries trees baeza yates easily adapted case :10.1.1.45.384
difference space overhead exactly element set tree node 

development fixed queries tree baeza yates :10.1.1.45.384
tree basically bkt pivots stored nodes level course necessarily belong set stored subtree 
actual elements stored leaves 
advantage construction comparisons query nodes saved backtracking occurs tree 
visit nodes level need perform comparison pivots level 
expense somewhat taller trees 
shown experimentally baeza yates searching metric spaces delta fig :10.1.1.45.384

left division space obtained taken pivot 
right level bkt root 
show query branches traverse 
discretized distances return integer values 
perform distance evaluations query time couple different metric space examples 
simplifying assumptions experimentally validated show built elements log height average built log distance evaluations average number distance computations ff ff number depends range search structure space analysis easy extend 
space complexity superlinear true different element placed node tree 
upper bound log average height log 

baeza yates baeza yates authors propose variant called fixed height short leaves depth regardless bucket size :10.1.1.45.384
leaves deeper necessary sense may performed comparison query pivot intermediate level eliminating free need consider leaf 
baeza yates baeza yates navarro shown log pivots search takes log distance evaluations cost depends exponentially search radius 
extra cpu time number nodes traversed remains ff 
space nh 
practice optimal log achieved space limitations 
fqa 
ch avez fixed queries array fqa 
fqa properly tree compact representation 
imagine fixed height built set 
traverse leaves tree left right put elements array result fqa 
element array compute numbers representing branches take tree reach element root distances pivots 
numbers coded bits concatenated single long number higher levels tree significant digits 
result fqa sorted resulting hb bits number subtree corresponds interval fqa movement delta ch avez simulated binary searches fqa log extra cpu cost factor extra distances computed 
similarity idea suffix trees versus suffix arrays frakes baeza yates 
idea fewer bits represent distances appeared context vector spaces blott weber 
memory fqa simulation able pivots original improves efficiency 
bits needed pivot lowered merging branches trying number elements lies cell level 
allows pivots space usage 
reasons clear fqa called 
shows arbitrary bkt fqa built set points 
notice bkt different pivot node different pivot level nodes level 
bkt fqa fig 

example bkt fqa set points 
bkt fqa 
hybrid 
shapiro element node tree proposed 
elements allow eliminating elements level cost doing distance evaluations 
effect obtained mixture levels fixed keys level allowed different key node level continuing process recursively subtree level 
authors conjecture pivots selected outside clusters 
adapting continuous functions 
continuous distance gives different values possible child root value 
tree degenerate flat tree height search algorithm sequential searching bkt searching metric spaces delta 
degenerate sense loose sublinear extra cpu time 
baeza yates authors mention structures adapted continuous distance assigning range distances branch tree :10.1.1.45.384
specify 
approaches explicitly defined continuous functions explained assign ranges trying leave number elements class 
trees continuous distance functions 
data structures designed continuous case 
discrete distance functions virtually modifications 
vpt 
metric tree uhlmann tree data structure designed continuous distance functions 
complete idea yianilos chiueh calls vantage point trees 
build binary tree recursively element root median set distances ug 
elements inserted left subtree inserted right subtree 
vpt takes space built log worst case time balanced 
solve query tree measure 
gamma enter left subtree enter right subtree notice enter subtrees 
report element considered close query 
see 
vpt fig 

example vpt root plot radius root 
levels show explicitly radii tree 
query complexity argued log yianilos point true small search radii small interesting case 
trees discrete distance functions exact distance element leaves pivot path root inferred 
know distance larger smaller discrete case possible arrive element leaf need compare tree information discover 
delta ch avez exact distances lost stored explicitly proposed yianilos prune elements checking 
author yianilos considers problem pivot selection argues better take elements far away set 
mvpt 
vpt extended ary trees gamma uniform percentiles just median 
suggested brin ozsoyoglu 
ozsoyoglu multi vantage point tree mvpt 
propose elements single node shapiro 
seen space internal node needs store percentiles leaves 
construction time log search percentiles hierarchically log mn cost 
authors ozsoyoglu show experimentally idea ary trees slightly improves cases larger improvement obtained pivots node 
analysis query time extrapolated straightforward way 

generalization vpt shorthand excluded middle vantage point forest yianilos 
algorithm designed radii limited nn search nn query maximum radius fact technique perfectly compatible range search query 
method consists excluding level elements intermediate distances pivot populated part set stand closest farthest elements pivot elements ffi gamma ffi excluded tree 
second tree built excluded middle part tree obtain forest 
idea eliminate backtracking searching radius gamma gamma ffi return search trees forest 
size built gammaae time answers queries gammaae log distance evaluations ae depends unfortunately achieve ae quite small 
bst 
mcdonald bisector trees bsts proposed 
bst binary tree built recursively follows 
node centers selected 
elements closer go left subtree closer right subtree 
centers covering radius stored maximum distance element element subtree 
search time enter subtree gamma larger covering radius discard branch query ball hypersphere radius centered query intersect ball contains elements inside branch 
monotonous bst proposed elements node parent center 
covering radii decrease move downward tree 
illustrates step tree construction 
ght 
proposed uhlmann generalized hyperplane tree ght identical construction bst 
algorithm uses searching metric spaces delta fig 

example level bst ght query covering radii bst hyperplanes ght subtrees considered example 
hyperplane pruning criterion search time covering radius 
search time enter left subtree gamma right subtree gamma possible enter subtrees 
uhlmann argued better high dimensions 
idea reusing parent node proposed bugnion time avoid performing distance evaluations node 
gnat 
ght extended brin ary tree called gnat geometric near neighbor access tree keeping essential idea 
select level centers define fu ig 
elements closer root children numbered built recursively gnat shows simple example level gnat 
notice relationship idea voronoi partition vector space aurenhammer 
fig 

example level gnat 
delta ch avez search algorithm quite different 
indexing time gnat stores node size table range ij min max stores minimum maximum distances center class 
search time query compared center discards center sigma intersect range subtree discarded triangle inequality 
process repeated random centers discarded 
search enters recursively non discarded subtree 
process center close reported 
authors gross analysis show tree takes nm space built close nm log time 
experimental results show ght worse vpt beaten arities 
mention arities subtrees depend depth tree give clear criteria 
vt voronoi tree vt proposed dehne improvement bsts time tree elements children node 
new tree node created hold inserted element closest element parent node inserted new node 
vts property covering radius reduced move downwards tree provides better packing elements subtrees 
shown dehne vts superior better balanced bsts 
show balanced vts obtained insertion procedures similar trees fact exploited trees see 
mt tree mt data structure ciaccia aiming providing dynamic capabilities performance addition distance computations :10.1.1.145.5268
structure gnat tree set representatives chosen node elements closer representative organized subtree rooted representative 
search algorithm closer bsts 
representative stores covering radius 
query time query compared representatives node search algorithm enters recursively discarded covering radius criterion 
main difference mt way insertions handled 
element inserted best subtree defined causing subtree covering radius expand zero expansion ideal case ties selecting closest representative 
element added leaf node node overflows size split node element promoted upwards tree tree guttman 
mt balanced data structure vp family 
criteria select representative split node best results obtained trying split minimizes maximum covering radii obtained 
show experimentally mt resistant dimensionality space competitive trees 
variants reported effective 
searching metric spaces delta sat 
algorithm sat spatial approximation tree navarro centers split set candidate objects relies spatial approximation 
element selected root tree connected set neighbors defined subset elements closer element note definition self referential 
elements fpg assigned closest element element recursively root new subtree containing elements assigned 
allows searching elements radius zero simply moving root neighbor connected element closest query radius allowed consider unknown element uis searched tolerance zero know search consider distance measure may error 
may enter branches tree closest measuring error different neighbor closest 
closest neighbor enter gamma tree built log log log time takes space inspects gamma theta loglog elements query time 
covering radii increase pruning 
shows example search path query 
fig 

example sat traversal query starting techniques 
algorithm close ideas performs surprisingly better order magnitude vidal called approximating eliminating search algorithm 
structure simply matrix gamma precomputed distances elements search time select element random measure eliminating elements satisfy gamma notice distances precomputed calculated search time 
process random pivot eliminated elements eliminating elements repeated delta ch avez elements remain set 
compared directly 
shows example pivot fig 

example iteration 
points rings centered qualify iteration 
idea similar key differences 
noticeable continuous spaces predefined rings intersected rings qualify recall 
minimal necessary area rings qualifies 
second difference second element compare selected qualifying set set 
algorithm determines fly take pivots precompute decision bucket size 
problem algorithm vidal needs space construction time 
unacceptably high small databases 
sense approach close sasha wang case may take fewer distances bound unknown ones 
experimentally shown query time 
variants 
newer version called linear mic propose fixed pivots space construction time kn 
case difference fixed rings exact set elements range retrieved 
uses fixed rings reduce extra cpu time case algorithm 
elements simply linearly traversed eliminated considering pivots directly compared query 
way reduce extra cpu time mic builds ght structure pivots 
algorithm argued sublinear cpu time 
alternative search structures reduce cpu time loosing information distances nene nayar ch avez distances pivot sorted separately relevant range gamma binary searched extra pointers nene nayar consider vector spaces technique searching metric spaces delta added able trace element different orderings pivot needs space :10.1.1.161.139
clustering approaches 
clustering wide area lots applications jain dubes 
general goal divide set subsets elements close subset 
approaches index metric spaces clustering exist 
technique proposed burkhard keller recursively divide set uin compact subsets choose representative 
compute covering radii search closest neighbor query compared sets considered smallest largest distance 
determine interesting elements sets propose complex clique criterion select sets representatives 
experimental results show method slightly worse bkt algorithm find cliques slow 
propose elements clique turn subdivided clusters formulation similar complete mts 
nearest neighbor queries concentrated range search queries 
show section existing solutions nn queries built systematically range searching techniques adapted data structures despite having originally designed specific ones 
increasing radius 
simplest nn search algorithm range searching algorithm follows 
search fixed radii starting increasing desired number elements lies inside search radius 
radius refined gamma exact number elements included 
complexity range searching normally grows sharply search radius cost method close cost range searching appropriate known advance 
increasing steps smaller avoid searching radius larger necessary 
backtracking decreasing radius 
elaborated technique follows 
explain search closest neighbor 
start search data structure 
time compared element update search radius min continue search reduced radius 
example proposed burkhard keller baeza yates :10.1.1.45.384
closer closer elements search smaller radius search cheaper 
reason important try find quickly elements close query unimportant range queries 
way achieve dependent particular data structure 
example 
delta ch avez root measure 
consider edges labeled gamma gamma proceed recursively children heuristics may better 
exploration ends just considering branch reduced process 
distance closest neighbors seen 
nn queries solved extension technique keep elements seen closest set maximum distance elements clearly interested elements farther away current th closest element 
time new element seen distance relevant inserted nearest neighbors known possibly displacing old candidates list updated 
start keep value elements 
variant type queries limited radius nn searching 
start maximum expected distance query element nearest neighbor 
type queries focus yianilos yianilos 
priority backtracking 
previous technique improved smarter selection elements consider 
clarity consider backtracking tree idea general 
normal backtracking order range query modifying order subtrees traversed give freedom traversal order 
goal increase probability quickly finding elements close reduce fast 
technique vector metric spaces times uhlmann roussopoulos ciaccia :10.1.1.145.5268
point search set possible subtrees traversed necessarily level 
select heuristic traverse subtrees root closest 
subtree selected compare root update candidates output necessary determine children considered root deserve traversal 
normal backtracking children immediately traversed added set subtrees traversed moment 
select subtree set optimization heuristic 
best way implement search priority queue ordered heuristic goodness subtrees inserted removed 
start empty queue insert root tree 
repeat step removing promising subtree processing inserting relevant subtrees queue gets empty 
applied bkt method yields result previous section technique superior deal continuous distances 
specific nn algorithms 
techniques described cover existing proposals solving nn queries 
exception aware clarkson gnat data structure points inserted subtree limit backtracking space requirement superlinear 
selecting representatives root tree element inserted subtree closest representative tree searching metric spaces delta representative 
search time query enters nearest representative representative 
shown clarkson guarantee nearest neighbor reached 
subsets size depth tree search time polylogarithmic space requirement polylog conditions hold metric space 
extensions cover section pursued extensions basic problems alternative models 
main focus survey 
dynamic capabilities 
data structures metric spaces designed built static data set 
applications reasonable elements inserted deleted dynamically 
data structures tolerate insertions deletions 
consider insertions 
structures surveyed dynamic sat needs full knowledge complete set index construction time difficulty handling insertions workarounds described navarro 
vp family vpt mvpt problem relying global statistics median build tree insertions performed performance structure may deteriorate 
fqa needs principle insertion middle array handled standard techniques 
data structures handle insertions reasonable way 
structure parameters may depend require periodical structural reorganization disregard issue adding removing pivots generally problematic 
deletion little complicated 
addition structures problems insertion bsts vts vp family tolerate deletion internal tree node plays essential role organizing subtree 
course handled just marking node removed keeping routing purposes quality data structure affected time 
structures fully support insertions deletions fq family fqa truly internal nodes approaches just vectors coordinates mt designed dynamic capabilities mind insertion deletion algorithms remind tree variant designed support dynamic operations 
analysis structure shows dynamic insertions done log amortized worst case time deletions done similar cost restrictions 
considerations 
research metric spaces deals reducing number distance evaluations total cpu time 
depending application cost may play important role 
research metric spaces focused algorithms discard elements considerations normally left aside 
exception rule mt designed specifically secondary memory 
delta ch avez tree nodes mt stored single disk page mt fix arity node capacity bytes 
earlier balanced trees exist vp family purpose balancing keep low extra cpu costs 
show unbalanced data structures perform better high dimensions reduced cpu costs may play important role 
purpose balancing mt hand keep costs low depending application may important number distance evaluations 
data structures probably adapted perform secondary memory authors simply considered problem 
instance hard imagine strategies tree data structures pack compact subtrees disk pages possible page read disk 
subtree grows larger page split pages approximately number nodes 
course tree scheme mt superior respect 
array oriented approaches fqa read disk pages index query having bad performance 
approximate probabilistic algorithms 
sake complete overview include brief description important branch similarity searching relaxation query precision allowed obtain speedup query time complexity 
reasonable applications metric space involves approximation true answer recall section second approximation search time may acceptable 
additionally query specifies precision parameter control far away sense want outcome query correct result 
reasonable behavior type algorithms asymptotically approach correct answer goes zero speed algorithm loosing precision moves opposite direction 
alternative exact similarity searching called approximate similarity searching encompasses approximate probabilistic algorithms 
cover depth examples 
approximation algorithms similarity searching considered depth white jain 
example mention approximate algorithm nn search real vector spaces metric arya 
propose data structure bbd tree inspired kd trees find nearest neighbors finding find element nearest neighbor differing factor essential idea algorithm locate query cell leaf tree associated cell decomposition 
point inside cell processed obtain current nearest neighbor 
search stops promising cells encountered radius ball centered intersecting nonempty cell exceeds radius 
query time log 
second example probabilistic algorithm vector spaces yianilos 
data structure standard kd tree aggressive pruning improve searching metric spaces delta performance 
idea increase number branches pruned expense losing candidate points process 
done controlled way probability success known 
spite vector space focus algorithm generalized metric spaces 
data structure useful finding limited radius nearest neighbors neighbors fixed distance query 
example probabilistic nn algorithm general metric spaces clarkson 
original intention build voronoi data structure metric space 
possible general knowledge characteristics queries come navarro author clarkson chooses training set queries build data structure able answer correctly queries belonging training set 
idea answer correctly arbitrary query high probability 
probabilistic assumptions distribution queries shown probability finding nearest neighbor log arbitrarily large expense space kae log expected search time 
ae logarithm ratio farthest nearest pairs points union training set 

unifying model sight indexes search algorithms emerge great diversity different approaches analyzed separately different assumptions 
currently realistic way compare different algorithms apply data set 
section formal unifying model 
intention provide common framework analyze existing approaches proximity searching 
result able capture similarities apparently different approaches 
obtain truly new ways viewing problem 
section summarized 
indexing algorithms partition set subsets 
index built allows determining set candidate subsets elements relevant query appear 
query time que index searched find relevant subsets cost called internal complexity subsets checked exhaustively corresponds external complexity search 
subsections describe main approaches similarity searching terms 
equivalence relations relevance equivalence classes comes possibility partitioning metric space new metric space derived quotient set 
readers familiar equivalence relations safely skip short section 
set partition collection pairwise disjoint subsets union xand 
relation denoted subset cross product theta set ordered pairs elements said related denoted pair subset 
relation said equivalence relation delta ch avez index equivalence classes data query traverse index internal complexity search candidate classes external complexity indexing querying fig 

unified model indexing querying metric spaces 
satisfies properties reflexivity symmetry transitivity 
partition induces equivalence relation conversely equivalence relation induces partition elements related belong partition element 
element partition called equivalence class 
equivalence class named representatives element taken representative 
alternative definition equivalence class element set denote equivalence class fy yg set xand equivalence relation obtain quotient 
indicates set equivalence classes just classes obtained applying equivalence relation set indexing partitions equivalence classes quotient set metric space considered objects new metric space provided define distance function 
introduce new function theta gamma 
defined quotient 
definition 
metric space partition extension defined inf fd gives maximum possible values keep mapping contractive 
unfortunately satisfy triangle inequality just cases recall section 
suitable indexing purposes 
metric lower bounds 
metric metric space searching metric spaces delta queries way done redefine outcome query fu rg formally retrieve classes elements 
mapping contractive convert search problem hopefully simpler search problem 
query find equivalence class query belongs 
new distance function query transformed mapping contractive candidate list perform exhaustive search candidate list original distance obtain actual outcome query main thesis procedure fact virtually indexing algorithm recall 
words proposition 
existing indexing algorithms proximity searching consist building equivalence relation search time classes discarded exhaustively searched 
see shortly important tradeoff designing partition balance cost find cost verify candidate list 
see schematic example idea 
divide space regions equivalence classes 
objects inside region indistinguishable 
consider elements new metric space 
find answer exhaustively examining entire dictionary just examine classes contain potentially interesting objects 
words class contain element returned outcome query class examined see rings considered 
fig 

points equivalence classes shaded rings 
gives minimal distance rings lower bounds distance recall property arbitrary nn search algorithm mapping preserve proximity existing algorithms nn range queries recall section algorithms applied 
delta ch avez examples may help understand definitions concept equivalence relation obtained distance function 
example 
say arbitrary pivot xand equivalence relation 
case jd gamma safe lower bound distance guaranteed triangle inequality 
query form candidate list consists elements jd gammad graphically distance represents ring centered containing ball centered radius recall figures 
familiar rule independent algorithms trim space 
example 
explained similarity search problem firstly introduced vector spaces family algorithms partition operation 
algorithms called bucketing methods consist construction cells buckets bentley 
searching arbitrary point converted exhaustive search finite set cells 
procedure steps find cell query point belongs build set candidate cells query range inspect set candidate cells exhaustively find actual points inside query range case equivalence classes cells tradeoff larger cells cheaper find appropriate ones costly final exhaustive search 
coarsening refining partition start defining concept refinement coarsening 
definition 
equivalence relations set say refinement coarsening pair holds terms applied corresponding partitions 
refinement coarsening important concepts topic discussing 
lemma shows effect coarsening effectiveness partition searching purposes 
lemma 
coarsening extended distances property 
proof 
denote equivalence classes equivalence relation inf fd inf fd interesting idea arising lemma build hierarchy coarsening operations 
hierarchy proceed downwards algorithm fact little sophisticated try find nearest neighbor point 
version range queries spirit original 
searching metric spaces delta coarse level building candidate list equivalence classes level 
candidate list refined distance function reach bottom level 
discriminative power sketched previously indexing algorithms rely building equivalence relation 
corresponding search algorithms parts find classes may relevant query 
exhaustively search elements classes 
part involves performing evaluations distance shown example 
may involve extra cpu time central point kept reasonable 
second part consists directly comparing query candidate list 
definition gives name parts search cost 
definition 
search algorithm mapping range query 
internal complexity number evaluations necessary compute external complexity recall refers number elements original metric space number classes retrieved 
concept related external complexity search algorithm define 
definition 
discriminative power search algorithm mapping regard query nonempty outcome defined definition depends speak general terms discriminative power averaging interest 
discriminative power serves indicator performance fitness equivalence relation 
general costly discriminative power 
indexing scheme needs find balance complexity find relevant classes discriminative power 
consider example 
internal complexity distance evaluation distance external complexity correspond number elements lie selected ring 
intersect rings increasing internal complexity reduce external complexity 
tradeoff partially formalized lemma 
lemma 
search algorithms equivalence relations respectively coarsening higher external complexity proof 
show clear implies fy rg fy rg delta ch avez having discriminative power normally costs internal evaluations better worse internal complexity 
elaborate 
locality partition equivalence classes thought set non intersecting cells space element inside cell belongs equivalence class 
mathematical definition equivalence class confined single cell 
define locality property partition stands classes resemble cells 
formally definition 
non locality partition respect finite dictionary defined max fmax maximum distance elements lying class 
say partition local non local meaning high low locality 
shows example non local partition lie separate fragments single class 
natural expect discriminative power local partition non local 
non local partition candidate list tends contain elements far away query 
fig 

equivalence relation induced intersecting rings centered pivots query transformed 
notice locality improve sharply added third pivot 
vector space dimensions suffices consider pivots general position obtain highly local partition 
general metric spaces take sufficient number pivots obtain highly local partitions 
obtaining local partitions may expensive internal complexity achieve low external complexity bucketing method vector spaces bentley explained example excellent performance 
local partition assuming uniformly distributed lying gamma hyperplane 
searching metric spaces delta data number empty cells verified volume grows exponentially dimension 
return issue 
pivot equivalence relation large class algorithms build equivalence relations pivoting 
consists considering distances element number preselected pivots elements called points vantage points keys queries literature 
equivalence relation defined terms distances elements pivots elements equivalent distance pivots 
consider pivot equivalence relation equivalence classes correspond intuitive notion family sphere shells center points falling sphere shell distance equivalent view point equivalence relation easily generalized pivots 
definition 
pivot equivalence relation elements fp pivots defined fp graphical representation class general case corresponds intersection sphere shells centered points recall 
distance smaller jd gamma element triangular inequality 
jd gamma safe lower bound function corresponding class sphere shells centered pivots max gamma jg 
distance lower bounds distance quotient space 
alternatively consider equivalence relation projection vector space number pivots 
th coordinate element distance element th pivot 
done identify points elements original space distance 
described section indexing algorithm consist finding set equivalence classes fall inside radius search quotient space 
particular case query form find candidate list set set equivalence classes words want set objects max gamma jg equivalent search distance vector space equivalence classes projected 
illustrates concept useful 
third way see technique formal intuitive follows check element query outcome try number random pivots jd gamma triangular inequality know need evaluate 
indexing time precompute values search time delta ch avez fig 

mapping metric space vector space metric pivots 
compute values 
elements discarded looking pivots checked voronoi equivalence relation different type equivalence relation large class algorithms defined respect proximity set elements call centers distinguish pivots previous section 
definition 
voronoi equivalence relation fc centers fc closest fc closest fc closest fw associated partition called voronoi partition 
divide space partition class points closest center shows example 
particular note select set centers case partition optimal locality 
fc voronoi partitions locality 
vector spaces voronoi partition assumed uas set centers 
associated concept delaunay tesselation graph nodes elements edges connect nodes classes share border 
delaunay tesselation basis algorithms proximity searching aurenhammer yao 
example log nn algorithm exists dimensions 
unfortunately algorithm generalize efficiently dimensions 
delaunay tesselation edges dimensions edges dimensions 
general metric space distance space voronoi classes smallest distance points 
definition voronoi partition matches concept dirichlet domain elements set centers 
searching metric spaces delta fig 

voronoi partition centers query balls intersecting classes 
note class excluded consideration covering radius criterion hyperplane criterion opposite happens discard find basically need find nearest neighbor set centers 
outcome query set classes intersected query ball see 
problem general metric spaces easy bound class determine query ball intersects 
possible criteria popular hyperplane criterion 
basic best express idea voronoi partition 
essence center class center closest query ball course intersects query ball intersect gamma graphically query ball intersect hyperplane dividing closest neighbor center ball totally outside class covering radius criterion 
tries bound class considering ball centered contains elements lie class 
define definition 
covering radius cr max 
clear discard gamma cr 

curse dimensionality explained major obstacles design efficient search techniques metric spaces existence ubiquity real applications called high dimensional spaces 
traditional indexing techniques vector spaces kd trees exponential dependency representational dimension space volume box hypercube containing answers grows exponentially dimension 
indexing techniques vector spaces generic metric space get rid representational dimension space 
big delta ch avez difference applications handle vector spaces representational high dimension intrinsic low dimension plane immersed dimensional vector space simply clustered data 
cases intrinsic dimension high problem intractable exact algorithms resort approximate probabilistic algorithms section 
aim section show concept intrinsic dimensionality conceived general metric space give quantitative definition intrinsic dimensionality show analytically reason called curse dimensionality discuss effects pivot selection techniques 
partially previous ch avez navarro 
intrinsic dimensionality start known example 
consider distance distance fact equality test obtain information comparison element considered query 
clear possible avoid sequential search case matter smart indexing technique 
consider histogram distances points metric space approximated dictionary random sample histogram mentioned papers brin ch avez ciaccia fundamental measure related intrinsic dimensionality metric space 
idea space higher intrinsic dimension mean histogram grows variance oe reduced 
previous example extreme case 
gives intuitive explanation search problem harder histogram concentrated 
consider random query indexing scheme random pivots possible distances pivot distributed histogram 
elimination rule says discard point gamma 
grayed areas show points discard 
histogram concentrated mean points discarded information 
phenomenon independent nature metric space vectorial particular gives way quantify hard search arbitrary metric space 
definition 
intrinsic dimensionality metric space defined ae oe oe mean variance histogram distances 
technical convenience exact definition clear shortly 
important part intrinsic dimensionality grows mean reduces variance histogram 
particular cases distances vector spaces useful illustrations 
shown yianilos uniformly distributed dimensional vector space distance mean theta standard deviation theta gamma 
intrinsic dimensionality theta constant necessarily 
intuitive concept dimensionality vector spaces matches general concept intrinsic dimensionality 
searching metric spaces delta fig 

low dimensional left high dimensional right histogram distances showing high dimensions virtually candidates exhaustive evaluation 
larger second plot order retrieve elements 
lower bound pivoting algorithms main result section relates intrinsic dimensionality difficulty searching search radius pivoting equivalence relation chooses pivots random 
show difficulty problem related intrinsic dimensionality ae 
considering independent identically distributed random variables distribution distances points 
accurate simplification optimistic lower bound performance indexing algorithms 
come back shortly 
range query metric space indexed means random pivots element probability excluded direct verification considering pivots exactly jd gamma jd gamma pivots assumed random distance distributions random variables expression product probabilities jd gamma theta theta jd gamma reason simplified discarding jd gamma random pivot random variables mean variance oe mean gamma variance oe inequality jx gamma oe jd gamma gamma oe oe precisely variance distance distribution metric space 
argument follows valid oe oe large radii arbitrary distribution mean variance oe jz gamma oe delta ch avez lower bound zero 
discarding gamma oe total search cost number internal distance evaluations plus external evaluations number average theta discarding 
cost gamma oe lower bound average search cost pivots 
optimizing obtain best ln ln ln ln gamma oe optimal obtain absolute independent lower bound average cost random pivot algorithm cost ln ln ln ln ln ln oe ln shows cost depends strongly oe increases tends scheme requires pivots anyway costly 
nice way represent result assume interested retrieving fixed fraction elements case written gamma oe inequality 
case lower bound oe ln gamma oe oe ln ae gamma aef ln ae gamma ln valid ae 
just proved theorem 
pivot algorithm random pivots lower bound ae gamma ln average number distance evaluations performed random range query retrieving fraction set ae intrinsic dimension metric space 
result matches baeza yates baeza yates navarro obtaining theta log search time theta log pivots interested constant term depends dimension :10.1.1.21.3317
theorem shows clearly parameters governing performance range searching algorithms ae expect keeps constant ae grows possible applications query known perturbation element keep constant search radius dimension grows 
cases lower bound may grow oe shrinks dimension vector spaces 
considered random variables pivot query 
reasonable approximation expect difference view points general distribution distances individual distributions searching metric spaces delta see section 
expression eq 
obtained simplification 
stronger assumption comes considering variables independent 
optimistic consideration equivalent assuming order discard element set take new pivots random 
real algorithm fixes random pivots uses try discard elements set 
alternative suffer dependencies point happen case example close rd pivot close distance third pivot carries information 
assumption optimistic reduce joint distribution eq 
expression eq 
keeps lower bound valid 
figures show experiment search cost different number pivots dimensions 
elements generated random pivots randomly chosen set 
average random queries radius set retrieve elements set 
count number distance evaluations 
shows existence optimum shows predicted gamma theta behavior 
memory machine show predicted growth theta ln 
pivots elements 
radius captures ext ext fig 

internal external distance evaluations dimensions different number pivots shows effect different way 
dimension grows histogram moves right theta 
pivot distance projected space remains fixed increasing moves histogram slightly right 
shift effective low delta ch avez dimension elements 
radius captures pivots pivots pivots pivots pivots pivots pivots fig 

distance evaluations dimension grows fixed dimensional metric spaces high dimensions 
plots histograms measure pivoting algorithms 
intuitively overlap histogram pivot distance histogram original distance directly proportional discriminative power pivot mapping 
overlap increases algorithms effective 
particular behavior due fact maximum random variables mean theta oe jd gamma 
fact grow means lower bound gets effective higher dimensions 
lower bound voronoi algorithms try obtain lower bound search cost algorithms voronoi partition 
result surprisingly similar previous section 
lower bound considers hyperplane criterion purely associated voronoi partition 
assume just facts distribution distances previous section random variables 
range query metric space indexed means random centers fc distances considered random variables xm distribution histogram metric space 
distribution distance closest center xm hyperplane criterion specifies class excluded gamma probability happens gamma 
minimum variables distribution probability gamma random variables distributed searching metric spaces delta dimensions 
pivots maxdist dimensions 
pivots maxdist dimensions 
pivots maxdist dimensions 
pivots maxdist fig 

histograms comparing distance different dimensional euclidean spaces pivot distance maxdist obtained different numbers pivots 
top row bottom row 
left right 
histogram 
inequality noticing gamma distance mean say discarding gamma gamma oe average class elements external complexity thetap discarding 
internal cost find intersected classes deserves discussion 
hierarchical schemes exist consider real partition induced leaves trees refined ones 
see rest hierarchy mechanism reduce internal complexity finding small classes say total number final classes 
difficult determine internal complexity upper bound call knowing omega gamman 
lower bound search complexity cost gamma oe similar lower bound pivot algorithms 
optimizing yields ln ln ln gamma ln ln delta ch avez gamma oe optimal search cost lower bounded cost omega log omega oe ln shows increase cost dimensionality grows 
write gamma oe just proved theorem 
voronoi algorithm random centers lower bound ae gamma average number distance evaluations performed random range query retrieving fraction database ae intrinsic dimension space internal complexity find relevant classes satisfying omega 
result weaker theorem inability give lower bound ensure logarithmic increase respect ae 
assuming theta exhaustive search classes theorem similar theorem important reason explains voronoi algorithms practice better pivot ones 
case achieve optimal number centers impossible practice pivot algorithms 
reason economical represent voronoi partition centers pivot partition pivots 
shows experiment dataset different values hierarchical voronoi partitioning 
hyperplane covering radius criteria prune search 
seen dependency dimension space sharp pivot algorithms closer dependency form theta 
general lower bounds pivot voronoi algorithms look similar ones need space store classes resulting pivots ones number partitions 
optimal number classes 
pivot algorithms necessary memory optimal number pivots improve voronoi algorithms better difficult dimension grows 
compares types partitioning 
seen pivoting algorithm improves voronoi partitioning give pivots 
number increases dimension fraction retrieved ae 
ae large required number pivots unacceptably high terms memory requirements 
pivot center selection techniques prove formally dimension constant properly selecting random 
constant number pivots exhaustive search costs 
contrasts omega gammar lower bound 
difference take pivots random select set pivots assumed certain selectivity properties 
shows way pivots selected affect performance 
unfortunately searching metric spaces delta dimension elements 
radius captures fig 

distance evaluations hierarchical voronoi partitioning different arities 
theorem constructive show select set pivots 
little known pivot center call collectively selection policies practice methods choose random exceptions 
instance shapiro recommended select pivots outside clusters baeza yates suggest pivot cluster :10.1.1.45.384
authors agree far apart evident close give information 
hand selected random far apart high dimensional space 
histogram distances gives formal characterization 
start definition 
definition 
local histogram element distribution distances flatter histogram means discard elements query time 
measure ae oe intrinsic dimensionality defined local histogram parameter evaluate local histograms small ae 
related difference viewpoints histograms different subject discussed depth ciaccia 
idea local histogram may quite different global histogram especially selected random 
ciaccia show histograms different similar accurately predict behavior instances data structure mt completely different issue 
delta ch avez dimension elements 
radius captures pivots pivots pivots voronoi dimension elements 
radius captures pivots pivots pivots voronoi fig 

distance evaluations increasing dimension 
compare voronoi algorithm centers level filtration pivots 
top search radius captures set bottom 
searching metric spaces delta note selection harder intrinsic dimension grows 
global histogram reduces variance difficult find deviate significantly noted ciaccia 
histogram characterization explains known phenomenon discriminate elements class local partition cluster idea select pivot class 
probable select element close ideal centroid 
case distances tend smaller histogram concentrated large values 
instance mic pivots fixed order minimal distance current candidates 
hand outliers approximation order discriminate clusters unable separate elements cluster 
selecting individual flatter histogram ensure performance 
example close probably gives information 
necessary include variety independent viewpoints selection 
consider selection optimization problem goal obtain set collectively indexing purposes 
set approximates original distance 
evident case pivoting algorithms contractive distance implicitly 
practical way decide set centers effective compare histograms original distance pivot distance 
set give pivot distance histogram large intersection histogram original distance 
effect discriminative power reason explains curse dimensionality related decrease discriminative power partition odd shapes classes 
explained non local partition suffers problem unable discriminate points far away leads unnecessarily high external complexity 
solution select pivots voronoi method yields local partition 
local partition shape cell fixed indexing time shape space region defined interesting query ball dynamically determined query time 
discriminative power visualized volume query ball divided total volume classes intersected ball 
example ball inside box dimensional space 
box class obtained orthogonal pivots partition obtained quite local 
volume ball smaller ratio respect volume box discriminative power decreases exponentially means examine volume number candidate elements respect size final result grows exponentially dimension fact exponential dependency dimension data structures vector spaces kd tree tree 
phenomenon occurs general metric spaces shapes delta ch avez cells possibly fit unknown query ball 
add pivots bound better possible ball increases internal complexity difficult intrinsic dimension grows smaller variance pivots needed difference 

taxonomy search algorithms section apply unifying model organize known approaches taxonomy 
helps identify essential features existing techniques find possible combinations algorithms noticed detect promising areas optimization 
concentrate pivoting algorithms 
differ method select pivots selection information comparisons 
consider voronoi algorithms 
differ methods select centers bound equivalence classes 
summarizes classification methods attending important features explained section 
bkt arrays ght covering radius bst vt mt sat voronoi type pivot trees mvpt fixed height scope coarsened indexing algorithms gnat hyperplane fig 

taxonomy existing algorithms 
methods italics combinations appear naturally soon taxonomy built 
pivot algorithms search algorithms 
determined equivalence relation pivots preprocess dictionary storing element coordinates distance pivots 
takes kn preprocessing time space overhead 
index seen table rows columns storing 
searching metric spaces delta query time compare query pivots obtaining coordinates target space equivalence class 
cost evaluations distance function corresponds internal complexity search 
determine target space classes may relevant query ones distance metric corresponds distance 
evaluations may take extra cpu cost 
elements belonging qualifying classes discarded considering pivots directly compared external complexity 
simplest search algorithm proceeds row wise consider element set row table see triangular inequality allows discarding row max fjx gamma jg row discarded rule compare element directly equivalent traversing quotient space discard uninteresting classes 
traversal perform evaluations necessary best choice 
reasons clear discover advantages alternative approaches 
notice amount cpu kn worst case 
abandon row soon find difference larger coordinate average case closer queries reasonable selectivity 
improvement process set column wise 
compare query pivot consider column table discard elements satisfy jx gamma consider second pivot repeat process elements discarded 
algorithm implementing idea 
hard see amount evaluations total cpu remains row wise case 
better column sorted range qualifying rows binary sequentially searched nene nayar ch avez :10.1.1.161.139
possible interested column values gamma 
extra cpu cost gets closer log technique 
improvement allowed column wise evaluation done row wise 
important necessary consider coordinates recall perform evaluation obtain new query coordinate 
soon remaining set candidates small considering remaining coordinates directly verify candidates distance 
point difficult estimate despite theoretical results existing baeza yates baeza yates navarro normally understand application predict actual optimal number pivots point better switch exhaustive evaluation 
improvement column wise evaluation selection pivots done fly 
selected pivot discarded uninteresting elements second pivot may depend result potential pivot store coordinates elements set see 
select delta ch avez potential pivots precompute table choose order pivots current state search pivots compare directly 
extreme case idea elements potential pivots new pivot iteration randomly selected remaining elements 
despite practical preprocessing time space overhead distances known elements precomputed algorithm performs surprisingly low number distance evaluations better pivots fixed 
shows idea select pivots current set candidates discussed previous sections 
notice sequential search mapped space algorithm search vector spaces dimensions kd trees trees 
depending ability handle larger values able pivots significantly increasing extra cpu cost 
recall pivots search structures vector spaces perform worse 
interesting subject pursued accounts balancing distance evaluations cpu time 
coarsening equivalence relation 
alternative considering pivots remaining set candidates small example coarsening equivalence relation 
consider pivot merging classes differ coordinate 
case prefer pivot equivalence relation computing precision worse checking ways equivalence relation cover 
cases done sake reducing number distance evaluations improve space usage precomputation time kn prohibitively expensive applications 
reason coarsening obtain search algorithms sublinear extra cpu time 
consider section range coarsening bucket coarsening scope coarsening 
ideas roughly illustrated 
un ui pj bucket coarsening range coarsening cell values restricted domain original coordinates computed pivots local scope scope coarsening fig 

different methods 
searching metric spaces delta clear types reduce discriminative power resulting equivalence classes making necessary exhaustively consider elements versions relations 
example previous section amortized lower cost obtain coarsened equivalence relation 
reduce effectiveness algorithms coarsening sake reduced preprocessing time space overhead 
space reduction may counterpart time efficiency 
space amount memory pivots larger 
result improvement 
fair way compare algorithms give amount memory 
range coarsening 
auxiliary data structures proposed authors continuous distance functions aimed reducing amount space needed store coordinates elements mapped space time find relevant classes 
popular form reduce precision written fr fr partition interval 
assign equivalence class elements falling range distances respect pivot obviously coarsening previous relation naturally extended pivot 
exemplifies pivoting equivalence relation range coarsening applied pivot 
points ring equivalence class despite exact distance pivot may different 
number actual algorithms form coarsening technique 
divide distances slices number elements lie slice note slices different pivot 
slices 
goal obtain balanced trees 
hand propose range coarsening continuous distance functions specify 
consider natural extension assigns slices width branch tree arity nodes 
node slice width recomputed slices fixed width node desired arity 
slices fixed width bkt determined percentiles vpt mvpt fqa 
may different pivot node bkt mvpt level fqa 
define slices node level fqa 
choices drawn table 
empty slots filled new structures defined 

similar fqa slices fixed width 
level slice width recomputed maximum arity guaranteed 
node different slice width 

cross mvpt 
range values divided gamma uniform percentiles balance tree 
delta ch avez fixed percentiles fixed width different pivot vpt mvpt bkt node scope coarsening different slice different pivot node level different slice fqa level table 
different options range coarsening 
put italics new structures created fill empty holes 
tree fixed height 
node ranges recomputed elements lying subtree 
particular case called 

just new name fqa appropriate discussion uses variable width slices ensure subtrees balanced size slices nodes single level balance level wise 
combinations just created allow explain important concepts 
amount range coarsening 
consider 
different forms range coarsening 
fixed pivots bits represent coordinates distances point pivots 
different values expressed 
structures differ distances put ranges 
total space requirement reduced bits 
range coarsening just technique reduce space space accommodate pivots 
immediate convenient order pivots clear technique improve effectiveness algorithm 
percentiles versus fixed width 
unclear issue fixed slices better worse percentile splitting 
hand balanced data structure obvious advantages internal complexity may reduced 
fixed slices produce unbalanced structures outer rings elements especially high dimensions 
hand high dimensions outer rings tend narrow percentile splitting small increment radius gets new elements inside ring 
rings narrow rings frequently included radius interest queries see 
alternative idea shown ch avez slices optimized minimize number branches considered 
case class arbitrary set slices 
trees versus arrays 
tree versions respectively 
ary trees elements belonging coarsened class stored subtree 
searching metric spaces delta uniform percentiles uniform width fig 

query intersects rings uniform percentiles 
explicitly storing coordinates trees store implicitly elements leaves path root spell coarsened coordinate values 
space requirements closer practice constant low array versions may take space 
search relevant elements organized tree interesting elements coordinate th ring just traverse th subtree 
reduces extra cpu time 
distance fine grained root nearly children subtrees just child 
structure similar table coordinates element search degenerate linear row wise traversal 
range coarsening tool reduce extra cpu time 
trees ability define slices node level array versions 
allows adapt better data values slices need space 
clear pays store slice values 
summarizing range coarsening applied fixed width fixed percentile slices 
reduce space necessary store coordinates allow pivots amount memory 
just technique reduce space improve search complexity 
range coarsening organize tree search schemes sublinear extra cpu time 
bucket coarsening 
reduce space requirements trees avoid building subtrees elements 
elements stored bucket 
search arrives bucket exhaustively consider elements 
form coarsening elements bucket consider pivots resembles previous idea section computing pivots 
case decision taken line index construction time allows reducing space storing coordinates 
previous case decision taken search time 
crucial difference decision taken search time know exactly total amount exhaustive coordinates 
hand delta ch avez line decision consider search branch tree predict branches considered search time 
idea discrete distance functions similar buckets 
applied continuous setups reduce space requirements 
scope coarsening 
obvious form coarsening call scope coarsening 
fact form coarsening difficult notice algorithms trees fact pivoting algorithms 
coarsening storing coordinates elements just storing 
comparing query pivots helps discriminate subset database 
fact reduce space determine line elements store distance pivots 
large number ways idea way 
single pivot level tree 
left right subtrees hand different pivots 
consider left right subtrees radius allow completely discard comparing query left pivot useful left subtree 
information stored distances left pivot elements right subtree vice versa 
compare pivots 
continues recursively 
idea 
sight clear reduce space direct way idea schemes 
combine huge increase number potential pivots 
subtree element belonging subtree selected pivot deleted set 
bucketing result tree element node tree potential pivot 
tree takes space shows successfully combine large number pivots scope coarsening low space requirements 
possible advantage apart guaranteed linear space slightly reduced space practice structures store coordinates pivots better suited searched elements subtree selected subset 
property impractical algorithm 
shapiro ozsoyoglu propose hybrids bkt vpt respectively number fixed pivots node resulting class new set pivots selected 
note historically evolution 
voronoi partition algorithms remaining algorithms bsts vts mts rely hierarchical voronoi partition metric space 
source differences centers selected node 
bsts take elements level 
vts repeat previous centers creating new nodes 
select centers far apart 
mts try minimize covering radii 
select variable searching metric spaces delta hyperplanes ght sat balls bst vt mt sat rings gnat table 
different options limiting classes 
number close neighbors parent node 
main difference lies search algorithm 
purely hyperplane criterion bsts vts mts covering radius criterion 
criteria increase pruning 
algorithms query compared centers current node criteria discard subtrees 
little different criteria 
apply search centers considering range values 
center selected query ball intersect ring contains elements class subtree safely discarded 
words limit class center intersecting rings centers 
way limiting extent class different hyperplane covering radius criteria 
probably efficient requires storing distances level 
table summarizes differences 
clear possible combinations tried attempt enumerate 
voronoi partition attempt obtain local classes local pivots 
general technique identify clusters close objects set 
exist clustering algorithms build equivalence relations 
defined vector spaces general metric spaces 
exception brito reports results 
clear clustering algorithms directly translate algorithms proximity searching 
clustering algorithm cliques burkhard keller results similar simpler bkt 
area largely unexplored developments converted improved search algorithms 

metric spaces popular model similarity retrieval unrelated areas 
surveyed algorithms index metric spaces answer proximity queries 
just enumerated existing approaches discuss bad points 
addition unified framework allows understanding existing approaches common view 
turns existing algorithms variations common ideas identifying previously unnoticed combinations naturally appeared 
analyzed main factors affect efficiency searching metric spaces 
main summarized follows concept intrinsic dimensionality defined general metric spaces quantifiable measure affects search perfor delta ch avez mance 
main factors affect efficiency search algorithms intrinsic dimensionality space search radius 
equivalence relations common ground underlying indexing algorithms divide search cost terms internal external complexity 
large class search algorithms rely pivots mapping metric space distance 
important class uses voronoi partitions 
equivalence relations coarsened save space improve efficiency making better pivots 
hierarchical refinement classes improve performance 
optimal number pivots number high terms space requirements 
practical terms pivot index outperform voronoi index memory 
amount memory unfeasible dimension grows voronoi algorithms normally outperform pivot ones high dimensions 
high dimension search radius needed retrieve fixed percent database large 
reason failure overcome brute force search exact indexing algorithm 
number open issues require attention 
main ones follow 
pivot algorithms understand better effect pivot selection devising methods choose effective pivots 
subject appropriate number pivots relation intrinsic dimensionality space plays role 
histogram distances may tool pivot selection 
voronoi algorithms clustering schemes order select centers 
find ways reduce construction times cases high 
search hybrids voronoi pivoting algorithms 
ones cope better high dimensions second ones improve memory 
space clustered intrinsic dimension clusters smaller top level clustering structure joined pivoting scheme clusters interesting alternative 
pivots selected cluster clusters high locality 
take extra cpu complexity account barely considered 
applications distance expensive disregard type cpu cost 
specialized search structures mapped space especially resulting complexity tradeoff deserves attention 
take costs account may dominate search time applications 
existing tree ciaccia :10.1.1.145.5268
searching metric spaces delta focus nearest neighbor search 
current algorithms problem range searching despite existing heuristics difficult improve truly independent ways address problem exist 
consider approximate probabilistic algorithms may give better results cost especially problem acceptable 
apers 
multimedia databases perspective 
springer 
arya mount netanyahu silverman wu 
optimal algorithm approximate nearest neighbor searching fixed dimension 
proc 
th acm siam symposium discrete algorithms soda pp 

aurenhammer 
voronoi diagrams survey fundamental geometric data structure 
acm computing surveys 
baeza yates 
searching algorithmic tour 
kent williams eds encyclopedia computer science technology volume pp 

marcel dekker baeza yates manber wu 
proximity matching fixed queries trees 
proc 
th combinatorial pattern matching cpm lncs pp 

baeza yates navarro 
fast approximate string matching dictionary 
proc 
th south american symposium string processing information retrieval spire pp 

ieee cs press 
baeza yates ribeiro neto 
modern information retrieval 
addisonwesley 
bentley 
multidimensional binary search trees associative searching 
comm 
acm 
bentley 
multidimensional binary search trees database applications 
ieee trans 
software engineering 
bentley weide yao 
optimal expected time algorithms closest point problems 
acm trans 
mathematical software 
berchtold keim kriegel 
tree index structure highdimensional data 
proc 
nd conference large databases vldb pp 

bhanu peng qing 
learning feature relevance similarity metrics image databases 
proc 
ieee workshop content access image video libraries santa barbara california pp 

ieee computer society 

weighted spatial relationships retrieval visual contents 
proc 
ieee workshop content access image video libraries santa barbara california pp 

ieee computer society 
blott weber 
simple vector approximation file similarity search high dimensional vector spaces 
technical report institute information systems eth zentrum zurich switzerland 
ozsoyoglu 
distance indexing high dimensional metric spaces 
proc 
acm sigmod international conference management data pp 

sigmod record 
brin 
near neighbor search large metric spaces 
proc 
st conference large databases vldb pp 

brito ch avez 
connectivity mutual nearest neighbor graph clustering outlier detection 
statistics probability letters 
bugnion roos widmayer widmer 
spatial index approximate multiple string matching 
baeza yates ziviani eds proc 
delta ch avez st south american workshop string processing wsp pp 

burkhard keller 
approaches best match file searching 
comm 
acm 
cascia sethi sclaroff 
combining textual visual cues content image retrieval world wide web 
proc 
ieee workshop contentbased access image video libraries santa barbara california pp 

ieee computer society 
ch avez 
optimal discretization pivot algorithms 
manuscript 
ftp umich mx pub users minimax ps gz 
ch avez 
proximity queries metric spaces 
ed proc 
th south american workshop string processing wsp pp 

carleton university press 
ch avez baeza yates 
array algorithm similarity queries metric spaces 
proc 
string processing information retrieval spire pp 

ieee cs press 
ch avez navarro 
overcoming curse dimensionality 
european workshop content multimedia indexing pp 

ftp umich mx pub users fqa ps gz 
ch avez navarro 
measuring dimensionality general metric spaces 
technical report tr dcc dept computer science university chile 
chazelle 
computational geometry retrospective 
proc 
th acm symposium theory computing stoc pp 

chiueh 
content image indexing 
proc 
th conference large databases vldb pp 

ciaccia patella 
tree efficient access method similarity search metric spaces 
proc 
rd conference large databases vldb pp 

ciaccia patella 
cost model similarity queries metric spaces 
proc 
th acm sigact sigmod sigart symposium principles database systems pods 
ciaccia patella 
processing complex similarity queries distance access methods 
proc 
th international conference extending database technology edbt 
clarkson 
nearest neighbor queries metric spaces 
discrete computational geometry 
cox cox 
multidimensional scaling 
chapman hall 
dehne 
voronoi trees clustering problems 
information systems 
devroye 
course density estimation 
birkhauser 
duda hart 
pattern classification scene analysis 
wiley 
faloutsos equitz flickner niblack petkovic barber 
efficient effective querying image content 
intelligent information systems 
faloutsos kamel 
uniformity independence analysis concept fractal dimension 
proc 
th acm symposium principles database principles pods pp 

faloutsos lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
acm sigmod record 
linder lugosi 
fast nearest neighbor search dissimilarity spaces 
ieee trans 
pattern analysis machine intelligence 
frakes baeza yates eds 

information retrieval data structures algorithms 
prentice hall 
searching metric spaces delta gaede 
multidimensional access methods 
acm computing surveys 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod international conference management data pp 

hair anderson black 
multivariate data analysis readings th ed 
prentice hall 
jain dubes 
algorithms clustering data 
prentice hall 
mcdonald 
data structure algorithm nearest point problem 
ieee transactions software engineering 

data structures algorithms volume iii computational geometry 
springer 
mic oncina carrasco 
fast branch bound nearest neighbour classifier metric spaces 
pattern recognition letters 
mic oncina vidal 
new version nearest neighbor approximating eliminating search linear preprocessing time memory requirements 
pattern recognition letters 
navarro 
searching metric spaces spatial approximation 
proc 
string processing information retrieval spire pp 

ieee cs press 
nene nayar 
simple algorithm nearest neighbor search high dimensions 
ieee trans 
pattern analysis machine intelligence 
nievergelt hinterberger 
grid file adaptable symmetric multikey file structure 
acm trans 
database systems 

voronoi trees applications 
proc 
international workshop discrete algorithms complexity fukuoka hotel fukuoka japan pp 


monotonous bisector trees tool efficient partitioning complex geometric objects 
data structures efficient algorithms lncs pp 

springer verlag 
prabhakar agrawal abbadi 
efficient disk allocation fast similarity searching 
proc 
acm spaa puerto mexico 
roussopoulos kelley vincent 
nearest neighbor queries 
proc 
acm sigmod pp 

salton mcgill 
modern information retrieval 
mcgraw hill 
samet 
quadtree related hierarchical data structures 
acm computing surveys 
sankoff kruskal eds 

time warps string edits macromolecules theory practice sequence comparison 
addison wesley 
sasha wang 
new techniques best match retrieval 
acm trans 
information systems 
shapiro 
choice points best match file searching 
comm 
acm 
sutton barto 
reinforcement learning 
mit press 
uhlmann 
implementing metric trees satisfy general proximity similarity queries 
manuscript 
uhlmann 
satisfying general proximity similarity queries metric trees 
information processing letters 

dynamically balanced spatial index 
computing suppl 

vidal 
algorithm finding nearest neighbors approximately constant average time 
pattern recognition letters 
waterman 
computational biology 
chapman hall 
delta ch avez white jain 
algorithms strategies similarity retrieval 
technical report vcl july visual computing laboratory university california la jolla california 
yao 
computational geometry chapter pp 

elsevier science 
van leeuwen editor 
yianilos 
data structures algorithms nearest neighbor search general metric spaces 
proc 
th acm siam symposium discrete algorithms soda pp 

yianilos 
excluded middle vantage point forests nearest neighbor search 
dimacs implementation challenge baltimore md 
yianilos 
locally lifting curse dimensionality nearest neighbor search 
proc 
th acm siam symposium discrete algorithms soda 
appear 
ichikawa 
survey content retrieval multimedia databases 
ieee trans 
knowledge data engineering 
