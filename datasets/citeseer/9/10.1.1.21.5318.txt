breaking knowledge bottleneck bayesian networks language uml artifacts kathryn laskey dept systems engineering george mason university fairfax va gmu edu effective requirements management recognized key element creation systems 
exercise involves significant amount uncertainty requirements analyst unsure system requirements specified provide functionality user wants 
previous demonstrated system functionality domain modeled library bayesian network fragments 
fragments combined larger networks model dependencies system requirements 
introducing evidence examining posterior probabilities assessment system requirements network needed degree 
promising approach required manual generation numerous bayesian network fragments necessitating significant prohibitive investment time 
specifically addresses problem proposing method automated generation bayesian network fragments case models collaboration diagrams created natural part software development process unified modeling language 

software engineering commonly accepted effective requirements engineering key element design development systems measure organizational maturity 
requirements engineering describes built necessary precursor design implementation 
effective translation user requirements system requirements mean difference success failure system development 
accurately come eventual system design functional nonfunctional requirements translated system requirements 
user requirements describe functionality system philip barry mitre madison blvd mclean va mitre org peggy dept systems engineering george mason university fairfax va gmu edu black box perspective system requirements state functionality may accomplished 
previous authors showed translation user requirements system requirements explicit element uncertainty requirements analyst may doubt user requirement implies system requirement 
uncertainty explicitly represented bayesian network fragments quantitatively model interaction requirements relative importance users 
especially important requirements engineering ability identify conflicts requirements 
facilitated bayesian networks 
evidence accumulation generates error condition pattern evidence logically impossible model 
inconsistencies discovered means associated requirements incompatible constraints represented bayesian network 
condition occurs software engineer explore ways conflict soft evidence 
soft evidence allows engineer declare varying degrees strength user requirement implied 
requirements deemed essential declared hard evidence requirements deemed essential declared soft evidence strengths related perceived importance 
outright conflicts discovered offending declarations relaxed soft evidence 
varying strengths soft evidence declarations important sensitivity analysis tool design process 
conflict metrics identify conflicts fall short outright inconsistencies find clusters requirements responsible conflict 
initial efforts focused manually creating bayesian network fragments atomic shall statements system shall capable downloading files rate megabytes second 
recognized fact requirement elicitation activities produce long lists unconnected statements need 
sheer number initially unconnected requirements caused creation bayesian network fragments time consuming require significant domain expertise 
practical consideration posed significant challenge employment bayesian networks requirements engineering 
approach resolving knowledge engineering bottleneck artifacts created objectoriented analysis design 
unified modeling language uml overarching unified software development process de facto standard object oriented software development community 
paradigms widely software developers documenting user requirements system requirements 
exploiting inherent relationships created software documentation activities uml see tremendous opportunity create bayesian network fragments uml artifacts significant additional user intervention 
allows initial creation fragments software user subsequently embed usage existing process quantitatively model system requirement interactions importance proposed system 
cases analysis models research focuses artifacts uml case model analysis model 
models specify external functionality generic system functionality 
section provides background information useful understanding models exploited automatically generate bayesian network fragments prioritize functionality relate functional requirements 
cases requirements side uml ivar jacobson absurd believe human mind come consistent relevant list thousands requirements form system shall 
futility direct specification led search human friendly ways develop system requirements 
highly promising popular approach develop requirements set cases 
cases represent functionality system terms prototypical problems processes system expected execute 
case represents distinct way system external agent actor view 
cases generally specified graphically methodology defining actions system perform 
analyzing functionality needed successful execution case derives system requirements 
case specifies primary sequence actions system perform may include excursions main sequence 
cases operations attributes 
case description include state chart diagrams collaborations sequence diagrams 
case attributes represent values case instance uses manipulates 
case instances interact case instances design case models simple intuitive 
flow events special requirements captured special textual descriptions 
structuring case model system designers specify relationships cases 
relationships form interesting structures provide evidence importance requirements relationships requirements 
specifically cases related generalization extension inclusion 
generalization kind inheritance cases perform behavior described generalizing case 
generalized case specialized significant number times evidence functionality described important 
extension models additions case sequence actions 
additions contingent conditions satisfied 
extend relationships model exceptional behavior case 
inclusion models situation case comprises vital behavior high level case 
higher level including case function included case 
analysis models specifying system requirements unified software development methodology analysis address previously unresolved issues analyzing requirements depth 
key analysis development analysis model yields precise specification requirements resulted case model 
analysis model described language developers introduce formalism reason internal workings system 
analysis model considered cut design model essential input system design implementation 
analysis model number diagrams 
particular interest collaboration diagram describes specific case realized performed 
diagram drawn terms stereotypical analysis classes instantiated analysis objects 
objects focus handling functional requirements postpone consideration nonfunctional requirements designating special requirements 
stereotypical classes collaboration diagrams analysis phase boundary classes entity classes control classes 
stereotypical classes represent generic functionality described system level coarser fashion design classes 
stereotypical classes instantiated objects perform broad categories functionality 
boundary classes model interaction system actors information input output 
boundary classes model parts system interface directly actors clarify system boundaries 
boundary classes kept reasonably high level 
example boundary classes represent printer interfaces terminals apis boundary class related actor vice versa 
entity classes model information longlived persistent 
instantiated entity classes represent objects handled system may associated behaviors logical data structure 
entity objects attributes attributes conceptual may map directly physical attributes specified design phase 
control classes model coordination sequencing transactions control objects 
control classes specifically model dynamics system 
behaviors related interactions actors objects represented control classes 
behaviors modify changes control coordination sequencing transactions business logic generally represented control classes delayed design phase 
mapping case models bayesian networks operations generalization inclusion extension relate cases 
section examines relationships create bayesian network fragments 
generalization generalized case contains common functionality allocated specializing cases 
mapping generalization relationship bayesian network fragments straightforward 
consider situation case generalization case case 
view functional requirements specializations functional requirement translates bayesian network analogous structure 
direction implication flows reflecting top decomposition 
indicates encounter general case specific requirement 
prior inclusion inclusion models situation case composed number sub cases 
case inclusion top level case execute execution sub cases 
see translated bayesian network fragments consider situation case related case case inclusion relationship 
need case elicited requirements generation activity draw implication arrow case case case 
probability assignments nodes prior extension extension models case case branch additional behavior satisfaction condition conditions 
case extension case need additional case execute 
second case represents exceptional behavior conditions met 
consider general case case extended case 
case additional criterion stereotypical analysis model classes entity class boundary class control class represent requirement node bn persistent storage represent requirement interface specific actor represent requirement high level functionality usually represents internal business logic broken lower level control classes stereotypical analysis classes triggers case case executes 
additional criterion described textual flow events write modeled requirement implied requirement additional criterion modeled requirement node 
direction implication additional criteria ac requirement 
ac ac ac ac exploiting analysis artifacts analysis process refinement specification cases formal language 
case individual analysis model created specifies generic terms system functionality 
analysis models formed instantiation stereotypical classes indicated 
analysis classes objects analysis classes represent particular system functionality broadly categorized stereotypical classes 
classes instantiated objects specialized specific functionality 
objects described follows 
boundary objects mapped directly requirement user interface node bayesian network 
boundary object associated actor 
requirement interface specified actor 
relationship boundary object object instantiated collaboration diagram shown messages passed classes 
entity object represents persistent information store database 
entity object represented requirement store particular type information capability read write information store 
control objects describe internal logic system 
control objects typically act input actors entity objects initiate additional action 
control objects decomposed lower objects indicate lower level functionality 
collaboration diagram mappings collaboration diagram functional specification individual case instantiated objects stereotypical classes 
collaboration diagram relates objects links represent messages sent objects 
links numbered representing rough ordering 
messages model requests services sending object receiving object 
messages provide finer view functionality offered object 
collaboration diagrams readily mapped network fragments 
collaboration diagram consists stereotypical classes boundary control entity 
function create objects instantiated classes 
example indicate boundary object created way depends additional data consist objects collaboration diagram instantiated 
dn assumptions mapping rules readily written 
rule di write requirement actor interface type interacts actor data type di 
represented named node network fragment rule actor sends message type mi write requirement functionality mi object represented named node bayesian network arc drawn assume importance node directly related likelihood called 
rule model actor evidence requirement rule di write requirement persistent storage type containing information di 
represented named node rule message mi sent entity object object write requirement functionality object represented named node bayesian network arc drawn draw arc named node bayesian network represents rule di write requirement functionality type acting information di 
represented named node rule message mi sent control object object write requirement functionality object represented named node bayesian network arc drawn draw arc named node bayesian network represents gluing fragments process combining various network fragments referred gluing 
fragments combined unifying nodes common fragments assigning parents resulting node union parent nodes input fragments 
conditional probabilities subsequently reallocated heuristic influence combination method 
laskey mahoney took similar approach network fragments model military situation assessment 
types gluing situations common fragments fragments collaboration diagrams cases heterogeneous gluing fragments different types 
rules provide gluing fragments common nodes fragment fragments share common nodes fragments target network fragments overlayed common nodes arcs redrawn 
conditional probabilities subsequently reallocated 
fragments common actor network fragments share common actor proxy node representing actor created glued fragment exist 
case model association arc case actors 
guide arcs drawn glued bayesian network fragment proxy node nodes representing cases 
conditional probabilities subsequently reallocated 
fragment represents collaboration diagram arc drawn proxy node boundary object 
prior probability assigned proxy node prior probability assigned reflects likelihood actor system 
fragments common nodes common actors case model fragments common nodes actors criteria gluing met 
fragments sharing common nodes having common actors directly connected 
gluing collaboration diagrams somewhat different collaboration diagrams share common boundary object instantiated boundary class 
theory collaboration diagrams glued boundary object common node 
approaching gluing fashion merely models fact functionality common system boundary 
mind suggested gluing contingent common entity control classes gluing contingent common actors 
dependency sure relationship modeled requirements dependent shared functionality user need 
explicitly modeling relationship user requirements system requirements earlier created models user requirements distinct models system requirements 
chose approach user requirements assumed generated natural language atomic statements need 
system requirements webs created domain analysis existing systems expert interviews 
individual fragments tailored effectively model specific niche functionality server requirements gluing individual fragments larger network created related cross domain system requirements 
population agents interpreted atomic user requirements introduced evidence glued bayesian network interpreting likelihood individual system requirements indicated 
unified development process relationships user requirements represented cases system requirements represented collaboration diagrams specified 
case collaboration diagram created stereotypical classes 
relationship user requirements system requirements determined high level 
specified system requirements needed importance case actors 
elements collaboration diagrams stereotypical classes related quite importance requirement system functionality moderately implied individual cases may important cases considered 
mind state guidelines gluing fragments created collaboration diagrams network cases collaboration diagrams 
node representing case collaboration diagram removed network 
fragment derived collaboration diagram glued follows mapping example illustration consider example 
suppose requirement elicitation activity determined need develop application allows individual purchase products internet 
number functional requirements defined log site browse products select products table shows list requirements necessary system 
provide index help log browse products browse search criteria select products display selected products add selected products remove selected products provide line help provide faqs purchase products purchase credit card purchase products table line product purchase functionality list decision refine textual descriptions functional requirements creating top level case model provided 
actors identified buyer product computer named com 
shows association cases buyer actors relationships generalization inclusion 
particular relationships generalization inclusion 
particular requirement browse search criteria identified generalization browse products provide line help generalizes provide faqs provide index help purchase product generalization purchase credit card 
inclusion relationship illustrated functionality select products requiring display selected products add selected products remove selected products 
represents collaboration diagram developed stereotypical analysis classes 
notice addition messages actor stereotypical classes 
form basis functionality specified bayesian network 
loose temporal ordering suggested numbering messages sequencing requirements explicitly modeled diagrammatic technique shown interaction diagrams examined 
case models collaboration diagrams buyer 
input order information 
purchase request include order total 
send credit card info purchase ui log browse search criteria include select products include display selected products add selected products purchase products provide index help purchase credit card top level case model 
get order details request handler 
get 
request purchase 
get browse products remove selected products 
get order handler provide line help 
new credit card validation financial data document 
new com collaboration diagram purchase credit card dog food order bayesian network case model created straightforward create structure bayesian network rules described sections 
represents bayesian network constructed case model shown 
notice conditional independence directly modeled application rules stated 
example add selected products conditionally independent remove selected product requirement select product 
reasonable requirements standpoint known functionality select product definitely needed evidence add select products provided remove selected product reasonably discounted 
similarly select product definitely indicated reasonable state evidence add select products compelling reasonably disregard information remove selected product 
represents bayesian network fragment developed represent collaboration diagram shown 
case represented collaboration diagram developed 
collaboration diagrams built generic functionality stereotypical classes 
stereotypical classes instantiated specific functionality contingent bayesian network fragment collaboration diagram purchase credit card messages sent stereotypical classes actors 
illustrates results gluing fragment case model collaboration diagram 
step identifying common nodes actors fragments 
example shown common node representing actor buyer 
consistent rules discussed earlier arc drawn buyer node purchase ui node node representing boundary class 
node represented case purchase credit card replaced entire fragment created collaboration diagram node represented particular case deleted network 
case model arc appears purchase product purchase credit card interpret causal relationship 
arc redrawn purchase product purchase ui node 
bayesian network consisting glued fragments case model collaboration diagram current completing mechanics seamless prototype take files represent case model collaboration diagrams create bayesian network composed associated fragments 
inherent structure case model provides basis network creation easily automated rule system 
additional rules specified allow collaboration diagrams translated integrated network created case model 
rational rose develop case models collaboration diagrams uml 
export format rational rose human readable text 
parser written extracts relevant information sends expert system applies rules discussed sections 
expert system written jess outputs text files xml bayesian interchange format bif represent bayesian network fragments 
java bayes visually inspect debug network fragments 
fragments developed prototype glue network fragments interpret effect nonfunctional requirements evidence glued network 
introduced prototype agent expert system infers system requirements evidence user requirements specification 
uses apis java bayes jess 
directions showed resolve knowledge bottleneck exploiting usually accomplished part unified software development process 
case model collaboration diagrams created reasons create bayesian networks relate cases generic descriptions system functionality relate instances system functionality 
bayesian network provides computational model decide specific system requirements describe user wants 
differing views system functionality provided contingent user profiles information 
prototype developed demonstrate feasibility mapping uml artifacts bayesian networks 
bayesian network explicitly model uncertainty requirements represented cases elements collaboration diagrams 
contingent evidence importance actor quantitative assessment strongly believe requirement indicated implied 
see ability translate case models associated collaboration diagrams bayesian networks important potential advance software engineering 
specifically approach provides way understanding degree specified requirements implied information encoded user requirements 
ability represent degrees implication key identification effective management conflicts requirements 
replacing node bayesian network detailed fragment consisting number nodes reminiscent hierarchical decomposition system requirements 
new ground modeling standpoint creating computational structure directly relates system requirements source user requirements 
structure directly test applicability system requirements problem hand 
consistent research object oriented bayesian networks 
initial ground broken issues remain effort bayesian networks fully understand requirement space 
primary importance fact described focused analyzing functional requirements 
fully understand requirements system examine temporal aspects nonfunctional requirements system 
uml artifacts examine types requirements form sequence diagrams statecharts textual narrative cases 
interesting research challenge try cleanly automatically map additional types requirements types bayesian network fragments 
barry agile approach requirements modeling ph dissertation george mason university fairfax virginia may 
barry laskey application uncertain reasoning requirements engineering 
proceedings fifteenth conference uncertainty artificial intelligence kathryn laskey henri prade editors morgan kaufmann publishers san francisco 
barry laskey modeling requirements enterprise control systems proceedings darpa symposium advances enterprise control november 
systems engineering analysis third edition 
prentice hall upper saddle river nj 
boehm spiral model software development enhancement computer vol 
may 
booch rumbaugh jacobson unified modeling language user guide 
addison wesley publishing reading ma 
cozman fabio 
source code documentation available www cs cmu edu index html 
dorfman requirements engineering software requirements engineering nd edition thayer dorfman editors ieee press los alamitos ca 
system engineering overview software requirements engineering nd edition thayer dorfman editors ieee press los alamitos ca 
friedman hill ernest 
jess source code documentation available herzberg ca sandia gov 
jacobson booch rumbaugh unified software development process 
addison wesley publishing reading ma 
jensen chamberlain jensen analysis hugin data conflict proceedings sixth conference uncertainty artificial intelligence bonissone henrion kanal lemmer editors elsevier science publishing new york ny 
koller pfeffer object oriented bayesian networks 
proceedings thirteenth conference uncertainty artificial intelligence dan geiger prakash shenoy editors morgan kaufmann publishers san francisco 
laskey conflict surprise heuristics model revision proceedings seventh conference uncertainty artificial intelligence 
bruce ambrosio philippe smets bonissone editors morgan kaufmann publishers san mateo california 
laskey mahoney network fragments representing knowledge constructing probabilistic models 
proceedings thirteenth conference uncertainty artificial intelligence dan geiger prakash shenoy editors morgan kaufmann publishers san francisco capability maturity model guidelines improving software process 
addison wesley publishing reading ma 
pfeffer koller system probabilistic object oriented knowledge representation 
proceedings fifteenth conference uncertainty artificial intelligence kathryn laskey henri prade editors morgan kaufmann publishers san francisco 
rational rose 
technical papers sample executable code available www rational com 
