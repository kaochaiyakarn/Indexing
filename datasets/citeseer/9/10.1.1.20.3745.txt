usenix association proceedings th usenix security symposium san francisco california usa august advanced computing systems association usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
security plan russ cox mit lcs eric grosse bell labs rob pike bell labs dave presotto labs bell labs sean quinlan bell labs rsc rob presotto plan bell labs com security architecture plan operating system redesigned address technical shortcomings 
redesign provided opportunity system convenient securely 
plan improved ways usually seen secure easier 
central component new architecture user self contained agent called factotum 
factotum securely holds copy user keys negotiates authentication protocols behalf user secure services network 
concentrating security code single program offers advantages including ease update repair broken security software protocols ability run secure services lower privilege level uniform management keys services opportunity provide single sign unchanged legacy applications 
factotum unusual architecture implemented plan file server 

secure computing systems face challenges employ sophisticated technology difficult design prove correct second easy regular people 
question ease neglected essential weak easy security effective strong difficult security 
people lock front doors leave house knowing full burglar capable picking lock avoiding door altogether accept cost awkwardness bank vault door house reduce probability 
related point users need clear model security operates provides security order example clarity lock icon web browser offset confusing typically insecure steps installing certificates 
security architecture plan operating system redesigned secure easier 
security mean things business authenticating users services second safe handling deployment keys secret information third encryption integrity checks safeguard communications eyes 
old security architecture plan engineering problems common operating systems 
inadequate notion security domain 
user provided password connect local file store system required password access file stores 
system treated network services belonging security domain 
second algorithms protocols authentication nature tricky difficult get right compiled various applications kernel modules file servers 
changes fixes security protocol required components protocol needed recompiled relinked restarted 
third file transport protocol forms core plan system authentication protocol embedded design 
meant fixing changing authentication required deep changes system 
find way break protocol system wide open hard fix 
number lesser problems combined desire widespread encryption system spurred rethink entire security architecture plan 
new architecture agent called factotum handles user keys negotiates security interactions system services applications 
trusted assistant copy owner keys factotum negotiation security authentication 
programs longer need compiled cryptographic code communicate factotum agents represent distinct entities cryptographic exchange user server secure service 
security protocol needs added deleted modified factotum needs updated system services kept secure 
building factotum modified secure services system move user authentication code factotum authentication separable component file server protocol deployed new security protocols designed secure file store called protect keys easy get needed designed new kernel module support transparent transport layer security tls began encryption communications system 
architecture illustrated 
secure protocols algorithms understood usually weakest link system security 
practice security problems arise buggy servers confusing software administrative 
practical problems addressing 
describes algorithms protocols included mainly concreteness 
main intent simple security architecture built small trusted code base easy verify manual automatic means easy understand easy 
subjective assessment believe achieved goal ease 
achieved goal improved security supported plan move currently private computing environment internet outside corporate firewall 
rest explains architecture explain system terminal auth server cpu server file server 
components security architecture 
box typically separate machine ellipse process 
ellipses labeled factotum processes labeled pieces proxies distributed program 
authentication server repositories users security information factotum processes consult required 
shared resource storing private information keys factotum consults user bootstrap 
easy securely safe run open network 

agent security primary reasons redesign plan security infrastructure remove authentication method applications kernel 
cryptographic code large intricate packaged separate component repaired modified altering relinking applications services depend 
security protocol broken trivial repair disable replace fly 
similarly possible multiple programs common security protocol embedding program 
systems dynamically linked libraries dlls address configuration issues 
problem approach leaves security code address space program 
interactions program dll accidentally deliberately violate interface weakening security 
program library implement secure services run privilege level necessary provide service separating security different program possible run services weaker privilege level isolating privileged code single trustworthy component 
lead ssh agent give user agent process responsible holding user keys 
agent program called factotum similarity servant power act behalf master holds keys master possessions 
essential factotum keep keys secret owner interest 
ll discuss changes kernel reduce possibility factotum leaking information inadvertently 
factotum implemented plan services file server 
conventionally mounted directory mnt factotum files serves analogous virtual devices provide access control services factotum 
sections describe design factotum operates pieces plan provide security services 

logging discussions follow concrete couple examples showing plan security architecture appears user 
examples involve user gre logging booting local machine 
user may may secure store keys kept 
factotum prompt password secure store obtain keys prompting key isn store 
factotum prompt key 
represents literal newline character typed force default response 
user input italics long lines folded indented fit 
example shows user logging help secure store 
factotum prompts user name local kernel user gre default responses appear square brackets 
kernel starts accessing local resources requests factotum user password pair adding key dom cs bell labs com proto sk user gre password user logged local system mail client starts adding key proto apop server plan bell labs com user gre password factotum doing prompting applications started touching keys 
note clear key requested 
consider login sequence case secure store account user gre password sta pin gre hear factotum attempt contact system key kept secure store 

factotum computer running plan user id owns resources system scheduler local disks network interfaces user host owner closest analogue plan unix root account far weaker having special powers name implies host owner just regular user happens resources local machine 
single user system call terminal host owner id terminal user 
shared servers cpu servers normally pseudo user initially owns resources 
boot time plan kernel starts factotum executing privileges host owner 
new processes run user process created 
process take identity new user provide login shell shared cpu server proving host owner factotum authorized 
done running authentication protocol factotum prove process access secret information new user possess 
example consider setup 
user terminal wants log cpu server plan cpu service cpu client program cpu server 
knows details authentication 
need able shuttle messages back forth generic function easily performed knowing able extract secrets messages 
network connection relay messages factotum owned user owned cpu server mutual authentication established 
sections describe rpc factotum applications library functions support proxy operations 
kernel uses single local instance factotum running host owner authentication purposes regular user may start factotum agents 
fact factotum representing user need running machine client 
instance easy user cpu server standard plan operations replace mnt factotum user private file name space server connection factotum running terminal 
usual file system permissions prevent doing maliciously 
permits secure operations cpu server transparently validated user factotum secrets need leave user terminal 
ssh agent special ssh protocol messages advantage making agent file system need new mechanism access remote agent remote file access sufficient 
factotum protocol implemented state machine generic interface protocols essence pluggable modules easy add modify drop 
writing message reading message factotum require separate rpc result single state transition 
factotum runs completion rpc blocks waiting input authentication 
number simultaneous limited amount memory re willing dedicate representing state machines 
authentication protocols implemented factotum adding removing protocols require relinking binary factotum processes need restarted order take advantage new repaired protocols 
time writing factotum contains authentication modules plan shared key protocol sk ssh rsa authentication passwords clear apop cram ppp chap microsoft ppp vnc challenge response 

local capabilities capability system managed kernel empower factotum permission process change user id kernel device driver implements files dev dev 
file dev opened host owner 
factotum opens file immediately booting 
files factotum creates string form userid userid random string uses sha hmac hash userid userid key random string writes hash dev 
factotum passes original string process machine running user userid writes string dev 
kernel hashes string looks matching hash list 
finds writing process user id changes userid userid 
timeout expires capability discarded kernel 
capabilities local machine created 
factotum running machine pass capabilities processes expect 

keys define word key mean secret description context secret protocol server user applies 
key combination secret descriptive information authenticate identities parties transmitting receiving information 
set keys authentication depends protocol parameters passed program requesting authentication 
tip sdsi represents security information textual expressions keys plan represented plain utf text 
text easily understood manipulated users 
contrast binary cryptic format reduce security 
binary formats difficult users examine cracked special tools poorly understood users 
example people know understand inside certificates 
don know system find 
idea trusting change trust relationships 
textual centrally stored managed keys easier safer 
plan historically represented databases attribute value pairs foundation selection projection operations 
factotum represents keys format attribute value attribute identifier possibly single character prefix value arbitrary quoted string 
pairs separated white space 
example plan key apop key represented dom bell labs com proto sk user gre password don tell proto apop server com user gre password open sesame value empty contains white space single quotes quoted quotes represented doubled single quotes 
attributes exclamation mark 
considered secret 
factotum secret value escape address space suppress keyboard echo asking user type 
program requesting authentication selects key providing query list elements matched key 
element list attribute value pair satisfied keys exactly pair attribute followed question mark attribute satisfied keys pair specifying attribute 
key matches query element list satisfied 
instance select apop key previous example apop client process specify query server com proto apop internally factotum apop module add requirements having user password attributes forming query server com proto apop user 
password 
searching appropriate key 
factotum modules expect keys known attributes 
instance proto attribute specifies protocol module responsible particular key protocol modules may expect known attributes expect keys password attributes example 
additional attributes comments discrimination intervention factotum example apop imap mail clients conventionally include server attribute select appropriate key authentication 
sdsi keys plan nested structure 
design keeps representation simple straightforward 
necessary add nested attribute manner relational databases attribute selects tuple far simple design sufficient 
simple common structure keys easy users administer set attributes interpretation protocol specific subtle 
users may need consult manual understand details 
attributes proto user password server self explanatory short experience uncovered particular difficulty handling keys 
things get grapple public keys myriad components 

protecting keys secrets prevented escaping factotum 
number ways leak process able debug agent process agent swap disk process willingly disclose key 
easiest avoid secret information key marked factotum prints keys queries new ones careful avoid displaying secret information 
exception plaintext password protocol consists sending values user password attributes 
keys tagged proto pass passwords disclosed mechanism 
preventing forms leakage requires help kernel 
plan process represented directory proc file system 
files directory processes appropriate access permission examine factotum memory registers 
factotum protected processes users default access bits proc directory 
protect agent processes owned user avoid honest mistakes prevent unattended terminal exploited discover secret passwords 
added control message proc called private 
factotum process written private proc pid ctl file process access factotum memory proc 
plan mechanism dev kmem accessing process memory 
similarly agent address space swapped prevent discovering unencrypted keys swapping media 
control message proc prevents scenario 
private specific factotum 
user level file servers interprets fat file systems keep buffer caches swapped disk 
despite precautions attackers find way gain access process running host owner machine 
directly access keys attackers local factotum perform 
case keys example locking bank accounts want way disable detect access 
role confirm attribute key 
key confirm attribute accessed local user confirm key local gui 
section describes actual mechanism 
addressed leaks possible result rebooting resetting machine running factotum 
example reset machine reboot debugger kernel allowing examine contents memory find keys 
satisfactory solution problem 

factotum transactions external programs manage factotum internal key state file interface writing textual key commands mnt factotum ctl file 
commands take list attributes argument 
key creates key attributes replacing extant key identical set public attributes 
deletes keys match set attributes 
reading ctl file returns list keys line displaying public attributes 
example illustrates interactions 
cd mnt factotum ls gre gre jan confirm rw gre gre jan ctl lr gre gre jan log gre gre jan gre gre jan proto rw rw rw gre gre jan rpc cat ctl key dom bell labs com proto sk user gre password don tell key proto apop server com user gre password bite cat ctl key dom bell labs com proto sk user gre key proto apop server com user gre echo proto apop ctl cat ctl key dom bell labs com proto sk user gre file bit set opened process time 
heart interface rpc file 
programs authenticate factotum writing request file reading back reply sequence called rpc transaction 
requests replies format textual verb possibly followed arguments may textual binary 
common reply verb ok indicating success 
rpc session begins start transaction argument key query described earlier 
started rpc conversation usually consists sequence read write transactions 
conversation successful transaction return information identities learned transaction 
attr transaction returns list attributes current conversation list includes attributes start query public attributes keys 
example rpc file action consider mail client connecting mail server authenticating pop protocol apop challenge response command 
programs involved mail client client factotum mail server server factotum authentication computations handled factotum processes 
mail programs role just relay messages 
startup mail server com begins apop conversation factotum obtain banner greeting includes challenge start proto apop role server ok read ok ok pop challenge having obtained challenge server client ok pop challenge client uses apop conversation factotum obtain response start proto apop role client server com ok write ok pop challenge ok read ok apop gre response factotum requires start requests include proto attribute apop module requires additional role attribute attributes optional restrict key space 
responding start transaction client factotum looks key rest conversation 
arguments start request key public attributes proto apop server com mentioned earlier apop module additionally requires key user password attributes 
client obtained response factotum echoes response server apop gre response similarly server passes message factotum obtains send back 
write apop gre response ok read ok ok welcome ok welcome authentication protocol done server retrieve information protocol established 
ok client gre capability capability data list attr value pairs client user name capability 
protocols establish shared secrets provide mutual authentication indicate adding appropriate attr value pairs 
capability server change identity client described earlier 
changed identity server access serve client mailbox 
files provide hooks graphical factotum control interface 
confirm allows user detailed control certain keys 
key confirm attribute user approve key 
separate program graphical interface reads confirm file see confirmation necessary 
read blocks key usage needs approved return line form confirm tag attributes requesting permission key public attributes 
graphical interface prompts user approval writes back tag answer 
second file key requests 
apop example suitable key start transaction factotum indicated failure returning response indicating key needed proto apop server com user 
password 
typical client prompt user desired key information create new key ctl file reissue start request 
file open failing transaction block read mnt factotum file return line form tag attributes graphical interface prompts user needed key information creates key ctl file writes back tag resume transaction 
remaining files informational debugging 
proto file contains list supported protocols see protocols system supports cat mnt factotum proto log file contains log operations debugging output enabled debug control message 
sections explain factotum system services 

authentication plan uses remote file access protocol connect resources file server remote processes 
original design included special messages start conversation authenticate user 
multiple users share single connection cpu server runs processes users connected single file server authenticate separately 
authentication protocol similar kerberos sequence messages passed client file server authentication server verify identities user calling machine serving machine 
major drawback design authentication method defined changed 
mechanism relegate authentication external trusted agent process implementing needed support file service substantial body cryptographic code implement handful startup messages protocol 
redesign addressed number file service issues outside scope 
issues authentication goals remove details authentication protocol second allow external program execute authentication part protocol 
particular wanted way quickly incorporate ideas systems sfs 
file service protocol solution involved creating new type file served authentication file 
connections service state allows general file access permits client open authentication file sending special message generated system call afd int fd char servicename fd user file descriptor established network connection server servicename name desired service offered server typically file subsystem accessed 
returned file descriptor afd unique handle representing authentication file created connection authenticate service analogous capability 
authentication file represented afd addressable server file name hierarchy 
respects behaves regular file important accepts standard read write operations 
prove identity user process factotum executes authentication protocol described section afd file descriptor ordinary reads writes 
client server successfully negotiated authentication file changes state evidence authority mount 
identity established process presents verified afd proof identity mount system call mount int fd int afd char int flag char servicename succeeds user appropriate permissions file hierarchy visible mount point 
sequence events advantages 
actual authentication protocol implemented regular reads writes special messages processed forwarded agent special arrangement 
second business negotiating authentication reading writing authentication file delegated outside agent programs implement client server ends conversation need authentication cryptographic code 
third authentication protocol defined easy change negotiated dynamically 
afd acts capability treated handed process give special permissions kept authentication required closed sure process 
advantages stem moving authentication negotiation reads writes separate file 
case plan making resource authentication accessible file interface reduces priori need special interfaces 

plan shared key protocol addition various standard protocols supported factotum shared key protocol native plan authentication 
protocol provides backward compatibility older versions system 
reason new architecture replace protocols near cryptographically secure ones 
sk shared key protocol uses tickets original kerberos 
difference replaced expiration time kerberos tickets random nonce parameter counter 
summarize nonce nonce uid domain nonce uid domain uid factotum nonce uid uid nonce uid uid nonce uid uid nonce counter nonce counter indicates encrypted des key 
messages exchange nonces server identification 
initial exchange client contacts authentication server obtain pair encrypted tickets encrypted client key server key 
client relays server ticket server 
server believes ticket new contains nonce ticket authentication server encrypted server key ticket basically statement authentication server uid uid share secret authenticator nonce counter server client knows uid similarly authenticator nonce counter client server knows uid tickets reused contacting authentication server incrementing counter authenticator generated 
hope introduce public key version sk allow authentication authentication server available 

authentication server plan security domain authentication server users trust keep complete set shared keys 
offers services users administrators manage keys create disable accounts 
typically runs standalone machine services 
comprises services 
user level file system manages encrypted database user accounts 
account represented directory containing files key containing plan key sk secret challenge response protocols apop vnc chap cram log authentication outcomes expire expiration time status 
expiration time passes number successive failed exceeds disabled written status file attempt access files fail 
network service brokers shared key protocols sk apop vnc chap cram 
remote users call change passwords 
sk protocol described previous section 
challenge response protocols differ detail follow general structure nonce nonce uid domain nonce uid domain uid nonce uid uid nonce uid uid nonce uid uid nonce nonce password protocol uid password old password new ok avoid replay attacks pre encryption clear text protocols sk includes tag indicating encryption role protocol 
elided outlines 

protocol negotiation require particular protocols particular services implemented negotiation chooses actual authentication protocol 
native services plan 
simple 
callee sends null terminated string form proto domain proto domain decimal version number proto name protocol factotum key domain name domain key valid 
caller responds proto domain indicating choice 
callee responds ok string indicates failure 
point chosen protocol commences 
final fixed length reply easy delimit stream chosen protocol require caller callee send message 
negotiation underlying authentication protocols plan services changed application just changing keys known factotum agents 
vulnerable man middle attacks extent attacker may constrain possible choices changing stream 
believe acceptable attacker force side choose algorithms unwilling 

library interface factotum programs access factotum services file system interface common library packages interaction 
number routines library relevant examples give flavor 
consider problem mounting remote file server 
earlier discussion showed mount system calls authentication file afd capability factotum manages afd 
library contains routine amount authenticated mount programs preference raw mount calls 
amount engages factotum validate afd complete code int amount int fd char int flags char aname int afd ret ai afd fd aname afd ai auth proxy afd amount proto role client ai null auth ai ret mount fd afd flags aname afd close afd return ret parameter fd file descriptor returned open dial new connection file server 
conversation factotum occurs call auth proxy specifies key query authentication protocol role played client 
auth proxy read write factotum files authentication file descriptor afd validate user right access service 
call successful auxiliary data held structure freed 
case mount called validated afd 
server cause system call fail indication authentication required access service 
second argument auth proxy function amount called secret information password response challenge required part authentication 
function course provide data factotum key message mnt factotum ctl file 
final argument auth proxy example simple string general formatted print specifier manner printf enable construction elaborate key queries 
example consider plan cpu service exports local devices shell process remote machine typically connect local screen keyboard powerful computer 
heart cpu superset service called allows machine see arbitrary portion file name space machine export network device machine 
cpu just delivers signals interrupt negotiates initial environment remote shell 
authenticate instance cpu requires factotum processes ends local client running user terminal remote server running host owner server machine 
schematic code ends client int auth int fd ai ai auth proxy fd auth proto role client ai null return start cpu protocol server int auth int fd char user ai ai auth proxy fd null proto role server ai null return set user id server process auth ai null return start cpu protocol auth encapsulates negotiation change user id files server kernel 
note client process may ask user new keys auth server machine presumably shared machine pseudo user host owner sets key getting function null 

secure store factotum keeps keys volatile memory initialized boot time 
factotum supplemented persistent store floppy disk containing key file commands copied mnt factotum ctl bootstrap 
removable media nuisance carry vulnerable theft 
keys stored encrypted shared file system keys necessary authenticating file system place 
keys encrypted user password thief succeed dictionary attack 
risks local storage loss contents mechanical dead batteries 
convenience safety provide secure store server network hold user permanent list keys key file 
file server encrypted data bootstrapping 
provide strong authentication resistance passive active protocol attacks assuming client password 
factotum loaded key file encrypted authenticated file storage accomplished standard mechanisms 
cryptographic technology enables form encrypted key exchange called pak analogous eke srp 
pak chosen comes proof equivalence strength diffie hellman subtle flaws earlier encrypted key exchange protocols implementations encouraged take special care 
outline pak protocol hash xy hash xy secret client server variants pak papers mainly concerned proofs cryptographic properties 
aid implementers distilled description specific version appendix 
plan open source license provides lucent encrypted key exchange patents context 
layer defense password theft provide encrypted channel information validated radius server digits hardware token 
provides factor authentication potentially requires independent administrators attack social engineering 
key file stored server encrypted aes rijndael cbc byte initialization vector trailing authentication padding 
invisible user 
matter invisible server aes modes operation standardized new encryption format designed implemented client change server 
deliberately backed user expected save key file removable media lock away 
user password hashed create pak protocol different hash password file encryption key 
command inside authenticated encrypted channel client change passwords sending new consistency client process time fetch re encrypt files 
factotum starts dials local checks user account 
prompts user password fetches key file 
pak protocol ensures mutual authentication prevents dictionary attacks password passive active intermediaries 
passwords saved key file long random strings suitable simpler challenge response authentication protocols 
user need remember single weaker password enable strong single sign authentication unchanged legacy applications scattered multiple authentication domains 

transport layer security plan operating system designed network elements withstand direct attack unguarded firewall vpn seek ensure applications channels appropriate mutual authentication encryption 
principal tool tls 
tls nearly ssl software designed interoperate implementations standard 
tls defines record layer protocol message integrity privacy message encryption shared secrets 
implement service kernel device performed slightly higher cost invoking separate program 
library interface tls kernel device int int fd char char int char secret char dir file descriptor names message digest encryption algorithms shared secret returns new file descriptor encrypted connection 
final argument dir receives name directory tls device associated new connection 
function named analogy push operation supported stream system research unix editions plan 
adding encryption simple replacing file descriptor adding encryption particular network service usually trivial 
plan shared key authentication protocols establish shared bit secret side effect 
native plan network services cpu protocols authentication shared secret 
record layer tls specifies handshake protocol public keys establish session secret 
protocol widely imap provide server authentication client certificates provide mutual authentication 
library function int int fd conn handles initial handshake returns result 
return fills conn structure session id certificate server effort verify certificate 
original design intent certificates expected public key infrastructure reliable deployment long delayed problematic adopted simpler policy just certificate representation public key depending locally administered directory sha allow applications decide public keys trust purposes 

related discussion kerberos earliest distributed authentication systems keeps set authentication tickets temporary file called ticket cache 
ticket cache protected unix file permissions 
environment variable containing file name ticket cache allows different ticket caches different simultaneous login sessions 
user logs typing kerberos password 
login program uses kerberos password obtain temporary ticket authentication server initializes ticket cache ticket forgets password 
applications ticket granting ticket sign tickets behalf user login session 
ticket cache removed user logs 
ticket cache relieves user typing password time authentication needed 
secure shell ssh develops idea replacing temporary file named unix domain socket connected user level program called agent 
ssh agent started initialized rsa private keys ssh clients employ perform rsa behalf 
absence agent ssh typically uses rsa keys read encrypted disk files uses authentication require prompting user authentication needed 
self certifying file system sfs uses similar agent client authentication keys verifying server public keys 
factotum logical continuation evolution replacing program specific ssh sfs agents general agent capable serving wide variety programs 
having agent programs removes need agent program 
allows programs protocol agnostic example build ssh capable protocol supported factotum program knowing protocols 
traditionally program needs implement authentication protocol coding problem factotum reduces 
previous agents concentrated clients authenticating servers 
looking direction sun microsystem pluggable authentication module pam earliest attempts provide general authentication mechanism unix operating systems 
central authority pam system policy tied various implementations network services 
example typical unix system administrator decides allow plaintext passwords authentication configuration files half dozen different servers ftpd need edited 
pam solves problem hiding details authentication mechanism common library interface 
directed system wide configuration file application selects particular authentication mechanism dynamically loading appropriate shared library 
pam widely sun solaris linux distributions 
factotum achieves goals agent approach 
factotum process needs create capabilities network servers run untrusted users plan unix greatly reduces harm done server buggy compromised 
fact factotum implemented unix analogue plan capability device programs su login longer need installed setuid root systems password safe store multiple passwords encrypted file user needs remember password 
solution differs placing storage hardened location network encrypted file liable stolen offline dictionary attack available user computers 
contrast microsoft passport system keeps credentials network centralized extremely target 
important feature passport setting trust relationships merchants outside scope 
architecture identical perlman kaufman newer eke technology 
chose defend mainly outside attacks additional defense files server desired distributed techniques 
conscious choice placing encryption message integrity key management application layer tls just layer layer ipsec 
leads simpler structure network stack easier integration applications important easier network administration recognize applications misbehaving tcp port numbers 
tls suffer relative ipsec possibility forged tcp reset feel adequately dealt randomized tcp sequence numbers 
contrast tls libraries plan require application change write calls simply add lines code startup 

writing safe code difficult 
stack attacks mistakes logic bugs compilers operating systems possible attacker subvert intended execution sequence service 
server process privileges powerful user root unix attacker 
factotum allows constrain privileged execution single process core lines code 
verifying process manual automatic means easier error prone requiring servers 
implementation ideas plan bell labs fourth edition freely available fromhttp plan bell labs com plan 
acknowledgments william josephson contributed implementation password changing 
phil mackenzie mart abadi helpful comments early parts design 
chuck blake peter bosch frans kaashoek mullender lakshman predominantly gave helpful comments 
russ cox supported fellowship fannie john hertz foundation 

bellovin merritt augmented 
encrypted key exchange proceedings st acm conference computer communications security pp 

victor philip mackenzie patel provably secure password authenticated key exchange diffie hellman eurocrypt 

allen tls protocol version rfc 

warwick ford burton kaliski jr server assisted generation strong secret password ieee fifth international workshop enterprise security national institute standards technology nist gaithersburg md june 

david strong password authenticated key exchange com html 

michael kaminsky 
flexible key management sfs agents master thesis mit may 

philip mackenzie private communication 

david mazi res michael kaminsky frans 
kaashoek witchel separating key management file system security symposium operating systems principles pp 

microsoft passport www passport com 

perlman charlie kaufman secure 
password protocol downloading private key proc 
network distributed system security symposium internet society january 
rob pike dave presotto sean dorward bob ken thompson howard trickey phil plan bell labs computing systems summer pp 


rob pike dave presotto ken thompson howard trickey phil name spaces plan operating systems review april pp 
reprinted proceedings th acm sigops european workshop mont saint michel 

eric ssl tls designing building secure systems addison wesley 
isbn 

simpson remote authentication dial user service 
radius rfc april 
ronald rivest butler lampson sdsi simple distributed security infrastructure 
theory lcs mit edu rivest sdsi ps 
bruce schneier password safe www com html 

vipin samar unified login pluggable authentication modules pam proceedings third acm conference computer communications security march new delhi india 

jennifer steiner clifford neumann jeffrey schiller kerberos authentication service open network systems proceedings usenix winter conference dallas texas february pp 


wu secure remote password protocol proceedings internet society network distributed system security symposium san diego ca march pp 


ssh secure login connections internet th usenix security symposium pp 

san jose ca july 
appendix summary pak protocol primes rq multiple take 
parameters may chosen nist algorithm dsa public fixed values 
client knows secret computes hash function yielding random element may computed gcd 
arithmetic modulo 
client gives server ahead time private channel 
start new connection client generates random value computes calls server sends server checks generates random computes mh sends sha server 
client computes verifies sends sha client 
server verifies sides session key sha session 
published version pak server name included initial hash doing inconvenient application server may known various equivalent names 
mackenzie shown equivalence proof adapted cover version 
