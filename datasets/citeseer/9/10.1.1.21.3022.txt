agent oriented modeling graph transformation ralph heckel jochen ster dept computer science university paderborn str 
paderborn uni paderborn de 
agent paradigm seen extension notion active objects concepts autonomy cooperation goal oriented behavior 
mainstream object oriented modeling techniques account aspects 
dedicated techniques agent oriented modeling required concepts notations object oriented modeling extend order support agent specific concepts 
agent oriented modeling technique introduced uml notation 
graph transformation level modeling order capture agent specific aspects underlying formal semantics approach 
concepts technologies agent systems part traditional software agent software development aspect mainstream software engineering 
today software systems implemented object oriented programming language java analysis design systems object oriented modeling languages uml 
order incorporate agent concepts mainstream software development integrated modeling approach object agent systems required 
modeling concepts agents objects complementary roles agents act autonomously driven goals plans sensing reacting environment cooperating agents 
objects encapsulate data structures operations provide services objects 
sense jennings state fundamental mismatch concepts objectoriented developers :10.1.1.10.2242
agent view view objects mere service providers origins paradigms sequential oo programming longer adequate considering concurrent languages java 
modeling abstraction concurrent objects concept active object established similarity agent paradigm 
missing active objects idea goal driven behavior proactivity agents related concept autonomy 
autonomy emphasizes fact agent control research supported esprit working group 
operations called outside methods invoked agent order reach certain goal 
object oriented modeling languages uml provide basis modeling agent systems 
fact number authors propose extensions object oriented modeling languages agent systems :10.1.1.10.2242
approaches suffer problem encountered oo modeling languages lack adequate means describing semantics operations pre conditions effects system configuration 
particular semantics operations relevant modeling reactive behavior way agents sense modify environment 
building notation uml agentoriented modeling technique employs graph transformation rules specifying effect agents operations 
pay special attention modeling cooperation autonomy 
graph transformation rules requirement specification analysis allow capture cooperation agents resulting joint activity 
design phase graph transformation rules specify effect agents local operations 
non determinism inherent rule approach provides convenient model autonomy agents 
underlying formal framework typed graph transformation systems provide natural integration structural dynamic aspects elaborate concepts defining consistency requirements specification analysis design see 
shall discuss detail relevant properties agent systems main concepts modeling approach 
sections concerned main phases software modeling requirements specification analysis design 
section reviews discusses concepts roles object agent oriented modeling section concludes 
continues previous agent systems documented 
agent oriented modeling section outline approach agent oriented modeling 
discuss typical aspects agent systems reactivity autonomy proactivity cooperation describe aspects captured approach 
survey main phases system modeling requirement specification analysis design explain general pattern instantiated case 
difficult find general technical definition term agent important characteristics agents identified distinguish programs objects 
reactivity capability agent perceive environment react changes 
property considered prerequisite purposeful autonomy agents captured concept active objects 
approach agents perceive environment matching left hand see collection surveys introductory text 
sides transformation rules current state system searching occurrence certain pattern 
agents react occurrence application corresponding rule 
autonomy property agents manifests nondeterminism behavior system observed externally 
different objects agents possess autonomous operations automatically triggered messages may invoked agents corresponding situation pattern occurs environment 
autonomous operations applicable particular situation decision operation apply internal agent 
agents proactive meaning activities directed goal 
approach goal driven behavior explicitly modeled 
close relationship external nondeterminism agents behavior decision operation apply thought driven internal desire reach goal 
cooperation agents assumes common goal may negotiated run time 
approach global graph transformation rules order describe combined effect negotiations resulting joint activities group agents 
communication required specified means uml sequence diagrams 
simple typical example agent system describe online banking application order enable sophisticated services customers may assisted personal banking agent pba offers range advanced functionality 
particular pba manages payment bills bill sent pba merchant shop payment bill initiated customer personal banking agent selects customer accounts bill paid 
selection takes account transaction cost account considered 
amount specified bill transfered selected account destination account agents responsible individual accounts 
system just described properties characteristic agent system pba reacts changes environment arrival bill modifies environment actions paying 
acts autonomously behalf customer choosing account bill paid 
agent goal oriented sense aims minimizing transaction costs appropriate account selection 
divide modeling process agent systems typical sequence activities known modeling object oriented systems 
requirements specified informal descriptions system functionality scenarios important interactions 
analysis specification results model requirements captured precisely 
design model behavior described globally analysis model expressed local behavior objects agents 
requirements specification section follow case driven approach 
cases representing main external functions system important internal interactions agents refined typical scenarios described means global graph transformations sequence diagrams 
analysis section agents objects messages attributes links identified cases scenarios specified agent class diagram 
scenarios analyzed order derive complete specification making explicit different alternatives execution case 
semantics graph transformations sequence diagrams shifts optional mandatory behavior execution reaches state satisfying pre condition specified left hand side graph transformation rule interaction follow alternatives 
design section refines analysis model way globally described behavior mapped local specifications behavior agents objects 
refined class diagram introduces additional features particular signatures agents autonomous operations 
local execution order agent operations determined state diagram associated agent class 
effect operations state system described local graph transformation rules 
customer merchant bank initiate payment issue bill minimize transaction cost personal banking agent pba requirements specification select account pay bill fig 

case diagram banking example account agent development customers developers agree requirements software product fulfill 
requirements collected contract readable software developers customers typically computer scientists 
style specification appropriate explains functional architectural requirements means informal diagrams examples 
case diagrams designed exactly purpose 
provide view system identifying main actors main functions system provides 
context agent systems uml case diagrams extended special kind actor square heads representing agents 
goal cases shown clouds order specify goals agents cf 

case diagram example identifies kinds users agents pba accountagent 
way additional architectural requirements distribution system functionality different agents expressed 
cases select account pay bill agents participate internal system 
shown typical uml case diagram 
narrative description cases illustrated typical examples called scenarios system behaves case performed 
methodology scenarios specified complementary ways 
effect case select account described pair instance diagrams shown modeling scenario case 
section pair diagrams shall formally interpreted individual graph transformation representing state change objects agents system 
pba uses acc accountagent uses acc accountagent proposal accepted selected pba uses uses acc accountagent fig 

global graph transformation rule acc accountagent order specify communication actors participating case uml sequence diagrams 
interaction necessary select account offering minimal transaction cost typically realized contract net protocol describes negotiation manager set potential contractors delegation task 
terms example simplified version protocol may informally described follows 
personal banking agent proposals account agent issuing call proposals specifies interest account transaction costs 
account agent receiving call proposals viewed potential contractors able generate proposals perform task 
alternatively account agents may refuse propose 
personal banking agent receives back replies account agent evaluates proposals choice account agent perform task 
agent selected proposal sent acceptance message receive notice rejection 
typical scenario depicted 
scenarios example include possibility account agent proposal proposal accepted 
analysis pba acc accountagent cfp propose acc propose acc reject cfp accept fig 

scenario banking example acc accountagent order serve basis design decisions requirements analyzed refined 
implementation related issues avoided 
similar object oriented analysis refined model structured sub models structural model dynamic model functional model 
structural model agent class diagram specifies types objects agents attributes associations messages 
notationally build class di bill amount int pay pays proposal cost int pba messages propose accountagent prop proposal bill bill uses fig 

class diagram banking example accountagent messages cfp pba pba bill bill accept pba pba prop proposal reject pba pba prop proposal account balance int manages uml agent classes represented active classes bold borders extra compartment messages 
agent class diagram agent classes pba accountagent object classes bill account proposal 
associations connect bills pay accounts manage 
bill specifies amount paid account paid 
messages correspond sequence diagram 
modeled special message compartment agent class 
functional model specifies effect case state system 
section illustrated graph transformation pair graphs modeling scenario case 
formally scenario seen individual test case demonstrated implementation system 
order complete view case effect graph transformation pairs needed 
mechanism required specify enumerate pairs graphs 
theory graph transformation uses pba acc accountagent bill uses pba acc accountagent bill selected uses pba acc accountagent bill pays proposal accepted uses pba acc accountagent bill pays fig 

rules specifying possible result interaction suggests rule approach problem 
graph transformation rule consists pair graphs union defined 
ensures edges appear connected vertices graphs 
left hand side represents preconditions rule right hand side describes postconditions 
analysis rules considered incomplete specifications transformations performed additional unspecified changes permitted 
quite liberal notion graph transition shall strengthened design model notion graph transformation assumes complete specification changes step 
shows rules specifying possible effects case select account 
rule concerned interaction pba execution contract net protocol 
specify possible results binary interaction 
dynamic model complements functional model focusing communication required execute certain protocol 
requirements specification sequence diagrams model message flow agents system 
analysis strengthen semantics diagrams existential universal interpretation 
analogous shift individual transformations universal transformation rules functional model 
sequence diagram associated graph transformation rule provides complete specification interactions performed precondition met 
se pba acc accountagent cfp propose acc accept pba acc accountagent cfp propose acc reject pba acc accountagent cfp fig 

sequence diagrams corresponding rules quence diagrams banking example 
diagram models case proposal accountagent accepted pba second rejection proposal 
third diagram depicts case accountagent answer call proposal 
correspond rules 
sequence diagram activated precondition corresponding rule met 
rules associated sequence diagrams precondition requires account agent connected pba uses link activated message 
precondition cases condition met interaction agents may conform sequence diagrams 
design analysis phase concerned developing model system supposed 
design model elaborates analysis model concentrating question system function 
consequence focus models shifted global view system analysis local view providing basis implementation 
analysis distinguish structural model dynamic model functional model 
structural model class diagram design phase refines class diagram analysis adding particular signatures agent autonomous operations extra compartment provided 
notice difference bill amount int pay pays proposal cost int selected pba operations bill acc prop proposal prop proposal prop proposal prop proposal prop proposal messages propose accountagent prop proposal bill bill uses fig 

agent class diagram sent accountagent bill bill prop proposal prop proposal cfp pba pba bill bill accept pba pba prop proposal reject pba pba prop proposal account balance int operations messages manages bill account int methods specified method compartment objects agent operations autonomous called object agent executed control agent cf 
section 
consequence distinguish agent messages operations case objects notions integrated notion method 
state diagram agent class dynamic model specifies ordering operations agent class may perform 
agents automatically react events environment decide autonomously react transitions labeled event action name operation 
usage statecharts semantically different traditional approaches 
notion protocol state machine comes closest understanding 
consider example statechart accountagent 
state agent may proceed proposed state answering call proposal may decide propose proceed final state 
agent decides internal strategy part model 
functional model operations declared structural model specified graph transformation rules 
dynamic model concerned order operations functional model shows operations change state system 
agent operations may affect part state accessed locally require objects left hand side rule reachable path originating self agent 
example operations pba specified 
operation triggers agent issue requests proposals bill 
pba sent call particular accountagent expressed negative context condition sent link pba bill pays pba acc sent acc acc acc fig 

statecharts agents pba accountagent uses bill pba acc accountagent bill pays pba acc bill pays pba sent cfp uses fig 

graph transformation rules acc accountagent may second rule issuing call 
reception call proposal mes cfp propose acc pba acc accountagent pba acc accountagent bill pays manages acnt account bill pays proposal cost acnt fig 

graph transformation rule manages acnt account sage accountagent may decide send proposal specifying costs required transaction described rule 
alternative rule shown 
pre condition effect removing cfp message 
receiving proposal pba may reject pba propose acc sent acc accountagent pba selected proposal proposal fig 

graph transformation rule acc accountagent bigger cost best proposal received far may record proposal current favorite 
proposal recorded agent stops sending calls 
operations specified 
rule shown 
pba decides received proposals sends current best accept message 
reception message accountagent records proposal accepted 
rejected agent deletes proposal 
roles agent oriented modeling concept roles established object oriented modeling 
life time object may play roles encapsulating certain functionality may change dynamically object evolves 
operations attributes required play role represented role type 
existence object role bill pays pba selected proposal cost bill pays pba selected propose acc bill pays pba proposal cost proposal sent sent selected reject acc accountagent accountagent acc accountagent accountagent fig 

graph transformation rule acc accountagent bill pays accept proposal cost proposal cost pba acc accountagent selected proposal fig 

graph transformation rule depends object 
roles restrict visibility object agent associations objects agents exist attached roles 
agent oriented modeling agent roles capturing goals tasks functions exhibited agent 
wooldridge role associated responsibilities permissions activities protocols defined specific role schemata 
responsibilities comprise conditions execution prescribed sequence protocols 
way interaction roles specified 
wood introduce multi agent systems engineering mase methodology roles introduced fine grained building blocks agent classes capture agent goals design phase 
role serves description functions responsible fulfill order reach assigned goal 
object agent roles restrict behavior state entity part necessary reach goal fulfill single task participate specific interaction 
sketch way roles integrated methodology 
requirements specification actor interactions determined cases participating 
interactions defines role actor encapsulating agent behavior corresponding case 
personal banking agent example assumes role account selector interacting select account case 
relative case account agent takes role possible contractor selection account 
role account agent bill payer transferring money account 
global graph transformation rules sequence diagrams describe functional behavior cases occurrence agent rule diagram corresponds different role 
early stage development roles simplify transition requirement specification analysis 
fact classes analysis model derived integrating role classes encapsulate state behavior necessary participate interactions associated cases 
role classes instantiated object agent classes instances exist connection agent object 
means role instance automatically disappears object agent role depends 
structural point view role relationship similar composition uml 
considering behavior roles resembles inheritance roles access parent features 
roles systematic transition analysis design role contributes global interaction 
interactions realized 
second step behavior corresponding roles coordinated yielding behavior entire class 
way complexity total behavior class participating different interactions structured attaching statecharts individual roles synchronizing theses statecharts 
order concept roles useful integrated syntactically semantically formal agent model 
approach agent oriented modeling uml notation concepts typed graph transformation systems 
extending notion active object object oriented modeling specific support provided characteristic aspects agent systems autonomy goal driven behavior cooperation agents 
theory graph transformation provides mathematical background formalization approach 
example graph processes concepts views graph transformation systems order formalize consistency requirement specification analysis design agent oriented modeling 

andries engels habel hoffmann 
kreowski plump sch rr taentzer 
graph transformation specification programming 
science computer programming 

corradini montanari rossi 
graph processes 
fundamenta informaticae 

heckel ster 
integrating visual modeling agent object oriented systems 
proc 
fourth intern 
conference autonomous agents agents barcelona spain june 

heckel ster 
modeling agent systems graph transformation 
technical report university paderborn dep 
comp 
sci august 
www uni paderborn de cs ag engels papers tr pdf 

heckel ster 
modeling agent systems graph transformation uml requirement specification object oriented design 
gra tra joint workshop graph transformation systems pages berlin germany march 
proceedings available athttp tfs cs 
tu berlin de 

ehrig engels 
kreowski rozenberg editors 
handbook graph grammars computing graph transformation volume applications languages tools 
world scientific 

ehrig 
kreowski montanari rozenberg editors 
handbook graph grammars computing graph transformation volume concurrency distribution 
world scientific 

engels heckel taentzer ehrig 
combined model viewbased approach system specification 
int 
journal software knowledge 

foundation intelligent physical agents fipa 
agent communication language 
fipa specification version www fipa org 
fipa 

franklin graesser 
agent just program taxonomy autonomous agents 
ller wooldridge jennings editors proc 
ecai workshop agent theories architectures languages intelligent agents iii volume lnai pages 
springer verlag august 

harel 
statecharts visual formalism complex systems 
science computer programming 

garijo gonz lez juan 
analysis design multiagent systems mas commonkads 
singh rao wooldridge editors proc 
th int 
workshop agent theories architectures languages atal volume lnai pages 
springer verlag july 

bent kristensen 
object oriented modeling roles 
proc 
nd international conference object oriented information systems dublin ireland pages london 
springer 

ster 
visual modeling agent systems role oriented approach uml 
diploma thesis university paderborn germany 

jennings wooldridge kinny 
methodology agent oriented analysis design 
proceedings third annual conference autonomous agents pages seattle wa usa may 
acm 

object management group 
uml specification version june 
www 
omg org 

rozenberg editor 
handbook graph grammars computing graph transformation volume foundations 
world scientific 

rumbaugh blaha premerlani eddy lorensen 
object oriented modelling design 
prentice hall 

smith 
contract net protocol high level communication control distributed problem solver 
ieee transaction computers number pages 

wood 
overview multiagent systems engineering methodology 
proc 
st international workshop agent oriented software engineering icse workshop limerick ireland 

wooldridge jennings kinny 
gaia methodology agent oriented analysis design 
journal autonomous agents multi agent systems 
