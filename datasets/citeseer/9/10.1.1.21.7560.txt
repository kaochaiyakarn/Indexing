longest common subsequence fragments sparse dynamic programming brenda baker giancarlo 
bell laboratories lucent technologies mountain avenue murray hill nj usa bsb research bell labs com dipartimento di matematica ed universit di palermo palermo italy math 
sparse dynamic programming emerged essential tool design efficient algorithms optimization problems coming diverse areas computer science computational biology speech recognition 
provide new sparse dynamic programming technique extends hunt szymanski paradigm computation longest common subsequence lcs apply solve lcs fragments problem pair strings length resp 
set matching substrings find longest common subsequence symbol correspondences induced substrings 
problem arises application analysis software systems 
algorithm solves problem jm log jm time balanced trees jm log log min jm nm jm time johnson version flat trees 
bounds apply cost measures 
algorithm adapted finding usual lcs log sigma jm log jm balanced trees log sigma jm log log min jm nm jm johnson flat trees set maximal matches substrings sigma alphabet 
sparse dynamic programming technique design efficient algorithms mainly applications problems arising sequence analysis 
term sequence analysis broad sense include problems share common aspects come diverse areas computer science computational biology speech recognition 
typical problem sequence analysis follows strings find distance strings supported part italian ministry scientific research italian national research council 
part done author visiting bell laboratories lucent technologies cost assumptions 
technique concisely described follows 
set dynamic programming dp short recurrences computed associated dp matrix 
recurrences maximize minimize objective function 
sparse set entries dp matrix really matters optimization objective function 
technique takes advantage sparsity produce algorithms running time dependent size sparse set size dp matrix 
best knowledge idea sparsity speed computation sequence analysis algorithms traced back algorithm hunt szymanski computation longest common subsequence lcs short strings 
systematic study sparsity dp algorithms sequence analysis due eppstein 
years additional contributions provided authors see instance 
main contribution provide new tools sparse dp 
generalize quite naturally known hunt szymanski paradigm computation lcs strings 
generalization called lcs fragments yields new set sparse dp recurrences provide efficient algorithms computing 
result obtain new algorithm computation lcs strings compares favorably known algorithms paradigm basic version simple implement hunt szymanski 
addition techniques solve algorithmic problem needed application finding duplication software systems 
case database matching sections code obtained program dup 
notion matching code sections may exact textual matches parameterized matches sense parameterized matches code sections indicate textual similarity systematic renaming parameters variable function names 
typically avoid finding matches short meaningful dup find maximal matches threshold length 
convenient graphical user interface enable scrolling simultaneously source programs way matching sections aligned 
natural line alignment single pair matching sections code problem handle alignment scrolling forward backward pair matching sections matching sections 
solution lcs fragments optimizes alignment multiple matching segments 
informal level problem considered compare results state art sparse dp lcs algorithms 
strings length respectively alphabet sigma loss generality assume sigma lcs problem find longest string 
occur order possibly symbols intervening dual lcs problem find minimum edit distance insertion deletion character cost levenshtein distance 
straightforward transform solution lcs problem solution minimum edit distance problem vice versa 
lcs fragments problem strings set pairs equal length substrings match 
notion match somewhat general sense substrings equal definition equality standard character equality parameterized match 
pair substrings called fragment specified terms starting positions length 
lcs fragments problem find minimal cost pair subsequences successive symbols correspond corresponding positions pair example fragments representing characters strings representing characters strings depending cost measure subsequences solution lcs fragments problem abc corresponds abc fragment corresponds second fragment 
consider cost measures edit distance 
notion match standard strings equal pair levenshtein edit distance 
notion match parameterized match pair strings correspondence defined treat inclusion parameterized match lcs new edit operation 
naturally leads second cost measure cost incurred insertion deletion segment length fragment 
extension cost measure deal full fledged application discussed section 
cost measures lcs fragments computed jm log jm time 
sophisticated data structures johnson version flat trees bound reduces jm log log min jm nm jm 
algorithm second cost measure complex levenshtein cost measure 
set consists pairs maximal equal substrings levenshtein cost measure solution lcs fragments problem usual lcs 
generalizes hunt szymanski paradigm basis algorithm set pairs positions symbols lcs computed lcs fragments log sigma jm log jm time including time computation johnson version flat trees bound reduces log sigma jm log log min jm nm jm 
jm nm time bounds obtain compare favorably best available algorithms computation lcs 
fig 

edit graph strings 
naturally corresponds dp matrix 
bold path gives edit script recover lcs definitions preliminary lemmas finding lcs equivalent finding levenshtein edit distance strings edit operations insertion deletion 
myers phrase lcs problem computation shortest path edit graph defined follows 
directed grid graph see fig 
vertices refer vertices points 
vertical edge non bottom point neighbor 
horizontal edge non rightmost point right neighbor 
diagonal edge gamma gamma 
assume non diagonal edge weight remaining edges weight 
levenshtein edit distance minimum cost path vertical horizontal edges path correspond insertions deletions minimal edit script diagonal edges correspond lcs 
lcs fragments problem corresponds naturally edit graph 
vertices horizontal vertical edges diagonal edges correspond set fragments 
fragment formally described triple represents sequence diagonal edges gamma gamma start point gamma gamma point 
fragment start points denoted start respectively 
fragments correspond maximal matching substrings fragments sequences diagonal edges 
lcs fragments problem equivalent finding fig 

lcs fragments edit graph strings fragments sequences diagonal edges 
bold path corresponds minimum cost path levenshtein edit distance minimum cost path edit graph 
minimum cost path may part certain fragments happens fragment figures 
consider cost measures 
levenshtein cost measure diagonal edge weight non diagonal edge weight 
results generalize case weighted levenshtein edit distance 
simplify presentation ideas restrict attention unweighted case 
suit software application consider cost measure cost incurred traversing horizontal edge vertical edge segment nonzero length fragment 
ease presentation assume sequences edges corresponding different fragments disjoint touch 
algorithms easily modified handle overlapping fragments arise commonly application 
point define coordinates respectively 
refer row column define diagonal number start gamma start 
helpful show need consider paths restricted form 
say segment fragment prefix includes start 
lemma 
consider cost measure horizontal vertical edges cost traversing fragment segment length cost 
point edit graph min cost path fragment segment traversed prefix 
proof 
suppose min cost path satisfy lemma 
construct new path cost fewer non prefix segments argument applied inductively prove lemma 
non prefix segment part fragment rectangle corners start begins exits point new path follows follows side start prefix cost increase replaced part cross number diagonals horizontal vertical edges fewer non prefix segments ut successive fragment segments min cost path satisfying lemma horizontal edges vertical edges 
case stronger statement preceding fragment segment 
lemma 
min cost path satisfies lemma horizontal edge vertical edge successive fragment segments path earlier fragment segment entire fragment 
proof 
lemma fails path min cost path path obtained earlier fragment additional diagonal edge reducing number horizontal vertical edges 
ut levenshtein cost measure section consider cost measure corresponding levenshtein edit distance diagonal edges free insertions deletions characters cost 
point define mincost minimum cost path cost measure 
diagonal edges free proof lemma yields corollary 
corollary 
fragment point mincost mincost start 
corollary reasonable define mincost mincost start 
say fragment left start point start left start horizontal line start 
similarly fragment start point start start vertical line start 
define fragment left start exists undefined 
define visa fragment start exists undefined 
say fragment precedes fragment start start point strictly inside rectangle opposite corners start 
suppose fragment precedes fragment shortest path start diagonal edges cost start gamma start gamma minimum cost path start value plus mincost 
helpful separate part cost depends definition mincost gamma gamma 
note mincost start start 
lemma 
fragment mincost minimum start start defined 
fragment precedes start start precedes fg 

defined mincost gamma 
visa defined mincost visa visa gamma proof 
cases represent minimum costs various possible ways path reach start preceding fragment horizontal vertical edges horizontal edges vertical edges 
ut develop algorithm lemma 
assume existence data structure type stores integers range supports operations insert delete member min successor find larger value max find max value elements stored implemented balanced trees log time operation van emde boas flat trees log log time operation 
johnson version flat trees time operations log log length gap nearest integers structure priority item inserted deleted searched 
general approach algorithm sweepline approach successive rows processed rows points processed left right 
lexicographic sorting values enable done jm log jm time 
alternatively data structure implemented johnson version flat trees just discussed sorting accomplished sequence insertions min sequence successor operations jm log log min jm nm jm time analysis eppstein 
rows columns need contain start point point generally wish skip empty rows columns efficiency 
assume algorithm processes nonempty rows columns exclude empty ones 
compute visa fragment sweepline algorithm 
describe computation visa similar 
sweepline algorithm sweeps successive rows 
assume reached row keep fragments crossing row sorted diagonal number data structure type fragment start calculate fragment left start sorted list fragments case fragment start insert remove fragments data structure implemented balanced search tree total time computation jm log jm 
van emde boas flat trees total time jm log log jm diagonals items stored data structure range jm 
better notice perform data structure homogeneous sequences operations row sequence max operations identify visibility information start points fragments sequence insertions sequence deletions 
case johnson version flat trees show sweep implemented take jm log log min jm nm jm time 
analysis lemma 
main algorithm takes sweepline approach processing successive rows 
follows paradigm hunt szymanski lcs algorithm computation rna secondary structure linear cost functions 
data structure type time stores column numbers fragment associated 
values stored represent columns minimum value decreases compared columns left columns containing point fragment smaller point processed column left 
notice fix row gives partition row terms columns 
row process start points row left right 
start point fragment compute mincost lemma 
note start point fragment computed mincost computed fragment precedes fragment visa 
find minimum value predecessors data structure 
minimum relevant value obtained max operation find max start fragment associated minimum endpoints processed far columns left column containing start fact value minimum value predecessors start points row processed process points 
point fragment processed updated necessary represents new minimum value column successor deletion operations may needed find remove values superseded new minimum value 
precomputed fragments algorithm implemented jm log jm time balanced trees jm log log jm time van emde boas data structures 
ideas eppstein re schedule operations processed row perform sequences homogeneous operations type max insert delete member 
fact analysis eppstein show phase algorithm takes jm log log min jm nm jm time 
note fragment pointer may kept fragment min cost path arrived start lcs minimal edit script easily recovered jm space time 
theorem 
suppose strings set fragments relating substrings 
compute lcs fragments jm log jm time jm space standard balanced search tree schemes 
uses johnson data structure time reduces jm log log min jm nm jm 
proof 
correctness follows lemma time analysis discussion preceding statement theorem 
ut substrings gamma gamma maximal match equal equality extended right left 
maximal match substrings conveniently represented triple corresponding sequence diagonal edges edit graph starting gamma gamma gamma gamma 
set maximal matches solution lcs fragments problem gives solution usual lcs problem 
techniques compute set maximal matches log sigma jm time jm space 
obtain corollary 
corollary 
strings compute lcs strings log sigma jm log jm time jm space standard balanced search tree schemes 
uses johnson data structure time reduces log sigma jm log log min jm nm jm 
cost measure unit cost fragment segments section consider cost measure segment fragment traversed cost regardless length 
insertion deletion incurs cost 
point define mincost minimum cost path cost measure 
solution previous section breaks new cost measure 
problem minimum cost path point fragment may able traverse cost traversing 
failure ramifications proof lemma assumed cost path point computed mincost concern path similarly visa 
fortunately minimum cost reaching point fragment cost reaching fact follows proof lemma 
fragment define mincost mincost start 
minimum cost reaching point start path uses nonempty segment wish consider minimum cost reaching start previous fragment take account complications new cost measure 
define visa 
corresponding define mincost gamma gamma 
cost sequence horizontal edges sequence vertical edges change diagonal number convenient define mincost gamma mincost separate costs dependent lemma corresponds lemma 
lemma 
fragment mincost start minimum start start defined 
fragment precedes start start precedes fg 

defined defined follows exists fragment left start gamma gamma 

visa defined defined follows exists fragment start visa gamma visa gamma gamma visa gamma 
proof 
proof similar lemma cases complicated 
particular covers cases paths reach start horizontal edges previous fragment 
case path traverses case passes point traverse segment 
cost lower case need consider fragments left start result cost case 
cost sequence horizontal edges change diagonal number need consider fragments left gamma 
condition argument similar 
ut lemma allows restrict attention fragments particular values describe approach particular value approach similar 
set fragments value need store information relevant fragments way enables answering queries fragments left start particular fragment ask exists start start 
strategy keep track minimum diagonal number fragments crossing row value data structure type defined previous section store endpoints intervals minimum diagonal number changes endpoint store diagonal number determine fragment set left start query find maximum stored value start retrieve corresponding diagonal number compare 
construction case similar 
data structure built dynamically fragments processed values available 
separate data structure kept distinct value possibility keep pointer data structures arrays space range values gamma 
alternatively instances store distinct values occur associated pointers 
total space jm 
algorithm proceeds follows 
compute visa 
main sweepline algorithm sweeps successive rows data structure keeps track columns minimum value decreases compared columns left 
new value computed mincost start new algorithm applies lemma data structure 
values mincost fragments start points row computed task update data structures storing sets values individual data structure value 
updated points row values fragments containing points 
data structures type implemented balanced trees johnson version van emde boas flat trees time bounds discussed previous section jm operations perform 
consequently obtain result 
theorem 
suppose strings set fragments relating substrings 
standard balanced search trees compute lcs fragments jm log jm time jm space cost measure insertion deletion fragment segment cost 
uses johnson data structure time reduces jm log log min jm nm jm 
proof 
correctness follows lemma time space analysis discussion algorithm 
ut extensions cost measures software application database matches may include exact matches corresponding substrings identical parameterized matches corresponding substrings contain different variable names 
may desirable assign cost exact matches cost parameterized matches exact 
straightforward modify algorithm previous section allow modification changing time bounds 
weights may long cost fragment cost insertion plus deletion lemma fail 

aho hopcroft ullman 
data structures algorithms 
addison wesley reading ma 

apostolico 
string editing longest common subsequence 
rozenberg salomaa editors handbook formal languages vol 
pages berlin 
springer verlag 

baker 
theory parameterized pattern matching algorithms applications 
proc 
th symposium theory computing pages 
acm 

eppstein galil giancarlo italiano 
sparse dynamic programming linear cost functions 
acm 

eppstein galil giancarlo italiano 
sparse dynamic programming ii convex concave cost functions 
acm 

farach thorup 
optimal evolutionary tree comparison sparse dynamic programming 
proc 
th symposium foundations computer science pages 
ieee 

gusfield 
algorithms strings trees sequences computer science computational biology 
cambridge university press cambridge 

hirschberg 
serial computations levenshtein distances 
apostolico galil editors pattern matching algorithms pages oxford 
oxford university press 

hunt szymanski 
fast algorithm computing longest common subsequences 
comm 
acm 

johnson 
priority queue initialization queue operations take log log time 
math 
sys 
th 

kruskal sankoff editors 
time wraps string edits macromolecules theory practice sequence comparison 
addison wesley 

miller myers 
chaining multiple alignment fragments sub quadratic time 
proc 
th acm siam soda pages 

myers 
nd difference algorithm variations 
algorithmica 

van emde boas 
preserving order forest logarithmic time 
info 
proc 
lett 

waterman 
computational biology 
maps sequences genomes 
chapman hall los angeles 
