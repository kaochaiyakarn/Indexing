information appliances integrating information appliances interactive workspace today computing environments design support interaction person computer 
user sits workstation laptop holds personal digital assistant pda focusing single device time devices linked synchronized 
collaboration occurs network mail shared files robust cases explicitly designed groupware 
infrastructure centric settings hand people interact rich environ platform independent ment includes information sources white approach integrating boards computers physical models 
information appliances simultaneously move flexibly quickly 
iroom interactive integrated computer environments existing today tend workspace 
highly specialized application specific software 
interactive workspaces project stanford explores new possibilities people technology rich spaces computing interaction devices different scales 
includes faculty students areas graphics human computer interaction hci networking ubiquitous computing databases draws previous areas 
design experiment multiuser environments new architecture easy create add new display input devices move kinds computing device support facilitate group interactions 
way today standard operating systems feasible write single workstation software uses multiple devices networked resources constructing may june armando fox brad pat hanrahan terry winograd stanford university higher level operating system world ubiquitous computing 
combine research infrastructure ways flexibly configuring connecting devices processes communication links research hci ways interacting heterogeneous changing collections devices multiple modalities 
interactive room iroom infrastructure described article brand new physical plant room constructed summer room operational time late september 
report early strategy integrating pdas infrastructure 
application target areas chose focus current augmented dedicated space meeting room individual office home tele connected set spaces concentrate task oriented entertainment personal communication ambient information 
section describe initial research goals terms specific applications developed 
applications serve motivating examples programming mechanisms described sections 
photo current iroom configuration illustrates basic room hardware smartboard displays bottom projected table front projected non input responsive screen variety wireless mice keyboards pdas interacting screens approximately pcs visible providing computing rendering display server capabilities 
interest multimodal input forms basis investigation human centric interaction contextual information provided software observers integrated identify user intent multiple input sources modalities 
focus remains ieee person task integrated multiple devices device bound applications 
architecture easy application designers mix match devices way best enhances interaction affordances user 
include large touchscreen devices ordinary laptops workstations pdas 
initial explorations area wanted ability rapidly prototype new applications new usage scenarios existing applications particular integrate pdas application usage model 
rest article describes specific strategies experience building prototypes date 
applied techniques areas 
involves augmenting widely deployed legacy applications web browsers desktop productivity tools collaborative behaviors ability handle multimodal input 
second focuses pdas remote controllers logical physical entities iroom 
augmenting legacy applications 
immediately starting design new applications explicitly written interact pdas focused augmenting existing applications 
example smart powerpoint student project iroom seamlessly integrates multiple displays available workspace provide speaker presenting powerpoint slides creative space 
supports audience laptops pdas handheld devices participate discussion allowing browse information annotate communicate speaker rest audience 
audience members view outline presentation thumbnails details individual slides preview slides review slides post questions integrated presentation store meta information presentation mail addresses urls forth 
presentation author script desired behaviors example onscreen slide layout advance separate authoring tool integrates powerpoint rely interactive iroom 
built default behaviors 
directly inspired application pioneering classroom project describe infrastructure centric approach resulted lighter weight implementation 
universal interactors 
pda devices control physical devices applications running room 
prior explored applications devices export canonicalized descriptions interfaces permitting fly creation user interface export handheld device 
java room display manager shows list box various potentially interesting urls schematic screens room 
users drag drop urls desired screen view corresponding web page display 
meetings provides convenient way participants take advantage display surfaces displaying information requiring presentation advance 
wrote versions application remotely controlling projectors lights room described section 
number projects developing interactive workspaces different underlying software architecture 
example environment built gmd ipsi darmstadt physically resembles interactive workspace 
includes interactive electronic wall dynawall back projected touchscreen displays interactive table bottom projected display computer enhanced chairs incorporate docking wireless laptops passage mechanism uses physical tokens represent information objects 
software philosophy differs approach 
build software environment tools incorporating preexisting interfaces applications 
beach software platform built smalltalk object oriented framework called coast synchronizing multiple simultaneous access objects 
enables develop sophisticated groupware envi ieee computer graphics applications information appliances may june human computer interaction focus research agenda leads interesting notion application portability applications portable devices similar usage models 
ronments depend object synchronization support standard unix windows applications regular components environment 
contrast chose leverage existing applications possible 
wanted maximize impact minimize resources expended constructing scaffolding needed conducting interesting hci applications research iroom 
meta goals specific functionality required support pda applications desiderata pda integration involve robustness maintenance 
believe primary importance benefit adapting infrastructure projects 
hardware software diversity 
support diverse array pda devices similar ubiquitous computing gadgets pc controlled lighting programmatic interface surround sound system room forth 
extent possible programming infrastructure shield application developers having deal directly hardware protocol heterogeneity 
hci focus research agenda leads interesting notion application portability applications portable devices similar usage models 
research standpoint windows ce palm sized pcs palm pilots considered device type operating environments programming models differ usage models similar 
contrast sketchpad sized jupiter class wall sized run microsoft windows operating systems clearly usage models differ markedly 
programming environment reflect hci centric notion portability 
legacy application support 
want interact unmodified legacy applications web productivity computer aided design domain specific tools pdas 
emphasize unmodified don general source code legacy appli cations 
researchers benefit iroom software having obtain specialized versions applications 
leverage 
historically pda programming proved awkward difficult programmers desktop applications part limited programming environments nontrivial resource constraints pdas compared desktop counterparts 
facilitate application prototyping pdas greatly reducing level expertise required implement simple behaviors 
time want provide sufficient flexibility advanced programmers prototype design sophisticated pda user interfaces way permit reusing efforts 
realize goals favored platform neutral languages development environments example java 
adapted widely deployed protocols infrastructures building new applications lower level specialized protocols expense efficiency web applications web guis custom client server applications specialized guis 
extended strategies pdas relatively 
functionality 
entering iroom doing useful require user expert organization software infrastructure 
possible software self repairing face simple transient faults 
similarly application programmers want write fairly simple applications add collaborative behaviors existing applications understand entire software infrastructure 
infrastructure centric approach ubiquitous computing large body goes names ubiquitous pervasive mobile computing 
people terms loosely interchangeably find useful categorize contribution degree infrastructure centric 
mean ubiquitous computing device pda strong assumptions environment availability quality network connectivity availability quality computation embedded infrastructure assist pdas interacting rest environment 
example consider group pda equipped users entering room 
share notes user taken pda 
solution pda software assume little infrastructure device able locate discover presence devices establish participate small ad hoc network physical communication agree distributed protocols information exchange 
solution formidable engineering challenges may suit scenarios assume availability single centrally managed resource rich infrastructure 
example users weren part common user community administrative security concerns prevent enjoying common infrastructure 
different solution assumes room users enter centralized wireless base station logically centralized software components facilitate communication data interchange devices 
clearly approach removes burden individual devices assuming infrastructure assumption holds 
call scenario infrastructure centric scenario 
chose infrastructure centric scenario reasons 
focus pdas specific location iroom 
reasonable collocate network gateways servers room keep highly available room fixed centrally managed 

common case iroom users fact belong single community 
provide services visitors visitors willing install minimal software devices 
visitors infrastructure approach proves advantageous minimizes amount functionality visitor install device order participate iroom 

leverage large body existing successfully addressed specific pieces pda problem infrastructure centric solutions 
example information access solutions browser www com permit accessing standard web pages unmodified pda including graphics forms 
existing technology building blocks sophisticated applications 
note high level functionality resides infrastructure software 
infrastructure assumption software hardware raw network connectivity 
substantial literature exists infrastructure software approaches greatly simplify ubiquitous computing seminal parctab project generalized infrastructure support web applications thin low bandwidth clients 
research projects concentrate exclusively software frameworks needed deploy infrastructures 
information appliance programming approaches examples pda arsenal currently includes standard palm iii devices clio windows ce devices touch sensitive screens keyboards extendable create device hidden create sketchpad device wavelan pc cards windows ce palm sized pcs form factor approximately palm devices higher resolution screens assume room centralized wireless base station logically centralized software components 
clearly removes burden individual devices 
call scenario infrastructure centric scenario 
versus support bit color versus bit grayscale hp jornada handheld pc model unfolds keyboard screen equipped wavelan pc card variety notebooks running windows linux equipped wavelan pc cards palm devices palm sized windows ce devices browser virtual machine installed 
iroom part gates computer science building ip network 
addition ethernet taps serial cables connected point point protocol ppp server iroom provides wireless ethernet access wavelan ieee base stations 
palm iii ppp serial cables devices including iroom team members laptops support wavelan 
communication uses protocols tcp ip 
event heap primary software abstraction iroom event heap 
event heap resembles traditional gui event queue important differences multiple entities subscribe event stream enabling multicast style groupware applications 
events auto expire eventually garbage collected heap consumed making unnecessary event senders verify receivers 
event data structure largely self describing extensible events subclassed explicitly informing entities changes class hierarchy 
motivate choice event heap mechanism explicit client server couplings 
functionally event heap tuple space mechanism entities iroom communicate 
fact ieee computer graphics applications information appliances may june lets users construct web sites links cause destination page appear iroom screens just screen displaying page containing link 
current implementation tspaces 
entities post events event heap query event heap presence events matching template subscribe notification entity posts events matching template 
devised naming schemes identify intended source receiver classes relevant event fields 
concreteness see table details event heap data structures including required fields currently supported event types 
created event heap procedure interfaces java 
call underlying tspaces code uses socket communications invoke tspaces server process running machine iroom 
discussion relevant iroom applications event heap degree communication mechanism 
application aware iroom entities post subscribe event heap events 
applications communicate event heap directly java library wrappers tspaces calls indirectly gateway 
gateways provide protocol conversion allows non tspaces clients effect limited communication event heap 
describe clients web interface event heap section clients lightweight support full java virtual machine vm implementation section specific limitations imposed type gateway compared direct communication path event heap 
illustrates direct indirect communication paths iroom entities event heap 
approach web front plus infrastructure proxy domain pda usage includes remote control universal interactor applications valuable leverage web advantages familiar user interface widgets mature development authoring tools extensive deployed infrastructure ability deploy new infrastructure example new servers shelf commodity hardware software 
created application called usher behaves server sole purpose convert formed get post requests operations event heap 
words tunnels event heap remote procedure calls 
usher currently implemented java servlets plug standard java supporting web servers 
post event event fields values encoded fat url get done get form submissions post form submission 
usher parses submission posts appropriate event event heap 
query event heap events matching template template encoded fat url post form event data returned encoded destination page form request 
mechanism usher invoked action causes link followed user clicking button user link redirect 
encoding event posting specify url page returned event successfully posted event heap means web links set trigger event placed event heap send local browser new page 
essence usher provides limited way interact event heap understandable existing theshelf web browsers controllable standard web pages links forms 
interact usher pda requires pda able run web browser download allow interaction standard html pages forms 
fortunately browser exists handles secure insecure html text forms images image maps basic web content types 
handle dynamic html client side scripting java javascript web applications pdas limited static content 
web client service free commercial transformational proxy gateway research described transparently fetch pages destination servers convert form viewable pda transmit pda 
illustrates web interface event heap standard desktop web browser netscape navigator pda web browser 
example 
technique just described created technology called iroom 
lets users construct web sites links cause destination page appear iroom screens just screen displaying page containing link 
displays room machine driving display running simple daemon subscribes special events event heap causes browser running display visit url encoded event starts browser needed 
event heap application knows format events trigger display room show specified web page 
enabled web pages constructed fat urls submit form request usher generate event encapsulating link url follow target screen table 
event heap details 
mandatory event fields currently supported event types opcode indicates type fields expect multi browse specify urls applications load target machine participants known projector commands turn switch projector inputs groupid automatically view change causes viewer rotate views controlled allow application grouping targeting events time live events cleared heap new image causes application load specified image long posting read consumed number accesses event removed specified mouse keyboard retarget mouse keyboard number accesses machines pda application event heap client server html form submission pda application web gateway stanford ucb ninja ibm almaden java servlet converter desktop application web netscape tspaces server display page 
controller requires special support pdas participate class citizens running browser 
currently running meetings 
moderator constructs page choose applications web pages bring display meeting progresses 
displaying control page pda permits screen real estate large displays group content leaving control capabilities moderator pda 
enhance html socket desktop application java event heap tspaces client event heap servlet desktop application event heap java glue tspaces client tspaces various paths event heap 
pda web pathway 
converted powerpoint presentations 
control page created containing links step presentation 
link encodes mapping slides displays particular point presentation 
note page information link output screen created allowing user control page display information screen point meeting 
example projector controller 
schema generating events fat urls quite general able mechanism ieee computer graphics applications information appliances part projector control web page uses 
may june iroom projector control page turn projector turn projectors null null null null null turn smartboard null turn smartboard null turn smartboard null turn table null turn front null switch table laptop drop display switch projectors laptop drop null null null null null switch smartboard laptop drop null switch smartboard laptop drop null switch smartboard laptop drop null switch table laptop drop null switch front laptop drop null build web page reproduced part allows control various room projectors turn projectors remotely control multiplexer determines machine drives projector forth 
currently interface stripped clicking various textual links causes actions happen simple decorate interface form elements image maps 
url passing gateway event heap enabled rapid prototyping style remote control application 
note application run standard laptop desktop web browser pda 
discussion 
simple mechanism obvious drawbacks 
example open web pages start applications currently close web browser windows kill running applications general take control running application started 
proved useful variety tasks mentioned implemented entirely simple event heap mechanisms existing web infrastructure 
creation pages properly constructed fat urls authoring pages requires programming skills 
html user interfaces known drawbacks 
transformations done service relevant side effects control widget layout limited ability client side scripting kind lost 
restriction implies user action requires roundtrip server result action indicated pda screen rendering method useless interactions action perception coupling tight requires low latency example pointer tracking dragging finger pda screen 
method useful applications remote controls 
obvious significant drawback approach asynchronously push events way pda best pda periodically poll events refreshing web page viewed 
impossible write applications state changes iroom entity cause immediate state changes pda 
hand advantages html approach prototyping clear new applications require compile install cycle applications desktop browsers pdas application designers extensive familiar web tools design application need tightly integrate application iroom infrastructure example need publish pages specific server 
advantages web front applications iroom showcase aggressive embracing infrastructure computing 
obvious leverage existing standards servers converting web data protocols event data transmitted event heap native java interface 
obviously interestingly transformational proxy gateway requests routed hosted machine iroom machine stanford 
shared publicly available service hosted cluster workstations santa clara 
offers strong case computing infrastructure illustrates ability exploit existing infrastructure services gives huge advantage leveraging entire set solutions desktop web browser compatible access iroom mechanisms directly domain pdas 
pages embedding html links forms addressed usher published don need tightly integrated iroom infrastructure 
interesting consequence aggressive adoption approach ip firewall iroom stranger publish web page server pull pda wireless modem metricom ricochet cdpd surf published page world cause lights iroom blink number amusing events 
working crisp description desired security model iroom applications investigate flexible security authentication mechanisms 
approach pseudo native code plus infrastructure translator virtual machine www com method pda integration 
proper subset java virtual machines available palmos windows ce devices 
includes class files common userinterface widgets menus buttons class library lets applications run standard desktop pcs include java runtime 
legal application legal java application applications written way run desktop pda environments 
unfortunately memory cpu speed required support ondemand class loading serialization full generality automation supervisor required true remote method invocation rmi support exceed resources current generation pdas 
solution comes project exploring infrastructure computing ninja project uc berkeley 
software component project lightweight lines stateless active proxy module lightweight lines client stub enable client proxy exchange limited repertoire messages limited subset rmi 
encodes specific types messages minimalist communication protocol marshalling rules providing general class loading serialization facility 
proxy side parses messages converts remote procedure calls small number systems supported including tspaces 
remote invocation systems supported jini secure implementation java rmi 
converts messages tspaces messages forwards client 
application designer writes arbitrary code runs pda uses client stub class tspaces calls proxy communicate event heap 
stub written resemble native java rmi methods clients source communicating event heap identical java source communicating event heap normal java rmi 
event heap infrastructure machines keeps copy proxy side running 
application designer uses standard java development kit jdk plus tools provided distribution create runnable application installed pda 
example smart powerpoint 
application described section consists distinct components presentation management authoring presentation tool powerpoint event heap automation smartboard powerpoint authoring system pda viewer annotation program 
individual pieces interact powerpoint office automation set function calls lets programmers control microsoft office applications 
see 
presentation management authoring system consists presentation manager running presenter machine supervisor tracks available displays room display controller daemons run large screen display iroom 
specifically initialization presentation outline set thumbnail slides requested power point presentation manager create interface presentation 
presentation various displays directed events update slide requested screen point presentation 
inspired pda client runs palm sized pcs 
users view annotate copy presentation exchange comments questions presentation 
pdas running viewer application notified events presentation manager available presentation response download slide thumbnails presentation outline meta information extracted presentation manager 
see page 
pda user jump slide presentation annotations currently private visible large display screens 
questions posted events event heap viewed responded pda users running viewer application 
communication pda client event heap mediated architecture 
discussion 
proxy proxy uses standard wide area transports tcp remote invocation client server side 
theory run machine event heap paths 
ieee computer graphics applications information appliances event heap paths pda viewer application 
may june ppt server ppt processor powerpoint presentation presentation information thumbnails outline internet infrastructure 
efficiency simplicity proxy small lightweight process run iroom infrastructure machines 
machines include various facilities keep certain important daemons proxy event heap server running times restart automatically crash reboot forth 
limitations web front approach vanish approach 
arbitrary behaviors coded including ability asynchronously notified subscribe specific events 
applications ported java environment platform supports vm currently palm windows ce 
method affords tremendous flexibility cost significantly programmer familiar java compile install run cycle complicated tedious 
approach pda native code types interaction require low level control user interface communication method 
initial projector control application required performance user interface flexibility possible ppp network connection standard palmos widgets 
example center slider projector user interface see control possible projector attributes 
projector control application consists lines client source code handle low level serial communications manage complex screen widgets including sophisticated slider widget server side receive incoming serial packets palmpilot send commands projectors 
begun second version projector controller approach connecting client server event heap presentation information event heap current presentation event current presentation event question events pda proxy ppp communication 
shows screen shots second version currently limited functionality compared version 
far basic controls connection server lines source code dedicated positioning widgets display 
hand user interface rendering slower precise measurements 
flexible slider widget available standard widget set simpler intuitive widgets suffice 
projector controllers illustrate fundamental trade flexibility performance greatly simplified application development 
initial evaluation non pda specific approaches discussed web front applications custom applications implicitly assume device enjoys relatively fast internet connection 
currently rely combination wavelan ppp serial cables achieve 
investigating infrared bluetooth 
note type application designed recover sustained network outages 
network computers applications deal disconnection graceful way 
fundamental design decision design software infrastructure 
believe justified hardware perspective inexpensive reliable wireless communication real getting better software perspective prefer concentrate providing robust highly available software infrastructure iroom precisely screen shots native code version projector control application palm pilot 
slider appears tick left gray box middle right depending particular attribute settable single projector settable group projectors settable 
tremendous simplification affords architecting solutions problems pda access 
note exists substantial technology facilitate operation sporadically connected disconnected pdas 
holds particularly true commercial world vast majority pda applications date feature internet access synchronization desktop applications explicitly synchronize disconnect usage model 
haven explored utility applications iroom believe truly interactive applications pdas essentially connected lie closer research goals interactive workspace project 
lessons experience far evaluating learned experience far need consider robustness infrastructure success infrastructure centric approach implementation 
design robustness 
event heap central abstraction software infrastructure came directly desire promote infrastructure software robustness class goal 
event heap enables improved robustness decoupling communicating applications 
establishing tight client server bindings bindings number peer components tight group prefer indirect communication event heap reasons applications deal situations server failures application level stronger assumptions lower level communication mechanisms event heap available 
particular generally easier write code handle case desired recipient responded posted event write code handle case event posted due lower level failure 
event heap enables broadcast style communication required group applications requiring clients engineer group communication explicitly 
conventional communication mechanisms including active messages client server remote procedure call strong group membership explicit joins leaves implemented top event heap needed albeit efficiency cost 
decoupling provided event heap promotes better fault containment robust applications default 
possible write brittle code event heap difficult 
observed resilience action visitor demos applications demonstrated nature applications typically autonomous components running various machines 
watched visitor manually kill components unwittingly tapping close box window get way remaining components continue function gracefully 
specifically don freeze lock machine responding user input 
feel start providing tools building distributed applications robustly coexist legacy applications novice users 
infrastructure centric approach 
pda programming strategies reflect infrastructure cen new projector controller written running palmpilot 
ieee computer graphics applications information appliances may june computing philosophy proxy stanford premises effectively critical part pda enabling infrastructure 
re working deploying proxy transparently intercept rewrite existing web pages browsable multiple displays room 
high level mechanisms take advantage particular exploiting transport simple events prototyping fast 
choose simple mechanisms implement carefully 
web url passing certainly paid trying get room running 
real reason success simplicity event mechanism unidirectional nature bidirectional mechanisms built top lends simple html forms instantiation 
events self describing embedding urls isn difficult 
similar arguments apply constructing glue connecting microsoft office automation event heap application 
clearly benefit reusing simple mechanisms ability widely deployed tools netscape navigator microsoft powerpoint experiment new collaborative behaviors 
expect enhance impact usefulness researchers area 
early far event heap reasonable conceptual model implementable robust way 
addition applications described article student projects event heap despite lack thorough documentation example code 
students easily grasped conceptual programming model gateway mechanisms event heap usher web interface ms office 
experience keeping conceptual vocabulary programming deliberately limited simple event heap model brought real benefits robustness straightforward programming model portability ability leverage widely deployed tools protocols ms office web 
infrastructure centric part approach key moves programming complexity infrastructure tends stable change slowly device technology 
open issues far iroom open environment 
open mechanism event heap doesn enforce authentication 
applications certainly provide authentication secure connections application level leaves event heap open attacks denial service flooding irrelevant events 
worse application level security cumbersome provide experience arenas suggests programmers simply ignore 
re investigating uc berkeley ninja infrastructure host iroom services hosts proxy programming scenario 
ninja services accessed secure authenticated remote procedure calls public key certificate authority infrastructure authentication tokens distributed separate key distribution center 
relatively mundane issues involving pda wireless communications hampered 
particular getting fast local area wireless networking wavelan working palm devices windows ce palm sized pcs nightmare 
portable software approaches allowed deploy ps pc targeted applications clio laptops easily equipped wavelan 
reason wireless connectivity palm sized devices improves portable approach allow migrate easily 
new initiative computer science department stanford aims aggressively adopt bluetooth short range wireless technology variety projects 
expect participate initiative gains momentum hope experience integrating bluetooth time issue reaches print 
event heap performance low level events pointer tracking currently unacceptable event post event handling latencies ms know tspaces group ibm almaden research center working improving performance tspaces chosen concentrate effort problem right 
furthermore written optimized event fast path code currently handle low level events latency perception threshold 
iroom booted time months ago initial experience encouraging fun 
event heap far proven capable flexible abstraction communication 
ability access web front reduced subset java called helped quickly prototype applications integrate existing room entities pdas task traditionally ranged awkward technically daunting 
basic infrastructure place expect pace research accelerate 
look forward testing validating architectural choices 
acknowledgments interactive workspaces project result efforts students name see graphics stanford edu projects exhaustive list complete project information 
students contributions article henry berg martin jonsson shankar rao 
john gerth susan shepard staff support keeps project running maureen stone describe ideas submission despite early stage designers implementors rustan eklund hui huang rama stephen sorkin krishna roy want patience referees editorial staff ieee cg helpful suggestions 
described supported doe nsf graduate fellowships donations equipment software intel ibm microsoft 

winograd human centered interaction architecture appear human computer interaction new millennium carroll ed addison wesley reading mass press available working graphics stanford edu projects papers 

abowd classroom experiment instrumentation living educational environment ibm systems vol 
oct pp 


truong abowd brotherton personalizing capture public experiences proc 
th ann 
acm symp 
user interface software technology acm uist acm press new york nov pp 


hodes composable ad hoc mobile services universal interaction proc 
third int symp 
mobile computing communication acm mobicom acm press new york sept pp 


streitz land interactive landscape creativity innovation proc 
acm conf 
human factors computing systems chi acm press new york pp 


adams infrared network mobile computers proc 
usenix symp 
mobile location independent computing usenix assoc berkeley calif aug 

fox adapting network client variation active proxies lessons perspectives ieee personal communications invited submission vol 
aug pp 


gribble multispace evolutionary platform infrastructural services proc 
usenix ann 
tech 
conf usenix assoc 
berkeley calif june pp 
ninja cs berkeley edu pubs pubs html 

wyckoff tspaces ibm systems vol 
aug pp 
www almaden ibm com cs tspaces 

fox experience top gun proxy graphical web browser usr palmpilot proc 
ifip middleware springer london uk sept pp 

armando fox joined stanford faculty assistant professor january getting phd university california berkeley researcher wireless mobile computing project 
research interests include design robust internet scale software infrastructure particularly relates support mobile ubiquitous computing user interface issues relat ed mobile ubiquitous computing 
fox received massachusetts institute technology university illinois 
acm member founder division puma technology 
brad phd candidate department electrical engineering stanford university 
holds degrees electrical engineering computer science cornell university masters degree computer science university birmingham england masters degree electrical engineering stanford university 
past done research genetic programming computer networking currently student leads interactive workspaces project stanford 
terry winograd professor computer science stanford university 
done extensive research writing design human computer interaction 
winograd directs project people computers design teaching research program human computer interaction design 
principal investigators stanford digital libraries project interactive workspaces project 
founder action technologies founding member computer professionals social responsibility past national president 
consultant interval research editorial board journals including human computer interaction personal technologies information technology people 
pat hanrahan canon usa professor computer science electrical engineering stanford university teaches computer graphics 
current research involves visualization image synthesis graphics systems architectures 
developed volume rendering software chief architect renderman interface 
received university teaching awards received academy award science technology spirit america creativity award siggraph computer graphics achievement award 
elected national academy engineering 
readers may contact fox fox cs stanford edu 
ieee computer graphics applications 
