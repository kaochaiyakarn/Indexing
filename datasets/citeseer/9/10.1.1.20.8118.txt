class polymorphism type inference mark jones department computer science university nottingham languages ml haskell encourage view values class entities passed arguments results functions stored components data structures 
languages offer parametric polymorphism allows values behave uniformly range different types 
combination features supported polymorphic values class 
restriction attributed dependence languages type inference contrast expressive explicitly typed languages system support class polymorphism 
uses relationships types logic develop type system fcp supports class polymorphism type inference class datatypes 
immediate result expressive language long term implications language design 
programming languages gain flexibility orthogonality allowing values treated class entities 
values passed arguments results functions stored retrieved components data structures 
functional languages implies values stored data structure passing arguments constructor functions retrieved selector functions 
languages ml haskell new types appear fourth annual acm sigplan sigact symposium principles programming languages paris france january 
copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org university park nottingham ng rd england 
mpj cs nott ac uk class value specified giving names types constructors 
example definition data list nil cons list introduces new unary type constructor list constructor functions nil list cons list list pattern matching allows definition selectors head list head cons xs useful operations lists length list int length nil length cons xs length xs 
functions polymorphic types indicate uniform manner independently type elements lists concerned 
examples illustrate flexibility polymorphic type systems 
important property languages hindley milner type system general principal types functions inferred automatically types constructors nil cons 
need type annotations 
time typing discipline provides guarantee soundness type security execution typed program go wrong combining attractive features hindley milner type system adopted basis number different programming languages 
hindley milner type system significant limitation polymorphic values firstclass 
formally captured making distinction monomorphic types polymorphic type schemes 
universal quantifiers signalling polymorphism appear outermost level type scheme quantified variables instantiated monomorphic types 
put way class values monomorphic type 
applications limitation considered reasonable price pay convenience type inference 
example able pass particular monomorphic instances polymorphic values functions polymorphic values 
hand comparisons explicitly typed languages system support class polymorphism reveal significant differences expressiveness 
see number practical examples sections class polymorphism essential ways coded standard hindley milner type system 
show polymorphic values class objects language effective type inference algorithm provided prepared package datatype components 
constructs build extract components serve alternative type annotations allow define class polymorphic values sacrificing simplicity convenience type inference 
notation different special constructs package unwrap polymorphic values new 
example system uses type abstraction build polymorphic values type application instantiate 
contrast approach standard presentation system requires explicit type annotations bound variable type inference problems implicitly partially typed variations system undecidable 
approach inspired rules predicate calculus convert logical formulae prenex form quantifiers outermost level 
leads system allows universal existential quantifiers types datatype components 
provides support class polymorphism deal examples class datatypes style suggested perry refined ufer 
main subjects covered remaining sections follows section shows ideas logic develop type system allows datatypes components types include universal existential quantifiers 
refer type system fcp mnemonic class polymorphism 
section illustrates expressiveness fcp 
examples include representation booleans church numerals facility monads class values treatment stacks datatypes pierce turner representation objects existential types 
examples tested prototype implementation fcp developed author 
section gives formal definition fcp including treatment special syntax constructors pattern matching 
type inference fcp described section 
section highlights correspondence uses constructors selectors fcp uses type abstraction application respectively system defining appropriate collection datatypes show system program implemented term fcp 
section describes background fcp discusses relationship largely orthogonal extensions hindley milner typing 
quantified component types consider simple datatype definition data introduces new type constructor constructor easily defined selector unc type unc 
types quantified variable ranges arbitrary monomorphic types components data structure build access functions monomorphic types 
purpose section show ideas extended datatypes quantified component types 
specifically interested system allows definitions form data qx quantifier 
give constructor selector functions types form qx unc qx 
general treatment nested quantifiers types difficult deal type inference lead undecidability 
goal modest nested quantifiers types constructors selectors reasonable hope progress 
consider extensions hindley milner type system support datatypes quantified component types 
example perry ufer described extensions milner type inference algorithm allow datatypes existentially quantified components 
extension ml universally existentially quantified datatype components model aspects object oriented languages discuss type inference 
odersky ufer similar goals permits universal quantification datatype fields encoding simulate existential quantification 
approach requires significant extension usual type inference mechanisms replacing unification instantiation 
believe approach described simpler achieving degree expressiveness techniques easier easier implement 
eliminating nested quantifiers nested quantifiers find way eliminate 
wellknown procedure predicate logic converting arbitrary formula possibly nested quantifiers equivalent formula prenex form quantifiers outer level 
process justified equivalences classical logic subject condition appear free curry howard isomorphism bridge logic type theory equation justify equivalence result tells convert arbitrary term type corresponding term type 
case equivalence allows deal selectors datatypes universally quantified components functions types form right hand side treating values prenex form type left hand side 
similar way equation suggests simple treatment constructors datatypes existentially quantified components 
hope remaining equations deal selectors datatypes existentially quantified components constructors datatypes polymorphic components respectively 
curry howard isomorphism deals relationship type theory intuitionistic classical predicate calculus equations valid setting 
forced weaker implications 
example closest get classical equivalence equation implication 
term type shown right hand side function argument type returns result type choice unspecified witness type may depend particular value function applied different argument values may produce results different types 
exactly behaviour expect selector function datatype existentially quantified component 
compare type left hand side implication position quantifier formula indicates choice witness type independent particular argument value type clearly types equivalent implication tells convert arbitrary term left hand type term right hand type 
similar way closest intuitionistic logic gets classical equivalence equation implication 
follows certain terms type substituted terms type type constructor function datatype polymorphic component 
unfortunately help determine terms type represented way 
problem need form top level existential quantification feature usually supported hindley milner style type systems 
find frustrating situation 
restricted language types allows outermost quantification select construct datatypes polymorphic components construct select datatypes existentially quantified components 
meet goals constructors selectors treated normal class functions 
special syntax constructors problems seen result restricting attention types prenex form 
context logic restrictions artificial hypothesis try construct proof deduce derivation switching back logic terms types exactly structure need deal constructor datatype universally quantified component tv rule need treat constructor non prenex form type normal firstclass function 
view application completely new syntactic construct clear hint type checker 
remaining problem provide access value stored datatype existentially quantified component dealt introducing new syntactic construct 
case inspiration comes elimination rule existential quantification consider constructor obtain typing rule case side condition tv 
attractive feature approach soundness typing rules follows directly soundness corresponding rules intuitionistic predicate logic 
key understanding fcp type system introduced 
abandoning class status constructors introducing new syntactic constructs place obtain tools need construct access datatypes universally existentially quantified components 
notation tv denotes set type variables appearing free examples going formal definition fcp pause examples 
serve illustrate expressiveness system show notation prototype implementation extension hugs implementation haskell 
example implementation booleans polymorphism functions 
apart passing normal class entities way boolean values choices alternatives 
leads representation booleans functions type interesting functions type true returns arguments false returns second arguments 
idea concrete data boolean true false boolean true false cond boolean cond boolean boolean boolean cond false cond true encoding boolean values definitions 
implementation adopts convention variables definition boolean datatype bound left hand side definition bound implicit universal quantifier 
think constructor type boolean 
corresponding selector function cond just familiar conditional define standard operators 
included type signature declarations operators defined examples form documentation 
strictly necessary types obtained type inference algorithm 
treatment booleans example wellknown techniques encode standard datatypes calculus 
fcp encodings natural numbers church numerals lists obtained similar way 
data church ch unch church unch ch zero church zero ch ch succ church church succ ch unch pred church church pred fst unch succ error pred zero zero iszero church boolean iszero unch false true add mul church church church add unch succ mul unch add zero encoding church numerals data list fold list fold nil list nil cons list list cons xs fold xs hd list hd fold xs error hd tl list list tl fst fold cons error tl nil encoding lists folds data monad unit bind join monad join xss bind xss id monad unit bind unit bind bind xs bind xs data just monad unit bind unit just bind bind just monads class values example demonstrates combination fcp higher order polymorphism prototype implementation provide typesafe representation monads class values 
achieved constructor class overloading explore monads monad transformers :10.1.1.17.268
example suggests experiments repeated fcp packaging items class values 
fact fcp exactly features needed describe implementation constructor classes source source translation 
ability reify monads class data structures important part steele construct programming language interpreters reusable building blocks 
ideas expressed neatly fcp essentially definitions 
comparison steele program specializer circumvent problems caused limitations type system version haskell time 
application existential types shows portion implementation stack datatype 
definition produces list integers mapping operation list stacks different internal representa data stack stack xs self xs xs push xs xs pop xs top xs bool empty stack xs stack xs tail head null push stack stack push stack self push pop top empty stack push self push pop top empty top stack top stack self push pop top empty top self int map top push simple encoding stack packages tion hidden existential quantifier 
note prototype implementation adopts convention variables existentially quantified avoiding need explicit quantifier final example implementation objects representation described pierce turner demonstrating existentially universally quantified datatype components 
example encoding objects represented values type obj state component collection methods type state xs hidden existential quantifier 
classes hand represented functions polymorphic final representation type objects class 
items defined include function constructing new instances class specific example ubiquitous ext operator describe inheritance 
nt type general setting describe natural transformations particular interest 
pierce turner rely higher order subtyping values type nt explicit convention acceptable prototype ugly 
hope find attractive alternative language designs 
data obj xs state xs methods data class extract overwrite self new class obj new natural transformations data nt coerce specific example data pointm mkp set int get int point set nt pointm obj int obj point set st set coerce st class pointm int extr self mkp set get extr inheritance data extract overwrite super methods self methods new methods ext nt class super increment extract overwrite class new class ext st sup get put self sup get put coerce st self self pierce turner encoding objects alternative multiple parameter constructor classes currently supported hugs 
scope explain pierce turner encoding detail refer interested reader original 
formal development formal presentation fcp begins hindley milner type system type language term language typing rules summarized 
ex type language polymorphic type monotype type variable function type term language variables application abstraction local definition typing rules var ax ax tv hindley milner type system tensions needed accommodate fcp summarized 
mechanisms defining new datatypes associated constructor functions clearly going play important part practical system type language 
datatype arity 
term language construction decomposition 
typing rules tv break tv extensions fcp fcp 
formal development assume type language system extended collection new datatype constructors term language similarly extended family constructor function constants necessary go specifying information extracted notation particular source program texts 
assume constructor assigned closed type form 
represent possibly empty sequences quantified variables 
notation indicate type obtained instantiating variables particular types 
note assumptions uses type constructors types type inference mechanisms described general ways current focus datatypes constructor functions suggest 
example framework type launchbury peyton jones runst construct gill build construct 
note allow universal existential quantifiers type datatype components avoids need treat constructors existentially universally quantified components separate cases require slightly complicated typing rules 
ordering quantifiers placing existentials inside universals fairly arbitrary convenient choice practical applications 
course programmers control ordering quantifiers embedding values datatype inside 
simplify presentation assumed constructor precisely argument 
constructors multiple arguments modelled extending language ary tuples fact achieved fcp encoding pairs data pair construction decomposition described fcp terms syntax chosen reflect close analogy normal function application abstraction 
conventional complex notation decomposition uses case match construct 
example expression form case treated syntactic sugar pattern matching values datatypes multiple constructors described fatbar operator described peyton jones 
type checking rules fcp justified appealing underlying logic explained section 
actual derivations complicated presence existential universal quantifiers 
example assuming rule obtained derivation tv derivation break little complex follows basic pattern section 
simplify presentation omit terms node proof tree step labelled corresponds stripping constructor value type obtain value type side conditions tv tv tv steps respectively 
language design perspective may preferable allow kind local quantifier type constructor examples kinds quantification single constructor 
easy obtain appropriate typing rules special case break rules 
example constructor universally quantified components dealt rules tv similar way constructor existentially quantified components dealt rules tv option include universal quantification formal description dealt existential quantifiers encoding followed approach current encoding bit awkward practice second wanted provide reasonably symmetric treatment forms quantification 
type inference fcp section describe type inference algorithm fcp milner algorithm 
algorithm sound complete respect typing rules fcp section 
words algorithm succeeds input term welltyped case calculates principal type term 
important allows programmers take advantage expressiveness fcp giving convenience type inference 
unification usual unification plays central role type inference process 
types goal unification algorithm find general substitution modest extension standard algorithm takes set variables additional parameter 
algorithm treats variables constant unified variables result variables bound substitution produced result unification words restriction written identity substitution id particularly important rules constructing decomposing values datatypes universally existentially quantified components respectively 
algorithm straightforward modification robinson original algorithm 
presentation uses judgements form mod indicate unification algorithm succeeds general unifier types id substitution general sense id substitution ru easy show algorithm fails substitutions satisfy properties 
id id mod var fun mod mod mod mod tv mod rules unification 
type inference algorithm rules give type inference algorithm fcp rule syntactic constructs language 
successful invocation type inference algorithm represented judgement form ta mod type assignment term set variables inputs substitution type outputs 
theorem important tells typing produced type inference algorithm corresponds valid typing derivation original typing rules 
theorem soundness ta mod ta id conversely theorem indicates term type original rules type inference algorithm succeed inferred type general 
theorem completeness sa id ta mod substitution rt 
example consider special case typed expression top level environment tv sa substitution 
theorems tell type inference algorithm succeed typing possible type expressed substitution instance 
system fcp examples class polymorphism datatypes seen previous sections programmed directly explicitly typed languages system polymorphic calculus girard reynolds higher order variants 
fact fcp implementations booleans numbers lists previous sections direct translations standard system encodings datatypes 
main difference fcp programs constructor selector functions system uses type abstraction type application respectively 
example compare definition successor function succ ch unch system implementation succ church 

note constructors selectors fcp provides additional type information avoid need type annotations bound variables system remainder section show system program expressed fcp essentially replacing type abstractions applications constructors selectors 
complication occurs system types represented different ways fcp deal defining family conversions allow switch different representations type 
summarize type language term language typing rules system 
rt means substitutions rt equal ignoring new variables introduced type checking 
var ta mod ta new mod mod mod new ut ta ef mod ax mod new ta mod ta mod gen ta tax mod ta 
new ta mod mod tv uta uta mod break 
new ax mod tv ta system types fcp defining mapping associates system type fcp type mapping requires definition family datatypes type form data 
mk parameters 
free variables 
obviously set type constructors infinite finitely required translation program 
required mapping defined 
parameters 
line free variables 
easy verify mapping takes standard system encodings boolean number list types corresponding fcp versions previous sections boolean church list constructor function mk define selector function mk 
mk mk ta mod type inference algorithm superscript selector intended emphasize view constructor selector mutual inverses isomorphism describes packaging polymorphic values 
course choice names type value constructors selectors fairly arbitrary specific cases adopt intuitive naming schemes 
conversion fcp types ways represent system type fcp mapping described gives alternatives 
example encoding int data int 
way obtain encoding start general type encoding data note int 
system values type represented fcp values type type int 
fortunately types equal easy value type value appropriate combination constructors selectors 
follow type language type variables function types polymorphic types term language variables application abstraction type application type abstraction typing rules var ax tv system ing typing derivations show steps needed int int int int fact generalize construction deal pair system types obtained substituting free variable theorem system types type variable fcp derivations effective algorithm constructing fcp terms erase erase erase erase 
refer terms conversions respectively 
notation erase denotes term obtained fcp term deleting occurrences constructor selector function symbols provides semantics underlying calculus milner constructors selectors types interpreted identities 
significance theorem allows turn derivation term type derivation semantically equivalent term type proof construction conversions straightforward induction 
worth mentioning existence conversions directions types essential allows deal anti monotonicity argument function type constructor 
system terms fcp remains show arbitrary system programs converted equivalent programs fcp 
system term type assumptions goal find corresponding fcp term type assumptions 
existence suitable translations guaranteed result theorem system derivation fcp term erase erase notation erase denotes system erasure term obtained deleting uses type abstraction application 
proof theorem structural induction 
cases straightforward conversions needed deal derivations involving rule 
see consider system derivation ends instantiation polymorphic type follows induction mk take conversion obtain required typing 
shown arbitrary system programs expressed fcp 
example implementations booleans numbers lists previous sections obtained way 
general encoding section little awkward example treats universal quantifier separately 
cause problems practice programmers direct fcp need restricted family datatypes 
discussion described modest extension hindley milner type system offers convenience type inference expressiveness class polymorphism 
conventional hindley milner type system powerful programming tasks fcp provides extra degree flexibility useful particular situations compromising benefits simple type inference 
prototype type checker fcp implemented extension hugs implementation haskell 
test programs included body practice 
dimensions type inference general terms described continues program research explore extensions hindley milner type system 
illustrates largely orthogonal dimensions design space explored date overloading higher order polymorphism main subject current class polymorphism 
qualified types type classes hindley milner higher order polymorphism constructor classes fcp haskell fcp class polymorphism extensions hindley milner typing type class overloading form described kaes wadler blott probably extensions incorporated widely programming language 
semantics system type classes wadler blott explained type directed source level translation hindley milner type system extra dictionary parameters introduced specify meaning overloaded operators particular types 
type class overloading provides convenient form implicit parameterization 
proved particularly useful dealing equality arithmetic operations presence polymorphic type system 
type classes adopted part design haskell early proposals extended subtle ways allow class definitions class foo bar variable type bar member bound implicit universal quantifier suggests implementation dictionary components polymorphic types 
haskell type classes explained translation fcp general implemented translation standard hindley milner type system 
implementors haskell side stepped problems augmenting language general fcp constructs choosing powerful language system simple untyped language target translation source programs 
constructor classes lead discovery new uses overloading 
best known applications example functors monads inspired category theory :10.1.1.17.268
simple example class functors defined follows class functor map system constructor classes described combination overloading higher order polymorphism referring ability variables ranging different kinds type constructors example 
surprisingly easy generalize standard results type inference hindley milner framework higher order case long language type constructors restricted avoid problems undecidable higher order unification 
resulting system particularly useful practice just interesting terms type interesting terms type 
hindsight see expressiveness constructor classes comes combination higher order polymorphism hidden uses class polymorphism 
example map function described useful implicit universal quantification variables observations better position distinguish syntactic convenience overloading expressiveness class polymorphism 
areas done dimensions clear dimensions type inference focused observation supported extensive literature subject 
example consider problems tackling various notions extensibility particularly interesting direction 
language design problems example significant overlap facilities defining datatypes fcp classes haskell modules standard ml 
prompt search orthogonal language mechanisms supporting features 
technical problems example fully addressed problems integrating fcp type class overloading allow datatypes components types qualified class constraints 
best knowledge special case datatypes existentially quantified components considered date 
type inference thought compromise convenience programming type annotations expressiveness explicitly typed languages 
practical systems include elements extremes example languages standard ml haskell require type information bound variable types assigned constants constructor functions play critical role type inference process 
important aspect fcp type system introduced new perspective provides helping understand small part design space 
hope play useful role practical programming language designs 
friends colleagues functional programming group nottingham valuable input development described 
particular help preparing object example section 

boehm 
partial polymorphic type inference undecidable 
th annual symposium foundations computer science pages 
ieee october 
duponcheel meijer 
expressive power constructor classes 
proceedings glasgow functional programming workshop ayr september 
gill launchbury peyton jones 
short cut deforestation 
fpca conference functional programming languages computer architecture copenhagen denmark new york june 
acm press 

girard 
une extension de interpr tation de del analyse son application des coupures dans analyse la th orie de types 
fenstad editor proceedings logic symposium 
north holland 
hall hammond partain peyton jones wadler 
glasgow haskell compiler retrospective 
proceedings glasgow workshop functional programming ayr scotland july 
springer verlag workshops computing series 
hindley 
principal type scheme object combinatory logic 
transactions american mathematical society december 
howard 
formulas types notion construction 
curry essays combinatory logic lambda calculus formalism pages 
academic press 
hudak peyton jones wadler editors 
report programming language haskell non strict purely functional language version 
acm sigplan notices may 
hudak wadler editors 
report programming language haskell non strict purely functional language version 
technical report university glasgow april 
jones 
implementation gofer functional programming system 
research report yaleu dcs rr yale university new haven connecticut usa may 
jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming january 
jones 
hugs user manual 
technical report tr department computer science university nottingham august 
kaes 
parametric overloading polymorphic programming languages 
esop european symposium programming nancy france new york 
springer verlag 
lecture notes computer science 
ufer 
polymorphic type inference data types 
phd thesis new york university july 
ufer 
type classes existential types 
journal functional programming may 
ufer odersky 
polymorphic type inference data types 
acm transactions programming languages systems september 
launchbury jones 
lazy functional state threads 
conference programming language design implementation orlando fl june 
liang hudak jones 
monad transformers modular interpreters 
conference record popl nd acm sigplan sigact symposium principles programming languages san francisco california january 
milner 
theory type polymorphism programming 
journal computer system sciences 
milner tofte harper 
definition standard ml 
mit press 
mitchell plotkin 
types existential type 
acm transactions programming languages systems july 
odersky ufer 
putting type annotations 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg beach fl january 
acm press 
perry 
implementation practical functional programming languages 
phd thesis imperial college 
peterson hammond editors 
report programming language haskell nonstrict purely functional language version 
research report yaleu dcs rr department computer science yale university may 
peyton jones 
implementation functional programming languages 
prentice hall 
pfenning 
undecidability partial polymorphic type reconstruction 
fundamenta informaticae 
pierce turner 
simple foundations object oriented programming 
journal functional programming april 

programming objects ml art extension ml record types 
hagiya mitchell editors theoretical aspects computer software volume lncs pages 
springer verlag april 
reynolds 
theory type structure 
paris colloquium programming new york 
springer verlag 
lecture notes computer science 
robinson 
machine oriented logic resolution principle 
journal association computing machinery 
steele jr building interpreters composing monads 
conference record popl st acm sigplan sigact symposium principles programming languages pages portland january 
wadler 
essence functional programming invited talk 
conference record nineteenth annual acm sigplan sigact symposium principles programming languages pages jan 
wadler blott 
ad hoc polymorphism ad hoc 
proceedings th acm symposium principles programming languages pages jan 
wells 
typability type checking second order calculus equivalent undecidable 
ninth annual ieee symposium logic computer science pages paris france july 
