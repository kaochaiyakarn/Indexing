apss proactive secret sharing asynchronous systems zhou fred schneider robbert van renesse october supported part arpa radc afosr defense advanced research projects agency darpa air force research laboratory air force material command usaf agreement number national science foundation 
views contained authors interpreted necessarily representing cial policies endorsements expressed implied organizations government 
microsoft silicon valley research center la mountain view ca 
department computer science upson hall cornell university ithaca new york 
apss proactive secret sharing pss protocol asynchronous systems derived proved correct 
pss protocol enables set secret shares periodically refreshed new independent set called mobile adversary attacks 
apss tolerates certain attacks pss protocols synchronous systems protocols asynchronous systems inherently vulnerable denial service attacks slow processor execution impede message delivery violate de ning assumptions synchronous system 
categories subject descriptors computer communication networks general security protection computer communication networks distributed systems client server operating systems reliability fault tolerance operating systems security protection authentication cryptographic controls data data encryption public key cryptosystems 
secret sharing secret set random shares recovered knowledge shares ii information derived fewer shares 
share assigned di erent server distributed system secret remains available provided servers available secret remains con servers compromised 
secret sharing defend mobile adversaries attack compromise control server limited period moving 
time mobile adversary compromise servers obtain shares learn secret 
defense share refreshing servers periodically create new independent secret sharing replace old shares new ones 
new old secret sharings independent mobile adversary combine new shares old shares order reconstruct secret 
old shares deleted replaced new shares mobile adversary compromise servers share succeed 
secret sharing share refreshing known proactive secret sharing pss 
pss reduces window vulnerability adversary compromise servers order learn secret 
share refreshing window vulnerability unbounded pss window vulnerability shortened period share 
prior pss protocols assumes synchronous system meaning bounds message delivery delays processor execution speed known 
assumption constitutes vulnerability assumption synchronous system exception 
denial service attacks particular delay messages consume processor cycles invalidating de ning assumption synchronous system 
describes apss pss protocol asynchronous systems systems message delivery delays processor execution speeds xed bounds 
eliminating assumption eliminating vulnerability 
implementing secret sharing apss threshold cryptography processors store shares private key perform cryptographic operations shares materializing entire private key 
protocol derived steps result transformation defend increasingly hostile adversaries 
form exposition bit longer elucidates role played element apss 
transformations interesting applicability settings 
organized follows 
system model correctness requirements apss speci ed 
describes cryptographic building blocks protocol 
protocol derived 
various ways protocol optimized extended explored 
related discussed appendix contains correctness proofs 
system model correctness consider system comprising set processors communicate network 
processors designated servers hold shares secret 
processor assumed individual public private key pair know public keys processors 
traditional proactive secret sharing literature example see assume attackers lack computational power compromise cryptographic building blocks protocols 
processor private keys stored tamper proof cryptography processor performs operations involving keys 
attacks failures intend apss environment internet failures attacks invalidate assumptions timing asynchronous system bound message delivery delay processor execution speed 
absence tamper proof processors keys refreshed addition refreshing shares 
simple approach trusted administrators processor invent propagate new public keys secure channels implemented having administrative public private key pair 
administrative public key known administrators processors administrative private key kept line time defense line attacks sign noti cation messages new public key 
rekeying schemes discussed 
restrict fraction processors reason fail execute prescribed protocol assumptions processor behavior compromised processors point time processor correct compromised 
compromised processor executing deviate arbitrarily speci ed protocols byzantine failure corrupt disclose information stored locally correct processor follows protocols corrupt disclose information stored locally 
interval time processor considered correct processor correct interval processor deemed compromised assume processors compromised window vulnerability holds 
assumption communications network adversary prevent processors communicating clients 
protocol expected setting assume fair links fair link communication channel processors necessarily deliver messages sent processor sends su ciently messages single destination messages correctly delivered 
messages transit may disclosed altered adversaries 
network assumed provide fair links 
asynchronous system compromised processors fair links assumptions give adversaries considerable power 
adversaries attack servers processors provided fewer compromised window vulnerability launch eavesdropping message insertion corruption deletion replay attacks conduct denial service attacks delay messages slow processors arbitrary nite amounts 
window vulnerability de nition asynchronous system assumption means window vulnerability apss de ned terms events passage time 
panacea 
protocol events delimit window vulnerability afford attackers leverage 
particular denial service attacks delay protocol completion lengthening window vulnerability increasing interval available attack 
longer windows vulnerability signi cant depends model adversary 
plausible models adversary agent ability compromise servers depends time available attacks 
adversary agent ability compromise servers depends intrinsic aspects servers operating system application software rst model realistic anticipated threat asynchronous system compromised processor assumptions taken limit adversary 
ect bound number servers adversary compromise intervals viz window vulnerability arbitrarily long 
second model realistic possibility longer windows vulnerability need concern 
complicate matters whichever models adversary embraced ways apss going robust pss protocol 
consider synchronous system assume apss pss protocol comparable execution times reasonable supposition implementation apss 
apss successfully defend attack pss protocol 
apss defend attacks compromise pss protocol denial service attacks invalidate de ning assumptions synchronous system 
sense apss robust 
short choice models consequences subtle 
philosophically appealing protocols apss correctness depend assumptions execution timings 
runs versions epochs 
execution run apss generates new secret sharing events associated share refreshing de ne apss window vulnerability 
give precise de nition window vulnerability version numbers assigned shares secret sharings runs servers initially store shares version number 
run executed shares having version number run resulting new shares version number 
secret sharing assigned version number shares 
run starts correct processor initiates run locally starts participating run run terminates locally correct processor participating apss quiescent server stored corresponding shares version number ii deleted shares stores version number iii deleted locally stored information infer deleted shares 
run terminates globally earliest time run terminated locally processor correct interval delimited global start run time de ne epoch interval start run global termination run 
illustrates epochs relate runs version numbers shares 
notice processors correct epoch correct epoch de nition correct run run belongs epoch epoch successful attack adversary collect shares version number 
servers compromised epoch order collect shares de ne window vulnerability mentioned compromised processors assumption epoch 
practice start run correct server preceded execution recovery routine residue prior compromise server 
quiescent processor sends protocol messages response receiving protocol message 
run shares shares run run epoch epoch time increases epochs versions 
apss correctness correctness apss stipulates secret remain con available adversaries forever delay share refreshing preventing runs starting terminating globally apss secrecy secret learned adversaries 
apss availability secret recovered shares stored correct servers 
apss progress adversaries prevent apss run starting run eventually terminates globally 
typically pss protocol executed concert client protocol reads shares recovers secret computes function secret argument 
threshold signature protocol example uses shares constructing digital signature message private signing key secret shared 
de ning characteristic pss shares di erent sharings secret combined reveal information means client protocol execution synchronized share refreshing 
instance known readers writers problem client protocols readers share refreshing protocol writer 
solution spirit lamport concurrent reading writing version numbers conjunction veri able secret sharing client protocol detects shares read constitute sharing iterates 
cornell line certi cation authority coca apss conjunction client protocols read update digital certi cates stored quorums servers 
share refreshing coca executed hourly coca read update share refreshing protocols completes seconds reducing chances read overlap share refreshing 
open question eliminate iteration employing synchronization delay coordinate execution client protocol share refreshing 
eliminating overlap client protocol share refreshing execution certainly su cient necessary client protocol execution permitted servers having new shares delayed 
note synchronization accommodate apss progress requires client protocol execution adversary able forever delay start share refreshing protocol run 
building blocks apss secret sharing involves operations split reconstruct 
operation split generates set random shares secret constitute sharing operation reconstruct recovers certain sets shares 
distinct label associated share sharing follows 
denotes sharing sharing labeled 
denotes th share sharing labels clear context unnecessary omitted avoid clutter 
version numbers associated shares sharings runs form basis useful relations share sharing labels 
label sharing generated run holds holds holds holds 
canonical order shares assumed 
combinatorial secret sharing call standard secret sharing shares single values call combinatorial secret sharing shares sets values called share sets values share sets implement standard secret sharing 
apss employs combinatorial secret sharing 
protocol general handle adversary structure simplify presentation discuss detail support family secret sharing 
explain protocol extended adversary structures 
secret sharing implemented assigning shares obtained standard secret sharing share sets comprising combinatorial secret sharing 
construction secret recovered collection share sets reconstruct shares union share sets 
construction combinatorial secret sharing 
create di erent sets containing servers 
sets subsets enumerate collections servers compromise tolerated single window vulnerability 

create standard secret sharing 

include share share set server server share set de ned 
assigning server ensure servers shares needed reconstruct server de ne index set index sets provide sharing independent description construction de nition hold 
share sets construction exhibit important properties server share set index set example combinatorial secret sharing 
ss 
set servers holds ss 
set servers holds ss implies secrets recovered reconstruct share sets stored servers ss implies share sets fewer servers lack shares needed recover threshold availability secret reconstructed shares stored correct servers 
threshold con dentiality infeasible reconstruct shares stored fewer servers 
illustrates combinatorial secret sharing standard secret sharing denote notice share set server consists shares index sets shown 
single share set contains shares single compromised server unable obtain shares needed recover secret 
bene basing apss combinatorial secret sharing simple cient recovery scheme admits assembling share set compromised server repaired 
share underlying standard secret sharing element multiple share sets stored multiple servers 
recovering server say rebuild share set requesting shares correct servers 
receiving recovery request server correct server replies set shares encrypted way processor decrypt 
example recovering receives combinatorial secret sharing construction exponential respect total number shares size share sets 
underlying standard secret sharing simple cheap modular addition subtraction su ce 
asymptotically superior alternatives combinatorial secret sharing apss exist discussed 
share refreshing share refreshing combinatorial secret sharing implemented terms share refreshing underlying standard secret sharing 
new share sets sets new shares generated share refreshing standard secret sharing 
speci cally old share standard secret sharing split obtain subsharing comprising subshares 
result sets contains subshares 
reconstruct generate new share combining subshares 
notice interchanged subscripts 
depicts construction ij abbreviation column gure depicts subshares comprise subsharing old share row shows subshares combined form new share 
distributed services involve relatively small number servers exponential factor concern 
secret sharing secret reconstructed linear combination certain eld shares supports share refreshing outlined subsection 
shamir scheme trivial scheme uses modular addition examples linear secret sharing schemes 

split reconstruct ll il ij lj share refreshing 
share refreshing scheme available servers storing share constructed 
enforced encrypting subshares index set de nes subshares encrypted way server decrypt 
henceforth employ convention upper case lambda decorated variants labels sharings lower case lambda decorated variants labels subsharings share set server corresponds sharing label denoted apss protocol derivation describe protocol single run call epoch previous epoch run previous run epoch current epoch run current run shares version number old shares shares version number new shares 
noted term correct servers refers servers correct current run 
derivation apss divided steps 
start giving share refreshing protocol works relatively strong assumptions 
subsequent step introduces modi cations weakening assumptions 
appendix contains proof nal protocol works distributed system satisfying asynchronous system compromised processors fair links assumptions 
version benign compromise build share refreshing protocol 
starting point consider systems compromised processors fair links assumptions strengthened crash disclosure failures compromised server halt prematurely 
halts behaves correctly 
compromised server disclose information stored locally adversaries 
servers may compromised epoch 
secure reliable links messages sent reliably delivered 
content messages transit disclosed corrupted 
share refreshing protocol presumes single subsharing generated old share 
share sets servers disjoint split nondeterministic 
protocol correct server generates subsharing old share contained share set produce single subsharing old share produces multiple subsharings old share 
single new sharing obtained selecting subsharings old share executing share refreshing protocol selected subsharings 
approach basis share refreshing protocol subsection 
de ne candidate set subsharings set subsharings contains exactly subsharing old share 
identify candidate set subsharings derived secret sharing label 
labels subsharing share label 
identi es new sharing 





reconstruct 
failures called crash failures fault tolerance literature 
split distribute select hj sw sw sw candidate sets subsharings 
illustrates construction labels possible candidate sets subsharings corresponding new sharings 
assume sharing server stores server stores server stores servers generate subsharings shares hold subsharings candidate sets subsharings labels shown select single candidate set subsharings constructing new shares postulate coordinator unrealistically assume processor executing compromised 
correct coordinator coordinator correct 
coordinator starts share refreshing protocol server controls servers delete old shares ensuring su ciently large set servers times reconstruct secret old shares new shares available 
assumption relaxed 
sends init message servers holds 
awaits receipt contribute messages 
label subsharing sender computes share label stores 
labels received contribute messages construct candidate set subsharings constructing label 
sending label new sharing compute 
message servers 
computed 
messages received servers 
runs share deletion protocol 
protocol coordinator outlines coordinator protocol refreshing sharing label gives server protocol 
program variable stores shares server received constructed program variable stores label sharing runs vp vp holds servers correct interval 
formalized assertion holds interval runs correct processors labels processors set comprising correct processors vp vp share refreshing works follows 
start things coordinator sends init message step holds servers 
receipt message correct protocol sacri ces ciency favor simplicity 
example sending multiple store messages pair servers done cient protocol send single combined message 
convention program variables typeset xed width fonts subscripted processor located 
generate propagate subshares receipt init message share server calculates subsharing cp split 
store message sends server label subshares cp holds 
contribute message sends label construct new shares receipt server compute 
message store store 
store messages servers server calculates new share 
reconstruct 
computed 
message server noti es shares 
holds computed 
phase share refreshing protocol 
server begins execution generate propagate subshares phase server protocol 
phase old share labeled stored correct server split subsharing step 
share stored correct server due way share sets constructed subsharing produced old share servers compromised 
individual sent store message server require constructing new shares step 
labels subsharings sent step contribute messages 
selects candidate set subsharings uses compute messages inform servers label 
new sharing de ned candidate set subsharings step 
correct servers enter construct new shares phases calculate new shares step candidate set subsharings identi ed label compute message received subshares received servers store messages 
correct servers send computed messages notify new shares computed step 
coordinator receives computed messages step servers way share sets constructed old share exists correct server generated stored corresponding new share 
updates variable step initiates protocol step delete old shares subshares information allow inferences old shares 
details share deletion protocol 
version send omission failures fair links protocol assumes sender compromised halts sent messages speci ed protocol 
assumption unrealistic 
unrealistic assume messages sent delivered corrupted disclosed 
subsection relax secure reliable links assumption returning fair links assumption relax crash disclosure failures 
forming new labels concatenating old labels facilitates simple syntactic test evaluating relations labels 
send omission failures compromised processor may disclose locally stored information halt prematurely send subset messages speci ed protocol 
assume processors compromised epoch holds 
additional defenses brought bear adversaries insert modify delete replay messages compromised server send subset messages speci ed protocols deal messages sent compromised processors message deletions due fair links acknowledgments employed conjunction message retransmission 
additional messages sent retrieve information delivered 
tolerate message insertion modi cation senders individual keys sign messages receivers check signatures detect discard extraneous corrupted messages 
combat replay attacks information version number run added allows detection duplicates processors store current run message received response elicited 
message processing idempotent checking see message received duplicate message previously received run replying previously stored response 
henceforth presume mention signature checking included semantics send receive primitives 
details message retransmission acknowledgments bit subtle explicitly 
protocols replaced set concurrent protocol actions separated appear gure coord gen gen const const 
see figures 
protocol actions atomic comprises sequence labeled steps specify sequential execution typically response responses duplicates sent prior response victim fair links assumption 
receipt speci type message 
instance protocol action const started receipt compute message step const executes completion step const started 
protocol actions employ repeated sending messages order overcome compromised processors perform sends speci ed protocols order overcome message loss deletion 
description send speci es messages sender receive order repeated sending 
repeated sending necessary reply message need employ repeated sending regenerated response repeated sending repeated sending su ce 
additional message exchanges added 
consider server propagates subshares repeatedly sending store messages servers 
server receiving store message respond stored message acknowledgment repeated sending terminate stored messages returned 
receiving stored messages correct servers received store message correct servers ultimately need subshares contained store message add new message exchange retrieve retrieved messages subshares fetched servers 
revised protocol coordinator refresh sharing labeled implemented protocol action coord 
execution starts sending init message step coord servers 
protocol action gen implements generate propagate subshares phase addition repeated message sending accommodate message loss 
gen commences receipt coordinator init message splits subsharing step gen repeatedly sends subshares store messages servers require information step gen stored messages received servers sends labels subshares back coordinator contribute messages step gen 
repeated sending contribute messages necessary reply init message repeatedly resent contribute messages received 
server guaranteed receive stored messages servers compromised 
coord repeatedly sends servers init messages holds sending stops receives contribute messages set labels 
comprising candidate set subsharings 
constructs label 
repeatedly sends servers compute 
messages sending stops computed 
message received servers 
computed 
messages received servers 
ii 
runs share deletion protocol 
revised protocol coordinator receipt contribute messages containing di erent labels subsharings step coord servers calculated selects candidate set subsharings forwards identifying label servers step coord compute messages 
correct servers calculate new shares candidate set subsharings identi ed label compute message 
const extends construct new shares phase repeated overcome lost messages 
note addition retrieve messages const const server necessary fetch subshares prescribed coordinator compute message received store messages 
receives computed messages servers step coord new shares calculated stored share sets correct servers 
variable updated re ect step coord deletion old shares subshares commence step coord ii 
version replicated coordinators correct coordinator assumption unrealistic 
modify protocol environments compromised coordinators gen receipt init message coordinator server share share set calculates subsharing cp split 
repeatedly sends store message server sending stops server receives stored messages di erent servers store message sent contains label cp encrypted way server decrypt 
sends contribute message contains label gen server receipt store message server decrypts stores replies sending stored message 
revised generate propagate subshares phase 
satisfy send omission failures 
making assumptions processors compromised processors strengthened send omission failures 
idea version protocol simple 
executing coordinators distinct processor executes correct processor 
correct coordinator executes protocol produces desired new sharing 
invariant new protocol correct processor 
course multiple coordinators multiple new sharings pro const server receipt compute 
message received repeatedly sends servers retrieve sending stops receipt retrieved message decrypted obtain ii 
server executes 
reconstruct 
stores 
share set 
server sends computed 
message 
const server receipt retrieve message server replies holds stored reply retrieved message equals encrypted way server decrypt 
revised construct new shares phase 
duced 
note total number new sharings stored servers remains bounded number coordinators coordinator produces new sharing 
protocol involving multiple new sharings satisfy correctness speci cation provided adversaries bene having access various new old share sets exist compromised servers 
servers store label shares multiple sharings client protocols way distinguish shares come di erent sharings 
turn issues 
adversaries exploit multiple share sets 
sharings produced concurrently executing coordinators independent adversaries unable reconstruct secret combining multiple share sets compromised servers 
sharings produced protocols necessarily independent 
di erent coordinators overlapping candidate sets subsharings new sharings generated common subsharings independent 
lack independence accompanies overlapping candidate sets subsharings exploited adversaries 
cp produced gen construction new share index see const ii shares index share sets stored servers 
shares independent fact stored servers 
lack independence shares help adversary gain information shares stored compromised servers 
see appendix full proof apss secrecy 
client management multiple new sharings 
multiple new sharings produced coordinator 
client protocol know shares 
easily arranged 
construction distinct sharings distinct labels 
transmitting labels confusion eliminated sharing message containing share result computation involving share accompanied label sharing contains share 
share deletion protocol apss progress requires global termination run implies correct servers eventually delete old shares subshares information derived shares quiescent 
shares associated information deleted overwriting server variables quiescence achieved aborting protocol actions terminated 
protocol subsection 
conclude invariant non empty assignment statement deletes old shares server provided holds correct coordinator correct coordinator assigns label new sharing assignment statement may executed nonempty server variables label satis es similar assignment statements employed deleting subshares information infer old shares stored server variables 
descriptions protocol actions named variables explicitly mention executing assignment statement henceforth taken include overwriting information stored 
assignment statement subjects variable concurrent access follows 
run protocol multiple concurrent coordinators lead multiple instances gen executing concurrently server 
gen instances received init messages read gen instances server terminated assignment statement executed object concurrent reads writes 
concurrent access brings possibility interference 
design invalidated assignment statement update potential cause interference preventing quiescence 
scenario illustrates 
suppose holds coordinator reached step coord ii 
consider instances protocol action gen associated coordinator executes concurrently sends init message start holds 
servers assignment executed holds gen protocol action sent contribute message share receive contribute messages constitute candidate set subsharings 
remain forever step coord awaiting additional contribute messages 
reach quiescence 
quiescence face interference easily arranged 
correct coordinator reached step coord ii subsequent execution run coordinators associated protocol actions unnecessary new sharing established actions concerned establishing second new sharing serve useful purpose aborted 
associate executing protocol action instantiation identi er 
protocol actions associated coordinator starts sending init message assigned instantiation identi er relation instantiation identi ers de ned 
quiescence easily achieved 
protocol action abort rule execution step coord ii instantiation identi er commenced abort protocol actions coord gen gen const const having instantiation identi ers satisfy note aborting coord ect aborting concurrently executing coordinators require 
share deletion protocol implemented protocol action term executed processor hosting coordinator server 
execution term server commences receipt henceforth message signify new sharing label disseminated holds 
processors set comprising correct processors holds 
sending single henceforth message processor su ce ensure term executes correct processor fair links 
repeated sending su ce protocol action repeatedly sending henceforth aborted protocol action abort rule henceforth message sent times reach correct processors 
means ensure term executed correct processors feasible coordinators hosted servers 
stipulate pervasive coordinator deployment servers concurrently executes coordinator holds goal having coordinators achieved 
pervasive coordinator deployment provides additional points leverage henceforth message sent correct coordinator hosting server reliably delivered despite fair links assumption network involved communication 
server quiescent repeated sends coord gen const executing coordinator reach step coord ii subsequent messages delivered midst executing start executing repeated send 
rst ensures term commence execution correct processor correct coordinator reaches step coord ii sends henceforth message servers message sent correct coordinator received server second enables system wide dissemination henceforth messages term replying henceforth message received su ces activate term correct server show 
consider correct server received henceforth message quiescent 
suppose term executing correct server show term activated server cases case 
execution reach step coord ii subsequent messages delivered server send henceforth reaches step coord ii correct message traverse network execution term guaranteed 
case 
midst executing start executing repeated send 
correct send cause message proof sketch 
holds aborted 
protocol actions server aborted server quiescent 
holds server quiescent 
contrapositive yields seek 
fact su ces send henceforth message server henceforth messages reaching correct servers hasten termination run 
term server receipt henceforth message abort protocol actions coord gen gen const const executing server associated instantiation identi ers holds 
label holds delete locally stored subshares generated shares 
receipt message containing label holds replies henceforth message 
share deletion protocol 
sent 
repeated sends coord directed servers 
eventually message reach server reach step coord ii 
case applies 
eventually copy received term henceforth response eventually received pulls pieces term protocol action share deletion protocol just developed 
executed server step term runs protocol action abort rule step term establishes second conjunct invariant henceforth messages signify holds turn implies step term deletes old share information stored complete picture means run share deletion protocol speci ed step coord ii 
coord ii sends henceforth message servers 
anarchy coordination de nition run multiple coordinator protocol just outlined starts coordinator begins step coord 
notice correctness protocol way depends decision start 
di erent coordinators need synchronized way 
correct coordinators store version shares rst complete run compute version sharings 
tardy coordinator sending init messages start run reply receive henceforth message label version sharing shares servers store 
receipt henceforth message causes protocol action term execute terminate run locally 
actual apss deployment bounding real time elapse protocol runs important 
frequent runs prevent client protocols performing useful infrequent runs mean long windows vulnerability 
di culties avoided local processor clocks available 
frequent runs prevented making assumptions relative clock rates di erent processors messages start new epoch ignored time elapsed receiver local clock old epoch started 
infrequent runs prevented making assumptions real time rates processor clocks having coordinators elapsed time trigger start new run 
note system local processor clocks way violate asynchronous system assumption 
apss continues working correctly assumptions local processor clocks violated 
ected invalidating local processor clock assumptions guarantees elapsed time share guarantees part correctness requirements apss 
version defending malicious servers ects compromised processors visible messages send 
mechanism allows correct processors detect ignore bogus messages constitutes obvious defense transforms environment satisfying compromised processors assumption satisfying send omission failures assumption environment protocol works 
messages convey assertions current past system states 
apss logical formula associated type message values message serve arguments formula 
substitution arguments formula produces assertion conveyed 
see assertions apss messages convey 
assertions su ce demonstrated adequacy apss protocol correctness proof appendix 
de ne message valid apss execution associated assertion true message sent message considered invalid 
correct processors send valid messages invalid messages sent compromised processors 
self verifying message receiver determine message valid solely values contained message 
clearly having messages self verifying allow correct processors ignore invalid messages receive 
messages self verifying valid 
stored computed messages examples 
assertion associated form sva correct holds message sender concerns local state assertion sva trivially holds compromised antecedent sva false correct hold correct processors follow protocol presumably true sending message 
messages apss self verifying 
store retrieved assertions secret sharings shares labels init contribute compute retrieve henceforth assertions correlate states processors 
self verifying senders include additional information messages 
building blocks involved veri able secret sharing provides way check labels shares sharings sender purports 
inference predicates collections messages compromised servers 
message types sans serif include init contribute compute computed store stored retrieve retrieved henceforth 
messages assertions attachments labels assumed contain validity checks init 
share sharing stored servers correct previous epoch 
attach henceforth message obtained previous run step term init message 
cp 
ir 
employ veri able secret sharing 

server correct ir stored server valid 
contribute 
subsharing stored correct servers 
attach messages received di erent servers step gen 

subsharing subsharing stored correct servers 
attach message obtained step coord 

sender correct shares stored server valid 

subsharing stored correct servers 
attach message obtained step const labels compute message 
fact message attachment message needs attached 
retrieved 
employ veri able secret sharing 
henceforth 
share sharing stored servers correct current epoch 
attach computed messages received di erent servers obtained step coord 
self verifying messages apss assertions attachments veri able secret sharing 
feldman non interactive veri able secret sharing provides foundation scheme check value purported element standard secret sharing checking knowledge secret shares comprising loss generality follows formulated terms secrets shares sharings understanding applies subshares subsharings shares sharings 
secret share sharing de ne validity check terms collision resistant way function oneway follows 
oneway secret share oneway oneway 
oneway sharing comprising shares 
validity checks secrets shares public secrets shares de nition infeasible compute inverse oneway 
means function relates validity checks shares 
comprise sharing 
provide means checking share message purported 
su ces validity checks 
publicly known included message containing evaluated message received holds high probability 
sharing examples oneway functions satisfy 
assertions store retrieved ones involve shares subshares 
assertions require checking values message satisfy pedersen veri able secret sharing schemes provide di erent security guarantees feldman 
see comparison 
notation 
vn denote vector values 
vn check holds su ces known servers message containing contains validity checks 

checked 
ii 
iii 

condition checks index correctly identi es share contains condition ii checks set subshares validity checks 
constitutes subsharing share validity check condition iii checks shares validity checks 
constitute sharing implicit iii check presumption sharing label uniquely identi es sharing 
multiple sharings label hold shares sharing 
particular apss depends subshares label subsharing subshares combined obtain new sharing uniqueness sharing subsharing labels straightforward enforce 
include part label validity check sharing labeled 
works high probability collision resistant function oneway produces di erent values di erent sharings 
inclusion validity checks labels practical advantage providing needed information messages containing shares shares apss messages accompanied labels 
revising protocol employ labels include validity checks steps added generate validity checks 
cases 
subsharings 
new subsharings generated step gen 
validity check cp new subsharings computed 
sharings 
new sharings generated shares computed step const ii 
validity check 
new sharing computed directly server computes stores shares 


desired validity check right hand side equation 
validity checks included labels signi cantly representation labels possible 
apss performs certain operations labels evaluates relations labels instantiation identi ers turn requires evaluating labels term 
uses labels distinguish di erent shares sharings produced run di erent coordinators part client management multiple new sharings 
uses validity checks labels messages self verifying 
recursive label construction apss supports operations label length grows exponentially number runs 
better represent label sharing pair run sharing created represent label share label sharing index labels grow logarithmically number runs size logarithmic number runs 
label subsharing distinguish di erent subsharings convey source share subsharing derived 
terse encoding label subsharing tuple information source share required step coord determining subsharings constitute candidate set subsharings 
label sharing provides source share 
inferring predicates collections messages 
tests attachments messages self verifying compose expected way 
recall self verifying message attached signed sender validity determined original recipient server obtaining copy message self verifying assertion attaching including attachments needed self verifying message self verifying composition self verifying messages init compute retrieve messages 
second set messages sent distinct processors run necessarily contain messages correct processors 
knowing exactly messages sent correct processors receiver deduce interesting assertions system state messages 
example receipt computed messages distinct processors run implies messages valid share stored correct server property ss share sets 
henceforth contribute messages self verifying attaching sets messages manner 
variations theme protocol optimizations cost paramount concern choice mechanisms defend compromised processors 
selected defenses facilitated straightforward derivation protocol 
simple correct protocol hand turn section optimizations reducing run time costs 
absence attacks 
system comprising correct processors need redundant processing replicated coordinators bring 
absence denial service attacks reasonable assume system synchronous 
cient protocols possible correct processors satisfy stronger assumptions synchronous system 
opportunity eliminate unnecessary settings compromise attack rare case number processors small 
key insight optimization note actions delayed arbitrarily protocols correctly asynchronous systems 
apss works correctly asynchronous systems execution correct coordinator delayed ill ect 
particular optimized version apss obtained employing single coordinator execution delayed ii delaying coordinators start executing nished correct system synchronous 
absence attacks propagate henceforth message containing label new sharing 
receipt henceforth message causes remaining delayed coordinators protocol actions terminate due term 
new sharing produced redundant coordinators 
hand succeed producing new sharing compromised denial service attack coordinators delays expire 
coordinators execute coord actions produce new sharing albeit delayed relative apss implementation coordinator delayed start 
weaker assertions 
certain messages apss assertions weakened ecting correctness 
weakenings er potential improved performance cost senders adding attachments cost receivers checking attachments lowered 
example assertion associates retrieve messages information sought available correct servers obvious precondition response 
assertion weakened true making retrieve messages trivially valid 
checking need performed recipient retrieve message attachments need provided sender weakening yields cheaper protocol 
protocol correctness una ected receiver ignoring retrieve messages conveying requests satisfy protocol correctness una ected additional executions const reply retrieve messages satisfy 
weakening optimization possible stored retrieved messages existence bogus subshares messages convey detected subshares combined form new shares 
detection done connection step const ii compute new share 
provided validity checks subshares computed run included stored retrieved messages subset subshares processor compute validity checks new shares 
result combining validity checks yield shares bogus implies subshares bogus 
apss restarted step coord longer ignoring validity checks received subshares stored retrieved messages 
optimization assertions associates store retrieved weakened 
assertion transformed valid assertion replacing sva 
validity checks subshares attached message receiver longer checks received message corresponding validity check shares checked 
fewer shares check subshares new sharing generated subsharings 
subshares checked validity check share failed optimization yields savings server compromise rare 
mitigating denial service attacks apss designed ensure correctness properties apss availability apss progress apss secrecy violated actions fewer compromised servers 
denial service attacks allow compromised servers slow processing causing servers generate large numbers subsharings sharings particularly ective way accomplish 
particular compromised processor launch attack sending init messages containing di erent labels step coord generating multiple di erent subsharings share step gen propagating subshares store messages servers step gen sending compute messages containing di erent choices candidate sets subsharings step coord 
eliminate apss vulnerabilities requiring correct servers process messages type pedigree bearing di erent content messages de ned pedigree sent behalf coordinator run sender 
defense implemented server stores rst message type pedigree receives current run discards subsequent incoming messages type pedigree containing di erent content 
messages correct processor discarded correct processor sends messages type pedigree di erent content 
correctness apss protocol una ected denial service defense 
general dynamic adversary structures adversary structure collection sets processors set names processors compromised epoch subsets set collection collection 
apss described threshold adversary structures collections sets containing fewer processors 
adversary structures exist 
system threat adversary structures better models sets processors compromised window vulnerability 
apss easily extended accommodate arbitrary adversary structures 
purpose helpful recall apss refers frequently sets servers sets servers employs construction formulate share sets 
important things sets containing servers set contains correct server ii secret reconstructed shares stored servers 
collection sets containing servers interesting instance dissemination byzantine quorum system set servers quorum holds 
quorum availability exists quorum consisting correct servers 
quorum intersection intersection quorums contains correct processor 
quorums apss satisfy quorum recoverability share sets correct servers quorum contain su cient shares reconstruct secret 
refer forming recoverable quorum system 
construction fact encompasses generation share sets arbitrary adversary structures secret set servers adversary structure 
provided sets adversary structure cover set servers collection server sets constitute recoverable quorum system satis es quorum availability quorum intersection quorum recoverability 
simply replacing appearances servers description apss set servers adversary structure conditions ii hold new sets replacing appearances servers quorum servers yields variant apss adversary structures 
di cult generalize apss support dynamically changing sets servers dynamically changing adversary structures 
old new server sets adversary structures run delete old shares correct old servers store new shares new servers 
accomplished step gen changed old servers generate propagate subsharings new servers new adversary structure step coord ii changed forward henceforth messages old new servers 
note recoverable quorum systems smaller quorums exist 
see proof quorum availability quorum intersection hold 
satis es quorum recoverability underlying mathematics schemes allow dynamic changes sets servers adversary structures discussed 
share refreshing recovery alternatives viewed high level scheme apss uses construct new shares involves steps servers generate information viz 
subshares shares hold 
ii di erent subsets information forwarded various servers 
iii server uses subsets receives compute new shares 
steps iii comprise implementation share refreshing 
implicit step ii need share recovery mechanism servers obtain information need step iii despite compromised processors fair links assumptions 
alternatives share refreshing share recovery employed apss possible subject subsection 
share refreshing 
jarecki describes share refreshing scheme exploits property share wise addition sharing sharing yields sharing old sharing new sharing obtained generating sharing letting new share jarecki scheme apss 
action gen server generate distinct random sharing shares sharing distributed store messages servers subshares distributed gen label sharing sent coordinator contribute message 
coordinator step coord selects sharings ensure generated correct server informs servers selections compute scheme need extended dynamically changing adversary structures discussed supported apss 
su cient fact sharings generated added old sharing 
servers compromised epoch sharings created compromised servers servers compromised new epoch old epoch recall run belongs epochs 
adversary able learn old new shares reconstruct secret knows transformation old sharing new 
messages 
servers add shares selected sharings old shares order generate new shares 
share recovery 
apss server calculates stores subshares 
subshares stored di erent servers copies remain available correct servers provided servers compromised 
alternative inspired scheme proposed involving bivariate polynomials 
addition sending subshares servers employ standard secret sharing store shares servers 
recovered repeatedly requesting processors received 
order defend receiving bogus compromised servers veri able secret sharing originally splitting sharing 
related apss initially described rst proactive secret sharing protocol asynchronous systems 
derivation new protocol extensions variations discussed new proof appendix rigorous 
protocol derivation interesting clari es role element protocol suggests techniques defending various classes attack transformations produce protocols weaker models computation correspond increasingly stronger adversary 
idea obtaining protocol environment performing series transformations rst employed connection fault tolerance 
see example automatic translations discussed 
theoretical papers cryptographic protocols presume existence transformations hostile model hostile 
author instance assume reliable links realistic fair links order ignore complications message re transmission associated acknowledgment messages obscure workings new protocol 
practice mislead explicit referenced transformation applied 
example possible general simulate reliable links obtain quiescent protocol fair links presence benign failures 
implies describing apss protocol uses reliable links constituted simpli cation guarantee move fair links possible 
proactive secret sharing protocol asynchronous systems described 
protocol di ers apss signi cant ways employs randomized multi valued validated byzantine agreement protocol correct servers agree set subsharings generating new sharing secret 
apss agreement generates multiple new sharings di erent label 
need generate new sharing apss need run agreement protocol 
employs bivariate polynomial implement recovery 
scheme retro apss discussed circumvents exponential explosion combinatorial secret sharing causes apss protocol polynomial time communication message complexity 
proactive secret sharing introduced instance proactive security introduced ostrovsky yung multiparty computations 
herzberg give proactive schemes public key cryptography frankel rabin give proactive rsa schemes 
designed synchronous system model provide set modules generate shares secret private key generate subshares share create new shares subshares possibly old shares 
modules apss obtain corresponding proactive schemes asynchronous systems 
example apss construct proactive threshold rsa scheme coca 
coca systems orts notable attempts compose security fault tolerance weak assumptions environment 
rampart implements process groups asynchronous distributed system compromised processors exhibit arbitrary behavior 
bft byzantine fault tolerance sintra secure intrusion tolerant replication internet toolkits support asynchronous group communication primitives proactive security 
pasis perpetually available secure information systems architecture intended support variety approaches including secret sharing threshold cryptography synchronous systems constructing survivable information storage systems 
apparently number groups concluded secret sharing algorithms asynchronous systems support proactive security going increasingly important distributed services deployed open networks internet trustworthy 
acknowledgments extremely grateful lorenzo alvisi christian cachin michael marsh time trouble provide comments rst draft 
apss correctness proof proving correctness apss involves demonstrating apss availability apss progress apss secrecy hold systems satisfying compromised processors fair links asynchronous systems assumptions 
apss availability prove apss availability su ces show correct server deletes shares exists sharing label say holds ii share stored correct servers 
label highest version number sharing shares deleted av correct server deleted shares av label satisfying correct server deleted shares term correct server deletes shares server receives valid henceforth message satisfying conclude validity henceforth message implies true share stored servers correct current epoch 
holds av correct server deleted shares share stored correct servers 
protocol satis es apss availability 
apss progress establish apss progress start proving series lemmas 
rst establishes run eventually terminate globally valid henceforth message new sharing sent received run correct server 
henceforth message called new valid henceforth 
remaining lemmas show repeated sends various protocol actions eventually terminate new valid henceforth sent 
lemma correct server sent received new valid henceforth message label new sharing generated run run eventually terminates globally 
proof sketch proof contradiction 
assume run terminate globally 
exists correct server deletes old shares subshares quiescent 
due pervasive coordinator deployment conclude coordinator executed term run executing coord 
consequently repeatedly sending messages servers including step term reply messages henceforth message 
server eventually receive henceforth messages due fair links assumption 
receipt henceforth message executing term 
quiescent deletes old shares subshares contradicting earlier assumption lemma suppose correct server sent received valid new henceforth message 
correct server executing step gen eventually receives stored messages subsharing propagates repeated sending gen eventually terminates 
proof sketch compromised processors assumption servers correct 
hypothesis server sent received valid new henceforth message correct server executing term 
correct server resident coordinator started executing term run respond store message executing gen sending stored message 
server repeatedly sends store messages received stored messages 
fair links assumption store messages reach correct servers eventually stored messages sent reply correct server reach eventually receive stored messages required gen terminate 
lemma suppose correct server sent received valid new henceforth message 
correct coordinator executing step coord eventually receives contribute messages containing labels comprising candidate set subsharings repeated sending coord eventually terminates 
proof sketch execution step coord correct coordinators involves repeated sending valid init messages servers 
assertion init messages conclude share stored servers correct previous epoch correct current run 
correct server deleted shares due hypothesis lemma correct server sent received valid new henceforth message shares deleted term actions henceforth message sent received action execute 
share exists correct server say stores share 
repeated sending init messages servers fair links assumption imply server repeatedly receive init messages receives contribute messages exit step coord 
responds init message contribute message share stores eventually due fair links assumption contribute messages share reach remains establishing correct servers respond contribute messages share stored 
receipt init message generates subsharing share stores step gen propagates subsharing servers step gen 
step gen eventually terminates lemma server reach step gen send contribute message sought lemma suppose correct server sent received valid new henceforth message 
correct coordinator executing step coord eventually receives computed messages servers coord terminates 
proof sketch show correct server replies computed message compute 
message receives correct coordinator correct servers repeated sending compute 
messages step coord fair links assumption imply eventually receive computed messages servers 
consider cases 
case 
server stores subshares needs step const 
case execute const reply computed message 
case 
server store subshares needs step const 
server retrieve missing subshares step const assertion conclude valid compute 
message sent correct coordinator subsharing stored correct servers 
subshares deleted due hypothesis lemma correct server sent received valid new henceforth message shares deleted term actions henceforth message sent received action execute 
server guaranteed receive retrieved message repeatedly requests retrieve messages correct server stores respond server retrieved message 
proceed step const reply computed message 
lemmas proving apss progress straightforward 
cases consider case 
correct server sent received new valid henceforth message label new sharing generated run 
apss progress follows directly lemma 
case 
correct server sent received new valid henceforth message label new sharing generated run 
note hypothesis lemmas hold 
show correct coordinator guaranteed reach step coord ii send new valid henceforth message 
apss progress follows directly lemma 
inspection action coord executes reveals execution prevented reaching step coord ii blocking step coord waiting contribute messages step coord waiting computed messages 
lemma proves correct coordinator blocked forever step coord lemma shows blocked forever step coord 
reach step coord ii 
apss secrecy proof apss secrecy indistinguishability argument 
prove information available adversary consistent sharing secret adversary participating executions apss periodically refresh shares learns secret shared 
speci cally show transform execution comprising sequence apss runs periodically refreshing shares secret execution indistinguishable adversary periodically refreshing shares di erent secret proof apss secrecy relative properties secret sharing scheme encryption validity checks apss se adversary learns fewer shares sharing 
se adversary learns information share encrypted shares encrypted subshares validity checks shares subshares 
se de ning characteristic secret sharing applies recovering secret shares recovering share subshares 
se implies encryption oneway intended 
light se ignore di erences due validity checks labels secrets indistinguishability argument 
information involved run apss represented tuple set labels sharings generated run set labels subsharings generated run encrypted shares validity checks taken account proof techniques 
maps labels sharings sharings sharing label maps labels subsharings subsharings subsharing label 
de ne similarly containing information available adversary compromised set processors 
light se de ned indistinguishable denoted provided di erent validity checks appearing parts labels sharings subsharings account di erences prove adversary unable distinguish sharing secret secret domain prove proof transforming sharing secret sharing di erent secret changing speci shares subshares visible adversary employs sharing transformation de ne sharing denoting th share holds secrets standard secret sharing existence follows directly se 
note rst argument subsharing sharing 
set servers compromised epoch compromised processors assumption holds 
due properties ss ss sharing exists index share held compromised server subscripts denote shares consistent notation shares introduced 
run apss compromised servers access shares subshares index generated run subshares index generated correct servers propagated encrypted correct servers correct servers able reconstruct shares index prove giving procedure construct proceed induction number apss runs executed 
base case 
prior rst run apss trusted entity generated sharing say distributed shares servers index sets 
sharing sharing exists refer run 
subsharings exist 
loss generality 
construct 
holds 
de ning characteristic conclude holds 
induction step involves fewer runs 
take induction hypothesis induction hypothesis construct satisfying construct way subsharings consistent shares comprise sharings ii subsharings di er corresponding subsharings subshares known compromised processors subshares indices strictly speaking de ne 
due se labels di er validity checks contain indistinguishable 
safe postulate hold complicating proof obvious mappings sharing labels subsharing labels iii sharings di er sharings shares known compromised processors shares indices consistent subshares conclude holds 
start construction sharing labels holds de ne subsharings share note construction ensures subsharing share holds subsharing di ers subsharing index ii holds 
give construction sharing generated candidate set subsharings 
element reconstruct 
de ne similarly reconstruct 
conclude sharing follows 
induction hypothesis constitutes sharing construction manner reconstruct share refreshing conclude sharing due way constructed holds satisfying consequently di er shares subshares index conclude required iii 
induction case proved aguilera chen toueg 
heartbeat failure detector quiescent reliable communication consensus partitionable networks 
theoretical computer science june 
blakley 
safeguarding cryptographic keys 
proceedings national computer conference pages 
american federation information processing societies proceedings 
boyd 
digital multisignatures 
baker piper editors cryptography coding pages 
clarendon press 
cachin 
private communication 
cachin kursawe lysyanskaya 
asynchronous veri able secret sharing proactive cryptosystems 
unpublished draft may 
cachin kursawe 
secure cient asynchronous broadcast protocols extended 
kilian editor advances cryptology crypto lecture notes computer science pages 
springer verlag 
cachin 
secure intrusion tolerant replication internet 
proceedings international conference dependable systems networks dsn pages 
ieee june 
canetti halevi herzberg 
maintaining authenticated communication presence break ins 
journal cryptology 
castro liskov 
practical byzantine fault tolerance 
proceedings rd usenix symposium operating system design implementation osdi pages new orleans la usa february 
usenix association ieee acm sigops 
chor goldwasser awerbuch 
veri able secret sharing achieving simultaneous broadcast 
proceedings th symposium foundations computer science pages 
courtois parnas 
concurrent control readers writers 
communications acm october 
desmedt 
society group oriented cryptography new concept 
editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
desmedt frankel 
threshold cryptosystems 
brassard editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
desmedt jajodia 
redistributing secret shares new access structures applications 
technical report tr george mason university july 
feldman 
practical scheme non interactive veri able secret sharing 
proceedings th annual symposium foundations computer science pages new york ny usa october 
ieee 
frankel mackenzie yung 
optimal resilience proactive public key cryptosystems 
proceedings th symposium foundations computer science pages miami beach fl usa october 
ieee 
frankel gemmell mackenzie yung 
proactive rsa 
kaliski editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
hadzilacos 
byzantine agreement restricted types failures telling lies 
technical report harvard university cambridge ma 
herzberg jakobsson jarecki krawczyk yung 
proactive public key signature schemes 
proceedings fourth annual conference computer communications security pages 
acm 
herzberg jarecki krawczyk yung 
proactive secret sharing cope perpetual leakage 
coppersmith editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
hirt maurer 
player simulation general adversary structures perfect multi party computation 
journal cryptology 
ito saito 
secret sharing scheme realizing general access structure 
proceedings ieee global communication conference pages tokyo japan november 
jarecki 
proactive secret sharing public key cryptosystems 
master thesis department electrical engineering computer science massachusetts institute technology september 

generalized linear threshold scheme 
blakley chaum editors advances cryptology proceedings crypto volume lecture notes computer science pages berlin germany 
springer verlag 
lamport 
concurrent reading writing 
communications acm 
malkhi reiter 
byzantine quorum systems 
distributed computing 
toueg 
automatically increasing fault tolerance distributed algorithms 
journal algorithms 
ostrovsky yung 
withstand mobile virus attacks 
proceedings th acm symposium principles distributed computing pages 
owicki gries 
axiomatic proof technique parallel programs acta informatica 
pedersen 
non interactive information theoretic secure veri able secret sharing 
feigenbaum editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
rabin 
simpli ed approach threshold proactive rsa 
krawczyk editor advances cryptology crypto lecture notes computer science pages santa barbara california august 
springer verlag 
reiter 
rampart toolkit building high integrity services 
birman mattern schiper editors theory practice distributed systems international workshop selected papers volume lecture notes computer science pages berlin germany 
springer verlag 
reiter 
distributing trust rampart toolkit 
communications acm april 
shamir 
share secret 
communications acm november 
wylie strunk ganger khosla 
survivable information storage system 
ieee computer august 
zhou 
building secure fault tolerant line services 
phd thesis computer science department cornell university ithaca ny usa may 
zhou schneider van renesse 
coca secure distributed line certi cation authority 
acm transactions computer systems appear 

