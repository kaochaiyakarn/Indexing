matchmaking distributed resource management high throughput computing rajesh raman miron livny marvin solomon university wisconsin west dayton street madison wi miron cs wisc edu conventional resource management systems system model describe resources centralized scheduler control allocation 
argue paradigm adapt distributed systems particularly built support high throughput computing 
obstacles include heterogeneity resources uniform allocation algorithms difficult formulate distributed ownership leading widely varying allocation policies 
faced problems developed implemented classified advertisement classad matchmaking framework flexible general approach resource management distributed environment decentralized ownership resources 
novel aspects framework include semi structured data model combines schema data query simple powerful specification language clean separation matching claiming phases resource allocation 
representation protocols result robust scalable flexible framework evolve changing resources 
framework designed solve real problems encountered deployment condor high throughput computing system developed university wisconsin madison 
condor heavily scientists numerous sites world 
derives robustness efficiency matchmaking architecture 

principal consideration resource management systems efficient assignment resources customers 
problem making efficient assignments referred resource allocation scheduling problem commonly formulated context scheduling model includes system model abstraction underlying resources 
system model provides information allocator regarding availability properties resources point time 
allocator uses information allocate resources tasks optimize stated performance metric 
paradigm useful high performance applications tight constraints 
efficient scheduling resources critical meeting constraints 
increasing number organizations environments amenable resource management paradigm customers interested throughput computing resources distributively owned 
distributively owned environment owner resource right define usage policy may sophisticated 
example policy may state job run workstation belongs particular research group run keyboard hasn touched fifteen minutes load average 
distributed ownership impossible formulate monolithic system model need resource management paradigm require model operate environment resource owners customers dynamically define models 
matchmaking resource management paradigm designed address need 
matchmaking uses semi structured data model classified advertisements data model represent principals system folds query language data model allowing entities publish queries requirements attributes 
paradigm distinguishes matching claiming distinct operations resource management match compatible entities claim establishment working relationship entities 
distinction benefits discussed section 
matchmaking paradigm extremely environment large number dissimilar resources workstations tape drives network links application instances software licenses transit available unavailable states advance notice resources may available entities unavailable 
environment employ opportunistic scheduling resources soon available applications migrated resources need preempted 
applications benefit opportunistic scheduling require high throughput high performance 
traditional high performance applications measure performance instantaneous metrics floating point operations second high throughput applications usually application specific metrics weather simulations week crystal configurations year 
words mips millions instructions second performance high throughput applications measured instructions year 
rest structured follows 
section describes related section describes proposed matchmaking framework 
section describe framework condor system 
conclude summary results outline plans continuing research section 
related details current distributed resource management systems vary dramatically aspects share 
providing survey large number systems briefly discuss basic matching mechanisms resource management environments highlight differences conventional resource allocation matchmaking 
systems pbs lsf process user submitted jobs finding resources identified explicitly job control language implicitly submitting job particular queue associated set resources 
customers system identify specific queue submit priori fixes set resources may hinders dynamic qualitative resource discovery 
furthermore system administrators anticipate services requested customers set queues provide services 
time system may accumulate large number queues service semantics differ various extents complicating process finding appropriate queue job 
globus defines architecture resource management autonomous distributed systems provisions policy extensibility allocation 
customers describe required resources resource specification language rsl pre defined schema resources database 
task mapping specifications actual resources performed resource allocator responsible coordinating allocation management resources multiple sites 
rsl allows customers provide sophisticated resource requirements analogous mechanism resources exists 
legion takes object oriented approach resource management formulating matching problem object placement problem 
identification candidate resource performed object mapper recommendation implemented different object 
legion system defines notation similar classads uses object oriented type system inheritance define resources contrasted simple attribute oriented boolean logic classads 
legion supports autonomy jurisdiction jm may reject requests offered requests match policy site managed jm 
jm gives resource veto power way resource describe requests haven offered serve 
matchmaking framework basic idea matchmaking simple entities provide require service advertise characteristics requirements classified advertisements classads 
designated matchmaking service matchmaker matches classads manner satisfies constraints specified respective advertisements informs relevant entities match 
responsibility matchmaker ceases respect match 
matched entities establish contact possibly negotiate terms cooperate perform desired service 
matchmaking framework may decomposed components 
classad specification defines language expressing characteristics constraints semantics evaluating attributes 
advertising protocol defines basic conventions regarding matchmaker expects find classad ad included matchmaking process matchmaker expects receive ad advertiser 
matchmaking algorithm defines contents ads state system relate outcome matchmaking process 
matchmaking protocol defines matched entities notified information case match 
claiming protocol defines actions matched entities take enable discharge service 
noteworthy aspects approach distinguish conventional resource allocation models 
ffl conventional resource management systems allow customers impose constraints type services require 
mechanism allows service providers express constraints customers willing serve 
ffl semantics matchmaker identifying match entities allocating 
match results mutual entities may activate separate claiming protocol involving matchmaker complete allocation 
entity may choose proceed reject altogether 
match construed hint 
beneficial consequence approach matchmaker stateless service simplifies recovery case failure 
discuss important aspects paradigm detail 
classified advertisements classad highly flexible extensible data model represent arbitrary services constraints allocation 
model novel aspects 
ffl classads semi structured data model specific schema required matchmaker allowing matchmaker naturally heterogeneous environment 
ffl classad language folds query language data model 
constraints queries may expressed attributes classad 
ffl classads class objects model 
arbitrarily nested leading natural language expressing resource aggregates allocation requests 
type machine activity idle daytime current time seconds midnight seconds disk kbytes memory megabytes state unclaimed mips arch intel solaris name leonardo cs wisc edu raman miron solomon friends wright untrusted rival rank member owner member owner friends constraint member owner untrusted rank true rank daytime daytime 
classad describing workstation classad mapping attribute names expressions 
example shows classad describes workstation condor pool university wisconsin shows classad describes job submitted execution 
attributes may simple integer real string constants may complicated expressions constructed arithmetic logical operators record list constructors 
expressions refer attributes rank 
expressions attribute discussed greater detail 
similar structures called records dictionaries frames contexts 
examples adapted actual ads working condor installation 
edited slightly clarity illustrate features classad mechanism 
type job submit time secs 
past owner raman cmd run sim iwd usr raman sim args memory rank memory constraint type machine arch intel solaris disk memory self memory 
classad describing submitted job matching claiming describe specific actions taken entities require matchmaking services 
providers customers construct classads describing send matchmaker step 
classads constructed conform advertising protocol specified matchmaker attaches meaning attributes 
example advertising protocol may specify attribute constraint indicates compatibility attribute rank measures desirability match see figures 
advertising protocol specifies entities send classads matchmaker 
matchmaker invokes matchmaking algorithm matches identified step 
perform match matchmaker evaluates expressions environment allows classad access attributes attribute form self attribute name refers attribute classad containing attribute name refers attribute ad 
self mentioned explicitly evaluation mechanism assumes self prefix 
example constraint job ad sub expression memory self memory expresses requirement server advertise amount memory sufficient meet memory needs job expression written memory memory 
classads figures assume matchmaking algorithm considers pair ads incompatible constraint expressions evaluate true 
rank attributes choose compatible matches provider ads matching customer ad matchmaker chooses highest rank value non integer values treated zero breaking ties provider rank value 
non existent attribute evaluates constant undefined 
operators strict respect value operand undefined result undefined 
particular comparison operators strict memory memory memory memory evaluate undefined target classad memory attribute 
boolean operators non strict arguments mips evaluates true attributes mips exists satisfies indicated bound 
non strict operators return boolean results undefined allowing explicit comparisons constant undefined memory undefined memory matchmaking algorithm effectively treats undefined false match fails constraint evaluates undefined valued logic boolean expressions supports natural expression constraints objects types partially known priori 
advertisement advertisement matchmaker match algorithm entity provider entity requestor claiming match notification notification match 
actions involved matchmaking process matching phase matchmaker invokes matchmaking protocol notify parties matched step sends matching ads 
matchmaking protocol include generation hand session key authentication security purposes 
customer contacts server directly claiming protocol establish working relationship provider step 
important note identifying match invoking matchmaking protocol immediately service customer 
match mutual advertising entities 
separation matching claiming beneficial properties 
weak consistency requirements 
state service providers requesters may continuously changing possibility matchmaker match stale advertisement 
claiming allows provider customer verify constraints respect current state 
weak consistency remainder system significantly simpler robust efficient 
authentication 
claiming protocol may cryptographic techniques provider customer convince identities 
handshake added claiming protocol little cost 
bilateral specialization 
dynamic heterogeneous environments possible write matchmaker aware specifics allocating different kinds resources may added environment 
myriad kinds resources environment may problem packing resource specific allocation code matchmaker 
pushing establishment allocation claiming stage details allocation contained entities really need interact specific kinds providers customers 
matchmaker may written general service depend kinds services resources matched 
concept bilateral specification implies system assume single monolithic static allocation model allocation models supplied entities involved providing services 
matchmaking framework allows dissimilar allocation models coexist resource management environment 
verification :10.1.1.35.4167
principals involved match responsible establishing maintaining servicing match 
matchmaker need retain state match fact simplifies recovery case failure system scalable 
example matchmaking condor condor high throughput computing environment manage large heterogeneous collections distributively owned resources 
architecture system structured provide sophisticated resource management services resource customer application levels sequential parallel applications 
section briefly describes aspects condor system relevant problem matchmaking 
resources condor system represented resource owner agents ras responsible enforcing policies stipulated resource owners 
ra periodically probes resource determine current state encapsulates information classad owner usage policy 
example classad encapsulates fairly sophisticated owner policy demonstrating flexibility mechanism 
constraint attribute indicates workstation willing run applications submitted users rival willing run jobs members research group friends may resource workstation idle determined keyboard activity load average may workstation night 
rank expression states research jobs higher priority friends jobs turn higher priority jobs 
customers condor represented customer agents cas maintain customer queues submitted jobs represented lists classads 
ras cas periodically send classads condor pool manager describing resources job queues respectively 
resource classads request classads conform advertising protocol states classad include expressions named constraint rank discussed previously 
protocol requires advertising parties include contact addresses ads allows ra include authorization ticket ad 
periodically pool manager enters negotiation cycle 
phase invokes matchmaking algorithm determines cas require matchmaking services obtains information project system may www cs wisc edu condor 
requests cas matches compatible ra ads 
notion compatible completely determined constraint expressions classads may matched general manner 
addition rank expressions goodness metrics identify desirable compatible matches 
matchmaking algorithm uses past resource usage information enforce fair matching policy 
pool manager determines classads match invokes matchmaking protocol contact matched principals contact addresses specified classads send classads 
manager gives ca authorization ticket supplied ra 
ca performs claiming protocol contacting ra sending authorization ticket 
ra accepts resource request ticket matches gave pool manager request matches ra constraints respect updated state request resource may changed advertisement 
request accepted workstation runs customer job 
ca finishes resource relinquishes claim ra advertises unclaimed 
ra may send ad starts running job indicating workstation currently busy interested hearing higher priority customers 
specification constitutes higher priority completely control ra 
classads purposes condor 
entities represented classads queries submitted various administrative user tools 
way matching protocols find objects matching pattern 
example tools check status job queues browse existing resources 
research classad matchmaking framework flexible general method resource management pools resources exhibit physical ownership distribution 
novel aspects framework include semi structured data model represent entities folding query language data model clean separation matching claiming phases resource allocation 
representation protocols facilitate static dynamic heterogeneity resources results robust scalable flexible framework evolve changing resources 
framework developed response real problems encountered design development deployment condor high throughput computing system developed university wisconsin madison finds constant scientists university world 
success framework real system demonstrates validity approach 
classad mechanism intrinsic notion schema lists classads representing resources customers exhibit high degree regularity manifest ways structural regularity value regularity 
occurs entities tend publish attributes names occurs groups entities publish attributes similar values 
currently investigating techniques exploiting regularity automatically aggregating classads matches may performed groups 
group matching may boost matchmaking throughput service allocation requests 
complexity constraints imposed resources customers may hinder diagnostic capability administrators customers may wonder certain requests unable find resources particular characteristics 
alleviate problem researching methods identifying constraints satisfied pool 
addition diagnostic utilities tool may help discovering hidden characteristics pool 

ibm load user guide sept 
czajkowski foster kesselman martin smith tuecke 
resource management architecture metacomputing systems 
available ftp ftp globus org pub globus papers gram ps livny van dantzig pruyne 
worldwide flock load sharing workstation clusters 
journal generations computer systems 
foster kesselman 
globus metacomputing infrastructure toolkit 
appear international journal supercomputer applications 
wulf 
legion view feet 
proceedings fifth ieee international symposium high performance distributed computing aug 
henderson 
portable batch system external specification 
technical report nasa ames research center 

support object placement distributed systems 
technical report cs university virginia jan 
lewis grimshaw 
core legion object model 
proc 
fifth ieee int symposium high performance distributed computing aug 
litzkow livny 
experience condor distributed batch system 
ieee workshop experimental distributed systems 
litzkow livny mutka 
condor hunter idle workstations 
proc 
th int conf 
distributed computing systems pages 
nestorov abiteboul motwani 
inferring structure semistructured data 
proceedings workshop management semistructured data tucson arizona may 
pruyne livny 
interfacing condor pvm harness cycles workstation clusters 
journal generations computer systems 
research 
document number 
technical report cray research 
saltzer reed clark 
arguments system design 
acm transactions computer systems aug 
zhou 
lsf load sharing large scale heterogenous distributed systems 
proc 
workshop cluster computing 
