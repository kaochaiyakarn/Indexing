survey automatic test data generation order reduce high cost manual software testing time increase reliability testing processes researchers practitioners tried automate 
important components testing environment automatic test data generator system automatically generates test data program 
years attempts automatic test data generations 
focus article program generation generation starts actual programs 
techniques gui syntax test data generation issue article 
article survey automatic test data generation techniques current literature 
basic concepts notions test data generation test data generator system works described 
problems automatic generation identified explained 
important challenging research topics 

software testing accounts total cost software development 
cost reduced process testing automated 
way generate input data program tested program test data generation 
years number different methods generating test data 
ferguson korel divided methods classes random path oriented goal oriented test published 
survey automatic test data generation 
proceedings second conference computer science engineering link ping pages 
october 
jon dept computer information science link ping university sweden mail ida liu se data generation 
appropriate classification terms test data generation problem path selection considered separately 
selection path largely affect process test data generation 
models typical test data generator system consists parts program analyzer path selector test data generator 
source code run program analyzer produces necessary data path selector test data generator 
selector inspects program data order find suitable paths 
suitable instance mean paths leading high code coverage 
paths argument test data generator derives input values exercise paths 
generator may provide selector feedback information concerning infeasible paths 
structure follows 
section basic concepts notions explained 
section discusses test data generator system focus generator path selector 
program analyzer investigated article 
section problems identified test data generation discussed 
section research topics 

basic concepts program considered function set possible inputs set possible outputs 
formally set vectors dn di dxi dxi domain input variable xi 
input variable variable appears input parameter input statement read 
execution certain input denoted 
control flowgraph just flowgraph context clear graphical representation pro control flowgraph program analyser path selector test data generator control flowgraph data dependence graph test path paths info test data 
architecture test data generator system 
gram 
exist different definitions control flowgraphs literature 
depending properties language model definition differ 
definition inspired beizer korel 
shows sample flowgraph corresponding program 
control flowgraph program directed graph consisting set nodes set edges connecting nodes 
flowgraph special nodes entry exit node respectively 
node defined basic block uninterrupted consecutive sequence instructions flow control enters leaves halt possibility branching 
intuitively means statement block executed block executed 
furthermore jumps program targeting instruction block 
edge nodes corresponds possible transfer edges labeled condition branch predicate 
branch predicate empty predicate true 
order traverse edge condition edge hold 
time node edges condition yielding true non deterministic flowgraph 
node outgoing edge int int int int int type plain swap swap swap type equilateral type isosceles type isosceles return type 
program determines type triangle sides 
refer node condition edges branches 
specific path sequence nodes node path pi pi qp 
execution traverses path say traverses path absolutely feasible exists input traverses path path absolutely infeasible 
certain input absolutely feasible path infeasible 
say infeasible relative just relatively infeasible 
path begins entry node ends exit node called complete path 
called incomplete path path segment 
paths pw denotes concatenation denote node path denote node say paths connect set edges 
specific paths path say pw unspecific path connect 
say path complements pw specific 

flowgraph program 
unspecific path pn pi specific define closure denoted set paths qn pn qi complements 
example informally unspecific path path path segments missing 
instance unspecific path segment composed example complement example path segment specific path 
example intuitively unspecific path wild card paths 
closure represent listing paths 
instance path begins start node ends exit node closure paths entry exit node 
closure contains paths start node node second node 
closure path set paths 
order execution continue branch corresponding branch predicate true 
traverse certain path conjunction cn branch predicates ci hold 
say path predicate 

automatic test data generator system test data generator system consists parts program analyzer path selector test data generator 
article keep focus selector generator 
assume analyzer exists works properly 

test data generator point define problem automatic test data generation follows program unspecific path generate input traverses means assume program analyzer path selector 
program analyzer provides information concerning program data dependence graphs control flowgraphs turn path selector identifies paths test data generator derive input values 
depending type generator system paths specific unspecific 
goal find input values traverse paths received selector 
achieved steps 
find path predicate path 
second solve path predicate terms input variables 
solution system equalities describing input data formed order traverse path 
having system apply various search methods come solution 
examples search methods alternating variable simulated annealing different heuristics systems 
due complexity derived equation systems techniques solve branch predicate time 
leads loss performance necessary check violations previously solved predicates occur 
example find path predicate 
getting details finding path predicate see happens execute program input 
doing find path traversed 
construct path predicate conjunction branch predicates encountered traversing path 
letting check holds 
traverse path path predicate corresponding hold 
plainly see case 

constructed path predicate ignored execution nodes 
consequently letting side effects propagate path predicate ended incorrectly 
instance assume program executed input pause execution reaches node 
point expect reaching node statement swap executed setting 
case path predicate swap considered equal respectively 
int type plain swap swap type isosceles structure illustrates data dependencies branch predicates 
row depends execution previous rows 
instance checking row holds executed int type plain swap swap 
order adjust branch predicates take data dependence account 
start row execute code 
update succeeding rows including current condition side effects 
continue row rows processed 
iter swap type isosceles iter row corresponds branch predicate adjusted execution nodes 
gives new path predicate 
substitute see holds 
valid path predicate basically approaches constructing test data generator randomly generate test data generate test data unspecific path generate test data specific path 
approaches fall classes random goal oriented test data generation 
implemented statically dynamically 

static dynamic test data generation come transformed system equations example symbolic execution actual execution generation occurs statically dynamically 
approaches symbolic execution 
executing program symbolically means actual values variable substitution 
idea expression terms input variables 
instance input variables 
code contain realizes technique requires plenty computer resources expressions resolved transformed 
puts lot restrictions program 
instance function calls modules access source code handled 
furthermore symbolic execution implies symbolic evaluator particular language built requires great amount 
gains 
instance requires violation checks branch predicates solved 
opposite symbolic execution actual execution 
variable substitution run program possibly randomly selected input 
consequently values variables known time execution 
monitoring program flow system determine intended path taken 
backtracks node flow took wrong direction 
different kinds search methods flow altered manipulating input way intended branch taken 
technique quite expensive 
require iterations suitable input 
changing flow particular node flow earlier point may change 
actual execution suffers speed execution program analyze 
monitor program flow code instrumented put probes program ascertain path traversal 
article gupta hybrid forms :10.1.1.50.8112
combines gains kinds requires executions find appropriate input 

random test data generation random testing simplest method generation techniques 
generate input values type program ultimately data type integer string heap just stream bits 
function string argument just randomly generate bit stream represent string 
contrary random testing perform terms coverage 
merely relies probability quite low chances finding semantically small faults accomplish high coverage 
semantically small fault fault revealed small percentage program input 
consider piece code void foo int int write write probability exercising write statement maximum integer order execute statement variables equal 
easily imagine generating complex structures integers give worse probability 
evaluation search methods uses random testing benchmark considered lowest acceptance rate 

goal oriented test data generation goal oriented approach stronger random generation sense providing guidance certain set paths 
letting generator generate input traverses entry exit program generates input traverses unspecific path sufficient generator find input path turn reduces risk encountering relatively infeasible paths provides way direct search input values 
methods technique chaining approach assertion oriented approach 
interesting extension chaining approach 
implemented system 
typical chaining approach data dependence find solutions branch predicates 
characteristics chaining identify chain nodes vital execution goal node 
chain built iteratively execution 
method uses find path concept hard predict coverage set goals 
assertion oriented testing truly utilizes power goal oriented generation 
certain conditions called assertions manually automatically inserted code 
assertion executed supposed hold error program assertion 
instance code void fie int int assert write say executing variable zero 
goal assertion oriented generation find path assertion hold 
advantage assertion oriented testing oracle see section code 
methods expected value execution generated test data calculated source code 
assertions necessary expected value provided assertion 

path oriented test data generation path oriented generation strongest approaches 
provide generator possibility selecting set paths just specific 
way goal oriented test data generation specific paths 
successively leads better prediction coverage 
hand harder find test data 
systems technique 
solely control flow graph lead selection infeasible paths relatively absolutely 
demillo offutt proposed constraintbased test data generation method 
focused fault testing mutants deliberate change source code 
clear paths selected technique somewhat similar assertion oriented testing fit goal oriented test data generation 

path selector component test data generator system path selector 
effectiveness system highly dependent paths selected 
path selection define automatic test data generation problem program find set paths meets specified coverage criterion 
means vital find test data path find test data 
carefully selecting paths come set test test data covers program 
stronger coverage criterion paths selected 
list cited criteria 
statement coverage execute statements flowgraph 
branch coverage encounter branches program predicate statement evaluated true false 
condition coverage clause condition flowgraph executed true false time execution 
multiple condition coverage combination truth values clause condition executed execution 
path coverage traverse path flowgraph 

sample control flowgraph statement coverage weakest obvious 
illustrates weakness achieve statement coverage select path hand achieve branch coverage path traversed 
means statement coverage possible faults depending non execution node left unexplored 
stronger criteria condition multiple condition path coverage infeasible achieve programs moderate complexity branch coverage recognized basic measure testing 
knowledge method achieve coverage proposed path prefix strategy introduced myers ensures branch coverage modulo relatively infeasible paths 
strategy adopted chang heuristic approach test data generation 
research path selection desirable 

problems test data generation section problems encountered test data generation explored 
due complexity generation problem great deal toy programs programs short length low complexity lack standard language features data types pointers 
resembling developed instance industry 

arrays pointers arrays pointers similar constructs suffer kind problems evident 
symbolic execution arrays pointers complicate substitution values variables known 
consider condition statement array element indexing variable input 
equal statement 
similar saying 
ramamoorthy propose approach solve problem creating new instance assigned array unambiguity 
unambiguity resolved array instances 
course technique suffers large performance penalty 
case actual execution issue values known runtime 
indexing problem regarded shape problem addressed 
shape problem closely related loop problem section 
think program takes complex dynamic data type heap input performs action 
order generate structure input generator internal shape structure heap nodes connected large structure generate number nodes heap 
attempt solving problem generating dynamic data structures encountered 
method actual execution 
solution works clear 

objects generating objects definition hard pointer problem dynamically allocated 
concepts classes inheritance polymorphism added impossible compile time determine code called 
means solutions problem dynamic 
knowledge papers concerning problem 

loops loops depending input variables having constant number iterations trouble zone 
long path generate specific loops cause problem exact amount iterations derived path 
problem merely reduced problem tuning loop variables 
loop happens lie unspecific part path turns lot difficult 
case symbolic evaluation closed form loop derived 
generally simple task 
ramamoorthy suggest loop executed times chosen user test data generator 
valid actual execution 

modules generally program divided functions modules 
considering symbolic execution case generating test data function containing non recursive function calls ramamoorthy proposed solutions brute force solution inlining called functions target analyzing called functions generate path predicates functions 
source code function module accessible precompiled libraries complete static analysis called functions possible 
actual execution source code needed extent 

infeasible paths generating test data order traverse path involves solving system equations 
system solution conclude path infeasible 
problem solving arbitrary system equations undecidable 
system linear gaussian elimination conclude path feasible :10.1.1.50.8112
non linear systems inconvenient 
methods studied set highest number iterations abandoning path infeasible order infinite loop 

constraint satisfaction encountered methods random testing satisfy constraint solve path predicate branch predicate 
encountered methods poor constraint satisfaction techniques due fact difficult problem 
function calls constraints solved symbolic execution 
dynamic approaches suffer function calls extent constraints satisfy 
encountered search methods solving constraints alternating variable simulated annealing genetic algorithms iterative relaxation different heuristics 

oracle way drastically reduce effort testing oracle check test case failed 
having oracle especially important automatic generation tests produced 
unfortunately way achieving oracle supply extra information source code requirement design specification adding assertions form logic description program 

attempts automation test data generation 
attempts simplify process constraint satisfaction introducing rule test data generation removal path constraints favor goals 
promising search methods simulated annealing genetic algorithms data type independence iterative relaxation predictability 
area investigate particularly object oriented field 
typical characteristic generators handle booleans integers reals arrays extent 
attempt korel pointers 
ai algorithms genetic algorithms tend better dealing complex structures 
answer symbolic execution actual execution combine 
instance intuitive opinion shape problem best solved static dynamic analysis extensions data structure declaration introducing assertions 
way analyzer gets help deriving shape dynamic structure 
identified topics interesting challenging research constraint satisfaction techniques object oriented programs pointers shapes assertions modules path selection data control dependency oracle problem beizer 
software testing techniques 
van nostrand reinhold nd edition 
chang carlisle cross ii brown 
heuristic approach test case generation 
proceedings acm computer science conference pages 
acm 
brown chang cross ii 
rule software test data generator 
ieee transactions knowledge data engineering march 
demillo offutt 
constraint automatic test data generation 
ieee transactions software engineering september 
ferguson korel 
chaining approach software test data generation 
ieee transactions software engineering january 
ferguson korel 
generating test data distributed software chaining approach 
information software technology january 
gupta mathur soffa :10.1.1.50.8112
automated test data generation iterative relaxation method 
proceedings acm sigsoft sixth international symposium foundations software engineering pages november 
korel 
automated software test data generation 
ieee transactions software engineering august 
korel 
assertion oriented automated test data generation 
proceedings th international software engineering icse pages 
ieee 
michael mcgraw 
automated software test data generation complex programs 
th ieee international automated software engineering pages october 
offutt hayes 
semantic model program faults 
international symposium software testing analysis issta pages 
acm press 
myers jr path prefix software testing strategy 
ieee transactions software engineering se july 
ramamoorthy ho chen 
automated generation program test data 
ieee transactions software engineering se december 
tracey clark mander 
automated program flaw finding simulated annealing 
proceedings acm sigsoft international symposium software testing analysis volume pages march 
