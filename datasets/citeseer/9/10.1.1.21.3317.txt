fast approximate string matching dictionary ricardo baeza yates gonzalo navarro dept computer science university chile blanco santiago chile dcc uchile cl successful technique search large textual databases allowing errors relies online search vocabulary text 
reduce time online search index vocabulary metric space 
show reasonable space overhead improve factor fastest online algorithms tolerated error level low reasonable text searching 
approximate string matching recurrent problem branches computer science applications text searching computational biology pattern recognition signal processing problem stated follows long text length comparatively short pattern length retrieve segments occurrences text edit distance pattern edit distance ed strings defined minimum number character insertions deletions replacements needed equal 
online version problem pattern preprocessed text 
classical solution uses dynamic programming mn time 
nowadays best practical results kn time worst case kn log oe average oe alphabet size 
average case mentioned sublinear sense text characters inspected online problem omega gamma taken constant 
interested large textual databases main motivations approximate string matching come low quality text optical character recognition ocr typing errors databases different languages users may spell correctly spelling errors pattern text searching foreign names searching uncertainty 
texts take gigabytes relatively static 
fastest online algorithms practical case process megabytes second 
preprocessing text building index speed search necessary 
years ago indexing text approximate string matching considered main open problems area 
practical indices today rely online search vocabulary text quite small compared text 
takes seconds 
may adequate single user environments interesting improve search time multi user environments 
instance web search engine receives requests second spend seconds traverse vocabulary 
propose organize vocabulary metric space distance function ed known data structure index spaces 
show experimentally imposes reasonable space overhead vocabulary reward important reduction search times close half best online algorithms 
algorithm may applications dictionary words searched allowing errors spelling problems 
organized follows 
section explain basic concepts 
section metric space technique 
section experimentally evaluate technique 
section give 
basic concepts indices approximate string matching indices approximate string matching appeared different flavors sequence oriented indices 
type oriented natural language text information retrieval index retrieve word edit distance pattern second useful text natural language index retrieve sequence notion word separation 
focus word oriented indices problem simpler solved quite 
sequence retrieving indices immature useful huge text databases indices large behaved disk costly build update 
clear word oriented indices capable retrieving occurrence sequence words 
instance retrieve flower error flo wer flowers 
cases restriction acceptable 
current word oriented indices basically inverted indices store vocabulary text set distinct words text list occurrences word set positions word appears text 
approximate string matching solved running classical online algorithm vocabulary text obtaining set words retrieve 
rest depends particular index 
full inverted indices simply union lists occurrences matching words obtain final answer 
indices glimpse variations reduce space requirements making occurrences point blocks text exact positions traverse candidate text blocks find actual answers 
cases blocks need traversed block web page need mark occurrences inside page main cost corresponds search vocabulary 
see 
scheme works vocabulary small compared text 
instance gb trec collection vocabulary takes mb 
empirical law known heaps law states vocabulary text words grows fi fi 
practice fi 
online algorithm search vocabulary seconds 
improving vocabulary occurrences text index online approx 
search online search 
approximate searching inverted index 
online search text may may necessary 
may necessary single user environment interest multi user environment web search engine 
online searching classical algorithm approximate string matching dynamic programming takes mn time 
minor modification algorithm compute edit distance words costs 
algorithm unbeaten flexibility adapted number variations distance function allow transpositions give different costs operations exists better algorithm compute exact edit distance random strings improvements search algorithm allowing errors 
orders magnitude faster classical flexible rely specific properties edit distance 
technique study needs compute exact edit distance strings relies classical algorithm 
result may perform evaluations edit distance say vocabulary may slower online traversal fast 
important understand indexing scheme evaluated traversing small percentage vocabulary guarantee usefulness practice 
hand fastest algorithm usable extension edit distance desired classical algorithm technique accomodate extensions extra cost 
machine described fastest online approximate search algorithms run maximum speed megabytes second searching words minimum megabyte second dynamic programming algorithm general 
searching general metric spaces concept approximate searching applications vast number fields 
examples images fingerprints audio databases machine learning image quantization compression text retrieval approximate string matching document similarity genetic databases applications common characteristics 
universe objects nonnegative distance function theta gamma 
defined 
distance satisfies axioms set metric space called triangular inequality valid reasonable distance functions 
smaller distance objects similar 
distance considered expensive compute comparing fingerprints 
finite database subset universe objects preprocessed build index instance 
new object universe query retrieve similar elements database 
different queries depending application simplest new element maximum distance retrieve elements set distance applicable problem set elements vocabulary distance ed satisfies stated axioms 
number data structures exist index vocabulary queries answered inspecting elements 
distance discrete gives integer answers determines data structures 
briefly survey main applicable structures 
proposed structure burkhard keller tree bk tree defined follows arbitrary element selected root subtrees identified integer values 
th children recursively build tree elements distance process repeated element process elements store bucket size 
answer queries form root enter children gamma proceed recursively branches discarded triangular inequality 
arrive leaf bucket size compare sequentially elements 
report elements satisfy structure called fixed queries tree fq tree :10.1.1.45.384
tree basically bk tree elements stored nodes level course necessarily belong set stored subtree real elements leaves 
advantage construction comparisons saved query nodes backtracking occurs tree 
visit nodes level need perform comparison level 
expense somewhat taller trees 
variant proposed called fixed height fq trees leaves depth regardless bucket size 
leaves deeper necessary sense may performed comparison query intermediate node eliminating free need compare leaf 
intermediate structure bk trees fq trees proposed 
analysis performance fq trees disregarding complications applied bk trees 
show results appendix 
give analysis fixed height fq trees new 
approaches designed continuous distance functions covered brief review 
reason structures information obtained comparisons done continuous spaces 
done discrete spaces fact reviewed structures superior continuous spaces directly applicable continuous case 
cover algorithms need space impractical application 
metric space data structure approximate search exact specialized search vocabulary doctor doctoral document extra 

proposed data structure 
vocabulary metric space traversing vocabulary online comparing query database metric space 
proposal organize vocabulary avoid complete online traversal 
organization fact want set words edit distance query 
edit distance ed satisfies axioms metric particular discrete metric 
proposal storing vocabulary sequence words organize metric space available techniques 
distance function ed computed dynamic programming time lengths words compare 
comparison takes efficient algorithms carried times get answer 
hand dynamic programming algorithm flexible add new editing operations changing cost efficient online algorithms flexible 
shows proposed organization 
vocabulary stored contiguous text separators words words sorted 
allows exact prefix retrieval binary search structure built 
search structure allow errors goes top array allows approximate exact retrieval 
important difference general assumptions case distance function costly compute negligible costs 
instance space overhead accesses incurred new search structures eliminate advantage comparing query words vocabulary 
consider simply number comparisons complete cpu times algorithms compare cpu times best sequential search algorithms run complete vocabulary 
efficiency cases depends number errors allowed algorithms worsen errors allowed 
consider extra space incurred vocabulary large fit main memory 
asymptotic analysis appendix shows number traversed nodes sublinear verify behave vocabulary sizes practice 
interesting notice structure search metric space exact searching just search allowing zero errors distance zero 
efficient data structures designed specifically exact retrieval hashing binary search search times may low reduced efficiency important fact need additional structure exact search hash table 
experimental results show experimentally performance obtained metric space techniques online algorithms 
ran experiments sun ultrasparc mhz mb ram running 
tested different structures bk trees bkt fq trees fq trees fixed height fqh 
tested buckets size tested fixed heights 
explained structures metric spaces suited case verified experimentally fact 
words mb vocabulary english trec collection gb 
vocabulary randomly permuted separated incremental subsets size 
experiment deals space time overhead data structures implement search metric space suitability exact searching 
shows results 
seen build times linear fqh exactly comparisons element slightly superlinear log fact height log bkt 
overhead build normally minutes small percentage time normally taken build index gb text database 
consider extra space see bkt poses fixed space overhead reaches maximum 
corresponds fact bkt stores node element 
space slightly superlinear internal nodes empty experiment 
space fqh tends constant case large case shown 
show exact searching involves distance evaluations low growth rate logarithmic 
shows structure exact searching 
exception fqh fqh time fixed noticed especially small grows linearly shown 
show query performance indices search error 
seen dictionary traversed percentage decreasing number comparisons sublinear fqh 
user times correspond quite number comparisons 
show percentage user times structures versus best online algorithm case implemented 
seen maximum dictionary size reach online time best metric structures 
structures believe bkt best choice faster takes space similar fqh takes space 
alternative takes space close bkt achieves times online searching 
result errors shown 
time metric space algorithms improve online search despite best ones traverse vocabulary 
reason offline algorithms sensitive error level online ones 
shows scheme useful search error 
table shows results squares fitting number comparisons performed different data structures 
obtain logarithmic approximation bucket size affect constant multiplying factor 
exception fqh constant close expected 
results confirm fact structures inspect sublinear number nodes 
notice possible function cover reasonable range showing fixed values exponent smaller bkt ones better constant 
constant hand keep unchanged bucket size varies exponent affected allows extrapolate bkt continue improve larger data sets fqh hand shows clearly fact linear fixed changed taken function done 
results increase exponent close 
exception fqh increases lot constant exponent possibly increase 
error cases 
squares fitting real cpu times give similar growth rates instance bkt 
proposed new method organize vocabulary inverted files order support approximate searching indexed text collection 
methods rely sequential search vocabulary words classical online algorithm 
propose organize vocabulary metric space advantage fact edit distance models approximate search metric 
method applied problems dictionary searched allowing errors spelling applications 
show experiments mb vocabulary gb text best data structure task burkhard keller tree buckets 
structure allows negligible construction time reasonable space overhead extra space taken plain vocabulary search close dictionary error errors 
cuts times best online algorithms error errors online algorithms traversing dictionary faster 
shown experimentally trees fixed queries trees perform sublinear number comparisons close error 
analysis fixed height fixed queries trees 
implementation bk trees optimized space 
estimate careful imple known metric space data structures depend strongly particular space distance function allow generalization cases 
ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffl fqh ffl fqh ffl fqh pi bkt pi bkt pi bkt 
comparison data structures 
top bottom left right number distance evaluations user times build extra space taken vocabulary size number distance evaluations exact search 
axis expressed multiples 
structure bkt ln gamma bkt ln bkt ln ln gamma ln ln gamma fqh theta gamma fqh theta gamma fqh theta gamma table 
squares fitting number comparisons different data structures 
ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl fqh ffl fqh ffl fqh pi bkt pi bkt pi bkt 
search allowing error 
row shows number comparisons left absolute number right percentage dictionary 
second row shows user times left seconds right percentage best online algorithm 
axis expressed multiples 
mentation overhead reduced 
overhead quite reasonable cases 
leave putting function fixed height fixed queries trees show sublinear behavior analytically predicted 
ara navarro ziviani 
large text searching allowing errors 
proc 
wsp pages 
carleton university press 
baeza yates 
text retrieval theory practice 
th ifip world computer congress volume pages 
elsevier science sep 
baeza yates manber wu 
proximity matching fixed queries trees 
proc 
cpm lncs pages 
baeza yates navarro 
faster algorithm approximate string matching 
proc 
cpm lncs pages 
baeza yates navarro 
block addressing indices approximate text retrieval 
proc 
acm cikm pages 
baeza yates 
fast practical approximate pattern matching 
proc 
cpm pages 
lncs 
brin 
near neighbor search large metric spaces 
proc 
vldb pages 
burkhard keller 
approaches file searching 
cacm 
chang 
theoretical empirical comparisons approximate string matching algorithms 
proc 
cpm pages 
lncs 
faloutsos lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
acm sigmod record 
harman 
overview third text retrieval conference 
proc 
trec pages 
nist special publication 
heaps 
information retrieval computational theoretical aspects 
academic press 
landau vishkin 
fast string matching differences 
computer systems science 
manber wu 
glimpse tool search entire file systems 
technical report dept cs univ arizona oct 
myers 
fast bit vector algorithm approximate pattern matching dynamic progamming 
proc 
cpm 
springer verlag 
appear 
sellers 
theory computation evolutionary distances pattern recognition 
algorithms 
shapiro 
choice points file searching 
cacm 
sutinen tarhio 
gram locations approximate string matching 
proc 
esa 
lncs 
uhlmann 
satisfying general proximity similarity queries metric trees 
information processing letters 
ukkonen 
finding approximate patterns strings 
algorithms 
vidal 
algorithm finding nearest neighbours approximately constant average time 
pattern recognition letters 
wu manber 
fast text searching allowing errors 
cacm 
yianilos 
data structures algorithms nearest neighbor search general metric spaces 
proc 
acm siam soda pages 
appendix 
analysis fixed height call probability random elements distance gammai 
fq trees analyzed simplifying assumption distribution change enter subtree analysis experimentally verified 
show number distance evaluations done search element tolerance application allowing errors fq tree bucket size ff ff solution fl ff fl gammak result sum comparisons done level tree logarithmic term plus done leaves tree ff 
cpu cost depends number traversed nodes shown ff constant different 
number distance evaluations exact search log 
simplifying assumption analysis applies bk trees 
main difference number comparisons case number nodes traversed plus number leaf elements compared adds ff constant higher 
distribution tree different difference simplifying assumptions anyway 
analyze fq trees fixed height 
analysis simpler fq trees 
number elements filtered proximity search distance applying fixed queries 
expected number comparisons proximity query fi probability filtering element doing proximity search distance element distance query filtered probability gammak element distance probability fi gammak note fi converges increases 
expected number elements filtered consecutive levels related fi gamma 
clearly fi decreases grows optimal obtained 
fi fi solving obtain optimal log gamma fi log fi replacing get log gamma fi log fi gamma fi logarithmic optimal linear fixed 
asymptotically better ff results fq trees bk trees 
constant factor log term grows exponentially small medium obtain logarithmic behavior fixed height increase number elements grows log 
unfortunately optimal height dependent search tolerance logarithmic cost maintained non optimal provided theta ffi log ffi log fi overestimate optimal height 
hand number nodes visited bigger fq trees 
fact recurrence similar fq trees possible show number nodes visited ff ff easily larger small trees cost comparing elements high comparing genetic sequences polygons graphs 
related problem size data structure superlinear 
fact possible optimal applications space limitations instance hardly reach limit 
problem variance number elements filtered level large increases level may need queries practice achieve desired filtering 
decrease number nodes visited may compress paths degree idea patricia trees 
store node fixed query skip node 
compress nodes want filter element 
idea fixing height fixing probability filtering path recursively 
