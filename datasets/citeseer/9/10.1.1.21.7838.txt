aspect oriented dependency inversion martin iii blueprint technologies pike ste 
falls church va com 
qualities coupling cohesion long governed software engineering 
aspect oriented software development aosd provides new weapon fight improper coupling 
example oo design patterns aspect oriented replacement analyzed dependencies terms abstractness stability 
component development cbd tool dependency management larger scale 
propose combining best aosd cbd techniques software module dependency management 

past decades software engineers improved practice software engineering adding new paradigms controlling coupling cohesion software modules 
progressed assembly language procedural languages structured design object development object oriented programming component development 
examine effects aspect oriented software development aosd coupling cohesion dependency management 
principles managing dependencies object oriented systems articulated robert martin 
principles captured place key acyclic dependencies principle adp dependencies form cycles 
dependency inversion principle dip depend abstractions depend concretions 
stable dependencies principle sdp depend direction stability 
summarizes principles placing classes coordinate system abstractness versus instability 
classes packages coordinate system fall diagonal upper left lower right 
dependencies directed upward dip leftward sdp 
fair comparisons oop aop object oriented aspect oriented programming technologies require clear definition dependency 
definitions available 
compiler perspective modules require recompilation developer changes 
second developer perspective modules need edited editing 
traditional languages perspectives equivalent 
example editing header file generally requires corollary editing recompiling necessarily order 
equivalence disappears quantification nonlinear mapping source binary characteristic aosd 
compiler perspective aspect weaving subject composition languages fare poorly oo alternatives precisely automated weaving composition 
prefer developer perspective era simpler languages compiled byte code ghz workstations 
concrete dip reusable class class proper dependency improper dependency useless class reusable class stable sdp unstable 
plotting design coordinate system abstractness versus instability reveal dependencies managed design 
order study potential aspect oriented design reduce improve dependencies system reexamine oo design patterns aspect oriented alternatives 

visitor design pattern aspect oriented replacement visitor pattern infamous cyclic dependency visitor element hierarchy 
illustrated 
improper dependency visitor violates dependency direction principles goes concrete stable stable forms cycle 
author proposed objectoriented solutions problem 
aspectoriented solution basic aosd effective 
interestingly object oriented solutions cyclic visitor dependency problem remove dependencies element visitor 
bad dependency noted visitor pattern aspect oriented language aspect augment class dependency sense left class built dependency language feature 
example downgrading aspect java yield poor design characterized fat classes low cohesion 
bad dependency hand disappears programmer consciousness user source code defining classes may augmented said remain compiler writer consciousness 
way similar statements polymorphism transition procedural objectoriented languages 
concrete visitor element cycle forming improper dependency concrete element concrete visitor stable unstable 
visitor pattern shows obvious flaw plotted abstractness instability field dependencies explicitly shown 
concrete element concrete element augments augments concrete aspect stable unstable 
aspect oriented solution extending behavior existing classes moves weaving element hierarchy accomplished visitor pattern user code programming language compiler 
eliminates visitor cyclic dependency source code 

observer case visitor easy 
surprising possibility replacing workhorse observer pattern surprising observer pattern purpose invert dependencies 
figures show applying observer pattern temperature sensor notifies display temperature changes 
na solution design sensor directly wired temperature display order trigger display changes 
adding subject observer classes observer pattern hardwiring gone dependencies right direction code pulled direction greater reusability 
concrete temperature sensor notifies temperature display application stable unstable 
observer pattern temperature sensor keeps hard wired temperature display order notify temperature changes 
bad dependency opposition adp dip sdp 
concrete observer subject temperature sensor temperature display application stable unstable 
adding observer pattern removes improper dependency pulls code direction greater reusability upper left hand corner 
aspect oriented solution better 
reducing class dependency counts making reusable 
shows notification orchestrated single aspect weaves order notify changes 
reusable notification code externalised freeing clients different applications employ different notification interfaces 
reusable longer needs knowledge 
easily wired different temperature sensors different aspects sensor method named method named 
concrete temperature sensor temperature display temperature change notification aspect application stable unstable 
aspect oriented alternative observer pattern notification aspect directly accomplishes wiring objects decoupling completely making reusable 
way design improvement 
bit early speaking aspect oriented analysis notice classes aspects closely match physical model conceive application temperature sensor display wire 
object oriented designs tend mechanism classes classes serve critical software function correspondence real world objects 
aspect oriented notification software module captures notification counterpart real world wire post office semaphores kick pants 
satisfying outcome 
aspectoriented answer visitor artificial mechanism classes gone visitor observer subject 
cases requirements notification include functionality asynchronous idle time firing notifications queuing elimination redundant notifications case mechanism classes may worth keeping orchestrated notification aspect 
aspect tutorial includes example applying observer pattern simplest form classes provide notifications 
approach readily extended sophisticated subject observer base classes 
advantage aspect oriented notification mechanism classes ability easily generate notifications different types 
typical listener mechanisms java beans provide strongly typed notifications 
aspect optional mechanism classes implementing lots different listeners straightforward 

extension object extension object pattern combines dependency inversion characteristics observer pattern extensibility characteristics visitor pattern 
shows structure pattern abstractness stability space 
concrete base class subject provides mechanisms dynamically add query extensions 
extension downcast specific interface 
pattern amounts defining standard way cross cast interface 
concrete extension subject concrete subject specific extension concrete extension stable unstable 
extension object pattern includes mechanism classes subject extension invert dependency original class extensions partial interfaces concrete 
aspect oriented alternative extension objects extension aspects 
approach eliminates need client cross casting extension base interface directly injecting implementation specific interface class seen set clients 
removing cross casting client code approach reduces run time overhead cross cast design complexity measured number classes methods 
core functionality reusable extension mechanism predefined inheritance subject dependence extension 
concrete core class specific extension concrete extension aspect stable unstable 
aspect oriented extension existing class simply augments class directly indirectly realize desired specific interface eliminating run time mechanism extension object pattern 
interesting detail client specific extension dependent aspect aspect dependent client 
second option lead design notification aspect wider connection client service 
option probably appropriate clients clients unknown compile time 
judgement relative stability abstractness client extension answer question 
different approaches taken different extensions core class 

aspect oriented component connectivity discussion concerned common theme connectivity extensibility service clients 
aosd naturally moves extensions base functionality aspects core classes stable concrete reusable 
terms open closed principle states modules open extension closed modification classes closed part aspects open part 
aspects mere connectivity oversimplification 
shall case connectivity complex perfectly suited aspects 
concrete mechanical connectors electronic connectors mechanical parts electronic parts mechanical assemblies electronic assemblies stable unstable 
mechanical electronic assemblies dependencies parts connectors proper directionality stability abstractness 
years ago software components integrated circuits software engineering profession 
component technology justifiably displaced object technology sharpest tool programmer toolbox components achieved promise parts shelf waiting assembly 
reasons connecting software components far complex connecting electronic mechanical components 
suggests mechanical electronic parts relation connectors nuts bolts wires pin patterns bus standards assemblies cars houses computers vcrs correct directionality dependency 
software connectors concrete stable mechanical counterparts 
natural dependency software part software connector improper dependency principles 
conundrum heart design patterns observer chief 
concrete software parts state behavior natural improper dependency software connectors relationships collaborations software assemblies applications stable unstable 
mechanical electronic connectors software connectors static dynamic relationships dynamic collaborations concrete stable 
natural dependency parts connectors improper dip sdp 
software connectors stable concrete software parts contrast electronic mechanical analogs 
mechanical connectors defined size shape strength properties material standardized loss design flexibility 
electronic connectors add list defined behavior signals carried 
stable mechanical cousins 
variety electrical signals mhz digital analog hz ac finite standardized 
software signals software connectors varied software 
argue variety information carried software modules precisely software valuable 
aspect oriented software development potential build profession learned objectoriented component development solve remaining issues need inverted dependency part connector 
aspect oriented connectors insert precise unanticipated ways parts connect 
imaginary engine block parts need designed particular connection mechanism 
shows dependency inversion accomplished aspect oriented solution pushes connections aspects leaves core functionality classes components parts 
course distinction core functionality connectivity extension clear 
fact figures abstractness stability software parts connectors 
realistically boxes overlap considerably 
particular connection reusable particular part parts general reusable connections general 
hyper slice approach attraction front functionality classes sliced different dimensions separate glue language defines correspondence composition slices 
approaches module composition firstclass citizen aspect oriented development 
concrete software parts classes components software connectors crosscutting aspects software assemblies applications stable unstable 
placing software connectors mainly aspects successfully inverts dependency software parts software connectors 
gain advantages implied foregoing discussion careful forget lessons object oriented component development cbd 
example order foster low coupling components define narrow interfaces completely hide implementation 
ideally aspects need peek component curtain 
example simple minded implementation notification aspect summarized field changes call 
associated far curtain solution worse incorrect notifications fired middle larger operations 
better solution completing call operation call 
possible current aspectoriented languages 
imagine solution lower coupling knowledge implementation details completing call changes value returned call 
associated solution maintainable coupled method truly needed notification 
directionality dependencies software modules proper time reducing rigidity dependencies 
identifies levels coupling classes 
primary nil export interface overt implementation coupling 
aosd possible refine list 
relationship class aspect aspect may independent interface dependent interface modifying implementation dependent implementation modifying interface modifying aspect means new changed interface available clients existing implementation details 
implementation dependent aspect original implementation details order augment example causing side effect private method called 
implementation modifying aspect changes behavior original class example restricting changes member variable leave 
goal aspect augment functionality core class aspects 
aspect knowledge implementation coupled freely existing implementation details 
lower coupling means better modularity aosd 
hand separating variable range checking basic computation may lead better module cohesion justifiable increase coupling 
aspects license abandon established principles module coupling cohesion 
ways require attention principles 

aosd cbd lessons learned mixing aspects components enumerated number 
cbd aosd ways odds 
key practice cbd take small modules gather larger module component narrow interface rest world 
aosd takes large modules splits smaller independent overlapping interlocking pieces 
move forward aosd abandoning cbd 
propose way reconcile competing aims distinguish functional aspects connective aspects 
functional aspects modular multidimensional functionality goal allowed operate component curtain 
connective aspects configurable connectivity goal operate middle ground components knowledge component implementation details 
concrete interface functional aspects component connective aspects application stable unstable 
distinction functional connective aspects key retaining benefits componentbased software development moving forward aspectoriented software development 
may seen aspects identified replacing visitor observer extension object primarily connective aspects 
functional aspects established crosscutting sort logging synchronization tracing error propagation 
functional aspects may implementation dependencies implementation modifying dependencies connective aspects allowed interface modifying dependencies 
note maintaining component boundaries physical compiler dependencies manageable 
may necessary recompile entire component changing functional aspect entire application 
refinement connective aspects layered synchronization distribution coordination 
possible imagine design recursive 
example components composed functional aspects composed mixture functional connective aspects services composed connective aspects applications 
compliant potentially unifying approaches aosd labs worldwide vision paints aosd improving practice software engineering building best practices today 

open questions topics discussion workshop include aosd danger forgetting coupling cohesion lessons past decades 
advantages separation concerns improved cohesion outweigh potential disadvantages greater coupling smaller modules aosd designs 
circumstances 
novel metrics heuristics need evaluating coupling cohesion aspect oriented systems 
aosd potential making oo design patterns obsolete 
objection design patterns heavy indirection lost sense self multiple objects 
way avoid different lost sense self multiple aspects 
aspects design patterns combined 
software industry attempting standardize reusable software connectors natural dependency part connector proper 
xml web services steps direction 
dynamic connections service discovery part solution 
functional connective aspects orchestrated language features different ones 
right mixture imperative declarative styles 
fairly high level compositional techniques reconciled lower level aspect oriented languages 
keep oo cbd aosd characteristics abandoned 
cbd curtain appropriate way 


martin design principles design patterns www com 

filman friedman aspect oriented programming quantification obliviousness ecoop workshop aspects dimensions concern 

gamma helm johnson vlissides design patterns elements reusable object oriented software 

default extrinsic visitor 
martin riehle buschmann eds 
pattern languages program design 
addison wesley longman 

martin acyclic visitor 
martin riehle buschmann eds 
pattern languages program design 
addison wesley longman 

xerox parc aspect primer www aspectj org 

gamma extension object 
martin riehle buschmann eds 
pattern languages program design 
addison wesley longman 

meyer object oriented software construction nd ed prentice hall 

cox planning software industrial revolution ieee software 

ossher tarr multi dimensional separation concerns hyperspaces ibm research report april 

aksit aspect oriented programming composition filters object oriented technology demeyer bosch eds ecoop workshop reader springer verlag pp 
july 

devanbu lazy approach separating architectural concerns icse workshop advanced separation concerns software engineering may 

object oriented design heuristics addison wesley 

szyperski component software object oriented programming addison wesley longman 

perez juan developing component systems aop concepts icse workshop advanced separation concerns software engineering may 
