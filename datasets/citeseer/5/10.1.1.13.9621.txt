architecture generation gcc chris lattner vikram adve university illinois urbana champaign lattner cs uiuc edu llvm cs uiuc edu presents design implementation program interprocedural optimizer built gcc framework 
new language independent intermediate representation extend current gcc architecture include powerful mid level optimizer add link time interprocedural analysis optimization capabilities 
intermediate representation ssa low level strongly typed representation designed support cient global optimizations high level analyses 
program available link time aggressive program optimizations analyses possible improving time space requirements compiled programs 
final proposed organization gcc retains important features successful today requires modification back ends gcc completely compatible user makefiles 
gnu compiler collection gcc ways free software movement 
supports source languages plethora back ends various targets providing unified target free software 
gcc successful extreme portability stability able compile optimize popular source languages java target 
unfortunately despite success gcc compiler suite optimization infrastructure competitive commercial compilers 
years gcc optimizer evolved compiling statement time compiling optimizing entire functions time new support unit time compilation compiling optimizing functions translation unit 
scope analysis optimizations increases compiler better able reduce time space requirements generated code 
proposes logical step gcc optimizer extend able analyze optimize programs link time enabling new optimizations making existing analyses optimizations powerful 
example inlining translation units program alias analysis interprocedural register allocation interprocedural constant propagation data layout optimizations exception handling space optimizations sorting initializer priorities link time key challenges program optimization enable powerful transformations keeping compile times reasonable keep development process unchanged user makefiles 
architecture propose new language independent low level code representation preserves important type information source code 
low level ssa representation allows compiler perform variety optimizations compile time loading link time optimizer 
optimizer perform meaningful optimizations program high level information program prove aggressive optimizations safe 
lowlevel code representation typed languageindependent constructive type system directly capability optional enabled program compiled level optimization example 
optimizing linker files front compiler gcc fe mid level opt gcc fe mid level opt files source file source file source file gcc fe mid level opt llvm assembly link program analysis optimization rtl expansion native codegen file native assembler native files native linker exe file unmodified source file gcc fe mid level opt high level compiler architecture program optimization exposes information structure array accesses optimizer 
link time optimizer designed combine translation units program final program optimization 
program optimized machine code generated link time entire program allowing variety interprocedural low level code optimizations performed 
low level virtual machine llvm implementation architecture intermediate representation described allows concrete describing aspects design :10.1.1.10.331
system served host research projects require program information host variety traditional compiler optimizations :10.1.1.19.8733:10.1.1.10.3316
hope lessons learned llvm project useful gcc community willing contribute code gnu project interest 
planning public release llvm liberal license summer 
llvm discussed helps clarify ideas proposed architecture intended gcc llvm 
organized follows section describes proposed high level architecture detail including modifications need gcc infrastructure 
section describes important aspects proposed intermediate representation system 
section describes llvm existing implementation proposed design 
section describes related proposed design section wraps 
high level compiler architecture proposed high level architecture illustrated 
essential aspect design separates current cc program components front compiler optimizing linker 
front retains responsibilities current gcc front ends preprocessing lexical analysis parsing semantic analysis 
unmodified new system 
function parsed checked semantic errors expanded tree representation new language independent intermediate representation described section 
entire translation unit translated errors occurred standard set mid level optimizations performed translated module 
optimizations finished file emitted contains ir assembly code representation 
optimizing linker invoked reads translated ir files libraries compiled intermediate representation 
links files single file representation program run program analyses optimizations 
analyses transformations complete gcc backend invoked expand intermediate representation rtl configured target description produce native file 
optimizing linker produces native file compilation process proceeds standard system assembler linker resolve symbols libraries available ir form producing native executable 
compatibility implementation key features design compatible standard compile link models compilation fully compatible existing makefiles 
order provide compatibility link phase gcc compiler driver extended invoke optimizing linker system assembler necessary standard link step compile process 
way input files ir format automatically linked optimized interfering compilation linking standard translation units libraries 
files ir format entire invocation optimizing linker skipped 
important aspect design compiler works program optimization enabled 
enabled translation unit compiled function time unit time depending setting time switch optimizer rtl expansion code generation phases compiler 
produces native file processed standard system assembler linker 
approach feasible large amount code shared optimizing linker compiler front ends 
accomplished libraries shared contain existing gcc back shared optimizations ir making logical pieces part binary 
case actual organization existing gcc code base change substantial way 
architectural issues ecting performance addition providing desired functionality compatibility existing systems crucial compiler slow unacceptably program optimization enabled 
practical terms design addresses issue performing optimization possible compile time 
time source file changed recompiled application relinked 
order reduce amount done design allows traditional optimizations performed compiler front stage requiring optimization occur link stage common program optimizers 
aggressive scalar optimizations performed compile time need rerun link time reducing time compilation 
course compiler performance issue arise user modifying program recompiling 
optionally design compiler try minimize amount recompilation necessary change occurs keeping track interprocedural information modify functions translation units building dependence graph modules 
practice compiler complicated prone subtle bugs hard reproduce 
feel cost recompilation fairly substantial system native code regenerated entire application extra complexity introduced compiler weighed recompilation time penalties may impractical 
code representation representation analyze manipulate program determines kinds transformations possible compilation process performed successful 
mentioned earlier propose languageindependent low level ssa strongly typed representation sole representation mid level link time optimizers 
representation class assembly language includes information necessary represent program fact directly interpretable concrete details representation llvm included section 
low level address code representation static single assignment form enables direct application known cient global optimizations 
ssa form permits sparse optimizations general require bitvector data flow analysis compute results 
address code representation opposed tree structured representation transformations easy develop reason 
transformations need information high level behavior program ective 
order preserve information propose representation maintain strong type system captures information pointer structure array accesses program 
working llvm system find type information allows variety high level analyses transformations nature low level representation easy manipulate :10.1.1.19.8733:10.1.1.10.3316
advantage type information detecting understanding bugs transformations easier 
goal program representation enable di erent types optimizations possible 
important representation able represent parts program including global variables file scope asm statements example form allows transformations modify 
useful feature representation stable textual format assembly language read written compiler 
trivial write unit tests transformations debug transformations isolation rest compiler representation directly interpreted immediate feedback transformation 
performance aspects representation optimizing linker brings compiled program module interprocedural analysis optimization passes improve program 
passes operate entire program ciency analysis optimization critical 
reason aspects representation designed transformations cient possible 
particular ssa representation allows cient sparse global optimizations flow sensitivity important analyses reducing cost substantially 
addition address code representation small memory footprint simple memory ownership semantics eliminating need live garbage collected heap 
experience llvm code optimizers sparse representation times faster optimizations dense representation rtl 
concrete llvm example gives example function corresponding llvm module compiles 
example shows important aspects llvm representation 
particular gives simple example type system basic instruction flavor demonstrates instructions 
details llvm representation llvm language 
llvm uses simple constructive type system composed primitive types structures arrays pointers 
simple type system believe contains key features necessary front lower high level type 
example llvm front lowers classes inheritance nested structure types 
types important llvm system operand instruction type 
functions llvm contain list basic blocks basic block contains list instructions 
llvm instructions include standard instructions load xor phi instruction representing ssa form intraprocedural control flow llvm simple consisting conditional branches unconditional branches switch instruction 
llvm explicit branches address arithmetic exposed level structures pointers arrays memory load store instructions 
language uniform simple analyze transform 
getelementptr instruction llvm provides mechanism structured address arithmetic getelementptr instruction exactly analogous sequences array subscript structure ssa nodes eliminated register allocation phase native code generation 
llvm code cast pointer integer type add arbitrary set cast back pointer unstructured address arithmetic necessary 
typedef struct quadtree double data struct quadtree ch qt void sum qt double double ret ret se qt ch ch double sum ch ret data ret example function quadtree type double qt qt type quadtree void sum qt double entry oca double ype tmp qt nu ype boo br bool tmp abe abe tmp ch chi tmp getelementptr qt long long ch load qt tmp ca void sum qt ch double tmp load double tmp getelementptr qt long tmp load double tmp tmp add double tmp tmp br abe nd nd ret phi double tmp entry store double ret double ret void return va ue corresponding llvm code llvm code function index expressions returning address element indexed example tmp instruction indexes th element pointer st structure element children member rd element array 
structured address arithmetic exposes necessary high level information structure array accesses directly analyses transformations need 
important aspect llvm language memory happen load store instructions operation 
llvm objects live memory global variables functions heap stack explicitly allocated exposed address value 
example variable required live memory address may passed recursive invocation sum 
impossible take address virtual register stack memory explicitly allocated alloca instruction load store instructions 
dramatically simplified def chain construction virtual registers require form alias analysis construct 
final example illustrating llvm simplifies example uses strange syntax equivalent correspondence clear 
back invoked fixed sized entry block treated address exposed automatic variables 
development transformations operators lacks 
particular llvm need unary operators copy instruction 
providing standard negate bitwise complement unary operators llvm represents standard binary operators operand constant neg sub xor 
reduces dependence canonical form representation simply reduces number instructions need handled 
lack copy instruction possible ssa form def chains trivially computed available 
time copy instruction inserted replace redundant computation example su cient replace uses destination uses source operand def chains implicitly performing copy propagation automatically 
simple feature avoided phase ordering issues require unnecessary passes representation copy propagation passes 
llvm compiler infrastructure llvm compiler infrastructure currently consists approximately lines code front patch gcc cvs tree :10.1.1.10.331
code largely implements design di erences 
section describes di erences implementation status llvm features llvm writing transformations simpler insights working llvm 
implementation status llvm front gcc cvs repository 
generates code calling llvm versions functions equivalent rtl expansion routines llvm expand expr llvm expand function start decl llvm compilation 
routines build llvm version translation unit written file allowing unit time style transformations performed gcc 
modifying cc binary interface directly llvm optimizations written cc directly emits expanded code optimization 
gcc compiler driver invokes assembler invoke program called parses llvm assembly file runs series llvm optimizers emits compressed bytecode file file 
interface intentionally designed identical interface standard system tool avoid having changes spec files 
user makefile links program gcc compiler driver invokes tool 
tool reads files specified links appropriate bytecode files files runs series interprocedural optimizations program 
time directly emit llvm bytecode file entire program automatically invoking native code generator 
program optimized available single bytecode file ways execute resultant program 
llvm provides slow portable interpreter bytecode files sparc native code generator back just time jit compiler ia architecture 
large number llvm optimizations analyses available including passes traditional ssa optimizations pre induction variable canonicalization value numbering register promotion 
control flow graph optimizations analyses critical edge elimination loop canonicalization various dominator post dominator control dependence graph related analyses interval construction natural loop construction cfg simplification path profiling instrumentation 
interprocedural analyses transformations call graph construction interprocedural alias analyses global variable merging dead global elimination inlining data structure analysis automatic pool allocation interprocedural mod ref :10.1.1.19.8733
addition pure infrastructure llvm system provides large test suite 
main sections test suite regression tests contain thousands tests transformations tools feature tests demonstrate instructions idioms llvm program tests compile benchmarks programs various code generators ensuring produce code behavior agrees native compiler 
llvm web site hosts variety documentation describing aspects infrastructure 
llvm development 
particular front nearing completion runtime library support exception handling major missing portion sparc support jit development system runtime optimization statically compiled binaries research phases 
di erences proposal biggest di erence proposal llvm implementation lack llvm rtl conversion pass 
research purposes back provides functionality full rtl back slower 
expect component added demand 
big di erence current implementation proposal interface cc program mid level optimizer 
implementation currently tools separate executables obviously incurs overhead linking components 
subject including code gcc better decided look resolve issue 
support developers strengths llvm infrastructure interesting utilities constructing passes finding bugs passes building compiler selection passes 
strength important reasons allows new people get system get productive relatively fast allows experienced developers productive 
important features strong consistency checker pass manager tool call 
llvm infrastructure includes stringent checker llvm code ensures type relationships ssa properties definitions dominates uses llvm invariants haven violated transformation 
checker automatically run passes development mode ensure passes corrupting input passes run 
additionally development mode automated memory leak detector automatically enabled detects violations llvm representation ownership model 
light weight checker implemented additions constructors destructors classes representation garbage collector necessary 
llvm pass manager provides structured environment passes execute 
transformations llvm declarative syntax indicate passes prerequisites break critical edges analyses required natural loop information alias analysis value numbering interprocedural mod ref info analyses preserved destroyed transformation run 
structured pass model easier developers fit code system construction tools simple matter handling command line arguments selecting sequence passes run 
useful tool best described automated test case reducer 
llvm program fragment list passes run attempts reduce test case list passes minimum exposes problem 
currently diagnose passes crash assert optimization passes program executing resultant program code generator assuming deterministic program test case causes pass crash usually able reduce test case llvm instructions basic block cause problem 
pass combination passes test case isolate single function 
tool possible modularity pass manager ability read write modify representation programs 
surprises insights llvm experience developing llvm developed insights may useful broad audience 
implementing typesafe linker non trivial exercise 
programs rely implicit prototypes called functions prototypes blatantly wrong 
seen cases global data declared di erent types di erent translation units practice behaves similarly common block fortran 
normal binary linker typically problems issues handled explicitly type safe linker 
hand information useful programmer lint tool 
performing interprocedural analysis having program available possible increases precision analyses 
reason compiled libraries llvm form allow analyzed optimized program 
interesting consequences library code specialized optimized program example optimizing qsort inlining comparison functions indirect calls need 
second dramatically reduces need adhoc annotations functions indicating properties third mode debugging back bugs planned 
source wc gcc llvm pass times llvm pass filename loc cse ic ger sum ic ger combine expr cse reload decl insn recog loop table transformation timings source files spec cpu gcc benchmark const pure 
simple interprocedural analyses advantage applying user code built functions 
investing making system easier develop debug worth 
particular tool narrow test case thousands lines code dozen lines llvm code seconds doing manually take longer 
making development environment detect problems early extremely valuable developers making productive making easier bring new people 
having modular system helps keep people getting overwhelmed start project 
optimizer performance llvm representation allows cient transformations analyses aggressive interprocedural transformation traditional optimizations 
order quantify performance compared performance gcc cse pass performance llvm transformations closest see table 
tests compiled largest single files spec cpu gcc benchmark gcc source code 
numbers collected ghz amd athlon processor 
timings cse pass collected compiling gcc option 
actual timings acquired average runs report option compiler configured pc linux gnu target 
cse pass ignored timings just include invocation cse pass 
llvm timings chose combination instruction combining global expression common subexpression elimination passes 
combination phases believed strictly powerful cse pass 
instruction combining pass value numbering constant folding trivial dead code elimination phases plus performs variety transformations similar gcc combine pass described 
pass transforms chained occurrences commutative operations promote better code motion 
pass known technique remove common subexpressions 
table shows execution time pass sum 
table shows number transformations pass instructions combined instructions common subexpressions deleted 
table see llvm optimizations run time cse pass exception combine case took half time 
despite faster llvm transformations powerful cse pass operates extended basic blocks 
slowest individual transformation far instruction combination pass uses list driven approach perform peephole style optimization ssa graph giving global transformation powers large collection algebraic identities folding cse pass perform 
transformations quite ective 
addition simple scalar optimizations llvm designed support aggressive interprocedural analyses optimizations link time 
example consider data structure analysis algorithm context sensitive flow insensitive memory analysis framework 
hardware capable analyzing entire programs seconds povray vortex programs lines code respectively 
simpler algorithms may obviously run quickly 
related vast amount related interprocedural optimization research commercial compilers 
avoid major changes build process compilers combine program link time high level representation substantial optimization performed 
representation takes form source language syntax tree ast source nodes removed 
program combined link time optimization entire program commences starting interprocedural optimizations 
contrast approach described immediately optimizes translates program low level strongly typed intermediate representation suitable optimization compile link time 
substantial optimization performed compile time interprocedural optimizers perform link time reducing amount time recompilation requires 
previous shown low level representation type information support aggressive high level analyses transformations 
successful class interprocedural optimizers target low level optimizations 
smart linkers typically operate level machine code performing optimizations interprocedural register allocation code layout optimizations 
tools successful require little modification source compiler capable performing high level optimizations 
optimizations performed framework code generation occurs entire program time exposing necessary interprocedural information 
gcc project projects development merged relevant 
particular ast optimizer project tree ssa aim improve optimization gcc migrating optimizations target specific rtl representation target independent ast representation 
representation proposed similar tree ssa representation ways language independent ssa allow nested expressions di erent ways 
particular representation capable representing entire translation unit compiled lot information program stored global variables immediately emitted output assembly file 
representation operations closer source level 
example variable definitions address taken def chain representation complex representation 
hand tree ssa project better integrated gcc written language require completely new intermediate representation 
presents design aggressive realistic interprocedural optimization component gnu compiler collection 
design capable supporting broad range optimization techniques reasonable terms compilation time implemented 
hope orts accelerate process making gcc produce code competitive commercial compilers llvm directly adopted optional part compiler 
encourage members community interested proposed architecture llvm contact authors feedback questions ideas 
amaral gao 
sgi pro compiler infrastructure tu 
international conference parallel compilation techniques pact oct 
ayers de jong peyton schooler 
scalable cross module optimization 
proc 
sigplan conf 
programming language design implementation pages montreal june 
craig davidson hobbs 
gem optimizing compiler system 
digital technical journal 
burke torczon 
interprocedural optimization eliminating unnecessary recompilation 
acm transactions programming languages systems toplas 
cohn goodwin lowney 
optimizing alpha executables windows nt spike 
digital technical journal 
cytron ferrante rosen wegman zadeck 
ciently computing static single assignment form control dependence graph 
acm transactions programming languages systems pages october 
adve lattner 
memory safety runtime checks garbage collection 
proc 
acm sigplan symposium languages compilers tools embedded systems feb 
kulkarni li ng sehr 
overview intel ia compiler 
intel technology journal 
holler hewlett packard 
compiler optimizations pa 
proc 
ieee international computer conference 
lattner :10.1.1.10.331
llvm infrastructure multistage optimization 
master thesis computer science dept university illinois urbana champaign urbana il dec 
see llvm cs uiuc edu 
lattner adve 
llvm assembly language manual llvm cs uiuc edu docs html 
lattner adve :10.1.1.19.8733
automatic pool allocation disjoint data structures 
proc 
acm sigplan workshop memory system performance berlin germany jun 
lattner adve 
data structure analysis cient context sensitive heap analysis 
tech 
report uiucdcs computer science dept univ illinois urbana champaign apr 
srivastava wall 
practical system intermodule code optimization link time 
journal programming languages dec 
stallman 
gnu compiler 
free software foundation 
wall 
global register allocation link time 
proc 
sigplan symposium compiler construction palo alto ca 
