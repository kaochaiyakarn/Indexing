abduction logic programming marc denecker kakas department computer science leuven celestijnenlaan heverlee belgium 
marc denecker cs kuleuven ac www cs kuleuven ac department computer science university cyprus st nicosia cyprus 
ac cy www cs ac cy 
abduction logic programming started late early attempt extend logic programming framework suitable variety problems artificial intelligence areas computer science 
aims chart main developments field years take critical view developments perspectives logical epistemological computational suitability application 
attempts expose challenges prospects development field 
decades abduction embraced ai non monotonic reasoning paradigm address limitations deductive reasoning classical logic 
role abduction demonstrated variety applications 
proposed reasoning paradigm ai diagnosis natural language understanding default reasoning planning knowledge assimilation belief revision multi agent systems problems :10.1.1.27.1476:10.1.1.13.7065
context logic programming study abductive inference started eighties outcome di erent attempts logic programming solving ai problems 
facing limitations standard logic programming solving problems di erent researchers proposed extend logic programming abduction 
eshghi introduced abduction logic programming order solve planning problems event calculus 
approach abduction solves planning goal explaining ordered sets events plan entails planning goal 
approach explored shanahan denecker jung 
kakas mancarella showed application abduction logic programming deductive database updating knowledge assimilation 
application abduction diagnosis studied abductive logic programming framework semantics defined suitable extension completion semantics lp 
parallel studies abduction inferential method eshghi kowalski kakas mancarella dung abduction semantical device describe non monotonic semantics logic programming way analogous poole 
abductive logic programming investigated knowledge representation point view suitability representing reasoning incomplete information definitional assertional knowledge shown :10.1.1.21.5853
reasons abductive logic programming alp recognized promising computational paradigm resolve limitations logic programming respect higher level knowledge representation reasoning tasks :10.1.1.13.7065
alp manifested framework declarative problem solving suitable broad collection problems 
consequently start number abductive systems developed 
abductive procedure computing negation failure abduction extended case general abductive predicates 
early abductive procedure developed completion 
proposed sldnfa extension sldnf abduction allowing nonground abductive hypotheses 
proposed extension sldnfa constraint solver linear order demonstrated system applied correctly partial order planning context event calculus 
idea integrating abduction constraint solving developed generally aclp framework procedure result incorporating clp constraint solving abductive procedure 
abductive procedure regarded hybrid sldnfa procedure console defined explicit rewrite rules completion equality 
incorporated constraint solving similar way aclp procedure 
bottom procedure combined top refinement system implementation model generator developed multiprocessor machine developed icot 
abductive procedure lp abdual exploits tabling techniques xsb 
despite orts potential applications abduction taken considerable time ort develop computationally ective systems abduction practical problems 
field faced extend continues number challenges logical methodological implementational level 
past important progress levels 
aim chapter give comprehensive july august volume vol 
journal logic programming special issue abductive logic programming 
contains papers open new perspectives relationship abduction computational paradigms 
overview state art abductive logic programming point problems challenges sketch progress 
bob kowalski founders abductive logic programming 
proposed alp framework integrate agent knowledge reduce goal subgoals plan achieve goal described program part abductive theory agent obligations prohibitions elements determine reactive behaviour described integrity constraints part abductive theory 
suggestion alp plays central role capturing behaviour autonomous agent feeds reacts environment 
view role way logic programming evolve generally programming language described elegantly short position statement logic programming volume 
rest organized follows 
section briefly reviews study abduction ai philosophy abductive logic programming broad context 
section gives formal definition abduction reviews di erent formal semantics proposed literature 
section reviews di erent alp frameworks developed far analyzing potential scope applications links extensions lp 
ends discussion challenges prospects development field alp 
abduction 
explanation 
term abduction introduced logician philosopher pierce defined inference process forming hypothesis explains observed phenomena 
abduction defined broadly form inference best explanation best refers fact generated hypothesis subjected optimality criterion 
broad definition covers wide range di erent phenomena involving form hypothetical reasoning 
studies abduction range philosophical treatments human scientific discovery formal computational approaches di erent formal logics 
context formal logic abduction defined follows 
logical theory representing expert knowledge formula representing observation problem domain abductive inference searches explanation formula satisfiable holds contains free variables satisfiable general contain free variables 
general subjected restrictions aforementioned minimality criteria criteria restricting form explanation formula restricting predicates may appear 
view defines abductive explanation observation formula logically entails observation 
argued reasons natural view explanation cause observation 
known example follows disease caused latent untreated form 
probability latent untreated leads 
note context direction entailment causality opposite cause entail entails cause 
doctor explain hypothesis account explanation 
practice examples causation entailment correspond rare turns applications abduction ai theory describes explicit causality information 
notably case model diagnosis temporal reasoning theories describe ects actions 
restricting explanation formulas predicates describing primitive causes domain explanation formula entails observation gives cause observation 
class theories logical entailment view implements causality view abductive inference 
relationship reasoning paradigms mentioned previous section definition abduction broad covers wide range hypothetical reasoning inference formally distinguished 
surprisingly di erent views abduction implement 
philosophers logicians argued abduction generalization induction :10.1.1.36.8356
induction defined inference general rules explain certain data 
simple example illustrating inductive inference derivation human socrates mortal socrates human mortal induction seen form inference best explanation 
term abduction refers form reasoning clearly distinguished inductive inference 
current applications abduction goal infer knowledge knowledge specific particular state scenario world 
applications induction goal infer intentional knowledge knowledge universally holds see relation causal evidential modeling reasoning studied linked abduction 
di erent states airs current state world 
example abductive solution problem certain car start morning explanation battery empty 
explanation 
hand inductive inference derive set examples rule battery empty car start 
intentional knowledge 
consequence distinction abductive answers inductive answers di erent format 
particular inductive answers general rules refer particular scenario abductive answers usually simpler formulas sets ground atoms describe causes observation current scenario general theory describing problem domain 
distinction form answer induces turn strong di erences underlying inference procedures 
abduction form inference hypotheses explaining observed phenomena versatile informative way reasoning incomplete uncertain knowledge 
incomplete knowledge entirely fix state airs domain discourse uncertain knowledge defeasible sense truth domain discourse entirely certain 
presence uncertain knowledge demonstrated abductive inference default reasoning 
presence incomplete knowledge abduction returns explanation formula corresponding non empty collection possible states airs observation true caused hand deduction reasoning paradigm determine statement true possible states airs 
abduction strongly related model generation satisfiability checking seen refinement forms reasoning 
definition existence abductive answer proves satisfiability observation 
abduction returns informative answers answers describe properties class possible states airs observation valid 
abduction declarative knowledge representation important role logic ai providing framework declarative problem solving 
human expert specifies knowledge problem domain descriptive logic theory uses logical inference systems solve computational tasks arising domain 
early days logicbased ai deduction considered unique fundamental problem solving paradigm declarative logic current state art deduction lost unique place central inferential paradigm logic ai 
argue declarative problem solving methodology lead abductive problems 
illustrate example problem domain university time tabling 
process declarative problem solving starts ontology design phase step alphabet symbols denoting relevant objects concepts relationships problem domain designed 
alphabet defines ontology problem domain 
precedes knowledge description phase expert expresses knowledge symbols alphabet 
example domain university timetables important types objects lectures time slots class rooms 
represent predicates lecture time slot room 
important relevant relationships refer lectures take place relationships represented predicates time lecture room lecture 
key observation stage knowledge specification started choice alphabet determines certain tasks abductive 
particular task computing correct time table consist computing tables time lecture room lecture satisfy certain logical constraints imposed correct schedules 
task deductive task correct tables deducible theory 
abductive problem model generation problem problem completing problem description goal observation lectures scheduled holds 
ontology design phase strong impact specification phase 
alphabet complex simple correspondence objects concepts relations functions domain discourse complicate knowledge description phase lead complex verbose comprehensive modular specification 
example simple constraint lecture scheduled time slot room lecture time slot time lecture room room lecture constraint lectures take place room time 
room lecture room lecture time lecture time lecture represented assignments rooms time slots lectures balanced binary tree structures complicated significantly expression requirements expressed directly 
important aspect declarative problem solving methodology ontology alphabet designed task independent way naturally matches types objects relationships occur problem domain 
example illustrates choice alphabet may enforce specific type inference solve specific computational task follow declarative approach lead problem tasks abductive nature 
vice versa priori choice specific inferential recall close relationship abduction viewed model generation explained previous section 
system prolog clp system solve specific computational problem strong impact choice alphabet problem domain 
university time tabling problem prolog clp solution predicates time lecture room lecture case complex alphabet typically predicates range lists trees assignments lectures time slots rooms 
alphabet complex choosen task dependent way results reduced readability modularity problem specification reduced reusability specification solve types tasks 
fact alphabet prolog clp programming chosen relation provided inference system match human experts conception problem domain fundamental reasons pure prolog programs rarely perceived truly declarative 
clearly trade 
hand choice alphabet correspondence concepts relations mind human expert prerequisite obtain compact elegant readable specification 
result computational task problem solving links tightly abduction 
putting directly argue declarative knowledge representation comes hand hand abduction 
abduction emerges important computational paradigm needed certain problem solving tasks declarative representation problem domain 
hand practice choice representation governed merely issues relating natural representation issues computational ectiveness 
complex ontology may seriously reduce elegance representation may necessary able specific system solving problem cases mean pure declarative problem representation needs augmented procedural heuristic strategic information solve ectively computational problem 
current research abduction studies intelligent search inference methods abductive systems push trade far possible direction declarative representations 
abductive logic programming section presents briefly abduction defined context logic programming 
abductive logic programming theory defined triple ic consisting logic program set ground abducible atoms set classical logic formulas ic called integrity constraints atom occurs head rule field abductive logic programming definition abduction usually specialized way practice abducibles specified predicate names 
definition 
abductive logic theory ic abductive explanation query set ground abducible atoms ic consistent 
remarks order 
definition generic terms syntax semantics 
syntax normal logic programs negation failure investigated abduction context extended logic programming constraint logic programming 
level semantics definition defines notion abductive solution terms semantics standard logic programming 
particular choice semantics defines entailment relation notion consistent logic programs notion abductive solution practice main semantics logic programming completion stable founded semantics define di erent abductive logic frameworks 
second abductive explanation aims represent nonempty collection states airs hold 
explains third condition consistent 
third integrity constraints ic introduced formalism define constrain abductive solutions 
di erent views 
early abduction theorist context classical logic consistency view constraints 
view extension theory abductive solution required consistent integrity constraints ic ic consistent 
definition implements entailment view abductive solution entail constraints 
view taken versions alp stronger consistency view sense solution entailment view solution consistency view vice versa 
di erence views subtle practice di erent options usually coincide 
frequently happens unique model case views equivalent 
practice alp systems entailment view easily implemented need extra specialized procedures satisfaction integrity constraints semantics treats constraints way query 
definition aims define concept abductive solution query define abductive logic programming logic right pair syntax semantics 
notion generalized model defined originally proposed suggests definition 
definition 
model abductive logic framework ic exists set model classical model ic ic 
entailment relation abductive logic frameworks classical logic formulas defined standard way follows ic model ic note definition generic choice semantics logic programming 
way abductive extensions stable semantics founded semantics partial stable model semantics defined 
completion semantics extended case abductive logic programs 
completion semantics abductive logic framework ic defined mapping completion 
order logic theory consisting un set unique names axioms clark equality theory 
ic comp set completed definitions non abducible predicates 
study attempts clarify representational epistemological aspects alp proposed id logic appropriate logic alp 
id logic defined extension classical logic inductive definitions 
inductive definition consists set rules defining specific subset predicates founded semantics 
logic gives epistemological view alp abductive logic program definition set non abducible predicates abducible predicates open predicates defined 
integrity constraints abductive logic framework simply classical logic assertions 
program represents human expert strong definitional knowledge theory ic represents human expert weaker assertional knowledge 
id logic alp seen sort description logic program tbox consisting simultaneous definition non abducible predicates assertions correspond abox 
abductive logic programming frameworks framework defined previous section generic syntax semantics 
past years framework instantiated extended di erent ways 
order show wider variety motivations approaches abductive logic programming section aims briefly number alternative frameworks implemented systems applications 
di erent instantiations di er di erent formal syntax semantics simply di erent inference method induce di erent procedural semantics 
approaches completion semantics lp abduction deduction 
alp frameworks 
syntax framework hierarchical logic programs hierarchical program recursion 
predefined set abducible predicates 
formal syntax extension clark completion semantics non abducible predicates completed 
main aim study relationship abduction deduction setting non monotonic reasoning 
particular characterizations non monotonic reasoning circumscription predicate completion explanatory closure implement sort closure principle allowing extract implicit negative information explicit positive information 
shown restricted class programs abductive explanations query respect set non recursive rules characterized deductive way apply completion semantics closure principle 
formally hierarchical abductive logic program abducibles completion pc consists definitions non abducible predicates 
equivalences allow rewrite observation equivalent formula language abducible predicates pc classical logic entailment 
formula called explanation formula seen disjunctive characterization abductive solutions restriction hierarchical programs ensures termination procedure compute explanation formula 
framework extended handle restricted form integrity constraints 
abductive framework formalize diagnostic problem solving classification nonmonotonic inheritance hierarchies extended characterize updates deductive databases 
completion semantics basis knowledge compilation optimization abductive problem solving described 
iff framework 
iff framework completion semantics 
initially developed unifying framework integrating abduction view updating 
iff proof procedure defined rewriting system initial goal rewritten disjunction answers 
main rewrite rules unfolding backward reasoning definitions propagation forward reasoning integrity constraints 
iff produces answers goals form conjunctions abducible atoms denial integrity constraints 
extension special treatment built predicates constraint logic programming proposed 
modification iff proof procedure developed applications modeling reasoning rational agents management active rules databases 
main underlying lp semantics framework fitting valued completion semantics correctness results proven perfect model semantics restrictions stable semantics 
prototype implementations instances iff procedure exist applied experiments 
original iff proof procedure implemented java applied voyager extension problem interaction communication multiple agents cooperative problem solving 
information integration multiple sources management formation networks integrated progol learn preconditions actions frameworks event situation calculi 
extension applied job shop scheduling semantic query optimization 
procedure suggested implemented april context applications active databases agents 
study problem resource allocation multi agent environment 
approaches stable founded semantics logic programming semantics proposed refinements completion semantics 
include stable model semantics founded model semantics :10.1.1.24.6050
alp frameworks semantics underlying lp framework 
sldnfa id logic 
sldnfa abductive extension suitable abductive reasoning context possibly recursive abductive logic programs completion semantics 
proven sound certain restrictions complete respect valued completion founded semantics 
procedure came early attempts implement ai planning abductive reasoning event calculus 
procedures correctly handles non ground abduction abduction atoms variables 
procedure experiments integration abduction constraint solving 
describes extension sldnfa constraint solver theory total order applies partial order planning context temporal reasoning incomplete knowledge 
logical level evolved study role alp knowledge representation sldnfa abductive deductive reasoning 
number subsequent experiments alp sldnfa demonstrated role alp knowledge representation incomplete temporal knowledge :10.1.1.21.5853
explain clarify representational epistemological aspects alp proposed id logic integration classical logic inductive definitions founded semantics 
computational level orts done improve computational performance expressivity original implementation sldnfa procedure 
system developed leuven implements abduction context id logic supporting directly general order classical axioms language higher order aggregates 
system integrates constraint solving general purpose abductive resolution sldnfa 
implemented meta interpreter top sicstus prolog available www cs kuleuven ac kt 
shtml 
system context prototypical constraint solving problems queens logical puzzles planning problems blocks world 
proving infinite failure definite logic programs failure planning goals semantic interpretation temporal information natural language 
extension system context scheduling application maintenance power units power plants 
experiment involves higher order aggregates described detail section 
compared di erent approaches solving constraint problems including clp aclp smodels system shows problems system competitive 
bottom abduction 
approach proposed originally aims develop cient techniques computing abductive solutions generalized stable model semantics translating abductive logic program standard logic program applying cient bottom stable model generators translation 
approach translation abductive logic programs pure logic programs stable model semantics 
abductive solutions original abductive logic program correspond stable models translation compute abductive solutions proposed procedure bottom stable model computation truth maintenance techniques 
extension procedure computing founded models dynamically checks integrity constraints computation stable models uses derive facts 
bottom procedure integrated procedure top expectation 
top procedure searches atoms rules relevant query integrity constraints helps steer search direction solution 
procedure number applications domains 
legal reasoning dynamic notion similarity cases legal reasoning implemented abductive logic programming 
input system legal factors case bases current case position user defendant plainti 
system translates case bases current case abductive logic program 
top proof procedure system computes important factors retrieves similar case important factors generates explanation current case similar retrieved case preferable user position 
system extended legal rules legal cases combined interpretation 
consistency management software engineering system computes minimal revised logical specification abductive logic programming 
specification written horn clauses translated abductive logic program 
incompatibility spe correctness transformation abductive logic programs pure logic programs shown independent stable model semantics extended handle integrity constraints 
new information system computes abduction maximally consistent program avoids incompatibility 
aclp abductive constraint logic programming 
aclp framework grew attempt address problem providing high level declarative programming modeling environment problems artificial intelligence time acceptable computational performance 
roots come abduction negation failure early definitions abductive logic programming :10.1.1.13.7065
key elements support abduction central inference system facilitate declarative problem solving ii constraint logic programming techniques enhance ciency computational process abductive inference applied high level representation problem hand 
aclp abductive theory program integrity constraints ic defined clp language finite domain constraints 
semantics form generalized model semantics extends obvious way definition underlying lp framework clp 
negation meaning abduction computed homogeneous way abducible 
general computation model aclp consists cooperative interleaving hypotheses constraint generation abductive inference consistency checking abducible assumptions constraint satisfaction generated constraints 
integration abductive reasoning constraint solving aclp cooperative sense constraint solver solves final constraint store generated abductive reduction ects dynamically abductive search solution 
enables abductive reductions pruned early setting new suitable clp constraints abductive solution constructed 
framework aclp integrated inductive logic programming allow form machine learning incomplete information 
aclp system developed university cyprus implements aclp framework alp restricted sub language full aclp framework 
currently system implemented top clp language eclipse clp constraint solver eclipse handle constraints finite domains integer atomic elements 
architecture system quite general implemented similar way constraint solvers 
obtained information web address www cs ac cy aclp 
direct comparison experiments aclp underlying clp system eclipse demonstrated potential alp provide high level modeling environment modular flexible changes problem compromising significantly computational ciency underlying clp framework 
aclp applied di erent types problems 
initial applications concentrated problems scheduling time tabling planning 
applications include optical music recognition aclp implement system handle recognition incomplete information ii resolving inconsistencies software requirements simplified form aclp identify causes inconsistency suggest changes restore consistency specification iii intelligent information integration aclp basic framework development information mediators semantic integration information web page sources 
applications industrial scale notable exception crew scheduling application small sized cyprus see helpful indicating general methodological guidelines followed developing abductive applications see 
air crew scheduling application produced solutions judged quality comparable manually generated solutions experts years particular problem time provided flexible platform easily experiment changes policy preferences 
extended preference abduction 
order broaden applicability alp ai databases inoue sakama propose kinds extensions alp extended abduction preference abduction 
abductive program framework extended abduction pair logic programs possibly including negation failure disjunctions 
instance element abducible 
explanation ground literal consists pair sets subsets consistent entails anti explanation satisfies conditions entail abduction framework extends standard abduction defining explanation anti explanations allowing solutions rules program deleted allowing general rules abduced deleted 
implementation methods proposed computing extended abduction 
proposed model generation method term rewriting :10.1.1.24.6050
transformation methods proposed reduce problem computing extended abduction standard abductive problem 
extended abduction potential applications abductive theory revision abduction non monotonic theories view update deductive databases theory update contradiction removal system repair problems model checking inductive logic programming see 
framework preference abduction abductive logic program augmented set possible priorities di erent literals program 
goal preferred abduction computes set abducible atoms subset representing priority relation consistent means true preferred answer set prioritized logic program 
preferred abduction atoms priority relationship 
procedure compute preference abduction proposed 
preference abduction resolution multiple extension problem non monotonic reasoning skeptical abduction reasoning rule preference preference view update legal reasoning 
abdual abduction extended lp proposes abdual framework abductive framework extended logic programs 
abductive logic program framework tuple ic extended logic program explicit default negation ic set constraints set ground objective literals atoms explicitly negated atoms 
declarative semantics formalism founded semantics extended programs 
procedure integrates tabling abductive inference procedure 
procedure solves abductive query stages 
program transformed grounding adding non abducible ground atom rule expresses rules applies 
resulting program called dual program 
second step abductive solutions computed evaluation method operates dual program 
abdual system currently implemented top xsb prolog 
system available www cs 
sunysb edu 
currently done order migrate tabling mechanisms abdual taken care meta interpreter xsb engine 
underway xsb system unfounded set removal operation implemented engine level 
abdual system applied medical psychiatric diagnosis result investigation logical representation automation dsm iv diagnostic statistical manual mental disorders 
current user interface system com uses abduction simple clinically relevant way allow hypothetical diagnosis information patient conclusive diagnosis system allows hypothesizing possible diagnosis basis limited information available 
applications abduction commercialized 
abdual employed detect specification inconsistencies model diagnosis system power grid failure 
abduction hypothetical physically possible events cause diagnosis system come wrong diagnosis violating specification constraints 
probabilistic horn abduction independence choice logic 
probabilistic horn abduction extended independent choice logic way combine logical reasoning belief networks simple coherent framework 
development motivated theorist system extended framework decision game theoretic agents includes logic programs belief networks markov decision processes strategic form game special cases 
particular shown closely related bayesian networks uncertainty represented probabilities 
independent choice logic theory parts choice space consisting disjoint sets ground atoms 
elements choice space called alternatives 
acyclic logic program element alternative unifies head clause 
semantics model theoretic 
possible world choice element alternative 
true possible world stable model atoms chosen logic program 
intuitively logic program gives consequences choices 
framework abductive sense explanations observation provide concise description worlds true 
belief networks defined having independent probability distributions alternatives 
intuitively think nature making choice value alternative 
case bayesian conditioning corresponds exactly reasoning framework independent choice logic 
extended decision theory agent choices nature game theoretic case multiple agents choices 
di erent implementations icl various special cases exist 
include prolog style implementations find explanations top bottom implementations ground case probabilistic variant conflicts model diagnosis algorithms cient implementations belief networks exploit context specific independent inherent rule forms 
initial studies application icl centered problems diagnosis robot control 
example applications abduction alp paradigm declarative problem solving allows formalize wide variety problems 
survey field reveals potential application abduction areas databases updates belief revision planning diagnosis natural language processing default reasoning user modeling legal reasoning multi agent systems scheduling software engineering 
section relatively large scale applications alp detail order illustrate main features modularity abductive approach exposed previous sections 
scheduling maintenance experiment real life problem belgian electricity provider 
problem description follows 
network power plants distributed di erent areas containing power producing units 
units need fixed number year 
problem schedule number constraints satisfied risk power shortage import providers low possible 
problem solved system extended restricted su cient form higher order aggregates 
system accepts order constraints compiled rules lloyd topor transformation 
overview problem solution 
complete description solution abductive procedure reasoning aggregates refer reader 
fact maintenance lasts week till week represented predicate start 
abducible predicate specification 
predicates defined input data defined table 
main constraints need satisfied maint duration duration table 
scheduled maintenance exists start relation 
specified order logical formula integrity constraint follows maint week week duration start 
table prohibited bp ep facts specify unit allowed period bp ep bp ep prohibited bp ep maint unit start ep 
week number units maintenance belonging plant maximal number max 
table plant max max atoms defines plant maximal number units maintenance simultaneously 
max plant plant max max week card unit unit plant maint max 
note constraint uses cardinality aggregate card 
meaning cardinality atom set units plant maintenance week contains elements 
predicate maint defined auxiliary program rule specifying unit maintenance certain week maintenance unit going maint maint unit start section variable names start capital standard logic programming 
constraint capacity units maintenance belonging certain area exceed area maximum 
represent summation aggregate needed 
table capacity describes unit maximum capacity 
max cm area area max max week sum unit area maint capacity cap cap cm cm cm max 
constraint meaning sum aggregate atom sum lambda function set expression cm 
defines cm total capacity area maintenance week specification describes necessary properties correct schedule 
schedules satisfying properties desirable 
particular schedules minimise risk power shortage preferable 
maintains statistical data expected peak load week 
desirable solutions maximise reserve capacity di erence available capacity expected peak load 
relation reserve week defined di erence available capacity sum capacities units maintenance week estimated peak load reserve load total capacity sum cap unit maint capacity cap cap cap load 
total capacity means sum capacities units 
system query optimal solution scheduling problem minimum set exists reserve maximize 
expresses optimal abductive solution desired minimal reserve year high possible 
actual problem consists scheduling units year weeks 
size search space order current implementation reduces goal integrity constraints large finite domain constraint store backtracking points 
current implementation reduction phase completed minute subsequently clp solver starts generate solutions increasing quality 
current implementation able find solution away optimal minutes 
problem solved clp system 
comparison clp solution alp solution clearly shows trade efficiency flexibility 
pure optimized clp solution setup constraint store seconds seconds find solution specification minutes compared minutes solver 
hand clp solution larger program lines developed weeks time constraints hidden data structures representation alp simple declarative representation logical formulae written hours discussion 
air crew assignment second application abduction reallife problem crew assignment cyprus 
problem air crew assignment concerned assignment air crews flights airline cover specific period time 
allocation crew flights respect necessary constraints validity try minimize crew operating cost quality 
validity solution defined large number complex constraints express governmental international regulations union rules restrictions quality schedule specified cost needs preferences particular crew specific period time 
addition airline interested problem re assignment adapting existing crew assignment changes application environment flight delays cancellations new flight additions crew unavailability changes ect quality existing solution existing solution unacceptable 
problem pilot crew cyprus solved alp aclp system 
problem represented entirely alp theory ic 
program part describes basic data defines number concepts allow encoding particular strategies decomposing goal subgoals 
di erent strategies ect ciency problem solving process quality solutions respect criteria cost fairness assignment 
solution problem captured abducible predicate assigns crew task member gives assignment crew members di erent types duty tasks 
flights day 
details complete description problem abductive solution see 
concentrate complex validity constraints problems represented ic part theory 
problem air crew assignment large variety complex constraints need respected 
contain simple constraints pilot assigned overlapping flights quite complex constraints period days respectively days pilot day respectively consecutive days 
lets illustrate represented integrity constraints ic 
integrity constraint expresses requirement pilot hours rest period consecutive duties 
greater equal calculated previous assignments crew 
variables integrity constraints universally quantified formula 
assign crew light new duty crew light prev duty crew light time difference light crew new duty crew light defines flight light new duty period crew prev duty crew light specifies time duty crew member crew immediately departure time flight light 
defined program theory 
requirement pilot consecutive days day period represented integrity constraint crew assign crew light dept date light crew means crew consecutive days time window days centered date 
program help definition follows crew date days date crew crew crew date assign crew light id date crew base date free hrs crew date free hrs crew date date date assign crew light id departure light id ime free hrs crew date date date assign crew light id departure light id previous date date assign crew light id arrival light id expresses definition day non working day base additional requirements 
crew begins duty am morning begins am finishes pm day 
computation satisfaction integrity constraint means new assumption assignment crew flight need ensure crew member remains satisfied 
cases dynamically generate extra assignments crew member day ensure flight assignments consistent 
airlines requirements problem stemming particular policies specific crew preferences 
abductive formulation modular representation problem facilitates cases direct representation additional integrity constraints ic 
example consider requirement cyprus states flight managers duties week 
represented integrity constraint assign crew light rank crew light manager new duty crew light num duties crew light week period 
num duties crew light week period counts number duties crew member week period centered date flight light 
regards problem re assignment new information existing solution new module added crew assignment system exploits natural ability abduction reason set hypotheses case partial existing solution 
module follows steps remove old solution hypotheses ected changes 
step fact optional helping ciency hypotheses existing solution inconsistent eventually removed automatically re execution abductive goal step add new requirements changes problem 
may form integrity constraints simply new information domain application re execute part abductive goal problem set hypotheses step initial set abducible assumptions 
set flights ected change aim reestablish consistency preferably quality old solution re assigning crew flights having recalculate new solution making fewest possible changes old existing solution hours time change 
re assignment module application interactive sense user select crew particular flight decide accept system proposed selection crew 
having searched crew member system informs user particular selection list assignments secondary changes crew old solution ected need rescheduled 
gives option reject choice case system look possibility 
selection crew done directly user system check choice valid inform user list secondary ected flights need rescheduled resulting choice 
cyprus small size airline contains full complexity problem 
busy months flight schedule contains flight legs month 
aclp system able produce solutions minutes judged airline experts problem quality comparable respect balancing requirement better manually generated ones 
system judged useful due flexibility allowed experiment easily changes policy preferences 
re assignment module able suggest solutions adapt existing roster seconds 
chosen useful module system facilitate operators develop adjust solution meet specific needs preferences time 
links alp extensions lp parallel development frameworks systems alp clear exist strong links alp frameworks extensions logic programming 
alp tight connections answer set programming :10.1.1.24.6050:10.1.1.49.9332
recall abdual framework extension answer set programming abduction 
standard alp negation strongly related stable logic programming restriction answer set programming pure logic programs :10.1.1.24.6050:10.1.1.49.9332
mentioned section abductive logic framework generalized stable semantics translated equivalent logic program stable semantics 
consequently current systems computing stable models smodels compute abduction generalized stable semantics 
interestingly significant di erences computational models developed areas 
alp procedures sldnfa iff aclp extensions sldnf operate top way predicate programs systems smodels bottom propagation propositional grounding logic program 
experimentation needed assess strengths weaknesses approaches 
links shown alp disjunctive logic programming 
hypothetical reasoning alp reasoning disjunctive information dlp interchanged 
allows theories framework transformed framework executed framework 
example possible transform alp theory dlp system developed dlv system answer abductive queries 
vice versa showed abductive proof procedures reasoning dlp programs 
type extension lp paradigm inductive logic programming 
currently approaches investigation synthesizing alp ilp 
approaches aim develop techniques knowledge intensive learning complex background theories 
problem faced ilp techniques training data inductive process operates contain gaps inconsistencies 
general idea abductive reasoning feed information inductive process background theory inserting new hypotheses removing inconsistent data 
stated di erently abductive inference complete training data hypotheses missing inconsistent data explain example training data background theory 
process gives alternative possibilities assimilating generalizing data 
integration alp ilp ilp extended learn alp theories incomplete background data 
allows framework perform multiple predicate learning natural way 
seen previous sections approaches alp recognized importance linking constraint logic programming 
shown integration constraint solving abductive logic programming enhances practical utility alp 
experiments indicate constraint solving techniques abductive reasoning abductive computation cient 
hand integrated paradigm alp clp seen high level constraint programming environment allows modular flexible representations problem domain 
potential benefits paradigm largely unexplored moment 
challenges prospects alp past decade studies shown extending logic programming abduction important applications context ai declarative problem solving 
moment field alp faces number challenges logical methodological computational level 
section attempt chart challenges point promising directions 
heterogeneity alp seen section alp heterogeneous field 
hand heterogeneity stems fact logic programming shows complex landscape 
hand stems fact term abduction defined broadly covers broad class loosely connected reasoning phenomena 
conceptual level abduction denote concepts di erent conceptual levels 
example frameworks discussed earlier abduction concept inferential level form logical inference 
contexts abductive semantics negation failure abduction concept semantical level specific way formalizing model semantics 
mismatch di erent conceptual levels confusing potential hazard field 
logical level di erent formalisms di erent semantics 
various forms abduction introduced di erent formalisms including pure logic programming answer set programming conditional logic programming formalism 
advantage field may act forum integrating relating wide variety di erent forms logical reasoning distant areas 
disadvantage heterogeneity may hide lack coherence orts researchers build ective systems scattered wide variety incompatible views approaches 
develop computational logic focused ort di erent levels needed research semantics clarify declarative meaning research knowledge representation clarify applications logic research explore relation logics research investigate implement cient problem solvers 
orts link constructive cross supporting way 
epistemological foundations alp underlying problems field lack understanding epistemological foundations alp 
epistemological questions kind knowledge represented abductive logic framework vice versa alp theory tell problem domain equivalently information domain discourse expressed alp theory 
questions fundamental understanding logic 
clear answer prerequisite developing motivated methodology declarative problem solving alp 
standard definition alp section attempt answer questions 
definition abductive solution defines formal correctness criterion abductive reasoning address question alp formalism interpreted 
generic definition formal model semantics alp provide answers 
fact alp inherits ambiguity logic programming epistemological level demonstrated 
fundamental questions understand meaning alp framework need understand meaning symbols 
negation alp understood 
extended completion semantics defined alp console maps negation failure literals classical negation 
hand generalized stable semantics abdual framework negation failure literals interpreted modal literals kp autoepistemic logic default logic :10.1.1.24.6050
relationship alp classical logic 
alp framework may contain arbitrary classical logic theory ic constraints alp model semantics models alp framework satisfy constraints ic standard way classical logic 
suggests alp extension classical logic 
hand alp defined study abductive reasoning classical logic normally viewed study deductive reasoning 
views reconciled 
lack clear epistemological foundations alp causes alp lack coherence factor blurring role status alp knowledge representation level broader context logic ai 
epistemological study alp contribute significantly understanding field logical methodological level 
computational challenges computational challenges paradigm considerable 
challenge building abductive systems solving broad class problems formalized high level declarative representations extremely di cult realise 
theoretical level complexity formal results show general problem computing abduction hard 
datalog case problem computing abductive solutions general intractable 
general case alp frameworks function symbols existence abductive solution undecidable 
implementational level problem implementing abductive reasoning seen extension implementation clp systems need reason constraints general order logic 
current systems aclp iff integration clp techniques high level abductive procedures 
systems operate reducing high level constraints general nondeterministic process constraint store handled ciently specialised constraint systems 
experiments aclp systems shown cases reduction process deterministic procedures 
process nondeterministic procedures start trash 
reason behaviour number techniques built current procedures delay creation choice points perform deterministic computation 
applications scheduling techniques avoid making choices altogether 
cases planning applications arsenal techniques su ce manage choice points current procedures uninformed selections choices leading uncontrolled depth execution 
analysis suggests di erent ways improve computational techniques alp 
way improve techniques discover deterministic subgoals delay creation choice points 
second way incorporate techniques smarter better informed selection choice points choice alternatives choice point 
third way improved control avoid unrestricted depth reasoning techniques similar loop detection iterative deepening 
respect problems di erent approaches followed 
refine current integration constraint solving abductive inference 
current systems clp solver black box interacts abductive solver returning solution reporting consistency inconsistency constraint store di erent points execution 
direction examined exploit information constraint store steer search abductive solution better informed selection goals 
alternative direction apply techniques heuristic search artificial intelligence 
interesting application domain study techniques abductive reasoning ai planning due strong links abduction planning fact techniques constraint solving heuristic search successfully applied domain 
learn developments constraint heuristic methods search planning applied general case abductive computation 
complementary approach address computational hardness alp develop alp systems user facility incrementally refine model problem modular way 
starting purely declarative problem description possible refine model adding additional knowledge problem including non declarative heuristic operational control knowledge 
suggests promising line development systematic study modeling environment designed build alp 
completely di erent approach exploit kind techniques bottom abduction see section computation stable models ground logic program 
techniques smodels system integrates methods propositional constraint propagation bottom application semantic fixpoint operators valued completion semantics founded semantics 
current state art techniques reasoning propositional theories robust abductive extensions sldnf clp may outperform ones especially take account easily additional problem domain specific information 
extending procedures lines suggested promising research direction 
challenges application level past decade potential di erent alp frameworks demonstrated wide variety application domains 
current running applications exceed level academic toy examples 
areas ai potential realized realistic industrial scale applications 
challenges domain find interesting niche domains industrial impact current systems evaluated fine tuned 
experimentation evaluation abductive systems realistic domains yield important information levels language constructs methodology computational control integration heuristic information 
prototypical classes problems candidates alp methods scheduling planning domains knowledge intensive learning machine learning rich background knowledge performed inductive methods integrated abduction 
possible approach challenges section briefly describe views approach logical computational challenges 
underlying logic alp id logic logic appropriate alp way extends classical logic inductive definitions generalized non monotone kind 
mentioned earlier section abductive logic framework ic natural embedding id logic 
represents definition non abducible predicates ic represents set classical logic assertions 
view alp study abduction context id logic 
id logic defined attempt cope epistemological challenges logic programming gives answers epistemological questions raised section 
computational level currently developing system called system integrating features aclp special attention search abductive computation 
computation selection evaluation choice points guided information obtained constraint store associated abductive solution 
information high level search avoid deadend branches entering 
result robust modular system capable solve ectively wider range problems older systems 
application domain experiments system currently focused scheduling planning applications 
system built top sicstus prolog version available www cs kuleuven ac kt 
abductive logic programming grew attempts logic programming techniques broad class problems ai areas computer science 
abductive logic programming presents conservative extension logic programming allows declarative representations problems 
main emphasis till setting di erent frameworks abduction showing provide general approach declarative problem solving 
alp faces number challenges logical methodological computational level typical field initial stage development 
understand contributions field develop solutions problems field faces 
logical level alp aims suitable declarative knowledge representation facilitating maintenance reusability graceful modifiability 
alp retains logic programming possibility embedding high level strategic information abductive program allows speed fine tune computation 
respect alp able combine advantages declarative specification programming greater extent standard logic programming 
field started recognize full extent problem complexity developing ective useable alp systems 
task alp providing high level general purpose modeling environment time computationally ective extremely di cult 
learn analyze break task appropriate subproblems amenable study current understanding field 
hope remains high level programming environment alp provide programmer able solve problems ectively translucent way 

alferes pereira swift 
founded abduction tabled dual programs 
procs 
th international conference logic programming las cruces new mexico nov dec 

ade denecker 
abductive inductive logic programming 
mellish editor proc 
international joint conference artificial intelligence pages 
morgan kaufman 

alferes leite pereira 
planning abductive updating 
ed procs 
aisb 

balsa dahl pereira lopes datalog grammars abductive syntactic error diagnosis repair 
proc 
natural language understanding logic programming workshop lisbon 

bruynooghe de waal denecker detecting unsolvable queries definite logic programs 
journal functional logic programming november 

castro pereira 
power grid failure diagnosis certification 
technical report university lisbon 

lamma mello 
expressing collaboration competition abductive logic agents 
ai ia anno xiii pag 


charniak mcdermott 
artifical intelligence 
addisonwesley 

clark 
negation failure 
gallaire minker editors logic databases pages 
plenum press 

console torasso 
relationship abduction deduction 
journal logic computation 

console compiled knowledge guide focus abductive diagnosis 
ieee transactions knowledge data engineering vol 
pp 


console role abduction database view updating 
journal intelligent information systems vol 
pp 


de waal denecker bruynooghe thielscher 
generation pre interpretations detecting unsolvable planning problems 
proceedings workshop model automated reasoning th international joint conference artificial intelligence pages 

denecker 
terminological interpretation abductive logic programming 
marek nerode truszczynski editors international conference logic programming nonmonotonic reasoning lecture notes artificial intelligence pages 
springer 

denecker 
epistemological foundations logic programming extensions 
aaai spring symposium answer set programming efficient scalable knowledge representation reasoning volume technical report ss 
american association artificial intelligence aaai press 

denecker 
extending classical logic inductive definitions 
lloyd editor international conference computational logic cl volume lecture notes artificial intelligence pages london july 
springer 

denecker de schreye 
sldnfa abductive procedure normal abductive programs 
apt editor proc 
international joint conference symposium logic programming pages 
mit press 

denecker de schreye 
representing incomplete knowledge abductive logic programming 
proc 
international symposium logic programming pages 
mit press 

denecker de schreye 
representing incomplete knowledge abductive logic programming 
journal logic computation september 

denecker de schreye 
sldnfa abductive procedure abductive logic programs 
journal logic programming 

denecker bruynooghe 
temporal reasoning abductive event calculus 
proc 
european conference artificial intelligence 
john wiley sons 

denecker van de schreye 
event calculus protocol specification 
experiment 
maher editor international joint conference symposium logic programming pages 
mit press 

marc denecker maurice bruynooghe victor marek 
logic programming revisited logic programs inductive definitions 
acm transactions computational logic 
accepted 


characterizing mechanizing abductive reasoning 
phd thesis dip 
informatica universita di torino 

dung 
negations hypotheses abductive foundation logic programming 
proc 
international conference logic programming 

thomas eiter georg gottlob nicola leone 
abduction logic programs semantics complexity 
theoretical computer science 

thomas eiter wolfgang faber nicola leone gerald pfeifer 
declarative problem solving dlv system 
jack minker editor logic artificial intelligence 
kluwer academic publishers 

eshghi 
abductive planning event calculus 
kowalski bowen editors proc 
international conference logic programming 
mit press 

eshghi kowalski 
abduction compared negation failure 
proc 
international conference logic programming 
mit press 

gabbay giordano martelli 
conditional reasoning logic programming 
journal logic programming 

gartner swift tien damasio pereira 
psychiatric diagnosis viewpoint computational logic 
wiggins ed procs 
aisb 

gelfond lifschitz classical negation logic programs disjunctive databases 
new generation computing pp 


fages new fixpoint semantics general logic programs compared founded stable model semantics 
proc 
iclp pp 


flach kakas eds 
abduction induction essays relation integration 
kluwer academic press 

flach kakas 
abductive inductive reasoning background issues 
peter flach kakas editors abduction induction essays relation integration 
kluwer 

fung abduction deduction 
ph thesis imperial college london 

fung kowalski 
procedure abductive logic programming 
journal logic programming elsevier 

gelfond lifschitz 
stable model semantics logic programming 
proc 
international joint conference symposium logic programming pages 
ieee 

hobbs integrated abductive framework discourse interpretation 
symposium automated abduction stanford 

inoue 
hypothetical reasoning logic programs 
journal logic programming 

inoue 
simple characterization extended abduction 
proceedings international conference computational logic lecture notes artificial intelligence pages springer 

inoue ohta hasegawa 
bottom abduction model generation 
technical report tr institute new generation computer technology japan 

inoue sakama 
abductive framework nonmonotonic theory change 
proceedings ijcai pages morgan kaufmann 

inoue sakama 
priorities derive intended 
proceedings ijcai pages morgan kaufmann 

inoue sakama 
computing extended abduction transaction programs 
annals mathematics artificial intelligence 

iwayama satoh computing abduction tms top expectation 
journal logic programming vol 
pp 


josephson josephson editors 
abductive inference computation philosophy technology 
new york cambridge university press 

jung fischer burt 
multi agent planning abductive event calculus 
technical report dfki report rr dfki germany 

kakas 
aclp integrating abduction constraint solving 
proceedings nmr 

kakas kowalski toni abductive logic programming 
journal logic computation 
kakas kowalski toni 
role abduction logic programming 
handbook logic artificial intelligence logic programming pages gabbay hogger robinson eds oxford university press 
kakas mancarella 
generalised stable models semantics abduction 
proc 
th european conference ai ecai 

kakas mancarella 
database updates abduction 
proc 
th large database conference pages 
morgan kaufmann 

kakas mancarella 
relation truth maintenance abduction 
proc 
st pacific rim international conference artificial intelligence pricai nagoya japan 

kakas mancarella 
knowledge assimilation abduction 
international workshop truth maintenance stockholm ecai springer verlag lecture notes computer science vol 
pp 


kakas michael integrating abductive constraint logic programming 
proc 
international logic programming conference pp 


kakas michael 
air crew scheduling abduction 
proceedings iea pp 


kakas michael 
abductive scheduler air crew 
journal applied artificial intelligence vol 
pp 


kakas michael 
aclp case non monotonic reasoning 
proceedings nmr pp 


kakas michael 
aclp abductive constraint logic programming 
journal logic programming special issue abductive logic programming vol 
pp 


kakas 
aclp flexible solutions complex problems 
proceedings logic programming non monotonic reasoning lpnmr 
kakas 
abductive concept learning 
new generation computing vol 
pp 


kakas bert van nu elen marc denecker 
system problem solving abduction 
proceedings ijcai seventeenth international joint conference artificial intelligence pp 


kowalski sadri logic programming multi agent systems 
annals artificial intelligence vol pp 


kowalski sergot 
logic calculus events 
new generation computing 

kowalski toni wetzel 
executing suspended logic programs 
fundamenta informaticae iso press 

leite pereira cardoso pereira 
metaphorical mapping consistency dynamic logic programming 
lloyd 
eds procs 
int 
conf 
computational logic cl london uk pages lnai springer 

lloyd 
foundations logic programming 
springer verlag 

marek truszczynski 
stable models alternative logic programming paradigm 
apt marek truszczynski warren editors logic programming paradigm years perspective pages pp 

springer verlag 

mccarthy 
situations actions causal laws 
technical report ai memo artifical intelligence program standford university 

marc denecker maurice bruynooghe 
abductive planning system event calculus 
journal logic computation september 

bruynooghe denecker 
abductive planning event calculus 
internal report department computer science leuven 

muggleton 
theory completion learning 
proceedings inductive logic programming ilp 

niemela simons 
smodels implementation stable model founded semantics normal logic programs 
th international conference logic programming non monotonic reasoning pp 


niemela 
logic programs stable model semantics constraint programming paradigm 
annals mathematics artificial intelligence 


role abductive reasoning process belief revision 
phd thesis department computer science university sydney 

peirce 
philosophical writings peirce 
dover publications new york 

emmanuel de mot marc denecker 
logic programming approaches representing solving constraint satisfaction problems comparison 
proceedings lpar th international conference logic programming automated reasoning 
accepted 

pereira apar icio alferes 
nonmonotonic reasoning wellfounded semantics 
furukawa editor proc 
international conference logic programming pages 
mit press 

pearl 
probabilistic reasoning intelligent systems networks plausible inference 
morgan kaufmann san mateo ca 

poole 
logical framework default reasoning 
artifical intelligence 

poole 
methodology default abductive reasoning system 
international journal intelligent systems december 

poole 
logic programming abduction probability top anytime algorithm computing prior posterior probabilities 
new generation computing 

poole 
probabilistic horn abduction bayesian networks 
artificial intelligence 

poole 
probabilistic conflicts search algorithm estimating posterior probabilities bayesian networks 
artificial intelligence 

poole 
independent choice logic modelling multiple agents uncertainty 
artificial intelligence 
special issue economic principles multi agent systems 

poole 
probabilistic partial evaluation exploiting rule structure probabilistic inference 
proc 
th international joint conf 
artificial intelligence ijcai pages nagoya japan 

poole goebel aleliunas 
theorist logical reasoning system defaults diagnosis 
cercone mccalla editors knowledge frontier essays representation knowledge pages 
springerverlag new york ny 

david poole 
learning bayesian probability graphical models abduction 
peter flach kakas editors abduction induction essays relation integration 
kluwer 

poole goebel aleliunas theorist logical reasoning system default diagnosis 
knowledge essays representation knowledge cercone mccalla eds springer verlag lecture notes computer science 

poole mackworth goebel computational intelligence logical approach oxford university press 


reasoning induction abduction 
ecai workshop abductive inductive reasoning 

dahl feature interaction resolution hypothetical reasoning 
proc 
th world multiconference systemics cybernetics informatics sci th international conference information systems analysis synthesis isas orlando usa july 

zaniolo stable models non determinism logic programs negation 
proc 
pods pp 


sadri toni 
logic agent system semantic integration 
th international codata conference data information coming knowledge millennium codata theme integration heterogeneous databases data warehousing 

sadri toni 
abduction negation failure active databases agents 
proc 
ai ia th congress italian association artificial intelligence pages bologna 

sadri toni 
abduction negation failure active reactive rules lamma mello eds proc 
ai ia th congress italian association artificial intelligence springer verlag lnai pages 

sakama inoue 
representing priorities logic programs 
proceedings joint international conference symposium logic programming pages mit press 

sakama inoue 
updating extended logic programs abduction 
proceedings lpnmr lecture notes artificial intelligence pages springer 

sakama inoue 
abductive logic programming disjunctive logic programming relationship transferability 
journal logic programming special issue alp 

sakama inoue 
alternative approach semantics disjunctive logic programs deductive databases 
journal automated reasoning 

sadri toni 
dialogues negotiation agent varieties dialogue sequences 
pre proc 
atal special track negotiation 
seattle wa august 

satoh interpretation case reasoning abductive logic programming 
journal advanced computational intelligence vol 
pp 


satoh computing minimal revised logic program abduction 
proc 
international workshop principles software evolution pp 


satoh level abduction decide similarity cases 
proc 
ecai pp 


satoh iwayama 
query evaluation method abductive logic programming 
apt editor proc 
international joint conference symposium logic programming 

satoh iwayama computing abduction tms 
proc 
iclp pp 


satoh iwayama query evaluation method abductive logic programming 
proc 
jicslp pp 


satoh iwayama correct goal directed proof procedure general logic program integrity constraints lamma mello eds extensions logic programming lnai pp 
springer verlag 

shanahan 
prediction deduction explanation abduction 
proc 
ijcai page 

toni 
semantics kakas mancarella procedure abductive logic programming 
proc 
eds pages 

toni 
automated reasoning collective information management 
proc 
international workshop community interactive systems conjunction ac annual conference ec programme 
van denecker de schreye 
representing continuous change abductive event calculus 
proc 
international conference logic programming 
mit press 

van denecker de schreye 
abductive event calculus general framework temporal databases 
proc 
international conference temporal logic pages 

van denecker de schreye 
strong correspondence description logics open logic programming 
lee naish editor proc 
international conference logic programming pages 


van gelder ross schlipf founded semantics general logic programs 
journal acm 

bert van nu elen marc denecker 
problem solving id logic aggregates experiments 
denecker kakas toni editors th int 
workshop non monotonic reasoning nmr session abduction pages breckenridge colorado usa april 

van nu elen kakas system programming abduction 
proceedings lpnmr lnai vol 
pp 
springer verlag 

sven marc denecker frank van 
abductive reasoning temporal information 
van der harry bunt elias editors proceedings fourth international workshop computational semantics pages 

wetzel abductive constraint logic programming 
ph thesis imperial college london 

wetzel toni 
semantic query optimization abduction constraint handling 
proc 
international conference flexible query answering systems larsen christiansen eds springer verlag lnai 

xsb group 
xsb logic programming system version 

available www cs sunysb edu 

yamamoto 
abduction induction bottom generalization 
peter flach kakas editors abduction induction essays relation integration 
kluwer pp 


yuan goebel 
abductive approach disjunctive logic programming 
journal logic programming special issue abductive logic programming vol 
pp 

