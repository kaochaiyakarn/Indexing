software infrastructure natural language processing hamish cunningham dept computer science university sheffield portobello st sheffield dp hamish dcs shef 
ac 
uk kevin humphreys dept computer science university sheffield portobello st sheffield dp shef 
ac 
uk classify review current approaches software infrastructure research de velopment delivery nlp systems 
task motivated discussion current trends field nlp lan guage engineering 
describe sys tem called gate general architecture text engineering provides soft ware infrastructure top het nlp processing modules may evaluated refined individually may combined larger application systems 
gate aims support re searchers developers working com ponent technologies parsing tagging morphological analysis ing developing user applications information extraction text sum document generation machine translation second language learning 
gate promotes reuse component tech nology permits specialisation collab large scale projects allows comparison evaluation technologies 
release gate available 
reviews currently available design strategies software infrastructure nlp presents implementation system called gate general architecture text engineer ing 
software infrastructure mean variously referred literature soft ware architecture software support tools language engineering platforms development 
gloss terms common models representation storage exchange data robert gaizauskas dept computer science university sheffield portobello st sheffield dp dcs shef 
ac 
uk yorick wilks dept computer science university sheffield portobello st sheffield dp yorick dcs shef 
ac 
uk processing modules nlp systems graphical interface tools management data processing visualisation data 
nlp systems produce information texts existing systems aim provide software nlp classified belonging types way treat information additive markup information produced added text form markup sgml thompson mckelvie referential annotation information stored separately back original text tipster architecture grishman abstraction original text preserved processing parts integrated data structure represents information text uniform theoretically motivated model attribute value structures system 
fourth category added cater systems provide communication control infrastructure addressing text specific needs nlp verbmobil ice architecture 
reviewing examples ap proaches sketched system falls fourth category 
discuss current trends field motivate set requirements formed design brief gate described 
initial distribution system includes muc message understanding conference grishman sundheim style information extraction system overview texts may results auto matic speech recognition see section 
modules 
gate available research purposes see ul dcs 
shef 
ac 
research groups nlp gate details obtain system 
written tcl tk currently runs unix sunos solaris irix linux aix known windows nt version ration 
managing information text abstraction approaches abstraction approach managing formation texts primarily motivated theories nature information represented 
position tive constraint representations feature structure matrices manipulated unification appropriate vehicle cal problems language description computer manipulation language solved shieber 
information models may charac context requirement tie data elements back original text models represent abstractions text 
example infrastructure project abstraction advanced lan guage engineering platform 
aims provide nlp research engineering community europe open versatile general purpose development environment 
principle open primarily advanced sys tem developing manipulating feature struc ture knowledge bases unification 
pro vided parsing algorithms algorithms transfer synthesis generation 
system developing particular types data resource grammars lexicons doing particular set tasks le particu lar way 
aim complete gener need supply algorithms baum welch estimation fast regular expression matching 
supplying generic system le task clearly impossible prone instant obsolescence rapidly changing field 
view despite claiming theory neutral formalism hpsg formalism committed particular approach lin guistic analysis representation 
clearly high utility le community theories formalisms relevant excludes actively support including increasing number researchers committed statistical corpus approaches 
gate seen shell backplane spec le modules databases plugged 
components gate typically exist emphasis reuse tion 
project provide flexible efficient way combine le components le systems experimental delivered applications provide true system true development environment 
systems provide components oper ating gate 
seen way enter prise orthogonal significant overlap conflict 
view level assume com information representation formation le modules low build environment broad support full range le tools accept impose standards research com flux 
highest common denominator modules process text process output modules process text produce information text portions 
example part speech tags phrase structure trees logical forms discourse models seen light 
safe common ground start committing provide mechanism manages arbitrary information text 
methods may done 
may embed information text relevant points additive approach 
second may associate information text building separate database stores formation relates text pointers text re erential approach 
subsections discuss systems adopted approaches respectively compare indicate chosen hybrid approached mainly second 
look system falls outside cate gories 
additive approaches additive architectures managing information text add markup original text successive phase processing 
model adopted number projects including parts multext ec project 
multext led development architecture note partners project adopted different architectural solution see www 
ipl 
univ aix fr proj ect multext 
sgml university edinburgh called lt nsl thompson mckelvie 
architecture commitment tei style text encoding initiative sperberg mcqueen sgml encoding information text 
tei defines standard tag sets range purposes including rel le systems 
tools lt nsl system communicate interfaces specified sgml doc ument type definitions dtds essentially tag set descriptions character streams pipes arrangement modelled unix style shell pro gramming 
obviate need deal difficult types sgml minimised markup texts converted normal form process ing 
tool selects information requires input sgml stream adds information new sgml markup 
advantage degree data structure independence long necessary information input tool ignore changes markup habits stream unknown sgml simply passed unchanged example se mantic interpretation module examine phrase structure markup ignore pos tags 
vantage graph structured data may expressed sgml doing complex concurrent markup specification multi ple legal markup trees dtd ugly nesting tricks cope overlapping called milestone tags 
graph structured informa tion output parser example representing competing analyses areas text 
referential approaches arpa sponsored tipster programme entering third phase produced data driven architecture nlp systems man 
lt nsl information text encoded sgml added modules tipster text remains unchanged information stored separate database referential approach 
information stored database form annotations 
anno tations associate arbitrary information attributes portions documents identified sets start byte offsets spans 
attributes may result linguistic analysis pos tags tex tual unit type 
way information built text nlp modules kept separate texts 
place sgml dtd annotation type declaration defines informa tion annotation sets 
shows example grishman 
id type token token token token token name sentence sarah soup 
annotations span attributes start pos np pos vbd pos dt pos nn name type person tipster annotations example definition annotations tipster forms part object oriented model deals inter textual information single texts 
documents grouped collections database storing annotations document tributes identifiers headlines model describes elements information extraction information retrieval ir systems relating classes representing queries information needs 
tipster architecture designed portable range operating environments define implementation technologies 
par ticular implementations decisions re issues parallelism user interface delivery platform 
various implementations tip ster systems available including gate 
comparison lt nsl tipster architectures appropriate nlp number significant differences 
discuss note possibility inter operation 

tipster support documents read media internet material cd roms may bulk storage tions large archiving needs copy ing document 

point view efficiency original lt nsl model interposing sgml modules implies generation parsing overhead module 
versions replaced model pre parsed represen tation sgml reduce overhead 
representation presumably stored files implies overhead involved continually reading writing data associated document file 
reason files replaced database im plementation potential perfor mance benefits ability subsets information documents high level optimisation modern database technology 

related issue storage overhead 
tipster minimal respect inher ent need duplicate source text markup process 

thought texts may appear dimensional consisting sequence charac ters 
view breaks structures tables appear inherently dimensional representation ma easier referential model tipster additive model sgml markup representation dimensional view 
tip ster column table repre sented single object multiple refer ences parts text annotation multiple spans 
marking columns sgml re quires tag row column 
related points tipster avoids ties referred earlier representing graph structured information sgml lt nsl inefficient processing algorithms require non sequential access data mckelvie brew thompson 

tipster easily support multi level access control database protection mechanisms straightforward sgml 

distributed control easy implement database centred system tipster db act blackboard implemen tations take advantage understood access control locking technology 
distributed control lt nsl ous 
plan provide type control gate collaboration project crl new mexico see zajac details 
combining addition believe comparison demonstrates significant advantages tipster model model chosen gate 
believe sgml tei re main central serious text processing strategy 
points contradict view indicate sgml form central rep resentation format text processing system 
input sgml text tei conformant output increasingly necessary le appli cations publishers adopts standards 
mean flat file sgml appropriate format architec ture le systems 
observation born facts tipster started sgml architecture rejected favour current database model lt nsl gone partly style passing pre parsed sgml tween components 
interestingly tipster referential system function module lt nsl additive system vice versa 
tipster storage system write data sgml processing lt nsl tools convert sgml results back native mat 
underway integrate lt nsl api gate provide sgml tip ster acknowledge valuable assistance colleagues edinburgh task 
ice ice communication environment environment develop ment distributed ai systems 
part verb real time speech speech translation project ice addressed key problems type system viz 
distributed processing tal interpretation distribution contribute processing speed compute intensive application area incremental speed reasons tate feedback results downstream modules upstream ones inform selection word interpretations phone lattices part speech information 
ice provides distribution communication layer pvm parallel virtual machine 
infrastructure ice delivers doesn fit tripartite classification communica tion channels data structures specific nlp needs data storage text col lection management left individual modules 
ice form useful backbone nlp infrastructure operate paradigms 
nlp trends gate variety reasons nlp spawned related engineering discipline called language engi neering le orientation appli cation nlp techniques solving large scale real world language processing problems robust predictable way 
problems include informa tion extraction text summarisation document gen eration machine translation second language learn ing 
cases technologies developed assistive fully auto matic aiming enhance supplement human expertise attempting replace 
reasons growth language engineer ing include computer hardware advances processor speeds memory capacity reducing prices increasing availability large scale language related line resources dictionaries thesauri designer corpora corpora se lected representativeness anno descriptive information demand applications world electronic text grown exponentially vol ume availability electronic com mobility increased importance multi lingual communication maturing nlp technology able tasks achieve high levels accuracy repeatedly real data 
aside host fundamental theoretical problems remain answered nlp lan guage engineering faces variety problems 
features current situation prime importance constrain field develop acknowledged addressed 
theory language uni accepted computational model part process language understanding stands 
second building intelli gent application systems systems model reproduce human language processing capa bility useful large scale engineering ef fort political economic realities rely efforts small groups re searchers spatially temporally distributed collaborative master plan 
point means attempt push researchers theoretical representational straight jacket premature unhealthy doomed failure 
second means research team resources build scratch entire state art le application sys tem 
note tension point identi fies tendency pushing researchers greater theoretical diversity second cen tendency forcing 
state affairs best prac tical support advance field 
clearly pressure build efforts demands le tools component technologies parsers taggers morphological analysers discourse planning modules readily available ex reuse 
pressure theoretical diversity means point tempting gain agreement short term set component technologies de veloped informational content syntax representations components re quire produce 
response considerations design implement software environment called gate general architecture text engi neering cunningham gaizauskas wilks cunningham wilks gaizauskas attempts meet objectives 
support information interchange le modules highest common level possi ble prescribing theoretical approach allows modules share theoret ical presuppositions pass data mutually accepted common form 
support integration modules written source language available source binary form available common platform 
support evaluation refinement le component modules systems built uniform easy graphical addition offers facilities vi data managing corpora 
remainder describes design gate 
section detail design gate 
section illustrates gate de taken pre existing informa tion extraction system embedded gate 
section concluding remarks 
gate design corresponding key objectives identified section gate comprises prin elements gdm gate document man ager tipster document manager creole collection reusable objects lan guage engineering set le modules integrated system ggi gate graphical development tool le providing integrated access services compo nents adding visualisation debugging tools 
working gate researcher outset reuse existing components common apis gdm creole mean inte mechanism learnt 
creole expands modules available external sources including users tip ster systems 
gdm gdm provides central repository server stores information le system generates texts processes 
communication tween components le system goes gdm insulates components direct contact provides uniform api manipulating data pro duce consume 
basic concepts data model underlying gdm explained discussion tipster model section 
tip ster architecture fully specified man specification consulted details particular definitions api 
gdm fully conformant core document management subset specification 
creole real analysing texts gate le system done creole modules objects terms module object loosely mean interfaces resources may pre algorithmic predominantly data mixture 
typically creole object wrapper pre existing le module database tagger parser lexicon ngram index example 
alternatively objects may developed scratch architecture ei ther case object provides standardised api underlying resources allows access ggi gdm 
creole apis may programming new objects 
user initiates particular creole ob ject ggi programmer gate api building le applica tion object run obtaining information needs document source annotations ob jects calls gdm api 
results stored gdm database available examination ggi input creole objects 
gdm imposes constraints creole objects information associated byte offsets conform annotations model tipster architecture 
principal overhead integrating module gate making components byte offsets 
ggi ggi graphical tool encapsulates gdm creole resources fashion suitable interactive building testing le compo nents systems 
ggi functions creat ing viewing editing collections documents managed gdm form corpora le modules systems gate input data 
ggi facilities display results module system execution new changed annotations associated doc ument 
annotations viewed raw form generic annotation viewer annotation specific way special annotation view ers available 
example named entity tions identify classify proper names organization names person names location names shown colour coded highlighting relevant words phrase structure annotations shown graphical presentation parse trees 
note viewers general particular types tion example procedure pos tag set named entity markup 
see section 
creole developers reuse gate data visualisation code negligible head 
plug play process integrating existing modules gate automated large degree driven interface 
developer required produce tcl code uses gdm tipster api get information database write back re sults 
module pre dates integration called wrapper encapsulates module standard form gate expects 
mod ules developed specifically gate embed tipster calls code dispense wrapper intermediary 
lying module external executable written language current creole set includes prolog lisp perl programs example 
ways provide creole wrapper functions 
packages written languages obey linkage conventions compiled gate directly tcl pack age 
tight coupling maximally efficient necessitates recompilation gate mod ules change 
platforms support shared libraries wrappers loaded run time dynamic coupling 
efficient small penalty load time allows devel change creole objects run gate recompiling gate sys tem 
wrappers written tcl loaded run time loose coupling 
performance penalty comparison apis simple cases easiest integration route 
case implementation creole ser vices completely transparent gate 
creole wrappers encapsulate informa tion preconditions module run data gdm database post conditions data result 
formation needed ggi provided developer configuration file details sort viewer module results parameters need passing module 
parameters changed interface run time tell parser different lexicon 
aside information needed ggi provide access module gate compatibility equals tipster compatibility little overhead making tipster mod ule run gate 
integrated module interface functions happen automatically 
example module appear graph modules avail able permissible links modules auto matically displayed having derived module pre post conditions 
point developer create new graph subset available creole modules form task specific interest 
vie application gate illustrate process converting pre existing le systems gate compatible creole sets example creation vie vanilla information extraction system lasie large scale information extraction system gaizauskas sheffield entry muc sys tem evaluations 
lasie module interfaces standardised originally produced cre gives indication ease le tools gate 
resulting system vie distributed gate 
lasie lasie designed research system approaches information extraction entered muc conference man sundheim 
stand system aimed specific tasks modular design mod ules specifically designed reuse mind attempt standardise data mats passed modules 
modules writ variety programming languages includ ing flex perl prolog 
regard lasie probably typical existing le systems modules 
high level tasks lasie performed include muc tasks carried wall street journal articles named entity recognition coreference resolution template filling tasks 
system pipelined architec ture processes text sentence time consists principal processing stages lexical preprocessing parsing plus semantic interpretation discourse interpretation 
lasie described section ex le modules involves providing wrapper modules communicate gdm accessing tipster compliant document annotations updating new informa tion 
major converting lasie vie involved defining useful module boundaries ing connections writing wrappers convert module output annotations relating text spans convert gdm input annotations relating text spans back module native input format 
complete vie system comprises modules creole object integrated gate 
took approximately person months 
resulting system functionality original lasie system 
interface easier 
course possible swap modules different parser significantly effort case 
details process see cunningham 
vie components deployed number purposes including french ger man spanish 
experience far indicates gate productive environment distributed collaborative reuse software development 
concluding remarks course gate solve problems involved plugging diverse le modules 
barriers integration managing storage exchange information texts incompatibility representation information texts incompatibility type information produced different modules 
gate provides solution tipster architecture group 
gate places constraints linguistic formalisms information content creole modules problem solved dedicated translation functions tagset tagset mapping cases extra processing adding semantic processor complement bracketing parser 
completion means full assessment strengths weaknesses gate possible 
implementation vie gate provides existence proof original conception workable 
believe environment provided gate allow significant strides assessing alterna tive le technologies rapidly assembling le prototype systems 
return themes section gate commit particular linguistic theory formalism enable wishes build pragmatic way diverse efforts 
supported uk engineering physical sciences research council number gr ec dg xiii language engi neering programme number le 

ice communica tion environment user guide man ual version 
technical report university hamburg 
cunningham gaizauskas wilks 

general architecture text en gate new approach lan engineering technical report cs department computer sci ence university sheffield 
available xxx 
lanl 
gov ps cmp lg 
cunningham humphreys gaizauskas 
creole devel oper manual 
department computer sci ence university sheffield 
available www 
dcs 
shef 
ac 
uk ch groups nip gate 
cunningham wilks gaizauskas 

gate general architecture text engineering 
proceedings th con ference computational linguistics coling copenhagen august 
humphreys cun wilks 

description lasie system muc 
proceedings sixth message understanding conference muc 
morgan kaufmann 
kessler weber 

research architectures integrated speech language systems verbmobil 
pro ceedings coling copenhagen 
grishman 
tipster architecture design document version 
technical report darpa 
available www 
tipster org 
grishman sundheim 

message understanding conference brief history 
proceedings th international conference computational linguistics copenhagen june 
mckelvie brew thompson 

sgml basis data intensive nlp 
proceedings fifth conference applied natural language processing anlp 

developing 
user group news cec october 
shieber 
constraint grammar 
mit press 

open architecture language engineering 
language engi neering convention paris 
sperberg mcqueen 

guidelines electronic text encoding tel 
ach acl 
thompson mckelvie 

software architecture simple efficient sgml applica tions 
proceedings sgml europe mu 
zajac 
open distributed architecture reuse integration heterogenous nlp components 
proceedings th conference applied natural language processing anlp 
