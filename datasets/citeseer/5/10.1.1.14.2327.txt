chapter mining frequent patterns data streams multiple time granularities chris jiawei han jian pei yan philip yu indiana university cs indiana edu university illinois urbana champaign cs uiuc edu state university new york buffalo cse buffalo edu ibm watson research center ibm com frequent pattern mining widely studied challenging extend data streams 
compared mining static transaction data set streaming case far information track far greater complexity manage 
infrequent items frequent ignored 
storage structure needs dynamically adjusted reflect evolution itemset frequencies time 
propose computing maintaining frequent patterns usually stable smaller streaming data dynamically updating incoming data streams 
extended framework mine time sensitive patterns approximate support guarantee 
incrementally maintain tilted time windows pattern multiple time granularities 
interesting chapter queries constructed answered framework 
inspired fact fp tree provides effective data structure frequent pattern mining develop fp stream effective fp tree model mining frequent patterns data streams 
fp stream structure consists memory frequent pattern tree capture frequent sub frequent itemset information tilted time window table frequent pattern 
efficient algorithms constructing maintaining updating fp stream structure data streams explored 
analysis experiments show realistic maintain time sensitive frequent patterns data stream environments limited main memory 
keywords frequent pattern data stream stream data mining 
frequent pattern mining studied extensively data mining algorithms proposed implemented example apriori agrawal srikant fp growth han pei yin closet pei han mao charm zaki hsiao 
frequent pattern mining associated methods popularly association rule mining agrawal srikant sequential pattern mining agrawal srikant structured pattern mining karypis iceberg cube computation beyer ramakrishnan cube gradient analysis imielinski khachiyan associative classification liu hsu ma frequent pattern clustering wang 
emerging applications network traffic analysis web click stream mining power consumption measurement sensor network data analysis dynamic tracing stock fluctuation call study new kind data called stream data data takes form continuous potentially infinite data streams opposed finite statically stored data sets 
stream data management systems continuous stream query processors popular investigation development 
querying data streams important task mine data streams interesting patterns 
studies mining data streams including classification stream data domingos hulten hulten spencer domingos clustering data streams guha callaghan 
challenging mine frequent patterns data streams mining frequent itemsets essentially set join operations illustrated apriori join typical blocking operator computation itemset complete seeing past data sets 
maintain limited size window due huge amount stream data difficult mine update frequent patterns dynamic data stream environment 
study problem propose new methodology mining data streams 
previous manku motwani studied landmark model mines frequent patterns data streams assuming patterns author measured start stream current moment 
landmark model may desirable set frequent patterns usually time sensitive cases changes patterns trends interesting patterns 
example shopping transaction stream start long time ago years ago model constructed treating transactions old new equally useful guiding current business old items may lost attraction fashion seasonal products may change time time 
may want fade reduce weight old transactions find changes evolution frequent patterns time 
network monitoring changes frequent patterns past minutes valuable detection network intrusions 
design actively maintain frequent patterns tilted time window framework order answer time sensitive queries 
frequent patterns compressed stored tree structure similar fp tree han pei yin updated incrementally incoming transactions 
han pei yin fp tree provides base structure facilitate mining static batch environment 
fp tree storing transactions current time window hand similar tree structure called pattern tree store frequent patterns past windows 
time sensitive stream mining model fp stream includes major components pattern tree tilted time window 
summarize contributions 
time sensitive mining methodology introduced mining data streams 
develop efficient algorithm build incrementally maintain fp stream summarize frequent patterns multiple time granularities 
third framework fp stream time sensitive queries answered data streams error bound guarantee 
remaining organized follows 
section presents problem definition provides basic analysis problem 
section presents fp stream method 
section introduces maintenance tilted time windows section discusses issues minimum support 
algorithm outlined section 
section reports results experiments performance study 
section discusses related issues section concludes study 
problem definition analysis task find complete set frequent patterns data stream assuming see set transactions limited size window moment 
study frequent pattern mining data streams examine problem transaction database 
justify single item frequent transaction database just need scan database count number transactions appears 
count single item scan costly count possible combination single items itemset length huge number combinations 
efficient alternative proposed apriori algorithm agrawal srikant count itemsets proper subset frequent 
th scan derive frequent itemset length derive chapter set length candidate itemset length subset frequent scan 
difficulties apriori algorithm data stream environment 
frequent itemset mining apriori essentially set join operations shown agrawal srikant 
join typical blocking operator babcock performed stream data observe moment limited size window data stream 
ensure completeness frequent patterns stream data necessary store information related frequent items related infrequent ones 
information currently infrequent items stored information lost 
items frequent impossible correct support connections items 
unrealistic hold streaming data limited main memory 
divide patterns categories frequent patterns patterns infrequent patterns 
definition frequency itemset time period number transactions occurs 
support frequency divided total number transactions observed relaxation ratio maximum support error 
frequent support sub frequent support infrequent 
interested frequent patterns 
maintain patterns may frequent 
want discard infrequent patterns number infrequent patterns really large loss support infrequent patterns affect calculated support 
definition frequent infrequent patterns relative period example pattern may period possible infrequent longer period 
case conclude frequent period design complete structure fp stream consists parts global frequent pattern tree held main memory tilted time windows embedded pattern tree 
incremental updates performed parts fp stream incremental updates occur infrequent patterns sub frequent vice versa 
moment set frequent patterns period obtained fp stream residing main memory 
mining time sensitive frequent patterns data streams design tilted time window chen fact people interested changes fine granularity long term changes coarse granularity 
fig 
shows tilted time window quarters hour hours days 
model compute author frequent itemsets hour precision quarter hour day precision hour month 
model registers units time acceptable trade lower granularity distant time 
days hours natural tilted time window frames shown tilted time window frequent pattern set maintained 
scenario answer queries frequent pattern set period 
periods frequent 
support change dramatically period 
mine frequent patterns current window mine frequent patterns time ranges granularity confined specification window size boundary put different weights different windows mine various kinds weighted frequent patterns mine evolution frequent patterns changes occurrences sequence windows 
flexibility mine variety frequent patterns associated time 
ab ac 
ab ac 
ab ac 
time frequent patterns tilted time windows tilted time window register window count frequent pattern 
compact tree representation frequent pattern set called pattern tree 
shows example 
node frequent pattern tree represents pattern root node frequency recorded node 
tree shares similar structure fp tree 
difference stores frequent patterns streaming data 
fact fp tree construction method han pei yin build tree set frequent patterns input 
usually frequent patterns change dramatically time 
tree structure different tilted time windows considerable overlap 
embed tilted time window structure node space saved 
chapter frequent pattern support ab ac bc abc frequent patterns pattern tree pattern tree propose frequent pattern tree node frequency tilted time window maintained 
shows example frequent pattern tree tilted time windows embedded 
call structure fp stream 

pattern tree tilt window support ac tilted time window table pattern tree tilted time windows embedded fp stream maintaining tilted time windows arrival new data tilted time window table grow 
order table compact tilted time window maintenance mechanisms developed tilted time window construction strategy 
natural tilted time window natural tilted time window discussed shown maintenance windows straightforward 
quarters accumulated merge constitute hour 
hours accumulated day built 
author natural tilted time window tilted windows need maintained period month 
section introduce logarithmic tilted time window schema reduce number tilted time windows 
logarithmic tilted time window alternative tilted time window frame constructed logarithmic time scale shown 
suppose current window holds transactions current quarter 
remaining slots quarter quarters quarters quarters quarters growing exponential rate 
model year data finest precision quarter need units time units 
see logarithmic tilted time window schema space efficient 
tilted time window frame logarithmic partition formally assume stream transactions broken fixed sized batches current batch oldest 
denote itemset denote frequency omitted clear context 
logarithmic tilted time window record frequencies itemset frequencies kept ratio size neighbor tilted time windows reflects growth rate window size usually larger example illustrates logarithmic tilted time window ratio note frequencies 
large number batches maximum number frequencies reasonable batches requires frequencies 
user requests time window consisting batches current time produce answer time window consisting batches 
guarantee words time granularity error logarithmic tilted time window intermediate buffer windows need maintained 
intermediate windows replace merged tilted time windows full 
logarithmic tilted time window updating new batch transactions describe logarithmic tilted time window updated 
replace frequency finest level time granularity level shift back finest level time time chapter granularity level 
replaces level 
shifting back level check intermediate window level full 
shifted back placed intermediate window algorithm stops example previous sub section intermediate window levels empty 
intermediate window full say frequency shifted back level 
process continues shifting stops 
consider example batches tilted time window initially looks resides window granularity level level level level 
intermediate windows level empty shown 
arrival update tilted time window replaces level shifted back level replacing intermediate window level empty put window shifting stops denotes intermediate window 
arrival updating requires steps 
replace shift back 
intermediate window level full frequencies level merged producing 
shifted back level replacing intermediate window level empty put intermediate window shifting stops 
result arrival update get arrival get notice entry needed intermediate storage granularity level 
size tilted time window grow larger number batches seen far stream 
basic operations maintaining logarithmic tilted time windows frequency merging entry shifting 
batches know operations need done pattern 
claim shows amortized number shifting merging operations need done shows efficiency logarithmic scale partition 
pattern amortized number shifting merging operations total number operations performed batches divided claim logarithmic tilted time window updating amortized number shifting merging operations pattern minimum support author tilted time windows group batches seen far stream oldest careful notation differs previous section 
denote window size number transactions goal mine frequent itemsets supports larger period 
size maintained possible itemsets periods matter frequent goal met 
require space maintain drop remaining tail sequences tilted time windows 
specifically drop tail sequences condition holds result longer exact frequency approximate frequency approximation actual frequency described inequality deliver itemsets approximate frequency larger discussed landmark case 
may return itemsets frequency reasonable small 
frequent itemsets period manku motwani inequality draw claim pruning tail tilted time window table compromise goal 
claim consider itemset minimum number satisfying condition 
drop tail frequencies period basic idea claim prune tilted time window table find frequent itemsets support error user defined time period call pruning tail pruning 
itemsets tilted time window tables maintained fp stream data structure 
new batch arrives mine itemsets update fp stream structure 
mined appear structure add appear add table tail pruning tail pruning minimum case part condition violated incrementally tail pruning new batches arrive 
windows dropped drop fp stream 
maintaining frequent tilted time window entries 
stream progresses infrequent entries may needed account itemsets going infrequent frequent 
chapter algorithm correctly maintain fp stream structure efficiently 
far discussed possible anti monotone properties relations itemsets supersets 
anti monotone property supports recorded tilted time window tables 
claim consider itemsets fp stream structure batch 
entries maintained tilted time window tables respectively 
statements hold 


claim shows property frequency itemset equal larger support supersets holds framework approximate frequency counting tilted time window scenario 
furthermore size tilted time window table equal larger supersets 
claim allows pruning way 
fp stream structure claim part superset structure 
supersets need examined 
mining prune search visit supersets call type pruning type pruning 
claim conclude anti monotone property help efficiently cutting infrequent patterns 
claim consider pattern statements hold 

tail frequencies safely dropped claim safely drop frequency 

frequencies safely dropped claim frequencies safely dropped 
claim part essentially says tilted time window table entries pruned dropped superset dropped 
call type pruning type ii pruning 
algorithm section describe detail algorithm constructing maintaining fp stream structure 
particular incorporate pruning techniques high level description algorithm previous section 
update fp stream structure bulky done incoming transactions arrived form new batch algorithm treats batch differently rest initialization step 
transactions arrive frequencies items computed transactions stored main memory 
ordering list created items ordered decreasing frequencies just done han pei yin 
ordering remains fixed remaining batches 
transactions arrived stored memory author batch memory scanned creating fp tree pruning items frequency fp stream structure created mining frequent itemsets fp tree batch memory transaction fp tree discarded 
remaining batches processed algorithm 
algorithm fp streaming incremental update fp stream structure incoming stream data input fp stream structure threshold error rate incoming batch transactions arriving time stream 
output updated fp stream structure 
method 
initialize fp tree empty 

sort incoming transaction list insert fp tree pruning items 

transactions lows 
accumulated update fp stream fol mine itemsets fp tree fp growth algorithm han pei yin modified 
mined itemset check fp stream structure 
structure 
add tilted time window table ii 
conduct tail pruning 
iii 
table empty fp growth stops mining supersets type ii pruning 
note removal fp stream structure deferred scanning structure step 
iv 
table empty fp growth continues mining supersets structure insert structure tilted time window table entry 
fp growth stops mining supersets type pruning 
scan fp stream structure depth search 
itemset encountered check updated mined 
insert tilted time window table occur prune table tail pruning 
search reaches leaf leaf empty tilted time window table drop leaf 
siblings leaf continue search 
siblings return parent continue search siblings 
note children parent dropped parent leaf node dropped 
recording additional timestamp information zero tilted time window entries dropped 
interests simplicity leave 
chapter performance study experiments section report performance study 
describe experimental set results 
experimental set algorithm written compiled gcc lm switch 
experiments performed sun ultra workstation mhz sun ultrasparc iii processor mb ram mb virtual memory 
operating system sunos 
experiments run users machine 
stream data generated ibm synthetic market basket data generator available www almaden ibm com cs quest html managed quest data mining group 
experiments transactions generated distinct items 
average number items transaction varied described 
default values parameters synthetic data generator number patterns average length maximal pattern correlation coefficient patterns average confidence rule 
stream broken batches size transactions fed program standard input 
support threshold varied described set note underlying statistical model generate transactions change stream progresses 
feel reflect reality 
reality seasonal variations may cause underlying model parameters shift time 
simple minded way capture shifting effect periodically randomly permute item names 
item mapping table table initially maps item names 
batches random permutations applied table experimental results performed sets experiments 
set experiments fixed percent second set experiments fixed sets experiments separate data sets fed program 
average transaction length second third 
batch statistics collected total number seconds required batch time size fp stream structure batch bytes size total number itemsets held fp stream transactions processed 
cases batches processed transactions cases batches transactions 
random permutation table entries means swapped transaction read input processed transformed includes time read transactions standard input 
include temporary fp tree structure mining batch 
author structure batch num itemsets average length itemset fp stream batch ave len 
graphs axis represents batch number 
support denote figures show time size results respectively 
top graph shows results average transaction length middle shows average transaction length bottom shows average transaction length 
seconds seconds seconds time ave trans len support support time ave trans len support support time ave trans len support support fp stream time requirements expected item permutation causes behavior algorithm jump batches 
stability regained quickly 
general time space requirements algorithm tend stabilize grow slowly stream progresses despite random permutations 
example time required average transaction length support middle graph stabilize seconds small bumps batches 
space required middle graph stabilize roughly small bumps 
stability results quite nice provide evidence algorithm handle long data streams 
space requirements modest cases 
easily fit main memory 
analyze time requirements recall algorithm batch environment 
assume transactions accumulating batch updates fp stream structure previous batch commencing 
primary requirement opinion algorithm fall stream 
words long fp stream chapter bytes bytes bytes size ave trans len support support size ave trans len support support size ave trans len support support fp stream space requirements structure updated batch transactions processed primary requirement met 
consider case average transaction length top graph 
time stabilizes roughly seconds batch 
algorithm handle stream arrival rate transaction second batch size divided time 
represents best case experiments 
worst case average transaction length rate roughly transactions second 
rate large feel considerable improvement obtained implementation currently simple straight forward optimizations 
circumstances acceptable mine small itemsets 
assumption small itemsets needed algorithm prune away great deal 
shows time performance algorithm length itemsets mined bounded 
see times average transaction length top graph smaller itemsets mined top graph 
difference significant average transaction length 
algorithm itemsets length bounded support handle stream arrival rate transactions pre second unbounded itemset lengths algorithm handle rate 
interesting observation concerning spikes troughs figures 
considering size see random permutations cause seconds seconds seconds time ave trans len author support support time ave trans len support support time ave trans len support support fp stream time requirements itemset lengths mined bounded narrow trough drop space usage 
conjecture permutations cause itemsets tree dropped due sharp decrease frequency 
considering time see permutations cause narrow spike increase top graph support thresholds 
middle graph spiking behavior persists threshold switches troughs threshold 
bottom graph troughs seen thresholds 
switching spikes troughs interesting phenomena 
know cause put forth conjecture 
item permutation occurs itemsets appear fp stream structure longer appear new batch itemsets appear structure appear new batch 
results competing factors mining batch requires itemsets structure appear batch need updated mining batch requires itemsets structure sub frequent current batch need added 
average transaction length small say condition dominates resulting spike 
large say condition dominates resulting trough 
describe results concerning nature itemsets fp stream structure 
figures show average itemset length total number itemsets respectively 
maximum itemset length experiments 
chapter ave len ave trans len support support ave len ave trans len support support ave len ave trans len support support fp stream average itemset length note average itemset length increase average transaction length number itemsets 
consistent running apriori program borgelt datasets consisting transactions items average transaction lengths respectively 
support threshold case corresponding experiments 
itemsets produced apriori exactly fp stream batch leftmost point middle bottom graphs 
observed itemset lengths apriori nearly datasets size size size size size size size sizes combined 
discussion section examine fitness fp stream mining approximate patterns time fading framework outline design considerations discuss related 
fuzzy cs uni magdeburg de borgelt software html assoc num itemsets ave trans len support support author num itemsets ave trans len support support num itemsets ave trans len support support fp stream total number itemsets mining approximate patterns time fading framework previous discussion introduced natural logarithmic tilted time window partitions 
give finer granularity coarser granularity past 
discount support past transactions 
order discount past transactions introduce fading factor suppose fixed sized batches current batch oldest 
denote actual window size fading framework faded window size faded support change algorithm means drop infrequent patterns support assume real faded support approximate support get inequality consistent inequality actual support replaced faded support actual window size replaced faded window size 
merge tilted time windows merged frequency chapter number batches contained tiled time window see tilted time window framework works time fading model changing definition merging operation 
claims discussed hold time fading model 
design consideration consider design issues 

compression fp stream 
fp stream reduce usage memory maintaining pattern tree tilted time window table node pattern tree 
fp stream structure compressed 
tilted time window table support stable lots entries table compressed 
second tilted time windows parent node child node fp stream tilted time window needs maintained 

reordering sub frequent items 
algorithm illustrated ordering sub frequent items follows item ordering list 
know order keep fp tree compact usually sort items frequency decreasing order 
list order derived initial batch transactions changes incoming streams changes brought incoming data streams may wonder beneficial periodically reconstruct fp stream updated frequency descending order 
know updating quite expensive 
study han pei yin order items fp tree may slightly affect size fp tree usually performance degradation mining comparison perfect frequency descending ordered tree 
pattern tree difference smaller tree derived patterns deep stable transaction data 
suggest reorder list periodically 
really wants update corresponding fp stream structure done system quiescent time stream coming time sufficient complete update 

suitability method 
memory requirement fp stream largely determined number patterns length patterns 
usually larger frequent patterns far away low millions patterns proposed approach requires nontrivial size fp stream residing main memory 
patterns change fast time new batch data generate brand new sub frequent patterns fp stream grow larger larger time 
case possible solution limit length tilted time window table old patterns drop fp stream quickly 
related lot studies stream data management stream continuous query processing babcock stream data mining attracted author researchers attention years ago focus stream data classification domingos hulten hulten spencer domingos stream clustering guha callaghan 
mining frequent counts streams studied manku motwani demaine pez ortiz munro karp papadimitriou shenker 
demaine pez ortiz munro karp papadimitriou shenker developed essentially algorithm find frequent items variant classic majority algorithm 
manku motwani provides framework compute frequent items itemsets 
manku motwani formulates error boundary approximate algorithm 
developed structure called fp stream maintain frequent patterns multiple time granularities facilitates flexible fading weighting old transactions discovery various kinds time related patterns 
propose approach mine time sensitive frequent patterns 
incrementally maintain historical information sub frequent patterns 
information mining time sensitive queries evaluated efficiently 
developed effective pattern tree structure fp stream mining frequent patterns data streams 
fp stream structure consists memory frequent pattern tree tilted time window embedded 
efficient algorithms devised constructing maintaining updating fp stream structure data streams 
model examined analysis experiments shows realistic mine maintain frequent patterns approximate support estimation data stream environments limited main memory available 
show model accommodate fading factors 
acknowledgments authors express hai doan constructive comments draft 
chapter bibliography agrawal srikant agrawal srikant 
fast algorithms mining association rules 
proc 
int 
conf 
large data bases vldb 
agrawal srikant agrawal srikant 
mining sequential patterns 
proc 
int 
conf 
data engineering icde 
babcock babcock babu datar motwani widom 
models issues data stream systems 
proc 
acm symp 
principles database systems pods 
beyer ramakrishnan beyer ramakrishnan 
bottom computation sparse iceberg cubes 
proc 
acm sigmod int 
conf 
management data sigmod 
chen chen dong han wah wang 
multidimensional regression analysis time series data streams 
proc 
int 
conf 
large data bases vldb 
demaine pez ortiz munro demaine pez ortiz munro 
frequency estimation internet packet streams limited space 
proc 
th annual european symposium algorithms esa 
kumar srivastava tan 

data mining network intrusion detection 
proc 
nsf data mining 
domingos hulten domingos hulten 
mining high speed data streams 
proc 
acm sigkdd int 
conf 
knowledge discovery databases kdd 
guha guha mishra motwani callaghan 
clustering data streams 
proc 
ieee symposium foundations computer science focs 
han pei yin han pei yin 
mining frequent patterns candidate generation 
proc 
acm sigmod int 
conf 
management data sigmod 
chapter hulten spencer domingos hulten spencer domingos 
mining time changing data streams 
proc 
acm sigkdd int 
conf 
knowledge discovery databases kdd 
imielinski khachiyan imielinski khachiyan 
generalizing association rules 
data mining knowledge discovery 
karp papadimitriou shenker karp papadimitriou shenker 
simple algorithm finding frequent elements streams bags 
acm trans 
database systems 
karypis karypis 
frequent subgraph discovery 
proc 
int 
conf 
data mining icdm 
liu hsu ma liu hsu ma 
integrating classification association rule mining 
proc 
int 
conf 
knowledge discovery data mining kdd 
manku motwani manku motwani 
approximate frequency counts data streams 
proc 
int 
conf 
large data bases vldb 
callaghan callaghan mishra meyerson guha motwani 
high performance clustering streams large data sets 
proc 
int 
conf 
data engineering icde 
pei han mao pei han mao 
closet efficient algorithm mining frequent closed itemsets 
proc 
acm sigmod int 
workshop data mining knowledge discovery dmkd 
wang wang yang wang yu 
clustering pattern similarity large data sets 
proc 
acm sigmod int 
conf 
management data sigmod 
zaki hsiao zaki hsiao 
charm efficient algorithm closed itemset mining 
proc 
siam int 
conf 
data mining 
