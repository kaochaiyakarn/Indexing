usenix association proceedings hotos ix th workshop hot topics operating systems hawaii usa may advanced computing systems association usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
high availability scalable storage dynamic peer networks pick peer peer storage aims build large scale reliable available storage small scale unreliable low availability distributed hosts 
data redundancy key data guarantees 
preserving redundancy face highly dynamic membership costly 
simple resource usage model measured behavior gnutella file sharing network argue large scale cooperative storage limited dynamics cross system bandwidth local disk space 
examine bandwidth optimization strategies delayed response failures admission control load shifting find alter basic problem 
conclude redundancy data scale dynamics high needed cross system bandwidth unreasonable 
systems chord pastry tapestry enable peer peer lookup overlays robust intermittent participation scalable unreliable nodes fast membership dynamics 
papers express hope extra data redundancy storage inherit scalability robustness underlying lookup procedure 
implies hope robust lookup foundation wide area storage layers complicates desirable properties server selection 
argues trying achieve things scalability storage guarantees resilience highly dynamic membership bandwidth resources available regardless lookup 
argument roughly follows 
simple considerations current hardware deployment suggest idle upstream bandwidth limiting resource volunteers contribute idle disk space 
disk space grows faster access point bandwidth bandwidth scarce relative disk space 
elaborate argument section generic resource usage model estimate conservatively costs associated maintaining redundancy charles blake rodrigo rodrigues cb mit edu rodrigo lcs mit edu mit laboratory computer science systems built unreliable parts 
section adapts model accommodate hosts temporarily unavailable lost data 
section discusses issues admission control hardware trends importance incentives 
way numbers gnutella real peer peer system highlight bandwidth contributions serious limit scaling data 
conclude section 
simple model section consider bandwidth necessary reliable peer peer storage 
simple analytic model bandwidth usage attempts provide broad intuition apply approximation currently proposed systems 
assumptions assume simple redundancy maintenance algorithm node leaves joins system data node held hold downloaded 
note join leave mean really joining system time leaving forever 
refer transient failures intentional accidental loss contributed data 
section elaborates model account temporary disconnections may trigger data transfers 
assume static data placement strategy function current membership set replicas block 
number simplifying assumptions 
conservative increased realism increase bandwidth required 
note storage guarantee effectively insists probability getting datum threshold 
time create new nodes consider worstcase accidents data distribution variations 
fact perform average case analysis model conservative 
assume identical node space bandwidth contributions 
reality nodes may store different amounts data different bandwidth capabilities 
maintaining redundancy may require cer usenix association hotos ix th workshop hot topics operating systems tain cases bandwidth average bandwidth 
creating capable nodes set capable nodes take time 
average space bandwidth conservatively bound worst case relevant bound guarantee 
assume constant rate joining leaving 
resource contributions worst case appropriate probabilistic bound 
average rate bounds maximum rate conservative 
assume independence leave events 
failures networks machines truly independent redundancy really required provide guarantees 
assume constant steady state number nodes total data size 
decreasing population requires bandwidth increasing sustained indefinitely 
realistic assume data increases time changes require bandwidth 
data maintenance model consider set identical hosts cooperatively provide guaranteed storage network 
nodes added set rate leave rate average system size constant 
average node stays member 
data model system reliably stores total bytes unique data stored redundancy expansion factor total kd bytes contributed storage 
may think replication factor expansion due coding 
desired value depends storage guarantees redundant encoding scheme discussed section 
consider data maintenance bandwidth required maintain redundancy presence dynamic membership 
note model consider bandwidth consumed queries conservative bandwidth estimate 
node joining overlay download data serve subset data mapped 
average size transfer join events happen time units 
aggregate bandwidth deal nodes joining overlay ors node leaves overlay data housed copied new nodes redundancy lost 
leave event leads transfer bytes data 
leaves re ors total quire aggregate bandwidth bandwidth usage data maintenance node average bw node space node lifetime average membership time average membership time months months months months month week hotos ix th workshop hot topics operating systems usenix association day hrs hrs hr months months months months month week day hrs hrs hr tb tb tb number hosts kbps dial tb tb tb number hosts kbps cable modem 
log log plots participation requirements dial cable modem networks 
plotted thresholds various amounts unique data incur link saturation just maintain data 
redundancy 
understanding scaling plots example threshold curves lifetime membership plane 
basic participation space system 
popular systems hosts hosts stay members longer 
points line particular data scale require data maintenance bandwidth excess available bandwidth 
plot thresholds maintenance consuming half total link capacity dial ups cable modems 
data scales chose tb tb tb roughly correspond medium sized music archive large music archive small video archive movies respectively 
basic points take away plots 
short membership times create need enormous node counts support interesting data scales 
cable modem users provide continuous month service maintain tb queries data 
second strongly impacts fast storage network grow 
monthly turnover rate cable modem contribute gb unique data gb total storage 
pcs years years ago gb disks standard new pcs gb current idle capacity 
uses fixed redundancy factor actual redundancy necessary depends probability targets data loss availability 
section examines detail necessary erasure coded redundancy availability 
availability redundancy section expands model include hosts transiently disconnected estimates redundancy requirements detail 
downtime vs departure far calculations assumed resources host contributes available 
real hosts vary greatly availability :10.1.1.160.7346
previous section shows takes lot bandwidth preserve redundancy departures 
helps distinguish true departures temporary downtime 
model systems distinguish true departures transient failures membership timeout measures long system delays response failures 
process making new hosts responsible host data host contact longer time 
counting offline hosts members consequences 
member lifetimes longer transient failures considered leaves 
second hosts serve data fraction time members fraction members serve data moment 
define fraction availability fraction members serve data time redundancy needed achieve level availability 
effective bandwidth contributed node reduced nodes serve fraction time 
membership lifetime benefits gained delayed response failures offset need increased redundancy reduced effective bandwidth 
understand effect quantitatively know needed redundancy 
needed redundancy replication compute data expansion needed high availability context replication style redundancy 
note availability implies reliability lost data inherently unavailable 
average lifetime depends timeout 
system size availability depend definition availability 
wish know replication factor ka needed achieve object unavailability target 
number 
object unavailable ka replicas unavailable replica unavailable ka ka solving ka yields log log ka log evaluate tradeoff data maintenance bandwidth membership timeout 
account partial availability replacing equation 
solving substituting equation gives log log usenix association hotos ix th workshop hot topics operating systems apply equation know depend participant behavior 
estimate parameters data collected measurement study availability hosts gnutella file sharing network 
methodology similar previous study allowed crawler extract entire membership giving precise estimate 
measurements took place april april 
suggests discriminating downtime departure lead factor savings maintenance bandwidth 
hopeless field tb high availability gnutella participation 
needed redundancy erasure coding technique proposed systems erasure coding :10.1.1.12.2849
efficient conventional replication increased intra object redundancy allows level availability achieved smaller additional redundancy 
exhibit analogue equation case erasure coding 
erasure coded redundancy scheme object divided blocks stored effective redundancy factor kc 
object reconstructed available blocks taken stored set blocks 
object availability probability blocks available mb mb maintenance bw upstream cable modem bw kb leave timeout hours 
node bandwidth maintain unique data nines object availability system dynamics gnutella hosts 
bandwidth lessened delays responding failures remains quite large terms home internet users 
host contributes gb 
algebraic simplifications normal approximation binomial distribution see get formula erasure coding redundancy factor expand taylor series kc number standard deviations normal distribution required level availability 
corresponds nines availability 
shows benefits coding replication uses fragments 
replication factor achieve availability times storage erasure codes large values fold savings 
borderline feasible store tb unique data gnutella participation kbps node maintenance bandwidth 
utilization correspondingly lower amount unique data 
mb disk host contributed 
surely peers willing donate 
note maintenance 
odd engineer highly data read 
actual load hard guess rule thumb probably maintenance half total bandwidth 
total load redundancy factor nines replication coding leave timeout hours 
graph shows decreased delayed response failure causes marked increase 
coding beats replication bandwidth savings factor gnutella trace 
expect greater kbps just limit cable modems provide 
service 
gnutella hosts usually available 
hosts cable modems aggregate bandwidth available mbps mbps half data maintenance 
comparison level service provided reliable dedicated pcs gb drives mbps connections time 
discussion section discusses issues related agenda design large scale peer peer storage 
admission control load shifting strategy reduce redundancy maintenance bandwidth attempt admit highly volatile nodes similarly shift responsibility nonvolatile hosts 
fundamentally strategy weakens dynamic peer symmetric network envisioning 
strong bias converts problem garden variety distributed systems problem building larger storage small number highly available collaborators 
shows gnutella available hosts provide total service years 
availability nodes average 
generous may view subset available hosts fairer model behavior hypothetical population peer peer participants 
repeated analysis earlier sections hotos ix th workshop hot topics operating systems usenix association just subset hosts day membership timeout 
resulting bandwidth requirement kbps node unique tb coding 
delayed response coding admission control enables fold savings maintenance bandwidth results left edge 
total scale storage remains bounded bandwidth 
best gnutella peers donated gb total served nines availability 
hosts kbps maintenance bandwidth participating 
assuming query load kbps host cable modems adequate serve data 
service supported universities typical oc connections pc 
stricter admission control rapidly leads subset gnutella hosts availability 
surpasses observed enterprise wide behavior 
cost improvement reduction service time fold 
real service reduction depend correlation availability bandwidth 
ideally correlation strong positive 
node bandwidth best hosts roughly fold node bandwidth excluded hosts total service cut half just nodes 
stated reverse leveraging tens thousands home users doubles total data service 
fact backed simple envelope calculation 
cable modem users availability serve bandwidth typical high availability universities allowing half bandwidth file sharing 
hardware trends discussion far suggests highly optimized systems achieve gb host gnutella hosts cable modem connections 
hardware trends unpromising 
home access academic access year disk speed days speed time kbps send mbps send mb sec gb min gb hour tb hour table 
generous bandwidth estimates suggest distributing local disk get harder 
disk increased fold bandwidth increased fold 
simple thought experiment helps realize implications trend 
imagine long take fraction hosts needed provide service usenix association hotos ix th workshop hot topics operating systems service years provided 
graph showing service time gnutella provided bya hosts 
hosts provide total service time trace 
upload hard disk friend machine 
table recalls evolved typical users times 
fourth sixth columns show trend disk space distributors 
disk upload time getting larger quickly 
peers contribute meaningful fractions disks participation stable 
supports main point synchronizing randomly distributed large scale storage expensive dynamic membership worse situation worsening 
incentive issues pioneer systems napster gnutella current research trends systems users serve data may particular interest 
fraction outbound traffic saturated access data 
storage guarantees exacerbate problem inducing great deal synchronization traffic access traffic 
higher costs may participation example gnutella network 
stable membership necessary reach modest data scales participation strongly 
added value service guarantees incentive 
stable noticeable downward fluctuation popularity provided service decline 
option having user interfaces discourage disallow disconnection spirit volunteer donation system 
reasonable idea allow client bandwidth usage proportional contributed bandwidth 
enforcing raises design issues extension threat model inappropriate relegate afterthought 
argues real scalability problem robust internet scale storage lookup state procedure service bandwidth field queries maintain redundancy 
dht style systems maintaining redundancy takes cross system bandwidth proportional data scale membership dynamics 
properties redundancy data dynamics high cross system bandwidth enormous 
conflict high availability large data scales home user bandwidth fast participation dynamics raises questions current dht research trajectories 
dynamic deployment scenarios leverage nodes serve data reliable ones 
static deployment scenarios small lookup state optimizations may harm terms system complexity properties especially designers insist implementing optimizations membership state restricted ways 
storage guarantees inappropriate large scale peerto peer worry lookup guarantees 
anonymity related security properties high priority guarantees bad plan incorporating defenses threats properties afterthought 
stefan saroiu krishna gummadi steven gribble supplying data collected study 
research supported darpa contract monitored air force research laboratory nsf iis praxis xxi fellowship 
hari balakrishnan frans kaashoek david karger robert morris ion stoica 
looking data systems 
communications acm pages february 
bhagwan stefan savage geoffrey voelker 
replication strategies highly available peer peer storage systems 
technical report cs ucsd november 
bhagwan stefan savage geoffrey voelker 
understanding availability 
proc 
nd international workshop peer peer systems iptps berkeley ca february 
william bolosky john douceur david ely marvin theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
proc 
acm sigmetrics international conference measurement modeling computer systems june 
frank dabek frans kaashoek david karger robert morris ion stoica 
wide area cooperative storage cfs 
proc 
th acm symposium operating system principles banff canada october 
john kubiatowicz 
extracting guarantees chaos 
communications acm pages february 
sylvia ratnasamy paul francis mark handley richard karp scott shenker 
scalable content addressable network 
proc 
acm sig comm conference san diego ca august 
antony rowstron peter druschel 
pastry scalable distributed object location routing large peer peer systems 
proc 
ifip acm international conference distributed systems platforms middleware heidelberg germany november 
antony rowstron peter druschel 
storage management caching past large scale persistent peer peer storage utility 
proc 
th acm symposium operating system principles banff canada october 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proc 
multimedia computing networking mmcn january 
ion stoica robert morris david karger frans kaashoek hari balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm conference san diego ca august 
hakim weatherspoon john kubiatowicz 
erasure coding vs replication quantitative comparison 
proc 
st international workshop peer peer systems iptps cambridge ma march 
ben zhao john kubiatowicz anthony joseph 
tapestry infrastructure fault tolerant widearea location routing 
technical report ucb csd uc berkeley april 
hotos ix th workshop hot topics operating systems usenix association 
