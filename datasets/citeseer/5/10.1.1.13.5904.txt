software practice experience softw 
pract 
exper 
prepared speauth cls version fast dominance algorithm keith cooper timothy harvey ken kennedy rice university houston tx summary problem finding dominators control flow graph long history literature 
original algorithms suffered large asymptotic complexity easy understand 
subsequent improved time bound generally sacrificed simplicity ease implementation 
returns simple formulation dominance global data flow problem 
insights nature dominance lead implementation algorithm runs faster practice classic lengauer tarjan algorithm log 
algorithm lengauer tarjan best known widely fast algorithms dominance 
working implementation insights rederive earlier control dependence ferrante contract sponsor research supported part darpa contract state texas advanced technology program number 
correspondence tim harvey south main st ms houston tx usa cs rice edu copyright john wiley sons cooper harvey kennedy calculating dominance frontiers show faster original algorithm cytron aim new algorithm argument empirical evidence algorithms discouraging asymptotic complexities faster practice commonly employed 
show cases careful engineering simple algorithms overcome theoretical advantages problems grow realistic sizes 
argue algorithms intuitive easily implemented making excellent teaching tools 
key words dominators dominance frontiers advent static single assignment form ssa interest dominance related concepts :10.1.1.100.6361
new algorithms problems optimization code generation built dominance 
re examine formulation dominance forward data flow problem 
insights lead simple general efficient implementation iterative data flow framework 
resulting algorithm iterative solver uses representation dominance information significantly faster lengauer tarjan algorithm graphs size normally encountered compiler nodes 
integral part process iterative solver computes immediate dominators node graph eliminating problem previous iterative formulations 
show natural extension copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm ideas leads efficient algorithm computing frontiers ssa construction algorithm 
allen control flow analysis formulated dominance computation global data flow problem 
cocke showed iterative algorithm solve equations 
hecht ullman showed reverse postorder iterative scheme solves equations single pass cfg reducible graphs 
simple intuitive nature iterative formulation attractive teaching implementing 
simplicity leads high degree confidence implementation correctness 
prime result right data structure iterative data flow framework dominance faster known lengauer tarjan algorithm graphs arise real programs 
practice algorithms fast 
experiments process control flow graph cfg nodes second 
lengauer tarjan faster asymptotic complexity requires unreasonably large cfgs order nodes asymptotic advantage catches engineered iterative scheme 
iterative algorithm simpler easier understand easier implement faster practice technique choice computing dominators cfgs 
dominance problem excellent example need balance theory practice 
lowry algorithm appeared researchers steadily improved time bound problem 
results suggest improvements asymptotic complexity may copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy sized examples careful engineering iterative scheme clear method choice 
history prosser introduced notion dominance analysis flow diagrams defining follows say box dominates box path leading input output diagram passes box pass box dominates box box subordinate box program 
dominance prove safety code reordering operations explain algorithm compute dominance connectivity matrix 
years lowry sketched algorithm compute dominators 
essence algorithm considers paths entry node node successively removes nodes path 
removal node causes unreachable node dominator set 
clearly algorithm quadratic number nodes actual complexity depend heavily implementation data flow approach computing dominance begins allen proposed set data flow equations problem 
years allen lowry give details assess accurately complexity algorithm claim asymptotic complexity wheren number nodes graph 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm cocke showed iterative algorithm solving equations gave complexity 
hecht ullman published analysis iterative algorithms reverse postorder traversals 
showed dominance equations solved linear time reducible graphs 
restrict algorithm reducible graphs achieve desired time bound iterating fixed point generalize algorithm time bound handle irreducible graphs 
hecht book aho ullman dragon book iterative algorithm dominance restricting reducible graphs 
unfortunately aho ullman mistakenly credit algorithm purdom moore allen cocke 
aho ullman approached problem direction 
algorithm takes graph successively removes nodes 
nodes entire graph single path subsequently reached dominated removed node 
algorithm works quadratic time number nodes 
hopcroft improved time bound log graphs number edges graph efficient method finding ancestors trees 
purdom moore year proposed algorithm builds tree graph 
dominators successively removing node graph noting children tree node longer reached graph 
algorithm requires quadratic time complete 
tarjan proposed algorithm uses depth search union find achieve asymptotic complexity log lengauer tarjan built produce algorithm linear complexity 
algorithms rely copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy observation node dominator depth spanning tree 
gives initial guess dominator corrected second pass nodes 
algorithm relies efficiency union find determine time bound 
harel published algorithm built lengauer tarjan computes immediate dominators linear time 
improved time bound speeding union find operations technique gabow tarjan year 
harel explanation subsequently incomplete 
published simpler method harel initial achieves theoretical linear time complexity 
authors posit actual complexity algorithm practical data structures log log log number nodes graph number edges 
provide experimental data shows algorithm measured behavior versus lengauer tarjan 
buchsbaum linear time algorithm lengauer tarjan 
algorithm essentially divide conquer algorithm groups bottom nodes depth search tree 
problem perform subsequent union find operations needed lengauer tarjan linear time 
algorithm better asymptotic complexity lengauer tarjan 
state algorithm runs percent slower lengauer tarjan real flowgraphs 
interesting aside analysis suggests classes graphs lengauer tarjan runs linear time 
compares iterative scheme finding dominators lengauer tarjan 
comparison appropriate reasons 
lengauer tarjan best known copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm widely implemented fast dominator algorithms 
comparing lengauer tarjan provides meaningful information people implemented algorithm 
second primary result simple iterative scheme problem engineered complicated techniques built union find despite higher asymptotic complexity iterative data flow approach 
perspective lengauer tarjan appropriate comparison algorithms expend additional effort speed union find operations fact asymptotic advantage union find show problem size unrealistically large 
third buchsbaum lower asymptotic complexity lengauer tarjan papers provide evidence theoretical advantage translates faster running times 
buchsbaum show algorithm tends run slower lengauer tarjan 
analysis buchsbaum suggests graphs lengauer tarjan linear time behavior 
data flow approach compute dominance information data flow techniques pose problem set data flow equations solve reverse postorder iterative algorithm 
approach builds understood principles iterative data flow analysis guarantee termination correctness asymptotic complexity 
section presents iterative data flow solver dominance 
discusses properties algorithm derive theory iterative data flow analysis 
shows simple insights nature dominance information carefully engineered copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy data structure lead efficient implementation competes favorably lengauer tarjan 
compute dominance information compiler annotate node cfg dom set 
dom cfg dominates lies path entry node cfg dom node dominates forx dom dom ory dom 
definition forany node dom 
dom dominates know immediate dominator 
intuitively immediate dominator node dom typically compiler captures information set idom 
idom node immediate dominator ifn immediate dominator node dom dom 
formulation lets compiler compute dom sets forward data flow problem 
cfg set nodes set directed edges designated entry node cfg data flow equations define dom sets dom dom preds dom idom member describe function dom 
consistency write set implementation realizes trivial function dom 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm nodes dom changed true changed changed false nodes reverse postorder new set preds dom new set dom dom new set changed true 
iterative dominator algorithm assume nodes numbered postorder preds relation defined maps node predecessors solve equations compiler iterative algorithm shown 
correct initialization important algorithm initialize dom set include nodes exclude uninitialized sets intersection 
allen cocke hecht pp 
show similar formulations 
properties iterative framework algorithm produces correct results equations dom form distributive data flow framework defined kam ullman 
know iterative algorithm discover maximal fixed point solution halt 
framework distributive know maximal fixed point solution identical meet paths solution matches definition dom 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy dom node pass second pass third pass 
computing dominators irreducible graph equations dom simple form rapid framework 
iterative algorithm traverses graph reverse postorder halt passes graph 
reducible graph independent depth spanning tree generate postorder numbering 
irreducible graph depends specific depth spanning tree compute reverse postorder 
irreducible graph running time algorithm depends traversal order 
example shows small irreducible graph results iterative dominators computation 
node labelled postorder number refer node number 
right side shows sets computed iteration graph 
iteration node wrong dominator set algorithm processed node 
node node predecessors intersection computes studies suggest advent structured programming procedures reducible cfgs 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm dom uses initial value dom overestimates dom dom 
onthe second iteration node predecessors processed intersection produces correct dominator set node 
third iteration changes sets algorithm halts 
engineering data structures iterative algorithm easy understand easy implement 
impractically slow 
version uses distinct bit vector dom sets node times slower implementation lengauer tarjan algorithm 
large graphs considerable time wasted performing intersections sparsely populated sets copying sets node 
tried reduce time necessary intersections substituting increased memory requirements algorithm impractical :10.1.1.30.7319
improve iterative algorithm performance need memory efficient data structure supports fast intersection 
keeping dom sets consistent order way speed intersection 
think set list require union add list dom sets reflect order nodes added 
order dom dom thenthe resulting set prefix dom dom 
observation lets implement intersection ordered sets performing pairwise comparison elements 
elements agree node copied result set comparison moves elements disagree copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy sets reached intersection terminates current node added element dominator set 
improve memory efficiency rely subtle property ordered dom sets 
notice nodes dom idom idom idom suggests relationship ordered dom set auxiliary data structure called dominator tree 
nodes cfg dominance 
dominator tree node child immediate dominator cfg 
dom nodes path dominator tree entry node intersection operator creates dom order path 
element dom isn 
dom isb 
element dom isb immediate dominator node dom ordered dom sets read idom directly sets 
relationship dom sets dominator tree suggests alternative data structure 
keeping distinct dom sets algorithm represent dominator tree read dom sets tree 
algorithm keeps single array doms forthe cfg indexed node 
node inclusion dom implicitly 
entry doms 
entry doms doms holds entry idom idom 
walking doms array starting path dominator tree dom set 
representation algorithm perform intersection starting back dom set moving front opposite direction earlier description 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm nodes initialize dominators array doms undefined doms start node start node changed true changed changed false nodes reverse postorder start node new idom processed predecessor pick predecessors doms undefined doms calculated new idom intersect new idom doms new idom doms new idom changed true function intersect returns node finger finger finger finger finger finger finger doms finger finger finger finger doms finger return finger 
engineered algorithm reverses sense termination condition intersections scheme move backwards lists comparing elements 
shows code iterative algorithm improvements 
intersection routine appears bottom 
implements finger algorithm finger pointing dominator set finger moving independently comparisons dictate 
case comparisons postorder numbers intersection start fingers ends sets fingers point postorder number move finger pointing smaller number back element 
remember nodes higher dominator tree higher postorder numbers copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy node node node node node node st iteration doms st iteration doms 
example engineered algorithm nd iteration doms rd iteration doms intersect moves finger value finger fingers point element intersect returns element 
set resulting intersection begins returned element chains way doms array entry node 
scheme advantages 
saves space sharing representations idom occurs dom set contains 
saves time avoiding cost allocating initializing separate dom sets node 
avoids data movement separate sets element result set intersection copied set doms array elements copied 
explicitly represents idom 
example shows somewhat complex example 
graph requires iterations loop connectedness greater example 
right side shows contents doms array stage algorithm 
brevity fourth iteration doms change 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm doms array indexed node name entries initialized recognizable value indicate computed dominator sets predecessors 
node iteration call intersect routine 
intuitive way view intersect routine imagine walks dominator tree different nodes common parent reached 
intersect sets finger postorder numbers node names set finger finger 
moved finger tree parent 
fingers point node intersect returns node 
look predecessor node dominator calculated skip record new idom case doms 
course node dominator node result iteration 
second iteration interesting 
intersection node compares produces 
second intersection compares produces final value 
takes iteration filter node 
algorithm final pass shown discover information changes 
complexity analysis traversing graph compute reverse postorder sequence takes time 
resulting sequence elements 
traversal computes dom idom visits node 
node performs set pairwise intersections incoming edges 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy unions implicit data structure 
taken entire traversal intersections require time proportional size dom sets consume 
total cost iteration size largest dom set 
number iterations depends shape graph 
kam ullman showed iterative algorithm halt iterations 
course upper bound loop connectedness irreducible graph function order depth search computes reverse postorder numbering 
dominance frontiers part dominance plays important part ssa construction calculation dominance frontiers node cfg 
define dominance frontier node set cfg nodes suchthat dominates predecessor strictly dominate :10.1.1.100.6361
dominance frontiers applications algorithms ssa aswell 
example finding postdominance frontiers efficient method computing control dependence critical analysis automatic parallelization 
cytron propose finding dominance frontier set node step manner 
walking dominator tree bottom traversal 
node add dominance frontier set cfg successors dominated traverse copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm dominance frontier sets dominator tree children member frontiers dominated copied dominance frontier 
approach problem opposite direction observations 
nodes dominance frontier represent join points graph nodes control flows multiple predecessors 
second predecessors join point respective dominance frontier sets predecessor dominates result definition dominance frontiers 
dominators predecessors dominance frontier sets dominate observations lead 
identify join point node incoming edge join point 
examine predecessor walk dominator tree starting reach immediate dominator dominance frontier nodes walk immediate dominator 
intuitively rest dominators shared predecessors 
dominate dominance frontiers 
pseudo code 
small amount bookkeeping shown specifically added node dominance frontier data structure dominance frontier sets dictate amount additional necessary 
implementation linked lists dominance frontier sets keep restrict multiple entries algorithm context control dependence 
believe value method computing dominance frontiers studied prior 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy nodes number predecessors predecessors runner runner doms add runner dominance frontier set runner doms runner 
dominance frontier algorithm join point entered node dominance frontier set put node join point entered dominance frontier set check see node 
complexity analysis traversing cfg requires time node graph join point walks dominator tree giving quadratic 
remember walks early possible 
touch node join point belongs dominance frontier equal sum sizes dominance frontier sets 
sum quadratic number nodes contend sets built efficiently 
words 
shall see approach tends run faster cytron algorithm practice certainly reasons 
iterative algorithm built dominator tree 
second algorithm uses comparisons strictly necessary 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls experiments fast dominance algorithm iterative formulation dominators improvements described simple practical 
show implemented algorithm lengauer tarjan algorithm path compression balancing research compiler ran series experiments compare behavior 
algorithm built dominance frontier calculation previous section 
alongside lengauer tarjan implementation built dominance frontier calculation described cytron :10.1.1.100.6361
timing results algorithm include cost computing reverse postorder numbers case include cost building dominator tree natural byproduct algorithm felt unfair test include time build tree lengauer tarjan cytron implementation 
problems encountered size test codes 
small provide reasonable timing measurements 
experiments run mhz sun ultra solaris operating system 
machine clock function granularity second 
standard test suite contains fortran routines taken spec benchmarks forsythe malcolm moler book numerical methods 
largest cfg suite field basic blocks 
file timer measures second cpu time compute manual page clock says time returned microseconds practice amount cpu time reported second 
number includes empty basic blocks put split critical edges transformation done enable simplify optimizations 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy dominators iterative algorithm 
vast majority codes test suite registered zero time compute dominators 
result significant right 
real programs algorithms ran fast speed critical component compilation time 
suggests compiler writer choose algorithm easiest understand implement 
performed sets experiments better understand tradeoff complexity runtime 
experiment modified dominator calculation run multiple times cfg carefully making sure iteration amount single isolated run 
second experiment created artificial graphs size register reliably timer 
test suite experiment modified dominator algorithms iterate graph multiple times recorded total time 
ensure smaller graphs fewer nodes register timer build dominator information times example 
allow comparison graphs run times 
ran algorithms unloaded mhz sun ultra megabytes ram 
adjust interference ran graph algorithms times recorded lowest run time 
graph measured time compute choosing lowest time done average time sense comparing deterministic algorithms 
measurements real machines necessary show theory working copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm iterative algorithm lengauer tarjan cytron number dominance postdominance dominance postdominance nodes dom df dom df dom df dom df average times graph size measured second table runtimes runs fortran test suite aggregated graph size dominators time compute dominance frontiers 
measured time compute postdominance frontiers 
postdominance computation behavior reversed cfg different shape 
gives additional insight behavior algorithms 
cfgs generated real world codes common encounter irreducible graphs calculating postdominance information 
broadly speaking irreducible loops caused multiple entry loops 
modern languages allow jump middle loop languages allow jump middle loop real world codes tend frequency 
walk backwards cfg jumps loop jumps irreducibility results 
practice variance due external factors context switching 
factors increase running time 
accurate measure deterministic algorithm running time includes lowest amount irrelevant 
dominators reversed cfg 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy timing results shown table dominance calculation iterative algorithm runs times faster lengauer tarjan average 
improvement slowly decreases number blocks increases 
expect lengauer tarjan algorithm greater startup cost gets amortized larger graphs 
course lengauer tarjan results catch quickly relative asymptotic complexity 
case argues strongly real world codes low connectivity irreducible loops shapes allow comparatively fast intersections 
computing dominance frontiers times diverge number blocks increases 
appears advantage algorithm cytron algorithm increases cfg gets larger ultimately resulting approximately speedup largest graphs 
believe general larger graphs complicated control flow 
amount done cytron algorithm grows function size dominance frontier sets formulation grows size cfg 
larger graphs believe sizeable improvement running time tells part story 
advantage asymptotic complexity lengauer tarjan give better running times iterative algorithm need ask question asymptotic advantage takes 
answer built huge graphs show provide insight value iterative algorithm 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm building random graphs obtain appropriate cfgs design mechanism generates large random cfgs 
primarily interested understanding behavior algorithms programs opposed arbitrary graphs measured characteristics cfgs ofthe programs test suite statistics generate random graphs similar properties 
test suite contains total blocks edges 
eleven percent edges back edges 
percent blocks outgoing edge percent blocks incoming edge 
blocks incoming outgoing edges percent percent total respectively 
remaining incoming outgoing edges grouped sets block 
measurements built program performs preorder walk imaginary graph 
walk progresses instantiates nodes reaches 
starts creating single initial block 
determines number edges coming block statistics test suite instantiates edges 
walks edges recursive depth search 
time traverses edge creates new block serve sink determines number kind successor edges new block instantiates 
continues fashion generated note analysis concerns structure cfg blocks random graphs contain branching operations 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy desired number nodes 
point number edges sink 
connects edges exist 
creating back edges problematic 
classic method identify back edge implicit assumption entire graph defined 
random graph builder access entire graph tell certain edge back edge completed graph 
add back edges builds rest graph 
graph builder builds queue edges intends back edges 
traverse edges depth search 
waits nodes instantiated processes prospective back edges queue connecting appropriate nodes 
resulting graphs matched characteristics test suite codes exactly variations back edges loop connectedness 
graph builder add edges graph fully defined know total number successors node 
uncertainty shows ways 
generated graphs fewer back edges cfgs percent versus eleven percent 
second loop connectedness generated graphs higher cfgs slightly versus test suite 
differences important implication measuring running time algorithm versus lengauer tarjan 
complexity algorithm depends loop connectedness graph uses kam ullman formulation iterative algorithm 
lengauer tarjan algorithm requires passes independent copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm iterative algorithm lengauer tarjan cytron dominance postdominance dominance postdominance dom df dom df dom df dom df average secs standard deviation table ii 
runtime statistics graph test suite graph structure 
higher value favor lengauer tarjan algorithm expense 
measurements large random graphs graphs nodes barely registered system timer needed graphs order magnitude larger 
fill need graph builder create test suite graphs nodes 
table ii shows results timing experiments test suite large random graphs 
reports numbers dominance postdominance iterative scheme lengauer tarjan algorithm 
row shows average solution time graphs 
second row shows standard deviation time graphs 
category numbers appear 
column labelled dom reports time calculation column labelled df reports time dominance frontier calculation 
add times compute dominators dominance frontiers algorithms run faster lengauer tarjan 
main advantage faster dominance frontier calculation faster forward problem faster backward problem 
conjectured asymptotic differences dominance copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy algorithms shift advantage iterative algorithm lengauer tarjan graph suggests point near nodes computing crossover complicated variability shape graph 
example cfg nodes straight line node parent child iterative scheme takes second lengauer tarjan algorithm takes standard seconds 
drawn clear iterative algorithm competitive lengauer tarjan unrealistically large graphs 
summary technique computing dominators control flow graph 
algorithm builds developed understood theory iterative data flow analysis 
relying fundamental insights nature dominance information able engineer sets saves space time 
resulting algorithm times faster classic lengauer tarjan algorithm real programs 
control flow graphs nodes factor times larger spec benchmarks method lengauer tarjan take essentially time 
simple iterative technique faster lengauer tarjan algorithm 
simplicity easy implement easy understand easy teach 
eliminates costs occur implementation separate sets particular allocation initialization data movement 
simple fast technique method choice implementing dominators development time short compiler writer copyright john wiley sons softw 
pract 
exper 
prepared speauth cls fast dominance algorithm high degree confidence implementation correctness 
algorithm dominance frontier calculation simpler faster original algorithm cytron people provided insight support suggestions improved 
fran allen helped track origins iterative approach 
preston briggs insightful suggestions exposition general experimental results particular 
steve reeves linda torczon participated discussions 
members massively scalar compiler project provided support system conduct experiments 
people go 

aho hopcroft ullman 
finding lowest common ancestors trees 
stoc acm symposium theory computing stoc 
check 
aho ullman 
theory parsing translation compiling 
prentice hall 

aho ullman 
principles compiler design 
addison wesley 

allen 
control flow analysis 
sigplan notices july 
proceedings symposium compiler optimization 

allen cocke 
graph theoretic constructs program flow analysis 
technical report rc ibm thomas watson research center july 

allen kennedy 
advanced compilation vector parallel computers 
morgan kaufmann 

harel thorup 
dominators linear time 
siam comput june 

briggs cooper simpson 
value numbering 
software practice experience june 
available technical report center research parallel computation rice university number 

briggs torczon 
efficient representation sparse sets 
acm letters programming languages systems march december 

buchsbaum kaplan rogers westbrook 
linear time pointer machine algorithms common ancestors mst verification dominators 
proceedings thirtieth annual acm symposium theory computing pages 

buchsbaum kaplan rogers westbrook 
linear time pointer machine algorithms common ancestors mst verification dominators 
acm transactions programming languages systems nov 

carroll ryder 
incremental algorithm software analysis 
proceedings sigplan sigsoft software engineering symposium practical software development environments sigplan notices pages jan 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls cooper harvey kennedy 
cytron ferrante rosen wegman zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems oct 

ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 

forsythe malcolm moler 
computer methods mathematical computations 
prentice hall englewood cliffs new jersey 

gabow tarjan 
linear time algorithm special case disjoint set union 
journal computer system sciences 

harel 
linear time algorithm finding dominators flow graphs related problems 
proceedings seventeenth annual acm symposium theory computing pages may 

hecht 
flow analysis computer programs 
programming languages series 
elsevier north holland vanderbilt avenue new york ny 

hecht ullman 
simple algorithm global data flow analysis problems 
siam comput dec 

kam ullman 
global data flow analysis iterative algorithms 
journal acm jan 

knuth 
empirical study fortran programs 
software practice experience 

lengauer tarjan 
fast algorithm finding dominators flowgraph 
acm transactions programming languages systems july 

lowry 
object code optimization 
communications pages jan 

paul purdom moore 
immediate directed graph 
communications acm aug 

pingali bilardi 
optimal control dependence computation roman problem 
acm transactions programming languages systems may 

prosser 
applications boolean matrices analysis flow diagrams 
proceedings eastern joint computer conference pages 
spartan books ny usa dec 


dominator path scheduling global scheduling method 
newsletter dec 
proceedings th annual international symposium microarchitecture 

tarjan 
finding dominators directed graphs 
siam comput mar 

tarjan 
testing flow graph reducibility 
comput 
syst 
sci 
copyright john wiley sons softw 
pract 
exper 
prepared speauth cls 
