tutorial proving properties concurrent systems spin gerard holzmann bell laboratories murray hill new jersey usa gerard research att com extended spin fly model checking system finite state systems optimized verification linear time temporal logic ltl properties 
spin input language promela specify concurrent systems dynamically changing numbers interacting processes process interactions synchronous rendez vous asynchronous buffered 
tutorial examine algorithms determine spin functionality performance 
brief summary automata theoretic foundation spin consider methodology ltl model checking recognition chi acceptance conditions cycle detection handling large verification problems 
automata theoretic framework semantics promela defined terms standard labeled transition system 
language founded notion executability 
rule determines type statement executable blocked system state 
second rule determines statement modifies system state executed 
small example plain condition self contained type primitive statement promela executable condition holds effect system state executed changing control state process executing statement 
avoid obvious promela expressions required pure side effect free 
behavior concurrent system dynamically changing ensemble disjoint interacting processes defined terms interleaving semantics 
processes interact manipulating shared data objects variables data structures message queues 
message passing shared queues synchronous executed atomically linked combination matching send receive operation rendezvous port asynchronous finite typed message buffers 
spin compute interleaving product set concurrent processes different ways 
default algorithm straight exhaustive reachability analysis 
problem sizes preclude exhaustive verification size high coverage approximation exhaustive run performed minimal amounts memory 
user option applying partial order reduction algorithm search exhaustive bitstate provably preserves safety liveness properties hp 
weak fairness constraint imposed search direct application choueka flag 
source available anonymous ftp machine netlib att com directory netlib spin 
construction method 
ltl properties chi automata currently distributed version spin user responsibility convert ltl formula chi automaton promela claim purposes verification 
improvements possible allow user specify ltl formula directly leave translation chi automaton software bcg 
implemented algorithm plan integrate spin system upcoming release 
chi acceptance conditions require verifier reliably detect presence absence acceptance cycles reachability graph 
spin performs verifications fly minimum amount memory cycle detection method conform constraints 
memory efficient cycle detection spin uses nested depth search algorithm detect acceptance cycles fly 
algorithm implemented just bits overhead reachable state encoding method detailed gh 
tarjan classic algorithm require bits overhead state storing bit numbers dfs number number 
nested depth search algorithm cycle detection give ability detect possible variations cycle preserve ability detect reproduce cycle type searched provided cycle exists 
non progress acceptance cycles spin constitute counter example correctness requirement establishing absence presence cycles suffices purposes verification 
takes single counter example disprove correctness property 
bitstate hashing spin incorporates competitive implementation frugal bitstate hashing technique 
give analytical argument expected performance compare estimates empirical tests 
algorithm just bits memory needed store reachable state 
bit addresses computed statistically independent hash functions 
industrial applications bitstate hashing technique possible apply formal verification problem sizes ordinarily remained scope automated verification tools 
summarize experiences formal verification technique year case study performed cooperation international switching 
study named project routine implementation isdn protocol pursued team people methodology formal verification 
total mechanical verification runs performed ltl properties formalized proven satisfied final design total design errors detected 
design errors traced back original design requirements 
design verifiability number academic industrial applications spin steadily growing 
start estimated installations tool 
encouraging thought number systems designed benefit formal verification tools type completely dominates industry 
long take wider availability verification tools measurable impact 
charles proposed analytical engine improve accuracy printing astronomical logarithmic tables noted great importance having accurate tables admitted understand uses multitude errors really occurring comparatively little known 

really extraordinary demonstrated tables capable computed machinery 
astronomer royal enthusiastic supporter instrument render invaluable service science goes say long run things tend change 
formal methods industrial usage report proc 
th forte conference sydney australia pp 

choueka theories automata tapes simplified approach journal computer system science vol 
pp 

bcg bhat cleaveland grumberg efficient fly model checking ctl proc 
th symp 
logic computer science san diego ca 
courcoubetis vardi wolper yannakakis memory efficient algorithms verification temporal properties formal methods systems design vol pp 

gerth peled vardi wolper simple fly automatic verification linear temporal logic proc 
ifip wg symp 
protocol specification testing verification warsaw poland june 
holzmann improved protocol reachability analysis technique software practice experience 
gh godefroid holzmann verification temporal properties proc 
ifip wg symp 
protocol specification testing verification liege belgium june 
holzmann design validation computer protocols 
prentice hall englewood cliffs nj 
holzmann theory practice formal method proc 
th ifip world computer congress hamburg germany pp 

hp holzmann peled improvement formal verification proc 
th forte conference bern switzerland 
holzmann analysis bitstate hashing proc 
ifip wg symp 
protocol specification testing verification warsaw poland june 
tarjan depth search linear graph algorithms siam computing pp 

