software systems larger complex 
time deployed applications performance guarantees required 
traditional approaches providing performance guarantees effective large class software systems 
control theory identified promising theoretical foundation performance control complex software applications real time scheduling web servers multimedia control storage managers power control cpus routing computer networks 
article describes advances application control theory software systems 
demonstrate formulation software performance assurance problems feedback control 
describe modeling software system provide example performance control contemporary abdelzaher john stankovic lu zhang ying lu web servers 
embody control theoretical methodology software quality service qos provisioning middleware called 
middleware provides generic interface computing control subsystems software application automates parts feedback control design implementation software systems 
middleware solutions needed resolve system challenges provide analytic foundations enable efficient software performance control generation performance assured computing systems 
software performance control engineered physical systems carefully address quality assurance software system design evolved abdelzaher cs virginia edu stankovic zhang lu department computer science university virginia charlottesville va lu washington university st louis mo ieee ieee control systems magazine june ad hoc fashion rigorous guarantees performance quality 
software engineering research concerned tools paradigms facilitate development functionally correct software 
functional correctness implicitly assumed adequate software quality metric 
notable exceptions assumption functional correctness adequate 
example embedded control systems important factor affecting quality software timeliness software response 
delayed functionally correct reaction physical events environment devastating physical equipment malfunction 
observation gives rise research attempts design software predictable nonfunctional properties timeliness security availability performance 
properties referred software qos attributes 
traditional performance analysis embedded control applications relies worst case estimates load resource availability 
system performance guaranteed worst case conditions violate performance specifications favorable circumstances 
notion qos guarantees needed today larger class applications closed embedded systems operate open unpredictable environments 
worst case scenario environments known priori pessimistic rendering traditional worst case analysis impractical 
need qos guarantees open systems fueled part emergence modern global communication networks internet increasing proliferation globally accessible digital services online banking trading distance learning 
services represent points massive aggregation may suffer unpredictable loads potential bottlenecks security breaches denial service attacks 
failure meet acceptable performance specifications may result loss customers financial damage liability violations 
existing approaches designing performance guaranteed computing systems rely priori workload resource knowledge longer applicable 
predominant practice providing qos assurances today 
practice results costly systems uncertain assurances regarding performance 
putting performance guarantees solid analytic foundation systems important challenge 
article show classical feedback control offers solution problem achieving performance guarantees new category applications discuss challenges involved realizing approach 
main challenges implementing feedback qos control solution computing systems analyzing software architecture model feedback control system ii mapping particular qos control problem system feedback loops iii choosing proper actuator affect server resource allocation monitor measure current performance reliably iv designing controller server 
solving challenges permits mathematical basis control theory support performance guarantees software systems 
demonstrate software system approximated linearized model describe needed software actuators sensors 
importantly create taxonomy significant qos assurance problems software literature describe translated feedback control formulation 
experimental results web application show control theoretic approach feasible software systems 
approach applied services provide brief explanations chosen focus controlling performance web applications due increasing importance web spurred phenomenal growth internet 
web largest visible client server application existence today 
excellent vehicle investigating fundamental problems distributed client server computing overload protection providing performance guarantees 
rest article describe internal architecture typical web server dynamic model elaborate equivalents sensors actuators computing system 
map important software performance assurance problems feedback control piece elements case study web server performance control 
describe briefly examples control theory qos guarantees 
introduce middleware service generalizes control theoretic approach implementing new paradigm service performance guarantees software systems 
article concludes brief discussion important results remaining challenges 
inside qos aware service successful architecture controlling performance computing system begins understanding dynamics affect performance mechanisms available manipulate dynamics 
concerned specifically performance attributes involve notion time lend naturally feedback control framework 
generally common performance attributes classified categories depending directly proportional inversely proportional time 
category includes performance metrics queuing delays execution latencies service response times 
second category includes metrics connection bandwidth service throughput packet rate 
call categories delay metrics rate metrics respectively 
derived metrics defined ratios metrics example relative delay traffic classes hit ratio fraction hit rate total request rate cache 
june ieee control systems magazine time related performance attributes generally controlled adjusting resource allocation 
queuing theory predict performance particular resource allocation determine resources allocated yield particular performance level 
general service modeled queuing system allocating resources queue server reduce mean service time decrease mean queuing delays increase average service rate 
unfortunately queuing theory generally requires assumptions input traffic arrival pattern accurate leading potentially poor predictions regarding performance 
example significant body queuing literature applies demonstrate software system model describe needed software actuators sensors 
poisson arrivals common arrival patterns web requests known follow heavy tailed distribution :10.1.1.146.2304
assumptions accurate queuing theory nature offers predictions average behavior 
qos aware system stronger guarantees required 
example frame rate streaming video frames average 
guarantees usually required maximum deviation recovery time transient perturbations nominal rate 
service architecture design feedback loops software performance control need understand basic components software system interact 
focus important category software systems feedback control particularly important software servers 
section typical design multithreaded server describe design yields system model suitable feedback control 
consider distributed client server system succession requests arrives server clients communication network 
server acts point aggregation client requests 
performance observed request server depends path request takes inside server served 
typical multithreaded server independently schedulable entities called worker threads execute arriving sequence client requests 
thread implements loop processes incoming requests generates responses 
client requests read input queue server transfer control protocol tcp socket queue kernel entity hands request different worker thread 
worker threads requests serve runnable queued cpu 
order threads get cpu execute determined cpu scheduling policy 
policy maintains priority queue called ready queue 
thread top queue executes particular time quantum blocked 
request processing worker thread typically entails access auxiliary server resources notable disk input output 
example web server disk usually needed read requested web page disk 
access auxiliary resources blocks calling thread time queued resource available 
resource usually queue determines order accesses served 
resource available thread top queue time corresponding thread runnable cpu ready queue 
request processing done worker thread sends response back client 
sending response entails enqueuing data outgoing packet queue transmission network 
illustrates aforementioned main components software server including input client request queue cpu ready queue resource queue outgoing network queue 
numbered arrows depict progress requests queue 
worker threads shown 
black circle thread represents current position thread execution 
especially interested case server operating nontrivial load 
response time dominated queuing delays service times 
server yield acceptable performance order request service times smaller order tolerable server response times 
units time serve di maximum tolerable server response time typically ci dj 
call condition liquid task model 
model representative high performance servers handle thousands requests second 
example case web servers worst case tolerable response time order seconds tens seconds typical request service time order hundreds microseconds single milliseconds 
liquid task model represents limiting case tolerable response times generally finite service times practically infinitesimal 
formally liquid task model ic ic di 
model idealization results model hold systems exhibiting large number small requests 
ieee control systems magazine june high performance server approximated liquid task model progress requests server queues resembles fluid flow 
service rate dn dt stage defines amount flow stage nk total number requests served stage time different queues modeled capacities accumulate corresponding flows 
number requests queued stage denoted vk quantity akin volume vk fin fk dt fk service rate stage fk dt fin request arrival rate stage 
queues offer points flows fk manipulated 
depicts server control perspective capacities represented water tanks 
observe valves represent points control actuators manipulate service rates fk 
assume analogy flow valve depends valve opening liquid level 
arrangement akin pump 
worker note fluid flow analogy threads assumptions individual requests prioritized 
simply allows describe dynamics request flows queue fill levels 
contrast queuing theory real time scheduling theory understood foundations relating aggregate metrics queue length total workload total utilization delays seen individual requests particular prioritization policy 
combining control theory real time scheduling queuing analysis develop feedback loops maintain appropriate queue fill levels guaranteed produce desired client delays different request prioritization schemes 
today servers implement fifo queuing resources socket queues semaphore queues composed pools priority worker threads processes 
article threads assume queues fifo 
multiple client classes may exist queue different priority 
service modeling internet servers described liquid task model dynamics akin flow due intrinsic queuing structures 
observation motivates difference equations model internet servers 
yk denote average performance delay throughput reported kth sampling instant 
variable reflects measurement carried sampling interval 
uk denote control input sampling instant 
server modeled nth order arma difference equation relating uk yk 
system order represents length history determines current server performance 
suggests difference equation derived state space representation server model ax bu yk cx state vector describe system model 
representing software system dynamics difference equation models gained popularity 
example model web proxy cache derived model tcp dynamics output clients output clients june ieee control systems magazine server os scheduler cpu ready queue server cpu queue outgoing network client request queue queue client request queue outgoing network queue network queue resource access request dequeuing network queue request dequeuing resource access 
server architecture computing model representation 
presence network active queue management red gateways :10.1.1.128.5092
derivation computing system dynamics difficult absence complete knowledge software system code due hidden interactions different components systems 
example semaphore synchronization create waiting queue affects system dynamics 
presence semaphore discovered access system code 
furthermore deriving system dynamics principles may impractical situations administrative reasons 
example model parameters may need recomputed time server hardware software configurations changed due system upgrade changes may affect platform speed consequently rates capacities system 
system administrators usually lack expertise perform control theoretic modeling 
practical approach may perform automatic parameter estimation squares estimator 
system identification requires adding software modules instrument running software system iteratively estimate parameters difference equation models system input output 
successful application approach described web proxy cache determine relation disk allocation cache hit ratio 
key prerequisite system modeling define actuators manipulated variables valves 
actuators represent main interface control subsystem computing subsystem feedback control loop 
section describe types actuators computing systems principles operation 
resource allocation qos guarantees time related performance metrics software systems tied state queues depicted 
delay metrics response time latency generally related queue tank fill levels 
higher fill levels imply longer delays vice versa 
rate metrics service throughput generally related dequeue rates flows valves 
higher rates imply higher throughput 
sets metrics affected controlling different flows system 
flow service rate stage software service depends amount computing resources allocated stage operation performed 
allocating resources generally increase flow way opening valve 
control performance need actuators manage resource allocation alter functionality server way manipulates rate done 
feasibility implementing actuators computing system basic reason control theory applicable 
actuators computing systems fall basic types described 
input flow actuators input flow actuator manipulates input workload server software systems admission control primary input flow actuator affects queue fill levels server 
simplest case admission control limits number clients access server concurrently denying service reducing load seen server 
actuator accepts input control variable determines desired average flow 
analogous controlling opening input valve discarding requests overflow 
intelligent admission control algorithm decides request request basis service granted request admitted denied request rejected depending client identity queue fill level server utilization 
input flow actuators clients inherently important denying service important clients acceptable favor higher priority clients 
examples control theoretic formulation admission control schemes real time systems described :10.1.1.14.8682
quality adaptation actuators flexible way controlling flow alter processing requirements request 
example reducing processing requirements increases service rate increases fk dt desired server approaches overload 
reduce processing requirements service offers intermediate degraded service levels 
web server degraded level service correspond providing abbreviated version content lower quality version images sound 
approach followed manually editors various sports news web sites cable news network cnn www cnn com important breaking news 
example obvious abbreviation cnn front page hours september events 
important questions content abbreviated ii fraction clients need receive abbreviated version overload avoided 
automatic web content adaptation scheme answers questions feedback control theory described 
scheme dynamically selects suitable content version client request basis depending load conditions 
content adaptation discussed length multimedia applications 
survey 
generally quality adaptation actuator offers flexible tradeoff delay quality 
servers don unlimited queue space compromise unavoidable prevent server queue overflow extreme load conditions 
advantage quality adaptation actuators admission control schemes service provided clients albeit potentially degraded level 
effective load reduction important actuator control ieee control systems magazine june bottleneck resource 
example bottleneck resource processor cpu intensive operations reduced 
bottleneck network number sent bytes reduced 
identity bottleneck measured dynamically measuring utilization different resources 
approximate flow quality adaptation actuator provide continuous range service rates fk server exports finite small number different service levels 
consider general server discrete service levels differ consumption bottleneck resource 
levels numbered lowest quality highest quality 
level may added denote special case request rejection 
actuator accepts input control variable range essential challenge actuator design unique mapping manipulated variables fraction clients served qos level produce smooth flow control 
resolve aforementioned challenge authors propose decompose fractional value input integral part fraction nearest integers determine appropriate service levels clients served load conditions 
fractional part determines fraction clients served levels 
effect interpreted mean fraction clients served level fraction level 
scheme works input average request arrival rate change quickly 
server utilization increases possibly nonlinearly increased vice versa 
upper extreme requests highest quality service 
lower extreme requests rejected 
actuator changes amount load server discrete service levels continuous fashion depending input resource reallocation actuators different way controlling flow quality adaptation alter amount resources available processing request queue 
important category resource management actuators typically arises servers multiple classes clients 
servers desired maintain constant ratio performance different client classes 
computing resources usually partitioned classes sum partitions constant equal total resource capacity service 
call condition constant sum invariant 
individual actuators alter partitioning total resource allocation remain constant 
call actuators resource reallocation actuators 
multiclass server separate control loop associated client class 
actuator loop alters resources allocated 
important design objective approach ensure individual loops may operate isolation violating constant sum invariant 
demonstrate achieved example 
consider multiclass service offers classes requests better performance allocating resource space different request classes appropriately 
measured performance request classi hi think hi output ith control loop 
common model discrimination multiclass environment relative differentiated services model 
model differentiation policy specifies measured performance different classes related expression hn 
cn wherec importance weight classi ina control theoretic formulation define relative performance ri class ri hi hn determines class performing relative classes 
desired relative performance class ri ci desired represents set point class 
formulation akin ratio control 
difference ri desired performance error ei class note aggregate performance error system zero 
aforementioned problem formulation differentiated caching services architecture described 
authors developed web proxy cache give web content preferential treatment 
example performance metric controlled cache hit ratio resource allocated disk space 
content classes system 
class content assigned different amount cache storage si total size cache 
controller invoked fixed intervals class corrects resource allocation class measured performance error 
compute correction si resource allocation controller uses linear function ei 
computed correction si positive space allocated classi increased si decreased amount 
function linear ei iei 
showed iei follows ei 
sum corrections classes zero constant sum invariant maintained 
computing systems multiple client classes similar class feedback loops 
difference systems lies generally resource allocated actuators 
example manipulating storage allocation actuators built manipulate number worker processes june ieee control systems magazine cpu capacity allocated class fraction network link bandwidth allocated flow 
section discussed natural existence actuators computing systems possible implement valves appear 
important cornerstone applying feedback control computing systems existence natural translation common qos assurance problems feedback control 
topic covered section 
qos mapping cornerstone control theoretic paradigm qos guarantees software systems lies ability convert common resource management software performance assurance problems feedback control problems 
think qos control problem having corresponding control loop instantiation describes particular qos control problem solved feedback control 
call instantiation control loop template 
describe control loop templates main des 
class allocation leftover capacity leftover capacity specified maximum deviation actual performance time specified decay envelope approximate system model unused capacity controller correction admitted class clients actuator resource allocator performance measured sensor consumption class clients unused capacity controller correction actuator resource allocator performance measured sensor consumption second class clients admitted second class clients performance set point software system software system qos control problems absolute convergence guarantees performance isolation statistical multiplexing prioritization relative differentiated service guarantees optimization guarantees 
fundamental building block templates implements basic absolute convergence guarantee 
interconnecting blocks lead formulating complex guarantees relative guarantees prioritization optimization feedback control problems 
absolute convergence guarantee impossible achieve absolute guarantees system load resources known priori define absolute guarantee problem convergence specified performance 
statement problem ensure performance metric converges specified exponentially decaying envelope fixed value ii maximum deviation ris bounded times shown 
approximate system model performance error correction class resource consumption class resource consumption controller measured performance virtual estate allocation resource allocation actuator resource allocator performance sensor software system actual performance ieee control systems magazine june approximate system model unused capacity controller admitted clients actuator resource allocator mb performance sensor measured consumption class clients total leftover capacity admitted best effort clients best effort allocation controller actuator resource allocator performance sensor measured consumption second class clients software system software system resource consumption resource consumption 
control loop templates absolute guarantee specification basic loop prioritization excess capacity management 
absolute convergence guarantee translated control loop shown 
loop samples measured performance compares desired value uses difference induce changes resource allocation actuator ar 
absolute convergence guarantee loop elementary building block qos assurances follow 
context time related performance metrics interesting classify convergence guarantee loops depending performance variable controlled 
case physical plants controlled output interest affects model system control loop linear 
rate queue length control approximation rate metrics queue length easiest control result linear feedback loops 
flow rate controlled directly actuators 
queue length linearly controlled controlling flow 
simplest example loop category server utilization control loop 
loop instance maintain high server utilization avoiding overload 
section uses utilization control basic building block types guarantees 
delay control delay guarantees difficult provide 
delay inversely proportional flow 
request arrives queue dequeue rate queuing delay request generally rate changes time delay request dq inverse relation manipulated variable rate delay control loop nonlinear 
note level control queue fill level control common problem physical plants generally care long takes particular liquid molecule leave tank 
nonlinear delay control problem commonly encountered physical process control 
believe efficient solution type nonlinearity great impact software qos control research 
resource reservation guarantee applications necessary guarantee certain resources reserved 
absolute guarantee solution described particularly useful resource reservation purpose isolating applications share common resources 
example web hosting application web server may offer virtual estate percentage server capacity sale hosted web sites 
particular capacity allocation purchased site enforced control loop 
amount server capacity owned site represent utilization control loop set point 
actual amount resources measured dynamically 
difference controls actuator case admission controller requests particular site 
control loop needed web site 
prioritization guarantee see prioritization implemented feedback control consider sampled system large number new service requests introduced sampling time 
requests classified priority enqueued separate queue depending class 
scheduling policy queue time priority order sampling interval 
sampling interval queues fully depleted queue partially depleted scheduler working sampling time arrived rest remain untouched 
emulate effect control loops imagine queue separate pipe control valve 
server capacity valves queues fully depleted saturated open position 
valve queue controlled dequeue exactly right fraction requests sampling interval fully utilize leftover server capacity 
remaining lower priority valves closed 
illustrate feedback control scheme achieves 
note scheme unconventional loop operating time outside saturation limits 
rest saturated fully open fully closed position explained 
integrator prevent unreasonable integral action buildup controller saturation periods 
priority classes defined server priority highest priority lowest 
collectively clients server allocated target capacity available clients priority order 
resource allocation loop created gives entire server capacity highest priority class 
unused capacity class measured treated set point resource allocation lower priority classes 
capacity clients degraded rejected accordingly actuator utilization control loop 
architecture described class server 
control loop needed class 
illustration consider operation system priority classes 
high priority class getting resource share controller error high priority loop negative 
case class controlled reduce consumption allotted share ii lower priority class zero resource allocation 
condition ensured loop higher priority class 
second ensured loop set point negative case causing actuator admission controller saturate fully closed position 
conversely higher priority class consume allocated resources error leftover resources positive set point lower pri june ieee control systems magazine loop 
actuator high priority class saturated fully open position admitting requests class 
loop lower priority class sure requests admitted permitted leftover resources high priority class 
loops emulate priority semantics 
statistical multiplexing guarantee shortcoming resource reservation lead unnecessary resource underutilization resource owner resources allocated 
objectionable owner starving resources 
statistical multiplexing scheme needed spare capacity exists machine 
individual resource allocations enforced entire machine overloaded 
requirements simultaneously satisfied control loop set 
describe statistical multiplexing achieved assume controller output utilization control loop server mi surplus requests treated lower priority server called best effort server 
controller output utilization control loop best effort server mb sharing spare capacity achieved variation min max selector scheme objective minimize degradation premium traffic 
scheme service level request class determined actuator premium traffic mi mb actuator best effort traffic 
request handled higher mi mb class server overloaded machine mb mi 
consequently incoming requests served quality determined mb higher warranted mi utilizing excess machine capacity 
hand machine overloaded mb mi 
consequently quality content delivered determined mi individual server prevented exceeding capacity allocation 
mechanism allows smooth informed switching mode operation individual server allowed exceed capacity allocation mode operation required stay original capacity 
relative guarantee applications desirable ratio performance different classes fixed example may delays traffic classes network fixed ratio 
fixed ratio candidate performance set point pose relative guarantees variation ratio control problem 
generally request classes system hi measured performance class relative guarantee specifies hn 
cn wherec weight classi 
way achieve guar formulate class relative performance set points form ri ci desired compare ri hi hn note loop set point defined nonlinear sensor divides outputs different loops provide feedback relative performance individual classes flow inversely proportional delay 
possible formulate relative guarantee problem way avoids nonlinearity 
case output hi multiplied constant wi cn ci 
note performance metric satisfied hn 
cn ratio hi ci equal classes 
products hw equal class set point average products hw 
performance metric satisfied hw equal set point 
metric satisfied error ei class ei hw control loop designed class objective driving error class zero 
control loop case linear class constant 
control loops different classes coupled common set point weighted sum outputs loops 
way defining control loops define set points pairwise relative performance metrics ci ci loops needed 
loop reduces corresponding error ei ci ci hi hi zero 
case loop decides ratio resource allocation adjacent classes 
resources globally reallocated pairwise ratios satisfied ii sum allocated resources equal total resource capacity 
utility optimization guarantee type performance guarantee addressable control theoretic framework utility optimization 
microeconomic model consider computing service produces amount benefit unit total utility produced service kw 
resource consumption service nonlinear function gw represents measure cost 
desired achieve maximum net profit maximize kw 
assuming concave cost function gw profit maximized marginal utility equal marginal cost dg dw equation solved control set point computing example may desired server utilization desired workload size metric depending problem formulation 
resulting feedback loop illustrated set point derived described 
summary identified main types performance guarantees cover performance requirements ieee control systems magazine june software systems 
type guarantee specified feedback control loop template basis providing type guarantee 
believe templates nonlinearities exhibit provide interesting opportunity exploring new control techniques target characteristic couplings nonlinearities loops implementing guarantees software performance metrics 
feedback solutions section bring concepts introduced describing successful applications control theoretic approach software domain 
give detailed example involving web servers briefly introduce applications internet servers cpu scheduling networking microprocessor architectures 
success feedback control theory different domains demonstrates generality strength control theoretic framework applied computing systems 
detailed example relative delay guarantees web servers internet commercialized generates incentive businesses provide guaranteed shorter service delay premium customers pay higher fees important business customers 
web servers handle disturbances caused highly unpredictable workload 
example population customer class varies dramatically runtime offered performance remain constant 
section example applying feedback control theory provide relative delay guarantees web servers 
request internet belongs class desired relative delay wi assigned classi 
service classi defined average delay established connections class measured kth sampling period kt constant length sampling period 
relative delay guarantee requires cj ci wj wi classes example class desired relative class desired relative relative delay guarantee requires delay class half class 
sensors actuators step feedback control design identify controlled manipulated variables web server systems 
focus apache server requests 
apache currently popular web server software 
server runs pool server processes listening common tcp port 
server process handle tcp connection time instant 
protocol works follows client web browser establishes tcp connection server process client submits request server tcp connection server processes request generates response server sends response back client tcp connection amortize overhead tcp connection establishment tcp connection left open response transmitted anticipation tcp connection reused request client new request arrives configurable keep alive interval tcp connection kept open connection closed 
feature called persistent connections client perspective delay request includes components connection delay server establishing tcp connection server process processing delay server local computations network protocol processing open read files running cgi scripts network delays transmitting tcp connection request request response established tcp connection 
example focus controlling connection delay 
connection delay significant overload conditions server processes tied existing connections 
server highly loaded new tcp connection requests queued tcp listen queue accepted server process 
connection delay service class controlled manipulating process budget bi number server processes allocated class sampling period kt 
increasing process budget class leads shorter connection delay class 
relative guarantee scheme provide relative delay guarantees apache server 
connection delay ratio adjacent classes controlled controlled variable desired connection delay ratio vi ci ci andi desired delay ratio wi wi manipulated variable process budget ratio ui bi bi class note class denominator numerator reversed notations due inverse relation service rate delay 
runtime controller cri periodically updates process invokes resource reallocation actuator allocate server processes different classes 
goal control delay remain close system identification instance server architecture described earlier web server dynamics caused queuing tcp connection requests 
compute dynamic model connection delay ratio process budget ratio explore system identification approach 
approximate server arma difference equation june ieee control systems magazine av bu nth order model parameters aj bj need estimated 
estimate open loop dynamics apache web server pseudorandom digital white noise input 
input signal randomly changes process ratio different levels 
squares estimator invoked periodically estimate model parameters sampling instant 
conduct system identification experiments model real apache web server linux pcs connected mb ethernet 
linux pc runs apache server system identification software linux pcs run surge workload generator simulate clients 
shows estimated parameters second order model successive sampling instants min run system identification started min run starts give surge time fully start 
estimates parameters converge 
verify accuracy model reran experiment white noise input different seed compared actual delay ratio predicted es estimated parameters delay ratio delay ratio delay ratio time time time time model 
shows prediction estimated model consistent actual relative delay min run 
results demonstrate real apache server modeled second order difference equation 
experiments show estimated order model larger prediction error second order model estimated third order model improve modeling accuracy 
chose second order model tradeoff model accuracy complexity 
note general server model shown suggests high order system server usually dominated important bottlenecks 
client request queue server input port 
hundreds requests queued dequeued server process 
second queue cpu ready queue 
server processes usually dequeuing requests concurrently 
ready queue large number entries 
queues give rise second order system verified experiment 
evaluation closed loop server digital root locus method design pi controller difference equation model 
pi controller guarantees stability zero steady state error settling time min 
feedback control loop implemented modifying apache server software 
detailed system identification design implementation described 
due highly unpredictable internet client access patterns critical web server achieve robust relative delay guarantees face disturbances caused changing workloads 
run experiments linux pc testbed compare performance open loop server closed loop server changing client populations 
open loop closed loop servers tested workload 
experiment starts nominal workload generated basic class clients premium class clients 
test servers disturbance ieee control systems magazine june actual estimate actual estimate actual estimate 
system identification results apache server estimated model parameters second order model modeling error second order model modeling error order model modeling error third error model 
tion capabilities number premium clients suddenly increased open loop server fixed process budget ratio hand tuned extensive system profiling nominal workload 
process budget ratio closed loop server arbitrarily initialized hand tuning 
controller set requires connection delay basic clients times premium clients 
performance open loop server shown 
open loop server performs experiment process budget ratio fine tuned nominal workload 
number premium clients suddenly increases connection delay premium clients increases significantly 
consequently connection delay ratio drops remains basic clients receive shorter delay premium clients 
rest experiment 
result shows open loop server reject disturbances caused changing workload 
performance closed loop server shown 
experiment connection delay ratio closed loop server converges adjusting process budget ratio 
response population change feedback control loop allocates processes premium clients reducing number processes basic clients 
connection delay ratio settles stays close rest run 
result demonstrates closed loop server able reject disturbance caused instantaneous changes client populations 
recovery time close de signed settling time min 
server remains stable run connection delay ratio remains close steady state 
summary shown effectiveness feedback control theory achieving qos guarantees representative internet server 
successfully developed effective software sensors actuators instantiate relative guarantee control template 
shown dynamics complex internet server modeled system identification 
implementation evaluation real server systems demonstrate feedback control loops provide delay ratio vk uk robust qos guarantees disturbance rejection capabilities internet servers 
applications computing systems feedback control theory successfully applied broad spectrum computing systems 
application domains cover different resources need controlled network bandwidth cpu cycles storage spaces bandwidth different metrics types qos guarantees 
briefly summarize application examples providing detailed information 
internet servers addition web example earlier papers control theoretical approach web server resource management web content adaptation 
feedback control loops developed achieve absolute convergence guarantees capacity reservation prioritization request rate delivered bandwidth different service classes 
multi input multi output mimo control designed achieve absolute convergence guarantees memory cpu utilization web servers 
feedback control fuzzy control applied control input queue length lotus mail servers admission control :10.1.1.17.502
cpu scheduling feedback control theory cpu scheduling real time systems multimedia embedded june ieee control systems magazine time time vk uk vk uk 
comparing performance open loop closed loop servers connection delay ratio process budget ratio open loop server closed loop server 
control systems 
steere developed feedback cpu scheduler coordinates cpu cycles allocated consumer supplier threads guarantee fill level buffers 
feedback control real time scheduling algorithms developed provide deadline ratio guarantees real time applications unknown task execution times :10.1.1.14.8682
feedback control real time scheduling extended handle distributed systems 
scheduling algorithms designed absolute convergence guarantees 
storage management storage critical resource server systems 
relative guarantee template developed provide relative hit ratio guarantee web proxy cache resource reallocation actuator dynamically changes disk space allocation different service classes 
adaptive control applied web proxy cache improve portability robustness automatic controller tuning 
aqueduct system featured feedback control loop regulated speed background data migration enterprise storage servers bounding performance impact front applications 
aqueduct provided absolute convergence guarantees latency front applications data migration 
network routers network layer control theory applied packet flow control internet routers 
applied control theory analyze red active queue management ip routers 
control analysis provided guidance tuning red algorithm previously difficult problem 
feedback algorithm developed quantitative assured forwarding services provide absolute proportional differentiation loss service rates packet delays internet routers 
li nahrstedt developed hierarchical architecture integrates upper layer fuzzy control lower layer packet rate control achieve absolute convergence guarantees tracking precision distributed visual tracking systems 
microprocessor architecture feedback control theory applied microprocessor architectures 
absolute convergence guarantees cpu chip temperatures applying control theoretic techniques microprocessor thermal management 
middleware qos control shown earlier years increasing number individual feedback control solutions de veloped various software performance assurance problems 
natural question generalization solutions possible 
small set qos guarantee types covers wide range applications classes guarantees define control theoretic templates amenable online solutions 
computer systems applications similar services services provided terms middleware 
developed middleware called supports multiple types qos guarantees feedback control 
middleware qos control architecture control theory motivated needs performance assured internet services 
allows user express qos specifications offline maps specifications appropriate feedback control loop sets tunes loop controllers analytically guarantee convergence specifications connects loops right performance sensors actuators application desired qos achieved 
main novelty middleware lies isolating software application programmer control theoretic concerns utilizing theory achieve desired qos guarantees 
time isolates control engineer software task interfacing controller controlled software system designing software performance sensors actuators 
conceptual representation components process designing software performance assurance loops shown 
contains library macros written topology description language formulating particular type qos guarantee feedback control problem 
library extensible control engineer transform new guarantee type macro describes corresponding loop interconnection topology stores macro middleware library 
currently library includes macros absolute convergence guarantees relative differentiated service guarantees prioritization optimization guarantees 
macro block diagram includes components sensors actuators controllers 
contains library common sensors actuators software control loops 
library extensible possible application programmer add new sensor actuator types 
express common guarantee types required performance assurance software casting appropriately feedback control problems 
control loops instantiated qos specification middleware uses textbook techniques estimate system models determine appropriate feedback controller parameters guaranteed convergence control loops specified performance 
ieee control systems magazine june backbone implementation challenges overcome create including interoperability 
promote interoperability engineering community standardized open layered interface architectures greatly simplify interconnection sensors actuators controllers digital control system 
similarly crucial step developing open middleware layer software qos control provide similar generic application programming interface api communication backbone interface computing control subsystems 
backbone appropriate distributed software physical bus 
call backbone 
implements provides common interface efficient information exchange software performance sensors actuators controllers machines address spaces 
sensors actuators controllers viewed inter changeable plug modules 
note modules physical devices temperature sensor software components conceptually act sensor actuator software load sensor invoke operating system call measure cpu utilization 
modules connected need know locations need worry distributed communication 
underneath common api different information exchange mechanisms developed different situations 
layered architecture depicted 
plug sensors actuators support types software sensors actuators passive active 
passive sensor actuator just function software component returns sample data accepts command called controller 
active sensor actuator contrast process thread may running address space 
usually awakened periodically operating system scheduler perform sensing actuation 
example idle cpu time sensor may implemented active sensor process runs lowest priority computes percentage time executing 
controller needs communicate sensor kind ipc direct function call 
controllers designed completely independent identity sensors actuators 
controller perspective software system controlled acts regular physical plant 
qos contract qos mapper application middleware sensors typically amount modest instrumentation application code 
example sensor measuring request rate particular site implemented simple counter 
sensor measuring delay implemented moving average difference time stamps 
measured metric available variable maintained controlled software service queue length operating system cpu utilization 
implement sensor needs pass value middleware 
main challenge design actuator 
meet challenge middleware includes generic resource manager grm thought purpose actuator generic control valve actuator interfaces resource queue pipe resource allocation flow controlled simple unified control loop composition controller monitor grm library control configuration file june ieee control systems magazine sys id monitor actuator monitor actuator control group control group white noise generator controller model estimator system identification controller design service controller qos mapper controller design software qos control loops generic resource manager grm group management timer 
development methodology interfacing 
able manner 
shed light generic resource manager 
generic resource manager grm designed internet servers web servers dns servers mail servers proxy cache servers 
mentioned earlier applications order quantity resource consumption decide quality service 
actuator control access resources quantitatively 
actuator uses quota knobs exports represent resources allocated class 
change qos different classes changing quota dynamically runtime 
definition quota depends type resource consideration 
generally server resources categorized categories access patterns resource request grm classifier queue class empty buffer request return class quota 
update quota usage buffer request update quota usage get requests class quota 
queue manager queue policy actuator resource allocator quota manager application class classify request class 
resource allocator resource allocation resource available 

generic resource manager structure grm resource allocation procedure 
time multiplexed resources 
resources cpus accessed multiple users time 
access serialized multiplexed time 
resources grm maintains class queues 
classifier classifies requests puts different queues 
quota refers dequeue rate class fraction server capacity 
space multiplexed resources 
memory disk space examples resources 
multiple users time 
typically class quota indicating amount resource dedicated 
queue may may necessary scenario 
cases requests admitted quota point requests simply rejected 
interesting alternative class quota new request class arrives previously allocated resource amount revoked clients transferred new request 
cache management example phenomenon newly cached pages replace older pages cache 
summary generic resource manager understands notion traffic classes exports abstraction resource quota represent amount logical resources allocated particular class 
action manager lies controlling resource quota allocations 
structure generic resource manager shown 
classifier resource allocator provided application 
resource allocator resource allocation 
queue manager maintains queue class governed certain queuing policy 
quota manager maintains resource quota class 
grm application export interfaces 
called execute application specific resource allocation methods 
previously arrived request rejected called cleanup example close network connection 
called resource previously allocated clients needs revoked case cache replacement policies 
summarizes interaction grm application 
resource requested application request classified classifier 
request passed grm calling 
grm controls resource allocation ieee control systems magazine june checking request constraints queue length quota constraint 
queue class empty class quota request satisfied immediately function call resource allocator quota updated accordingly 
request satisfied immediately buffered queue 
resource available application calls notify grm try satisfy pending requests possible 
important mention quota purely logical concept 
traditional resource reservation system middleware mapping quota physical resource consumption need known 
effect grm logical queuing admission control resource allocation policy interface backend capable executing primitive service function assigning request service process 
grm generalizes expression various resource allocation policies common framework possible control logical quota allocations simple feedback controllers performance constraints met 
control loop guaranteed converge way controllers designed advantage control theoretic approach 
important physical mapping quota actual resource consumption need known correct operation separates approach resource reservation systems 
summary novel middleware supports qos guarantees control theory 
middleware exists open questions remain improvements possible 
example control templates distributed systems adaptive controllers fault conditions interesting issues answered added libraries 
article necessary foundations control theoretic framework achieve qos guarantees software systems 
growing popularity internet providing performance guarantees open software systems increasingly important 
illustrated successful application control framework practical examples guarantees provided software service 
analyzed general architecture software servers purposes feedback control 
shown high performance servers approximated practice liquid task model 
model gives rise fluid representation workload server modeled cascaded flow pipeline tanks different capacities 
identified typical actuators control flows server illustrated software protocols implement actuators 
taxonomy important qos assurance problems software literature described translated feedback control formulation 
having shown feasibility control theo formulation software assurance problems feasibility linear modeling feasibility actuation practical application scenarios believe foundation place applying wealth control theoretic results internet application domain 
remaining issues challenges warrant research example model nonlinearities peculiar computing systems adequately handled linearization techniques employed 
nonlinearities accounted controller tuning 
widespread nonlinearity software systems inverse relation rate delay complicates analysis delay control loops key step reasoning controlling temporal behavior 
focused fixed parameter controllers significant interest possible application adaptive control robust control techniques handle parameter variations load uncertainties 
interesting possibility predictive control framework queuing theoretic prediction integrated feedback correction achieve desired software performance 
examples theoretical foundations experimental evidence practical experience needed establish true potential limitations applying feedback performance control different computing systems 
remains important focus research 
acknowledgments supported part national science foundation ani ccr ccr darpa nest program muri award 
computer networks systems queuing theory performance evaluation rd ed 
new york springer verlag 
floyd wide area traffic failure poisson modeling ieee acm trans 
networking vol 
pp 
june 
crovella bestavros self similarity world wide web traffic evidence possible causes ieee acm trans :10.1.1.146.2304
networking vol 
pp 
dec 
lu abdelzaher differentiated caching services control approach proc 
int 
conf 
distributed computing systems pp 

misra towsley gong control theoretic analysis red proc 
ieee infocom anchorage ak apr pp 

floyd jacobson random early detection gateways congestion avoidance ieee acm trans :10.1.1.128.5092
networking vol 
pp 
aug 
lu abdelzaher lu tao adaptive control framework application differentiated caching services proc 
int 
conf 
quality service miami beach fl may pp 

stankovic abdelzaher tao son lu feedback control scheduling distributed systems proc 
ieee real time systems symp london dec pp 

lu stankovic tao son feedback control real time scheduling framework modeling algorithms real time syst vol :10.1.1.14.8682
may 
abdelzaher shin bhatti performance guarantees web server systems control theoretical approach ieee trans 
parallel distrib 
syst vol 
pp 
jan 
survey qos architectures proc 
th ifip int 
conf 
quality service paris france mar pp 

june ieee control systems magazine abdelzaher bhatti web server qos management adaptive content delivery proc 
int 
workshop quality service london june pp 

dovrolis ramanathan proportional differentiated services delay differentiation packet scheduling proc 
sigcomm pp 

dovrolis ramanathan proportional differentiated services part ii loss rate differentiation packet dropping proc 
int 
workshop quality service pittsburgh pa june pp 

str pid controllers theory design tuning nd ed 
instrument society america 
lu abdelzaher stankovic son feedback control approach guaranteeing relative delays web servers proc 
ieee real time technology applications symp taipei taiwan june pp 

abdelzaher quantitative assured forwarding service proc 
ieee infocom new york ny june pp 

economics th ed 
south western college publishing 
barford crovella generating representative web workloads network server performance evaluation proc 
performance acm sigmetrics madison wi pp 

abdelzaher automated profiling subsystem qos aware services proc 
ieee real time technology applications symp washington june pp 

gandhi hellerstein parekh tilbury mimo control apache web server modeling controller design proc 
american control conf anchorage ak may pp 

parekh gandhi hellerstein tilbury jayram control theory achieve service level objectives performance management ifip ieee int :10.1.1.17.502
symp 
integrated network management seattle wa may pp 

hellerstein parekh fuzzy control maximize profits service level management ibm syst 
vol 
pp 

steere goel mcnamee pu walpole feedback driven proportion allocator real rate scheduling operating systems design implementation pp 

lu stankovic tao son design evaluation feedback edf control scheduling algorithm proc 
ieee real time systems symp phoenix az dec pp 

lu alvarez wilkes aqueduct online data migration performance guarantees proc 
usenix conf 
file storage technologies monterey ca jan pp 

li nahrstedt control middleware framework quality service adaptations ieee select 
areas commun vol pp 
sept 
abdelzaher stan control theoretic techniques thermal rc modeling accurate localized dynamic thermal proc 
int 
symp 
high performance computer architecture cambridge ma feb pp 

zhang lu abdelzaher stankovic middleware architecture feedback control software performance proc 
int 
conf 
distributed computing systems vienna austria july pp 

foundation field control systems contr 
eng vol 
pp 
may 
abdelzaher received sc 
sc 
degrees electrical computer engineering ain university cairo egypt respectively 
received ph university michigan computer science specialization real time systems 
assistant professor department computer science university virginia 
current research interests include real time systems sensor networks quality service control networking multimedia applications generation web architecture fault tolerance dependable computing 
author author refereed publications 
received distinguished achievement award computer science engi neering university michigan nsf career award 
editor ieee distributed systems online guest editor computer communication journal real time systems 
served conference committees designated inventor european patent adaptive web servers 
john stankovic bp america professor chair computer science department university virginia 
fellow ieee acm 
received ieee real time systems technical committee award outstanding technical contributions leadership 
serves board directors computer research association 
joining university virginia taught university massachusetts won outstanding scholar award 
held visiting positions computer science department carnegie mellon university inria france anna pisa italy 
editor chief ieee transactions distributed parallel systems editor chief real time systems journal 
research interests distributed computing real time systems operating systems ad hoc networks pervasive computing 
received ph brown university 
lu assistant professor department computer science engineering washington university st louis 
received computer science university science technology china master computer science chinese academy sciences ph computer science university virginia 
current research interests include real time systems middleware wireless sensor networks internet servers network storage 
theme research developing adaptive distributed software systems provide performance assured services unpredictable environments 
zhang received degree university science technology china degree computer science institute software chinese academy sciences beijing china 
currently working ph computer science university virginia charlottesville 
ying lu received computer science southwest university china computer science university china 
currently working ph degree computer science university virginia 
research interests include applying control theory internet services adaptive qos architecture design content distribution networks storage systems 
ieee control systems magazine june 
