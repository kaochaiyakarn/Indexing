free lunch problem description length schumacher department computer science university tennessee knoxville knoxville tennessee usa cs utk edu vose whitley department computer science colorado state university fort collins colorado usa cs colostate edu free lunch theorem reviewed cast simple framework blackbox search 
duality result relates functions optimized algorithms optimizing obtained sharpen free lunch theorem 
observations concerning problem description length context provided results 
seen free lunch results independent set functions free lunch result holds compressible 
roughly put free lunch theorem formalizes intuitive idea blackbox search algorithms identical behavior set possible discrete functions 
average algorithm better random enumeration locating global optimum 
algorithms executed number steps algorithm finds set best far solutions functions 
criticisms free lunch theorem applies large sets functions unclear free lunch applies small sets real world problems practical interest 
variant form criticism practical problem classes compact descriptions elements set functions finite domain finite codomain average compact descriptions 
criticism previously addressed various researchers observed free lunch result holds classes functions smaller set functions 
strengthens observations obtaining sharpened version free lunch theorem explicit type duality involving functions optimized algorithms optimize 
closes observations regarding free lunch theorem problem description length 
search algorithm framework section sets forth framework analysis deterministic non repeating blackbox search algorithms 
streamline exposition search algorithms referred simply algorithms 
framework possible precisely model possible algorithms apply functions finite domain range 
definitions finite sets function define 
define trace size sequence pairs tm gamma ym gamma note trace just ordered sequence elements regarding set ordered pairs 
times subscript trace omitted refer traces arbitrary size 
set traces size set traces 
adopt notation hi hx xm gamma hy ym gamma tm concatenation operator extend size trace way tm htm tm tm gamma define non repeating trace trace unique components complete trace defined trace covers domain exists trace sequence ordered pairs non repeating trace corresponds function complete corresponding function consider search operator trace argument returns point search space examined 
deterministic blackbox search algorithm corresponds search operator takes arguments trace tm function returns trace tm tm tm ffi tm example steps deterministic blackbox search algorithm proceed follows ffi ffi algorithms operate discrete steps step generates new pair concatenated trace 
note search operator generate components trace function evaluate utility points reflects separation exploration choosing point search space fitness evaluation evaluating utility new point 
multiple applications algorithms abbreviated natural way tm particular non repeating blackbox search algorithm referred simply algorithm defined blackbox search algorithm range contains traces 
largest trace algorithm generate clearly complete trace size jx steps algorithm function generate trace tm initial trace algorithms start empty trace may limitation 
algorithms arbitrary initial trace size special cases algorithms start empty trace illustrates consider algorithm initial trace tm corresponds algorithm follow convention free variables universally quantified 
initial trace generate tm steps behave exactly 
designating initial trace simulated slightly modified algorithm starts words algorithms set points traces powerful encompass algorithms 
algorithms considered identical generate complete trace jx jx free lunch define performance vector length sequence values performance vector associated trace tm performance vector said derived trace function algorithm said generate performance vector length trace generated algorithm function abbreviated tm 
vm denote length performance vector generated size subscripts may omitted needed 
note performance vector vm closely related tm vm tm define measure algorithm set functions function maps set performance vectors generated real number 
measure compare performance algorithms set functions algorithms identical measures said perform equally example measure take performance vector measure maps performance vector real number apply element combine results symmetric way average jf define free lunch result situation algorithms equal performance respect set functions equivalent statements free lunch theorem 
ambiguous set functions involved nfl measure algorithm performs equally 
pivotal idea contained proof radcliffe surry phrased directly language current framework 
nfl algorithms function exists function 
basis free lunch proof schumacher 
nfl algorithm generates precisely collection performance vectors functions considered 
schumacher proved addition collections referred nfl sets 
fact key observation demonstrating equivalence nfl nfl nfl nfl 
defined measure function set performance vectors 
consider weighted measure performance vector measure applied performance vector weighted function generates summed weighted measure generally subject free lunch theorem case functions equally weighted certain functions deemed important 
statement essentially free lunch result wolpert macready 
nfl equally weighted measure algorithm perform equally 
corollary free lunch theorem algorithm performs better average set functions perform worse complementary set 
essentially argument specialization algorithm perform small set functions expense poor performance complementary set 
stronger consequence properly appreciated algorithms equally specialized 
contradicts commonly stated beliefs robust general purpose algorithms meaning perform reasonably broad class functions expense performing extremely set functions 
algorithm precisely collection performance vectors functions considered nfl follows algorithm robust algorithm algorithm robust algorithm 
sharpening free lunch function oe permutation oe 
permutation oef function oef defined oef oe gamma 
define set functions closed permutation permutation algorithm search operator oe permutation 
permutation oea algorithm search operator oeg defined oeg oe oe gamma oe oe oe oe operates values trace oe applying oe leaving values untouched 
theorem tn oef gamma yn gamma tn oea oe gamma oe gamma gamma yn gamma proof induction length traces 
base case true traces length oea oef hi 
assume inductive hypothesis equalities statement theorem 
definition oeg oea oe gamma ffi oe tn oea oe gamma ffi tn oef oe gamma oe gamma oef yn accordingly tn oef tn oef jj yn tn oea tn oea jj oe gamma yn completes proof 
corollary duality oea oef corollary true previous theorem values traces 
corollary striking way shows correspondence permutation algorithm permutation function 
lemma easy consequence nfl 
lemma set functions closed permutation free lunch result proof arbitrary algorithms 
show sets fv fg fv fg equal algorithms provide data computing combined performance measures result obtained 
nfl exists function 
performance vectors equal permutation ae reverse containment follows symmetry 
previous lemma intermediate result radcliffe surry proof free lunch theorem 
converse lemma true 
lemma free lunch result holds set functions closed permutation 
proof assume way contradiction free lunch result holds set closed permutation function permutation consider arbitrary algorithm equal zero performance vectors generated nfl paragraph algorithm exists function hb subscript indicates dependence hb measure sum 
note sum free lunch result assumed sum algorithm permutations oeg 
duality oeg oea oea 
accordingly oea oea non zero oea contradiction 
combining previous lemmas yields sharpened version free lunch theorem nfl free lunch result holds set functions closed permutation 
nfl permutation closure section consequences previous results illustrated 
define permutation closure set functions ae oe permutation note sets functions construction closed permutation free lunch result holds set ae unions sets 
bears mentioning particular nfl nfl nfl nfl valid respect 
algorithms display equal behavior measure performance nfl generate exactly set performance vectors nfl identical collections objective function values time step 
equivalence relation may defined respect permutations 
functions said equivalent denoted exists permutation oe oeg 
similarly algorithms said equivalent denoted exists permutation oe 
equivalence class function denoted equivalence class algorithm denoted 
simplify notation denote set algorithms denote set functions define follows fv fg fv ag ffg nfl applies algorithms follows immediately definitions closed permutation ae case finest level granularity free lunch result hold 
set functions closed permutation disjoint union equivalence classes free lunch results hold unions equivalence classes 
definition duality fv oea oe fv oef oe bringing nfl picture yields result algorithms follows algorithm function identical ffl average performance algorithms function ffl average performance arbitrary equivalence class algorithms function ffl average performance functions equivalence class algorithm phrase average performance replaced set performance vectors list 
free lunch results expressed terms measure performance algorithms fact display exactly behavior set functions closed permutation sense performance vectors identical 
nfl equivalence class examples section extreme examples permutation closure 
examples illustrate applications nfl set stage discussing notion problem description length 
conciseness function represented list output values sequence points domain implicitly indices sequence smallest permutation closures correspond functions return single value 
example ffg problems sense uninteresting search point view single evaluation automatically determines maximum minimum evaluation function 
smallest sets corresponding permutation closure evaluation functions display variability needle haystack functions 
function evaluation call point domain better evaluation call 
exactly point space different evaluation size example fh ig interesting class functions set decision problems return boolean values 
note np complete problems frequently defined particular decision problems 
class correspondence set length binary strings equal permutation closure 
disjoint union equivalence classes times final example consider functions oneto 
class functions equals permutation closure 
loss generality functions permutations 
single equivalence class identity function size 
jx 
problem description length average description length functions members permutation closure discussed section 
done select cases cases illustrate extremes average description length 
whitley previously variation observation permutation oe permutation closure oe set 
permutations average description length members omega gamma ln bits general observation set functions average description length members omega gamma bits interesting question average description length members permutation closure polynomial exponential 
correct somewhat circular answer average description length polynomial ln polynomial 
idea examine average description length examples provide bounding cases 
noted average description length permutations omega gamma ln bits 
note explicit definition permutation sequence described previous section take ln bits images positions sequence define takes ln bits points range 
average permutation closure oe contains incompressible functions average description length member order magnitude size explicit definition sequence 
extreme permutation closure needle haystack function described 
explicit definition member requires omega gamma bits average description length ln bits 
members permutation closure highly compressible 
extreme cases illustrate free lunch results independent set functions free lunch result holds compressible 
free lunch theorems various equivalent forms reviewed 
duality result proven obtain sharpened free lunch theorem sense necessary sufficient conditions obtained 
proven permutation closure single function finest level granularity free lunch result hold 
average description length members permutation closures computed select cases related compressibility 
seen free lunch results independent set functions free lunch result holds compressible 
culberson 
futility blind search 
evolutionary computation 
english 
practical implications new results conversation optimizer performance 
schoenauer editor parallel problem solving nature pages 
thomas english 
information conserved optimization 
ieee trans evolutionary computation 
david goldberg 
genetic algorithms search optimization machine learning 
addisonwesley reading ma 
radcliffe surry 
fundamental limitations search algorithms evolutionary computing perspective 
van leeuwen editor lecture notes computer science 
springerverlag 
schumacher 
fundamental limitations search 
phd thesis university tennessee department computer sciences knoxville tn 
whitley 
functions permutations regarding free lunch walsh analysis summary statistics 
schoenauer editor parallel problem solving nature pages 
david wolpert william macready 
free lunch theorems search 
technical report sfi tr santa fe institute july 
david wolpert william macready 
free lunch theorems optimization 
ieee transactions evolutionary computation 
