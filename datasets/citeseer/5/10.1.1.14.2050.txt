appears proceedings iasted international conference software engineering applications sea november cambridge ma usa 
rewriting requirements design james kirby jr code naval research laboratory washington dc usa maintaining consistency requirements design developed satisfy important difficult 
maintaining consistency important satisfying stakeholders desires requirements express 
difficulty maintaining consistency stems having redundant descriptions requirements decisions requirements document second design document typically recorded widely divergent languages 
ameliorate problem write requirements design way requirements decisions expression requirements document incorporated directly design document organizes decisions includes additional design decisions 
key words software requirements software design software methodologies software engineering 
development decisions required behavior written times requirements design notations languages prose uml 
stakeholders confidence needs expressed requirements met developers able maintain demonstrate consistency requirements design 
maintaining demonstrating consistency multiple representations requirements decisions different languages poses significant challenge 
describes approach ensuring consistency requirements design involves representing decisions developing requirements design way reduce effi rt required demonstrate maintain consistency 
section discusses software requirements design refinements teams researchers requirements model 
subsequent sections discuss light control example system requirements system design software design light control system chosen particular organization 

scr approach described builds scr requirements design 
section begins discussion software requirements design 
term scr software cost reduction coined refer reserve term scr subsequent research requirements system design described discussion researchers don term 

software requirements requirements focuses recording behavioral requirements externally visible behavior software required exhibit 
sections requirements contribute recording behavioral requirements hardware interfaces modes operation software functions glossary 
device input output changes value independently inputs outputs hardware interfaces contains input output variable declaration 
values software sends output variables required behavior software 
software functions describes software set output variables required behavior software 
output software function specifies value 
avoid describing implementation software functions written terms conditions events defined aircraft operating conditions 
conditions predicates characterize aspect system measurable period time 
event occurs value condition changes true false vice versa 
example altitude condition true aircraft altitude greater feet false 
event altitude denotes instant condition altitude true 
capture software functions dependence state modes operations defines classes system state called modes 
history execution determines mode system 
modes operation gives initial mode system set events cause transition pair modes 
special tables specify functions software functions 
written way easy inspect certain types common errors incompleteness inconsistency 
system mode truth conditions determines value output variable condition table specifies func tion 
system mode occurrences particular events determine value output variable event table specifies function 

software design focuses portion design decomposition software components called modules behavior component described respectively software module guide set specifications module behavior 
information hiding principle guides decomposition described software module guide 
module characterized secret decision designers judge change independently 
responsibility module encapsulate hide decision 
decision changes module hides decision affected small number easily identifiable modules 
structure module guide represented tree decomposes software modules 
module assignment programmers 
software decomposed leaf module constitutes suitable assignment 
non leaf module composed set assignments described modules children tree 
secret module decision hides responsibility modules 
listed secrets top modules 
hardware hiding module 
hardware hiding module includes programs need changed part hardware replaced new unit different hardware software interface general capabilities 
module implements virtual hardware device rest software 
primary secrets module hardware software interfaces 
sec secrets module data structures algorithms implement virtual hardware 
behavior hiding module 
behavior hiding module includes programs need changed changes sections requirements document describe required behavior 
content sections primary secret module 
programs determine values sent virtual output devices provided module 
software decision module 
software decision module hides software design decisions mathematical theorems physical facts programming considerations algorithmic efficiency accuracy 
secrets module described requirements document 
modules constitute complete set assignments programmers 
note take responsibility respectively hardware externally visible behavior software decisions left software designers remainder shall concerned software decision module 
specification module behavior specifies behavior set programs 
set programs may consist programs usable modules case programs called interface module specification referred interface may consist programs programs modules set values virtual device output variables required externally visible behavior software case specification referred function driver 
focuses modules responsible hiding decisions recorded requirements device interface submodule hardware hiding system value mode determination function driver submodules behavior hiding 
submodule device interface module defines virtual device hides details physical device described requirements designers judged change independently 
need correspondence physical device virtual device 
physical device aspects designers judge change independently may represented virtual devices 
physically distinct devices replaced may represented single virtual device 
programs interface allow users accept inputs send outputs device 
interface notify users specified changes device device failure value measures altimeter altitude greater feet 
submodule defines set terms describe aircraft operating conditions state aircraft devices 
interface uses terms describe inputs devices effects outputs sent devices 
terms specifications modules function driver submodules 
submodules system value module compute values modules 
submodules hide rules requirements define values 
device interface module values provided module represent aircraft operating conditions latitude longitude point earth long aircraft take fly specified point earth state device air data computer functioning producing current reasonable altitude readings 
device interface submodule defines terms representing aircraft operating conditions device state uses describe values returns users 
interface mode determination module provides programs allow users determine system particular mode notify users system enters exits specified mode 
primary secrets module rules describing mode transitions requirements 
function driver specifications hide rules recorded requirements determining values output variables module specifications interface function drivers programs 
form similar table functions software requirements differ software requirement functions ways 
function driver controls virtual outputs opposed physical outputs identified software requirements specification virtual device defined submodule device interface 
second function driver explicitly identifies device interface program sets virtual device output variable value specifies 
third referring terms describing aircraft operating conditions software requirements glossary defines function drivers refer analogous terms module specifications define 

scr system requirements system design variable model described pamas madey software requirements model extend cover system requirements 
mathematical variables representing physical quantities system environment replace device inputs outputs describing required behavior 
mathematical relations vectors time functions replace conditions events modes tables requirements 
parnas madey define system requirements document specifies externally visible behavior required system system design document specifies behavior required system peripheral devices pamas madey consider systems computers describe communication system design document assumes single computer writing terms physical quantities system environment describes system opposed software behavior 
specifying values software send output devices model specifies required values mathematical variables called controlled variables denote physical quantities system environment position actuator location icon display operator system control 
parnas madey specify required values controlled variables terms mathematical variables called monitored variables denote physical quantities system environment 
capture system design decisions specifying behavior input output devices 
similar model specification defines input output variables 
specifying values inputs terms monitored variables effects outputs terms controlled variables complete specification device behavior 
tabular functions specify required behavior leaves open form functions describing required behavior particular systems take 
describe precisely information system requirements system design documents record parnas madey define relations monitored controlled input output variables 
relation req relation possible histories possible means allowed environmental constraints monitored variables possible histories controlled variables describes required system behavior 
domain req set vectors 
monitored variable vector element time function 
time function specifies value monitored variable function time describes possible history monitored vari able 
vector monitored variable time functions describes possible history monitored variables 
set possible histories monitored variables 
range req similar set vectors time functions specifying possible histories controlled variables 
possible history monitored variables set req specifies possible histories controlled variables set req relation function allow small errors inherent real implementations 
similar relations vectors time functions vari ables describe contents documents 
useful specify constraints environment system physical laws behavior systems imposes behavior 
relation nat captures constraints 
possible history monitored variables specifies possible histories controlled variables environment allows 
similar sets possible histories system input output devices respectively 
relation specifies behavior input devices relation specifies behavior output devices 
provide precise semantics scr specifications facilitate mechanized analysis specifications heitmeyer colleagues developed finite state model scr developed tools creating analyzing scr specifications 
assumes basic notation format specifying required behavior intro duced conditions events terms modes tables applies context variable model specifying required system behavior terms monitored controlled variables 

light control system example light control system lcs case study reported heitmeyer bharadwaj 
lcs controls lights rooms corridors building attempting keep energy low making natural light possible turning lights unused rooms 
concerned specifying light control single typical office 
office window wall lights window lights 
users determine office brightness room occupied temporarily unoccupied 
system uses door motion sensors determine room empty outdoor light sensor determine light provided office window 
panel facility manager office alerts failure sensors allows override settings determine long office empty considered unoccupied 
sections discuss system requirements system design software design specifications lcs 

system requirements system design lcs lcs system requirements document typical small scr requirements document 
functions specify required values controlled variables denoting wall window lights brightness color lights indicating sensor malfunctions 
table illustrates controlled variable declarations listing name type variable describing interpret values 
functions written terms monitored variables see table mode class terms 
monitored variables include variables denoting light settings chosen office occupant default settings ambient light level office office occupied values certain variables unobtainable time 
terms denote current light settings office facilities manager overridden office settings light provided office lights 
table provides example table selected controlled variables variable type physical interpretation denotes brightness office wall lights 
office wall lights lit 
table selected monitored variables variable type physical interpretation denotes value indicated slider labelled chosen light scene value office control panel 
pressing button labelled wall lights office control panel 
table required value events occupied unoccupied occupied specification required value declaration appears table 
column event table describes assumes value second describes assumes value lcs system design document diverges model uses inputs outputs monitored controlled variables specify behavior physical devices 
contrast lcs system design specifies behavior virtual devices details physical devices developers judge change 
system design uses virtual device inputs virtual device outputs monitored controlled variables specify virtual device behavior 
replace relation pamas madey virtual relation specifies behavior virtual device input variables inv replace relation virtual relation specifies behavior virtual device output variables ov ov lcs system design document consists dictionaries declaring types monitored controlled variables virtual device input output variables table illustrates declaration virtual output variable 
functions virtual device output variables controlled variables specify setting virtual outputs 
functions monitored variables virtual device input variables specify value virtual inputs 
table table virtual output declaration name type boolean table effect conditions condition table specifying value function virtual output 
boolean true 
software design lcs software design lcs modeled design consists software module guide set specifications module behavior 
table outlines module structure lcs software module guide 
modules hiding decisions recorded system requirements system design documents included lcs design 
modules names listed bold lifted module guide 
secrets responsibilities minimally adapted lcs exceptions discussed 
modules names italics represent done list includes show left 
remaining leaf modules indicated regular type provide set virtual devices see submodules device interface module specify required values malfunction lights office lights see submodules function drivers provide means determine current system mode mode determination module provide means determine value monitored variables terms set value controlled variables see system value module 
system value function driver modules secrets affected changes scr requirements compared requirements 
reflect scr specification required values controlled variables represent physical quantities opposed specification values output devices requirements 
change function driver secret wording change referring referring controlled variables 
change system value secret substantial module provide values users allow users set values controlled variables 
needed design function driver submodules set output devices directly 
revised scr design function driver submodules set value controlled variables 
system value hides accomplish changes controlled variable values 
table lcs module decomposition 
hardware hiding 
extended computer 
device interface module 
door closed contact 
facilities manager console 
motion detector 
office control panel 
outdoor light sensor 
timer 
wall lights 
window lights 
behavior hiding 
function drivers 
malfunction lights 
office lights 
shared services 
mode determination 
system value 
software decision specifications submodules device interface module hide users physical devices change similar form see table 
interface defining virtual table device interface interface section contents output variables declaration iv virtual device input variables value output variables inv input variables declaration virtual device output variables effects input variables access programs events protocol module signalled dictionaries types monitored variables controlled variables device 
interface lists declarations virtual device input variables denoted contents column distinguish physical inputs denotes outputs users interface 
functions comprise ino specify values virtual inputs terms monitored variables 
interface lists declarations virtual device output variables inputs users see table 
functions specifying values controlled variables terms virtual device output variables comprise describe users setting virtual output variables see table 
access program table defines protocol user programs follow obtain value virtual device inputs set value virtual device outputs 
table specifies program accepts input value type described declaration see table table specifies calling 
standard scr event notation defines events signalled interface terms virtual device input variables 
complete set device interface interfaces followed dictionaries defining types monitored variables controlled variables referenced interfaces 
table device interface program table entry program parameters description input organization system value module interface see table hides determine value monitored variables certain terms set value controlled variables similar device interface 
interface lists declarations moni table system value interface section contents output variables declarations monitored variables terms input variables declarations controlled variables access programs events protocol module signalled dictionaries types variables terms outputs users 
contrast outputs device interface interface functions specify value outputs physical interpretation provided declarations describes values monitored variables see table terms 
interface lists declarations controlled variables inputs users 
monitored variables terms functions specify effects setting controlled variables physical interpretations provided controlled variable declarations describe effect users setting values controlled variables see table 
access program table defines protocol user programs fol low obtain value monitored variables terms set value controlled variables 
table provides example specification program accepts input type specified table 
effect program set wall lights office oft described physical interpretation 
standard scr event notation defines events signalled interface terms controlled variables terms 
inter face concludes dictionary defining types 
table system value program table entry program parameters description input function driver specification see table hides rules determine required value controlled variables lists declarations controlled variables set function driver functions specify values controlled variables see table 
function driver specification includes dictionaries declaring types modes monitored variables terms function 
table function driver specification section contents controlled variables declarations controlled variables behavior req dictionaries types modes monitored variables terms table lists contents mode determination module hide rules determining current system modes may multiple mode classes allowing system modes simultaneously 
current mode declared mode class outputs users 
access program table defines protocol user programs follow obtain current mode mode class 
scr event notation defines events signalled interface terms mode classes 
table mode determination interface section contents output variables declarations mode classes access programs events protocol module signalled 
discussion approach documenting requirements design discussed partitions decisions development way distinguishing system requirements system design software design decisions recording organizing decisions relatively straight forward task 
separation concerns serves decompose complex difficult activity system development set relatively distinct simpler activities 
nature decomposition eliminates redundancy descriptions behavior requirements design organizing development docu mentation way overlap requirements design decisions decisions recorded shared products 
eliminate required keep consistent redundant representations requirements decisions recorded widely divergent languages 
adapted specifications modules hide system requirements design decisions function driver device interface mode determination system value declarations monitored controlled variables terms virtual inputs outputs table functions specify values modules identi cal contents notation decisions recorded system requirements system design 
engineers need document system requirements design decisions software design 
need notation capturing decisions 
documents discuss concept identity replaces concept traceability 
diverged variable model specifying system design terms virtual devices hide aspects physical devices change terms physical devices 
useful development projects choose devices fairly late software designs developed designers best guesses 
devices chosen early choices changed reasons including inability vendor deliver unexpected availability cheaper effective device 
specifying system design terms virtual devices easier adapt system software design documents software changes 
basing system design virtual devices allows system software design progress reducing risk significant impact making changing selections physical devices 
diverged model software design ways 
adapted software module guide identifying module hides set value controlled variables 
adapted specifications modules hide system requirements design decisions function drivers device interface modules system value declarations monitored controlled variables terms virtual inputs outputs table functions specify values modules identical contents notation decisions recorded system requirements system design 
software design documents described derived lcs specifications described 
design specifications consistent requirements ieee joint international requirements engineering conference 
britton parker pamas shore software requirements nrl final report 
specifying software requirements complex systems new techniques application ieee trans 
softw 
eng se 
pamas criteria decomposing systems modules comm 

britton pamas software module guide nrl memorandum report 
clements interface specifications shared services module nrl memorandum report 
pamas madey function documents computer systems science computer programming 
heitmeyer software cost reduction ed encyclopedia software engineering new york john wiley 
heitmeyer labaw automated consistency checking requirements specifications cm trans 
softw 
eng 
meth 
light control case study problem description journal universal computer science 
heitmeyer bharadwaj applying scr requirements method light control case study journal universal computer science 
acknowledgments seeds comments decade ago dave weiss heitmeyer ramesh bharadwaj 
thoughtful detailed suggestions heitmeyer bharadwaj weiss anonymous reviewers led improvements 
lcs system requirement system design 
