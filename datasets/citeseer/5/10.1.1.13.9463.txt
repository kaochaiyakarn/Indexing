wpi cs tr june monads programming languages john computer science technical report series worcester polytechnic institute computer science department institute road worcester massachusetts ii monads programming languages john cs wpi edu www cs wpi edu computer science department worcester polytechnic institute worcester ma june assesses relationship mathematical concept monads applied area programming languages 
contents concept monad origins math 
notions computation 
monadic programming composing monads 
abandoning monads 
basis monadic style concluding note acknowledgments bibliography iii iv monads kind mathematical structure arises category theory 
originally identi ed setting studied context programming languages successively narrower scales 

eugenio moggi applied monads computation universal scale mo 
looking categorical tool describe shape impure computation state imperative control settled monads 

subsequently monads merely large scale encapsulate handling impure language features interpreter wa 

monads ner grained scale encapsulate individual impure phenomena occurring arbitrary programs 
universal scale universe discourse say programming language time 
commensurate basic principle software engineering artifacts languages applies languages applies arbitrarily small entities program 
subsequent narrowing scale natural development 
universally applicable technique composing monads combining monads represent arbitrary impure phenomena produce single monad represents phenomena 
lack doesn particularly problematic universal scale universes expects live 
scale application narrows lack monadic composition increasingly 
suciently narrow scale apparent problem combining monads mathematical manifestation problem combining software components 
question concerning monads really right tool job 
suggested moggi originally looking nice mathematical properties monads known form nice mathematical properties 
borrowing structures eld hazardous just monads properties helpful mathematics doesn mean re necessarily right modeling general computation just suitability traditional oo inheritance coding style simulation software doesn necessarily ideal general purpose software engineering 
sections relate mathematical concept monads application programming languages 
technical details necessary initial explanation mathematical concept emphasis principle central rag model sh 
deliberately phrased compare contrast principle kr programming languages software engineering artifacts 
big picture monads extent rst applied computation application diverged mathematical roots 
concept monad original application monads computation moggi mo motivated interest handling impure forms computation framework calculus 
late directly constructed variants calculus handle various particular impure facilities 
moggi followed principle category theory prior calculus category theory generalization set function theory calculus founded reasoned natural generalizations foundations calculus ought cleanly expressible categorical form 
chose monads categorical structure serve purpose variety computational impurities 
discusses mathematical conceptual underpinnings monads describes moggi approach applies monads particular forms computational impurity 
origins math subsection big picture mathematical concept monad 
material approached parallel mutually supporting levels big picture formal de nitions simple examples 
mathematics view beast systematic study things sense behaved 
isn kind nice behavior isn possible conduct study intrinsically systematic 
hand exhibit kind behavedness subject mathematical study happens behavedness unsurprisingly behaved possible study mathematically 
essence mathematical study behavedness category theory 
major concepts category theory build 
order de ned categories functors natural transformations adjunctions 
rst manifest category theory start highest level adjunctions didn emerge explicitly fteen years ma xiv 
adjunctions just way describing high level phenomenon manifests number related forms particular monads 
categories starting point category theory notion behaved family morphisms arrows object type object type generalization family functions sets 
category consists directed graph vertices called objects directed edges called arrows morphisms source arrow domain destination codomain 
associative binary partial operation arrows called composition de ned just codomain edge domain 
identity arrow object domain codomain object identity composition right left 
de nition expressed formally 
de nition graph consists collections operations 
collection objects obj may written 
collection arrows arr arr may written 
operations dom cod mapping arrow object dom called domain cod codomain 
dom cod may written category graph additional operations properties 
partial binary operation arrows mapping certain pairs arrows arrow called composition 
de ned cod dom de ned dom dom cod cod composition associative relevant compositions de ned 
operation id mapping object arrow id arrow id id canonical example category category set objects sets arrows total functions set set 
interesting examples categories consist sets certain kind additional structure functions set set preserve structure example category grp objects groups morphisms group homomorphisms mon objects monoids arrows monoid homomorphisms 
note passing core category composition operation parts category implicit 
objects category single obvious choice arrows uncommon categories objects di erent arrows example category pfn objects sets arrows partial functions set set 
usually set arrows de ned really obvious natural way de ne composition occasionally categories interest objects arrows di erent rules composition functors category may viewed set certain kind additional structure suitable de nition category structure preserving morphisms form category categories 
natural de nition homo morphism categories called functor mapping objects objects arrows arrows preserves operations domain codomain composition identity 
ignoring obfuscating complications careful treatment address involving foundations mathematics avoiding russell paradox set sets don contain contains 
see ma xi example category mfn sets objects multivalued functions arrows arrow maps value set values composition de ned category multivalued functions composition objects arrows composition de ned de nition categories functor consists object function obj obj arrow function arr arr dom cod tf tg id ta id category objects categories arrows functors called cat category categories 
example set monoid freely generated consists set strings alphabet concatenation binary operation monoid empty string identity element strings 
call monoid ma maps object category set object category mon 
function sets obvious monoid mf ma mb takes string uses map element string corresponding element fa 
operation provided scheme procedure map functor set mon symbolic notation set mon 
hand de ne functor mon set maps monoid underlying set elements un maps monoid homomorphism underlying function uh elements elements functor called forgetful functor mon set 
note composed functor set set maps set set strings alphabet natural transformations functors parallel functors natural transformation family morphisms relate image image course behaved way category theory 
formally de nition functors natural transformation denoted mapping arr arrows sf tf 
equation may expressed saying diagram commutes meaning cat contains small categories means things doesn contain 
functor action essentially forget structure object typically set additional structure called forgetful functor 
forgetful functors usually called points shown diagram composition arrows path point equal sx sy tx ty sf tf commutative diagram shows interaction manifests category interaction spans categories implicit diagram 
provide complete visualization situation single picture gure speci cally triangular prism ll adopt notational convention depicting action functor object double arrow 
sx sy tx ty sf tf avoid cluttering picture objects arrows labeled 
front left face prism swept acting back face prism swept acting front right face commutative diagram category sweeps angle plane plane simple example natural transformation 
consider identity functor category set id set set set maps object arrow set 
obvious natural transformation functor id set word commute may idiosyncratic considers functions set diagram commutes commute usual sense functor set set described earlier maps set set strings alphabet say id set set arrow maps letter alphabet string length consisting letter function sets function maps strings alphabet strings alphabet applying letter string 
natural transformation diagram commutes 
clear diagram commute apply letter string length result get thing rst converted string length applied letter string 
adjunctions recall rst characterized category behaved family morphisms object type object type category theory provides general notion behaved family morphisms object type object type family morphisms loaded term directed relationships general kind called adjunction 
attempt motivate component adjunction terms high level view construction unknown formal de nition hanging discussion ll full blown formal de nition rst secure concrete example address roles various parts high level view 
de nition categories adjunction tuple hf denoted hf functor called left adjoint 
functor called right adjoint 
natural transformation idc called unit 
natural transformation idd called counit 
arrow gy unique arrow fx gf arrow fx unique arrow gy ff situation summed picture solid gure 
gy gfx gf fx ff top surface gure commutative diagram category expressing constraint gf bottom surface commutative diagram category expressing ff connected parallelograms swept acting ff swept acting gf 
assembling speci example adjunction pieces running example 
set mon freely generates monoids sets forgetful mon set 
ll rest labels diagram rely heavily common sense adjunctions obvious guess usually right expect systematic study behaved behavedness 
unit natural transformation id set seen mapping letter alphabet string length reason counit consider particular case monoid hn additive monoid nonnegative integers 
gy uhn set nonnegative integers arrow gy maps letter alphabet nonnegative integer 
mn hn 
monoid strings nonnegative integers ff mf monoid homomorphism applies letter string producing string nonnegative integers 
counit map string integers single integer stretch think adding elements string 
returning general case arbitrary monoid monoid strings underlying set combines elements string associative binary operation provided monoid identity empty string monoid homomorphism mx takes string alphabet applies letter string combines results associative binary operation monoid recall initial characterization adjunction behaved family directed relationships objects type objects 
adjunction establishes bijection arrows gy fx view arrows manifestations directed relationship set monoid belong strictly category 
adjoint functors allow objects manifest category relation appear places 
unit counit simply form family behavedness 
monads monad intuitively shadow cast adjunction domain category calling 
codomain category occur explicitly monad need functor composite right left adjoints 
call composite unit adjunction described natural transformation id counit casts shadow means adjoint functors starting object left adjoint maps object fx maps arrow fx fx right adjoint maps arrow fx gfx call natural transformation formal de nition monad convenient notation id de nition category monad triple ht functor natural transformation called unit 
scheme programmers familiar wizard book may recognize homomorphism procedure accumulate course result manipulation natural transformation category theory way coming right corollary fact category theory positively behavedness 
natural transformation called multiplication object tx tx tx id tx tx tx monad equations follow properties adjunction hand monad evidently forgets details adjunction shouldn come surprise adjunctions may de ne monad 
particular adjunction considers objects corresponding monad ignores objects aren form fx 
category longer explicitly monad ht identity composition operations visible 
arrows composed monad produce arrow follows 
notation follows common programming idiom sequencing 
note carefully notation uses opposite ordering categorical adjunction matches arrow gf fa gf obviously arrows compose giving fa adjunction matches arrow gf moment thought sketching commutative diagram af rm appropriate composed arrow tg identity operation ectively visible form natural transformation 
arrow 
happens adjunction matches arrow gfx arrow id fx fx fx 
notions computation moggi uses monad ht describe calls notion computation objects category discourse types type may thought pair hd si type designation set values somewhat distinct set depending type system chosen types may terminology formal analogy monads monoids correspond respectively identity element binary operation monoid 
observe term unit far sense context analogy applied natural transformation underlying adjunction monad 
rst equation derived ultimately fact natural transformation equations come setting adjunction commutative diagram adjunction commutative diagram mo rst de nes computational monad monad ht objects mono categorical generalization function immediately admits mono requirement may hold interesting cases 
possible values distinct di erent designations 
arrows arbitrary functions sets values 
functor monad type constructor maps type type ta characterizes mapping type values type ta computations type 
program function mapping values computations arrow form moggi word computation describe elements ta interpreted carefully 
realm automata operational semantics computation typically function kind con guration space 
example con guration stateful computation pair hv si value machine state computation function mapping con guration 
moggi envisions program maps input value element ta stateful computation element knows input value general function function 

general element type ta computation output value type input value xed 
typical example consider nondeterminism 
usual sense nondeterministic computation input type output type simply function pb input value known remaining computation simply subset pb program pb 
monad underlying adjunction 
domain category category data types implicit codomain category category computation types 
programs arrows computation type computation type assuming object belongs image left adjoint functor adjunction matches program fa arrow gf data type program ta identity program composition corresponds identity arrow implicit category 
conceptually program takes input value returns computation produces output value nondeterministic computation fvg singleton set containing input value stateful computation hv si function mapping machine state pair input value machine state program composition operation 
supported de nes semantics directing output program input 
composition operation category 
nondeterminism example meaning output output output stateful computation hx si say run computation initial state rst run computation initial state produce con guration hx run computation initial state building monads notions computation moggi de nes semantic rules generic programming language calculus style syntax mo calls computational lambda calculus semantic rules parameterized monad ht results deduced rules automatically apply variant calculi monadic framework particular variant calculus constructed xing monad adding appropriate language primitives accessing form impurity monad supports 
core assumptions underlying moggi monadic strategy embodied 
pure function understood impure function 
impure function composition done monad 
applied monadic programming style mathematical structure monad assumptions linger cf 

monadic programming ect moggi monads mathematics encapsulation device isolate di erent mathematical concerns making independently tractable advocates pure functional programming languages looking way correct obvious de cit desire pure functions need impure behavior input output real world programs quickly latched monads way incorporating impurities pure functional language controlled manner pure portions language 
see :10.1.1.100.9674
wadler took natural step scaling moggi parameterization programming language semantics monad parameterization interpreter language wa 
context monad explicitly encapsulation device interpreter constructed monad shaped hole semantics interpreted language varied plugging appropriate division orthogonal concerns isn usually called encapsulation occurs mathematics se referred various names independence orthogonality specialized prominent case separation variables 
course natural step isn necessarily obvious obvious generally takes longer think 
monad 
encapsulation impurities isn complete st points tweak code interpreter add appropriate syntax exploit semantic features provided monad variations interpreter quite entirely restricted monad composing monads moggi originally looking problem de ning semantics impure forms computation quite nite number targets hand monad noted specialized syntax targeted combination impurities unreasonable 
wadler promoted monads status software components engaged programmer re ex play build lots di erent ones nd ways parameterize combine build new ones facility 
unfortunately point monad mathematical underpinnings come back 
monad manifestation adjunction directed relation explicit category implicit category fact natural way compose adjunction adjunction produce adjunction composition appropriate properties category associative category identity adjunction 
category objects categories arrows adjunctions called 
monad notion computation category data types means underlying adjunction domain codomain category certainly isn mean category computations structure category pure typed functions 
underlying adjunctions nontrivial notions computation certainly aren composable ordinary composition adjunctions domain codomain straightforward way working non composability problem de ne monads directly higher level functions take monad parameter return monad result monad parameterized monad 
steele advocated approach st name customizing syntax really problem large universal scale wadler working 
moggi diculty working universal scale perfectly willing customize syntax variant smaller scale phenomena monads applied syntactic strategies associated monads brought picture 
reader readily composition operation playing functors natural transformations category theory behavedness tends right 
pseudomonads 
approach suggested jones duponcheel :10.1.1.138.4552
steele added facility individual monad order parameterize jones duponcheel added facility particular pair monads 
particular monads hm hn assumed composition monad functor unit identi ed di erent sucient conditions construction natural transformation ht monad admitted mathematical structures properties monad fact quite open pragmatic noting monad entity may usefully serve encapsulating structure lacks mathematical behavedness monad 
abandoning monads papers monadic programming tend notation extant functional language typically haskell ml moggi early expression language semantics means actual program code 
functional languages express behavedness properties essential applicability underlying concepts monads essential properties underlying adjunction just type constructor couple polymorphic functions 
consequently monads programming increasingly applied behavedness properties tended fade view leaving template mechanical structure program modules 
example pr describes practical programming device features de ned mechanically monadic structure pairwise compositions features de ned lifting structures mechanically similar monad transformers 
features essentially oo abstraction classes lifting generalization oo inheritance neatly nature practical interaction composition encapsulation 
properties monads gradually weakened theoretical programming languages theory devised describe applications favor practical encapsulation theoretical behavedness 
typical topical example wa ect system monadic style 
ects device encapsulating computational impurities emerged comparatively applied tradition type systems monadic style emerged purpose theoretical tradition category theory 
expressed conditions entirely equations polymorphic functions category conditions recast elegantly terms underlying adjunctions scope 
suspect general principles recasting identi ed extremely simple consequently explaining dicult 
notion programming language incorporates correctness proofs program code current technology discernible current research trends 
conventional type constrains range permissible values datum ect constrains range permissible side ects impure function 
function type notation amended writing ect arrow function takes input type ect produces output type ects associative binary operation union identity null ect pure functions ect ect composition functions union ects imply wadler de nes monad structure functor parameterized ect object type computations ect output type ect naturally associated monad ht wadler interest monads individually 
views entire family single monad entity 
binary operation 
representing third element monadic form maps note correspond categorical composition implicit codomain adjunction general codomain isn codomain case collapses program composition monad general connects monads monad sense composite sense jones duponcheel 
unit wadler structure natural choice entire family monads left right identity 
programs monad left right identity 
programs monads basis monadic style essence mathematical concept monad existence implicit underlying adjunction ect intent moggi presumes category pure functions related category programs 
subsequent departure monadic style mathematical concept demonstrates monadic style conceptual basis basis isn monads 
worthwhile ask basis particularly rich source insight monadic style wadler wa composable continuations 
wadler characterizes monadic style generalization continuation passing style 
idea continuations con guration intermediate state computation partitioned value representing culmination past computation continuation representing computation 
usual monadic treatment continuations uses functor ta moggi computations type know input value remains speci ed continuation question inherent subjectivity consequence section necessarily distinct thread editorial content feasible 
fully explicated type program 

generalization monadic style program computation mapping initial con gurations nal con gurations inputs data value type leaving rest initial con guration unspeci ed computation moggi sense type maps initial con guration input data value complete nal con guration 
stating principle evident assumptions stipulated monadic style applied 
computation mapping initial con gurations nal con gurations 

con guration distinguishable part may regarded input value 
rst glance assumptions sound reasonable conceptual problem originating assumption visible functor ta 
type data type nal result computation 
observed earlier continuation represents computation scheme rst class continuations example experienced programmer continuation doesn return input type implicit scheme course shouldn output type 
artifact pure functional programmer mathematician determination express computation entirely terms pure functions 
don claim alternative approach ready hand merely suggest approach describing computation driven nature computation driving perception computation 
solution drastic change strategy subtle modulation tactics pro er opinion 
wadler treatment composable continuations suggests existence kind implicit conceptual structure mathematics failing exploit 
ordinary continuation captured syntax adopted wadler expression escape evaluates variable bound continuation surrounding escape expression 
continuation function returns 
composable continuation captured expression shift pre continuation surrounding shift expression evaluates bound pre pre stops nearest dynamically enclosing reset expression reset 
pre stopping point starting point function composable 
simple example wa reset shift construct reset shift binds variable body shift expression 
expression body evaluates choice examples mixed metaphors quoted mixed metaphor printed dictionaries english language 
returned directly context enclosing reset expression intervening removed bound result evaluating entire expression 
general type system computations involving composable continuations general keep track constituent data types type current expression type nearest enclosed shift type nearest enclosing reset 
functor wadler monad structure parametric types 
program composition 
maps 


chronologically treatment ects composition operation isn categorical general codomain codomain time consequently general mathematical structure reduces monad parameters xed particular type means objects codomain monad wadler moved observe treatment quite satisfactory 
monad 
categorical typing composition operation usually doesn reduce monad 
parameters general type 



follow pattern xy yz xz pattern domains codomains composition arrows category 
suggestions er just going unsettled feeling treatment missing important conceptual foundations solid 
concluding note original objective relate mathematical concept monads applied area programming languages 
assessment mechanical form monads inspired extensive ad hoc programming languages far strong relation demonstrated mathematical concept applied area 
case example isn confusing wadler presents expression reverses list 
letrec perverse null shift head perverse tail reset perverse acknowledgments wish dissertation committee keeping complete missing important piece big picture 
harold abelson gerald jay sussman julie sussman structure interpretation computer programs second edition new york mit press 
available june url mit edu html matthias felleisen daniel friedman syntactic theory sequential state theoretical computer science december pp 

mark jones luc duponcheel composing monads research report yaleu dcs rr yale university december 
available june url www cse ogi edu mpj pubs composing html kr shriram krishnamurthi linguistic reuse ph dissertation rice university may 
available june url www ccs neu edu scheme pubs ma saunders mac lane categories working mathematician new york springer verlag 
ernest manes michael arbib algebraic approaches program semantics springer verlag 
mo eugenio moggi computational lambda calculus monads proceedings fourth annual ieee symposium logic computer science pp 

peyton jones wadler imperative functional programming th annual symposium principles programming languages charleston south carolina 
available june url www research com user wadler topics monads html pr christian prehofer inheritance feature interaction composing monads tum technische universitaet muenchen institut fuer informatik april 
available june url informatik tu muenchen de amr sabry monadic encapsulation ml sigplan notices september proceedings acm sigplan international conference functional programming icfp paris france september pp 

sh john recursive adaptable grammars ph dissertation wpi cs department august june 
available june url www cs wpi edu thesis top html st guy steele jr building interpreters composing monads proceedings acm conference principles programming languages pp 

wa philip wadler monads functional programming broy editor marktoberdorf summer school program design calculi nato asi series computer system sciences volume august springerverlag 
jeuring meijer editors advanced functional programming springer verlag 
available june errata xed august url www research com user wadler topics monads html wa philip wadler monads composable continuations lisp symbolic computation january special issue continuations pp 

available june url www research com user wadler topics monads html wa philip wadler marriage ects monads sigplan notices january proceedings acm sigplan international conference functional programming icfp baltimore maryland september pp 

available june including longer version submitted acm transactions computational logic coauthor peter thiemann url www research com user wadler topics monads html 
