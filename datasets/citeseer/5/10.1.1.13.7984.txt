faster scaling algorithm minimizing submodular functions satoru iwata 
combinatorial strongly polynomial algorithms minimizing submodular functions developed iwata fleischer fujishige iff schrijver 
iff algorithm employs scaling scheme submodular functions schrijver algorithm exploits distance labeling 
combines techniques yield faster combinatorial algorithm submodular function minimization 
resulting algorithm improves previously best known bound linear factor size underlying ground set 
key words 
submodular function discrete optimization algorithm ams subject classifications 


finite nonempty set cardinality set function defined subsets submodular satisfies vx submodular functions discrete analogues convex functions 
examples submodular functions include cut capacity functions matroid rank functions entropy functions 
polynomial time algorithm submodular function minimization due schrijver 
strongly polynomial algorithm described schrijver 
algorithms rely ellipsoid method efficient practice 
combinatorial strongly polynomial algorithms developed iwata fleischer fujishige iff schrijver 
algorithms build combinatorial pseudopolynomial algorithm due 
iff algorithm employs scaling scheme developed capacity scaling algorithms submodular flow problem 
contrast schrijver achieves strongly polynomial bound distance labeling argument similar 
combine techniques yield faster combinatorial algorithm 
research supported part aid scientific research ministry education science sports culture japan 
mathematical informatics university tokyo tokyo japan 
denote time required computing function value maximum absolute value iff scaling algorithm minimizes integral submodular function ns logm time 
strongly polynomial version runs log time improved variant schrijver algorithm runs time 
time complexity new scaling algorithm log 
function evaluation oracle identify arbitrary subset argument quite natural assume linear new algorithm faster iff algorithm factor strongly polynomial version new scaling algorithm runs logn time 
improvement previous best bound linear factor combinatorial algorithms perform multiplications divisions despite problem submodular function minimization involve operations 
schrijver asks minimize submodular functions strongly polynomial time additions subtractions comparisons oracle calls function values 
algorithm called fully combinatorial 
settles problem developing fully combinatorial variant iff algorithm :10.1.1.31.9856
similarly implement strongly polynomial version scaling algorithm fully combinatorial manner 
resulting algorithm runs log time improving previous bound factor organized follows 
section provides preliminaries submodular functions 
section describe new scaling algorithm 
section devoted complexity analysis 
section discuss extensions fully combinatorial implementation 

preliminary 
section provides preliminaries submodular functions 
see details general background 
vector subset denote cy 
denote vector min 
xu denote vector xu xu 
submodular function consider base polyhedron ev 
vector called base 
particular extreme point called extreme base 
extreme base computed greedy algorithm edmonds shapley follows 
linear ordering vj denote vj vj 
greedy algorithm respect generates extreme base 
conversely extreme base obtained way appropriate linear ordering 
base subset 
theorem shows inequalities fact tight appropriately chosen theorem 
submodular function max min 
integer valued maximizer chosen integral bases 
theorem immediate vector reduction theorem due edmonds 
motivated combinatorial algorithms minimizing submodular functions 

scaling algorithm 
section presents new scaling algorithm minimizing integral submodular function algorithm consists scaling phases scale parameter 
keeps set linear orderings li vertices denote precedes li 
linear ordering li generates extreme base greedy algorithm 
algorithm keeps base convex combination ici extreme bases 
initially arbitrary linear ordering lo 
furthermore algorithm works flow complete directed graph vertex set flow represented skew symmetric function capacity equal 
hold pair vertices boundary defined vcv initially scaling phase aims increasing 
flow procedure constructs auxiliary directed graph arc set luv andt directed path called augmenting path 
augmenting path algorithm augments flow arc procedure referred augment 
scaling phase keeps valid labeling labeling valid implies lower bound number arcs directed graph arc set ii 
set vertices reachable vertex attains minimum labeling index called active element 
procedure multiple exchange applicable pair element li 
attains minimum labeling vw 
note element satisfies vw li vw 
procedure multiple exchange moves vertices place imme li changing ordering computes extreme base yi generated new li 
results yi yi denotes previous 
consider complete bipartite graph vertex sets algorithm finds flow yi flow obtained easily called northwest corner rule 
procedure computes max 
xi called nonsaturating 
nonsaturating multiple exchange new index added associated linear ordering previous li 
coefficient determined hi hi replaced hi 
saturating nonsaturating procedure adjusts flow hi hi active index vertex algorithm increment 
labeling remains valid 
procedure referred relabel 
number extreme bases expression increases result non saturating multiple exchange 
order reduce complexity algorithm oc applies procedure reduce computes expression convex combination affinely independent extreme bases chosen currently ones 
computation standard linear programming technique takes time aid gaussian elimination 
ready describe new scaling algorithm 
step arbitrary linear ordering 
compute extreme base greedy algorithm respect lo 
put ix step put step put 
vertices reachable step augmenting path 
apply augment 
apply reduce 
go step 
step find vertex attains minimum 

active index apply multiple exchange 
apply relabel 
go step 
step determine set vertices reachable apply reduce go step 
intend show scaling algorithm obtains minimizer lemma 
scaling phase 
proof 
scaling phase lower bound number arcs means directed path tr implies follows arc gi emanating yi ici 
vx xi 
fi lemma 
scaling phase 
proof 
lemma implies 
theorem 
scaling phase minimizer 
proof 
scaling phase lemma implies 
follows integrality 
complexity 
section devoted complexity analysis new scaling algorithm 
lemma 
scaling phase performs augment times 
proof 
scaling phase set obtained previous scaling phase satisfies lemma 
scaling phase inequality 
note procedure 
scaling phase increases 
augmentation increases scaling phase performs augmentations 
lemma 
scaling phase performs relabel times 
proof 
application relabel increases 
relabel applied scaling phase 
total number scaling phase 
lemma 
scaling phase performs nonsaturating multiple exchange times 
proof 
multiple exchange nonsaturating vertex comes reachable means set enlarged 
applications nonsaturating multiple exchange augmentations 
scaling phase performs augmentations lemma number nonsaturating applications multiple exchange scaling phase na 
lemma 
application multiple exchange index remains inactive applied 
proof 
multiple exchange vertex remains new vertex precede li satisfy 
index remains inactive applied 
lemma 
scaling phase performs saturating multiple exchange times 
proof 
denote number indices active follows saturating multiple decreases nonsaturating multiple change 
lemma increase algorithm performs 
scaling phase performs calls lemma total number saturating multiple scaling phase 
theorem 
algorithm performs log function evaluations log arithmetic computations 
proof 
initial value satisfies 
scaling phase cuts value half algorithm terminates algorithm consists log scaling phases 
lemmas scaling phase performs multiple times 
procedure multiple exchange requires oracle calls function values arithmetic computations 
addition lemma scaling phase performs calls ed ce requires arithmetic computations 
scaling phase consists function evaluations arithmetic computations 
total running time bound log 

discussions 
family called distributive lattice ring family qy pair 
compact representation directed graph follows 
directed graph arc set subset called ideal arcs enters set ideals forms distributive lattice 
conversely distributive lattice represented wy may assume directed graph acyclic 
minimizing submodular function apply scaling algorithm minor modification 
modified version uses directed graph 
initial linear ordering consistent linear orderings appear algorithm consistent ensures set obtained scaling phase belongs 
modification scaling algorithm finds minimizer iwata fleischer fujishige describes strongly polynomial algorithm repeatedly applies scaling algorithm log scaling phases 
number iterations 
replacing scaling algorithm new obtain improved strongly polynomial algorithm runs gn time 
shown strongly polynomial iff algorithm implemented additions subtractions comparisons oracle calls function values :10.1.1.31.9856
similarly new strongly polynomial scaling algorithm fully combinatorial follows 
step fully combinatorial implementation neglect reduce 
causes growth number extreme bases convex combination 
number bounded polynomial new index added nonsaturating multiple exchange scaling phase yields new extreme bases 
number extreme bases log scaling phases log 
step choose appropriate step length multiple exchange coefficients rational numbers common denominator bounded polynomial denote value scaling phase 
keep hi iis integer modify definition saturating multiple exchange 
multiple exchange called saturating 
called nonsaturating 
nonsaturating multiple exchange minimum integer new coefficients hi determined coefficients rational numbers common denominator bounded polynomial log scaling phases 
easy implement algorithm additions subtractions comparisons oracle calls function values 
discuss running time resulting fully combinatorial algorithm 
algorithm performs iterations logn scaling phases 
algo rithm keeps logn extreme bases scaling phase applies multiple exchange log times 
multiple exchange consists oracle calls arith operations 
total running time log 
improves previous bound log factor :10.1.1.31.9856
author satoru fujishige matsui kazuo stimulating conversations helpful comments 
cunningham testing membership matroid polyhedra combin 
theory ser 

cunningham submodular function minimization combinatorica 
edmonds submodular functions matroids certain polyhedra combinatorial structures applications guy sauer sch eds gordon breach pp 

fleischer iwata push relabel framework submodular function minimization applications parametric optimization discrete appl 
math appear 
fleischer iwata mccormick faster capacity scaling algorithm sub modular flow math 
programming appear 
fujishige submodular functions optimization north holland 
gr tschel schrijver ellipsoid method consequences combinatorial optimization combinatorica 
gr tschel lov sz schrijver geometric algorithms combinatorial optimization springer verlag 
iwata capacity scaling algorithm convex cost submodular flows math 
programming 
iwata fully combinatorial algorithm submodular function minimization combin :10.1.1.31.9856
theory ser 
appear 
iwata fleischer fujishige combinatorial strongly polynomial algorithm minimizing submodular functions acm appear 
lov sz submodular functions convexity mathematical programming state art gr tschel korte eds springer verlag pp 

schrijver combinatorial algorithm minimizing submodular functions strongly poly nomial time combin 
theory ser 

shapley cores convex games int 
game theory 
