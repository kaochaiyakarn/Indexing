mixed linear non linear logic proofs terms models preliminary report benton university cambridge intuitionistic linear logic expressive power intuitionistic logic 
course modality 
benton bierman hyland de paiva term assignment system ill associated notion categorical model modality modelled comonad satisfying certain extra conditions 
ordinary intuitionistic logic modelled cartesian closed category arises full subcategory category coalgebras comonad 
attempts explain connection ill il directly symmetrically giving logic term calculus categorical model system linear non linear worlds exist equal footing operations allowing pass directions 
start categorical model ill benton bierman hyland de paiva show equivalent having symmetric monoidal adjunction symmetric monoidal closed category cartesian closed category 
derive sequent calculus natural deduction presentation logic corresponding new notion model 
shorter version submitted proceedings annual conference european association computer science logic poland 
author address university cambridge computer laboratory new museums site pembroke street cambridge cb qg united kingdom 
email nick benton cl cam ac uk 
research supported serc fellowship eu esprit project 
contents contents background motivation functional programming logic semantics overview categorical picture isomorphism comonad comparison linear categories lnl model implies linear category linear category implies lnl model additives seely isomorphisms monad comparison cccs strong monads examples complete partial orders abelian groups lnl logic sequent calculus wrong way second wrong way behaved sequent calculus cut elimination cut elimination semantic equality variations introducing additive non linear contexts variations parsimonious presentation natural deduction lnl terms natural deduction rules term assignment normalisation reduction translations ill lnl logic lnl logic ill results translations contents background concerns variant intuitionistic fragment girard linear logic gir 
known linear logic contain structural rules weakening contraction reintroduced controlled way unary operator written pronounced course bang 
sequent calculus rules promotion dereliction contraction weakening rules allow ordinary intuitionistic logic interpreted linear logic example called girard translation 
benton bierman hyland de paiva formulated natural deduction presentation multiplicative exponential fragment ill term calculus extending propositions types analogy linear logic categorical model linear category 
multiplicative part logic modelled symmetric monoidal closed category smcc 
standard understood 
modality modelled monoidal comonad smcc required satisfy certain extra non trivial conditions 
extra conditions sucient ensure category coalgebras comonad contains full subcategory cartesian closed models interpretation il ill whilst view linear logic primary ordinary logic merely part linear logic appealing particularly takes seriously claims linear logic logic logic necessarily best way seeing situation 
tries symmetric view relationship il ill starting model theoretic perspective worth trying give motivation worth doing 
motivation functional programming practical point view number reasons standard linear term calculus ltc considered unsuitable basis linear functional programming language 
firstly linear functional programming verbose unnatural whilst linear term calculus useful intermediate language compiler appropriate language everyday programming 
linearity visible programmer appears preferable extension traditional non linear language write occasional linear function order deal input output place update 
second fundamental problem despite considerable research ort precise way linear language help deliberately referred vaguely input output place update clear 
published proposals linear types control describe intensional features functional programs type systems loosely inspired linear logic 
systems category pragmatically extremely successful obvious example language clean 
type system clean bs incorporates uniqueness operator roughly making non linear types linear :10.1.1.36.3338
sense dual linear logic allows linear types treated non linearly 
unique types clean add destructive updates language clean referentially transparent way 
currently somewhat speculative aim described provide sound mathematical logical basis type system clean 
motivated encouraged similarities clean calculus lnl term calculus fact researchers looking practical implementations linear languages come systems include aspects lnl term calculus 
example lincoln mitchell linear variant lm fairbairn wray instruction machine fw divides memory spaces corresponding linear non linear objects 
similarly wadler active passive type system wad separates linear non linear types interesting way 
mentioned wadler earliest attempts de ne linear type system functional language agged linear types exception rule wad reverted cat annotating non linear types :10.1.1.31.5002
jacobs jac independently described sequent calculus inspired clean uniqueness types may interpreted linear categories extra simplifying assumptions sucient eilenberg moore category coalgebras cartesian closed 
jacobs logic turns essentially lnl logic discuss section 
logic described fairly strong sense equivalent ordinary ill system possibly lead better linear programming language 
rst answer re ne ill distinct lnl terms correspond ltc term 
second answer logical systems denotationally equivalent may di erent dynamic proof theoretic behaviours 
speculations viewed motivation studying logic 
formal results concerning example memory graphs programs written language lnl term calculus 
logic logical point view interest girard system lu gir related systems multi sets formulae occuring sequents split di erent zones 
formulae zones treated classically whilst zones treated linearly 
intuitionistic logics inspired lu proposed plotkin plo wadler wad :10.1.1.49.4346
desirable study proof model theory systems directly treating syntactic sugar example ordinary linear logic verify possible treat syntactic sugar 
logic turn equivalent subsystem lu super cial di erences presentation fact lnl logic zones formulae linear conventional 
abuse notation writing semicolon formulae di erent overview semantics categorical perspective natural explore symmetric situation starts smcc ccc adjoint functors smcc sucient extra structure ensure existence ccc 
particularly true light fact de nition linear category arrived proof theory linear logic hidden agenda desire structure able derive appropriate ccc model 
fair say de nition linear category surprisingly complicated looking simpler models simpler presentations models idea 
pratt suggested comonad modelling fundamental adjunctions arises pra 
overview initial motivation comes categorical picture sketched previous section explored rst section 
de nition little precise shall show situation leads comonad linear part model automatically satis es extra conditions required linear category gives sound model ill including operator 
furthermore converse holds linear category gives rise pair categories 
alternative simpler de nition constitutes model ill seen giving purely category theoretic reconstruction linear category model ill exactly obtains attempts directly model interpretation il ill 
interesting feature model gives rise strong monad ccc part 
obtains model just lambda calculus moggi computational lambda calculus mog mog 
may shed light monads versus comonads debate occasionally arisen programming language theory 
shall see strong monads arise way connection quite neat hope 
section looks logic term calculus associated new notion model 
brief description unsatisfactory versions logic formulate sequent calculus presentation satis es cut elimination give equivalent natural deduction system 
gives curry howard correspondence interesting term calculus combines usual simply typed lambda calculus linear lambda calculus 
consider translations directions new term calculus linear calculus introduced 
fairly self contained assumes basic knowledge category theory say adjunctions familiarity linear logic understanding typed lambda calculus curry howard correspondence 
nodding acquaintance previous linear term calculus categorical models ill desirable 
kinds 
say model justi able terms proof theory proper proof theoretic account rules merely translation il proofs ill proofs exists correct model ill able re ect translation semantically 
preliminary report doubtless contains errors omissions 
certainly leaves plenty obvious questions unanswered 
comments questions suggestions improvement welcome 
categorical picture aim logic terms categories correspondence similar intuitionistic logic simply typed lambda calculus cartesian closed categories categorical vertex triangle consists essentially 
cartesian closed category 
symmetric monoidal closed category 
pair functors left adjoint 
intuitively requirement functors adjoint understood saying interpretation il ccc ill smcc 
need categorical model satisfy extra conditions hope modelling logic term calculus 
necessary functors unit counit adjunction behave respect monoidal structures categories 
reason handle contexts correctly structure implied comma context represented appropriate tensor product 
need extra structure arises example models computational lambda calculus monad strong linear categories comonad symmetric monoidal 
extra conditions shall impose ad hoc just required ensure coherence 
gives de nitions proofs elementary form noted morally regard place category symmetric monoidal categories context extra monoidal conditions arise naturally 
view instance general principle concerning categorical modelling programming languages expressed moggi mog studying complex language category cat small categories functors natural transformations may adequate may replace cat di erent category objects capture better fundamental structure language fundamental structure modelled categorical concepts :10.1.1.41.840
de nition monoidal category category equipped bifunctor object natural isomorphisms traditional shall say little important issue 
ian stark bringing quote attention 
categorical picture satisfy pair coherence diagrams de nition symmetric monoidal category smc monoidal category natural transformation satisfying coherence conditions note cartesian category nite products smc 
de nition symmetric monoidal closed category smcc symmetric monoidal category functor speci ed right adjoint 
object natural bijection symmetric monoidal closed categories called autonomous categories 
de nition cartesian closed category ccc smcc tensor product cartesian 
whilst wish consider functors preserve structure nose natural isomorphism shall take class functors preserving structure 
de nitions 
de nition monoidal categories monoidal functor functor equipped map natural transformation mx satisfy coherence conditions de nition symmetric monoidal symmetric monoidal functor monoidal addition satis es coherence condition de nition symmetric monoidal functor coherence diagrams redundant follows diagram 
note categorical picture identity functor symmetric monoidal symmetric monoidal functors composed obvious way composite usual composition functors comparison natural transformation gfx gf mx fx fy similarly nullary version 
routine check gf symmetric monoidal functor symmetric monoidal categories symmetric monoidal functors form category 
de nition monoidal functors mc mc monoidal natural transformation natural transformation compatible comparison maps sense diagrams commute de nition symmetric monoidal categories symmetric monoidal adjunction ordinary adjunction functors symmetric monoidal functors unit counit adjunction monoidal natural transformations respect natural monoidal structure composite functors de ned 
having basic de nitions position de ne precisely categorical model sketched earlier 
de nition linear non linear model lnl model consists 
cartesian closed category 
symmetric monoidal closed category 
pair symmetric monoidal functors form symmetric monoidal adjunction shall usually range objects objects spelling de nition bit detail means pair isomorphism natural transformations gf fg satisfy triangle laws adjunction ga ga ga ga fx fx fx fx monoidal natural transformations means diagrams commute gf fx fy gfx fx fy mx fga ga gb fg mga gb gf fg isomorphism important consequence de nition lnl model natural transformations mx fx fy ga gb nullary versions maps gi family maps fx fy transpose fx fy gfx fg fx fy fx fy fx fy fx fy categorical picture map fgi fn straightforward check components natural transformation 
get collection maps possible direction viz 
ga gb 
proposition lnl model fact monoidal adjunction maps mx components natural isomorphism inverses furthermore map isomorphism inverse proof 
shall just prove rst isomorphisms second similar 
firstly need show mx gfx fgf fg fx fy fx fy fx fy fg mx fx fy hj mx square right commutes naturality whilst left commutes applied earlier square says monoidal 
triangle bottom triangles adjunction path left hand side top right hand side equal bottom required 
secondly claim mx fx fy follows similar diagram fx fy gfx fx fy fg fx fy mx fx fy hj fx fy fx fy comonad comparison linear categories square left commutes naturality right monoidal 
triangle bottom commutes applications triangle laws adjunction outer path equal bottom trivially equal identity 
preserves monoidal structure isomorphism merely comparison 
say strong functor 
converse strong functor adjoint adjoint fact adjunction unique monoidal structure 
case means part de nition lnl model deriving equally started de ned composite pga gb ga gb fact crop section 
course lot interesting structure lnl model 
adjunction induces comonad monad discuss 
categories appropriate monad triple comonad cotriple category adjunction arise resolution triple cotriple 
contrast proposed models intuitionistic linear logic assume initial terminal category resolutions 
comonad comparison linear categories comonad fg fg fg counit adjunction natural transformation components fg 
writing fg obtain usual comonad diagrams lemma comonad symmetric monoidal symmetric monoidal functor monoidal natural transformations 
proof 
clearly symmetric monoidal functor 
monoidal structure natural transformation components map de nitions mga gb monoidal part de nition lnl model 
case requires easy checking 
de ned model multiplicative exponential fragment intuitionistic linear logic follows categorical picture de nition linear category speci ed data 
symmetric monoidal closed category 

symmetric monoidal comonad 
monoidal natural transformations components da da commutative comonoid da coalgebra maps coalgebra maps free coalgebras preserve comonoid structure 
lnl model implies linear category lnl model includes de nition part de nition just seen lemma satis es part 
furthermore plausible candidates da def ga ga unique map ga terminal object da def pga ga 
ga 
ga diagonal map ga ga ga embark showing satisfy conditions ensure linear category 
reader prepared take trust may prefer skip straight corollary 
lemma da de ned components natural transformations 
proof 
obvious result general facts composition application functors natural transformations 
example check da db note sense functors 
symmetric monoidal easily seen true 
see proof lemma details 
exactly means spelled proof lemma 
comonad comparison linear categories expands give fga gb gb ga ga fga fga 
gb gb gb 
ga ga ga fgf gf gf fgf fgf left hand square commutes applied naturality 
naturality naturality similar 
lemma monoidal natural transformations 
proof 
rst explicit symmetric monoidal structure functors 
require natural transformation map 
clearly take veri cation coherence conditions showing symmetric monoidal trivial 
need natural transformation components map take composite iso iso represents combination natural isomorphisms natural coherence conditions making symmetric monoidal functor satis ed trivial 
lemma statement diagrams commute da db da choice doesn matter iso pick 
categorical picture verify couple 
firstly triangle expands lls follows fgi gi triangle commutes applied triangle commutes uniqueness maps 
square commutes functor proposition 
square expands lls omitting subscripts natural transformations fg ga gb fga top left square commutes naturality bottom left fact terminal 
triangle bottom right hand side quadrilateral top right hand side commute triangle comonad comparison linear categories middle left right hand side diagram commutes monoidal functor remaining quadrilateral naturality filling diagrams left exercise diagram chasing reader 
larger fundamentally similar lemma da commutative comonoid 
proof 
requires diagrams commute da da da da da da da fairly straightforward 
example rst diagram expanded lled follows fga fga ga ga fga ga ga fga fga ga fga fga 
hy regions clockwise top rst consequence obvious facts cartesian products fact give commutative comonoid structure 
second commutes monoidal functor 
third fth fourth natural transformation 
diagrams commute similar reasoning 
lemma da coalgebra morphisms respect canonical coalgebra structures see section 
categorical picture proof 
need pair diagrams da second dealt fga fga ga ga fga ga ga fgf ga ga fg fga fga fg fga fga 
fgf 
fg fg au large square left commutes naturality 
triangles commute region far right commutes naturality middle monoidal 
diagram similar 
lemma coalgebra map 
free coalgebras preserves comonoid structure comonad comparison linear categories proof 
means pair diagrams commute db da second expanded hj hj regions middle top rst commutes assumption coalgebra morphism second third fourth naturality respectively 
remaining regions easily seen commute expand follows fga fga ga ga fga fg fga fga 

hj triangle right commutes top left naturality 
middle region commutes simply de nition categorical picture previous lemmas shown corollary lnl model linear category 
linear category implies lnl model section sketch proof converse corollary 
whilst largely matter recalling results proved bie doing carefully obtain slightly better understanding situation 
assume linear category de nition 
need show gives rise ccc symmetric monoidal adjunction de nition 
recall comonad gives rise categories algebras eilenberg moore category objects coalgebras ha morphisms coalgebra morphisms 
kleisli category 
full subcategory objects free coalgebras 
quite common de nition de nitions equivalent 
categories comes pair adjoint functors 
ha 
note overloading 
inclusion functor 
lemma linear category nite products 
proof 
terminal object 
unique map ha terminal object ha product ha hb ha hb 
projections diagonals composites hb 
ha da easily checked satisfy relevant conditions 
general reason eilenberg moore category cartesian closed reason internal hom arbitrary pairs comonad comparison linear categories coalgebras 
extra conditions sucient ensure happen requiring core exive pairs bie simply jac 
non trivial examples conditions hold shall consider nd appropriate ccc 
lemma free coalgebras 
internal hom free coalgebra 
furthermore internal hom free coalgebra 
proof 
claim ha def internal hom 
follows adjunction closed structure coalgebra hc bijections hc hc hc giving coalgebra structure particular arising product instance line hc ha required 
notice cartesian category object take 
furthermore product objects take 
previous lemma lemma full subcategory exp eilenberg moore category having objects coalgebras cartesian closed contains kleisli category 
note kleisli category general cartesian closed product free coalgebras necessarily free 
shall consider case happen section 
general case lemma full subcategory exp consisting nite products free coalgebras cartesian closed 
categorical picture situation pictured exp claim cccs give rise lnl model 
follows stand exp 
easy see adjoint functors regarded going merely remains show symmetric monoidal adjunction 
lemma forgetful functor symmetric monoidal 
proof 
need natural transformation components mx map satisfying certain conditions 
ha hb respectively amounts mx mx easily seen 
lemma free functor symmetric monoidal 
proof 
need natural transformation components ga gb map gi satisfying conditions 
spelling bit coalgebra map 
symmetric monoidal structure gives map underlying objects coalgebras coalgebra map follows immediately fact monoidal natural transformation 
nullary case similar 
de nition satis es conditions making symmetric monoidal immediate fact symmetric monoidal 
lemma unit adjunction gf monoidal natural transformation 
may sensible de nition category linear resolutions initial exp terminal idea followed 
comonad comparison linear categories proof 
far explicit de nition ha 
answer just ha readily seen coalgebra morphism de nition coalgebra natural de nition coalgebra map 
ha monoidal completely trivial de nition product coalgebras 
lemma counit fg adjunction monoidal natural transformation 
proof 
assumption 
preceding results corollary linear category gives rise lnl model general unique 
course linear category may choices lead lnl model 
start arbitrary lnl model comprising associated data construct linear category 
general reason equivalent exp particular cases distinction cccs collapse 
additives seely isomorphisms far concentrated relationship multiplicative fragment ill fragment il 
consider brie happens lnl model equivalently linear category extra structure required model additive linear connectives non linear sum 
simplest case smcc part lnl model nite products modelling additive connective 
functor preserves limits right adjoint particular ga gb note terminal object 
proposition obtain natural isomorphisms isomorphisms central seely proposed model ill see proposed interpreting il kleisli category 
see bie bie critique seely semantics shall merely show linear category products kleisli category cartesian closed 
isomorphisms explicit de nitions terms data determining linear category def def categorical picture explicit de nitions inverses left exercise reader 
lemma linear category products product free coalgebras free coalgebra 
proof 
amounts checking diagram easy consequence naturality fact coalgebra morphism 
corollary linear category products kleisli category cartesian closed 
proof 
lemma says coincides cartesian closed lemma 
products relatively easy deal correspondence linear categories lnl models extends trivially linear categories nite products lnl models products smcc part 
coproducts slightly problematic 
whilst appropriate extension lnl model obvious just require nite coproducts correspond quite simply hope linear categories coproducts 
diculty whilst lnl model coproducts certainly gives rise linear category coproducts converse appear necessarily true 
assume linear category nite coproducts nite coproducts de ne coproduct ha hb inl ha inr hb easily checked satisfy appropriate conditions 
general reason cccs identi ed arising closed coproduct 
fortunately 
weak nite coproducts kleisli category obtained de ning def example left injection inl weak coproduct easy check 
monad comparison cccs monad comparison cccs monad gf gf gf unit adjunction natural transformation components gf fx 
writing gf obtain usual monad diagrams tx tx tx tx tx tx easy see symmetric monoidal monad symmetric monoidal functor monoidal natural transformations simply monad category sm functors monoidal natural transformations str 
cartesian closed categories necessarily symmetric monoidal monads focus interest models moggi computational lambda calculus mog mog 
de nition commonly terms strong monads brief digression 
de nitions results various kinds monads various kinds monoidal categories due anders kock interested reader see koc cited 
strong monads de nition monoidal category monad strong monad natural transformation called tensorial strength components tb diagrams commute ta ta tb tc tc categorical picture tb tb symmetric monoidal symmetry twisted tensorial strength ta case construct pair natural transformations components ta tb ta tb monad said commutative proposition symmetric monoidal category strong monad 
map monoidal functor 
monoidal natural transformations respect monoidal structures 
symmetric monoidal functor commutative 
model computational lambda calculus crole pitts call ccc cro cp cartesian closed category strong monad 
implies lnl model strong monad ccc part model includes ccc 
monad commutative symmetric monoidal functor 
case strong monads cccs commutative important monads arising computer science non commutative example free monoid monad list 
latten category sets 
certainly case interesting ccc arise lnl models 
having said important monads arising semantics lifting various powerset powerdomain commutative theory commutative strong monads cccs independent interest 
examples examples preceding material give couple concrete examples lnl models 
rst example important computer science perspective major motivation 
second arises common commonly cited mathematical examples symmetric monoidal closed category 
complete partial orders category pointed cpos cocomplete partial orders element strict bottom preserving continuous maps 
symmetric monoidal closed category tensor product called smash product identity tensor point space internal hom strict continuous function space 
fact binary products coproducts cartesian product coalesced sum respectively 
choice couple obvious choices ccc give lnl model 
take category pointed cpos continuous necessarily strict maps inclusion functor lifting functor monoidal structure evident isomorphism 

case equivalent kleisli category lifting comonad note cartesian closure kleisli category follows fact products 
strong coproducts weak ones alternative choice category necessarily pointed cpos called predomains continuous maps inclusion lifting functors 
equivalent eilenberg moore category lift comonad products coproducts previous general arguments turns cartesian closed 
abelian groups category abelian groups group homomorphisms 
symmetric monoidal closed abelian group generated set tokens fa bg subject relations categorically de ned homomorphism universal bilinear maps abelian groups 
unit group integers addition internal hom group homomorphisms multiplication inherited fact direct sum product coproduct trivial group 
category sets prototypical example cartesian closed category free forgetful functors respectively 
gives lnl model monoidal structures functors comprehensible notation ga gb 
categorical picture gz 
mx fx fy 

fairly straightforward check give lnl model 
comonad takes abelian group free group underlying set 
evaluation insertion generators 
example situation described section equivalent kleisli category comonad lnl logic lnl models course supposed models logical system 
corollary says models intuitionistic linear logic de ned girard form de nition lnl model suggests interesting alternative presentation logic 
basic idea starts independent logics corresponding categories adds operators correspond way adjunction categories 
obtain logic proof theory entirely straightforward 
attempting precise rules lnl logic say little aiming 
di erent researchers approach logic di erent backgrounds di erent motivations partly re ected question describes logic type theory proof theory categorical logic categorical proof theory 
course fact confusion possible heart constructive logics exciting objects study lead certain lack consensus constitutes behaved system results important 
take propositional intuitionistic logic touchstone properties system goals gentzen style sequent calculus presentation preferably local cut elimination subformula property equivalent natural deduction system term calculus strong normalisation natural class categorical models re ects accurately just provability equalities proofs cut elimination proof normalisation 
minus side prepared accept certain syntax commuting conversions natural deduction shall ignore hilbert style axiomatic presentations entirely 
furthermore want logic contains linear non linear propositions treated way re ects symmetric presentation intended categorical models 
keeping earlier conventions naming objects range linear propositions conventional ones 
shall 
range linear contexts nite multisets linear propositions non linear ones 
decorate indicate subsystem belong 
means fx fx similarly classes propositions shall dealing de ned grammar fx ga resp 
ranges unspeci ed set atomic linear resp 
non linear propositions 
sequent calculus sequent calculus rules may divided main classes structural rules weakening exchange cut rule allows proofs composed logical rules 
logical rules divided left right rules connective 
behaved sequent system certain symmetry left right rules leads cut elimination theorem 
furthermore logics cut rule rule formula premises subformula lnl logic formula 
systems cut elimination theorem means provable sequent proof mentions subformulae important implications example proof search 
logics start familiar viz 
exponential free multiplicative fragment propositional intuitionistic linear logic fragment ordinary intuitionistic logic 
sequent presentations properties desire 
systems enriched combined give lnl logic 
shall approach question rst outlining unsatisfactory answers 
wrong way obvious answer take familiar sequent calculi add rules functors unit counit adjunction 
usual linear rules including cut deducing sequents form usual non linear rules including contraction weakening cut rule deducing things form new rules fg left fga fx gf right gfx ga categorically interpret proofs conventional sequents maps 
proofs linear sequents am maps logical connectives interpreted obviously corresponding piece categorical structure 

henceforth omit semantic brackets think get away 
interpretations new rules follows fg left fga 
fx fx 
fy gf right gfx sequent calculus ga 
ga ge gb notice monoidal structure model interpret functor rules 
coherence conditions model sucient ensure written fact determined isomorphism general sloppy including natural isomorphisms strictly included categorical interpretations logical rules 
interpretations remaining rules completely standard omit moment note cut rules interpreted composition categories 
point view provability collection rules ne proves exactly sequents intend 
point view proofs things 
whilst logic allows express di erent intended proofs sequent morphisms free lnl model equality morphisms re ected proof theory 
shows obviously fact cut elimination fails formulation logic 
surprised rules unsatisfactory form strange functor rules introduce connective sides turnstile whilst rules introduce connectives 
failure cut elimination seen considering sequent fx fx fx 
sequent certainly provable rule rule cut free proof 
particular problem xed slightly ad hoc way adding contraction linear assumptions form fx problems cut gf right gfx fx gfx ga cut ga cut general removed 
rewrite replaces cut simpler cut introduces new cut original form formula 
second wrong way second set rules shall consider looks rst fact fails proof theory surprise 
system worth mentioning simple certain appeal categorical point view 
rst system start separate logics add just rules inverse right ga ga left rules course syntax alternative presentation adjunction model terms natural bijection hom sets fx ga lnl logic turns system proves exactly sequents previous 
rule system derivable admissible 
example rule rst system admissible second system ga ga left fga ga ga left fga cut fga fga fga cut fga fga right ga ga gb reader may surprised equivalence systems 
particular way monoidal structures functors arise rst presentation clear second system mention left 
monoidal structure come 
answer section categorical interpretation second system uses called earlier adjunction sucient ensure monoidal 
fx fx right 
gf 
gm fx fx ge ga 
ga left fx fx 
fga second systems fails cut elimination may seen considering situation right ga fga right ga gb cut gb trying nd cut free proof fx 
reason rejecting second system cut free proofs subformula property 
behaved sequent calculus fortunately way logic proof theory 
trick allow conventional non linear formulae appear assumptions linear sequent 
typical linear sequent looks xm interpreted morphism form fx sequent calculus non linear sequents constrained purely non linear antecedents interpreted morphisms 
usually abuse notation writing linear sequents form need linear non linear formulae confused 
important understand really just kind comma antecedent exchange rule really allows linear non linear formulae 
understood potentially misleading notation confusing alternative shall return introducing new metavariables ranging arbitrary propositions contexts 
sequent rules lnl logic shown figures 
points noted rules 
cut rules type cut formula ultimate lc cut rule linear formula cut non linear sequent 
non linear left rules including contraction weakening splits versions type sequent 
rules look pleasant unsatisfactory systems left right rule ect rest sequent 
annotations strictly speaking redundant implicit consequent 
easy verify proposition sequent rules lnl logic equivalent terms provability systems earlier 
precise lnl logic earlier systems 
lnl logic earlier systems 
interpretation lnl logic lnl model fairly straightforward gone 
assume reader familiar interpretation standard logical connectives just give details interpretation cut rules rules 
cut elimination turn question cut elimination lnl logic 
usual proof describes procedure cuts proof locally rewritten making proof general larger percolate leaves eventually disappear 
usual ne details making induction go slightly delicate 
particular start replacing cl cut cc cut rules ary variants yielding equivalent system call lnl cl cut cc cut def attempt symmetric system allowing linear assumptions conventional sequents gives system cut elimination 
lnl logic axioms axiom axiom structural rules contraction contraction weakening weakening cut rules cl cut cc cut 
ll cut 
rules left left left left right right rules left 
right left right sequent calculus presentation lnl logic sequent calculus rules left left right rules right 
left 
rules right fx left fx rules left gb right ga sequent calculus presentation lnl logic ii 
fx cl cut fy fx 
right fx fx 
fx fx left fx left fx fx right gf gm fx ge ga categorical interpretation lnl logic sketch lnl logic rules easily seen admissible lnl clear cut elimination lnl implies cut elimination lnl 
de ne rank jaj resp 
jxj linear resp 
non linear proposition number logical connectives proposition particular rank atomic propositions 
cut rank proof maximum ranks cut formulae cut free 
depth proof length longest path proof tree depth axiom 
key proof lemma shows transform single cut removing replacing simpler cuts lemma cut reduction 
lnl proof lnl proof jxj exists proof jxj 
lnl proof lnl proof jxj exists proof jxj 
lnl proof lnl proof 
jaj exists proof 
jaj 
proof 
parts proved simultaneously induction 
consider cases classes rules proofs 
proofs logical rules introduce cut formula ends right rule corresponding left rule 
interesting case consider subcase turn right left case right fx fx left fx induction hypothesis applied proofs exists proof jf xj jxj 
proof cl cut double line stands number contractions 
cut rank max jxj equal jxj jf xj required 
note obvious simpli cation case avoid appeal induction hypothesis altogether letting simply cl cut sequent calculus right left right ga ga left ga applying induction hypothesis obtain proof jaj 
ll cut cut rank max jaj jaj done 
obvious simpli cation 
right left right left result applying induction hypothesis proof jx jxj jy 
cc cut cut rank max jxj jx remaining subcases similar left reader 

rule right logical rule 
dealt simple permutations rules 
consider remaining possibility rule form turn 
representative cases contraction sequent situation contraction lnl logic induction applied proof jy contraction clearly jy done 
cc cut sequent cc cut induction applied form proving jy cl cut assumption jy particular jxj jy means max jxj jy required 
left sequent 
left 
induction applied proof 
jcj 

left 
max jcj required 
axiom sequent base cases induction 
simply recall jaj assumption 

cut formula minor formula rule cases dealt fairly straightforward permutations omit 

rule contraction cut formula 
ary cut rules 
sequent calculus contraction contraction induction proving jxj required 
contraction similar 

rule weakening introducing cut formula 
weakening weakening induction proving jxj required 
simpli cation case just jxj assumption 
weakening similar 

axiom cut formula 
trivial 
lemma lnl proof sequent 
proof sequent 
proof 
induction 
inference cut simply apply induction hypothesis 
assume inference cut formula cases cuts non linear formulae treated just way 
jaj apply induction hypothesis 
leaves case rule cut jaj 
ll cut 
clearly jaj induction construct proving proving 
jaj 
lemma construct proving 
jaj required 
lnl logic theorem cut elimination proof sequent 
algorithm yields cut free proof sequent 
proof 
follows immediately induction lemma 
important note proof cut elimination theorem says lot theorem true stated 
proof gives procedure simplifying proofs applying successive rewrites cut free proof reached 
rewriting steps purely local cut free proofs subformula property 
note algorithm described cut elimination proof non deterministic freedom choosing order rewrites applied 
hand order transformations applied constrained strictly necessary order induction 
shall consider question extent cut elimination strongly normalising 
cut elimination semantic equality cut elimination process gives notion equality sequent proofs obtained extending step proof rewriting relation algorithm congruence equivalence relation compositional proof trees 
intend syntactic equality modelled soundly equality lnl models case theorem cut elimination procedure described section modelled soundly lnl model 
proof 
basic idea show proof simpli ed interpretations proofs equal morphisms model 
done modifying statement proof cut reduction lemma lemma show semantic equality preserved 
go tedious details just sketch cases right left cut reduction right ga left ga cl cut reduces ll cut csl referees asserted cut elimination strongly normalising don see justify lot 
sequent calculus corresponds categorically commutation fx fx 
fgf 
fg fx fx fga fg fg pq easily seen follow triangle laws adjunction naturality 
variations introducing additive non linear contexts large number possible variations sequent rules lnl logic 
natural treat non linear antecedents additive multiplicative linear antecedents multiplicative course 
advantage closer correspondence natural deduction system shall introduce section reasons notational device separating linear non linear parts antecedents linear sequents 
additive variants rules change shown 
remaining rules remain unchanged 
wish distinguish additively formulated sequent system shall refer lnl lnl lnl logic axioms axiom axiom cut rules cl cut cc cut 
ll cut rules right right rules 
right right rules left left rules 
left 
additive variations lnl logic sequent calculus facts concerning lnl easily veri ed proposition 
systems lnl lnl equivalent rule system admissible 
weakening contraction rules lnl admissible lnl weakening contraction 

cut elimination holds lnl variations parsimonious presentation mentioned way presenting logic new metavariables range linear non linear propositions mixed contexts 
lnl concise way shown 
presentation equivalent shown figures 
disadvantage obscuring fact really distinct kinds sequent 
rules essentially jacobs jac contains accounts examples concrete categorical models 
description semantics somewhat di erent 
jacobs starts linear category satisfying extra conditions category coalgebras cartesian closed 
interprets sequents morphisms applying interpretation non linear formulae way interpreted linear sequents 
causes problems clear interpret right example 
solution mixture syntax semantics verify provable sequents mention non linear formulae satisfy called conventional witness property 
means interpreted morphisms image coalgebra morphisms 
property necessary complete interpretation shown induction derivations 
interestingly proof incomplete uses crucial easily veri ed fact mentioned lemma provable parsimonious sequent non linear consequent non linear formulae 
fact presentation logic jacobs lemma true treated derived formula de ned cf 
proposition 
left rule just happens linear formula cease true left rule explicitly nullary version introduce linear antecedents non linear formulae proof theory break 
slightly subtle point rule appears rst lnl logic axiom structural rules contraction weakening cut rule cut rules left left right right rules left right left right rules left right rules left right rules left fx right fx rules left gb right ga parsimonious presentation lnl logic natural deduction lnl terms sight valid semantics jacobs cause conventional witness property fail prevent interpretation 
case observed importance previous lemma natural interpret sequents non linear consequents morphisms cartesian closed category rst place done 
natural deduction lnl terms section natural deduction formulation lnl logic procedure normalising deductions 
applying curry howard correspondence derive term assignment system set reduction rules mixed linear non linear lambda calculus 
natural deduction rules usual way natural deductions trees assumptions leaves root 
whilst presentation lnl logic possible shall just give sequent style natural deduction system 
reason mainly reasons term assignment wish give natural deduction analogue lnl lnl mixture shared distinct assumption sets involves clearly shown sequent style presentation 
natural deduction system characterised having elimination rules logical connective left right rules sequent calculus 
natural deduction rules shown 
call inference system nd 
note elimination rule builds substitution 
elimination rules exact inverses 
rule corresponds promotion ordinary linear logic 
restriction assumptions premiss non linear corresponds restriction promotion rule 
need build substitution rule 
natural deduction rules split versions natural deduction formulation automatically parsimonious 
important fact natural deduction system satis es substitution property 
essentially means cut rules sequent calculus presentation admissible natural deduction lemma rules admissible natural deduction formulation lnl logic cl subs cc subs 
ll subs lnl logic intro intro elim elim 
intro 

elim 
intro 
elim 
intro elim intro 
elim intro fx fx 
elim 
intro ga ga elim natural deduction presentation lnl logic natural deduction lnl terms proof 
induction derivation right hand premiss 
need lemma weakening rules sequent calculus admissible natural deduction system 
previous lemmas establish connection sequent calculus natural deduction formulations logic proposition functions nd lnl lnl nd map proof system proof sequent system 
furthermore natural deduction ns equal 
proof 
fairly obvious induction 
start looking de nition axioms map axioms 
rules right rules 
example intro maps right elimination rules combinations left rules cuts 
example 
elim 
maps 
left 
ll cut 
function mapping sequent proofs natural deductions fairly straightforward axioms translated axioms 
instances cut rules translated appropriate admissible substitution rules lemma 
right rules introductions 
lnl logic left rules eliminations modulo structural 
example left maps elim weakening cc subs similarly proof left fx maps fx fx elim fx identity veri ed induction 
proof easily obtained assistance term calculus introduce 
clearly categorical interpretation natural deduction proofs lnl model 
way obtain interpretation apply translation interpretation sequent proofs gave earlier fairly easy write directly get answer 
clauses direct interpretation shown 
term assignment just simply typed lambda calculus arises notation proofs natural deduction system ordinary intuitionistic propositional logic annotate proofs system nd derive mixed linear non linear term calculus 
term assignment system shown 
linear variables linear terms non linear variables non linear terms 
distinct linear contexts assumed mention disjoint sets linear variable names 
obvious forms kinds constructs 
refrain giving detailed de nition free bound variables capture avoiding substitution reader able diculty 
lemma terms encode deductions uniquely derivable derivation uniquely determined term 
lemma derivable linear variable context variable exactly free occurence term non linear variables context may appear number times including zero typed term 
natural deduction lnl terms 
intro fx fx 
fy fx fx elim dup fx dup fx 
fx fx fx fx intro 
gf 
fx fx ga 
gb elim fx fx 
categorical interpretation natural deductions sketch lemma restated include terms lemma substitution rules admissible lnl term calculus cl subs cc subs 
ll subs noted term calculus contains usual simply typed lambda calculus subsystem 
note contrast term assignment system intuitionistic linear logic explicit syntax weakening contraction calculus 
normalisation reduction look process normalisation natural deduction proofs logic associated reductions terms 
fundamental kind normalisation step removal detour deduction consists rule immediately followed corresponding elimination 
normalisation step intro elim pair consider turn lnl logic fst snd 





fx fx 

ga ga derelict lnl term assignment system natural deduction lnl terms deduction intro elim case intro followed elim similar 
deduction intro elim deduction denoted ll subs ll subs note asymmetric appears subs rule admissible rule actual deduction intended shorthand exactly obtained substituting derivation rst 
intro elim intro elim cc subs lnl logic intro elim ll subs intro fx elim cl subs intro ga elim normalisation steps natural deductions induce reductions associated terms 
shown 
natural deduction systems secondary class reductions commuting conversions caused rules parasitic formula 
lnl logic rules elimination rules rule arti cially prevent elimination pair reacting explicitly add certain 
basic pattern natural deduction looking 
elim natural deduction lnl terms fst snd derelict term calculus reductions rule parasitic formula elim elimination rule commutes 
elim case lnl logic parasitic formula linear elim elimination linear connectives means commuting conversions 
give conversions explicitly proofs merely list induced terms 
proofs easily reconstructed lemma 
reduction relations de ned precongruence closures clauses figures respectively 
write avoided mention raw terms known complete triviality proposition subject reduction reduction typed somewhat interesting fact term reduced categorical interpretation remains unchanged cf 
theorem 
theorem reductions commuting conversions soundly modelled interpretation natural deduction system lnl model 
small technicality conversion elim entirely local rewrite uses admissible weakening rule 
case entirely multiplicative formulation natural deduction system 
lnl logic term calculus commuting conversions translations know section lnl models linear categories equivalent 
done show direct relationship provability proofs lnl logic ordinary ill questions approached semantic point view completeness result lnl models moment shall just argue proof theoretically 
section relate lnl logic ill restricting attention natural deduction formulations equivalently term assignment systems comparable translations sequent calculus straightforward obtain omitted 
recalling linear term calculus ltc corresponds natural deduction presentation ill 
conjecture natural completeness theorem true see particular reason proof standard term model construction just haven done 
rst step list term category theory 
comprise equalities proof theory number naturality uniqueness equalities 
translations ax 

ef 






promotion 

promote 
contraction 
copy 
weakening 
discard dereliction derelict linear term calculus ltc ill lnl logic translation ill lnl logic particularly dicult 
ill proposition de ne linear lnl proposition inductively follows atomic fg theorem ill proof 
done induction derivation ill structure linear term 
exponential free rules completely straightforward just detail translations elimination rules 
easiest way translations just give translation terms terms determines translation proofs 
promotion translation promote fg lnl logic fresh 
tempted simplify translation fg moment consideration reveals expression typed 
interesting note boxing behaviour promotion rule maintained translation lnl logic rules involve change variable names 
note translation admissible substitution rule 
dereliction derelict derelict fresh 
version derelict meant usually clear context 
weakening discard fresh 
contraction copy fresh 
note just 
translate ill linear part lnl logic way provability preserved 
re ected follow translation lnl logic ill give 
lnl logic ill direction interesting 
basic idea translate linear part lnl logic essentially unchanged translate non linear part variant girard translation 
small technicality concerning atomic propositions lnl logic linear non linear atoms 
translate ill theory extra atomic proposition ax non linear atomic proposition lnl theory 
de ne ill proposition lnl proposition inductively follows atomic fx ax atomic ga translations note usually called girard translation il ill uses connective translate conjunction il done dealing multiplicative fragment ill moment 
include additives obviously alternative translation possible 
theorem 
lnl logic ltc term 
lnl logic ltc term proof 
proved induction lnl derivation 
translation slightly complicated fact treated conventional parts lnl contexts additive way easily match purely multiplicative contexts ill reason way translation depends context translation derivations logic terms 
reader able easily supply missing term annotations prove theorem stated 
translation axiom dereliction weakening translation axiom weakening lnl derivation ends intro induction ill derivations form omitting rule names reasons space 

contraction lnl logic lnl derivation ends elim induction ill derivations form 
promotion elim contraction lnl derivation ends intro fx induction derivation form 
promotion required 
fact operator lnl logic translates ill translation elimination rules identity 
remaining rules similar 
results translations translations ways lnl logic ill preserve provability 
probably translations natural 
clearly starts judgement lnl logic translates ill back lnl logic general get back original judgement 
nal judgment purely linear fragment lnl logic 
going cycle way identity theorem ill judgement result translating lnl logic back ill viz 
equal original judgement 
corollary translation ill lnl logic re ects preserves provability provable ill provable lnl logic 
translations proof 
trivial induction shows ill formulae rst part theorem immediate 
second part follows theorems 
natural question previous result extends proofs just provability 
certainly case result mapping ill proof lnl logic back syntactically identical original proof turns equal original proof equality ill proofs linear categories 
easiest way state prove result linear term calculus theorem ltc provable categorical equality relation ltc terms page 
proof 
induction structure omit hairy details case require repetition material earlier 
rst ll missing terms proof theorem prove number lemmas concerning way translation behaves respect admissible rules weakening contraction substitution lnl term calculus rules de ning translation 
terms arising directly composite translation general large certain amount care variable names simplify fairly easily 
new intuitively appealing characterisation categorical models intuitionistic linear logic 
presentation models basis de ning new logic uni es ordinary intuitionistic logic intuitionistic linear logic 
natural deduction presentation new logic gave curry howard correspondence mixed linear non linear lambda calculus 
rst sight tempted regard lnl logic logical interest glt 
hope shown case 
lnl logic natural class categorical models behaved proof theory sequent calculus natural deduction formulations 
links research mentioned lnl logic certainly merit study 
theoretical side remains done 
proved completeness theorem proved lnl term calculus strong normalising 
strong normalisation proof relatively easy translation argument previously linear term calculus ben computational lambda calculus 
nice better degenerate examples concrete models nd examples looking categories arising game semantics 
connections lnl logic lu related systems looked closely 
cited schellinx sch decorating conventional proofs give linear ones particularly interesting respect 
noted translations ill lnl logic behave respect equality claimed concerning translations reduction 
de nitive results example reduction preserved translations certainly positive results involve commuting conversions conventional rules 
obvious extensions system discussed 
rst consider additive connectives linear side disjunction coproducts conventional side 
touched brie section remains done relatively straightforward seen complication regarding coproducts lnl models compared coproducts linear categories 
consider adding inductive coinductive datatypes second order quanti cation logic 
particularly worthwhile light plotkin parametricity recursion logic plo 
practical side investigate lnl term calculus lends readily ecient implementation linear term calculus 
hope arrange implementation memory spaces corresponding subsystems lnl logic 
non linear space garbage collected usual way linear space contain objects satisfying useful memory invariant having pointer times exploited reduce space usage programs 
previous experience shows turning intuitively plausible hopes provably correct implementations non trivial task 
collaborators gavin bierman martin hyland valeria de paiva innumerable discussions logic terms categories 
gordon plotkin making led directly described barney useful conversations 
john reynolds diagram macros paul taylor proof tree macros typeset 
benton bierman de paiva 
computational types logical perspective 
preprint 
benton bierman hyland de paiva 
term assignment linear logic 
technical report computer laboratory university cambridge august 
benton bierman hyland de paiva 
linear lambda calculus categorical models revisited 
editor selected papers computer science logic volume lecture notes computer science 
springer verlag 
benton bierman hyland de paiva 
term calculus intuitionistic linear logic 
bezem groote editors proceedings international conference typed lambda calculi applications volume lecture notes computer science 
springer verlag 
ben benton 
strong normalisation linear term calculus 
journal functional programming 
appear 
available technical report university cambridge computer laboratory july 
bie bierman 
intuitionistic linear logic revised version phd thesis technical report computer laboratory university cambridge august 
bie bierman 
categorical model intuitionistic linear logic 
technical report computer laboratory university cambridge april 
bs barendsen smetsers :10.1.1.36.3338
conventional uniqueness typing graph rewrite systems 
technical report csi katholieke universiteit nijmegen december 
cp crole pitts 
new foundations xpoint computations fix fix logic 
technical report computer laboratory university cambridge august 
cro crole 
programming fixpoint type 
phd thesis computer laboratory university cambridge february 
available technical report 
fw fairbairn wray 
tim simple lazy machine execute supercombinators 
kahn editor proceedings conference functional computer architecture 
lncs springerverlag 
gir 
girard 
linear logic 
theoretical computer science 
gir 
girard 
unity logic 
annals pure applied logic 
glt 
girard lafont taylor 
proofs types 
cambridge tracts theoretical computer science 
cambridge university press 
jac jacobs 
conventional linear types logic coalgebras 
preprint university utrecht april 
koc kock 
cartesian closed monads 
math 
scand 
lm lincoln mitchell 
operational aspects linear lambda calculus 
proceedings th annual symposium logic computer science 
ieee 
mog moggi 
computational lambda calculus monads 
proceedings th annual symposium logic computer science ca pages 
mog moggi :10.1.1.41.840
notions computation monads 
information computation 
plo plotkin 
type theory recursion 
proceedings th conference logic computer science 
ieee computer society press 
pra pratt 
message categories mta ca electronic mailing list th november 
sch schellinx 
noble art linear decorating 
phd thesis university amsterdam 
see seely 
linear logic autonomous categories cofree coalgebras 
conference categories computer science logic volume ams contemporary mathematics june 
str street 
formal theory monads 
pure applied algebra 
wad wadler :10.1.1.31.5002
linear types change world 
broy jones editors programming concepts methods 
north holland 
wad wadler 
substitute linear logic projector slides 
winskel editor proceedings workshop part march aarhus denmark may 
available daimi pb computer science department aarhus university 
wad wadler :10.1.1.49.4346
taste linear logic 
sokolowski editors proceedings th international symposium mathematical foundations computer science number lecture notes computer science pages 
