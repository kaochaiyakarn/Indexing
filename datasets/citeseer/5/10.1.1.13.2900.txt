data exchange semantics query answering ronald fagin kolaitis ren miller popa ibm almaden research center uc santa cruz university toronto 
data exchange problem data structured source schema creating instance target schema reflects source data accurately possible 
address foundational algorithmic issues related semantics data exchange query answering context data exchange 
issues arise source instance may target instances satisfy constraints data exchange problem 
give algebraic specification selects solutions data exchange problem special class solutions call universal universal solution data required data exchange represents entire space possible solutions 
identify fairly general practical conditions guarantee existence universal solution yield algorithms compute canonical universal solution efficiently 
adopt notion certain answers indefinite databases semantics query answering data exchange 
investigate computational complexity computing certain answers context study problem computing certain answers target queries simply evaluating canonical universal solution 
data exchange data structured schema call source schema restructured translated instance different schema target schema 
data exchange tasks require data transferred existing independently created applications 
systems supporting restructuring translation data built decades ago 
early system ex press performed data exchange hierarchical schemas 
need systems supporting data exchange persisted years 
need pronounced terrain data exchange expanded proliferation web data stored different formats traditional relational database schemas semi structured schemas example dtds xml schemas various scientific formats 
address foundational algorithmic issues related semantics data exchange query answering context data exchange 
research carried authors visiting scientists ibm almaden research center 
kolaitis partially supported nsf iis 
miller partially supported research nserc 
calvanese 
eds icdt lncs pp 

springer verlag berlin heidelberg fagin data exchange problem 
data exchange setting source schema target schema assume disjoint 
independently created schema may constraints set sentences logical formalism addition way modeling relationship source target schemas 
essential element data exchange captured source target dependencies specify source data appear target 
dependencies assertions source query target query 
formally set st source target dependencies form formula logical formalism formula different logical formalism consider data exchange setting determined st 
setting gives rise data exchange problem instance source schema materialize instance target schema target dependencies satisfied source target dependencies st satisfied 
crucial observation may solutions instance data exchange problem 
conceptual technical questions arise concerning semantics data exchange 
solution exist 
solutions exist solution materialize properties reflects source data accurately possible 
solution efficiently computed 
consider semantics data exchange problem main issues data exchange 
believe main issue query answering 
specifically suppose query target schema instance source schema answering respect mean 
clearly ambiguity arising fact mentioned earlier may solutions result different solutions may produce different answers 
conceptual difficulty encountered context incomplete indefinite databases see instance find right answers query posed set possible databases 
general agreement context incomplete databases right answers certain answers answers occur intersection varies possible databases 
notion sense data exchange possible databases solutions instance adopt certain answers semantics query answering data exchange setting investigate complexity computing certain answers data exchange setting 
related important question certain answers query computed query evaluation target instance chose materialize 
data exchange vs data integration 
describing results data exchange briefly compare contrast data exchange data integration 
terminology notation overview data integration system triple global schema source schema set assertions relating elements global schema elements source schema 
specified suitable languages may allow expression various constraints 
generality data exchange setting st thought data integration system source schema form global schema source target dependencies st assertions data exchange semantics query answering data integration system 
practice data integration systems studied date lav local view systems gav global view systems 
lav system assertion relates element source schema query view global schema usually assumed target constraints 
gav system reverse holds assertion relates element global schema query view source schema source target dependencies st relate query source schema query target schema data exchange setting lav gav system 
thought glav global local view system 
similarities notwithstanding important differences data exchange data integration 
mentioned earlier data exchange scenarios target schema independently created comes constraints 
data integration global schema commonly assumed reconciled virtual view heterogeneous collection sources constraints 
fact notable exception studied impact key foreign key constraints query answering gav system research data integration taken target constraints account 
significant difference data exchange setting materialize finite target instance best reflects source instance 
data integration exchange data required 
query answering data exchange data integration certain answers standard semantics queries target global schema 
data integration source instances compute certain answers queries global schema 
contrast data exchange setting may feasible couple applications manner data may retrieved shared ondemand query time 
may occur instance peer peer applications share data maintain autonomy 
queries target schema may answered materialized target instance original source instance 
leads problem data exchange conditions queries certain answers computed just materialized target instance 
motivation clio 
results motivated experience clio prototype schema mapping data exchange tool development contributed :10.1.1.19.6308
clio source target dependencies semi automatically generated set correspondences source schema target schema dependencies data integration system compute certain answers target queries 
applications considered decoupled applications rewritten operate cooperatively required data integration 
reason early development clio recognized need go farther source instance generate single universal target instance result schema mapping 
designing algorithms clio creating target instance guided mainly intuition formal considerations 
noted long history data translation focuses high level data independent translation rules generating efficient executable translation programs 
find formal justification intuitive choices creating fagin target instance 
seeking formalize intuition justify choices clio led explore foundational algorithmic issues related semantics data exchange query answering setting 
clio supports schemas relational semi structured 
challenging issues arise relational case 
reason focus exclusively data exchange relational schemas extending types schemas subject going investigation 
summary results 
section formally introduce data exchange problem 
give algebraic specification selects possible solutions source instance special class solutions call universal 
precisely solution instance data exchange problem universal homomorphisms solutions instance 
show universal solution properties justify choice semantics data exchange problem 
note cal studied gav systems key foreign key constraints target 
means logic program simulates foreign key constraints constructed canonical database turns particular example notion universal solution 
declarative specification universal solutions go section identify fairly general practical sufficient conditions guarantee existence universal solution yield algorithms compute solution efficiently 
introduce concept weakly acyclic set target dependencies broad contain special cases sets full tuple generating dependencies full tgds acyclic sets inclusion dependencies 
show st set tuple generating dependencies tgds union weakly acyclic set tgds set equality generating dependencies egds source instance data exchange problem universal solution exists solution exists polynomial time algorithm determines solution exists produces particular universal solution call canonical universal solution 
results classical chase procedure 
note chase widely reasoning dependencies able find explicit fact chase produce instances homomorphisms instances satisfying dependencies consideration 
sections address algorithmic issues related query answering data exchange setting 
study computational complexity computing certain answers explore boundary queries answered data exchange setting exchanged target instance 
positive side union conjunctive queries easy show certain answers obtained evaluating arbitrary universal solution 
universal solutions solutions possessing property seen justification choice universal solutions data exchange 
follows universal solution computed polynomial time certain answers unions conjunctive queries computed polynomial time particular true dependencies st satisfy conditions identified section 
data exchange semantics query answering negative side dramatic change occurs queries inequalities 
hardness problem arises complexity reasoning uncertain databases data exchange se 
abiteboul duschka showed lav data integration system conjunctive queries views computing certain answers conjunctive queries inequalities conp complete problem 
lav special case data exchange setting canonical universal solution computed polynomial time follows np compute certain answers conjunctive queries inequalities evaluating canonical universal solution polynomial time computable universal solution 
take closer look conjunctive queries inequalities focusing number inequalities 
claimed lav setting conjunctive queries views computing certain answers conjunctive queries single inequality conp hard problem 
reduction correct different reduction unpublished full version shows computing certain answers conjunctive queries inequalities problem 
conjecture minimum number inequalities give rise conp hardness results 
show lav setting computing certain answers unions conjunctive queries inequalities disjunct conp complete 
result tight show general data exchange setting polynomial time algorithm computing certain answers unions conjunctive queries inequality disjunct claim false np 
certain answers unions conjunctive queries inequality disjunct computed time polynomial size universal solution 
point computation carried simply evaluating queries canonical universal solution 
question arises certain answers unions conjunctive queries inequality disjunct computed evaluating complex order query canonical universal solution 
final theorem provides strong negative answer question 
shows simple conjunctive query inequality order query certain answers computed evaluating canonical universal solution 
proof theorem novel combination ehrenfeucht fra ss games chase 
proofs results full version 
data exchange problem schema finite collection rk relation symbols 
instance schema function associates relation symbol ri relation ri 
set relations rk interpreting corresponding relation symbols sequel occasion abuse notation ri denote relation symbol relation interprets 
tuple occurring relation denote association call fact ifr schema dependency sentence logical formalism fagin sn tm disjoint schemas 
refer source schema si source relation symbols 
refer target schema tj target relation symbols 
similarly instances called source instances instances called target instances 
source instance target instance write instance schema si si tj tj source target dependency dependency form formula free variables logical formalism formula free variables logical formalism logical formalisms may different 
notation vector variables xk 
dependency dependency target schema formalism express target dependency may different source target dependencies 
source schema may dependencies assume satisfied source instance 
source dependencies may play important role deriving source target dependencies play direct role data exchange take source instance :10.1.1.19.6308
definition 
data exchange setting st consists source schema target schema set st source target dependencies set target dependencies 
data exchange problem associated setting finite source instance find finite target instance satisfies st satisfies called solution simply solution source instance understood context 
set solutions denoted sol 
practical purposes results source dependency st tuple generating dependency tgd form conjunction atomic formulas conjunction atomic formulas target dependency dependency tgd form shown left equality generating dependency egd shown right conjunctions atomic formulas variables note data exchange settings tgds source dependencies include special cases lav gav data integration systems views sound defined conjunctive queries 
natural take target dependencies tgds egds classes comprise embedded implicational dependencies include essentially naturally occurring constraints relational databases 
somewhat surprising tgds originally designed purposes constraints turn ideally suited describing desired data transfer 
simplicity rest drop universal quantifiers front dependency implicitly assume quantification 
write existential quantifiers 
data exchange semantics query answering example shows may possible solution data exchange problem 
natural question solution choose 
example 
consider data exchange problem source schema relation symbols attributes target schema relation symbol attributes assume 
source target dependencies source instance st observe dependencies st completely specify target instance 
noted incomplete specification arises naturally practical scenarios data exchange data integration matter see 
example possible solution represent unknown values 
call values labeled nulls introduce formally section 
second observation may solution 
example solutions labeled nulls 
note labeled nulls source values witness existentially quantified variables dependencies 
solution general assumes tuples required dependencies equal tuple 
assumption part specification 
similarly solution extra information consequence dependencies st source data 
argue data exchange 
contrast best solution contains specification requires 
formalize intuition 
universal solutions give algebraic specification selects possible solutions special class solutions call universal 
see universal solution properties justify choice semantics data exchange 
presenting key definition introduce terminology notation 
denote const set values occur source instances call constants 
addition assume infinite set var values call labeled nulls var const 
reserve symbols instances source schema values const 
reserve symbols instances target schema values const var 
fagin rk schema instance values const var var denotes set labelled nulls occurring relations definition 
instances values const var 
homomorphism mapping const var const var const fact ri ri fact 
equivalent homomorphism homomorphism 
definition universal solution 
consider data exchange setting st 
source instance universal solution solution solution exists homomorphism example 
instances example universal 
particular homomorphism homomorphism fact precise earlier intuition instances contain extra information 
contrast exist homomorphisms 
easily shown homomorphisms solutions 
universal 
algebraic standpoint universal solution property akin initial structure set solutions initial structure set structures required unique homomorphisms structures 
initial structures ubiquitous areas computer science including semantics programming languages term rewriting known properties see 
result asserts universal solutions properties 
proposition 
st data exchange setting 

source instance universal solutions equivalent 

assume st set tgds 
source instances universal solution universal solution sol sol homomorphism consequently sol sol equivalent 
part proposition asserts universal solutions unique homomorphic equivalence 
second part implies universal solution source instances sol sol 
certain sense universal solution precisely embodies space solutions 
computing universal solutions checking conditions definition requires implicitly ability check infinite space solutions 
clear hand extent notion universal solution computable 
section addresses question data exchange semantics query answering check existence universal solution compute exists 
particular show classical chase data exchange finite chase fail constructs universal solution 
chase fails solution exists 
general arbitrary dependencies may exist finite chase 
section introduce class weakly acyclic sets tgds chase guaranteed terminate polynomial time 
dependencies show existence universal solution checked polynomial time universal solution exists solution exists universal solution solutions exist produced polynomial time 
chase canonical generation universal solutions intuitively apply procedure produce universal solution start instance consists source schema empty instance target schema chase applying dependencies st long applicable process may fail shall see shortly attempt identify constants may terminate 
terminate fail resulting instance guaranteed satisfy dependencies universal theorem 
define chase steps 
similar homomorphisms instances homomorphism conjunctive formula instance mapping variables const var atom xn fact xn chase slight variation classical notion chase tgds egds sense chase instances symbolic tableaux 
consequently chase may fail 
definition chase step 
instance 
tgd tgd 
homomorphism extension homomorphism say applied homomorphism union set facts obtained extending variable assigned fresh labeled null followed image atoms say result applying write 
egd egd 
homomorphism 
say applied homomorphism distinguish cases 
const say result applying failure write 
identify follows constant labeled null replaced constant labeled nulls replaced 
say result applying write possible apply st long applicable apply long applicable 
fagin definition including case defines single chase step 
define chase sequences finite chases 
definition chase 
set tgds egds instance 
chase sequence sequence finite infinite chase steps ki di hi ki di dependency 
finite chase finite chase sequence ki ki requirement km dependency di homomorphism hi di applied km hi 
say km result finite chase 
refer case case failing finite chase refer case case successful finite chase 
general may exist finite chase instance cyclic sets dependencies cause infinite application chase steps 
infinite chases defined need 
different chase sequences may yield different results 
result satisfies 
data exchange note due nature dependencies chase sequence starts change add tuples finite chase exists result solution 
furthermore universal fact explicitly noted literature chase 
theorem states states chase check existence solution 
theorem 
assume data exchange setting st consists tgds consists tgds egds 

result successful finite chase st universal solution 

exists failing finite chase st solution 
case theorem refer canonical universal solution 
examples proofs unique term canonical universal solution 
note canonical universal solution similar construction representative instance defined universal relation see 
example cyclic set inclusion dependencies finite chase produce universal solution chase 
finite solution exist 
illustrates need introducing restrictions class dependencies allowed target 
example 
consider data exchange setting st follows 
source schema relation dpt id mgr name eid listing departments managers employees 
target schema relation dept dpt id mgr id mgr name departments managers separate relation employees emp eid dpt id 
source target target dependencies st dept emp dept emp emp dept data exchange semantics query answering assume source instance tuple department cs manager mary employee 
chasing st yields target instance dept cs mary emp cs labeled null instantiates existentially quantified variable tgd encodes unknown manager id mary 
satisfy chase 
tgd requires appear emp employee id chase add emp labeled null representing unknown department mary 
second tgd applicable 
easy see finite chase 
satisfying dependencies require building infinite instance dept cs mary emp cs emp dept 
hand finite solutions exist 
examples dept cs mary emp cs dept cs mary emp cs emp cs universal homomorphism homomorphism argue data exchange 
particular assumption manager id mary equal assumption department mary employed department cs mary manages 
assumption consequence dependencies source instance 
shown finite universal solution exists example 
consider sets dependencies chase sequence guaranteed reach polynomially steps size input instance 
sets dependencies follows checking existence solution generating universal solution carried polynomial time 
polynomial length chase discuss sets full tgds tgds existentially quantified variables 
proven chase sequence set full tgds finite length 
chase result 
simple show length chase bounded polynomial size input instance dependencies schema fixed 
set egds added affecting uniqueness result polynomial bound 
full tgds enjoy nice properties useful practice 
dependencies occurring real schemas non full example foreign key constraints generally inclusion dependencies 
known chasing inclusion dependencies may terminate general 
acyclic sets inclusion dependencies special case chase sequence length polynomial size input instance 
dependencies described defining directed graph nodes relation symbols fagin dept dpt id dept mgr id dept mgr name emp eid emp dpt id dept dpt id dept mgr id dept mgr name emp eid emp dpt id fig 

dependency graphs set tgds weakly acyclic weakly acyclic set tgds 
exists edge inclusion dependency set inclusion dependencies acyclic cycle graph 
define weakly acyclic sets tgds notion strictly includes sets full tgds acyclic sets inclusion dependencies 
notion inspired definition weakly recursive ilog directly related dependencies 
informally set tgds weakly acyclic allow cascading labeled null creation chase 
definition weakly acyclic set tgds 
set tgds fixed schema 
construct directed graph called dependency graph follows node pair relation symbol schema attribute call pair position add edges follows tgd occurs occurence position ai occurence position bj add edge ai bj exist 
addition existentially quantified variable occurrence position ck add special edge ai ck exist 
note may edges direction nodes exactly edges special 
weakly acyclic dependency graph cycle going special edge 
intuitively part keeps track fact value may propagate position ai position bj chase 
part keeps track fact propagation value bj creates labeled null position existentially quantified variable 
cycle goes special edge labeled null appearing certain position chase may determine creation labeled null position chase step 
process may continue forever 
note definition allows cycles long include special edges 
particular set full tgds special case weakly acyclic set tgds existentially quantified variables special edges 
example 
recall example 
dependency graph shown 
graph contains cycle special edges 
weakly acyclic finite chase may exist seen example 
hand assume know manager department employed department 
replace set set data exchange semantics query answering dept emp emp dept dependency graph shown cycles going special edge 
weakly acyclic 
theorem show guaranteed chase sequence finite 
example see chase stops result universal 
note universal essential explicitly encoded dependencies fact managers department manage 
example set inclusion dependencies weakly acyclic cyclic definition 
state main results regarding weakly acyclic sets tgds 
theorem 
union weakly acyclic set tgds set egds instance 
exists polynomial size bounds length chase sequence 
corollary 
assume data exchange setting st set tgds union weakly acyclic set tgds set egds 
existence solution checked polynomial time 
solution exists universal solution produced polynomial time 
query answering stated earlier adopt notion certain answers semantics query answering 
give formal definition notion address problem extent certain answers query target schema computed evaluating query different universal solution 
definition 
st data exchange setting 
ary query target schema source instance 
certain answers respect denoted certain set tuples constants solution instance data exchange problem 
boolean query target schema source instance 
write certain true denote solution instance data exchange problem true 
write certain false denote solution false 
face definition certain answers entails computation entire set solutions instance data exchange problem 
set may infinite desirable identify situations certain answers query computed evaluating particular fixed solution keeping tuples consist entirely constants 
formally ary query target instance set tuples constants 
extend notation boolean queries agreeing boolean query true false 
proposition characterizes universal solutions respect query answering queries consideration unions conjunctive queries 
fagin shows certain universal solution union conjunctive queries 
concrete instances result lav setting established 
instance result noted gav setting key foreign key constraints 
evaluation conjunctive queries arbitrarily chosen universal solution gives precisely set certain answers 
second statement proposition shows universal solutions solutions property 
justification universal solutions data exchange 
proposition 
consider data exchange setting source schema target schema dependencies sets st arbitrary 

union conjunctive queries target schema ifi source instance universal solution certain 

source instance solution conjunctive query certain 
universal solution 
result follows corollary part proposition 
corollary 
assume data exchange setting st set tgds union weakly acyclic set tgds set egds 
union conjunctive queries 
source instance set certain computed polynomial time size state affairs changes dramatically conjunctive queries inequalities considered 
proposition shows simple boolean conjunctive query inequalities universal solution obtain certain answers evaluating universal solution 
proposition shows particular case conjunctive query inequalities certain answers obtained evaluating canonical universal solution 
proposition 
binary source relation symbol binary target relation symbol source target dependency boolean conjunctive query inequality 

source instance certain false true universal solution 
query ifi source instance canonical universal solution certain 
view proposition address question conjunctive query inequalities possible find query necessarily computes certain answers evaluated canonical universal solution 
query answering complexity known lav data integration systems computing certain answers conjunctive queries inequalities conp hard problem 
follows data exchange setting possible compute certain answers queries data exchange semantics query answering evaluating canonical universal solution universal solution generated polynomial time np 
take section closer look conjunctive queries inequalities 
show theorem data exchange setting problem computing certain answers unions conjunctive queries inequalities conp 
surprisingly show theorem polynomial time algorithm computes certain answers unions conjunctive queries inequality disjunct 
optimal result show theorem conp hard compute certain answers unions conjunctive queries inequalities disjunct 
case unions conjunctive queries inequality disjunct certain answers computed polynomial time arbitrary universal solution 
section shows unproven complexity theoretic assumptions np conjunctive query inequality certain answers computed rewriting order query evaluating canonical universal solution 
formally introducing decision problem associated computation set certain answers 
definition 
st data exchange setting 

ary query target schema computing certain answers decision problem source instance tuple constants case certain 

boolean query target schema computing certain answers decision problem source instance case certain true 

complexity class class queries target schema say computing certain answers queries query computing certain answers say computing certain answers queries complete query computing certain answers complete problem 
computing certain answers ary query decision problem 
consider related function problem source instance find set certain 
problem polynomial time reduction polynomially tuples compute set certain going tuple deciding certain 
computational complexity complexity theoretic lower bounds results sequel hold lav data integration systems sound views defined conjunctive queries review definition type data integration system 
lav data integration system sound views defined conjunctive queries special case data exchange setting st source target dependency st tgd form si si relation symbol source schema arbitrary conjunction atomic formulas target schema follows refer setting lav setting 
fagin abiteboul duschka showed lav setting computing certain answers unions conjunctive queries inequalities conp 
extend showing upper bound holds data exchange setting provided st set tgds union set egds weakly acyclic set tgds 
theorem 
consider data exchange setting st set tgds union set egds weakly acyclic set tgds 
union conjunctive queries inequalities 
computing certain answers conp 
note particular case tgds full theorem proved small model property essentially argument lav setting 
general case tgds may existentially quantified variables proof involved 
extension chase called disjunctive chase see full version details 
theorem yields upper bound fairly general data exchange setting complexity computing certain answers unions conjunctive queries inequalities 
turns discuss upper bound tight fairly restricted data exchange settings 
specifically computing certain answers queries conp complete 
polynomial algorithm exists computing certain answers input universal solution np 
abiteboul duschka showed lav setting computing certain answers conjunctive queries inequalities conp complete 
sketched proof correct establish problem conp complete conjunctive queries single inequality 
unfortunately reduction erroneous 
correct reduction produced increasing number inequalities show lav setting polynomial time algorithm computing certain answers unions conjunctive queries inequality disjunct 
result abiteboul duschka correct fact unpublished full version contains proof effect lav setting computing certain answers boolean conjunctive queries inequalities conp complete 
different proof result extracted slightly modifying proof theorem van der meyden 
result provides matching lower bound complexity computing certain answers conjunctive queries inequalities 
theorem 
lav setting computing certain answers boolean conjunctive queries inequalities conp complete 
interesting technical problem determine minimum number inequalities needed give rise conp complete problem setting 
conjecture 
lav setting computing certain answers boolean conjunctive queries inequalities conp complete 
able settle conjecture succeeded pinpointing complexity computing certain answers unions boolean conjunctive queries inequalities disjunct 
theorem 
lav setting computing certain answers unions boolean conjunctive queries inequalities disjunct conp complete 
fact data exchange semantics query answering problem conp complete union queries conjunctive query second conjunctive query inequalities 
unions conjunctive queries inequalities theorem delineates boundary intractability theorem asserts computing certain answers unions conjunctive queries inequality disjunct solved polynomial time algorithm runs universal solutions 
theorem 
assume data exchange setting st set tgds union weakly acyclic set tgds set egds 
union conjunctive queries inequality disjunct 
source instance arbitrary universal solution polynomial time algorithm input computes certain 
corollary 
assume data exchange setting st set tgds union weakly acyclic set tgds set egds 
union conjunctive queries inequality disjunct 
polynomialtime algorithm computing certain answers order theorem shows general conjunctive query just inequality order query computes certain answers evaluated canonical universal solution 
strong contrast polynomial time algorithm seen earlier theorem 
contrast second part proposition seen particular example exists 
proof theorem combines ehrenfeucht fra ss games chase procedure 
theorem 
lav setting source boolean conjunctive query inequality order query canonical universal solution certain 
full version show result holds allow order formula contain predicate const distinguishes constants nulls 
result particular interest query answering data integration context corollary proof theorem 
shows conjunctive queries just inequality general find order query source schema evaluated source instance computes certain answers 
corollary 
lav setting source boolean conjunctive query inequality order query source schema certain 
concluding remarks plan investigate universal solutions query answering data exchange 
wish characterize query rewritten firstorder query certain answers computed evaluating fagin universal solution 
wish understand certain answers query approximated evaluating query universal solution differs universal solution universal solution 
important direction extending notion universal solution cover data exchange nested xml schemas 

abiteboul cluet milo 
correspondence translation heterogeneous data 
icdt pages 

abiteboul duschka 
complexity answering queries materialized views 
pods pages 

abiteboul duschka 
complexity answering queries materialized views 
unpublished full version 

beeri vardi 
proof procedure data dependencies 
jacm 

cal calvanese giacomo lenzerini 
data integration integrity constraints 
caise pages 

casanova fagin papadimitriou 
inclusion dependencies interaction functional dependencies 
jcss 

cosmadakis kanellakis 
functional inclusion dependencies graph theoretic approach 
advances computing research volume pages 


fagin 
horn clauses database dependencies 
jacm oct 

fagin kolaitis miller popa 
data exchange semantics query answering 
ibm research report nov 

friedman levy millstein 
navigational plans data integration 
aaai pages 

halevy 
answering queries views survey 
vldb journal pages 

hull yoshikawa 
ilog declarative creation manipulation object identifiers 
vldb pages 

lenzerini 
data integration theoretical perspective 
pods pages 

levy mendelzon sagiv srivastava 
answering queries views 
pods pages may 

maier mendelzon sagiv 
testing implications data dependencies 
acm tods dec 

maier ullman vardi 
foundations universal relation model 
acm tods june 


horn formulas matter computer science initial structures generic examples 
jcss april june 

miller haas hern ndez 
schema mapping query discovery 
vldb pages 

popa miller hernandez fagin 
translating web data 
vldb pages 

shu lum 
convert high level translation definition language data conversion 
communications acm 

shu taylor ghosh lum 
express data extraction processing amd restructuring system 
tods 

van der meyden 
complexity querying indefinite data linearly ordered domains 
jcss 

van der meyden 
logical approaches incomplete information survey 
logics databases information systems pages 
kluwer 
