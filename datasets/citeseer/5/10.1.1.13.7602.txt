notice warning concerning copyright restrictions copyright law united states title united states code governs making copyrighted material certain conditions specified law libraries archives authorized furnish photocopy reproduction specified conditions reproduction purpose private study scholarship research 
user request uses photocopy reproduction purposes excess fair may liable copyright infringement 
institution reserves right refuse accept copying order judgement order involve violation copyright law 
reproduction distribution copy permitted transmission means 
multilevel atomicity new correctness criterion distributed databases nancy lynch may received jul clark research supported part nsf 
mcs army research office contract daag office naval research contract 
multilevel atomicity new correctness criterion distributed databases nancy lynch information computer science georgia institute technology atlanta georgia may research supported part nsf 
mcs army research office contract daag office naval research contract 
contents 




model asynchronous parallel processes application databases coherent partial orders multilevel atomicity simulation application database combinatorial lemma necessary sufficient condition multilevel atomicity concurrency control multilevel atomicity research usual models distributed databases bg set entities distributed nodes network 
entities accessed users database transactions certain sequences steps actions involving individual entities 
steps grouped transactions distinct purposes 
transaction unit recovery steps transaction carried transaction completed initial steps undone way 
second transaction define steps transaction form logical atomic unit sense appear users database steps carried consecutively intervening steps transactions 
requirement transactions appear atomic called serializability literature rsl bg widely accepted important correctness criterion distributed databases 
purposes served transaction mechanism 
think usual notion transaction adequate purposes think appropriate defining atomicity 
requirement serializability strong exclude efficient implementation application databases 
suggests super new mechanism transaction mechanism order define atomicity 
model distributed database consists complete distinct levels physical level consisting node processors connected message system communicating users ports logical level consisting centralized concurrent application database 
logical level involve nodes messages distribution information 
job physical syst em implement appropriate sense application database 
steps different application database transactions allowed interleave various ways set allowable interleavings determined application represented 
extreme specified allowable interleavings serializable amounts requiring application database centralized serial database 
extreme interleavings unconstrained 
banking database transfer transaction consist withdrawal step followed deposit step 
order obtain fast performance withdrawals deposits different transfers allowed interleave arbitrarily users banking database view account balances includes possibility money transit account 
extremes reasonable possibilities 
assume application database allowing set allowable interleavings transactions 
show modify distributed system implementing su ch application additional capacity determine global database state stopping transactions progress 
consistency global data base state checked repeated capacity aid recovery inconsistent global states 

set allowable interleavings assumed guarantee original distributed system produces allowable interleavings modified system produce allowable interleavings 
global state obtained application databases serializable arbitrarily interleaved extremes 
certain sets interleavings 
considered 
intention consider sets interleavings specified way suitable concurrency control algorithm 
time sets interleavings considered general allow representation allowable interleavings important application databases banking 
approximation specification method associate transaction atomicity granularity im formally described set breakpoints different sets consecutive steps 
steps separated breakpoint required occur atomically point view system users 
special case definition breakpoints transaction requirement simply usual requirement serializability 
special case breakpoints pair steps transaction requirement allows arbitrary interleaving 
addition intermediate cases possible 
definition sufficiently general express commonly constraints interleavings 
example consider banking system transfer transactions described 
transfers allowed interleave arbitrarily 
want type transaction audit transaction reads account balances returns total 
audit transaction probably allowed interrupt transfer transaction withdrawal deposit steps audit counting money transit 
entire transfer transaction atomic respect entire audit transaction 
transfer transaction set breakpoints respect transfers set respect audit transactions 
example representative fairly general phenomenon appropriate transaction different sets break points respect different transactions 
transaction allow different views activity different transactions 
natural specification allowable interleavings terms relative atomicity transaction respect transaction just terms transaction absolute atomicity 
formal definition type 
atomicity called multilevel 
model distributed databases lemma yield necessary sufficient lti eel suggestions concurrency control design multilevel 
researchers noted hat th usual notion serializability needs weakened 
particular contains interesting preliminary specification concurrency control design certain non serializable interleavings 
multilevel atomicity generalization level atomicity described designation ets remains done designing evaluating concurrency control algorithms multilevel atomicity 
merely suggests preliminary definitions ways 
remains see new concurrency control algorithms achieve multi level atomicity operate efficiently existing concurrency control algorithms achieve serializability 
remains determine weaker notions serializability useful describing constraints required real world database applications 
model asynchronous parallel processes application databases physical systems formalized model lf asynchronous parallel computation 
unified model allows precise description distributed algorithms processes accessing variables shared variables distributed system message ports 
informal 
brief description model provided reader referred lf complete rigorous treatment 
basic entities model processes nondeterministic automata variables 
processes states including start states possibly final states variables take values 
atomic execution step process involves accessing variable possibly changing process state variable value 
system processes set processes certain variables designated internal external internal variables system 
external variables assumed accessible environment processes users change values steps system 
execution system processes described set execution sequences 
sequence finite infinite list steps system perform interleaved appropriate actions environment 
sequence obtained interleaving sequences steps processes system 
process infinitely steps sequence process reaches final state 
describing external behavior system certain information execution sequences irrelevant 
external behavior system processes set sequences derived execution sequences erasing information process identity change process state accesses internal variables remains just history accesses external variables 
distributed problem set sequences accesses variables 
system said solve problem external behavior subset problem 
technical assumption state start state final state 
general definition lf required 
systems subsystem processes internal variables external variables included respectively internal variables initialized exactly 

application databases notion application database centralized concurrent system consisting transactions acting entities set allowable interleavings steps transactions 
modelled directly model section transactions simply formalized processes entities formalized variables 
precisely application database consists system processes called transactions subset execution sequences subsystems called allowable execution sequences conditions satisfied 
variables internal internal system 
called entities 
assumption says entities accessed transactions 
execution sequence transaction appears eventually appears final state 
transactions supposed terminate 
definition gives general notion application database 
indivisible steps transactions arbitrary accesses entities necessarily just reading writing steps types steps permissible special cases 
transactions branch conditionally example values encountered certain entities access different entities steps 
model transaction general include literature 
includes notions usually regarded somewhat different ordinary transactions transactions revoking actions particular type nondeterministic transaction model 

coherent partial orders want show describe certain sets allowable execution sequences 
thi section preliminary definitions involving sets partial orders 
definitions section level general combinatorial section 
describe partitions arbitrary set thought set transactions levels 
nest set sequence equivalence relations satisfying conditions consists exactly equivalence class consists singleton equivalence classes refinement predecessor level largest 
describe breakpoint function set breakpoints totally ordered set levels way higher level sets breakpoints include lower level sets 
totally ordered set thought set steps execution sequence particular transaction 
totally ordered level breakpoint function assigns set pairs consecutive elements way contains pairs contains pairs set level interleaving specification components collection disjoint totally ordered sets 
xt collection level breakpoint functions define important condition partial order want express fact orderings respects restrictions expressed collection breakpoint functions 
nest set including xt bt level interleaving specification partial order coherent provided conditions hold partial order assume level assume assume assume pair bt 
intuitively condition says 
step transaction follows sep transaction follows step follows precedes breakpoints 
follows means follows order 
breakpoints defined solely nesting level transactions 

multilevel atomicity definitions section deal explicitly transactions 
definitions preceding section help describe sets allowable execution sequences 
intuitively transactions grouped nested classes che set places transaction interrupt determined solely smallest class containing 
smaller classes determine breakpoints determined containing classes possibly 
says transactions grouped common small class relative breakpoints interleave great deal transactions grouped common large class fewer relative breakpoints interleave 
pair transactions describe places permitted interrupted steps 
transactions need straight line programs branch complicated ways am forced describe separately places different execution sequence interrupted steps 
level breakpoint sj system transactions transaction execution sequence family bt level breakpoint function steps bt totally ordered occurrence 
formally elements ordered set steps pairs ith step 
nest transactions system level breakpoint specification way define application database 
execution sequence subsystem execution ofthe transactions set transactions appearing denote execution sequence occurring subsequence set steps occurring order steps occur denote bt denote total order describing order tt steps occur multilevel atomic provided 
coherent xt bt 
definition just says interruptions occur breakpoints 
denote set execution sequences multilevel atomic 
example possible breakpoint specification pairs bt pairs bt multilevel atomic execution sequences just usual serial executions 
reader referred treatment special case definition corresponding bt consists pairs consecutive steps transactions common class interleave arbitrarily transactions common class serialized respect 
multilevel definition allows intermediate degrees interleaving extremes represented 
simulation application database having described logical level centralized concurrent application database describe database implemented distributed system system 
physical system implements application database presenting external interface users compatible allowable executions application database 
correctness physical system defined entirely terms external behavior 
physical system produce behavior different methods 
example centralize distribute replicate entities 
implement transaction processor communicates processors order access entities 
alternatively divide entities nodes network allow transactions migrate entity entity necessary executing steps different processors 
external view determines correctness 
definition implementation follows 
fix application database 
finite nonempty set variables called ports contain finite set transaction status words transaction status word pair transaction start state final state sequence access ports access tagged label users system indicate doing accessing 
syntactically correct provided conditions hold 
port starts empty successive access port begins value left preceding access port 
changes port values types 
users initiate transaction time inserting pair port start state system change start state final state 
transaction initiated 
technical convenience assumed sake consistency formal model lf 
transaction intended run twice simply duplicated 
transaction initiated users subsequently completed system 
remains express semantic requirement provide users results consistent allowable execution sequence application database 
syntactically correct sequence execution sequence subsystem consistent provided exactly transactions appear start states final states 
sequence correct th provided syntactically correct consistent need definition correctness system 
informally execution sequence correct run correct user result correct users system 
little detail sequence accesses ports correct users provided changes allowed users 
users initiate transactions retract transaction initiated initiate transaction 
sequence correct system provided interleaved consistently correct user sequence steps resulting sequence labelled appropriately result correct users system 
interested reader referred lf completely formal definition interleaving 
system processes implements application provided external behavior sequences correct system 
weak notion implementation simply preserves input output results 
require preservation ordering transactions transaction permitted complete port transaction initiated port case steps precede steps execution sequences application database consistent port behavior 
weakness implementation definition allows freedom design physical system 
particular execution sequence system transactions order steps defined follows 
precedes steps transaction ii steps accessing entity 
total order steps consistent execution sequence having sequence values entity execution subsequence transaction 
sequences ar identical 
follows sequence port accesses correct consistent execution sequence correct 
example 
set serial executions transaction system amounts usual definition serializable executions 
physical system guarantees port behavior consistent serializable execution sequence consistent serial execution sequence 
example 
popular model distributed databases migrating transaction model described rsl 
model entities database reside nodes network processors migrate entity entity necessary executing steps om different processors 
detail transaction start state originates processor message sent processor owning entity accesses state processor receiving message performs indicated step value entity updating state sending new message new state 
final state message sent processor owning appropriate entity 
final state message sent back originator way execution sequence system transactions performed processors 
total order sequence determined real clock time 
execution sequence constructed consistent port behavior system 
suffices external port correctness insure execution sequence performed processors equivalent consider ease set multilevel atomic sequences bt assume nest transactions transaction execution sequence level breakpoint specification 
say execution sequence totally coherent resp 
coherent provided dependency partial order extendable total order resp 
partial order coherent xt bt xt denotes execution sequence occurring sub sequence denotes bt definition execution equivalent multilevel atomic totally coherent suffices insure sequence port accesses consistent totally coherent execution sequence particular migrating transaction model suffices insure execution sequence performed processors totally coherent 
note totally coherent generalizes serializable sense multilevel atomic generalizes serial 
immediately obvious concurrency control insure total coherence 
help provided lemma section 

combinatorial section state prove combinatorial lemma section derive necessary sufficient condition multilevel atomicity 
requires definitions section 
section fixed set fixed nest set including xt bt tt fixed level interleaving specification coherent mean coherent write level 
lemma 
coherent partial order coherent total order contains proof 
denote sequence stages numbered carried 
stage inserts additional pairs ordering relation yielding inductively coherent partial order xt xt level 
conditions trivially true 
conditions clearly imply needed result 
stage 
partition segments segment maximal tt subset property pairs bt having components 
divided segments breakpoints bt 
define directed graph nodes segments 
contains edge segment segment exactly exist 
totally order strongly connected components contains edges segment segment adding pairs closure 
prove needed properties assuming hold 
claim 
partial order 
proof claim edges edges go involving new edge 
partial order cycles 
claim 
coherent 
proof claim assume level xt 
assume 
assume pair bt 
show 
result trivial assume coherence implies needed result 
case 
sin contains follows property applied implies level 
definition level breakpoint function 
includes elements bt breakpoint xt intervening bt breakpoints intervening bt breakpoints 
definition insures needed result 
scx 
segment said belong element claim 
holds 
belongs belongs proof claim 
contains cycle si segments exist segments belong inequivalent elements distinct segments cycle belonging elements respectively ii segment preceding cycle belongs equivalent ordering element ordering element claim shown induction number segments preceding cycle 
inductive step 
exists step cycle successor inductive hypothesis trivially cycle successor follows level assumption bt bt precedes bt breakpoint precedes bt breakpoint 
implies coherence applying result repeatedly cycle shows distinct segments steps respectively 
contradicts assumption partial order 
claim 
xt xt level comparable 
proof claim 
claim segments strongly connected component defined contain pair contain 
necessary sufficient condition multilevel 
lemma section restate correctness condition section 
assume section 
execution sequence equivalent multilevel atomic partially coherent 
suffices insure sequence port accesses consistent partially coherent execution sequence particular migrating transaction model suffices insure execution sequence performed processors partially coherent 
words dependency partial order extendable partial order coherent defined section 

concurrency control multilevel section discuss concurrency control mechanism take advantage preceding ideas 
want design concurrency controls correctness conditions stated section 
specifically migrating transaction model insure execution sequence performed processors dependency partial order extendable coherent partial order 
necessary additional assumption breakpoint specification application sa order able determine locations breakpoints execution sequence performed necessary assume compatibility condition execution sequences transaction share common prefix 
execution breakpoint immediately order insure coherent partial order consider smallest possible coherent extension defined follows 
set nest set containing level interleaving specification xt bt tt partial order tt xt containing define coherent closure respect partial order obtained closing condition coherence definition 
easy see extendable coherent partial order coherent closure partial order 
assume concurrency control generates execution sequence concurrency control includes priority scheme rollback mechanism insure initiated transaction gets blocked indefinitely 
scheme 
consider insure coherent closure partial order 
possible strategy cycle detection coherent closure concurrency control guarantee extendable coherent partial order concurrency control generate explicitly edges coherent closure scheme determine steps rolled back 
presumably fewer cycles detected multilevel atomicity definition serializability required leading fewer rollbacks 
approach attempt guarantee coherent closure partial order way doing delay steps follows 
gets scheduled locking entity delaying transaction 
get performed insures 
note refers order steps get performed order 
scheduled initial segment ofe step transaction precedes coherent closure breakpoint transaction immediately follows execution sequence prefix occurring subsequence es 
accomplished making wait suitable breakpoints reached assuming concurrency control uses priority rollback mechanism preventing blocking 
property guaranteed coherent closure consistent total ordering steps partial order 
course difficulties involved designing priority rollback scheme guarantee transactions block 
related difficulty design mechanism allowing transactions commit concurrency control guarantees eventual performance steps correct execution sequence necessarily follow concurrency control determine particular point time transaction longer rolled back 
apparently greater difficulty multilevel atomicity atomicity multilevel atomicity allows finite number infinite chain transactions tl steps ti means quite plausible rollback steps ti cause rollback steps ti 

research really suggested new general correctness criterion 
remains design detailed concurrency controls criterion order 
determine generalization exploited increased efficiency 

author grateful nancy mike fischer mike merritt discussions subjects covered 
bg bernstein goodman fundamental algorithms con currency control distributed databases computer america technical report february 
clark oral presentation fifth berkeley workshop distributed data management computer networks february 
gray lorie traiger notions consistency predicate locks database system communications acm vol 
number pp 
november 
fischer lynch global states distributed system proceedings ieee symposium reliability distributed software database systems july 

garcia molina semantic knowledge transaction pro cessing distributed database technical report princeton university department electrical engineering computer science april 
gray lorie traiger granularity locks degrees consistency shared data base proceedings ifip working conference modelling data base management systems germany pp 
january 
modelling data base management systems nijssen ed north holland publishing pp 

ill lamport theory correctness multi user database systems massachusetts computer associates ca october 
lf lynch fischer describing behavior distributed systems appear theoretical computer science vol 
pp 
january 
sl rosenkrantz stearns lewis system level concurrency control distributed database systems acm transactions database systems vol 
pp 
june 
