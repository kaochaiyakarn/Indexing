proc 
th symp 
principles programming languages pages 
polymorphic type inference assignment xavier leroy ecole normale sup erieure pierre weis inria rocquencourt new approach polymorphic typing data accepting place modi cation ml languages 
approach restrictions type generalization re ned typing functions 
type system leads better integration imperative programming style purely applicative kernel ml 
particular generic functions allocate mutable data safely fully polymorphic types 
show soundness type system give type reconstruction algorithm 
polymorphic type disciplines originate study calculus connections constructive logic surprise ts nicely purely applicative languages side ects 
polymorphism problematic move conventional imperative languages algol pascal allow physical modi cation data structures 
problem appeared early stage design ml assignment operators provided primitive data types vectors 
consider example ml ref head naively give type list ref rst type int list ref store list single element int list 
type consider having type bool list ref head type bool statement typed 
head evaluates valid boolean 
example shows authors address le chesnay france 
mail inria fr weis inria fr 
survival kit reader unfamiliar ml polymorphic empty list list elements ref allocates new indirection cell initialized updates contents returns current contents physical modi cation data compromises type safety invalidate static typing assumptions 
demonstrated polymorphic mutable data data structures modi ed place restricted 
obvious way tackle problem early implementations ml require data monomorphic statically known types 
restriction trivially solves problem impossible write polymorphic functions create mutable values 
fact unfortunate consequences 
rst drawback possible provide generic ecient implementations data structures vectors hash tables graphs trees require physical modi cation 
trivial function vector arbitrary type returning copy typed policy creates vector statically unknown type 
drawback polymorphic mutable values prohibited returned internal computation 
consequence generic functions written imperative style holding intermediate results 
consider familiar map functional rec applicative map null head applicative map tail alternate implementation map imperative style imperative map argument ref result ref null argument result head argument result argument tail argument done reverse result ml type systems reject imperative map 
give general type purely applicative version 
case imperative version substituted applicative page exactly semantics 
demonstrated programming style imperative vs applicative interferes type speci cations 
clearly goes modular programming 
enhancements ml type system proposed weaken restrictions polymorphic mutable data 
standard ml incorporates ideas 
enhanced type systems possible de ne useful generic functions mutable data structures function copies vector 
systems powerful fail infer general type imperative map example conjunction higher order functions 
shortcomings standard ml provide adequate support imperative programming style 
major weakness general purpose programming language 
new way typecheck mutable data polymorphic type discipline 
type system simple extension ml 
permits type reconstruction possesses principal type property 
requires minimal modi cations ml type algebra 
de nitely improves support imperative programming ml 
allows generic functions mutable data structures fully polymorphic types 
powerful assign function written imperative style type purely applicative counterpart 
example system imperative implementation map distinguished usual applicative far types concerned 
remainder organized follows 
section introduce informally type system show need precise typechecking functions 
section formalizes ideas 
state typechecking rules show soundness give type reconstruction algorithm 
section brie compares approach previous ones 
give concluding remarks section 
informal presentation section informally introduce typing discipline mutable data focusing speci standard ml approach attempt detect creation polymorphic 
prohibit di erent types 
way value types generalize type rst universally quantify type variables 
ml construct generalizes types binding 
restrict type generalization generalize type variable may free type 
type variable said dangerous 
generalizing dangerous type variables ensures mutable value possesses monotype 
remains detect dangerous type variables generalization time 
suggests complex expensive static analysis turns case dangerous variables determined mere examination type generalized shall illustrate 
datatypes consider example ref head expression ref type list ref type ref type free dangerous construct generalize gets instantiated int typing typing head leads type clash 
may embedded complex data structures pairs lists concrete datatypes 
fortunately type data structure contains information retrieve types components structure 
instance pair type contains value type value type variable dangerous dangerous instance ref expression ref type list list ref dangerous variable type list list ref treatment user de ned datatypes similar 
parameterless datatypes contain polymorphic data dangerous variable 
parameterized datatypes come avors introduce new ref types type foo ref don 
treated ref types variables free parameter considered dangerous 
treated product types dangerous variables dangerous variables parameter 
functions function types treated specially 
reason value type contain value page type value type contrast regular datatypes list 
dangerous variables type contain dangerous variables 
instance function ref function ref type ref dangerous fully polymorphic 
harmless 
harmful apply ref polymorphic argument bind result construct di erent types 
possible proposed type system ref type list ref type generalized dangerous 
approach generic functions create return mutable objects general types 
type safety ensured controlling done result application described 
analysis solely type function result 
usage polymorphic function unrestricted function return witnessed absence ref types codomain type 
holds function allocates statically unknown types internal purposes return 
instance case imperative map functional type list list type purely applicative counterpart applicative map 
imperative map functional substituted applicative map context 
particular applied highly polymorphic arguments expression imperative map function typed returns fully polymorphic empty list created type list ref type system guarantees consistently inside function exported outside 
strength type analysis handling higher order functions partial applications 
consider partial application applicative map ref type system correctly recognize harmless gives fully polymorphic type list ref list 
case ml type systems attempt control creation see section 
functions free variables careful reader may noticed aw discussion neglected fact function may possess free variables 
suppose function free variable bound outside function 
function access update type necessarily appear type classic example functional presentation pair functions access update functional ref ref function function expression functional ref type unit list list unit type variable dangerous fully polymorphic breaks type safety just ref 
problem types free variables function appear type function 
context useful think functions closures 
closures contrast data structure adequately described functional type know types values contained environment part closure 
solution keep track inside closure 
associate function type set types types variables free function 
put set types third argument arrow type constructor 
technical reasons nd convenient add extra level indirection recording set types 
function type adorned label 
labels written labeled function types written separately record constraints labels 
constraints format meaning objects type allowed occur environments type environment type required contain value type allowed contain value type recorded constraints 
way function type labels allow typings environment parts closures 
instance functional ref type 
unit unit ref ref functional ref type unit list list unit list ref list ref revealing presence polymorphic function pair preventing generalization rule functional type page variable dangerous exists constraint dangerous typing closures gives precise account interleaving internal computation parameter passing curried functions possible data sharing invocations 
instance succeeds distinguishing functions function ref unit list ref ref function unit list ref list ref harmless returns fresh time generalized 
return shared calls function 
remain monomorphic case dangerous variable type 
presenting type system formally give main intuitions typing closures 
constraints synthesized typing abstractions follows giving type abstraction function variable free look type typing environment record constraint safe add new constraints constraints label intended give upper bound go inside closures type 
may lead general types variables declared dangerous 
unifying labeled function types easy suces identify labels resulting single label bears previous constraints instance assuming int int expression function type int int additional constraint int give general type functionals able generalize labels way generalize regular type variables 
consider functional function possible apply function mapping integers integers closure may contain 
give type int int int generalizing apply functions free variables assuming constraint current environment 
right typing int int int 
complex situations current environment contains constraints label generalized 
constraints discharged type schema reintroduced specialization time 
type schemas format vn labels type variables sequence constraints 
formalization section formalize calculus ideas 
syntax language consider core ml language calculus plus distinguished construct 
shall assume built int type integer constants 
store type ref term type operations ref allocate new term get contents update content assume countable set var term variables typical elements ranges integers 
syntax terms typical elements follows ref typechecking type expressions typical elements syntax int ref de nition stands type variable ranging countable set tvar function types annotated label taken countable set lbl labels distinct term variables type variables 
type schemas typical element composed type expressions type variables labels universally quanti ed 
contain sequence constraints constraints format vn page int int xn lm afx fx fun free app gen ref ref ref deref ref assign ref typing rules 
type context constraint sequence de ne free variables labels type variables fv dangerous free variables dv follows 
intuition de nition fv components functional type type expression recorded constraints 
fv fxg fv int fv ref fv fv flg fv fv fv dv dv int dv ref fv dv dv complete de nition extend fv dv type schemas typing environments obvious way fv vn fv fv vn dv vn dv fv vn fv dom fv typing rules gure 
similar rules ml additional handling constraints reminiscent treatment subtyping hypotheses type inference systems subtypes 
rules de ne proposition term type assumptions constraints written typing environment partial mapping term variables type schemas 
write environment identical mapped assume usual set operations de ned constraints obvious way 
standard ml gen operator rule responsible generalizing type variables possible type 
generalize labels possible 
addition prohibit generalization dangerous type variables 
tentative de nition gen vn set fv vn fv dv fv 
incorrect generalize variable remains free constraint sequence page int clos clos dom ref loc loc loc evaluation rules 
gen discharges schema generic constraints constraints free returns remaining constraints typing derivation 
de nition generalization type expression typing environment constraint sequence 
de ne fv vn fv dv fv sequence constraints gen vn evaluation give evaluation mechanism terms calculus structural operational semantics 
evaluation relation maps term context evaluation environment store value modi ed store values syntax int clos loc ranges countable set loc locations 
stores partial mappings locations values 
assume call value evaluation environments partial mappings term variables values 
rules gure de ne precisely evaluation relation assuming standard left right evaluation order 
account run time type errors introduce special result wrong state evaluation rules match wrong 
way distinguish type errors nontermination 
soundness typing type system sensible respect evaluation mechanism typed term evaluate wrong 
proposition term type sequence constraints derive stores evaluate wrong derive wrong 
proof appendix 
closely follows tofte chapter 
crucial point closure labels constraints give better control types store locations ml 
consequence variable free type location reachable value dangerous type value 
guarantees soundness type generalization 
type reconstruction section consider adaptation language known damas milner type reconstruction algorithm ml algorithm 
write mgu principal uni er types uni able 
type inference algorithm fails 
type expressions terms sorted free algebra ensures existence principal uni er obtained classical uni cation algorithm terms free algebra 
term typing environment initial sequence constraints 
de ne infer triple 
type expression substitution 
constraint sequence follows page infer int id infer xn lm 
yn fresh type variables free mm fresh labels fx id 
infer fresh variables fe free bg 
infer 
infer infer 
infer fresh variables mgu 
infer 
infer 
gen 
infer 
infer ref 
infer ref 
infer 
infer fresh variable mgu ref 
infer 
infer infer 
mgu ref algorithm enjoys properties damas milner algorithm correct complete respect typing rules inferred type general 
proof similar damas proof 
relation ml introduced closure typing way keep track mutable values embedded functions 
consequence expressions having functional type ml may distinguished closure type may fear leads type system restrictive ml 
ideally purely applicative fragment calculus ref type constructor ref term constructors conservative extension ml pure closed term typed ml typed calculus 
unfortunately case subtle reasons outlined 
type expressions system distinguished closure labels 
reason uni cation fail labels syntax type expressions label matched label labels treated variables far uni cation concerned 
system uni cation types conservative respect uni cation corresponding ml types 
precise introduce strip operator maps type expressions calculus ml type expressions erasing labels function types int int ref ref type expressions uni able case mgu mgu types lemma close resemblance algorithm infer damas milner algorithm lead believe pure term algorithms infer type modulo closure labels 
hold generalization step case construct 
consider typing assume starting typing environment algorithm infer infers type algorithm starting corresponding ml typing environment infers corresponding ml type 
check algorithms generalize exactly type variables type compatible environments 
case reasons 
rst reason algorithm infer generalize dangerous type variables 
problem consider pure fragment calculus ref type constructor set dangerous variables type empty 
page second serious reason closure typing introduces additional free variables type 
general ftv set free type variables superset fv 
take instance int int obvious ftv ftv set type variables generalized infer fv set type variables generalized cases infer generalize type variable free 
consider id id id assuming term type construct forces type 
attempt generalize type constraints generalize free type id remains monomorphic application id id ill typed 
ml freely generalize getting id term typed 
example quite convoluted simplest know exhibits variable capture labels phenomenon 
need experience proposed type system nd phenomenon happens practical situations 
case turns serious aw closure typing system investigating possible improvements avoid variable captures 
direction record constraints typing abstraction 
example argue constraint recorded grounds body function witnessed fact type variable free type function result type parameter 
direction check function types compatible identifying closure types 
way avoid propagation constraint type pragmatics constraint handling practically main concern type inference algorithm additional overhead introduced handling constraints 
possible simplify sequences constraints 
possible simpli cation rules closed simpli cations obviously sound respect computation free dangerous variables 
third rule generate constraints may open way simpli cations closed 
addition constraint handling quite cheap distribute constraints inside types handling single list constraints 
suggest grouping constraints label arranged list type schemes 
list represents label 
identify labels just concatenate lists done constant time di erence lists 
unifying type expressions additional identifying labels takes time proportional size uni cation performed linear time ml 
comparison type systems section compare type system previous proposals polymorphic type systems languages featuring physical modi cation 
standard ml consider rst systems proposed ml 
systems rely detecting creation mutable values special typechecking rules ref construct ensuring resulting mutable values monomorphic types 
rst system consider proposed tofte adopted standard ml 
weak type variables written superscript prohibit polymorphic 
weak type variables generalized binding corresponding expression guaranteed non expansive create 
damas proposed related slightly different scheme gives similar results cases 
system extension tofte standard ml new jersey implementation 
scheme type variables longer partitioned weak non weak variables type page standard ml sml nj system ref ref ref ref ref rejected rejected rejected imperative map list list list list list list imperative map id rejected rejected list applicative map ref rejected rejected list ref list id ref rejected rejected ref raise exit ref ref ref rejected comparison type systems variable associated integer degree weakness strength 
degree measures number abstractions applied corresponding created 
regular unconstrained type variables strength nity 
variables strength zero generalized 
variables strength generalized function application decrements strength variables 
comparative results gure 
test program give general type system 
assume top level phrases 
ml implementations reject top level phrases types closed free variables generalized 
rst test ref function de ned function ref exercises possibility writing generic functions create return updatable data structures 
functions vectors matrixes doubly linked lists typed similarly 
type systems considered capture fact ref applicable monomorphic values 
second test imperative map functional 
illustrates polymorphic auxiliaries inside generic function 
type system gives fully polymorphic type imperative map 
restrict monomorphic type 
third test partial application applicative map de ned ref function 
exercises compatibility functions create mutable data higherorder functions 
sml sml nj refuse generalize type reject 
unable detect applicative map apply ref immediately applicative map ref create polymorphic 
simpli ed version test shown apply identity function id ref function 
type system gives type id ref ref don take strong evidence handle full functionality correctly 
example illustrates weakness approach 
exceptions instance may mimic creation far types concerned creating 
expression raise exit ref type system considers dangerous generalize 
type systems recognize created correctly generalize 
aw method little impact actual programming 
quest system attempt restricting creation mutable values concentrated type generalization 
inspired cardelli quest language departs signi cantly ml features mutable data structures polymorphic typing 
quest typing restrictions mutable values 
soundness ensured di erent semantics type specialization 
expression polymorphic type evaluated time type specialized contrast ml evaluated 
consistent fact polymorphism explicit quest programs polymorphic objects functions take type argument return specialized version object 
semantics incompatible ml generalization specialization kept implicit source program 
page fx fx ect system polymorphic type system performs purity analysis type expression indicates kind side ects evaluation perform 
provides simple way deal problem mutable values type expression generalized expression referentially transparent 
easy see pure expressions safely di erent types 
approach attractive purposes automatic program parallelization de nitely address main issue considered give type semantically equivalent functions written applicative style imperative style 
reason purity analysis fx apparent types function allocates mutable data local purposes 
instance imperative map applicative map type fx 
extension ml type system considerably enhances support data accepting place modi cation 
signi cant step integration polymorphic type discipline imperative programming style 
introduced notion closure typing essential soundness approach 
type system performs closure typing labels constraints 
system simple falls short conservative extension ml 
includes investigating alternate subtle ways typecheck closures reject typed ml program correctly keeping track mutable data 
scope strictly limited problem mutable data structures 
instance known polymorphic exceptions raise issues handled way 
generally similar problems arise integration polymorphic typing programming paradigms 
instance approach integration functional logic programming allow partially de ned values containing logical variables conventional functional language 
polymorphic logical variables break type safety just polymorphic amenable treatment 
object oriented programming status variables objects seen systematically encapsulated functions methods 
closure typing relevant polymorphic typechecking objects 
calculi communicating systems feature channels rst class values 
polymorphic typing channels guarantee senders receivers agree types transmitted values similar ensuring writers readers consistently 
acknowledgments didier emy suggested constraints typing rules 
bene ted expertise type inference uni cation problems 
brad chen editorial help 
proof soundness appendix sketch proof soundness type system respect operational semantics section 
formalize fact value semantically belongs type expression constraints write hypothesis store typing partial mapping locations type expressions 
store typing needed take account sharing values introduced store 
de nition semantic typing judgements store typing value type constraint sequence 
predicate de ned induction int int loc ref belongs domain clos dom exists type schema exists typing environment predicate extended type schemas vn substitutions vn evaluation environment typing environment 
say dom dom dom page similarly store 
say dom dom dom proof soundness fact semantic typing judgement stable substitution 
lemma semantic substitution substitutions 
starting value possible general access location store 
set locations reachable de ned induction follows 
de nition reachable locations int loc clos dom de nition types locations reached irrelevant 
assume type locations lemma garbage collection store typings 
type expressions informative allow connect type location reachable value type precisely key lemma relates variables free type dangerous variables lemma store typing control assume location 
fv dv proof induction case int int 
obvious locations reachable case ref loc de nition reachable locations fv fv dv 
case clos 
variable reachable 
type scheme write vn 
substitutions vn get induction hypothesis fv dv chosen substitutions follows fv dv fv vn desired result fv dv dv ready show soundness typing rules 
proposition soundness assume evaluation environment store store typing assume exists store typing extending proof induction length evaluation 
cases proceed tofte proof chapter binding 
step typing derivation gen applying induction hypothesis rst premise get extending apply induction hypothesis premise need show write gen vn 
extends vn free corollary lemma 
remains show vn prove substitution lemma page de nition gen appears constraint lemma location reachable fv dv dangerous free 
claim follows lemma 
apply induction hypothesis right branch typing derivation getting extending va expected result 
appel macqueen 
standard ml manual preliminary 
bell laboratories 
included standard ml new jersey distribution 
cardelli 
typeful programming 
neuhold paul editors formal description programming concepts pages 
springer verlag 
cousineau huet 
caml primer 
technical report inria 
damas 
type assignment programming languages 
phd thesis university edinburgh 
damas milner 
principal type schemes functional programs 
th symposium principles programming languages pages 
acm press 

mishra 
type inference subtypes 
esop volume lecture notes computer science pages 
springer verlag 

girard 
interpr etation elimination des coupures de arithm etique ordre sup erieur 
th ese etat universit paris vii 
gordon milner wadsworth 
edinburgh lcf volume lecture notes computer science 
springer verlag 
lucassen gi ord 
polymorphic ect systems 
th symposium principles programming languages pages 
acm press 
milner parrow walker 
calculus mobile processes part 
research report university edinburgh 
milner tofte harper 
de nition standard ml 
mit press 
mitchell 
coercion type inference 
th symposium principles programming languages pages 
acm press 
reppy 
class synchronous operations standard ml 
technical report tr cornell university 
reynolds 
theory type structure 
programming symposium paris volume lecture notes computer science pages 
springer verlag 
smolka 
fresh higher order language uni cation multiple results 
degroot lindstrom editors logic programming functions relations equations pages 
prentice hall 
tofte 
operational semantics polymorphic type inference 
phd thesis cst university edinburgh 
tofte 
type inference polymorphic 
information computation 
page 
