kelips building cient stable dht increased memory background overhead gupta ken birman prakash demers robbert van renesse cornell university ithaca ny usa gupta ken cs cornell edu peer peer distributed hash table dht system allows hosts join fail silently leave insert retrieve files objects explores new point design space increased memory usage constant background communication overheads tolerated reduce file lookup times increase stability failures churn 
system called kelips uses peer peer gossip partially replicate file index information 
kelips normal conditions file lookups resolved time complexity independent system size membership changes large number nodes fail detected disseminated system quickly 
node memory requirements small medium sized systems 
failures lookup success ensured query rerouting 
kelips achieves load balancing comparable existing systems 
locality supported topologically aware gossip mechanisms 
initial results ongoing experimental study discussed 
system name derived name self synchronizing accumulate branches mangrove trees malaysia 
system organizes similarly nity groups nodes group synchronize loosely store information common set file indices 
authors supported part darpa part muri afosr additional support afrl information assurance institute microsoft research intel 
peer peer distributed hash table dht implements operations allowing hosts processes nodes join system fail silently leave system insert retrieve files known names 
dhts deployed fasttrack systems kazaa focus academic research chord pastry tapestry :10.1.1.28.5987
systems tradeo amount storage overhead node communication costs incurred running costs file retrieval 
exception gnutella just cited focused design point storage costs logarithmic system size small lookup costs logarithmic cache hits shortcut search 
study file sharing systems gnutella napster shown significant fraction nodes connected high latency low bandwidth links 
presence slow logical hop logarithmically long path 
increases cost lookup 
argue avoided exploring potentially interesting points design dhts 
vary soft state memory usage background network communication overhead node order realize lookup costs 
example complete replication soft state achieves approach prohibitive memory bandwidth requirements 
kelips system uses space node number nodes system 
soft state su ces resolve lookups time message complexity 
continuous background communication constant overhead maintain index structure high quality guarantee quick convergence membership changes 
design point interest kelips storage overhead associated membership data structure associated replication henceforth called data impose asymptotic cost 
kelips uses query rerouting ensure lookup success spite failures 
mechanism allows round trip time estimates select nearby peers node 
memory usage small systems moderate sizes files inserted node system kelips uses mb memory node 
system exhibits stability face node failures packet losses expected ride churn arising wide area settings rapid arrival failure nodes 
resilience achieved lightweight epidemic multicast protocol replication system membership data file indexing data 
note dht systems treat file replication lookup focuses lookup problem leaving replication application 
reasons brevity omits discussion privacy security considerations 
core design kelips consists virtual nity groups numbered 
node lies nity group determined consistent hashing function map node identifier ip address port number integer interval 
number nodes currently system 
cryptographic hash function sha ensures high probability number nodes nity group node soft state consists entries nity group view partial set nodes lying nity group 
entry carries additional fields round trip time estimate heartbeat count node 
hello ms ms 
group affinity 
node id rtt filename group affinity group view contacts soft state node kelips system nodes distributed nity groups soft state hypothetical node 
contacts nity groups system small constant sized set nodes lying foreign nity group 
entries contain additional fields nity group view 
partial set tuples detailing file name host ip address node storing file called file 
node stores file lies node nity group 
associated heartbeat counts 
illustrates example 
entries stored avl trees support cient operations 
memory usage node total storage requirements kelips node entries number contacts foreign nity group total number files system 
fixed minimized assuming total number files proportional fixed optimal varies 
minimum varies 
asymptotically larger chord pastry turns reasonably small medium sized systems 
consider system nodes nity groups 
current implementation uses entries membership entries maintains contacts foreign nity group 
inserting total files system entails mb node soft state 
memory requirements file lookup queries return location file time message complexity costs invariant system size background overhead existing view contact entries refreshed periodically groups 
occurs mechanism 
view contact entry stored node associated integer heartbeat count 
heartbeat count entry updated pre specified time period entry deleted 
heartbeat updates originate responsible node disseminated peer peer epidemic style gossip style protocol :10.1.1.20.5411
gossip communication constitutes background communication group 
continuous gossip stream disseminate new view contact entries system 
outline gossip style dissemination nity group 
piece information heartbeat update multicasted group constant background bandwidth incurring latency increases group size 
node receives piece information multicast node application node gossips information number rounds round fixed local time interval node 
round node selects small constant sized set target nodes group membership sends nodes copy information 
gossiping uses constant bandwidth 
high probability protocol transmits multicast nodes 
latency shown vary logarithm nity group size 
gossip messages transmitted lightweight unreliable protocol udp 
gossip target nodes selected weighted scheme roundtrip time estimates preferring nodes topologically closer network 
kelips uses spatially weighted gossip proposed 
node round trip time estimate rtt selected gossip target probability proportional rtt suggested value latency polylogarithmic log 
analysis experimental studies revealed epidemic style dissemination protocols robust network packet losses transient permanent node failures 
maintain stable multicast throughput nity group presence failures 
see 
information heartbeats need propagate nity groups keep contact entries nity group expiring 
achieved selecting contacts gossip targets gossip round 
dissemination implies level gossiping scheme similar :10.1.1.20.5411
uniform cross group target selection latency single group gossip multiplicative factor log nity groups log 
gossip messages kelips carry just single entry membership entries 
includes entries new deleted updated heartbeat 
kelips limits bandwidth node soft state packed gossip message 
maximum rations imposed numbers view entries contact entries entries gossip message may contain 
entry type ration subdivides equally fresh entries ones far included fewer threshold number gossip messages sent node older entries 
entries chosen uniformly random unused rations due fewer fresh entries filled older entries 
ration sizes vary increases dissemination latencies factor epidemic protocol soft state 
heartbeat timeouts need vary log view entries log contact entries 
numbers convergence times system membership changes 
low convergence times achieved gossip messages sent received node 
gossip stream imposes constant node background overhead 
gossip stream able disseminate heartbeats new entries despite node packet delivery failures 
number members files number files files files files load balancing number nodes axis storing number files axis kelips system nodes nity groups 
file lookup insertion lookup consider node querying node desires fetch file 
querying node maps file name appropriate nity group consistent hashing decide node nity groups 
sends lookup request topologically closest contact knows nity group 
received lookup request resolved searching maintained node returning querying node address storing file 
scheme returns address querying node time message complexity 
querying node fetches file directly 
insertion node origin node wants insert file maps file name appropriate nity group sends insert request topologically closest known contact nity group 
contact picks node nity group uniformly random forwards insert request 
node file 
file transferred origin node 
new created map file inserted gossip stream 
insertion occurs time message complexity 
origin node periodically refreshes entry order keep expiring 
clearly factors empty contact sets incomplete replication cause stored member normalized time file ins sec file tuples files disk load balancing ii files inserted node system nity groups insertions sec 
plot shows variation time number files node average standard deviation 
hop lookup insertion fail 
biased partial membership information cause uneven load balancing 
addressed general multihop multi try query routing scheme section 
auxiliary protocols algorithms outline kelips protocols node arrival membership contact maintenance topological considerations multi hop query routing 
joining protocol existing systems node joins kelips system contacting known node group known url 
joiner view returned new node warm soft state allow start gossiping populating view contact set 
gossip stream spreads news new node quickly system 
spatial considerations node periodically pings small set nodes knows 
response times included round trip time estimates spatial gossip 
contact maintenance maximum number contacts fixed gossip stream supplies potential contacts continuously 
contact replacement policy ect lookup insert performance system 
proactive reactive takes account factors node distance accessibility firewalls time round trip times normalized time file ins sec st try nd try rd try th try failure file insertion turnaround times roundtrip time units file insertion node kelips system nity groups 
currently proactive policy chooses farthest contact victim replacement 
multi hop query routing file lookup insert query fails querying node retries query 
query re tries may occur axes querying node ask multiple contacts contacts asked forward query nity group specified ttl querying node request query executed node nity group di erent file nity group 
query routing occurs random walk file nity group querying node nity group 
ttl values multi hop routed queries maximum numbers tries trade lookup query success rate maximum processing time 
normal case lookup processing time message complexity stay 
file insertion occurs similar multi hop multi try scheme file inserted exactly node ttl expires 
helps achieve load balancing increases normal case insertion time grow log 
competitive existing systems 
experimental results evaluating prototype implementation kelips 
section reveals preliminary numbers trace experiments done similar lines previous 
multiple nodes run single host ghz lookup result code normalized time file lookups sec failure file healthy node failure file failed node success fault tolerance lookups node nity groups system lookups generated sec 
time nodes selected random caused fail 
plot shows lookup successful axis failed failed axis failed spite alive axis 
cpu gb ram win emulated network topology layer 
unfortunately limitations resources memory requirements restrict currently simulated system sizes 
background overhead current configuration consists node gossiping normalized seconds 
rations limit gossip message size gossip targets chosen contacts 
load balancing files inserted stable kelips system 
file name distribution set anonymized web urls obtained berkeley home ip traces 
load balancing characteristics better exponential 
file distribution files inserted insertions normalized second time shown plot shows distribution small deviation mean 
file insertion occurs multi try tries multi hop scheme ttl set logn logical hops 
shows turnaround times insertion di erent files 
complete try take tries take tries 
fail require tries 
views replicated instance 
di erent experiment nodes views maximum size inserts required try required tries required tries needed tries failed 
multi hop routing provides resilience average affinity group view size normalized time fault tolerance lookups ii time nodes nity group system fail 
plot shows failure detection view stabilization occurs time 
incomplete replication soft state 
fault tolerance dhts required tolerant dynamic conditions high churn rates 
measure resilience kelips scenario half nodes system caused fail simultaneously 
figures show ectiveness background gossip communication 
lookups initiated constant rate fail failed 
words multihop rerouting redundant membership information ensures successful lookups despite failures 
responsiveness failures membership entry information stabilize quickly membership change 
investigating new design point dht systems increased memory usage replication membership information constant low background overhead node order enable file lookup operations ensure stability despite high failure churn rates 
node memory requirements small medium sized systems mb files node system multi hop multi try query routing enables file lookup insertion succeed bandwidth limitations network lead partial replication soft state 
observe satisfactory load balancing 
kelips dhts memory usage traded faster lookup times systems chord pastry tapestry varying value base parameter pastry base value chord determines branching factor overlay structure 
routing table entries large lead high network tra keep updated nodes join leave fail 
kelips loosely structured need maintain structure invariants ring routing table entries soft state allows object lookups insertions succeed spite stale membership contact entries 
bailey epidemic theory infectious diseases applications hafner press second edition 
birman hayden xiao budiu minsky bimodal multicast acm trans 
comp 
syst pp 
may 
dabek kaashoek karger building peer peer systems chord distributed lookup service proc 
th 
hot topics operating syst may 
demers greene hauser irish larson epidemic algorithms replicated database maintenance proc 
th acm symp 
principles distributed computing podc pp 

kempe kleinberg demers 
spatial gossip resource location protocols proc 
rd acm symp 
theory computing stoc pp 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems proc :10.1.1.28.5987
ifip acm middleware 
van renesse minsky hayden failure detection service proc :10.1.1.20.5411
ifip middleware 
proc 
st intnl 

peer peer systems iptps lncs springer verlag 
saroiu gummadi gribble measurement study peer peer file sharing systems proc 
multimedia computing networking mmcn 
internet tra archive ita ee lbl gov river malaysia www firefly com htm 
