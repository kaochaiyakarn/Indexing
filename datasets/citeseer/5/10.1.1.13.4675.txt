controlling access pervasive information solar system david kotz dept computer science dartmouth college hanover nh usa cs dartmouth edu www 
cs dartmouth edu solar dartmouth computer science technical report tr february 
pervasive computing infrastructures collect lot context information disseminate context aware applications 
due personal proprietary nature context information infrastructure limit access context information authorized persons 
propose new access control mechanism event infrastructures 
core approach conservative information flow model access control users may express discretionary relaxation resulting access control list act specifying relaxation functions 
combination automatic acl derivation user specified acl relaxation allows access control determined enforced decentralized distributed system central administrator central policy maker 
allows users express personal balance functionality privacy 
infrastructure allows access control policies depend contextsensitive roles allowing great flexibility 
describe approach terms specific context dissemination solar system principles apply systems similar properties 
pervasive computing applications automatically adapt changing conditions execute 
context aware applications take account information context location user relevant devices presence people light sound conditions available network bandwidth 
necessary sensors increasingly available particularly location note sensor data processed higher level context information applications 
unreasonable expect application raw sensor data unscalable expect single context server support diversity transformations scale numerous applications users 
gratefully acknowledge support cisco systems university research program ibm microsoft research dod muri contract dartmouth center mobile computing 
need infrastructure aggregate transform low level sensor data context aware applications remaining flexible scalable 
systems event flow model sensor data represented events graph operators transform event streams event streams desired applications 
solar system described companion example 
gryphon 
infrastructure allow applications users share sen sor data context information 
hand context includes infor mation considered private users location proprietary organizations marks written shared whiteboard calendar meetings product teams 
context information infrastructure control access information disseminates 
researchers note importance privacy security context aware computing surprisingly little literature access control context information systems 
propose access control mechanism protecting context information infrastructure collecting processing disseminating context information 
mechanism support variety large number sources policies applications 
infrastructure solar context information derived numerous sources wide variety operations 
applications users dynamically request new derivative information supply new operations 
dynamic environment unreasonable expect system administrator users manually specify access control list event event stream 
approach event tagged access control list acl 
operator event flow graph automatically tags events produces acls input events optional restriction rule provided operator programmer optional relaxation rules provided users 
way operators derive information sensor data derive necessary acl 
approach discretionary users may discretion explicitly relax acls access users 
explicit relaxation derive conservative default access control policy principles borrowed information flow theory 
convention sources publish information narrow acls default personal information remains private users explicitly release explicit structured fashion 
system allows acls include context sensitive roles example thermostat application may allow access currently room specifying role membership changes people come go 
access control poli cies context aware 
section briefly describe event distribution infrastructure solar system 
section describes design objectives section explains semantics access control mechanism 
section explain key implementation issues system 
discuss related section section summarize section 
solar access control mechanism designed solar system development dartmouth college systems solar 
section summarize features solar needed understand 
information see companion earlier 
solar middleware supports collection processing dissemination context information context aware applications 
solar sensor data context information represented events flowing sources operators filter transform aggregate events new events applications 
uses publish subscribe model event flow 
sources operators publish single stream events operators applications may subscribe streams events 
systems solar publisher produces event stream event stream publisher 
operator subscribing multiple event streams receives event time streams arbitrarily interleaved events publisher delivered order published ordering defined events different publishers 
operator graph 
operator object subscribes processes input event streams publishes event stream 
inputs output operator event streams operators connected recursively 
application wants flow context information asks solar instantiate subscription tree describes flow events set sources leaves tree set operators application root tree 
solar re uses existing sub trees possible applications users may transparently share operators event streams 
overlapping subscription trees form directed acyclic graph call operator graph 
example 
consider example office building location tracking system 
room location sensor periodically reports identification number badge detects room 
transform operators map badge id name person device attached badge merge operator combines streams event stream 
aggregator operator uses internal state detect location changes emitting event person device changes location 
active map application uses resulting stream display current location tracked objects 
application tour guide bob uses obtain events bob movements 
note applications share operators streams 
example demonstrates varieties solar operators filter transform merge operators stateless aggregation operators may internal state 
ultimately operators simply objects implementing operator interface 
solar allows applications operators instantiated classes library common operators classes provided application programmer 
result functionality operator opaque solar 
solar asks operator handle new event result operator publishes zero events 
fig 

sample operator graph 
transformers mergers aggregators filters 
id location active change map merger application location bob guide architecture 
system distributed hosts abstraction operators applications operator graph 
applications run outside solar system platform small solar library allows request subscriptions receive events standard network proto cols 
summary 
describe access control mechanism terms solar infrastructure features dependent specifics solar 
ultimately mechanism suits event context dissemination infrastructure events produced sources processed shared collection operators subscribe process publish derived events consumed applications 
particular approach depend solar graph structure model event streams 
design goals objectives design system controlling access context information solar systems 
primary objective limit application access events events contain information considered private certain individuals proprietary certain organizations 
assume applications run behalf specific principal objective means applications receive events principal allowed access 
accomplishing objective consider properties operator graph 
node operator graph may shared applications users 
second variety information sources applications operators needed derive desired event streams sources 
imagine special principal anonymous represent applications running pub lic display kiosk unauthenticated device 
infeasible manually specify access control list event stream 
third operator graph changes applications sensors come go know topology operator graph advance 
fourth scalable performance operator graph deployed servers 
second objective avoid central authority defines policies 
generating access control lists automatically principles information flow giving users discretion relax acls deem appropriate empower users reduce management overhead 
accommodate personal differences privacy policies encourage users contribute new sources operators applications define access control policies requiring blessing central authority 
third objective allow users specify context sensitive access control policies 
example bob may release current location lets receive events location currently room 
presumably see bob physically events significantly reduce bob privacy may allow user implement context aware applications mentioned literature application reminds mention party time see bob 
fourth objective specific solar maintain transparency operator sharing 
solar may overlap subscription trees produce graph shared operators transparently operators applications 
certain features explicitly objective current research 
want enforce strict information flow policy insufficiently flexible 
impractical assume computations occur inside trusted environment maintains information flow principles 
application outside solar event application giving away information 
prefer directly support limited forms acl relaxation allow reasonable information sharing occur explicitly framework 
second address covert channels 
third protect data mining effort infer sensitive information information legitimately obtained 
access control authentication trust 
said assume solar system authenticates application users sufficiently attach principal running application 
assume communications solar hosts constituting solar infrastructure encrypted channels 
focus limiting set events legitimate principals protection eavesdroppers 
assume applications users operators trust solar infrastructure solar trust applications operators 
access control semantics section describe approach access control principals access control lists 
user represented named principal 
principal may named roles 
role contains list principals roles 
access control list acl list principal role names 
notation principal role universal set principals roles 
decide attach acl event event stream 
note operators may publish events reasonably different acls 
example event bob loca tion acl bob event alice location acl alice 
choose attach separate acl event 
event ei parts eq di data field acl field 
application executes behalf principal 
application may subscribe event stream may receive event application principal member event acl holder role mentioned acl 
specifically principal event ei acl ai allow access iff defined follows ai ai ai 
notice definition recursive roles defined hierarchically 
implementation take care recursion avoid cycles role definitions 
acl derivation operator may receive events lom different publishers produce different events 
inconvenient impossible operator programmer determine appropriate acl output event consider generic operator filters room temperature events 
operator may shared applications users possible define acl published event 
wish derive acl output event function acl incoming events desires operator programmer desires interested user 
call approach acl propagation access control information propagates operator graph 
discussion follows focus single operator 
lifetime received series events el 
events subscription arrive order published events multiple subscriptions arbitrarily interleaved sequence 
operator allowed execute handler event ei 
handler result publish zero new events eij handler produces data field ij 
show derive acls ai ai stages 
solar computes default acl conservative information flow approach 
second operator programmer may restrict acl 
third principal acl may relax acl 
acl 
receiving set dij solar computes default acl event 
computation depends operator handler read wrote internal state computing event 
stateless operators concern sensitive information earlier events may leak event 
default output acl input acl 
defi state read operators internal state solar computes default acl principles information flow control systems 
operators opaque apply information flow principles inside operator conservatively derive output event acl intersection acls event received operator 
na policy restrictive cases 
consider merge operator receives event bob location tagged bob event alice location tagged alice 
intersection rule event published arrival alice event empty acl 
solar forces operators represent internal state set state objects associated simple key string 
key meaning determined operator programmer example key may principal name 
think set states hash table methods get put rules apply handling event operator may call get put 
state retrieved get unchanged followed put get retrieves copy state 
calls get put calls key 
call put creates state sl exist 
rules prevent information leaking states 
solar maintains accumulated acl state 
informally state may contain information gathered prior events accumulated acl upper bound intersection acls prior events 
input event ez define accumulated acl state acc put acc put followed get acc followed update definition 
ai handler read state ai intuitive reading rule output event inherits acl input event computation polluted state information may contain information remain private 
restriction rule 
operator programmer may wish restrict acl output events operator parameters may contain sensitive information affects output results operator contains algorithm computes valuable information valuable input data 
developer option include function restrict ci dij computes list principals removed 
default restrict ci di returns function compute output acl suggested operator restrict dij anticipate situations helpful allow re strict function get state change data dij narrow eventual acl aij 
relaxation rule 
allow users attach relaxation function operator relax acl events output operator 
principal may specify access control policy defining attaching relaxation function relax ci dij 
expect cases user may supply constant function relax ci dij ilx function allows flexibility 
supplied default ei dij 
solar computes relaxation functions contributed principals ready access event 
rationale principals may subscribe directly operator receive events pass friends anyway 
relaxation function allows structured solution 
compute set principals added eligible principals note computationally expensive presence contextsensitive roles see section expect implementations define acl output event sources 
discuss operators rules apply sources 
difference sources input events 
equations hold apply source publishes sequence events 
definition 
restrict null computed op usr 
pro grammer source restrict define output acl acl may relaxed users rules operators 
example location sensors restrict define acl raw sensor data principal representing administrator location sensing sys tem 
id transformer operator translates badge ids person names principal adds relaxation function adds principal location event person assuming clear mapping people principals 
approach conservative raw sensor data remains private administrator named sensor data private individual 
fig 

example acl propagation 
arrows labeled event represented tuple item denotes principal name data field second item denotes acl field 
data field contains location brevity omit information 
meeting bob bob 
mot bob dave 
bob lion 
ice 
notice events pass stateless merge operator unchanged acls 
location change aggregator takes care separate state object sp principal location events pass unchanged acls 
aggregator publishes events alice tagged acl alice solar deliver events active map application run bob see section 
left individuals decide relax acl events 
assume alice want visible applications willing allow dave meeting application run dave see meeting room 
adds dave relaxation list aggregator monitor outputs arrival departure events people room 
context sensitive roles instances policy context sensitive access list produced relaxation function depends current context information available event 
furthermore difficult users write relaxation functions 
reasons allow acls contain name roles 
role access control rbac permissions associated roles directly principals 
roles usually semantics meaningful ordinary users people room chairperson meeting 
role defined context sensitive set principals acl including role context sensitive 
example suppose alice allows people meeting room receive location information 
adds relaxation function case constant outputs role name 
role defined contain set principals corresponding people currently room bob dave room applications receive event alice see section 
fig 

example context sensitive policy 
bob bob bob bob alice alice monitor alice alice dave dave dave dave implementation issues section describe important implementation issues 
operator state discuss section necessary insist operators internal state managed solar get put functions 
implementation case java provide tour properties 
operator state operator class defines hnd ct static methods allowed static fields access files open network connections 
second ensure operator read solar managed state get hiding state solar object offers get put public methods 
third state created updated calling put returns copy state solar copy state 
fourth get put rules described section enforced implementations get put 
access control enforcement ultimately point computing event acl limit set applications may receive event 
purpose solar adds special acl operator root enforce properties byte code analysis 
subscription tree shown 
event ei di ai operator special event handling method returns boolean indicating pass di application 
acl operator constructed parameter principal running application returns true iff ai 
evaluate expression acl operator recursively check membership roles named ai describe 
fig 

solar inserts special acl operator root subscription tree 
event operator graph event application evaluation role names approach allows roles named acls roles defined context sensitive way 
need efficient mechanisms define context sensitive roles test role membership 
define new context sensitive role user may ask deploy name subscription tree root operator publishes events listing current set mem ber principals may keep date role membership changes simply subscribing role root operator name 
solar name space scope see 
instances solar needs evaluate role membership filtering events acl operator computing relaxation functions publisher 
consider acl operator needs test needs evaluate single principal membership role attached incoming event 
simplest approach query role operator membership 
operators query interface approach requires round trip message role event prefer subscription approaches allow acl operator maintain list current roles 
example principal active applications solar deploys trusted aggregator subscribes roles publishing event joins leaves role 
acl operators lbr efficiency implementations allow types events set list announces full membership add announces additions membership de st announces deletions lom membership 
subscribers maintain cun ent list state 
subscribe operator 
approach explains chose implement enforcement operator normal method processes incoming role updates special ac ce sa owe method processes incoming data events 
consider ordinary publisher needs test registered relaxation functions 
simplest approach subscribe aggregator mentioned principal registers relaxation functions 
may efficient monitor roles directly 
avoid overhead monitoring role membership expect implementations narrow test 
related little published access control event distribution systems pervasive computing 
spreitzer theimer discuss privacy issues involved applications developed mechanism encode user privacy policy user agent collected disseminated user personal context information 
approach limited location context generalize derived context information 
ebling uses role access control protect privacy users context aware applications provides details 
system introduces context sensitive roles membership computed context information context sensitive roles allows specify flexible access control rules applications 
ideas substantially influenced information flow models access control 
traditional information flow policy restrictive projects provide ways declassify information 
ferrari object oriented system controls access objects information flow principles provides trusted functions relax strict information flow policy 
principal rights access object directly access trusted function 
acls define security level flow policy 
trusted function allow access objects principals acl clear mechanism situation relax event acl accessed applications downstream 
furthermore clear ordinary users power implement trusted functions contribute relaxation lists iw method myers extend java programming language allow variables tagged labels 
labels contain access control policy essentially acl owner variable 
variables computed label computed labels operands computation information flow principles 
owner principal may declassify variable extending acl label owner acls unchanged 
principal may obtain value variable intersection owners acls 
relaxation semantics liberal declassification semantics allow current access add principal acl 
approach intended compile time analysis fine grained information flow java programs may possible apply concepts events operators run time 
plan prototype proposed access control mechanism solar system apply realistic applications 
goal evaluate efficiency mechanism flexibility expressing realistic policies amount administrative overhead involved management 
need investigate alternatives testing membership context sensitive roles 
approach attaches acl event control application access event data 
wonder may useful attach trust integrity information event subscribers interpret event data terms willingness trust source intermediate operators 
focuses controlling access context information 
believe potential context information control access wide variety services computational access database physical access locked room 
framework allows context sensitive access control decisions context sensitive roles plan study wider variety uses context sensitive authorization general model 
summary security critical component realistic deployment pervasive computing 
pervasive computing infrastructure necessarily collects lot context information disseminate context aware applications due personal proprietary nature context data infrastructure limit access context infor mation authorized persons 
propose new access control mechanism eventbased context distribution infrastructures 
approach acl propagation event tagged acl derived automatically acl events contributed production approach conservative information flow model access control allow users express access control policies relaxation functions 
combination automatic acl derivation user specified acl relaxation allows access control determined enforced decentralized distributed system central administrator central policy maker 
allows users express personal balance functionality privacy 
infrastructure allows access control policies depend context sensitive roles allowing great flexibility 
met objectives applications may receive events principal access access control policies determined information flow principles relaxed appropriate request users access control policies context aware context sensitive role definitions operators event streams may shared multiple users applications sharing remains transparent users applications 
result approach secure flexible distributed believe scalable 
describes context solar system believe acl propagation technique apply event context dissemination infrastructures 
grateful chen design development solar system sean smith chris hawblitzel helpful discussions security chris chris hawblitzel feedback drafts 

marc kaplan kelly shaw robert strom daniel sturman wei tao 
information flow event distribution middleware 
middleware th ieee international conference distributed computing systems pages austin texas may 
ieee computer society press 

chen david kotz 
context aggregation dissemination ubiquitous computing systems 
technical report tr dept computer science dartmouth college december 
submitted wmcsa 

chen david kotz 
supporting adaptive ubiquitous applications solar system 
technical report tr dept computer science dartmouth college may 

chen david kotz 
solar pervasive computing infrastructure contextaware mobile applications 
technical report tr dept computer science dartmouth college february 
submitted pervasive 

norman cohen john turek luke wong danny yeh 
challenges flexible aggregation data 
technical report rc ibm research division thomas watson research center box yorktown heights ny january 

dorothy elizabeth denning 
data 
addison wesley publishing 

maria ebling hunt hui lei 
issues context services pervasive computing 
proceedings middleware mobile computing heidelberg germany november 

elena ferrari samarati elisa bertino sushil jajodia 
providing flexibility information flow control lbr object oriented systems 
proc 
ieee symposium privacy pages may 

jeffrey hightower gaetano borriello 
location systems ubiquitous computing 
eee computer august 

marc langheinrich 
privacy design principles privacy aware ubiquitous systems 
proceedings ubicomp international conference ubiquitous computing volume lecture notes computer science pages 
springer verlag 

andrew myers barbara liskov 
protecting privacy decentralized label model 
acm transactions software engineering methodology 

ravi sandhu edward coyne hal feinstein charles 
role access control models 
eee computer feb 

satyanarayanan 
pervasive computing vision challenges 
ieee personal communications august 
mike spreitzer marvin theimer 
providing location information ubiquitous computing environment 
proceedings th acm symposium operating stems principles sosp pages nc 
acm press 

