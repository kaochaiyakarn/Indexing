appeared real time systems volume number integrating external internal clock synchronization fetzer christof org performed department computer science engineering university california san diego la jolla ca editor ulrich schmid 
address problem integrate fault tolerant external internal clock synchronization 
propose new external internal clock synchronization algorithm provides external internal clock synchronization long majority time servers servers access time stay correct 
half time servers faulty algorithm degrades fault tolerant internal clock synchronization algorithm 
prove time servers necessary achieving external clock synchronization time servers suffer arbitrary failures proposed algorithm provides maximum fault tolerance 
derive lower bounds best maximum external deviation achievable standard mode best drift rate achievable degraded mode 
algorithm optimal respect bounds maximum external deviation optimal standard mode drift rate clocks optimal standard degraded mode 
keywords external clock synchronization internal clock synchronization lower bounds optimal external clock synchronization 
synchronized clocks crucial fault tolerant real time systems 
assume existence global time base called real time 
time granular representation real time typically provided standard source time nist 
clocks externally internally synchronized 
clock externally synchronized point real time distance value time bounded priori constant called maximum external deviation 
set clocks internally synchronized point real time distance values correct clocks set bounded priori constant called maximum internal deviation clock runs linear envelope real time 
externally synchronized clocks internally synchronized times maximum external deviation internally synchronized clocks externally synchronized 
systems consider consist set time servers provide time information local clients 
assume time server access local hardware clock 
hardware clocks viewed counter incremented earlier version published proceedings th international conference distributed systems may 
partially supported air force office scientific research german academic exchange service daad powell foundation sun microsystems microelectronics innovation computer research opportunities california 
ticks oscillator 
imprecisions oscillator temperature changes hardware clocks drift apart time 
rate drift typically small 
hardware clocks initially synchronized time eventually distance hardware clock time greater priori constant 
achieve external synchronization time server access time 
servers gps radio receivers receive time signal broadcasts standard source time 
time server local access time called time server servers non time servers 
failure model assumed allows time servers suffer arbitrary failures 
illustrate effects arbitrary failures assume correct non time servers externally synchronized say minute internally synchronized minutes 
time server suffered arbitrary failure tell non time servers time time respectively 
just set clocks approximation clock respectively externally internally synchronized 
general arbitrary failures time servers disturb external synchronization non time servers perturb internal synchronization 
cost hardware components needed access external time signals general negligible typically tries minimize number time servers needed system 
goal investigate issue time servers necessary provide external synchronization non time servers time servers suffer arbitrary failures 
note hardware clocks non time servers detect failures time servers 
example reads externally synchronized clock time server hardware clock shows approximations respectively knows faulty assumption correct reject clock value 
failures time servers detectable obviously needs time servers mask detectable time server failures 
hardware clocks drift apart real time failures time servers detectable 
prove processes hardware clocks detect failures time servers provide external synchronization time servers suffer arbitrary failures total time servers necessary sufficient 
related question investigate closely bound drift rate clocks non time servers half time servers suffer arbitrary failures 
require non time servers externally synchronized long majority time servers stay correct maximum drift rate hardware clocks show result best maximum drift rate non time servers achievable half time servers suffered arbitrary failures fault tolerant real time systems aware internal synchronization required correct operation system external synchronization mainly give users convenient time information 
example advanced automation system correctness automated recovery component failures depends correct internal clock synchronization system continue function absence external clock synchronization degraded way 
second goal integrate external internal clock synchronization require external internal clock synchronization algorithm maintains externally internally synchronized clocks long major ity time servers remain correct degrades internal clock synchronization half time servers faulty 
main motivations integrating internal external clock synchronization follows 
correctness applications guaranteed independently correctness availability time signals 
example correctness application depends internal clock synchronization external internal clock synchronization guarantees application correctness radio time signals signals produced forged adversary 

reduction cost minimizing number time servers 
example practical system contain time server 
server single point failure disturb correctness complete system 
integrated external internal clock synchronization algorithm guarantee clocks correct non time servers stay externally synchronized long time server stays correct internally synchronized time server fails 
external internal time service modes standard degraded integration mode 
introduce modes specify requirements properties time service 
global observer correctly determine current mode time service requires decide time servers currently faulty 
time servers correctly decision see section correctly determine current mode 
assume system starts standard mode clocks correct non time servers externally internally synchronized majority time servers correct 
case half time servers faulty service transits degraded mode 
failed time servers repaired correct time servers form majority service integration mode 
integration mode external synchronization correct non time servers reestablished case lost degraded mode 
service transits standard mode external synchronization reestablished 
address question close external clock synchronization algorithm synchronize non time server time 
show best maximum external deviation achievable sum terms maximum error correct time server approximating time maximum error reading remote clock additional error term takes care drift hardware clock correct non time server successive adjustments externally synchronized clock 
optimal maximum external deviation particular interest external clock synchronization algorithms typically bound maximum internal deviation twice maximum external deviation 
connecting time signal receiver standard interface serial interface avoid additional hardware operating system support external deviation quite significant 
example dependable systems laboratory time server error ms approximating time gps receiver guarantees better approximation accessed serial interface 
simple external clock synchronization algorithm mean clocks non time servers ms apart 
third goal show bound maximum internal deviation independently maximum external deviation 
proposed external internal clock synchronization algorithm achieves tight internal synchronization time servers loosely synchronized time 
properties proposed algorithm follows standard mode maximum external deviation maximum drift rate clocks optimal degraded mode maximum drift rate clocks optimal twice maximum drift rate hardware clocks 

related integration external internal clock synchronization addressed authors 
schmid addresses integration external internal clock synchronization context real time systems 
kopetz addressed problem integrate external internal clock synchronization context synchronizing multicluster real time systems 
considers time server 
proposes external synchronization scheme degrades internal synchronization case time servers unavailable 
scheme switches external synchronization soon time servers available 
approach fit completely requirements external internal clock synchronization switch internal external clock synchronization violate requirement drift rates externally internally synchronized clocks bounded small constant see section 

system model consider distributed systems consisting computer nodes connected communication network 
communication service allows processes run nodes communicate exchanging messages 
node runs time server non time server process see 
time servers local access time approximate time communicating nodes 
goal time servers provide access time non time servers time server maintains clock section read non time servers 
time server local hardware clock section 
non time servers local mean approximate time read remote clocks 
goal non time servers provide externally internally synchronized virtual clock section local clients 
denote set time servers set time servers set non time servers denote number time servers time servers non time servers respectively 
assume non time server rank unique non time servers respectively 
denote rank time server function formally express constrains term process server refer time server 

time assume granularity real time infinitesimal denote set real time values 
assume event associate point occurrence real time 
time granular representation real time 
defined sequence ticks see 
tick represents point real time time starts 
precisely time satisfies requirements 
distance successive ticks exactly constant granularity time gps receiver server non server client client node node 

typical architecture external internal time service 
gps receiver server 
real time time perfect synchrony node non server lan client client 
point real time value time real time granularity time negligible systems consider 
follows distinguish time real time term real time term time 
time real time node 
time represents real time sequence ticks 
clocks time servers local access time allows approximate time point time priori error implementation details access assume time server maintains clock represents current approximation time 
clock correct time server constant interval real time see 
represent clock time server function real time clock time term denotes value clock real time clock correct time deviation real time bounded priori constant drift rate correct clock zero points real time property holds clocks implemented various ways 
example dependable systems laboratory workstations access gps receiver serial interface thread time server periodically reads current time provided gps receiver determine difference time hardware clock 
current value clock defined sum current value hardware clock plus computed difference value system maximum deviation clock time milliseconds 
implementing clocks operating system kernel hardware reduce deviation microseconds 
clock time 
process clock real time 
xr real time 
hardware clocks time server access local hardware clock 
hardware clock typically consists oscillator counting register incremented ticks oscillator 
hardware clock certain granularity tick oscillator increments value hardware clock correct hardware clocks monotonically increasing 
impressions oscillator temperature changes aging hardware clock drift apart real time 
drift hardware clock narrow envelope real time see 
denote set clock values contains values hardware clock display 
represent process hardware clock function real time clock time term denotes value displayed counter hardware clock real time hardware clock correct time times measures passage time real time interval error maximum hardware clock drift rate specified clock manufacturer quartz clocks available modern computers constant order small quantity ignore terms example equate follows assume granularity hardware clocks negligible 
clock time dt dt dt dt dt dt real time 
drift rate process hardware clock 

virtual clocks clock synchronization algorithms general synchronize local hardware clocks nodes 
introduce concept virtual clocks maintained time servers see 
goal ensure virtual clocks correct non servers externally internally synchronized 
clients read virtual clock local time server access time standard mode internal time degraded integration mode 
assume non time servers local clients non time servers maintain virtual clocks 
follows term correct virtual clock denote virtual clock correct time server 
virtual clock time server represented mapping real time clock time term denotes value virtual clock real time protocols propose value determined adding local hardware clock periodically updated adjustment value 
denote points realtime process updates adjustments value adjusts virtual clock infinite strictly increasing sequence value adjustment value successive adjustments occur times denoted time value adjustment value time assume say process round time iff time defined exists process virtual clock adjust clock process read remote virtual clocks 
particular protocols propose process wants read remote virtual clocks respect adjustment values current round known concept round clocks 
process round clock round defined note round clocks monotonically increasing hardware clocks monotonically increasing adjustment value constant 
round clock virtual clock necessarily monotonic decreasing adjustment value time decreases value time 
remote clock readings proposed clock synchronization protocols non time server estimates round values displayed round clocks round values clocks 
approximation performed remote clock reading method 
reading method allows time server estimate value displayed remote displays round clock clock current round clock time virtual clock adjustment value hardware clock 
example process virtual clock defined sum current value hardware clock periodically determined adjustment value 
term denote approximation round clock time round clock shows assume remote clock reading error provided reading method bounded priori constant called maximum clock reading error 
clock reading method invoked process round requests read round clock shows require time correct time current round clock remote clock reading method estimate remote clocks 
denote approximation clock non time server current round clock displays assume reading error remote clocks bounded constant process invokes method time current round requests read clock time current round clock shows require time correct interval execution remote clock reading method takes time 
assume remote clock reading performed correct process terminates units remote round clock invokes method real time approximate clock time round clock shows clock reading method returns approximation time hardware clock progressed times real time units sufficient read remote round clock 
able bound clock reading error constant time remote clock approximated constrained process real time approximates value shows real time reading error contains part proportional distance know actual drift rates drift apart drift apart times terms constrain distance able bound reading error priori constant 
assume shown time invokes method time shows clock time units invoked method reading local hardware virtual clock done smaller error reading remote clock 
assume process read local clock negligible reading error 

failure model assume hardware clocks clocks processes experience arbitrary failures 
correct time server correct hardware clock correct time server correct clock 
simplicity assume failed non time server recover faulty real time faulty times explain reintegration recovered non time servers 
address issues related repair time servers 
failure model allows faulty time servers recover 
section describe external synchronization correct virtual clocks reestablished integration mode case lost degraded mode 
discuss clock reading failures occur correct time server estimates remote virtual clock correct time server error greater methods making synchronization algorithms tolerant remote clock reading failures proposed 

requirements section define internal external external internal clock synchronization precisely 

internal clock synchronization objective internal clock synchronization algorithm bound deviation correct virtual clocks constant called maximum internal deviation 
requirement bounded internal deviation non time servers correct real time second goal bound drift rate virtual clocks constant 
account granularity adjustments virtual clocks constant introduced 
constant called maximum discontinuity virtual clocks 
requirement bounded drift rate non time server correct time times internal clock synchronization algorithm correct satisfies requirements 
requirements internal clock synchronization allow virtual clock non monotonic exist correct process points real time clock synchronization protocols propose show non monotonic behavior certain runs 
protocols extended provide monotonic clock behavior continuous clock amortization increasing maximum internal deviation maximum external deviation 
idea adjustment virtual clock spread time interval effectively speed virtual clock temporarily slowed increased 
continuous clock amortization adjust virtual clock backwards 

external clock synchronization correct external clock synchronization algorithm bound deviation correct virtual clock real time priori constant called maximum external deviation 
requirement bounded external deviation time non time server correct drift rate clock drift rate externally synchronized clock zero 

external internal clock synchronization external internal clock synchronization requires standard mode correct virtual clocks externally internally synchronized degraded integration mode correct virtual clocks internally synchronized external synchronization eventually reestablished integration mode half time servers faulty 
define requirements external internal clock synchronization precisely give precise definition different modes external internal time service 
definition degraded mode fact non time server read majority clocks able bound external deviation virtual clock see section 
guarantee correct process succeeds read majority correct clocks sufficient require point time exists majority correct time servers 
explain consider 
remote clock reading method invoked point time read clock method take time units return approximation point time approximation returned guaranteed real time correct times see section 
require majority time servers correct interval ensure correct process invokes remote clock reading method read clocks succeeds read majority correct clocks error knowing expression majority time servers correct say exists majority time servers correct interval 
service degraded mode time iff exists majority time servers correct service integration mode iff majority time servers correct service switched degraded mode integration mode time service degraded mode integration mode interval correct virtual clocks externally synchronized time service standard mode iff majority time servers correct service switched degraded mode integration mode standard mode time service degraded mode integration mode nonempty interval standard mode interval correct virtual clocks externally synchronized time assume external internal time service starts execution point real time 
simplicity assume service standard mode time initially correct virtual clocks externally internally synchronized 
correct external internal clock synchronization protocol satisfy requirements bounded internal deviation bounded drift rate requirements requirement bounded external internal deviation time service standard mode time non time server correct require external clock synchronization eventually reestablished integration mode service transits degraded mode requirement integration requirement time service integration mode exists time system standard mode degraded mode 
redundancy requirements external clock synchronization section derive lower upper bound number time servers needed provide externally synchronized clocks case time servers suffer arbitrary failures 
lower bound derive lower bound best maximum drift rate virtual clocks achievable external internal clock synchronization algorithm degraded mode 
systems access time message authentication time servers needed guarantee internal clock synchronization despite arbitrary time server failures 
show time servers needed sufficient guarantee external synchronization non time servers case time servers suffer arbitrary failures 
external clock synchronization implies internal clock synchronization explain external clock synchronization needs redundancy 
attempt apply external clock synchronization algorithm synchronize virtual clocks non time servers internally assign set non time servers role servers 
set remaining non time servers synchronize clocks servers external clock synchronization algorithm 
obviously scheme provides internal synchronization clocks clocks internally synchronized 
achieving internal synchronization servers provided algorithm internal clock synchronization algorithm 
clocks internally synchronized servers fail 
replace servers time servers servers receive external time signals allow synchronize clocks externally internally 
lower bound result external clock synchronization depends assumption time servers suffer arbitrary failures 
particular depends fact arbitrary failures time servers detectable 
detectable mean non time server tries read clock decide correct faulty 
example synchronous systems crash failures detectable case crash failures occur time server failures detectable 
time servers needed mask detectable time server failures non time server achieve external clock synchronization way 
reads say time units clocks 
rejects readings time servers faulty 
synchronizes clock remaining correct clock readings 
time servers suffer detectable failures succeeds read clock correct time server reject reading synchronize clocks approximation clock 
clock externally synchronized 
lower bound proof fact hardware clocks drift apart realtime drift permits faulty time servers drift apart real time certain bounds detectable non time servers 
proof allows show degraded mode maximum drift rate correct virtual clocks twice maximum hardware clock drift rate 
upper bound proof simple external clock synchronization protocol achieves external synchronization long majority time servers stay correct 

maximum replication propose external clock synchronization algorithm show time servers sufficient guarantee external clock synchronization assumption time servers suffer arbitrary failures 
second goal show upper bound maximum external deviation achievable external clock synchronization algorithm 
assume correct virtual clock adjusted time units 
algorithm achieves maximum external deviation accounts maximum external deviation clocks maximum error reading correct clocks maximum drift hardware clock adjustments 
incorrect incorrect readings real time readings 




smallest greatest readings clocks contain reading correct clock denoted respectively 
th smallest clock reading real time 
intuition follows see 
correct non time server reads say time units clocks 
server sorts readings increasing order stores array 
assume time servers faulty correct time servers smallest readings exists reading belongs correct clock 
particular exists index entry belongs correct clock 
similarly identify reading correct clock greatest clock readings find index entry belongs correct clock 
assume entry array sorted belongs correct clock smaller see 
similarly belongs correct clock greater entry apart real time 
pseudo code description algorithm 
algorithm executed non time servers 
describe execution algorithm correct non time server algorithm externally synchronize virtual clock represented function line 
external function returns current value hardware clock 
value clock time sum hardware clock value adjustment variable process adjusts virtual clock endless loop lines 
reads clocks line point real time current round clock show line 
sorts clock readings increasing order stores array line 
adjusts virtual clock difference value new round clock show value current round clock shows 
approximation clock performed external function assume execution times remote clock reading method take clock time units negligible 
execution time loop body lines clock time units approximation clocks done parallel 
clock shows value starting execution line 
adjustment value updated real time units 
maximum external deviation virtual clock hardware clock drifts apart real time adjustments 
theorem time non time server correct executes algorithm variable time function time return function void synchronizer forever rd parallel sort 
external clock synchronization algorithm 
proof analyze algorithm describe execution correct time server infinite sequences sequence consists points real time adjusts clock points real time updates adjustment variable line sequence entry denotes new content variable time content variable changed time sequence entry denotes content variable time sequence consists points real time approximates clocks sequence entry denotes content array time round time virtual clock defined process approximates clocks round time respect adjustment value round relation reading remote clock takes clock time units 
neglect bounded execution times round distance definition line maximum distance error reading correct clock bounded time server correct entry sorted array contains bounded approximation time time servers suffer failures array entries belong faulty servers 
sub arrays entries exist indices entries contain approximations correct time servers 
correct clock apart real time correct time server succeeds read clock correct time server error properties valid properties imply sorted increasing order entries array time transitivity equivalently definition line property holds fact definition get simplification inserting property definition drift rate hardware clock bounded bounded derive 
minimum redundancy show lower bound theorem time servers needed mask arbitrary failures time servers 
interested external synchronization non time servers assume exists non time server non time server correctly decide time servers correct faulty 
particular faulty time server drifts apart real time necessarily detect faulty hardware clock drift apart real time see 
half time servers faulty scenario depicted able decide clocks correct bound external deviation eventually decide adjusts clock clock time dt dt intuition theorem dr dt dt dt dt dr dr real time 
process correctly decide clock faulty know drift rate hardware clock faulty faulty faulty 
proof lower bound theorem done contradiction 
time servers available synchronization algorithm claims achieve external synchronization possible find non time servers indistinguishable runs set time servers partitioned sets containing time servers 
run contains correct time servers contains faulty ones second run situation reversed 
runs chosen clocks set show time value small drift clocks example drift rate hardware belong different sets clocks system drift rate clocks drift rate clocks defined run time servers correct ones faulty 
second run time servers faulty ones correct 
deviation clocks eventually greater bound non time server eventually decide sets synchronize clock 
show decision done correctly decision synchronize algorithm experiences second run decision wrong 
similarly decision algorithm experiences run decision equally wrong 
clocks achieving external clock synchronization despite faulty clocks 
theorem lower bound theorem correct external clock synchronization algorithm capable masking arbitrary failures time servers total number time servers greater proof prove theorem introduce formal model variant system failure model 
formal model stronger assumptions ones system failure model remote clock reading errors assumed zero 
external clock synchronization model simpler accomplish 
prove lower bound theorem valid formal model time servers needed provide external clock synchronization case time servers suffer arbitrary failures 
formal model uses stronger assumptions run satisfies requirements formal model satisfies requirements system failure model 
terms set valid runs formal model subset set valid runs system failure model 
external clock synchronization algorithm achieve external clock synchronization time servers run achieve external synchronization run show possible runs exists algorithm achieve external clock synchronization assumed system failure model 
formal model formal model consists components see environment determines behavior hardware clocks algorithm determines values virtual clocks 
behavior environment described set infinite state sequences runs runs determine point time values hardware clocks 
clock synchronization algorithm represented set infinite state sequences runs describe valid run possible reactions algorithm 
intuition lower bound proof show select algorithm run reactions algorithm run matches run bound external deviation virtual clock 
run infinite sequence states 
state set bindings assigns variable algorithm environment exactly value 
variable run input output hidden variable value input variable externally determined input variable algorithm determined environment changed algorithm value output variable internally determined read externally environment defines values clocks algorithm read modify theses values value hidden variable internally determined read externally environment defines real time hidden variable read algorithm 
runs describing behavior environment runs variables see server output variable contains current value clock time server output variable contains current value hardware clock hidden variable represents point real time current state occurred time server hidden variable true iff correct current state 
run describing behavior clock synchronization algorithm run variables server input variable contains current value clock time server input variable contains current value hard ware clock time server non time server output variable contains current value virtual clock 
input variables clock synchronization algorithm output variables environment 
fact algorithm direct access output variables environment implies formal model algorithm read hardware clocks error 
environment algorithm 
formal model consists components environment clock synchronization algorithm 
denote states lower case letters notation denote value variable state example represents value variable state run infinite sequence states runs notation denote state set variables state denote restriction domain contains bindings variables derived removing bindings variables states run define corr refers run equal contain bindings runs equal iff corresponding states iff union states domains respectively requires iff bindings common variables variable able combine run run runs match output variables environment values input variables clock synchronization algorithm 
define union runs consider runs variables defined respectively set variables common union requires common variables assigned values defined having introduced mathematical apparatus lower bound proof state hypotheses environment runs supposed satisfy properties clock algorithm runs supposed possess 
denote set runs runs environment behaves hypotheses stated system failure model 
run satisfy properties clock correct server correct hardware clock correct time server correct faulty time server recover 
number faulty time servers real time monotonically increasing tick time exists state set output variables environment 
external clock synchronization algorithm defined set runs 
algorithm correct iff satisfies requirements run run match virtual clocks correct non time servers externally synchronized requirement ensures partial correctness reaction algorithm stimuli environment correct 
complete correctness require algorithm specifies reaction possible stimuli 
run exists run matches clock synchronization algorithm satisfies requirements guarantees virtual clocks correct non time servers externally synchronized long assumptions environment valid 
proof lower bound theorem show lower bound theorem contradiction 
assume exists external clock synchronization algorithm synchronizes correct virtual clocks time servers lower bound theorem obviously holds drift hardware clocks requires exists correct clock bound external deviation 
assume partition set time servers sets approximately cardinality assumption follows select runs indistinguishable precise sense satisfy properties run processes correct processes faulty run processes faulty processes correct run distance clocks processes eventually greater 
run distance clocks processes eventually greater 
exists correct non time server non time server correct hypothesis algorithm correct exists run corr corr properties conclude exists state virtual clock time clock clocks processes sets apart similarly derive values virtual clocks defined clock synchronization algorithm bindings correct virtual clock defined values clocks defined runs properties infer exists property contradicts known fact implies follows existence correct algorithm assumption satisfy true 
complete proof show existence runs satisfy properties 
define run construction 
set choose select bindings variable holds run slow clocks respect redefining values variable satisfy requirement require exists state tick time require speed time exists state tick time select hardware clocks time servers perfect synchrony clocks 
servers correct servers faulty clocks drift speed time perfect synchrony time assume non servers correct 
required existence sufficient guarantee 
non server drift rate hardware clocks exactly drift rate clocks speed time drift rate hardware clocks satisfies condition define including state bindings corresponding state bindings variables variables set constraints construction runs satisfy conditions satisfy conditions 
condition holds construction 
existence runs postulated half proof demonstrated 
lower bound theorem allows derive lower bound minimal drift rate externally internally synchronized virtual clock case half time servers faulty 
standard mode drift rate virtual clocks zero externally synchronized 
non time servers know minority time servers correct possible apply internal clock synchronization algorithm guarantees optimal drift rate drift rate bounded problem time servers correctly determine majority time servers correct see 
precisely exists non time servers indistinguishable runs majority time servers correct half time servers faulty 
virtual clocks non time servers adjusted guarantee external clock synchronization adjustment leads increase drift rate virtual clocks 
assume algorithm synchronizes virtual clock round fashion successive adjustments time units apart 
drift rates correct hardware clocks external clock synchronization algorithm adjust virtual clock round ensure external clock synchronization 
adjustment double drift rate virtual clocks case half time servers faulty 
theorem minimum drift rate best maximum drift rate achievable external internal clock synchronization algorithm bounded case half servers suffered arbitrary failures 
proof clock time dt dt dr xr dt dt dr real time 
process correctly decide clock correct drift rate drift rate 
process adjusts virtual clock guarantee external clock synchronization case correct 
drift rate case proof lower bound theorem derive lower bound drift rate virtual clocks degraded mode 
proof correct non time server synchronize clock eventually partition guarantee standard mode servers correct ones faulty maximum external deviation bounded 
exists non time servers indistinguishable run time servers faulty drift rate ones correct algorithm operates degraded mode 
clock interval clocks virtual clock drifts apart real time rate maximum drift rate virtual clocks degraded mode 
optimal external clock synchronization section derive lower bound best maximum external deviation achievable external clock synchronization algorithm 
derive lower bound certain assumptions clock synchronization algorithm 
introduce assumptions give intuition lower bound 
derived lower bound explained follows see 
clocks apart real time non time server error approximating clock non time server error approximating real time 
time adjustments virtual clock maximum drift rate hardware clocks optimal external deviation clock time cp real time 
correct clocks time 
non time servers error approximating time remote clock reading errors 
hardware clocks drift apart time external deviation correct virtual clock increase adjustments 
lower bound proof adversary argument 
adversary set boundaries 
current drift rate hardware clock 
distance successive adjustments virtual clock 
current external deviation clock 
error server approximating remote clock 
generalize lower bound theorem section allow server perform discrete continuous adjustments virtual clock 
virtual clock server defined adversary determines virtual clock adjusted guaranteed virtual clock adjusted time units 
adjustment server change speed offset virtual clock approximation clocks 
theorem lb best maximum external deviation achievable external clock synchronization algorithm proof show theorem adversary argument 
consider run correct non time server starts round point real time hardware assume round process approximates clocks value select arbitrary round clock shows value derive maximum external deviation round assume assume starts round real time furthermore assume sets clock sets speed virtual clock drift rate changed drift rate drift rate adversary selects length round starts round time consider cases 
changing drift rate continuous clock adjustment condition interpreted follows effectively sets virtual clock value smaller adversary selects case drift rate round reading errors external deviation clock virtual clock shows just synchronized time value external deviation time 
case effectively adjusts virtual clock value greater equal adversary selects case drift rate round reading errors external deviation clock virtual clock shows just synchronized time value external deviation time 
external internal clock synchronization propose external internal clock synchronization algorithm achieves external internal clock synchronization long majority time servers stay correct degrades internal clock synchronization half time servers suffer arbitrary failures 
algorithm masks arbitrary failures non time servers correct virtual clocks guaranteed internally synchronized long third non time servers faulty 

protocol overview idea proposed external internal clock synchronization algorithm non time servers fault tolerant midpoint function synchronize clocks internally 
maximum drift rate internally synchronized clocks greater zero external deviation clock increase successive adjustments 
amount increase bounded small constant combine adjustments calculated internal clock synchronization algorithm adjustments calculated external clock synchronization algorithm internal adjustments ensure internal clock synchronization external adjustments change internal adjustments ensure drift rate clocks zero 
ti te 
approximation real time apart real time approximation internal time apart real time 
changing guaranteed combined value real time 
illustrate combination see consider case internal clock synchronization algorithm wants set clock external algorithm combination algorithms uses changes ensure maximum external deviation increased adjustments apart combination defined combination adjusted exactly influence external clock synchronization algorithm bounded clocks faulty maximum internal deviation increased small constant proportional maximum drift rate increased small constant depending length round 
proposed protocol synchronizes virtual clocks round fashion 
show algorithm works assume start round correct virtual clocks externally synchronized explain algorithm adjusts clocks start round correct virtual clocks externally synchronized assume correct virtual clock adjusted time units 
hardware clock drift apart real time round 
time denote round interval contain exactly values displayed correct virtual clocks time boundaries apart midpoint midpoint 
intervals possible approximations interval correct clocks note midpoints approximation intervals length server apart real time 
time servers correct correct time approximate interval interval see due remote clock reading errors error approximating boundaries interval process reads virtual clock negligible error contain intervals overlap 
midpoint apart boundaries overlap boundaries apart clock reading errors increase external deviation midpoint provide external clock synchronization midpoint require adjustment approximation time required maximum drift rate hardware clocks 
optimize drift rate degraded mode maximum internal deviation want minimize modification approximation time 
influence maximum clock reading error modification eliminated interval extension technique 
technique extends interval midpoint apart real time see 
note midpoint apart real time length smaller points apart midpoint apart boundaries interval extension technique ensures length midpoint apart real time 
extension done setting union read clock negligible reading error boundaries apart process uses external clock synchronization protocol described section calculate approximation time error process measures duration successive adjustments virtual clock rmax midpoint 
interval extension technique ensures length approximation including interval centered ad hoc approximation midpoint apart hardware clock uses measurement calculate upper bound duration 
approximation time midpoint upper bound duration process sets virtual clock combination set apart changed exactly algorithm guarantees optimal external deviation service standard mode 
maximum internal deviation clocks close optimal internal deviation 
optimal internal clock synchronization protocol provides optimal internal deviation combination external clock synchronization algorithm increase internal deviation small constant proportional increase maximum internal deviation proposed algorithm necessary guarantee external synchronization 

algorithm cs shows algorithm executed non time server 
explain algorithm execution correct non time server constant denotes periodicity clock adjustments adjusted clock time units 
virtual clock implemented function defined sum current value hardware clock current value adjustment variable algorithm initialized function init lines 
function determines initial adjustment value clock time virtual clock adjusted 
function guarantees clock internally externally synchronized long current round clock show value constant time rd variable time function time return function void init schedule function void synchronizer time parallel min max sort sort sig 
external internal clock synchronization algorithm 
greater variable assigned value hardware clock shown time synchronized adjustments virtual clocks done function synchronizer 
function schedules function clock time units 
processes agree virtual clock times synchronize clocks execution function synchronizer scheduled time line reading remote clocks take time units 
function synchronizer reads virtual clocks clocks parallel lines 
remote clock reading function estimates virtual clock real time estimations virtual clocks clocks time stored arrays respectively 
arrays sorted non decreasing order function sort line 
entry apart real time clock time time servers faulty see section 
denote maximum real time distance successive adjustments constant variable set extended fault tolerant midpoint ensures exists correct virtual clocks local time greater smaller words apart real time 
signum function returns argument positive zero argument zero argument negative line 
variable contains value hardware clock start current round 
determine upper bound actual length round vary adjustments 
bound calculate upper bound adjusted approximation time section assume variable zero influence adjustments clocks 
section show variable reestablish external synchronization case lost due time server failures 
process adjusts clock combination apart adjusts line 
analysis algorithm cs sets clock sets clock lines process consider case correct non time server executes algorithm simplify analysis assume estimation remote virtual clocks lines terminates virtual clock shows execution times remaining statements function synchronizer negligible 
represent values taken time variables algorithm sequences 
points real time process adjusts clock denoted sequence time denote point real time correct non time servers just started round value adjustment variable round denoted process th round starts process adjustment variable changed time round correct processes try estimate values virtual clocks defined round rounds different processes overlap process start round process round avoid process reads value virtual clock adjusted round round clocks see section process round clock defined process virtual clock interval defined round clock process sorted estimations clocks th round clocks round time represented arrays clock values function array value variable denote approximations round clocks round contains sorted clock values function round process denoted respectively 
round estimates process value round clock approximation time round clock round shows property holds prove correctness algorithm assume clocks initially synchronized constrain interleaving synchronization rounds 
furthermore constrain number faulty time servers 

initialization require start round external deviation bounded internal deviation bounded denotes maximal internal deviation correct clocks start new round see section 
processes correct real time 
interval constraints bound maximum internal external deviation length clock synchronization round bounded priori constants minimum length round maximum length process correct real time delay start round correct process start correct process bounded constant processes correct respectively want avoid situations exists point real time correct processes rounds time respectively 
overlap rounds restricted 
failure assumptions analyze algorithm standard integration degraded mode 
note lower bound number non time servers needed achieve internal clock synchronization case access time 
assume third non time servers faulty 
standard integration mode half time servers suffer failures degraded mode number time servers suffer arbitrary failures constrained 
fs standard integration mode non time servers suffer failures time servers suffer failures 
number time servers number time servers 
fs degraded mode non time servers suffer failures 
number non time servers 
analysis standard mode show standard mode virtual clocks correct non time servers externally synchronized correct virtual clocks internally synchronized drift rate clocks zero externally synchronized 
show section degraded mode maximum internal deviation bounded fs stronger fs bound internal deviation holds standard integration mode 
variable zero see section maximum internal deviation standard mode bounded assume time service switches standard mode service continuously standard mode time time show time correct virtual clocks externally synchronized 
correct virtual clocks externally synchronized initialization requirement see section 
system switches integration standard mode time correct clocks externally synchronized definition standard mode see section 
assume correct non time server external deviation clock show correct non time server round lemma approximation time time 
proof calculation done way algorithm fs ensures majority time servers correct lemma follows directly proof theorem 
second show correct non time server round start round virtual clock apart time 
lemma proof show lemma induction case true assumption service switched standard mode time external deviation assume lemma correct show correct non time server 
assumption lemma true induction hypothesis holds 
denote length round drift rate hardware clock bounded length round property holds define left right boundary approximation interval contains exactly values correct virtual clocks time definition bound term follows similarly bound 
line get property assumption fs ensures non time servers faulty exists index belongs correct non time server 
knowing remote reading error derive array sorted get similarly find index combining properties bound similar property derived lower bounds get upper bounds get combining derive property process calculates upper bound term hardware clock measure duration round 
stores upper bound variable error approximating order precise analysis shows error neglect terms factors order higher assume knows exact value contains consider cases value calculated internal clock synchronization algorithm approximation time fs guarantees majority time servers correct lemma implies values apart 
holds defined line 
failure hy second holds defined line property ensures apart states apart time adjustment virtual clock ensures lemma conclude lemma algorithm bounds maximum external ation standard mode theorem time proof exists non time server correct drift hardware clock bounded duration round 
analysis degraded mode lemma shows section assume failure assumption fs holds 
note lower bound theorem shows external deviation correct virtual clocks guaranteed fs maximum drift rate virtual clocks show half time servers suffer arbitrary failures internal deviation virtual clocks remains bounded drift rate bounded denotes value variable algorithm assume constant describes maximum deviation correct virtual clocks start round constant describes maximum deviation correct virtual clocks bounded constraints define interval correct round clocks correct non time server estimates correct round clock error define extended interval correct round clocks length bounded show deviation correct round clocks bounded round length round bounded distance intervals defined zero overlap deviation closest points denote process approximation interval correct round clocks defined show correct process approximation correct round clocks time extended interval interval lemma process round correct proof round clocks faulty smallest greatest round clock approximations exists belongs correct round clock 
note maximum clock reading error exist processes correct satisfy properties interval subinterval hold 
correct assumption conditions definition holds 
consequence lemma fact length derive midpoint interval correct clocks time lemma process round correct proof midpoint shows apart boundaries length lemma definition conclude show subintervals interval apart distance midpoints bounded see 
midpoint 
distance midpoints subintervals bounded lemma proof show lemma case overlap dist left case left shown exchanging roles proof 
reordered definition property holds definition 
assumptions derive prove lemma simplify simplify simplify derive maximum distance approximation interval correct clocks correct processes assumption approximate interval time lemma correct proof failure assumption fs guarantees clocks correct 
processes reject smallest greatest approximations correct round clocks 
reject th smallest correct clock value 
correct process error approximating remote clock approximately agree value th smallest approximation correct round clock th smallest values correct clocks apart 
intervals apart 
lemma non time servers correct proof prove lemma induction assumption section bounds induction hypothesis fact conclude assume induction hypothesis allows bound length extended interval correct clocks lemma implies assumed lemma conclude distance intervals bounded lemma derive additional error introduced 
explain error loss generality assume midpoint interval correct clocks drift apart real time interval round clock drift apart real time drift apart interval overestimated length duration round analysis case overestimated upper bound detailed analysis see shows additional error bounded additional error processes disagree arbitrarily approximation time half time servers faulty 
modify approximation midpoint correct clocks approximation time error introduced 
altogether constrains constrain satisfied assumption 
theorem non time servers correct proof assume processes correct loss generality lemma shows drift rates correct hardware clocks bounded long adjusted virtual clock time bound deviation virtual clock time started round round deviation bounded interval correct clocks time lemma approximation time modification increase deviation time clocks adjusted start round proof lemma bounds deviation theorem drift rate correct virtual clocks bounded proof conclude lemma process round exist correct processes correct time adjustments calculated internal clock synchronization algorithm increase drift rate virtual clocks maximum drift rate modification hardware clocks 
denote duration round approximation time increase drift rate drift rate 
external clock synchronization degraded mode correct virtual clocks loose external synchronization time servers faulty 
due repair majority time servers correct service transits integration mode 
section address problem external clock synchronization correct virtual clocks reestablished integration mode 
consider scenario see time service transits standard mode degraded mode point time correct virtual clocks loose external synchronization service degraded mode system transits degraded integration mode majority time servers correct time system transits standard mode time correct virtual clocks externally synchronized time external internal clock synchronization algorithm maximum drift rate correct virtual clocks degraded mode see section 
simplicity assume time external deviation virtual clocks algorithm find run correct virtual clocks drift apart time degraded mode 
external deviation time integration mode external deviation reduced main problems external clock synchronization correct virtual clocks standard mode degraded mode integration mode standard mode 
scenario external internal time serve transits standard degraded integration back standard mode 
time servers determine iff degraded mode par ticular decide service integration mode 
non time servers necessarily know start integration protocol reestablish external clock synchronization 
bounded drift requirement demands drift rate correct virtual clocks integration mode bounded priori constant implies worst case duration integration mode external internal clock synchronization algorithm proportional length degraded mode correct virtual clocks approach time maximum drift rate takes time decrease external deviation algorithm bounds drift rate correct virtual clocks degraded mode assuming standard mode integration mode maximum drift drift rate correct virtual clocks low explain drift rate consider case hardware clocks drift rate virtual clocks show time value ahead time see virtual clocks case drift rate adjusted round length approximation time 
external deviation correct virtual clocks reduced integration mode 
particular time service transit standard mode 
violation integration requirement external internal clock synchronization 
violation integration requirement manual integration support see section unique algorithm algorithms guarantee maximum drift rate degraded mode satisfy integration requirement 
sketch proven contradiction 
assume exists algorithm guarantees maximum drift rate degraded mode ensures integration requirement 
run sketched reduce value virtual clock average say round length hardware clocks drift apart time exactly algorithm reduce external deviation rate terms virtual clocks drift rate integration mode time 
find run indistinguishable service degraded mode 
particular select hardware clocks drift rate clock time cp dt dhp ti ti ti id id real time 
worst case scenario algorithm reduce external deviation integration mode hardware clocks drift external clocks initially apart time 
clocks drift rate speed time indistinguishable algorithm reduces virtual clocks average round length maximum drift rate virtual clocks contradiction assumption maximum drift rate degraded mode 
manual integration ensure algorithm satisfies integration requirement external internal clock synchronization support solutions reestablish external synchronization integration mode manual automatic integration 
repair time servers usually involves human interaction describe manual solution problem 
idea manual integration system administrator request non time servers increase rate drift time standard degraded mode non time server adjusts midpoint calculated internal clock synchronization round length approximation time variable algorithm new value priori bounds constant 
midpoint reestablish external clock synchronization system administrator set value adjusted drift rate correct virtual clocks integration phase time units equation assumes variable changed service switches degraded integration mode 
drift rate correct virtual clocks goes soon external synchronization reestablished 
system administrator sets variable ensure drift rate bounded system transit degraded mode 
external synchronization takes 
automatic integration algorithm provide automatic integration 
automatic integration sacrifices optimal maximum drift rate degraded mode potentially requires longer integration phases manual integration case service long time degraded mode 
idea variable set times 
midpoint adjusted setting variable value greater zero increase maximum drift rate correct virtual clocks drift degraded mode apart time interval system degraded mode 
integration time take time units 
maximum internal deviation increases 
addressed problem integrate external internal clock synchronization external internal clock synchronization requires clocks externally internally synchronized long sufficient number time servers correct internally synchronized number faulty servers large 
consider arbitrary failures processes correctly decide time servers faulty 
fact derived lower bound number time servers needed achieve external clock synchronization time servers needed mask arbitrary failures time servers 
derived lower bounds best maximum external deviation achievable external clock synchronization algorithm best maximum drift rate achievable external internal clock synchronization algorithm half time servers faulty degraded mode 
proposed fault tolerant external internal clock synchronization algorithm optimal respect number time servers needed guarantee external clock synchronization 
standard mode algorithm achieves optimal maximum external deviation optimal maximum drift rate 
degraded mode algorithm achieves optimal maximum drift rate case parameter 
standard mode proposed external internal clock synchronization algorithm achieves properties drift rate zero maximum external deviation bounded maximum internal deviation independently bounded 
clocks loosely synchronized time tight internal synchronization achievable 
degraded mode algorithm achieves properties maximum drift maximum external deviation bounded degraded mode maximum internal deviation bounded upper bound derived maximum internal deviation proposed external internal clock synchronization algorithm close optimal maximum internal clock synchronization achievable convergence function internal clock synchronization algorithms 
optimal respect achievable internal clock synchronization algorithm achieve external synchronization proposed algorithm process forced runs increase internal deviation optimal maximum internal deviation 
symbol meaning statement valid state statement valid states sequence statement eventually valid valid state adjustment value round correct maximum difference virtual clock process estimate virtual clock time shows virtual clock process round set clock time values maximum discontinuity virtual clocks maximum execution time remote clock reading method maximum external deviation correct clocks maximum internal deviation correct virtual clocks maximum internal deviation start round maximum remote clock reading error maximum external deviation correct virtual clock maximum granularity hardware clocks granularity time hardware clock process number time servers number non time servers number time servers set time server processes set non time server processes set time server processes non time servers time servers minimum real time duration round maximum real time duration round rank process maximum drift rate correct hardware clock maximum drift rate correct virtual clock set real time values maximum scheduling delay clock time values real time values start round real time start round process real time start round process clock time point real time event occurred clock server estimate time shows 
cristian 
probabilistic clock synchronization 
distributed computing 

cristian 
fault tolerance advanced automation system 
proceedings twentieth symposium fault tolerant computing pages newcastle tyne uk jun 

cristian fetzer 
fault tolerant internal clock synchronization 
proceedings thirteenth symposium reliable distributed systems pages dana point ca oct 

cristian fetzer 
fault tolerant internal clock synchronization 
technical report cs dept computer science engineering university california san diego la jolla ca 

cristian fetzer 
fault tolerant external clock synchronization 
proceedings th international conference distributed systems pages vancouver canada may 
www christof org tp 

dolev halpern strong 
possibility impossibility achieving clock synchronization 
journal computer system science 

fetzer cristian 
lower bounds convergence function clock synchronization 
proceedings th acm symposium principles distributed computing pages ottawa ca aug 
www christof org 

fetzer cristian 
optimal internal clock synchronization algorithm 
proceedings th annual ieee conference computer assurance pages gaithersburg md june 
www christof org ocs 

kopetz kruger 
synchronization strategy time triggered multicluster real time system 
proceedings th symposium reliable distributed systems pages bad germany sept 

kopetz 
interval measurements distributed real time systems 
th international conference distributed computing systems pages sept 

schmid 
synchronized utc distributed real time systems 
proceedings ifac workshop real time programming pages 

schmid 
synchronized utc distributed real time systems 
control engineering practice pages 

schmuck cristian 
continuous clock amortization need affect precision clock synchronization algorithm 
proceedings ninth annual acm symposium distributed computing 

schneider 
understanding protocols byzantine clock synchronization 
technical report dept computer science cornell university aug 

rodrigues 
precise accurate global clock service large scale systems 
real time systems 
