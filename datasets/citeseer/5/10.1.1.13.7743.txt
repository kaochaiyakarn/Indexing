automated soundness checking programming logic haskell richard kieburtz ogi school science engineering oregon health science university beaverton oregon usa logic verification logic programming language haskell 
inference rules expressed sequent calculus term constructs haskell 
validating soundness rules essential task 
rules logic polymorphic independent haskell type classes 
develops parametricity principle predicates logic justifies checking soundness polymorphic rules particular type instance 
implementing haskell semantics meta circular interpreter automated model checking validate soundness polymorphic inference rules logic 
logic verification logic programming language haskell 
term language set haskell terms syntactically formed typed context module class type expression declarations 
verification logic comprised inference rules expressed sequent calculus style characterize functional behavior haskell terms 
haskell defined terms logic immediate question sure inferences logic coherent semantics defines haskell 
words know logic sound 
generally soundness logic shown exhibiting model non trivial interpretation logic 
need provide models assure sound logical reasoning rich programming calculi provided original motivation developing denotational semantics 
logic unusually interesting verification logic able express critical properties programs non strict language term context necessarily denotes defined value 
ability define predicates recursively finiteness unboundedness data structures expressible logic 
standard model haskell show model logic prove inference rules logic valid model 
specifically soundness proof rule consists showing type compatible assignment values free variables occurring rule consequence true model hypotheses true 
phrase free variables refers term predicate variables 
inference rules logic comprise core set characterizing definitional expression constructions haskell plus set algebraic laws interpreted operators arithmetic data types monads derived operators certain classes 
concerned core set rules 
rules core set attempt axiomatize specific algebras polymorphic 
core logic polymorphic reasonable expect parametricity result hold 
expect rule valid interpreted specific type valid types 
result prove section soundness proof inference rule interpretation rule single type may chosen finite 
checking validity rule interpretations finite type finite model checking problem 
remainder ideas sketched developed formally 
section give brief logic semantics fully defined 
meta theory parametricity logic developed section logical relations 
meta circular interpreter provides denotational model haskell automating model checking inference rules logic 
modelchecking described section 
section summarizes directions 
brief logic logic designed express property assertions haskell expressions utilizing context haskell program provide bindings free term variables may occur expression 
term language logic haskell 
formula language predicate calculus interpreted equality extended mu calculus allows greatest fixed point formulas define predicates equipped modality expression evaluation 
atomic propositional forms logic assert term equality term property expressed unary predicate generally ary predicate expresses property terms 
symbol expresses unary property assertion analogy symbol expresses typing assertion haskell 
shall consider formulas express unary predicates referring reader complete definition logic treatment multi place predicate formulas including equality 
informally intend assertion true context evaluating haskell denotational semantics results value manifestly satisfies property evaluation necessarily demanded program context assertion occurs haskell non strict evaluation semantics notions satisfaction predicate sensible 
say predicate weakly satisfied expression denotation belongs set defined interpretation strongly satisfied addition denotation non bottom value 
weak assertion context explicitly strengthened prefixing symbol predicate formula 
strengthened predicate strongly satisfied 
predicate formulas atomic predicates logic univ universal predicate satisfied terms undef predicate undefinedness satisfied terms denote 
ways compound predicate formulas formed logic 
connectives underlying propositional logic lifted connectives predicates 
example conjunction connective lifted predicate connective definition def 
constructors datatypes declared haskell program text implicitly lifted act predicate constructors logic 
predicates formed way called term congruences 
example context formula list constructor combines predicates new predicate formula 
formula satisfied haskell expression evaluates form component expressions weakly satisfy assertions default mode interpretation component predicates weak semantics list constructor allows undefined values arguments 
arrow predicate constructor compose formulas express properties function typed expressions 
formula satisfied function function applied argument satisfies resulting application satisfies greatest fixpoint binder may bind predicate variable prefix predicate formula 
binders mu calculus written lfp gfp formulas logic 
propositional connectives lifted predicate constructors meanings defined modality haskell terms conjunction lifted connectives term congruences fixpoint binders allow detailed properties haskell expressions formulated logic 
example unary predicate asserting expression type list denotes finite list defined property finite list lfp univ body formula finite list asserts disjunction constructor formulas 
lifting data constructor satisfied expression denoting empty list 
second disjunct satisfied term denoting constructed list tail non bottom satisfies finite list property 
characterize lists listed element satisfies common property declare property elts def predicate parameter declaration 
property elts includes finite infinite lists 
property definition differs finite list important details binding operator formula gfp lfp predicate variable 
inference rules logic rules logic shown sequent calculus style natural deduction style complementary elimination rules construction term language rules sequent calculus style 
property may occur right turnstile symbol left assumption 
assumption introductions play similar role sequent calculus elimination rules natural deduction style 
sequent calculus suited goal directed verification logic rule specifies verification conditions property matching consequent 
fixed point properties recursive function definition typically properties wishes express terms arise recursive definitions haskell characterized fixed point greatest fixed point predicates definable mu calculus 
predicate variable bound prefix fixed point formula lfp gfp scope entire formula formula admissible fixed point iteration contains positive occurrences free predicate variable bound fixed point iterator 
fixed point properties prove property recursively defined function function definition may partitioned base cases induction cases 
simplicity shall limit number cases just characterized separation predicates respectively 
intended separation predicates partition argument domain subset function definition yields result recursive invocation second subset definition invoke recursion return result 
rule properties predicate variable may occur occur fv 
antecedent clause provides base case induction 
assertion univ context antecedent ensures depend specific property assumed term variable antecedent clause asserts term applied argument restricted property set rules incomplete 
particular structural rules justify weaker stronger assumptions shown 
logic identifiers lfp gfp substitutes greek letters mathematical treatments mu calculus 
application proved satisfy predicate formula assuming property function hold recursive application 
second antecedent clause provides induction step 
inductive assumption asserts property application argument restricted property term variable may occur predicate variable may occur consequent rule asserts property recursively defined function definition added context 
constraint necessary ensure soundness rule 
completeness usually want additional condition greatest fixed point properties prove property stated term congruences fact haskell data constructors uniquely invertible 
constructor pattern provides implicitly deconstruction functions project component subterms constructed term matching pattern 
semantics pattern matching haskell relies isomorphism constructed term components 
term congruences logic 
rule concludes fixed point property recursively defined term 
predicate variable may occur fv 
second antecedent clause asserts strongly satisfies term variable satisfies property predicate consequent defined formula base case induction antecedent univ 
semantics logic semantic models shall consider haskell universe typed ideals macqueen plotkin sethi 
ideal model elements semantic domain constitute single untyped universe 
ideals downward closed sets contain limits directed subsets 
ideals non empty intersections particular bottom element pointed universe belongs ideals 
types haskell expressions naturally modeled ideals haskell type bottom element 
limit points chains ideal models type represent values type 
ideals associated types 
ideals provide satisfactory models admissible predicates logic refine types haskell 
shall see logic specifies strong modality predicates interpretation predicate cuts 
univ 

univ 
univ fst univ snd 



variable fv 
mk pk mk pk 
mk univ univ 
mk pk mk pk univ tm tm lfp fv tm univ tm tm gfp 
inference rules logic bottom element ideal model 
strong predicate satisfied expressions denotation 
semantic interpretation logic term type env meaning function maps typed haskell expression denotation domain env var type domain interpretation unambiguous talking single domain domain identifier omitted 
notation distinguish terms formulas meanings ad ideal containing interpretations terms type ad set interpretations terms type excluding ad ad ag meaning term constant type jc ca ad formulas interpreted characteristic predicates sets posets domain haskell semantics 
meaning predicate formula type pred denoted jp pred ad interpretation strong predicate pred jp pred ag universal predicates predicate constants univ undef represent universal predicate unsatisfiable predicate type 
interpretations predicates pred pred 
pred pred term congruence predicates meaning term congruence predicate formed ary constructor jc 
pred fc 
jp pred jp pred interpretation non strict datatype constructor 
arrow predicates arrow predicate characterizes property term 
read proposition assertion applied argument property application property 
call subformula left arrow domain predicate right range predicate 
jp qj pred ff 
jp pred jqj pred function space continuous functions 
predicate conjunction disjunction jp pred jp pred jp pred jp pred jp pred jp pred fixed point formulas interpretations greatest fixed point formulas terms infinite unions intersections interpretations finitely iterated syntactic substitutions matrix place recursion variable zeroth iteration specified definition undef interpretation formula univ interpretation formula 
interpretations dual 
pred jh pred undef pred jh pred univ logical relations parametricity logical relations introduced programming language theory mitchell meyer formalize properties second order lambda calculus 
authors derive parametricity properties polymorphic functions representation independence 
intuitively logical relation type indexed family relations possibly different semantic representations preserves algebraic behavior induced modeling calculus 
consider logical relations calculus type system haskell type variables may universally quantified global context 
logical relations domains logical relations developed strongly normalizing applicative structures provide semantics typed lambda calculi recursion 
logical relation extended full continuous hierarchies provide semantics lambda fix calculi 
relations respect partial order structure domains 
polymorphism implied universal quantification type variable 
meaning polymorphic expression intersection meanings taken instances quantified type variable jm type jm clearly meaning polymorphic expression includes belongs meaning expression specific type 
parametricity consequent interpretation type quantification 
polymorphic type type interpretation consequence meanings related depend constants particular type substitute corollary suppose pointed domains logical 
pointed type 
models logic model logic extends haskell model providing interpretations predicate constants predicate constructors 
wish meanings predicates refine meanings types furthermore give meanings predicates defined greatest fixed points predicate constructors 
meaning pred typed predicate logic defined characteristic predicate domain interprets corresponding haskell term type 
mentioned briefly section ideal models appropriate predicates 
type indexed family unary predicates applicative domain directed complete closed limits directed sets type pointed 
type 
directed complete resp 
pointed predicates closed respect operations predicate disjunction predicate conjunction 
predicate arrow constructed directed complete predicates directed complete comprised continuous functions domain satisfying domain satisfies continuous functions just preserve order respect limits directed sets 
definition unary predicate formula logical iff directed complete downward closed 
logical predicate pointed pointed type logic type 
polymorphic predicates notice type predicate contravariant type expressions may satisfy pred prop 
important consequence meaning polymorphic predicate union meanings type instances jp pred type jp pred example polymorphic meaning universal predicate univ pred type pred type entire semantic domain 
strong modality logic predicate modality satisfies definition logical predicate specifically 
semantic interpretation downward closed bottom element domain type removed interpretation 
say predicate strongly logical 
predicate logical relations representation independence lemma basic lemma logical relations establishes representation independence term reduction 
establish representation independence predicate satisfaction logic suffice show observations restricted predicate satisfaction logical satisfy conditions logical relation 
specifically class admissible predicates equivalently typed terms related modulo observation predicate formula related term predicate environments satisfaction proposition model logically equivalent satisfaction model 
predicate formulas characterize observations relation founded 
predicate variable occurring formula may instantiated logical strongly logical predicate type assigned variable just term variables may instantiated type conforming valuations 
strong modality predicate logic restricts satisfying interpretations term non bottom elements semantic domain type possible express relations expressed relations terms 
relations lead free theorems example unique non bottom member type relations terms strongest provable result type contains members identity function 
logical relations extend models predicate formulas logical relation domains induces relation powersets domains pred 
enables relate models predicate formulas 
definition logical relation predicates pred predicates constructed inductively formation rules section admissible predicate variable occurs negated position 
pred related pred iff terms jsj jtj jsj jp pred jtj jqj pred 
lemma pointed types suppose logical 
pred pred pred qj pred jp jqj pred jp jp pred jp jp pred jq jq pred jc pn jc qn pred jp jq 
place constructor strict th argument defined similarly pred jp jp pred jq jq pred jp jp pred jp jp pred jq jq pred jp jp proof proof induction structure nonrecursive predicates 
see appendix 
corollary type generalization relations predicates 
pred jp jqj type pred jp jqj predicate environments predicate environment maps predicate variables meanings model 
write lp designate class logical strongly logical predicates semantic domain express predicate environments lp lp respect type environment write definition relations predicates extended predicate formulas may free occurrences predicate variables 
write pred jp jp express relationship 
extending logical relations recursively specified predicates pointed applicative structure semantics fixed point predicate formula jh undef semantics greatest fixed point formula jh univ lemma pointed type suppose logical 
pred pred iff pred pred jp jp pred jh jh proof see appendix 
parametricity polymorphic predicates interpretation predicates type generalization yields parametricity property dual property parametricity terms 
type generalization meaning term depend semantic element particular instance generalized type variable 
restricts meanings assigned terms polymorphic type yielding unique elements set interpretation unique upper bounds interpretation 
dually meaning predicate impose constraint particular instance generalized type variable 
consequently predicates related generalized type iff related particular instance type 
theorem parametricity predicates 
logical relation 
logically equivalent conditions induced relation predicates generalized type pred jp jqj type pred jp jqj proof see appendix 
type parametric property observed type instance polymorphic predicate encodes property 
predicate parametricity theorem formalizes intuition 
example polymorphic predicate univ univ pred satisfied model type int meaning term type char meaning term undefined 
satisfaction predicate formula judgment typed term satisfies predicate semantic interpretation 
model value environment predicate environment meaning judgment form pred shall interested type coherent interpretations lemma satisfaction property assertions 
suppose related valuation assignments type assignment suppose related predicate environments compatible pred pred pred qj proof lemma direct consequence basic lemma models extension predicates lemmas applied meaning judgment form 
parametricity polymorphic property assertions parametricity result polymorphic property assertions consequence corollary 
corollary suppose type assertion typed typing context closed type compatible value assignment 
type corollary extended characterize validity assertion occur free term variables bound valuation assignment free predicate variables may occur predicate definition validity polymorphic property assertion 
suppose assertion type typed typing context necessarily closed fixed value assignment predicate may contain free predicate variables 
set predicate variables occur free denoted fv 
assertion valid typing context valuation assignment iff type fv dom fv validity polymorphically typed assertion established type instance requires assertion satisfied valuation predicate assignment compatible type instance 
requirement precludes validity asserted property specific type substituted quantified type variable 
theorem validity polymorphic assertions 
polymorphic property assertion type typed typing context valid specific type instance valid type instance 
proof immediate definition corollary 
validity inference rules rule asserts propositional implication consequent judgment zero antecedent judgment forms 
rule sound propositional implication terms formulated valid model 
inference rule typically contains free term variables free predicate variables rule formulates properties component terms propagated composite terms vice versa 
furthermore rules core logic polymorphic core logic characterizes just applicative structures free term algebras haskell 
theorem tells polymorphic property observed type instance quantified type 
corollary validity polymorphic rule logic observed type instance 
checking soundness rules logic observe soundness polymorphic rule pick type instance chosen type check propositional implication rule hypotheses satisfied type conforming value assignment term variables occur rule type conforming predicate assignment predicate variables 
provides necessary sufficient condition determine rule coherent semantics interpretation model 
rules asserts simple property property require fixed point choosing finite type instance renders soundness finite model checking problem 
rules conclude lfp gfp properties finite model checking assure soundness 
lemma provides meta theory soundness involving fixed point property rests 
gives sufficient conditions soundness lfp gfp rule expressed terms predicates recursive 
conditions needed discharge hypotheses lemma checked finite model 
elements model form type indexed family domains guide choice specific finite models checking soundness rules 
distinguish properties expressed terms free types haskell rely underlying algebra specific types type classes 
rules logic express properties free types 
properties non free algebras logic relies decision procedures determine equivalence terms modulo particular algebraic theory combination theories 
decision procedures compositions validated means external logic 
finite models haskell types section consider type constructions haskell show represented finite type model rules logic 
elements semantic domain taken explicit bottom element constants type pairs elements fixed length lists elements 
element datatype modeled pairing constant represents data constructor list elements representing arguments constructor application 
element finite function type modeled list pairs representing monotonic function trace 
elements bool true false 
trivial type void elements 
product type elements arrow type elements traces monotone functions choose representative datatype data nil cons elements nil members set cons notice chosen recursive datatype constructor list 
necessary choose recursively defined type rule logic depends implicit fixed points 
fact rules occur terms datatypes nested data constructors 
checking rule principle followed choose complex type possible instantiate type variable parametrically polymorphic typed term 
instance check rule abstraction choose type 
model arrow type 
modeling predicates type instance term terms rule chosen typing predicate rule determined 
check soundness rule simulate type compatible predicate assignments predicate variables occur rule 
predicate interpretations finite type finite constructions predicate constructors defined type 
type predicates univ univ undef undef 
notice information gotten assignment univ predicate contains element corresponding type domain assignment undef unsatisfied domain element 
addition interpretations univ undef additional predicate interpretations included assignment particular type 
product type pred add interpretations pred pred fresh predicate variables 
predicate arrow type interpretations pred pred added 
datatypes bool adds interpretations true false true false adds interpretations nil cons nil cons predicate variables 
model checking inference rules machine interpreted model haskell semantics haskell coded haskell provides meta circular interpreter 
interpreter implementing io monad garbage collection heap storage provides executable model simple certified inspection faithful interpretation language definition 
exceptions interpreter meets need model check soundness polymorphic rules logic 
exceptions bottom element semantics domain interpreted haskell constant unde ned evaluation aborts execution interpreter function values interpreted functions programmed haskell explicit abstraction expressions 
consequence design choices interpreter aborts execution calculates bottom element domain unacceptable modeling predicate satisfaction logic 
semantics interpreter modified 
domain elements represented type data void value type void tagged name data structures tv tuple values ft trace function bottom bottom element function application modeled haskell library function lookup trace representation finite function 
app application app ft trace elements case lookup trace elements error just representation types straightforward model domain elements finite haskell type 
domain calculated semantics representation function rep type instance rep void void tagged nil tagged cons bottom bottom tagged cons bottom void tagged cons void bottom tagged cons void void monotonic finite function space type calculated algorithmically set monotonic traces rep rep automated model checking initial step model checking polymorphic rule choice type instance justified corollary 
instantiating universally quantified type variable type void meets requirement 
rules choose type void void rule choose variant constructor cons strict argument 
valuation assignment free term variables occurring rule simply binds variable element type domain corresponds type variable 
universal quantification valuation assignments realized iterating possible value assignments variable independently finite typing rule checked 
similarly predicate assignment binds predicate variable occurs free rule subset type domain corresponds 
quantification predicate assignments realized iterating possible predicate assignments 
valuation predicate assignment free variables occurring rule truth propositional implication realized particular instance rule checked 
proposed rule sound checks succeed selected type unsound instance rule false 
example polymorphic rule 

checked typing assignment void void void pred void 
particular valuation assignment predicate assignment calculate antecedent clauses rule weakest context assumption strongest entailment 
antecedents true 
truth consequent checked relative calculated context entailment semantics model evaluate haskell terms 
checking rule context calculated antecedents provides binding term variable term variable applied produce proposition logically implies previously calculated entailment 
succeeds valuation predicate assignment antecedents rule validated rule deemed sound 
hypothesis consequent rule weakened unsound 

rule false valuation assignment void bottom predicate assignment univ void 
assignments calculate antecedents weakest context constraint void strongest entailment constraint void 
constraints satisfiable consequent semantics application 
modified rule proposed rule logic unsound automated model checking rejected 
shown problem proving soundness polymorphically typed inference rules modal reduced finite model checking 
logic new verification logic haskell soundness obvious property proposed inference rules automated technique check soundness important contribution 
development logic include embedding decision procedures decidable cases disjoint algebraic theories associated class hierarchies haskell type system integer rational arithmetic booleans algebra lists 
effort prove logic sound entire team especially jim hook 
author indebted bill harrison critical reading comments earlier drafts 
abadi pierce plotkin 
faithful ideal models recursive polymorphic types 
proceedings fourth annual symposium logic computer science pages 
ieee computer society press june 
de bruin 
inductive types programming languages 
phd thesis university groningen 
fokkinga 
law order algorithmics 
phd thesis university twente twente netherlands feb 
harrison sheard hook 
fine control demand haskell 
sixth international conference mathematics program construction volume lecture notes computer science pages 
springer verlag july 
honsell sannella 
pre logical relations 
computer science logic csl volume lecture notes computer science pages 
springer verlag 
kieburtz 
logic property verification haskell programs 

macqueen plotkin sethi 
ideal model recursive polymorphic types 
information control oct 
mitchell 
foundations programming languages 
mit press 
mitchell meyer 
second order logical relations 
logics programs volume lecture notes computer science pages 
springer verlag june 
reynolds 
types abstraction parametric polymorphism 
information processing pages 
north holland amsterdam 
wadler 
theorems free 
proc 
th acm conf 
functional programming languages computer architecture pages 
acm press sept 
appendix proofs omitted text definition logical relations pointed domains 
fix domains signature includes polymorphic operators proj app type indexed family constants logical relation full continuous hierarchies family relations indexed type expressions signature 
type 
const const typed constant 
iff app app 
iff proj proj proj proj 
directed complete unary predicate limits related directed sets related 

fix fix definition essentially mitchell extends basic definition addition fifth sixth clauses require relation directed complete downward closed respect order structures related domains seventh clause extends relation fixpoints 
lemma pointed types suppose logical 
pred pred type pred qj pred jp jqj pred jp jp pred jp jp pred jq jq pred jc pn jc qn pred jp jq 
strict th argument defined similarly pred jp jp pred jq jq pred jp jp pred jp jp pred jq jq pred jp jp proof proof induction structure nonrecursive predicates 
form predicate show semantics ground term type satisfies relation iff belongs set specified predicate models case univ pred pred ad pred bd conclude jtj pred jtj pred case undef pred jtj jt case pred downward closed pred jp jp pred jp jp case jp jp cases jp jp app app jp app jp app jp jp app app app jq app jq pred jp jp case data 

ad jc iff bd jc iff pred jc jc case 
pn data 

pred jp jq 
pred jp jq jp 
jp jq 
jq 
ad jc 
pn iff jp 
jp bd jc 
pn iff jp 
jp 
jc jc pred jc 
pn jc 
qn argument similar constructor strict arguments predicates strict argument positions strengthened 
case pred jp jp pred jqj jqj pred jp jqj jp jqj case pred jp jp pred jqj jqj pred jp jqj jp jqj lemma pointed type suppose logical 
pred pred iff pred pred jp jp pred jh jh proof direction bi implication natural induction forms 
suppose right hand side bi implication holds 
referring semantics formula shall show finite union relates 
predicate inductive hypothesis jh undef jh undef base case induction furnished pred jh undef jh undef pointed model 
induction step substitute undef existentially bound predicate variable right hand side bi implication conclude inductive hypothesis definition pred jh undef jh undef natural induction semantics times iterations related natural number nested unions directed sets 
invoke property logical relation closed limits finite directed sets conclude semantics formula related 
direction bi implication follows immediately property fixed point lfp lfp 
formulas similar inductive argument base case pred shows relation includes finite intersections definition semantics 
downward closure assures existence limit semantics related 
theorem parametricity predicates 
logical relation 
logically equivalent conditions induced relation predicates generalized type pred jp jqj type pred jp jqj proof corollary definition logical relations extended predicates pred jp jqj type pred jp jqj type jp jqj type pred jp jqj 
