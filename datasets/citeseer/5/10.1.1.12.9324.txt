mining top frequent closed patterns minimum support jiawei han wang ying lu petre university illinois urbana champaign illinois propose new mining task mining top frequent closed patterns length min desired number frequent closed patterns mined min minimal length pattern 
efficient algorithm called tfp developed mining patterns minimum support 
methods closed node count descendant sum proposed effectively raise support threshold prune fp tree construction fp tree 
mining process novel top bottom combined fp tree mining strategy developed speed closed frequent pattern discovering 
addition fast hash closed pattern verification scheme employed check efficiently potential closed pattern really closed 
performance study shows cases tfp outperforms closet charm efficient frequent closed pattern mining algorithms running best tuned min support 
furthermore method extended generate association rules incorporate user specified constraints 
conclude frequent pattern mining mining top frequent closed patterns min support preferable traditional min support mining 

essential data mining tasks mining frequent patterns studied extensively literature 
implementation methodology point view developed frequent pattern mining algorithms categorized classes apriori horizontal formatting method apriori representative apriori vertical formatting method charm projection pattern growth method may explore compressed data structure fp tree fp growth :10.1.1.111.520:10.1.1.3.2424
common framework min support threshold ensure generation correct complete set frequent patterns popular apriori property subpattern frequent pattern frequent called downward closure property 
unfortunately framework simple leads problems may hinder popular 
setting min support quite subtle small supported part national science foundation university illinois microsoft research 
cs uiuc edu threshold may lead generation thousands patterns big may generate answers 
experience mining shopping transaction databases tells means easy task 
second frequent pattern mining leads generation large number patterns larger number mined rules 
mining long pattern may unavoidably generate exponential number subpatterns due downward closure property mining process 
second problem noted examined researchers proposing mine frequent closed patterns :10.1.1.27.6266
closed pattern pattern covers subpatterns support just need mine set closed patterns smaller set frequent patterns losing information 
mining closed patterns default task mining frequent patterns 
observations indicate preferable change task mining frequent patterns mining topk frequent closed patterns minimum length min user desired number frequent closed patterns mined easy specify set default top refers frequent closed patterns min minimal length closed patterns parameter easy set 
notice min patterns length corresponding closed pattern occur frequently corresponding shorter ones subpatterns database 
study problem mining top frequent closed patterns minimal length min efficiently min support starting min support 
study focused fp tree algorithm 
efficient algorithm called tfp developed advantage interesting properties top frequent closed patterns minimum length min including transactions shorter min included pattern mining min support raised dynamically fp tree construction help pruning tree mining promising tree branches mined raise min support raised min support effectively prune remaining branches 
performance study shows tfp surprisingly high performance 
cases better efficient frequent closed pattern mining algorithms closet charm best tuned min support 
association rules extracted minor extension method constraints rated top closed pattern mining 
conclude mining top frequent closed patterns minimum support preferable usability efficiency points view traditional min support mining 
remaining organized follows 
section basic concept top closed pattern mining introduced problem analyzed related properties identified 
section presents algorithm mining top closed patterns 
performance study algorithm reported section 
extensions method discussed section conclude study section 
problem definition section introduce basic concepts topk closed patterns analyze problems interesting method mining top closed patterns 

set items 
itemset non empty subset length itemset number items contained called itemset length tuple tid called transaction tid transaction identifier itemset 
transaction database db set transactions 
itemset contained transaction tid transaction database db support itemset denoted sup number transactions db contain definition 
top closed itemset itemset closed itemset exists itemset transaction closed itemset top closed itemset minimal length min exist closed itemsets length min support higher task mine top closed itemsets minimal length min efficiently large transaction database 
example transaction dataset example 
table transaction database db 
suppose task find top frequent closed patterns min 
tid items ordered items table transaction database db 
question mining methodology chosen choices apriori charm itemset having support transaction database ensure set mined independent ordering items transactions method mine closed itemset support th frequent closed itemset 
fp growth min support threshold apriori mine itemsets level level min 
downward closure property prune infrequent itemsets generation itemset candidates apriori join length itemsets generate length candidates min 
inefficient 
charm loses pruning power generate transaction id list item find intersected transaction id list pair items itemset pruned 
fate fp growth 
fp growth uses compressed data structure fp tree register tdb possible itemsets transaction corresponding length information preserved corresponding branch fp tree 
fp tree preserves support information itemsets 
possible utilize information speed mining 
possible methods examine fp growth detail 
question extend fp growth efficient top frequent closed pattern mining ideas min support forces construct full fp tree top mind capture sufficient higher support closed nodes tree construction dynamically raise min support prune tree fp tree mining mine promising subtrees high support patterns derived earlier prune low support subtrees 
section develop method step step 

mining top frequent closed pat terns method development section perform step step analysis develop efficient method mining top frequent closed patterns 
short transactions counts studying fp tree construction notice short transactions 
transaction contains min distinct items items contribute pattern minimum length min 
discussions consider transactions satisfy minimum length requirement 
watermark root fp tree constructed tdb 
item count count count count items 
fp tree header table 
occurrence frequency item stored count global header table 
introduce header table counter ow count records total occurrences item level higher min fp tree shown 
count 
count item lower min support generate frequent itemset length min 
rationale 
rules generation frequent itemset fp tree node residing level min lower deeper tree may generate prefix path shorter min :10.1.1.3.2424
short prefix paths contribute generation itemset length greater equal min 
nodes count lower min support may generate frequent itemset length min 
people may wonder assumption start min support notion min support 
notice find number closed nodes nontrivial support fp tree construction tree mining min support raised prune items low support 
raising min support pruning fp tree goal mine top frequent closed nodes order raise min support effectively ensure nodes taken count closed 
lemma closed node 
time construction fp tree node nt closed node representing closed itemset falls cases nt child nt carries count sum children nt carries count child nt leaf node 
rationale 
easily derived definition closed itemset rules construction fp tree :10.1.1.3.2424
shown node nt denotes itemset 
nt support transaction prefix path contains exactly set items represented node tree increased support 
nt child nt carries count sum children nt carry support children nt closed node 
reason holds nt carries count child 
nt leaf node insertion branches node remain leaf node carry count children nt closed node 
raise min support dynamically fp tree construction simple data structure called closed node count array register current count closed node support node illustrated left 
array constructed follows 
initially count node initialized non zero lnode registered depending implementation 
closed node support fp tree count count slot node construction fp tree suppose inserting transaction branch support closed node increases root judging closed node node count 
count closed nodes support node 
closed node closed node count array 

count corresponding node array increased corresponding node decreased 
closed node count array constructed easily derive lemma 
lemma raise min support closed node 
time construction fp tree minimum support mining top closed itemsets equal node sum closed node count array top node closed node count array raise minimum support method raise min support fp tree called anchor node descendant sum simply descendant sum described 
anchor node node level min fp tree 
called serves anchor descendant nodes level min 
method described example 
watermark root calculate descendant sum anchor node fp tree 
example 
shown node anchor node resides level min 
node collect sum counts distinct itemset descendants 
example descendant descendant sum means support itemset abd contributed descendants 
fp tree easy descendant sum 
summary information may raise min support effectively 
example min support top closed nodes descendant sum 
lemma descendant sum 
distinct count descendant sum anchor node represents minimum count distinct closed pattern generated fp tree 
rationale 
path root fp tree anchor node 
descendant count 
method fp tree construction exist itemset count 
closed node unique closed node fp tree count exist closed pattern super pattern support 
node descendant sum support may share closed node branch may contribute additional count closed node distinct count descendant sum may represent minimum count distinct closed pattern generated fp tree 
observations regarding support raising methods 
closed node count method cheap array easy implement performed time tree insertion process 
second comparing closed node count descendant sum effective raising min support costly min level nodes fp tree node need descendant sum structure 
fully scanning database know node may eventually high count 
tricky select appropriate anchor nodes support raising anchor nodes may waste storage space nodes may able register count information raise min support effectively 
computing descendant sum structure low count nodes waste usually derives small descendant sum may raise min support effectively 
analysis implementation explores techniques different times fp tree construction keeps closed node count array raises min support dynamically prunes infrequent nodes reduces size fp tree constructed 
scanning database fp tree constructed traverse subtree level min node highest support calculate descendant sum 
effectively raise min support 
raised min support highest support remaining level min nodes remaining node highest support traversed process continues 
experiments small number nodes need traversed top cases 
efficient mining fp tree top patterns raise min support prunes fp tree speeds mining 
critical performance gain comes efficient fp tree mining 
observations 
item skipping 
count item global header table min support infrequent nodes removed fp tree 
count item global header table min support item generate conditional fp tree 
tfp mining fp tree similar fp growth 
subtle points 

top ordering items global header table generation conditional fp trees 
subtlety order conditional fp trees generated top mining 
notice fp growth find complete set frequent patterns mining may start item header table :10.1.1.3.2424
top mining goal find patterns high support raise min support fast possible avoid unnecessary 
mining start item non zero count usually carries highest count header table walk header table entries mine subsequent items sorted item list order 
ordering items higher count usually produce patterns higher support 
ordering min support raised faster top patterns discovered earlier 
addition item count min support generate conditional fp tree mining stated 
faster min support raised earlier pruning done 

bottom ordering items local header table mining conditional fp trees 
second subtlety mine conditional fp trees 
shown generation conditional fp trees follow order sorted item list viewed top walking header table 
beneficial mine conditional pattern tree bottom manner sense mine items located low tree branch tends produce longest patterns followed shorter ones 
efficient generate long closed patterns patterns containing subset items absorbed easily 

efficient searching maintaining closed patterns pattern tree structure 
third subtle point efficiently maintain set current frequent closed patterns check new pattern closed 
mining process pattern tree keep set current frequent closed patterns 
structure pattern tree similar fp tree 
recall items branch fp tree ordered order 
ordering crucial closed pattern verification discussed retain item ordering patterns mined 
major difference fp tree pattern tree stores transactions compressed form stores potential closed frequent patterns 
bottom mining conditional fp trees generates patterns order patterns share prefixes longer patterns generated 
addition total ordering patterns generated 
leads closed frequent pattern verification scheme follows 

il 
ij 
sorted item list il non zero count item ij item conditional fp tree currently mined 
set mined closed patterns split subsets sold obtained mining conditional trees corresponding items il ij itemsets contains item ij si obtained far mining ij conditional tree itemset contains item ij 
finding new pattern mining ij conditional tree need perform new pattern checking checking si old pattern checking checking sold 
new pattern checking performed follows 
mining conditional tree bottom manner just closet need check subpattern pattern pi si supp supp pi 
answer passes new pattern checking new closed pattern respect note patterns sold contain item ij need check subpattern patterns sold 
old pattern checking performed follows 
global fp tree mined top manner pattern may super pattern pattern sold supp supp 
case closed pattern absorbed passed new old pattern checking raise support threshold 
passes new pattern checking inserted raise support threshold 
correctness checking shown lemmas 
lemma new pattern checking 
pattern pass new pattern checking exist pattern pi si contain item ij supp pi supp 
rationale 
obtained directly new pattern checking method 
prefix prefix pattern pattern obtained removing item ij 
lemma old pattern checking 
old pattern checking need check exists pattern prefix sold supp prefix supp 
rationale 
pattern sold contain item ij super pattern need check subpattern fact need check pattern prefix sold support prove contradiction 
assume subpattern prefix absorbed case mining order know subpattern absorbed prefix new pattern checking old pattern checking 
lemma support raise 
newly mined pattern pass new pattern checking old pattern checking safe raise min support 
rationale 
lemma possibilities real closed pattern absorbed patterns 
second absorbed pattern pattern absorb pattern case pattern raise support raise support pattern precedents 
safe raise min support 
accelerate new old pattern checking introduce level index header table pattern tree structure 
notice pattern absorb absorbed pattern patterns support 
index support pattern 
addition new pattern checking need check pattern absorbed pattern contains ij old pattern checking need check absorb prefix ends second item speed checking second level indexing uses item id closed pattern index key 
pattern tree node record length pattern order judge corresponding pattern needs checked 
level index header table checking process shown example 
example closed pattern verification 
shows level indexing structure verification closed patterns 
lemmas need index support item id level indexing verification closed patterns 
structure itemset support matching items index structure find corresponding closed node tree 
algorithm summarize entire mining process mining algorithm 
algorithm 
mining top frequent closed itemsets minimal length min large transaction database 
input transaction database db integer frequent closed itemsets mined min minimal length frequent closed itemsets 
output 
set frequent closed itemsets satisfy requirement 
method 

initially min support 
scan db collect occurrence frequency count scan replaced sampling process reduces database scan increases chance items may ordered due biased sampling may hurt performance 
scan reduction may may improve performance depending data characteristics ordering transactions 
item transactions sort frequency descending order forms sorted item list header fp tree 

scan db construct fp tree update count header fp tree closed node count array raise min support support prune tree 
scanning db traverse fp tree descendant sum check raises min support raised min support prune tree 

tree mining performed traversing header table starting item non zero generate conditional fp tree item count current min support 
conditional fp tree mined bottom long short manner 
mined closed pattern inserted pattern tree 

output patterns pattern tree order support 
outputs patterns 

experimental evaluation section report performance study tfp variety datasets 
particular compare efficiency tfp charm closet known algorithms mining frequent closed itemsets 
give best possible credit charm closet comparison assigning best tuned min support difficult obtain practice algorithms generate top closed patterns user specified value condition min 
optimal min support obtained running tfp experimental condition 
means tfp comparable performance algorithms far useful due usability difficulty speculate min support mining 
addition study scalability tfp 
experiments show running time tfp shorter closet charm cases min long comparable cases tfp nearly linear scalability 
datasets real synthetic datasets experiments grouped categories 

dense datasets contain long frequent closed patterns pumsb census data consists transactions average length items connect game state information data consists transactions average length items mushroom characteristic data consists transactions having average length items 
datasets obtained uc irvine machine learning database repository 

sparse datasets click stream data consists transactions average length items contains short length long closed patterns obtained software synthetic data ibm dataset generator consists transactions average length items closed frequent patterns having average length 
performance results experiments performed ghz pentium pc mb memory running windows 
charm code provided author 
closet improved version uses index closed node verification scheme tfp 
compared performance tfp charm closet datasets varying min cases selected covers range typical values 
evaluated scalability tfp respect size database 
dense datasets dense datasets long closed patterns tfp performs consistently better charm closet longer min 
runtime seconds tfp charm closet minimal length performance connect runtime seconds tfp charm closet minimal length shows running time algorithms connect dataset fixed respectively min ranging 
observe tfp running time remains stable range min 
min reaches tfp starts outperform charm closet min reaches 
reason long patterns min support quite low 
case charm retain short frequent patterns forming required longer patterns fp tree closet contain large number items takes mining time 
hand tfp able min length restriction cut short frequent patterns early reduce total running time 
shows running time algorithms connect dataset min set respectively ranging 
connect dataset average length frequent closed patterns min considered low length restriction dataset 
see low length restriction tfp performance comparable closet charm runs giving support threshold 
min equal running time tfp constant full range average times faster charm times faster closet 
noticed low min increases performance gap tfp closet charm gets smaller 
runtime seconds tfp charm closet min min performance connect ii runtime seconds tfp charm closet shows running time algorithms mushroom pumsb datasets set min ranges 
mushroom dataset min algorithms similar low running time 
tfp keeps low running time range min starts outperform charm min low starts outperform closet min equal 
pumsb similar results connect mushroom datasets 
runtime seconds tfp charm closet minimal length mushroom pumsb performance mushroom pumsb runtime seconds tfp charm closet minimal length sparse dataset experiments show tfp efficiently mine sparse datasets min support 
comparable performance charm closet low min outperforms higher min 
shows running times tfp charm closet fixed min ranges 
demonstrates tfp strength dealing long min 
min performance charm closet starts deteriorating tfp retains performance 
shows performance dataset min fixed varying 
curves show running times charm closet times slower tfp 
experiments gazelle dataset shown 
smaller tfp outperforms charm closet min greater equal 
tfp continues outperform closet min greater equal similar performance charm 
performance study conclude tfp performance dense sparse datasets 
running time nearly constant wide range min values dense data 
charm performance deteriorates min increases runtime seconds runtime seconds tfp charm closet tfp charm closet minimal length performance minimal length runtime seconds tfp charm closet performance gazelle runtime seconds tfp charm closet minimal length tfp running time stays low 
reason inherent mining strategy tfp charm closet 
time support long patterns lower short patterns 
optimal support closet charm unable prune short frequent patterns early causing time spent mining useless patterns 
hand tfp able min length restriction cut short frequent patterns early improves running time instantly 
addition tfp include nodes reside min level participate mining process 
min increases nodes reside min level tree means conditional fp trees need built keeps running time low 
performance long min values performance tfp short min values min length constraint comparable closet charm 
cases running times differ closet charm run optimal support threshold tfp support threshold 
scalability test performance tests showed running time tfp increases linearly increased dataset size 

discussion section discuss related generate association rules mined top frequent patterns push constraints mining process 
related studies shown closed patterns desirable efficient methods mining closed pat terns closet charm developed :10.1.1.111.520
methods require user specified support threshold 
algorithm need user provide minimum support cases runs faster efficient algorithms charm closet turn outperform apriori substantially 
fu studied mining interesting itemsets length different aspects mine patterns closed ones minimum length constraints mines patterns lengths heuristics developed applied philosophy methodology fp tree modification different 
best knowledge study mining top frequent closed patterns length constraint compare method best known performed closed pattern mining algorithms 
generation association rules top frequent itemsets user wants mining tasks cases wants mine strong association rules mined top frequent itemsets 
examine efficiently 
items short transactions contributing support top itemset length min may contribute support items 
need included computation minimal influence performance 
derive correct confidence observations support itemset derived start mining 
set top closed itemsets may contain items forming subset superset relationships rules involving itemsets automatically derived 
rules forms needs derived top itemsets probes known min support threshold perform probe constrained mining find support related itemsets 
alternative set min derive patterns readily combinations association rules 
pushing constraints tfp mining constraint mining essential top mining users may want put constraints data rules mined 
examine different kinds constraints pushed top frequent closed pattern mining 
succinct anti monotone constraints pushed deep tfp mining process 
constraints pushed deep select itemsets mining starts anti monotonic constraint pushed iterative tfp mining process similar way fp growth 
second monotone constraints rule similar traditional frequent pattern mining itemset mined far abcd satisfies constraint sum adding items satisfies constraints checking avoided expansion 
third convertible constraints arrange items appropriate order constraint transformed anti monotone anti monotone constraint pushing applied 
interested readers easily prove properties topk frequent closed pattern mining 

studied practically interesting problem mining top frequent closed patterns length min proposed efficient algorithm tfp optimizations closed node count descendant sum raise min support tree mining exploring top bottom combined fp tree mining mine promising parts tree order raise min support prune unpromising tree branches special indexing structure novel closed pattern verification scheme perform efficient closed pattern verification 
experiments performance study show tfp high performance 
cases outperforms efficient frequent closed pattern mining algorithms closet charm running best tuned min support 
furthermore method extended generate association rules incorporate user specified constraints 
study conclude mining top frequent closed patterns min support preferable traditional min support mining frequent pattern mining 
detailed study direction needed including improvement performance flexibility mining top frequent closed patterns mining top frequent closed sequential patterns structured patterns 

grateful dr mohammed zaki providing code data conversion package charm promptly answering questions 
agrawal srikant 
fast algorithms mining association rules 
vldb 

fu 
kwong tang 
mining interesting itemsets 
ismis 
han pei yin :10.1.1.3.2424
mining frequent patterns candidate generation 
sigmod 
ng lakshmanan han pang 
exploratory mining pruning optimizations constrained associations rules 
sigmod 
pasquier bastide taouil lakhal 
discovering frequent closed itemsets association rules 
icdt 
pei han lakshmanan 
mining frequent itemsets convertible constraints 
icde 
pei han mao 
closet efficient algorithm mining frequent closed itemsets 
dmkd 
zaki hsiao :10.1.1.111.520
charm efficient algorithm closed itemset mining 
sdm 
