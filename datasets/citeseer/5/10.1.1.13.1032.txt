logic programs querying inconsistent databases pablo bertossi university toronto carleton university department computer science school computer science toronto canada 
ottawa canada 
pablo cs toronto edu bertossi scs carleton ca 
consistent answers relational database violates set integrity constraints ics characterized ordinary answers obtained minimally repaired version database repair 
repairs speci ed interpreted stable models simple disjunctive normal logic program database predicates extended appropriate annotation arguments 
consequence consistent query answers obtained running query program combination repair program cautious skeptical stable model semantics 
show write repair programs universal referential ics establish correctness show run top dlv system 
integrity constraints ics capture semantics relational database establishing correspondence application domain database modeling 
unusual database instance inconsistent respect intended set ics 
happen due di erent factors integration data sources 
integration consistent databases may easily lead inconsistent integrated database 
natural problem databases consists retrieving answers queries consistent ics database satisfy ics 
data consistent 
notion consistent answer rst order fo query de ned computational mechanism obtaining consistent answers 
intuitively speaking ground tuple rst order query consistent possibly inconsistent relational database instance db ordinary answer minimal repair db database instance schema domain di ers db minimal set inclusion set inserted deleted tuples 
computing consistent query answers natural problem dbs 
apart applications data integration foresee interesting applications context intelligent information systems particular user impose particular view semantics database querying database user ics necessarily maintained db central administration 
user specify constraints queries posed means new extra sql statement new option usual menu interacting db 
mechanism consistent query answering limitations terms ics queries handle 
general methodology logic programs stable model semantics introduced :10.1.1.125.8854:10.1.1.125.8854
general queries considered ics restricted binary universal database literals plus built ins 
independently similar methodology logic programs wrt arbitrary universal ics 
need deal repairs database hopefully compact succinct manner having compute explicitly 
database repairs corresponds just auxiliary conceptual notion characterize relevant consistent answers 
consequence natural approach consists providing manageable logical speci cation class database repairs treats 
speci cation include information database ics 
show specify database repairs means simple classical disjunctive normal programs stable model semantics 
database predicates programs contain annotations extra arguments 
turn annotations inspired theories written annotated predicate logic specify database repairs 
programs classical opposed annotated paraconsistent logic programs 
coherent stable models program turn correspond database repairs 
logic programs introduced specify database repairs may contain exponential number rules depending number database literals appearing ics :10.1.1.125.8854
programs contain linear number rules 
approach reach goals 
rst goal consists obtaining computable speci cation possible minimal sets changes required restore consistency theory corresponding positive information explicitly stored relational database 
interested computing database repairs repairing way inconsistent database 
main second goal consists providing general computational mechanism obtain consistent answers rst order query 
obtained running combination repair program query program skeptical stable model semantics sanctions true true stable model 
logic programming implementation explicitly computes stable models order answer query better 
experimented dlv implementation disjunctive stable model semantics 
methodology works arbitrary rst order queries arbitrary universal ics considerable extends cases han :10.1.1.125.8854
show apply methodology presence referential integrity constraints 
preliminaries database repairs consistent answers consider xed relational database schema consisting xed possibly nite database domain fc xed set database predicates fp png xed arities xed set built predicates fe schema determines rst order language 
database instance nite collection db facts form predicate constants built predicate xed extension database instance subject changes 
integrity constraint ic implicitly quanti ed clause form predicates tuples containing constants variables formula containing predicates 
assume db ic separately consistent theories 
may case db ic inconsistent 
equivalently associate natural way db rst order structure denoted db applying closed world assumption cwa false ground atom explicitly appearing set atoms db may happen db structure satisfy ic denote db ic fact database satis es ic case say db consistent wrt ic say db inconsistent 
de ne distance database instances db db symmetric di erence 
db db db db db db 
database instances db possibly inconsistent wrt ic say instance db repair db db ic 
db db minimal set inclusion class instances satisfy ic instance db db ic 
db db 
db db 
example 
consider relational schema book author name database instance db kafka metamorph book kafka metamorph functional dependency fd author name expressed ic book book db inconsistent respect ic original instance possible repairs db kafka metamorph db kafka metamorph db database instance possibly satisfying set ic integrity constraints 
query db say tuple constants consistent answer denoted db repair db db db 
closed formula sentence true consistent answer denoted db repair db db db example 
example continued query book kafka metamorph true consistent answer true repair 
query metamorph consistent answer 
query metamorph kafka consistent answer 
notice repairs obtained insertion deletion relational tuples specify preference particular kind repairs 
repairs just characterize consistent answers 
annotated predicate calculus introduced 
constitutes non classical logic classical inconsistencies may accommodated reasoning 
syntax similar classical logic fact atoms annotated values drawn truth values lattice 
order embed database ics single consistent theory particular lattice introduced 
contains usual truth values classical true false inconsistent 
unknown plus shown correspondence minimal models annotated theory repairs inconsistent database universal ics 
extended existential ics 
values annotate needed constraint satisfaction ic written disjunctive normal form positive resp 
negative literals annotated resp 
values represent truth values original database atom outside db annotated 
considered advisory truth values solve con icts original database ics satis ed 
con icts solved favor ics database instance changed restore consistency 
lub meaning case atom true data level false ic level get derived annotation expressing advised false delete database 
similarly lub indication literal receives annotation inserted database 
explicitly lattice annotations new constants language extra argument introduced database atoms 
rules 
de nition capture relationships annotations described 
logic programming speci cation repairs section consider ics form 
aim specify database repairs classical rst order logic programs 
programs suggested non classical annotated theory 
order accommodate annotations classical framework replace predicate new predicate 
extra argument annotations 
de nes new fo language annotated 
de nition 
repair logic program db ic db ic written predicates contains clauses 
atom db db ic contains fact 

predicate db ic contains clauses new auxiliary elements domain annotations 

constraint form db ic contains clause represents negation 
intuitively clauses 
say ic violated body db repaired alternatives shown head 
may interactions constraints single repairing steps may restore consistency db 
sure repairing process continues stabilizes state ics hold 
role clauses 
containing new annotations groups atoms annotated notice annotations obtained combined ect rules 
fed back rules 
consistency restored 
possibility allows just program rule ic 
example shows interaction functional dependency inclusion dependency 
atoms deleted order satisfy functional dependency inclusion dependency violated second step repaired 
second step annotations computed rst step functional dependency repaired detect violation inclusion dependency trigger corresponding repairing process 
example 
example continued extend schema table author name european books 
db contains literal kafka metamorph addition ics consider set inclusion dependency xyz book obtain program db ic 
kafka metamorph book kafka metamorph book kafka metamorph 
book book book book book book book book 
book book book book book book 
programs contain negation failure consider stable models semantics 
model stable model disjunctive program minimal model fa 

bm 

bm 
ground instance clause kg 
de nition 
herbrand model coherent contain 
example 
example continued coherent stable models program example kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph kafka metamorph kafka metamorph kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph book kafka metamorph kafka metamorph kafka metamorph kafka metamorph kafka metamorph stable models program include database contents original annotations 
time atom model annotated appear annotated models able read database repairs 
stable model logic program interpreted 
order introduce new annotations arguments 
rst groups atoms annotated annotated intuitively correspond annotated models db ic 
similar role plays new annotation wrt false annotations 
new annotations simplify expression queries posed program 
simply asking tuples repair ask 
interpreted models easily obtained adding new rules 
de nition 
interpretation program db ic extends db ic rules example 
example continued coherent stable models interpretation program extend kafka metamorph book kafka metamorph book kafka metamorph kafka metamorph book kafka metamorph book kafka metamorph interpretation model obtain database instance 
de nition 
coherent stable model program db ic 
database associated dbm fp mg 
theorem establishes correspondence coherent stable models program repairs original instance 
theorem 
coherent stable model db ic dbm nite dbm repair db respect ic furthermore repairs obtained way repairs db example 
example continued database instances obtained de nition repairs db dbm kafka metamorph book kafka metamorph dbm kafka metamorph query program rst order query want consistent answers db consequence need atoms simultaneously true stable model program db ic 
obtained query obtained replacing positive literal negative literal 
transformed query program standard transformation 
query program run combination db ic 
example 
query kafka generate kafka transformed query program clause answer book kafka computing program database repairs computed implementation disjunctive stable models semantics dlv supports denial constraints studied 
way able prune models coherent imposing predicate constraint 
example 
consider database instance fp inconsistent wrt set inclusion dependency 
program db ic contains clauses 
database contents 

rules closed world assumption 
annotation rules 
rule ic 

denial constraints coherence 
interpretation rules running program db ic dlv obtain stable models fp fp rst model says atom inserted database 
second atom deleted 
coherence denial constraints play role previous example obtain exactly model 
reason ic consequence step needed obtain repair database 
way obtain incoherent stable model due application rules 

example second repair step 
example 
example continued add extra set inclusion dependency keeping instance 
repair obtained inserting causes insertion 
program additional rules run program obtain expected models deletes second inserts 
omit coherence denial constraints precisely table obtain third model fp coherent contains interpreted repair original database 
notice programs annotations obtained simple terms dependency ics 
mentioned consistent answers obtained running query program repair program db ic skeptical stable model semantics sanctions true true stable models 
programs referential ics far repair programs universal ics 
want consider referential ics rics form assumed variables range underlying database domain include value null ric repaired insertion null value say null cascaded deletion 
repair null expected change propagate ics set inclusion dependency 
program detect inconsistency wrt ic 
easily avoided program level appropriately qualifying values variables disjunctive repair clause ics set inclusion ic 
program db ic extended formulas null aux null aux aux intuitively clauses detect formula satis ed model 
case belongs model null original instance violation ric rule repair done deleting inserting null 
example 
consider database instance fp set ics yq 
program db ic written dlv follows ts tss ta stand database contents domd 
td 
td td domd 
rules cwa fs domd td 
fs domd domd td 
fs td domd domd 
annotation rules fs fa domd 
ts ta domd 
ts td domd 
fs fa domd domd 
ts ta domd domd 
ts td domd domd 
fs fa domd domd 
ts ta domd domd 
ts td domd domd 
rules ics aux td fa domd domd 
aux ta domd domd 
fa null ta ts aux null td domd 
fa ta ts fs domd domd 
interpretation rules tss ta domd 
tss td fa domd 
fss fa domd 
fss domd td ta 
tss ta domd domd 
tss td fa domd domd 
fss fa domd domd 
fss td ta domd domd 
tss ta domd domd 
tss td fa domd domd 
fss fa domd domd 
fss td ta domd domd 
rules interpreting null values null tss null ta 
null tss null td null fa 
null tss null ta 
null tss null td null fa 
denial constraints ta fa 
ta fa 
ta fa 
models obtained domd td td ts fs fss fa fs fs fss fss domd td td ts tss null ta fs fs fss fss null tss corresponding database instances fp null program consider inclusion dependency violated insertion tuple null 
fact null added instance 
clauses null td 
null td null td domd 
part program 
case program considers instance fp null violate ric re ected model domd td null td td ts null td tss fs fs fss fss null tss 
want impose policy repairing violation ric just deleting tuples rule changed aux null saying ric violated fact produces violation deleted 
notice section departing de nition repair section sense repairs obtained deletion tuples insertion null values usual ways maintain rics 
instance fp ic contains yq fp obtained repair captured program 
insist keeping original de nition repair allowing fp repair element clause replaced aux null choice choice static non deterministic choice operator selects value attribute tuple value attribute tuple equation choice selects value domain 
rule forces correspondence stable models repairs 
general treatment consistent query answering rst order queries ics 
doing shown specify database repairs means classical disjunctive logic programs stable model semantics 
programs annotations new arguments 
consequence consistent query answers obtained running query program speci cation program 
showed run programs dlv system 
treatment referential ics considerably extends sketched :10.1.1.125.8854
problem consistent query answering explicitly notions repair consistent answer formally de ned 
addition methodology consistent query answering rewriting original query developed investigated implemented 
basically want consistent answers fo query expressed say sql new query sql computed usual answers database consistent answers original query 
methodology polynomial data complexity reason works restricted classes fo ics queries basically non existentially quanti ed conjunctive queries 
shown problem conp complete simple functional dependencies existential queries 
furthermore problem formulated problem non monotonic reasoning precisely minimal entailment complexity propositional case complete 
circumstances sense apply techniques logic programming success formalizing implementing complex reasoning tasks 
problem come best logic programming speci cation best way computational complexity involved go theoretical lower bound 
consistent query answering relational databases new natural application domain logic programs answer set programming particular 
implementation issues implementation applications important directions research 
logic programming environment interact dbms inconsistent db stored 
computation possible pushed dbms doing logic programming level 
furthermore possible materialization negative absent data avoided 
problem developing query evaluation mechanisms disjunctive logic programs guided query containing free variables expecting set answers magic sets deserves attention logic programming database communities 
current alternative relies nding ground query atoms belong stable models computed ground instantiation original program 
intelligent grounding strategies pruning advance instantiated program explored incorporated dlv 
interesting explore extent program pruned irrelevant rules subgoals information obtained querying database 
shown classes ics intersection stable models repair program coincides founded semantics computed eciently stable model semantics 
possible take advantage ecient core computation consistent query answering ways splitting computation core part query speci part 
cases identi ed fds aggregation queries 
logic programs optimized senses 
cases resulting programs turn head cycle free hcf 
basically program hcf cycles associated graph shows arrow predicate predicate rule appears disjunction head appears positive body 
example shows hcf program 
hcf programs transformed non disjunctive normal programs better complexity properties 
transformations justi ed discarded basis careful analysis intrinsic complexity consistent query answering 
original program transformed normal program ecient implementations query evaluation xsb successfully applied context consistent query answering query transformation quanti ed conjunctive queries 
related general methodology disjunctive logic programs stable model semantics specifying database repairs wrt universal ics 
approach preferences repairs speci ed 
program schema rule generation 
independently speci cation database repairs binary universal ics means disjunctive logic programs stable model semantics :10.1.1.125.8854
programs contained triggering rules stabilizing rules 
trigger local step changes stabilize chain local changes state ics hold 
rules generated schema 
programs class universal ics simpler shorter 
schema extended methodology sketched generate exponential number rules terms number ics literals 
due simplicity program takes full advantage relationship annotations linear number rules generated 
similarities approach consistency handling followed belief revision update community 
database repairs coincide revised models de ned winslett 
treatment mainly propositional preliminary extension rst order knowledge bases 
papers concentrate computation models revised theory repairs case query answering 
comparing framework belief revision empty domain theory model database instance revision set ics 
revision database instance ics produces new database instances repairs original database 
motivation starting point quite di erent belief revision 
interested computing repairs se answering queries hopefully original database possible possibly posing modi ed query 
possible look methodologies representing querying simultaneously implicitly repairs database 
furthermore fully rst order framework 
approach database repairs logic programming semantics consists revision programs 
rules programs explicitly declare enforce satisfaction integrity constraint explicitly stating ics intended procedural meaning inserting database atom database declarative stable model semantics revision programs 
preferences certain kinds repair actions captured declaring corresponding rules program omitting rules lead forms repairs 
paraconsistent annotated logic programs non classical semantics introduced 
transformation methodologies paraconsistent logic programs shown allow assigning extensions classical semantics 
programs stable model semantics 
acknowledgments funded carleton university start nserc 
grateful alberto mendelzon marcelo arenas nicola leone useful conversations 

abiteboul hull vianu foundations databases 
addison wesley 

arenas bertossi chomicki consistent query answers inconsistent databases 
proc 
acm symposium principles database systems acm pods pp 


arenas bertossi kifer applications annotated predicate calculus querying inconsistent databases 
computational logic cl stream th international conference rules objects databases dood 
springer lecture notes arti cial intelligence pp 


arenas bertossi chomicki specifying querying database repairs logic programs exceptions 
flexible query answering systems 
developments larsen zadrozny christiansen eds springer pp 


arenas bertossi chomicki scalar aggregation fd inconsistent databases 
database theory icdt springer lncs pp 


arenas bertossi chomicki answer sets consistent query answers 
submitted 
corr cs db 
baral ch 
knowledge representation reasoning declarative problem solving answer sets 
cambridge university press 
appear 

bertossi repairing databases annotated predicate logic 
proc 
international workshop non monotonic reasoning nmr special session changing integrating information theory practice benferhat giunchiglia eds pp 


ben eliyahu dechter propositional semantics disjunctive logic programs 
annals mathematics arti cial intelligence 

bertossi chomicki cortes gutierrez consistent answers integrated data sources 
flexible query answering systems proc 
th international conference 
motro christiansen larsen eds 
springer lnai pp 


blair subrahmanian paraconsistent logic programming 
theoretical computer science 

leone enhancing disjunctive datalog constraints 
ieee transactions knowledge data engineering 

bertossi querying inconsistent databases algorithms implementation 
computational logic cl lloyd 
eds 
stream th international conference rules objects databases dood 
springer lecture notes arti cial intelligence pp 


chomicki computational complexity consistent query answers 
submitted corr cs db 

chou winslett model belief revision system 
journal automated reasoning 

damasio pereira survey paraconsistent semantics extended logic 
handbook defeasible reasoning uncertainty management systems vol 
gabbay ph 
smets eds kluwer academic publishers pp 


eiter gottlob propositional circumscription extended closed world assumption complete 
theoretical computer science pp 


eiter leone pfeifer scarcello deductive system non monotonic reasoning 
proc 
lpnmr springer lnai pp 


eiter faber leone pfeifer declarative problem solving dlv 
logic arti cial intelligence minker ed kluwer pp 


gelfond lifschitz stable model semantics logic programming 
logic programming proceedings fifth international conference symposium kowalski bowen eds mit press pp 


gelfond lifschitz classical negation logic programs disjunctive databases 
new generation computing 

greco zaniolo programming nondeterminism deductive databases 
annals mathematics arti cial intelligence 

greco greco logic programming approach integration repairing querying inconsistent databases 
proc 
th international conference logic programming iclp ph 
ed lncs springer pp 


kifer logic reasoning inconsistency 
journal automated reasoning 

kifer subrahmanian theory generalized annotated logic programming applications 
journal logic programming 

leone scarcello disjunctive stable models unfounded sets fixpoint semantics computation 
information computation 

lloyd foundations logic programming 
springer verlag 

marek truszczynski revision programming 
theoretical computer science 

sagonas swift warren xsb ecient deductive database engine 
proc 
acm sigmod international conference management data acm press pp 


winslett reasoning action possible models approach 
proc 
seventh national conference arti cial intelligence aaai pp 

