measuring similarity labeled graphs pierre antoine christine 
university lyon bd du cedex france bat univ lyon fr 
proposes similarity measure compare cases represented labeled graphs 
rst de ne expressive model directed labeled graph allowing multiple labels vertices edges 
de ne similarity problem search best mapping mapping correspondence vertices graphs 
key point approach mapping vertex graph may associated vertices graph 
key point quality mapping determined generic functions tuned order implement domain dependant knowledge 
discuss computational issues related problem describe greedy algorithm 
show approach provides quantitative measure similarity qualitative information prove valuable adaptation phase cbr 
case reasoning cbr relies hypothesis similar problems similar solutions 
cbr system solves new problem retrieving similar solution known reusing solution current context 
retrieving phase requires accurate similarity measure cases reusable considered similar problem hand 
situations cases represented set attribute value pairs usually called vector cases 
similarity cases de ned straightforward way weighted combination attribute value pair similarity eciently computed 
structured representations necessary solving complex problems feature terms hierarchical decompositions directed non directed labeled graphs 
focus directed labeled graphs directed graphs vertices edges associated labels consider problem characterizing computing similarity 
labeled graphs provide rich mean modeling structured objects 
particular project originated represent design objects computer aided design cad application 
displays design objects borrowed application allows introduce key points addressed measuring similarity 
roughly speaking say design objects similar beams respectively correspond beams walls correspond 
absolutely similar rst beams di erent shapes left right number walls di erent case wall plays role walls 
object object fig 

similar design objects example rst shows order measure similarity objects nd mapping pairs di erent components 
furthermore mapping best maps similar components possible similarity depends features share relations components 
example shows mapping necessarily role wall object held walls object 
provide accurate comparison complex structured objects essential allow multiple mappings take account de ning similarity measure 
similarity measure quantitative indicating objects similar qualitative giving information commonalities di erences objects 
section formally de ne labeled graphs illustrate expressive power design example gure 
section propose general similarity measure notion mapping graph vertices show application dependant similarity knowledge implemented framework 
section discusses computational issues related similarity problem rst study tractability complete approach describe ecient greedy algorithm 
section discuss bene ts similarity measure reuse phase cbr 
conclude showing genericity respect proposals graph comparison give research directions 
labeled graphs de nitions notations labeled graph directed graph vertices edges associated labels 
loss generality shall assume vertex edge associated label vertices resp 
edges label add extra anonymous label associated vertex resp 
edge 
formally nite set vertex labels nite set edge labels le labeled graph de ned triple hv nite set vertices relation associates vertices labels set couples vertex label le relation associates edges labels set triples edge label note edge relation de ne set edges respectively call tuples vertex features edge features de ne descriptor graph hv set features descr descriptor completely describes graph measure similarity graphs 
similarity problem de ned graphs hv hv disjoint sets vertices 
example consider design objects displayed gure 
represent objects labeled graphs rst de ne sets vertex edge labels respectively characterize components relationships components beam wall le sets labels design objects gure may represented labeled graphs gure left part gure displays graphical representations right part gives associated formal de nitions means vertex edge features 
note vertices labels beam vertices labels beam allows express corresponding objects share feature beam shapes di erent 
generally fact edges vertices may label express inheritance specialization relationships inclusion sets labels 
inclusive expression inheritance similarity vertices edges de ned means common labels corresponding common ancestors inheritance hierarchy 
beam beam beam beam wall wall rv beam beam beam beam wall wall re beam beam beam beam wall rv beam beam beam beam wall re fig 

labeled graphs describing objects gure measure similarity labeled graphs mapping labeled graphs measure similarity labeled graphs rst nd mapping matches vertices order identify common features 
precisely mapping labeled graphs hv hv relation note mapping associate vertex graph zero vertices graph 
extension shall functional notation denote set vertices associated vertex relation fv mg fv mg may functional notation keep mind mapping relation set couples vertices apply set operators mappings 
example labeled graphs gure de ne mappings ma mb rst mapping ma respectively matches mapping set vertices associated noted ma fe fg 
second mapping mb matches mapping set vertices associated noted mb 
similarity respect mapping order measure similarity objects intuitive usual compare amount features common objects total amount features 
eld psychology tversky demonstrated cognitive plausibility intuition giving mathematical model similarity measure objects described respectively sets features non decreasing positive function monotonic respect inclusion positive values allowing de ne asymmetrical similarity measures 
shall set zero case role held function discussed section 
labeled graph de ned section described set descr vertex edge features 
similarity di erent graphs hv hv depends common features descr descr set features 
intersection graphs descriptors empty 
compute intersection respect mapping pairs vertices vertices descr um descr set contains features vertices edges matched vertex edge feature 
de nition commonalities apply tversky formula de ne similarity respect mapping sim descr um descr descr descr example consider labeled graphs associated descriptors gure 
intersections descriptors respect map pings ma mb proposed section descr uma descr descr descr descr descr beam beam wall beam beam beam beam wall evaluation splits de nition sim equation entirely satisfying 
example consider labeled graphs gure suppose beams objects shape 
case mapping ma match feature graph perfectly similar graph descr uma descr descr descr sim ma 
mean graphs perfectly similar chosen function annoyed vertex paired vertices prefer mapping features matched 
intend mean mapping strictly better isomorphic graphs subgraphs matched 
obviously depends application domain 
contrary want model tunable order allow interpretation 
enhance model introduce function splits returns set split vertices vertices paired vertex set vertices paired 
de ne extended inclusion operator sets considering inclusion sets paired vertices splits jm example mappings proposed section splits splits fe fg splits modify equation take value splits account simm descr um descr splits descr descr function de ned properties positive monotonic non decreasing respect extended inclusion similarity decreasing number splits increasing 
maximum similarity labeled graphs de ned similarity graphs respect mapping graphs vertices 
de ne maximum similarity graphs similarity induced best mapping sim max descr um descr splits descr descr note similarity value induced mapping simm contain split vertex associated vertex may negative vertices associated vertex occurs weight splits de ned higher weight common features de ned cases maximum similarity sim similarity induced empty mapping null 
note determining mappings best completely depends functions respectively quantify vertex edge features splits 
consequence functions carefully chosen depending application domain 
discussed section 
similarity knowledge notions far similarity measures quite generic 
order accurate actual similarity measure take account similarity knowledge course application dependant 
functions de nitions place application dependant knowledge implemented 
easy way de ning ensuring monotonic de ne sum positive null weights assigned element measured sets features splits set vertex edge features set splits weight fv weight fe sv weight domain knowledge assign weight feature cardinality function 
split receive weight weight proportional cardinality generic knowledge available weight feature de ned basis label represent facts beam signi cant shaped composition relation signi cant relation example 
speci contextual knowledge available assign speci weight feature split 
example express facts signi cant shaped signi cant relation annoying split may concerned constrained parameters tversky formula zero 
parameters possible de ne asymmetrical similarity measures considered desirable property cbr 
de nition sim enables asymmetrical similarity measures features splits weighted di erently depending graph belong 
example assigning null weight feature allows measure matches ts computing maximum similarity labeled graphs labeled graphs consider problem computing maximum similarity nding mapping maximizes formula 
note denominator descr descr formula depend mapping 
denominator introduced normalize similarity value zero 
compute maximum similarity graphs nd mapping maximizes score function score descr um descr splits problem highly combinatorial 
general subgraph isomorphism problem known np complete 
section rst study tractability complete search propose greedy incomplete algorithm 
tractability complete search search space maximum similarity problem composed di erent mappings subsets contains jv jv states 
search space structured lattice set inclusion relation explored exhaustive way branch bound approach 
complete approach tractable exists bounding function detect soon possible node pruned score nodes constructed current node worse best score far 
case potential successors node associated partial mapping mappings determine exists subgraph graph isomorphic graph de ne labeled graphs ga gb associate label vertex edge consider function associates nite weight split function associates weight resp 
feature gb resp 
ga 
subgraph isomorphism problem solved determining maximum similarity ga gb equal 
supersets score function monotonic respect set inclusion score mapping may increase decrease adds new couple 
score de ned di erence function common features function splits sides di erence may increase adding couple mapping 
precisely show mappings descr um descr descr um descr splits splits functions monotonic descr um descr descr um descr splits splits fact intersection graph features bounded set graph features de ne bounding function 
mapping trivially show descr um descr descr descr monotonic mapping score descr um descr splits descr descr splits consequence prune node associated matching descr descr splits smaller equal score best mapping far 
case nodes corresponding mappings supersets explored score higher best score far 
rst bounding function ectiveness reducing search tree highly depends relative weights functions higher weight splits nodes pruned 
bounding function generic applied kind labeled graphs functions provided monotonic 
accurate bounding functions de ned considering speci cases 
may introduce ad hoc rules reduce search space 
particular remove search space mapping contains couple common features vertex features features edges starting 
exploration remove partial search tree root mapping mapping containing couple common features belong descr um descr 
tractability complete branch bound approach strongly depends ordering heuristics determine order developing nodes search tree ordering heuristic allows search quickly nd mapping score high nodes cut 
describe subsection greedy algorithm uses ordering heuristics quickly build mapping 
greedy algorithm describes greedy algorithm introduces ordering heuristics build mapping algorithm starts empty mapping iteratively adds mapping couple vertices increases score function 
step set candidate couples increase score function called cand contains couple 
break ties look ahead potentiality candidate cand account features shared edges starting resp 
descr um descr 
select couple enter mapping set cand couples looked ahead common edge features maximize function greedy hv rv re hv rv re returns mapping loop cand score cand cand look ahead look ahead re re re re re re re re descr um descr exit loop cand score score look ahead choose randomly couple cand score score loop return fig 

greedy search mapping consider example graphs gure suppose functions de ned set cardinality function 
rst iteration current mapping empty set couples increase score function contains couple matches vertices sharing vertex label cand fa dg fe fg 
set candidates resp 
potential common edge features look ahead look ahead potential common edge features edges plus edges candidates smaller number potential common edge features 
greedy algorithm randomly select couple set cand suppose selected couple 
second iteration cand contain increase score function cand contain potential common edge features 
couple enter mapping 
third iteration cand contain increases score function enter mapping 
greedy algorithm stops iterating couple directly increases score function looked ahead common edge features 
note score mapping construction may decrease step occurs couple enters mapping introduces new splits new common features looked ahead common edge features score function expected increase iteration 
algorithm returns best computed mapping run 
greedy algorithm polynomial time complexity jv jv provided computation functions linear time complexities respect size mapping note look ahead sets computed incremental way 
counterpart low complexity algorithm backtracks complete 
may nd best mapping score maximal nds best mapping prove optimality 
note algorithm deterministic may run times case keep best mapping 
discussion algorithms implemented 
generally speaking rst experiments shown complete branch bound approach applied small graphs vertices general case performs better increasing relative weight splits respect weights common features 
experiments con rmed greedy algorithm ecient computing mappings graphs nodes edges seconds cpu time 
tractability critical cbr target case compared numerous cases case base 
usually rst pass lters majority cases promising candidates precisely compared 
ltering pass accurate ecient algorithm greedy algorithm 
limit comparison representative sub graphs vector characteristics 
implementation plan pass greedy algorithm select case base promising candidates 
promising candidates plan run times greedy algorithm trying nd better mappings 
discussed section shall enhance greedy algorithm integrating local search mechanisms 
similarity adaptation reusing qualitative similarity information goals pursued provide quantitative similarity measure qualitative information compute measure 
best mapping maximizes graphs similarity de ne set di erences graphs set split vertices features shared graphs di splits descr descr descr um descr believe set di erences valuable reusing case 
example assistant aims helping designers cad application reuse experience represented design episodes 
episodes composed initial state nal state represented labeled graphs 
reusability episode estimated similarity initial state current state designer 
adaptation performed transforming current state new state di erences nal state current state initial state cf 
gure 
new state differences initial state final state current state reusable episode source case situation target case fig 

adapting design episode approach compared similarity paths proposed similarity cases estimated nding path problem space path translated solution space order follow backward adaptation 
example eliciting reusing qualitative similarity information 
approach computed set di erences di seen set elementary operations feature addition deletion vertex splitting merging reversible 
model relies assumption elementary operations independent unordered steps similarity paths strictly ordered global ect graph 
adaptation guided similarity underlined fact remembering reusing tightly related 
point view cbr similarity measure accurate cases considered similar reusable 
pointed authors prove retrieval mechanism similarity paths mentioned correct complete respect adaptation meaning adaptable cases retrieved 
important emphasize design functions discussed section similarity knowledge implemented functions knowledge consistent adaptation knowledge feature weighted addition resp 
deletion expensive dicult adaptation process 
general purpose similarities proposed necessarily adequate cbr 
proposed representation model cases labeled directed graphs vertices edges may label 
de ned similarity measure graphs discussed approaches computing measure complete branch bound algorithm appears intractable general case ecient greedy algorithm proposed 
model suited cbr enables exible modelling similarity knowledge provides qualitative similarity information prove useful adaptation 
generic model graphs versatile representation tools studied wide range application domains 
comparing graphs important problem tackled various modalities graphs identical problem graph isomorphism general problem subsumption extent quantitatively qualitatively di erent graph comparison problems addressed similarity measure straightforward way 
instance isomorphism trivially search perfect mapping similarity assign non null value feature split 
subgraph isomorphism discussed section easily modelled 
discussed section multiple labels represent hierarchically structured types vertex edge 
determining graph subsumes graph projection algorithm achieved ignoring assigning null weight feature split looking similarity 
hand symmetrical similarity measure considering similarity values lower corresponds looking speci subsumer anti uni cation algorithm 
eld knowledge representation exact subsumption constraining ill designed knowledge basis incremental design 
approximative subsumption measures proposed address kind problem 
eld image recognition proposed algorithm fuzzy projection extending conceptual graphs formalism 
theoretical cope error tolerant isomorphism computing similarity basis elementary transformations necessary graphs isomorphic 
propositions interesting features model approximate edge matching focus vertices handling splits exible tuning 
worth mentioning petrovic graph retrieval eld cbr 
approach quite similar expresses similarity mapping vertices looks maximizing mapping lacking exibility regard requirements splits allowed mappings functions graph elements exactly label furthermore function pre de ned corresponds cardinality function 
went addressing tractability issues implementing ecient tabu search 
genericity model explains large extent complexity induced tractability issue 
plan focus research directions address issue 
shall explore heuristic approaches 
done look ahead function greedy algorithm order nd trade accurate predictions eciency 
incomplete approaches tabu search order re ne results greedy algorithm locally exploring search space constructed mapping 
second situations graphs remarkable properties tractability issues usually addressed ad hoc heuristics 
plan study heuristics generic approaches order able integrate tuning functions means necessary 
particularly interested systems aim assisting user standalone systems 
situations retrieving reusing phase cbr performed interactively 
possible qualitative information elicited approach mapping commonalities di erences 
interaction allow users guide system reducing combinatorial complexity user guidance provide contextual knowledge speci cases system knowledgeable accurate uses 
acknowledgment enriching discussions implementation algorithms 

aamodt plaza 
case reasoning foundational issues methodological variations system approaches 
ai communications 

gilles bisson 
de ne similarity measure object representation systems pages 
ios press amsterdam nl 

horst bunke 
error correcting graph matching uence underlying cost function 
ieee transaction pattern analysis machine intelligence 

pierre antoine 
mod exp pour en la de la conception assist ee par ordinateur au web 
th ese de doctorat en informatique universit claude bernard lyon fr 

edwin diday 
el ements analyse de donn ees 
paris fr 

christophe horst bunke 
graph matching filtering large databases graphs decision trees 
iapr tc workshop graph representation pattern recognition pages 

jean lieber napoli 
classi cation case planning 
proceedings ecai pages 

jean lieber napoli 
correct complete retrieval case problem solving 
proceedings ecai pages 

dekang lin 
information theoretic de nition similarity 
proceedings icml fifteenth international conference machine learning pages 
morgan kaufmann 

bruno messmer horst bunke 
new algorithm error tolerant subgraph isomorphism detection 
ieee transaction pattern analysis machine intelligence 

philippe wee lee 
fuzzy conceptual graphs matching images natural scenes 
proceedings ijcai pages 

christos papadimitriou 
computational complexity 
addison wesley boston ma 

petrovic graham kendall yong yang 
tabu search approach graph structured case retrieval 
proceedings stairs volume frontiers arti cial intelligence applications pages 
ios press 

plaza 
cases terms feature term approach structured representation cases 
proceedings iccbr number lncs pages 
springer verlag 

barry smyth keane 
retrieval adaptation dj vu case reasoning system software design 
aaai fall symposium adaptation knowledge reuse 
aaai 

john sowa 
knowledge representation logical philosophical computational foundations 
pws publishing 

amos tversky 
features similarity 
psychological review 

valtchev 
construction automatique de taxonomies pour aide la repr esentation de par objets 
th ese de doctorat en informatique universit joseph fourier grenoble fr 
