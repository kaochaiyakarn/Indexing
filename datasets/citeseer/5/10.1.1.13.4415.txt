ontology task world models martijn van van der veer anton eli ns vrije universiteit department computer science de boelelaan hv amsterdam holland martijn cs vu nl 
different task modeling methods exist 
discuss ingredients common task models task modeling relates design user interfaces proposed ontology task analysis 
show task analysis tool ontology 
belief task models ontology describes relevant concepts relationships independently graphical representations 
ontology helps understand different task modeling methods operationalized tools 
keywords 
groupware task analysis gta task models task analysis ontologies user interface design uid cscw 
generally accepted task analysis may substantially contribute design usable products focuses user 
task analysis investigates users characteristics task world part 
information recorded task model captures relevant aspects users task world 
resulting model help designers process designing new product 
relevant design process determined factors analyst wants record task modeling method 
modeling method certain defined concepts relationships record information users task world 
concepts tasks roles come field psychology clearly defined relationships concepts usually roughly sketched leading confusion performing actual task analysis 
specific task models differ things common task decomposition task flow 
task modeling methods graphical representations show information model 
belief task models ontology describes relevant concepts relationships independently graphical representations 
ontology defined view world describes nature relations 
case task world users described 
order useful task analysis ontology rich accommodate extraction information needed generate commonly visual representations task trees flow diagrams 
different graphical representations show certain aspects ontology depending purpose view 
explore common ingredients task models introduce ontology concepts relationships explicit 
ontology result attempt clarify concepts relationships conceptual framework groupware task analysis gta 
provide example tool ontology 
believe ontology improve results task analysis firstly model secondly helps structure activity task analysis tools ontology 
ingredients task models task models usually filled ingredients related way 
ingredients common ideas stabilized instance developments cscw systems agent technology modeling group processes important clear done 
section discuss common ingredients task decomposition task decomposition common ingredient task models 
results classical task tree usually enhanced constructors indicate time relationships tasks 
probably oldest ingredient strong psychological basis humans think structured way activities captured task decomposition 
tasks goals 
common definition task activity performed reach certain goal 
practice relationship tasks goals clear 
methods presume mapping tasks goals instance task knowledge structure tks contains goal substructure called task substructure methods 
models gta de description mad allow goal reached ways 
models goal task specific state reached successful execution task 
complex task trees real life situations tasks near leaves tree usually connected individual goals tasks represented high level nodes closely tied organizational goals 
analyzing tasks individual apparent analyzing tasks organizational level 
modeling complex situations organization great relevance important aware difference individual organizational goals ways related 
task flow specification common feature task models task flow indicates order tasks executed 
forms flow models distinguished workflow representations time axis task trees enhanced classic constructors give kind time structure mixing time task decomposition 
call friend call friend see movie see movie seq see movie see movie take metro take metro walk walk call call friend go go buy ticket buy ticket enter cinema enter cinema buy ticket buy ticket take metro take metro walk walk fig 

going cinema enter enter cinema theoretically equally powerful express kind task flow 
second type flow model suffers fact usually constructors needed extra tasks need added 
example representations 
task flow representation time axis 
second task decomposition constructors represents task flow representation 
constructors scope subtasks second representation needs extra task go may desired 
paterno concurtasktrees types tasks called tasks 
important point representations specified task flow basically visual representation allow specification task structure desired 
representations useful need underlying model allows 
object modeling object modeling addition task analysis comes close data structure modeling final design implementation 
purpose say objects physically task world mentally user mind 
object may directly included new design case models automated user interface ui generation usually strong link objects ui widgets buttons menus 
question remains object modeling task models 
extensive data modeling appear directly help improving usability product 
depends heavily purpose task model models basis automatic ui generation different requirements models evaluation 
example gta structure objects tasks recorded 
models concurtasktrees tks include actions performed object 
information passing 
important purpose task changes task reason existence 
change mean sort change including adding information changing unknown known 
task analysis methods concurtasktrees describe task input task output objects 
output task input task passing information 
way describe changes specify initial final states terms object attribute values 
way information passing indirectly achieved changes object attributes 
fundamental difference list input output objects generated task attributes 
possible changes explicitly recorded mental processes involved human decision 
models object actions changes usually defined actions task states 
recording concept characteristics common part task analysis models recording relevant characteristic attributes concepts 
mentioned attributes tasks preand post conditions state changes duration specifically recorded different depending level detail purpose model 
standard concept recording guidelines iso standard suggest recorded tasks actors parts task world 
task world modeling task world modeling investigating users world act 
past methods focused modeling user users tasks 
current applications group aspects important 
major software supplier develops products multi user distributed environments 
classic task modeling methods lack power deal situations modeling static part task world identifying roles 
neglects parts organization dynamic aspects task world 
people organizations 
modeling task world means modeling people part modeling structure part organizational structure 
may add perspective see model official organizational structure task analysis structure tasks done relevant officially done 
specifying roles organization actors characteristics gives relevant information design 
roles need attributed actors 
tks role defined responsible performing tasks encompasses example movie responsible starting movie 
real organizations task responsibilities frequently need handled flexibly resulting responsibilities shifted delegation mandate 
actor playing role may perform task responsible movie bar push button start movie 
roles actors 
classic task analysis literature ethnography concepts actors roles commonly referred regarding tasks task world 
terms intuitively appealing cause confusion need named task analysis 
role defined tasks role responsible 
responsible starting stopping movie projector setting op movie projector 
mayhew defines actor class humans consider particular person actor 
usually need consider particular person provide name actor chris pat interested describing relevant characteristics actor 
confusion arises actor named sensible name role name 
instance actor role intuitively called role name 
usually better name actors arbitrarily people having role simply record characteristics language typing skill computer experience knows word important part characteristics relationships roles 
cases matter performed task useful specify task performed role particular actor 
computer system actor task automated movie projector 
therefor gta concept actor renamed agent avoid confusion 
events 
designing useful know factors influence actor performing task impact 
events model dynamic aspects task world things happen task world actor direct control film breaks cinema power failure 
may need explicitly incorporate event new design cases incorporation important 
example may prove useful model reaction event film breaking 
task modeling user interface design looking aspects task models questions remain unanswered 
distinguishes ui task models task models multi agent models field artificial intelligence 
importantly exactly task model include order improve usability systems task world 
look question precisely 
markopoulos take formal approach task models system design 
argue designer task model unclear helps designing 
task model needs formalized order conform task world useful ui generation system 
general ui task models able represent psychological social environmental situational aspects actors tasks 
hierarchical structures task decompositions object structures give hint system structure aspects user characteristics timing properties relationship design obvious 
task analysis literature shows task model designed certain purpose 
example task models validate 
models meant informal validating tools 
validate designers know task world designing 
methods hta category 
methods result quite informal models strong direct relationship design 
generate user interfaces 
models humanoid adept designed automatically generate prototype user interface 
generation possible need precise really produce human readable specifications 
surprisingly focussed specifying user interface behavior detail formal previous category 
aid design 
advanced task model validating tool design aid 
methods gta tks goms give designer handles design 
extensive task modeling gives concrete information objects structures reflected design 
modeling roles agents give information need user identification adaptability user interface users 
methods formal methods hta formal ui generation methods adept 
principle task model specifying user interactions system 
notations user action notation etag allow user actions specified detail 
needed mechanism link task analysis model user interaction model 
way structure task flow interaction model constructed task model 
prerequisite formalized task model 
missing link user interface design 
task models informal hard connect interaction models 
relatively new approach called model interface design seen attempt connect task models interface models fluent way 
approach design process consists refining models represent different aspect design 
formal definition language model relates models 
currently task models approaches basic limits power approach 
sections ontology may fill gap user interface design gives formal definition concepts relationships describe task world 
ontology far discussed common ingredients task models ways task models design user interfaces 
propose ontology incorporates mentioned ingredients certain extent 
ontology gta serve comparing models tks mad 
called ontology describes logical relationships concepts informally done various task analysis models currently 
ontology imply graphical representation defined concepts relationships therefor extra abstraction 
concepts attributes concepts defined conceptual framework gta task models exception event concept 
section define concepts section define relationships detail 
object 
object refers physical non physical entity 
non physical entity ranging messages passwords addresses gestures stories 
objects attributes consisting attribute name value pairs 
done object specified actions instance move change turn furthermore objects may type hierarchy contained objects example form may contain address field cinema contain bar 
objects typically tasks influence task execution sequence cause events occur 
agent 
agent entity considered active 
usually agents humans groups humans software components may considered agents 
agents specific individuals chris indicate classes individuals certain characteristics 
attributes agent include skills attitude miscellaneous 
agents perform tasks play certain roles task world 
role 
role meaningful collection tasks performed agents 
role meaningful clear goal distinguishes groups agents 
role consequently responsible tasks encompasses 
roles hierarchically composed assigned agent certain way 
role obtained assignment delegation mandate situational context 
task 
task activity performed agents reach certain goal 
task typically changes task world requires period time complete 
complex tasks decomposed smaller subtasks 
tasks executed certain order completion task trigger execution tasks 
task started event occurred task world 
important task concept distinction unit tasks basic tasks ideally unit task executed performing basic tasks 
relationship unit task basic task interesting indicate problems agent may reaching goals 
unit task defined card moran newell simplest task user really wants perform 
basic task task system provides single function 
usually basic tasks decomposed user actions system operations 
user action action done human users meaningful context basic task key press 
system operation action done system typical task serves goal user 
type attribute captures task type unit basic composite consisting unit basic composite tasks 
case basic task user actions system operations attributes valid 
tasks started completion tasks events 
successful execution task number start conditions fulfilled 
condition specifies task reached completion 
changes task world taken place task described difference initial final state 
event 
event change state task world point time 
change may reflect changes attribute values internal concepts object task agent role reflect changes external concepts weather electricity supply 
events influence task execution sequence triggering tasks 
model specify event created 
relationships concepts defined previous section related specific ways 
section sketch relationships 
relationship order predicate definition explained 
shows concepts relationships diagram 
uses 
relationship specifies object executing task 
specifies done object 
typically changes state object 
triggers 
relationship basis specifying task flow 
specifies task triggered started event task type trigger 
task part choice 
possible triggers specifying parallel executed tasks indicating linear succession tasks 
triggers relationship similar triggers workflow representations allow specifying concurrency various ways 
explain relationship generate visual representation flow diagram 
plays 
agent play roles 
relationship indicates role obtained 
currently parameter want look closely role relationship may undergo changes subsequent versions ontology 
performed 
relationship specifies task performed agent 
mean agent responsible task depends role way obtained 
relevant specify agent performs task role specified performing entity 
subtask 
relationship describes task decomposition 

relationship brings roles hierarchical structure 
relationship states role includes roles including responsibility task encompass role 
role task responsibilities added role 
example role bar worker may popcorn maker bar cashier daytime 
responsible 
relationship specifies task role responsible 
continuing example bar worker role responsible tasks popcorn maker bar cashier daytime 

relationship indicates object agent role 
agents rights regarding objects existential nature indicate ownership indicate daily handling objects 
relationships model form minimal set relationships exist 
model relationships interest 
consider instance relationship involved role indicates roles event name string description string name string attribute name value action name triggers object uses task name string goal string start condition string condition string initial state string final state string duration integer frequency string type enum user actions string system operations string contains responsible performed subtask triggers fig 

concepts relations role name string goal string plays agent name string skills string attitude string miscellaneous string involved task 
relationship defined roles agents involved task involved roles subtasks 
involved role relationship part ontology defined relationships ontology 
section show relationships practice 
performed supporting task analysis done task analysis knows models easy task 
biggest problem applying technique communicating results client members design team 
results task analysis communicated value design process rapidly diminishes 
section addresses issue task analysis supported 
formal models tools ontology described previous section formal leaves task details darkness 
task modeling methods quite formal models 
experience design situations education industry shows formal methods improve communication members design team client 
designers easily pages formal methods easily 
think task analysis tools models appropriate supporting communication hiding complexities models hiding parts models designers need know 
task analysis add value design process tools tailored designer 
usually design team consists designers different disciplines backgrounds varying psychology computer science anthropology art 
specific needs requires certain views task model 
instance members may want just quick overview task structures may need details task execution conditions 
multiple representations need consistent 
consistency guaranteed representations model 
ontology meets requirement abstracting visual representations focussing underlying relationships concepts allowing multiple visual representations 
graphical representations ontology currently developing task analysis tool uses ontology basis task analysis prolog representation ontology relational database visual representations simple templates lists trees flow models generated 
possible view generated html document serves hypertext documentation task model viewed edited 
views allow designers inspect task model allow modification creation new instances tasks automatically show views 
shows basic structure tool 
part research investigate visual representations useful designers different disciplines 
example new visual representation latest information gta tools www cs vu nl martijn gta index html kind fish eye view see part information instance certain task 
shifting fish eye related object shows information related object 
distinguishing underlying ontology graphical representations views changed added having completely revise underlying data ontology 
goal find views useful provide environment views available members design team 
generating visual representations tool uses ontology directly generate visual representations 
consider task tree 
editing viewing task tree program code takes care user interaction handling 
need tree datastructure created querying prolog engine 
algorithm looks ask database subtasks prolog tree view tree view add siblings flow view flow view task model database fig 

basic tool structure call sibling procedure recursively builds tree datastructure tree drawing routines 
similar way views generated ontology 
consider task flow representations 
task flow representation expressed triggering relationships follows fish eye view template html doc html doc task flow viewer generate visual representations asking specified triggering relationships 
algorithm looks ask database tasks triggered prolog add nodes add edges call node edge starting note extra task go automatically detected case task tree constructors move tasks level trigger type tasks triggers exist level 
templates similar techniques complemented fig 

screenshot views straightforward querying attributes 
relationships ontology uses derived relationships involved role mentioned earlier 
operationalizing ontology shows views generated ontology 
user tool need completely aware underlying ontology 
user just useful aid task analysis 
ontology structuring principle tool user implicitly offered structured approach task analysis 
operationalized ontology tool contains extra attribute media object concept 
allows designers attaches kind media movies audio files images concept 
way results ethnographic studies immediately available design team 
covered 
ingredients common task models including task decomposition task flow task world modeling 

task modeling relates design user interfaces 

proposed new ontology task analysis allowing multiple visual representations generated data 

task analysis tool showing ontology support design user interfaces 
believe task models clear underlying ontology captures relevant aspects task world allows multiple visual representations generated 
hope facilitate process task models aid design user interfaces 
wish melissa steve guest enthusiastic help invaluable suggestions 

ergonomic requirements office 
part iso dis 
card moran newell psychology human computer interaction 
hillsdale nj erlbaum 
johnson johnson task knowledge structures psychological basis integration system design 
acta psychologica pp 
johnson wilson markopoulos adept advanced design environment prototyping task models 
proceedings interchi demonstration addison wesley april 

johnson johnson waddington task related knowledge structures analysis modelling application 
people computers iv proceedings th british computer society hci group 
ainsworth guide task analysis 
taylor francis 
mayhew principles guidelines software user interface design 
isbn prentice hall ptr new jersey 

markopoulos formal model extant task knowledge representation 
ed interdisciplinary workshop cognitive modelling user interface development vienna december 

paterno mancini concurtasktrees diagrammatic notation specifying task models 
proceedings interact july 
method task description mad 
display units elsevier amsterdam 
hierarchical planning method task analysis example office task analysis 
behaviour information technology 
szekely luo neches interface builders model interface tools 
proceedings interchi april pp 

tauber etag extended task action grammar language description user task language 
diaper gilmore cockton shackel proceedings interact amsterdam elsevier 
van der veer gta groupware task analysis modeling complexity 
acta psychologica pp 
acta 
van der veer mariani teaching design complex interactive systems 
learning interacting teaching design interactive systems austria may 
van der veer van modeling complex processes gta 
sixth european conference cognitive science approaches process control pp 
rome italy september 
rex hartson hix uan user oriented representation direct manipulation interface designs 
acm transactions information systems vol july pp 

