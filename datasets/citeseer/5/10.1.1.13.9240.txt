type safe linking modular assembly language linking low level task usually vaguely specified language definitions 
security web brows extensible systems depends crucially set checks performed link time 
building simple elegant ideas cardelli module constructs high level languages formal model typed object set inference rules sufficient guarantee type safety preserved linking process 
cardelli link calculus built top simply typed lambda calculus object files typed assembly language may model impor tant low level implementation issues 
furthermore cardelli provide support types higher order type constructors features critical building ex systems modern programming languages ml 
linking separately compiled program units impor tant task typically omitted language defini tions 
large part omission due low level ar chitecture compiler dependencies outside realm language design 
extensible sys tems ly bsp nec koz hcc built strong safety guarantees language definitions provide 
systems linking loading fundamental part operation critical precisely define consistency checks linker static dynamic perform 
example java extensible web browsers netscape navigator microsoft internet explorer rely static type systems link checks enforce wide class important safety properties 
extensions applets written high level language java material supported part afosr arpa radc 
opinions findings expressed publication authors reflect views agencies 
permission digital hard copies part classroom ue pro copies arc distributed commercial advantage topics bear notice ull citation page 
copy 
tn republish 
post servers redistribute lists requires prior specific permission fee 
popl san antonio texas usa copyright acm neal glew greg morrisett department computer science cornell university compiled untrusted compiler target language java virtual machine bytecode 
integrity browser depend type soundness java type soundness properties jvm 
jvm supports dynamic linking loading applets critical component jvm definition description formed compilation units link compatibility 
unfortunately component vaguely specified source security holes mf sar 
cardelli proposed calculus compilation units simply typed lambda calculus set rules determining link compatibility car 
cardelli specified high level abstractions modules interfaces provided set inference rules de program fragments compiled certain typing assumptions met set consistency require ments necessary ensure resulting program formed go wrong evalu ated 
previous typed assembly lan guage tal mwcg suitable compiling high level core languages natural extend ideas cardelli give detailed treat ment type safe linking 
cardelli calcu lus elegant formulation high level issues involved linking abstracts im portant low level details binding alpha variance labels omits certain critical features notably support cyclic inter object file user defined type ab dynamic linking 
goal build cardelli provide suitable treat ment issues 
particular extend core tal language typed object files formalise concepts linking link compatibility 
goals design model important properties conventional object files linkers unix id win link provide module structure supports separate type checking object files separate compilation high level language features types signatures structures functors sml 
design typed object files borrows heavily previous modules high level languages relatively important innovations 
believe virtue demonstrates programming language community identified critical issues module language allows concentrate issues specific object files 
implemented resulting design part going language security project 
imple mentation provides set tools defining type checking variant ia intel object files interfaces 
tools compiler maps variant type safe code type safe object files available www cs cornell 
edu home walker tal html 
proceed follows section ab conventional untyped object files linkers unix id discuss issues link ity simplified setting 
section briefly review type system tal introduce simple module lan guage spirit cardelli provides sup port separate compilation separate type checking stronger notion link compatibility 
extend section support types style clu modula higher order type constructors style objective caml translucent types style harper lillibridge hl leroy ler 
resulting lan guage mtal pronounced metal sufficiently expressive may compile ml style modules including functors target language 
section discuss ex tending model include dynamic linking dynamic loading 
untyped object files linkers model typical untyped object files process linking 
untyped assembly language shows simple operational model untyped assembly language 
model execution step re duction relation program states 
model state assembly language program consists com ponents heap representing memory register file instruction sequence representing program counter 
heap finite mapping labels symbolic addresses heap values types heap values code sequences code instruction sequence tuples vi 
wn wi small values integers labels 
instructions include typical risc add rs special instruction malloc 
instruction allocates heap new tuple entries places new label small values word sized objects machine objects fit register 
consider regis ters small values simplify syntax operands register file finite map registers small val ues 
reduction relation simulates execution instruction add rl rl initial program state includes register file maps value program counter points instruction sequence instruction tended add contents register placing proper account need distinguish word values may stored heap register values may operands include registers 
resulting value ri 
reduction relation takes program state heap updated register file maps rl value updated program counter points instruction sequence executed 
object files abstractly object file consists components 
heap 
import set set labels defined heap object file possibly referenced terms heap 

export set subset labels defined heap 
description object files generic heaps map labels terms language order provide specific examples untyped assembly language previous section 
denote object file give formedness conditions inference rule fl denotes set free labels occurring term dam dam dom fl dam ut set labels defined heap export set said local labels scope la object file 
standard convention fixed scope identifiers consider object files equiva lent systematic renaming alpha conversion local labels 
justification implicit alpha conversion real object files represent local labels relative offsets base address object file 
base address adjusted linking loading process place object files different address ranges local labels implicitly adjusted fashion similar jin indices 
contrast exported labels alpha vary linker may resolve cross object files 
linking untyped object files linking process object files combining heaps import sets export sets suitable fashion produce new object file 
input object files formed output may notion link compatibility 
definition link compatibility formed ob ject files zl el hz link compatible written iff exported labels disjoint 
small values 
heap values code vi 
instructions add rd malloc jmp halt 
heaps lh hl register files rl rn hun instruction sequences ln program states conditions rh rd malloc 


dam code object files link compatible may link produce new object file follows ez zz ha dom hi dom zr hi zi link hz ii el hi hz el ez condition dom hi dom tech side condition applying link rule alpha variants object files chosen local labels disjoint 
follows definitions link resulting object file formed 
static executables final operation linker performs produce executable 
executable just closed heap paired entry label defined heap denoted 
executable formed rule dam dom fl dam executable formed object file distinguished la bel export set may produce formed exe import set object file empty ee sh load run executable operating system cre ates new process heap initial memory image 
untyped assembly language jumps entry label passing parameters ignoring parameters executable mapped initial program state heap exe empty register file single instruction se quence jumps code bound entry label executable executable zc jmp goal formalise typed object files com development section cardelli high level typed linking ideas car 
step goal section defines simple typed object file calculus section extend full cal adding higher order type abstraction 
module calculus independent core calculus tal mwcg concreteness 
sections briefly review tal bene fits type safety build notion typed object files top tal 
tal tal essentially typed version assembly language section 
types include integers tuples code types 
tal includes typing instructions operational effect type checking easier see mwcg details 
allocation instruction malloc ri 
includes types entries tuple allocated 
assigns tuple type 
unix system parameters command line arguments environment 
gui systems win parameters gui handles application main window environment 
os indicate possibly slots 
storing slot give type 
indicates definitely initialised slot 
slot may loaded definitely initialised 
register file type rr ri 
states ti contains value type typecheck individual instructions assign type instruction sequences 
general tal code sequences form code ar 
ol lt code polymorphic type variables 
cxn typed instruction sequence instruction expects registers register file type 
label mapped code sequence assigned type crr 

code monomorphic abbreviate coder abbreviate label type simply increment function written tal code rl int ra rl int add rl rl jmp ra call caller place integer rl return label ra return label accept integer rl 
label assigned type rl int ra rl int tal assigns heaps heap typings finite maps labels types ei rr 

judgement asserts heap typing free labels typed tal heaps unordered maps heap value may refer label directly indirectly 
tal type checker uses final heap type checking heap done harper system mutable har 
note allows circular extends cardelli considered dag heaps general graphs 
type safety main motivation static typing property typed program performs illegal operation 
consider set formed mutually link compatible object files label complete pro gram 
desire link operation type preserving resulting object file formed 
similarly desire formation creation initial program state type preserving initial program state result ing execution linked object file formed 
tal type safety means execution starting formed initial state perform illegal oper ation 
define typed linking program formation formation initial state type preserving type safe 
extensible system writer may desire 
example extension checked fixed import interface type system guarantees extension access labels mentioned interface 
extensible system fact ensure security monitor interposed tween extension underlying system cir 
overview necessary guarantees security properties extensible systems scope leroy lr provide dis issues 
fact tal export fact rl int ra rl int fact code rl int ra rl int 
mov rl mov rl loop loop jc int int ra rl int 
bz ra mu rl rl sub jmp loop import fact int ra rl int export main rl int main code rl int 
mov ra jmp fact code rl int halt int modular factorial example object files interfaces object files extend untyped object files types 
object file triple qe tal heap import interface qe export interface 
interface heap typing 

shows example pro gram consisting object files fact 
tal main 
tal 
intention integer passed register rl entry label main 
main object file calls object file fact label computes returns fac argument 
main object file halts 
register rl 
keywords import export show import export interfaces respectively 
addition checks untyped object files formedness condition object files re quires type checking iu pai qa dom qi fl dom heap actual type checked con text qa may refer imported labels self 
heap define labels different im ports disjoint domains 
heap provide exported labels types specified typed object file checked isolation 
contains type information labels object files contain term level information labels 
put way separate type checking property supports separate com fashion source level module type checked source level interfaces modules compiled typed object qa pe means formally 
dom qe 

note subtype setting extended dom qa 
file needing implementations mod ules 
linking crucial typed link compatibility interface compatibility ql 
particular interfaces mention label give compatible types dom dom qg cl fij interface compatibility link compatibility easily de fined rl qe qi el dom qe fl dom qe object files compatible imports exports exports disjoint 
link opera tion defined way untyped link operation uses typed object files typed judgements 
link 
theorem stronger untyped case asserts type errors introduced linking operation 
separate link checking property 
link compatibility defined entirely terms imported exported interfaces modules indepen dent modules heaps 
type safe linker load object file type check separately perform linking doing checks involve interface formation code need 
programs execution program closed tal heap label 
heap formed label appropriate type 
type entry convention gives entry label 
factorial example intended entry convention 
rl int 
entry convention important low level detail programs get executed formally specify type 
check object file complete qe complete qe programmers language designers want rea son collection object files forms complete program 
want set checks en sure object files linked result complete program judgement 
formally object file imports contained exports object files entry label exported object files type 
checks judgement prove correctness theorem appendix compatible types equal types 
subtype setting weakened 
export export export type file val open rl string ra rl file val rl file ra rl string file access rights plus handle access rights bit read bit write 
int int open code rl string ra rl file 
call open rl putting result preserving ra 
determine access rights store preserving ra 
malloc rl int int st rl st rl coerce rl int int file coerce rl jmp ode rl file ra string 
coerce rl file int int coerce unroll check read allowed id rl bz error read allowed place handle rl id rl call read line rl putting result rl preserving re ra jmp ra 
client import type file file client coerce file int int vice versa 
file example production executable process exe cution untyped calculus 
consistency checks sound formation executable implies executable formed formation initial state implies initial state formed 
tal program state formedness reduction described detail mwcg 
mtal typed low level calculus formalised tion link compatibility 
extends cardelli making important low level concerns explicit closely models tasks real linkers 
address shortcomings cardelli calculus 
progressively add constructs fol lowing sections obtain full calculus mtal 
com plete description mtal including syntax static semantics appears appendix forms basis implementation 
types provides type safety guarantees provide type abstraction guarantees consider security monitor file access exports operation open takes string returns file handle 
suppose file handle pairs extension access rights op erating system file handle represented integer 
system type abstraction implementation expose representation file handle giving open type string int int 
clients see type type string file ignore tion integer operations directly modify access rights 
high level module designs address issue add mtal ability declare types interfaces types labels 
mtal interface int pair 
consisting type part value part type part called type heap kinding finite map type labels kinds object files triple th vh inte consisting import export interface heaps types values 
type heaps finite mappings labels types 
program states extended include type heap 
file example shown 
exports type file types values exports 
concrete type file pair example sketches relevant details implementation operations 
definitions typed object files link compatibility link ing executable formation execution similar sections repeated mtal mention just highlights 
just value heaps contain cyclic allow cyclic type heap introducing possibility recursive types 
standard type theory type heap th type label 
isomorphic th 
ways reflect isomorphism type system 
way implicitly treats th equal types 
decision procedure type equality considerably complex 
choose second way introduce explicit roll unroll operations witness th 
roll coerces object concrete type type unroll opposite 
value heap object file checked type heap 

type heap defines object file implementing definition type heap 
client type import import inter face disjoint type heap contain definition roll unroll ap plied client code 
client create directly manipulate members really 
consequently roll unroll operations mediate recursive types provide explicit coercions types 
respect treatment label types similar generative datatypes sml 
sml type labels global scope 
simplifies link consistency provides means split mutually technically tal existential polymorphic types implement type abstractions 
local scope quantifiers cumbersome practice 
kind kind types 
kinds included anticipation developments 
recursive type definitions compilation units mixins ds ff 
price paid pro compilers ensure compilation units linked define type label 
implementation includes extensions omitted mtal 
implementation interfaces type label may declared definition bound 
definition type label translucent type harper lillibridge hl leroy ler 
definition included type heap object file type checking object file value heap 
bound type label partially type 
typing rules allow bounded type label unrolled bound allow roll operation type label 
approach standard type theory singleton kinds power kinds car car respectively 
sup port globally scoped type labels setting greatly sim need internal external names types harper lillibridge 
price paid programmers compilers manage flat name space 
summary mtal chooses treat type labels globally scoped identifiers 
simplifies treatment separately compiled recursive types generative types translucent types price flat name space 
traditional linkers provide flat name space value labels felt symmetry type level simplification language features justified cost 
promising approach alleviate software engineering problems flat name space provide means restrict scope type value label linking process just restriction operator pi calculus limits scope channel 
oper restriction operator implemented tool systematically turned global labels local labels explicit alpha conversion 
type constructors modular programming requires just ab types 
example large class container abstractions types parameterised types objects contain 
instance stack datatype exports type constructor argument type elements placed stack 
han dle constructors mtal types extended type constructor language kinds extended include functions products resulting tiered system similar gir 
shows stack abstraction look mtal interface 
declares type construc tor stack takes element type returns type stacks 
operations polymorphic element type cy stack arguments re sults type stack cr application stack type constructor ly 
implementation interface give concrete type stack example stack stack deal higher order recursive type roll robert harper personal communication july interface type stack val stack cu ra rl stack val stack isempty cr rl stack cr ra rl bool val stack push rl stack ra rl stack val stack pop rl stack ra rl stack cr val stack top cr rl stack cr ra rl unroll coercions able operate type ap plication type projection 
details appendix note essentially embedded calculus phase splitting sha compile functor systems mtal 
dynamic linking modern operating systems languages provide dynamic linking dynamic loading 
dynamic linking allows linker produce executables contain labels resolved time operating system loads executable process address space 
executable contains set names dynamically linked libraries name set labels imports library 
executable loaded operating system searches appropriate libraries links executable form initial process image 
model dynamically linked executables represented normal object files 
difference dynamic static linking model final steps linking formation real executable delayed load time 
dynamic loading involves linking object files libraries process image execution 
program contain labels dynamically loaded ob ject files 
ensure loads appropriate ob ject file 
delay loading right refer ences need load object file 
dynamic loading possibility unloading removing linked object file process image execution making object file unusable 
believe model extend incorporate dynamic loading 
fact course sketched possible extensions resulting dif ferent choices resolving specific issues 
contrast previous development extensions right model 
particular dynamic loading introduces new failure modes interface choices 
example responsibility ex explicitly load definitions labels may dereferenced 
failure isolated points dynamic loading explicitly occurs 
alternatively java support implicit loading undefined label 
failure model potentially occur label dereference 
important technical issue dynamic loading extend evaluation relation support ex ecution program states unresolved labels 
type kind information labels maintained stack example run time order ensure consistency dynamic loading performed 
begs question exactly type interface information retained program control operating system con trol 
presence information enables pos particularly introspection reflection ability program query labels defined types 
related implementation closely related cardelli car builds type theory high level modules including leroy ler harper lillibridge hl 
re flatt felleisen proposed new advanced module system ff 
system includes class notion modules called units 
units import ex port named types values 
named types values unit connected named types values units 
units abstracted linking class primitive 
mtal similar describes operating systems provide low level flatt felleisen concentrate source level module systems 
dean investigated dynamic linking loading java focuses class loader operation interacts static typing dea 
description interaction describe actual linking link compatibility 
related security extensible sys tems 
formalise checks necessary linking address orthogonal security concerns deter mining interfaces principals may link au principals 
systems spin project addressed concerns ideas combined mtal implemented ideas compiler part language called talx 
talx instruction set ia intel architec ture scales ideas tal handle real languages uses ideas mtal module language 
tal tuples code talx includes sums ar rays recursive types exceptions types cent types subtyping bounded type labels 
type checker talx object files link compatibility program completeness checker front ends toy languages meant demonstrate viability talx target language 
working front cra variant ml higher order modules full polymorphism subtyping features 
presents mtal calculus formalises low level notion linking similar linker tools mod ern operating systems 
mtal extends earlier cardelli car providing better explanation handling cyclic dependencies modules supporting type constructors compilation phase functor systems mod eling dynamic linking loading 
mtal unifies previous typed assembly languages mwcg mwcg previous type theory mod ules ler hl ff 
account straightforward combination pre vious cardelli typed assembly languages 
contribution complete account type safe linking realistic low level language 
bsp car car car de de dea ds ff gir ll gir brian bershad fan savage pardyak emin sirer marc fiuczynski david becker craig chambers susan eggers 
extensibility safety performance spin operating system 
fif acm symposium operating systems princi ples pages copper mountain december 
luca cardelli 
structural subtyping notion power type 
fifteenth acm sigplan sigact symposium principles languages pages san diego ca usa january 
luca cardelli 
typeful programming 
formal de scription programming concepts 
springer verlag 
luca cardelli 
program fragments linking ion 
fourth acm sigplan sigact symposium principles programming languages pages paris france january 
karl crary 
type theoretic methodology practical programming languages 
phd thesis department computer science cornell university upson hall ithaca ny usa august 
sophia drossopoulou susan eisenbach 
java type system sound 
theory practice object systems 
appear available wx dse doc ic ac uk projects slurp 
sophia drossopoulou susan eisenbach 
operational semantics proof type soundness java 
springer verlag 
appear available dse doc ic ac uk projects slurp 
drew dean 
security static typing dynamic linking 
fourth acm conference computer communications security pages zurich switzerland april 
dominic duggan 
parameter ized modules recursive modules mixin modules 
acm sigplan workshop ml pages ma usa september 
matthew flatt matthias fell en 
units cool mod ules hot languages 
acm sigplan confer ence programming language design implemen tation montreal canada june 
appear 
jean yves girard 
une extension de de analyse son application de coupures dans analyse la theorie des types 
fenstad editor proceedings second scan logic symposium pages 
north holland publishing 
jean yves girard 
fonctionelle clim des coupures de sup 
phd thesis universit paris vii 
har hcc hl lr ly mf mwcg nec sar sha robert harper 
simplified account polymorphic ref erences 
information processing letters 
chris chi chao chang grzegorz ski hu thorsten van eicken 
implementing multiple protection domains java 
annual technical conference new orleans la usa june 
robert harper mark lillibridge 
type theoretic approach higher order modules sharing 
acm sigplan sigact principles programming languages pages portland oregon usa january 
robert harper eugenio moggi john mitchell 
higher order modules phase distinction 
seventeenth acm sigplan sigact symposium principles programming languages pages january 
dexter kozen 
efficient code certification 
technical report department computer science cor university upson hall ithaca ny usa january 
xavier leroy 
manifest types modules sepa rate compilation 
acm sigplan sigact principles programming languages pages portland oregon usa jan 
xavier leroy 
security properties typed applets 
fifth acm sigplan sigact symposium principles programming languages pages san california usa january 
tim lindholm frank yellin 
java virtual ma chine speci cation 
addison wesley 
greg morris karl crary neal glew david walker 
stack typed assembly language 
shop types compilation pages kyoto japan march 
gary mcgraw edward felten 
java security hos tile applets holes 
john wiley sons new york usa 
robert milner 
polyadic rr calculus tutorial 
technical report ecs edinburgh univer sity 
reprinted logic algebra specifi cation brauer brauer schwichtenberg eds springer verlag 
greg morris david walker karl crary neal glew 
system typed assembly language ex tended version 
technical report tr depart ment computer science cornell university son hall ithaca ny usa november 
greg morrisett david walker karl crary neal glew 
system typed assembly language 
fifth acm sigplan sigact symposium principles programming languages pages san diego california usa january 
george necula 
proof carrying code 
fourth acm sigplan sigact symposium principles programming pages paris france 
vijay saraswat 
java type safe 
url research att com vj bug html august 
emin marc fiuczynski brian bershad 
safe dynamic linking extensible operating system 
workshop compiler support system software february 
zhong shao 
typed cross module compilation 
third acm sigplan international conference func tional programming pages baltimore md usa september 
robert wahbe steven lucco thomas anderson susan graham 
efficient software fault isolation 
fourteenth acm symposium operating systems principles pages asheville december 
mtal kinds type constructors constructor heap types value heap types type variable contexts register file types registers heap values word values constructor heaps value heaps register files instruction sequences interfaces object files executables program states int appendix gives full technical description cal mtal statements important theorems 
calculus fairly independent core language assembly language level 
presentation style follows closely previous tal papers mwcg 
syntax mtal appears 
core lan guage constructs fit ellipses cy xa binds type constructor heap typings value heap typings register file typings type constructor heaps value heaps register files considered unordered fi nite maps 
notation dam domain fi nite mapping constructs equivalent alpha conversion reordering unordered maps 
capture avoiding substitution denoted 
judgements static semantics summarised typing rules appear 
rules type constructor kinding standard rule type labels jj ic rules type constructor equality usual reflex ive transitive congruence rules rules core calculus 
rules heap values word values roll unroll instructions core cal 
rules judgements type constructor value heap typings similar similar record types 
heap typing formed la defined disjoint kinds types formed 
heap typings equal define set labels map label equal kinds types 
heap typing heap subtype heap typing defines labels common labels mapped equal kinds types extra labels mapped formed kinds types 
heap typings disjoint define disjoint sets labels 
heap 
nn xo cl cl 
cn 
nn el cl 
cn kl kn 
rn cn rl 
unroll 
cl cn tl hl hn vh ch vh syntax mtal typings compatible formed labels common mapped equal kinds types 
interface formedness equality disjoint ness compatibility defined pairwise terms judgements type constructor heap value heap typings 
rules roll unroll standard ones terms type labels recursive types 
rules type constructor heaps value heaps register files similar rule records 
labels distinct type maps labels types correspond items 
interesting typing rules object files executables executable program states state 
object file formed ac tual interface heaps disjoint import interface export interface 
heaps types matching actual interface checked context includes imports 
value heap checked context includes type constructor heap defines types object file implements 
rules executables program states similar 
require interface describes heaps time imports 
case executables entry label satisfy entry convention 
case program states register file type instruction sequence formed 
linking execution judgements 
linking execution operations specified type directed translations include conditions specify linking operation valid 
mapping entries labels set removed denotes dom mrr ml denotes ml mll denotes ml 
operation linking object files link rf 
linking governed link ity 
object files link compatible import judgement meaning judgement meaning type constructor kinding ch ql heap value typing ip abf valid register file type ch wval word value typing cl ic type constructor equality ch valid instruction sequence cp equal register file types ai ch ip type constructor heap typing valid type constructor heap type value heap typing type constructor heap subtyping ch wr register file typing disjoint type constr 
heap typings valid object file compatible type constr 
heap typings executable valid executable 
valid value heap typing state valid program state equal value heap typings intr el link compatible value heap subtyping inti inte import export interfaces disjoint value heap typings link compatible object files ql compatible value heap typings link linking int valid interface complete program completeness intl equal interfaces ze executable formation intl int ep execution inti ints disjoint interfaces intl int compatible interfaces export interface pairs link compatible 
holds imports compatible im ports vice versa imports compatible exports disjoint 
actual rule linking looks daunting ward 
requires formed link compatible input object files 
output object file combines heaps exports input object files imports input object files imported export 
note side condition forces choice alpha variants source heaps disjoint domains 
corresponds linker relocating source object files 
linking object files results formed object file 
words op eration type correct theorem link 
second operation formation executable object file entry label operation requires object file entry label com plete object file import entry label exist object file exports type required entry convention formulation 
exe formation type correct theorem ijl 
executable 
operation execution executable 
type correct theorem state 
static semantics mtal judgements xl 
emin el 

hj 

distinct ii 
distinct em dam dom qt cp 
el cl 
el dl 
en dn vl di vn 
el dl 
en dn ipi ch ch pl vh ch pt executable state 
distinct er distinct 

ch 
ql cp dom qr dom 
ci ki xi 
cn el nl 
en kn ch 
hi ci ch hl 
cl 
ch wi ci wval cp ch hw tr cr 
rn cn 
distinct qa qe qa ch ai ch ch vh qa ch ql vh 
distinct tl distinct abn sl ch ch vh qe ch vh executable ch ch ch ch ch vh state static semantics mtal judgements heap typing interfaces object files link el htn ch vh ch vh chl hi ch vh ial chi vh kb ch hz chi htm link ch vh ch vh hz dom chi dom ch dom dom vh 
complete ch vh complete vi ch vh ip ch vh complete ch ej ch ch vh executable ch vh ch vh jmp mtal linking execution judgements 
