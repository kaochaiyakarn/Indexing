dynamic self checking techniques improved tamper resistance bill horne matheson casey robert tarjan star lab technologies henry dr santa clara ca lrm casey ret com 
describe software self checking mechanism designed improve tamper resistance large programs 
mechanism consists number testers redundantly test changes executable code running report modifications 
mechanism built compatible copy specific static watermarking tamper resistance techniques 
mechanism includes innovations stealthy robust 
situations desirable protect piece software malicious tampering gets distributed user community 
examples include time limited evaluation copies software password protected access unencrypted software certain kinds commerce systems software enforces rights access copyrighted content 
tamper resistance art science protecting software hardware unauthorized modification distribution misuse 
hard characterize measure effective protection appears require set tamper resistance techniques working confound adversary 
important technique self checking called self validation integrity checking program running checks verify modified 
distinguish static self checking program checks integrity start dynamic program repeatedly verifies integrity running 
self checking sufficient robustly protect software 
level protection tampering improved techniques thwart reverse engineering customization obfuscation techniques thwart debuggers emulators methods marking identifying code watermarking fingerprinting 
techniques reinforce making protection mechanism greater sum parts 
describe design implementation dynamic mechanism substantially raises level tamper resistance protection adversary static analysis tools knowledge algorithm details implementation 
threat model described detail section 
goal protect client side software running potentially hostile host 
section brief discussion related 
section address threat model design objectives create techniques oppose threats 
section presents overview self checking mechanism components 
section describes design performance placement testing mechanism 
section discusses design interconnection tested intervals code 
section concludes summary brief discussion directions improvements 
authors document primarily responsible design implementation self checking technology 
evolution important contributions came including ann cowan george jim horning greg humphreys mike mackay john umesh maheshwari susan owicki olin sibert oscar steele andrew wright lance 
related significant amount done problem executing untrusted code trusted host computer mwcg nec nl 
field tamper resistance dual problem running trusted code untrusted host 
considerable practical value little formal done problem 
reported literature ad hoc 
clear solutions exist provable security guarantees 
addition field suffers lack widely recognized standards measure effectiveness 
mind brief survey important related self checking technology 
obfuscation attempts thwart reverse engineering making hard understand behavior program static dynamic analysis 
obfuscation techniques tend ad hoc ideas human behavior methods aimed automated static dynamic analysis 
collberg ctl ctl ctl classes transformations binary attempt confuse static analysis control flow graph program 
wang wan proposed transformations hard determine control flow graph program obscuring destination branch targets making target branches data dependent 
wang proof transformations determination control graph transformed program np hard 
theoretical encrypted computation related obfuscation 
example sander tschudin st propose theoretical obfuscation method allows code execute encrypted form limited class computations 
obfuscation appears 
customization takes copy program creates different versions 
distributing different versions program stops widespread damage security break published patches break version executable apply customized versions 
uses type technique technology auc 
instantiation protected program different 
software watermarking allows tracking misused program copies complements obfuscation customization providing additional deterrent tampering 
software watermarking methods proposed appear widespread 
collberg thomborson ct classify software watermarks static dynamic provide survey research commercial methods 
distinction software watermarking methods read image program read running program 
static methods include system described davidson dm program basic blocks shuffled create unique ordering binary serves unique identifier version program 
self checking referred tamper proofing integrity checking anti tampering technology essential element effective tamper resistance strategy 
self checking detects changes program invokes appropriate response change detected 
prevents misuse repetitive experiments reverse engineering malicious attacks 
auc presents self checking technology embedded code segments verify integrity software program program running 
embedded code segments integrity verification kernels ivk check running program altered bit 
proposes set design criteria self checking technology including interleaving important checking related tasks stealth partial computation check sum obfuscated testing code non deterministic behavior customization testing code non unique installations distributed secrets 
adhere similar design criteria 
chang atallah ca propose method software protected set guards computation 
addition guards compute checksums code segments analogous testers propose guards repair attacked code 
emphasis system automatically placing guards allowing user system specify guards regions program guarded 
emphasizing issues results somewhat complementary 
collberg thomborson ct provide view nature classes tamper resistance technologies 
unfortunately little research complementary aspects kinds technologies 
design objectives threat model fundamental purpose dynamic program self checking mechanism detect modification program running detection trigger appropriate response 
sought self checking mechanism robust possible various attacks fulfilling various non security objectives 
section summarize threat model design objectives 
functionality comprehensive timely dynamic detection mechanism detect change single bit non modifiable part program program running soon change occurs 
helps prevent attack program modified temporarily restored deviant behavior occurs 
separate flexible response separating response mechanism detection mechanism allows customization response depending circumstances difficult locate entire mechanism having part 
modular components components mechanism modular independently replaced modified making experimentation enhancements easier making extensions executables executable formats easier 
platform independence initial implementation technology intel specific general mechanism adapted platform 
insignificant performance degradation self checking mechanism noticeably slow execution original code add significantly size code 
goal impact performance 
easy integration designed self checking technology conjunction copy specific static watermarking methods customization 
embedding self checking technology program relies source level program insertions object code manipulations 
suitable large code base test bed executable megabytes length 
security general attacks software self checking mechanism discovery 
methods discovering mechanism approaches preventing inhibiting methods follow 
discovery static inspection various components self checking mechanism stealthy obfuscated detection static inspection especially automated inspection program hard 
debuggers similar software tools shelf dynamic analysis tools debuggers profilers pose significant threat self checking technology 
self checking requires memory reads executable code sections 
detected debugger debugger relies modifying code defeated self checking mechanism 
mechanism enormously strengthened addition mechanism detects standard debuggers responds appropriately 
design mechanism scope 
debuggers pose threat require substantial investment attacker 
detection reads code attempted thwart static dynamic detection reads code sections obfuscating read instructions code section addresses targeted reads single registers 
detection reads requires noticing read occurred inspecting code monitoring registers reveal fact 
generalization self checking mechanism consists large number lightweight code fragments called testers testing small contiguous section code 
attacker having discovered tester look searching similar code sequences 
customized testers generalizing difficult multiple classes testers class performing different test computing different hash function class testers different code sequences job 
collusion self checking mechanism designed statically watermarked code 
copy specific watermarks attacker able locate tester mechanism obtaining differently marked copies code comparing 
differences reveal watermarks changes needed mechanism compensate different watermarks 
mechanism bits vary order compensate watermarks called correctors 
correctors separated testers response mechanism 
testers response mechanism detected collusion 
addition detection correctors collusion provides attacker little information 
knowing correctors values facilitate discovering disabling rest mechanism 
customization radically different copies code foil kind attack program looks different copy 
inspection installation patches final step watermarking self checking initialization process propose relies patch file modify previously obfuscated non functional executable 
inspection patch file reveal parts self checking mechanism 
method parts self checking mechanism patches correctors testers response mechanism 
copy specific watermarking patching process required 
general goal eliminate single points failure require discovery modification self checking mechanism attacker succeed 
modifying testers possible disabling attack modify testers fail signal modification tested code section 
testers designed provide redundant overlapping coverage tester tested 
disabling testers modifying produce detection changes unmodified testers 
testers disabled kind attack succeed 
modifying response mechanism disabling attack modify response mechanism 
redundant testing mechanism substantially response functionality disabled attack succeed 
current implementation direct calls tamper response mechanism 
possible build robust tamper response mechanism including delayed response multiple paths response code 
modifying correctors possible attack modify code behaves incorrectly trigger testers 
multiple overlapping hash computations attack succeed discovery testers 
discovery allow successful tester disabling attack 
attack greater threat 
temporary modifications dynamic attack modify code behaves restore code original form self checking mechanism detected change 
dynamic redundant self checking minimizes threat 
algorithm design section provide overview self checking mechanism including discussion design decisions possible alternatives extensions 
subsequent sections discuss various aspects mechanism detail 
components embedding process self checking mechanism consists collection kinds components testers correctors discussed sections 
respectively 
components embedded executable step process step source code processing insert set testers coded assembly language source code executable 
step object code processing step shuffle groups basic blocks object code randomizing tester distribution 
step insert correctors tester object code 
step associate corrector tester interval tester way provide redundant coverage executable correctors set appropriate order testers test correctly 
step installation time processing step compute watermark values 
step compute corrector values watermark values 
step form patches containing watermark corrector values 
step install program combining patches pre existing nonfunctional executable prepare watermarked self checking fully functional executable 
testers inserted source code object code 
insert testers object code difficult insure registers testers conflict registers actively object code insertion point 
inserting testers source code compiler appropriate register allocation avoid conflicts 
insertion method affords control runtime performance self checking mechanism easily place testers code segments desired performance characteristics 
hand fine grained control placement testers executable 
object level placement correctors gives great control static distribution important attribute 
issues insert testers correctors security components deserve study 
self checking method designed combination watermarking 
copy specific watermarking done installation time self checking mechanism avoid checking watermarks modified installation time correct watermark values 
chose course secure 
installation mechanism uses intelligent patching process watermarks correctors self checking mechanism placed set patches server side 
patches sent client patches code produce working executable 
patches contain information code outside patches 
minimizes security risks client time space transferring patch lists time space server maintaining computing patch lists 
design led choice linear hash functions self checking mechanism 
copy specific watermarking entire copy executable delivered installation time patching mechanism needed 
testers heart self checking mechanism collection testers computes hash pseudo random mapping contiguous section code region compares computed hash value correct value 
incorrect value triggers response mechanism 
set testing frequency size code tested tester need balance performance security stealth objectives 
experiments set pentium processors variety linear hashes suggested performance relatively invariant size code interval tested exceeds size cache 
pentium ii processors observed marked deterioration performance code interval size exceeded kilobytes 
breaking computation pieces addresses threat model meets design objectives 
self checking mechanism 
testers execute quickly observable interruption program execution 
testers tests contiguous section kilobytes long 
single tester executed completely computes hash value assigned interval tests result 
considered distributed alternatives single call tester partially compute hash value 
promotes type design integrity verification kernel self checking mechanism proposed auc 
promotes interleaved tasks perform partial checking computations 
alternative single tester different testers responsible complete computation hash interval 
rejected alternatives complicated stealthy require storage extra state information partially computed hash function 
important design decision store correct hash values 
possibility testers 
poses security risk 
self checking mechanism tests entire code watermarks differ different copies code hash values differ copies 
absence code customization creates drastically different versions code hash values exposed collusion attack different copies code compared 
storing hash values testers potentially exposes testers collusion attack 
difficulty circularity may arise testers testing regions include testers hash values may consistent way assign correct hash values assignment may exist difficult compute 
possibility avoids problems revealing testers collusion circularity hash value assignments store hash values data section 
hash values unprotected change self checking mechanism check data section 
avoid problem dividing data section fixed data variable data storing hash values fixed data section testing fixed data section alternative may secure chosen 
chose third alternative hash interval variable word called corrector 
corrector set arbitrary value set interval hashes fixed value particular hash function tester testing interval 
collusion reveal correctors reveal testers 
correctors tested changing easy job attacker 
tested interval corrector tested exactly tester 
testers ivk encrypted vulnerable discovery collusive attacks testers unique different copy protected software 
experimented multiple testers testing interval rejected approach overly complicated providing additional security 
important design decision trigger execution testers 
chose triggered normal program execution sprinkling line existing code 
alternatives include having separate tester threads triggering testers function calls exceptions specific events 
rejected mechanisms insufficiently stealthy 
having separate tester threads combination line triggering mechanism deserves study may provide additional security diversity 
third design decision choice hash functions 
chained linear hash functions linearity important installation easy 
actual hash values known installation time partial hash values pre computed combined values software watermarks 
chose multiple hash functions knowing hash interval corrector site information set corrector value compensate code change 
testing pattern cover entire executable code section overlapping intervals tested single tester 
overlap factor number different testing intervals containing particular byte bytes 
testers randomly assigned intervals 
high overlap plus random assignment provide high degree security testing mechanism changing single bit requires disabling large fraction testers avoid detection testers ineffective executed infrequently 
correctors intervals interval requires corrector value set interval hashes zero 
current implementation corrector single bit unsigned integer 
place correctors basic code blocks post compilation binary manipulation 
basic blocks dead code control transferred correctors 
alternative insert correctors live code ops 
chose approach simpler possibly issue deserves study 
correctors inserted uniformly possible code 
intervals constructed desired degree interval overlap randomization select interval endpoints appropriate correctors 
construction possible fill corrector values left right pass intervals hash zero 
circular dependencies equations defining corrector values 
hash functions linear alternative approach allow circularities solve resulting sparse system linear equations compute corrector values 
alternative deserves study 
computing corrector values requires invertible hash functions backwards desired hash value needed corrector value 
issue discussed 
tamper response final component self checking technology mechanism invokes action tampering detected 
current implementation tester calls tamper response mechanism directly simple function call 
considered alternative indirect response mechanisms appear promising 
primary objectives response mechanism avoid passing execution response single point failure 
primary integration objectives mechanism easy combine software protection mechanisms 
initial implementation opted simple direct response mechanism 
robust response mechanisms multiple access paths variable number steps running time 
mechanisms subject 
tester design placement function tester map large interval executable kilobytes relatively small set values bits easy scrambling map hash function 
idea change interval hashed change value returned tester result detection tester output compared correct hash value 
course probability changed interval mapping correct value choice hash function chance vanishingly small 
section describe design testers including objectives went design 
describe approach place testers code 
design objectives tester design objectives 
lightweight hash functions part design goal executing tester mechanism substantial impact program performance 
suggested lightweight hash functions combining additive chaining mechanism simple bit mapping uses arithmetic logical operations 
addition fast simple hash functions judged standard hash functions crc sha consist short sequences instructions 
multiple hash functions defense attack knowing hash function thought valuable multiple hash functions randomly selected 
multiplicity lightweight hash functions judged sufficiently secure needs cryptographically strong hash functions buy little 
hash functions watermark values corrector values computed final pass installation time performance considerations dictated partial hash functions easily 
issue arose installation constraints discussed detail section 
stealthy testers wanted testers hard find manual automatic code inspection 
particular look part executable 
obfuscation techniques applied executable conceivably help hide testers 
short testers judged long testers 
resistance auto collusion auto collusion attack finding tester help find similarity 
auto collusion attack harder favored short customized testers 
ideally tester different possible 
obfuscated address calculation vulnerability testers load bytes code normal code 
required code section addresses appear general purpose register calculation complicating sampling attack contents registers stack monitored suspicious values code section addresses 
complex addressing modes provide way implementing idea 
harmless development testers inserted source code post compilation stamped start addresses intervals hashed 
testers trigger response mechanism testers harmless program development 
linear hash functions performance testing lightweight hash functions built arithmetic logical operations 
compared performance hash function crc standard bit chained hash function 
sample hash functions ran times faster crc 
built debug testers exclusive chained hash function 
debug testers ran milliseconds bytes mhz pentium 
upper bound expected performance production testers debug testers gathered extra information development 
debug testers certainly fast adding self checking mechanism program significantly impact performance 
requirements invertibility led chained linear hash functions 
particular interval data consisting words 
dn value hn hash function defined recursively hi di hi suitably chosen non zero multiplier defines hash function 
hash function easily invertible hi di recursively compute hi value hn 
furthermore hash function easily sense 
generalize recurrence defining hi di hi view constant vector variable hn linear function hn bn bn defined recursively ai ai bi di bi inverse function hn linear defined recursively similar way 
invertibility mean interval constant certain variable words watermark slots single corrector word precompute representation hash function requires space linear number watermark slots 
values watermark slots compute value corrector entire interval hash zero time proportional number watermark slots 
precomputation time construct summary hash function linear length interval 
computation final step activating testers 
problem actual corrector computation intel executables corrector necessarily aligned word boundary relative start hashed interval 
handled cost complicating calculation 
possibility choose explicitly align correctors necessary providing byte corrector slots byte slots 
constant multipliers define hash functions chosen small set allowed hash computation performed explicit multiply instruction 
particular construction resulted collection possible hash functions corresponding different multipliers 
expand set possible hash functions included additive constant hash function redefining initial condition redefining recurrence hi di hi 
increase set possible hash functions explore 
having different hash functions judged sufficiently secure attacker know hash function start hashed interval hard determine finding tester 
tester construction customization help testers stealthy implemented tester prototype compiled get assembly language tester prototype 
doing hoped minimize presence assembly language constructs specifically generated compiler 
order resulting testers practical modifications compiled tester prototype 
modified prototype tester call response mechanism 
second added obfuscation variable address calculations guarantee code section address appear general purpose register running tester indicating read code section address 
third simplified tester slightly 
applied variety customizations guarantee tester unique code sequence increasing difficulty auto collusion attack 
customizations included changing multiplier defining hash function exact instructions compute hash function shuffling basic blocks tester inverting jump logic conditional jumps reordering instructions basic blocks permuting registers doing customization individual instructions 
result set distinct tester implementations occupying bytes 
tester placement discussed section chose place testers line code fire reached normal execution 
goal tester firing testers execute frequently code tested normal execution tester firing causes significant efficiency degradation 
order place testers effectively realize conflicting performance goals source level tester placement 
tester placement strategy required significant manual effort 
advanced software tools process automated 
goal insert various individual testers source program functions testers executed meet coverage objectives deemed typical program runs 
achieve profiling tools count function executions runs megabyte test executable 
discarded functions run start start 
ordered remaining functions increasing order execution frequency inserted testers functions order tester function desired number testers inserted 
placement testers combined method interval construction tester interval connection resulted acceptable dynamic testing coverage discuss section 
significant drawback testers bunched executable tend inserted library functions appear executable 
overcome problem relied block shuffling executable disperse testers uniformly 
straightforward analysis omit shows random shuffling code blocks assuming uniform block size tester block results maximum gap testers exceeds exactly equal spacing logarithmic factor 
deemed adequate provide desired amount testing robustness 
see section 
achieve uniform spacing testers location testers account doing shuffling inserting testers object code source code 
subject investigation 
interval construction addition testers component self checking mechanism code intervals testers compute hash functions 
recall desire intervals provide uniform redundant coverage entire executable hard discover 
interval requires corrector able set interval hashes zero 
global ordering correctors allows set sequentially circular dependencies 
chose base interval construction corrector placement 
approach interval construction consists steps corrector placement interval definition assignment testers intervals 
discuss steps sections 
section discuss robustness resulting overlapping checking mechanism 
section discuss alternatives current approach try 
corrector placement need interval corrector tester 
want intervals approximately equal size approximately uniformly spaced want correctors approximately uniformly spaced 
current method corrector placement second generation design inserts correctors dead code basic blocks basic block shuffling completed 
illuminating consider original design source code insertion understand virtues current method 
original design original implementation large number correctors consisting obfuscated nops inserted source code including appropriately chosen source language functions 
absence basic block shuffling distribution correctors extremely non uniform correctors clumped closely 
relied shuffling basic blocks provide uniform distribution correctors executable 
random shuffling produce uniformly spaced correctors corrector gaps poisson distribution implies expected maximum gap size logarithmic factor greater average gap size 
overcome problem inserted correctors needed logarithmic factor pruning step select small subset correctors 
implemented method demonstrated effectiveness practice drawbacks insertion correctors needed extra computation step corrector pruning need carefully place correctors replicated functions source code sure correctors executable 
drawback replace corrector insertion method described 
course experiments discovered correctors inserted code executed 
eliminating dead code significantly size test executable left convenient place source code put correctors 
replaced corrector insertion method insertion method 
specifically correctors inserted blocks shuffled 
approach significant advantages source insertion scheme 
gives fine grained control positioning correctors executable 
insert correctors dead code basic blocks addition obfuscated nops 
dead code correctors consist just correction bits forming valid instructions instruction sequences 
dispense corrector pruning step left step current implementation provides possibly redundant smoothing corrector distribution 
detail corrector placement process works follows 
word length bit corrector slots inserted basic blocks unconditional jump instructions 
chose gross number corrector slots insert pruning 
determine insert correctors count total number usable basic blocks insertion divided number correctors 
result insert corrector basic blocks 
prune correctors set follows 
correctors apply step remove corrector find adjacent correctors closest bytes eliminate removal creates smallest new gap 
algorithm implemented efficiently heap priority queue data structure keep track gap sizes logarithmic cost deleted corrector 
current performance run gross number correctors number testers net number correctors 
improved design leave space correctors byte count block count eliminate pruning step discarded code section fig 

illustration interval construction entirely 
investigate insertion testers inside basic blocks just basic blocks provides sufficient additional uniformity worthwhile 
basic blocks extremely small compared interval lengths doubt 
interesting research question devise efficient algorithm insert correctors basic blocks minimize maximum gap bytes correctors assuming dummy correctors exist start code 
interval definition define intervals tested placement correctors random choice interval endpoints appropriate correctors help hard attacker determine endpoints 
addition overlap factor bytes executable covered intervals 
currently overlap factor 
suppose desire test intervals ii correctors discarded 
label correctors cn order occur executable 
choose start si ei intervals follows 
start code section en code section 
range choose si uniformly random ci ci en uniformly random cn cn 
range choose points uniformly random ci ci 
smaller point si larger point ei associate corrector ck interval ii discard correctors 
construction illustrated 
choice intervals important properties 
near code section byte code contained possibly test intervals 
corrector test interval ii ci means set corrector values order ck ck 
cn successive intervals 
hash correctly having corrector settings invalidate earlier settings 
circular dependencies 
ends code section covered redundantly rest code 
think affects robustness testing mechanism significant way 
easy modify interval construction scheme corrector setting works ends code middle non redundant coverage occurs middle 
choose region non redundant coverage randomly unimportant code 
noted section modify interval construction allow circularities solve resulting system linear equations get corrector values 
method robust 
modifying scheme lines topic research 
assignment testers intervals intervals constructed step assign testers intervals 
objectives assignment coverage security 
want byte tested code running want force attacker disable testers successfully modify single byte program detection 
approach accomplishing goals harness power randomization assign tester different interval random permutation define assignment 
experimental theoretical evidence suggest random assignment 
theoretical evidence intuition theorems random graphs literature 
interesting area research develop mathematical theory proofs performance random tester assignment 
rely observations 
byte code covered testing intervals tested testers 
random assignment important bytes redundantly tested significant fraction testers ineffective infrequent execution 
second third observations concern graph tester graph models pattern testers testing testers 
vertices graph testers 
graph contains edge tester tester tester contained interval tested tester 
construction intervals allows possibility interval boundary middle tester 
case graph contain corresponding edge 
easily modify interval construction move interval boundaries outside testers 
worth doing subject research 
suppose testers effective execute frequently program running normally 
suppose attacker modifies byte program interval tested tester avoid detection attacker disable tester path tester graph 
suppose tester graph strongly connected path vertex vertex 
successful attack changing single byte require disabling tester 
tester graph strongly connected 
method interval construction random tester assignment tester graph strongly connected high probability 
true long intervals sufficiently uniform redundancy factor sufficiently high 
experiments confirmed number components drops rapidly increases 
small values large component small number single node components 
close strongly connected 
strong connectivity desired property tester graph random assignment necessary 
example guarantee strong connectivity embedding large cycle tester graph 
strong connectivity guarantee robustness testing mechanism 
example tester graph consists big cycle testers ineffective meaning parts code get executed attack effective tester graph consists disconnected pieces hypothetically certain parts program may attacked disabling testers 
stronger connectivity property fraction testers ineffective single byte change require disabling effective testers avoid detection 
kind robust connectivity related expansion property possessed certain random graphs 
expansion means constant factor subset constant fraction vertices vertices edges expansion implies strong robust connectivity depending 
possession property random graphs main reason random tester assignment 
expansion property hard test empirically doing takes exponential time verified tester graphs possess 
done careful theoretical analysis yield conservative constant factors 
research 
confident tester graphs possess sufficiently robust connectivity hope investigate issue 
summary designed built dynamic software self checking mechanism suitable protect client side software running potentially hostile environment 
designed conjunction tamper resistance techniques integrated static copy specific software watermarking 
directions research include building response mechanism add additional layer response detection response reporting doing experimental theoretical coverage robustness self checking mechanism modifying simplifying corrector insertion step developing additional hash functions customizations testers 
speculative potentially interesting direction investigate non hash checking example testing mechanism checks correct values stored certain registers certain times 
directions include exploring triggering mechanisms testers executing separate threads investigating temporally distributed testers studying hash methods correctors 
auc 
tamper resistant software implementation 
anderson editor information hiding lecture notes computer science pages 
springer verlag 
ca chang atallah 
protecting software guards 
volume 
chow gu johnson 
approach obfuscation control flow sequential computer programs 
frankel editors isc lecture notes computer science pages 
springer verlag 
ct collberg thomborson 
software watermarking models dynamic embeddings 
principles programming languages san antonio tx pages january 
ct collberg thomborson 
watermarking tamper proofing obfuscation tools software protection 
technical report university arizona february 
ctl collberg thomborson low 
taxonomy obfuscating transformations 
technical report university auckland 
ctl collberg thomborson low 
breaking abstractions data structures 
ieee international conference computer languages chicago il pages may 
ctl collberg thomborson low 
manufacturing cheap resilient stealthy opaque constructs 
principles programming languages san diego ca pages january 
dm davidson 
method systems generating auditing signature computer program september 
patent 
assignee microsoft 
mwcg morrisett walker crary glew 
system typed assembly language 
acm transactions programming languages systems may 
chow johnson 
tamper resistant software extending trust hostile environment 
multimedia security workshop acm multimedia ottawa ca october 
nec necula 
compiling proofs 
phd thesis carnegie mellon university september 
nl necula lee 
safe kernel extensions run time checking 
proceedings second symposium operating systems design implementation seattle wa pages october 
st sander tschudin 
protecting mobile agents malicious hosts 
mobile agents security lecture notes computer science 
springer verlag 
wan wang 
security architecture survivable systems 
phd thesis department computer science university virginia 
wang davidson hill knight 
protection software survivability mechanisms 
ieee ifip international conference dependable systems networks goteborg sweden july 
wang hill knight davidson 
software tamper resistance obstructing static analysis programs 
technical report cs department computer science university virginia 
