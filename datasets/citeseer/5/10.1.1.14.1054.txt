analytical processing version control data process centric viewpoint technical report dirk institute computer science free university berlin email inf fu berlin de may technical report introduces novel approach enabling analytical processing project data 
approach exploits source code repositories information project evolution 
furthermore technical report proposes new perspective analyzing version control data 
takes process centric viewpoint addresses related analysis problems collaboration programmers proposes metrics 
research yielded implementation approach comprises visualizations assist examining evolution software process 
contents analytical interface project data concept 
data model 
bene ts version control data 
bloof approach 
usage model 
process quality centric analysis software project data visualizing examining software development practices examining productivity 
examining collaboration 
analysis problems 
implementation cvs tools project data analysis related version control systems vcs contain large amounts historical information give insight evolution software projects 
unfortunately support analytical access project data 
technical report contributes notions analytical interface version control data 
need clean cut abstraction layer automatic access vcs data 
need satis ed implementation concurrent versioning system cvs 
provides analytical access project data open source projects 
designed researchers practitioners analyzing software projects 
process centric analysis version control data 
desired process vcs data software process centric viewpoint 
particular viewpoint leads exploration process aspects neglected studies 
visualization process quality aspects points way precise modeling process analysis problems sound respect theory practice social research :10.1.1.34.340
research eld software evolution focuses attributes software product :10.1.1.48.910:10.1.1.34.340:10.1.1.17.1088
increasing knowledge growth complexity refactoring code decay gathered years 
studies examined aspects process quality 
software coded people quality highly depends development practices came 
comprehending aspect software evolution empirical knowledge process human aspects needed 
technical report presents new infrastructure accessing analyzing project data 
provide overview system section 
section explain change perspective project data process centric point view 
examination software development practices related new viewpoint follow section 
give brief overview implementation section tools built system 
technical report closes discussions related 
appendix consists example visualizations demonstrate capability software 
analytical interface project data course development software system current version software product date source information state evolution system 
documentation seldom synchronized versions dicult maintain meaningful documentation system changes 
current source code documentation sources data project 
presumably software project uses sort vcs keeping program les synchronized consistent 
concept project data stored vcs contains huge amount information evolution software product history development process individuals contributed code 
vcs enables users get copies source code add source code repository 
ers interface performing le operations controlled way 
operations vcs stores additional contextual data useful analyzing project 
data queried standard interface vcs 
gap bridged introducing new method accessing vcs 
concept providing interface enables user analyze project data 
interface collects data default access method vcs 
interface analytical project data queried high detail complexity 
exible developer name file path revision version timestamp lines added lines removed comment data model bloof generic requests performed data 
technical report capability analyzing process aspects software projects 
data model keep track changes les software system 
order reconstruct past con gurations source code store context information change le name changed source code number added deleted lines time stamp comment developer revision number identi es change 
version control systems store additional information purpose change related change request status associated request change information useful analysis including data model require restriction speci vcs rule software projects analyzed :10.1.1.48.910
data model reduced minimal version making compatible virtually version control system 
particular contains data stored concurrent versioning system cvs open source community 
bene ts version control data collection analysis empirical software project data central improving software quality programmer productivity 
unfortunately collection analysis data rare mainstream software development 
barriers hinder data collection 
collection empirical software engineering project data expensive resources time interferes developers validation accuracy dicult 
addition surveys software projects tend designed controlling development cost seldom include useful data developers project managers 
overcoming barriers order spread adoption techniques empirical software engineering important goal software engineering research 
barriers 
vcs data collection side ect standard part development process trouble developers 
store long histories running past projects facilitating analysis retrospective member project available 
stored information ne grained level atomic change 
collecting data level hand virtually impossible especially real life projects 
additionally completeness data assured automatically artifact version control recorded 
data uniform time way version control system rarely changes 
granularity recording small projects generate data analysis 
vcs data bene ts se designed drawing quality characteristics software project 
order get information possible assumptions data processing necessary 
assumptions discussed section 
bloof approach due high barriers accessing project data studies software evolution tend examine systems developed single organization uniform traditional development management environment :10.1.1.48.910:10.1.1.34.340
ndings open source projects documented :10.1.1.34.340:10.1.1.34.340
order reproduce compare ndings software evolution empirical studies applied di erent projects :10.1.1.48.910:10.1.1.34.340
signi cant results provided examining large sets projects long periods time single snapshots :10.1.1.48.910:10.1.1.2.1482
software system addresses needs provide easy access data software projects include scalability huge amounts project data support experimentation 
addition exible usage provide interoperability 
requirements design criteria bloof system 
system provides easy access project data accesses data automatically 
speaking terms data version control system cvs operative data source bloof provides etl layer extraction transformation loading 
bloof scalable transforms data new data model stores database 
interoperable provides documented analytical processing interface performing data queries 
design opens way various tools examples section 
bloof explorative analysis project data allows user de ned queries 
exible way data access data processing implemented clean cut abstraction layer integrated various environments 
usage model storing data database provides possibility querying interesting analysis problems queried simple database query statement 
order ensure interoperability uniform result mechanism necessary 
ways accessing project data information supported call level interface 
generic sql queries supported query class sql query string parameter 
prede ned analytical queries 
provided compound queries encapsulated query classes interface 
created various parameters run queries complex analysis problems 
cases uniform return object returned interface handed tools processing 
architecture allows di erent distributions bloof system 
fat server distribution serves web application processing data di erent software projects 
users trigger loading project data server perform queries fat server web browser 
fat client distribution runs local application stores loaded data internal database 
shell interface gui external tools accessing interface bloof system infrastructure 
current implementation bloof system coded java language 
access analytical interface realized java api 
process quality centric analysis software project data studies software evolution focus examining software product speci features 
little attention paid process comes evolution software 
software created manual supported various tools way programming accomplished developers determines high degree properties result 
product oriented software evolution research concentrates features amount source code code decay coupling cohesion speci behavior various releases 
approaches deal explaining history software product forecasting problems 
helpful comprehending critical spots software product 
aspects process taken account solely concentrating product features 
software great extend produced hand resulting product highly depends people interact 
productivity cooperation continuity main factors process quality 
propose new viewpoint software projects addresses features 
process centric perspective analyze process software project 
approach process centric analyze activities developers process software development 
visualizing examining software development practices evolution software system usually complex comprises changes large amounts software artifacts great numbers developers long periods time 
visualization help software engineers cope complexity 
charts tables generated bloof system facilitate comprehension evolution display product process behavior hidden project data 
appendix provides assortment example visualizations individual cumulative productivity measured changed loc day 
team collaboration comparing total changes collaborative changes daily basis 
distribution changes main modules comparing sum added deleted lines code period project 
time line changes month 
average time le changes time 
time line hours lay current change change le 
sections delve example analysis problems related process centric perspective software projects productivity collaboration 
analysis problems lead phrasing queries project data 
results related queries shown appendix 
visualisations generated version control data project :10.1.1.48.910
project candidate evolution research heavyweight highly successful open source project people attracting developers developed maintained years 
having undergone releases changes programming sta huge source information software evolution 
examining productivity basically productivity rate output time period 
order understand manage productivity measure 
measuring productivity context software production tricky depends variables 
decades organizations implemented di erent productivity metrics :10.1.1.34.340
commonly productivity measured lines code loc drawbacks 
number loc implement functionality varies greatly programming languages 
programmer productivity compared measuring loc di erent programming languages involved 
problem theoretically overcome measuring function points loc solution practical automatic measurement function points measured manually trained experts :10.1.1.48.910
di erent programming tasks require di erent productivity measurement 
metrics maintenance need kept separate fresh development :10.1.1.34.340
project teams di erent tools working di erent hardware software environments need measured evaluated separately 
addition risk programmers start working mainly meeting productivity metric variables producing volume quality feel discouraged programming reusable pieces software :10.1.1.48.910
depends speci features project phase production indicator provides useful information parameters considered measuring loc productivity 
metrics perfect subject manipulation programmers management care help identifying problems risks evaluating project decisions predicting progress project 
various parameters examining productivity fed bloof system enabling user con gure queries speci problem 
examining collaboration process model software development addresses aspect collaboration way 
conventional software project limit cooperation developers accepting tasks meetings defending results reviews 
contrast extreme programming fosters collaboration outset 
communication values method realized couple best practices pair programming collective ownership 
collaboration obviously occurred di erent people perform changes artifacts certain time frame 
artifacts modules system directories single les le groups 
identifying artifacts points spots software product people worked 
side viewpoint single programmer personal grade collaboration identi ed analyzing shared changes artifacts 
putting views groups people identi ed logically team organizational point view 
top collaborators ranking 
adding time perspective views gains insight evolution grade cooperation 
analyses collaboration supported bloof system performed compound query 
depends highly circumstances evaluate results queries 
development process speci project personal style programmers taken account measuring collaboration 
attention paid interpretation results 
cases editing les indicator collaboration bad division bad design poor communication 
fact possible collaboration occurs tracked project data everybody performed changes commits repository commit immediately 
especially apparent case pair programming environments people cooperate commits changes 
considering variables collaboration metrics help evaluating development process 
bloof system supports con guration collaboration metrics providing parameters compound query 
analysis problems productivity cooperation analysis problems development process 
continuity frequency indicators process quality implemented bloof system 
exist various questions supported software directly address process quality problem answer interesting questions related process quality developer changes les created 
developer deletes lines code 
developer submits small changes 
developer works large amount les 
observations queried negative developer works small amount les 
performing queries ranking identify high potentials 
adding dimension time gives insight past evolution provides indicators prediction 
adding third dimension productivity time line sub modules system allows deep analysis project history 
observations queried analytical interface bloof 
technical report focuses process centric analyses implementation limited focus 
product centric analyses conducted various research studies mentioned section supported system implemented standard queries 
implementation cvs bloof designed provide easy access data software projects allow interoperation tools support experimentation project data 
bloof open source project hosted sourceforge 
supports version control system cvs 
cvs commercial organizations research institutes open source projects especially projects located sourceforge 
interoperation tools realized bloof software separating data access analysis layer application layer shown 
java implementation allows usage system various platforms 
internally hierarchy query classes return uni ed result object java object xml document 
detailed information bloof available project website 
tools project data analysis architecture bloof allows access analysis vcs data java api 
tools interface developed bloof project 
main distribution bloof system includes gui tool bloof browser enables user perform data access analysis visualization 
data artifacts navigated ltered grouped 
tool provides set compound queries visualizes results enables user export xml document 
shell querying data model sql web server distribution external visualization tools included 
data sources sourceforge open way processing data large numbers projects 
comparing results projects reveal patterns software development 
query shell tool visualization tool interface import version control system deployment descriptor import update policy data model system border accesses architecture bloof system tasks done bloof system implementation meta project layer 
provide access cross project analysis developer activities 
appealing researchers project managers interested benchmarking 
data model extended external information 
speci data atomic changes imported systems 
adding information events development process dates releases allow automatic analysis patterns evolution short events 
enriching data information change actual changed content line number allow ne grained analysis source code 
including statistical tests calculation results lead strong predication correlation signi cance variables 
related long term research large software systems conducted lehman produced large source information evolution software products led phrasing laws software evolution :10.1.1.48.910
results included models growth complexity prediction errors guidelines project managers planning software development :10.1.1.48.910
evolution aspects software product investigated researchers 
analyzing frequency changes grow rates change types contributed comprehending evolution software nding reasons success failure software project :10.1.1.34.340:10.1.1.34.340
fine grained analysis produced visualization structural changes evolution software systems introduced change patterns software artifacts :10.1.1.48.910
expertise developers measured vcs data researched mockus 
approach related developer expertise developer activity artifacts time 
measured automatically preconditions project 
aspects similar approach analyzes single aspect process address problem data access 
combined cscw project management tool pease platform ease ers limited statistic features analyzing collaboration :10.1.1.34.340
statistic features pease reasonably projects managed strictly special purpose process model ease :10.1.1.34.340
statistic features rely explicit data collaboration stored special project data repository outset 
analytical interface provided analysis results pure reports visualized 
surveys research software evolution note relatively little research empirical studies software evolution :10.1.1.34.340:10.1.1.34.340
suggestions exploiting version control data analyzing software evolution explored bell labs years ago :10.1.1.48.910
metrics visualizations provided focused aspects software product logical coupling les take examinations di erent versions product changes time periods account 
software evolution studied version control data provide information accessing data 
step direction performed transforming version control data bug tracking data database schema allowing simple queries project data :10.1.1.34.340
studies relies manual data access transformation 
aim integrate provision automatic data accessing analytical processing result generation system 
targeting goal open source project released product generates static suite web pages lled charts tables contain metric results history software project 
interest users lacking scalability exibility interoperability design led creation bloof system 
bloof system suitable analyzing software projects source code version control 
small projects provide sucient data analytical processing 
solution removes barrier access software project data 
system easy integrate due lightweight interface 
enables exible analyses evolution aspects provides simple query result mechanism supports complex data queries 
particularly capable visualizing process aspects evolution analyses process centric viewpoint show supports prevalent examinations evolution aspects software product 
system satis es demand testbed software evolution bloof tools satisfy requirements tools software evolution 
enable users perform explorative experimentations project data 
bloof aims provide infrastructure empirical research software evolution 
:10.1.1.34.340
practice social research th ed 
wadsworth 
ball kim porter :10.1.1.48.910
version control system talk 
icse workshop process modelling empirical studies software engineering may 
banker kaufman kumar 
empirical test object output measurement metrics computer aided software engineering case environment 
journal management information systems 
beck 
extreme programming explained embrace change 
addison wesley 
bennet rajlich 
software engineering chapter software maintenance evolution roadmap 
acm press 
english 
benchmarking best practices winning innovative adaptation 
mcgraw hill trade 

software beans class metrics software 
journal object oriented programming 

version management cvs 
www org docs manual 

schulze 
stat repository 
sourceforge net 
dale van der zee :10.1.1.34.340
software productivity metrics needs 
information software technology 
davis :10.1.1.34.340
shop measure 
datamation sept 
:10.1.1.34.340
learning software engineering ease 
van munro editors informatics digital society pages 
kluwer academic publishers 
:10.1.1.34.340
cscw project management tool learning software engineering 
frontiers education engineering human endeavor 
ieee press appear 
ducasse lanza software :10.1.1.34.340
supporting evolution recovery query approach 
software composition group university berne 
eick :10.1.1.34.340
code decay 
assessing evidence change management data 
ieee transactions software engineering 
fenton :10.1.1.34.340
software metrics rigorous practical approach 
international thomson computer press london edition 
fischer gall :10.1.1.34.340
populating release history database version control bug tracking systems 
technical report tuv information systems institute distributed systems group technical university vienna 
gall jazayeri kl :10.1.1.34.340
software evolution observations product release history 
proceedings international conference software maintenance pages 
ieee computer society press 
godfrey tu :10.1.1.34.340:10.1.1.34.340
evolution open source software case study 
icsm pages 
kemerer slaughter :10.1.1.48.910
empirical approach studying software evolution 
ieee transactions software engineering july aug 
el :10.1.1.48.910
metrics 
software development june 
:10.1.1.48.910
making reuse reality 
software development 
lanza ducasse :10.1.1.48.910
understanding software evolution combination software visualization software metrics 
proceedings lmo pages 
:10.1.1.48.910
managing software development process 
software con guration management icse scm workshop pages 
lecture notes computer science springer may 
lehman :10.1.1.48.910
nal report 
www doc ic ac uk mml 

lehman perry :10.1.1.48.910
metrics laws software evolution nineties view 
proc 
fourth intl 
software metrics symposium metrics albuquerque nm 
lehman :10.1.1.48.910
program evolution processes software change chapter pages 
academic press london uk 
kimball :10.1.1.48.910
gnu image manipulation program 
www org 
mens demeyer :10.1.1.48.910:10.1.1.2.1482
evolution metrics 
proc 
int 
workshop principles software evolution 
mockus eick graves karr :10.1.1.17.1088
measurement analysis software changes 
technical report national institute statistical sciences research triangle park nc 
mockus 
expertise browser quantitative approach identifying expertise 
icse workshop open source software engineering orlando fl usa 

bloof visualize software project evolution 
bloof sourceforge net 
appendix appendix consists gures showing data imported various sourceforge projects processed bloof system 
































lines code pha char lie cumulative productivity measured changed loc day generated bloof system project processed nov comparing developers daily changes total changes ive changes time line collaboration comparing total changes collaborative changes daily basis project processed time period nal days nov summarizing contribution developers runner tests framework module distribution changes main modules junit project comparing sum added deleted lines code period project 
mai nov mai nov mai nov mai nov mai nov mai nov mai sum changes changes month time line changes month 
kde project nov mai nov mai nov mai nov mai sum changes changes month time line changes month 
jedit project mai 
nov 
mai 
nov 
mai 
nov 
mai 
nov 
mai 
nov 
mai 
nov 
mai 
days file age average time le changed time 
kde project hours file age developer time line hours lay current change change le 
jedit project processed developer time period week may 
