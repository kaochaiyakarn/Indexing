software practice experience vol 
november graph drawing force directed placement thomas fruchterman edward reingold department computer science university illinois urbana champaign springfield avenue urbana il summary modification spring embedder model eades numerantium drawing undirected graphs straight edges 
heuristic strives uniform edge lengths develop analogy forces natural systems simple elegant efficient algorithm 
key words graph drawing force directed placement multi level techniques simulated annealing graph drawing problem graph set vertices set edges edge joins pair vertices 
normally graphs depicted vertices points plane edges line curve segments connecting points 
different styles representation suited different types graphs different purposes presentation 
concentrate general class graphs undirected graphs drawn straight edges 
introduce algorithm attempts produce aesthetically pleasing dimensional pictures graphs doing simplified simulations physical systems 
concerned drawing undirected graphs generally accepted aesthetic criteria 
distribute vertices evenly frame 

minimize edge crossings 

edge lengths uniform 

reflect inherent symmetry 

conform frame 
algorithm explicitly strive goals distributing vertices evenly making edge lengths uniform reflecting symmetry 
goals implementation speed simplicity 
previous algorithm drawing undirected graphs eades turn evolved vlsi technique called force directed placement 
quoting eades explanation metaphor current address systems moffett park drive sunnyvale ca received june john wiley sons revised march fruchterman reingold basic idea follows 
embed lay graph replace vertices steel rings replace edge spring form mechanical system 
vertices placed initial layout go spring forces rings move system minimal energy state 
eades modelled graph physical system rings springs implementation reflect hooke law chose formula forces exerted springs 
important deviation physical reality application forces repulsive forces calculated pair vertices attractive forces calculated neighbours 
reduces time complexity calculating attractive forces neighbours repulsive force calculation great weakness body algorithms see greengard 
kamada kawai variant eades algorithm 
modelled graph system springs eades abandoned hooke law kamada kawai solved partial differential equations optimize layout 
eades decided important vertex near immediate neighbors calculated attractive forces neighbours kamada kawai algorithm adds concept ideal distance vertices neighbours ideal distance vertices proportional length shortest path 
kamada kawai saw graph drawing problem process reducing total energy system springs connecting steel rings minimizing sum compression tension springs rings vertices nearly ideal distances 
formulated total energy graph position ring corresponding vertex ij spring constant spring pi ij optimum distance vertices energy reduced solving partial differential equation vertex find new location moving ring new location minimizes energy new state 
repositioning vertices repeated energy goes preset threshold 
important difference eades approach vertex moves iteration inner loop hooke law macroscopic approximation behaviour springs 
quote introductory physics textbook 
spring compressed extended released returns original natural length provided displacement great see small force exerted spring approximately proportional result known hooke law written empirically determined constant called force constant spring 
graph drawing force directed placement needs recalculate contribution vertex energy system time 
davidson harel lay graphs reducing energy system method having older roots vlsi placement optimization problems simulated annealing 
simulated annealing powerful general optimization technique computationally costly 
problem drawing graph restated problem minimizing energy optimization 
applying simulated annealing requires choosing energy function davidson hare picked flexible function combining terms vertex distribution nearness borders edge lengths edge crossings 
weights terms varied emphasize different aesthetic standards 
davidson harel tried flexible meeting different aesthetic standards producing highest quality figures fine tuning option basic configuration simulated annealing adjustments pixels time forbidding hill moves 
pick threads idea 
despite updates time complexity inner loop simulated annealing extremely slow impractical interactive display graphs 
new method principles graph drawing 
vertices connected edge drawn near 

vertices drawn close 
close vertices placed depends space available 
graphs complicated draw 
vague guidelines recall result particle physics distance fm meter strong nuclear force attractive times electric force 
force decreases rapidly increasing distance completely negligible times separation 
fm strong nuclear forces repulsive 
nuclei collapse 
consider analogy vertices behave atomic particles celestial bodies exerting attractive repulsive forces forces induce movement 
algorithm resemble molecular planetary simulations called body problems 
eades know need faithful simulation apply unrealistic forces unrealistic manner 
eades vertices neighbours attract vertices repel 
consistent asymmetry guidelines 
inspired natural systems springs macro cosmic gravity point forces correctly named 
forces calculate velocity time quantum displacement time quantum unity true forces induce acceleration 
distinction fruchterman reingold extremely important real definition leads dynamic equilibria orbits seek static equilibria 
pseudo code algorithm 
said initial configuration input output 
initial configuration partly specified normally vertices placed randomly frame 
different functions chosen steps iteration calculate effect attractive forces vertex calculate effect repulsive forces limit total displacement temperature 
special case occurs vertices position implementation acts vertices small distance apart randomly chosen orientation leads violent repulsive effect separating 
omits explanation temperature cooling 
idea displacement vertex limited maximum value maximum value decreases time layout better amount adjustment finer finer 
example temperature start initial value area width length frame vertices assigned random initial positions function return function return iterations calculate repulsive forces vertex vectors pos disp disp short hand difference vector positions vertices pos pos disp disp fr calculate attractive forces edge ordered pair vertices pos pos disp disp disp disp limit maximum displacement temperature prevent displaced outside frame pos pos disp disp min disp pos min max pos pos min max pos reduce temperature layout approaches better configuration cool 
force directed placement graph drawing force directed placement say tenth width frame decay inverse linear fashion 
discuss efficient cooling functions 
modelling forces calculate optimal distance vertices constant experimentally 
vertices uniformly distributed frame radius empty area vertex 
intuitively apart vertices closer intolerable current layout considered violent correction 
attractive repulsive forces respectively distance vertices fa illustrates forces sum versus distance 
point sum attractive repulsive force crosses axis forces exactly cancel ideal distance vertices 

forces versus distance fruchterman reingold chose functions experimentation naturally suggested implementing objectives resembled hooke law 
experimented functions meet guidelines example pair functions worked poorly complex graphs unable overcome local minima vertex move past vertex bad initial placement put way 
overcoming bad configuration moving worse configuration reaching better known simulated annealing hill climbing 
simulated annealing decides probabilistically accept transition inferior configuration force directed placement seeks lowest ground 
lead getting stuck local minima valleys simulation discrete vertex shoot past single time step having face repulsive effects short range 
force laws higher order powers tend give results similar quadratic functions costly compute 
eades equations achieved results similar eades show rejected formula inefficient compute 
frame confine graph frame specified user 
originally placed dummy vertices perimeter graph exerted repulsive forces move 
exactly strategy occurred davidson harel 
modelled walls sloping potential barrier putting term energy function causing cost vertex near border increase inverse quadratically 
chose consider frame object modelling walls exerts normal force exactly equal force pushing vertex stopping real wall 
implement satisfactorily extension concept borders constructed arbitrary line segments 
example try draw tree inside wedge shaped area fixing root tree apex wedge 
drawing graph concave region prevent edges vertices crossing borders 
adds term time complexity algorithm arbitrary regions useful reserving island text middle graph 
graph drawing force directed placement approaches modelling frame physical walls 
easiest sticky vertex adheres spot wall strikes inelastic collision stays force vector components moving away wall see 
approach model striking wall elastic collision determine order walls struck vertex bounce times entailing extensive computation see 
approach reminiscent ray tracing realistic computation intensive method shading computer graphics 
chose wall component displacement normal 
easy efficient implement box graph walls orthogonal ordinate system 
shows vertex stopped proposed trajectory outside frame top border vertex allowed slide left reaches left border upper left corner 
borders arbitrary lines compute dot products find component trajectory normal border 
practice choose strength forces resulting graph small nears borders apply filter enlarge graph fill frame 
speeding algorithm important technique body simulations approximate effect distant bodies single pole 
doing reduces body simulation complexity log 
need faithfully imitate celestial chemical atomic system desire results pleasing 
allowed 
inelastic collision 
elastic collision fruchterman reingold 
halted upward direction 
stopped altogether time saving adjustment described vertices attracted neighbours complexity 
compute repulsion vertex complexity 
repulsive force decreases inverse square distance 
neglect contribution distant vertices 
speed algorithm variation call grid variant algorithm 
variant divide screen grid squares iteration vertex placed grid square repulsive forces computed vertices nearby squares grid compute attractive forces usual 
nearly equivalent resulting output time complexity applying repulsive force vertices computing practice square shape grid boxes caused distortion necessary fall distance directions repulsive force applied vertices circular area radius centred centre vertex question 
vertex vertex graph drawing force directed placement 
calculating repulsive forces grid square algorithm outside immediately neighbouring squares grid considered rejected far away anyway 
frame width wand length area ignore repulsion vertices distance length side grid box 
number grid boxes distribution vertices approximately uniform calculation repulsive force 
important consideration simulated annealing choosing cooling schedule temperature balancing ability escape local minima find best layout desire quick termination 
analogue simulated annealing temperature limiting maximum displacement vertex iteration changing maximum displacement iteration iteration 
research simulated annealing devoted speeding effort goes developing better general cooling schedules 
simulated variant simulated annealing hypothesis simulated annealing wastes effort moving random placement reasonable better generate initial placement applying fruchterman reingold computationally efficient method apply simulated annealing low temperature subtle adjustments 
resembles davidson harel done computation intensive final adjustment phase 
grover suggests rein cut placement initial vlsi layout 
alternative quickly generating initial layout quenching simulated annealing rapidly cooling iterations 
keep system conceptually simple analogous simulated force directed analogy quenching avoid introducing algorithm 
conducted subjective experiments compared results drawing different graphs different cooling schedules different numbers iterations 
primarily compared steady decrease temperature combination quenching phase starts high temperature steadily rapidly second constant low temperature 
results schedule better required fewer iterations 
time complexity iteration algorithm takes time basic algorithm grid variant assuming vertices uniformly distributed grid boxes exactly iterations necessary lay graph 
ad hoc argument literature authors try explain algorithm terminates 
eades simply asserted graphs reach minimal energy state simulation step run times 
davidson harel kamada kawai conditions termination explicit representations state energy offered little analysis soon conditions met kamada kawai include number iterations outermost loop doing time complexity analysis offer little justification number iterations experimented making function 
suspect davidson harel choosing better cooling schedule dramatic difference 
algorithms attempt minimize energy terminate energy threshold reached 
contrast algorithm termination guesswork eades 
intermediate output program saved initial configuration layout comes half baked fix layout cost starting scratch 
saving intermediate layout facilitates forms incremental layout adding edges vertices graph laid 
implementation wanted simple coherent method bag tricks 
example rejected planarity testing planarization efficient 
avoided slow complicated techniques simulated annealing tried implementation fast interactive graphs moderate size 
constructed flexible experimental framework easily test different models forces 
specify arbitrarily complex functions addition subtraction multiplication division modulus logarithm square root graph drawing force directed placement exponentiation unit step function awk command line 
implemented algorithm 
integer arithmetic speed required expressions carefully crafted preserve significance proved worth 
advice bentley kept expensive operations square roots minimum square place square root 
experimentation aided little language specify forces parameters 
idea evaluated way hard coded proved worth grid approximation 
variants lay program 
basic version called nature analogy layout algorithm forces nature 
variant lays dimensions called nature implements grid variant called 
take text input produce text output 
input file format output input necessarily ordinates points 
specify initial configuration vertices placed randomly 
pass nature fails result pleasing layout resubmit graph computation saved reuse output attempt 
difference variants matter linking different object files 
extended example prism demonstrate algorithm action show figures step laying prism 
frame shows vertices random initial positions 
twelve frames show quenching second twelve 
general box box border part algorithm 
figures box means scaled filter 
identify graphs captions giving number original citation 
specially identified drawn proposed figures exactly appeared cited 
drawn identifies representations produced algorithm discussed cited proposed identifies merely proposed authors generated algorithm 
symmetric graphs natural pleasing results algorithm symmetric graphs underlying force law paradigm symmetric graph ubiquitous papers graph layout complete graphs figures highly evident 

illustrate balance attractive repulsive forces equilibrium 
note planar represented 
layouts complete graphs get smaller degree gets higher higher density edges shorter distances equilibrium reached 
calculation ideal distance vertices works ideally described simple case fruchterman reingold 
quenching graph drawing force directed placement 




graph drawing force directed placement kz figures filter size 
examples simple planar nearly planar symmetric graphs appeared kamada kawai appears davidson harel 
graphs kamada kawai especially easy draw renderings essentially theirs 
highly symmetric graph figures 
representation acceptable arguably ones dimension symmetry missing 
graph taken davidson harel achieve drawing algorithm layout 
probably preferable 

graphs figures respectively kamada kawai 
triangulated triangle graph kamada kawai 
graph davidson harel fruchterman reingold 

davidson harel proposed davidson harel 

davidson harel drawn davidson harel 
graph graph davidson harel graph drawing force directed placement difficulties algorithm encounters symmetric graphs illustrated davidson harel 
original problem bit clearer 
graph planar davidson harel generated planar representation repulsive forces inner vertices prevent achieving attractive equally stable configuration 
davidson harel 
rendition faulty respect davidson harel drew outermost vertices neighbors graph perfectly planar 
comparison time complexity formula davidson harel provide require minutes generate algorithm takes seconds comparable machine 
displays different layouts icosahedron missing vertex incident edges upper layout looks traditional solid representation icosahedron vertex missing lower layout planar edges hard distinguish 
methods discussed simulated annealing davidson harel explicitly attempts avoid occluding vertices edges 
icosahedron 
layout extremely attractive planar icosahedron planar 
planar graphs section reproduce little comment asymmetrical figures papers easy draw graphs planar 
layout produce nearly identical layout cite source graph 

graph davidson harel 
davidson harel drawn davidson harel fruchterman reingold 
davidson harel drawn davidson harel 
graph davidson harel graph drawing force directed placement 
layouts icosahedron variant 
icosahedron 
graphs figures kamada kawai 
graph eades fruchterman reingold 
graph eades 
graph eades 
graph eades 
graph eades kamada kawai observed isomorphic graphs figures identical layouts rotation reflection similar isomorphic graphs figures similar distinct layouts 
results confirm observation 
simple binary tree represented 
algorithm draws trees expanding radially root algorithms 
problems algorithm directly penalize edge crossings illustrated 
children second level cross placement packs vertices frame 
similar problem occurred early implementation algorithm serious degree blocking affect illustrated 
vertices attracted ancestor aaa overcome potential barrier posed vertices ab aba 
tried find analogy nature suggest way blocking force overcome 
quantum jumps electrons came mind heuristic solve problem turn repulsive force fifth iteration 
heuristic helpful overcome problem involves vertices 
suspect apply multigrid technique allows portions graph moved help technique suitable optimization algorithm simulated annealing 
graph drawing force directed placement 
graph kamada kawai 
graph kamada kawai examples trees binary shown figures 
clear root current implementation gives indication direction edges really trees undirected acyclic planar graphs examples believing knew vertex root 

graph kamada kawai 
graph kamada kawai layouts appear dimensional dimensional objects represented dimensional projections appearance dimensionality product human perception 
fruchterman reingold 
binary tree 
tangled binary tree graph davidson harel 
example potential barrier example graph looks dimensional drawn algorithm algorithms discussed cube 
drawn planar graph planar representation viewed head perspective projection opaque cube human rarely want 
take step attempt draw hypercube shown 
layout difficult picture original space object 
davidson harel tuned algorithm changing weighting various components 
attempt produce planar rendition cube experimented heavily weighting term penalizing edge crossings graph drawing force directed placement 
tree graph eades 
graph kamada kawai 
tree graph davidson harel 
unbalanced tree graph eades able draw cube squares inside inner square rotated respect outer edge lengths uniform 
graphs planar usually drawn dimensional prism twin cubes 
davidson harel tried graphs planar failed case 
planar layout sought 
result weighting edge crossing component favorably just crossings layout produced default settings 
give effect perspective projection 
davidson harel extended example appeared planar closing shutter 
fruchterman reingold 
cube 
dimensional hypercube representation appears oblique parallel projection object davidson harel perspective projection algorithm adds twisted effect keep edge lengths nearer uniform 
kamada kawai davidson harel discussed algorithms draw isomorphic graphs way rotated reflected 
apparently papers referring rotation reflection plane struck algorithm appears rotate graphs threedimensional looking graphs space 
examples figures 
algorithm produced different results different initial configurations 
layout nearly acceptable appearance 
dimensional layout layouts appeared dimensional led experiment doing layout dimensions projecting result obtained dimensions way hoped obtain control final image 
saw dodecahedron algorithm generate different projections object depending initial placement cooling schedule projection bad occludes edges vertices hides planes viewed view normal vector parallel nearly planes 
created filter projections vertices laid dimensions options choose view point view normal vector view vector choice parallel perspective projection see hearn baker definitions terms 
show examples repeated previous sections laid dimensions 
example triplet projections axes 

twin cubes graph davidson harel graph drawing force directed placement 
davidson harel drawn davidson harel 
prism 
davidson harel proposed davidson harel 
davidson harel drawn davidson harel fruchterman reingold 
davidson harel 
mesh graph drawn davidson harel davidson harel 
poor dodecahedron 
dodecahedron graph drawing force directed placement examples cube mesh prism 
examining dodecahedron icosahedron twin cubes see possibility projection guarantee projection necessarily better get laying graph dimensions 
calculating projection layout little cost currently requires intervention user choose projection 
better interface allow user interactively manipulate object dimensions 
kamada kawai discuss problem selecting general position viewing dimensional object maximum shape information obtained presents algorithm doing 
davidson harel tried find planar layout icosahedron tried icosahedron missing vertex incident edges 
modification icosahedron clear dimensional layout 
graph appeared dimensional laid dimensional version algorithm laid dimensions general look dimensional originally benefit laid dimensions fact orientation vertices appeared random unpleasant 
triangulated triangle appears nearly flat 
graph saw earlier described 
dimensional layouts cube 
dimensional layouts mesh fruchterman reingold 
dimensional layouts prism 
dimensional layouts dodecahedron 
dimensional layouts icosahedron iterated copies attached vertex 
looks 
rendered octahedron internal edges compares icosahedron graphs lines surface 
third projection axis appear threedimensional 
mess 
seen mesh twin cubes rendered dimensions 
davidson harel attempted twin cubes planar increasing cost edge crossings energy function 
failed produce graph drawing force directed placement 
dimensional layouts twin cubes 
dimensional layouts icosahedron variant 
dimensional layouts triangulated triangle drawing resembled perspective projection 
dimensional layout mesh twin boxes choose view normal vector gives perspective projection appears planar 
shown 
required human intervention choose view normal vector 
summary dimensional layout stands falls preference expectations user 
graph really dimensional ought laid dimensions user ought able manipulate fruchterman reingold 
dimensional layouts iterated 
dimensional layouts 
dimensional layouts dimensional layout natural operations choosing viewpoint direction view projection 
grid variant deal problem faced kamada kawai presumably eades disconnected graphs hold connected components fly apart flatten walls example 
graph drawing force directed placement 
planar appearing perspective projection mesh 
disconnected graph graph davidson harel 
planar appearing perspective projection twin cubes 
twin obvious solution mentioned kamada kawai partition graph connected components easily done linear time give component region area proportional size component laid independently kamada kawai implement 
explicitly testing connectedness finding connected components achieve regional effect added benefit grid square variant algorithm 
benefit drawing nearly disconnected graphs twin copies connected single strand 
clique acts repulsive centre pushes fruchterman reingold vertices clique far away stretches solitary connection 
rendering acceptable separation bit exaggerated 
advantage grid variant algorithm distant vertices repel 
get effect separating components see figures 
connected components drift apart eventually get range settle 
connected graph improves similar ways cliques distant distorted influence 
considerable overhead involved placing vertex grid square iteration expect algorithm useful larger graphs 
general annoyance grid variant distinctly better distinctly worse basic algorithm 
grid variant appears produced basic algorithm original eades sketched unnecessary edge crossings 
similar triplet figures 
sure eades drawing depend initial placement 
remaining figures show layout produced basic algorithm left grid variant right 
symmetry large graph 
symmetry large scale requires vertex placed respect vertex vertex calculated forces acting 
tree uniform edge lengths better space laid grid algorithm 
grid algorithm general faster larger graphs requires iterations 
iterations seconds produced layout left iterations seconds produced right 

grid variant layout twin 
grid variant layout disconnected graph graph davidson harel graph drawing force directed placement 
graph eades 
eades drawn eades grid variant layout graph eades primary advantage algorithm speed 
graphs drawn second drawn seconds sparc station 
consider interactive speed 
davidson harel algorithm appears able attain slightly higher level aesthetics flexibility complex graphs 
probably lay graphs dimensional variant grid multi level approach face complexities implementation pay higher penalty running time 
fruchterman reingold 
graph eades 
grid variant layout graph eades 
eades drawn eades major goal algorithm reasonably user having fiddle options change force laws increase number iterations switch dimensional variants 
explicit concept energy detect stopping condition simply iterations time excessive simpler graphs matter smaller graphs take time iteration case algorithm fast 

graph davidson harel 
graph davidson harel 
square grid graph davidson harel fruchterman reingold 
















harary graph theory addison wesley reading ma 
eades tamassia algorithms drawing graphs annotated bibliography networks appear 
eades heuristic graph drawing congressus 
quinn 
force directed component placement procedure printed circuit boards ieee trans 
circuits systems cas 
physics nd edn worth publishers new york 
bentley programming pearls addison wesley reading ma 
greengard rapid evaluation potential fields particle systems mit press cambridge ma 
kamada kawai automatic display network structures human understanding technical report department information science tokyo university february 
kamada kawai algorithm drawing general undirected graphs information processing letters 
davidson harel drawing graphs nicely simulated annealing technical report cs department applied mathematics computer science weizmann institute rehovot israel july 
revised version dated april submitted communications acm 
kirkpatrick gelatt vecchi optimization simulated annealing science 
otten van annealing algorithm kluwer academic publishers boston ma 
hearn baker computer graphics prentice hall englewood cliffs nj 
appel efficient algorithm body simulations siam journal scientific statistical computing 
grover standard cell placement simulated proceedings th design automation conference pp 
breuer min cut placement journal design automation fault tolerant computing 
kernighan aho weinberger awk programming language addison wesley reading ma 
programming language addison wesley reading ma 
stark programming prentice hall englewood cliffs nj 
kamada kawai simple method computing general position displaying threedimensional objects computer vision graphics image processing 
reingold nievergelt dee combinatorial algorithms theory practice prentice hall englewood cliffs nj 
