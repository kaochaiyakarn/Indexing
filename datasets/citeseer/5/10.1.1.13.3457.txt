combining abductive reasoning inductive learning evolve requirements specifications avila garcez russo nuseibeh department computing city university square london hb uk soi city 
ac uk computing imperial college queen gate london sw bz uk ar jk doc ic ac uk computing department open university walton hall milton keynes mk aa uk nuseibeh open ac uk development requirements specifications inevitably involves modification evolution 
support modification preserving particular requirements goals properties propose cycle composed phases analysis revision 
analysis phase desirable property system checked partial specification 
property violated diagnostic information provided 
revision phase diagnostic information help modify specification way new specification longer violates original property 
investigate instance analysis revision cycle combines new tech niques logical abduction inductive learning analyse revise specifications respectively 
specifically event system description system property abductive reasoning ap plied refutation mode verify description satisfies property identify diagnostic information form set examples property violation 
counter examples generate corresponding set examples system behaviours covered system description 
examples training examples inductive learning changing system description order resolve property violation 
accomplished connectionist inductive learning logic programming system hybrid system neural networks backpropagation learning algorithm 
case study automobile cruise control system illustrates approach provides early validation capabilities 
keywords logic analysis requirements specification theory revision abduction inductive learning neural networks hybrid systems 
development requirements specifications inevitably involves modification evolution 
support modification preserving main requirements goals properties propose cycle composed phases analysis revision illustrated 
analysis phase responsible checking number desirable properties system satisfied partial specification 
provides appropriate diagnostic information certain property violated specification 
revision phase change specification spec new partial specification spec making diagnostic information obtained analysis phase possibly combined scenarios provided stakeholders way pec longer violates system property question 
spec diagnosis spec spec cycle requirements specification evolution instance analysis revision cycle uses techniques abductive reasoning analysis phase discover system description satisfies system property ii generate appropriate diagnostic information form training examples inductive learning revision phase change system description violates property utilising machine learning algorithm 
techniques combined counter examples generated abduction derive number training examples inductive learning consistent system property 
description examples abductive description description property learning combining abductive reasoning learning specifically concentrate requirements specifications composed deterministic state transi tion system descriptions system requirements expressed terms system reactions events global system properties safety properties 
abductive reasoning refutation mode analysis property consists attempt identify hypothesis consistent system description entail negation property 
abductive procedure finds hypothesis act counter example validity property 
procedure terminates fails find guarantees system description satisfies property :10.1.1.12.4878
addition hybrid system connectionist inductive learning logic programming system il revise system description examples 
il neural networks system performs inductive learning examples background knowledge case incorrect description backpropagation learning algorithm neural learning algorithm successfully applied industry efficient gradient descent computation 
course kinds reasoning techniques analysis revision model checking belief revision respectively 
considering cycle analysis revision similarities techniques abduction induction facilitate integration activities advocated 
integration steps move analysis revision move back revision analysis 
step analysis mechanism produce training examples revision mechanism 
general examples available learning role analysis guide generation new examples 
see particular section abductive reasoning adequate mechanism doing 
second step revision mechanism produce clear symbolic description incorrect description reduced number examples 
techniques inductive learning cope difficult revision task 
see sequel especially section hybrid learning systems adequate mechanism revision case 
run analysis revision cycle follows 
analysis event system descrip tion system property abductive reasoning mechanism checks satisfies particular attempts identify counter examples property essentially state transitions violate form current system state event associated state 
abduction fails find counter example property know description satisfies revision performed counter example identified informs system current state occurrence detected event take system detected state 
result possibly singleton set training examples may derived automatically example defining alternative transitions consistent property take system different states 
training examples seen state transitions incorporated system description longer violates property 
task revision 
background knowledge training examples inductive learning mechanism change new system description expected violate property incorporate eliminates state transition violates il hybrid system translating initial architecture neural network applying backpropagation learning algorithm order incorporate training examples deriving trained neural network translating trained network back symbolic representation 
revision translation straightforward see section translation trivial 
essential provide explanation capability neural networks form symbolic rules 
task known rule extraction trained neural networks exponential number input neurons worst case works practice considerably large neural networks 
addition note induction guarantee satisfies normally includes generalisation training examples 
result sound complete abductive mechanism analysis phase responsible verifying satisfies reasons process evolving requirements specifications seen analysis revision cycle :10.1.1.12.4878
course due way training examples generated violations properties expect inductive learning guide description satisfies scalable analysis revision cycle abduction induction need concentrate efforts development efficient rule extraction algorithms efficient abductive proof procedures discuss sequel 
result nature problem requirements evolution renders abduction machine learning appealing challenging computational intelligence perspective 
requirements engineering benefit successful abductive reasoning machine learning techniques new efficient computational intelligence algorithms need developed support evolution requirements specifications 
organised follows 
section provides brief abductive reasoning defines abduction refutation mode analyse system properties generate diagnostic information counter examples properties violated 
section briefly introduces inductive learning describes il hybrid learning system revise incorrect system descriptions 
section presents analysis revision cycle 
presents technique generating training examples system behaviours set counter examples obtained analysis shows abductive reasoning inductive learning integrated revise existing incorrect system descriptions examples 
section applies analysis revision cycle case study specification automobile cruise control system 
section reviews related section concludes discusses directions 
abductive reasoning formal reasoning techniques main forms deduction abduction induction 
general terms deduction analytic reasoning process uses set assumptions instances system behaviour rule domain specific description system description infer consequences system property 
contrast abduction constructive reasoning process identifies set assumptions needed order infer description consequence induction synthetic reasoning process produces general rules collection specific instances expanding description covers instances 
deductive reasoning support query reasoning formal specifications abductive reasoning diagnosis planning theory database updates knowledge software specification analysis inductive reasoning performing machine learning tasks different application domains ranging bioinformatics software engineering 
formal framework proposed combines reasoning modes abduction induction support development process requirements specifications iterative phases analysis revision 
section briefly introduce abductive reasoning analysis technique 
section look inductive learning revision technique 
abduction commonly defined problem finding set assumptions explanation added formal description allows goal observation inferred causing contradictions 
logic terms rule domain specific description goal abduction attempts identify set assumptions ja ja consistent 
set required satisfy main properties consist abducible sentences defi nition abducible generally related domain specific notion causality ii minimal 
example simple description composed just rule measles red spots observation red spots john abduction identify single assumption measles john explanation observation 
existing abductive procedures written logic programs assumption goal ground sentence instance 
procedures decidable consider starting goal reasoning backwards ground instances rules included description necessary prove goal 
abduction identify assumptions system allow inference observations system states system description 
event driven system descriptions abduction instance identify trace events system transitions starting initial state prove requirement 
direct abduction reason requirements specifications 
approach abduction refutation mode order enable analysis system descriptions respect system properties ii generation counter examples incorrect system transitions diagnostic information properties violation :10.1.1.12.4878
refutation mode analysis task translated equivalent task showing possible consistently extend description assumptions way extended description entails negation goal equivalence tasks shown theorem 
note context analysis goal global system property safety properties 
definition jo ab abductive framework system description ab set abducibles possibly empty set constraints form 
indicates satisfying conditions ci simultaneously undesirable lead inconsistency indicated 
global system property 
set abducibles ab called counter example property ii consistent iii 
theorem ab framework global system property 
exists counter example property theorem shows analysis global system property defined process detecting counter examples validity property means abduction 
global system properties seen sentences universally quantified time standard theorem proving techniques may computationally expensive 
overcome problem perform reduction step simplifies inference task instantiating system description system property time structure consisting arbitrary time points 
abductive proof procedure applied efficiently reduced ground system description 
theorem shows reduction step sound complete 
proof induction ti accounts analysis global system properties ones considered 
theorem system description global system property 
time structure consisting time points system description ground property time ti 
gto gt gt 
theorem states order show sufficient show property true initial time point initial system state ii ground system description dt property true arbitrary time point ti current system state true ti system state 
summarises important results abduction 
section illustrate part analysis revision cycle 
inductive learning section introduce inductive learning revision technique describe il hybrid learning system 
learning defined change behaviour motivated changes environment order perform better different knowledge domains 
computer program said learn examples respect class tasks performance measure performance tasks measured improves 
importance adding background knowledge form additional information application domain hand order help learning process highlighted 
inductive logic programming ilp example background knowledge part definition learning 
task inductive learning find hypotheses form rules consistent background knowledge explain set examples 
hypotheses definitions domain concepts examples descriptions instances non instances concepts learned background knowledge provides additional information domain 
formally background knowledge positive examples negative examples concept ilp learning searching general hypothesis 
occam razor hypothesis simplest consistent observations 
result general hypothesis assumed simple see discussion occam razor context machine learning 
example domain section assume background knowledge empty set examples called training examples composed instances positive examples measles john red spots john measles dan red spots dan measles susan red spots susan hypothesis training examples measles red spots 
course alternative hypothesis red spots measles 
assume background knowl edge empty contained common sense knowledge domain diseases trigger symptoms 
information clearly eliminate hypothesis red spots measles 
similarly presence training examples observation peter red spots contracted measles achieve result 
illustrates quality selection hypotheses increases amount information domain increases form training examples better background knowledge 
incorrect partial system description part background knowledge needs relax restriction standard ilp hypotheses consistent background knowledge 
clearly inductive learning revision requires capability exploit background knowledge evolving specification parts incorrect 
definition learning captures idea 
definition computer program said learn positive examples negative examples background knowledge respect class tasks performance measure changes performance tasks average greater performance tasks measured occam razor applied comes deciding ought changed case deterministic systems computationally expensive task showing particular negative example reduced task showing obtained changing state recall see training examples tuples composed instance negative example measles peter red spots peter indicate new hypotheses contain measles peter red spots peter 
current system state event state 
case condition definition dropped 
sequel refer negative examples simply counter examples 
different inductive learning techniques applied evolve different forms represen tation symbolic rules neural networks hybrid systems 
symbolic learning ilp learning techniques advantage existing background knowledge reduce search space learning process making efficient 
discussed basic assumption background knowledge correct learned concept simply added knowledge 
contrast neural networks perform inductive learning statistical declarative definitions data dependency encoded weights 
approach enabled neural net works outperform symbolic learning systems different application domains especially set examples noisy despite fact background knowledge 
response results growing interest combining symbolic neural learning systems 
hybrid models inductive learning try exploit certain advantages connectionist paradigms artificial intelligence 
example combining background knowledge neural networks number training examples hybrid system requires learn concept may reduced 
background knowledge encoded set weights neural network subsequent neural learning process changes weights training examples expand background knowledge revise necessary 
connectionist inductive learning logic programming system il hybrid learning system 
il neural networks integrate inductive learning examples background knowledge logic programming 
system composed main modules knowledge insertion revision extraction shown 
insertion module consists translation algorithm takes background knowledge described general logic program generates initial architecture set weights single hidden layer feedforward neural network 
revision module revises background knowledge training neural network examples standard backpropagation 
examples network pairs input output sequences revision background knowledge defined network initial set weights done set examples noisy examples correct 
general logic program finite set rules form 
ln called atom li called literal atom negation atom 
iterative change weights network adapts examples 
extraction module consists extraction algorithm takes trained network generates new symbolic knowledge described form general logic program 
set extracted rules general comprehensible trained network facilitating analysis knowledge refinement process domain expert 
insertion knowledge revision neural network extraction revised knowledge il system translation logic programs neural networks af done follows 
rule ri mapped input layer output layer jf neuron ni single hidden layer jf 
intuitively translation algorithm implement conditions input potential hidden neuron ni exceed ni threshold oi activating ni positive antecedents ri assigned truth value true negative antecedents ri assigned false input potential output neuron exceed threshold oa activating hidden neuron ni connected activated 
example consider logic program 
translation algorithm derives network af hidden neurons encode rules respectively defines values weights ws thresholds os way conditions cl satisfied 
note iv ought fully connected link shown receive weight zero initially 
note example input output neuron af associated atom case backpropagation weight changes done applying gradient descent error surface obtained comparing network output sequences target output sequences 
objective gradient descent minimise error changing network weights 

interpretations sketch neural network logic program 
result input output vector af associated interpretation note hidden neuron ni corresponds rule ri order compute models output neurons feed corresponding input neurons af iterate tp fixpoint operator defined follows 
definition general logic program 
bp denote set atoms occurring called herbrand base mapping defined follows 
interpretation ao 

am ao rule atom ai mapped true atom aj mapped false 
example iterate starting false false obtain true false true true unique model theorem shows il network af obtained translation logic program computes fixpoint operator program 
guarantees correctness translation algorithm 
theorem general logic program exists feedforward neural network af exactly hidden layer semi linear neurons af computes interpretation function mapping atoms true false 
ca model interpretation maps true 
example models ca true false false ca true false true ms ca true true true 
il networks typically activation function input neurons called linear neurons activation function hidden output neurons called semi linear neurons 
activation neuron obtained applying activation function input potential 
input potential input neuron associated interpretation represent true represent false 
input potential hidden output neuron weighted sum activation predecessor neurons network weights thresholds input vector 
network output vector activation output neurons 
say neuron activated activation value greater pre defined minimum activation ami amin 
example consider interpretation program example true true false false false 
input neurons linear activation input neurons respectively 
input potential hidden neuron denotes activation neuron called threshold general wij 
oi wj denotes weight neuron neuron activation hidden neuron 
assume 
case obtain activation repeat process obtain activation hidden neuron ns output neurons obtain activation 
input potential ia output neuron oa 
obtain 
result ami say output neuron activated input vector 
words true true true false false false 
clearly activated rule 
similarly ob output neuron activated input vector fact sequel af denote output vector obtained network af input vector setting learning process changing weights initially defined order adapt iv new examples form input vectors corresponding output vectors 
example example new training example stated matter fact false true true false false false weights olaf changed order revise rule originally interest semi linear derivable activation functions efficient gradient descent learning algorithm backpropagation applied directly networks contain neurons 
application hand contains degrees freedom training examples tive learning algorithm may simply examples 
behaviour known overfitting 
ultimate measure success inductive learner approximates training examples accounts unseen examples generalises new cases 
order evaluate generalisation performance inductive learning algorithm application set examples commonly partitioned training set test set 
training set learning problem description test set training provides estimate description generalisation performance 
process randomly partitioning set training examples repeated times provide statistically valid estimate 
learning evaluation performed final task il perform knowledge extraction trained neural network 
typically original network jf neat architecture trained network allowed fully connected 
example learning network different weights 
want impose restrictions learning process task knowledge extraction challenging especially case large networks 
rule extraction trained networks extensive research topic right see comprehensive survey 
intuitively extraction task find relations input output concepts trained network sense certain inputs cause particular output activated 
neglecting interesting details il performs rule extraction simply presenting trained network jf different input sequences generating rules output sequence obtained 
core il rule extraction algorithm concerned selection candidate input sequences iv network described correct compact set rules 
evolving specifications section describe abductive reasoning inductive learning combined respectively analyse revise specifications 
automated formal reasoning process interleaves analysis revision phases eventually stopping violations system properties detected providing revised specification consistent properties 
follows describe combined abductive inductive reasoning techniques detail illustrate run analysis revision cycle intentionally corrupted description simple electric circuit 
recall concerned state transition descriptions deterministic systems 
counter examples combine single automated decision procedure tasks validating system descriptions respect system properties generating appropriate diagnostic information property violated 
procedure uses abductive reasoning refutation mode 
means problem finding system description satisfies system property translated equivalent problem showing possible find set state transitions consistent entails negation logic terms discussed section abductive procedure shows failing find set abducibles consistent hand abductive procedure finds set incorrect state transitions acts set counter examples validity counter examples describe particular system environmental events occurring particular contexts classes system current states 
practice done efficiently applying abduction ground system description considering property number integrity constraints form 
arbitrary current state 
illustrate abduction analysis provide simple example 
consider electric circuit consisting single light bulb switches switcha connected series 
assume partial possibly incorrect description electric circuit includes rules rl formalised propositional logic programming prime notation formal specifications unprimed conditions denote true current state primed conditions denote true state 
switcha light light light light switcha switcha example rule read current state switcha light event happens light state 
rules thought derived state transition diagrams possible events system 
flick light flick flick state transition diagrams light bulb example 

system properties description satisfy switches supposed connected series light switcha assume initial state switcha 
order check abductive procedure assumes true arbitrary current state checks true arbitrary state 
starting applies backward reasoning current goal rules default assumption condition preserves truth value changed occurrence event 
refer change assumption 
example rule switcha switcha capture change assumption state switcha 
rule need lower priority rule switcha true apply derive switcha derive switcha 
alternatively rule seen domain property satisfied system description 
negated property instantiated arbitrary state switcha light re written disjunctive normal form switcha light light prove abductive procedure checks proved description point procedure arbitrary choice say taken intermediate goal 
prove procedure prove switcha light consider condition 
rule description defines switcha backward reasoning step description applied 
procedure may change assumption conclude possible explanation having switcha state simply current state event happening 
point procedure constructs temporary set assumptions switcha tries prove account set second condition light prove light reasoning backwards rule case procedure generates abductive phase additional temporary assumptions switcha light checks assumptions consistency 
consistency check clearly fails includes new assumptions include 
attempt prove light rejected abductive reasoning phase starts considering rule second attempt similar procedure generates new additional assumptions light time round consistent assumptions accepted 
result possible explanation possible explanation switcha possible explanation light conditions considered abductive procedure 
repeat process failing find explanation violation conclude satisfied theorem 
contains current system state events partial description lead system new state switcha light satisfied switcha light 
consequence addition theorem time points ti ti need analysed comes finding counter examples validity capture diagnostic information obtained abductive analysis set kj switcha light switcha light states switcha light event happens system new state light switcha violating system property 
general case pi non empty set abducibles abductive proof procedure explanations atoms am am 
pi 
pj ao 
am am 
generating training examples crucial aspect analysis revision cycle diagnostic information identified analysis phase generate system behaviours covered system description training examples 
counter example informs state transitions correct 
considering state transition defined current state event state include information alternative transitions components changed 
instance want assume current state needs changed current state event take system different state 
modifications plausible 
need decide changes consider alternative values changes consider 
address item considering changes state diagnosed incorrect state transition 
address item arbitrarily selecting alternative new states consistent property follows term entry configuration refer current state event state transition exit configuration refer state transition 
diagnostic information pi generated abductive procedure informs entry configuration produce exit configuration pi 
electric circuit example switcha light produce pi switcha light words pi represents incorrect state transition shown 
light flick incorrect state transition counter example light bulb example 
way solving problem sure entry configuration produces exit configuration different pi assuming system description deterministic consistent set training examples correct state transition 
definition partial system description system property 
entry ration pi exit configurations 
set called training example exists atom oj oj ii consistent 
returning electric circuit example flip switcha switcha ob taining switcha light flip light light obtaining switcha light 
assume false obtain switcha light inconsistent switcha light training example definition 
similarly switcha light training example 
take shown 
switcha light switcha light potential training examples checked consistency number atoms partial description practice flip atom time done training example derived 
flick alternative state transition training example light bulb example 
interesting noting generation training examples diagnostic information attempts find alternative state transitions incorrect state transition 
result alternative current transition 
concentrating efforts choose best alternative highly domain dependent task analysis revision framework simply select iterate 
analysis revision cycle expected eliminate incorrect transitions eventually 
approach appealing machine learning perspective specially data starved domains 
inducing new specification far seen desirable property system may checked partial system description number counter examples violated 
information generate set state transitions covered system description property longer violated 
terms machine learning set seen training examples learning mechanism applied 
defining new state transition rules appropriately revising existing ones new system description expected cover transitions set training examples 
position induce revised description background knowledge 
recall ultimate goal find description case empty indicating analysis revision cycle terminate 
connectionist inductive learning logic programming system il induce il hybrid machine learning system uses backpropagation neural learning algorithm successfully applied industry underlying learning technique 
section il integrates inductive learning examples background knowledge logic programming main modules knowledge insertion revision extraction 
follows illustrate run il electric circuit example 
discussion choice il comparison machine learning techniques section 
module il responsible translating rules partial description initial architecture neural network iv 
mapping rule ri input layer output layer jf hidden neuron ni 
example rule switcha light flick light mapped jv simply connecting input neurons representing concepts switcha light flick hidden neuron connecting hidden neuron output neuron representing concept light setting weights connections way output neuron representing concept light activated true input neurons representing switcha light flick respectively deactivated false deactivated false activated true reflecting information provided rule shows neural network obtained rules 
note output neuron light activated hidden neuron input neurons light deactivated input neuron activated corresponding rule light flick light 
initial network positive weights indicated solid lines represent positive concepts flick negative weights indicated dotted lines represent negative concepts switcha light 
discussed section il translation algorithm responsible defining weights network output neurons perform concepts represented hidden neurons connected network hidden neurons perform concepts represented input neurons connected 
example output neuron light activated activated 
hidden neuron activated light deactivated see dotted lines activated 
similarly hidden neuron activated light deactivated activated 
logic terms light true light false true corresponding rule light false true corresponding rule 
module il adapting weights iv encodes possibly incorrect background knowledge training examples 
training example pair containing input sequence target output sequence iv see 
network fully connected addition changes background knowledge completely new rules learned 
input sequence network corresponding output sequence iv calculated 
output different target error ew depends current set weights network calculated 
typically ew ti oi 
case backpropagation gradient descent method applied guiding iterative changes ew minimised 
process network output sequence expected approach target sequence happens training examples ew close zero learning process concluded 
section training examples switcha light flick switcha light 
result network jv input neurons light output neurons light order pair training example iv indicate true indicate false module il responsible extracting knowledge encoded trained network 
uses rule extraction algorithm 
rule extraction commonly accepted way provide neural networks explanation capability mapping network set rules 
extraction algorithms treat network black box try capture function computed querying network certain input sequences obtaining corresponding output sequences 
algorithms choice represent false lead faster convergence learning process cases 
reason update weight connected input variable zero corresponding variable zero training pattern 
output sequence input sequence network obtained description decompose network subnetworks look set weights try capture general rules network pruning clustering weights 
typically methods treat network black box produce high quality rules efficient methods decompose network 
hand methods decompose network may produce low quality rules example result pruning network weights 
words trade quality extracted set rules measured terms correctness readability completeness complexity rule extraction algorithm employed 
il deals trade guaranteeing correctness extraction algorithm information weights reduce number input sequences queried average 
defining partial ordering set input sequences guides querying process 
example network example trained queries input sequence obtains output sequence 
equivalent logic programming rules ex ea having antecedent consequents output neurons activated case light general case input neurons output neurons bm order input sequence corresponding output sequence rules antecedent ag 
derived number output neurons activated input sequence shown output sequence 
example ag 
bl derived rule 
switcha light flick flick light switcha light flick flick switcha switcha light flick flick matter fact input sequence flick true produces output sequence trained jf 
kind input sequence normally need queried il extraction algorithm information obtained easily inspecting weights trained network 
worst case input sequences need queried number network input neurons 
practice queried general extraction algorithm halted desired degree accuracy achieved extracted rule set 
returning electric circuit example il extraction produced additional rules switcha light light switcha light flick light es switcha switcha note subsumes subsumes 
result simplified final set extracted rules trained jf contains 
interesting noting specialisation background knowledge rule clearly rule specifying system fact causing property violation 
suggestion il requirements engineer result learning add condition switch needs light come switch 
analogous change rule added require run analysis revision cycle derivation new training example cater 
revision guarantees longer explanation violation domain property guarantee violated new description regard process evolving specifications cyclic specification refined cycle domain properties system provably satisfied case analysis phase produce new training example 
case study applied analysis revision cycle evolve specification automobile cruise control system 
different specifications system literature 
case study considered deterministic partial state transition specification system possible states time inactive cruise override 
environmental system variables considered specification ignition switch cruise control lever automobile speed 
events environment cause changes values domain system variables may cause system change state values event conditions 
example system state inactive ignition engine running brake event moving cruise control lever activate position supposed take system state cruise 
shows state transitions event pressing brake take system state cruise state override provided automobile going fast event moving lever activate take system state override back state cruise provided brake engaged 
cruise control system safety properties states system state cruise ignition switch engine running brake engaged 
property violated 
partial state transition implicitly assumes conditions events satisfied system stay current state 
result system state cruise brake engaged automobile going fast system remains state cruise violating safety property 
incorrect transition depicted diagnostic information derived abduction 
process deriving training examples seen simply changing state incorrect transition points 
case study see sequel incorrect transition turned transition illustrated system state cruise brake engaged automobile going fast system moves state override 
need accommodate consistently original specification 
case study done changing conditions original state transition cruise override illustrated compare 
toofast happens brake toofast happens brake brake happens activate toofast happens brake brake happens activate happens brake brake happens activate toofast happens brake brake happens activate analysis revision state transitions follows explain detail analysis revision cycle achieve 
logic programming implementation original cruise control system formalisation :10.1.1.12.4878
state transition formalised follows acl 
cn sc represent respectively current state transition denotes event transition ci denote conditions event event transition condition 
rule defines transition system current state different state event happens conditions event true 
rule counterpart rule express transition occurs current state longer 
true 
addition event rules express effect associated variable 
example event brake rule brake happens brake brake introduced 
domain properties considered example property time cruise control lever exactly positions activate deactivate resume 
rules rl part logic programming representation case study lrule rs defines fully state transition cruise override partially illustrated diagrams 
override brake activate happens activate cruise brake happens brake brake cruise ignited running toofast brake happens brake override ra activate happens activate activate set properties system description verify point time means exclusive logical operator means 
inactive cruise override ignited inactive ignited running activated pa cruise ignited running brake override ignited running ps logic programming representation properties ps converted set integrity constraints ic 
rationale conversion example desirable property system having desirable lead inconsistency 
course having lead inconsistency indicated 
similarly desirable property having imply desirable property having imply 
example conversion property gives integrity constraints ic 
cruise ignited ic cruise running ic cruise brake 
conversion ps derives integrity constraints ics 
override ignited ics override running 
run analysis revision cycle illustrate run analysis revision cycle checking property verified 
discussed section abductive phase tries prove negation arbitrary state system 
instance ic tries prove cruise brake 
prove brake reasoning backwards considers rule starts constructing temporary set assumptions brake happens brake 
tries prove cruise 
possibility change assumption assume cruise true current state prove transitions leading state happen 
case rule system override applied 
prove procedure fail proving consistently ao conditions 
ignited running true integrity constraints ic 
ic respectively violated 
toofast proved fail simply considering assumption fast 
point abductive procedure stops generating counter cruise ignited running toofast brake happens brake cruise brake number training examples obtained instance cruise false know property override inactive true 
choose override property ps ignited running 
choose inactive property ignited running ignited activated 
choose property ignited 
possible new training examples cruise ignited running toofast brake happens brake override ignited running brake cruise ignited running toofast brake happens brake inactive ignited running brake cruise ignited running toofast brake happens brake inactive ignited activated brake cruise ignited running toofast brake happens brake ignited brake point recourse knowledge domain expert choose 
alternatively sophisticated heuristics 
example try quantify potential property violation training example 
instance inconsistent case constraints regarding override see property possibly violated states ignited running true 
note counter examples generated running abductive procedure applying backward reasoning rules system description 
hand constraints regarding inactive see property violated running true activated undefined 
assumed activated true inactive running activate violated 
case say preferred potential property violation 
definition metric guide choice mutually exclusive training examples progress 
discussed section simply select alternative state transition obtained consistent system properties 
training example position apply il order translate system description initial architecture neural network train examples extract revised description trained network 
cruise ignited running toofast brake happens brake override ignited running brake shows small part network rules change assumption cruise represented 
change assumption encoded network rules priority relation follows 
case cruise change assumption states definition rdf cruise cruise rule ri system description supersedes raf 
rule rs example supersedes raf rs applicable antecedent holds raf hold 
case say priority raf write rdf 
priority relations implemented neural network negative weights connecting hidden neurons output neurons see 
raf example implemented network connecting hidden neuron output neuron cruise making sure activated cruise deactivated rule raf blocked means negative weight represented dotted line 
summarising change assumption represented neural network adding rule form lower priority rules case value fast true fast true value running true running true 
network trained backpropagation 
il rule extraction algorithm cruise ignited cruise override brake rde running toofast brake happens brake part network cruise control system produced rule cruise ignited running brake happens brake override rule extraction indicates il combined background rule rs training example determine truth value fast irrelevant override done changing background rule rs new rule anticipated state transition 
tool support discussion analysis phase analysis revision cycle uses abductive logic programming proof procedure 
tool implemented prolog uses logic program conversion specification ii abductive logic program module described 
revision phase analysis revision cycle uses modules knowledge insertion revision extraction il system implemented choice appropriate learning technique task revision important 
desirable push button technique technique require user specific knowledge inductive learning 
addition comparison problems machine learning faced limited number training examples may compromise accuracy results learning process 
hand background knowledge domain specific prior information may useful compensate reduced number training examples 
background knowledge may incorrect partial specifications analysis revision evolving cycle 
result traditional techniques inductive learning perform training examples adequate 
includes case reasoning models artificial neural networks 
left inductive logic programming ilp techniques ii hybrid neural symbolic systems iii explanation learning ebl algorithms see 
hybrid systems appropriate far dealing incorrect background knowledge theory refinement concerned 
hybrid systems normally push button techniques typically traditional neural learning algorithms backpropagation require adaptation learning rate trial error 
hand explanation learning algorithms require interaction user appropriate presence incorrect domain knowledge rely heavily correctness background knowledge order generalise rules fewer training examples 
strength ilp lies ability induce relations due expressive language ilp systems significant limitations terms efficiency due extremely large space possible hypotheses needs searched 
presence incorrect background knowledge problem may intractable 
case study indicated choice training examples important better choice faster convergence system specification violate system property 
generation training examples guided efficiency analysis revision cycle improved choice training examples 
may domain dependent require help expert 
seen heuristics applied decide mutually exclusive training examples 
important extension currently investigated different heuristics help generation training examples 
related approach integrates formal techniques analysing revising requirements specifications 
techniques literature address activities independently 
formal techniques developed analysing requirements specifications theorem proving model checking declarative logic approaches 
techniques theorem proving decidable terminating 
hand techniques model checking facilitate automated analysis generation counter examples errors detected 
provide counter examples long traces system executions 
contrast abductive procedure generates counter examples individual state transitions 
facilitates mapping counter examples training examples handled inductive learning 
declarative logic approaches analysis van lamsweerde particularly relevant 
describes goal driven approach requirements engineering obstacles part specification leads negated goal 
approach similar abductive analysis technique notion goal similar notion system property notion obstacles analogous notion abducibles 
abductive decision procedure differs goal regression technique uses grounded goals procedure decidable integrity constraints validate properties efficiently :10.1.1.12.4878
examples application abduction software engineering tasks 
variety logic formal techniques developed revising requirements speci order resolve inconsistencies 
revision process seen techniques violation property example inconsistency system description system property 
belief revision default theories suggested formal approach resolving incon arising evolution requirements specifications 
inconsistency detection implicit definition belief revision operator process single shot revision 
contrast approach provides explicit analysis inconsistency abductive reasoning cyclic interactive process revision 
existing techniques revising requirements specifications see perform revision adding deleting existing derivable requirements 
contrast inductive learning revision process enables evolution specifications acquisition genuinely new requirements scenarios generalisation 
inductive learning approaches revision van lamsweerde particularly relevant 
describes inductive goal inference procedure elicit new requirements sets operational scenarios 
approach uses symbolic inductive learning background knowledge 
learning aimed elicitation new requirements scenarios provided user 
differently focus learning technique generation new requirements order resolve detected errors specification 
training examples generated analysis phases learning process performs revision incorrect partial specification 
learning techniques software engineering applications inference process models process traces validation air traffic control requirements model 
seen process systematically changing requirements specifications supported cycle composed analysis phase revision phase abductive inductive reasoning applied respectively 
approach provides theoretical foundations techniques development logic methods requirements specifications 
contributes management inconsistency requirements specifications 
idea inconsistency seen trigger actions shows learning actions 
extension investigate techniques machine learning revising requirements specifications 
include extensions inductive logic programming knowledge artificial neural networks kbann explanation neural networks ebnn hybrids 
experiments number real world problems allow perform detailed technical evaluation techniques draw general type requirements specifications technique appropriate 
extension analysis revision cycle elicit new requirements operational scenarios interesting direction pursue scenarios seen examples system components environment users interact provide system level functionality 
abduction induction naturally integrated analysis revision cycle backpropagation inductive learning necessarily comply concept minimal change common area belief revision 
words changing description accommodate new property backpropagation necessarily change rules possible depending initial description minimal change clearly provide faster convergence analysis revision cycle desirable specification new incremental learning algorithm neural networks satisfy concept minimal change chapter 
empirical comparison algorithm backpropagation regards rate convergence analysis revision cycle highly desirable 
analysis abductive derivation diagnostic information assumes system proper ties correct 
specifications evolve system properties need revised 
example diagnostic information validated stakeholders counter example prop erty indicate property wrong analysis revision cycle needs re start new set system properties 
extension investigate analysis revision cycle presence potentially incorrect system properties 
gardenfors makinson 
logic theory change partial meet contraction revision functions 
journal symbolic logic 
andrews diederich 
survey critique techniques extracting rules trained artificial neural networks 
knowledge systems 
bharadwaj heitmeyer 
model checking complete requirements specifications abstraction 
technical report nrl naval research lab 
bose liang 
neural networks fundamentals graphs algorithms applications 
mcgraw hill 
editors 
knowledge neurocomputing 
mit press 
avila garcez gabbay 
metalevel priorities neural networks 
frasconi gori sperduti editors ecai workshop foundations connectionist symbolic integration pages berlin germany 
avila garcez gabbay 
symbolic knowledge extraction trained neural networks sound approach 
artificial intelligence 
avila garcez gabbay 
neural symbolic learning systems foundations applications 
perspectives neural computing 
springer verlag 
avila garcez russo nuseibeh kramer 
analysis revision cycle evolve requirements specifications 
proceedings th ieee international conference automated software engineering ase pages 
avila garcez 
connectionist inductive learning logic programming system 
applied intelligence journal special issue neural networks structured knowledge 
easterbrook 
learning inconsistency 
eighth international workshop software specification design pages paderborn germany 
flach kakas 
relation abduction inductive learning 
gabbay kruse editors handbook defeasible reasoning uncertainty management systems volume abductive reasoning learning pages 

gabbay hunter 
making inconsistency respectable logical framework inconsistency reasoning 
part position 
fundamentals ai research pages 
springer verlag 
lavrac 
conditions occam razor applicability noise elimination 
someren widmer editors proceedings european conference machine learning pages prague czech republic 
garg 
process programming hind sight 
proceeding pages melbourne 
gelfond lifschitz 
stable model semantics logic programming 
proceedings fifth logic programming symposium pages 
ghezzi nuseibeh editors 
special issue ieee transactions software engineering managing inconsistency software development 
november 
haykin 
neural networks comprehensive foundation 
prentice hall 
abstraction model checking detect safety violations requirements specifications 
ieee transaction software engineering 
hirsh noordewier 
background knowledge improve inductive learning case study molecular biology 
ieee expert 
hunter nuseibeh 
managing inconsistent specifications reasoning analysis action 
transactions software engineering methodology cm press pages 
kakas kowalski toni 
role abduction logic programming 
gabbay hogger robinson editors handbook logic artificial intelligence logic programming volume pages 
oxford science publications 
kakas michael 
integrating abductive constraint logic programming 
proceedings th international conference logic programming pages tokyo japan 
kirby 
example nrl scr software requirements automobile cruise control monitoring system 
technical report tr wang institute graduate studies 
lavrac dzeroski 
inductive logic programming techniques applications 
ellis horwood series artificial intelligence 
lloyd 
foundations logic programming 
springer verlag 
west 
automated refinement domain theory 
technical report school computing mathematics university uk 
west 
automated refinement domain theory 
journal automated software engineering special issue inductive programming partridge editors 
menzies 
applications abduction knowledge level modeling 
international journal human computer studies 
michalski 
learning strategies automated knowledge acquisition 
computational models learning symbolic computation 
springer verlag 
mitchell 
machine learning 
mcgraw hill 
mitchell thrun 
explanation learning comparison symbolic neural network approaches 
tenth international conference machine learning amherst ma 
mooney zelle 
integrating ilp ebl 
sigart bulletin volume pages 

muggleton raedt 
inductive logic programming theory methods 
journal logic programming 
nuseibeh easterbrook russo 
making inconsistency respectable software development 
journal systems software 
owre formal verification fault tolerant architecture prolegomena design pvs 
ieee transactions engineering 
quinlan 
induction decision trees 
machine learning 
rumelhart hinton williams 
learning internal representations error propa gation 
rumelhart mcclelland editors parallel distributed processing explorations microstructure cognition volume pages 
mit press 
russo miller nuseibeh kramer 
abductive approach handling inconsistencies scr specifications 
proceedings rd icse workshop intelligent software engineering limerick 
russo miller nuseibeh kramer :10.1.1.12.4878
abductive approach analysing event requirements specifications 
technical report tr department computing imperial college 
russo miller nuseibeh kramer 
abductive approach analysing event requirements specifications 
proceedings th international conference logic programming iclp pages copenhagen denmark 
satoh 
computing minimal revised logical specification abduction 
proceedings international workshop principles software evolution pages 
shaw 
comparing architectural design styles 
ieee software 
thrun 
explanation neural network learning lifelong learning approach 
kluwer acad publishes boston ma 
thrun bala bloedorn bratko cestnik cheng de jong dzeroski fahlman fisher kaufman keller kononenko michalski mitchell reich vafaie van de wenzel zhang 
monk problems performance comparison different learning algorithms 
technical report cmu cs carnegie mellon university 
towell shavlik 
knowledge artificial neural networks 
artificial intelligence 
kramer 
workbench synthesising behaviour models scenarios 
proceeding ieee international conference software engineering icse 
van lamsweerde darimont letier 
managing conflicts goal driven requirement engi neering 
ieee transaction software engineering november 
van lamsweerde 
inferring declarative requirements specifications opera 
tional scenarios 
ieee transactions software engineering special issue scenario management december 

logical framework modeling reasoning evolution requirements 
proceedings third ieee international symposium requirements engineering pages 
cycle requirements specification evolution combining abductive reasoning learning il system sketch neural network logic program state transition diagrams light bulb example 
incorrect state transition counter example light bulb example 
alternative state transition training example light bulb example network af obtained description analysis revision state transitions part network cruise control system spec diagnosis spec spec description examples reasoning description property learning description insertion knowledge revision examples neural network extraction revised knowledge interpretations flick light flick flick light flick light flick output sequence input sequence toofast happens brake brake happens activate toofast happens brake toofast happens brake brake happens activate happens brake brake happens activate toofast happens brake brake happens activate cruise cruise ignited running fast override brake 
brake happens brake 
