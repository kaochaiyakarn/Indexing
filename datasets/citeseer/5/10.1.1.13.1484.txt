design patterns aspects modular designs seamless run time integration robert ralf mmel matthias wagner networking lab communications laboratories europe munich germany department software engineering cwi centrum voor wiskunde en informatica kruislaan nl sj amsterdam nl 
solutions proposed original design pattern literature shaped techniques language deficiencies object oriented software development 
new modularity constructs composition transformation mechanisms offered aspect oriented programming address deficiencies object oriented modeling 
suggests classical design pattern solutions revisited 
point aspect oriented programming allows alternative representations proposed solutions better solutions place 
advocate native aspect oriented approach design patterns emphasizes improving design pattern solutions development run time 
simple effective method analyze describe different solutions variation points fixed parts variable parts optional glue employing dynamic run time weaving 
patterns pattern languages ways express best practices designs 
capture experience way possible reuse 
design patterns introduced mainly deal static dynamic relationships objects object oriented programming oop software development 
pattern part rule expresses relation certain context certain system forces occurs repeatedly context certain software configuration allows forces resolve 
solutions proposed original design pattern literature shaped techniques language deficiencies oop 
advent aspect oriented programming aop new techniques mechanisms software composition adaptation suggest solutions revisited reconsidered 
attempts reshape design pattern solutions aop initiated 
carry challenge clarify aop allows alternative representations existing solutions better solutions respective problems 
particular exemplify avoid indirection layer support prevent loss object identities 
pattern software design studied field dynamic object oriented programming languages environments 
approach centered simple analysis fixed variable parts system design 
compared previous add dynamic run time weaving set development practices 
turns crucial meet adaptability requirements certain design patterns 
examples described implemented squeak aspects method call interception 
rest organized follows section emphasize differentiation aop representations design pattern solutions native aop solutions addressing problems 
section prepares solution space explaining design problems terms variation points absence 
sections discuss different solutions corresponding design problems 
section reiterate realization variation points object oriented techniques 
section reorganize solutions aspect oriented fashion feasible section show native aop solutions improve object oriented design practices 
section summarize conclude 
common problems different solutions consider opportunities aop respect design patterns 
design patterns offer solutions problems encountered object oriented software development 
course problems solutions 
meet certain requirements better depending context introduced 
aop general aims address crosscutting separation concerns particular implementations aspectj aspects extend object oriented programming languages environments way new modularity constructs code composition mechanisms available 
extensions enable system transformation instrumentation carried development run time 
representation design pattern solutions solutions need reconsidered 
design pattern solution aop representation design pattern solution design problem native aop solution different solutions different approaches illustrates common design problem lead different solutions 
differentiate original solution proposed design pattern aspect oriented representation native aop solution 
exemplify differentiation design patterns visitor pattern discuss issues extra levels redirection decorator pattern discuss problems additional layers behavior 
missing variation points focus design problems solutions concerned variation points 
variation points design practices essential systems allow parts evolve different pace independently 
previously separated fixed variable parts re joined form desired system 
practice system parts conceptually variable nature entangled system design separated explicitly stable parts variation points 
lack explicit variation points modular crosscutting compromises system adaptability evolution 
dev time run time fixed part fixed part variable part variable part missing variation points development run time sketches lack variation points missing development run time 
general lack explicit variable parts development indicates non modular design 
absence variable parts variation points beneficial run time respect system performance hard developers reason evolve systems 
desirable allow comprehensibility form developer point view run time efficiency instance 
point design problems provide solutions subsequent sections 
set objects multiple responsibilities elements object structure perform unrelated operations tangling 
defining operations relevant classes implies spread functionality locations scattering 
addition interfaces supported classes get broadened changes particular operation modification removal addition new turn cumbersome error prone 
leaf value node expression operator left right different operations expression trees class diagram illustrates different operations generating textual representation expression tree representation infix postfix prefix notation spread classes node expression leaf 
adding fourth operation instance calculation value represented expression tree requires changing classes 
example non identified fixed part system node class hierarchy 
non identified variable parts operations performed expression tree 
instances modified behavior extending behavior base system additional instance specific responsibilities static inheritance feature laden conditional code usually located base classes leads inflexibility 
inflexibility observable fact additional responsibilities circumstance apply known upfront development time limited extensibility 
additional instance specific responsibilities added removed easily run time limited adaptability 
font emphasis initialize font emphasis initialize bordered font emphasis initialize bordered iftrue iffalse ways extend bordered strings shows ways extend squeak morphic system allow bordered strings rendering 
functionality extended subclass actual approach taken squeak morphic system 
changing instance specific behavior require instance migration class probably involving expensive low level operations squeak 
extension done conditional code 
flag bordered boolean value consulted affected operations depending value rendering string happens bordered regular 
conditional code inserted upfront development 
fixed part system resembled non identified variable part additional behavior allowing bordered strings 
design pattern solutions design patterns help identify variable parts system design 
allow factor variable parts base system introduce glue join fixed variable parts designated variation points 
explicit separation concerns easier reason system evolve concerns independently 
addition design patterns specifically aim run time behavior adaptation 
separation variable fixed parts composition realized indirection layers support variation points 
increasing flexibility indirection layers require additional computation coordinate message exchange parts decoupled 
unfortunately special runtime analysis optimization normally implies decrease system performance decrease comprehensibility 
dev time run time fixed part glue variable part fixed part glue variable part variation points development run time sketches situation variation points separation fixed variable parts development run time 
note fixed part completely independent variable part glue code needs available fixed part supporting integration interaction 
fact standard solutions offered design patterns suggest glue code supplied developer explicitly 
requires developer fixed part design anticipate prepare variations expected 
complex designs portion system behavior may distributed multiple variation points 
requires developers coordinate changes adjustments system locations time 
crosscutting collective behavior localized module divided 
revisit solutions visitor decorator patterns shaped basic object oriented programming model 
point deficiencies related indirection layers object composition realize variation points 
visitor intent visitor design pattern localize definition operation performed elements object structure allow definition new operations changing classes elements operate 
node leaf value self expression operator self left right visitor design pattern applied expression trees application visitor design pattern generate textual representations expression trees illustrated 
visitors heavily rely double dispatch determine concrete class elements visited 
classes hierarchy provide behavior expressing tree traversal extensions node class hierarchy offer double dispatch support 
traversal double dispatch behavior provided explicitly developer 
double dispatch run time problematic performance critical settings 
node class hierarchy clearly resembles fixed part design subclasses amount variable part 
method node class hierarchy class constitute glue code needed enable unlimited set operations expression trees 
visitor glue relies double dispatch determine concrete class elements visited 
addition glue typically describes traversal behavior operations 
double dispatching scheme just difficult understand glue code fixed part entangled opposed definition concerns dedicated localizing modules 
decorator intent decorator design pattern allow attachment additional responsibilities objects dynamically provide flexible alternative subclassing extending functionality 
component font emphasis initialize font emphasis initialize component iftrue super iffalse component perform selector arguments component component decorator design pattern utilized bordered string morph extension depicted decorator design pattern utilized instance specific behavior supplementing borders display rendering 
added removed individual instance 
string morphs constitute fixed part bordered string decorators variable part code wrapping string morphs bordered string decorators glue shown 
code wrapping string morph components bordered string decorators constitutes glue 
decorator gives advantage able change instance behavior dynamically instance base disadvantage creating different identities original object decorated object wrapped 
unaware object decorated lead unexpected run time behavior resulting system failure 
furthermore decorating requires forwarding non decorated operations problematic respect run time performance system evolution 
aop representations design pattern solutions design pattern solutions originally motivated pure object oriented best practices beneficial attempt aspect oriented representation advantage new language extensions code composition mechanisms introduced aop 
aspect oriented modularity constructs yield improvements terms better code locality reusability composability implementation modularity comprehensibility 
dev time run time fixed part variable part fixed part glue variable part transparent glue code placement run time depicts aop representation design pattern solutions separate fixed variable parts system requiring developers explicitly provide glue code front 
assume glue code described implicitly variable part development inserted system aspect weaver compile load run time 
glue code implementing indirection layers double dispatch original design pattern solutions lead run time performance degradation 
visitor implementation visitor design pattern realized straightforwardly demonstrated 
fixed part system represented node class hierarchy need prepared 
class hierarchy stays proposed original visitor pattern solution 
aspect responsible introducing double dispatch code base system 
class hierarchy similar suggested original solution essentially section 
node leaf value expression operator aspect introduce leaf introduce expression receiver receiver left right node leaf leaf value value receiver self expression expression operator operator left right receiver self system application aspect weaving aspect system double dispatch behavior gets distributed node class hierarchy class hierarchy behaves exactly discussed section 
unaffected node class hierarchy represents fixed part die traversal behavior introduced class hierarchy variable part aspect glue code 
plain node class hierarchy represents fixed part design traversals introduced class hierarchy represent alternative variable parts aspect localizes glue code double dispatch 
note solution modular initial approach aop representation original design woven class hierarchy behaves exactly original pattern solution 
system contains controversial double dispatch mechanism system transformation performed aspect weaver 
decorator meaningful aop representation decorator design pattern structure 
variation point properly manifested mere component interface variable parts including dynamic plug properties realized plain object composition 
simply need localize glue code weaved base system 
pointed attempt advice implementation decorator intercepting method calls decorated object perform extra functionality bordered string morphs 
design faithful dynamic manipulation properties decorator strictly flexible suggested decorator pattern intent 
section show decorator realized native aop solution employing aspects 
native aop solutions possible apply aop represent design pattern solutions motivated constrained object oriented programming desirable aop newly introduced constructs mechanisms improve solutions 
show aop utilized avoid certain drawbacks model bloat messaging overhead caused indirection levels contextdependent change identity consequence placing intermediate objects mediating instances 
dev time run time fixed part variable part fixed part variable part transparent inclusion variable system parts main property native aop solution allows developers separate concerns clearly deal separately time development fixed variable parts system combined seamlessly indistinguishable run time 
glue code provided developers 
integration fixed variable system parts done implicitly weaving 
consequence developers improve implementation modularity representing selected concerns locally run time performance affected problems messaging overhead loss identity symptoms object schizophrenia introduced approaches discussed 
elimination glue code simplifies design implementation 
subsections illustrate new opportunities native aop solutions 
visitor propose native aop solution visitor problem utilizing double dispatch isolate traversal behavior reconnect behavior elements traverse done aspects introduce traversal behavior directly elements classes 
approach complexity added visitor eliminated 
depicts aspects responsible introducing element traversal code class tree transformation performed aspect weaver 
outcome transformation node class hierarchy similar explained section maintaining advantages carrying problems 
developers cleanly separate element traversal code actual elements separation run time anymore 
design modular particular traversal operation localized dedicated aspect relevant classes 
fact absence double dispatch protocol implies simpler modular design 
run time separation base system traversal concern anymore implies elimination associated messaging overhead 
node hierarchy represents fixed part system various aspects correspond alternative variable parts 
result class tree transformation mirrors tangled node class hierarchy section making additional glue code obsolete 
leaf value aspect aspect introduce expression receiver self receiver self op receiver self second node expression operator aspect introduce leaf introduce leaf introduce leaf left right receiver self value printstring aspect introduce expression op second receiver self value printstring receiver self value printstring leaf leaf value value aspect introduce expression second op node aspect injecting visitor behavior expression expression operator operator decorator intent decorator realized native aop solution 
take advantage aspects support dynamic instance specific behavior 
object composition wrap original object behavior modify behavior actual instance directly 
aspect receiver arguments arguments font emphasis initialize font emphasis initialize left right receiver contents font receiver color color black 
receiver bounds origin pt stencil pt color receiver 
stencil receiver bounds origin color receiver color decorator aspect adding instance specific behavior shown pieces advice provided aspect applied methods involved display rendering 
design completely straightforward modular class represents fixed part system aspect provides variable part 
note advice causing place modifications additional code necessary perform forwarding non decorated messages 
solution indispensable employ run time weaving install aspects demand 
lose decorator dynamic manipulation properties essential flexibility 
major achievement native aop solution object identity problems ruled 
operating instances change behavior wrapping objects identity instances change point view sender message 
extra infrastructure needed compensate 
summary final remarks aspect oriented approach design patterns 
design pattern solutions originally motivated pure object oriented best practices beneficial attempt aspect oriented representation advantage new language extensions code composition mechanisms introduced aop 
aspect oriented representation design pattern solution just alternative implementation pattern 
better code locality real improvement involved design doesn change fundamentally 
advocate native aop approach design patterns 
contrast put emphasis improving design pattern solutions development run time 
development aspect oriented modularity constructs yield improvements terms better code locality reusability composability implementation modularity comprehensibility aspect composition mechanisms mainly carried aspect weaving utilized avoid certain drawbacks messaging overhead caused indirection levels context dependent change identity consequence placing intermediate objects mediating instances 
different point view native aop approach design patterns perceived aspectoriented patterns change important implicit force patters object oriented programming languages certain kind aspect oriented programming languages language extensions 
change forces allows design new solutions problems 
approach exemplified common design patterns visitor decorator 
context visitor applied native aop solution eliminate double dispatch seamlessly integrating element traversal code back elements 
native aop solution decorator lets adjust instance specific behavior loss identity object originally wrapped decorator pattern solution 
examples implemented squeak aspects 
idea system designs typically separated fixed variable parts glue 
focused variation points design allows separate fixed variable parts eventually synthesize desired system 
modularization approach allows evolve conceptually separate parts independently 
dynamic demand run time weaving introduced aspects essential part resolve issues related instance specific object composition 
mira mezini stephan herrmann dirk riehle comments contributions 
aspectj web site 
www aspectj org 
aspects web site 
www ia de hirsch projects squeak aspects 
czarnecki 
generative programming principles techniques software engineering automated configuration fragment component models 
phd thesis tu 
gabriel 
pattern definition 
www net patterns definition html gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
kiczales 
design pattern implementation java aspectj 
proc 
th oopsla conference pages seattle washington 
group 
www net patterns 
aspects aspect oriented programming squeak 
aksit mezini editors objects components architectures services applications networked world lncs springer 
kendall 
role model designs implementations aspect oriented programming 
proc 
th oopsla conference pages denver colorado 
kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
proc 
th ecoop conference lncs pages budapest 
springer 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
proc 
th ecoop conference lncs pages jyv skyl 
mmel 
semantical approach method call interception 
proc 
st international conference aspect oriented software development aosd pages twente netherlands 
iii 
aspect oriented dependency inversion 
proc 
oopsla workshop advanced separation concerns object oriented systems tampa florida 
norvig 
design patterns dynamic programming 
tutorial object world norvig com 
squeak web site 
www squeak org 
