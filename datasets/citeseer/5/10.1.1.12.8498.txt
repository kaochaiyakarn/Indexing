isdl instruction set description language retargetability instruction set description language isdl machine description language describe target architectures retargetable compiler 
retargetable compiler capable compiling application code machine code different processors 
features flexibility isdl enable description vastly different architectures asip vliw processor commercial dsp microprocessor 
instance machine description languages isdl explicitly supports constraints define valid operation groupings instruction increasing range specifiable architectures 
written tool isdl description processor automatically generate assembler 
ongoing includes development automatic code generator generator 
isdl instruction set description language retargetability dsp core program rom ram asic asip heterogeneous system chip embedded systems variety reasons manufacturers profit integrating entire system single integrated circuit ic 
high level integration brought new challenges design digital systems 
designing entire system custom integrated circuit economical practical 
time market requirements place greater burden designers fast design cycles programmable components introduced system increasing amount system functionality implemented software relative hardware 
programmable components called embedded processors embedded controllers general purpose microprocessors offthe shelf digital signal processors dsps house application specific instruction set processors asips microcontrollers 
systems containing programmable processors employed applications general purpose computing called embedded systems 
presents system consisting dsp core asip program rom ram application specific circuitry asic peripheral circuitry 
advantages incorporating software components twofold faster turnaround time due predefined processors increased flexibility due field programmability 
various applications genre may share hardware structure differences reflected software component possible mask applications substantially reducing cost manufacturing 
isdl instruction set description language retargetability software synthesis target architecture model code generation hardware synthesis architecture selection custom datapath partitioning hardware software system evaluation hardware software simulation design generic hardware software design methodology hardware software design designing software hardware components embedded system separately hardware software design cost effective results shorter time market 
proposals hardware software design digital systems 
simplified view generic design methodology shown 
design flow designers determine parts functionality system implemented hardware parts software 
proceed design hardware software components 
system simulated evaluated hardware software simulator 
results simulation meet design specifications correctness timing constraints design accepted 
designers may re partition original design specification reiterate process 
methodology tools code generation hardware software simulation essential parts designer tool box 
compilers software written high level languages indispensable design embedded systems 
traditional approach high quality embedded software write code assembly language 
complexity embedded systems grows programming assembly language optimization hand longer practical time critical isdl instruction set description language retargetability portions program absolutely require 
hand coding virtually eliminates possibility changing processor architecture 
automatic code generation methodology useful easily adapted generating code different processors 
processors different commercial dsp cores application specific instruction processors 
property commonly called retargetability discussed section 
machine description language easy retargetability hardware software design iteration see target architecture may changing 
order minimize cost power consumption increase performance system architecture matched application 
achieved designing asip generating code compiler testing code desired performance 
results design process architectural changes asip improve performance 
hand coding option eliminates capability iterating hardware specification asip 
argue order able explore design space automatically retargetable compilation strategy required 
retargetable compiler receives input program corresponding application machine description asip 
machine description includes instruction set specification architectural information 
code generator produces code run asip optimized speed size 
varying machine description evaluating resulting object code effectively explore design space hardware software components 
asip design methodology illustrated 
machine description language critical component design flow focus 
ideally machine description language able perform functions ffl specify wide variety architectures 
ffl explicitly support constraints define valid operation groupings instruction 
ffl easily understandable modifiable compiler writer hardware architect 
ffl support automatic generation code generator 
ffl support automatic generation assembler 
ffl support automatic generation simulator 
isdl instruction set description language retargetability isdl designer measurements source code hdl estimates power timing area architecture simulator resource requirements assembly code custom hardware machine architecture retargetable compiler front back architecture compiler simulator environment design flow asip ffl provide adequate information allow code optimizations 
various proposed machine description languages lack support features see section review 
developed machine description language isdl instruction set description language features 
isdl written machine descriptions asips commercial dsp cores 
particular complete isdl descriptions powerful asip vliw long instruction word architecture motorola see section 
written tool automatically generates assembler isdl description important step automatically retargetable compilation methodology 
organization rest focus details isdl 
section presents previous retargetability machine description languages 
section presents description isdl language components 
section illustrate language components portions isdl description 
section describes assembler generator tool related issues 
ongoing isdl section 
isdl instruction set description language retargetability related section presents brief survey compiler literature pertains retargetability machine description languages 
retargetability general purpose processors issues involved retargetable compilers code generation optimization 
approach generating code perform pattern matching expression trees 
approach capable performing local optimizations 
cattell designed framework code generators pattern matching automatically derived machine description language 
landmark aho established foundation modern code generator generators find origin 
code generator generator iburg employed compiler framework lcc 
dynamic programming methodology yields locally optimal code expression tree insufficient 
proposed retargetable scheduler marion risc architectures 
uses machine description models pipelines superscalar instruction issues schedules instructions effectively utilize features reduce conflicts 
retargetability embedded processors briefly review representative research projects area code generation embedded systems mimola chess 
proceedings dagstuhl workshop contain collection papers documenting contributors efforts 
mimola design system originally conceived design environment hardware structures mimola hardware description language 
evolved environment hardware software design includes retargetable microcode compiler 
key features distinguishes mimola project microcode compiler infers rules code generation directly structural description net list target architecture behavioral description instruction set 
advantage approach provides uniform mechanism machine description various tasks entire design process 
machine description synthesis target architecture generation microcode 
mimola descriptions generally low level laborious write isdl instruction set description language retargetability modify 
addition mimola support explicit constraints allow automatic assembler generation 
chess retargetable code generation environment fixed point dsps asips developed context cathedral ii high level synthesis system 
target machine described language nml 
graphical representation architecture called instruction set graph isg derived nml description 
isg contains structural information connectivity timing characteristics processor resources 
nml mechanism appears attractive allows user specify target architecture way parallels instruction set descriptions user manual 
contrast mimola machine description contains behavioral structural information 
enables code generator recognize optimization opportunities 
nml mimola support explicit constraints 
appears possible automatically generate assembler nml description nml publications claim effect 
consists components code generator simulator insulin 
tool set developed response results survey conducted paulin regarding trends requirements dsp design environments 
machine description consists components instruction set available resources classification interconnect graph 
mimola support explicit constraints automatically generate assembler 
instruction set description language demonstrates isdl design methodology 
isdl model target processor generated hand high level cad tool 
compiler front receives source program written 
parses source program generates intermediate format description suif 
compiler back takes suif code isdl description inputs produces assembly code specific optimized target processor 
isdl description create assembler see section 
automatically generated assembler transforms code produced compiler binary file input simulator 
stanford university intermediate format isdl instruction set description language retargetability assembly isdl isdl binary source code architecture synthesis system assembler generator compiler front compiler back assembler simulation environment suif high level system goal system support wide variety architectures 
include standard microcontrollers custom datapath dsp cores vliw long instruction word processors 
particular support multiple functional units different interconnect topologies complex instructions resource conflicts pipelining idiosyncrasies system supports automatically generated architectures 
architectures guaranteed clean instruction sets instruction sets operation combination valid 
order accommodate isdl supports explicit constraints define operation groupings valid 
compiler avoid generating invalid instructions ensuring instruction meets constraints 
note commercial architectures require constraints motorola perform move top hardware stack instructions loop 
isdl description consists sections ffl instruction word format ffl global definitions ffl storage resources ffl assembly syntax ffl constraints ffl optimization information described high level syntax definitions 
isdl instruction set description language retargetability instruction word format instruction word format section defines hardware instruction word 
instruction word separated multiple fields containing subfields 
bitwidth subfield provided 
instruction word assembled concatenating subfields order specified section 
instruction word format 
field 

field 
field 
fieldname 


subfield 

subfield 
subfield 

bitwidth note division subfields convenience designer 
subfield division may arbitrary certain subfield divisions parts isdl easier write 
global definitions second section isdl description contains list definitions sections 
definitions consist main types tokens non terminals split functions macro definitions 
exception macro definitions definitions designed help create automatically generated assembler lex yacc 
tokens symbolic representation assembly syntax parser 
tokens represent entities register memory bank names immediate constants addition allow groupings syntactically related tokens 
order differentiate elements group tokens return value identifying particular element register names abbreviated token value corresponds register number 
tokens defined syntax similar lex 
tokens 



token 



addition tokens explicitly stated isdl tokens automatically defined 
include instruction names integers floating point lex lexical analyzer generator yacc parser generator 
standard unix utilities creating compilers assemblers similar applications 
isdl instruction set description language retargetability numbers strings names sequence alphanumeric characters letter containing white space single characters 
non terminals purposes 
syntactically unrelated tokens grouped non terminal convenience 
large number possible alternatives instruction factored non terminal 
example demonstrates point move addressing mode addressing mode suppose addressing mode different options 
instruction require different rules describe possible syntax combinations non terminals 
non terminals requires rules instruction addressing mode non terminal 
nonterminals 



nonterminal 








action 

element 

element 
element 



second advantage non terminals allow definition new grammar rules necessarily related instruction 
action portion non terminals allows inclusion arbitrary code executed rule 
powerful feature permits inclusion architecture specific routines generated tools 
split function definitions automatically create functions take long long memory address immediate data split existing subfields instruction word 
functions non terminal actions operation assignment commands see section order assign correct values subfields 
split functions 



split name 





macro definitions type defines standard text replacement macros syntactic convenience 
pre processor implement feature 
isdl instruction set description language retargetability macro definitions 
definition 

definition 
define 

define 



name 

name 
storage resources storage section lists storage resources visible programmer 
lists names sizes memory register files special registers 
section compiler determine available resources 
different storage resource specifications parameters depth words width bits ffl memory depth width arbitrary number memory banks allowed 
instruction memory explicitly defined 
ffl regfile depth width arbitrary number register files allowed 
ffl register width single registers data computation 
ffl width control status registers 
accessing may cause side effects accessing registers causes external ports assume new values 
ffl stack depth width hardware stacks 
ffl width program counter explicitly declared order visible rtl description described section 
assembly syntax assembly syntax section split fields corresponding separate operations performed parallel single instruction 
fields may optional 
list possible operations provided fields 
assembly syntax 
field 

field 
field 
field 
fieldname 


operation 

operation 
isdl instruction set description language retargetability operation 




costs 
timing 


operation description consists elements ffl operation name assembly mnemonic operation 
ffl operation parameters comma separated list tokens non terminals 
ffl assignment commands set commands manipulate 
may include operation parameters values 
ffl rtl description describes effect operation storage resources 
compiler uses rtl description operation selection decisions 
ffl costs multiple costs allowed including operation execution time code size costs due resource conflicts ffl timing information describing various effects operation take place pipelining 
optional fields default assignment command provided 
constraints assembly syntax section describes number fields generally executed parallel 
certain combinations operations may executable hardware 
constraints section combinations visible compiler compiler avoid generating illegal operation combinations 
constraints described set boolean rules satisfied instruction valid 
constraints time shifted show conflicts instructions issued different times 
wild cards simplify constraint descriptions 
variables enforce restriction different parts single constraint match 
constraints 
constraint 

constraint 
constraint 
constraint 
constraint 
constraint 
constraint 
isdl instruction set description language retargetability constraint 




int 









identified types constraints ffl datapath conflicts parallel operations try datapath resources competition bus 
ffl conflicts parallel operations try set instruction word 
ffl syntactic constraints constraints correspond hardware conflicts artifacts assembler syntax 
optimization information isdl description give compiler information hardware architecture order compiler better machine dependent code optimizations 
section necessary compiler generate correct code help compiler generate better code 
examples optimizations delay slot instructions branch prediction hints 
isdl example written isdl descriptions aggressive asip vliw architecture motorola dsp processor 
shows structure motorola dsp 
consists main processing units operate parallel alu performs computation operations address generator unit generate addresses simultaneously memory transfers program controller responsible instruction fetching flow control 
memory banks program rom contains executable code program constants memory memory 
architecture designed sets buses address buses xab pab data buses pdb gdb 
architecture capable performing address calculations memory transfers alu operation single instruction 
isdl instruction set description language retargetability address gen 
unit chip internal data bus switch bit manip 
unit program rom memory memory extern 
address bus switch bus control external data bus switch clock gen port host port ssi sci program controller data alu bit mac bit accumulators bits bits pdb gdb xab pab addr data port reset prog 
addr 
gen prog 
decode contr 
prog 
int 
cont 
reg 
files motorola dsp architecture alu contains source registers subdivided registers 
destination registers consist accumulators subdivided 
alu arithmetic fixed point fractional 
shifter output stage alu takes care scaling necessary 
address generator unit contains register files supports various addressing modes including bit reversed addressing 
program control unit contains pc number control status registers hardware stack 
supports zero overhead looping nested loops 
instruction word bits long divided bit op code lsb bit parallel data bus move operation 
instructions require additional bit word store immediate addresses data 
shows structure asip vliw processor 
designed processor internally example competitive dsp architecture aggressive processor allow explore limits system 
consists functional units operate parallel controller responsible instruction fetch control flow identical completely independent address generators alu perform number operations integer types floating point mac multiply accumulate unit 
alu mac address generators port register file 
data paths processor bits wide 
processor dsp load store architecture requiring operations take place registers 
architecture contains specialized data paths memory main processing units alu mac global bus 
isdl instruction set description language retargetability reg file reg file data mem 
reg file reg file addr gen addr gen alu mac instr mem 
controller stack data bus data mem 
asip vliw architecture processor perform data transfers addressing operations computation operations flow control operation single instruction 
software pipelining load store architecture negative impact performance 
address generators multiple addressing modes 
main accessing data memory integer computation 
alu performs wide variety arithmetic logical operations integer types 
perform shift operations 
mac unit performs various operations including multiply accumulate operation floating point types 
controller contains pc jump register jr 
jump register flow control zero overhead looping 
includes entry hardware stack 
instruction word bits long require additional words 
provide portions isdl description motorola dsp processor illustrate structure isdl 
section format dbm op mode main op describes bit instruction word divided subfields dbm op dbm mode main op 
subfield bits long 
dbm op msb main op lsb 
section isdl instruction set description language retargetability assembly token type value token xr token yr token ba bad token token 
text line comment 
lines define list tokens 
definition consists keyword token syntax token appears assembly symbolic name token type value returned token piece lex dependent code returns appropriate token value 
example line defines token symbolic name value integer 
assembly syntax allowed values returned respectively 
type assembly action nonterminal imm int int nonterminal sid int int nonterminal ppa int int nonterminal xd yd nonterminal ad bd xd yd xr xr yr yr 
lines define non terminals 
definitions consist keyword non terminal type returned value symbolic name appears assembly action describes possible token non terminal combinations return value associated 
example line defines non terminal symbolic name return value 
split addr dbm op dbm mode main op 
right hand side example represents dbm op dbm mode main op 
section generate function splits long input shorter specified right hand side 
isdl instruction set description language retargetability section storage depth width memory ff regfile register la loop address register sp stack pointer register sr pc stack ss xf 
example storage section 
contains instantiations memory register files single registers control registers program counter stacks 
section assembly field main adc acc main op acc acc acc ccr cycle dbm size dbm latency imm mems address main op imm mems dbm op dbm mode additional split addr address switch mems imm case pc address default pc pc cycle jx size latency 
field dbm op dbm mode dbm move dbm op dbm mode xff dbm latency 
field keywords denote operations performed parallel 
presence assignment commands dbm op dbm mode field line dbm isdl instruction set description language retargetability declares field optional sets default values 
example operation takes parameters 
address parameter treated long constant passed split address function 
main op set result imm mems 
additional keyword denotes additional word required operation hold address 
note operation assigns values dbm 
conflicts corresponding assignments move operation 
operations performed parallel conflict appear constraints section 
second set brackets operation contain rtl description effect operation 
example adc operation effect adding contents accumulator source carry bit ccr storing result accumulator 
operation denotes conditional jump performing appropriate arithmetic program counter 
third set brackets operation contain set costs 
example costs defined cycle count resulting code size 
example adc operation takes cycles complete grouped move operation requires additional cycles 
takes instruction word grouped move requires additional words 
particular move operation shown require additional cycles words 
set brackets operation contains timing information 
section constraints rep constraint denotes instruction illegal fetched instruction rep instruction 
indicates time shift instruction fetch instruction 
automatic assembler generator required isdl capable automatically generating assembler 
allows decouple development compiler simulator 
page shows high level view system 
simulator requires compiled binary input 
availability assembler allows assembly programs written tested simulator isdl instruction set description language retargetability compiler available 
furthermore output compiler assembly human readable binary 
debugging performed simulator 
designed implemented automatic assembler generator 
receives isdl description input produces assembler assembles compiler output binary file 
assembler generator produces lex yacc files compiled result executable capable parsing assembly generating instruction words 
parser pass parser capable processing symbolic addresses labels 
actual assembler consists parser shell script processes input files preprocessor parsing 
preprocessing allows macro substitutions file include mechanisms 
enables include common kernel acts operating system compiled code 
kernel performs various initialization tasks setting trap exception vectors enabling interrupts lex file contains lexical analyzer parser symbol table 
defines tokens ffl predefined types integers floats strings ffl operation names ffl tokens defined global definitions section isdl description ffl labels symbol table represent symbolic addresses yacc file contains main driver actual parser 
main driver performs initializations file cleanup case syntax error 
parser contains top level rule performs passes 
pass fills symbol table produces listing file debugging aid 
pass system enables forward reverse labels 
word 
second pass contains top level rule shown composes instruction fields described assembly syntax section isdl description 
field subrule isdl instruction set description language retargetability consists list possible patterns operation described specification field 
action pattern assignment command operation 
example description field main see section results rule acc 
imm mems address xa 
furthermore rule added non terminals specified global definitions section 
lex yacc assemblers implies assembly syntax unambiguous single token lookahead parsers generated yacc look token ahead 
addition fact assembler preprocesses input files pre processor imposes additional syntax restrictions 
particular symbol commonly assemblers denote immediate data value may appear assembly instructions 
system may force slightly modified assembly syntax commercial processors 
consider problem input coming compiler generate modified syntax 
binary file created assembling modified syntax identical output commercial assembler 
ongoing having described details isdl compare machine description languages referred section 
language marion system required features specified section limited risc architectures isdl instruction set description language retargetability support constraints automatic assembler generation 
mimola low level retargeting compilers support definition constraints 
includes information provided isdl description 
particular includes instruction set description listing available resources interconnect graph 
support constraints 
languages studied nml closest isdl 
provides information included isdl supports description extensive range architectures 
shortcoming respect isdl support explicit constraints 
requires enumeration valid instructions related conflict 
valid instruction enumeration support time shifted constraints constraints span instruction 
currently developing code generator generator takes isdl descriptions input produces corresponding code generator 
retargetability code generators allows exploration architecture design space architecture matches application hand 
furthermore developing tool automatically generates simulator target architecture isdl descriptions 
goossens de man integration signal processing systems heterogeneous ic architectures 
proceedings th international workshop high level synthesis pages november 

register optimization scheduling real time digital signal processing architectures 
phd thesis katholieke universiteit leuven october 
gupta de micheli 
hardware software digital systems 
ieee design test computers pages september 
lee 
hardware software codesign methodology dsp applications 
ieee design test computers pages september 
thomas adams schmit 
model methodology hardware software codesign 
ieee design test computers pages september 
isdl instruction set description language retargetability cattell 
automatic derivation code generators machine descriptions 
acm transactions programming languages systems 
aho ganapathi tjiang 
code generation tree matching dynamic programming 
acm transactions programming languages systems 
fraser hanson proebsting 
engineering simple efficient generator 
acm letters programming languages systems september 
fraser hanson 
retargetable compiler design implementation 
benjamin cummings publishing redwood city california 
isbn 
henry eggers 
marion system retargetable instruction scheduling 
proceedings acm sigplan conference programming language design implementation pages june 
marwedel 
mimola design system tools design digital processors 
proceedings th design automation conference pages 
van goossens 
chess retargetable code generation embedded dsp processors 
marwedel goossens editors code generation embedded processors chapter pages 
kluwer academic publishers boston massachusetts 
paulin may 
dsp design tool requirements embedded systems telecommunications industrial perspective 
journal vlsi signal processing january 
marwedel goossens editors 
code generation embedded processors 
kluwer academic publishers boston massachusetts 
proceedings dagstuhl workshop code generation embedded processors 
isbn 
zimmermann 
mimola design system computer aided digital processors design method 
proceedings th design automation conference pages 
isdl instruction set description language retargetability marwedel 
tree mapping algorithms predefined structures 
proceedings ieee acm international conference computer aided design pages november 
extended version technical report lehrstuhl informatik xii university dortmund germany 
january 
goossens de man integration medium throughput signal processing algorithms flexible instruction set architectures 
journal vlsi signal processing 
van 
describing instruction sets nml extended version 
technical report technische universitat berlin berlin germany leuven belgium 
paulin may 
retargetable code synthesis system 
proceedings th international high level synthesis workshop spring 
paulin kumar 
insulin instruction set environment 
proceedings conference hardware description languages pages 
stanford compiler group 
suif library version edition 
levine mason brown 
lex yacc 
reilly associates 
