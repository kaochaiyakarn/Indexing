data indexing querying dht peer peer networks felber biersack garc ross keller institut eurecom sophia antipolis france felber ross eurecom fr peer peer dht systems chord pastry tapestry simple discover specific data complete identifiers keys known advance :10.1.1.140.3129:10.1.1.105.3673
practice users looking resources stored peer peer systems partial information identifying resources tend submit broad queries 
describe techniques indexing data stored peer peer networks discovering resources match user query 
system creates multiple indexes organized hierarchically permit users access data different ways 
indexes distributed nodes network contain key key query query mappings 
broad query user look specific queries match original query dht recursively queried user finds desired data items 
data stored nodes 
indexing techniques interesting properties scalability loose coupling data indexes decentralized architecture reasonably small space requirements 
look times depend precision initial query broad queries incur higher lookup times specific queries 
note aim answering complex database queries providing practical techniques searching data advanced tools exact simple keyword lookups 
ii 
related ins twine architecture intentional resource discovery allows client applications easily locate services devices large scale environments 
ins twine works setting number resolvers collaborate peers distribute resource information resolve simple queries 
resources expected volatile refresh descriptions periodically 
furthermore nodes limit number resources registered popular keys avoid overwhelmed advertisements 
ins twine builds top distributed hash table dht chord 
semi structured resource description ins twine extracts prefix subsequences attributes values called strands 
ins twine computes hash values strands constitutes numeric keys map resources resolvers 
resource device information stored redundantly peer resolvers correspond numeric keys 
looking resource ins twine sends query resolver node identified longest strands query processed resolver returns matching resource descriptions 
authors discuss techniques performing complex queries dht peer peer networks traditional relational database operators selection projection join grouping aggregation sorting elaborate text retrieval techniques :10.1.1.2.3962
instance authors propose achieve substring matching splitting strings distinct grams sequence consecutive characters keys store file ids dht 
lookup query string split grams looked individually file id returned gram lookup possible match 
research directions outlined complex query processing peer peer networks open issue :10.1.1.2.3962
authors develop data sharing architecture computing approximate answers complex queries finding data ranges similar user query 
relevant data located locality sensitive hashing techniques 
authors extend system support basic range operation data shared form database relations 
represents important step advanced query processing peer peer systems 
song artist david artist title changes title album album size size song fig 

sample file descriptors 
iii 
system overview system model definitions song artist david artist title amsterdam title album album size size song distributed hash table dht system maps keys nodes peer peer infrastructure 
key node dht substrate determine current live node responsible consider distributed data storage system data item file mapped peer nodes 
files identified descriptors textual human readable descriptions file content 
assume descriptors semi structured xml data 
examples descriptors music file sharing system 
descriptor hash function maps identifiers large set numeric keys 
peer node responsible storing file determined transforming file descriptor numeric key numeric key dht substrate determine node responsible order find node know numeric key complete descriptor 
lookup data stored peer peer substrate subset xpath xml addressing language 
xpath treats xml documents tree nodes offers expressive way specify select parts tree 
xpath expression contains location steps separated slashes 
basic form location steps designate element name followed zero predicates specified brackets 
predicates generally specified constraints presence structural elements values xml documents basic comparison operators 
xpath allows wildcard ancestor descendant operators respectively match exactly arbitrarily long sequence element names 
say xml document file descriptor matches xpath expression evaluation expression yields non null object 
descriptor easily construct xpath expression query tests presence elements values call expression fact create equivalent xpath expressions song artist jacques artist title amsterdam title album album size size song specific query conversely easily construct compute find file 
instance query specific descriptor 
song artist david title changes album size song artist david title amsterdam song artist david song title changes song title amsterdam david fig 

sample file queries 
queries say covers covered denoted descriptor matches matches abusing notation specific query particular say covers specific query abusing terminology term key query context clear 
omitting self covering relations 
descriptors cover covers cover covers 
indexing specific query descriptor file known finding location straightforward key node key data lookup service provided dht 
goal architecture offer access specific queries cover similarly ins twine generate multiple keys descriptor 
twine replicate data multiple locations provide key key service precisely query query service 
addition restrict queries prefix subsequences query 
assume equivalent expressions transformed unique normalized format 
descriptors allow multiple levels indexing order increase scalability 
roughly speaking system works follows file descriptor corresponding specific query store node identified key 
generate set plausible queries 
ql qi way choose queries discussed 
compute numeric key ki qi queries store tuple qi node identified ki dht 
apply process shown qi continue recursively resulting queries generic 
note covered relationship creates partial order queries match file descriptor 
way representing queries organize hierarchically rooted directed acyclic graph 
file specific query located root edge represents index entry maps child query parent query 
multiple paths lead root number lookups necessary locate file number nodes shortest paths initial query root 
lookups looking file query user contacts node associated 
node may return specific query list queries 
qn tuples qi qi stored user choose qi repeat process recursively desired files 
user effectively follows index path lead instance descriptors queries figures create index entries 
user obtain user query system obtain user retrieve files matching query 
lookups require iterations specific query file known 
hand higher index hierarchy iterations necessary find file 
hand higher index hierarchies generally space efficient index factorizes compact manner queries child indexes 
tradeoff space requirements lookup time 
user wants look file query may happen index exists peer peer system valid index key locate automatically look query qi qi qi qj qj qi qj index path leads instance descriptors queries figures sample index entries query song artist david album index 
find exists index entry 
file associated located price higher lookup cost 
believe natural effort required lookups performed information 
iv 
building maintaining indexes file inserted system time indexed 
choice queries file indexed arbitrary long covering relation holds 
files discovered index entries file located rapidly indexed times names 
quantity likelihood index queries hard quantify application dependent 
instance music file sharing example indexing file size useless users know size 
indexing files artist title album appropriate choices 
note length index paths lead file arbitrary directly affects lookup time 
popular content may indexed deeper index hierarchy reduce space requirements 
contrast popular file linked high hierarchy short circuit indexes speed lookups 
instance descriptors queries figures add index entries node identified speed searches popular file described 
note generic queries obtained specific queries removing portions element names 
instance create index files artist start letter letter envision techniques similar discussed substring matching :10.1.1.2.3962
general determining decompositions indexing descriptor type music files movies pictures requires human input 
information nature user queries instance construct synopsis users queries observed period time automated tools determine combinations elements descriptor type queries construct indexes accordingly 
issues open research 
system model files injected system deleted write semantics index entries need updated 
file deleted recursively find indexes refer descriptor file remove entries refer file 
locating index entries achieved straightforwardly process generate place file injected system 
evaluation data indexing techniques interesting properties 
outline properties space efficient hierarchical organization allows space efficient data indexing 
indexes contain key key mappings data items stored multiple nodes instance ins twine 
second data items may reached multiple index paths space requirements remain reasonably small indexes shared data items descriptors queries figures index entry index paths 
scalability data items may accessed distinct paths referred distinct indexes lookup load expected spread multiple indexes multiple nodes 
addition indexes stored regular data item benefit mechanisms implemented dht substrate increasing availability scalability data replication caching 
loose coupling data indexes data items change nodes corresponding complete key data need updated 
indexes need updated 
consequence key key mapping technique 
versatility possible index data enforce access complete key 
conversely popular data may indexed different manners short circuits levels indexing hierarchy 
decentralized architecture indexes uniformly distributed nodes 
lookup load balanced nodes 
resilient arbitrary linking inserting file system indexed locations corresponds keys covering file key 
arbitrary links aliases file inserted system 
harder user inject file malicious offensive content masquerade genuine file advertising different names 
similarities indexing scheme ins twine notable differences approaches resource discovery 
particular ins twine proposes approach specialized discovery services devices intentional descriptions design driven nature data registered dht 
contrast aim providing generic mechanisms indexing kind data 
data items may large music files maintain key key key data mappings 
improved scalability index entries organized hierarchically query containment relationships 
architecture allows space efficient indexing helps avoid node overwhelming problem data updating easier lookups slower queries specific 
addition introduce dedicated resolvers architecture require underlying distributed data storage system allow registration multiple entries key 
allow index keys tree structured non prefix sub keys long covering relationships preserved data looked expressive selective queries believe require presence resolver 
vi 
final notes major limitation dht peer peer system support exact match lookups needs know exact key data item locate node responsible storing item 
peer peer users tend submit broad queries look data items dht peer peer systems need augmented mechanisms locating data incomplete information 
proposed techniques indexing data stored peer peer network 
indexes distributed nodes network contain key key query query mappings 
broad query user look specific queries match original query dht recursively queried user finds desired data items 
process driven interactively user matching data items recursively collected automatically 
data indexing techniques permit looking data incomplete information depend exact matching facilities underlying dht 
fuzzy matching techniques offer interesting research perspectives dealing misspelled data descriptors queries 
misspellings taken care validating descriptors queries databases store known file descriptors music files 
balazinska balakrishnan karger 
ins twine scalable peer peer architecture intentional resource discovery 
proceedings international conference pervasive computing august 


www org 
gupta agrawal abbadi 
approximate range selection queries peer peer systems 
technical report ucsb csd university california santa barbara 
harren hellerstein huebsch loo shenker stoica :10.1.1.2.3962
complex queries dht peer peer networks 
proceedings iptps cambridge usa march 
ratnasamy handley karp shenker 
scalable content addressable network 
proc 
acm sigcomm 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proceedings middleware nov 
gupta agrawal abbadi 
query processing peer peer data sharing systems 
technical report ucsb csd university california santa barbara 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference san diego california august 

xml path language xpath november 
www org tr xpath 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd university california berkeley apr 

