system level abstraction semantics andreas daniel gajski technical report cecs july center embedded computer systems university california irvine irvine ca usa cecs uci edu gajski cecs uci edu www cecs uci edu system level abstraction semantics andreas daniel gajski technical report cecs july center embedded computer systems university california irvine irvine ca usa cecs uci edu gajski cecs uci edu www cecs uci edu raising level abstraction widely seen solution closing productivity gap system design 
key success approach defined abstraction levels models 
system level semantics cover system design process 
define properties features model 
formalization flow enables design automation synthesis verification achieve required productivity gains 
customization semantics allow creation specific design methodologies 
applied concepts system languages systemc specc 
example jpeg encoder demonstrate feasibility effectiveness approach 
contents 

abstraction levels 
multiprocessing model 

experiments summary list figures 
chart 



multiprocessing model definition 
multiprocessing model example 




ii raising level abstraction widely seen solution closing productivity gap system design 
key success approach defined abstraction levels models 
system level semantics cover system design process 
define properties features model 
formalization flow enables design automation synthesis verification achieve required productivity gains 
customization semantics allow creation specific design methodologies 
applied concepts system languages systemc specc 
example jpeg encoder demonstrate feasibility effectiveness approach 
known fact designers heterogeneous multiprocessor socs facing increasing productivity gap semiconductor technology methodology tool support 
technological advances allow put complete systems single chip 
system chip soc design integrates heterogeneous architectures consisting multiple processors custom hardware blocks intellectual property ip components memories busses 
current methodologies tools able design systems time pressures 
lot efforts focussed raising level abstraction design process 
higher levels abstraction number objects design decreases exponentially 
allows designer tools focus critical aspects explore larger part design space overwhelmed unnecessary details 
tools help designer gradually refining design lower lower levels 
system level abstraction semantics andreas daniel gajski center embedded computer systems university california irvine irvine ca usa gajski cecs uci edu www cecs uci edu requirement design flow set welldefined abstraction levels models 
number models properties model defined designers tools optimize decisions move models efficiently 
aim decrease number objects deal higher levels providing detail direct exploration step trading accuracy efficiency terms simulation speed 
furthermore clear unambiguous definition models needed enable design automation synthesis verification 
addition formalized definition necessity interoperability tools designers 
rest organized follows system design process overview traditional modeling approaches define abstraction levels models system design section 
section outline application definitions different system level languages 
specific design example experimental results 
concludes summary brief outlook section 
system design process system design starts set requirements different parts possibly captured different ways 
order feed global design synthesis flow requirements combined single unambiguous system specification 
shown actual design process consists analogous flows mapping computational parts specification processing elements pes system architecture mapping communication specification system busses 
flow requires allocation components pes busses partitioning specification components scheduling execution inherently sequential components 
result system architecture pes connected busses 
map computation requirements constraints mocs processors system specification allocation busses behaviors partitioning channels rtos scheduling arbitration system architecture component implementation hw sw synthesis system design tasks 
pes implemented software hardware synthesis 
traditional models approaches dealing classification structuring design process 
defines actual flow models specific points 
traditionally abstracted models design mainly simulation purposes 
approaches designer responsible manually rewriting model fixed level abstraction adjust changes design 
lot done horizontal integration different models simulation 
lower levels different languages implementations integrated simulation 
higher levels different models computation combined common simulation environments specification 
approaches attack vertical integration models needed design flow refinement higher level models lower level ones 
research focussed abstracting communication purpose specification possibly automatic generation communication implementations higher level specifications 
motivation intermediate processor model approaches focus abstracting communication don provide high abstractions computational aspects 
example cases system described netlist concurrent processes computational units hierarchy composed parallel fashion blocks active time 
map communication system level register transfer level rtl behavioral structural gate level transistor level physical chart 
abstraction levels general classification design process available chart shown 
defines system register transfer rt gate transistor levels level defined type objects higher level objects hierarchically composed lower level ones 
level design described form behavioral structural model physical model 
behavioral model describes desired functionality composition functional entities 
behavioral objects pieces functionality get activated process input data produce output data terminate 
behavioral description pieces arranged model data control dependencies 
structural model hand describes netlist physical components connectivity 
structural objects represent real non terminating components wires actively processing data times 
physical model describes spatial layout physical placement subcomponents chip 
models points chart 
model defined amount implementation detail description design point 
amount structure defined chart model determines amount order system 
behavioral description partially ordered causality dependencies 
contrast structural description order increased creating total order time physical objects 
events event ei tuple ai ti action ai occurring time ti ordered iff determined 
system totally ordered pairs events ordered case real time chip example 
system partially ordered subsets events level computation communication structure order validate requirements concepts tokens attributes constraints properties specification behaviors messages behavioral causality functionality multiprocessing processes messages processors execution delays performance architecture processes busses ports bus functional timing accurate protocols implementation signals microarchitecture cycle accurate clock cycle ordered 
example higher levels relationship independent parts specified 
abstraction level employs model time specify order 
real time abstracted discrete logical time 
unordered events modeled occur logical time leaving freedom implementing oder real time 
chart design process moving behavioral description structural description set constraints structural objects designed lower level 
process called synthesis especially automated 
system level design process deriving structural description system system architecture behavioral system description system specification 
behavioral objects system level general functions algorithms communicate transferring data global variables 
structural objects processing elements pes general purpose processors custom hardware ips memories communicate busses 
design task models input output flow defined transformation models possible 
gap big done step task needs split creating additional intermediate models 
hand tasks independent possible order able solve separately 
summary model certain level abstraction trades accuracy efficiency example terms simulation speed 
models defined right amount detail allow rapid meaningful exploration synthesis validation 
general system design process complex completed single step 
gap requirements implementation practical purposes non exponential algorithms impossible cover 
need divide process sequence smaller manageable steps 
explained computation communication refinement largely orthogonal 
beneficial subdivide design process separate tasks computation communication design 
interactions tasks minimized strong dependencies 
especially partitioning computation influences amount communication table system design models 
multiprocessing behavior computation synthesis communication synthesis structure specification architecture system level rt level gate level system design flow 
performed computation synthesis needs performed communication synthesis 
shows resulting flow models 
system design starts behavioral specification model 
step computation implemented pes resulting intermediate multiprocessing model 
multiprocessing model mixed behavioral structural description 
defines computation structure leaves communication behavioral level 
communication synthesis completes design flow creates structural system architecture model 
sections define abstraction models 
table summarizes characteristics different models system design 
specification model specification behavioral description system 
describes desired functionality free implementation details 
specification composed implications structure implementation 
objects specification model entities perform computation data terminate 
apart timing constraints notion time behavioral objects execute zero time 
objects ordered dependencies 
specification level design consists computation communication 
computation described hierarchical composition behaviors 
behaviors communicate transferring data messages channels 
formally specification model triple consisting set behaviors set channels design computation communication computation behavior behavior leaf composition composition sequential parallel pipelined alternative parallel behavior behavior sequential behavior behavior pipelined condition behavior behavior alternative condition behavior behavior communication message message message leaf channel leaf specification model definition 
specification model example 
connectivity relation defines connections behaviors channels 
behaviors form semigroup composition operation 
composed sequentially concurrently pipelined loop mutually exclusive way pipelined alternative compositions guarded additional conditions leaves hierarchy contain basic algorithms perform computations 
leaf behaviors contain description algorithm example standard programming language code leaves describes behavior processes input data produce output data expressions variables different data types supported programming language 
system design process leaf behaviors remain untouched forming indivisible units purpose exploration refinement 
general models describe system composed basic building blocks leaf behaviors top underlying language 
production rules terms describing specification models 
note due space constraints definitions shortened details omitted 
example simple typical specification model shown 
example specification composition followed concurrent execution 
andb contain func design computation communication computation pe pe 
pe processor ip processor behavior ip wrapper behavior leaf composition composition sequential communication message message message leaf channel leaf leaf wrapper wrapper leaf multiprocessing model definition 
tions input data 
summary notation computation specification example terms communication behavior sends data channels channels 
notation defined communication part specification model example summary purpose specification model clearly unambiguously describe system functionality 
system composed self contained blocks defined interfaces enabling easy composition rearrangement reuse 
dependencies explicitly captured connectivity behaviors hidden side effects exist 
parallelism available independent blocks exposed concurrent pipelined composition 
computation communication abstracted composition functions data 
separated behaviors channels respectively allowing separate implementation concepts 
multiprocessing model multiprocessing model result mapping computation actual processing elements pes 
represents allocation selection pes mapping behaviors pes 
mix structural description system computation behavioral description system communication 
definition multiprocessing model 
exemplary multiprocessing model corresponding specification example shown 
multiprocessing model redefines computational part design 
formally multiprocessing model triple pe computation described set concurrent pes 
pes structural objects representing physical components non terminating 
general set pes system pe ip consists set general purpose processors set ips set memories respectively 
communication set channels connectivity relation leaf behaviors channels remains essentially untouched 
processor defined triple bp cp rp executes set behaviors bp mapped 
behaviors inside processors communicate set local channels cp defined connectivity relation rp bp cp 
due inherently sequential nature structural objects processing elements behaviors inside processor serialized 
static scheduling approach order behaviors fixed represented artificial control dependencies purely sequential composition behaviors inside pe processor behaviors form semigroup bp sequential composition 
dynamic scheduling approach shown order behaviors determined runtime 
behaviors composed tasks abstraction operating system scheduler multiprocessing model dispatches tasks dynamically 
contrast general purpose pes ip ip defined pair bip wip pre defined fixed functionality bip encapsulated 
wrapper abstracts ip internal communication interface provides set canonical channel interfaces communication ip behavioral data message level 
system level behaviors communicate directly wrappers system connectivity relation connects processor behaviors bp channels ip wrappers ip ip wip 
note special case ips dedicated memory components provide functionality apart read write access stored data case example mapped processing elements pe pe respectively 
implemented existing ip component provides functionality 
vendor supplied blackbox description ip encapsulates simulation analysis synthesis model ip allowing integration system channel interface 
system memory holds variables provides read write pe ip pe snd snd rcv rcv cb cb multiprocessing model example 
rcv snd access channel interface 
hand local copies variable created pe pe 
addition communication synchronization blocks inserted preserve original execution semantics 
execution sequential blocks mapped concurrent pes synchronized updated variable values communicated keep local copies sync 
behavioral blocks inside pe pe communicate global channels accessing channel interfaces ip directly 
summary computation pe ip pe ip wrapper pe snd ip ip ip wrapper pe rcv snd snd snd snd cb rcv rcv wrapper wrapper communication snd ip wrapper ip wrapper rcv snd cb rcv summary multiprocessing model refines computation grouping behaviors mapping pe structure largely preserving original behavioral communication 
pes contain behavioral description functionality 
behaviors inside pes execute order static dynamic scheduling 
addition multiprocessing model introduces notion time computation mapped pes increasing partial order pes 
estimated execution times target pes behaviors annotated delay information 
true parallelism multiprocessing level available set concurrent pes 
multiprocessing model describes implementation computation pes system architecture 
structural view system computational aspects 
hand multiprocessing model contains behavioral descriptions pes feed lower parts design flow 
multiprocessing level communication pes exposed implementation steps 
architecture model architecture model structural description complete system computation communication 
addition allocation selection pes part multiprocessing model architecture model represents allocation selection busses mapping global channels busses 
result system modeled netlist pes connected bus wires 
obtained adding bus protocols channels splitting channels inlining pe bus drivers 
shows definition architecture model 
architecture model example corresponding previously shown multiprocessing model shown 
multiprocessing model definition architecture model redefines global communication part system 
architecture model defined triple pe pe set pes set bus wires pe op port mapping function connecting pe ports bus wires 
general set architecture model pes pe ip combination sets general purpose processors ips memories transducers arbiters respectively 
behavioral processor descriptions transformed bus functional models adding bus drivers 
processor architecture model quintuple bp cp dp op rp bp scheduled set behaviors executing processor cp set local channels dp set design computation communication computation pe pe 
pe processor ip transducer arbiter processor behavior ports ip processor structural transducer ports ports arbiter ports communication connectivity connectivity connectivity port wire message leaf channel leaf leaf leaf architecture model definition 
bus driver channel interfaces op processor set ports rp bp cp dp connectivity relation extended define connection behaviors channels bus drivers 
bus drivers describe processor implementation data messages bus protocols processor ports 
inside processor bus drivers provide behavioral message interface behaviors behaviors connect channel interfaces bus communication 
ip components bus functional structural ip models directly integrated architecture model 
bus functional ip models equivalent definition bus functional processor models shown 
structural ip models hand defined rtl components 
structural ip ip quadruple uip bip cip uip set rtl units bip set local busses set ports cip connectivity function mapping ports rtl units busses external ip ports 
architecture model bus functional structural ip models interchangeably allowing example mixed level simulation 
note memory components treated special case ips 
necessary special transducer pes translate incompatible protocols need inserted architecture model 
transducer interfaces busses sets ports contains bus drivers protocol 
transducer defined processor sets ports sets bus driver channel interfaces 
architecture model contain arbiters mediate conflicting bus accesses case multiple masters bus 
arbiters implement certain arbitration protocol bus ports internal bus drivers 
equivalent scheduling computation pes multiprocessing model arbiters serialize accesses inherently sequential busses 
arbiters usually come arbiter pe pe snd snd rcv rcv bus ip architecture model example 
rcv snd bus form ips defined bus functional structural processor models 
example shown memory connected processor pe processor bus bus ip processor pe connected bus 
inside pe pe behavioral blocks connect bus drivers implement message passing bus wires 
transducers translate incompatible bus protocols 
acts bridge busses bus bus 
interfaces ip proprietary protocol bus 
channel interface ip architecture model moved implements communication ip exposed wires ip bus 
additional pe arbiter regulates conflicting accesses pe bus inserted 
notation defined architecture model example formalized follows computation ip pep pep arbiter pe pe pe driver pe snd pe pe pe driver pe rcv ports ports ip snd driver pe ports pe ports driver driver communication snd snd snd ports ports snd pe driver rcv pe driver pe driver pe driver pe driver snd pe driver ports pe ports arbiter ports ports ports pe ports ports bus bus bus bus bus bus bus summary architecture model refines communication implementation busses ports drivers transducers 
computation inside pes hand remains largely untouched 
structural nature imposes total order communication bus 
furthermore partial order busses refined introducing bus protocol timing 
architecture model timing accurate terms computation communication 
experiments applied system level abstraction semantics system level design languages including systemc specc 
order represent different models language model concept translated language constructs 
example specification behaviors map processes systemc behaviors specc 
ideally mapping model concepts language constructs unambiguous order ease understanding models written language humans tools 
details application abstraction levels specc language 
modeled design examples flow 
outline implementation jpeg encoder 
note focus demonstrating feasibility effective ness models 
implementation decisions performing elaborate design space exploration 
source code models specc downloaded web pages 
case chose specc modeling language time development specc supported concepts explicitly dedicated constructs 
shows models jpeg encoder 
top specification model encoder consists sequential behaviors followed 
performs initialization huffman tables parallel writes output header 
actual encoding done nested pipelined loops 
outer pipeline splits image stripes lines 
inner pipeline splits stripes blocks processes block dct quantization huffman encoding 
example communication shows huffman tables sent 
note behaviors composed sequentially channels degenerate simple variables 
purpose computation synthesis assumed mapping encoder motorola processor sw assisted custom hardware processor hw acceleration dct 
software hardware communicate message passing channels sending receiving blocks software dct processor back 
behaviors inside sw processor statically scheduled serialized 
nested pipelines converted nested sequential loops 
software waits result dct continuing processing 
changing lines code able modify architecture software hardware operate pipelined fashion dct processing block software continues processing previous block prepares resulting utilization sw processor 
similarly architectural alternatives easily explored short amount time minimal changes model 
communication synthesis connected processors single bus bus protocol 
furthermore assumed protocol dct ip fixed incompatible protocol inclusion transducer 
sw processor master bus drives address control lines 
hw processor listens directly address bus associated control lines transducer translates data transfer protocols 
synchronization hardware signals software processor interrupt line intc 
sw sw dct specification quantization multiprocessing quantization architecture height width quantization intc jpeg encoder 
hw dct dct hw lines lines simul 
code changed time specification multiprocessing architecture table jpeg encoder statistics 
side pes bus drivers interrupt handlers translate message passing calls behaviors bus transactions driving sampling pe bus ports protocol 
characteristics jpeg encoder models specc listed table 
table shows lines code number lines added changed moving model 
seen refinement models localized leaves original code untouched 
changes result additions represent increased implementation detail 
validate models performed simulations levels 
simulation performance different levels jpeg encoder table additional examples encoder facsimile applications voice encoder decoder mobile telephony shown 
move level abstraction timing information added increasing accuracy simulation results 
simulation time increases exponentially lower levels abstraction 
results show moving higher levels abstraction enables rapid design space exploration 
intermediate multiprocessing model valuable feedback critical computation synthesis aspects obtained early quickly 
summary division system level design process defined system level models covering flow specification architecture 
models define comprehensive approach raising level abstraction embedded systems design supporting computation communication abstraction 
definition models separation concerns minimizes interactions levels reduces refinement models supports easy exploration variety components ips 
step approach design flow supports rapid design space exploration focusing critical decisions early stages providing quick feedback 
knowledge approach properly defining models formalized way 
models define normalized simulation time spec proc arch simulation performance 
jpeg framework top system level languages design methodologies developed 
example platform design sets pes busses framework multiprocessing architecture models 
formalization models enabler interoperability design automation 
definitions automatic model refinement levels 
want extend formalization general algebra axioms correct transformations defined 
formalized framework models transformations definitions foundation vertical integration models synthesis verification 
acknowledgments supported semiconductor research cooperation src contract hj task id 
gajski kuhn 
guest editors new vlsi tools ieee computer pp 

paradise design environment proceedings embedded systems conference 
jantsch model conceptual frame study modelling analysis synthesis concepts electronic systems proceedings design automation test europe 
buck ptolemy framework simulating prototyping heterogeneous systems int 
journal computer simulation special issue simulation software development vol 
pp 
april 
coste multilanguage design heterogeneous systems proceedings international workshop hardware software codesign may 
scalable flexible soc designs heterogeneous multi processor target architectures proceedings asia south pacific design automation conference yokohama japan february 
design environment heterogeneous hardware software systems euro dac 
automatic generation application specific architectures heterogeneous multiprocessor system chip proceedings design automation conference las vegas june 


efficient architecture model systematic design application specific multiprocessor soc proceedings design automation test europe munich germany march 
ller 
systemc sv extension systemc mixed multi level communication modeling interface system design proceedings design automation test europe munich germany march 

model describing communication aggregate objects specification design embedded systems proceedings design automation test europe munich germany march 
higher level system communication model object oriented specification design embedded systems proceedings asia south pacific design automation conference yokohama japan february 
gajski specc specification language design methodology 
kluwer academic publishers 
system design practical guide specc 
kluwer academic publishers 
specc technology open consortium stoc 
www systemc org 
gr system design systemc kluwer academic publishers 
open systemc initiative 
www systemc org 
gajski 
specc modeling guidelines 
technical report cecs tr center embedded computer systems uc irvine april 
design jpeg encoding system 
technical report ics tr information computer science uc irvine november 
yin du 
lee gajski 
design jpeg encoder specc methodology technical report ics tr information computer science uc irvine july 
specc home page 
www cecs uci edu specc 
