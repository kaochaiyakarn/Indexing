engineering lightweight sux array construction algorithm extended giovanni manzini universit del paolo ferragina universit di pisa consider problem computing sux array text 
problem consists sorting suxes lexicographic order 
sux array pat array simple easy code elegant data structure fundamental string matching problems involving linguistic texts biological data 
interest data structure building block novel applications burrows wheeler compression algorithm provably practically ective compression tool construction succinct compressed indexes store input text full text index roughly space traditional compressors text algorithms clustering ranking answers user queries web search engines :10.1.1.23.7615
applications construction sux array computational bottleneck time space 
motivated interest designing sux array construction algorithm fast lightweight sense uses small space 
sux array consists integers range 
means theory uses log bits storage 
applications size text smaller customary store integer byte word yields total space occupancy bytes 
concerns cost constructing sux array theoretically best algorithms run time 
algorithms rst building sux tree obtaining sorted suxes order traversal tree 
sux tree construction algorithms complex space consuming occupy bytes working space depending text structure 
impractical moderately large texts 
reason sux arrays usually built algorithms run log time smaller space occupancy 
algorithms current leader qsufsort algorithm larsson 
qsufsort uses bytes despite partially supported italian project technologies services enhanced content delivery 
dipartimento di informatica universit del italy iit cnr pisa italy 
mail manzini mfn 
dipartimento di informatica universit di pisa italy 
mail di unipi 
space occupancy gures include space input text sux array auxiliary data structure algorithm 
log worst case bound faster algorithms sux tree construction 
unfortunately size documents grown quickly main memory computers 
desirable build sux array small space possible 
itoh tanaka seward proposed new algorithms bytes 
call algorithms lightweight algorithms stress relatively small space occupancy 
theoretical point view algorithms log worst case complexity 
practice faster qsufsort average lcp small lcp length longest common pre consecutive suxes sux array 
texts large average lcp algorithms slower qsufsort factor 
describe extensively test new lightweight sux sorting algorithm 
main idea small amount extra memory addition bytes avoid degradation performance average lcp large 
achieve goal engineered algorithms ad hoc data structures 
algorithm uses cn bytes user tunable parameter tests 
les average lcp smaller algorithm faster seward algorithm roughly times faster qsufsort 
best algorithm tests uses bytes faster qsufsort les largest average lcp 
le algorithm slower qsufsort athlon machine slower pentium 
believe slowdown single le unusually large average lcp acceptable price pay exchange reduced space occupancy ered algorithm 
de nitions previous results denote text alphabet 
sux array pat array array sa sa sa list suxes sorted lexicographic order 
example sa abcc sux lower lexicographic rank followed followed bcc 
strings write lcp denote length longest common pre average lcp text de ned average length longest common pre consecutive suxes average lcp lcp sa sa average lcp rough measure diculty sorting suxes average lcp large need principle examine characters order establish relative order suxes 
algorithmic engineering assumptions correspond situation faced practice 
assume alphabet symbol stored byte 
text takes precisely bytes 
furthermore assume starting position sux stored byte word 
sux array sa takes precisely bytes 
term gure refers seward algorithm 
process acquiring code itoh tanaka algorithm hope able test nal version 
note de ne lexicographic order suxes customary append special text symbol smaller symbol 
name ave lcp max 
lcp file size description bible le bible canterbury corpus coli le coli canterbury corpus world le world txt canterbury corpus swiss prot database original le name dat rfc concatenation rfc text les howto concatenation linux howto text les reuters reuters news xml format linux tar archive containing linux kernel source les jdk concatenation html java les jdk doc 
chr genome assembly human chromosome gcc tar archive containing gcc source les table files experiments sorted order increasing average lcp 
lightweight denote sux sorting algorithm bytes plus small amount extra memory intentionally giving informal de nition 
note bytes just store input text sux array sa 
claim bytes required know algorithm space 
testing sux array construction algorithms collection les shown table 
les contain di erent kind data di erent formats display wide range sizes average lcp 
larsson qsufsort algorithm qsufsort algorithm doubling technique introduced rst construction sux array 
strings write length pre lexicographically smaller length pre similarly de ne symbols 
denote suxes assume length common pre 
denote sux similarly fundamental observation doubling technique words derive order looking rank order 
algorithm qsufsort works rounds 
ith round suxes sorted ordering 
ith round algorithm looks groups suxes sharing rst characters sorts ordering ternary quicksort 
comparison quicksort algorithm takes time 
log rounds suxes sorted 
clever data organization qsufsort uses bytes 
surprisingly algorithm ts pages clean elegant code 
experiments reported show qsufsort outperforms sux sorting algorithm doubling technique sux tree construction 
algorithm runs faster qsufsort les average lcp bentley sedgewick multikey quicksort 
multikey quicksort direct comparison algorithm considers suxes ordinary strings sorts character character comparison advantage special structure 
itoh tanaka stage algorithm itoh tanaka describe sux sorting algorithm called stage sux sort stage 
stage uses text sux array sa total space occupancy bytes 
describe works assume fa zg 
counting sort stage initially partitions suxes buckets rst character 
note bucket set consecutive entries array sa sorted ordering 
bucket stage distinguishes types suxes type suxes second character sux smaller rst type suxes second character larger equal rst sux character 
note bucket type suxes lexicographically precede type suxes 
crucial observation algorithm stage type suxes sorted easily derive ordering type suxes 
done single pass array sa meet sux look sux type sux move rst empty position bucket type suxes sorted textbook string sorting algorithms implementation authors msd radix sort sorting large groups suxes bentley sedgewick multikey quicksort medium size groups insertion sort small groups 
summing stage considered advanced direct comparison algorithm type suxes sorted direct comparison type suxes sorted faster procedure takes advantage special structure suxes 
authors compare stage direct comparison algorithms quicksort multikey quicksort msd radix sort earlier version qsufsort 
stage turns roughly times faster quicksort msd radix sort times faster multikey quicksort qsufsort 
les experiments average lcp know advantage doubling algorithms qsufsort respect direct comparison algorithms apparent larger average lcp 
seward copy algorithm independently itoh tanaka seward describes lightweight algorithm called copy concept similar type type suxes algorithm stage 
counting sort copy initially sorts array sa ordering 
term bucket denote contiguous portion sa containing set suxes sharing rst character 
similarly term small bucket denote contiguous portion sa containing suxes sharing rst characters 
buckets consisting small buckets 
note small buckets empty 
copy sorts buckets time starting containing fewest suxes proceeding largest 
assume simplicity fa zg 
sort bucket say bucket copy sorts small buckets pa pb pz crucial point algorithm copy bucket completely sorted simple pass copy sorts small buckets ap bp zp small buckets marked sorted copy skip parent bucket sorted 
improvement seward shows sorting small bucket pp avoided ordering derived ordering small buckets pa po pq pz trick extremely ective working les containing long runs identical characters 
algorithm copy sorts small buckets bentley mcilroy ternary quicksort 
sorting suxes considered atomic comparison consists complete comparison suxes 
standard trick sorting larger side partition eliminating tail recursion ensures amount space required recursion stack grows worst case logarithmically size input text 
seward compares tuned implementation copy qsufsort algorithm set les average lcp 
tests copy outperforms qsufsort les 
seward reports copy slower qsufsort average lcp exceeds reason suggests qsufsort fallback average lcp large 
source code qsufsort copy available tested algorithms suite test les average lcp ranging see table 
results experiments reported top rows table amd athlon processor table pentium iii processor 
accordance seward results copy faster qsufsort average lcp small slower average lcp large 
turning point appears average lcp range 
complete story 
example les running time qsufsort pentium smaller running time athlon true copy see example les jdk gcc 
conjecture di erence cache architecture behavior explain di erence plan investigate full see section 
see di erence performance algorithms depend average lcp 
dna le chr large average lcp algorithms similar running times 
le linux greater average lcp reuters roughly size 
di erence running times qsufsort copy smaller linux reuters 
striking data tables running times gcc le algorithm copy times slower qsufsort 
acceptable gcc pathological le built show weakness copy contrary le downloaded busy site expect les computers 
section describe new algorithm uses techniques avoiding catastrophic behavior time retaining nice features algorithm copy bytes space occupancy performance les moderate average lcp 
contribution deep shallow sux sorting starting point design ecient sux array construction algorithm seward copy algorithm 
algorithm replace procedure sorting small buckets groups suxes having rst characters common 
bentley mcilroy ternary quicksort sophisticated technique 
precisely sort small buckets bentley sedgewick multikey quicksort recursion reach prede ned seward describes algorithm called cache faster copy les larger average lcp 
algorithm cache uses space reason consider lightweight algorithm 
algorithm copy originally conceived split input le mb blocks 
modi ed source code allow computation sux array le 
pointed algorithm copy conceived blocks data size mb 
reader aware algorithm outside intended domain 
bible coli world rfc howto reuters linux jdk chr gcc qsufsort copy ds ds ds ds ds ds ds ds ds ds ds ds ds table running times seconds mhz amd athlon processor gb main memory kb cache 
operating system debian gnu linux debian 
compiler gcc ver 
options frame pointer 
table reports user system time averaged runs 
running times include time spent reading input les 
bible coli world rfc howto reuters linux jdk chr gcc qsufsort copy ds ds ds ds ds ds ds ds ds ds ds ds ds table running times seconds mhz pentium iii processor gb main memory kb cache 
operating system gnu linux red hat 
compiler gcc ver 
options frame pointer 
table reports user system time averaged runs 
running times include time spent reading input les 
depth sort group suxes length common pre 
point switch di erent string sorting algorithm 
approach advantages 
provides simple ecient mean detect groups suxes long common pre 
limit size recursion stack bounded prede ned constant independent size input text tuned user 
suxes small bucket common pre xes exceed sorting done multikey quicksort extremely ecient string sorting algorithm 
call approach sux sorting deep shallow sorting mix algorithm sorting suxes small lcp shallow sorter algorithm shall see sorting suxes large lcp deep sorter 
sections describe deep sorting strategies algorithms sorting suxes length common pre blind sorting denote group suxes length common pre need deep sort 
small discuss means sort algorithm called blind sort blind trie data structure introduced sect 
see fig 

blind sorting simply consists inserting strings time initially empty blind trie traverse trie left right obtaining strings sorted lexicographic order 
insertion string trie requires rst phase scan simultaneously traverse trie reach leaf 
compare string associated leaf determine length common pre update trie adding leaf corresponding see details 
obviously construction trie ignore rst characters sux identical 
implementation blind sort algorithm uses bytes memory 
number suxes sorted space overhead blind sort bytes 
text mb long overhead mb compared mb required text sux array 
number suxes sorted larger sort ternary quicksort 
respect algorithm copy introduce improvements 
soon working group suxes smaller recursion sort blind sort 
partitioning phase compute resp 
longest common pre pivot strings lexicographically smaller resp 
larger pivot 
sort strings smaller resp 
larger pivot skip rst resp 
characters know constitute common pre believe small overhead point limit chosen somewhat arbitrarily 
preliminary experimental results show marginal degradation performance take plan better investigate space time tradeo introduced parameter impact cache performance 
compacted trie blind trie standard compacted trie left corresponding blind trie right strings abac 
internal node blind trie contains integer set outgoing labelled arcs 
node containing integer represent set strings length common pre di er st character 
outgoing arcs labelled di erent characters nd position 
note outgoing arcs ordered alphabetically visiting trie leaves left right get strings lexicographic order 
called algorithm ds performances reported tables values parameter depth multikey quicksort switch blind sort quicksort algorithms 
see algorithm ds slower qsufsort les jdk gcc 
compare copy ds notice deep shallow approach reduced running time gcc factor 
certainly start 
shall see able reduce factor advantage fact strings sorting suxes text 
induced sorting feature stage copy algorithms suxes sorted direct comparison relative order derived constant time ordering suxes sorted 
generalization technique deep sorting phase algorithm 
assume need sort suxes length common pre scan rst characters looking pair consecutive characters 
soon nd pair characters say belonging sorted small bucket ordering derived ordering follows 
assume 
length common pre contains pair starting position contains suxes corresponding contains suxes starting 
note suxes necessarily consecutive rst characters identical ordering derived ordering corresponding suxes summing ordering done follows 
sort suxes starting position input text 
done step binary search answer membership queries set 
denote sux starting text position 
scan small bucket order nd position 
scan suxes preceding small bucket sux check sux starting position set mark sux 
suxes marked scan left right 
sorted gives correct ordering obviously guarantee length common pre pair characters belonging sorted small bucket 
case simply resort quicksort blind sort combination 
call algorithm ds performances reported tables values see ds runs faster qsufsort les gcc 
general ds appears slightly slower ds les small average lcp clearly faster les large average lcp gcc times faster 
anchor sorting pro ling shows costly operation induced sorting scanning small bucket search position sux step 
show avoid operation willing small amount extra memory 
xed partition text segments length simplicity assume divides 
de ne arrays anchor 
set 
size set contains position leftmost sux starts ith segment belongs sorted small bucket 
ith segment start sux belonging sorted small bucket set 
denote sux starting position stored set 
anchor contains position small bucket 
arrays anchor 
set 
fairly simple 
assume need sort suxes length common pre denote segment containing starting position leftmost sorted sux segment starts rst characters sort marking done setting signi cant bit means texts size restriction holds qsufsort 
induced sorting algorithm described previous section 
skip step position small bucket stored anchor 
obviously possible exist 
suxes usually belong di erent segments possible candidates 
implementation available sorted suxes starting position closest corresponding choose minimizes helps step induced sorting 
available sorted sux resort blind sort quicksort combination 
concerns space occupancy anchor sorting note set store distance ith segment leftmost sorted sux 
set take array set requires bytes storage 
entry anchor requires bytes space occupancy bytes 
tests yields overhead bytes 
add bytes required blind sorting get maximum overhead bytes 
mb text overhead mb consider small amount compared mb text sux array 
tables report running times anchor sorting name ds ranging 
see les moderate average lcp ds signi cantly faster copy roughly times faster qsufsort 
les large average lcp ds faster qsufsort les gcc 
gcc ds slower qsufsort athlon slower pentium 
opinion slowdown single le acceptable price pay exchange reduction space occupancy achieved qsufsort bytes vs bytes 
believe possibility building sux arrays larger les value greater eciency handling les large average lcp 
novel algorithm building sux array text 
algorithm uses bytes faster tested algorithm 
single le algorithm outperformed qsufsort uses bytes 
pathological inputs texts average lcp lightweight algorithms take log time 
worst case behavior occur practice interesting theoretical open question achieve log time space addition space required input text sux array 
issues remain investigated 
thorough analysis experimental data alphabet size distribution lcp number types cache misses needed order nd explanation algorithmic behaviors reported 
noteworthy analysis allow understand locality impacts performance algorithm 
designing algorithm put care choosing blind trie size designing allocation strategy scanning small buckets 
possible tried processor cache bene ts algorithmic behavior 
lot algorithmic aspects may exploited improve current performance 
bentley mcilroy 
engineering sort function 
software practice experience 
bentley sedgewick 
fast algorithms sorting searching strings 
proceedings th acm siam symposium discrete algorithms pages 
burrows wheeler 
block sorting lossless data compression algorithm 
technical report digital equipment 
crochemore rytter 
text algorithms 
oxford university press 
farach colton ferragina muthukrishnan 
sorting complexity sux tree construction 
journal acm 
ferragina grossi 
string tree new data structure string search external memory applications 
journal acm 
ferragina manzini 
opportunistic data structures applications 
proc 
st ieee symposium foundations computer science pages 
ferragina manzini 
experimental study opportunistic index 
proc 
th acm siam symposium discrete algorithms pages 
gonnet baeza yates snider 
new indices text pat trees pat arrays 
frakes baeza yates editors information retrieval data structures algorithms chapter pages 
prentice hall 
grossi vitter 
compressed sux arrays sux trees applications text indexing string matching 
proc 
nd acm symposium theory computing pages 
gus eld 
algorithms strings trees sequences computer science computational biology 
cambridge university press 
itoh tanaka 
ecient method memory construction sux arrays 
proceedings sixth symposium string processing information retrieval spire pages 
ieee computer society press 
karp miller rosenberg 
rapid identi cation repeated patterns strings arrays trees 
proceedings acm symposium theory computation pages 
kurtz 
reducing space requirement sux trees 
software practice experience 
larsson 
faster sux sorting 
technical report lu cs tr department computer science lund university sweden 
manber myers 
sux arrays new method line string searches 
siam journal computing 
manzini 
analysis burrows wheeler transform 
journal acm 
mcilroy bostic 
engineering radix sort 
computing systems 

compressed text databases ecient query algorithms compressed sux array 
proceeding th international symposium algorithms computation pages 
springer verlag lncs 
seward 
bzip home page 
cygnus com bzip index html 
seward 
performance sorting algorithms 
dcc data compression conference pages 
ieee computer society tcc 
zamir etzioni 
grouper dynamic clustering interface web search results 
computer networks 

