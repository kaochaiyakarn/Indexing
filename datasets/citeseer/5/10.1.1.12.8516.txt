agent control systems nicholas jennings stefan bussmann dept electronics computer science daimlerchrysler ag university southampton research technology ric en ieee control systems magazine southampton bj alt berlin germany ecs soton ac uk stefan bussmann daimlerchrysler com modern control systems meet increasingly demanding requirements stemming need cope increased uncertainty dynamic environments provide greater flex 
turn means control system software highly complex invariably large number interacting parts 
complexity requires state art software engineer ing methods techniques employed 
argue analyzing designing imple complex software systems collection interacting autonomous flexible components agents affords software engineers significant advantages methods 
seeking demonstrate efficacy agent oriented software engineering approach compelling argument show quantitatively adoption improved development process range control system projects 
applications deployed see overviews data simply available case contemporary software engineering approaches patterns application frame works component ware 
fact best achieved qualitative justification agent oriented approaches suited engineering complex control systems 
gen eral premise supported specific case studies domains industrial process con trol particular electricity transportation management manufacturing control particular manufacturing line control experiences agent approach assessed 
making general case agent oriented software engineering discuss characteristics complex software systems control systems naturally instance 
ieee control systems magazine discuss methods software engineers developed help manage complexity 
role new software engineering paradigm provide structures techniques complexity easier handle 
fortunately designers complexity exhibits important 
complexity frequently takes form hierarchy system composed interrelated subsystems turn hierarchic structure lowest level ele subsystem reached 
precise nature organizational relationships varies subsystems generic forms client server peer identified 
relationships static vary time 
second choice components system primitive relatively arbitrary defined observer aims objectives 
third hierarchic systems evolve quickly ones comparable size complex sys tems evolve simple systems rapidly clearly identifiable stable intermediate forms 
fourth possible distinguish interactions tems subsystems 
frequent typically order mag predictable 
gives rise view complex systems nearly decomposable subsystems treated independent quite interactions 
interactions pre design time 
drawing insights canonical view complex system fig 
defined 
system hierarchical nature expressed related links components subsystem connected frequent interaction links interactions components expressed infrequent interaction links 
observations software engineers devised fundamental tools trade help manage complexity decomposition basic technique tackling large problems divide smaller manageable chunks addressed relative isolation note nearly decomposable subsystems fig 

decomposition helps tackle complexity limits designer scope 
ieee control systems magazine abstraction process defining simplified model system emphasizes details properties suppressing 
works limits designer scope interest time 
organization process defining managing interrelationships various prob lem solving components note subsystem interaction links fig 

covers phenomena inheritance object oriented systems subroutines procedural languages 
ity specify enact organizational relationships helps designers tackle complexity enabling number basic components grouped treated higher level unit analysis ii providing means describing high level relationships various units 
having characterized complex software systems identified fundamental software engineering approaches help manage complexity case agent oriented software engineering 

view complex system case agent oriented software engineering step arguing agent oriented approach software engineering involves identifying key concepts agent computing 
concept agent ieee control systems magazine agent encapsulated computer system situated environment act flexibly autonomously environment meet design objectives 
points definition require elaboration 
agents clearly identifiable problem solving entities defined boundaries interfaces ii situated embedded particular environment partial control observability receive inputs related state environment sensors act environment effectors iii designed fulfil specific role particular objectives achieve iv autonomous control internal state behavior capable exhibiting flexible problem solving behavior pursuit design objectives reactive able respond timely fashion changes occur environment proactive able opportunistically adopt goals take initiative 
adopting agent oriented view soon apparent problems require involve multiple agents represent decentralized nature problem multiple loci con trol multiple perspectives competing interests 
agents need interact achieve individual objectives manage dependencies ensue situated common environment 
interactions vary simple semantic inter operation information passing traditional client server type interactions rich social inter actions ability cooperate coordinate negotiate course action 
nature social process points qualitatively differentiate agent interac tions occur software engineering paradigms 
agent oriented interactions generally occur high level declarative agent communication language speech act theory 
consequently interactions conducted knowledge level terms goals followed time cf 
method invocation function calls operate purely syntactic level 
second agents flexible problem solvers operating environment partial control observability interactions need han similarly flexible manner 
agents need ability context dependent decisions nature scope interactions initiate respond interactions foreseen design time 
ieee control systems magazine majority cases agents act behalf individuals companies part wider initiative 
typically underpinning organizational context agents interactions 
context defines nature relationship agents rules adhered interaction 
example agents may peers working team may manager agents negotiate rules particular auction house 
capture links agent systems explicit constructs modelling organizational rela tionships manager team member auctioneer 
cases relationships subject ongoing change social interaction means existing relationships evolve team peers may elect leader new relations created number unrelated agents band deliver service individual offer 
temporal extent relationships vary providing service permanent bond 
cope variety dyna agent researchers devised protocols enable organizational groupings formed specified mechanisms ensure groupings act coherent fashion developed structures characterize macro behavior collectives 

canonical view agent system drawing points fig 
seen adopting agent oriented approach software engineering means decomposing problem multiple autonomous components ieee control systems magazine act interact flexible ways achieve set objectives ii key abstraction models define agent oriented mindset agents interactions organizations iii explicit structures mechanisms describe manage complex changing web tional relationships exist agents 
control perspective view software systems similarities systems distributed control 
example avoids drawbacks hier control distributing decision making intelligent parts 
heterarchical control tends concentrate distributed systems nature control systems certain extent autonomy individual components flexible high level nature interactions explicit representation organizational context 
software engineering credentials agent oriented approach argument favor agent oriented approach software engineering composed steps show agent oriented decompositions effective way partitioning problem space complex system ii show key abstractions agent oriented mindset natural means modeling complex systems iii show agent oriented philosophy modeling managing organizational relationships appropriate dealing dependencies interactions exist complex systems 
taken steps form complete map ping cross product characteristics complex system key software engineering abstractions handling complexity apply agent systems 
step discussed turn 
merits agent oriented decompositions complex systems consist number related subsystems organized hierarchical fashion fig 

level subsystems achieve functionality parent system 
subsystem constituent components deliver functionality 
basic model interacting components working achieve particular objec tives occurs system 
fact entirely natural modularize components ieee control systems magazine terms objectives achieve 
view decompositions functions actions processes intuitive easier produce data objects acknowledged object oriented community see 
words component thought achieving objectives 
second important observation complex systems multiple loci control real systems top 
applying philosophy objective achieving decompositions means individual components localize late control 
entities thread control active control actions autonomous 
active autonomous components fulfill individual collective objectives need interact recall complex systems nearly decomposable 
system inherent complexity means impossible priori know potential links interactions occur unpredictable times unpredictable reasons unpredictable components 
reason futile try predict analyze possibilities design time 
realistic endow components ability decisions nature scope interac tions run time 
follows components need ability initiate respond interactions flexible manner 
policy deferring run time decisions component interactions facilitates engineer ing complex systems ways 
problems associated coupling components significantly reduced dealing flexible declarative manner 
components spe designed respond unanticipated requests spontaneously generate requests assistance find difficulty 
interactions enacted high level agent communication language coupling knowledge level issue 
removes syntactic concerns types errors caused unexpected interactions 
second problem managing control relationships software components task tradi tional objective decompositions significantly reduced 
agents continuously active coordination synchronization required handled bottom interagent interac tion 
ieee control systems magazine discussion apparent natural way modularize complex system terms multiple autonomous components act interact flexible ways achieve objectives 
agent oriented approach simply best fit 
suitability agent oriented abstractions significant part design process finding right models viewing problem 
typically multiple candidates difficult task choosing appropriate 
designing software powerful abstractions minimize semantic gap units analysis intuitively conceptualize problem constructs solution paradigm 
case complex systems problem characterized consists sub systems sub system components interactions organizational relationships 
turn subsystems naturally correspond agent organizations 
involve constituent compo nents act interact role larger enterprise 
case viewing subsystem components agents 
interplay subsystems constituent components naturally viewed terms high level social interactions complex system level tion find meaningful collections objects collaborate achieve higher level view 
view accords precisely knowledge level treatment interaction afforded agent oriented approach 
agent systems invariably described terms cooperating achieve common objectives coordinating actions negotiating resolve conflicts complex systems involve changing webs relationships various components 
require collections components treated single conceptual unit viewed different level abstraction 
agent oriented mindset provides suitable abstractions 
rich set structures available explicitly representing organizational relationships 
interaction protocols exist forming new groupings unwanted ones 
struc tures available modeling collectives 
point especially useful relation ieee control systems magazine representing subsystems team components working achieve collective goal 
need flexible management changing organizational structures organizational constructs class entities programming language sense agent sys tems explicit representations organizational relationships structures 
agent oriented systems concomitant computational mechanisms flexibly forming main taining organizations 
representational power enables agent systems exploit facets nature complex systems 
notion primitive component varied needs observer 
level entire subsystems viewed single tons teams collections agents viewed primitive components system eventually bottoms 
second structures provide stable intermediate forms essential rapid development complex systems 
availability means individual agents organ groupings developed relative isolation added system incre mental manner 
turn ensures smooth growth functionality 
agent oriented techniques widely adopted 
key pragmatic issues determine agent oriented approaches catch software engineering paradigm degree agents represent radical departure current soft ware engineering thinking ii degree existing software integrated agents 
trends evident examining evolution programming models 
shift languages conceptual basis determined underlying machine architecture languages key abstractions rooted problem domain 
agent oriented world view natural way characterizing types problem 
just real world populated objects operations performed equally full active purposeful agents interact achieve objectives 
object oriented analyses start precisely perspective view world set autonomous agents collaborate perform higher level function 
second basic building blocks ieee control systems magazine programming models exhibit increasing degrees localization encapsulation 
agents follow trend localizing purpose inside agent giving agent thread control encapsulating action selection 
third richer mechanisms promoting re pro vided 
agent view reaches new heights 
stopping re subsystem com ponents design patterns component ware rigidly interactions application frameworks agents enable subsystems flexible interactions reused 
case agent designs implementations reused applications 
consider example class agent architectures beliefs agent knows desires agent wants intentions agent doing core 
architectures wide variety applications including air traffic control process control fault diagnosis transportation 
case flexible patterns interaction contract net protocol agent task complete advertises fact believes capable performing agents may submit bid perform task interested originator dele gates task agent best bid various forms resource allocation auction english dutch second price sealed bid reused numerous applica tions see manufacturing line control scenario 
short agent oriented techniques represent natu ral progression current software engineering thinking reason main concepts tenets approach readily acceptable software engineering practitioners 
second factor favor widespread agents adoption require rev terms organization existing software systems 
agent oriented systems evolution ary incremental legacy software incorporated relatively straightforward manner see electricity transportation case study 
technique place wrapping software legacy code serve agent interface software components 
outside wrapper looks agent inside performs way translation func tion external requests agents mapping calls legacy code legacy code external requests mapping appropriate set agent communi cation commands 
ability wrap legacy systems means agents may initially ieee control systems magazine tion technology 
new requirements placed system agents may developed added 
feature enables complex system grow evolutionary fashion stable intermediate forms continually maintaining working version system 
case studies having discussed potential benefits agent systems complex systems general specific agent control system applications 
goal presenting case studies twofold ground concepts agent computing specific application con texts ii highlight practical advantages accrue agent solution 
scope applicability agent solutions emphasized discussing examples fundamentally different levels control spectrum control entire network con trol individual production line 
electricity transportation management application developed deployed spanish electric utility details underpinning agent technology details application domain 
generally energy management process monitoring control ling cycle generating transporting distributing electrical energy industrial domestic customers 
generation transforms raw energy hydraulic thermal nuclear solar sible form needs transported generation site consumer 
minimize losses transportation electrical voltage high kv placed transport network sent hundreds kilometers 
voltage lowered electricity delivered consumers distribution network involving kilometers kv spread smaller area 
ensure transportation network remains desired safety economical con straints equipped sophisticated data acquisition system conventional application programs help operator control engineer analyze programs prima designed normal operating conditions 
network operation monitored dispatch ieee control systems magazine ing control room dcr unexpected event occurs hundreds alarms automatically sent system 
circumstances operator rely experiential knowledge analyze information diagnose situation take appropriate dial actions return network safe state 
reduce operators cognitive load stances help better decisions faster developed stand decision support systems real time database stores information state net alarms analysis expert system diagnoses faults produced network alarm messages received dcr 
improve support decided systems interoperate produce coherent view new functionality added enable control engineer perform dynamically monitor service restoration process exploit new data sources chronological information faster rate snapshots available system improved 
follows description goals achieved agent technology 
agent techniques application 
application required tried tested decision support tools integrated extended new functionality 
means realizing system upgrade strategy considered extend existing systems cover new features follow distributed approach allow new function ality expressed distinct computational entities interact existing systems common distribution platform 
second option chosen considered effective means permitting reasoning information different granularity 
types alarm logical chronological need dealt 
case time stamped coincident time acquisition control system consequently conditioned control sys tem polling mechanism case time stamped coincident actual occurrence event 
chronological alarms represent accurate picture events network generally lead diagnosis disadvantage chrono ieee control systems magazine logical information low priority communication channels 
chan nels saturated happens disturbance time arrival unpredictable 
reasons new alarm analysis expert system built utilized chronological information subsequently integrate results preexisting system con monolithic system received types data embody types diag knowledge 
similar situation occurs considering service restoration 
types information rele vant activity snapshots provide comprehensive picture current state network components alarm messages show state components changed time 
produced relatively quickly give complete picture system state may take minutes large disturbance needed indicate type fault system restored 
trying place types information reasoning single system natural develop service restoration subsystem dealt mainly snapshots received necessary high level infor mation equipment fault diagnosis subsystem trying deal raw alarm messages 
allowing inclusion different network models system 
problem solvers need model network need applications net model model permits differential equations solved takes account phys ical characteristics components 
trying combine complex disparate models design time decided subsystem whichever model appropriate task 
various components interact runt ime resolve inconsistencies arise different network models 
enabling different problem solving paradigms 
diverse range activities need performed mean universally best problem solving paradigm procedural tech niques required algorithmic calculations connectivity know component con ieee control systems magazine nected load flow analysis solution differential equations symbolic reasoning heuristic search best diagnosis 
distributed approach enabled component encoded appropriate method 
meeting application performance criteria 
transportation management time critical applica tion different types information processed parallel small syn overhead response time system improved interconnected machines 
having decided distributed approach choice conventional distributed processing techniques agent techniques 
adopted follow ing reasons robustness subsystems overlapping domains expertise failure produce answer necessarily mean solution forthcoming systems may able produce partial solution 
achieve backup functionality flexible manner different problem solving components need intelligently coordinated context sensitive manner see cooperative scenario details task generation distributed processing systems 
ii reliability solu tions overlapping systems cross referenced operator reliable information 
cross referencing functionality needs properly managed prevailing circumstances requires dynamic flexible reasoning take place 
iii natural representation domain agent approach accurately represents way control engineers large disturbance occurs 
perform specialized roles works restoration tries diagnose problem different sources informa tion communicate relevant information ensure follow ing coherent course action objective restoring service 
specification agents normal working conditions management network operator dcr consists mainly routine simple tasks 
emergency situations management con difficult large number constraints taken consideration ieee control systems magazine insufficient quality information available decisions 
emergency situations typi cally originate short circuit line transformer 
exacerbated equip ment malfunctioning breaker failing open subsequent overloads domino effect cause line fail overload turn increases load neighboring lines overloaded subsequently fail 
situation worse power stations disconnected cause imbalance network power 
conse quently actions restore service taken rapidly accurately starts relatively minor problem major disaster 
circumstances actions operator perform consist mainly breaker operations topology changes activation deactivation protective relays 
larger disturbances actions power plants may required 
description control engineer job top analysis determined comprehensive decision support system cover activities detect existence disturbances operation protective relays caused routine maintenance confused genuine disturbances 
determine cause location type disturbance including identifying equipment permanently damaged 
analyze situation network arrives steady state 
prepare restoration plan return network original operational state 
top analysis bottom perspective examining extant systems decided encapsulate preexisting systems agents alarms analysis expert system interface control system 
discussed earlier availability chronological alarm messages necessitated new diagnosis system decided available agent 
known information initial area service black area help constrain search faulty equipment developing dedicated stand system purpose deemed cost effective original alarm analysis expert sys tem performance considered satisfactory somewhat slow 
agent ieee control systems magazine technology basic infrastructure implement functionality available agents developing system capable producing information considered cally viable 
bus bar breaker line detail operational system consists agents running different machines fig 

shows small portion network contains 
corresponding remote sion unit sends information dcr status electrical components 
dcr information collected front computer available cooperating agents control system interface functions 
bai blackout area identifier 
fault occurs network protective relays automatically try isolate minimum amount equipment possible ideal case ele ment fault isolated 
bai objective identify elements network initially service actual element fault region 
uses cal alarm messages information source cooperates brs aaa increase efficiency diagnosis process 
front computer bai csi sra uia aaa brs restoration diagnosis 
transport network agents 
csi ieee control systems magazine csi preexisting control system interface 
csi acts front control system com 
objectives acquire distribute network data agents interface conventional management system application programs monitor restoration process detect unexpected deviations 
split physical agents csi detects occurrence dis preprocesses chronological alarm messages aaa bai brs agents csi detects corrects inconsistencies snapshot data file network calculates power flowing information available sra uia 
brs relays supervisor 
new alarms analysis expert system detects occurrence disturbance determines type fault extent generates ordered list fault ses validates hypotheses identifies malfunctioning equipment 
perform analysis takes types inputs chronological alarm messages snapshots network give status breaker switch 
aaa preexisting alarms analysis agent expert system 
agent pursues similar goals brs quality information receives inferior brs 
alarm messages received systems relate physical operations received aaa represent accuracy received brs precise 
means data error free brs performs better diagnosis aaa 
chronological information lost distinct possibility system busy brs may perform worse aaa 
incomplete erroneous information exists true interesting cases need cooperation systems system robust reliable see 
sra service restoration agent 
agent service restoration plan return network steady state blackout occurred 
takes account constraints imposed damaged equipment identified diagnosis agents 
uia user interface agent 
agent implements interface users commu nity agents 
allows user inspect results produced diagnosis agents display ieee control systems magazine alarms received browse log analyzed disturbances 
standpoint tion user see plan produced modify run simulated environment see predicted effect request development new restoration plan takes account actions deemed pertinent 
distributed windowing system uia presents appropriate information consoles various control engineers working system fig 
shows control engineers working restoration activities diagnosis ties 
system design ensures tasks identified top analysis performed agent 
robustness achieved having multiple agents able provide overlapping results 
efficiency obtained parallel activation tasks 
reliability increased agents breaks rest agents produce result provided complete system opera tor 
cooperative diagnosis restoration important example cooperation system involves information interchange aaa brs bai agents 
aaa brs produce result different information sources bai applies different knowledge produce result coherent aaa brs 
assume block alarm messages provided system alarm messages identified related disturbance csi 
model agents csi realize alarms relevant aaa bai voluntarily send unsolicited data 
time process repeated brs receive corresponding chronological alarm messages 
point aaa bai brs operating parallel 
aaa receives alarm messages starts diagnosis process preliminary set hypotheses produced 
time bai received alarm messages started trying identify initial blackout area 
models ieee control systems magazine agents bai sends information aaa 
simultaneously certain delay brs agent starts working analysis chronological alarm messages 
result list initial hypotheses produced 
brs checks agents interested information aaa noted hypotheses sent 
brs continues diagnosis try validate cause fault 
producing tentative list hypotheses aaa proceeds detailed analysis try ascertain precise cause fault 
situations may occur initial blackout area available aaa triggering refinement behavior may reduce number ses validated bai focused view situation ii initial hypotheses provided brs available aaa triggering refinement behavior obtaining better reordering hypotheses validated benefit finding element fault iii validated hypotheses provided brs available aaa triggering refinement behavior functionality previous reordering validated hypotheses accurate iv information available bai brs aaa proceeds hypotheses validation stand agent 
agents slow provide information aaa continue find faulty element diagnosis reliable take longer 
restoration process activated disturbance detected 
disturbance iden disturbance identifier sent csi acquires snapshot network cor inconsistencies arisen representation calculates power flow solution current state 
information passed sra prepare restoration planning 
sra waits diagnosis agents informed element suspected fault proceeds prepare restoration plan 
plan preparation sra informed equipment fault different originally indicated aaa brs restoration information account 
uia interface user accesses results produced agent commu nity 
diagnosis phase user tentative early list suspected ieee control systems magazine hypotheses final validated list 
restoration phase uia supports interaction user teams agents 
user restoration plan decide modify run detailed simulation see effects plan specify new constraints ask new plan devised account 
observations reflections application afforded benefits 
agent system gives better results stand counterparts takes account multiple types knowledge data inte consistent manner 
second agent system robust overlap ping functionalities meaning partial results produced case component agent failure 
third results provided quickly cooperation provides short cut 
fourth functionalities different domain systems increased independently eas ier maintain see example argument developing bai general point sta ble intermediate forms 
fifth control engineer provided integrated view results interest 
system designed open new agents added incre mental manner 
key features multiagent system way handles fault diagnosis different types data alarms aaa chronological alarms brs different points view typical diagnosis approach hypothesis gener ation validation aaa brs bai monitoring approach provides high level view status network 
setup solution method best suited current situation dynamically selected 
example brs operational aaa solution provided control engineer created brs brs aaa running solution provided mutually agreed 
fact multiple agents trying generate results exploited avoid rep certain tasks deemed desirable particular context 
example aaa brs provide initial hypotheses consequently hypotheses provided brs available aaa starts generation task task need executed ieee control systems magazine hypotheses provided brs 
ability flexibly manage runt ime multiple sources data multiple problem solving perspectives provides enormous robustness system agents crashes able provide form solution 
manufacturing line control application developed daimlerchrysler led industrial consortium deployed daimlerchrysler production lines stuttgart germany details 
aim system provide flexible robust system controlling manufacturing line 
process basic parts workpieces various operations performed various machines 
industry standard approach manufacturing control devise global schedule typically covering day entire manufacturing process 
indicates various parts released stores machines routed operations performed various machines 
problem centralized approach plan formation divorced plan execution 
schedule rarely adhered practice machines operations fail ways difficult predict operations take longer expected 
disturbances occur plant controller initiate costly rescheduling exercise date schedule approximate guide 
options lead inefficiencies manufacturing process undesirable 
agent techniques application 
overcome aforementioned problems control system responsive prevail ing situation manufacturing process 
domain centralized controller viable option time consuming construct maintain date representation going system severe bottleneck system performance represent single point failure meaning system robust 
requirements decentralization responsiveness flexible contingency handling ieee control systems magazine agent approach adopted 
system manufactured part represented agent objective getting manufacturing line specified set operations performed 
machine represented agent 
agents objective maximizing throughput deciding parts accepted order operations performed time 
part operation performed agent negotiate machine agent capable performing operation 
short resources allocated dynamically just time basis continu ous coordination process relevant agents 
specification agents interactions achieve robustness flexibility machines overlapping capacities 
means machine perform manufacturing step 
machine breakdowns occur redundancy gives system flexibility diverting part machine 
diverting part possible ability bypass machine machines 
concept modular manufacturing system developed fig 
entire manufacturing system composed standard modules 
module consists machine way transportation switches fig 

switch move part entry points exits 
fig 
intermediary switches entries exit left hand side exits entry right hand side 

flexible manufacturing system 
arrangement standard modules fig 
means part enter machine lowermost conveyor bypass machine middle 
bypassing machine ieee control systems magazine part options proceed forward direction subsequent machine move backward topmost conveyor 
instance lowermost conveyor occupied preventing part entering target machine part move backward forward circle lowermost conveyor available 
way entire transportation system serves flexible buffer 
control flexible manufacturing system decentralized manner specific agent associ ated workpiece machine switch 
workpiece agent manages state operations need performed operations performed workpiece attached 
machine agent controls material flow machine just progress 
machine agent manages call virtual buffer 
buffer includes machine current progress outgoing flow material workpieces processed machine able find appropriate new machine 
switch agent controls particular switch deciding entry serve move part 

standard module 
agents constitute parallel processes 
processes course independent coordinated 
coordination achieved negotiation procedure takes place simultaneously 
single workpiece negotiates machines process 
particular workpiece auctions current due operations inviting machines bid tasks 
machine bid includes information current state machine virtual buffer 
workpiece awards operations specific machine getting ieee control systems magazine machine goal workpiece 
routing workpiece organized sequence bilateral communications case workpiece switch workpiece approaches 
continues workpiece eventually reaches goal 
detail allocation workpiece operations machines carried price sealed auction organizational structure 
round involves steps step protocol initiated workpiece agent particular workpiece enters manufacturing system immediately leaves machine 
case workpiece determines current task subsequent operations performed forward successors machine just left 
system efficient parts move forward left right fig 

possible due workpieces move backward assignment enforced avoid deadlocks see details 
workpiece sends invitation machines bid current task 
step machine receives invitation bid current task checks able form 
issues bid simply ignores call 
short term disturbances machine operations ignored 
subject negotiation allocation subtask current situation obviously tell machine state workpiece enters machine 
machine agent issues bids making sure ready accept new workpiece checks capacity virtual buffer 
capacity answer call 
agent bid includes current size virtual buffer maximum number desired opera tions able perform 
step workpiece agent collects bids specific call 
bids issues invitation bid continuing step workpiece selects best bid 
selection components bid having higher priority 
case lower current size virtual buffer better 
operations maximal subtask contains better 
chosen machine agent informed includes relevant workpiece virtual input buffer 
ieee control systems magazine workpiece agent selected target machine workpiece moved new goal 
layout depicted fig 
usually vast number different paths mately leading goal 
course shorter paths preferred important optimizing routing avoidance congestion disastrous consequences system performance 
unpredictable environment manufacturing system jams avoided strictly separating actual routing goal 
system dynamic routing ensured sequence bilateral communications time workpiece switch approaches 
switch tries move workpiece directly goal trying optimize routing 
exit available alternative route taken 
case priority workpiece incremented 
priorities decide workpiece prefer switch possibility workpiece highest pri served avoid indefinitely routing workpiece cycle actual goal 
observations reflections evaluate system daimlerchrysler conducted series simulations authentic product types cycle times 
disturbance characteristics taken existing machines 
typical configuration consists blocks identical machines 
number machines block ranges giving machines total 
simulations shown agent mechanism extremely robust disturbances machines failures control units 
performance nearly optimal achieving theoretical optimum 
addition simulation control system installed bypass existing large series manufacturing line cylinder heads 
bypass located plant stuttgart unter germany shown fig 

bypass undergone series performance tests showed results simulations valid real manufacturing conditions 
system routine operation years confirmed robustness day day production situations 

daimlerchrysler prototype 
ieee control systems magazine success system terms increased throughput greater robustness failure attributed points 
representing components machines agents means decision making localized 
responsive prevailing circumstances 
unexpected events occur agents autonomy try alterna tives 
second schedules built dynamically flexible interactions readily altered event delays unexpected contingencies 
article sought justify precisely agent oriented approaches suited developing complex software systems general control systems particular 
general points concrete showing apply different agent control systems ieee control systems magazine electricity transportation management system daimlerchrysler manufacturing line control system 
making arguments proponents software engineering paradigms claim key concepts agent oriented computing reproduced technique 
true 
agent oriented systems computer programs programs set computable functions 
misses point 
value paradigm mindset techniques provides software engineers 
respect agent oriented concepts techniques suited developing complex distributed systems extension currently available paradigms 
believe agent systems provide advantages generation control sys tems 
provide decentralized solution local decision making gives system high degree flexibility robustness 
downside decision making autonomous components correspondingly difficult predict system behavior 
progressing agent oriented methodologies specifically control applications 
systems described agents control single organization easier tailor behavior desirable system properties emerge interplay 
general case multiple organizations producing predictable system wide behavior area active research 
simon sciences artificial mit press 
jennings agent software engineering artificial intelligence vol pp 
jennings wooldridge eds agent technology foundations applications mar springer verlag 
parunak industrial practical applications distributed ai multi agent systems weiss ed mit press pp 

brooks mythical man month addison wesley ieee control systems magazine booch object oriented analysis design applications addison wesley 
wooldridge agent software engineering iee proc software engineering vol 
pp 

wooldridge jennings intelligent agents theory practice knowledge engineering review vol pp 

bond gasser eds readings distributed artificial intelligence morgan mann 
jennings controlling cooperative problem solving industrial multi agent systems joint intentions artificial intelligence vol 
pp 

durfee practically coordinating ai magazine vol 
pp 

jennings faratin parsons sierra wooldridge automated negotiation prospects methods challenges int 
group decision negotiation vol 
pp 

mayfield labrou finin evaluating kqml agent communication language intelligent agents ii wooldridge ller tambe eds springer pp 
newell knowledge level artificial intelligence vol pp 
carley gasser computational organisation theory multiagent systems weiss ed mit press pp 
boyd evolution control architectures automated manufacturing systems journal manufacturing systems vol 
duffie piper non hierarchical control flexible manufacturing cell robotics computer integrated manufacturing vol 
pp 

meyer object oriented software construction prentice hall 
wooldridge reasoning rational agents mit press 
smith davis frameworks cooperation distributed problem solving ieee trans systems man cybernetics vol 

ieee control systems magazine wurman dynamic pricing virtual marketplace ieee internet computing vol 
pp 

jennings mamdani varga archon develop real world dai applications part ieee expert vol 
pp 
jennings archon part electricity tion management ieee expert vol pp 
bussmann schild self organising manufacturing control industrial application agent technology proc 
th int 
conf 
multi agent systems boston usa pp 
bussmann jennings wooldridge re interaction protocols decision oriented applications proc 
rd int workshop agent oriented software engineering gna italy pp 


view complex system 
captions 
canonical view agent system 

transport network agents 

flexible manufacturing system 

standard module 

daimlerchrysler prototype source 
ieee control systems magazine sidebar agents vs objects ieee control systems magazine certain similarities object agent oriented approaches adhere principle information hiding recognize importance interactions sev eral important differences 
objects generally passive nature need sent mes sage active 
second objects encapsulate state behavior realization encapsulate behavior activation action choice 
object invoke publicly accessible method object 
method invoked corresponding actions formed 
third object orientation fails provide adequate set concepts mechanisms mod eling complex systems systems find objects classes modules provide essential insufficient means abstraction 
individual objects represent fine larity behavior method invocation primitive mechanism describing types inter actions take place 
recognition facts led development powerful abstraction mechanisms design patterns application frameworks component ware 
undoubtedly step forward fall short desiderata complex system developments 
nature focus generic system functions mandated patterns interaction rigid predetermined 
object oriented approaches provide minimal support specifying managing organizational relationships basically relationships defined static inheritance hierarchies 
