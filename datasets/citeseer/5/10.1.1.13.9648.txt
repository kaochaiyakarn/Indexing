multi robot decision making coordination graphs kok spaan nikos vlassis intelligent autonomous systems group informatics institute faculty science university amsterdam netherlands vlassis science uva nl group cooperating agents decision making individual agent depends actions agents 
dynamic environments dependencies change rapidly result continuously changing state 
context specific decomposition problem smaller subproblems coordination graphs er scalable solutions problem multiagent decision making 
apply coordination graphs continuous domain assigning roles agents coordinating di erent roles 
demonstrate method robocup soccer simulation domain 
multiagent multi robot system collection agents coexist environment interact explicitly implicitly try optimize performance measure 
research multiagent systems aims providing principles construction complex systems containing multiple independent agents focuses behavior management issues coordination behaviors systems 
case interested fully cooperative multiagent systems agents share common goal 
key aspect systems problem coordination process ensures individual decisions agents result jointly optimal decisions group 
principle game theoretic techniques applied solve coordination problem 
problem approach joint action space exponential number agents 
practical situations involving agents modeling person games intractable 
particular structure coordination problem exploited reduce complexity 
approach involves coordination graph cg :10.1.1.19.9428
graph node represents agent edge indicates corresponding agents coordinate actions 
context specific cg topology graph dynamically updated current context 
describe framework coordinate multiple robots coordination graphs 
assume group robotic agents embedded continuous dynamic domain able perceive surroundings sensors 
continuous nature state space direct application context specific cgs di cult 
alleviate problem propose discretization state assigning roles agents subsequently apply cg method derived set roles 
turns approach ers additional benefits set roles allows definition natural coordination rules exploit prior knowledge domain 
greatly simplifies modeling solution problem hand 
setup follows 
section review coordination problem gametheoretic point view section explain concept cg 
section describe framework coordinate agents continuous dynamic environment roles followed extensive example robocup soccer simulation domain section 
give discuss possible extensions section 
coordination problem order place coordination problem broader context review game theoretic point view 
strategic game tuple number agents set actions agent payo function agent payo function maps selected joint action 
real value ir 
agent selects action action set receives payo actions selected agents 
goal agents select individual decisions profitable joint action 
remainder interested fully cooperative strategic games called coordination games agents share payo function 
nash equilibrium defines joint action property agent holds psfrag replacements example coordination graph agent problem 
joint action agents excluding agent equilibrium joint action steady state agent profitably deviate actions agents 
formally coordination problem seen problem selecting nash equilibria coordination game 
di erent methods exist solve coordination game example communication learning imposing social conventions 
assume methods nash equilibria coordination problem selecting equilibrium 
number joint actions grows exponentially number agents making infeasible determine equilibria case agents 
calls methods reduce size joint action space solving coordination problem 
approach explained coordination graph captures local coordination requirements agents 
coordination graphs coordination graph cg represents coordination requirements system :10.1.1.19.9428
node graph represents agent edge graph defines possible directed dependency agents 
interconnected agents coordinate actions particular instance 
shows possible cg agent problem 
example coordinate coordinate coordinate coordinate global payo function decomposed sum local payo functions global coordination problem replaced number easier local coordination problems 
agents find joint optimal action cient variable elimination algorithm combination message passing scheme :10.1.1.19.9428
algorithm assumes agent knows neighbors graph necessarily payo function depend agents 
agent eliminated graph solving local optimization problem involves agent neighbors agent collects neighbors relevant payo functions optimizes decision conditionally neighbors decisions communicates resulting conditional payo function back neighbors 
agent selected process continues 
agents eliminated agent communicates decision neighbors reverse elimination order order fix strategy 
local payo functions matrix rule :10.1.1.19.9428
case payo rules defined value rules specify agent payo depends current context 
context defined propositional rule state variables actions agent neighbors 
rules regarded sparse representation complete payo matrices 
define formally 

group agents agent choose action set discrete state variables 
context element set possible combinations state action variables value rule function ir consistent current context 
example consider case persons coordinate actions enter narrow door 
describe situation value rule front door rule indicates agents located front door select action entering door global payo value reduced 
state consistent rule agents located front door rule apply agents coordinate actions 
conditioning current state agents discard irrelevant rules consequence cg dynamically updated simplified 
agent needs observe part state mentioned value rules 
extensive example see 
beneath left graph value rules defined binary action context variables depicted agent rule applies 
coordination dependencies agents represented directed edges child agent incoming edge parent agent ects decision 
agents observe current state true rule apply anymore removed 
consequence optimal joint psfrag replacements initial coordination graph left graph conditioning context true right 
action independent action edge deleted graph shown right graph 
agents conditioned state variables agents eliminated graph 
assume eliminate example 
collecting relevant rules maximize rules 
possible actions determines best response distributes conditional strategy case equal parent step children coordination graph anymore eliminated 
procedure continues distributed conditional strategy eliminated 
agent left fixes action second pass reverse order performed agent distributes strategy parents determine final strategy 
results optimal joint action global payo 
outcome algorithm independent elimination order distribution rules result optimal joint action :10.1.1.19.9428
limitation approach propositional rules applies discrete domains 
interested robots embedded continuous domains 
show utilize framework continuous dynamic environments 
dynamic continuous environments interested problems involve multiple robots embedded continuous domain sensors observe surroundings need coordinate actions 
main example robocup simulation soccer domain see team eleven agents fulfill common goal scoring goals opponent 
depending current situation certain agents field coordinate actions example agent controls ball decide nearby agent pass dependencies modeled cg satisfies requirements connectivity dynamically updated current continuous state ii sparse order keep dependencies associated local coordination problems simple possible 
conditioning context defined continuous domain di cult original rulebased cg representation 
way discretize context assigning roles agents 
roles natural way introducing domain prior knowledge multiagent problem provide flexible solution problem distributing global task team members 
soccer domain instance easily identify roles ranging active passive depending agent control ball specialized ones defender goalkeeper particular local situation agent assigned role computed role assignment function common knowledge agents 
set roles finite ordered important role assigned agent followed second important role construction role assigned agent agent assigned single role 
environment dependent potential functions determine appropriate agent particular role current context 
details assignment roles agents see 
assignment roles provides natural way parametrize coordination structure continuous domain 
intuition directly coordinating agents particular situation assign roles agents situation subsequently try coordinate set roles 
priori rules exist specify roles coordinated 
section give detailed example robot soccer 
roles regarded abstraction continuous state discrete context allowing application existing techniques discrete state cgs 
furthermore roles reduce action space agents locking specific actions 
example role goalkeeper include action score passive role action shoot deactivated 
reduction action space er computational savings importantly facilitate solution local coordination game restricting joint action space subspace contains nash equilibrium 
situation involving passer possible receivers 
agents passive 
experiments implemented framework simulation robot soccer team uva trilearn improve ball passing teammates 
robocup soccer server provides fully distributed dynamic multi robot domain teammates adversaries 
models real world complexities noise object movement noisy sensors actuators limited physical ability restricted communication 
robocup soccer simulation allow agents communicate agent time impossible apply original variable elimination algorithm 
decided state fully observable agents 
communication superfluous agent model complete variable elimination algorithm see details 
ect outcome algorithm 
non coordinating case teammate moves interception point observed change ball velocity passed ball concludes fastest teammate ball 
ball changes velocity notion fact soon receive ball coordinate passing player 
accomplish coordination agents dynamically assigned role current state 
roles coordinated performing variable elimination algorithm predefined value rules available actions context variables 
describe detail coordination graphs order coordinate passer receiver receiver second receiver player passed receiver 
implemented role assignment function assigns roles interceptor passer receiver passive agents continuous state information 
assignment roles computed directly current state information 
instance fastest player ball assigned interceptor role able kick ball assigned passer role kick ball 
receiver roles agents inside predefined range ball position 
rest players passive 
common situation depicted agent ball passer role players range passer receiver role players passive 
assignment roles defines structure coordination graph interceptors receivers connected 
note assignment changes dynamically state world changes 
connected agents coordinate actions 
agent select actions dir pass ball position fixed distance agent direction dir center nw sw se ne moveto dir move direction dir dribble dir move ball direction dir score try score opponent goal 
shoot ball hard opponent defenders opponent side 
move agent strategic position home current ball position 
defined state variables extract important high level information world state 
pass blocked dir indicates pass agent position direction dir agent blocked opponent 
case opponents located cone passing player position 
second front goal indicates agent located front opponent goal empty space dir indicates opponents direction dir agent define complete strategy team means value rules specify contribution global payo specific context 
value rules specified player defined actions context variables passer role receiver dir dir moveto dir dir north directed opponent goal center corresponds pass directly current agent position 
note enumerate rules variables 
complete list value rules combination possible instantiations variables 
rules dir passer empty space dribble passer passer front goal score receiver role interceptor dir moveto dir dir receiver role passer role receiver dir dir moveto dir moveto dir dir receiver 
intercept passive rule indicates passer shoot ball relative direction dir player case pass blocked opponent receiver move direction 
value contributed global payo returned depends position receiving agent receive pass closer opponent goal better 
rules indicate individual options passer dribbling allow forward dribbling clearing ball scoring 
principle create advanced dependencies 
example rule indicates situation receiver moves position expects current interceptor pass ball reaches ball 
rule indicates receiver move position expect receiver pass shoot ball 
rule describes situation receiving player moves strategic position field 
action executed able coordinate agents small global payo value 
rules contain single action option respectively interceptor intercept ball passive player move strategic position 
rules illustrate small set rules complete simple team strategy specified explicit coordination 
furthermore rules easily interpretable possible add prior knowledge problem 
advantage rules flexible existing rules directly added removed 
possible change complete strategy team playing different kinds opponents 
rules contain lot represented state variables 
simplified coordination graph conditioning roles condition specific context variables get graph depicted corresponding value rules assume simplicity context variables nw true passer moveto passer dribble passer receiver receiver dir moveto dir moveto nw receiver variable elimination algorithm performed 
agent eliminated graph maximizing local payo 
case agent eliminated gathers value rules contain distributes conditional strategy passer moveto moveto nw passer moveto moveto nw passer moveto parents 
agent fixed strategy agent perform agent execute moveto intercept pass agent perform moveto nw intercept possible pass agent 
case unpredicted reason pass fails graph automatically updated correspond new situation 
test approach played games team explicit coordination team coordination passing 
case modeled deleting rules list value rules removing condition moveto dir value rule indicate necessary receiver anticipate pass 
table shows results course games 
player take decisions match coordination algorithm coordination graph fig 
conditioning state variables 
passer agent decides pass ball receiver agent second receiver agent moves position receiver pass ball 
table results games coordination passing 
wins draws losses avg 
score passing executed times player 
strategy team completely specified value rules 
rules specific create scoring probabilities difference goal di erence small 
actual coordination improve passing players interested detailed statistics passing percentages 
turned successful passing percentage matches total passes team cg total passes team 
percentages indicate due better coordination teammates fewer mistakes ball passed teammates 
showed coordination graphs successfully applied cases group robotic agents embedded dynamic continuous domain 
assigned roles order continuous state discrete context allowing application existing techniques discrete state cgs 
currently assume agent observes part state ects local decisions role assignment 
apply framework domains agents observe required state information 
possible solutions action agent dependent current state information actively looking relevant hidden parts state space derive missing state information observed actions agents deduce agent performing action second interested applying reinforcement learning techniques continuous domain cg order learn payo functions automatic way 
application point view want apply cg model simulation robocup agents coordinate actions passing organizing defense obstructing opponent passes 
research supported progress embedded systems research program dutch organization scientific research nwo dutch ministry economic airs technology foundation stw project aes 
boutilier 
planning learning coordination multiagent decision processes 
proc 
conf 
theoretical aspects rationality knowledge 
chen heintz huang noda riley ste ens wang yin 
robocup soccer server soccer server version 
sourceforge net 
de boer kok 
incremental development synthetic multi agent system uva trilearn robotic soccer simulation team 
master thesis university amsterdam netherlands feb 
guestrin koller parr :10.1.1.19.9428
multiagent planning factored mdps 
advances neural information processing systems 
mit press 
guestrin venkataraman koller 
context specific multiagent coordination planning factored mdps 
aaai th nation 
conf 
artificial intelligence edmonton canada july 
kok spaan vlassis 
approach multiagent coordination continuous domains 
wiering editor proceedings twelfth belgian dutch conference machine learning pages utrecht netherlands dec 
osborne rubinstein 
course game theory 
mit press 
spaan vlassis groen 
high level coordination agents multiagent markov decision processes roles 
sa editor iros workshop cooperative robotics lausanne switzerland oct 
