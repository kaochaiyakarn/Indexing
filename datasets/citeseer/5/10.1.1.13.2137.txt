anf fast scalable tool data mining massive graphs christopher palmer computer science dept carnegie mellon university pittsburgh pa cs cmu edu graphs increasingly important data source important graphs internet web 
familiar graphs include cad circuits phone records gene sequences city streets social networks academic citations 
kind relationship actors appearing movies represented graph 
presents data mining tool called anf quickly answer number interesting questions graph represented data 
robust internet failures 
influential database papers 
gender differences movie appearance patterns 
core anf fast memory efficient approach approximating complete neighbourhood function graph 
internet graph nodes anf approximation times faster exact computation 
reduces running time nearly day matter minute allowing users perform ad hoc drill tasks repeatedly answer questions changing data sources 
enable drill anf employs new techniques approximating neighbourhood type functions graphs distinguished nodes edges 
compared best existing approximation anf approach faster accurate resources 
additionally previous approaches anf scales gracefully handle disk resident graphs 
results mining large graphs anf 
material supported national science foundation 
iis iis iis iis iis defense advanced research projects agency contract 

opinions findings recommendations expressed material author necessarily reflect views national science foundation darpa funding parties 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigkdd edmonton alberta canada copyright acm 
phillip gibbons intel research pittsburgh pittsburgh pa phillip gibbons intel com christos faloutsos computer science dept carnegie mellon university pittsburgh pa christos cs cmu edu 
graph data prevalent interesting data mining community example understanding internet www 
entities modeled graphs node computer administrative domain internet web page edge connection network hyperlink resources 
google interested finding important nodes graph 
broder studied connectivity information nodes internet :10.1.1.11.671
networking community different measures node importance build hierarchy internet 
source graph data studied citation graphs 
node publication edge citation publication wish know important papers 
examples graphs contain interesting information data mining purposes 
example telephone calling records long distance carrier viewed graph mining graph may help identify fraudulent behaviour marketing opportunities 
dna sequencing viewed graph identifying common subsequences form mining help scientists 
circuit design example cad system forms graph data mining find commonly components points failure fact binary relational table graph 
example graph derived internet movie database actor movie node add undirected edges actor indicate appeared itis common define graphs board positions game 
consider simple game tic tac toe 
data sources find prototypical questions motivated 
robust internet failures 

canadian internet similar french 

internet hierarchical structure 

phone call patterns caller callee asia similar 

new circuit design appear similar previously patented design 

influential database papers 

set street closures affect traffic 

best opening move tic tac toe 

gender differences movie appearances 

cluster movie genres 
possible answer questions computing graph properties pertaining connectivity neighbourhood structure graph graph similarity graphs graphs similar connectivity neighbourhood structure independent sizes 
similarity measure useful answering questions 
subgraph similarity subsets vertices graph compare induced subgraphs connected graph 
similarity measure useful answering questions 
vertex importance assign importance node graph connectivity 
importance measure useful answering questions 
answer questions types 
remaining questions answered similar fashion various forms neighbourhood function 
basic neighbourhood function graph called hop plot number pairs nodes specified distance distances section define formally general form neighbourhood function compute graph properties 
main contribution tool allows compute graph properties enabling answer interesting questions suggested 
simply answering questions want tool fast allow drill tasks 
want possible interactively answer users requests 
example determine best roads close parade city planner want interactively consider various sets street closures compare effect traffic 
contrast need able run interactively graphs want tool scales large graphs 
measuring properties web required hardware resources means researchers :10.1.1.11.671
produce data mining tool useful amount ram 
goals give rise list properties tool satisfy analyzing graph nodes edges error guarantees estimates accurate distances just limit 
fast scale linearly nodes edges 
low storage requirements additional storage 
adapts available memory node set fit memory effective available memory 
parallelizable massive graphs able distribute multiple processors multiple workstations low overheads 
sequential scans edge file avoid random accesses graph 
random accesses exhibit paging performance common case graph larger 
estimates node able estimate neighbourhood function node just graph 
presents tool call anf approximate neighbourhood function 
literature wall clock running time minutes ri approx 
trials exact sample anf trials anf trials anf trials millions edges anf algorithms scale existing approaches prove useful computing neighbourhood function 
show meets requirements primarily scales large graphs 
seen plots running time versus graph size randomly generated graphs 
existing approaches ri approximation scheme random sampling approach scale poorly anf schemes scale gracefully possible investigate larger graphs 
section provide background material definitions survey related 
section describe anf algorithms 
section experimental results demonstrating scalability approach 
addition show resources anf accurate faster ri approximation scheme anf times faster exact computation snapshot internet graph nodes 
section anf answer prototypical questions posed 

background related definitions graph vertices andm directed edges 
table summarizes symbols 
dist number edges shortest path answer prototypical questions need characterization node connectivity connectivity graph 
accordingly define forms neighbourhood function def 

individual neighbourhood function number nodes distance dist def 

neighbourhood function number pairs nodes distance dist vin 
deal subgraphs generalize definitions slightly 
set starting nodes table commonly symbols name description number vertices number edges vertex set edge set diameter graph starting set neighbourhood concluding set neighbourhood number extra approximation bits number parallel approximations set concluding nodes 
interested number pairs starting node distance def 

generalized individual neighbourhood function number nodes distance dist 
note 
def 

generalized neighbourhood function number pairs node node distance 
dist 
note 
section neighbourhood function characterize graphs 
compare ng tong measure similarity connectivity neighbourhood structure graphs 
example want know structural similarly web today web compute neighbourhood functions compare points 
comparing subgraphs induced vertex sets ton 
routers canadian domain routers french domain 
individual neighbourhood function node characterize importance respect connectivity 
important router way reaches routers fastest 
compute variants neighbourhood function efficiently answer graph questions posed 
related trivial compute respectively 
reminiscent size self join edge relation edge viewed tuple attributes second size result query select distinct second edge rel edge rel second writing way illustrates difficulty efficiently computing 
distinct means know possible pairs nodes counted take care count presence multiple paths pair nodes 
approach computing isto repeatedly multiply graph adjacency matrix 
asymptotically done time 
unfortunately require memory prohibitive 
common breadth searches graph 
breadth search easily compute compute running breadth search node summing takes storage worse case running time nm 
large disk resident graphs breadth search results expensive random access disk blocks 
appears state art solution exact computation 
transitive closure equivalently diameter graph 
lipton naughton algorithm estimating transitive closure uses adaptive sampling approach selecting starting nodes breadth traversals 
motivated section experimentally evaluate similar sampling strategy discover scales poorly large graphs due random access edge file scale graphs larger ram 
importantly find quality approximation quite poor show example sample large provide useful approximation 
lipton naughton improved cohen gave time algorithm memory 
cohen time algorithm estimating individual neighbourhood functions 
appears previous attempts approximate neighbourhood function 
details algorithm refer ri approximation appear section experimentally compare new approximation 
experiments demonstrate ri approximation ill suited large graphs due extensive random access breadth search heap data structures 
problems random access disk resident edge file addressed 
find possible define storage layouts undirected graphs storage blowup large 
interested large graphs graphs directed edges solve problems related large edge files 
need find new computation strategy avoids random access disk 
state art approaches understanding characterizing internet web neighbourhood information :10.1.1.11.671
data mining graphs focused mining frequent substructures 
essentially problem finding frequent itemsets generalized frequent subgraphs 
systems include subdue agm 
graphs improve marketing strategies 
survey citation analysis appears 

proposed approximation neighbourhood function graph 
assume contains directed edges 
undirected graphs represented pairs directed edges 
wish approximate function allowing compute set node concatenation bit set bit distance starting node update adding step edge bitwise orm compute estimates node individual estimate average position zero bits basic anf algorithm 
approximation done accurately way able handle disk resident graphs 
section construct approximation gradually 
approximate assuming memory resident data structures 
extend algorithm approximate requiring sufficient ram processing 
move data structure disk create algorithm meets requirements 
extend algorithm bit compression increase speed 
basic anf algorithm anf graph traversal effectively accesses edge file random order 
algorithm going efficient graph fit memory perform graph traversals 
going build nodes reachable steps finding nodes neighbours reach steps 
formally clearly node distance 
compute reach fewer steps nodes reach fewer steps 
reach nodes thatis distance edge iterates edge set performing traversal 
trick efficiently compute number distinct elements 
possibility dictionary data structure tree represent sets 
approach needs log time space prohibitive 
approach people particularly hackers employ bits mark membership 
node bits set bit string length set mark bit 
union sets bitwise 
unfortunately approach uses memory prohibitive large graphs 
re going clever probabilistic counting algorithm approximate sizes sets shorter bit strings log bits small constant :10.1.1.12.7100
refer bit string approximates simple example basic anf node mcur concatenation bit set bit distance starting node mcur edge mcur mcur bitwise node average position zero bit anf core anf 
giving node bit going give half nodes bit quarter bit give node bit probability 
mark node setting bit bitwise set union 
estimating size set small bit string done intuition 
expect nodes assigned bit haven seen bit set probably saw nodes 
approximation proportional bit number 
refer reader derivation constant proportionality proof estimate error bounds :10.1.1.12.7100
single approximation obviously robust 
parallel approximations treating length log bits 
shows complete algorithm implementing edge scan anf 
example 
shows approximations simple example basic anf algorithm 
purpose clarify concatenation illustrate computation 
input node undirected cycle parameters andr 
loop algorithms generates table random 
exponential distribution randomly set bit concatenated 
bit leftmost bit bit mask 
iteration uses operation combine nodes reach steps plus ones neighbours reach steps 
example just nodes neighbors node 
estimates example computed average zero bit positions 
algorithm uses excessive amount memory estimate general forms neighbourhood function 
depicts algorithm improvements 
mcur iteration starting nodes just changes estimate summing terms implementation done extending mcur hold marked bit indicating membership concluding nodes change case 
reach nodes zero steps 
nodes initially assigned 
anf algorithm meets requirements set error guarantees low error high confidence 
fast running time expect fast typically quite small verified section 
low storage requirements additional memory mcur 
adapts available memory 
address issue section 
easily parallelizable partition nodes processors processor may independently compute mcur set 
synchronization needed iteration 
sequential scans edge file 
estimates provable accuracy 
anf algorithm anf algorithm longer accesses edges random order access mcur effectively random order 
see edge write mcur 
tables larger available memory swapping kill performance 
propose small amount preprocessing accesses predictable 
idea break large mcur resp pieces 
partition edges buckets 
cases pass bucket sort partition edges 
partitioned edges run algorithm update mcur bucket mcur load bucket mcur bucket load bucket edge bucket mcur mcur write bucket mcur cost algorithm exactly cost running anf plus cost simply reordered original computation 
mcur bytes long cost required update load store bucket mcur read bucket mcur cost select minimal file descriptors efficiently perform bucket sort pass 
note reordering computation edges predictable insert prefetching operations allows computation performed parallel 
complete algorithm prefetching appears 
algorithm meets requirements 
select number buckets andb partition edges buckets sorted bucket node mcur concatenation bit set bit mark mcur current buffer full switch buffers perform flush buffers need written distance fetch data bucket mcur prefetch buckets mcur edge mcur memory flushing prefetching wait necessary asynchronously flush modified buffer prefetching buffer memory prefetching wait necessary prefetching buffer 
mcur mcur copy mcur stream mcur computing estimate est fetch data bucket mcur node mcur memory prefetching wait available start prefetching buffer mcur element bucket asynchronously flush buffer continue processing double buffer marked mcur est average position zero bits output est anf disk processing leading ones compressions anf anf algorithm dominated costs large data sets cost bit operations smaller data sets 
cases improve anf reducing number bits data manipulated 
observe anf runs gradually accumulate relatively lengthy set leading 
form xxxxxx wasteful apply bit operations write leading disk 
compress 
second achieve better compression bit shuffling 
approximations leading ones 
compressing mask individually interleave bit mask followed second bit example masks gives rise larger number leading ones 
anf algorithm uses counter leading ones reduce amount number bit operations 
mark bit counter prepended 
experiments find leading ones compressions provide significant speed 
experimental evaluation section experimental validation anf approximation 
alternative approaches introduced describe data sets 
propose metric comparing neighbourhood functions functions potentially large domain 
conduct sensitivity analysis parameter pick value compare anf approximation various settings parameter show sampling provide poor estimates examine scalability approaches 
key results section answer questions 
anf sensitive number extra bits 

anf faster existing approaches 

anf accurate existing approaches 

anf really scales large graphs 

framework ri approximation scheme ri approximation algorithm approximate counting scheme proposed 
estimate number distinct elements multi set assign random value record values added set 
estimated size reciprocal value seen minus 
approximate counting scheme estimate individual neighbourhood functions algorithm 
need know node minimum value vh node reachable hops 
es 
equivalent efficient algorithm uses breadth searches 
shown improved procedure takes time high probability 
reduce variance estimates entire algorithm repeated averaging estimates 
sampling sample selecting random edges random nodes random starting nodes breadth search 
randomly selecting set nodes edges points set randomly selecting set edges produce useful sample 
example imagine sampling cycle large sample leave disconnected arcs different properties 
completeness verified approaches produced useless estimates 
approach compelling 
akin sampling done 
recall neighbourhood function 
summing nodes sum sample nodes breadth searches compute exact 
call method exact sample potential provide great estimates single sample cycle provide exact solution 
experimentally find approach potential provide table data set characteristics degree prac 
name nodes edges max 
avg 
diam 
orient 
cornell dir cycle grid uniform cora dir router poor estimates 
additionally find scale large graphs random access edge file due breadth search 
experimental data sets collected real data sets generated synthetic data sets 
data sets variety properties cover potential applications neighbourhood function 
summary information provided table 
prac 
diam practical diameter informally mean distance includes pairs points 
real data sets router undirected internet routers data isi including scans done lucent bell laboratories 
cornell crawl cornell web site mark craven 
cora cora project research papers web provided citation graph 
synthetic data sets cycle single simple undirected cycle circle 
grid planar grid undirected 
uniform graph random undirected edges 
skewed graph generated internet fashion undirected edges method 
evaluation metric approximating functions defined points 
true neighbourhood function candidate approximation 
measure error standard relative error metric 
measure error root mean square rms pointwise relative errors 
error function rel qp dh rel note rms computed 
require approximations points 
results parameter sensitivity anf parameters number parallel approximations number additional bits thenumber approximations typical trade time accuracy 
consider section fix time 
additional experiments run values produced similar results 
measure sensitivity averaged rms error rms relative error extra bit extra bits extra bits extra bits extra bits cornell cycle grid uniform data set cora router results sensitive trials different values different data sets 
results appear see accuracy sensitive value 
lines points visual aid 
find provide consistent results 
accuracy examine accuracy anf approximation 
compare accuracy highly tuned implementation ri approximation existing approach 
fix consider values 
average error trials approximation scheme 
row shows accuracy values data set algorithm second row shows corresponding running times 
see anf error independent data sets 
ri approximation error varies significantly data sets 
anf achieves errors andk respectively 
ri errors respectively 
anf faster ri particularly larger graphs times savings 
time anf accurate ri 
case graphs may stored memory significant improvement 
sampling problems described exact approach 
heavy memory requirements fast breadth search requires edge file fit memory 
second quality dependent graph bounds error 
third possible compute individual neighbourhood functions 
provide example demonstrates problems 
helps illustrate example graph 
create chain nodes start node add nnodes center graph directed edge directed edge graph diameter neighbourhood function distance distance define set source nodes edge center nodes set terminal nodes edge table wall clock running time minutes data set bf exact anf speed uniform cora router center nodes 
majority sampled nodes center nodes source nodes 
result error factor exact sample sample 
measure error running time trials variety sample sizes ranging graph generated 
shows large errors large samples 
illustrate scalability issues exact sample constructed graph andd 
increase proportionately generate larger graphs 
shows graph grows larger exact sample scales anf soon edge file longer fits memory approximately edges see approximately order magnitude increase running time exact sample approach 
conclude exact sample scales poorly graphs larger available memory 
speed scalability table reports wall clock running times unloaded pentium ii machine exact computation breadth search anf parallel approximations 
chose provides error acceptable situations 
approximations quite fast router data set reduced running time approximately day minutes 
possible run drill tasks larger data sets 
find anf times faster exact computation data sets 
anf scales larger graphs alternatives 
generated random graphs placing edges randomly nodes 
increased number nodes edges preserving edge node ratio average degree large crawls web 
shows running times anf variants ri approximation example 
parameters alternative chosen approximately running time data point 
values anf variants exact sample 
find 
exact sample scales worse linearly 
fixed sampling rate expect scale quadratically increase number nodes edges 

ri quickly exhausts resources due data structures 
ri designed avoid random accesses paging behaviour edges timing experiment 

anf suffers similar swapping issues exhausts memory edges stopped 
rms relative error wall clock running time minutes ri approx 
trials anf trials cornell cycle grid uniform data set cora router rms relative error ri approx 
trials anf trials cornell cycle grid uniform data set cora router rms relative error ri approx 
trials anf trials cornell cycle grid uniform data set cora router accuracy accuracy accuracy ri approx 
trials anf trials cornell cycle grid uniform data set cora router wall clock running time minutes ri approx 
trials anf trials cornell cycle grid uniform data set cora router wall clock running time minutes ri approx 
trials anf trials cornell cycle grid uniform data set cora router time time time anf algorithm provides accurate faster results ri approximation nodes 
nodes nodes rms relative error exact sample anf trials running time seconds time seconds log scale exact sample anf trials millions edges graph exhibiting huge errors error vs running time running time vs edges sampled breadth search provide huge errors scale large edge files 
approximate counting methods disk resident graphs 

anf anf scale best growing piece wise linearly size graph 
break points data fits memory edges mcur fits memory edges fits memory rest 
expected 

anf offers speed anf 
anf algorithm scales large graphs linear increase running time 

data mining anf tool highly accurate efficient approximation tool anf possible answer prototypical graph mining questions posed 
due limits page constraints data availability report answers representative sample questions 
questions answered approaches demonstrate 
approach compute various neighbourhood functions compare 
tool allows detailed comparison functions 
comparing neighbourhood functions requires compare functions potentially large domains domain 
focus summarized statistic derived neighbourhood function called hop exponent 
real graphs neighbourhood function follows power law exponent defined hop exponent similarly hx individual hop exponent node 
interesting observations hop exponent appealing metric 
power law holds neighbourhood function linear section slope viewed log log scale 
second hop exponent informally intrinsic dimensionality graph 
cycle hop exponent grid hop exponent corresponds idea dimensionality 
third graphs different hop exponents way anf importance delta importance anf finds best starting move similar 
neighbourhood functions follow power law hop exponent fairly reasonably captures growth neighbourhood function 
compute hop exponent truncate neighbourhood function deff diameter compute squares line best fit log log space extract slope line 
slope hop exponent graph measure growth neighbourhood function 
define deff include pairs nodes 
individual hop exponent hx measure node importance respect connectivity graph 
answer proposed questions 
tic tac toe tic tac toe simple game players alternatively place mark unoccupied square grid 
winner player connect symbols row column diagonal 
best opening move center square best corners worst moves remaining squares 
verify notion importance potential anf tool discover rule 
construct graph node valid board add edge board board indicate possible move 
concluding set set boards wins 
compute individual neighbourhood functions ofthe importance speed attain winning positions moves 
shows importances difference best move 
anf determined correct importance opening move 
see center slightly better corner square turn better remaining squares 
shows correct ordering starting moves relative importance 
clustering movie genres internet movie data base imdb collection relations movies 
map subset relations graphs illustrate questions answer anf tool 
construct actor movie graph creating node actor node movie 
undirected edge placed actor indicate appearance nodes created actors 
employ relation imdb 
movie identified genres 
genre take set movies genre set actors appear movies 
cluster graphs computing hop exponents forming clusters similar hop exponents difference 
film animation short adult fantasy documentary family mystery musical western war sci fi romance horror adventure crime action comedy drama movie genre clusters sorted increasing hop exponent value clustering appears 
interesting cluster mystery musical western war corresponds movies typically older 
fringe genres adult turn separated 
internet router data networking community study early version anf tool anf look inherent robustness internet 
robustness observe topology 
router node edges indicate communication links 
reproduce results study including 
goal determine robust internet router failures 
experiment delete number routers measure total connectivity number pairs routers able communicate hop exponent graph 
lines differ deleted routers selected 
randomly selected nodes deleted 
second nodes deleted decreasing order importance 
third routers deleted decreasing order degree 
see interesting results 
random failures disrupt internet 

may possible take random sample internet deleting random routers adjacent edges 
appears possible connectivity information hop exponent significantly changed random deletions 

targeted failures routers quickly dramatically disrupt internet 
type study infeasible anf tool exact computation required computation time 

interesting data mining questions graph data proposed efficient accurate approximation algorithm gives tool anf needed answer questions results questions real world data 
anf quite useful questions addressed studying neighbourhood structure underlying graphs anf study important movie actors 
experimentally verified anf provides advantages highly accurate estimates provable bounds verified experimentally finding error number reachable pairs uniform random selection decreasing individual hop exponent decreasing node degree number nodes deleted graph approx 
nodes number pairs nodes communicate vs number deleted nodes parallel approximations synthetic real world data sets 
orders magnitude faster data sets algorithm times faster exact computation 
times faster ri approximation scheme 
low storage requirements edge file algorithm uses additional storage 
adapts available memory version algorithm experimentally verified scales graph size 
parallelized anf algorithm may parallelized synchronization points 
employs sequential scans prior approximations neighbourhood function algorithm avoids random access edge file performs sequential scan edge file hop 
individual neighbourhood functions free anf computed approximations individual neighbourhood functions byproduct computation 
approximations proved useful identifying important 
case graphs data structures fit memory anf represents significant improvement speed accuracy 
graphs get large processed effectively main memory anf possible answer questions infeasible impossible answer 
addition speed neighbourhood measures useful discovering answers prototypical questions 
best opening moves tic tac toe 

clustered movie genres 

internet resilient random failures targeted failures quickly create disconnected components 

sampling internet preserves connectivity patterns targeted failures truly distort 

adamic 
small world web 
proceedings european conf 
digital libraries 
brin page 
anatomy large scale hypertextual web search engine 
computer networks isdn systems 
hop exponent uniform random selection decreasing individual hop exponent decreasing node degrees number nodes deleted graph approx 
nodes hop exponent internet vs number deleted nodes effect router failures internet broder kumar maghoul raghavan stata 
graph structure web 
proceedings th international world wide web conference pages 
cohen 
size estimation framework applications transitive closure reachability 
journal computer system sciences december 
cook holder 
graph data mining 
intelligent systems applications 
cora search engine www cora whizbang com 
domingos richardson 
mining network value customers 
kdd pages 
faloutsos faloutsos faloutsos 
power law relationships internet topology 
sigcomm 
flajolet martin :10.1.1.12.7100
probabilistic counting algorithms data base applications 
journal computer system sciences 
imdb 
www imdb com 
inokuchi washio motoda 
apriori algorithm mining frequent substructures graph data 
pages 
cs bell labs com ches map 
kumar raghavan rajagopalan sivakumar tomkins upfal 
web graph 
acm sigmod sigact sigart symposium principles database systems pages 
lipton naughton 
estimating size generalized transitive closures 
proceedings th international conference large data bases pages 
nodine goodrich vitter 
blocking external graph searching 
proc 
acm pods conference pods pages 
palmer faloutsos faloutsos gibbons 
connectivity fault tolerance internet topology 
workshop network related data management 
palmer 
generating network obey power laws 
ieee globecom 
salton mcgill 
modern information retrieval 
mcgraw hill 
www isi edu scan mercator maps html 
palmer faloutsos 
simple conceptual model internet topology 
ieee globecom 
