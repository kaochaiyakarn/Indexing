distributed proxy server management self organized approach tsui comp edu hk department computer science hong kong university kowloon tong kowloon hong kong kaiser mjk department computer science engineering university connecticut ct usa liu comp edu hk department computer science hong kong university kowloon tong kowloon hong kong 
proxy servers common solutions relieve organizational networks heavy traffic storing frequently referenced web objects local cache 
proxies commonly known cooperative proxy systems usually organized way optimize utilization storage capacity 
self organized approach manage distributed proxy system called adaptive distributed caching adc proposed 
model proxy autonomous agent equipped decide deal client requests local information 
experimental results show adc algorithm able compete typical hashing approaches 
gives full description self organizing distributed algorithm performance comparison hit rate hop count 
additional evaluation performance respect request routing table size 
keywords autonomy oriented computation self organization adaptive proxy server 
internet growing exponentially web caches shown feasible way reduce network traffic web servers store web objects requested clients spread global network 
web cache proxy usually placed clients making requests web servers servicing requests 
try resolve needed object local cache 
internet traffic expected reduce response user request expected improve 
proxies able resolve incoming request choice forwarding request directly origin server query neighboring proxy 
idea proxy forward requests peer leads research cooperative proxies distributed proxy systems 
distributed proxy systems kluwer academic publishers 
printed netherlands 
adc tex tsui set proxies combined increase storage space cache increase chance fulfilling incoming requests 
cooperative proxies try combine individual caches way maximum cache usage achieved acting transparently single load balanced proxy cache 
lead overhead problems inter proxy communication distribution object storage location information 
previous research cooperative proxies hierarchical hashing approaches adaptive web caching straightforward approach central coordinator 
additional research distributed systems covers areas consistency multiple proxies theoretical description underlying processes attempts build system idea economical models 
issues performance effectiveness replication schemes studied different schemes internal representation url lists analyzed 
research distributed caching distributed object replication schemes resource allocation server load balancing 
way relieve network congestion install reverse proxy origin server 
speed server response balancing load multiple servers mirrors main server 
various approaches suggested 
advantage approach transparency user matter server located locally distributed internet 
solution bring web objects closer clients 
load balancing problem tackled different ways 
knowledge intensive approach relies heavily experience network designers understands network traffic behavior try configure proxy servers appropriately 
unreliable approach network traffic unpredictable 
slightly automated approach define certain heuristics say expert system react changes 
approach takes human loop suffers adaptability problem 
highly adaptive solution needed react quickly change traffic behavior sudden burst requests break certain part internet 
able learn different modes operation online system need taken offline 
successful discovery adaptive system allow organizations deliver better quality service local users 
adc tex distributed proxy server management benefit applies subscribers internet service providers adaptive load balancing strategy adopted 
proposed method emphasize self organization autonomous proxy servers 
basic idea allow elements system decisions simple local behavior model need limited information system notion central computational paradigm known autonomy oriented computation 
common hashing algorithms routing requests pre defined 
sense central control unit absent proposed methods 
proxy systems proposed methods require prior knowledge hardware differences proxy server need know advance client traffic pattern 
article describe related proxy servers 
details adaptive distributed caching adc algorithm described experimental results performance 
article concludes discussions interesting observations research directions 

related proxy servers help lower demand bandwidth improve request turnaround time storing frequently referenced web objects local cache 
cache physical capacity limit objects cache need replaced room new object need stored cache 
commonly strategy lru oldest object cache replaced 
lot improving base strategy 
existing cooperative proxy systems organized hierarchical distributed manners 
hierarchical approach internet caching protocol icp fixed hierarchy 
page local cache proxy server requested neighboring proxies hierarchy level 
root proxy hierarchy queried requests resolved locally continue climb hierarchy request objects 
lead bottleneck situation main root server 
distributed approach usually hashing algorithm cache array routing protocol carp 
requested page mapped exactly proxy proxy array hashing system resolved local cache requested origin server 
hashing allocations widely seen adc tex tsui ideal way find cached web pages due fact location pre defined 
major drawback inflexibility poor adaptability 
adaptive web caching try overcome specific performance bottlenecks 
example adaptive web caching dynamically creates proxy groups combined data multicasting computes routing protocol exchanged routing information 
approaches considered experimental 
approaches pre fetching reverse proxies active proxies usually seen improvements speed performance general hierarchical distributed infrastructure go hand hand proposed self organizing approach 
see detailed discussion limitations pre fetching approach 
structuring proxy servers improve chance locating required object proxy servers 
common technique arrange host proxy servers hierarchical manner proxy server necessarily local area network proxy proxy servers serving proxy local users 
approach shortens distance web server user requests object 
done design proxy hierarchy 
wu yu done load balancing client side proxy servers 
emphasized tuning commonly hashing algorithm load distribution 
researchers mit hand proposed new hashing algorithm called consistent hashing improve caching performance resources added time time 

adaptive distributed caching section introduce core components adaptive distributed caching adc algorithm 
essence algorithm combines advantages hierarchical distributed caching allowing multiple copies object hashing distributed caching 
adc developed ideas hashing allocation research redefined specific components reach desired emergent behaviors 
short proxies maintain minimal number duplicate copies frequently requested objects balance user request load cooperative proxies 
adc allows distributed proxies adc tex distributed proxy server management 
different ways deal client request cache occurs point inception carp adc agree specific location object need central coordinator broadcasting protocol 
proxies widely carp algorithm hashing algorithm find proxy responsible particular request url needed object 
proxy encountered request responsible object fulfill request cache fetch object server 
forward request proxy act forwarding 
benefits carp efficient request handling redundant data 
susceptible data loss due infrastructure change proxy system potential uneven distribution load due exceptional high demand certain sites 
adc proxies pre defined request routing function try learn routing table mapping tables observing experienced traffic 
proxy fulfill incoming request forward request proxy turn may continue forward request proxy pn requested objects cache decides fetch objects origin server 
requested object travel reverse direction path request originally traversed proxy path decide cache object selective caching 
duplicate copies web object 
subsections describe mapping tables request routing tables index cache content 
details core functions adc request forwarding backtracking selective caching 
adc tex tsui 
mapping tables table ia sample single table obj id proxy avg hits www xy www xy www xy www xy www xy mapping table local data structure proxy resolve object location forwarding process see section 
sense see mapping table direct replacement static hashing function hashing approaches map object ids urls unique location 
main objective algorithm allow existing mapping tables agree unique location object broadcasting protocol central coordinator 
attempt algorithm allowed table grow infinitely keeping track previously experienced objects usually leads memory problems performance issues 
latest extension introduced way limit mapping table keeping performance previously attained level 

single table single table simply keep track current flow requests 
unknown object new entry top table displacing oldest entry bottom table known lru algorithm 
requirement single table large requests hits occur 
table ia shows simple example single mapping table 
column contains general object id object urls case 
second column contains current assigned location specific object 
information local vary different proxies 
objects particular proxy responsible value column single table 
third column takes marker stores time object requested 
fourth column keeps track average time requests object column simply keeps track number times specific object requested 
adc tex distributed proxy server management table ib 
sample multiple table obj id proxy avg hits www xy www xy www xy www xy www xy table ic 
sample cache table obj id proxy avg hits www xy www xy www xy www xy www xy pointed intentionally hits value compute average request time focus solely time difference requests 
adaptive system changes past need considered hits value allow objects highly requested past short time span remain unnecessarily long local cache 
existing entry single table experiences hit migration single table multiple may occur depending factors time difference latest requests reasonable approximation average object request frequency request frequency objects multiple table 

multiple table multiple table table ib restricted size contains objects requested 
organization multiple table single table ordered average request time objects 
order allows simple identification object worst average time quick insertions deletions binary search 
multiple table filled newly arrived objects single table need average request time lower worst adc tex tsui case currently residing table placed appropriate position 
objects removed multiple table put back single table regular entry giving chance hit 
object considered migrating multiple table caching table requested entry created multiple table 

caching table caching table table ic adc proxy keeps track currently cached objects 
table similar exception table entries represent stored objects 
similar multiple table table ordered average request value column new objects outperform worst case row table placed appropriate position 
elements drop bottom table move back multiple table gives chance hit near drop completely time 
notice entries caching table proxy entry set proxy id objects cached duplicate copy selective caching process see section id corresponds proxy supplied requested object cache origin server 

request forwarding proxy adc mapping table request comes global unique id usually clients ip address internal request counter 
adc proxies handle request look cache 
ideally requested object returned requester client proxy 
triggers request forwarding mechanism 
receipt reply proxy origin sever processing required 
complete pseudocode depicted 
request forwarding describes idea search process unresolved requests forwarded suitable proxy object origin server 
general decision forwarding location previously learned data stored local mapping tables random selection set known proxies 
cases proxy got selected twice forwarding process doubly hit proxy forward request origin server prevent loop happening 
similarly maximum number forwarding set avoid endless forwarding 
adc tex distributed proxy server management request handling object cache update caching table return object forward request store request info hop count max hop count seen request twice send request origin server object single table multiple table retrieve proxy id host randomly select proxy id origin server endif send request host endif process reply perform selective caching responsible proxy return object client object obtained origin server mark object proxy id return object requester upstream proxy client endif endif endif 
pseudocode handling request adc proxy server retrieved object traverse path back requesting client proxies way option cache data 
regard internal data structure important proxy stores information forwarded request long backtracking process completed 

multicasting backtracking backtracking process retrieved object travels back downstream proxy 
method adc proxies agree adc tex tsui location specific web object absence central coordinator broadcasting protocol 
assumption proxy retrieves web object concerned mark package id proxies return path receive accept information 
mapping tables updated subsequent requests object directed right location 

selective caching aging selective caching introduced previous allow proxy autonomously specialize specific set cached data 
hierarchical hashing systems proxy stores passing objects regardless significance usually uses lru algorithm cache replacement strategy 
approach drawback creates high cache fluctuation rate minimal reliability regard cached content 
proxy agents adc keep track average request frequency requested objects requests experienced 
learned data form time gap requests decide new data cached 
newly arrived object cached average request time smaller worst case currently residing cache 
mentioned introduced selective caching mean focus frequently requested objects preliminary shown adc algorithm works better selective caching ordered table table typical lru algorithm 
object cached able move caching table having average request time shorter worst case 
sure old objects expire introduced simple object aging strategy computing object average time focus passed time request 
tage advantage equation simple incurs minimal computational cost 
gives currently requested objects lower age allowing stay longer table represents actual average value request 
essentially seen moving average focus current time 
noted object age pace established table order remains aging process 
new objects current age existing objects place appropriate position 
adc tex distributed proxy server management 
experimentation validate verify adaptive distributed caching algorithm described ran multiple simulations sets artificially created client requests polygraph benchmarking tool real time evaluation hardware proxy systems allows specific settings different parameters create artificial request pattern supposed close real life 

experimental setup set tests compare performance adc algorithm widely hashing carp cache hit rate hop count 
second set tests aim test sensitivity adc algorithm size mapping tables performance evaluated cache hit rate hop count execution time 
tests object size ignored assumed uniform 
number adc hash proxies servers providing web objects clients 
maximum number requests second set 
maximum possible number requests generated data files 

request patterns created files come set requests equivalent hours traffic clients divided main phases 
load phase gradually increases initial minutes wise vera minutes 
shows request throughput phase phase fill requests covers simple fill phase request repetitions 
phase top requests offers requests repeats phase top 
idle time covering requests workload kept maximum workload 
performance assessment industrial strength proxy servers polygraph tool middle section top 
request patterns differ document popularity model 
scenario data file set popular documents hot set equal total number requested documents instant working set 
probability requesting object hot set 
scenario data file hot set size probability accessing adc tex tsui number requests server id 
number requests server scenario request pattern number requests server id 
number requests server scenario request pattern hot set 
result variation difference maximum achievable hit rate 

performance metrics cache hit rate hop count measure performance algorithms 
study parameter sensitivity relation table size included simulated execution time 
cache hit rate refers percentage time request located local cache proxy server proxy system 
serve indicator network traffic saved employing proxy 
maximum achievable hit rate depends cache size traffic pattern 
exact hardware software direct comparison published results useful 
purposes relative performance measured 
hop count measures number inter machine communication client proxy proxy proxy proxy server communication 
hashing algorithm possible combination sequence communications shown graphically adc tex distributed proxy server management 
throughput polygraph generated traffic pattern time client proxy client local cache lookup client proxy server proxy client origin server lookup client proxy proxy client cache lookup non directly connected proxy client proxy proxy server proxy client origin server lookup non directly connected proxy average hop count bounded ideal hop count 
adc number hops number route traversed twice 
lower bound adc hop count ideal hop count 

adc versus hashing compare performance adc algorithm performance common hashing algorithm hit rate percentage reuse hop count number intervening proxies server requested object reaches requester 
system runs entries single multiple table entries caching table running proxies 

hit rate show average hit rate moving average request intervals scenario traffic patterns respectively 
general observation fill top phases adc takes longer time achieve hit rate hashing achieved 
measurement phase top adc performs hashing algorithm 
adc tex tsui hit rate requests adc hash 
hit rates achieved adc hashing scenario traffic pattern hit rate requests adc hash 
hit rates achieved adc hashing scenario traffic pattern 
hop count adc hashing achieve similar cache hit rate necessary see adc doing expense increased latency 
show comparison average number hops needed resolve request 
scenario traffic hashing requires average close hops resolve request 
means hashing needs contact origin server second proxy time 
hand adc needs average additional hops hashing 
means adc needs consult proxy hashing half time 
result hand allows adc algorithm search specific object flexibly hashing algorithm 
hand adc longer systems response hashing algorithm 
scenario traffic generated high hit rate achieved 
reduction hop count reflects fact 
hashing adc tex hop count distributed proxy server management requests adc hash 
hop counts adc hashing scenario traffic pattern hop count requests adc hash 
hop counts adc hashing scenario traffic pattern require average hops 
means second proxy need contact origin server half time 
adc needs additional hop hashing top phase accounted additional proxy proxy transfer reaching client 
need adc employ proxies resolve request 
clear adc optimally duplicate frequently requested objects cut need contact origin server required web objects 

changing table size section reports experiments focused varying size caching multiple single table varying size table time 
default table sizes simulations caching table single multiple table 
average hit rate hop count simulation adc tex tsui hit rate table size single multiple cache 
hit rate hop count various table size combinations scenario traffic hop count single multiple cache table size 
hit rate hop count various table size combinations scenario traffic time needed requests scenario evaluation criteria 

hits table size part evaluation changed table size steps observe cache hit rate 
identify size caching table responsible hit rate 
naturally cache available system hits experienced test run 
increasing single multiple table improve hit rate 
interestingly single table size able capture requests allow system reach adc tex time distributed proxy server management table size single multiple cache 
execution time seconds simulations various table size number hits single table size 
multiple table negative impact hit rate 

hops table size depicts average number hops needed resolve request various table sizes 
general trend larger table sizes results hops 
difference hops single multiple table 
biggest difference resulted increasing caching table size just hop regarded significant comparison average number hops 
radical decline observed changes size 
result consistent hit rate results bigger caching table better 
size single table big handle amount requests proxy encounters plus entries demoted multiple table increase size benefit system objects cached 

time table size shows simulation time seconds 
observed increasing single multiple table slows execution time increasing caching table significant impact 
time consuming part adc lies access mechanism single multiple table 
single table lru algorithm locating candidate removal replacement requires adc search linked list element element 
insertion deletion ordered multiple table operated binary search algorithms 
access schemes extremely time consuming better data structure needed provide speed ups versions algorithm 
adc tex tsui constant paging context switches occur frequently experiments due limited amount memory causes significant delay 
algorithms md reduce amount memory required storing urls mapping tables 

article new design algorithm called adaptive distributed caching aims allow system proxy servers self organize need central coordination complicated communication protocol 
experiments conducted artificial quite realistic data files confident adc able achieve level performance known hashing algorithm 
extra effort required just hops considered small amount network latency comparing latency incurred internet 
evaluation results regarding various parameters caching multiple single table sizes 
conclude setup requires small storage overhead small single multi table required 
results show adc requires learning period match performance common hashing algorithm 
strength adc studied situations changes proxy system infrastructure different traffic pattern wisconsin proxy benchmark 
additionally plan implement adc algorithm real proxy system freely available squid server project partially funded hong kong university frg frg ii 
notes polygraph website www web polygraph org source www measurement factory com results public pm phases png squid website www squid cache org adc tex distributed proxy server management 
abdulla 
analysis modeling world wide web traffic 
phd thesis virginia polytechnic institute state university may 

almeida cao 
measuring proxy performance wisconsin proxy benchmark 
technical report university wisconsin department computer science april 

obraczka 
world wide web caching trends techniques 
ieee communications magazine may 


comparison load balancing techniques scalable web servers 
ieee network july august 

bunt eager williamson 
achieving load balance effective caching clustered web servers 
proceedings fourth international workshop 

caceres douglis feldmann glass rabinovich 
web proxy caching devil details 
performance evaluation review december 

yu 
load balancing web server systems 
ieee internet computing may june 

chiang li liu andm muller 
dynamic web caching hierarchies 
proceedings th international conference distributed computing systems 

chuang 
resource allocation stor serv network storage services guarantee 
proceedings storage symposium 

cohen ross 
cache array routing protocol 
september 

feeley 
measured access characteristics world wide web client proxy caches 
proceedings usenix symposium internet technology systems december 

jeffery das 
taxonomy design distributed web caching 
proceedings hawaii international conference system science 

fan cao almeida broder 
summary cache widearea web caching sharing pool 
proceedings acm sigcomm conference 

gwertzman seltzer 
world wide web cache consistency 
proceedings usenix symposium internetworking technologies systems pages 


globally load balanced fully distributed caching hot published documents 
proceedings th ieee conference distributed computing systems 

jacobson cao 
potential limits web prefetching low bandwidth clients proxies 
proceedings third international workshop 

kaiser tsui liu 
adaptive distributed caching 
proceedings congress evolutionary computation pages may 

kaiser tsui liu 
adaptive distributed caching minimal memory usage 
proceedings simulated evolution automated learning conference pages september 
adc tex tsui 
kaiser tsui liu 
self organized autonomous web proxies 
proceedings international joint conference autonomous agents multiagent systems pages july 

karger leighton lewin sherman 
web caching consistent hashing 
proceedings www conference 


modeling web proxy cache architectures 
addison wesley 

liu tsui 
autonomy oriented computation 
proceedings st international workshop autonomy oriented computation pages 


banatre 
improving web caching 
advances distributed systems volume lncs 
springer verlag 

menezes vanstone 
handbook applied page 
crc press 

paul fei 
distributed caching centralized control 
proceedings fifth international web caching content delivery workshop 


survey cooperative caching 
technical report december 

rodriguez spanner biersack 
web caching architectures hierarchical distributed caching 
proceedings fourth international workshop 

rodriguez spanner biersack 
web caching architectures hierarchical distributed caching 


ross 
hash routing collections shared web caches 
ieee network magazine nov dec 


performance caching proxies 
proceedings acm sigmetrics conference 

weikum 
cost model online method distributed caching 
proceedings ieee conference data engineering 

dahlin vin kay 
design considerations distributed caching internet 
proceedings th ieee conference distributed computing systems 

wang 
survey web caching schemes internet 
acm computer communication review october 

wang crowcroft 
distributed cache system world wide web 
proceedings nlanr web cache workshop june 

wolman voelker sharman cardwell karlin levy 
scale performance cooperative web proxy caching 
proceedings th acm symposium operating systems principles pages 


wu yu 
load balancing hot spot relief hash routing collection proxy caches 
proceedings th international conference distributed computing systems 

zhang michel nguyen rosenstein 
adaptive web caching new global caching architecture 
proceedings third international workshop 
adc tex 
