oz programming model gert smolka programming systems lab german research center artificial intelligence dfki saarbrucken germany email smolka dfki uni sb de july oz programming model opm concurrent programming model subsuming higher order functional object oriented programming facets general model 
particularly interesting concurrent object oriented programming comprehensive formal model existed 
model extended express encapsulated problem solvers generalizing problem solving capabilities constraint logic programming 
opm developed concomitant programming language oz designed applications require complex symbolic computations organization multiple agents soft real time control 
efficient robust interactive implementation oz freely available 
appeared computer science today jan van leeuwen editor lecture notes computer science volume pages springerverlag berlin 
contents computation spaces concurrency parallelism synchronization logic entailment constraint structures simple concurrent constraint language class procedures cells ports names agents objects distribution incremental tell propagators threads time encapsulated search summary computer systems undergoing revolution 
years ago centralized isolated expensive 
today parallel distributed networked inexpensive 
advances software construction failed keep pace advances hardware 
large extent consequence fact current programming languages conceived sequential centralized programming 
basic problem existing programming languages delegate creation coordination concurrent computational activities underlying operating system network protocols 
severe disadvantage data abstractions programming language shared communicating computational agents 
benefits existing programming languages extend central concerns concurrent distributed software systems 
state affairs development concurrent programming models important research issue computer science 
concurrent programming model support creation coordination multiple computational activities 
simple concurrent programming models obtained accommodating concurrency basic control structure model 
way concurrency appears generalization additional feature 
development simple practical high level founded concurrent programming models turned difficult 
main problem lack methodology formal machinery designing defining models 
significant progress issue 
includes development syntax structural operational semantics functional logic programming declarative programming models building logicians lambda calculus predicate logic ccs calculus founded concurrent programming models developed milner concurrent constraint model concurrent programming model originated application driven research concurrent logic programming constraint logic programming 
reports oz programming model opm short developed concurrent high level programming language oz 
opm extension basic concurrent constraint model adding class procedures stateful data structures 
opm concurrent programming model subsumes higher order functional object oriented programming facets general model 
particularly interesting concurrent object oriented programming comprehensive formal model existed 
conservative extension opm providing problem solving capabilities constraint logic programming 
resulting problem solvers appear concurrent agents encapsulating search speculative computation constraints 
oz opm developed dfki 
oz designed concurrent high level language replace sequential high level languages lisp prolog smalltalk 
concurrent language combining rich object system advanced features symbolic processing problem solving 
applications oz include simulations multi agent systems natural language processing virtual reality graphical user interfaces scheduling time tabling placement problems configuration 
design implementation oz took ideas akl concurrent constraint language encapsulated search 
efficient robust interactive implementation oz dfki oz freely available unix platforms see 
dfki oz features programming interface gnu emacs concurrent browser object oriented interface tcl tk building graphical user interfaces powerful interoperability features incremental compiler run time system emulator garbage collector 
dfki oz proves inherently concurrent language implemented efficiently sequential hardware 
research portable parallel implementation shared memory machines started 
begun distributed version oz supporting construction open systems 
describes opm informal manner 
calculi formalizing major aspects opm 
oz primer programming oz 
basic implementation techniques oz reported 
computation spaces computation opm takes place computation space hosting number tasks connected shared store 
computation advances reduction tasks 
reduction task task delta delta delta task store manipulate store create new tasks 
task reduced disappears 
reduction tasks atomic operation tasks reduced 
parallelism abstraction level opm 
tasks synchronize store reducible store satisfies certain conditions 
key property opm task synchronization monotonic reducible task stays reducible tasks reduced 
typically tasks reducible state computation space 
obtain fairness reactivity efficiency reduction strategy needed select reducible tasks qualifying reduction step 
fairness ensures groups tasks advance simultaneously 
reactivity means create computations react outside events foreseeable time bounds 
example fair reactive reduction strategy tasks maintained queue task queue considered reduction 
reducible moved queue 
reducible reduced newly created tasks appended queue 
see strategy inefficient degree fairness fine grained opm 
practical reduction strategy section 
concurrency parallelism opm concurrent programming model 
concurrency means create simultaneously advancing computations possibly synchronizing communicating 
parallelism means execution hardware operations overlaps time 
concurrency obtained setting interleaving reduction steps 
typically case operating systems advance concurrent processes single processor machines 
see concurrency programming abstraction parallelism physical phenomenon 
fact opm exclude parallel implementation 
reason making opm concurrent parallel desire things simple possible programmers 
opm semantics programs depend run sequential parallel implementation 
complexities parallelism need concern implementors opm programmers 
synchronization logic entailment see opm realizes monotonic task synchronization 
basic idea simple 
assume set logic formulas called constraints 
set constraints closed conjunction constraints logic entailment relation implies defined 
assume store computation space holds constraint special compartment called constraint store 
way constraint store updated telling constraint means constraint store advances conjunction assume possible synchronize task constraint called guard 
synchronized task reducible guard entailed constraint store 
easy see synchronization mechanism monotonic 
point time constraint store seen conjunction true constraints told far 
beauty arrangement information constraint store increases monotonically constraint told order constraints told insignificant far information store concerned conjunction associative commutative operation 
assume constraint store satisfiable 
consequently impossible tell constraint store constraint conjunction unsatisfiable 
suffices represent constraint store modulo logic equivalence 
means synchronization mechanism completely declarative 
turns constraint systems synchronization entailment expressive efficient 
synchronization constraint store appeared prolog ii primitive form called freeze construct 
idea synchronize entailment constraints due maher 
constraint structures precise notions constraint entailment 
see constraint store place information values participating computation stored 
important property constraint store fact store partial incomplete information values variables 
constraint structure structure order predicate logic 
elements constraint structure called values order formulas signature constraint structure called constraints 
assume constraints built fixed infinite alphabet variables 
constraint entails constraint implication valid constraint structure 
constraint constraint entails constraints equivalent entails entails constraint structure chosen elements values want compute 
values typically include numbers ordered pairs values additional primitive entities called names 
values thought stateless data structures 
note set requires values defined mathematical entities operations values described mathematical functions relations 
ensure checking entailment constraint store guards computationally inexpensive carefully restrict constraints written constraint store guards 
outline concrete constraint structure inp 
values inp take integers infinite set primitive entities called names ordered pairs obtained integers names 
write jv ordered pair left component value right component value assume signature inp provides primitive constraints ffl says value variable integer ffl says value variable name ffl says value variable pair having value variable left value variable right component 
ffl says variables value 
example constraint store inp constraint store asserts value value pair left component value 
constraint store total information value variable partial information values variables 
fact information variable constraint store entails constraint ju constraint 
entails constraint 
practice uses expressive constraint structures inp 
constraint structure cft offers constraints possibly infinite records called feature trees 
oz employs extension cft 
simple concurrent constraint language sublanguage occ opm sublanguage saraswat concurrent constraint model 
occ express choice accommodate see section 
store occ computation space consists constraint store 
constraint structure take inp concrete 
tasks take expressions syntax constraint composition conditional local declaration ranges suitably restricted class constraints ranges variables constraints 
declaration local binds variable scope free bound variables expressions defined accordingly 
occ computation space consists tasks expressions defined store satisfiable constraint 
tasks constraints compositions declarations unsynchronized 
con delta delta delta ditional tasks synchronize constraint store reducible guard entailed constraint store 
reduction constraint task tells constraint store constraint say reduction performs tell operation 
conjunction sc constraint store satisfiable reduction task advance constraint store conjunction constraint store unsatisfiable reduction task change constraint store announce failure 
concrete language possibilities handle announcement failure ignore abort computation handle exception handling mechanism 
reduction composition creates tasks reduction conditional creates task entailed task constraint store 
reduction declaration local chooses fresh variable creates task obtained replacing free occurrences variable fresh occur current state computation space 
expressions occ provide basic operations concurrent programming 
compositions possible obtain concurrent tasks single task 
conditionals possible synchronize tasks constraint store 
telling constraints possible fire synchronized tasks 
declarations possible obtain fresh variables 
significant soon introduce procedures 
observe identical tasks local reduce different tasks distinct fresh variables 
telling constraints possible assert information values variables 
combination conditionals telling possible access constituents values 
task equate variables left right component turns pair reduce task 
call construction synchronized decomposition 
convenient notation write abbreviation local local write task reason having conditional synchronize symmetrically entailment incremental algorithms checking entailment automatically check 
algorithms fact outcomes entailed 
symmetric form conditional nice property negated guards unnecessary equivalent state computation space say variable bound integer name pair constraint store entails constraint 
class procedures programming language procedures 
procedures basic mechanism expressing programming abstractions 
provided full generality procedures spectacular expressivity 
known lambda calculus creation application nonrecursive functional procedures express computable functions 
programming language provides class procedures ffl procedures create new procedures ffl procedures lexically scoped global variables ffl procedures referred class values 
class procedures available functional programming languages scheme sml haskell 
typically available today concurrent programming languages provide crucial functionality concurrent distributed programming see sections :10.1.1.17.6050
opm procedure triple consisting name see section formal argument variable body expression 
procedure binds formal argument scope free global variables procedure defined accordingly 
procedures number formal arguments consider argument ease presentation 
constraint store opm store second compartment called procedure store 
procedure store contains finitely procedures name procedure 
procedure entered procedure store retracted 
information values global variables procedure kept constraint store 
call procedure called closure literature 
new expressions creating applying procedures proc fx zg definition fx yg application definition proc fx zg binds formal argument variable scope definitions reducible 
reduction definition proc fx zg chooses fresh name tells constraint store constraint writes new procedure procedure store 
application fx yg wait procedure store contains procedure constraint store entails case application task fx yg reduce task obtained body procedure replacing free occurrences formal argument actual argument avoiding capturing 
sublanguage opm introduced far express eager lazy higher order functional programming 
instance higher order function value value 
list list returning list mapping function expressed binary procedure proc map proc map xs ys xr xs xr local yr ys yr map xr yr ys nil fi concrete oz syntax composition written juxtaposition list represented nested pair name representing empty list 
assume variable nil bound procedure takes binary procedure input creates binary procedure map mapping lists elementwise model employs logic variables static distinction input output arguments 
functionality offered procedure simply ability spawn number tasks variable replacing formal argument chosen freely time 
ease notation suppress auxiliary variables means nesting 
instance write nil abbreviation local map map nil map procedure implements concurrent function 
instance task tell constraint fresh variables 
create tasks automatically synchronize variables compute values necessary information available 
representation functional computation concurrent computation studied carefully calculi formalizing relevant aspects opm 
main results include identification confluent subcalculi embeddings eager lazy lambda calculus correctness proof eager embedding 
lazy functional programming embedded argument computations shared crucial feature implementations modeled lambda calculus 
opm combines higher order programming order constraints 
idea interface variables procedures freshly chosen names appeared fresh 
cells constraint procedure store opm store third final compartment called cell store 
cell mutable binding name variable 
cells possible express stateful concurrent data structures serve communication medium concurrent agents 
exchange operation cells combines reading writing single atomic operation providing mutual exclusion needed communication 
cell store contains finitely cells representing mutable bindings names variables 
similar procedure store cell store contains cell name 
cell cell store say cell hosts variable task chooses fresh name tells constraint store constraint writes new cell cell store 
cell entered cell store retracted 
task exchange wait cell store contains cell constraint store entails task reduced updating cell host variable telling constraint store constraint cells introduce opm order multiple exchange tasks cell reduced unspecified 
cells different assignable variables multi threaded imperative languages 
thing opm ensures mutual exclusion concurrent exchange tasks cell opm task reduction atomic operation 
exchange task combines reading writing cell single atomic operation 
presence logic variables atomic combination turns expressive write new variable cell value computed value old variable cell 
obtained imperative setting requires consumers variable automatically synchronized event value variable known 
ports building cells express complex concurrent data structures state 
internal structure data structures hidden means procedural abstraction lexical scoping variables 
obtain concurrent data types state 
example consider ports serve message queues agents 
port procedure connected stream 
stream variable incrementally constrained list telling constraint element list 
assumed procedure writes stream 
application tell constraint current tail stream new variable serving new tail stream 
port state remember current tail stream 
port concurrent data structure allows concurrent computations write consistently single stream 
procedure proc newport stream port local cell stream cell proc port message local old new exchange cell old new old message new creates new port port connected stream stream 
port holds current tail stream private cell cell 
note lexical scoping ensures port see cell 
note newport higher order procedure creates returns new procedure port 
enter messages port appears associated stream 
things interesting looking solution making possible concurrently sent messages received may take long time sent 
possible solution assumptions employed reduction strategy see section 
give solution reduction strategy 
basic idea model port binary procedure port message continuation tell constraint continuation port message put stream 
messages sequentialized writing local continuation dummy port continuation continuation dummy synchronizing ports created proc stream port local cell port stream cell proc port message continuation local new exchange cell continuation message new port new names names serve dynamically created capabilities faked 
useful able obtain fresh names designate procedures cells 
purpose introduce primitive task newname reduced choosing fresh name telling constraint 
referring names means variables advantage lexical scoping avoids need concrete syntax names 
names lexical scoping procedures sophisticated access control schemes expressed 
agents agent computational abstraction processing messages received port 
maintains internal state may send messages agents 
example agent queue handle concurrent enqueue dequeue requests 
assume functionality agent procedure serve state theta message newstate describing agent serves message advances state 
procedure proc serve init port local stream feed newport stream port feed stream init proc feed ms state message newstate ms message serve state message newstate feed newstate true fi creates new agent receives messages port operates specified procedure serve initial state init 
note agent hides stream queueing messages 
queue agent receiving messages port created local xs xs xs procedure defined follows newname enqueue newname dequeue proc state message newstate state message enqueue newstate message dequeue newstate true fi fi true fi messages represented pairs enqueue dequeue variables enqueue dequeue bound names identifying corresponding operations 
lexical scoping construct contexts operations visible 
message enqueue enqueue message dequeue dequeue item bind case queue empty dequeue request wait queue dequeue requests served soon item entered queue 
procedure shows synchronization idea expressed elegantly means logic variables 
objects objects modular programming abstraction concurrent data structures state 
model objects procedures object message applied messages 
message pair methodname argument 
object applied message invokes requested method argument advances new state 
similar agents assume functionality object specified procedure serve state theta message theta self newstate describing agent serves message advances state 
argument self object invoking serve making possible self serve share serve objects 
procedure proc serve init object local cell init cell proc object message local state newstate exchange cell state newstate serve state message object newstate creates new object object procedure serve initial state init 
straightforward express classes defining serve procedures modular fashion means named methods 
methods modeled procedures similar serve procedures 
objects obtained instances classes 
states objects modeled finite mappings attributes variables attributes modeled names 
methods construct new states states assigning variables attributes 
provide inheritance ability construct new classes inheriting methods attributes existing classes 
matter straightforward higher order programming 
exploiting power lexical scoping names straightforward express private attributes methods 
opm simple powerful base expressing concurrent object oriented programming abstractions 
fact designed purpose 
concrete programming languages course frequently programming abstractions convenient notation 
concrete system object oriented abstractions notations refer reader oz object system 
reader noticed similarity agents objects 
see agents active objects 
object easily turned agent interfacing port 
distribution opm extended serve model distributed programming 
distribution means program spread computations network computers 
abstraction level opm modeled assigning site task assuming store distributed transparently 
assume new tasks inherit site creating task 
see clear difference agents objects 
send message agent message served site agent created task waiting message sent 
apply object message message served site object applied 
words agents stationary objects mobile 
opm class procedures straightforward express compute servers 
cardelli gives excellent exposition distributed programming techniques available lexically scoped language class procedures concurrent state :10.1.1.17.6050
assumption transparently distributed store realistic applications 
conflicts ability model fault tolerance instance 
started model store appears directed graph nodes situated similar tasks 
incremental tell tell operation occ see section suitable parallel implementation 
reason constraint told single reduction step 
telling constraint may involve scanning entire store tell tasks may blocked long time 
problem resolved telling constraint piecewise 
basic idea reduce constraint task keeping task advancing constraint store slightly stronger constraint store entailed amplifying reduction step repeated constraint store entails case task discarded 
constraint store satisfiable case unsatisfiable needs special care 
incremental tell operation precise introduce notion constraint system 
constraint system consists constraint structure set constraints called basic constraints basic constraint binary relation basic constraints 
basic constraints closed conjunction contain 
false 

basic constraint relation founded exists infinite chain delta delta delta 
entails ii entails iii satisfiable iv unsatisfiable 

entailed basic constraints exists tell reductions correspond visible simplification steps incremental algorithms implementing necessary operations constraint stores 
algorithms instance 
note tell reductions may nondeterministic may different satisfiable basic constraint basic constraint 
tell reduction satisfies properties 
entails irreducible respect 
maximal chain delta delta delta ends 

delta delta delta chain irreducible respect equivalent ii unsatisfiable 
constraint system assume constraints appearing expressions constraint store basic constraints appearing guards may existentially quantified 
constraint store constraint task incremental tell operation defined follows irreducible respect task discarded 
choose basic constraint announce failure discard task advance constraint store keep task canonical constraint system constraint structure inp comes basic constraints primitive constraints defined section 
long failure occur important know tell reductions 
unsatisfiable computation continue failure exception handling chains delta delta delta add local information 
notion local information precise general 
straightforward definitions inp practically relevant constraint systems 
just give example inp 
uj tell reduction permit maximal chains issuing 
propagators algorithms telling checking entailment basic constraints efficient 
typical complexity constant time worst case complexity quadratic better size guard constraint store 
consequently expressive constraints written constraint store accommodated basic constraints 
nonlinear constraints integers satisfiability undecidable hilbert tenth problem 
nonbasic constraints accommodated tasks wait constraint store contains information equivalently replaced basic constraints 
instance task may wait exist integers constraint store entails case task reduced basic constraint sum nonbasic constraints accommodated way called propagators 
example propagator boolean order test integers true true false true false variables bound distinct names 
propagator reduce true false soon constraint store contains sufficient information values threads give efficient reduction strategy opm fair reactive see section 
efficient reduction strategy possible write programs create moderate amount concurrency implemented efficiently single multi processor architectures 
example fibonacci function sugared notation suppressing auxiliary variables proc fib local true fib fib fi shows naive reduction strategy section impractical traverse recursion tree fib say breadth manner requiring exponential space 
hand sequential execution traverse recursion tree depth manner left right need linear space 
difference clearly matters 
efficient reduction strategy organizes tasks threads thread guaranteed progress 
fairness guaranteed level threads 
thread thread delta delta delta thread store nonempty stack tasks topmost task thread reduced 
topmost task thread reduced replaced newly created tasks 
composition reduced left expression goes top right expression means considered topmost task thread irreducible current store thread contains tasks topmost task moved newly created thread 
thread disappears soon task left 
outlined reduction strategy tries sequential possible concurrent necessary 
execute task fib sequentially single thread requiring linear space 
concurrent execution expression separate thread forced writing local fire fire true fi fire threads straightforward send messages sequentially port 
ports defined section simple composition port port send provided store binds port port 
time straightforward extend opm tasks synchronized time points 
specify timer primitive sleep equates variables time span specified variable passed 
timer primitive waits store binds integer stays irreducible milliseconds reduced constraint encapsulated search opm constraints logic variables subsume problem solving capabilities constraint logic programming extended nondeterministic choice combinator 
completely new idea needed encapsulating resulting problem solvers concurrent agents 
nondeterministic choice combinator provided expression called choice 
choice tasks reduced task reducible 
case choice reduced distributing computation space spaces obtained replacing choice left right alternative respectively 
resulting search tree computation spaces explored suitable strategy 
tell operation announces failure computation corresponding computation space aborted 
leaves search tree failed computation spaces 
leaves contain solutions problem solved bindings certain variables 
outlined semantics nondeterministic choice provides expressivity constraint logic programming distributing top level computation space compatible idea concurrent computation 
concurrent agents search strategy problem solved request solutions problem 
means search agent encapsulate search 
turns search agent programmed single primitive called search combinator 
search combinator spawns subordinate computation space reduces case subordinate space fails irreducible distributed 
case distribution alternative local spaces frozen returned class citizens represented procedures 
details elaborate construction reported 
resulting model realized oz concurrent constraint combinators 
oz gets constraint logic programming problem solving integrates concurrent lexically scoped language class procedures state 
integration eliminates need prolog ad hoc constructs increases expressivity problem solving constructs 
summary simple expressive model opm high level concurrent programming 
model lexically scoped consists concurrent constraint kernel occ class procedures cells providing concurrent state 
computes logic variables constraints monotonically synchronizes declarative constraint store 
constraint store exclusive place information values variables stored 
dynamically created values called names interface constraint store procedure cell store 
way opm realizes orthogonal combination firstorder constraints class procedures stateful cells 
shown opm express higher order functions agents objects 
added incremental tell operation improve potential parallelism 
added propagators threads timer primitive needed practical language 
outlined model extended express encapsulated problem solvers generalizing problem solving capabilities constraint logic programming 
oz translates ideas exciting new programming language 
development opm oz impossible combined contributions members programming systems lab dfki 
inspiration technical knowledge came developers akl sics developers life digital prl partners esprit basic research action 
grateful seif haridi martin michael mehl joachim andreas podelski christian schulte read commented drafts 
research reported supported bmbf contract esprit basic research project contract ep esprit working group ccl contract ep 
dfki oz system papers authors programming systems lab dfki available web ps www dfki uni sb de anonymous ftp ps ftp dfki uni sb de 
ait kaci podelski smolka 
feature constraint system logic programming entailment 
theoretical computer science 

complete axiomatization theory feature arity constraints 
journal logic programming 
appear 
cardelli :10.1.1.17.6050
obliq language distributed scope 
proc 
nd ann 
acm symposium principles programming languages popl pages 
colmerauer 
prolog theoretical principles current trends 
technology science informatics 
smolka wurtz 
object oriented concurrent constraint programming oz 
saraswat hentenryck editors principles practice constraint programming pages 
mit press cambridge ma 
jaffar maher 
constraint logic programming survey 
journal logic programming 
janson haridi 
programming paradigms andorra kernel language 
saraswat ueda editors logic programming proc 
int 
symposium pages 
mit press cambridge ma 
janson haridi 
ports objects 
research directions concurrent object oriented programming 
mit press cambridge ma 
launchbury 
natural semantics lazy evaluation 
proc 
th ann 
acm symposium principles programming languages popl pages 
maher 
logic semantics class committed choice programs 

lassez editor logic programming proc 
th int 
conference pages 
mit press cambridge ma 
mehl schulte 
machine oz 
proc 
th int 
symposium programming languages implementations logics programs plilp 
lecture notes computer science springer verlag berlin 
appear 
milner 
calculus communicating systems 
lecture notes computer science vol 
springer verlag berlin 
milner 
functions processes 
journal mathematical structures computer science 
muller schulte wurtz 
constraint programming oz 
dfki oz documentation series dfki saarbrucken germany 

funktionale berechnung einem uniform mit logischen variablen 
doctoral dissertation 
universitat des saarlandes saarbrucken germany december 
submitted 
smolka 
confluent relational calculus higher order programming constraints 

jouannaud editor proc 
st int 
conference constraints computational logics ccl pages 
lecture notes computer science vol 
springer verlag berlin 
plotkin 
structural approach operational semantics 
daimi fn dept computer science aarhus university denmark 
reprinted 
saraswat 
concurrent constraint programming 
mit press cambridge ma 
schulte smolka 
encapsulated search higher order concurrent constraint programming 
bruynooghe editor logic programming proc 
int 
symposium pages 
mit press cambridge ma 
schulte smolka wurtz 
encapsulated search constraint programming oz 
borning editor proc 
nd int 
workshop principles practice constraint programming pages 
lecture notes computer science vol 
springer verlag berlin 
shapiro 
family concurrent logic programming languages 
acm computing surveys 
smolka 
definition kernel oz 
podelski editor constraints basics trends pages 
lecture notes computer science vol 
springerverlag berlin 
smolka 
foundation higher order concurrent constraint programming 

jouannaud editor proc 
st int 
conference constraints computational logics ccl pages 
lecture notes computer science vol 
springer verlag berlin 
smolka 
fresh higher order language unification multiple results 
degroot lindstrom editors logic programming relations functions equations pages 
prentice hall englewood cliffs nj 
smolka 
oz primer 
dfki oz documentation series dfki saarbrucken germany 
smolka 
records logic programming 
journal logic programming 
winskel 
formal semantics programming languages 
foundations computing 
mit press cambridge ma 

