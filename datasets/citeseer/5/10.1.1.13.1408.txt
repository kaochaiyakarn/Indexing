integrated design process technology printed united states america june society design process science static source code checking user defined properties small fraction output generated typical static analysis tools tends reveal serious software defects 
main causes phenomenon 
typical static analyzer casts nets broadly reporting reportable true bug 
second cause static analyzers check code fixed set flaws 
describe simple source code analyzer uno tries remedy problems 
default properties searched uno restricted common types error programs uninitialized variables nil pointer dereferencing bound array indexing 
checking capabilities uno extended user definition properties written ansi functions 
attractive develop tool intercept defects piece software certainty great efficiency boot 
alas long known tool exist turing 
mean attempts build software checking tools doomed fail mean tool promise encompassing 
real errors caught errors caught real 
increasing number real errors caught static analysis tool increases number false reports increases usefulness tool seriously undermine 
design uno try accomplish goals 
focusing tool types software defects occur commonly practice increase signal noise ratio tool 
allowing user define precisely targeted application specific properties extend gerard holzmann bell laboratories lucent technologies mountain avenue murray hill nj power tool area primary interest user 
extension checking power static analyzer similar logic model checking tools similar algorithms clarke holzmann 
related notion analysis symbolic execution code surprisingly old boyer clarke osterweil appears taken hold mainstream tools 
known example broadly distributed code analysis tool lint dates johnson 
significant extensions tool include lclint evans commercial tools attempt cast nets considerably broadly original 
known tools include prefix bush adaption pincus 
elaborate static checking capabilities built commercial tools accelerator leading remarkable promises defect coverage tool vendors 
commercial code checkers gain power targeting restricted class potential defects visual threads savage purify 
checking power tool increased significantly information purpose piece code provided source code annotations detlefs microsoft vault tool 
existing tools extended user defined properties exceptions allow free access dataflow information defining additional checks tool lord 
exception dawson engler mc meta level compiler engler 
engler mc supports definition properties static checking powerful language called metal 
main differences uno tool describe 
mc uno properties require special language written functions ansi supported small library primitives give direct access dataflow information 
secondly mc uno properties need compiled linked tool interpreted fly uno 
shall see style property specification uno differs substantially metal length comparable specifications similar metal 
catching software defects consider trivial flawed program 
int ptr void main void ptr ptr ptr ptr summarizes output lint lclint little program 
default run lint produces fairly cosmetic complaint 
things complained equal cause 
main procedure instance return result type int void procedure expect parameters possible command line arguments 
option lint feedback tool generates lines output including warnings small disagreements default header files 
real error program flagged nil pointer dereference line 
statement line unreachable 
lclint lint modern incarnation catches error hides range messages explanatory text illustrated 
give uno program default output point revealing just bug 
scan line program verbosity issue 
realistic programs generating hundreds thousands lines warnings easily obscure serious defects may hidden midst 
uno attempts generate output restricting careful check serious types software defects 
uno built extension public domain compiler front tool 
version earlier build model extractor ansi code enabling logic verification multi threaded systems code directly source spin model checker background verification engine holzmann holzmann smith 
main extensions built turn uno dataflow analysis module collecting basic information node parse tree 
conversion routine converts parse tree procedure control flow graph 
basic analysis routines run predefined checks uninitialized variables nil pointer dereferencing bound array indexing source code control flow graphs local checks function call graph global checks 
generic model checking routine accepts user specified property checks control flow graphs function call graph source code analyzed 
addition program perform global analysis program separate second pass information gathered pass 
dataflow analysis module constructs linked list data objects referenced node 
marks data object tags record object declared invoked function evaluated variable dereferenced assigned new value address taken 
commonly tags tag procedure names decl tag variable declaration deref tag dereferencing operation alias tag symbols address taken def tag symbols value changed tag symbols value 
dataflow module collects information known array bounds variables array indices 
information recorded separately array bounds analysis 
special tag matches data flow tags special tag matches 
second extension converts parse tree generated procedure controlflow graph interpreting goto return statements branch iteration structures 
subsequent analyses done depth searches controlflow graphs global function call graph constructed 
program sources applications typically divided large number different source files compiled separately linked form final executable 
uno starts analyzing source file separately performing detailed local analysis functions defined file saving information global analysis intermediate files 
intermediate files preserved clearly analysis program source file need repeated source file files depends changed matching intermediate file written 
phase analysis uno check usage local variables statically declared global variables 
second phase global analysis performed information collected collection intermediate files 
non static global variables analyzed find possible dereferences uninitialized global pointers 
local analysis objectives analysis find paths control flow graphs functions point declaration variable point assignment def evaluation 
easily interpreted classic model checking problem property checked defines required temporal relation def operations system control flow graph function 
property control flow graph defined formally labeled transition systems 
labeled transition system lts finite set nodes start node set final accepting nodes set labels transitions discussed detail transition relation assigning label set valid transition nodes set graph 
control flow graph function readily formalized labeled transition system nodes graph form set set includes nodes reached immediately statement executed returns control caller procedure directly indirectly return exit statement label set contains set dataflow tag markings statement 
gives structure labeled transition system capture def property forbids uninitialized variable 
execution starts initial node 
declaration variable seen immediate initialization assuming array declaration property lts moves waits see transition def tag ignoring 
case property moves non final non accepting state moves possible 
second case property moves final accepting state corresponding detection def error 
check execution path control flow graph procedure violates def property computing product labeled transition systems standard way holzmann 
note express paths control flow graph procedure set strings call set similar way express accepting paths reachability graph labeled transition system property cf 
set strings label set call set intersection non empty procedure contains execution path matches accepting path def lts corresponding possible violation def requirement 
check compliance def requirement comes computation intersection languages standard model checking 
inefficient perform check separately variable declared 
easily combine variables single depth search control flow graph procedure 
property search complexity increases linearly size input complexity depth search 
array bound violations check array bound violations done way check def property 
differences definition label set precise circumstances declare accepting run lts property 
simple example consider little program 
void main void int int triggers verdict uno array uno fct main array index exceed upper bound var statement array declaration array int range possible values scalar variable deduced assignment operations comparisons conditional branch instructions 
instance conditional conclude true branch scalar variable values false branch values larger equal 
information combined multiple conditionals passed path fixed assignment 
precise indication value range easily lost 
instance current value range operation seen known range reduces 
value ranges computed conservatively uno 
range extended relying specialized tools resolving constraint systems 
kelly 
limits clearly remain case uncertain extension significantly improve uno performance practice 
eliminating infeasible paths path control flow graph consists simple sequence transitions 
basic types transitions interest determining specific path feasible transitions correspond steps conditional branch point program source true false remaining transitions correspond unconditional steps 
path infeasible contain conditional hold context 
may instance contradict earlier conditionals appear path 
sequence true true clearly consistent 
conditional conflict earlier assignments 
instance sequence false consistent 
cases uno determine path feasible 
information suppress error reports execution paths turn infeasible profitably information shortcut search procedure compute language intersection property system 
resolver tool omega calculator kelley improve accuracy infeasible paths detected reasonable engineering compromise sought 
global analysis check global variable evaluated dereferenced defined harder checking true local variable 
globals default initialized zero principle impossible violate rule value assigned variable evaluated 
initial value zero problem variable pointer 
dereferencing nil pointer fatal error 
second phase analysis concentrated analysis dereferencing operations global pointer variables initialized nil value default 
global variables need able take account possible call chain function call graph just information derived possible execution paths local control flow graphs functions 
quickly overly complex especially large code bases 
uno uses approximation method information gathered intermediate files pass analysis 
function call graph plays central role analysis 
analysis starts main routine recursively descends functions called routine depth search 
search touches functions reachable main product analysis readily identify functions called capture remarkable amount discarded code evolving programs 
able global analysis meaningful way analyzer access minimal information pass 
needs know instance list functions called function needs know execution paths pointer variables may evaluated dereferenced set 
pass uno captures information generating information highly condensed version control flow graph function contains information 
globals set graph contains points functions called 
analyses precise information points graph global variables known zero nonzero value recorded 
check reduces problem encountered local analyses standard model checking problem 
uno uses predefined property capture global nil pointer dereferencing problems accepts userdefined global properties defined ansi functions style discuss detail shortly 
uno function graphs attempt compute possible return values 
tool focused def analysis assignments important values assigned 
tool prefix bush attempts capture information generating functional models function restricted symbolic execution function source 
user tool control maximum number execution paths generated function maximum number times loops unrolled 
inevitably path conditions quickly overly complex making analysis time consuming undecidable 
explicitly stated bush potential added accuracy type analysis necessarily outweigh overhead involved 
great benefit fast tool reasonable approximate analysis 
observations lead successor tool prefix called 
new tool said precise faster immediate programmers pincus 
defining properties interesting features uno ability accept user defined properties application specific requirements 
properties defined ansi compiled 
user specify file contains definition uno property format command line instance uno prop sample prop check defined file sample prop applied functions source files covered expansion extension prop convention easily recognize categorize uno property files required tool 
name procedure defined file equal uno check 
code sample prop parsed procedure 
control flow graph prepared guide search errors 
uno interprets code calling small library primitives access dataflow information required 
types predefined primitives uno property definitions language actions queries 
mention important complete list holzmann 
uno actions include error msg print message path control flow graph function call graph leads point action invoked mark mark selected symbols integer value unmark remove marks selected symbols 
uno queries include select char name tag require tag forbid char name tag require tag forbid refine tag require tag forbid match int mark tag require tag forbid marked int mark tag require tag forbid path ends parameters meanings name specifies name symbol matched empty string matches symbol name 
require defines required def tags symbol 
match tag def decl instance matches symbol def decl tag 
forbid defines xor ed def tags may attached symbol 
mark specifies requirement previous marking symbol 
query select selects symbols current statement criteria specified erasing previous selection 
query excludes matching symbols existing selection 
query match reduces existing selection matching symbols include requirement preexisting integer mark 
queries return true resulting selection non empty false 
query path ends returns true current node control flow graph corresponds execution path just function returns caller 
query marked returns true matching symbols exist mark specified change selection 
side effects assertions simple example uno property check occurrence side effects function calls arguments assert statement 
noted engler side effects introduce bugs code assertions disabled stage code development 
uno property defined void uno check void side effects asserts select assert select def assert error side effect fct assert property defined directly ansi queries error action 
uno runs check paths control flow graphs functions program source evaluating queries node control flow graph 
call select returns true node control flow graph reached contains call function named assert 
second call select executed call returned true new selection time symbols def tag dataflow analysis 
set match function calls tag course match symbol assert function call 
call executed calls returned true remove symbol selection 
symbol remains selection side effect function call argument list assert call detected error reported 
def def scenarios slightly interesting check look def def scenarios source code 
case value assignments follow immediately intervening value 
assignment case avoided 
property written uno void uno check void def def errors select match unmark select def match error def def mark call select catches symbols variables tag meaning evaluated current statement 
call match finds names symbols assigned mark def context see 
matches markings symbols removed means properly followed earlier def 
part property arranges new markings assigned def encountered 
call select finds symbols def tag 
call match tries identify symbols names marked 
matches error reported 
new marking assigned 
apply check little program int main void int uno faithfully reports possible error paths 
uno prop prop example uno main def def error example main example int example example example example line marked left margin conditional path 
uno try weed infeasible paths able completely 
information provided error traces sufficient user quickly final determination feasibility error 
locking discipline locking violations difficult catch compiler unfortunate fact applications specific library lock unlock calls 
multiple locks analysis able track independently 
assume lock library lock routine returns value subsequent call unlock routine 
uno property type check defined follows 
void uno check void handle multiple locks select lock select def match def error lock lock mark select unlock select match def unmark error unlock prior lock path ends marked error lock unlock note structure property check types parameterized operations appear pairs combinations fopen fclose malloc free provided requirement pairs appear path function 
application holzmann data application uno small number public domain software packages sendmail unravel linux 
example summarize results application uno builtin tests unravel sources 
unravel public domain program slicing tool 
applied uno source distribution dated july 
package contains kloc source files 
separate source files distribution 
local uno check sources takes seconds system user time mhz sgi mips machine 
global check takes seconds 
uno reports errors local analysis 
reports warnings possibly uninitialized variable various contexts 
reports reveal true errors 
remaining reports involve execution paths uno determine infeasible 
example code int line ix ix 
line line highlight ix return ix 
line line highlight ix return debug printf setting line line triggers valid report uno fct possibly uninitialized variable line statement printf declaration int line ix interesting example code file slice driver int stmt proc clear active procs procs file id file stmt procs entry stmt procs exit stmt proc break stmt proc stmt proc procs triggers valid report uno fct slice possibly uninitialized variable stmt proc statement auto slice stmt proc stmt proc procs declaration auto slice int stmt proc described basic design relatively simple static analysis tool called uno 
tool meant intercept common types errors ansi programs uninitialized variables nil pointer dereferencing bound array indexing 
interesting part tool extendibility user defined properties 
properties written directly ansi 
support user defined properties significantly extend power code analyzer 
uno chosen shift emphasis tool definition properties 
drawback approach 
ideal checking method places demands user code need annotated guidance needed gain benefit check 
writing application specific properties just adding annotations code way provide extra guidance takes time skill 
uno properties written implementation independent way re frequently 
small libraries may developed typical properties act templates requiring minor adaption application 
bush pincus static analyzer finding dynamic programming errors 
software practice experience vol 
pp 

clarke grumberg peled model checking mit press boston 
boyer levitt select formal system testing debugging programs symbolic execution 
proc 
int 
conf 
reliable software april pp 

clarke test data generation symbolic execution programs aid program validation 
phd thesis 
colorado 
clarke osterweil finite state verification technique software systems 
technical report um cs cs dept univ mass amherst ma april 
detlefs leino nelson saxe extended static checking 
technical report src compaq src dec 
engler chelf chou hallem checking system rules system specific programmer written compiler extensions 
proc 
th symp 
operating systems design implementation osdi usenix organization san diego ca oct 
evans guttag horning tan 
lclint tool specifications check code 
proc 
acm sigsoft symposium foundations software engineering december 

distribution july 
www com 
holzmann model checker spin ieee trans 
softw 
eng vol may pp 

holzmann smith practical method verification event driven software proc 
intern 
conf 
software eng 
icse may los angeles ca pp 
appear ieee trans 
softw 
eng 
holzmann software model checking lecture notes nato summer school marktoberdorf germany august ios press computer system sciences vol 
pp 

holzmann uno static source code checking user defined properties bell labs technical report pgs january 
full version 
available author 
johnson lint program checker unix programmer manual th edition vol 
jan 
kelly maslov pugh rosser wonnacott omega calculator library version 
technical report november university maryland 
lord application specific static code checking programs 
online description 
ftp technik uni dortmund de pub people tar gz 
osterweil dave validation error detection documentation system fortran programs software practice experience vol 
pp 

pincus analysis necessary far sufficient 
invited presentation international symposium software testing analysis issta acm sigsoft august portland oregon 
savage burrows nelson sobalvarro anderson 
eraser dynamic data race detector multithreaded programming 
acm trans 
computer systems vol 
pp 

turing computable numbers application problem 
proc 
london mathematical soc ser 
pp 
see 
wagner foster brewer aiken step automated detection buffer overrun vulnerabilities proc 
network distributed systems security ndss san diego ca usa feb 
url tools mentioned com www com www com research microsoft com vault www cs umd edu projects omega www com ncsl nist gov unravel html lint expr declared global static ptr expr lint expr wc lclint expr lclint july expr function main declared return void return int function main match expected type 
suppress message expr function main expr dereference null pointer ptr ptr possibly null pointer dereferenced 
value result function may return null case code check null global parameter structure field declared null qualifier 
suppress message expr variable exported outside expr ptr declaration exported outside module 
declaration static qualifier 
suppress message finished lclint checking code errors uno expr uno fct main possible global nil ptr dereference ptr statement expr ptr declaration expr int ptr fig 
output lclint uno start 
decl def array decl decl def array decl def def fig 
property automaton def 
