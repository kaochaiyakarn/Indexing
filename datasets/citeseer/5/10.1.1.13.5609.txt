acm symposium software visualization san diego california june appear user software visualizations fault localization burnett cook fisher ii main oregon state university department computer science burnett cook cs orst edu user programming common form programming today 
despite growth little investigation bringing benefits software visualization user programmers 
evidence spreadsheet paradigm probably widely user environment reveals users programs contain faults 
integrate software visualization user environments help users deal reliability issues programs 
devised fault localization visualization techniques spreadsheets 
describes techniques reports results formative study tests created users investigate fault localization techniques compare 
results reveal strengths weaknesses technique provide insights cost effectiveness technique interactive world user spreadsheet development 
cr categories software engineering testing debugging debugging aids testing tools 
software engineering programming environments interactive environments 
programming techniques visual programming 
information systems applications office automation spreadsheets 
keywords user software engineering user programming user software visualization fault localization spreadsheets user programming environments widespread phenomenon 
estimated year approximately user programmers compared professional programmers boehm 
date little investigation bringing benefits software visualization user programmers 
user programming environments quite diverse including educational simulation builders web authoring systems multimedia authoring systems mail filtering rules cad systems practice probably widely user environment spreadsheet 
evidence spreadsheet paradigm reveals despite page perceived simplicity kind user programming user programmers create disturbing number faults 
disturbing spreadsheet developers express unwarranted confidence reliability spreadsheets 
help solve problem pervasive faults user programming working vision call user software engineering prototyping ideas spreadsheet paradigm widespread practice 
concept user software engineering holistic approach facets software development users engage 
goal bring gains software engineering community user programming environments requiring training interest traditional software engineering techniques 
communications strategy user programmers done incremental software visualization 
part vision previously devised testing methodology known see test wysiwyt rothermel 
wysiwyt methodology communicates spreadsheet cell incremental low cost visualization devices border colors 
responds user actions action relevant testing updates visualization devices 
visualization devices low cost obviously required maintain immediate response expected spreadsheet users 
explicit visualization support testing natural consider leveraging help users fault localization tests reveals failure best way proceed 
issues consider answering question try enumerate important issues effectiveness techniques effective job visually isolating faults correct incorrect values failures user able identify testing 
cost techniques low cost maintain incremental immediate response expected spreadsheet paradigm 
attempt shed light questions 
compare technique previously described literature refer blocking technique new techniques 
describe basic logic costs add spreadsheet paradigm 
describe results formative empirical study techniques standard terminology term failure mean incorrect output value inputs term fault mean incorrect part program formula caused failure 
effectiveness finding faults subjects test suites created users 
related variety software visualization aimed software engineering purposes 
focus portion related debugging 
field environment reiss aimed primarily program comprehension vehicle debugging instruction included visualizations call graphs heap behavior class relationships 
draws builds earlier featuring visualizations code data structures execution sequences reiss cornell program synthesizer teitelbaum reps gandalf notkin 
lieberman fry aims squarely debugging providing visualizations correspondences static program code dynamic program execution 
navigable visualizations execution history representative similar features visual programming languages cocoa forms atwood burnett 
example visualization especially strong low level debugging memory leaks performance tuning pv 
low level visualization specifically aimed performance debugging parallel programming surveyed heath 
eick focuses high level views software eye keeping bugs control maintenance phase 
techniques aim help programmer understand program behavior debug 
contrast fault localization visualization techniques phases 
phase fault localization phase finds ways help system understand possible sources bugs part information provided programmer process testing 
second phase communicates new understanding back programmer form visualizations 
fault localization techniques build significant research slicing dicing 
tip provides survey slicing techniques tip 
general program slice relative variable program point set statements program affect value value incorrect point program test case certain assumptions guaranteed fault caused incorrect value slice 
slices calculated entirely static information precisely calculated dynamic information 
dice similar slice chen cheung 
difference utilizes information correct values program points reduce set statements responsible incorrect value building agrawal technique locating faults traditional programming languages execution traces tests implemented technique tool telcordia technologies 
technique displaying program relative failing test set passing tests 
jones developed system similar called 
utilizes information passing failing tests highlighting possible page locations faults 
colors likelihood statement faulty ratio failing tests passing tests 
focus helping professional programmers find faults programs developed traditional programming languages 
differs trying assist users finding faults spreadsheets develop 
additionally report results testing running entirety test suite collecting information tests test suite 
techniques incrementally update information locations faults soon user applies tests spreadsheet 
pan spafford developed family heuristics appropriate automated fault localization 
total different heuristics felt useful 
heuristics program statements exercised passing failing tests 
example heuristics indicates statements exercised failing tests test suite set highlighted techniques 
techniques directly relate heuristics set cells exercised failed tests cells exercised large number failed tests cells exercised failing tests exercised passing tests 
combine heuristics determine likelihood cell contains fault 
wysiwyt setting fault localization underlying assumption wysiwyt testing methodology rothermel user incrementally develops spreadsheet testing incrementally 
intended audience users communication testing done software visualization devices 
incremental interactive nature spreadsheets requires visualization devices incremental efficient maintain immediate visual feedback 
depicts simple example wysiwyt forms burnett burnett spreadsheet language utilizes free floating cells traditional spreadsheet grid 
wysiwyt untested cells red borders light gray 
example cell net amount tested border red light gray 
user notices cell value correct check checkbox corner cells cell 
response action visualizations updated granularities 
granularity cells checkmark appears indicating cell current value result successful test 
cell border colors checked cell cells contributing move continuum red untested blue tested black 
cell half way continuum overtime pay gross amount contribute completely blue black 
user elects show cell dataflow arrows incoming arrows follow color scheme borders cell overtime pay 
user elected show cells dataflow arrows cells formulas allows finer granularity 
wysiwyt implemented research spreadsheet language forms 
left forms spreadsheet illustrating wysiwyt low cost visualization features 
right bird eye view spreadsheets memory 
visualization 
dataflow arrows connecting formulas subexpressions follow color scheme granularity subexpressions shows users untested cell combinations need testing 
visualizations granularity spreadsheets 
indicator top right spreadsheet showing spreadsheet tested 
second bird eye view right shows spreadsheet currently loaded memory 
user may realize scenes computed dataflow test adequacy criterion laski korel ntafos weyuker 
test adequacy criterion sets standards describing software case spreadsheet adequately tested 
criterion necessary testing methodology point define user done testing 
wysiwyt adequacy criterion du adequacy 
definition point source code variable cell assigned value point variable value 
definition pair du pair tuple consisting definition variable variable 
test suite notion definition pairs adequate test suite duesterwald test suite exercises manner participates dynamically production output explicitly validated user 
cell tested du pairs cell tested 
dataflow arrows showing exactly du pairs need tested explicitly shown 
user mouse medium gray arrows explanation 
consider explanations critical user environment users prior training software engineering practices 
user step try input allow test untested du pairs 
trouble suitable input automatic test generator suggest fisher 
course adequately tested spreadsheet guarantee spreadsheet fault free 
page visual fault localization techniques investigate prototyped context wysiwyt 
techniques require entire wysiwyt methodology 
minimum entry point techniques spreadsheet language adds checkbox allowing user check correct cell value 
fault localization visualization techniques incrementally developing spreadsheet user indicate observation failure marking cell incorrect checkmark 
point fault localization techniques highlight varying shades red cells contributed failure goal faulty cells colored dark red 
colors computed 
computing exact fault likelihood values cell course possible 
combine heuristics deductions drawn analyzing source code formulas user tests 
techniques meant highly interactive visual environments interested cost effectiveness 
section describe techniques information basis making deductions properties maintains drawing inferences deductions technique reasoning costs 
better information higher cost higher ability visualization visually emphasize faulty cells starting premise devising techniques 
test premise section 
test count technique technique term test count technique bases fault likelihood cell number successful tests user marked versus number failed tests user marked cell participated 
technique information basis jones differs algorithms incremental visualization aims user programmers professional programmers 
producer consumer terminology keep dataflow relationships clear producer contributes value consumer uses value 
slicing terms producers cells backward slice consumers cells forward slice 
said participate test test user marked consumers 
expressed terms test count technique uses information successful failed tests maintain properties property cell consumers failed test non zero fault likelihood 
property ensures cell contributed computation incorrect value assigned positive fault likelihood 
property fault likelihood proportional number failed tests 
property assumption incorrect calculations cell contributes cell contains fault 
property fault likelihood inversely proportional number successful tests 
third property contrast property assumes correct calculations cell contributes cell contains fault 
implement properties number failed tests nst number successful tests 
cell failed tests fault likelihood 
fault likelihood cell calculated follows fault likelihood max nst calculation mapped possible fault likelihood ranges value maps fault likelihood low maps medium maps high maps high 
consider spreadsheet 
overtime pay fault wage multiplied times overtime hrs 
spreadsheet user indicated observation failure gross amount net amount cells cells contain incorrect values inputs 
furthermore user indicated value contained regular pay correct 
information dataflow relationships test count technique assigned estimated fault likelihood visually represented varying shades red gray non input cell spreadsheet 
specifically visualization shows fault likelihood regular pay overtime pay gross amount estimated medium net amount estimated low 
page 
hypothetical spreadsheet fault overtime pay cell 
test count technique visually assisting user effort localize fault contributing failures observed 
user mouse overtime pay see explanation visualization 
simple example order clearly illustrate differences fault likelihood visualizations techniques 
technique came leveraging algorithms data structures written purpose support semi automated test re regression testing spreadsheet paradigm fisher ii 
algorithms data structures detailed 
summarize information stored data structures 
consider costs test count technique settings existence test re feature environment case prototype second bare spreadsheet language checkboxes recording faults 
basic interactions user perform affect properties 
interaction potentially triggers activity technique 
interactions users change constant cell value analogous running different input value users change nonconstant cell formula users add test checking ing cell value 
setting test re data structures maintain necessary information previous tests 
setting changing constant value constant value trigger activity 
wysiwyt methodology define new execution new test mark user defines set values test 
changing non constant formula incurs additional time cost data structures reinitialized regression testing subsystem consumers 
added cost cells visited update values border colorings 
user enters mark additional cost system needs update test counts colorings producers cells visited variations interactions trigger activity 
example removing test undo ing checkmark triggers action reverses changes placing checkmark 
usually ignore variations obvious add materially discussion 
testing subsystem update border colorings 
presence regression testing subsystem reported fisher ii highest additional cost fault localization subsystem trigger showing test count technique extremely reasonable cost setting 
consider setting bare spreadsheet language checkboxes entering decisions test successful failed 
responsiveness requirements spreadsheet languages chosen trade space save time possible storing relationships cells tests directions 
data structures users interactions trigger algorithms fisher ii test re purposes plus just described setting algorithms existed 
simply add time complexities test re algorithms 
discussed user enters mark cell affected information stored tests updated time maximum number uses cell spreadsheet number producers 
changing cell non constant formula different formula requires saved information tests consumers considered obsolete 
reason consumers fault likelihoods reinitialized zero 
related testing information updated mc max cost set operations number marks tests reach modified cell maximum number consumers affected tests maximum number uses cell spreadsheet 
clearly setting test count technique costs may issue responsiveness 
blocking technique similar program dicing chen cheung second technique term blocking technique notices dataflow relationships existing marks reach notes mark blocked mark forward slice 
includes low fault likelihood category addition ranges utilized test count technique certain blocking situations 
technique previously chronologically technique developed 
chosen summary second easily explained terms addition test count technique properties allow marks certain times block effect marks 
properties attempt accurately predict source incorrect values user property mark blocks effects consumers forward slice propagating producers backward slice 
property specifically enhance localization 
producers contribute incorrect values darker incorrect values contribute correct values downstream preventing dilution cells colors lead marks 
property checkmark blocks effects marks consumers forward slice propagating page producers backward slice exception minimal fault likelihood property required property 
similar property property uses prune producers highlighted area contribute correct values values eventually contribute incorrect values 
implement properties number consumers marked incorrect blocked value marked correct data flow path value marked failed 
furthermore result subtracting number consumers 
definitions similar 
cell failed tests fault likelihood 
failed tests reachable fault likelihood low 
assign fault likelihood ranges scheme test count technique 
calculate cell fault likelihood fault likelihood max floor demonstrates example blocking technique 
spreadsheet tests 
blocking technique assigned low fault likelihood regular pay cell strategic blocks effects downstream marks test count technique estimated cell fault likelihood medium 
furthermore fault likelihoods overtime pay gross amount estimated low medium 
note mathematics blocking technique differ test count technique 
essence difference blocking technique mathematically emphasizes impact blocking mark test count technique mathematically emphasizes difference failing successful tests 
precisely blocking technique maps fault likelihood ranges estimates fault likelihood equation provided earlier 
test count technique hand directly calculates fault likelihood mapping range nst 
test count multiplies failed tests factor 
spreadsheet blocking technique 
providing second mathematical distinction techniques 
test count technique interactions trigger algorithms including data structure updates placing mark changing non constant formula 
blocking technique keeps track cells reached various marks blocking computed complex intertwined dataflow relationships 
data structures exist solely purpose fault localization visualization cost incurred spreadsheet environment bare wysiwyt test re 
number cell producers cells backward slice 
furthermore number edges backward slice total number marks tests spreadsheet 
time complexity placing undoing mark adding modifying formula time complexity em 
nearest consumers technique techniques costs incurred interactive activities placing mark updating formula cell great maintain responsiveness required spreadsheet size increases 
approximate properties low cost developed third technique term nearest consumers technique 
greedy technique considers direct consumers consumers connected directly edge 
mark placed cell fault likelihood cell calculated solely mark placed cell average fault likelihood direct consumers 
producers updated calculations 
dc set direct consumers 
number marks dc number marks dc 
true mark 

fault likelihood calculated follows fault likelihood average fault likelihood dc exceptions calculation 
currently marked correct automatically fault likelihood low 
second marked incorrect average fault likelihood dc medium fault likelihood medium 
placed nearest consumers technique allow fault likelihood producers drop previous value 
similarly check placed technique forbids fault likelihood producers increase previous estimation 
demonstrates nearest consumers technique spreadsheet previous examples 
mimicking blocking behavior blocking technique fault likelihood regular pay cell estimated low 
technique assigned high fault likelihood overtime pay gross amount previous techniques gave cells low medium fault likelihood 
addition fault likelihood page 
spreadsheet nearest consumers technique 
net amount medium opposed low 
technique advantages require maintenance data structures stores cell previous fault likelihood 
information marking cell requires look direct consumers followed single breadth traversal backward slice number direct consumers connected producers 
editing formula requires breadth traversal cost 
costs independent environment bare includes wysiwyt 
experiment techniques intended user programmers interactive environments continue pursue ways consider adjusting 
answering kind question development progress purpose formative study named helps inform design 
formative experiment describe goal gain insights attributes effectiveness ability visually localize faulty cells robustness test suites created users 
possible experiment aimed questions create hypothetical test suites simulate user actions collection spreadsheets 
run hypothetical test suite technique compare effectiveness 
tie study closely ultimate users elected test suites testing actions users performed earlier experiment 
test suites subjects experiment 
previous study generated current study test suite subjects user participants recruited computer literacy course instructed test identify errors forms spreadsheets change grades 
change calculates optimized number dollars quarters pennies returned jar pennies bank grades computes letter grade quiz scores extra credit score 
spreadsheets contained seeded faults 
difference implications fault localization change involves narrow dataflow chain leading single output grades relatively independent dataflow paths 
previous study fault localization technique 
participants allowed change formulas change values input cells communicate testing decisions marks 
restrictions important control measurement purposes current experiment meant spreadsheets contained faults 
eventually important run interactive experiments users take consideration techniques influence testing decisions users 
course previous study recorded testing actions participant electronic transcript 
current study ran recorded testing actions tool replays testing actions extract test values users entered checked 
test suites obtained electronic transcripts test suite subjects current experiment 
results effectiveness comparisons effectiveness fault localization visualization technique rests ability correctly visually differentiate correct cells spreadsheet cells contain faults 
better job technique visually distinguishing spreadsheet faulty cells correct cells effective technique 
measure effectiveness measuring visual separation faulty cells correct cells spreadsheet result subtracting average fault likelihood faulty cells average fault likelihood correct cells 
subtraction calculating ratio color choices form ordinal ratio scale 
measured visual separation points time testing information gathered early just failure observed regardless successes occurred 
reason measuring visual separation testing obvious 
reason measuring failure mark point technique give user visual feedback 
initial visual feedback may flawed technique little information base estimations initial feedback important may influence subsequent actions user 
statistical vehicle shed light effectiveness state null hypotheses point failure recorded significant difference effectiveness fault localization visualization techniques 
time tests completed significant difference effectiveness fault localization visualization techniques 
mean visual separations table standard deviations parenthesized 
table denotes marginal significance technique difference techniques level significance denotes difference significant level level 
box plots add table information showing span th th percentile interior page box median line inside box tails distribution vertical lines outliers circles 
negative visual separation correct direction faulty cells darker correct cells correct direction larger absolute value separation greater visual difference 
close bottom visual separation axes box plots best 
simply refer larger differences correct direction better friedman test statistically analyze results pertaining research question 
test alternative repeated measures anova assumption normality equality met 
mark placed change spreadsheet statistical analysis friedman test showed blocking technique better visual separation experimental techniques marginal significance df 
grades spreadsheet nearest consumers technique significantly better visual separation df techniques 
reject 
note results change spreadsheet separations wrong direction correct cells tended colored darker faulty ones happen grades spreadsheet 
recall change spreadsheet cells lined single dataflow chain feeding final answer grades spreadsheet multiple dataflow chains 
may suggest techniques disadvantage providing reasonable early feedback single dataflow chain 
question certain dataflow patterns especially resistant early feedback faulty cells interesting requires experimentation additional spreadsheets 
test test count technique showed benefits information builds time 
tests help blocking nearest consumer techniques 
fact test nearest consumers technique significantly worse separations test count technique spreadsheets change df grades df significantly different blocking technique 
differences rejected 
caution standard deviations data quite large 
large standard deviations may surprising variations human behavior interactive testing 
cautious generalizing data 
large standard deviations suggest view effectiveness visualizations subjects visualization succeed fail 
table 
mean visual separations subjects 
test tc nc tc nc change grades table 
darkest cell faulty testing 
true identifications false identifications tc nc tc nc change grades darkest cell colored dark draw user attention truly faulty 
left table percent test suites subjects darkest cell testing faulty 
right side shows percent subjects correct cell erroneously colored darker faulty ones 
ties darkest correct cell faulty cell color omitted table 
low false identification rates may particularly important users may relying visualizations guidance finding faults 
robustness users engaging interactive testing mistakes 
professional programmers mistakes testing interactively professional software development testing treated asset test suites carefully maintained run batch 
example user pronounce test successful fact reveals failure 
fault localization visualization technique may useful regardless effectiveness withstand mistakes 
consider issue subjects change spreadsheet isolated contained wrong wrong mark 
similarly subjects grades spreadsheet contained erroneous mark 
refer subjects erroneous marks perfect refer page table 
mean visual separations perfect subjects 
test tc nc tc nc change grades imperfect information form null hypotheses investigate robustness 
point failure recorded significant difference effectiveness fault localization visualization techniques perfect subjects 
time tests completed significant difference effectiveness fault localization visualization techniques perfect subjects 
time tests completed significant difference effectiveness fault localization visualization techniques imperfect subjects 
table contains data perfect subjects 
recall situations compared section showed borderline significant differences techniques 
contrast restricted perfect subjects differences significant test grades 
change df test change df grades df test grades df 
may due simply smaller sample sizes involved possibility errors included full sample part distinguished 
box plots change grades spreadsheets subjects considered 
particular interest large variances data nearest consumers technique small variances blocking technique 
techniques 
reject 
comparing data imperfect subjects isolation way investigate possibility 
comparison subjects sample necessarily includes subjects correct followed errors subjects incorrect data test shown table 
test data change spreadsheet test count technique best marginal significance level df 
grades spreadsheet test data test count technique significantly better nearest consumer technique df 
rejected 
cost effectiveness implications friedman tests revealed significant difference test test count effective 
fairly reliable reporting reasonably low number false identifications distinguish true identifications 
robust maintaining best visual separations presence errors 
positive attributes despite fact expensive blocking technique 
effective techniques providing early feedback 
blocking technique expensive 
despite expected effectiveness high producing cost effectiveness ratio 
previous section statistics lead test suite 
blocking technique show important advantages 
better test count early feedback 
second consistent techniques showing smaller spans smaller variances cases 
facts suggest effectiveness goal possibility start blocking technique early feedback switch test count technique long run 
devised nearest consumers technique hope approach performance cost 
learned nearest consumers technique consistent techniques comparisons data large variances results 
cases performed quite badly test 
performed quite especially comparisons 
may say despite fact consistent blocking technique may viable early feedback period lower expense may cost effective choice purpose 
table 
mean visual separations imperfect subjects 
test tc nc tc nc change grades applicable page devised visual fault localization techniques user programmers 
techniques new 
techniques draw traditional approaches fault localization incremental algorithms visualization strategies unique requirements enduser programming 
particular techniques seamlessly integrate incremental visualizations spreadsheet environment 
techniques evolving conducted empirical formative study direct efforts pursue ways 
surprising results robustness ability withstand user errors quite different techniques 
test count robust presence mistakes 
believe resilience tied test count accumulation historical information 
consistency consistency results different spreadsheets different test suites way techniques differentiated 
blocking variation 
early feedback correctness feedback time may critical encouraging users continue testing marking cells accordingly 
test count effective point 
interestingly low cost nearest consumers technique extremely 
findings study account considering number refinements techniques 
robustness nearest consumers technique may improved incorporating simple counters record number correct incorrect marks placed cell 
furthermore plan manipulate mathematics techniques independent variable learn extent impacts performance techniques 
ties user programmers research focus 
example incremental reward users receive mark critical impact debugging strategies 
ability understand predict incremental changes visualizations need investigated 
currently planning empirical investigate similar issues 
software visualization research concerned human factors extent approach depends factors magnified audience consists users untrained fault localization 
supporting particular audience necessitates highly interactive incremental approaches essential difference software visualization research 
acknowledgments visual programming research group oregon state university feedback help 
supported part nsf itr 
atwood burnett walpole wilcox yang steering programs time travel 
ieee symp 
visual languages boulder colorado sep 
boehm brown clark horowitz software cost estimation ii 
prentice hall ptr upper saddle river nj 
burnett atwood yang forms order visual language explore boundaries spreadsheet paradigm 
functional programming mar 
burnett graphical definitions expanding spreadsheet languages direct manipulation gestures 
acm trans 
computer human interaction mar 
chen cheung program dicing 
software maintenance research practice 
duesterwald gupta soffa rigorous data flow testing output influences 
nd irvine software symp mar 
eick maintenance large systems 
software visualization programming multimedia experience stasko domingue brown price eds mit press cambridge ma 
fisher cao rothermel cook burnett automated test case generation spreadsheets 
th int 
conf 
software engineering may 
fisher ii jin rothermel burnett test reuse spreadsheet paradigm 
int 
symp 
software reliability engineering nov 
heath rover visualization parallel performance evaluation optimization 
software visualization programming multimedia experience stasko domingue brown price eds mit press cambridge ma 
cypher smith cocoa visual programming challenge 
visual languages computing apr 
jones harrold stasko visualization test information assist fault localization 
int 
conf 
software engineering may 
roth visualization dynamics real world software systems 
software visualization programming multimedia experience stasko page domingue brown price eds mit press cambridge ma 
laski korel data flow oriented program testing strategy 
ieee trans 
soft 
eng 
may 
lieberman fry reversible animated source code stepper 
software visualization programming multimedia experience stasko domingue brown price eds mit press cambridge ma 
notkin ellison kaiser kant habermann special issue gandalf project 
systems software may 
ntafos required element testing 
ieee trans 
soft 
eng 
nov 
pan spafford automatic localization software faults 
th pacific northwest software quality conference oct 
know spreadsheet errors 
user computing spring 
weyuker selected software test data data flow information 
ieee trans 
soft eng 
apr 
rothermel burnett slicing spreadsheets integrated methodology spreadsheet testing debugging 
nd conf 
domain specific languages oct 
reiss graphical program development program development systems 
symp 
practical software development environments apr 
reiss visualization software engineering programming environments 
software visualization programming multimedia experience stasko domingue brown price eds mit press cambridge ma 
rothermel li burnett see test methodology testing form visual programs 
int 
conf 
soft 
eng apr 
teitelbaum reps cornell program synthesizer syntax directed programming environment 
comm 
acm sep 
telcordia technologies tool program debugging 
com html man html july 
tip survey program slicing techniques 
programming languages 
