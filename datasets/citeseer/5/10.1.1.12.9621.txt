harnessing curiosity increase correctness user programming aaron wilson margaret burnett laura beckwith orion curtis cook mike durham gregg rothermel department computer science oregon state university corvallis burnett beckwith cook cs orst edu despite ability help program correctness assertions notoriously unpopular professional programmers 
user programmers appreciate value assertions user programs suffer serious correctness problems assertions help detect 
leads question users enter assertions 
investigate question devised curiosity centered approach eliciting assertions users built surprise explain reward strategy 
follow user participants shows approach effective encouraging users enter assertions help find errors 
keywords assertions user software engineering curiosity considerable empowering users able write programs result users doing 
fact number user programmers expected reach writing programs devices special purpose scripting languages multimedia web authoring languages spreadsheets 
unfortunately evidence spreadsheet paradigm widely user programming languages abounds user programmers extremely prone errors 
problem serious users programs simply explorations scratch pad calculations quite important personal business calculating income taxes commerce web pages financial forecasting 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
chi april ft lauderdale florida usa 
copyright acm 
help reduce error rate user programs important user 
classical software engineering methodologies panacea known help reduce programming errors useful incorporate successes user programming 
working vision call user software engineering holistic approach facets software development users engage 
goal bring gains software engineering community user programming environments requiring training interest traditional software engineering techniques 
features user software engineering assertions 
idea assertions users may surface counterproductive 
known despite assertions benefits detecting run time errors professional software developers unwilling assertions 
empirical data show users effectively assertions type correct assertions provided doing leads significant improvements debugging correctness debugging efficiency 
course strong benefits assertions realized users entering assertions acting 
addresses problem users enter assertions assertions encourage user think portions program erroneous 
essence strategy arouse users curiosity element surprise encourage explanations rewards follow assertions 
refer strategy surprise explain reward strategy 
research curiosity indicates surprising violating user assumptions trigger search explanation 
violation assumptions indicates user presence understand 
information gap perspective revealed gap user knowledge focuses user attention gap leads curiosity motivates user explore order close information gap 
surprise explain reward strategy provoke user curiosity assertions program correctness 
show strategy instantiation user software engineering environment spreadsheet paradigm environment investigate user behaviors strategy encouraged results behaviors 
related body research visually depicting relationships program objects little research aimed helping reduce errors user programming 
notable exception outlier finding points potential errors text documents statistical outlier algorithms highlighting outliers users 
hand wealth research relevant second component surprise explain reward strategy interactive explanations 
relevant done constraint programming paradigm explanations particularly debugging 
jussien colleagues devised explanations help programmers users running programs spot causes constraint program failing 
explanations relevant debugging primary purpose encouraging users debugging features provided system 
suggested building learning supports programming systems 
list facilities including integrating learning opportunities normal programming activity annotations 
example character marty annotated assistant 
difference approach marty provides help relating correct syntactic programming constructs explanations primarily helping semantics objects environment 
expanding traditional notion help lieberman described interfaces give take advice 
computer gives user advice user give advice back computer 
approach offers advice takes advice limited ways 
advice lieberman discusses system learn actions user 
user programming languages provide immediate visual feedback semantics characterized primary reward user programming date 
cognitive dimensions framework providing common vocabulary visual language designers describes feature progressive evaluation novices experts alike rely evaluating problem solving progress progressive evaluation provides :10.1.1.22.1477
example programming environment supports progressive evaluation spreadsheets 
example making change formula imme changes cells depend changed cell 
nardi progressive evaluation feature spreadsheets accessible users 
connecting curiosity assertions research curiosity surveyed points information gap illustrated user user curiosity subject illustrated gap may increase potentially causing search explanation 
challenging assumptions curiosity information gap perspective explains empirical programming literature bears users assume programs correct warranted 
motivation component surprise explain reward strategy arouse users curiosity surprise search explanations 
component strategy characterized principle strategy situations users features help benefit features 
situation strategy attempts surprise user entering assertions suggesting assertions editable part help test device user chosen invoke 
user curious find explanation system 
strategy causes user act acknowledging suggested assertion correct editing suggested assertion second situation possible 
time surprise comes assertion identifies potential bug 
users look explanations explain surprise suggest possible actions 
user successfully fixes bug identified assertion see program behavior correct clear reward assertions 
remainder expand approach briefly summarized 
setting opportunities curiosity part highly integrated incremental concept software engineering support users 
setting provides opportunities curiosity reward strategy 
continually evolving prototype user software engineering concept exists forms member spreadsheet paradigm 
components see test wysiwyt methodology testing 
wysiwyt allows users incrementally edit test debug formulas programs evolve visually calling users attention painting cell borders red light gray 
tested cells painted blue black partial depicted continuum red blue light gray black see 
user notices cell value correct checks checkbox corner increasing 
empirical shown wysiwyt methodol ogy helpful users additional visual devices colored arrows formula subexpressions indicate relationships remaining covered doing certain amount testing users find difficult think suitable test values cover untested relationships 
point invoke help test feature 
feature provides opportunity surprise 
help test hmt feature suggests test values user selected cells user selected dataflow arrows 
hmt tries find inputs lead coverage untested portion user selections cell program user cells arrows selected 
hmt find suitable test case performance experiments succeeded seconds approximately time 
button available hmt deemed long 
hmt efforts find suitable test values somewhat transparent user see values considering spinning 
transparency behavior contributes understandability surprises added provides opportunity rewards explain 
assertions mentioned assertion feature environment 
system terms guards communicating users named guard correctness cells 
assertions protect cells bad values values disagree assertion 
user enters assertion user entered assertion propagated formulas creating computer generated assertions downstream cells 
user tabs shown pop assertions done cells 
stick icons cells monday tuesday identify user entered assertions 
computer icon cell hrs identifies computer generated assertion system generated propagating assertions monday tuesday hrs formula 
cell computer generated user entered assertion conflict state assertion conflict assertions match exactly 
system communicates assertion conflict circling conflicting assertions red 
conflict hrs due error formula extra tuesday 
cell value hrs inconsistent assertions cell termed value violation value circled 
users concrete syntaxes entering assertions cell textual primarily graphical 
examples textual syntax 
represented comma separators line shown assertions represented multiple assertions stacked cell cell hrs 
assertions agree 
possible omit endpoint range allowing relationships 
information relationships supported assertions relative power graphical syntax 
users choose enter assertions 
blackwell model attention investment model user problem solving behavior suggests users want enter assertions just described 
model considers costs benefits risks users weigh deciding complete task 
example ultimate goal forecast budget spreadsheet exploring unknown feature assertions cost benefit risk 
cost figuring assertions succeed 
benefit finding errors may clear long user proceeds direction 
risk going path waste time worse leave spreadsheet state hard recover 
model attention investment implies necessary strategy users forms environment 
cell formulas displayed tab lower right hand side cell done hrs 
additionally cells non constant formulas borders colored depicting check box shown right hand corner hrs cell 
curious assertions benefits assertions clear outset 
surprise explain reward strategy sets 
realizing surprise explain reward hmt assertions step strategy generate meaningful surprise user 
system needs violate user assumptions program 
devised pseudo assertion purpose termed hmt assertion produced hmt 
hmt assertion guess possible assertion particular cell 
surprises user attention hmt assertions exist surprise create curiosity 
guesses reflections hmt behavior 
report range hmt attempts find suitable test cases 
example hmt assertion cell monday indicates hmt considered values monday settled current value 
hmt invoked consider different selection values monday widen hmt assertion primary job hmt assertions surprise user generate user interest real assertions user entered computer generated assertions 
hmt assertions design usually bad guesses 
worse guess bigger surprise 
consider part weekly payroll program running example 
user may expect values monday range rightly employees credited fewer hours day 
hmt aware attempted inputs zero 
hmt assertion monday probably violates user assumptions correct values monday 
precisely triggers curiosity information gap perspective 
hmt assertion generated behaves assertion 
propagate value arrives violates value circled red 
happens hmt working generate values 
red circles appear hmt doing transparent search suitable test cases 
red circles surprise 
important note strategy rests surprise attempt rearrange user priorities requiring users surprises 
dialog boxes modes 
hmt assertions passive feedback system try win user attention require 
behavior study revealed users attend hmt assertions minutes task appears amount visual activity reasonable requesting demanding attention 
explanations encouraging exploration strategy feature surprises user inform user 
devised demand explanation system structured object arouse curiosity 
users exploring object viewing explanation demand low cost way tool tips 
example user hmt assertion receive explanation 
explanation describes semantics computer responsible creating assertion assertion product computer testing 
explanation suggests possible action try fixing assertion specifies potential reward protecting bad values 
note computer wonders assertion 
explicit hmt assertion may correct computer user advice 
previous empirical revealed users think computer correct 
important emphasize tentative nature hmt assertions 
explanation system spans objects environment 
principles governing explanations table 
general main components explanations include semantics object suggested action reward 
including semantics action reward part explanation arbitrary choices 
regarding semantics help systems users focus syntax study assessing users learn spreadsheets successful users focused semantics spreadsheet syntax 
regarding actions examined learning exploration 
point users novice experts form sub goals clues environment 
actions explanations suggest sub goals 
getting user take action order learn fact principle minimalist model instruction 
regarding hmt guessed assertions input cells top row 
hmt changed values input cells highlighted thicker border 
guesses propagated hrs formula create hmt assertion cell 
reward attention investment model emphasizes fact suggested action cost user effort potential rewards clear users may able informed decision expend effort 
rewards user edits hmt assertion create assertion types short term rewards follow 
fourth longer term reward bridge real assertions long term rewards 
reward visibly occurs situations input value validation 
reward occur immediately user edits hmt assertion 
consider cell monday 
suppose user notices hmt assertion reads explanation deciding take explanation advice fix assertion changes hmt assertion helps show succeed acting template assertion syntax 
despite assertion entry cell value system circles value violation assertion 
advice system user immediately rewarded system protect ing bad values device type explanation include simple interaction device 
purpose close window interaction device action reason software action semantics 
engineering task 
explanation 
feedback device semantics 
suitable software engineering follow action suggest task 
give reason 
explanation 
device 
principle worth explanations 
add label 
clearly labeled button 
table explanation system guiding principles 
explanation examples 
protect bad values type guard range double click value conflict guard 
resolve conflict fix error formula user guard 
computer testing caused wonder guard 
fix guard protect bad values typing range double clicking 
guards agree 
agree fix error formula user guard 
computer guards tell value 
computer determined guard formulas guards entered 
second reward occurs 
user places assertion input cell behavior hmt changes honor assertion 
continuing previous example cell monday assertion user runs hmt hmt choose values satisfying assertion 
hmt thought process displayed values choose behavior change noticeable users section study discuss 
hmt selected values odd user perspective knowledge program purpose getting hmt choose sensible input values rewarding noticed 
third reward pertains changes hmt behavior 
hmt aggressive seeker test values expose bugs 
test generators software engineering community done hmt attempts violate user entered computer generated assertions 
behavior implemented current prototype 
behavior focused cells cells formulas constant values potentially creates value violation 
value violation non constant cell indicates things faulty assertion situation program fail inappropriate values input cells protected assertions outright bug 
example cell hrs hmt attempt violate assertion looking values inputs contributing hrs produce value violation 
hmt pursuit bugs succeeds user rewarded surprised leading longer term surprise explain reward strategy 
long term surprise explain reward hmt assertions intended help users learn appreciate assertions goal accomplished users need hmt guessed assertions 
learned enter assertions regardless hmt guesses assertions cells wish protect 
surprise explain reward strategy carries longer term help maintain correctness 
bug surprise 
users find bugs need surprised 
strategy provides surprises user entered assertions 
surprises rewards mean bug semi automatically identified 
assertions lead kinds surprises 
value violations surprises 
discussed identify bugs assertion errors circled red 
second assertion conflicts surprises 
explained earlier assertion conflicts arise system propagating user entered assertions formulas produce computer generated assertions disagree user entered assertions 
value violations circled red hrs indicate bugs assertion errors 
third computer generated assertions look wrong user 
explanations support surprises explaining semantics suggesting suitable actions 
behavior study investigate surprise explain reward strategy affect users debugging behavior conducted behavior study participants business majors 
study replicated aspects experiment reported 
studies problems wysiwyt help test explained participants 
earlier experiment assertions explained automatically provided demand participants surprise explain reward strategy 
contrast study describe assertions provided surprise explain reward strategy place 
important assertions fact mentioned 
participants simply introduced way mouse overs worked time explore 
asked participants test programs sure worked description errors fix 
program weekly pay example running programs behavior study 
example shown entirety 
program grades program described 
time limits imposed ensure working problems 
order problems counterbalanced 
success introducing assertions strategy successful users create interact assertions 
question depends sequence actions data perspective sequence task task irrespective program participant 
participants choose enter assertions task assertions tasks 
average assertions participant 
recall assertions mentioned implied tutorial reason activity explanations hmt assertions related explanations 
reason 
table shows task assertions resulted directly modifying hmt assertions 
indicates hmt assertions way participants interacting assertions 
second task participants learned enter assertions hmt assertions number assertions entered editing hmt assertions dropped 
drop total number assertions shows interest assertions decline task users need hmt help assertion entry declined 
explain explore users seek explanations surprising objects 
explanation system bore primary responsibility educating participants assertions surprises got attention 
determine participants actively explanations recorded participants accesses explanations 
assertions hmt hmt produced assertions assertions task task table users entered assertions 
participants actively sought explanations explanations recorded experiment 
interest assertions including hmt assertions clear explanations displayed related assertions 
explanations important tying surprises rewards hmt assertions 
answer question examined data see participants followed pattern visual event occurs hmt assertion appears user seeks explanation subject event user takes action specified system explanation 
surprised large extent pattern existed hmt assertions 
fully participants followed pattern interacting hmt assertions 
explanations eventually needed related pattern explanations hmt assertions appeared participants entered user assertion looking explanation 
participants followed second pattern described 
sufficiency rewards rewards sufficient encourage users continue assertions feature 
study provided types evidence rewards sufficient 
strongest general fact participants assertions 
provided evidence 
additional evidence participants enter assertions minutes mean task second task began entering assertions earlier see table 
fact users entered assertions minute second task 
clear users familiar assertions task learned recognize value second task 
type evidence comes comments post session questionnaire 
user comment long term reward trying reassuring think help accuracy user described reward controlling hmt behavior try get help feature stay limits correctness ultimately users successful creating accurate assertions 
participants created assertions study correct 
correct mean average time enter assertion task minutes task minutes table time entry assertion 
identical assertions previously devised design team earlier experiment assertions automatically provided cells 
users assertions help program correctness 
know participants assertions provided debugging programs study corrected significantly bugs participants assertions 
consider assertions created participants contributed correctness 
program different bugs report information program program task task 
value violation assertion conflict credited helping user fix bug display red oval followed formula edits formula edits resulted corrected formula 
results criteria transcripts seen table 
value violation ovals assertion conflicts pointed bugs eventually fixed 
problems time limit participants able reach 
obviously assertion feedback tied bug fixes 
critical question extent participants believed programs correct 
essence strategy purpose maintain users curiosity program correctness long get bugs 
compared correctness scores self ratings programs correctness tasks 
spearman rank correlation table indicates participants judgements significantly correlated programs actual correctness 
concluding remarks curiosity centered approach users enter assertions user programming 
approach attempts arouse users curiosity encourage follow strategy comprised intertwined collection program value violations assertion conflicts fixes circles fixes circles weekly pay grades table number bugs fixed red circle pointed 
program rho value weekly pay grades table correlations participants self ratings actual correctness 
surprises explanations rewards 
evaluated strategy examining behavior participants 
received instruction assertions learn exploration participants chose enter assertion 
primary vehicle get started assertions hmt assertions shows hmt surprises arouse curiosity 
discovered assertions participants entered quite clearly shows follow 
data show follow due explanations rewards 
data study especially considered light results related study provide clear evidence assertions positive impacts correctness 
step extend surprise explain reward strategy user software engineering devices harness curiosity help users increase correctness programs 
acknowledgments marc fisher help hmt 
supported part nsf itr 
supported part computing research association distributed mentor project funded part nsf eia 

beckwith burnett cook reasoning requirement relationships spreadsheets proc 
ieee symp 
human centric computing arlington va sept ieee 

blackwell green investment attention analytic approach cognitive dimensions 
green abdullah brna eds 
collected papers wkshp 
psych 
programming interest grp 
www cl cam ac uk afb publications ppig htm 
boehm brown clark horowitz software cost estimation ii 
prentice hall ptr upper saddle river nj 

burnett cook rothermel user software engineering assertions technical report oregon state university sept 
ftp ftp cs orst edu pub burnett tr assertions pdf 
burnett atwood yang forms order visual language explore boundaries spreadsheet paradigm 
functional programming march 

kahn cypher smith integrating learning supports design visual programming systems 
visual languages computing october 

fisher cao rothermel cook burnett automated test generation spreadsheets proc 
icse orlando fl may ieee 

green petre usability analysis visual programming environments cognitive dimensions framework 
visual languages computing june 

hastie causes effects causal attribution 
personality social psychology 

jussien user friendly explanations constraint programming proc 
iclp th wkshp 
logic programming environments cyprus dec 

korel 
assertion oriented automated test data generation proc 
icse berlin germany march ieee 

krishna cook keller wallace burnett rothermel incorporating incremental validation impact analysis spreadsheet maintenance empirical study proc 
software maintenance florence italy nov ieee 

lieberman interfaces give take advice 
human computer interaction new millenium carroll ed acm press addison wesley 

lieberman wish command programming example 
morgan kaufmann san francisco 

psychology curiosity 
psychological bulletin 

miller myers outlier finding focusing user attention possible errors proc 
user interface software technology orlando fl nov acm press 

nardi small matter programming perspectives user computing mit press cambridge ma 

know spreadsheet errors 
user computing spring 

role learning spreadsheet examples 
computer assisted learning dec 

rosenblum practical approach programming assertions 
ieee trans 
soft 
eng 
jan 

rosson seals teachers simulation programmers minimalist learning reuse proc 
chi seattle wa apr acm 

rothermel li burnett see test methodology testing form visual programs proc 
icse kyoto japan apr ieee 

seals rosson carroll lewis fun learning creator exercise minimalism collaboration proc 
ieee symp 
human centric computing arlington va sept ieee 

wilcox atwood burnett cook continuous visual feedback aid debugging direct manipulation programming languages 
proc 
chi atlanta ga march 
