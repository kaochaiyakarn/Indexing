faster earley parser philippe mclean nigel horspool dept computer science university victoria victoria bc canada mail csc uvic ca csc uvic ca 
parsing technique hybrid earley method lr methods 
new method retains ability earley method parse arbitrary context free grammars 
precomputed lr sets items obtain faster recognition speeds reducing memory requirements 
parsing method invented earley highly practical parsing technique general context free grammars cfgs 
length input recognized parser requires time proportional recognize arbitrary context free lan guages unambiguous languages large class languages 
amount processing performed recognizing input string large compared table driven techniques lr parser family includes lr slr lalr lr methods 
lr methods accept arbitrary cfgs 
limited subsets unambiguous grammars 
general lr parsing table constructed arbitrary cfg contain conflicts 
states provide choice actions perform inputs 
parsing method due tomita overcomes limitations lr methods 
uses lr tables may contain conflicts 
parser encounters choice parsing actions effect clones new copies track conflicting actions simultaneously 
copies parser may subsequently reach state parsing proceed input symbol invalid state copies parsers simply terminate execution 
practice tomita parser simulates parallel execution multiple copies lr parser uses dag data structure reduce storage needed parse stacks 
tomita parser particularly efficient conflicts encountered lr states 
need recognize input tomita parser method choice 
usually wish execute semantic actions precisely parses performed 
easy tomita parser parses performed parallel 
possible solution copy lr parser construct parse tree 
input traverse parse trees perform desired semantic actions 
consider thi ith computational building parse trees negates advantage tomita method 
earley parser builds data structure threaded sequence states represents possible parses input 
input processed straightforward traverse sequence states build parse tree possible parse input execute semantic actions just parse 
developed variation earley method tomita method uses lr parse tables efficiency retaining advantage permitting semantic actions easily associated grammar 
lr tables effect capture precomputations run time actions performed earley parser 
parsing method call lre uses information lr tables avoids recomputing information run time 
name lre reflects fact method viewed combination lr parsing earley parsing 
terminology notation context free grammars context free grammar tuple vt vn start vt set terminal symbols vn set nonterminal symbols vn vt set productions start vn start symbol goal symbol grammar 
vocabulary vn vt augmented grammar formed adding special goal rule vt vn start start start 
tokens delimiters represent input 
lower case letters near front alphabet 
represent elements vt upper case letters near front alphabet 
represent elements vn upper case letters near alphabet represent elements superscript represents repetitions symbol example represents string aaa 
greek letters represent sequences zero vocabulary symbols 
lr recognizers item production contains marker written dot indicate right hand side rhs recognized 
associated item string symbols 
string represents lookahead right context production 
example possible item dd 
item indicates matched symbols right hand side rule complete rhs successfully matched symbols input dd production valid parse input point 
denote set lr sets items augmented grammar element corresponds state lr recognizer recognizer initial state start accept state start start start transition function recognizer states goto function goto defined set items tk tk set goto empty set transition illegal 
string tk follow symbols accepted far syntactically valid input 
closure itemset defined set tk implies tk function def symbol prefix 
set items state may partitioned kernel items non kernel items 
items added state closure called completion items added state closure 
conventional earley recognizers conventional earley recognizer inputs context free grammar token string determines string may derived simplicity lookahead considered discussion 
recognizer constructs sequence sets tuples 
tuple form item integer referring parent earley set tuple containing item marker rhs introduced 
th set formed result recognizing input tokens 
tuples state may partitioned active predicted tuples 
active tuples may introduced ways scanner operation completer operation 
scanner operation introduces tuples previous state marker appears current input token marker advanced past token new item 
process matching terminal tokens production rhs corresponds shift operation lr parser 
completer operation identifies tuple item marker rhs moves marker past lhs items tuple parent state 
operation identifies derivation non terminal recognition rhs lr parser perform reduction exactly case 
completer operation introduces new tuples item marker appears non terminal 
operation begins recognition possible derivations non terminal closure set items 
closure performed parse time conventional earley parser 
closure items implicit lr recognizer 
earley doctoral dissertation contains proof correctness conventional earley recognizer analysis algorithmic complexity 
parse trees may enumerated derivations input string examining sets 
conventional recognizer affords simple implementation 
observation parser actions reveals parser spends time introducing new items completion operation 
prediction items may parse 
computation item set closures grammar dependent operation performed parse time 
natural wonder earley items grouped manner exploits pre computed properties grammar 
solution group items sets exactly way states deterministic possibly inadequate lr finite state automaton 
lre faster earley recognizer new parsing method named lre represents hybrid nature algorithm composition lr earley parsing methods 
description represent input recognizer 
lookahead sets properly defined assume input terminated file delimiters 
algorithm conventional earley parser correct operation may established comparing actions earley parser actions 
conventional earley parser uses items form marked production lookahead item back state recognition rule commenced 
algorithm takes advantage fact components earley item represent item states lr recognizer 
implement states lre parser terms states lr recognizer 
advantages representation lr recognizer tables determine actions earley parser lookahead strings computed dynamically new representation implemented manner uses storage 
state lre recognizer called earley state written state reached recognizing token string state represented set tuples 
number state lr recognizer organized collection back pointers earley states 
programming terms implemented array lists lre state numbers elements array correspondence items lr state formal terms represent list list integers 

integer range inclusive lr state items 
example suppose lre state representation mean state represents mixture items lr states numbered 
state items length list completes tuple state number suppose items written lookahead strings respectively 
similarly lr state just item suppose item lre state represents earley state contains exactly items tuple represents copies item lr state copy associated pointer back state pointer back state 
similarly items lr states 
parsing algorithm earley modified different state representation 
main functions named scan rec 
lre state function scan constructs new lre state represents earley items marker past token applicable earley items represented set procedure recognizer determines token string language generated note symbols symbol 
extra symbols needed provide right context final reductions parse 
recognizer constructs sequence earley states set valid parse trees may enumerated 
code scan function shown code recognizer 
code uses data structures tables explained 
tables may created lr parser construction algorithm 
lre state represented set elements structures fields 
field named state holds state number lr recognizer 
field named array lists integers 
element holds state numbers associated th item lr state number state 
array gives number items lr state array shift holds shift actions lr recognizer 
current lr state numbered shift gives number destination state shift symbol valid shift action defined symbol shift holds 
array gives correspondence items lr state lr state 
particular item lr state numbered shift symbol lead unique destination lr state contains item 
number held number item destination state 
item state specified form marker right hand side assume holds value 
function scan result origin tuple dest shift origin state dest dest process kernel items new state origin origin origin process non kernel items new state dest empty result merge result return result scan merge auxiliary function called scan function merge elem element elem state state index elem elem elem return return merge fig 

scan function function recognizer xn scan ei scan ei xi repeat ls element ei process reduce items rs ls state xi xi xi element rs lhs ls state element ls ei merge ei scan ej lhs ei change ei return failure en return success return failure recognizer merge auxiliary function function merge result elem element result merge result elem return result merge fig 

recognizer function array list positions items lr state marker right hand side lookahead string items 
array gives symbol appears lefthand side th item lr state example operation illustrate operation lre parsing method ambiguous grammar 

grammar augmented extra rule 
simplicity choose 
grammar derive lr recognizer states actions shown table 
shift action preceded symbol selects shift action 
lr parser lookahead reduce action performed matter symbol word represents fact symbol selects specified reduce action 
table contains conflicts particular note state implicitly contains different actions case lookahead symbol 
table lr recognizer example grammar state item 
item parse actions shift shift shift shift shift reduce reduce shift shift shift reduce lr table derive tables shown 
significant entries rectangular arrays shown missing elements arrays accessed 
similarly significant entries shift array shown element accessed result 
state item 
fig 

tables parser example position lefthand symbol state number items reduce state symbol shift trace states lre parser input string rec function begins initializing set initial lre state 
represents item state lr recognizer indicating rhs rule recognized 
numbered step trace corresponds processing input symbol begins showing lre state computed seeing input symbol 
explanation state derivation provided steps 
start input symbol processed 

recognizer called scan looked action lr state input 
created lre item filled back pointers 
list copied origin item lists containing correspond completion items 
input symbol processed 

recognizer called scan 
element created lr action state lookahead symbol items created recognizer item lr state reduce item reduce action triggered input symbol 
lhs symbol item recog called scan create extra items 
second input symbol processed 

input symbol processed 

input symbol processed 

input symbol processed 

input symbol processed 

additional enhancement algorithm improved 
implementation experiments immediately record non kernel items lre state handling productions empty rhs 
processing deferred scanning state occurs 
recording number kernel items lr state consulting table determined particular item destination state came kernel item source state 
list copied previous state 
list supplied number current lre state 
additional improvement achieves significant space time savings predictions items earley parser fruitless experimental results lookahead significantly affects speed earley parser 
general eliminate items sets items maintained parser 
fewer items imply fewer fruitless parsing possibilities explored 
hand conventional earley parser computes lookahead contexts items run time choosing large value lookahead waste execution time 
compare speed conventional earley parser lre parsing method 
time sec earley earley lre lr states lre lalr states string length tokens fig 

effect lookahead parsing speed demonstrates lre faster parsing method conventional earley parsing method 
show additional comparison parser generated freely distributed parser generator bison 
measurements displayed reveal parser generated yacc yields similar results 
grammar experiments ansi grammar 
grammar contains ambiguity dangling problem 
ambiguity automatically eliminated generated parser yacc bison retained earley parsers 
unambiguous grammar ambiguities eliminated bison interpretation grammar recognition time proportional length input 
ambiguous grammar recognition time may increase cube length input 
shows timing measurements parsing ambiguous grammar time sec time sec earley lre lalr states bison string length tokens fig 

parser speed grammar earley lre lalr states string length tokens fig 

parser speed ambiguous grammar modified earley parsing method take advantage precomputed lr sets items 
result hybrid parsing method lre handle general context free grammars comparable speed bison generated parser 
yacc bison course recognize unambiguous languages lalr grammars conflict elimination generated parser 
lre parsing method times faster conventional earley parser requiring half storage 
funding research provided natural sciences engineering research council canada form summer fellowship author research second author 
initial motivation working problem due gordon cormack 

donnelly stallman bison manual 
free software foundation cambridge ma 
earley efficient context free parsing algorithm 
comm 
acm feb 

earley efficient context free parsing algorithm 
ph thesis carnegie mellon university 

jacob parsing techniques practical guide 
ellis horwood chichester 

johnson yacc compiler compiler 
unix programmer supplementary documents vol 

tomita efficient parsing natural language 
kluwer academic publishers boston 
