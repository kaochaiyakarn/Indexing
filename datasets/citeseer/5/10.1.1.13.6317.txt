peerdb system distributed data sharing wee ng beng chin ooi lee tan zhou dept computer science dept computer science engineering national university singapore university science drive singapore shanghai china design evaluation peerdb peer peer distributed data sharing system 
peerdb distinguishes existing systems ways 
full data management system supports fine grain content searching 
second facilitates sharing data shared schema 
third combines power mobile agents systems perform operations peers sites 
fourth peerdb network self configurable node dynamically optimize set peers communicate directly optimization criterion 
keeping peers provide information services close proximity direct communication network bandwidth better utilized system performance optimized 
implemented evaluated peerdb cluster pentium ii pcs 
experimental results show peerdb effectively exploit technologies distributed data sharing 
peer peer technology called peer computing emerging paradigm viewed potential technology distributed architectures internet 
distributed system large number nodes pcs connected internet potentially pooled share resources information services 
nodes consume provide data services may join leave network time resulting truly dynamic ad hoc environment 
distributed nature design provides exciting opportunities new killer applications developed 
domain specific systems deployed freenet gnutella napster icq seti home lockss 
systems limited ways 
provide file level sharing sharing entirety file lack object data management capabilities support content search 
existing distributed data management data may shared predefined schema 
second limited extensibility flexibility 
easy rapid ways extend applications quickly fulfill new users needs 
third node peers typically statically defined 
peerdb system distributed data sharing 
peerdb distinguishing features 
participating node full object management system supports content search 
second peerdb users share data shared global schema 
third peerdb adopts mobile agents assist query processing 
agents perform operations peers sites network bandwidth better utilized 
importantly agents coded perform wide variety tasks making easy extend capabilities peerdb node 
example agent may manipulate data retrieved node ship back summarized data filter away objects 
peerdb supports mechanisms dynamically keep promising best peers close proximity criterion 
example peers frequently accessed directly communicable nodes frequently accessed reached peers 
significantly reduces response time queries 
implemented peerdb prototype distributed object management system incorporates features 
evaluate peerdb propose systematic methodology evaluating systems 
methodology considers efficiency effectiveness quality answers systems 
conducted experiments cluster pentium ii pcs 
experimental results show effectiveness peerdb distributed data sharing 
rest organized follows 
section discuss distributed data management system section gives quick overview platform peerdb 
section peerdb design features 
section presents extensive experimental study evaluate peerdb 
section review related works conclude section directions 
distributed data management 
noted practically existing systems designed support sharing data coarse granularity files documents 
section distinguish systems distributed database systems 
define distributed data management looking examples due space constraints technology employed distributed database applications 
serve motivate need database technology systems 
vs distributed database systems features distinguish systems distributed database systems 

systems nodes join leave network anytime 
nodes added removed network controlled manner need growth retirement 

systems usually predetermined global schema nodes 
queries largely keywords 
reasons 
current applications require fixed schema 
napster exception data shared fixed schema describes music files 
second nodes join leave network anytime fixed schema reflect actual information may available single time 
nodes typically stable knowledge shared schema 

systems nodes may contain complete data 
nodes may connected 
answers queries typically incomplete 
completeness mean answers satisfy query 
expects retrieve complete set answers 

systems content location typically word mouth node routes query neighboring nodes 
exact location direct query typically known 
points consider data integration systems distributed data management systems node capabilities act middleware server 
distributed data management systems applications formalizing concept distributed data management systems show sample applications systems may 
health care hospital specialist group patients solely care 
patient data stored centralized server hospital name address data rays prescription drugs history reaction drugs typically managed specialist personal pc 
patients specialist willing share data cases unwilling share different reasons part research program new drug 
making sharable patient data available specialists allows look patients may similar symptoms patients help making better decisions treatment drugs prescribe reactions look 
deploy distributed management system specialist join leave network answers need complete missing data specialists critical nodes search content systems schema defined specialist may different need data management specialist share interested data 
genomic data discovery new proteins necessitates complex analysis order determine functions classifications 
main technique scientists determining information phases 
phase involves searching known protein databases proteins match unknown protein 
second phase involves analyzing functions classifications similar proteins attempt infer commonalities new protein 
known servers genomic data genbank swiss prot embl data produced day laboratories world 
scientists create local databases newly discovered proteins results willing share findings world 
clearly application distributed data management systems reasons health care application 
data caching examples participant actively involved process consuming supplying data 
distributed data management deployed passive nodes nodes share resources storage computational power data may may interested 
caching results earlier queries example node may issued query server data warehouse results query cached node neighboring nodes 
way node requests data overlap query result potentially obtain partial answers quickly node remainder original server 
load original server 
shown distributed caching deployed environments speed olap queries 
adaptive platform applications peerdb database application implemented top 
shall briefly review features section 
generic system designed serve platform applications developed easily efficiently 
network consists types entities large number computers nodes relatively fewer number location independent global names lookup servers 
participating node runs java software able communicate share resources nodes peers network 
features distinguish existing systems 
integrates powerful technologies mobile agents technologies 
technology provides resource sharing capabilities nodes mobile agents technology extends functionalities 
particular agents carry code data effectively perform kind functions 
mobile agents provides files raw data provides processed information summaries 
mobile agents dispatched collect information files content sharable statistics entire network 
second facilitates finer granularity data sharing partial content file may shared shares computational power 
requester sends request file algorithm executable code operates file 
words requester performs filtering task provider 
third node network dynamically reconfigure keeping peers benefit subject individual node definition benefit 
introduces location independent global names lookup server provide node unique global identity 
way nodes may different ip address recognized single unique entity 
node fixed ip running location independent global names lookup server software 
provides main functions generates global identity peer maintains peer current status current ip address peer currently online offline information available 
due security risks posed potentially powerful platform basic platform provides secure access node computing resources 
node comprises types data private data sharable data 
nodes access data sharable 
enforced security policy restricts applications user specified locations established platform initialization 
communications nodes provided bit encryption protect sensitive data viewed travel network 
peering distributed data sharing section peerdb prototype system distributed data sharing 
peerdb enabling technologies provided 
extended ways 
data node managed database system 
words peerdb network database enabled nodes 
second data shared global schema 
third query processing assisted mobile agents 
fourth node reconfigure optimization criterion answers returned 
shall discuss features 
architecture peerdb node illustrates internals peerdb node 
essentially components loosely integrated 
component data management system facilitates storage manipulation retrieval data node 
mysql popular open source database storage server 
system stand dbms outside peerdb 
note interface data management system essentially sql query facility 
relation created associated metadata schema keywords stored local dictionary 
export dictionary reflects meta data objects sharable nodes 
objects exported accessed nodes network 
note meta data associated export dictionary subset local dictionary distinction logical actual implementation minimizes redundancy 
shall defer discussion export dictionary details meta data addressed query processing strategy 
second component database agent system called 
provides environment mobile agents operate 
peerdb node master agent manages query user 
particular clone dispatch worker agents neighboring nodes receive answers user 
monitors statistics manages network reconfiguration policies 
third component cache manager 
shall defer discussion cache manager subsection 
suffices know dealing caching remote data secondary storage cache manager determines caching replacement policy 
component user interface 
provides user friendly environment user submit queries maintain sharable objects insert delete objects 
particular users search data sql queries 
query peerdb node user interface object management system peerdb node cache manager export dictionary local dictionary 
peerdb node architecture peerdb node sharing data shared schema main objectives peerdb allow users manage private sharable data database management system dbms 
noted predetermined uniform schema nodes share 
users interact expect data defined differently different users may interests data common domain 
example naming relation genome scientist may call set protein database protein name kinases may name species mouse human 
similarly attribute level scientist may call length sequences length 
complicated problem create single universal schema may normalize database multiple tables 
difficult locate data traditional method exact matching relation names attributes 
address issue adopt information retrieval ir approach 
relation created user meta data maintained relation name attributes 
essentially keywords provided users creation table serve kind synonymous names 
think miniature thesaurus 
continuing examples table kinases proteins relation name may kinases keyword protein useful searching 
similarly users defining length sequence len length re spectively common keyword length 
way potentially relevant data determined relation matching strategy consider query set relations set target attributes set conditions 
corresponds simple spj query sql 
denote attributes appear searched keywords relation names searched keywords attribute names 
note search involves looking matching keywords keywords relations holds attributes 
result search process list relations relation name keywords match keywords attribute keywords match attribute names keywords 
query form relation attributes degree matches computed follows match wta match wta wta weights assigned reflect importance matching relation attribute names respectively 
takes value share common matching keywords 
refers total number match matching keywords attributes involved indicates total number distinct keywords attributes set relations potentially contain answers scores certain threshold value 
strategy locate matching relations note share data explicit sharing schema 
flexibility important distinction peerdb existing distributed dbms 
note relations meta data returned user decide data interests see section query processing strategies 
illustrate strategy example 
suppose peers share genomic data 
peer defines relation kinases length 
peer defines relation protein seqno len sequence 
peer defines relations id id sequence 
peer defines relation protein name char 
shows keywords defined relations various peers 
suppose user peer knows schema schema peers issues query look kinases sequences longer base pairs select kinases length keyword kinases relation name protein protein keyword relation protein relations relations match query relation 
similarly find attributes length matching keywords 
note query may turned join query evaluated 
match relation name attributes 
ranked lower 
semantically note data interested kinases data 
important meta data additional information returned users fetching data 
peer names keywords kinases protein human key identifier id length length sequence protein sequence protein protein seqno number identifier len length sequence sequence protein kinases length id number identifier length protein sequence id number identifier sequence sequence protein protein kinases 
name name char characteristics features functions 
keywords relations attributes names 
agent assisted query processing peerdb adopt phase query processing strategy 
phase relation matching strategy applied locate potential relations 
relations returned query node purposes 
allows user select relevant relations 
minimize information overload data may syntactically having keywords semantically different 
minimize transmitting data useful user better utilize network bandwidth 
second allows node update statistics facilitate search process 
phase begins user selected desired relations 
phase queries directed nodes containing selected relations answers returned 
peerdb query processing completely assisted agents 
fact agents sent peers agent interacts dbms 
query may rewritten form query single relation may rewritten join query involving multiple relations 
elaborate query processing strategy shall distinguish types queries local query remote query 
query local node initiated remote 
processing local query user issues query sql selection query master agent created oversee evaluation query 
operations performed agent phase agent parses query extract list relations attributes names 
relation matching strategy applied local dictionary 
promising relations returned user immediately 
time master agent clone relation matching agents dispatch neighbors node 
query agent carries information ip address node initiates query ttl time live 
needed allow remote nodes return answers directly query node 
indicates lifetime agent 
allows process cloning forwarding keep going agent lifetime expired 
master agent wait answers relations schema remote nodes 
receiving answers returned users selection 
peers return multiple relations return individual relations scores number matching keywords exceed threshold combinations relations related key relationship 
referring earlier example produce answers 
phase ii relation selected user master agent clone data retrieval agent 
relation 
tasks agent reformulate query matches relation name attributes target node 
clearly possible attributes may dropped target relation matching attributes 
combination relations data retrieval agent rewrite query join query involving combination relations 
target relations locally worker agent submit reformulated sql query dbms retrieve data 
data returned agent formulated output returned user 
target relations remote node worker agent dispatched query node ip address 
answers returned directly remote host master agent formulate return answers user 
note phases logical 
fact soon relations returned shown user user start selecting relations soon relation combination relations selected agent sent retrieve data 
way answers returned progressively long waiting time 
users viewing answers data may agents searching peerdb network candidate relations 
processing remote query mentioned essentially remote query agent arrives node 
phase relation matching agent agent visited node previously ttl value reduced 
agent search export dictionary 
promising relations returned query node ip address provided agent 
ttl agent clone relation matching agents dispatch neighbors current node agent dropped 
phase ii data retrieval agent agent formulate sql query submit dbms 
answers retrieved returned query node directly 
retrieved data need processed returned agent perform task code carries return summarized data 
agent may dropped 
monitoring statistics tasks master agent perform reconfiguration network reconfiguration policy selected user 
master agent monitors types statistics 
relation information obtained phase query processing strategy 
particular keywords selected relations may exchanged update meta data 
second number answer objects obtained selected relations 
determine nodes connected directly 
peerdb extended temporal locality reconfiguration policy favors nodes provided answers 
uses notion stack distance measure temporal locality 
idea works follow 
consider stack stores peers return results 
peer returns answers move peer top stack push existing peers 
temporal locality peer determined depth stack 
top peers stack retained directly connected peers system parameter set node 
cache management peerdb supports caching answers returned remote nodes order reduce response time subsequent answers 
relation user retrieved phase ii query processing strategy cache answers 
caching raises 
peerdb interface 
complicated issues 
looked 
cached copy may outdated 
handle peerdb keeps answers fixed period time cache invalidated 
second storage space limited adopt lru replacement policy run disk space replace cache 
environment peerdb nodes may caching data 
search may give rise multiple copies data 
semantic issue left user attempt minimize effort follows 
cached relation maintain information source node recall node unique identifier provided technology 
node source relation response search include source node 
relations keywords source node pruned away phase query processing 
performance study implemented peerdb software features discussed previous sections 
node installs peerdb software registers predetermined set servers participate peerdb network 
shows peerdb interface window shows query interface window displays results matching schemas window displays answer tuples selected relation 
section report extensive performance study conducted evaluate peerdb 
study peerdb aspects 
studies relation matching strategy second looks performance peerdb 
relation matching strategy section experimental results peerdb search matching relations environment global schema 
generated large number relations follows 
created set semantically equivalent categories category keywords assumed represent semantic meaning keywords refer meaning 
created set relations relation assigned keywords users expected enter keywords selected randomly arbitrary category picked relation number attributes attribute assigned keywords picked randomly assigned category query form experiment 
select attribute relation attribute value attribute value standard precision recall measures performance metrics 
precision measures purity search results search avoids returning results relevant recall refers completeness retrieval relevant items 
consider relation relevant query keywords relation names match 
study set 
set forms basis computation precision recall 
relation examined compute matching score 
varied threshold value 
results returned compute precision recall 
results shown table 
threshold precision recall table 
precision recall varying threshold values 
shown table threshold value large precision high relevant relations identified 
fact experiment precision threshold 
recall low large number irrelevant relations share common keywords 
results consistent typical ir search results showing proposed strategy effective 
peerdb performance evaluate peerdb performance conducted different sets experiments 
compare peerdb client server cs architecture 
basic difference models model interacting processes client server cs model process assumes role service provider assumes role service consumer 
cs model flavors node client server 
cs model server return result client results returned query path 
study versions peerdb static peerdb reconfigurable feature turned dynamic peerdb reconfiguration feature turned 
compare schemes cs architecture 
allows see benefits reconfiguration scheme 
shall denote schemes pdms respectively 
compare peerdb pure message passing protocol agent protocol 
objective experiment show cost effect agents peerdb 
look experiments findings shall propose evaluation methodology systems 
evaluation methodology system evaluated efficiency effectiveness 
deals performance issue deals quality answers 
existing distributed systems clear criteria systems evaluated 
internet search engine answers queries depend peers searched may include peer network 
addition query may involve different peers peers change time 
purpose evaluation controlled environment necessary 
propose scenarios evaluated 
different schemes evaluated fixed set nodes 
useful set nodes exploit technology facilitate collaboration essentially traditional distributed environment nodes participate answering query 
study different protocols reconfiguration strategies perform 
second network rate answers returned important 
users idea peers providing answers queries peers searched 
long initial waiting time acceptable users 
third quality quantity answers returned important measures 
node may return answers quickly may return answers answers relevant query 
quality semantics query quantity answers easy obtain performance metrics 
experimental setup experimental environment consists pcs intel pentium mhz processor ram pcs running operating system 
physical network layout shown 

experimental environment 
total objects kb 
data randomly assigned nodes node holds objects 
practice expect users interested part entire datasets 
data interests accessed 
example case napster classical music shared user prefers contemporary music may just dislike totally 
experiments try model dividing queries user follows queries directed hot data entire dataset 
hot data frequently accessed users queries directed cold data 
model case individual user may taste cold data 
remaining queries completion time ms peerdb cs storage ratio 
effect storage capacity 
directed remaining cold data 
default set 
data hot cold 
experiments conducted machines network fully dedicated 
node fill local storage start collect results experiments 
results correspond average different executions 
variance different executions significant 
effect storage capacity caching set experiments compare peerdb cs architecture varying storage capacity peer 
define storage ratio size storage size node size objects stored central server 
shows effect storage ratio response time 
observe storage ratio increases methods response time decreases 
expected objects local neighboring peers 
clearly illustrates benefits sharing storage resources 
second note peerdb outperforms cs model 
expected cs model requires answers returned search path 
peerdb vs cs experiment evaluate performance pdms cs rate answers returned 
number nodes fixed completion time ms pdms cs number peers completed 
rate returning answers 

search query issued times average time nodes respond noted 
shows results experiment 
point indicates nodes responded time units 
note possible different schemes different nodes respond different time different answers 
shall defer discussion experiment 
shown best scheme outperforming pdms virtue ability reconfigure network 
able reach promising nodes directly query reconfigure query directed promising nodes 
note nodes cs returns answers slower pdms returns answers path query transmitted 
having fast initial response time 
possible nodes return answers provide answers 
earlier experiments study initial response time keep track number answers provided node 
shows plot result 
shown clear cs returns answers faster pdms 
expected directly connected nodes receive query return answers immediately 
pdms overhead code shipping strategy results longer initial response time performance 
answers returned pdms superior cs demonstrating superiority technologies traditional cs models 
note generally better pdms 
confirm effectiveness pdms cs 
time pdms received answers cs returned answers 
observed earlier generate answers quickly virtue ability keep relevant peers closer 
benefits agent querying experiment study gained agent assisted query processing strategy 
assume query requires functions supported dbms 
operation pushed dbms 
data retrieved operation performed data answers query obtained 
experiment show cost effect pure message passing protocol agent protocol environment 
assume query requires remote access 
process divided phases sending message message passing protocol agent agentbased protocol remote host remote host processes request remote host returns result originator 
answer size set data set 
difference message agent protocol protocol data shipping strategy remote data transferred query node processed 
hand agent protocol code shipping strategy carries processing code remote site performs remote execution 
answers produced agent returned 
total response time including cost data transfer message code data processing time 
observe completion time message protocol increases exponentially data size increased 
overhead data shipping results longer response time performance 
result number data transferred network increases mobile agent protocol superior 
network applications client server require communication node order complete transaction 
experiment looked messages overhead pure protocol vs agent protocol 
experiment multiple remote executions required order answer query essentially query requests multiple objects remote site query knows object retrieve time obtain answers ms pdms cs number answers search query 
answers returned 
earlier requests completed 
chain queries computations 
test object requested cause mb data transfer network 
completion time ms message protocol agent protocol data size mb 
completion time vs data size result multiple communication transaction shown 
clearly agent approach superior 
message passing protocol query transmitted data returned node processed node 
done subsequent operations issued 
hand mobile agent approach operations performed remote node code transmitted 
agent constructed remote site thy interact 
number answers returned 
bytes transfered mb message protocol agent protocol number query 
communication overhead 
remote node directly final result obtained 
optimizes network resources bandwidth 
related works agent systems studied literature 
technologies provide support agent collaboration communication lack support peer peer technology 
development applications platforms require longer development effort costly 
mentioned technologies deployed applications 
systems provide coarse granularity sharing capabilities dbms 
addition easily extended meet users changing needs 
network statically defined lack support multi granularity data access 
database community begun exploit technologies database applications 
data placement issues addressed 
class hybrid systems functionality centralized studied 
particular analytical model describe system performance developed validated actual hybrid systems 
different architectures chained architecture full replication architecture hash architecture architecture compared 
caching olap queries addressed context network 
halevy address issue schema mediation proposes language mediating peer schemas 
distributed data sharing system called peerdb 
peerdb nice features 
employs data management system 
facilitates data sharing predetermined shared schema 
second query processing capabilities assisted mobile agents provides easy extensibility existing systems 
third provides mechanism reconfigure node peers optimization criterion 
extensive experimental studies show peerdb promising system distributed processing 
plan extend directions 
plan node intelligent allowing determine runtime strategy adopt code shipping 
second focused looking similar schema 
keyword search engine relational databases developed 
plan see features integrated facilitate keyword search peerdb 
wee ng lee tan partially supported moe research rp 
members project li ming zhang contributions peerdb implementation 

comp nus edu sg 
mysql home page 
www mysql com 
agrawal chaudhuri das 
system keyword search relational databases 
proceedings th international conference data engineering san jose ca april 
baeza yates ribeiro neto 
modern information retrieval 
acm press addison wesley 
castillo wong 
concordia enabling technology cooperative information gathering 
proceedings th annual hawaii international conference system sciences hicss 
dingledine molnar freedman 
free haven project distributed anonymous storage service 
proceedings workshop design issues anonymity unobservability 
freenet home page 
freenet sourceforge com 
gnutella development home page 
gnutella wego com 
gribble halevy ives suciu 
databases peer peer 
webdb 
halevy ives suciu tatarinov 
schema mediation peer data management systems 
proceedings th international conference data engineering bangalore india march 
icq home page 
www icq com 
ng ooi papadias tan 
adaptive peer peer network distributed caching olap results 
acm sigmod pages madison wisconsin usa 
lange oshima 
security model aglets 
ieee internet computing 
tripathi 
agent server architecture ajanta agent systems 
international conference parallel distributed processing techniques applications 
lockss home page 
lockss stanford edu 
mitsubishi electric 
concordia infrastructure collaborating mobile agents 
proceedings st international workshop mobile agents ma april 
napster home page 
www napster com 
ng ooi tan 
peer peer system 
proceedings th international conference data engineering page san jose ca april poster 
oram editor 
peer peer harnessing power disruptive technologies 
reilly associates 
seti home home page 
ssl edu 
waldman publius 
robust censorship resistant web publishing system 
proceedings th usenix security symposium pages 
yang garcia molina 
comparing hybrid peer peer systems 
vldb 
