consideration publication functional programming funct pearl embedded interpreters nick benton microsoft research thomson avenue cambridge cb fb united kingdom mail nick microsoft com describe technique embedding interpreters statically typed functional programs higher order values interpreting language may embedded interpreted language values interpreted language may projected back interpreting 
idea introduced sml code command line interface tactical theorem prover applet extended languages recursive types applied elementary meta programming 
show method combines filinski continuation monadic reflection operations define extensional version call value monadic translation allow values mapped bidirectionally levels interpreter functional language parameterized arbitrary monad 
show sml functions may embedded projected interpreter asynchronous pi calculus extensional variant standard translation lambda pi 
programs incorporate little languages parse interpret typically provide top level interactive loop scripting interface 
nearly introductions functional programming include parser combinator library evaluator lambda expressions reasonably think remains said embed interpreter application specific little language functional program 
interpreters literature keep values types interpreting interpreted languages quite separate 
typically hardwired order primitives arithmetic io implemented terms counterparts interpreting meta language assumption interpreted programs essentially entirely written interpreted object language 
interpreter domain specific language usually rich collection application specific datatypes higher type values written interpreting language purpose little language allow user glue complex things flexibly runtime 
needs way lift arbitrary benton values metalanguage application written domainspecific object language particularly challenging metalanguage strong static types 
problem addressed 
solution combines known advanced functional programming techniques novel way 
real example interface theorem prover applet interpreted language particularly simple 
hal applet hal tactical theorem prover order logic written paulson 
examples mlj benton compiled hal applet runs java enabled web browser 
ml programs hal include code providing interactive user interface intended top level read eval print loop interactive ml system 
course just ml originally intended meta language theorem provers 
mlj interactive top level loop case little excessive download complete ml environment browser just provide interface program lines 
add simple user interface code hal 
di culty java applets get simple scrolling green screen text interface default 
solved problem downloading third party terminal emulator written java linking ml code mlj interlanguage working extensions 
interesting issue design implement little command language user prove theorems 
give flavour problem trivial interactive session hal goal initial goal 
empty impr implication right 
st subgoal conjunction right 
st subgoal 
gives subgoals repeat basic repeat conj right axiom finishes subgoals left 
proof hal code pretty prints output imperatively just deal processing user input 
examining session admittedly number people want interactive theorem proving probably quite small thought nice demo 
functional pearl simple combinatory calculus involving strings integers rich collection built identifiers appear infix 
extracts signatures top level structures hal signature rule sig type state type tactic state state val basic int tactic val int tactic val int tactic signature command sig val goal string unit val rule tactic unit signature tactical sig type val val repeat rule state type proof states 
type constructor potentially infinite lazy streams 
paulson parser combinators hal parse logical formul takes lines implement parser val read string exp take user input example session elements ast datatype datatype exp eid string identifiers ei int integer consts es string string consts exp exp application ep exp exp pairs problem embed ml values hal basic vocabulary interpreter elements exp datatype 
embedding values interpreter types hal commands built int string tactic unit products function spaces 
interpret expressions type exp elements universal ml datatype modelling untyped lambda calculus pairing built benton datatype uf ui int string ut tactic novel observation meta circular interpreter reynolds uses functions interpret functions allows link interpreted language interpreting language particularly neat way 
trick define type indexed family pairs functions embed ml values type project values type back ml values 
relevant part signature signature embeddings sig type ep val embed ep val project ep val unit unit ep val int int ep val string string ep val tactic tactic ep val ep ep ep val ep ep ep matching part corresponding structure structure embeddings embeddings struct type ep fun embed fun project fun cross fun arrow fun pf uf fun pp similar definitions pi ps pu pt infixr infix val unit pu val int ui pi val string ps val tactic ut pt fun cross cross pp fun uf arrow arrow pf functional pearl ml type ep value pair embedding type projection type interesting part definitions combinators embedding projection pairs case function spaces function turn function projection embedding embeddings projections defined simultaneously 
resulting function element applying uf constructor 
projecting appropriate element function type reverse strip uf constructor embedding projection note projection functions partial raise match exception argument wrong summand universal type ml type built chosen base types products function spaces embedding followed projection identity 
going way projection embedding generally yields undefined raising match exceptions value started 
embedding projection pairs map values top level structures hal datatype resulting values paired names top level environment accessed interpreter val rules map cross embed int tactic basic rule basic rule 
val goal embed string unit command goal embed tactic unit command val tacs embed tactic tactic tactic tactical repeat embed tactic tactic tactical repeat 
val builtins rules tacs interpreter takes user expression type exp evaluates value type just denotational semantics fun interpret case ei ui es eid lookup builtins ep interpret interpret val uf interpret val interpret evaluating expression exceptions caught omit error handling reasons space clarity 
replaced exception throwing nontermination embed project equal identity conventional domain theoretic sense 
benton interpret read goal set initial prover state whilst interpret read impr takes proof step 
hal applet top level loop just repeatedly read line console parse yield exp call interpret print result hal commands change print proof state imperatively stage strictly necessary 
applet identical hal interactive ml system type errors result runtime exceptions caught statically 
extensions applications assume object language extended lambda abstraction val bindings recursive fun function bindings conditionals infix operators 
revised syntax datatype looks datatype exp 
string exp exp eif exp exp exp string exp string string exp exp show revised interpreter 
essentially standard reader notice interpreter written staged style expression static environment string list returning function input matching dynamic environment list returning value 
kind binding time separation known partial evaluation community jones somewhat 
compared nave interpreter single environment type string list string staged version informative cient syntax tree traversed yield amounts form threaded interpreted code 
projection quoting embedding projection pairs allow considerably just run enduser commands manipulate values application part top level loop 
able project embed means object level expressions may interpreted projected back ml values subsequent computation 
simplest means val read fn val succ project int int succ val int really turn worthwhile 
example sml nj calculating fib explicitly defined combinator times faster separated environments association list environments staging 
functional pearl type string list type list fun name names name names val interpret exp fun interpret static case ei ui eid val static fn dynamic list nth dynamic handle match val lib lookup builtins lib val interpret static val interpret static fn dynamic val uf dynamic val dynamic val interpret static val interpret static fun dynamic uf dynamic dynamic fn dynamic uf dynamic dynamic clauses elided fun interpret fig 

interpreter separated environments extract projecting fixed expression object language metalanguage rarely useful 
interesting cases object language expression constructed read run time 
case hal applet expressions typed user commands values return interest 
need map values users object language expressions back metalanguage 
example case simple embedded query language process queries function val query string record list record list mapping query string list records list records matching query implementation fun query qs records val pred project record bool read qs filter pred records benton projection provide simple form metaprogramming run time code generation 
ml code constructs object level expressions directly manipulating strings elements exp datatype ugly convenient quote mechanism provided sml nj moscow ml 
allows write parser call object language ml values may spliced operator 
standard example metaprogramming version power function pow computes building specialised function pow recursion symbolically unrolled pow essentially fn event wished raise di erent numbers exponent reusing specialised function cient calling general version times 
quote write staged power function style looks superficially metaml taha sheard local fun mult mult mult fun pow project int int fn mult val pow fn int int int val pow val fn int int val int val int unsurprisingly significantly faster calling interpreted function arguments overheads interpreter nontrivial faster call directly compiled ml version unspecialized function 
function mult type exp int exp ml values splicing parse bits syntax 
obtain useful fusing parser interpreter produce new parser constructs semantic objects type constructing intermediate syntax trees 
main advantage apart eliminating datatype calls interpret antiquotation splice ml values type particular ones obtained embed directly object language expressions having give names add environment fun ty val ev embed ty fn static fn dynamic ev functional pearl fun twice val fn int int int int twice fn val fn val hp project int int val hp fn int int hp val int readers interest metaprogramming may wish consider extending interpreter allow sophisticated versions trick fun run interpret read run embed string run val run fn string run val run val ui embedding interpreter run object programs manipulate second higher level object programs 
polymorphism straightforward embed polymorphic ml functions interpreted language 
needs single instantiation type variables mapped fun fun fun val ep val combinators embed embed embed combinators appended top level environment builtins evaluating say interpret read yields ui just hope 
values type represent polymorphic functions simply projected ml values polymorphic generalisable ml types sense isn way extending definitions project embed benton polymorphic type 
project value multiple monomorphic ml types val ei embed project int int ei project string string ei explicitly simulate type abstraction application ml value abstraction application val ek embed val pk fn fn project ek pk int string pk string unit furthermore quite free project expressions object language typed ml values 
example amusing way calculating factorials val read fn fn fn fn fn val fn fn project val int int fn fn val int written untyped cbv fixpoint combinator interpreted language projected polymorphic ml type applied values interpreting language 
embedding datatypes fairly natural way embed arbitrary metalanguage datatypes lists trees object language 
ignore straightforward messy plumbing involved trying add pattern matching syntax just extend type constructor tagging sum types datatype 
ut int define combinators sums recursive types val wrap ep ep val sum ep list ep val mu ep ep ep definitions functional pearl fun wrap decon con ep embed ep decon con project ep fun sum ss fun cases brs ut embed hd brs handle match cases tl brs fn cases ss fn ut project list nth ss fun mu fn embed mu fn project mu idea sum list partial embedding projection pairs specific constructor datatype 
embedding datatype value embeddings tried turn appropriate raise match 
yields appropriate embedding function integer tag 
projecting integer tag select appropriate projection function list 
wrap combinator strip replace actual datatype constructors whilst mu combinator construct fixpoints embedding projection pairs recursive types 
datatype definition form datatype 
associated embedding projection pair val mu fn sum wrap fn 
wrap fn embedding projection pair associated type embedding projection pair recursive occurences datatype nullary constructors treated type unit 
example combinators embed ml polymorphic lists fun list elem mu fn sum wrap fn fn unit wrap fn xs xs fn xs xs elem val list ep list ep appropriate bindings added builtins 
cons embed list list op nil embed list null embed list bool null 
embed project lists list manipulating functions read fun map null nil cons hd map tl map val uf fn project int int list int list int val fn int int int list int list benton fn val int list whilst kind embedding semantically elegant extremely ine cient 
problem multiple representations datatype values time cross boundary languages converted entirety representation 
embedded primitive operation involves representation changes example version map linear time complexity 
alternative approach keep values recursive types metalanguage representation 
done adding extra constructors universal datatype just tactic hal interpreter ml possible known trick extend new types dynamically 
briefly extensibility ml exceptions implement structure dynamic exports type dyn function type unit dyn dyn generates new pair functions embedding projecting values type type dyn 
extends type constructor ud dynamic dyn write example fun newtype val tod dynamic ud tod pd val intlist newtype int list ep embed project values types involve int list 
gains efficiency considerable cost losing ability deal datatypes polymorphically 
careful apply newtype twice ml type resulting embeddings type incompatible 
monads sight extend embeddings projections situation interpreter parameterised arbitrary monad values embed restricted ml types 
problem need extensional version monadic translation normally defined intensionally induction types terms 
monadic translations extensionally recall cbv monadic translation types moggi monad defined follows int int similarly base types pretty constant factor 
suggested lazy evaluation help doesn really embedded version hd example avoid converting entire tail list back forth coercions build way map function remains quadratic 
functional pearl associated translation terms access source code values wish translate compiled code metalanguage wonder family functions type ml type moment thought convince reader functions defined standard ml haskell 
amazingly provided restrict cbv metalanguage supports class continuations possible define extensional monadic translation express type dependency ml values 
key filinski deeply ingenious monadic reflection operations filinski filinski 
sketch filinski technique reasons space full account containing proofs sml nj code may thesis filinski 
semantically ml function type may understood mathematical function type tml tml monad capturing implicit ects ml computations 
ects include non termination exceptions io mutable storage case sml nj mlton class control 
filinski showed firstly control universal ect simulate monadic ect 
secondly showed may define reification reflection operations allowing move opaque implicit transparent explicit notion control 
thirdly showed implemented typed cbv language control ects global store sml nj 
putting pieces define functor takes arbitrary monad structure input returns reflected monad structure adds new operations original monad val reflect val reify unit allow move opaque transparent representations arbitrary ml definable monads 
define extensional cbv monadic translation combining filinski reflection reification functions earlier technique defining families functions representing type pair functions 
previously interpreted type pair embedding projection consider type int int int translation involves negative position 
formally monad retraction definable monad continuations monad 
benton universal type define translation represent type pair translation function function type pair parametric express type single parameter ep 
parameterize type variables shown result signature translation functor signature translation sig structure filinski reflected monad sig type tr type base tr val int int base val string string base val unit unit base val bool bool base val tr tr tr val tr tr tr val translate tr val tr matching functor looks elided declarations unchanged code appearing earlier functor translation translation struct structure val base val int base val string base val unit base val bool base fun cross cross fun fn fn reify fn functional pearl fn fn reflect fun translate fun example apply reflection translation functors structure defining monad integer valued state type int int obvious monad structure extra operations including fun accum int unit see extensional translation transcript fun done val int unit string val translate int unit string val int unit string accum val done int string get applying intensional cbv monadic translation syntax obtained extensionally compiled code 
embedding monadic interpreters combine embedding projection pairs extensional translation write interpreters parameterised arbitrary monad support embedding projection ml values 
fact approaches take 
firstly explicitly parameterize universal datatype interpreter code monad 
ml values lifted object language translating embedding 
alternative keep monad implicit code interpreter 
way leave signatures structures interpreter embedding projection pairs completely unchanged 
write new functor pairs embedding projection pair corresponding monadic translation pair yielding type indexed quads 
signature signature sig structure datatype datatype embeddings type tr benton type ep tr type quad ep tr type base quad val int int base val string string base val unit unit base val bool bool base val base val quad quad quad val quad quad quad val embed quad val project quad val quad whilst matching functor looks functor struct bits elided structure tr translation val int embeddings int tr int val string embeddings string tr string val unit embeddings unit tr unit val bool embeddings bool tr bool val embeddings fun ep tn ep tn embeddings ep ep tr tn tn fun ep tn ep tn embeddings ep ep tr tn tn fun embed ordinary embedding fun monadic embedding fun project reify fn embed ordinary ml value component quad functional pearl embed just interesting thing way embed monad specific extra operations associated notion computation added 
extra operations implemented ml values types image cbv translation embed new embedding function argument embeds result 
project back ml useful get transparent representation computation translated type 
project function combines reification translation projection 
delay evaluation computation projecting happen reification operation project takes function argument just value type see works practice consider case list monad gives kind finite non determinism interpreter 
special operators add choice values failing computation returns result 
ml definitions functions fun choose choose fun fail fail unit note types functions cbv translations unit respectively underlying types appear point view object language add builtins val builtins choose choose fail unit fail embed int int int int 
interpret non deterministic programs project results back ml project int interpret read val choose choose fail val int monadic embedded interpreter example embed implement query language application example xml query language due fernandez simeon wadler 
processes far considered embedding interpreters object languages essentially cbv calculi 
tractable foundational language quite di erent admits interpretation calculus calculus milner milner sangiorgi walker 
section show techniques allow connect ml interpreter calculus embedding ml value process benton obtained applying known cbv translation calculus suitably behaved processes may projected back ordinary ml values 
choice free asynchronous polyadic calculus simple expressive interpret functional computation 
fragment core pict language pierce turner 
note order calculus values may transmitted names primitive types translation functions interesting case higher order calculus processes may transmitted channels 
monadic translation interpretation functions processes usually induction terms target contexts distinctions terms extensionally equivalent classical theory 
presence class control metalanguage allows distinctions ml values key interpretation processes 
interpreter calculus writing nave interpreter calculus ml easy degree processes configurations behaviours treated explicit class functional values vary widely 
choose imperative implicit style leads concise code embedding ml values 
possible earlier monadic translation techniques embed project ml values interpreter written explicit denotational style 
signature calculus interpreter follows signature process sig type name datatype vi int vs string vb bool vu vn name type value list val new unit name val fork unit unit unit val send name value unit val receive name value type process val nil process val nu process process val par process process process val send value process val receive value process process val value process process functional pearl external interface processes val schedule process unit val sync unit unit val newname unit implementing polyadic calculus value list names integers strings booleans 
combinators nil nu par receive send correspond nil process restriction parallel composition input replicated input asynchronous output respectively 
single global queue runnable tasks processes added schedule 
sync command ml top level loop transfers control process scheduler returning process runnable 
chosen implement name generation global ecting name supply accessed newname 
possible implementation signature shown 
part structure fairly standard implementation coroutines asynchronous channels callcc throw wand reppy 
name channel represented pair mutable queues holds values sent channel holds continuations processes blocked reading channel queues nonempty new names generated new 
runnable threads represented unit accepting continuations held mutable queue 
values sent asynchronously send adds value message queue channel thread blocked reading enqueues continuation transfers control blocked thread passing sent value 
calls receive remove return value appropriate queue value available add continuation blocked queue call scheduler 
new threads created scheduled fork enqueues continuation runs child returns scheduler 
control transferred scheduler sync busy waits empty returning 
slightly calculus style combinators thin wrappers coroutine implementation 
construct run processes combinators directly convenient write parser interpreter palatable syntax pict val pp new ping new pong ping echo ping pong pong echo pong ping ping val pp exp schedule interpret pp builtins static builtins dynamic val unit sync benton structure process process struct open queue open cont type chan queue cont queue datatype vi int vs string vb bool vu vn name name name list chan type value list val unit cont queue fun new name fun scheduler throw dequeue fun send name sent blocked value isempty blocked enqueue sent value callcc fn enqueue throw dequeue blocked value fun receive name sent blocked isempty sent callcc fn enqueue blocked scheduler dequeue sent fun fork callcc fn enqueue scheduler fun sync length callcc fn enqueue scheduler sync type process unit unit fun newname vn new val schedule fork fun nil fun send vn ch send ch fun receive vn ch receive ch fun par fork fun vn ch receive vn ch fn par vn ch fun nu newname fig 

implementation continuation coroutines functional pearl 
parser interpreter just parts signatures 
observe order able observe process embedding pp free identifier echo bound name environment structure builtins 
defines process listening name printing strings receives 
give definition builtins explained embedding ml functions processes 
signature interpret sig type exp val read string exp simple parser val exp frag list exp quoted parser type string list type process list val interpret exp process process structure interpret interpret elided signature builtins sig val static interpret val dynamic interpret structure builtins builtins see 
functions processes back translations calculi calculi extensively studied start milner sangiorgi 
cbv translation typically basic idea translation computation process parameterized name location process encoding value sent 
abstraction translated process located particular name process repeatedly receives pairs values location argument second name location result sent 
application translated parallel composition benton processes evaluates function sends location second receives location evaluates argument sending value third process wires function argument receiving argument value location sending name final result sent function stressed example boudol sangiorgi walker encoding essentially cps translation 
interpretation processes continuations surprising implement encoding interpretation 
signature embeddings sig type ep val int int ep val string string ep val bool bool ep val unit unit ep val ep ep ep val ep ep ep val embed ep process val project ep process signature apparently simple essentially back section complexity hidden fact embeddings side ecting 
embedding ml function create schedule appropriate process returning channel may interact 
similarly projecting function takes name argument implicitly refers global process pool 
implementation encoding shown 
embeddings base values straightforward just return corresponding 
embeddings projections function product types defined terms coroutine primitives 
embedding function type takes value generates new name forks thread repeatedly receives argument result channel argument projected applied result embedded yielding possibly spawning new thread 
location result sent result channel rc 
projection function types takes channel fc interacting functional process yields function embeds argument spawning new thread case argument function generates new name rc result application sends location argument fc 
blocks receives reply rc returns projection reply 
embed pair embed components return address functional pearl structure embeddings embeddings struct open process type ep val int vi fn vi val string vs fn vs val bool vb fn vb val unit fn vu fn vu infix infixr fun ea pa eb pb fn val new fun action val ac vn rc receive val fork action val eb pa ac send rc fork action vn fn vn fc fn arg val ac ea arg val rc new val send fc ac vn rc val receive rc pb fun ea pa eb pb fn val pc new val ea val eb fun action val vn vn receive pc fork action send send fork action vn pc fn vn pc val new val new val send pc vn vn val receive val receive pa pb fun embed ea pa ea fun project ea pa pa fig 

extensional calculus translation benton new located process repeatedly receives channel names sends addresses embedded values 
projection creates new names sends pair process waits replies returns pair projections 
body builtins structure defined fun name typ value val bv embed typ value name bv val embs int int fn add int int int fn fn print string unit print int string int tostring twice int int int int fn fn 
val nil echo echo print val static map embs map val dynamic map embs map fn newname val map fn schedule interpret read static dynamic note definition echo process earlier entirely trivial asynchronous way wrapper sends message process embedding ml print function directs responses sent process simply discards 
simple example process embedded functions fun test val interpreter interpret exp read builtins static builtins dynamic schedule sync val test fn string unit test new new twice echo process essentially translation print int tostring twice compute right answer 
reader notice applied tail call optimization asked send result directly echo 
interesting examples involve processes interact embedded ml functional pearl functions non sequential non functional ways 
example embed function fun type int unit int unit test new new new applied yielding process located sequentially print integers define functional process accepts integer indicates completion immediately spawns call functional process located call process located arguments 
outcome print integers streams produced parallel 
example projection fun name val newname val interpreter interpret exp read name builtins static builtins dynamic schedule val fn string string val ctr project unit int new val ctr fn unit int ctr val int ctr val int ctr val int defined calculus process implementing counter projected stateful ml function type unit int 
interesting variant counter processes listening channel composed parallel val project unit int new new val fn unit int val int benton val int val int val int call nondeterministically picks counters advance 
course calculate factorials projecting calculus version fixpoint combinator ml val project int int int int int int new new val fn int int int int int int fn fn val int discussion related type directed constructions embedding projection pairs arisen contexts including normalisation evaluation nbe type directed partial evaluation danvy danvy yang printf string formatting danvy combinators kennedy generic programming 
similarities nbe striking 
fact nbe apply types interested imagine solving original problem dual manner nbe produce object level expressions corresponding compiled metalanguage values simply interpreting user program 
filinski monadic reflection techniques extending nbe languages sums side ects danvy 
observation monadic reflection define extensional variant moggi cbv translation original filinski independently published technique define extensional cps translation 
treatment recursive types analogue nbe literature kennedy combinators essentially technique 
working haskell sml type class mechanism powerful deal generic requirements interpreter 
simply define type class ep specifying types embedding projection functions declare firstly base types instances class giving specific embeddings projections secondly class ep course monadic calculus embeddings implemented haskell rely class control 
functional pearl giving appropriate constructions embeddings projections 
just write embed embed course polymorphic values need explicitly constrained resolve ambiguity 
rose applied just technique implementation haskell 
staged computation active research area taha sheard leone lee 
metaprogramming facilities interpreter really comparable compilers proper staged languages untyped object programs real compilation object programs 
certainly interesting see far get simple minded approach opportunities little simple minded example combining techniques phantom types exploiting fact semantic version quotation allows embedded metalanguage expressions access object level environment 
calculus embedding novel certainly didactic value believe may prove useful practice 
translation functions processes just need expose higher order functions web services world wide web consortium example 
pointed implementation cooperative sml nj hard asynchronous signal operating system timer implement genuinely preemptive scheduling reppy 
course ample scope formulating attempting prove correctness results constructions 
andrew kennedy simon peyton jones icfp referee helpful comments earlier drafts 
benton kennedy russell sept 
compiling standard ml java bytecodes 
proceedings rd acm sigplan conference functional programming 
boudol 

pi calculus direct style 
pages acm symposium principles programming languages 
danvy 

type directed partial evaluation 
proceedings rd acm sigplan sigact symposium principles programming languages 
acm 
danvy 

functional unparsing 
journal functional programming 
danvy 

simple solution type specialization extended 
pages larsen winskel eds proceedings th international colloquium automata languages programming 
lecture notes computer science vol 

springer verlag 
fernandez simeon wadler 

semistructured monad semistructured data 
van den bussche vianu 
eds proceedings th international conference database theory 
lecture notes computer science vol 

springerverlag 
filinski 

controlling ects 
tech 
rept 
cmu cs 
carnegie mellon university 
filinski 

representing layered monads 
pages proceedings benton th acm sigplan sigact symposium principles programming languages 
acm 
filinski jan 
extensional cps transform preliminary report 
sabry 
ed proceedings rd acm sigplan workshop continuations 
technical report computer science department indiana university 
mogensen thiemann 
eds 

proceedings diku international partial evaluation 
lecture notes computer science vol 

springer verlag 
jones gomard sestoft 

partial evaluation automatic program generation 
prentice hall international 
kennedy 

combinators 
appear journal functional programming 
leone lee 

optimising ml run time code generation 
proceedings acm sigplan conference programming language design implementation 
acm 
milner 

functions processes 
mathematical structures computer science 
milner 

communicating mobile systems pi calculus 
cambridge university press 
milner parrow walker 

calculus mobile processes ii 
information computation 
moggi 

notions computation monads 
information computation 
paulson 

ml working programmer 
cambridge university press 
pierce turner 

pict programming language 
plotkin stirling tofte 
eds proof language interaction essays honour robin milner 
mit press 
reppy 

concurrent programming ml 
cambridge university press 
reynolds 

definitional interpreters higher order programming languages 
higher order symbolic computation 
aug 
foundation embedded languages 
tech 
rept 
rs 
brics 
rose 

type directed partial evaluation haskell 
danvy dybjer 
eds preliminary proceedings workshop normalization evaluation 
brics notes nos 
ns 
sangiorgi 

lazy lambda calculus concurrency scenario 
ieee symposium logic computer science 
ieee 
sangiorgi walker 

pi calculus theory mobile processes 
cambridge university press 
taha sheard 

metaml multi stage programming explicit annotations 
theoretical computer science 
wand 

continuation multiprocessing 
proceedings acm conference lisp functional programming 

world wide web consortium 

web services activity 
www org ws 
yang sept 
encoding types ml languages 
proceedings rd acm sigplan conference functional programming 
