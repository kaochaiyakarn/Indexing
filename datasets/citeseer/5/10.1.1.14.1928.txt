robust declassification steve zdancewic andrew myers cornell university computer science department upson hall ithaca ny cs cornell edu revised june security properties information flow noninterference provide strong guarantees confidentiality maintained 
programs need leak amount confidential information order serve intended purpose violate noninterference 
real systems control information flow include mechanisms downgrading information declassification easily result unexpected release confidential information 
introduces formal model information flow systems include intentional information leaks shows characterize information leaks 
define notion robustness systems include information leaks introduced declassification 
robust systems property attacker unable exploit declassification channels obtain confidential information intended released 
show systems satisfying noninterference property robust systems robustness involves nontrivial interaction confidentiality integrity properties 
expect model provide new tools characterization information flow properties presence intentional information leaks 
information flow control time offered promise higher level approach maintaining con research supported darpa contract monitored usaf rome laboratory 
government authorized reproduce distribute reprints government purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsement expressed implied defense advanced research projects agency darpa air force research laboratory government 
integrity data 
policies flow information noninterference advantage access control policies conveniently express precise system wide restrictions flow sensitive data 
information flow controls partially successful 
enforcement mechanisms overly restrictive preventing useful systems built 
greater difficulty real systems leak amount confidential information intention 
example program checks passwords leaks small amount information information theoretic sense actual passwords queried incorrect password 
accommodate programs leak information design information flow controls include notion information downgrading sensitivity labels data 
declassification may violate information flow policies invocation limited appropriately trusted subjects 
difficulty addition declassification mechanism deciding declassification appropriate 
channel added system sensitivity labels downgraded potential channel abused release sensitive information intended 
example consider subroutine checks passwords 
user access subroutine allows user password modified freely pair routines sensitive data bit time follows 
sensitive boolean value encoded password user assigns value checking user password encodings 
declassification needed order reduce sensitivity labels password checker result function intended exploited leak information 
systems information flow control decentralized label model labels assigned subroutines prevent exploitation declassification 
underlying problem exists determine declassification exploited 
explore issue developing formal model identifying information leaked programs contain intentional information leaks various assumptions abilities possessed attackers attempting steal confidential data 
consider kinds attackers passive attackers able imperfectly observe state computational system evolves aspects system state observable 
system characterize information passive attackers may able learn observation 
second consider active attackers able observe behavior system modify 
formal model sufficiently general capture changes data program changes execution program 
active attackers interest wish build intrusion tolerant systems 
modeling active attackers formally determine confidentiality guarantees offered partially compromised system relate degree system intrusion bounds information leaked 
major contribution definition computational system robust respect active attacker 
system contains intentional flows confidential information system robust respect class active attackers attackers learn confidential information active attacks passive observation 
equivalently system robust intentional information leaks contains exploited active attack learn intended 
accordance intuition able prove system containing information leaks robust 
giving examples robust systems demonstrate robustness useful nontrivial property computational systems results interaction confidentiality integrity properties system 
rest structured follows 
section introduce formal model computational system 
define simple security property captures possibilistic information flow system formally describe passive attacker 
section illustrates system model password laundering example 
section model active attacker developed robust declassification defined interesting properties shown hold 
section conclude discussion related benefits models possible applications 
system model system consists set states transition relation 
range elements write 
pair relation 
assume relation 
reflexive 


systems set states write system 

trace system finite sequence 




trace write th state trace 
state notation trc set traces starting 
set traces denoted trc trc def trc set traces system completely determined relation 
previous state models computation write trace follows consider traces equal stuttering explicit equivalence exposition clearer 
extend sets traces 
sets traces contain traces modulo formally note identifying traces stutter equivalence compatible assumption relation 
reflexive extra null transitions 
eliminated trace 
trc trc 
notation mean stuttering equivalence sequences arbitrary set write stuttering equivalent 
views system view system equivalence relation 
equivalence relation corresponds ability distinguish different states system distinctions relation information known views correspond security domains clearance levels describe portion state accessible observer 
example consider set states consisting pairs hh li ranges high security data ranges low security data 
observer low security access permitted see component see states dawn attack different unable distinguish states dawn attack 
respect view dawn attack dawn attack universal relation write 
relates state state 
corresponds having knowledge state system 
conversely identity relation corresponds perfect information state system states distinguished 
view write equivalence class state respect 
set views system 
set forms complete lattice equivalence relation equivalence relation written sets 
ordering top lattice 
bottom element 
lattice join operation intersecting relations meet operation transitive closure union relations 
write higher elements lattice represent information state system lower elements represent information 
elements may incomparable general distributive 
see landauer redmond detailed description lattice relation unwinding conditions noninterference 
security property sp ordering yields way comparing information declassified system relative initial information system 
view relation describes passive attacker principal able observe system deduce information state 
systems preserve view said satisfy security predicate sp intuitively system satisfies sp observer information learn watching system run 
formalize intuition 
trace trc view written simply sequence equivalence classes states len intuition passive attacker able distinguish states see trace generated system sequence equivalence classes 
observation system respect starting state view written obs obs def trc obs set possible sequences equivalence classes observed watching system starts state 
function maps obs induces equivalence relation written 
relation thought information learned watching view states equivalent possible traces leading states indistinguishable 
say system induces observational equivalence respect define obs obs characterize security predicate sp terms information lattice simply requiring induced observational equivalence corresponds information originally known 
definition secure system system secure respect passive attacker equivalent states observationally equivalent 
formally 
satisfies property write sp predicate tries capture idea possibilistic information flow observer view 
equivalent states generate equivalent observations system run 
unfolding definition sp yields equivalent statement sp obs obs terms traces system sp trc trc observations security predicate interaction notion view 
note observer gain information watching system run information lost destroyed watching system 
proposition system view case 
consequence monotonicity property sp holds views states coincide observations 
note system sp 
sp hold different reasons 
case interesting observations system consequently channels information flow 
case observer complete information system state learn watching run 
statement may somewhat surprising observer may learn nondeterministic choices particular trace system 
model information flow interesting information initial state system unknown passive attacker actual transitions uninteresting 
transition relation 
known observer 
chosen model simple fairly general suffices describe ideas robust declassification 
comparison event state event models take dual position transitions system interest correspond augmenting relation 
include labels events observed outside system 
extent difference state systems labeled transition systems matter modeling approach simulate appropriate encodings 
example state keep track event label transition entire history computation 
state approaches advocated past definition security differs traditional noninterference purge functions 
combination states modulo equivalence traces yields essentially result 
equivalence relations states appear formulations guise unwinding relations closely related notion simulation relations 
difference unwinding relations views starting event system trying find consistent unwinding relation means establishing security property start view system determine view altered information leaks inherent system 
intend definitions attack robust declassification developed follows applicable richer system models leave generalization 
terminology mantel assembly kit high security events transitions set 
adaptable 
multilevel security confidentiality integrity far definition information flow security motivated point view protecting confidentiality data respect view system 
system multilevel confidentiality concerns take lattice security domains lc assume lattice homomorphism lvl lc 
homomorphism maps domain lc corresponding view relation 
note require map lvl 
homomorphism lc contain top bottom security sent omniscient null views system respectively 
write lvl lc image lc lvl definition sp indicate computation depends low integrity data 
may specify integrity constraints system simply giving lattice integrity levels corresponding equivalence relations integrity relations treated formalism way confidentiality relations meaning different 
confidentiality equivalence says states equivalent observer point view integrity equivalence says states equivalent point view user relies state 
states equivalent differences unimportant 
system satisfies security property sp important aspects behavior unaffected unimportant differences states 
confidentiality integrity expressed terms observational equivalence security property enforces 
example lattice structure reason multilevel security system consider problem trying determine principal information leaked system 
assume system occur principal authority 
clearly top level clearance knows system leaked information 
interesting question ask lowest security domain authorized declassification 
possible assign responsibility declassification security lc construct set security domains available information information represented explain observed behavior obs 
set join represents sum information available security domain information known viewer system 
join higher principal view access information cause apparent declassification 
lattice lc distributive pinpoint security domain responsible declassification simply greatest lower bound members dg 
distributivity guaranteed element 
smallest level information sufficient explain view system 
lc distributive minimal elements declassified information sufficient cause evident information flow 
example illustrate model consider example attack discussed password system confidential information 
model scenario assume state system consists tuple ht ri 
component time indicates password checker run indicates password checker completed 
realistic examples simple notion time replaced program counter computer suffices discussion 
component bit representing high security data leaked external users system 
simplicity assume user password database value bit component external user submits query compared password checker 
match password checker toggles value boolean stores result query 
password checker leaves value unchanged 
execution password checker transition relation ht ri 
ht ri 
toggle 
toggle 
leave 
leave external user system able directly see value query submitted password checker result password checker returns password checker completed computation time passed 
leads equivalence relation ht ri ht password checking system just described 
external user system learn information password matches query submitted watching system run 
system induces observational equivalence strictly higher information lattice ht ri ht suppose owner password alters value high security data password checker run 
assumed high security data password represented bits simplest variant attack copy high security data password 
attack corresponds adding transitions system ri 
ri expected observational equivalence induced attacked system induced original system ht ri ht stating equivalence relations way easy see external observer possibly learn value watching system run 
external observer distinguish states run system just related 
negating right hand side equivalence yields says external observer see time passed changes changes information leaked 
example shows equivalence relations induced system may quite complex 
note attack just described doesn leak information copying password doesn lead new behavior system respect observations view 
savvy attacker subscript indicate transitions introduced attacker 
setting possible values information leaked values possible 
reason implies general true 
kind reasoning simplify description equivalence relations 
toggle copied indicating fact contain smarter attack adds transitions 

equivalence relation induced ht ri ht reading negation see attacker distinguish states possible observer learn complete information initial state system 
clearly simple password system secure respect attacker ability alter piece high security data password communicate change done toggle 
hand attacker may toggle additional information leaked 
follows develop methodology characterizing systems terms robustness different kinds attacks 
robust declassification section examines declassification system specifies class attackers interesting information flow perspective defines robustness systems respect class attackers 
having defined information flow terms lattice information position consider declassification data 
starting point notion declassification system leaks information system satisfy sp thought containing 
passive attacker may able learn information observing system assumption information leakage allowed security policy 
define active attackers principals may alter system attempt learn secret information 
active attacks constitutes valid attack system 
model ways attack affect confidentiality properties system 
typical assumptions attacker information flow setting attacker limited observations system draw inference observations passive attacks 
common means specifying attackers require programs running concurrently system example process calculi csp spi calculus limited processes example restricted polynomial time probabilistic computation concern attacker able exploit information learned declassification simply fact declassification occurs cause system divulge information permitted security policy 
model attackers able change behavior executing system 
example system single computer program attacker overwrite memory locations registers machine 
section model changes attack transition relation 
performs change state 
power attacker captured simply attacker view attack secure respect definition attack attack system 
sp 
note requirement sp essentially fair environment assumption attacker know secret able learn means system question 
mean set attacks respect view attack system specified terms set states attack just union systems means composition justified possibilistic interpretation information flow attacker learn information possible trace new system distinguish state 
robust systems system attacker view system way characterize classes attacks drawn set 
characterization classifications robustness definition robust declassification system robust respect class attacks attacks 
case 
indicate robust way write says formally observing attacked system reveals information watching original system identifying interesting subsets attacks system immune better understand information flow properties 
conversely reasonably sure attacks system ones system robust believe system secure 
formalization attacks aren guaranteed attacks fall outside model 
hope prevent attacks system 
see results tools mapping landscape attacks information flow systems interaction declassification 
interesting lesson learn formalization systems secure respect robust attacks view 
intuitively running system reveals information attacker way attacker boost information system modifying behavior 
theorem sp 
proof attack 
definition attacker sp 
proposition definition sp follows sp sp 
lemma proof appendix follows sp obtain required 
result justifies extent sp strong notion security guarantee information flow properties system respect says susceptible attacks observer 
clearly sets attackers system robust 
example set attacks attack transition relation 
contained view 
system satisfy sp robust respect proof simple inductive argument 
particularly limited class attackers unable alter part state able observe particularly useful 
order formulate useful class attackers system robust describe relation information learned certain attackers security properties system secure respect construct iterated observation system thought view refining secure 
definition iterated observation def def def 
fixed point specified definition exists complete lattice proposition implies iterated observation forms ordered chain desired system secure respect iterated view proposition system view satisfy sp 
proposition states observational equivalence generated system operates monotonically equivalence relations 
proposition system 
give bound information leaked 
theorem system view 
attack sp 
proof proposition sp lemma follows sp 
consequently propositions show obtain required result transitivity theorem help understand behavior system attack 
described section security property capture confidentiality integrity aspects system 
equivalence relation thought describing maximal amount information learned watching system intuitively integrity proceedings version theorem claimed generalization theorem incorrect stated 
version weaker define class attacks robust 
property system 
states related sense unimportant behavior observed attacker 
attacks force unimportant states important providing transitions distinguish cause additional information leaked system 
theorem characterize attacks password checking facility described section 
easy show particular system 
follows attack satisfies sp cause system leak information 
attacker simply toggles time falls class changes string equal attack copies hand sends states ri ri states ri ri respectively 
pair states equivalent second 
theorem guarantee attack cause information leaked say attack lies outside system known robust 
bound information flow theorem tight possible construct systems attacks estimated information flow strictly actual information learned 
usefully bounds information flow variety systems 
determining precise bounds attackers learn goal 
discussion fair amount prior controlled declassification downgrading mechanisms formal characterization systems incorporating 
simplest standard approach declassification restrict uses performed trusted subject 
approach address question information channel created 
systems incorporated limited form declassification 
ferrari augment information flow controls object oriented system form dynamically checked declassification called 
myers liskov define form selective declassification checked compile time authority process 
efforts provide limited characterization safety declassification process 
intransitive noninterference policies generalize noninterference describe systems contain restricted downgrading mechanisms :10.1.1.113.425
controlled interference similar allowing specification policies information released set agents 
notion agent largely agrees notion passive attacker defined 
prior addresses issue active attacker 
results applicable specifying intransitive noninterference policies 
notion attack clearly connected refinement 
particular original system refines nondeterminism attacked system 
robust attack refinement preserves equivalences 
important direction consider attacks remove transitions effectively causing computation paths impossible 
number contributions problem systems containing intentional information leaks presumably arise controlled declassification 
purely state system model definition noninterference information flow property precisely characterize information released arbitrary observer passive attacker system described equivalence relation states system 
possible executions system defined nondeterministic transition relation generate refinement view equivalence relation 
difference equivalence relations captures information released observer 
lattice information elements views system powerful tool understanding information flow behavior system 
major contributions lie characterization information flow systems suffering intrusion active attacker able modify state executing system 
making reasonable assumption attacker construct attack depends exploitation information observe directly obtain expected property attacker violate confidentiality system obeys information flow security property 
importantly systems contain intentional information leaks obey security property give recipe bounding ability class attackers obtain information 
description direct powers observation attacker relation obtained defining level confidentiality maintained degree integrity violated active attacker order preserve confidentiality 
expect model provide new tools characterization information flow properties presence intentional information leaks system intrusion 
model state particularly applicable language approaches information flow control 
connections models intransitive noninterference deserve exploration 
abadi gordon 
calculus cryptographic protocols spi calculus 
information computation january 
abadi lamport 
composing specifications 
acm transactions programming languages systems october 
cohen young 
connection policies controlled interference 
proc 
th ieee computer security foundations workshop pages 
young 
state approach non interference 
proc 
th ieee computer security foundations workshop pages 
de nicola vaandrager 
logics branching simulation 
journal association computing machinery 
ferrari samarati bertino jajodia 
providing flexibility information flow control object oriented systems 
proc 
ieee symposium security privacy pages oakland ca usa may 
goguen meseguer 
security policies security models 
proc 
ieee symposium security privacy pages apr 
goguen meseguer 
unwinding inference control 
proc 
ieee symposium security privacy pages apr 
landauer redmond 
lattice information 
proc 
th ieee computer security foundations workshop pages 
ieee computer society press june 
lynch vaandrager 
forward backward simulations part untimed systems 
information computation september 
technical memo mit lcs tm minor revisions laboratory computer science massachusetts institute technology 
mantel 
possibilistic definitions security assembly kit 
proc 
th ieee computer security foundations workshop pages cambridge united kingdom 
mantel 
unwinding possibilistic security properties 
esorics volume lecture notes computer science pages 
springer verlag 
millen 
unwinding forward 
proc 
th ieee computer security foundations workshop pages 
myers 
jflow practical static information flow control 
proc 
th acm symp 
principles programming languages popl san antonio tx usa jan 
myers liskov 
complete safe information flow decentralized labels 
proc 
ieee symposium security privacy oakland ca usa may 
myers liskov 
protecting privacy decentralized label model 
acm transactions software engineering methodology 

absorbing covers intransitive noninterference 
proc 
ieee symposium security privacy 
roscoe goldsmith 
intransitive noninterference 
proc 
th ieee computer security foundations workshop 
rushby 
noninterference transitivity channel control security policies 
technical report sri 
ryan 
csp formulation non interference unwinding 
cipher pages 
schneider 
security properties csp 
proc 
ieee symposium security privacy 
lee 
general theory security properties secure composition 
proc 
ieee symposium security privacy oakland ca 
proofs lemma 

systems suppose equivalence relation sp sp sp proof states trace trc 
show exists trace trc proceed induction length case length may choose equivalent modulo starts transition 

form 

case satisfy sp may construct equivalent trace 


consisting transitions system inductively construct rest list starting states suffix starting exists trc stuttering equivalence preserved trace concatenation 


required 

