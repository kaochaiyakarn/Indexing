semantic overlay networks systems peer peer system nodes typically connect small set random nodes neighbors queries propagated connections 
query flooding tends expensive 
propose node connections influenced content example nodes having jazz files connect similar nodes 
semantically related nodes form semantic overlay network son 
queries routed appropriate sons increasing chances matching files quickly reducing search load nodes unrelated content 
evaluated sons actual snapshot music sharing clients 
results show sons significantly improve query performance time allowing users decide content put computers connect 

peer peer systems grown dramatically years 
offer potential low cost sharing information autonomy privacy 
query processing current systems inefficient scale 
inefficiency arises systems create random overlay network queries blindly forwarded node node 
alternative proposals rigid systems place content nodes hash functions making easier locate content :10.1.1.140.3129:10.1.1.105.3673
schemes provide performance point queries search key known exactly effective approximate range text queries 
furthermore general nodes may willing accept arbitrary content arbitrary connections 
propose semantic overlay networks sons flexible network organization improves query performance maintaining high degree node autonomy 
semantic overlay networks sons nodes semantically similar content clustered 
illustrate consider shows nodes connected solid lines 
sons nodes connect nodes semantically similar content 
example nodes rock songs establish connections 
similarly nodes arturo crespo hector garcia molina computer science department stanford university stanford ca usa rap rock jazz country semantic overlay networks rap songs cluster close 
note mandate connections done inside son 
instance rap son node required connect directly furthermore nodes belong son belongs rap rock sons 
addition simple partitioning illustrated explore content hierarchies example rock son subdivided soft rock hard rock son system queries processed identifying son sons better suited answer 
query sent node sons query forwarded members son 
way query rock songs go directly nodes rock content answers reducing time takes answer query 
important nodes outside rock son answers bothered query freeing resources improve performance queries 
note traditional db queries searches systems exhaustive 
user starts search song interested single instance song 
similar web search users satisfied small subset matches 
sons exploit characteristic trading maximum achievable level recall percentage matches performance system 
instance suppose node jazz songs 
may choose join jazz son choice reduce recall level jazz songs able find ones need send jazz queries node reducing number messages query processing load node substantial content hierarchies classification 
significant differences prior 
specifically structure node connections documents controlled collection 
addition techniques specifically tailored highly distributed environment prior art focused centralized systems 
related discussed section 
challenges building sons 
need able classify queries nodes contain rock songs means 
need decide level granularity classification just rock songs versus soft pop metal rock little granularity generate locality increase maintenance costs 
need decide node join son node just couple documents rock need place son node hundreds rock documents 
need choose sons answering query 
questions answered empirically studying real content organized sons 
empirical evaluation chosen music sharing systems 
systems interest biggest application deployed music semantics rich allow different classification hierarchies 
addition significant amount data available allows perform realistic evaluations 
study options building effective sons evaluate performance actual snapshot set music sharing clients 
main contributions introduce concept sons network organization efficiently process queries preserving high degree node autonomy 
analyze elements necessary building usage sons 
evaluate performance sons real user data find sons find results message overhead system random topology incur 
introduce layered sons implementation sons improves query performance expense marginal reduction maximum achievable recall level 

related idea placing data nodes close relevant queries originate early distributed database systems 
algorithms distributed databases fundamental assumptions applicable systems small number nodes designer total control data 
number research systems chord oceanstore pastry tapestry designed documents small number messages :10.1.1.111.1818:10.1.1.140.3129:10.1.1.115.4299:10.1.1.28.5987:10.1.1.105.3673
techniques mandate specific network structure assume total control location data 
techniques may appropriate application lack node autonomy prevented wide scale systems 
addition ability create groups peers system supported jxta framework 
jxta framework prescribe structure groups nodes join group search groups 
semantic overlay networks related concept online communities yahoo groups msn communities 
online community users common interest join specific groups share information files 
online community contain central element coordinates actions members group 
problem disseminate query system studied 
decision neighbors query forwarded done local indices routing indices simply sending query neighbors gnutella 
large corpus document clustering hierarchical systems see survey 
clustering algorithms assume documents part controlled collection located central database 
clustering algorithms decentralized environments studied context world wide web 
techniques depend crawling data centralized site clustering techniques web search results accurate sonia easier understand vivisimo 
decentralized approach taken edutella peers similar content connect super peer 

semantic overlay networks section formally introduce concept semantic overlay networks sons 
model system set nodes node ni maintains set documents di particular document may stored node 
denote set documents nodes 
node logically linked relatively small set nodes called neighbors turn linked nodes 
link triple ni nj ni nj connected nodes string 
call set links overlay network 
links bidirectional ni nj nj ni 
current system established single overlay network links 
needs case system multiple overlay networks 
case node connected set neighbors link potentially different set nodes link 
see carefully chosen sets overlay networks improve search performance 
focusing usage creation overlay networks queries routed overlay network see section brief overview current solutions intra overlay network routing problem 
ignore actual link structure overlay network represent overlay network just set nodes onl ni link ni nj 
addition assume overlay network onl supports functions join ni links form ni nj created nj onl search returns set nodes onl matches request leave ni drop links onl involving ni 
implementation functions join ni search leave ni vary system system 
additionally functions may implemented node network subset provided computer outside network 
example gnutella file sharing system join ni starts linking node ni set known nodes address pop music style jazz rock dance soft usually published web page 
ni learn learn additional nodes potentially link sending ping messages network nodes may reply ping message pong message contains identity 
function search gnutella works having node send request horizon counter ttl neighbors 
neighbors check matches returning identifier original requesting node matches 
nodes decrement horizon counter send request new counter neighbors 
process continues counter reaches zero request discarded 
leave ni implemented gnutella simply dropping links ni 
requests documents issuing query additional system dependent information horizon query 
query system dependent simple document identifier keywords complex sql query 
model match document query function returns match 
number hits query node ni number matches node ni 
similarly number hits overlay network onl ni ni 
denote probability match qi dj prob qi dj qi dj 
queries exhaustive partial 
case system return documents match query 
second case request includes minimum number results need returned 
classification hierarchies objective define set overlay networks way request select small number overlay networks nodes high number hits hits query exhaustive 
benefit strategy fold 
nodes request sent matches request answered faster second important nodes results query receive avoiding wasting resources request allowing requests processed faster 
propose classification hierarchy basis formation overlay networks 
classification hierarchy tree concepts 
show classification hierarchy music documents classified style rock jazz substyle soft dance 
document query classified leaf concepts hierarchy 
conceptually classification queries documents done functions respectively return leaf concepts hierarchy 
functions chosen substyle substyle new orleans classification hierarchy bop fusion 
practice classification procedures may imprecise may able determine exactly concept query document belongs 
case imprecise classification functions cq cd may return non leaf concepts meaning document query belongs descendant non leaf concept classifier determine 
example classification hierarchy pop document may classified rock classifier determine substyle pop dance soft document belongs 
specifically cq cd means equal ancestor definition definition imply cq cq cd cd cq cd cd cq 
classifiers may mistakes returning wrong concept query document 
specifically classifier mistake happens cq cq cd cd cq cd cd cq 
discussion assume cq cd imprecise mistakes 
experiments study system affected presence classifier mistakes 
systems document classifications change infrequently advantageous classify documents advance 
speed searches documents placed buckets associated concept hierarchy 
basic strategies deciding bucket document placed differential total assignment 
differential assignment document placed bucket concept cd 
hand total assignment document placed bucket concept cd ancestor element cd orc descendant element cd illustrate hierarchy differential assignment document classified rock place bucket associated concept rock total assignment document place buckets associated concepts rock music pop dance soft query need decide bucket buckets need considered finding matches 
total assignment consider buckets associated element cq 
hand differential assignment need consider larger set buckets bucket associated element cq bucket associated ancestors elements cq bucket associated descendants elements cq 
mentioned queries exhaustive partial 
case exhaustive query need find matches buckets may contain results need considered case partial queries need consider 
need choose set buckets partial queries add additional dimension problem need select best subset buckets answer query 
exhaustive case common current systems special case partial queries rest assume answering partial queries 
assume document assignment done differential strategy 
illustrate classification functions help reduce number documents need considered answering query 
simplicity assume classification functions return single element hierarchy 
combinations classification documents queries 
show worst case scenario system query classified root concept hierarchy 
classification indicates query results leaf concepts hierarchy documents classified category system match query depicted black circles classification hierarchy 
query classified leaf concepts 
case know documents belong may belong concept match query need consider documents classified base concept ancestor concepts safely ignore documents classified concepts depicted white circles 
query classified intermediate concept hierarchy tree 
case documents matching query may belong descendant leaf concepts need consider descendant concepts cq ancestors 
cq need consider documents cd ancestor cq descendant cq 
note precise classification function cq smaller number concepts need considered match 
addition precise cd smaller number documents classified intermediate nodes hierarchy reducing number documents need considered match 
far considered documents system documents kept nodes 
need place nodes documents buckets 
call bucket semantically related nodes semantic overlay network 
formally define semantic overlay network overlay network associated concept classification hierarchy 
short call son associated concept simply son 
example hierarchy define sons associated leaf nodes soft dance pop new orleans associated rock associate jazz final associate music 
completely define son need explain nodes assigned sons decide sons answer query 
node decides sons join classification documents 
differential assignment classification examples concept hierarchy data distribution son definition new nodes query query classifier sons node classifier document classifier query results generating semantic overlay networks documents node ni joins di cd 
definition query associated concepts cq find results cq cq cq 
note strategy conservative place node just document classifies conservative strategy place node significant number document classifies note conservative strategy effects reduces number nodes son reduces number sons node belongs 
effects increases advantages sons nodes need queried 
second effect reduces cost sons greater number sons node belongs greater node overhead handling different connections 
conservative strategy may prevent finding documents match query 
section study different strategies assignment nodes sons 
assigning nodes son may adjustments sons actual data distributions nodes 
example observe son contains small number nodes may want consolidate son sibling parent order reduce overhead 
summarize process building sons depicted 
evaluate potential classification hierarchies actual data distributions nodes sample find hierarchy 
hierarchy define sons system 
node joining system runs document classifier documents 
node classifier assigns node specific sons example conservative strategy described section 
similarly query issued needs classified sent appropriate sons 
sections study challenges solutions building system semantic overlay net music rock jazz soft dance pop style new orleans bop fusion works 
evaluate solutions simulating music sharing system real data napster 
specifically address challenges classification hierarchies sons section nodes diverse files clustering merit sons 
practice see clustering 
hierarchies yield clustering best son organization 
classifying queries documents section imprecise classifiers map documents queries higher levels hierarchy making searches expensive 
options building classifiers 
precise needs 
impact classification errors 
son membership section node join son 
cost joining son 
reduce number sons node needs belong able find results 
searching sons section search sons 
worth having semantic overlay networks 
search performance son system better single overlay network system gnutella 

classification hierarchies section challenges solutions problem choosing classification hierarchy system 
specifically define classification hierarchy evaluate classification hierarchy choose set possible hierarchies 
classification hierarchy produces buckets documents belong small number nodes ii nodes documents small number buckets iii allows easy implement classification algorithms low number errors errors 
paragraphs explain rationale criteria 
need classification hierarchy produces buckets documents belong small number nodes smaller number nodes need search better query performance 
illustrate consider classification hierarchy music sharing system decade music piece originally created 
system may expect large number nodes current music 
case little advantage create son music decade 
classification hierarchies music tone warm sweet exciting current music son nodes system produce benefit system incurring cost additional connection node having classify nodes queries 
need classification hierarchy nodes documents small number buckets bucket potentially son needs handled node 
greater number sons greater cost node keep track 
example consider classification hierarchy music sharing system random hash music file 
assume nodes lot files hash buckets expect high probability node join sons system 
case node process single query sent system eliminating benefits sons 
want classification hierarchies possible implement efficient classifiers small number errors 
illustrate consider image sharing system classification hierarchy concept person smiling concept may generate number small sons requires sophisticated classification engine may generate large number erroneous results 
criteria goodness classification hierarchy evaluate classification hierarchies final objective choosing best 
evaluation important step seen careful choosing classification hierarchy may reduce eliminate benefits sons 
evaluate need sure classifiers implemented efficient 
actual data nodes system predict size sons number sons node belong 
experiments illustrate issues described section evaluate classification hierarchies music sharing system 
music sharing interest far largest application today 
experimental results particular important application reason believe apply applications classification hierarchies 
illustrate possible classification hierarchies music 
small subset concepts classification hierarchy 
full sets concepts extended version hierarchy music guide music database maintained volunteers manually classify songs artist :10.1.1.13.1643
number nodes number style buckets distribution style buckets classification hierarchy divides music files style rock jazz classic substyle soft rock dance rock 
style total categories music file belong category substyle categories file classified multiple 
second hierarchy classifies music files decade piece originally published newer 
music files classified decade 
third classification hierarchy divides files tone piece warm exciting sweet energetic party 
total tones music file classified multiple tones 
experiment crawl napster nodes university washington month may 
crawl included identity node user name node listing files 
nodes filenames form directory author song title mp allowed easily classify files author song titles 
additional information length file bit rate signature content evaluations 
actual file content available 
classify documents hierarchy web interface database music guide com 
basically song artist music guide database returns song style decade song released tones expressed song 
describe analyze classifier detail including deal mistakes songs database section 
evaluate style substyle classification hierarchy evaluate style classification hierarchy needed add evaluation substyle dimension 
show distribution style buckets 
generate graph node counted number style categories node files 
counted number nodes number style categories plotted graph 
example node files rock jazz country classic styles files styles node counted bar style buckets 
graph see nodes total nodes files just style 
nodes files fewer style categories 
result means define son style files nodes handle connections 
frequency style bucket size bucket size distribution style hierarchy indicated smaller son better query performance 
compute size style sons specific node son assignment strategy 
assume conservative strategy node belong style son files style bucket 
shows histogram number nodes files style bucket 
generate graph counted style number nodes files classified style 
counted styles number nodes ranges plotted graph 
example leftmost bar graph means styles buckets documents belonged nodes 
high frequency bucket size interval news shows maximum size sons small nodes 
style bucket shown rightmost bar documents belonging nodes 
nodes system documents bucket bucket corresponds style rock 
little advantage creating son style rock need explore possible subdivide 
consider sons substyle classification 
previous analysis pointed needed subdivide rock style category categories documents belonging nodes completeness analyze categories 
show substyle distribution analogous 
graph see nodes total nodes files just substyle 
nodes files substyle categories 
results positive shows number sons nodes may belong small 
show bucket size histogram analogous 
see total documents belonging nodes 
substyle categories documents belong large number nodes problem bad style classification hierarchy 
particular category number nodes alternative pop rock represented rightmost bar histogram documents belonging nodes nodes 
alternative pop rock son nodes number nodes frequency number substyle buckets distribution substyle buckets substyle bucket size bucket size distribution substyle hierarchy half size full gnutella network links nodes 
combined style substyle classification hierarchy candidate defining sons maximum number sons node needs join small maximum number nodes son relatively small 
analyze usage decades criteria classifying documents 
figures see decade classification criteria 
shows nodes documents decade buckets shows half sons nodes 
fact nodes documents buckets 
way subdividing decades reject decade classification hierarchy 
show distribution tone buckets explanation graph see description 
graph observe median number buckets node documents result nodes belonging high number sons 
see buckets contain documents belonging relatively small number nodes 
specifically buckets documents belonging fewer nodes buckets documents belonging nodes 
number nodes frequency number decade buckets distribution decade buckets decade bucket size bucket size distribution decade hierarchy classification hierarchy tone borderline depending specifics tradeoff nodes maintaining large number connections benefits relatively small sons may decide 
classification hierarchies evaluated style substyle clearly superior rest experiments 

classifying queries docu ments section describe documents queries classified 
problem classifying documents problem classifying queries similar requirements document query classifiers different 
specifically reasonable expect nodes join relatively stable network low rate minute expect higher query rate hundreds second 
additionally node classification bursty node joins network may hundreds documents classified hand queries arrive regular rate 
conditions document classifier precise time consuming algorithm process batch large number documents query classifier number nodes frequency number tones buckets distribution tone buckets tone bucket size bucket size distribution tone hierarchy implemented fast algorithm may imprecise 
classification documents queries done automatically manually hybrid processes 
examples automatic classifiers include text matching bayesian networks clustering algorithms :10.1.1.27.7690
automatic techniques extensively studied scope 
manual classification may achieved requiring users tag query style substyle intended results 
example user may indicate results query yesterday expected substyle results query rolling stone expected rock style 
user know substyle style potential results select root hierarchy nodes queried 
similarly node manager select sons node join 
hybrid classifiers aid manual classification databases see shortly experiments 
experiments goal experimental section show classify documents queries study precise classifications 
evaluating document classifier documents classified probing database music guide com 
database songs artists classified hierarchy style substyle concepts equivalent leftmost classification hierarchy 
recall napster node evaluation list filenames format directory author song title mp step document classifier extracted author song title file 
classifier probed database author song obtained list possible song matches 
classifier selected highest rank song style 
matches database classifier assigned unknown style substyle file 
sources errors document classifier 
format files may follow expected standard extraction author song title may return erroneous values 
second assumed files music napster share kind files 
third users misspellings name artist song reduce effect misspellings phonetic search music database common misspellings affect classification 
music database complete especially true case classical music 
evaluate document classifier measured number incorrect classifications 
selected random filenames manually belong occasionally music database google aid find non known pieces 
compared manual classification obtained document classifier 
considered classification incorrect document document classifier returned document belong 
note unknown classification classifier considered incorrect correspond root node classification hierarchy 
evaluation files classified incorrectly 
important note misclassified document 
evaluate true effect document misclassification evaluated impact incorrect document classification assignment nodes sons 
experiment selected random nodes classified documents assigned nodes respective documents 
considered classification incorrect node assigned node belong 
evaluation nodes classified incorrectly 
result shows errors classifying documents tend cancel node 
specifically fail classify document example pop rock pop rock document node classified correctly node assigned pop rock son 
misclassified documents problem exhaustive queries practice queries systems partial 
evaluating query classifier experiments queries classified hand authors 
queries classified single style music root hierarchy 
experiments queries obtained traces actual queries sent server run stanford 
manually classifying queries guessing users selected say drop menu submitted queries 
unfortunately evaluate correctness query classification method course consider classification queries correct 
study precise manual classification times queries classified substyle style root classification hierarchy 
selected trace distinct queries original query trace contained duplicates authors believed result cycles overlay network manually classified queries 
result queries classified root hierarchy classified style level hierarchy substyle level 
see section distribution queries hierarchy levels impact system performance precisely classified queries executed efficiently 

nodes son membership section conservative strategy nodes decide sons join 
basically strategy nodes join sons associated concept document 
strategy guarantees able find results may increase number nodes son number connections node needs maintain 
conservative strategy nodes join possible sons better performance 
subsection introduce non conservative assignment strategy layered sons 
layered sons layered sons approach exploits common zipfian data distribution document storage systems 
shown number documents website ranked order decreasing frequency tend distributed zipf law 
example left side hypothetical histogram node zipfian data distribution ll explain rest shortly 
histogram observe documents node belong category documents belong category remaining documents belong categories 
sons node join 
conservative strategy mandates node need join 
assume queries uniform documents category clear node higher probability answering queries queries sons 
words benefit having node belong high benefit joining sons small negative due overhead sons 
simple aggressive alternative choosing sons join node join alternative prevent system finding documents node belong categories 
nodes determine sons join number documents category 
illustrate consider 
right hierarchy concepts aid node deciding sons join 
addition parameter layered son approach minimum percentage documents node category belong associated son alternatively absolute number documents percentage 
example set number 
determine sons node histogram left join 
consider base categories hierarchy tree 
node joins remaining categories node join sons 
consider second level categories 
combination non assigned descendants higher node joins node join son combination 
similarly node join sons threshold 
node joins son associated root tree categories part assignment 
final assignment done regardless threshold ensures documents node example join able find documents sons 
note conservative assignment equivalent layered son threshold joining son set 
case node join sons associated base concepts documents 
experiments subsection contrast result terms son size number sons node conservative approach section layered son approach 
reason space consider style substyle classification hierarchy results classification hierarchies consistent ones section 
show distribution style sons layered sons threshold conservative assignment labeled son 
graphs include root category practice nodes belong 
graph see nodes total nodes need belong just style 
result shows significant improvement versus conservative assignment section nodes belonged style 
nodes need belong style categories versus number nodes frequency number style buckets son son distribution style sons style son size son son son size distribution style hierarchy doing conservative assignments 
layered sons helps reduce number nodes son 
shows histogram size sons excluding root son 
graph see layered sons larger number small sons 
problem rock style rightmost bar graph nodes belong 
significant reduction size sons layered sons conservative strategy 
reduction lead significant improvements query performance 
consider layered sons style substyle classification hierarchy threshold 
show size distribution style substyle sons layered sons threshold conservative assignment labeled son 
graph see style substyle layered son conservative assignment strategy behave similarly terms number connections required node 
advantage layered sons seen shows size histogram sons 
layered sons sons average nodes versus nodes conservative approach 
number nodes frequency son son number style substyle buckets distribution substyle sons substyle son size son son son size distribution substyle hierarchy layered son sons nodes conservative approach 
layered sons style substyle hierarchy produces significant improvement versus conservative assignment smaller sons 

searching sons explained section queries exhaustive partial 
case exhaustive query need find matches sons may contain results need considered case partial queries need consider 
section explore problem choose set sons layered sons 
searching layered sons searches layered sons done classifying query 
query sent son sons associated base concept concepts query classification 
query progressively sent higher hierarchy results 
case concept returned classifier sequential search concepts returned going higher hierarchy 
example looking recall gnutella son style rock son substyle teen pop messages number messages query spears soft rock file start nodes soft rock son 
results recall partial queries target number results send query rock son 
results send query music son 
note multiple approaches searching layered sons 
concentrating single serial objective minimize number messages 
approaches searching son parallel asking fraction target results may result higher number messages start producing results faster 
note search algorithm guarantee documents classification mistakes documents 
finding documents may may problem depending system general need find documents query presence classification mistakes option exhaustive search nodes network 
see document classifier document classification mistake probability find documents match query 
addition search algorithm may result duplicate results 
specifically duplication happen node belongs time son associated substyle son associated parent style substyle 
case query sent sons search node twice find duplicate results 
experiments consider possible son configurations evaluate performance gnutella system 
crawl napster nodes university washington classified music database 
assumed nodes network inside sons gnutella network connected acyclic graph average node connected nodes 
assumption acyclic graph realistic considering acyclic networks effect cycles independent creation sons 
cycles affect system creating repeated messages containing queries receiving nodes seen 
analysis acyclic network gives lower estimate number messages generated 
illustrate show result single query layered son style substyle classification hierarchy 
recall son queries gnutella queries son substyle queries gnutella substyle queries messages average number messages query trace evaluate performance query spears classified manually teen pop 
shows level recall versus number messages transmitted 
level recall ratio number matches obtained versus number matches obtained searched nodes system 
data points graph obtained averaging simulations randomly generated network topologies 
indicated layered sons may obtain duplicate matches 
case count duplicate results new matches 
search algorithm layered sons query initially sent teen pop son 
show dotted line graph recall level versus message performance son 
teen pop son searched consuming messages yielding matching documents system searches parent teen pop rock son 
show recall level versus message performance son dashed line 
show solid line recall level versus message performance gnutella system searches nodes order independent content 
graph see layered son setup able find results significantly fewer messages faster gnutella network 
specifically son base system able find results messages took messages gnutella system reach level 
additional observation note layered son system find results available 
gnutella finds results system layered son results 
reason document classifier mistakes nodes spears documents assigned rock teen pop sons 
find remaining documents send query music son contains nodes performance gnutella search plus overhead having searched teen pop rock sons 
course practice users want perform exhaustive search 
analyze performance layered sons stream queries 
experiment different random queries obtained traces actual queries sent server run stanford 
queries classified hand described section 
queries classified substyle level sent sequentially corresponding son sons style level son 
queries classified style level sent sequentially style style level 
queries classified root hierarchy sent nodes 
measure level recall averaged queries versus number messages sent system 
previous experiment graphs obtained running simulations randomly generated network topologies 
show result experiment 
shows number messages sent versus level recall 
case single query layered sons able obtain level matches significantly fewer messages gnutella system 
layered sons achieve recall levels general average maximum recall due mistakes classification nodes 
results show average performance query types dotted line 
user able precisely classify query get significantly better performance 
illustrate point shows dashed number messages sent versus level recall queries classified substyle level lowest level hierarchy 
case obtain significant improvement versus gnutella 
example obtain recall level layered sons required messages gnutella needed messages reduction number messages 
high recall levels layered sons able reach recall level messages gnutella required 
note shape curve message performance gnutella slightly different queries queries classified substyle level 
reason difference subtle 
authors able classify precisely substyle level queries songs known 
due popularity copies songs network 
gnutella search approach high probability finding match nodes visited making flooding network problem rare songs 
case layered sons performed better gnutella 

studied improve efficiency peerto peer system clustering nodes similar content semantic overlay networks sons 
showed sons efficiently process queries preserving high degree node autonomy 
introduced layered sons approach improves query performance cost slight reduction maximum achievable recall level 
experiments conclude sons offer significant improvements versus random overlay networks keeping costs low 
believe sons particular layered sons help improve search performance current systems data naturally clustered 
authors acknowledge dr stefan decker valuable help contributions initial stages 

brin 
anatomy large scale hypertextual web search engine 
proceedings th www conference 
crespo garcia molina 
routing indices peer peer systems 
icdcs 
crespo garcia molina :10.1.1.13.1643
semantic overlay networks systems 
technical report computer science department stanford university october 
korfhage 
information storage retrieval 
wiley computer publishing 

state art distributed processing 
acm computing survey september 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao :10.1.1.115.4299
oceanstore architecture global scale persistent storage 
proceedings ninth international conference architectural support programming languages operating systems asplos 
manning schutze 
foundations statistical natural language processing 
mit press 
nejdl siberski wolpers 
routing clustering schema super peer networks 
submitted nd international workshop peer peer systems iptps 
:10.1.1.27.7690
baeza yates 
modern information retrieval 
addison wesley 
ratnasamy francis handley karp shenker :10.1.1.140.3129
scalable content addressable network 
acm sigcomm august 
rich knight 
artificial intelligence 
mcgraw hill 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing large scale peer peer systems 
middleware 
sahami 
sonia service organizing networked information autonomously 
proceedings third acm conference digital libraries 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
technical report uw cse university washington 
smith kollock editors 
communities cyberspace 
routledge 
stoica morris karger kaashoek balakrishnan :10.1.1.105.3673
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm 
witten frank 
data mining 
morgan kaufmann publishers 
world wide web communities msn com 
microsoft network communities 
world wide web groups yahoo com 
yahoo groups home page 
world wide web jxta org 
jxta project 
world wide web sourceforge net 
home page 
world wide web vivisimo com 
vivisimo home page 
world wide web www com 
music guide 
world wide web www napster com 
napster home page 
yang garcia molina 
comparing hybrid peer peer systems 
proceedings international conference large databases vldb 
yang garcia molina 
efficient search peer peer networks 
icdcs 
zhao kubiatowicz joseph :10.1.1.111.1818
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd computer science division berkeley april 
