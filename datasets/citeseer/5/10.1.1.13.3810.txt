complete computer system simulation simos approach mendel rosenblum stephen herrod witchel anoop gupta stanford university designed efficient study uniprocessor multiprocessor systems simos simulates hardware detail run entire operating system provides substantial flexibility tradeoff simulation speed detail 
complexity modern computer systems support challenge researchers designers understand system behavior 
computer system complexity increased software sim ulation dominant method system test ing evaluating prototyping 
simulation step building computer system evaluation research ideas ver ification hardware design performance tuning system built 
simulations designers face trade offs speed reduce accuracy simulation run acceptable amount time 
simplification reduces simulation time model userlevel code machine privileged operating system code 
omit ting operating system substantially reduces required simulation 
unfortunately removing operating system simulation model reduces applicability simulation environment 
important computing environments database management systems multiprogrammed time shared systems spend third execution time operating system 
ignoring operating system modeling environments result incorrect 
furthermore environments operating system services heavily difficult study appli cations simulation environment model operating system 
inability run os intensive applications means ieee ieee parallel distributed technology unaltered applications behavior tends poorly understood 
operating system researchers develop ers simulation environments study evalu ate 
simos simulation environ ment capable modeling complete computer systems including full operating system application programs run top 
features help possible 
simos provides extremely fast simulation system hardware 
workloads running simos simulation environment achieve speeds factor slower native execution 
simulation speed researchers boot interactively operating system study 
term workload refer execution applications associated os activity 
feature enables simos model full operating system ability control level simulation detail 
execution workload simos switch number hardware component simulators 
simulators vary amount detail model speed rim 
multiple levels simulation detail researcher focus important parts workload skipping interesting parts 
ability select right simulator job useful 
example researchers interested computer system running steady state behavior booting initializing data structures 
ically simos high speed simulators boot position workload switch detailed levels simulation 
process analogous fast forward button vcr position tape interesting section examining section normal speed slow motion 
additionally simos lets repeatedly jump detailed levels simulation 
statistics collected detailed simulation samples provide indication workload behavior simulation times par quicker detailed models 
simos allows system designer evaluate hardware performance context actual programs run machine 
computer architects simos study effects new processor memory stem simos target hardware layer host platform irix version target operating system ethernet disk models cpu mmu deis ram console memory system models irix version unix svr mips sgi multiprocessor 
simos environment 
simos runs layer host machine target operating system 
refer hardware software simos runs refer simulated hardware modeled simos operating system applications executing architecture 
tions workloads large scientific applications commercial database system 
os designers simos developing debugging performance tuning operating system generation multiprocessor 
simos environment boot run operating system simulator provide hardware services expected operating system 
modern multiprocessor operating system unix sq underlying hardware contains cpus executing instruc tions 
cpu memory unit liu relocates virtual address generated cpu location physical memory generates exception permitted example page fault 
operating system assumes existence set devices including periodic interrupt timer interrupts cpu regular intervals block storage device magnetic disk devices console connection access outside world 
simos diagrammed simulation layer runs top general purpose unix multiprocessors sgi silicon graphics challenge series 
simulates sgi machine detail support irix version standard sgi version unix svr 
application workloads developed sgi machines run modification simulated system 
simos run large complex commercial applications available sgi platform current simos imple mentation simulates sgi platform previous ver sions supported operating systems techniques simos utilizes applicable general purpose operating systems 
simulated hardware component simos layer multiple implementations vary speed winter table 
simos direct execution mode mapping 
implementation target machine feature host machine cpu unix process physical memory file disk storage file exceptions unix signals resident page mapping file process device interrupts unix signals detail 
implementations complete run full workload operating system application programs designed implementations provide various speed detail levels useful computer system researchers builders 
cpus memory system critical components simulation time components varied implementations 
far fastest simulator cpu mmu memory system sgi multiprocessor sgi multiprocessor 
simos provides direct execution mode host target architectures similar 
simos exploits similarity host target directly underlying machine hardware support operating sys tem applications investigation 
configuring standard process environment support oper ating system execution tricky results extremely fast simulations 
direct execution mode executes oper ating system target applications times slower run host hardware 
speed researchers frequently mode boot operating system position complex workloads 
operating system developers testing debugging new features 
direct execution mode fast provides little information workload performance behavior unsuitable studies requiring accurate hardware modeling 
mode requires strong similarities simulated architecture simulation platform 
users require simulation simple model computer cpus memory system simos provides binary translation mode 
mode uses fly object code translation dynamically convert target application operating system code new code simulates original code running particular hardware configuration 
provides notion simulated time breakdown instructions executed 
operates slowdown times 
provide simple cache model capable tracking information cache contents hit rates slowdown times 
binary translation useful operating system studies simple computer architecture studies 
simos includes detailed simulator implemented standard simulation techniques 
simulator runs loop fetching decoding simulating effects instructions machine register set caches main memory 
simulator includes pipeline model records detailed performance information cost longer simulation time 
different levels detail memory system simulation available ranging simple cache counters accurate mod els multiprocessor cache coherence hardware 
simos highly detailed modes computer architecture studies performance tuning critical pieces operating system 
altogether simos provides hardware simulators ranging approximate highly accurate mod els 
similarly slowdowns resulting execution simulators ranges factor factor 
efficient simulation direct execution greatest challenge faced simos mode environment expected operating system different experienced user level programs 
operating system expects access privileged cpu resources mmu configure mapping virtual addresses physical addresses 
simos direct execution mode creates user level environment looks raw hardware operating system execute top 
table summarizes mapping fea tures simos direct execution mode 
cpu instruction execution achieve fastest possible cpu simulation speed direct execution mode uses host processor bulk instruction interpretation 
simulates cpu process abstraction provided host operating system 
strategy constrains target instruction binary compatible host instruction set 
operating system runs userlevel process cpu target architecture modeled different host process 
host operating system activity scheduler page faults transparent process perturb execution simulated hardware 
cpu simula tion process abstraction fast ieee parallel distributed technology workload run native cpu speed 
multiprocessor hosts target cpu processes execute parallel increasing simulation speed 
operating systems cpu features unavailable user level processes possible simply run unmodified operating system user level process 
features provided cpus trap architecture execution privileged instructions 
fortunately workloads features relatively infrequently simos provide means slower simulation techniques 
cpu trap architecture allows operating system take control machine exception occurs 
exception interrupts processor records information cause exception processor accessible registers 
processor resumes execution special address contains code needed respond exception 
common exceptions include page faults arithmetic overflow address errors device interrupts 
simulate trap architecture process rep cpu noti fied exceptional event occurs 
fortunately modern operating systems mechanism notifying user level processes exceptional event occurred execution 
simos uses process cation mechanism simulate tar get machine trap architecture 
unix user level processes notified exceptional events signal mechanism 
unix signals similar hardware exceptions host os interrupts execution user process saves processor state provides information cause signal 
user level process registers function known signal handler host os host os restart process signal handler function passing saved processor state 
simos mode registers signal handlers exceptional event occur 
simos signal handlers responsible trap simulation convert information provided host os input target os 
example receiving floating point exception signal invoked simos signal handler converts signal information form expected target os trap handlers transfers control target os floating point exception handling code 
addition trap architecture cpus provide privileged instructions operating system uses manipulate special state machine 
special state includes currently enabled interrupt level state virtual memory mappings 
privileged instructions manipulate state simulated directly executing userlevel process user level instructions cause illegal instruction exception 
host os notifies cpu process exception sending signal 
direct execution mode uses signals detect privileged instructions interprets software 
simos contains simple software cpu simula tor capable simulating privileged instructions cpu instruction set 
software responsible maintaining privileged registers processor interrupt mask mmu registers 
altogether simos provides hardware simulators ranging approximate highly accurate models mmu simulation process obvious way simulate cpu instruc interpretation analog memory management unit obvious user level process view memory different view assumed operating system 
operating system believes complete control machine physical memory establish arbitrary mappings virtual address ranges physical memory pages 
contrast user level processes deal virtual addresses 
execute correctly target operating system able control virtual physical address mappings private address spaces target user processes 
mmu presents special simula challenge constantly instruc fetch data 
page shows single file represent physical memory target machine 
valid translation virtual physical memory host operating system map page size chunk file address space cpu simulating process 
target operating system requests virtual memory mappings appear privileged instructions direct execu mode detects simulates calling host system file mapping routines 
calls map page size chunks physical memory file simulated cpu address space 
target application instruc accesses winter target machine virtual address space cpu simulating process succeed addresses cause page faults succeed writes addresses cause protection faults physical memory file target machine memory free pages read mappings 
mmu simulation 
simos simulates processor mmu mapping page size chunks file representing physical memory target application address space 
unmapped portions user address space converted page faults target os 
similarly writing mapped pages write permission results protection faults target os 
host machine virtual ffff ox target machine address space virtual address space simos code data host operating system address target os address space gbytes space mbytes target user level host user level address gbytes address space gbytes ox ox 
address space relocation direct execution 
running entire workload irix user level process necessitates compressing gbytes host os address space mbytes 
relink target os reside simos code data upper portion user level virtual address space 
simos target os reside process simulating cpu target architecture 
page application address space translation entry simulated mmu instruction access page cpu simulation process unmapped host miu discussed earlier simulated trap architecture catches signal generated event converts access page fault target operating system 
simulate protection provided mmu protection capabilities file mapping system calls 
example mapping page size section physical memory file write permission effect installing read translation entry 
lmu 
target application write attempts regions produce signals converted protection faults sent target operating system 
architectures operating system resides outside user virtual address space 
causes problem simos simulation virtual addresses operating system normally accessible user 
circumvented problem kernel run high user virtual address space range addresses accessible user mode 
placed simos code address range 
mechanism leaves space available target machine userlevel address space applications insensitive change 
illustrates layout simos irix address space 
device simulation simos simulates large collection devices supporting target operating system 
devices include console magnetic disks ethernet periodic interrupt timers interprocessor interrupt controller 
simos supports interrupts direct memory access dma devices memory mapped method communicating devices loads stores special addresses 
direct execution mode simulated devices raise interrupts sending unix signals target cpu processes 
described earlier simos installed signal handlers convert information signals input target operating system 
timer interprocessor disk interrupts implemented method 
implement giving devices access physical memory file 
accessing file devices read write memory simulate transfers occur dma 
simulate disk simos uses file content corresponding real disk 
standard filesystem build program converts standard files raw disk format 
simos uses program generate dis ks containing files copied host system 
building disks host files gives target os access large volume programs data necessary boot run large complex workloads 
contains simulator ethernet local area network allows simulated machines commu outside world 
network interface hardware ieee parallel distributed technology simos sends messages ethernet simulator process 
commu nication outside world uses ethernet simulator process gateway local ethernet 
network connec users remotely log simulated machines transfer files services ftp file transfer protocol nfs ne ork file sys tem 
ease internet subnet simulated machines entered set host names local name server 
detailed cpu simulation workload code block minimal binary translation load lead lw rl lead add lo ad loa add tmp 
store tm code address translation instr 
hit data address translation instr 
hit cache instr 
hit cycle counting instructions 
binary translation mechanics 
binary translation converts instruction sequence block code target machine instruction set code sequence runs host 
meg array holds state target cpu registers 
translated code uses perform operations target machine registers memory 
mmu address translation cycle counting annotations support operating system 
adding cache simulation entails adding instructions mmu translation 
instruction counts hit case 
misses necessitate calling support functions 
direct execution mode runs target operating system applications model aspect simulated system timing may inappropriate studies 
requires ty host platform architecture investigation 
support detailed performance evaluation simos provides hierarchy models simulate cpu mmu accurate modeling target machine cpu timing 
soft architectures remove requirement host target processors compatible 
cpu simulation binary translation simos hierarchy detailed simu cpu model uses binary translation simulate execution target operating system applications 
software technique allows greater execution control possible direct execution mode 
executing unaltered workload code direct execution host processor executes translation code produced runtime 
block application os code binary translator creates translation applies operations specified original code state simulated architecture 
presents example translation provides 
interesting workloads execute large volumes code translator fast 
amortize time spent runtime code generation storing code block translations large translation cache 
entering basic block simos searches cache see translation code exists 
basic block translations cache incurring translation costs 
direct execution mode cpu tar get machine simulated separate user process 
separate processes reduces accuracy instruction memory interleaving allows simulated processors nn concurrently multiprocessor host 
binary translation mode emphasis execution speed efficiency obtained parallel simulation outweighs lost accuracy 
binary translation cpu ability dynamically generate code supports fly changes simulator level detail 
faster binary translation mode instruments translations count number instructions executed 
slower binary translation mode counts memory system events cache hits misses 
highly optimized instruction sequence emitted translator performs cache hit checks quickly determining hits cache full cache simulator invoked cache misses inf 
adding cache simulation yields accurate picture workload simulated architecture 
cpu simulation detailed software interpretation binary translation cpu extremely fast provides detail derive memory sys tem behavior sufficient detailed multiprocessor studies 
simulated cpu executes separate unix process host machine fine grained control interleaving memory multiple simulated cpus 
winter address deficiency simos includes detailed cpu simulators provide complete control instruction interleaving multiple processors 
simulators interprets straightforward fetch decode execute loop 
want precise cycle cycle interleavings cpus simulate single unix process 
precise cycle interleavings allow device interrupts occur timing allow accurate cache simulation 
additional accuracy mode current inability exploit parallelism multiprocessor host result slowdowns order magnitude larger binary translation cpu 
second detailed cpu model simos includes dynamically scheduled cpu similar generation processors intel mips amd 
model incorporates highly aggressive processor design techniques including multiple instruction issue order execution hardware branch prediction 
cpu simulator completely parameterizable accurately models pipeline behavior advanced processors 
accu rac combined model single process structure results extremely time consuming simulation 
cpu model study effect aggressive processor designs performance operating system applications supports 
switching simulators sampling hierarchy cpu simulators simos accurate studies complex workloads feasible 
slowdowns detailed level running entire complex workloads reasonable amount time far expensive exploit simos ability switch modes 
control switching specifying program run detailed mode want sample workload 
sampling workload consists executing cpu simulator number simulated cycles switching execution simulator 
toggling simulators obtain information detailed mode performance near detailed mode 
different modes share simulated machine state time required switch levels detail negligible 
sampling useful understanding workload execution application programs execution phases usually display different behavior 
instance program initialization typically involves file access data movement main part program computation phase may stress cpu 
phases may dissimilar multiprocessor workloads initialization phase may single threaded parallel computation phase may alternate heavy computation extensive communication 
capturing accurate picture workload examining portion possible 
sampling enables detailed simulator examine evenly distributed time slices entire workload allowing accurate workload measurement detailed simulator large slowdowns 
switching modes useful sampling pair modes 
useful positioning workloads study 
example usually boot operating system direct execution mode switch binary translation mode build state system caches 
caches referenced code data detailed examination workload 
switch detailed cpu model accurate examination workload cache behavior 
specific performance numbers various simulation levels article 
memory system simulation growing gap processor speed memory speed means memory system large performance factor modern computer systems 
studies percent multiprogrammed workloads execution time spent waiting memory system executing instructions 
clearly accurate computer system simulation include model significant delays 
hide long latency memory cpu modern computer systems incorporate levels high speed cache memories hold accessed memory blocks 
modeling memory system stl time requires simulating caches determine memory hit cache require additional latency access main memory 
processor caches frequently controlled hardware module implements cpu simos incorporates caches cpu model 
allows different cpu simulator implementations model caches appropriate level accuracy 
direct execution mode model mem ory system include cache model 
binary translation mode model single level cache memory system 
modeling includes ieee parallel distributed technology keeping multiple caches coherent multiprocessor simulation ensuring dma requests devices interact properly caches 
detailed cpu simulators include multilevel cache model parameterize model caches different organization timing 
provide accurate model today computer system caches 
cpu models level cache detail increases simulation accuracy execution time 
provides multiple levels detail modeling latency memory caches 
fastest simplest models cache misses experience delay 
complex models include modeling contention due memory banks service request time 
model possible accurately model cies modern bus multiprocessors 
simos contains memory system simulator models directory cache coherence system multiprocessors distributed shared memory 
machines stanford dash 
nonuniform memory access numa times due memory distribution 
processor access local memory quickly remote memory 
simulator models increased latency caused memory requests require coherency maintaining activity 
simulator useful examining effects numa architecture modem operating systems 
cpu simulator hierarchy independently memory system hierarchy correlations 
certain cpu simulations require certain memory system simulation support 
example dynamically scheduled cpu simulator requires nonblocking cache model exploit order execution 
furthermore memory system models contention timings reported processor overly optimistic 
likewise simpler cpu simulation models best coupled simpler faster memory system models 
simos performance primary criteria evaluating simulation environment information obtain long takes obtain information 
table page compares simulation speeds simos simulation modes execution native machine 
fol lowing workloads comparison spec benchmarks evaluate uniprocessor speed ran programs selected spec benchmark suite 
performance applications widely studied providing convenient point comparisons sim ulation systems 
mix workload typical multiprocessor compute server 
consists copies parallel program raytrace splash benchmark suite spec benchmarks eqntott 
mix parallel sequential applications typical current multiprocessor 
operating system starts stops programs time sharing machine multiple programs 
pmake workload represents multiprocessor program development environment 
consists independent program compilations taken compile stage modified andrew benchmark 
program consists multiple files compiled parallel processors machine sgi pmake utility 
type workload contains small short lived processes heavy os services 
database workload represents multiprocessor database server bank 
ran sybase database server sup porting transaction processing workload modeled tpc workload contains processes comprise parallel database server plus client programs submit requests database 
workload particularly stressful operating system virtual memory subsystem interprocess communication code 
demonstrates strength simos environment ability run large commercial workloads 
executed simulations sgi challenge multiprocessor equipped mhz cpus 
configured different simulators behave host platform ran workloads top 
native execution numbers represent wallclock time necessary execute workload challenge machine 
numbers indicate slower workload ran simulation 
computed slowdowns dividing simulation wall clock times native execution times 
detailed simulations execute multiprocessor simu lations single process 
trade een cpu speed level winter native execution wall clock direct workload time sec 
execution table 
simos performance 
binary translation cpu memory contention modeling memory contention modeling ano dynamically caches cache caches uniprocessor processor mbyte ram eqntott alvinn espresso multiprocessor processors mbyte ram mix pmake database modeling detail readily apparent table 
uniprocessor workloads highly detailed simulations times slower detailed direct execution mode times slower native machine 
binary translation mode moderate accuracy level instruction counting sim ple cache simulation results moderate slowdowns times native machine 
trade accuracy speed pronounced multiprocessor runs 
relatively simple case running applications mix accurate simulations take times longer native machine 
detailed cpu model exploit machine parallelism speed simulation slowdown scales linearly number cpus simulated 
causes slowdown factor thousands simu machines processors 
complex nature ro multiprocessor workloads heavy operating sys tem causes simulators run slower 
frequent transitions kernel user space frequent con text switches poor mmu characteristics degrade direct execution mode performance worse binary translation model 
characteristics handled directly host system constantly invoke slower software layers direct execution mode 
pmake database workloads cause large slow downs simulators model caches workloads higher cache rate uniprocessor spec benchmarks 
cache simulation binary translation cpu slower multiprocessor case uniprocessor case due communication overhead keeping mul caches coherent 
similar complexities multiprocessor cache simulation add execution time detailed cpu modes 
experiences simos simos development began spring simulation sprite network operating system running sparc machines 
started development mips simos described article fall early 
simulation environment results produces simos proven extremely useful research 
studies areas illustrate simos environment effectiveness architectural evaluation simos playing large part design stanford flash large scale numa multiprocessor 
researchers simos detailed cpu modes examine formance impact design decisions 
ability boot run realistic workloads sybase database switch highly accu rate machine simulation great value 
system software development design operating system flash simos direct execution binary translation modes provide development debugging environment 
simos supports full source level debugging better debugging environment raw hardware 
developers detailed cpu mod els examine measure time critical parts software 
addition simos provides os development group flash hardware long machine complete 
workload characterization simos ability run complex realistic workloads including commercial applications enables researchers characterize workloads widely studied 
examples include parallel compilations sybase database 
ieee parallel distributed technology experience simos believe features requirements simulation environments 
key features ability model complex workloads including operating system activity ability dynam ically adjust level simulation detail 
modern computer applications database systems spend significant amount execution operating system 
evaluation workloads architectures run include operating system effects 
simulation multiple levels detail adjusted fly allows rapid exploration long running workloads 
fast simulation mode allows positioning long running workloads essential performance studies 
furthermore system complex ity increases accurate simulators slow run entire workloads 
sampling fast simulators detailed simulators best way understand complex workload behavior 
acknowledgments john chapin edouard bugnion magazine referees useful feedback early drafts article 
ben verghese help sybase workload jim bennett creating simos dynamic processor model 
stephen herrod receives support national science foundation graduate research fellowship 
mendel rosenblum anoop gupta receive partial support nsf young investigator awards 
supported part darpa dabt 

chapin unix performance cc numa multiprocessors proc 
tcm sigmetrics cof 
measurement modeling computer systems acm press new york pp 

chen bershad impact operating system structure memory system performance operating review vol 
dec pp 


keppel shade fast instruction set simulator execution profiling review may pp 


vol 
dec pp 

singh 
weber gupta splash stanford parallel applications shared computer vol 
mar pp 


ousterhout aren operating systems getting faster fast hardware 
proc 
summer usenix conf usenix berkeley calif june pp 


gray ed 
benchmark handbook br database transaction processing systems morgan kaufmann san mateo calif 
heinrich performance impact flexibility stanford flash multiprocessor proc 
sixth int conf supporter programming languages operating systems ieee computer society press los alamitos calif pp 

rosenblum impact architectural trends operating system performance proc 
syrup 
oper ating system principles acm press new york mendel rosenblum assistant professor computer science department stanford university 
research interests include system software computer architecture simulation environments 
received ba math university virginia ms phd computer science university california berkeley 
recipient national science foundation national young investigator award recipient alfred sloan foundation research fellowship 
winner acm doctoral dissertation award 
member acm ieee computer society 
reached computer science department stanford university stanford ca mendel cs 
stanford edu 
stephen herrod phd candidate computer science stanford university 
research interests include simulation technology multiprocessor architectures multiprocessor application performance debugging 
received ba computer science university texas austin ms computer science stanford universit 

currently supported national science foundation graduate fellowship continually improving simos environment 
reached computer science department stanford university stanford ca rod cs stanford edu 
witchel currently phd student massachusetts institute feeding addiction systems programming obtained bs computer systems engineering ba philosophy stanford university ms computer science stanford university 
spent year computer systems laboratory stanford developing fast simulation dynamic code generation 
research interests include operating systems dynamic code generation parallel architectures 
reached square room lb cambridge ma witchel cs stan ford edu anoop gupta associate professor computer science elec engineering stanford university 
prior joining stanford research faculty carnegie mellon university received phd 
research interests include hardware systems applications scalable parallel computer systems 
john hennessy led design construction stanford dash multiprocessor currently working generation flash machine 
editorial boards ieee parallel systems journal parallel distributed computing 
reached computer science department stanford university stanford ca gupta cs stanford edu 
additional information simos available wv flash 
stanford edu simos winter 
