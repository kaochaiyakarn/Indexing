james hu cs wustl edu applying proactor pattern high performance web servers irfan pyarali irfan cs wustl edu revised expanded version appear th international conference parallel distributed computing systems iasted las vegas nevada october 
modern operating systems provide multiple concurrency mechanisms develop high performance web servers 
synchronous multi threading popular mechanism developing web servers perform multiple operations simultaneously meet performance requirements 
addition increasing number operating systems support asynchronous mechanisms provide benefits concurrency alleviating performance overhead synchronous multi threading 
provides contributions study high performance web servers 
examines synchronous asynchronous event dispatching mechanisms impact design performance jaws high performance web server framework 
results reveal significant performance improvements proactive concurrency model combine lightweight concurrency asynchronous event dispatching 
general complexity proactive concurrency model harder program applications utilize asynchronous concurrency mechanisms effectively 
second contribution describes reduce software complexity asynchronous concurrent applications applying proactor pattern 
pattern describes steps required structure object oriented applications seamlessly combine concurrency asynchronous event dispatching 
proactor pattern simplifies concurrent programming improves performance allowing concurrent application multiple operations running simultaneously requiring large number threads 
supported part microsoft siemens med siemens corporate research 
department computer science washington university st louis mo usa douglas schmidt schmidt cs wustl edu computing power network bandwidth internet increased dramatically past decade 
high speed networks atm gigabit ethernet highperformance subsystems raid ubiquitous 
context developing scalable web servers exploit innovations remains key challenge developers 
increasingly important alleviate common web server bottlenecks inappropriate choice concurrency dispatching strategies excessive filesystem access unnecessary data copying 
research vehicle exploring performance impact applying various web server optimization techniques jaws adaptive web server jaws 
jaws adaptive web server development framework web servers runs multiple os platforms including win versions unix mvs open edition 
experience building web servers multiple os platforms demonstrates effort required optimize performance simplified significantly leveraging features 
example optimized file system automatically caches open files main memory greatly reduces latency solaris 
likewise support asynchronous event dispatching windows nt substantially increase server throughput reducing context switching synchronization overhead incurred multithreading 
unfortunately increase performance obtained asynchronous event dispatching existing operating systems comes cost increased software complexity 
complexity compounded asynchrony coupled multi threading 
style programming proactive programming relatively unfamiliar developers accustomed synchronous event dispatching paradigm 
describes proactor pattern applied improve performance design high performance communication applications web servers 
pattern represents recurring solution software development problem particular context 
patterns identify static dynamic collaborations interactions software components 
general applying patterns complex object oriented concurrent applications significantly improve software quality increase software maintainability support broad reuse components architectural designs 
particular applying proactor pattern jaws simplifies asynchronous application development structuring demultiplexing completion events dispatching corresponding completion routines 
remainder organized follows section provides overview jaws server framework design section discusses alternative event dispatching strategies performance impacts section explores leverage gains asynchronous event dispatching application proactor pattern section presents concluding remarks 
jaws framework overview illustrates major structural components design patterns comprise jaws framework 
jaws memento protocol handler protocol filter adapter reactor proactor strategy singleton strategy framework asynchronous completion token service configurator cached virtual filesystem tilde expander protocol pipeline concurrency strategy framework framework pipes filters acceptor event dispatcher active object home 
strategy architectural overview jaws framework designed allow customization various web server strategies response environmental factors 
factors include static factors number available cpus support kernel level threads availability asynchronous os dynamic factors web traffic patterns workload characteristics 
jaws structured framework frameworks 
jaws framework contains components frameworks event dispatcher concurrency strategy strategy protocol pipeline protocol handlers cached virtual filesystem 
framework structured set collaborating objects implemented components ace 
collaborations jaws components state service configurator state frameworks guided family patterns listed borders 
outline key frameworks components patterns jaws section focuses proactor pattern detail 
event dispatcher component responsible coordinating jaws concurrency strategy strategy 
passive establishment connection events web clients follows acceptor pattern 
new incoming request events serviced concurrency strategy 
events processed dispatched protocol handler parameterized strategy 
jaws ability dynamically bind particular concurrency strategy strategy range alternatives follows strategy pattern 
concurrency strategy framework implements concurrency mechanisms single threaded thread thread pool selected adaptively run time state pattern pre determined initialization time 
service configurator pattern configure particular concurrency strategy web server run time 
concurrency involves multiple threads strategy creates protocol handlers follow active object pattern 
strategy framework implements various mechanisms asynchronous synchronous reactive multiple mechanisms simultaneously 
jaws asynchronous implemented proactor pattern reactive accomplished reactor pattern 
strategies may utilize memento asynchronous completion token patterns capture externalize state request restored time 
protocol handler framework allows system developers apply jaws framework variety web system applications 
protocol handler parameterized concurrency strategy strategy 
strategies decoupled protocol handler adapter pattern 
jaws component implements parsing handling request methods 
abstraction allows protocols sfp incorporated easily jaws 
add new protocol developers simply write new protocol handler implementation configured jaws framework 
protocol pipeline framework allows filter operations incorporated easily data processed protocol handler 
integration achieved employing adapter pattern 
pipelines follow pipes filters pattern input processing 
pipeline components due space limitations possible describe patterns mentioned detail 
provide complete coverage pattern 
linked dynamically run time service configurator pattern 
cached virtual filesystem component improves web server performance reducing overhead filesystem access 
various caching strategies lru lfu hinted structured selected strategy pattern 
allows different caching strategies profiled selected performance 
optimal strategies configured statically dynamically service configurator pattern 
cache web server instantiated singleton pattern 
tilde expander component cache component uses perfect hash table maps abbreviated user login names schmidt user home directories home cs faculty schmidt 
personal web pages stored user home directories user directories reside common root component substantially reduces disk overhead required access system user information file passwd 
virtue service configurator pattern tilde expander unlinked relinked dynamically server new user added system 
previous high performance web servers focused design jaws framework detailed measurements performance implications alternative web server optimization techniques 
earlier discovered concurrent proactive web server achieve substantial performance gains 
focuses previously unexamined point high performance web server design space application proactor pattern simplify web server software development maintaining high performance 
section motivates need concurrent proactive architectures analyzing empirical benchmarking results jaws outlining software design challenges involved developing proactive web servers 
section demonstrates challenges overcome designing jaws web server proactor pattern 
concurrency architectures developing high performance web server jaws requires resolution forces concurrency server perform multiple client requests simultaneously efficiency server minimize latency maximize throughput avoid utilizing cpu unnecessarily 
adaptability integrating new improved transport protocols incur minimal enhancement maintenance costs 
programming simplicity design server simplify various concurrency strategies may differ performance different os platforms jaws web server implemented concurrency strategies multiple synchronous threads reactive synchronous event dispatching proactive asynchronous event dispatching 
compare contrast performance design impacts conventional multi threaded synchronous event dispatching versus proactive asynchronous event dispatching experience developing optimizing jaws case study 
concurrent synchronous events overview intuitive widely concurrency architecture implementing concurrent web servers synchronous multi threading 
model multiple server threads process requests multiple clients simultaneously 
thread performs connection establishment request reading request parsing file transfer operations synchronously 
result operation blocks completes 
primary advantage synchronous threading simplification server code 
particular operations performed web server service client request independent operations required service client request 
easy service different requests separate threads amount state shared threads low minimizes need synchronization 
executing application logic separate threads allows developers utilize intuitive sequential commands blocking operations 
shows jaws configured synchronous threads process multiple clients concurrently 
shows sync acceptor object encapsulates server side mechanism synchronously accepting network connections 
sequence steps thread uses service get request thread pool concurrency model summarized follows 
thread synchronously blocks sync acceptor waiting client connection request 
client connects server sync acceptor selects waiting threads accept connection 
new client request synchronously read network connection selected thread 
request parsed 
requested file synchronously read 
file synchronously sent client 
web browser connect request send file web browser web browser web server sync acceptor accept web browser parse request read file file system multi threaded web server architecture described concurrently connected client serviced dedicated server thread 
thread completes requested operation synchronously servicing requests 
perform synchronous servicing multiple clients jaws spawn multiple threads 
evaluation synchronous multi threaded model intuitive maps relatively efficiently multi cpu platforms drawbacks threading policy tightly coupled concurrency policy synchronous model requires dedicated thread connected client 
concurrent application may better optimized aligning threading strategy available resources number cpus number clients serviced concurrently increased synchronization complexity threading increase complexity synchronization mechanisms necessary serialize access server shared resources cached files logging web page hits increased performance overhead threading perform poorly due context switching synchronization data movement cpus non portability threading may available os platforms 
os platforms differ widely terms support preemptive non preemptive threads 
consequently hard build multi threaded servers behave uniformly os platforms 
result drawbacks multi threading may efficient complex solution develop concurrent web servers 
solution may obvious disadvantages may result actual performance penalty certain conditions particularly high number long running requests intermixed rapid requests smaller files 
important explore alternative web server architecture designs concurrent asynchronous architecture described 
concurrent asynchronous events overview os platform supports asynchronous operations efficient convenient way implement high performance web server proactive event dispatching 
web servers designed dispatching model handle completion asynchronous operations threads control 
jaws implements proactive event dispatching issuing asynchronous operation os registering callback completion handler event dispatcher 
event dispatcher notifies jaws operation completes 
os performs operation subsequently queues result known location 
event dispatcher responsible dequeuing completion notifications executing appropriate completion handler 
figures show jaws web server configured proactive event dispatching handles multiple clients concurrently threads 
shows sequence steps taken client connects jaws 
web browser connect create protocol handler read connection handler dispatcher event dispatcher handle events web server accept connections async acceptor accept complete operating system accept complete accept acceptor dispatcher client connects proactor jaws web server 
jaws instructs async acceptor initiate asynchronous accept 
async acceptor initiates asynchronous accept os passes completion discussion jaws framework components section appear italics pattern participants section appear typewriter font 
handler event dispatcher notify async acceptor completion asynchronous accept 
jaws invokes event loop event dispatcher 
client connects jaws 
asynchronous accept operation completes os notifies event dispatcher 
event dispatcher notifies acceptor 
async acceptor creates appropriate protocol handler 
protocol handler initiates asynchronous operation read request data client passes completion handler event dispatcher notify protocol handler completion asynchronous read 
shows sequence steps jaws uses service get request configured proactive event dispatching 
steps outlined web browser file system get passwd read complete protocol handler event dispatcher web server write complete parse request transmitfile file conn handler dispatcher transmitfile complete operating system read complete client sends requests proactor web server 
client sends request 
read operation completes os notifies event dispatcher 
event dispatcher notifies protocol handler steps repeat entire request received 
protocol handler parses request 
protocol handler initiates asynchronous transmitfile operation read file data write client connection 
doing passes completion handler event dispatcher notify protocol handler completion asynchronous operation 
write operation completes os notifies event dispatcher 
event dispatcher notifies completion handler evaluation primary advantage proactive event dispatching multiple operations initiated run concurrently requiring application threads simultaneous operations 
operations initiated asynchronously application run completion subsystem os 
asynchronous operation initiated thread started operation available service additional requests 
proactive example instance event dispatcher single threaded may desirable uniprocessor platform 
requests arrive single event dispatcher thread parses request reads file sends response client 
response sent asynchronously multiple responses potentially sent simultaneously 
synchronous file read replaced asynchronous file read increase potential concurrency 
file read performed asynchronously synchronous operation performed protocol handler protocol request parsing 
primary drawback proactive event dispatching model application structure behavior considerably complicated conventional synchronous multi threaded programming paradigm 
general asynchronous applications hard develop programmer explicitly retrieve os notifications asynchronous events complete 
completion notifications need appear order asynchronous events requested 
combining concurrency asynchronous events harder thread issues asynchronous request may ultimately handle completion event started different thread 
jaws framework alleviates complexities concurrent asynchronous event dispatching applying proactor pattern described section 
benchmarking results gain understanding different concurrency event dispatching mechanisms impact performance web servers subject heavy load conditions jaws designed synchronous proactive event dispatching 
benchmarked performance compared 
hardware testbed hardware testbed shown 
start requests atm switch request lifecycle web client web server pro plus pro plus benchmarking testbed overview testbed consists micron pro plus workstations 
pro mb ram equipped pentium pro processors 
client machine clock speed mhz server machine runs mhz 
addition pro eni mf atm card efficient networks driven orca driver software 
workstations connected atm network running fore systems asx bx maximum bandwidth mbps 
due limitations lan emulation mode peak bandwidth testbed approximately mbps 
software request generator webstone benchmarking software collect client server side metrics 
metrics included average server throughput client latency 
web stone standard benchmarking utility capable generating load requests simulate typical web server file access patterns 
experiments webstone generate loads gather statistics particular file sizes determine impacts different concurrency event dispatching strategies 
file access pattern tests shown table 
table represents actual load conditions popular document size frequency bytes kbytes kbytes mbytes table file access patterns servers study file access patterns conducted spec 
start experimental results throughput mbps throughput mbps throughput mbps throughput mbps throughput mbps thread request thread pool transmitfile concurrent clients latency msec thread request thread pool transmitfile concurrent clients experiment results byte file thread request thread pool transmitfile thread request thread pool transmitfile concurrent clients latency msec thread request thread pool transmitfile concurrent clients experiment results file thread request thread pool transmitfile concurrent clients latency msec thread request thread pool transmitfile concurrent clients experiment results file thread request thread pool transmitfile concurrent clients latency msec thread request thread pool transmitfile concurrent clients experiment results file concurrent clients latency msec thread request thread pool transmitfile concurrent clients experiment results file results compare performance different adaptations jaws web server 
discuss effect different event dispatching models throughput latency 
throughput defined average number bits received second client 
high resolution timer throughput measurement started client benchmarking software sent request 
high resolution timer stops just connection closed client 
number bits received includes html headers sent server 
latency defined average amount delay milliseconds seen client time sends request time completely receives file 
measures long user wait sending get request web server content begins arrive client 
timer latency measurement started just client benchmarking software sends request stops just client receives response server 
graphs shown throughput latency represent different file sizes experiment bytes mbytes factors 
files sizes represent spectrum files sizes benchmarked experiments discover impact file size performance 
throughput comparisons figures demonstrate variance throughput size requested file server hit rate systematically increased 
expected throughput connection generally degrades connections second increases 
stems growing number simultaneous connections maintained decreases throughput connection 
shown throughput thread request degrade rapidly smaller files connection load increases 
contrast throughput synchronous thread pool implementation degrade gracefully 
reason difference thread request incurs higher thread creation overhead new thread spawned request 
contrast thread creation overhead thread pool strategy amortized pre spawning threads server begins execution 
results figures illustrate performs extremely poorly small files kbytes 
experiments indicate performance transmitfile depends directly number simultaneous requests 
believe heavy server loads high hit rates transmitfile forced wait kernel services incoming requests 
creates high number simultaneous connections degrading server performance 
size file grows transmitfile rapidly outperforms synchronous dispatching models 
instance heavy loads mbyte file shown outperforms closest model nearly 
transmitfile optimized take advantage windows nt kernel features reducing number data copies context switches 
latency comparisons figures demonstrate variance latency performance size requested file server hit rate increase 
expected connections second increases latency generally increases 
reflects additional load placed server reduces ability service new client requests 
transmitfile performs extremely poorly small files 
file size grows latency rapidly improves relative synchronous dispatching light loads 
summary performance results illustrated benchmarking results significant variance throughput latency depending concurrency event dispatching mechanisms 
small files synchronous thread pool strategy provides better performance 
moderate loads synchronous event dispatching model provides slightly better latency asynchronous model 
heavy loads large file transfers asynchronous model provides better quality service 
windows nt optimal web server adapt event dispatching file model depending server workload distribution file requests 
despite potential substantial performance improvements considerably harder develop web server manages concurrency asynchronous event dispatching compared traditional synchronous approaches 
due additional details associated asynchronous programming explicitly retrieving os notifications may appear non fifo order added complexity combining approach multi threaded concurrency 
proactive event dispatching difficult debug asynchronous operations nondeterministic 
experience designing developing proactive web server indicates proactor pattern provides elegant solution managing complexities 
proactor pattern general patterns help manage complexity providing insight known solutions problems particular software domain 
case concurrent proactive architectures complexity additional details asynchronous programming compounded complexities associated multi threaded programming 
fortunately patterns identified software solutions proactive architectures yielded proactor pattern described 
intent proactor pattern supports demultiplexing dispatching multiple event handlers triggered completion asynchronous events 
pattern simplifies asynchronous application development integrating brevity portions complete description elided 
detailed coverage implementation sample code available 
demultiplexing completion events dispatching corresponding event handlers 
applicability proactor pattern conditions hold application needs perform asynchronous operations blocking calling thread application notified asynchronous operations complete application needs vary concurrency strategy independent model application benefit decoupling application dependent logic infrastructure application perform poorly fail meet performance requirements utilizing multithreaded approach reactive dispatching approach 
structure participants structure proactor pattern illustrated omt notation 
asynchronous operation proactive initiator completion handler asynchronous operation processor participants proactor pattern completion dispatcher key participants proactor pattern include proactive initiator web server application proactive initiator entity application initiates asynchronous operation 
registers completion handler completion dispatcher asynchronous operation processor notifies operation completes 
completion handler acceptor handler proactor pattern interfaces implemented application completion notification 
asynchronous operation methods async read async write accept asynchronous operations execute requests timer operations behalf applications 
applications invoke asynchronous operations operations performed borrowing application thread control 
application perspective operations performed asynchronously 
asynchronous operations complete asynchronous operation processor delegates application notifications completion dispatcher 
asynchronous operation processor operating system run completion asynchronous operation processor 
component typically implemented os 
completion dispatcher queue completion dispatcher responsible calling back application completion handlers asynchronous operations complete 
asynchronous operation processor completes asynchronously initiated operation completion dispatcher performs application callback behalf 
collaborations defined steps occur asynchronous operations 
high level abstraction applications initiate operations asynchronously notified operations complete 
shows interactions occur pattern participants 
proactive initiators initiates operation perform asynchronous operations application initiates operation processor 
instance web server ask os transmit file network particular socket connection 
request operation web server specify contrast reactive event dispatching model steals application thread control perform operation synchronously 
asynchronous operation initiated operation performed asynchronously operation completes completion handler notified proactive initiator asynchronous operation processor asynchronous operation register operation handler dispatcher execute dispatch completion dispatcher completion handler handle event interaction diagram proactor pattern file network connection 
web server specify completion handler notify operation completes completion dispatcher perform callback file transmitted 

asynchronous operation processor performs operation application invokes operations asynchronous operation processor runs asynchronously respect application operations 
modern operating systems solaris windows nt provide asynchronous subsystems kernel 

asynchronous operation processor notifies completion dispatcher operations complete asynchronous operation processor retrieves completion handler completion dispatcher specified operation initiated 
passes completion dispatcher result asynchronous operation completion handler call back 
instance file transmitted asynchronously asynchronous operation processor may report completion status success failure number bytes written network connection 

completion dispatcher notifies application completion dispatcher calls completion hook passing completion data specified application 
instance asynchronous read completes handler typically passed pointer newly arrived data 
consequences section details consequences proactor pattern 
benefits proactor pattern offers benefits increased separation concerns proactor pattern decouples application independent asynchrony mechanisms application specific functionality 
mechanisms reusable components know demultiplex completion events associated asynchronous operations dispatch appropriate callback methods defined completion handlers 
likewise application specific functionality knows perform particular type service processing 
improved application logic portability improves application portability allowing interface reused independently underlying os calls perform event demultiplexing 
system calls detect report events may occur simultaneously multiple event sources 
event sources may include ports timers synchronization objects signals real time posix platforms asynchronous functions provided aio family apis 
windows nt completion ports overlapped implement asynchronous 
completion dispatcher encapsulates concurrency mechanism benefit decoupling completion dispatcher asynchronous applications configure completion dispatchers various concurrency strategies affecting participants 
completion dispatcher configured concurrency strategies including single threaded thread pool solutions 
threading policy decoupled concurrency policy asynchronous operation processor completes potentially long running operations behalf initiators applications forced spawn threads increase concurrency 
allows application vary concurrency policy independently threading policy 
instance web server may want thread cpu may want service higher number clients simultaneously 
increased performance multi threaded operating systems perform context switches cycle multiple threads control 
time perform context switch remains fairly constant total time cycle large number threads degrade application performance significantly os context switches idle thread 
instance threads may poll os completion status inefficient 
proactor pattern avoid cost context switching activating logical threads control events process 
instance web server need activate handler pending get request 
simplification application synchronization long completion handlers spawn additional threads control application logic written little regard synchronization issues 
completion handlers written existed conventional singlethreaded environment 
instance web server get handler access disk async read operation windows nt transmitfile function 
drawbacks proactor pattern drawbacks hard debug applications written proactor pattern hard debug inverted flow control oscillates framework infrastructure method callbacks application specific handlers 
increases difficulty single stepping run time behavior framework debugger application developers may understand access framework code 
similar problems encountered trying debug compiler lexical analyzer parser written lex 
applications debugging straightforward thread control user defined action routines 
thread control returns generated deterministic finite automata dfa skeleton hard follow program logic 
scheduling controlling outstanding operations proactive initiators may control order asynchronous operations executed 
asynchronous operation processor designed carefully support prioritization cancellation 
known uses widely documented uses proctor pattern completion ports windows nt windows nt operating system implements proactor pattern 
various asynchronous operations accepting new network connections reading writing files sockets transmission files network connection supported windows nt 
operating system asynchronous operation processor 
results operations queued completion port plays role dispatcher 
ace proactor adaptive communications environment ace implements proactor component encapsulates completion ports windows nt 
ace proactor abstraction provides oo interface standard apis supported windows nt 
source code implementation acquired ace website www cs wustl edu schmidt ace html 
unix aio family asynchronous operations real time posix platforms proactor pattern implemented family apis 
os features similar ones described windows nt 
difference unix signals implement truly windows nt api truly asynchronous 
asynchronous procedure calls windows nt systems windows nt support asynchronous procedure calls apc apc function executes asynchronously context particular thread 
apc queued thread system issues software interrupt 
time thread scheduled run apc 
operating system called kernel mode 
application called user mode 
concluding remarks past years computer network performance improved substantially 
development high performance web servers remained expensive error prone 
jaws framework described aims support web server developers simplifying application various server designs optimization strategies 
illustrates web server traditional synchronous event dispatching performs adequately light server loads 
web server subject heavy loads design concurrent proactive architecture provides significantly better performance 
programming model adds complexity software design increases effort developing high performance web servers 
development effort stems repeated rediscovery fundamental design patterns 
design patterns describe recurring solutions existing software systems 
applying design patterns concurrent software systems reduce software development time improve code maintainability increase code reuse traditional software engineering techniques 
proactor pattern described embodies powerful technique supports efficient flexible event dispatching strategies high performance concurrent applications 
general applying pattern enables developers leverage performance benefits executing operations concurrently constraining synchronous multi threaded reactive programming 
experience applying proactor pattern jaws web server framework considerably easier design develop test maintain 
schmidt hu developing flexible highperformance web servers frameworks patterns acm computing surveys vol 

hu schmidt principles developing measuring high performance web servers atm proceeedings infocom march april 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 
schmidt experience design patterns develop object oriented communication software communications acm special issue object oriented experiences vol 
october 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
schmidt acceptor connector design patterns initializing communication services pattern languages program design martin buschmann riehle eds reading ma addison wesley 
jain schmidt service configurator pattern dynamic configuration services proceedings rd conference object oriented technologies systems usenix june 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
harrison pyarali schmidt jordan proactor object behavioral pattern dispatching asynchronous event handlers th pattern languages programming conference washington university technical report wucs september 
schmidt reactor object behavioral pattern concurrent event demultiplexing event handler dispatching pattern languages program design coplien schmidt eds pp 
reading ma addison wesley 
pyarali harrison schmidt asynchronous completion token object behavioral pattern efficient asynchronous event handling pattern languages program design martin buschmann riehle eds reading ma addison wesley 
object management group control management audio video streams omg rfp submission ed mar 
buschmann meunier rohnert stal pattern oriented software architecture system patterns 
wiley sons 
schmidt perfect hash function generator proceedings nd conference san francisco california pp 
usenix april 
hu pyarali schmidt measuring impact event dispatching concurrency models web server performance high speed networks proceedings nd global internet conference ieee november 
mogul case persistent connection proceedings acm sigcomm conference computer communication review boston ma usa pp 
acm press august 
gene trent mark sake webstone generation server benchmarking silicon graphics whitepaper february 
ww sgi com 
carlton explanation specweb benchmark standard performance evaluation whitepaper 
www org 
information technology portable operating system interface posix part system application program interface api language 
microsoft developers studio version software development kit 
