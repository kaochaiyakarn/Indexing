efpl technical report ic quest balancing peer load structured peer peer systems karl aberer datta manfred hauswirth distributed information systems laboratory ecole polytechnique rale de lausanne epfl ch lausanne switzerland structured peer peer systems considered generation application backbone internet 
important problem systems load balancing presence non uniform data distributions 
propose completely decentralized mechanism parallel ad dresses local global load balancing problem balancing storage load uniformly peers participating network uniformly replicating different data items network optimally exploiting existing storage capacity 
approach grid system variant structured network 
problem solved directly adapting search struc ture data distribution 
may result unbalanced search structure show expected search cost grid number messages remains logarithmic circumstances 
problem solved dynamic reactive balancing method sampling grid structure 
simulations show solution provides scalable approach load balancing problems 
discuss issues addressed theoretical aspects imple approach part practical system 
keywords communication networking information technology distributed systems peer peer systems distributed systems distributed databases peer peer load ing distributed systems distributed applications peer peer load balancing data structures distributed data structures distributed hash tables information storage re trieval indexing methods load balancing distributed hash tables supported part national competence center research mobile information communication systems mics center supported swiss national science foundation number 
motivation efpl technical report ic structured peer peer systems considered generation application backbone internet 
solve key lookup data basic problem data access decentralized approach 
current systems class variant distributed hash table dht approach 
practical problem encountered systems load balancing 
load balancing critical sup port high scalability availability accessibility throughput 
poor load balancing may fact gradually transform system backbone system observed gnutella 
systems supporting equality lookup data problem non uniform workloads may circumvented applying randomized hash functions data keys uniformly distributing workload storage query answering 
combination balanced search structures balanced distributed search trees approach leads uniform load distribution par peers 
approach limited semantics data keys exploited example simplest case ordering data keys lookups support prefix range queries 
aspect load balancing uniform replication data support uniform availability 
typi cally problem tackled current structured systems controlled replication globally constant replication factor assumed 
introducing global knowledge systems undesirable viewpoint decentralization peer autonomy approach lacks ability adaptively exploit existing storage resources optimal manner 
introduce approach tackles load balancing problems identified structured systems perspective storage load balancing aim distributing storage load uniformly peers exploit existing storage capacity optimally uniformly replicating data available storage optimally 
approach relies exclusively completely decentralized self organized methods 
randomization essential element proposed solution 
solving important subproblem load balancing example considering non uniform query loads non uniform distribution peer resources demonstrate feasibility complex load balancing strategy completely decentralized setting provide working solution applicable practical settings 
approach fundamental observation distributed hash tables 
cost lookup measured terms messages remains logarithmic underlying search tree structure balanced 
balanced distributed hash table sufficient condition scalable search necessary 
result relies essentially randomization inherent routing tables implement distributed hash tables 
exploit property adapting structure dht structure storage load balanced non uniform data key distributions 
efpl technical report ic resulting dht may arbitrarily unbalanced 
solve problem balancing storage load peers 
addition allowing unbalanced search trees maintain ordering keys tree structures 
prefix range searches directly supported constitutes important element exploiting semantics search keys queries 
approach different standard dht approaches classical database indexing 
standard dht approaches uniform hashing leads construction approximately balanced search structures upper bound search cost derived depth search tree underlying dht construction 
ordering keys lost 
database indexing balanced data structures trees indexing provide efficient search maintain key ordering 
adopting distributed versions search structures appears unsuitable environ ments worst case operations affect network splitting root search tree 
uniform replication introduce adaptive mechanism globally balance workload 
differ ent storage load peers detect non uniform replication data locally 
introduce sampling method detect imbalance dynamically adapt replication 
data dynamically replicated peers aim storage capacity optimally 
important aspect mutual dependency storage load balancing uniform replication 
peers attempt locally balance storage load may compromise globally uniform replication 
main contribution achieve load balancing goals conjunction 
approach load balancing grid variant dht :10.1.1.19.6221
essentially differs approaches way peers dynamically adopt decide operation search space responsible independent physical identity 
contrast standard assumption structured systems peers adopt identity search space responsible enter network grid peers decide dynamically interactions peers data responsible 
peers change search space assignment order perform load balancing operations 
systems complex computational systems 
order establish properties systems rely various methods 
ideally analytical results allow establish properties full generality 
realistic systems results difficult obtain analytical results frequently limited simplified situations 
establish key result efficient search unbalanced grids theoretically 
load balancing heuristics introduced generalizations algorithms motivated analytical models simplified situations 
general validity algorithms verified simulation results due complexity realistic target setting 
take step theoretically sound algorithms practical implementations uncover technical issues encountered implementing real world structured system 
efpl technical report ic approaches load balancing structured peer peer systems currently reported literature 
typically start standard dht approaches introduce algorithms auxiliary data structures posteriori remedy load imbalance 
complete comparison feasible point believe approaches run risk sacrifice efficiency original access structure presence frequent changes data distribution structural adaptations additive nature 
class approaches tries tackle problem application economic models 
approaches form virtual currency earned service resource provision spent services resources consumed 
consider class approaches com envisage employ economic models approach case non uniform peer resources non cooperative environments 
conceptually closest approach consider freenet 
exhibits dynamic load bal strategies efficient search provides practical implementation 
main difference lack theoretical foundations heuristics freenet potential performance problems probably solved non scalable resource consumption 
structured follows section gives basic theoretic definitions grid struc ture 
section proves grid efficiently skewed data distributions provides worst case scenario bound 
section defines problems storage load replication balancing theoretically gives motivating example explain problems goals 
section describes storage load balancing algorithm section presents algorithm achieve uniform replica dis tribution 
section briefly describes grid basic operations section puts discusses results simulations integrated algorithm justify claims 
grid exists software provide experiences mapping theoretical approaches running implementation section 
section relates approach approaches area draw section 
grid data structure grid distributed data structure principles distributed hash tables dht 
dht approach grid idea associating peers data keys key space constraining general applicability consider binary keys 
contrast dht approaches impose fixed maximal length keys assume grid structure peer associated binary key denote key call path peer 
key determines data keys peer manage keys prefix 
particular peer store 
order ensure complete search space covered peers require set peers keys complete 
efpl technical report ic set peers keys complete prefix path peer exists peer exist peers prefix naturally peers case 
completeness prefix needs guaranteed algorithms construct maintain grid data structure introduced section 
exclude situation path peer prefix path peer 
situation occur construction reorganization grid 
ideally situation avoided algorithm maintaining grid eventually converge state grid prefix free peers denotes prefix relationship strings allow multiple peers share paths case call peers replicas 
number peers share path called replication factor path 
replication important support redundancy robustness grid case failures distribute workload searching grid 
enabling searches peers maintain routing tables essential constituent grid structure 
routing tables defined partial functions properties 
defined 
association peers paths different grids obtained depending choice definition choices sets important observation relates fact independent different having multiple level necessary guarantee robustness data struc ture 
denote maximum number maintained level 
search algorithm locating data keys indexed grid defined follows peer associ ated location peers referenced peers 
function provides necessary routing information forward search requests peers case searched key match network 
searches start peer 
peer knows locations key space peer responsible 
searched data key search start recursive algorithm performs basic search 
determine maximal randomly selected element algorithm invocation efpl technical report ic terminates successfully due definition function find location peer search continue completeness 
length common prefix increases 
algorithm terminates 
case unreliable network may occur search continue peer selected routing table available 
alternative peers selected routing table continue search 
illustrate grid data structure means simple example 
show peers overload show examples routing table entries peer level peer level 
paths peers indicated positions virtual binary tree 
order observations grid balanced peers grid data structure example paths different length grid complete 
prefixes peer paths exist continuations paths exception path 
path associated peer corresponding subspace covered grid uses replication 
certain paths multiple peers associated data pertaining paths replicated replica consistency maintained 
grid prefix free path peer prefix path peer illustration included selected peers 
peer included level refer peers paths starting bit 
peer included level refer peers paths starting 
illustrate sample search 
assume search path submitted peer path share prefix search key uses level forward search message efpl technical report ic assume peer path peer shares bit searched key uses level forward search message 
assume selects peer case search terminates successfully messages sent 
efficient search unbalanced grids require grid balanced paths associated peers equal length search cost may non logarithmic number messages needed locate peer holding searched data item 
section show due probabilistic nature approach pose problem 
show expected cost searches measured number messages required perform search remains logarithmic independent grid structured 
see peers paths linear length total number peers participating network expected search cost remains logarithmic 
simplicity constraining general applicability provide result special class grids prefix free grids replication paths 
show simulations result applies general cases see section 
restricted class prefix free grids replication identify peers path unambiguously 
refer peers directly paths set set grids constructed set peer identifiers denote different grids distinguished different choice denote grid replication assume function signature single valued 
distributed environment relevant cost measure algorithm number messages exchanged 
invocation corresponds forwarding search task different peer message 
define search cost grid data key starting number invocations function denote cost definition grid exclude case length paths linear size searches require linear number messages worst case access structure non scalable 
show expected average search cost logarithmic 
theorem 
expected search cost search specific key grid randomly selected possible grids starting randomly selected peer formal proof theorem 
limit provide intuition underlying proof 
efpl technical report ic showing claim analyze search process 
consider specific peer associated key leaf node search tree 
assume search key starts randomly selected peer 
determine number messages required resolve bits query correctly 
total number peers number peers matching bit query assume initial peer randomly selected resolving query bit require message probability bit resolved query processed peers bit matching 
point assume peer uniformly randomly selected peers matching bit 
assumption satisfied theorem assume grid randomly selected possible grids 
routing table entries uniformly randomly selected peers qualify entries routing tables different levels independently chosen 
assume peer matching bit uniformly randomly selected peers peers matching bit match second bit 
probability message required resolve second bit 
argument continues analogously till bits resolved 
process illustrated 
note length key independent number peers argument applies bits resolved bit matching bit matching 

bit resolved bits resolved bits resolved bits resolved key match message search process nk completely adding expected number messages resolving bit results expected total number messages search process sequence positive numbers efpl technical report ic bound sum follows results stated theorem 
bound result shows case search tree logarithmic depth number grids logarithmic search cost achieved extremely small 
theorem 
probability search grid key randomly selected peer succeed steps smaller length starting detailed proof theorem discussion consequences 
putting shown search cost measured communication cost small average independent specific shape grid 
furthermore show cases cost deviates average rare 
assume grids may unbalanced affecting search performance exploit property order adapt shape grid data distribution storage load balancing purposes problems load balancing introduce load balancing issues considering grid subsequent sections 
basically dht access structure faces similar problems 
grid structure identify main issues addressed 
storage load balancing 
peer define storage load number data keys pertain search space associated peer path 
balancing different peers important avoid throughput bottlenecks overloading small set peers utilizing rest system 
resulting load balancing problem local load balancing problem peers recognize locally underloaded overloaded load distributed uniformly system 
efpl technical report ic 
uniform replication 
path define replication factor number peers balancing important order ensure subspaces key space covered uniformly peers data items uniformly replicated 
interest viewpoints failure resilience presence unreliable peers workload balancing searches updates 
resulting load balancing problem global load balancing problem peers determine locally replicas path exist network 
assume data keys general distributed non uniformly 
assumption data keys indexed bear semantics purely identifiers 
case random hash functions applied enforce uniform key distribution trivial search predicates equality applied 
examples data keys bearing semantics natural language terms sensory data typically non trivial search predicates applied sub string range queries 
require storage load balancing resulting grid structure unbalanced regions key space data items frequent peers specialize longer paths 
explains importance result section 
method account data distribution standard method dht approaches randomly associates peers paths general result non uniform storage loads 
see methods local storage load balancing global uniform repli cation conflict balancing storage load locally may compromise global uniform replica tion 
important goal demonstrate possible devise completely decentralized algorithms overcome conflict 
requirement data items uniformly replicated corresponds underlying assumption request rates different data items uniformly distributed 
provide solutions problem non uniform request distribution standard techniques variable replication square root rule results combined local global load balancing 
motivating scenario illustrate means elementary example typical operations performed constructing maintaining grid issues arising attempting maintain local storage balance global uniform replication simultaneously 
assume peers may store data items initially hold different data items follows states peers represented triples consisting peer identifier current path data efpl technical report ic keys peer currently holds 
assume bits data items keys initially paths empty grid built 
describe scenario possible interactions peers constructing grid 
initiates grid network joins network contacting assume data item pertaining subspace available peer attempts specialize subspace split search space resulting states independently starts grid network joins network resulting states joins network contacting specialized path decides extend path 
resulting state enters network contacting specialized path decides adopt path stores data pertaining path 
contacts result networks merge common network single grid 
shows grids require start single origin assumed standard dht approaches dynamically merge similarly gnutella networks 
path extra storage space replicate data increase data availability 
results state order explore network contacts network exploration serves purpose network maintenance compared ping pong protocol gnutella 
store data pertaining path refine search space specializing paths exchange data new paths 
apparently peers specialized maximum possible degree 
happen eventually contact decide specialize opposite path encounter obtain missing data item pertaining path 
results final state resulting grid complete prefix free 
storage load peers perfectly balanced result local decisions exchange replicate data specialize paths 
globally replication factors balanced 
exist peers support path support path supports path 
consequently data items pertaining path replicated higher available 
imbalance resulted specific sequence interactions performed 
sequences led possibly balanced replication 
efpl technical report ic global coordination assumed exclude undesired sequences events 
introduce distributed algorithms requiring central coordination reduce global imbalance replication factors time maintain local storage balance grids constructed 
case imbalances occur result construction changing data distributions re balance structure posteriori 
example re balancing achieved having peers supporting path decide peer supporting path 
difficulty decide changes grid structure locally available information 
load balancing notation data structures introduce algorithms grid construction maintenance load balancing properties give overview data structures peer maintains 
introduced section data associated peer represents grid structure path associated peer routing table associated peer level entries 
assume routing table contains addition need denote set data keys associated peer denotes data stored constant related number data keys peer willing store 
assume peers storage capacity define overload storing data keys storing functions table discussions 
order build network peers need interact peers 
systems grid relies random peer interactions 
grid implementation simulation purposes random interactions facilitated list peers 
assumed peer knows random peers network 
initial list peers peer merges mutual lists retains peer interacts constant entries merged list 
process ensures time lists random providing peer knowledge random peers network may contact 
interacting peers learn network encountering peers 
keep informa tion statistics 
peers corresponding level path 

corresponds statistics gathered peer random interactions attributes 
number times statistics updated 

statistics encountered peers length string th bit efpl technical report ic bits string extended bit data temporary variable corresponding keys prefix maximal common prefix paths peers returns entries randomly uniformly chosen larger size returned returns real number chosen uniformly interval returns size number elements argument initializes peers statistics table table functions 
peers complimentary bit level statistics encountered peers storage load balancing algorithm describes interactions peers perform order construct maintain grid 
purposes presentation describe interactions peers global algorithm 
global algorithm derived implementation corresponding local algorithms executed peers communication protocols information exchange 
elaborated earlier grid distributed binary search tree 
order build tree global coordination depend random peer interactions peers decide modify locally distributed tree data structure changing paths 
random interactions initiated lists maintained peers 
discuss step step various concepts implemented algorithm 
path extension retraction decisions taken peers interaction guided peers desire optimally utilize local storage avoiding overload situations 
order achieve peers meet need mutual replicas peers meet path combined data peers store limit willing store decide replicate efpl technical report ic algorithm define update statistics interacting peer algorithm grid maintenance activities refreshes routing tables lists peer described algorithm define define define define define data presently stored belongs current path 
similar definition path retraction peers having paths equal length data replicated non existing level removed statistics reset peers paths incompatible retrieve data belonging path peer initiate exchange random entry routing table level described algorithm possible peers paths path extension define define define extend paths additional bits split path extension possible data exchanged new level routing table added statistics reset 
new initiated decreasing probability described algorithm paths prefix relationship exchange retraction define complementary st bit path define define path retraction data replicated data removed data non existing levels path extension complimentary bit level adding mutual entries routing tables level efpl technical report ic data increase data availability line algorithm 
extend paths peers path meet store data items may decide extend path complimentary bits distributing data new paths line algorithm 
similarly peers meet path peer prefix peer path peer shorter path may decide extend path complimentary bit data items extended path exist line algorithm 
retract paths peers exactly bit path different meet store situation may arise possibly data deletion may decide retract simultaneously path line algorithm 
similarly peer path prefix peer path peer longer path retract bit finds data line algorithm 
initiation exchanges frequent case peers meet randomly incompatible paths common prefix perform possible actions restructuring grid line algorithm 
case peers initiate immediately exchange peer shorter path peer selected table peer participating current exchange algorithm 
corresponds process searching peer compatible path result exchange eventually results exchange peers compatible paths case actions restructuring take place 
strategy essential fast convergence grid restructuring process 
order identify peer exchange peer randomly selects excluding routing table level possible changed path see algorithm algorithm section 
searching random initiating child stale routing eliminated routing table performing maintenance routing tables line algorithm 
second situation exchanges initiated peers having changed paths remain situation line line algorithm 
shown beneficial uniform replication data increase probability exchanges occurring peers done algorithm memory currently peers want devote average initiated decreasing probability larger storage load peer 
peer shorter path preference longer path average peers get equal opportunity extend paths 
symmetric case data replicated peers possible 
efpl technical report ic algorithm define totally changed path algorithm remove invalid routing information common prefix initiate child process algorithm symmetric case replicate data possible recursion restricted going indefinitely limiting process maximum child process initiated exponential explosion invocations 
convergence complexity ideally data distribution static grid stabilizes path extensions retractions fresh iterations may stopped gradually die 
realistic system possibly stable data distribution due data updates deletions process continuous 
grid continuously adapt conform latest situation 
continuous adaptation expensive instant time typically peer expected interact peers average contacts contacted 
dynamics systems operations network maintenance ping pong messages gnutella networks done regularly 
effort continuously executing comparable network maintenance existing system 
operations exact cost evaluation comparison grid construction maintenance scope include different factors 
illustration just mention points respect assume grid forming scratch similarly illustrated motivating example uniform data distribution resulting grid balanced tree efpl technical report ic depth minimum path extensions performed part require steps average order locate peer compatible path expected message cost lower bound stabilizing grid 
simulations operation performed 
initiation confirm analysis 
illustrated motivating example construction process may result non uniform repli cation data 
theoretical considerations derive possible counter measure non uniform replication grid construction favor path extensions case path peer prefix peer path opposed peers meet having equal paths 
introduced choose probability perform split case equal paths line algorithm 
confirmed simulations see section 
strategy slows rate changes grid messages consumed arriving stable state 
trade cost tween proactively supporting uniform replication vs reactively establish uniform replication described section 
strategy favor uniform replication data aggressively initiate additional exchanges underloaded peers done function association peers identifiers important aspect algorithm dynamic unbiased association peers paths 
exact bit level individual peer responsible decided randomly bias correlation peer identifier ip address peer path systems chord pastry associate peer identifier data 
doing essentially achieve separation concerns peer identifier stored data 
provides greater resilience denial service attacks advantages 
helps replication load balancing peers may migrate arbitrary overloaded path systems peers flexibility 
elaborated section related address issue replication load balancing structured peer peer systems done completely decentralized manner described section 
maintenance executing activities pertaining grid maintenance performed line line algorithm 
peers meet algorithm perform operation meant maintenance grid network updating peers lists routing tables 
includes making routing table entries random done algorithm required search efficiency assume random routing table entries proof section disseminate routing entries peers changed paths 
lists efpl technical report ic randomized order facilitate random peer interactions 
interactions peers maintain statistics needed uniform replication executing operation algorithm introduced section 
algorithm generate new list peer randomly choosing entries routing randomly independently chosen order ensure network uniformly connected routing random required proof section peers add mutual entries routing tables level properties resulting grid important characteristic algorithm 
dynamic environment possible grid tree temporarily incomplete prefix free algorithm aims ensuring eventual completeness tree making eventually prefix free 
provide intuitive arguments case 
prefix free tree exists peers prefix assuming random peer interactions peers eventually meet meeting lead path retraction extension path complimentary bit making tree prefix free 
complete tree path extension process tree complete 
retraction process possible side tree peers remaining branch ceases exist 
case eventually remaining branch retract find peer responsible complimentary bit similar case 
uniform replication described section storage resources devoted grid infrastructure locally adapted peers proactive manner primarily grid construction process dur ing maintenance 
number peers responsible key space approximately data uniformly replicated amounts global coordination problem 
absence global coordination information try settle compromise imbalance replica tion factors decreased measured terms variance replication factors paths achieving perfect replication load balancing 
efpl technical report ic reactive randomized distributed algorithm tries achieve globally uniform replication locally available information 
provide intuitive foundations algorithm section followed heuristic algorithm section 
evaluate algorithm realistic situation simulations describe results section 
think local act global consider case grid leaves shown 
actual number replicas belonging paths loss generality consider assumption peer ideal knowledge peers belonging path need change path achieving replication load balancing grid leaf replicas 
peers autonomous decision change path continue stay path propose randomized decision peers decide change path probability function ensures similarly define peers belong path similarly path define transition occurs probability rewrite migration probabilities case grid easy see defining transition probabilities leads equal replication factor path leaf 
course peers obtain exact probabilities estimate sampling randomly network 
situation leaf grid analytical results show small sample size randomly selected samples calculating decision probabilities described repeating sampling followed balancing cycles reduces imbalance network size independent network size initial conditions 
consider case grid leaves shown replicas paths starting respectively 
simplistic extension example captures essential choices individual peers realistic grid provides insight design replication balancing strategy encoded algorithm 
unbalanced tree simply counting peers halves level sufficient 
actual replication factor equal leaves desirable count provide biased information greater count half tree leaves 
count useless 
hand knowledge subtree practical 
fortunately knowledge necessary 
example grid leaves peers belonging path meet peers belonging paths essentially need know average peers leaf sub tree need understand shape sub tree distribution replication factor 
collecting statistical information peer meeting peer counts num path path state transition probability efpl technical report ic path bit wise local statistics load balancing decisions path replication path perceived peers global region paths local region paths path grid leaves grid leaves ber peers encountered level subtree path complementary path normalized dividing peers try see things lo cal perspective bothering larger picture decision eventually global load balance emerge 
expect sub halves tree mutually replication load balanced sub trees halves recursively achieve replication load balance 
peers think load balancing locally algorithm leads global load balancing time 
peers belonging path count number peers belonging path decide balance load levels 
example peers belonging path may decide change path achieving local load balancing 
simultaneously migrations take care balancing 
peers belonging paths obviously need change path peers belonging prioritize migrations peers perceive overloaded locally second bit participate relatively scale bit 
facet thinking locally participating actions possibly global consequence 
note changes time statistics refreshed built scratch regularly 
consider algorithm phases gathers statistics probabilistic decision change path 
example possible migrations peers path achieving global balance replication factors 
algorithm eventually converge sake completeness consider possible scenario peers belonging prioritize migrations combinations essentially belong mentioned cases reversal role paths efpl technical report ic ideas give intuitive basis path changing strategy algorithm statistics collection algorithm 
idea defined transition probabilities numerically solved changing pop ulation leaves various initial combinations give results table 
model time step peer determines transition probability complete statistics current peer population performs decision ties 
note practice replication factor integer value 
fractional values result numerical evaluation 
table number replicas time see strategy robust irrespective initial replication distribution 
keeping mind insight obtained examples grid leaves propose heuristic algorithm balancing replication load arbitrary grid 
statistics maintenance approach practice scale realistic systems impossible gather exact statistical information 
statistics gathered small constant number interactions creating sample argue noise due imperfect knowledge compensated randomization inherent reactive algorithm 
practical system perfect balancing replication factor feasible required reduction variance practical purposes 
show simulations heuristic algorithm meets practical requirements agreeable latency statistical information 
order prevent higher levels tree smaller build statistics faster lower ones algorithm algorithm passes parameter invoking statistics updated levels larger equal set recursive calls peer updates statistics level uniformly course need account depth encounter mentioned statistics collected peer increase count unit normalized algorithm efpl technical report ic balancing replication load peer determines replication factors path prefix complementary path level collecting samples level 
change path peer needed lead reduction number replicas subspace 
subspace defined keys sharing prefix 
peer determines subspace corresponding prefix level starting deepest level path length 
may proceed tree smaller 
way possible levels path changes may occur determined 
doing probabilities change performed determined statistics 
information stored tuple transition probability level data structure ideally statistical information necessarily reflect actual replication factors may lead false transitions increasing imbalance short term 
false decisions lead oscillatory behavior slows convergence process expensive terms network maintenance example frequent unnecessary repairs grid routing tables 
order reduce oscillatory behavior add heuristic design choices path change probability decreased constant terminate process fractional difference imbalance chosen simulating various values 
probability attenuated factor experiments show gives acceptable rate load balancing getting oscillations making load balancing process slow 
transition probability defined slows process avoid unnecessary oscillations apart expensive terms maintenance stress network 
grid resilient inconsistent information routing tables shown gracefully degrade 
experiences implementation section desirable conscious design efpl technical report ic choices reduce inconsistencies maintenance overhead reduced turn leads better system performance 
having determined probability changing path sort defining priority path changes level 
notation field entry descending order gives path level corresponding prioritized level gives probability path change level peer sequentially decides change path transition probability changes path exhausts peer chose continue path 
second case corresponds fact path changes lead complete changes replication factors renders statistical information useless 
imperative refresh statistics 
peer changes path accumulated samples level path 
piece jigsaw puzzle replication load balancing action changing path 
peer needs find peer complimentary path clone content data routing table statistical information case useless 
algorithm define define define define depth set tuple 
entry depth second entry probability transition probabilities sorted descending order nd field notation field entry tentative transition define define define function described algorithm clone 
abandons information copies thing reset statistics levels statistics available efpl technical report ic find appropriate path migrate part section provided intuitive reasoning determine probability peers need change path 
algorithm begins traversing path subtree choosing peer level routing table level decision change path traversing path lower level larger choosing find peer belonging complimentary path level equal probability recursively grid leaf reached current level equals latest path length 
ensures level bits chosen equal probability 
strategy works perfectly subtree balanced unbalanced subtrees bias shorter paths causing replication shorter paths 
serious problem subtree case perform load balancing 
simulations approach 
discovers entries routing table choosing possible invalid changed path entries purged 
lazy approach removing invalid entries routing tables 
may argue routing tables get depleted true entries routing tables potentially added execution algorithm algorithm 
simulations shown inconsistent due path changes pose problem 
apart routing tables may proactively updated recursively querying self contained grid directory order account peers may longer contacted offline changed physical address 
issue routing table maintenance exhaustively analyzed scope 
algorithm define select uniformly random routing table level proper routing table invalid removed routing define define define define search possible return return basic grid functions efpl technical report ic describe basic operations maintaining grid introduced algo rithms 
node join leave peer joins network needs know existing member small set peers points contact may add bias network topology structured system causing inadvertent creation backbone 
avoid bias contacts random peer grid 
peer peers described section 
data needs perform algorithm data data initially held distributed responsible peers grid 
replica random peer 
node wants leave network temporarily going offline permanently may autonomously informing peers 
behavior jeopardize grid func tionality effort peers difficult randomized con struction evolution process reduces prospects collusion 
replication grid takes care availability data maintenance multiple routing tables level guarantees availability routes high probability 
node network retains previously established path 
order searches replica grid querying path arbitrary peer 
query routed random replica peer may pull updates missed offline 
pulls multiple replicas form probabilistic quorum elaborated 
fundamental difference standard dht approaches chord pastry real world systems gnutella freenet ability evolve multiple net works independently may join common network eventually split 
possibility provided grid different networks may dynamically join soon members get touch executing operation 
search basic query routing strategy grid described section 
insertion order insert new data item grid hashed key corresponding data generated inserted forwarding relevant index information replicas responsible path may initiate update replica subnetwork described data updates 
update gnutella implicit update semantics multiple versions freenet grid system provides data updates 
grid approach sophisticated systems 
updates grid performed locating responsible peer described efpl technical report ic data insertion spreading information replicas 
grid uses hybrid push pull algorithm 
push phase uses low overhead gossiping epidemic rumor spreading algorithm convey update online replicas high probability low latency 
replica coming online replica received updates latency conducts pull obtain missed updates probabilistic quorum effects similar anti entropy distributed databases 
shown approach scale large number replicas highly unreliable environments example replicas online 
surprisingly probabilistic guarantees hold unreliable environments moderately high replication factor needed 
delete system addresses explicitly moment 
deletion seen special case data update similar mechanisms applied 
network maintenance peers may change ip addresses example moved got temporary address assigned dhcp 
problem unstructured systems critical structured systems routing tables rendered useless case 
demonstrate grid self contained self healing directory address issue 
basic idea approach peer inserts replicated mapping unique identifier current location ip address updates mapping time changes location online 
routing process exploits unique identifiers changing ip addresses 
algorithms efficient proven analytically simulations self healing capabilities 
guarantee security distributed denial service attacks impersonation 
directory additionally decentralized public key infrastructure similar pgp overcoming pgp problems 
grid routing successful high probability peers offline change location 
simulation results section presents important experiments performed justify claims illustrates behavior system algorithms described applied 
simulations aimed verifying properties algorithms previous sections 
consider modelling physical runtime environment different network topologies communication la heterogeneity processing storage capacity nodes 
simulations implemented mathematica 
efpl technical report ic optimizing replication factor balance storage balancing simulation concerns construction grid scratch maintain local global load balance simultaneously 
local global load balancing conflict shown section trade alleviated choosing proper splitting strategy extending paths discussed section peers path interact possibility immediately extend paths splitting key space 
better approach reduce splitting probability perform path extensions preferably peers paths different lengths prefix relation 
naturally slows construction indexing structure results better replication distribution reduces subsequent efforts re balancing 
demonstrate effectiveness strategy conducted experiment start peers paths empty store data items selected data set zipf distributed 
precisely data set probability data key occur increases size key distribution function correlated ordering keys 
distribution expect unbalanced tree structures difficult cases address 
peers perform exchanges till indexing structure stabilizes 
re balancing algorithm performed 
results experiment shown table 
exchanges replication replication standard dev 
replication max 
mean replication factors different paths standard deviation replication factors different paths maximum replication factor path table influence splitting probability replication path variance different number steps table due fact splitting probability higher takes steps data structure converge stable state 
increasing standard deviation replication factors increasing split probability clearly illustrates advantage strategy 
maximum replication factor outlier substantially reduced 
optimized parameter setting statistical sampling experiment explore parameter values probability changing peer paths sample size needed obtaining valid statistical estimate globally rebalancing replication algorithm 
seen damping factor 
generally expect higher values lead oscillatory behavior lower values hand low values high values substantially slow convergence 
compromise needs provide optimal behavior 
efpl technical report ic experimental setup follows generate grid randomly 
number different paths grid replication factors paths chosen randomly uniformly statistical information balancing gathered initiating peer random interactions algorithm restructuring operations performed update statistics peers perform algorithm performed rounds number peers combination absolute relative decrease variance replication factors different paths measure quality parameters 
initial experiment determine values perform significantly better slight advantage value provided best results 
second phase performed thorough evaluation reduced search space taken parameter combinations running repeated experiments combination 
relative decreases variance taken table experiment variance decrease rel standard standard deviation variance decrease experiments table decrease variance replication factors different parameters differences substantial shows method fairly robust respect choice parameters obtained experiment parameters render slightly better result 
value line analytical results mentioned section 
scalability replication factor balancing respect tree size experiment explore relationship number different paths grid rate convergence global replication balancing algorithm 
expected depth tree structure grows logarithmically number paths effort balancing expected grow linearly tree depth expected observe logarithmic dependency number different paths rate convergence performing balancing experimental setup follows randomly generate grid structures number paths interval interval generate grid properties desired experiment easily 
generated grids typically balanced 
generate replicas path uniformly randomly run balancing procedure efpl technical report ic described section restructuring grid times average peer expected participate times exchange operation updating statistics deciding change path 
decision parameters ones determined optimal section 
value experiment repeated times 
experiment reduction variance replica frequencies replicas path determined compared initial variance 
value consider measure rate convergence 
shows mean values standard deviation error bars experiment results mean values reduction variances replica frequencies associated standard deviations experiments axis logarithmic scale result clearly demonstrates expected logarithmic dependency number paths rate convergence exists 
variance replication factors experiment scalability replication factor balancing respect replication factor experiment explore relationship number replicas path rate convergence global replication balancing algorithm 
expect minimal variance ob tained balancing converged increases linearly number replicas rate convergence independent number replicas path 
experimental setup follows generate grid randomly 
number different paths grid 
generate experiment increasing number replicas choosing uniformly randomly number replicas interval performed rounds described section 
decision parameters experiment repeated times 
balancing procedure value shows resulting variance replication factors experiment 
shows mean variance experiments value included linear regression function mean values 
error bars show standard deviation variance values 
result supports assumption linear dependency variance stable state number replicas error fairly large higher values efpl technical report ic variance replication factors experiment ratio initial final variance shows ratio initial variance replication factors variance experiment 
convergence rate appears slightly improve higher replication factors 
result possibility fine grained adaptation higher replication factors 
scalability combined storage load balancing replication factor balancing experiment explore combined behavior local storage load balancing extending retracting paths time performing global replication factor balancing changing paths statistics gathered peers 
ultimate goal load balancing method propose 
main questions mind performing experiment 
adaptive method 
adapt changing load situations general 

method scale number peers balancing operations performed si 
seen methods local global load balancing scales individually want verify scalability maintained mechanisms inte 
perform experiment setup generate synthetic grid necessarily balanced 
replication factor randomly selected 
generate data set efpl technical report ic zipf distributed distribution function correlated ordering keys experiment 
data distributed different peers peer holds exactly keys pertain current path 
data load peers varies considerably peers hold temporarily data items accepted maximal storage load 
algorithms path adaptation path changes performed initiating execution algorithm randomly selected pairs peers 
exchange peers perform test perform change path executing algorithm individually 
experiment shows questions posed answered positively 
method highly adaptive extreme case scales size peer population 
give detailed results 
generated grids paths chose replication factors path peer population size 
value chosen dataset consisted approximately data keys 
demonstrate scalability executed number rounds peer setting 
chose average exchanges peer performed sufficient reach fairly stable state process 
took measures shown table 
number peers number paths replication variance data variance initial final initial final initial final variance replication factors different paths variance number data items stored peer table results combined balancing method figures show re balancing successful 
precisely look vari ances data load replication factors order measure quality load balancing 
number observations derived results 
cases data variance dropped significantly 

final variance replicas path increasing number paths 
factors explain increase 
importantly number replicas peer higher different initial situation number paths reduced result adaptation tree structure 
seen leads higher expected variance 
secondly slight increase due higher number paths higher number steps takes converge stable state 

initial data variance varies heavily 
depends degree randomly chosen grid data distribution matched 
case deduce efpl technical report ic substantial impact convergence speed restructuring take place 
doubling number interactions case replication variance drops expected value 

number interactions substantial fraction total size peer population case attribute high constant factor involved performing load balancing mechanism designed scale logarithmically number different paths 
experiments required confirm current simulation environment support substantially larger experiments 
consider single experiment simulating interactions takes approximately full day simulation time 
search efficiency experiment verify result theorem holds general grids occurring practice 
particular grids prefix free peers maintain multiple replicas occur 
experiment constructed grids peer populations exchange algorithm data distribution zipf probability occurrence monotonically increasing data key 
resulting grids heavily unbalanced 
example case path lengths vary considering peers having prefixes peers paths 
due replication number different paths grids lower size peer population performed searches computed mean standard deviation number messages searches searches terminated successfully 
give results 
experiment included curves function provides lower bound expected search cost fully balanced tree function upper bound determined theorem subclass grids highly unbalanced 
simulation efpl technical report ic shows effective search cost bounds expected 
implementation implementing algorithms java resulting grid software 
implementation earlier somewhat simplified versions algorithms completed :10.1.1.19.6221
section provide brief overview implementation interesting experiences making algorithms introduced suitable practical implementation 
system implementation aspects observations expected remain valid upgrade system versions algorithms introduced 
front main experience gained implementation large scale systems grid re quire thorough theoretical foundations analytical evaluations simulations extent need implemented tested practice 
course implementation situations occurred implementation theoretically sound efficient algorithms constructing overlay network required solutions various practical issues variable network delays thread scheduling memory consumption 
key issue implementation grid construction maintenance design protocols exchanging administrative information data distributed algorithms described 
version protocol designed simple request reply protocol peer sends request peer perform algorithm includes necessary information path routing tables data keys request 
receiver turn returns information 
exchange peers completely aware state independently perform processing pertaining state 
protocol problems amount data transferred excessively high causing high network bandwidth consumption processing cost inconsistent state changes occur peer failed processing resulting corrupted routing tables data 
problem number addressed extending protocol initial invite message allowing receiving peer decide data required processing 
example data pertaining path inviting peer situations ignored needs exchanged 
reduced message traffic dramatically particular grid stabilized 
provide portable system decided xml presentation language protocol messages allow implementors provide peer software compatible 
experienced sizes messages original protocol quite large due massive overhead involved xml 
additionally xml parser major source memory consumption dom tree built memory harmed performance system 
solved problems implementing tiny xml parser tailored requirements efpl technical report ic zip compressed protocol decreased bandwidth consumption small fraction sized original implementation 
problem number caused failing peers real world system deal limited availability peers frequent peer failures difficult tackle 
peer fails exchange process may leave system inconsistent state example peers agreed extend path peer fails doing 
words problem guarantee consistent state changes communicating peers 
problem solved mentioned invite message timeout mechanism interaction complete time considered failed effects undone 
descriptions systems assumption users know peer serve point contact join system 
assumption hold practice band mechanisms provided achieve 
example gnutella lists gnutella hosts available various web servers 
approach hard coding peers guaranteed online clearly failed approach introduced bias construction grid 
strategy proven successful peer initially contacts network selects routing tables peers online random entries performs fixed length random walks 
point random walk chosen initial entry point grid construction process 
simulated implemented strategy shown efficient provides sufficient degree randomization 
contacts peer collects large peer base randomly choose strategy maintains list peers 
second purpose peer list means increase fault tolerance provide grid additional self healing capabilities 
extreme cases holes routing table may occur due network separations extreme peer failures 
cases peers random walk searches satisfy search requests repair routing tables despite bad network situation 
approach simulated works implemented system 
typical dht overlay networks exclusively support exact match queries insufficient soon keys bear additional semantics 
grid require uniform hashing keys achieve load balance allows support prefix respectively range queries directly 
applications substring search indexed data keys typically done file sharing applications possibility satisfies minimal requirement 
addition implemented full substring search capability extracting indexing suffixes data keys 
test demonstrating grid implementation performs larger 
unexpected major effort implementation went optimizations software 
af ter solved problems described faced severe inefficiencies due java implementation platform 
experienced extreme memory consumption memory leaks inappropriate garbage collection behavior threading problems blocking requests efpl technical report ic sophisticated tested libraries doug lea excellent library multi threading 
took considerable effort profile system track causes problems experi ended re implementing major parts system eliminate inefficiencies 
fact break textbook clean design areas get problems 
resulting implementation stable consumes low memory cpu bandwidth resources 
provide impression software show major functionalities graphical user interface 
basic layout idea gui taken limewire gnutella client www limewire com recoded 
shows search interface user enter queries grid receives resulting hits grid gnutella network software connect networks parallel simplify migration 
search gui optimize search results user provide qualitative requirements minimum speed answering peer query sub string search apply full words 
search results turn provide quality service qos feedback load responding peer filtered allow user select fast peer download 
downloads initiated click operation window 
status information bottom window provides user rough state currently connected network 
detailed network state provide network tab gui shown 
user sees local path peer routing table parts tree knows 
peers routing table status information provided 
additionally screenshot shows state gnutella top network peer currently participating 
fact software include arbitrary systems grid single gui gnutella included proof concept 
related efpl technical report ic network status gui detailed overview classification current approaches systems structured unstructured hierarchical 
focus specific issues load balancing replication systems 
data replication systems distinguish different methods employed de pending mechanism initiate replication partially classification owner replication data object replicated peer successfully located query 
form replication occurs naturally file sharing systems gnutella unstructured napster hierarchical kazaa super peers peers implicitly available users data downloaded feature turned user 
path replication data object replicated search path traversed part search 
form replication freenet routes results back requester search path order achieve data clustering effect accelerating searches 
strategy applicable unstructured networks order replicate data aggressively 
random replication data object replicated part randomized process 
unstructured net works shown random replication initiated searches implemented selecting random nodes visited search process superior owner path replication 
controlled replication data objects actively replicated pre defined number times inserted network 
approach strongly coupled networks chord pastry 
distinguish principal approaches efpl technical report ic fixed number structured networks constructed parallel multiple peers associated overlapping parts data key space 
approach adapt replication changing environment variable resource availability 
adaptive replication replication process aims uniformly exploiting storage resources available peers trying achieve uniform distribution replicas data object data object approximately number replicas exist 
approach grid 
replication index information applied structured hierarchical networks 
super peer approach shown having multiple replicated super peers maintaining index information increases system performance 
structured networks typically maintain multiple en tries routing path alternative routing paths hand case referenced node fails 
respect load balancing structured systems dht systems works reported 
systems apply uniform hashing exploit structure key space search deal moderate load balancing problems imbalance order 
non uniformly distributed data keys proposed order preserving hashing function data sampling improve load balance approach applicable fairly stable load distributions 
load balancing strategy dhts chord proposed 
order provide load balancing multiple constant number hash functions multiple peers close key generated chosen 
multiple possible peers load stores data item store pointer peer 
data item creates different sets hashed keys essentially redirections need maintained data item 
means scheme scale number data items 
adaptation particular peer overloaded transfers data redirecting peers adds redirecting pointer increasing number redirections 
mechanisms redirections imply chord original search algorithm longer works 
essentially approach ends maintaining multiple chord overlays physical peers chord networks interconnected unpredictable manner running risk loosing efficiency 
extension proposed uses shortcuts called forwarding queries non neighboring zones 
resulting access structure essentially binary search tree resembles grid underlying access structure 
compared queries faster individual peer load forwarding queries shown balanced typical behavior shown grid 
load balancing scheme chord introduced notion virtual servers 
physical node support multiple virtual servers 
overloaded nodes strategies moving efpl technical report ic virtual servers underloaded nodes discussed 
nodes responsible split data space keep load virtual server bounded 
splitting strategy similar splitting storage load balancing strategy consider effects replication search efficiency 
authors mention negative effects search efficiency approach 
substantial distributed data access structures performed area distributed databases scalable data access structures 
apparently relevant existing approaches apply different physical application environment 
databases distributed moderate number fairly stable database servers workstation clusters 
reliability assumed high replication selectively dealing exceptional errors 
central servers realizing certain coordination functions network considered acceptable execution guarantees deterministic probabilistic 
distributed search trees constructed full partitioning principle scalable replication routing information higher tree levels originally published exceptions 
believe current stage potential applying principles developed area systems fully exploited 
key success factor systems application principle resource sharing key charac lack central control 
proposed complete solution approach enabling fair efficient resource sharing structured networks 
approach includes distributed data structures algorithms supporting efficient search self organizing load balancing mechanisms evaluation simulation practical implementation 
enable fair distribution load local load balancing optimized usage available resources global load balancing 
infrastructure introduced intended basis higher level services systems particular enabling trusted interactions 
examples decentralized services currently investigating identity management reputation management document ranking 
karl aberer 
grid self organizing access structure information systems 
proceedings sixth international conference cooperative information systems coopis 
karl aberer 
efficient search unbalanced randomized peer peer search trees 
technical report ic ecole polytechnique rale de lausanne epfl 
efpl technical report ic karl aberer 
scalable data access systems unbalanced search trees 
proceedings th workshop distributed data structures 
karl aberer manfred hauswirth 
practical handbook internet computing chapter peer peer systems 
crc press 
published 
karl aberer manfred hauswirth 
self organized construction distributed access structures comparative evaluation grid freenet 
proceedings th shop distributed data structures 
karl aberer manfred hauswirth roman schmidt 
improving data access systems 
ieee internet computing jan feb 
adar huberman 
free riding gnutella 
monday 
firstmonday 
org issues issue adar index html 
john byers jeffrey considine michael mitzenmacher 
simple load balancing distributed hash tables 
nd international workshop peer peer systems iptps 
ian clarke theodore hong scott miller oskar sandberg brandon 
protecting free expression online freenet 
ieee internet computing jan feb 
ian clarke oskar sandberg brandon wiley theodore hong 
freenet distributed information storage retrieval system 
designing privacy enhancing technologies international workshop design issues unobservability number lncs 
datta hauswirth aberer 
updates highly unreliable replicated peer peer sys tems 
proceedings icdcs 
datta manfred hauswirth karl aberer 
web trust enabling commerce 
ieee conference electronic commerce cec 
datta manfred hauswirth karl aberer 
updates highly unreliable replicated peer peer systems 
rd international conference distributed computing systems icdcs 
manfred hauswirth datta karl aberer 
handling identity peer peer systems 
th international workshop mobility databases distributed systems conjunction th international conference database expert systems applications dexa 
kr ll widmayer 
distributing search tree growing number processors 
acm sigmod conference pages 
efpl technical report ic litwin neimat schneider 
rp family order preserving scalable distributed data structures 
vldb pages 
litwin neimat schneider 
lh scalable distributed data structure 
acm transactions database systems 
litwin schwarz 
lh rs high availability scalable distributed data structure reed solomon codes 
sigmod conference pages 
qin lv pei cao cohen kai li scott shenker 
search replication unstructured peer peer networks 
international conference supercomputing 
plaxton rajaraman richa 
accessing nearby copies replicated objects distribute environment 
th annual symposium parallel algorithms architectures 
rao lakshminarayanan surana richard karp ion stoica 
load bal structured systems 
nd international workshop peer peer systems iptps 
ratnasamy francis handley karp shenker 
scalable content addressable network 
acm sigcomm 
antony rowstron peter druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
lecture notes computer science 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
acm sigcomm 
beverly yang hector garcia molina 
improving search peer peer networks 
proceedings nd international conference distributed computing systems icdcs 
miyazaki 
fat btree update conscious parallel directory struc ture 
international conference data engineering pages 
zheng zhang shu ming shi jing zhu 
self balanced expressway meets 
technical report msr tr microsoft research july 

