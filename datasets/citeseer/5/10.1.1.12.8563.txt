architecture network monitor andrew moore james hall christian harris ian pratt university cambridge computer laboratory jj thomson avenue cambridge cb fd united kingdom firstname lastname cl cam ac uk describes system simultaneously monitoring multiple protocols 
performs full capture implements line analysis compression record interesting data loss information 
accept balance maintained system disk bandwidth cpu capacity order perform monitoring full line rate 
architecture detail measure performance sample implementation 
index terms passive network monitoring full line rate capture multi protocol analysis current technologies passive monitoring networks limited part tcp ip flow 
intrusion detection systems idss perform pattern matching reconstructed data flows processing modeling state real time rare 
state information tcp ip higher level applications possible infer network properties loss round trip time characteristics network transport layer system applications 
network monitoring architecture currently able interface gbps full duplex networks 
approach perform multi protocol analysis requires capture data line 
integrated analysis application transport network protocols allows interactions studied 
additionally association transport network state allows data reduction transforming capture disk problem tractable trade line processing disk bandwidth 
system successfully operated carrier grade networks commodity hardware potential economical mass deployment 
related passive network monitoring seen number previous approaches 
evolution approaches spawned growth network speeds 
examples monitoring include packet capture tcpdump libpcap 
specialist hardware seen important application oc mon dag demonstrated part packet capture rates gbps 
additionally new projects area getting underway european architectural design data capture magnet 
magnet monitoring mechanism exporting kernel events user space 
project uses instrumentation kernel transport stack provide insight network characteristics application behavior 
expect systems magnet limited deployment need instrument operating system 
aside approach monitor systems allow multi protocol analysis windmill blt 
windmill probe architecture designed reconstruct application level protocols relate underlying network protocols 
blt extracts full tcp partial level packet traces 
contrast design blt uses tape storage windmill exports data collection 
approaches trade offs complexity limited capture rates allow continuous collection trace information 
design constraint architecture outset disk capacity alleviated high data reduction rates 
provision disk capacity sufficient record hour traces diurnal traffic cycles cater adequately majority studies longer periodic variations traffic handled repeated traces 
additionally common carrier practice operate transmission capacity substantially lower maximum rate means system handle full rate traffic bursts course long capture runs capture mean total line rate capture 
windmill blt approach incorporates packet filter scheme 
windmill blt implement coarse grained data discard kernel application packet filtering contrast filter architecture relatively simple serves different purpose support scalability described section ii 
idss snort perform online capture analysis 
modules snort stream allow inspection packet state subsequent reassembly tcp streams reassembly module theoretical capability handle simultaneous streams 
ids signature pattern matching different problem multi protocol analyzer 
approach tool performs analysis tcp ip application protocols includes providing timing relationships events snort ids objective performing fast string matching packets capturing packets interest 
drawn prototype called 
monitor number studies study web traffic 
remainder structured follows section ii presents probe architecture detail 
section iii describes testing methodology traffic preparation hardware setup followed performance evaluation 
section iv discusses results section summarizes 
motivation ii 
architecture constraint design outset desire capture data different levels network stack network transport application practical 
low speed network solution capture disk consisting tcpdump type program combined significant quantity line processing 
limits bandwidth disk need improved time stamping combined substantial scope increasing speed generalpurpose cpu prompted alternative approach 
order capture data network transport application level approach incorporates components 
recognition considerable redundancy network data network packet network packets 
application simple loss compression systems long improve performance mechanisms high speed modems ample scope exists compressing captured data manner 
clear trading relationship exists amount cpu required proportional degree compression bandwidth disk 
possible consume available disk cpu resources sufficiently large quantity data modest requirements limiting factor tends pci bus bandwidth 
discard best form compression considerably compression achieved performing extraction captures significant interesting information 
way capture web traffic involve recording minimum tcp ip header information transaction transaction 
data retrieved object relevant discarded protocol operations interest 
significant margin compression technique 
clearly exchange raw bandwidth disk architecture able recognize packets belong flow interest order perform compression 
architecture performs real time protocol feature extraction reassembled tcp flows carrier scale considered central contribution 
addition application specific compression approach includes method bandwidth splitting multiple machines order share workload 
single monitor bandwidth disk available cpu ultimately prove bottleneck 
load splitting approach propose hard upper limit amount network traffic particular ip host host pair responsible bandwidth able managed single monitor 
wider public internet common research academic networks consider acceptable design decision 
imposition mean system suited unusual situations gbps networks carrying single traffic flow 
worst case splitting approach traffic single ip host host pair may striped number monitor machines 
approach reduces disk problem line analysis possible network transport application flows 
approach xor product addresses ip host host pair input filter traffic monitor 
filtering performed network interface discarded packets cause load monitor cpu pci disk buses 
approach means monitor see traffic particular flow subject network transport application compression mentioned 
rare deployments required load balancing monitoring machines unusual quantities traffic detected particularly connected hosts 
process easily detected resource overrun monitor solution compute appropriate filter table monitors 
ip addresses reallocated making process iterative noted iteration long time scale months years matches timescale new servers routers 
architectural overview illustrates principal components arrangement architecture 
implementation built gnu linux operating system modified improve behavior asynchronous system call writing data log files disk 
modify firmware network interface card nic provide highresolution time stamps described section ii packet filtering ability described section ii 
state data log buffer raid file system method state attachment control thread html state pool rtsp tcp ftp ip mac rx buffer pool filter network interface dns nfs udp icmp time stamp user network icp kernel packets extracted data state fig 

principal components architecture approach includes stages packet capture packet processing data storage 
buffering stages accommodates burstiness packet arrivals variations packet processing data storage rates 
packets arriving network simple filter place nic firmware passing filter time stamped transferred kernel memory receive buffer pool processing 
monitoring machine receive buffer pools associated user level process mapped address space 
process presents packets held receive buffer pool series protocol modules extract required data packet situ 
modules finished packet buffer returned re network interface driver 
modules generally designed process return buffers fifo order useful hold buffer example module parsing flow re ordered due loss 
held buffers quickly reclaimed system fashion number available network buffers drops threshold 
data extraction normally dependent context provided processing preceding packets 
context held state attached packet processed 
extracted data temporarily stored part attached state 
packet associated series processed extracted data held state copied output log buffer sufficient data accumulated written large raid disk 
architecture employs protocol specific modules turn define data stored data ought discarded 
module principle data compression achieved discard data objects 
module fingerprints object crc hash packets memory objects saved 
hashes allow recognise data object different urls 
capture approaches providing data processing system 
capture data line data provided directly processing system wire 
standard mode operation 
second approach provide processing system trace captured line 
line capture mode modified nic firmware prepends accepted packet arrival time stamp generated clock card 
way inaccuracy due latency packet arrival processing eliminated 
clock provided nic currently implementation provides timing accuracy precision approximately millisecond vulnerable temperature drift 
packets processed nic generated time stamps periodically compared system clock current nic clock frequency calculated elapsed time current offset real time noted 
packets drawn receive buffer pool parameters calculate accurate real time arrival stamp 
periodic comparison nic generated time stamps system clock small number repeated readings order identify eliminate inaccuracies may arise result intervening interrupt handling 
time stamps generated way relative accuracy microseconds absolute accuracy determined system clock accuracy typically milliseconds network time protocol 
precision sufficient accurately measure serialization times backto back packets network bandwidths gbps order serialization times minimum size packets bandwidths mbps small octet packets bandwidths gbps 
line file input mode operation processing system alternative drawing packets receive buffer pool read tcpdump format trace file 
facility provided development purposes useful ability apply data extraction analysis traces collected tcpdump course limitations tcpdump apply 
ability read packets tcpdump trace files investigating data processing failures case offending packets dumped error log 
value system anomalies seen may analyzed leisure exceptions having caused automatic generation packet traces may input development feedback loop program code cope observed exceptions 
tcpdump format chosen allows examination error log files tcpdump particular packet filter select packets display extraction error type possibly combination criteria 
scalability recognized ability monitoring system keep pace packet arrivals insufficient point due increasing traffic volumes 
log buffer log buffer cpu process raid file system cpu process rx buffer rx buffer filter nic monitor filter nic fig 

system scalability log buffer log buffer cpu process raid file system cpu process rx buffer rx buffer filter nic monitor filter nic applies equally available processor cycles memory access times bus bandwidth 
scalability implementation striping packets multiple processes possibly running multiple monitors capacity individual pc monitors may purpose designed hardware relatively low cost employment monitoring clusters attractive proposition 
striping may alternatively form coarse grained data discard order collect sample total network traffic discarding sub set total stripes 
filter employs valued hash packets xor source destination ip addresses distributing traffic processes dealing specific aggregated bi directional sub set total 
filter implemented firmware monitor nics accepted packets transferred receive buffer pool associated individual process rejected packets dropped placing load monitor pci bus 
multiprocessor monitor machines employed process run processor exploiting affinity flows processors 
throughput required exceeds possible single machine multiple monitors may deployed forming monitoring cluster 
cluster multiple cpus monitor multiple monitors illustrated 
achieve full analysis relationship flows additional offline processing required merge data captured multiple monitoring systems 
limitation imposed approach monitor deal traffic single host host flow exceeds capacity 
justification limitation public carrier deployment experience involved major uk isp provides dial cable modem access kbps mbps 
due limit hop link capacity architecture limits host host data rates single monitor system comfortably process quite reasonable design decision 
limit preclude monitor unusual situations gbps networks carrying single traffic flow 
state data management format design control far possible data driven packets passed protocol processing module content packet processing loop driven presence packets receive buffer pool data copy state log buffer triggered processing final packet associated sequence 
control processes introduced exception infrequently called file management thread adding minimal overhead 
implementation avoids memory copy penalties kernel memory mapping facility map receive buffer pool directly user level packet processing process es address space memory mapping output files 
data extraction processing carried packets situ 
describe number data structures implement approach convey carefully architected system capable simultaneously processing carrier grade numbers concurrent tcp ip flows 
data association unit dau sequence packets having semantic functional continuity levels protocol stack data extracted aggregated associated 
current dau corresponding state storage unit ssu holding state information 
way state data identified initialized managed single unit data transferred efficiently single continuous block memory 
continual birth death gives rise high turnover associated 
create pool various ssu structures monitor activated draw required 
pool organized stack maximize locality 
new packet sequences encountered new ssu drawn pool entered hash list ip addresses port numbers provides efficient location ssu 
hashing strategy stage ip addresses port numbers 
option associate multiple connections single flow provided 
flexibility degree type data collected packets reflected ssu 
state data vary studies requirements specific protocol 
additionally appropriate chaining dau ssu allows associations data established example allowing speedy processing multiple transactions tcp connection 
size data fields ssu may statically dynamically determined 
numeric abstracted data stored numerical data types known size mechanism storage variable sized data alphanumeric url field request header required 
demands efficient packet processing preclude exact memory allocation data instance trade allocating sufficient space accommodate large requirements making heavy demands available memory 
count length kept ensure data opposed size statically allocated buffers logged 
timing data central studies described section ii packet time stamps provided precision 
time stamps recorded bit unsigned integer overflow period little hour 
wrap rounds may inferred significant time stamps tcp connection open times recorded bit quantities epoch time 
line processing data produced implementation collected pre defined format format varies depending data captured 
order output data easily manipulated storage formats maintained 
creates interfaces offline processing systems may access logged data structures 
automatic compile time creation interfaces log files enables rapid prototyping programs able retrieve data log files 
majority line processing done python language suited rapid prototyping 
python interpreted language impact processing performance minimal restricted line processing phase 
protocol modules part overview architecture illustrated principal components arrangement 
notably protocol network transport application layers separate module 
current implementation majority ip tcp html modules 
modules may shared interconnection example ip tcp modules held common large number applications 
initial implementations protocol modules ftp dns additionally early version nfs module described previous publication 
addition new protocol modules architecture centers construction number methods activated packet arrival 
existing architecture hierarchy allows easy additions simple protocol module may cause matching packets logged bytes packets counted packets discarded outright 
contrast complex methods may elect provide packet data higher level protocols tcp flows providing data processing tcp performing data reassembly 
direct result logging data structures central design construction module interfaces simultaneously construct line data interfaces 
result adding modules architecture incremental process adding functionality required 
combined iterative debugging process described section ii development new module quite straight forward 
iii 
testing results order test system reliably set network environment allowed expose probe varying traffic patterns controlled manner time enabling recreate realistic traffic characteristics 
architectural aspects order get clear idea implementation performance created test cases specifically exercised potential bottlenecks 
evaluation covered aspects system components tests evaluated capacity systems involved moving data network disk nic hardware hardware software involved moving data nic process mechanisms moving data local disk 
certain assumptions hierarchy bottlenecks architecture assumptions imposed hardware 
module performance evaluation protocol modules focused tcp ip html modules 
modules perform significant impact system performance 
addition tcp ip checksumming interpreter computes fingerprint form md hash html object allows individual objects identified regardless url accessed 
operations significant overheads total system selectively tested purpose built input traffic 
total system performance investigated system performance implementation observing behavior exposing increasing volumes typical traffic mixture observed laboratory network 
measured performance system ip traffic 
test traffic preparation basic input traffic experiments consisted full packet capture laboratory traffic collected weekdays 
packet data generated sets traffic allow testing specific bottlenecks implementation fig 

generating sequence individual transactions sequence transactions overlap selected small complete transaction consisting packets captured traffic concatenated transaction massively resulting trace reached pre determined size 
instance connection assigned different ip addresses requests appear individual instances 
illustrates process 
fig 

generating overlayed transactions sequence transactions overlayed test probe behavior keep state selected large transaction occurred traffic 
build state multiple instances connection overlayed packet packet unique ip addresses resulting overlays 
illustrates process 
repeatable ip traffic test probe general performance normal mixture ip traffic generated input traces preserve realistic traffic characteristics eliminating unwanted side effects replayed repeatedly 
captured traffic host basis looking traffic entering leaving lab 
doing removed incompletely captured tcp connections avoid unrealistic state building inside probe probe designed time flow records memory low rarely happens normal operation major network re routing occurs 
created trace files host traffic sampling full range available host traffic volumes 
test setup required considerably traffic directly obtained methods described duplicated traces necessary moving range ip addresses clone individual range 
replaying avoided artificial traffic duplication 
tools necessary traffic manipulations written plugins traffic editor provides higher level api kinds operations compared handwritten libpcap applications 
test environment probe tested traffic load generated cluster pcs attached pair highperformance ethernet switches 
testbed replay previously recorded real network traffic controllable rate megabits second 
initial experience utility indicated poor performance due packet overheads solution create replacement enabled line near line performance 
prepared traffic files distributed machines replayed traffic testbed 
hardware cluster machine modest node generating mbps sustained traffic traffic multiplexed fiber link source machines data rates gbps achieved directions 
probe inserted fiber link switches optical splitter diverted small percentage light fiber pair nics probe 
coarse grained control traffic volume obtained adding removing source nodes cluster finer grained control possible controls offered replay program running node 
traces evaluate performance network interface sk sx monitor system intel xeon ghz kb intel motherboard gb ddr sdram bit mhz pci bus ware series ata raid card providing hardware raid top ibm gb rpm drives 
results illustrated section iii tests designed evaluate particular aspect system performance 
sections describe tests detail results measurements 
component performance traces evaluate performance system hardware 
performance determined maximum data rates observed just prior packet loss monitor 
results table clearly illustrates small packets disastrous impact system performance 
noted network interface earlier com performance lower card clear bottleneck small packets 
contrast sk sx bottleneck large number interrupts generated pci bus 
interrupt coalescing performed driver card clearly area 
directly comparable system compared implementation performance tcpdump system commonly capturing network traffic 
packets captured tcpdump cross kernel user space boundary network code optimized day day operations transmit receive 
module performance test cpu usage modules traces containing overlays large transactions described section iii 
number trace files multiplexed increasing quantity cpu perform 
packet loss cpu exhaustion occurred traffic load exceeded mbps single monitor 
large transaction input system bottleneck moved network interface card pci bus cpu transfer large data item dominated large packets 
particular limit solved faster cpus byte byte live mix mbps tcpdump examine discard tcpdump capture disk examine discard capture disk table maximum traffic rates fixed size packet traces live mix representing typical traffic 
small variation multiple cpus single cpu performance provides important base result 
section ii details state data management performed architecture 
clear restriction total amount traffic processable number tcp ip html state engines required exist simultaneously 
limits number concurrent tcp flows may reconstructed number html flows may concurrently processed 
limitation ought imposed hard limit size state data records total quantity memory available monitor create state data records 
test architecture implementation achieve flows mbps 
anticipate performance barrier may imposed cpu memory interface clear system bound disk pci bus speeds 
conjecture may proved dual processor system improved cache anticipated improve performance 
second test architecture implementation rate state data records released reused functions clearly important carrier grade monitoring may observe hundreds thousands new flows second 
tested aspect traces containing sequences non overlapping small transactions described section iii 
previous case individual flow unique hosts result trace file represents near individual transactions unique host pairs 
system able manage transactions second mbps 
investigating results value due aspects system performance cpu starvation limit performance impacting systems ability manage manipulate large number state data records 
total system performance final results describe total system performance mean packet size live traffic mix 
monitoring variable quantities typical network traffic just flows carrying data 
mentioned sample typical traffic recorded gbps link large academic research organization internet 
difficult compare performance different traffic types extended experience system deployed national backbone major public uk isp 
experience combined deployment experience department institution national research network levels provided sufficient confidence operation system 
test trace consisted tcp packet byte volume 
tcp ip traffic turn consisted packet byte 
percent traffic clearly dominated packet basis accounts half total number bytes transmitted 
multiplexed traces access traffic single research academic department find probe able keep traffic intensities bursting mbps measured second interval 
note probe sustainable link rate slightly disappointing mbps 
significant cause performance limit trace mean packet size just octets 
leading packet rate packet overhead analysis code network interface detrimental performance 
going profiling tuning attempting address bottleneck 
experiments superficially similar traffic laboratory trace input level pre processing removed non traffic 
difference traffic seen monitor consisted tcp ip packets carrying transactions 
results mbps mean bytes packet indicated parts implementation aside limitations come play 
investi gation indicated object fingerprint function consuming cpu 
error indicate fingerprint function dominating cpu consider combination events file system activity stream assembly data structure overheads hashing functions contribution 
believe scope thorough optimization prototype implementation results encouraging validate approach 
iv 
discussion section iii described experiments illustrate limitations imposed hardware limitations fundamental current implementation 
clear important area optimize hardware software behavior faced large numbers small packets 
area note limitation imposed disk bandwidth scope exists testing exotic disk sub system solutions 
upper value achieved largest packets lowest packet overhead writing data disk indicates issue focus 
noted pci bus common point congestion tests 
pci bus bandwidth bit mhz ought sufficient raw capacity limit imposed due device contention network interfaces monitoring direction due bus transaction overheads 
scope exists investigate faster pci bus implementations explore unusual network interface card designs multiple transceivers sharing pci interface 
tests section iii illustrated bounds imposed non custom commodity hardware 
suggest solution faster hardware scope code optimization 
furthermore multiple cpu common place multiple cpus described section ii avenue investigation 
tests indicate current implementation sound 
interesting comparison may performance capturing traffic disk performing analysis compression system 
section iii describes system performance analyzing recording typical traffic mixture 
comparison raw throughput tests section iii mbps somewhat disappointing performance tuning cluster machines enable achieve gbps target 
full operation provided small gain mbps operating capture disk substantial quantity line processing performed captured traffic reducing storage requirements line workload 
approach may reconsider precise split workload line line processing 
fundamental principle project commodity hardware 
short term may added difficulties inherent monitoring high speed networks long term placed reap rewards continuous innovation performance improvements commodity hardware industry 
particular examples increases cpu power governed moore law improvements commodity nics appear follow similar trend 
advances prove inadequate modular architecture sufficiently flexible allow incorporation exotic technologies network processors 
offloading tcp reassembly fingerprinting devices particularly attractive 
ambition discuss software hardware architecture network monitor systems encompass realworld issues management security 
architecture outlined potential full complete record users network utilization clearly privacy issues user security issues data monitor access 
monitor module able provide crude anonymity prefix preserving re mapping ip addresses 
consider schemes data management offer accommodation privacy security legal constraints important aspect 
summary architecture developed perform traffic capture processing full line rate packet loss 
performing line capture allows application specific processing application specific compression 
combined powerful line processing interface approach perform full capture disk interesting traffic features remains capable monitoring high speed networks 
additionally demonstrated architecture achieves monitoring traffic separation filtering 
alongside presentation network monitoring architecture documented performance evaluation current implementation 
implemen tation shown perform areas enhancements identified 
aside studies network traffic project concentrate improving implementation monitoring architecture 
particular emphasis enhancing application processing systems allow processing common network applications allow interaction applications network transport protocols studied 
additionally extending system gbps operation currently planning test environments development evaluation 
acknowledgments specific tim granger ian leslie derek mcauley johnson brooks phil cross 
intel research cambridge providing access network test facilities 
acknowledge valuable feedback provided anonymous reviewers colleagues university cambridge computer laboratory 
liu crovella loss pairs discover network properties acm internet measurement workshop nov 
hall pratt leslie non intrusive estimation web server delays th annual ieee conference local computer networks tampa fl march 
mogul efficient workstations passive monitoring local area networks proceedings acm sig comm pa sept 
tcpdump libpcap www tcpdump org 
claffy thompson wilder oc mon flexible affordable high performance statistics collection graham donnelly martin cleary nonintrusive accurate measurement unidirectional delay delay variation internet proceedings inet conference july 
scalable monitoring platform internet university collaboration mar www org 
gardner feng hay monitoring protocol traffic magnet passive active measurement workshop fort collins colorado 
malan jahanian extensible probe architecture network protocol performance meas proceedings acm sigcomm conference applications tec architectures protocols computer communication 
acm press pp 

feldmann blt bi layer tracing tcp ip www computer networks vol 
pp 

moon tobagi diot analysis measured single hop delay operational backbone network proceedings ieee infocom new york ny june 
martin chris green snort open source network intrusion detection system nov www snort org 
hall ian pratt moore effect early packet loss web page download times passive active measurement workshop pam apr 
cottrell tcp stack measurements slac stanford edu monitoring bulk fast 
mills rfc network time protocol version mar 
simplified wrapper interface generator jan www org 
hall crosby leslie black comparative study high speed networks proceedings th uk computer telecommunications performance engineering workshop september pp 

network dump data editor sf net 
sf net 
www org tools 
