unified peer peer database framework application scalable service discovery wolfgang hoschek cern division european organization nuclear research geneva switzerland wolfgang hoschek cern ch large distributed system spanning administrative domains data grid desirable maintain query dynamic timely information active participants services resources user communities 
database system set information tuples universe partitioned distributed nodes reasons including autonomy scalability availability performance security 
obvious enable powerful discovery query support collective collaborative functionality operate distributed system part 
obvious allow search results fresh allowing dynamic content 
appears peer peer database network may suited support dynamic distributed database search example service discovery 
take steps unifying fields database management systems computing far received considerable separate attention 
extend database concepts practice cover search 
similarly extend concepts practice support powerful generalpurpose query languages xquery sql 
result devise unified peer peer database framework unified sense allows express specific applications wide range data types node topologies query languages query response modes neighbor selection policies pipelining characteristics timeout scope options 
generation large collider lhc project cern european organization nuclear research involves thousands researchers hundreds institutions spread globe 
massive set computing resources necessary support data intensive physics analysis applications including thousands network services tens thousands cpus wan gigabit networking petabytes disk tape storage 
collaboration viable decided share global joint effort european datagrid edg data locally available resources participating laboratories university departments 
grid technology attempts support flexible secure coordinated information sharing dynamic collections individuals institutions resources 
includes data sharing includes access computers software devices required computation data rich collaborative problem solving 
advances distributed computing necessary increasingly possible join loosely coupled people resources multiple organizations 
enabling step increased grid software execution flexibility immature web services vision distributed computing programs longer configured static information 
promise programs flexible powerful querying internet databases registries runtime order discover information network attached third party building blocks 
services advertise related metadata databases enabling assembly distributed higher level components 
example data intensive high energy physics analysis application sweeping terabytes data looks remote services exhibit suitable combination characteristics including network load available disk quota access rights quality service monetary cost 
generally distributed system desirable maintain query dynamic timely information active participants services resources user communities 
data integration system goal exploit independent information sources single source 
large distributed database system spanning administrative domains set information tuples universe partitioned distributed nodes reasons including autonomy scalability availability performance security 
obvious enable powerful discovery query support collective collaborative functionality operate distributed system part 
obvious allow search results fresh allowing time sensitive dynamic content 
appears peer peer database network may suited support dynamic distributed database search example service discovery 
idea follows 
centralized database distributed framework exist autonomous database nodes maintaining data 
queries longer posed central database recursively propagated network database nodes results collected send back client 
key problems detailed architecture design options database searching 
response models return matching query results 
query processor organized 
query types answered efficiently network 
query types potential immediately start piping early results 
maximum results delivered reliably time frame desired user query type support pipelining 
loops detected reliably timeouts 
query scope exploit topology characteristics answering query 
devise unified database framework general purpose query support large heterogeneous distributed systems spanning administrative domains 
precisely devise framework unified sense allows express specific applications wide range data types node topologies query languages query response modes neighbor selection policies pipelining characteristics timeout scope options 
take steps unifying fields database management systems computing far received considerable separate attention 
extend database concepts practice cover search 
similarly extend concepts practice support powerful general purpose query languages xquery sql 
result answer questions proposing called unified peer peer database framework 
organized follows 
section introduces query data database model 
related orthogonal concepts logical link topology physical node deployment model discussed 
definitions proposed clarifying notion node service fat thin ultra thin networks commonality network network service discovery 
agent model proposed compared model 
timeout mechanism reliably detect prevent query loops proposed 
section characterizes detail techniques return matching query results originator routed response direct response routed metadata response direct metadata response 
discuss extent network mandate particular response mode system 
section unifies query processing centralized distributed databases 
theory query processing queries recursively partitionable proposed directly reflects basis scalability potential 
definition properties simple medium complex queries clarified respect recursive partitioning 
established extent simple medium complex queries support pipelining 
section proposes dynamic abort timeouts policy exponential decay halving 
ensures maximum results delivered reliably time frame desired user query support pipelining 
established loop timeout static 
section uses concept query scope navigate prune link topology filter attributes deployment model 
indirect specification scope neighbor selection timeout radius detailed 
section compares existing research results 
section concludes 
outline interesting directions research 
background database model topology node holds set tuples database 
database may accepts queries query model returns results data model see 
example introduced registry node service discovery maintains hyperlinks cache content pointed links 
content provider publish hyperlink turn enables registry third parties pull retrieve current content 
remote client query registry xquery language obtaining set tuples answer 
illustrates registry node content providers clients 
distributed database framework exist nodes 
node operate autonomously 
node holds set tuples database 
database belongs single node 
flexibility databases nodes may deployed arbitrary way deployment model 
example number nodes may reside host 
node database may located node 
databases nodes may just stored single central data server 
clients registry content providers query re publish retrieve clients registry content providers 
set tuples universe partitioned nodes reasons including autonomy scalability availability performance security 
nodes interconnected links arbitrary way 
link enables node query node 
link topology describes link structure nodes 
centralized model single node 
example service discovery system link topology tie distributed set administrative domains hosting registry node holding descriptions services local domain 
link topology models covering spectrum centralized models fine grained fully distributed models envisaged single node star ring tree semi hierarchical graph models 
real world distributed systems complex organization simple topology 
combine topologies hybrid topology 
nodes typically play multiple roles system 
example node centralized interaction part system part hierarchy part 
depicts example topologies 
example link topologies 
clearly nodes topology equal 
example node bandwidth may vary orders magnitude kbps mbps latency orders magnitude availability orders magnitude 
stress means justifiable advocate graph topologies irrespective application context requirements 
depending context topologies merits drawbacks terms scalability reliability availability content coherence fault tolerance security maintainability 
structural perspective graph topology general able express conceivable gies 
goal support queries generally independent underlying topology discusses problems arising graph topologies 
problem solution applies graph applies topology 
course simpler efficient solution may exist particular topology 
results help enable graph topologies appropriate require mandate 
query data model introduced dynamic data model discovery 
general purpose data model operates tuples 
briefly tuple annotated multi purpose soft state data container may contain piece arbitrary content allows refresh content time 
content structured semi structured data form arbitrary formed xml document fragment 
individual tuple may need schema xml schema case valid schema 
tuples may need share common schema 
flexibility important integration heterogeneous content 
examples content include service description expressed wsdl file picture current network load host information stock quotes discussion uses examples term tuple substituted concrete term service description 
consider example tuple set tuple link registry cern ch type service ctx parent ts tc ts ts content service interface type org interface presenter operation name xml name bind verb get url https registry cern ch operation interface interface type org interface xquery operation name xml query xquery query name bind beep url beep registry cern ch operation interface service content tuple tuple link cern ch id type service ctx child ts tc ts ts tuple general purpose query model intended read search 
insert update delete capabilities required addressed 
defined capabilities 
query formulated global database view insensitive link topology deployment model 
words query set tuples appears single homogenous database set may recursively partitioned nodes databases 
means relational xml environment global level set tuples appears single large table xml document respectively 
query scope hand navigate prune link topology filter attributes deployment model 
searching primarily guided query 
scope hints necessary 
query evaluated set tuples 
set turn specified scope 
conceptually scope input fed query 
query scope set may contain tuples universe 
consider example discovery queries simple query find available services 
simple query find services implement replica catalog service interface cms members allowed binding replica catalog operation xml string lfn 
simple query find cms replica catalog services return physical file names logical file name lfn suppress starting ftp 
medium query return number replica catalog services 
complex query find execution service storage service pairs services pair live domain 
job wants read write locally 
detailed discussion wide range discovery queries representation xquery language detailed motivation justification see prior studies 
definitions service node clarify notion node service 
service exposes functionality form service interfaces remote clients 
example services echo service job scheduler replica catalog time service gene sequencing service language translation service 
node service exposes functionality service interfaces publication queries 
examples hyper registry introduced prior studies gnutella file sharing node extended job scheduler 
put way service happens support publication query interfaces node 
implies node service 
imply service node 
nodes part topology services support required interfaces 
usually services nodes 
networks services nodes 
services nodes 
propose speak fat network 
typically large powerful services nodes enabling publication queries 
example backbone network large registry nodes ties administrative domains hosting registry node local domain services publish discovered depicted left 
services shown small edges part network 
services nodes 
propose speak thin ultra thin network 
example network millions small services having proprietary core functionality replica management optimization gene sequencing multi lingual translation actively network searching discover replica catalogs remote gene mappers language dictionary services actively contributing search capabilities depicted right 
fat left ultra thin right peer peer network 
difference scenarios terms technology 
discussion applicable ultra thin thin fat networks 
simplicity exposition examples illustrate ultra thin networks service node 
network vs network service discovery kind network nodes may publish nodes forming topology 
network service discovery services content providers may publish service link content links nodes 
nodes services nodes may publish service link content links nodes forming topology 
kind network node database kind data source queries applied 
network service discovery database happens publication database 
words publication enables topology construction time constructs database searched 
discussion applicable kind network examples illustrate service discovery 
agent model queries propose agent model flow follows 
originator wishes search network query sends query single node 
call entry point agent node originator service gateway 
agent applies query local database returns matching results forwards query neighbor nodes 
neighbors return local query results forward query neighbors 
protocol originator agent left unspecified 
agent model hybrid centralization decentralization 
allows fully decentralized infrastructures allows seamless integration centralized client server computing decentralized infrastructure 
originator may embed agent process decentralized 
originator may just choose remote node agent centralized reasons including central control reliability continuous availability maintainability security accounting firewall restrictions incoming connections originator hosts 
example simple html gui may sufficient originate queries sent organization agent node 
note nodes part topology originator possess functionality node 
agent model provides location distribution transparency originators 
originator unaware database tuples partitioned nodes 
communicates agent black box 
model contrast model gnutella exists agent concept concept 
put way agent embedded originator process forming monolithic 
model decentralized allow degree centralization 
restriction appears unjustified 
importantly seriously limits applicability computing 
example gnutella model cope large connectivity spectrum user community ranging low high bandwidth 
gnutella network grew fragmented nodes low bandwidth connections keep traffic 
idea requiring functionality exist edge network reconsidered 
eventually situation patched rendering dumb low bandwidth slow edges network 
notion centralized reflectors gnutella super peers morpheus re invented 
reflector powerful high bandwidth gateway remote originators low bandwidth dialup connections 
volunteers take functionality shield traffic normally carried low bandwidth 
keep data locally 
agent model naturally covers centralized decentralized hybrids 
powerful node may act agent remote originators 
remainder follow agent model term anymore 
terms originator node agent node 
loop detection query shipping route queries nodes topology 
query remains identical forwards hops rewritten split query optimizer 
query may arrive node multiple times distinct routes complex pattern 
loops query routes detected prevented 
unnecessary endless multiplication workloads caused 
depicts topologies potential query trapped infinite loops 
enable loop detection originator attaches different transaction identifier query universally unique identifier 
transaction identifier remains identical query forwarding hops 
node maintains state table transaction identifiers returns error query received seen 
example approach gnutella 
practice sufficient unique exceedingly large probability suggesting bit integer computed cryptographic hash digest function md sha message text originator ip address current time random number 
routed vs direct response metadata responses propose distinguish techniques return matching query results originator routed response direct response routed metadata response direct metadata response depicted 
examine main implications gnutella case 
typical gnutella query virgin matched hundreds files referring replicas music file 
matching files identical exist multiple related songs live recordings multiple versions song different sampling rates 
music file size megabytes 
thousands concurrent users submit queries gnutella network 
large fraction users lives slow unreliable dialup connections 
node agent node originator query result set invitation data query data routed response metadata rrm routed response rr direct response invitation direct metadata response invitation direct response invitation dr direct metadata response invitation drm peer peer response modes 
routed response 

results propagated back originator paths query flowed outwards 
passive node returns active client local results remote results receives neighbors 
response protocol tightly coupled query protocol 
routing messages logical overlay network nodes efficient routing physical network ip routers 
routing back single gnutella file results query multiple nodes consume large amounts system bandwidth grinding gnutella screeching halt 
network grows fragmented nodes low bandwidth connections keep traffic 
consequently routed responses suited file sharing systems gnutella 
general economics dictate routed responses suited systems return large results 
direct response invitation 
better understand underlying idea introduce simpler variant direct response invitation 
results returned routing back intermediary nodes 
active node local results sends directly passive agent combines hands back originator 
response traffic travel system 
offloaded individual point point data transfers edges network 
response push protocol separated query protocol 
example ftp protocols may response push 
examine main implications case 
mentioned typical gnutella query virgin matched hundreds files referring replicas music file 
gnutella users sufficient receive just small subset matching files 
sending back files unnecessarily consume large amounts direct bandwidth restricting gnutella users excessive cheap bandwidth disposal 
note gnutella system marginally affected single user downloading say music files largest fraction traffic travel system 
general individual economics dictate direct responses invitation suited systems return equal large results small subset sufficient 
variant invitation problem inverting control flow 
nodes matching files blindly push files agent 
invite agent initiate downloads 
agent act sees fit 
example filter select subset data sources files reject rest invitations 
due variant invitation considered 
remainder thesis term direct response synonym direct response invitation 
routed metadata response direct metadata response 
interaction consists phases 
phase routed responses direct responses 
nodes return data results response queries small metadata results 
metadata contains just information enable originator retrieve data results possibly apply filters retrieval 
second phase originator selects metadata data results relevant 
active originator directly connects relevant passive data sources asks data results 
largest fraction response traffic travel system 
offloaded individual point point data transfers edges network 
retrieval protocol separated query protocol 
example ftp protocols may retrieval 
routed metadata response approach file sharing systems gnutella 
gnutella query return files just returns annotated set urls 
originator connects subset urls download files sees fit 
example service discovery system phase returns set service links full service descriptions 
second phase originator connects subset service links download service descriptions sees fit 
example referral system phase uses routed metadata response return service links set nodes having local matching results go ask nodes answer 
second phase originator agent connects directly subset nodes query retrieve result sets sees fit 
variant avoids invitation storm possible direct response 
referrals known redirections 
metadata response mode radius scope zero implement referral behavior domain name system dns 
details see section 
comparison response mode properties compare properties various response models 
abbreviations 
rr 
routed response rrm 
routed response metadata 
routed response metadata dr 
direct response 
direct response metadata 
distribution location transparency 
response models metadata originator unaware tuples partitioned nodes 
words models transparent respect distribution location 
metadata responses require originator contact individual data providers download full results transparent 
efficient query support 
models answer query 
simple medium queries answered efficiently complex query answered efficiently 
justification result deferred section 
transmission duplicate results unnecessarily wastes bandwidth 
eliminate duplicates query path final stage agent 
similarly maximum result set size limiting efficient superfluous results discarded query path 
economics 
rr results travel multiple hops just single hop 
leads poor economics 
effect pronounced large results case music files 
rr lead unfortunate individual economics 
user induces queries consumes system resources 
heavy results queries parties routed back user node situation pays large amounts bandwidth gives away free anonymous third parties 
user costs may drastically outweigh gains 
devise appropriate authorization quality service flow control policies 
unsatisfying economic situation similar physical ip routers internet forward traffic third parties 
case remains fact results travel multiple hops just 
principle rrm poor economic properties rr 
metadata small size gnutella incurred processing transmission cost may acceptable 
example gnutella nodes just route back annotated set urls metadata 
result traffic travel system 
retrieving results deal just parties provider consumer 
consequently individual economics controllable predictable 
user charged peoples workloads explicitly volunteers 
number tcp connections originator 
rr dr just tcp connection required originator metadata modes require connection selected data provider 
data sources selected heavyweight data retrieval 
metadata modes encounter serious latency limitations due expensive nature secure insecure tcp connection setup 
approach scale 
cases may problem client selects small number data providers 
number tcp connections agent 
usually node neighbors hundreds 
tcp connection neighbor required agent 
additionally connection data provider required 
data providers exist heavyweight data retrieval 
encounter serious latency limitations due expensive nature secure insecure tcp connection setup 
example query finds total number services domain cern ch 
may generate responses single node domain 
consequently agent face invitation storm resembling denial service attack 
hand potential exploit parallelism large 
data providers handled independently parallel 
latency 
query type support pipelining see section latency result arrive originator poor 
pipelined query latency result arrive small response travels single hop 
response travels multiple hops latency increases accordingly 
cost tcp connection setup originator agent invert situation 
rr cost tcp connection setup nodes paid node publication time connections typically kept alive node 
case response modes 
caching 
caching technique trades content freshness response time 
potentially support caching content nodes intermediate nodes response flow naturally concentrates integrates results nodes 
nodes return results directly independently efficiently support caching 
trust delegation unknown parties 
query result traffic subject security attacks 
sufficient establish secure mutually authenticated channel nodes malicious nodes divert routes modify queries results 
query routed multiple hops unknown agent believe indirect delegation trust unknown parties practically avoided 
security sensitive applications choose retrieval results occurs predictable manner just parties engage secure mutual authentication authorization 
rrm merely delegates trust metadata results full results 
response mode switches shifts functional perspective response modes equivalent clearly mode optimal circumstances 
question arises extent network mandate particular response mode system 
observe nodes autonomous defined interface 
node see kind response mode technology general neighbors answering query 
long query semantics preserved node care 
consequently propose response modes mixed switches shifts arbitrary permutations depicted 
routed response direct response switch 

starting agent routed response initially 
central node football receives query rr dr switch dr rr switch dr dr shift response mode switches shifts 
node agent node originator query result set agent 
reason decides answer query direct response 
response flow taken routed response shown crossed 
direct response routed response switch 

initially direct response 
football decides answer query routed response 
direct response direct response shift 

initially direct response 
football decides continue direct response shift target responses 
neighbors football declares fake agent 
responses flowed real agent flow back football football real agent 
note break semantics football behaves results obtained local database 
real agent receives results solely football 
routed response routed response shift 
hop response target shifted current node 
interestingly kind shift heart definition routed response 
classification introduced shows possible approach 
node may choose response mode local autonomous assessment advantages disadvantages involved 
context knowledge client originator best position judge kind response mode suitable 
useful allow specifying part query hint indicates preferred response mode routed direct 
query processing distributed database system exists single local database zero neighbors 
classic centralized database system special case exists single local database zero neighbors 
perspective query processing database system properties distributed database system recursive structure 
propose organize query engine general distributed query engine 
query involves number operators select union concat sort join group send receive sum max identity may may exposed query language level 
example select operator takes set returns new set tuples satisfying predicate 
union operator computes union sets 
concat operator concatenates elements sets list arbitrary order eliminating duplicates 
list emulated set distinct surrogate keys 
operator limits maximum result set size 
identity operator returns input set unchanged 
semantics operator satisfied operator implementations variety algorithms distinct resource consumption latency performance characteristics 
query optimizer chooses efficient query execution plan tree plugged operators 
execution plan parent operator consumes results child operators 
query execution driven final root consumer top fashion 
example request results root operator may turn lead request results child operators turn request results child operators 
means execution plan optimizer move query data data query 
words queries sub queries executed locally remote nodes 
performance tradeoffs query shipping data shipping hybrid shipping discussed 
template query execution plan recall section proposed query model 
query query model answered agent template execution plan depicted 
plan applies local query tuple set local database 
neighbor asked return result set neighbor query local neighbor result sets single result set operator take form union concat 
merge query applied takes input result set returns new result set 
final result set sent client node originator 
send receive 
receive centralized execution plan 
agent plan 
local query 
merge query 
neighbor query 
user query 
operator template execution plan 
see query kind database system answered framework derive simple centralized execution plan satisfies semantics query plan substitutes specific subplans template plan leading distinct plans agent node neighbors nodes 
case xquery sql parameters substituted follows xquery sql union return identity union return agent query plan send union return receive 
receive union select identity union select neighbor query plan send identity union return receive 
receive 
agent query plan 
neighbor query plan 
user query centralized execution plan 
agent query plan fetches raw tuples local remote databases result sets applies query neighbors handed rewritten neighbor query recursively fetches raw tuples returns union 
words agent plan fetches raw tuples local remote databases result sets applies query neighbors handed rewritten neighbor query recursively fetches raw tuples returns union 
neighbor query recursively partitionable see 
centralized plan works routed direct response metadata 
direct response node forward query attempt receive remote result sets conceptually empty result sets delivered 
node send result set predecessor directly back agent 
distributed database system exists single local database zero neighbors 
classic centralized database system special case exists single local database zero neighbors 
perspective query processing database system properties distributed database system recursive structure 
consequently centralized execution plan applies kind database system query query model answered 
centralized execution plan inefficient potentially large amounts base data shipped agent locally applying user query 
plan satisfies semantics query 
case complex query 
efficient execution plan derived proposed 
case simple medium query 
recursively partitionable query network efficient answering queries recursively partitionable 
query recursively partitionable template plan exists merge query operator satisfy semantics query assuming chosen words query recursively partitionable execution plan recursively applied node topology 
corresponding execution plan depicted 
send receive 
receive 
agent plan 
user query 
merge query 
operator execution plan recursively partitionable query 
input output merge query form output local query query processing parallelized spread participating nodes 
potentially large amounts information searched investing little resources processing time individual node 
recursive parallel spread load implied recursively partitionable query basis massive scalability potential 
query performance necessarily example due high network costs 
position clarify definition simple medium complex queries 
simple query 
query simple recursively partitionable identity union 
medium query 
query medium query simple recursively partitionable 
complex query 
query complex recursively partitionable 
interesting open question query processor automatically determine correct merge query exist choose 
related problems studied extensively context distributed parallel query processing query rewriting heterogeneous homogenous relational database systems 
distributed emerging field 
simplicity remainder assume user explicitly provides query provided part query node node acts assuming query recursively partitionable 
choosing straightforward human 
consider example medium 
return number replica catalog services 
merge query computes sum set numbers 
concat 
return tuple count tuple content service interface type tuple return tuple sum tuple tuple concat find service largest uptime 
return tuple type service uptime union note query engine encapsulates query output root element 
query need generate root element implicitly added environment 
custom merge query useful 
example assume individual result tuple tagged timestamp indicating time information expires ceases valid 
custom merge query ignore results expired 
alternatively ignore results timestamp 
example custom merge query cut result tuples 
result set size limiting feature attempts bandwidth consumption predictable 
pipelining success applications depends fast start producing initial relevant portions result set fast entire result set produced 
particularly case distributed systems nodes involved query processing may unresponsive reasons 
situation pronounced systems loosely coupled autonomous nodes 
originator happy useful early results long arrive quickly reliably 
results arrive handled ignored anyway 
example interactive session typical gnutella user primarily interested able start music download soon possible 
user quickly disappointed single result query arrives seconds 
choosing species virgin interesting helps little comes expense say minute idle waits 
example consider user wants discover schedulers submit job 
interesting discover schedulers available primary requirement find quickly reliably 
database theory practice establishes query execution engines general distributed query execution engines particular iterators 
operator corresponds iterator class 
iterators kind uniform interface methods open close 
execution plan parent iterator consumes results child iterators 
query execution driven final root consumer top fashion 
example call may call child node agent node originator query result set non pipelined left pipelined query right 
query type supports pipelining 
simple query medium query complex query typically table pipelining support query types 
iterators turn call child iterators 
efficiency method asked deliver results called batch 
semantics follows give batch results results delivered entire query result set exhausted 
example send receive network communication operators iterators typically batches 
monotonic semantics certain operators select union concat send receive identity allow operator implementations consume just child results 
contrast non monotonic semantics operators sort group max join methods require operator implementations consume child results open order able deliver result call 
output operators subset input general subset output input operators need see input produce correct output 
break iterator concept important latency performance implications 
root operator agent exhibits short long latency deliver originator result result set depends query operators turn depend query 
words query types originator potential immediately start piping results moderate performance rate query types wait long time result available full result set arrives 
query operator implementation said pipelined produce result tuple input tuples seen 
query operator said non pipelined 
depicts examples modes 
simple queries support pipelining gnutella queries 
medium queries may may support pipelining complex queries typically support pipelining 
properties summarized table 
bear mind query pipelined messaging model underlying network layers may support pipelining case result set delivered long latency single large batch 
note non pipelining delivery dynamic abort timeout feature highly unreliable due called simultaneous abort problem see 
nodes query path fails responsive reasons nodes chain waiting eventually time time originator receives single result 
static loop timeout dynamic abort timeout clearly comes time user longer interested query results matter results available 
query roaming network response traffic fade away time 
addition systems advised attempt limit resource consumption defending runaway queries roaming forever producing gigantic result sets unintended malicious 
address problems absolute abort timeout attached query travels hops 
abort timeout seen deadline 
query node tells neighbor ignore rest result set received today problem ensure maximum results delivered reliably time frame desired user 
value static timeout remains unchanged hops defensive modification flight triggered runaway query detection infinite timeout 
contrast intended value dynamic timeout decreased hop 
nodes away originator may time earlier nodes closer originator 
dynamic abort timeout static abort timeout entirely unsuitable non pipelined result set delivery leads serious reliability problem propose call simultaneous abort timeout 
just nodes query path fails responsive reasons nodes path waiting eventually time attempt return partial result set 
impossible partial results reach originator nodes time simultaneously takes time results flow back 
example agent times attempts return local partial results originator 
partial results flowing agent neighbors neighbors discarded late 
agent deliver results originator originator timed shortly results arrive 
originator receives single result just nodes query path fails responsive 
address simultaneous abort timeout problem propose dynamic abort timeouts 
dynamic abort timeout nodes time time 
nodes node agent node originator query result set dynamic abort timeout 
away originator time earlier nodes closer originator 
provides safety time window partial results node flow back multiple hops originator 
query node tells neighbor ignore rest result set received today 
think appropriate meet deadline 
intermediate nodes adaptively decrease timeout value necessary order leave large time window receiving returning partial results subsequent timeout 
observe closer node originator important meet deadline results large branch discarded 
closer node originator larger response bandwidth consumption 
policy choose safety time window propose exponential decay halving 
window size halved hop leaving large safety windows important nodes tiny window sizes nodes contribute marginal result sets 
account network latency time takes query locally processed timeout updated hop recurrence formula consider example 
time originator submits query dynamic abort timeout seconds 
words warns agent ignore results time 
agent turn intends safely meet deadline figures needs retain safety window seconds starting return partial results time 
agent warns neighbors ignore results time 
neighbors intend safely meet deadline 
seconds available choose allocate second leave rest branch remaining 
eventually safety window small node longer meet deadline timeout 
results unlucky node ignored partial results discarded 
nodes branches unaffected 
results survive time hop way back originator time 
ignoring results deadline node may close connection 
may need harmless 
connection typically simply reestablished soon new query forwarded 
attempt educate citizens node may choose propagating deny service neighbors repeatedly meet abort deadlines 
example strategy may exponential back algorithm 
note long node obeys timeout independently implement timeout policy sees fit purposes regard policy implemented nodes 
node misbehaves maliciously increases abort timeout risks able meet deadline soon dropped denied service 
healthy measures move useful nodes edge network cause harm number topology links tends decrease 
summarize non pipelined result set delivery dynamic abort timeouts exponential decay halving ensure maximum results delivered reliably time frame desired user 
speculate dynamic timeouts incorporate sophisticated cost functions involving latency bandwidth estimation economic models 
static loop timeout interestingly static loop timeout required order fully preserve query semantics 
dynamic timeout dynamic abort timeout unsuitable loop timeout 
problem arises propose call non simultaneous loop timeout 
recall section query may arrive node multiple times distinct routes complex pattern 
loops query routes detected prevented 
unnecessary endless multiplication workloads caused 
node maintains state table transaction identifiers associated loop timeouts returns error query received seen state table 
loop timeout reached query potentially arrive multiple times distinct routes 
loop timeout node may forget query deleting state table 
able reliably detect loop node forget transaction identifier loop timeout reached 
assume moment dynamic timeout dynamic abort timeout loop timeout 
consider example identical agent additional neighbor potentially receive query path 
time originator submits query dynamic abort timeout seconds 
agent turn warns neighbors ignore results time 
request sent arrives processed results step delivered dynamic abort timeout time 
time loop timeout reached query deleted state table 
reasons including temporary network segment problems sequential neighbor processing request delayed 
example arrives time 
time receiving node forgotten handled query 
node detect loop continues process forward step query 
arrives returns node agent node originator query result set loop detection failure dynamic loop timeout 
non simultaneous loop timeout problem caused fact nodes forward query nodes destinations forgotten 
words problem loop timeout occur simultaneously 
consequently loop timeout static change hops guarantee loops reliably detected 
query originator provides dynamic abort timeout static loop timeout 
initially originator values identical 
hop values unrelated 
summarize abort timeout loop timeout 
loop timeouts static abort timeouts may static dynamic 
non pipelined result set delivery dynamic abort timeouts exponential decay halving ensure maximum results delivered reliably time frame desired user 
dynamic abort timeout model requires static loop timeouts ensure reliable loop detection node forward answer query multiple times 
query scope data integration system goal exploit independent information sources single source 
important distributed systems node topology deployment model change frequently 
example cross organizational grids networks exhibit character 
practice sufficient efficient query consider subset tuples service descriptions subset nodes 
example typical query may want search tuples services scope domain cern ch ignore rest world 
recall section cleanly separated concepts logical query physical query scope 
query formulated global database view insensitive link topology deployment model 
words query set tuples appears single homogenous database set may recursively partitioned nodes databases 
means relational xml environment global level set tuples appears single large table xml document respectively 
query scope hand navigate prune link topology filter attributes deployment model 
conceptually scope input fed query 
query scope set may contain tuples universe 
query scope prune search space different manner 
query scope specified directly indirectly 
example directly enumerate tuples service descriptions considered 
usually impractical 
indirectly define query scope specifying set nodes implying query evaluated union tuples contained respective databases 
distinguish scopes neighbor selection timeout radius 
note security reasons node may choose ignore override third party provided query scope example guard runaway queries infinite scope 
neighbor selection simplicity discussions far implicitly assumed broadcast model top tcp node forwards query neighbor nodes 
general select subset neighbors forward concurrently sequentially 
fewer query forwards lead resource consumption 
issue critical epidemic flooding effect implied broadcasting 
bandwidth consumption grows exponentially query radius producing enormous stress network drastically limiting scalability 
details consult 
clearly selecting neighbor subset lead incomplete coverage missing important results 
best policy adopt depends context query topology 
context required improve broadcast model 
example little sense forward gnutella query non gnutella nodes 
scope select neighbors service description interface type gnutella 
attempt explicitly exploit topology characteristics virtual organization grid may deliberately organize global intermediate local job schedulers tree topology 
correct operation scheduling may require reliable discovery relevant schedulers tree 
scenario random selection half neighbors node certainly undesirable 
policy selects child nodes ignores parent nodes may adequate 
node may maintain statistics neighbors 
may select neighbors meet minimum requirements terms latency bandwidth historic query outcomes 
node properties hostname domain name owner exploited query scope guidance example implement security policies 
consider example scheduling system may trust nodes select number security domains 
query forwarded nodes matching trust pattern 
systems finding single result sufficient 
general user node guard unnecessarily large result sets message sizes resource consumption specifying maximum number result tuples bytes returned 
sequential propagation depending number results obtained local database subset selected neighbors query may longer need forwarded rest selected neighbors 
neighbor selection query flexibility expressiveness propose allow user specify selection policy 
addition normal query user defines neighbor selection query xquery takes tuple set current node input returns subset indicates nodes selected forwarding 
example neighbor query implementing broadcasting selects services registry query capabilities follows return tuple type service content service interface type consumer content service interface type xquery wide range policies implemented manner 
neighbor selection policy draw rich set information contained tuples published node 
tuple metadata type context timestamps neighbor selection decisions see section 
recall set tuples database may contain service descriptions neighbor nodes wsdl kind content published kind content provider 
example may include host network information statistics node periodically publishes immediate neighbors 
example broadcast random selection expressed neighbor query 
select nodes support interfaces gnutella freenet job scheduling 
tree topology policy tuple context attribute select child nodes ignore parent nodes 
implement domain filters security filters allow deny regular expressions apache server tuple set includes metadata hostname node owner 
power law policies expressed metadata includes number neighbors th radius 
usual security reasons node may choose ignore override extend scope hints receives 
neighbor query concept flexible policy implementation internal node 
case node ignores user provide neighbor query uses internal custom neighbor selection query 
timeout clearly comes time user longer interested query results matter results available 
query roaming network response traffic fade away time 
section discussed depth issue implications loop detection non pipelined result set delivery 
just note timeouts clearly belong query scope query 
radius radius query measure path length 
precisely maximum number hops query allowed travel path 
radius decreased hop 
roaming query response traffic fade away reaching radius zero 
scope radius serves similar purposes timeout 
timeout radius complementary scope features 
radius indirectly limit result set size 
addition helps limit latency bandwidth consumption guard runaway queries infinite lifetime 
gnutella freenet radius primary means specify query scope 
radius termed ttl time live systems 
systems support timeouts 
maximum result set size limiting timeout radius conjunction neighbor selection routed response sequential forward implement expanding ring strategy 
term stems ip multicasting 
agent forwards query small radius timeout 
results agent forwards query increasingly large radius timeout values reach network expense increasingly large resource consumption 
expansion radius timeout multiplied factor 
turn subtle points 
precisely radius trigger query life 
node rejects query radius zero 
node accepts query radius decreased query evaluated 
query forwarded neighbors new radius zero 
words new radius zero forces neighbor selection policy yields empty set 
example originator determine neighbors agent sending query radius zero hops 
note radius defined number hops query allowed travel path 
weakly defined maximum number hops query allowed travel path 
words guaranteed query takes shortest path agent node covering total maximum nodes 
reasons kind definition 
node may choose decrease radius value sees fit order reduce resource consumption prevent system exploitation 
second loop detection unpredictable timing distributed systems lead phenomenon propose call greedy radius pruning 
recall query may arrive node multiple times distinct routes complex pattern 
traveling hops decreases radius query query arrives route fast hops arrives route slow hops second arrival detected loop rejected 
successfully forwarded query continues travel hops theoretically possible considering larger radius second query 
second query arrived query able travel potentially collect matching results 
propagating query neighbors concurrently may somewhat increase query coverage particular homogenous lans 
related agent model 
underlying idea agent model new 
consider example email infrastructure model 
typically single central high availability agent serves outgoing incoming mail originators entire organization 
email system fully partly decentralized originator runs agent host 
transparent flexibility contributes widespread adoption tremendous success email internet killer application 
similar example directory architecture directory user agent originator querying home directory system agent agent node collection directory system agents nodes 
loop detection 
protocol uses route tracing algorithm loop detection 
algorithm works queries select name hierarchical name space mimicked link topology 
general context algorithm insufficient loop detection allow assume topology namespace 
route tracing algorithm attaches query route taken represented list node identifiers 
query forward node appends identifier route 
loop detected identifier current node contained route 
mechanism detects loop query forwarded node eventually arrives node detect common form loop query arrives multiple paths node paths far touched query processing 
example discovery queries section satisfied lookup key globally unique name 
type query assumed systems dns gnutella freenet tapestry chord globe leading highly specialized content addressable networks centered theme distributed hash table lookup 
note queries exact match queries flat set attribute values find tuples carry exactly attribute values assumed systems sds jini 
approach distinguished supports query types supports queries rich expressive general purpose query languages xquery sql 
pipelining 
survey adaptive query processing including pipelining see special issue 
develops general framework producing partial results queries involving non monotonic operator 
approach inserts update delete directives output stream 
tukwila niagara projects introduce data integration systems adaptive query processing xml query operator implementations efficiently support pipelining 
pipelining hash joins discussed 
proposes rate pipeline scheduling algorithm prioritizes schedules flow data pipelined operators result output rate maximized 
algorithm demonstrated pipelined hash joins 
pipelining termed streaming non blocking execution 
neighbor selection 
iterative deepening similar technique expanding ring optimization suggested avoids reevaluating query nodes done previous iterations 
neighbor selection policies randomness historical information result set size prior queries simulated analyzed 
efficient neighbor selection policy applicable simple queries posed networks number links nodes exhibits power law distribution freenet gnutella 
matching results reached hops selecting just small subset neighbors neighbors neighbors th radius 
note policy assumption results query results equally relevant 
depending application context assumption may may valid 
related works discuss isolation neighbor selection techniques particular query type context framework comprehensive query support 
dns 
distributed databases hierarchical name space domain name system dns efficiently answer queries form find object full name 
example dns search ip address domain name fred cms cern ch 
nature supported query type systems arrange link topology hierarchical name space tree topology depicted 
node dns server responsible tuples name space sub tree ch cern ch cms cern ch 
node may internally partition name space delegate responsibility sub trees child nodes 
node holds database tuples carries domain name ip address 
query searching ip address domain name traverses tree shortest path originator fire ethz ch node containing domain name 
node name resolution policy selects neighbor closer name current node name space metadata 
dns queries forwarded routed topology 
node returns referral message redirects originator closer node 
originator explicitly queries node referred closer node 
nodes cache ip address service link result queried nodes 
cache hit directly refers client responsible node 
dramatically reduces load nodes close root hierarchy 
reduces number round trips involved query 
support neighbor selection hierarchical name space framework node publish neighbors service link name space manages 
natural candidate hierarchical name content link tuple 
dns referral behavior implemented radius scope zero 
holds ldap referral behavior see 
ip fred cms cern ch forwarded query referred query fred cms cern ch cms cern fred root ch ethz fire fire ethz ch query flow domain name system dns 
ldap mds 
hierarchical distributed directory works similarly dns 
supports referrals addition forward queries topology chaining terminology 
query language simple 
route tracing loop detection algorithm 
query scope specification support maximum result set size limiting 
support radius dynamic abort timeout pipelined query execution nodes 
ldap simplified subset 
dns supports referrals query forwarding 
metacomputing directory service mds inherits properties ldap 
mds additionally implements simple form query forwarding allows multi level hierarchies arbitrary topologies 
neighbor selection forwards query ldap servers overlapping query name space 
query forwarded loop detection 
mds support radius dynamic abort timeout pipelined query execution nodes direct response metadata responses 
take steps unifying fields database management systems computing far received considerable separate attention 
extend database concepts practice cover search 
similarly extend concepts practice support powerful general purpose query languages xquery sql 
result propose called unified peer peer database framework general purpose query support large heterogeneous distributed systems spanning administrative domains 
unified sense allows express specific applications wide range data types node topologies query languages query response modes neighbor selection policies pipelining characteristics timeout scope options 
uniformity wide applicability reusability approach distinguish related individually addresses problem areas 
traditional distributed systems assume particular type topology hierarchical dns ldap 
existing systems built single application data type support queries general purpose query language 
example gnutella freenet tapestry chord globe dns support lookup key globally unique name 
sds ldap mds support simple special purpose query languages leading special purpose solutions unsuitable multi purpose service resource discovery large heterogeneous distributed systems spanning administrative domains 
discusses isolation neighbor selection techniques particular query type context framework comprehensive query support 
ldap mds support essential features systems reliable loop detection non hierarchical topologies dynamic abort timeout query pipelining nodes radius scoping 
introduce unified database framework general purpose query support 
results open interesting research directions 
interesting extend unification extension concepts database management systems computing 
example consider application database techniques buffer cache maintenance view materialization placement selection query optimization computing 
techniques need extended light complexities stemming autonomous administrative domains inconsistent incomplete soft state dynamic flexible cache freshness policies course tuple updates 
important problem left open question query processor automatically determine correct merge query exist choose 
approaches query rewriting heterogeneous homogenous relational database systems prove useful 
database resource management authorization mechanisms worthwhile consider specific flow control policies query user 
second interesting study specify messaging communication model network protocol uniformly supports database queries wide range database architectures response models stringent demands ubiquitous internet infrastructures terms interoperability extensibility reliability efficiency scalability met 
issues high concurrency low latency early partial result set retrieval need addressed 
resource consumption flow control encouraged query basis 
large collider committee 
report lhc computing review 
technical report cern april 
lhc computing review public web cern ch lhc public public report final pdf 
wolfgang hoschek 
unified peer peer database framework dynamic distributed content application scalable service discovery 
phd thesis technical university vienna submitted 
ben segal 
grid computing european data grid project 
ieee nuclear science symposium medical imaging conference lyon france october 
wolfgang hoschek javier martinez samar heinz stockinger kurt stockinger 
data management international data grid project 
st ieee acm int 
workshop grid computing grid bangalore india december 
dirk wolfgang hoschek javier jean martinez samar ben segal heinz stockinger kurt stockinger 
models replica synchronisation consistency data grid 
th ieee symposium high performance distributed computing hpdc san francisco california august 
ian foster carl kesselman steve tuecke 
anatomy grid enabling scalable virtual organizations 
int 
journal supercomputer applications 
ian foster carl kesselman jeffrey nick steve tuecke 
physiology grid open grid services architecture distributed systems integration january 
chawla vivek chopra gary chris dix tony hong francis norton glenn mark richman saunders zoran 
professional xml web services 
press 
ullman 
information integration logical views 
int 
conf 
database theory icdt delphi greece 
daniela florescu ioana manolescu donald kossmann florian 
agora living xml relational 
int 
conf 
large data bases vldb cairo egypt february 
tomasic raschid valduriez 
scaling access heterogeneous data sources disco 
ieee transactions knowledge data engineering 
world wide web consortium 
xquery xml query language 
working draft december 
international organization standardization iso 
information technology database language sql 
standard 
iso iec 
wolfgang hoschek 
database dynamic distributed content application service resource discovery 
int 
ieee symposium parallel distributed computing submitted romania july 
nelson minar 
peer peer decentralized 
reilly peer peer web services conference washington november 
world wide web consortium 
extensible markup language xml 
recommendation october 
world wide web consortium 
xml schema part primer 
recommendation may 
christensen curbera meredith weerawarana 
web services description language wsdl 
note 
www org tr wsdl 
gnutella community 
gnutella protocol specification 
dss clip com pdf 
ron rivest 
md message digest algorithm 
ietf rfc april 
national institute standards technology 
secure hash standard 
technical report fips washington april 
ripeanu 
peer peer architecture case study gnutella network 
int 
conf 
peer peer computing linkoping sweden august 
clip report 
gnutella bandwidth barrier 
www clip com gnutella html 
donald kossmann 
state art distributed query processing 
acm computing surveys september 
stefano ceri giuseppe 
distributed databases principles systems 
mcgraw hill computer science series 
franklin jonsson kossmann 
performance tradeoffs client server query processing 
acm sigmod conf 
management data montreal canada june 
papakonstantinou vassalos 
query rewriting semistructured data 
acm sigmod conf 
management data 
dan suciu 
distributed query evaluation semistructured data 
acm transactions database systems 
urhan franklin 
dynamic pipeline scheduling improving interactive query performance 
large database vldb journal 
jordan ritter 
gnutella scale 
really 
www org gnutella html 
clarke sandberg wiley hong 
freenet distributed anonymous information storage retrieval system 
workshop design issues anonymity unobservability 
apache software foundation 
apache server 
httpd apache org 
huberman adamic lukose 
search power law networks 
phys 
rev 
deering 
multicast routing datagram internetwork 
phd thesis stanford university 
postel 
soap beep 
ietf rfc august 
international telecommunications union 
recommendation information technology open system interconnection directory overview concepts models services 
itu november 
mockapetris 
domain names implementation specification 
ietf rfc november 
zhao kubiatowicz joseph 
tapestry infrastructure fault resilient wide area location routing 
technical report berkeley ucb csd 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
acm sigcomm 
van steen tanenbaum 
wide area distributed system 
ieee concurrency 
steven czerwinski ben zhao todd hodes anthony joseph randy katz 
architecture secure service discovery service 
fifth annual int 
conf 
mobile computing networks mobicom seattle wa august 
waldo 
jini architecture network centric computing 
communications acm july 
ieee 
data engineering bulletin june 
shanmugasundaram kristin tufte david dewitt jeffrey naughton david maier 
architecting network query engine producing partial results 
webdb informal proceedings 
zachary ives alon halevy daniel weld 
integrating network bound xml data 
ieee data engineering bulletin 
jeffrey naughton david dewitt david maier chen leonidas kang rajasekar krishnamurthy luo naveen prakash ravishankar shanmugasundaram feng tian kristin tufte yuan wang chun zhang bruce jackson anurag gupta chen 
niagara internet query system 
ieee data engineering bulletin 
wilschut peter apers 
dataflow query execution parallel main memory environment 
int 
conf 
parallel distributed information systems pdis december 
zachary ives daniela florescu marc friedman alon levy daniel weld 
adaptive query execution system data integration 
acm sigmod conf 
management data 
urhan michael franklin 
xjoin reactively scheduled pipelined join operator 
ieee data engineering bulletin june 
urhan michael franklin 
dynamic pipeline scheduling improving interactive query performance 
int 
conf 
large data bases vldb 
beverly yang hector garcia molina 
efficient search peer peer networks 
nd int 
conf 
distributed computing systems vienna austria july 
adriana iamnitchi ian foster 
fully decentralized resource discovery grid environments 
int 
ieee workshop grid computing denver colorado november 
howes 
lightweight directory access protocol 
ietf rfc march 
karl czajkowski steven fitzgerald ian foster carl kesselman 
grid information services distributed resource sharing 
tenth ieee int 
symposium high performance distributed computing hpdc san francisco california august 
steven fitzgerald ian foster carl kesselman gregor von laszewski warren smith steven tuecke 
directory service configuring high performance distributed computations 
th int 
symposium high performance distributed computing hpdc 

