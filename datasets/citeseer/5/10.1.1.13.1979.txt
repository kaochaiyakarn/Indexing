comparison publicly available tools static intrusion prevention john kamkar dept computer information science se sweden ida liu se www 
ida liu 
se 
size complexity today software systems growing increasing number bugs possibility security vulnerabilities 
common attacks vulnerabilities buffer overflow format string attacks 
implement testbed function calls empirically compare publicly available tools static analysis aiming attacks 
results show high rates false positives tools building lexical analysis low rates true positives tools building syntactical semantical analysis 
keywords security intrusions intrusion prevention static analysis security testing buffer overflow format string attack software systems growing larger complex amount bugs increase 
bugs constitute security vulnerabilities 
statistics cert coordination center carnegie mellon university number reported security vulnerabilities software increased nearly years 
news bad news 
news lots information security vulnerabilities occur attacks importantly avoided 
bad news information apparently lead vulnerabilities 
mistakes instance shown statistics infamous buffer overflow vulnerability 
david wagner university california berkeley show buffer overflows stand published th nordic workshop secure systems sweden 
supported national computer graduate school computer science commissioned swedish government board education 
vulnerabilities reported cert ooo oo fig 

software vulnerabilities reported cert 
vulnerabilities reported cert 
equally dangerous format string vulnerability publicly unknown 
middle january discussion responsibility security intrusions took interesting turn 
national released recommending policy makers create laws hold companies accountable security breaches resulting vulnerable products got global media attention 
far intruder charged court 
software companies may charged preventing intrusions 
stresses importance helping software engineers produce secure software 
automated development testing tools aimed security solutions growing problem 
starting point tools applied directly source code solve warn security vulnerabilities 
means trying solve problems implementation testing phase 
applying security related methodologies development cycle probably effective amount existing software strive modular design reusing software components time take educate software engineers secure analysis design argue security tools trying clean vulnerable source code necessary 
discus sion issue january february issue ieee software 
investigate effectiveness publicly available static intrusion prevention tools security testing tools rats splint boon 
approach get depth understanding buffer overflow format string attacks knowledge build testbed identified security bugs 
empirical test testbed 
follow john master thesis 
rest organized follows 
section describes process memory management unix buffer overflow format string attacks 
define testbed vulnerable functions section presents concept intrusion prevention describes techniques analyzed tools 
section presents empirical comparison tools effectiveness previously described vulnerabilities 
related section 
section contains 
attacks vulnerabilities analysis intrusions concerns subset violations security policies constitute security intrusion definitions example internet security glossary 
context intrusion successful attack aims changing flow control letting attacker execute arbitrary code 
software security bugs vulnerabilities allowing kind intrusions considered worst possible arbitrary code means starting new shell 
shell access rights system process attacked 
process root access attacker new shell leaving system open kind manipulation 
changing flow control changing flow control executing arbitrary code involves steps attacker 
injecting attack code attack parameters memory structure buffer vulnerable process 

abusing vulnerable function writing memory process alter data controls execution flow 
attack code mean assembly code starting shell bytes space attack parameters input code existing vulnerable process example parameter bin sh input system library function start shell 
biggest concern step redirecting control flow writing memory 
hard part possibility changing flow control way condition hold 
possibility injecting attack code attack parameters higher necessarily violate rules restrictions program 
changing flow control altering code pointer 
code pointer basically value gives program counter new memory address start executing code 
code pointer point attack code program vulnerable 
popular code pointer target return address stack 
programmer defined function pointers called buffers old base pointer equally effective targets attack 
buffer overflow attacks buffer overflow attacks common security intrusion attack extensively analyzed described papers line documents 
buffers allocated memory may data check ensure data written buffer fits 
data written buffer extra data spill adjacent memory structure effectively overwriting stored 
abused overwrite code pointer change flow control 
common buffer overflow attack shown simplified example 
local buffer allocated stack eventually return address overwritten case address xbffff 
local buffer aaaaaaaa old base pointer aaaaaaaa return address xbffff arguments arguments fig 

buffer overflow overwriting return address 
attacker supply input buffer design data redirect return address attack code 
buffer overflow vulnerabilities come check data fits destination buffer 
problem ansi standard library functions rely programmer checking 
functions powerful handling strings popular 
secure versions cases implemented know programmers 
lists dangerous functions involved published buffer overflows 
lists chosen take fifteen functions considered risky testbed 
ets 
sprintf 

strcat 
scanf 
strcpy 
fscanf 






list exhaustive provide useful test data comparison tools 
format string attacks nd june format string attack published 
comments exploit source code dates th october 
category security bugs publicly unknown 
format string attacks acknowledged dangerous buffer overflow attacks 
described extensive article team shorter article tim 
string functions ansi handle called format strings 
allow dynamic composition formatting strings conversion specifications starting character conversion specifier 
conversion specification results fetching zero subsequent arguments 
say part program looks void print function char string printf xs string call print func print string argument passed 
functionality seemingly achieved somewhat simpler code void print function char string printf string function argument string directly print argument passed print function 
call print function string containing conversion specifications example print function dy dy printf interpret string format string case assume integers stored stack pop times bytes stack memory print values stored 
programmers take shortcut format string functions possibility arises attacker inject conversion specifications evaluated 
considering conversion specifier xn things get dangerous 
xn cause format string function pop bytes stack value memory pointer storing number characters far format string number characters xn 
injecting format string containing xn attacker write data process memory 
attacker able provide format string ansi format function part format string vulnerability 
combining various conversion specifications making fact format string stored stack view write arbitrary memory addresses 
format string vulnerabilities scanf family involved numerous buffer overflow exploits format string attacks published concern printf family format string functions 
reason test concerns subset ansi format functions 
add function calls testbed sprintf differently buffer overflow case 
printf 

fprintf 
sprintf 


intrusion prevention ways trying prohibit intrusions 
bauer taxonomy anti intrusion techniques called aint define intrusion prevention 
precludes severely likelihood par ticular intrusion success 
divide intrusion prevention static intrusion prevention dynamic intrusion prevention 
section describe differences categories 
secondly describe publicly available tools static intrusion prevention describe shortly compare effectiveness vulnerabilities described section 
complete survey static intrusion prevention tools subset constraints tools testing phase software 
tools require altering source code detect security vulnerabilities 
tools implemented publicly available system specific tools 
motivation evaluate compare tools easily quickly introduced software developers increase software quality security point view 
dynamic intrusion prevention dynamic run time intrusion prevention approach change runtime environment system functionality making vulnerable programs harmless vulnerable 
means ordinary environment program vulnerable security bugs new secure environment vulnerabilities exploited way protects known targets attacks 
general weakness lies fact protection schemes depend bugs known exploited today get rid actual bugs 
attacker figured new attack target reachable security bug dynamic solutions stand 
hand effective exploitation new bugs aiming target 
static intrusion prevention static intrusion prevention tries prevent attacks finding security vulnerabilities source code programmer remove 
removing security bugs program considered infeasible static solution incomplete 
removing bugs known exploitable brings likelihood successful attacks possible security targets software 
static intrusion prevention removes attackers tools security bugs 
main drawbacks approach keep updated database programming flaws test tools detect vulnerabilities user know fix problem warning issued 
chosen focus publicly available tools static intrusion prevention 
late researchers reliable software technologies static analysis tool detecting security vulnerabilities code software stupid 
security scanner short 
tool lexical analysis building token stream code 
tokens matched known vulnerable functions database 
reason performing deeper analysis help syntactic analysis parsing analysis fly programming 
built give developers support coding highlighting potential security problems written 
parsing suffers build dependent covering source code pre processor conditionals 
writing vulnerability database contained potential vulnerabilities including problems race conditions included see article bishop buffer overflows 
pseudo random functions considered risky re wrongly security critical applications 
entry database consists brief description problem high level description code problem 
grading vulnerability scale risk low risk moderate risk risky risky risky 
indication type analysis perform function 
function retrieve input external source file network connection 
modular design allows integration various development environments replacing front back 
fact design goals 
moment supports integration gnu emacs 
security tool available download internet 
www 

com rats new security testing tools released may devel oped david wheeler rough auditing tool security rats developed secure software solutions 
scan source code lexical level searching security bugs 
solutions similar 
noticed teams developing similar tools decided common release date trying combine tools 
just works built database func tions known problems buffer overflow risks format string problems race conditions 
tool produces list potential vulnerabilities sorted risk 
risk level depends function values parameters function 
example constant strings considered risky fully variable strings 
vulnerability database contains security bugs 
rats scans code peri php python source code flags common security bugs buffer overflows race conditions 
just rats database vulnerabilities sorts security bugs risk 
rats vulnerability database contains security bugs 
security testing tools invoked shell source code input 
traverse code produce output risk grading short descriptions potential problems 
security tools rats available download internet 
www 

com www 

com rat splint static analysis tool describe implemented david evans 
name functionality originates popular static analysis tool called lint released seventies 
lclint enhanced search security specific bugs january lclint got name secure programming lint splint short 
splint approach programmer provided semantic comments called annotations perform static analysis syntactic level making program parse tree 
means tool better chance differentiating correct incorrect functions tools working lexical level 
annotations specify function constraints program function requires ensures 
simplified example annotated library standard splint package char strcpy char st char requires st ensures sl requires clause specifies buffer st big hold characters readable buffer 
ensures clause says return length buffer sl equal length buffer 
program contains call strcpy destination buffer sl smaller source buffer buffer overflow vulnerability splint report bug 
detect bugs constraints annotations resolved 
low level constraints generated subexpression level defined annotations 
statement constraints generated subexpression constraints assuming different subexpressions change data 
generated constraints matched annotated constraints determine hold 
splint issues warning 
note add annotations test source code violation second testing constraint defined section 
rely fully splint annotated libraries fair comparison 
splint security tool available download internet 
www 
splint 
org boon david wagner tool describing aiming detecting buffer overflow vulnerabilities code 
july tool working prototype publicly released name boon stands buffer overrun detection 
assumption buffer overflows string buffers model string variables string buffers properties allocated size number bytes currently 
string functions modeled terms effects properties string variable 
constraints solved matched detect inconsistencies similarly splint 
analyzing source code preprocessor expand macros include 
boon parses code reports detected vulnerabilities belonging categories certainly buffer overflow possibly buffer overflow slight chance buffer overflow 
user needs go check source code hand see real buffer overflow 
note boon detect format string vulnerabilities tested 
boon security tool available download internet 
www 
cs 
berkeley 
edu daw boon static solutions approaches static intrusion prevention 
area connects general software testing provides broad range potential methodologies 
tool published czech jose 
czech source code checking tool full static analysis variable tainting 
software fault injection technique originally hardware testing called fault injection find errors software 
security testing 
injecting faults system tested forced anomalous state execution effects system security observed evaluated 
ghosh implemented prototype tool called fault injection secu tool fist short 
tool shows promising results tions source code hand means process automated 
fist available download excluded analysis 
du aditya done research software fault injection security testing 
inject faults environment application anomalous user input erroneous environment variables 
describe methodology implemented 
approach part analysis 
constraint testing umesh shankar university california berkeley interesting solution finding format string ities 
add new type called tainted tag data originated untrustworthy source 
set typing rules tainted data propagated keeping tag 
tainted data format string tester warned possible vulnerability 
sadly manage get tool report vulnerabilities supplied annotated library functions 
rats splint true positives false positives true negatives false negatives table 
effectiveness accuracy static intrusion prevention 
positive means warning issued negative means warning issued 
total function calls unsafe safe 
boon tested buffer overflow vulner abilities 
comparison static intrusion prevention tools testbed contains vulnerable functions chosen vulnerability database category risky host risky secure programming linux unix howto printf family see section complete list 
claim test suite perfectly fair complete 
sources chosen vulnerabilities reasonable test result provide interesting comparison 
vulnerable functions safe buffer writings unsafe buffer writings safe format string calls unsafe format string calls total function calls 
go complex constructs implement safe function calls straight forward solution 
example difference safe unsafe calls shown char buffer strlen input string strcpy buffer input string safe strcpy buffer input string unsafe results tests table detailed results table 
source code short form appendix exact source code print outs various testing tools homepage www 
ida liu 
se observations think lexical testing tools rats perform true positive side 
great part tested vulnerabilities databases publications connected stated 
differ considerably false positives best 
security aware programmers knowledge buffer overflow format string attacks tools helpful 
probably get minor testing output able sort important rats splint boon function true false gets scanf fscanf sprintf strcat strcpy printf fprintf sprintf table 
detailed effectiveness accuracy intrusion prevention 
tl ue means unsafe call false means safe function call deemed unsafe 
means test possible 
importantly know solve reported problems 
experienced programmers output large tools give instructions solve problems need form help 
quite interesting splint boon finds bugs 
contacted splint author david concerning responded undetected bugs considered serious threat known security community easily unix command grep 
disagree detect security bugs possible 
help developers aware security vulnerabilities coming misuse functions 
splint tool distinguish safe unsafe calls strcat strcpy 
implicates splint possibility accurately detect security bugs low rate false positives just think considering deeper analysis code 
general feeling get running constraint testing tools kind prototype state 
splint name lclint time general syntactical semantical testing 
security part needs completed 
boon published prototype course judged 
tools high true positives combined low false positives 
really give programmer peace mind 
combining output tedious 
related comparative study static intrusion prevention tools source code scanners better code jose 
compares result rats testing part source code known vulnerable 
contains call vulnerable functions 
test false positives done 
study focus relating comparison static analysis fault injection techniques developing robust system services ong 
investigate strengths static analysis versus software fault injection finding errors large software packages apache mysql 
static analysis find race conditions boon find buffer overflows 
shown current state static intrusion prevention tools satisfying 
tools building lexical analysis produce false positives leading manual tools building deeper analysis syntactical semantical level produce false negatives leading security risks 
main usage tools support development code auditing substitute manual debugging testing 

singh timothy tsai 
protecting critical elements stacks 
white rw 
research 

cora proj ect december 

matt bishop michael 
checking race conditions file accesses 
computing systems spring 

lisa bowman 
companies hook security 
news cora cora january 

pete emil ong 
comparison static analysis fault injection techniques developing robust system services 
technical report computer science division university california berkeley 
cs 
berkeley 
edu pdf may 

cert coordination center 
cert cc statistics 
cert 
org stats february 

matt conover security team 
heap overflows 
www 
org files articles 
txt january 

crispin cowan matt barringer steve beattie greg hartman mike th jamie 
automatic protection printf format string vulnerabilities 
proceedings usenix security symposium washington dc usa august 


tao windows buffer overflow 
www 

com cdc files cdc april 

du aditya mathur 
vulnerability testing software system fault injection 
coast purdue university technical report www 

purdue 
edu coast coast library html april 

david evans john guttag james horning yang meng tan 
lclint tool specifications check code 
proceedings acm sigsoft symposium foundations software engineering pages december 

david evans david 
improving security extensible lightweight static analysis 
ieee software february 

ghosh tom connor gary mcgraw 
automated approach identifying potential vulnerabilities software 
proceedings ieee symposium security privacy pages may 

ghosh chuck howell james whittaker 
building software securely ground 
ieee software february 

lawrence kenneth bauer 
aint misbehaving taxonomy anti intrusion techniques 
www 
sans 
org resources aint april 

johnson 
lint program checker 
bell laboratories murray hill nj 
citeseer 
nj 
nec 
cora int 
july 

david david evans 
statically detecting buffer overflow vulnerabilities 
proceedings usenix security symposium washington dc usa august 

gary mcgraw john 
analysis buffer overflow attacks 
ibm developerworks security security articles www 
cm security library smash html security march 

jose 
project source code analysis tool 

sourceforge net march 

jose 
source code scanners better code 
linux journal www 

com article php sid january 

bbc news 
software security law call 
news 
bbc 
uk hi sci tech stm january 

tim 
format string attacks 
white www com rd html september 

aleph 
smashing stack fun profit 
org stackguard profit html november 


static checking programs lclint 
linux www 

com issue html march 

computer science national research council telecommunications board 
today tomorrow pay pay 
technical report national usa www nap 
edu books html january 

scut team 
exploiting format string vulnerabilities 

scene 
articles september 

umesh shankar talwar jeffrey foster david wagner 
automated detection format string vulnerabilities type 
proceedings loth usenix security symposium wm 
cs berkeley edu august 

robert 
request comments internet security glossary 
wu 
faqs 
org rfcs rfc html may 

secure software 
rough auditing tool security rats 


corn rats september 

tf 
bugtraq id wu ftpd remote format string stack overwrite vulnerability 
www 
securityfocus 
cora bid june 

john bloch gary mcgraw 
static vulnerability scanner code 
proceedings th annual computer security applications conference december 

john gary mcgraw 
building secure software avoid security problems right way 
addison wesley 

jeffrey voas gary mcgraw 
software fault injection programs errors 
john wiley sons 

david wagner foster eric brewer alexander aiken 
step automated detection buffer overrun vulnerabilities 
proceedings network distributed system security symposium pages resort hotel san diego california february 

david wheeler 

web page www com may 

david wheeler 
secure programming linux unix howto 
www 
com secure programs october 

john 
security intrusions intrusion prevention 
master thesis www 
ida liu 
se april 
testbed buffer overflow format string vulnerabilities appendix included function calls compare publicly available tools static intrusion prevention 
shorten included interesting parts 
full code downloaded homepage www 
ida liu 
se 
define static char static global buffer static char global buffer buffer overflow vulnerabilities pointer gets buffer unsafe scanf buffer safe safe scanf buffer unsafe unsafe fscanf fopen file name buffer safe safe fscanf fopen file name buffer unsafe unsafe input string buffer safe safe input string buffer unsafe unsafe choice safe unsafe choice input string safe input string unsafe choice fopen file name safe fopen file name unsafe sprintf buffer safe input string safe sprintf buffer unsafe input string unsafe strlen input string strcat buffer safe input string strcat buffer unsafe input string safe unsafe strlen input string strcpy buffer safe input string strcpy buffer unsafe input string safe unsafe buffer unsafe unsafe choice buffer safe safe buffer unsafe unsafe res buffer safe 
safe res buffer unsafe input string unsafe res buffer safe 
safe res buffer unsafe input string unsafe res buffer safe safe res input string buffer unsafe unsafe format string vulnerabilities printf static global buffer safe printf global buffer unsafe fprintf stdout static global buffer safe fprintf stdout global buffer unsafe char local buffer safe sprintf local buffer static global buffer input string unsafe sprintf local buffer global buffer input string char local buffer safe local buffer static global buffer input string unsafe local buffer global buffer input string choice static global buffer safe global buffer unsafe choice safe stdout static global buffer unsafe stdout global buffer char local buffer choice safe local buffer static global buffer unsafe local buffer global buffer char local buffer choice safe local buffer static global buffer unsafe local buffer global buffer 
