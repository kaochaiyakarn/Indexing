way fail infrastructure reliable servers routers yair amir ryan theo johns hopkins university computer science department cnds jhu edu maintaining availability critical servers routers important concern organizations 
lowest level ip addresses represent global namespace services accessible internet 
introduce wackamole completely distributed software solution provably correct algorithm negotiates assignment ip addresses currently available servers detection faults 
reallocation ensures time public ip address server cluster covered exactly long physical server survives network fault 
technique extended support highly available routers 
presents design considerations algorithm specification correctness proof discusses practical usage server clusters routers evaluates performance system 
maintaining availability critical network servers important concern organizations 
server redundancy traditional approach provide availability presence failures 
client perspective network accessible service resolved set public ip addresses specified service 
continued availability service ip addresses prerequisite providing uninterrupted service client 
order function correctly service public ip addresses covered exactly physical server time 
physical server covers public ip address clients receive service 
hand physical server covering ip address time network function properly clients may served correctly 
sizable market exists hardware solutions maintain availability ip addresses usually gateway hides actual servers smart switch router centralized manner 
wackamole high availability tool clusters servers 
wackamole ensures public ip addresses service available clients 
wackamole completely distributed software solution provably correct algorithm negotiates assignment ip addresses available servers detection faults recoveries provides way fail number servers cover 
simple algorithm utilizes strong group communication semantics wackamole demonstrates application group communication address critical availability problem core system presence cascading network server faults recoveries 
demonstrate architecture extended provide similar service highly available routers 
remainder organized follows 
section introduces system architecture 
section describes system model core algorithm engine wackamole discusses 
section analyzes practical considerations presents applications system 
section presents performance results concerning reconfiguration time wackamole clusters 
discuss related section conclude section 
system overview solution main components ip address control acquire release mechanism 
system wackamole state algorithm ip address manager xxx yyy xxx yyy xxx yyy system wackamole xxx yyy xxx yyy xxx yyy system system network state algorithm ip address manager 
wackamole architecture state synchronization algorithm wackamole algorithm 
membership service provided group communication toolkit 
group communication toolkit maintains membership service currently connected servers notifies synchronization algorithm view changes occur due server crashes recoveries network partitions 
synchronization algorithm manages logical assignment virtual ip addresses currently connected members avoiding conflicts occur merges recoveries covering holes arise result crash partition 
ip address control mechanism enforces decisions synchronization algorithm acquiring releasing ip addresses accordingly 
mechanisms highly specific operating system wackamole system runs 
correctness system dependent assumption group communication system provides accurate view current network connectivity 
additional connectivity reported group communication system may conflicts assignment ip addresses 
hand group communication system detect disconnection server current membership timely manner ip addresses covered server unavailable clients system reconfigure proper notification 
wackamole algorithm section state synchronization algorithm forms core wackamole system discuss correctness assumption membership notifications issued group communication system reflect actual network status 
system model order formally identify problem wackamole attempts solve define system model introduce correctness properties algorithm implemented system need maintain 
consider set servers provide service outside client applications 
servers located local area network lan susceptible crashes temporary network partitions network partition servers separated components unable communicate 
client applications access services ip addresses set 
servers responsible covering set virtual ip addresses 
refer ip addresses virtual order distinguish stationary default ip addresses change servers 
client applications oblivious stationary ip addresses servers possible partitioning may exist servers 
order guarantee correct service properties need maintained 
property correctness ip address set covered exactly server subset maximal connected component servers operational run state 
property liveness time set connected servers experience crashes recoveries network partitions merges servers switch operational run state 
order guarantee properties rely group communication system follow virtual synchrony properties partitionable systems provide agreed message delivery 
virtual synchrony property specifies servers advance membership deliver identical set messages membership 
agreed delivery property guarantees additionally messages delivered order servers 
furthermore assume group communication system provides membership service provides server group uniquely ordered list currently connected participants 
algorithm specification algorithm runs state machine 
partitions occur lan environments due instance switch failure subnetworks 
balance complete balance timeout reallocation complete gather run balance view change balance msg view change 
wackamole algorithm server maintains table current table contains virtual ip allocation current membership 
normal operation algorithm run state 
state server responsible set virtual ip addresses answer requests directed ip addresses 
run state current table information conflict free complete ip set covered maintaining correctness guarantees algorithm 
group communication system delivers view change event backup ip table created state msg sent member new view containing information ip addresses managed server identifier view initiated 
algorithm moves gather state 
algorithm run state view change old table current table send state msg state gather receive balance msg change ips gather state server incorporates information received state msgs current table variable checks existence conflicts ip allocation members previously partitioned components merged conflicts expected component covers full ip address set 
deterministic procedure invoked soon new state msg received checks server sent message introduces conflict respect information gathered set covered ip addresses 
conflict detected server drops addresses overlapping restoring consistency network level soon possible 
state messages state msg received server invokes deterministic procedure reallocate ips 
reallocate ips procedure servers sure virtual ips covered server current configuration 
particular procedure relies uniquely ordered membership list provided group communication system decide server covers ip address 
gather state interrupted cascading view change event server clears current table discarding information collected reverting information old table sends new state msg members new configuration 
algorithm gather state receive state msg current view id update current table received state msg current table members reallocate ips state run view change clear current table send state msg balance msg ignore correctness algorithm consider subset servers operational run state 
servers virtual ip address covered exactly 
consider view change event detected members 
group communication guarantees members receive view change notifications possibly disconnected 
algorithm server proceed gather state send state message containing local knowledge base 
consider server part part indicated group communication 
group communication system provides identically ordered list servers 
lemma connected set servers run state ip address covered server 
proof consider set servers connected view change event indicated group communication notification 
order servers advance run state state transfer algorithm executed gather state needs complete 
consider situation set servers detect view change events exit gather state 
assume receiving state message gather state line algorithm exists virtual ip address vip covered servers 
virtual synchrony agreed delivery guarantees group communication received state messages sent gather state received state messages 
management current table variable algorithm line algorithm lines algorithm fact state msgs generated current view considered line algorithm variable accurately reflect point state currently connected component 
stage algorithm servers don acquire new ip addresses covering vip previous memberships 
algorithm resolve conflicts procedure line algorithm receives state message notice conflict coverage vip adjust ip coverage table release vip appears membership list reasoning applies impossible vip covered point 
furthermore view virtual ip coverage 
note reaching agreement assume particular relation initial states members 
state messages received server execute reallocate ips procedure 
procedure server may acquire new ip addresses virtual ip covered server 
servers view coverage table detect set ip addresses need covered 
furthermore uniquely ordered list membership procedure reallocate ips guarantee unallocated virtual ip address covered exactly server 
concludes proof lemma 
lemma run state virtual ip address set covered server 
proof algorithm view change connectivity remains stable allowing gather procedure complete connected servers execute reallocate ips procedure 
shown servers start procedure component identical views ip coverage detect holes ip addresses covered server current component 
algorithm ip covered reallocate ips procedure ensuring complete coverage run state 
lemmas obtain correctness property specified section 
prove liveness property 
proof due properties group communication delivery specification time view change notifications occur server guaranteed deliver state messages sent membership 
time server execute finite procedure reallocate ips switch run state 
practical considerations algorithm far satisfies correctness guarantees optimized order improve performance 
practical perspective want minimize amount time ip address covered servers connected component order avoid network level conflicts 
ensured fact procedure invoked soon conflict detected involved parties drop offending ip 
algorithm balance state balance ips send balance msg state run view change balance msg state msg delay event similar importance system fast completion reconciliation gather state 
minimal task needs executed reallocate ips procedure acquisition non allocated ip addresses order guarantee complete coverage 
partitions merges system may unbalanced allocation ip addresses set connected servers 
avoid modify reallocate ips procedure perform load reallocation ip addresses 
extend time system non operational state 
introduce re balancing procedure triggered run state set timeout executed member representative connected component selected order membership list provided group communication system 
representative decides new ip allocation load balancing considerations explicit preferences specified server startup passed state messages 
representative broadcasts balance msg containing new ip allocation switches back run state 
receiving balance msg server run state acquires releases necessary ip addresses 
note balance state executes atomic procedure server ignoring potential view change notification group communication returns run state 
furthermore view change detected servers receive apply balance msg correctness algorithm endangered gather procedure assume starting state participating servers treats conflict discovered 
optimization added order gracefully bootstrap system 
server starts local variable mature unset responsible ip addresses 
receiving view change notification switches gather state 
gather state receives state message mature server mark mature continue normal algorithm execution 
servers contact mature remain immature certain timeout expires automatically sets mature notifies servers starts managing ip addresses 
reason optimization avoid quick ip cluster rebooted 
implementation wackamole implemented interoperability mind currently supports freebsd linux solaris systems 
readily accommodate multiple platforms implementation separated clearly delineated parts 
comprised generic ansi code implements core algorithm 
second contains platform specific code implements functionality needed manage multiple interfaces spoof arp caches supported operating system 
spread toolkit correctness efficiency system depends group communication system provides reliable totally ordered multicast group membership notifications cluster servers 
wackamole implemented spread group communication toolkit 
spread general purpose group communication system wide local area networks 
provides reliable ordered delivery messages fifo causal agreed ordering virtual synchrony extended virtual synchrony membership services 
properties match algorithm requirements specified section spread uses client daemon architecture 
node crashes recoveries network partitions detected spread daemon level detecting event spread daemons install new daemon membership inform clients corresponding changes group membership introduced failure 
clients notified changes group membership triggered graceful leave join client 
spread toolkit optimized support situation triggering full daemon membership reconfiguration informing participating group new group membership 
impact optimized approach apparent section 
spread toolkit publicly available organizations research production settings 
supports cross platform applications ported unix platforms windows java environments 
implementation considerations wackamole state synchronization algorithm implemented group membership messaging services offered spread toolkit 
immediately startup wackamole daemon connects spread daemon running host joins wackamole group 
relies regular membership messages sent spread determine current set available hosts initiate state transfer view change detection 
spread ensure messages sent total order wackamole daemons old messages discarded receipt identified properly endian conflicts platforms handled correctly 
consequence wackamole tightly coupled relationship spread fine tuning decisions improve wackamole response time network events dependent way spread configured 
modifying spread network failure probing timeouts done system specific basis 
done properly tuning detrimental performance wackamole cluster increasing number false positive network failures 
impact tuning analyzed section 
wackamole daemon disconnected spread drop virtual interfaces enter cycle periodically attempts reconnect spread ensure correctness services spread provides 
behavior allows clusters survive changes spread daemons communicate version changes re internet router xxx yyy xxx yyy webserver xxx yyy webserver xxx yyy webserver xxx yyy xxx yyy webserver webserver xxx yyy webserver wackamole wackamole internet router xxx yyy 
way fail web clusters ip failed server reassigned available servers router informed arp change 
initializations configuration modification account fact spread may multiple applications concurrently 
order provide continuous service wackamole daemons spread bind ip addresses subject wackamole management 
consequently possible required run spread separate network interface card nic virtual ip addresses managed wackamole 
wackamole provide failure detection applications may relying management servers 
situations cause failures detectable spread membership service 
problem directly addressed wackamole implementation possible solution perform run time checks availability nic specific applications wackamole trigger virtual ip migration failure detected 
practical aspect wackamole implementation addition input channel allow administrative control cluster behavior 
way wackamole handles network failures modified decisions deterministically chosen representative imposed daemons independently daemon deterministic decision process 
enable changing way virtual address allocation decisions breaking version compatibility 
practical applications primary applications wackamole developed clusters fail routers 
implementation wackamole takes applications account fine tuned appropriate tradeoffs situation 
show wackamole provides availability applications 
way fail clusters web clustering application drove creation wackamole 
combination domain name service dns wackamole provides functionality enable websites served multiple ip addresses hosted cluster machines highly available 
generic management virtual addresses discussed 
class application requires wackamole perform additional task arp spoofing 
ip addresses routing wide area networks local area networks media access control mac addresses 
ip address resolved mac address address resolution protocol arp 
problem wackamole 
arp data cached ip address basis 
cache updated virtual address moved host host cached address pair virtual address 
assume managing local area cluster requests server come router 
router arp cache updated order ensure correctly forwards packets appropriate machine wackamole alters allocation virtual addresses cluster 
consequently part wackamole platform specific code deals spoofing arp reply packets force updates router arp cache 
example layout wackamole assisted web cluster consists number web servers internet xxx yyy db xxx yyy web router xxx yyy xxx yyy router xxx yyy xxx yyy internet xxx yyy router xxx yyy xxx yyy router xxx yyy xxx yyy xxx yyy zzz zzz db zzz xxx yyy web xxx yyy zzz 
way fail routers point single physical router acts virtual router managing virtual addresses xxx yyy xxx yyy 
single router outside requests 
web servers running spread daemon private ip address running wackamole daemon ensure virtual ip addresses correctly allocated 
server responsible notifying router update arp cache assumes responsibility new virtual address 
way fail routers router management application emerged common wackamole 
example layout application wackamole consists multiple physical routers act single virtual router depicted 
indivisible set virtual addresses different interfaces allocated physical router currently acting fail router 
ip xxx yyy xxx yyy represent logical ip addresses router networks serves 
picture shows stationary ip addresses physical router networks 
ips depicted inside virtual router box 
interface machine connected spread fails machine crashes set virtual ip addresses reallocated different machine 
set physical routers running wackamole potentially router conceptualized single virtual router 
part wackamole architecture support application additional modifications needed web clustering 
router needs simultaneously exist multiple networks order route packets said networks 
set virtual ip addresses considered single entity 
result wackamole modified support grouping multiple ip addresses possibly different interfaces indivisible set virtual addresses 
enables correct handling situations single host managed wackamole accessible multiple virtual addresses 
furthermore notification mechanism arp spoofing enhanced update arp cache host resolved mac address virtual router 
facilitate necessary notification wackamole daemon periodically sends data arp cache daemons 
possible daemon approximately know set machines notified assumes responsibility virtual ip address 
obviously approach scale large lans 
investigating potential applying garbage collection techniques arp spoof notification accurately targeted hosts require notification 
method described incurs additional delays router dynamic routing protocol ospf rip interfaces 
fail router case needs updated current state relevant dynamic routing tables able route messages properly 
usually takes seconds 
different setup avoid delay 
alternate setup participating fail routers act separate entities dynamic routing protocol advertise internal networks external dynamic networks 
fail routers continuously updated route changes 
internal network fail routers actively routes wackamole ensure ip address covered fail routers 
setup failure routers cause minor service interruption noticeable fraction external routing queries directed failed router 
routing internal network affected designated router fails 
case wackamole router control virtual router address hand complete soon wackamole reconfigures additional need transfer routing information 
essentially setup closer setup described section solution scenarios provides additional benefit allowing heterogenous set physical routers collaborate forming virtual router 
variety architectures operating systems routers provides increased protection virtual router security exploits may target specific platforms 
performance results order assess performance wackamole relevant measurement length service interruption perceived client server communicating unavailable fault 
reason report results average availability interruption time computer running wackamole fails virtual addresses reallocated computer measured client 
experiment place simple server process computer wackamole 
server responds udp packets sending packet containing hostname 
client process computer instructed continuously access specific virtual address sending udp request packets specified interval record hostname server responds time response received 
experiments ms interval requests 
value smallest practically determined linux context switch times 
fault induced disconnecting interface spread wackamole experimental server access network client receiving responses requests 
wackamole completes ip address reallocation procedure client arp cache updated client resumes receiving responses queries time computer target address 
time elapsed receipt response disabled computer response new server availability interruption time experimental client point view 
small possibility error measurement due interval requests fluctuations network measurements represent upper bound actual interruption time 
discussed wackamole depends spread group communication toolkit notification membership changes 
reason availability parameter name default spread tuned spread fault detection timeout distributed heartbeat timeout discovery timeout table 
spread timeout tuning seconds tion time measures total time complete actions spread detection membership changes spread daemon process group membership installation wackamole state transfer virtual address reallocation wackamole arp spoofing 
light dependency performed sets experiments 
set uses default spread settings timeout intervals designed perform adequately networks variety applications 
second set uses fine tuned version spread adjusted relevant timeout intervals specifically wackamole application network setup 
experiments run mbit ethernet lan cluster maintaining virtual ip addresses cluster varying number servers 
table shows differences experiment setups 
timeouts table cover major components time takes spread notify wackamole network faults 
distributed heartbeat timeout specifies interval spread daemon notifies daemons operation 
fault detection timeout begins approximately time distributed heartbeat timeout timeout expires daemon specified operating spread assumes fault taken place attempts reconfigure 
fault occur time heartbeat interval actual time detect failure ranges failure detection timeout distributed heartbeat timeout failure detection timeout 
discovery timeout time spent performing reconfiguration determining currently available set spread daemons installing configuration view daemon 
time takes default spread notify wackamole failure ignoring minor overhead spread group membership procedure ranges seconds seconds 
tuned spread time ranges seconds seconds 
displays average availability interruption time varying cluster size version spread 
notice spread timeouts account majority interruption time recorded experiments 
results obtained cluster servers low average load 
wackamole spread production highly loaded machines 
recommended daemon processes run high priority real time priority linux cluster size average availability interruption default spread fine tuned spread 
average availability interruption varying cluster size types environments order avoid false positive errors 
adverse impact cluster performance spread wackamole hardly consume resources application 
relevant availability interruption time wackamole daemon leaves voluntarily result failure 
experienced wackamole daemons taken offline administrative policy reasons 
time interval difficult measure precisely susceptible context switch times low level fluctuations 
general measurements suggest conservative upper bound milliseconds availability interruption experimental cluster measurements recorded interruption time small ms 
related wackamole current state evolved idea introduced 
areas relate 
hand solution benefits extensive research areas group communication distributed algorithms 
hand various techniques employed provide availability critical services 
additionally ip fail solution usually conjunction load balancing mechanisms 
wackamole mod load balancing module web servers 
address coupling wackamole various load balancing techniques outside scope 
research group communication area lead implementation systems provide properties similar required wackamole algorithm 
systems mention horus ensemble totem 
wackamole algorithm uses design similar state machine approach maintaining consistent state distributed systems wackamole fail solution designed preserve ip presence service 
virtual router redundancy protocol designed perform similar task routers 
specifies election protocol dynamically assigns responsibility virtual router routers local area network 
design chaired ietf working group formalized internet standard rfc 
similar protocol hot standby router protocol developed cisco 
essence elects router active router standby router 
active standby routers send hello messages 
standby router candidate take active role active router faults 
routers monitoring hello messages sent active standby routers 
routers may assigned priorities 
router highest priority active router initialization 
certain active timeout elapses hearing hello messages active router standby router takes 
similarly standby timeout elapses monitoring router exist lower ip address takes standby role 
default hello messages sent seconds active timeouts set seconds 
aside ip fail front high availability load balancing devices front mission critical networked services provide uninterrupted service event system failure 
devices perform application level checks machines cluster keep track machines providing service 
virtual ip address clients connect dynamically set local endpoint ip connection active machine local cluster 
devices common today support large internet sites provided variety vendors 
devices include cisco big ip equalizer linux virtual server 
components may provide just high availability specifically load balancing highly available component single point failure 
vendor method providing high availability devices application independent protocol wackamole just easily accomplish 
services need high availability remedial load balancing techniques multiple dns records 
architectures ip fail protocol directly machine providing service question reduces need complicated expensive unnecessary high availability loadbalancing components 
linux fake project provides ip fail service probing arp spoofing 
availability main server probed regularly failure detection backup server instantiates virtual ip interface take failed send gratuitous arp request accelerate transition 
matrix ha product provides service similar wackamole 
technical details implementation soundness protocols assessed product 
solution offered pairwise fail server covered specific server 
latest version software reporting spread toolkit provides ip failover 
presentation distributed session service infrastructure authors mention virtual ip manager application similarly wackamole exploits underlying group communication guarantees provide fail servers indicate technology applied firewalls routers 
software distributed solution providing high availability clusters routers ip addressing level 
core algorithm relies group communication service monitor currently connected membership reallocate virtual ip addresses accessible client machines servers 
algorithm discussed correctness 
discussed classes practical applications system provided experimental performance results 
wackamole system available opensource tool august www wackamole org 
past months system downloaded times actively production environments web cluster router availability applications described 
demonstrates sound academic research readily impact production environments 
jim burns brian gary levin telcordia technologies insightful discussions suggestions 
amir gu stanton 
practical cluster applications group communication 
proceedings ieee international conference dependable systems networks new york ny 
amir moser melliar smith agarwal 
fast message ordering membership logical token passing ring 
proceedings th ieee international conference distributed computing systems may 
amir stanton 
spread wide area group communication system 
technical report cnds johns hopkins university center networking distributed systems 
cisco 
www cisco com en products hw ps index html 
big ip 
www com products 
birman joseph 
exploiting virtual synchrony distributed systems 
proceedings acm symposium os principles pages 
equalizer 
www com equalizer htm 
linux fake project 
www net linux fake 
fan 
distributed session service networking elements 
workshop communication architecture clusters 
international parallel distributed processing symposium 
hayden 
ensemble system 
phd thesis cornell university 
hot standby router protocol 
www cisco com cc td doc ics cs htm 

www com products 
linux virtual server 
www org 
moser amir melliar smith agarwal 
extended virtual synchrony 
international conference distributed computing systems pages 
open shortest path 
www ietf org html charters ospf charter html 
pedone 
database state machine group communication issues 
phd thesis ecole polytechnique de lausanne switzerland 
matrix ha 
com 
routing information protocol 
www ietf org html charters rip charter html 
schneider 
implementing fault tolerant services state machine approach tutorial 
acm computing surveys dec 
spread toolkit 
www spread org 
van renesse birman maffeis 
horus flexible group communication system 
communications acm apr 
virtual router redundancy protocol 
www ietf org html charters charter html 
wackamole 
www wackamole org 

