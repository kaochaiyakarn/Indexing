understanding availability bhagwan stefan savage geoffrey voelker department computer science engineering university california san diego addresses simple fundamental question design peer peer systems mean say availability understanding impact engineering practical systems 
argue existing measurements models capture complex time varying nature availability today peer peer environments 
show unforeseen methodological shortcomings dramatically biased previous analyses phenomenon 
basis study empirically characterize availability large peer peer system period days analyze dependence underlying availability distributions measure host turnover system discuss results may affect design high availability peer peer services 
inevitably real systems working 
point disks fail hosts crash networks partition software administrators users misuse 
consequently principal challenge designing highly available systems tolerate failure occurs recover effects 
engineering systems efficiently requires designer informed decisions availability individual system components 
webster dictionary defines availability quality ready immediate 
seemingly simple definition conceal tremendous complexity 
traditional data storage systems components interest devices disks scsi interfaces nvram buffers understood statistical failure properties usually assumed fail independent redundant disk arrays 
peerto peer storage systems component interest host availability poorly understood comparison 
failure individual hardware components compromise availability host peer peer system designer anticipate transient software failures partial total communication interruption users department electrical computer engineering ucsd join leave system independently 
components time varying 
example peer peer system may replicate file machines time time machines may turned owners go returning time 
availability hosts dependent time day avail ability file function time 
issue availability host dependent availability host host availabilities interdependent 
issue important peer topeer systems designed assumption random selection hosts network fail time :10.1.1.159.9358
consequently host availability modeled single stationary distribution combination number time varying functions ranging transient packet loss permanent disk crash 
traditionally distributed systems assumed transient failures short transparently masked long term components availability require explicit system engineering 
peer peer systems abstraction grossly insufficient 
new intermittent component availability introduced users periodically leaving joining system time 
set hosts comprise system continuously changing new hosts arrive system existing hosts depart permanently daily basis 
peer peer system designed substrate need incorporate arriving hosts overhead able provide functionality promises provide face regular departures 
motivated study peer peer host availability part shape design evaluation highly available wide area peer peer storage system 
primary goal system provide efficient highly available file storage system comprised hosts relatively poor highly variable availability 
results apply peer peer system constructed similar collection hosts 
remainder examines issues empirically characterizing host availability large deployed peer peer file sharing system day period 
principal contributions show minor methodological limitation previous availability measurements lead underestimated host availability :10.1.1.160.7346:10.1.1.11.4677
second show host availability peer peer systems complex metric warrant specification just fractional value 
thirdly show purposes storage placement availability hosts dependent time day roughly independent availability hosts 
measure system wide dynamics network calculating rate new hosts arrive system time existing ones depart 
conclude summary findings 
related saroiu chu characterized host availability gnutella peer peer network actively probing tcp ip addresses gathered gnutella crawler :10.1.1.160.7346:10.1.1.11.4677
sen wang described similar study passive measurement flow level data multiple routers large tier isp backbone 
long measured workstation availability internet active probing methodology 
unfortunately approaches rely ip addresses uniquely identify individual hosts time 
assumption accurate long study modern dynamic address assignment protocols dhcp easily cause host counted multiple times underestimate host availability 
growth nat boxes affect correctness tcp ip technique 
weatherspoon analyzed impact failure peer peer block storage systems model disk mean time failure 
separate authors address issue independence host failures 
mention need quantify dependence failures coarse grained level failures due network os version efforts capture complexity peer topeer environment particularly user controlled transient outages dominate host availability real systems 
dependence host availabilities time interdependence host availabilities stemming user behavior studied detail 
experimental methodology study host availability peer peer systems actively measure availability hosts overnet filesharing network 
section describe overnet reasons choosing popular systems 
describe experimental methodology periodically identifying hosts subsequently probing 
overnet overnet peer peer file sharing system kademlia structured distributed hash table dht :10.1.1.16.4785
overnet hierarchy hosts identical functionality 
new client joins overnet randomly generates id 
client id remains unchanged subsequent joins leaves client user deletes file containing client preferences 
lookup routing purposes host maintains list neighbors ip addresses 
details list :10.1.1.16.4785:10.1.1.16.4785
measure overnet system model host availability reasons overnet users identified immutable ids enabling track hosts id ip address 
ids eliminates problem host aliasing dhcp nats 
host availability studies need sufficiently widely deployed peer peer network measurements valid acceptable 
knowledge overnet widely deployed dht peerto peer network 
note overnet open source system protocol 
result perform availability measurements reverse engineer various aspects overnet protocol 
popular open source systems convenient measure meet requirements study particular identifying hosts unique id 
methodology measurement infrastructure consists components crawler prober 
crawler provides global view host membership system 
prober allows get detailed fine grained information individual host behaviour 
crawler purpose crawler collect snapshot ids active hosts network particular point time 
repeatedly requesting randomly generated ids 
requests lead discovery number hosts 
crawler repeats process sending requests ids newly discovered hosts 
crawler uses recursive algorithm discover ids hosts network performing lookups hosts find 
crawler runs hours minimize impact system locates hosts 
prober purpose prober periodically probe set hosts determine available system particular time 
uses random subset host ids discovered crawler probes minutes 
chose subset hosts probe overhead probing hosts limits frequency cycle 
prober determines availability host id performing lookup lookup succeeds host id responds probes 
successful lookup implies available host running overnet peer 
probes look exactly normal overnet protocol traffic 
contrast previous measurement studies peer peer networks tcp syn packets 
strategy main advantages 
eliminates problem ip address aliasing due dhcp nat multiple users machine 
second due overnet lookup procedure repeatedly send probes hosts unavailable long periods time keeping experiments non intrusive 
results section results measurements inferences draw 
summarize data obtained crawler prober 
show effects aliasing measured availability 
show distribution host availability varies depending time calculated 
characterize time day effects host availability characterize host availability interdependence 
measure global host membership turnover terms host arrivals departures overnet 
experiment summary crawler ran hours period days january january pass crawler yielded approximately host ids single day passes crawler host ids seen roughly ids crawler gathered day chose random prober trace fine grained time intervals 
probed hosts minutes days january january 
hosts responded probes 
aliasing effects unique hosts responded prober total unique ip addresses responded prober 
results unique host id ip address ratio approximately 
clearly host ip address aliasing significant issue deployed peer peer systems overnet 
aliasing effects due various reasons 
disruption january roughly hours due storage problems 
percentage hosts 
days percentage hosts ip address different periods time 
main cause dhcp 
common host leaves system joins time different ip address 
nats introduce aliasing network making private ip addresses hosts 
possible cause aliasing multiple users machine different unique ids ip address 
provides insight nature aliasing 
shows percentage hosts ip address varying periods time 
example just day probed hosts ip address 
number increases days 
results show measuring host availability probing hosts ip addresses misleading 
fact probed hosts ip addresses 
numbers get larger longer periods probing 
probing ip address accurately capture availability characteristics hosts 
ip address probing consider ip address new host greatly overestimating number hosts system underestimating availability 
evaluate implications ip address aliasing modeling host availability derive host availability distributions probing techniques 
shows cumulative distribution host availability calculated days 
calculate host availability host dividing number probes host responds total number probes 
darker line shows accurate distribution obtained host ids identify individual hosts lighter line shows distribution calculated ip address seen host id lighter curve reminiscent availability curve popular gnutella study :10.1.1.160.7346
significant difference curves ip calculation greatly underestimating host availability 
percentage hosts considering aliasing ignoring aliasing host availability host availability derived unique host id probes vs ip address probes 
difference distributions demonstrates extent ip addresses identify hosts inaccurate 
example darker curve shows hosts availability ip address probing denoted lighter curve conclude hosts availability 
ip addresses availability factor 
ip address methodology parameterize design highly available storage system replicas files required compensate apparently low availability waste storage space 
example model peer peer file availability number file replicas required maintain file availability mean host availability times storage overhead compared number replicas required mean host availability :10.1.1.12.2849
host availability calculated host availability days entire period active probe measurements 
period time host availability calculated change distribution 
determine extent effect varied time period calculate host availability 
shows results experiment 
period hours distribution curve slightly concave period days distribution curve convex 
days convexity curve increases 
suspect longer periods measurement increase 
put differently distribution curve moves left period availability calculated increases 
stems fact probing hosts entire period longer period time greater chances host unavailable 
con host availability hours days days percentage hosts dynamic nature availability distribution 
varies time period availability calculated 
probing measurements longer periods time validate hypothesis 
implication availability distribution characterize hosts system simply fractional value reflect mean host availability models system behavior needs specify period time availability measurement holds :10.1.1.159.9358
fact host availability decreases longer periods time motivates need periodic file refreshes re insertions system 
time day effects characterize effect time day host availability 
need see host availability pattern varies local time local time geographic location host 
calculate local time host caida tool determine longitude host current ip address time probed 
map host longitude local time zone 
shows number available hosts function local time hosts geographic location 
ticks axis correspond midnight days labeled applies time series graphs 
studies peer peer systems graph shows diurnal pattern :10.1.1.11.4677
difference maximum minimum number available hosts single day roughly 
average host joins leaves day joins leaves host day 
considerable number hosts probed responded probes 
system cfs actively replicates objects immediately learns host join leave 
hosts local time diurnal patterns number available hosts 
cause large amount overhead terms amount data transferred hosts 
feature notice graph steady decrease total number hosts available subsequent days reflected availability distribution measurement 
limited short trace duration trend indicates decay hosts day 
fact steady decay number hosts time indicates system oceanstore frequent periodic file refreshes required maintain high file availability 
host availability interdependence diurnal pattern indicates availability varies time day 
non peak hours number hosts unavailable 
structured peer peer storage systems assume happens low probability failing objects stored system lost forever 
knowledge study investigate extent assumption holds 
characterize dependence host pair conditional probabilities 
consider hosts need determine conditional probability available available time call value 
equal probability available available independent 
independent availability time imply availability time 
calculated host pair empirical data hour trace 
shows probability density function difference values 
graph shows pairs difference 
host pairs lie indicating significant independence host pairs 
percentage host pairs difference probability density function difference 
pick small subset hosts randomly highly availabilities strongly dependent may show strong correlation time day 
example cfs size subset kademlia 
probability hosts failing low 
arrivals departures host turnover important peer peer systems rely long term host membership 
example archival peer peer storage systems oceanstore high degree redundancy mask host failures departures time 
rate host turnover fundamentally determines rate system refresh restore redundancy system maintain file availability overhead process entails 
characterize host membership turnover overnet determine rate new hosts enter system time arrive rate existing hosts leave system permanently depart 
note distinction host joins leaves refer intermittent disconnections hosts system 
estimate arrival departure rates overnet day crawler trace active hosts 
consider occurrence host id trace arriving host occurrence host id departing host 
shows host arrivals departures fraction number active hosts system day trace 
perspective period crawler roughly hosts overnet active day 
graph see overnet significant degree turnover 
day new hosts seen trace comprise system roughly hosts day 
time existing hosts departing roughly rate 
result fraction hosts time arrivals departures new host arrivals existing host departures overnet fraction hosts system approximately period 
high values period artifacts starting trace 
size overnet stayed constant trace period 
trace days results capture short term turnover 
continuing trace capture long term turnover 
summary studied characteristics host availability overnet peer peer file sharing system discussed implications findings design operation peer peer systems 
ip address aliasing significant problem systems measurements host ip address significantly underestimate peer peer host availability 
argue availability modeled single parameter distribution combination time varying distributions short term daily joins leaves individual hosts long term host arrivals departures 
overnet trace behaviors significantly impact host availability 
set hosts probed fine time granularity host joined left system times day average 
global crawl active hosts system coarser granularity host turnover system considerable hosts system arrive depart day 
peer peer systems take account sources host unavailability gracefully efficiently provide highly available service 
bhagwan moore savage voelker 
replication strategies highly available peer peer storage 
proceedings directions distributed computing june 
bhagwan savage voelker :10.1.1.12.2849
replication strategies highly available peer peer systems 
technical report cs university california san diego nov 
chu levine :10.1.1.11.4677
availability locality measurements peer peer file systems 
proceedings scalability traffic control ip networks july 
dabek kaashoek karger morris stoica :10.1.1.159.9358
wide area cooperative storage cfs 
proceedings th acm symposium operating system principles sosp 
gibson 
redundant disk arrays reliable parallel secondary storage 
phd thesis university california berkeley 
report ucb csd 
gnutella homepage www gnutella com 
kubiatowicz bindel chen eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
proceedings acm asp los 
long muir golding 
longitudinal study internet host reliability 
proceedings fourteenth symposium reliable distributed systems september 
maymounkov mazieres :10.1.1.16.4785
kademlia peer peer information system xor metric 
proceedings st international workshop peer peer systems iptps march 
internet geographic database www caida org tools utilities 
overnet website www overnet com 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proceedings th acm symposium operating systems principles sosp 
saroiu gummadi gribble :10.1.1.160.7346
measurement study peer peer file sharing systems 
proceedings mmcn 
sen wang 
analyzing peer peer traffic large networks 
proceedings acm sigcomm internet measurement workshop november 
total recall website ramp ucsd edu projects recall 
weatherspoon kubiatowicz 
erasure coding replication quantitative approach 
proceedings international workshop peer peer systems 
weatherspoon kubiatowicz 
introspective failure analysis avoiding correlated failures peerto peer systems 
proceedings international workshop reliable peer peer distributed systems october 
