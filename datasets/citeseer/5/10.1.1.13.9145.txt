composition refinement behavioral specifications pavlovic douglas smith kestrel institute avenue palo alto california usa presents framework specifying developing reasoning complex systems 
framework combines features algebraic specifications state machines refinement calculus couched categorical setting 
particular show extend algebraic spec evolving specifications especs way composition refinement operations extend capture dynamics evolving adaptive self adaptive software development remaining efficiently computable 
framework partially implemented system 
construction complex systems easier reliable 
get handle complexity researchers engineers advocate architectural approach system design system treated composition components connectors mediate interaction see 
goal having clear simple architecture odds performance goals system 
way dilemma framework allows composition components connectors high level architectural design followed refinement design code 
refinement process may break component connector boundaries optimize system performance introducing lower level design deci sions subsystem architectures algorithms data structures 
introduces formal framework called evolving specifications simply especs supports specification development complex systems 
especs provide means explicitly modeling logical structure behavior systems 
framework supports precise automatable operations composition especs refinement 
espec framework partially implemented system 
especs grew higher order algebraic specifi cations implemented specware tt evolving algebras gurevich aka state machines classical axiomatic semantics floyd hoare dijkstra 
especs go allowing capture logical structure behavior composition systems refinement code 
course composition refinement operations meaning preserving code produced means composition refinement guaranteed consistent initial especs 
structured straightforwardly 
discuss extend logical specifications model behavior define especs refine compose formally 
concepts illustrated simple examples 
presumes knowledge basic category theory see tt relevant background 
details especs may 
related approaches providing ical foundations specifying composing refining behaviors may 
logical theories state machines behaviors basic building blocks theories translations known theory morphisms 
theory formalizes predicate logic known domain artifact general 
theory comprised language subset language called theorems 
translation morphism theories maps language signature theory terms preserving meaning validity type structure preserved theorems mapped theorems 
translation map symbols theory expressions 
map applied recursively translate expressions 
foundation formally model state machines 
state computation viewed snapshot computer performing computation 
rudimentary computer viewed set stores mechanism rewriting stored values 
rewrites computation steps transitions 
logical formalisms behavior cf 
treat states static mathematical models global theory transitions finite changes components state model 
example array represented finite function value may vary possible models 
transition correspond assignment changed array finite function 
computation program specified evolving state state envisioned jumping model model mod thy 
see connection theories trans lations hand states transitions consider correctness assignment statement relative precondition postcondition hoare triple consider initial final states characterized theories theorems respectively triple valid iff theorem triple valid iff symbol map induces translation note translation goes opposite direction state transition 
practice usually deals ab states individual states models 
reasoning programs typically interested states satisfy certain properties specifications general state descriptions pass models sets models specified extensions global spec 
basic idea especs specifications nite presentations theory state descriptions translations represent transitions state descriptions 
specification state description corre sponds local structure properties invariants 
specification common state descriptions specifies global structure invariants system 
structure common states computation reach formalized global specifi cation common structure includes variables sorts axioms global invariants operations global constants 
example see simple program framework 
stad denotes state description step transition 
espec gcd defines concept greatest common divisor natural numbers state machine specifies required behavior divisor computation 
espec gcd base spec const pos var pos keyword spec encloses logical specification constant positive integers positive integer varies states op gcd pos pos pos axiom gcd spec axiom specifies gcd problem gcd divides divides forall pos divides divides spec prog prog keyword prog encloses state machine empty case espec espec gcd import gcd base spec thm gcd spec spec extends spec gcd base theorem theorem follows axiom gcd spec prog keyword prog encloses state machine stad init initial state receives stad stad fin stad extends global spec local axiom axiom gcd stad step gcd step prog espec transition stad stad note steps expressed terms symbol translations 
connection trans lations transitions henceforth assignments write espec gcd refines gcd 
prog expresses classical gcd algorithm generated design tactic 
gcd extends logical spec gcd local variables essentially refinement adds new stad looping transitions preserve key loop invariant program change transitions gcd gcd input values 
espec gcd import gcd base spec new vars compute gcd var pos spec prog stad init stad stad loop axiom gcd gcd stad stad fin axiom axiom axiom gcd stad step initialize loop step step loop loop step step loop loop loop step step loop step prog espec straightforward check gcd internally consistent show loop corresponds translation show loop gcd gcd correctness conditions refinements ad dressed section 
especs concept espec formally defined 
definition graph consists sets edge nodes functions doms cods edge nodes 
shape graph reflexive sense function ids nodes edges assigns distinguished loop node distinguished initial node set final nodes stad assigns shape node state de scription stad comes translation sta spec stad step assigns shape edge step transition step stad stad keeping invariant sense diagram commutes 
st stad stad ep morphisms preserving displayed structure shapes form category shape 
definition evolving spec espec consists spec program shape reflexive graph morphism sta shape ext spec category extensions spec labeling cond edges shape formulas language spec sta maps nodes shape specs maps arcs trans lations sta sta sta 
sta maps self loops shape identity translations 
refinements define concept refinement morphism especs 
characteristic espec refinements logical structure behavior refine contravariantly opposite directions 
refines spec refines spec translation prog maps prog simulating 
refinement preserves logical structure preserves behavior definition especs refinement consists st spec stb convenient display input output interfaces parameter subtheories initial final states respectively 
notation terminology 
input put interfaces usually written stad name init xi stad name fin xo 
node codomain sta written 
edge image sta usually written 
summary structure map translation behavior map simulation reflexive graph morphism pre serving initial final nodes preserving natural transformation naturality preservation amount commutativity shape see notes 
definition parameter sofa parametric specification freely instantiated causing inconsistencies parameterized specification 
captures idea interface 
la st condb st stad naturality condition refinement satisfy guard condition edge shape edge shape cond inverse image functor pec acts category extensions 
clearly especs refinements form category shall denote espec 
intuition 
diagram tells components coherently extend global specs spec spec extensions stad stad 
just spec refines spec proves formulas image refines proves formulas image stad 
structural refinement extended spec stad stad 
naturality ensures transition step extends transition guard condition ensures behavior maps behavior stronger versions guard condition ensure simulates behaviors eliminate nondeterminism 
commit def guard condition sufficient purposes 
return example section 
refinement gcd gcd simple inclusion stad map loop step map initialize idone loop idone loop idone steps map identity step stad gcd change local variables corresponding identity steps gcd called stuttering steps 
checking components natural transformation straightforward proof obligations include showing translation nodes axioms stad gcd translate theorems stad loop gcd 
checking guard condition straightforward step gcd guard condition loop true consequent guard step idone gcd 
colimits composition especs carried colimit operation 
colimits espec constructed colimits pec limits shape plus wiring connect cat 
recall colimits derived initial object pushouts 
course initial espec consists empty spec state step program state represented empty spec 
describe pushout especs suppose span especs spec spec functor constructed account 
image std node shape obtained unique arrow pushout top pushout bottom cube 
shape sta ext compute pushout compute corresponding pushout specs pullback shapes 
spec 
spec shape 
shape easy see spec cat maps upper pushout pullback bottom induced cube 
shape 
shape shaped 
stad st identities back faces cube commutative fact bottom face pullback induce functor std shape spec spec 
spec sta stc shape pullback node corresponds pair nodes shape identified shape node 
course 
construction gives node part std shape ext components tst 
arrow part induced fact bottom cube pushout naturality 
yields naturality tst 
construct guards edges shape edge shape define condb tspec proof construction yields espec desired universal properties may 
explanation 
pushout specs clear languages get joined identified common part 
pullback shapes produces parallel composition behaviors 
particularly easy see products pullbacks final espec 
example product shape node shape consists cylinder copies shape corresponding nodes connected edge 
product node shape consists copies similarly connected 
general product shapes shape shape envisaged putting copy sn shape node expanding edge shape cylinder sm sn set parallel edges connecting corresponding nodes 
initial node pair initial nodes shape final nodes pairs final nodes 
resulting shape edge comes copy placed node edge shape copied connect particular copies node form node edge form node edge 
moment thought shows path shape corresponds shuffle path path path comes unique path shape sense shape parallel composition shape pullback extracts part product identified pair shape morphisms shape shape initial node preserved initial node product surely contained pullback 
set final nodes may empty general 
pair nodes contained pullback shape node corresponding state description constructed pushout stad diagram 
ory state description may inconsistent 
independent shared part parallel composition may globally inconsistent sense may inconsistent pairs states may come shuffling computation paths may inconsistent paths computationally sible 
inference tools eliminate incon sistent unreachable colimit espec 
despite complexity mathematical depth description colimit actual computation relatively simple 
just steps pullback shapes pushout specs guards directly computed point pushout extensions steps 
steps simple known 
third amounts computing pushout theories stad universality pushout generate steps colimit algorithm returns cocone generator translations witness universality apex 
composition example example illustrates composition especs context bank account transactions 
espec account deposit espec account withdrawal composed form espec simultaneously withdraws account deposits 
example indicates especs model aspects object oriented programming 
specifically classes modeled specs objects classes state 
multiple inheritance comes free 
methods partially specified refined overridden 
espec account class spec sort account op name account string op balance account int spec espec espec account instance import account class spec vars changed externally var ext self account var ext int spec prog parameterized stad create self init person axiom name self person axiom balance self stad stad account self axiom balance self stad step deposit self create self account self balance self step step change self account self account self balance self balance self step prog espec order model transfer account refine common part especs representing instances extend class template extract suitable transitions 
pushout imports create joint instantiation pairs accounts parallel changes 
espec share trans import account class spec var ext int spec prog step change self account self account self balance self balance self step prog espec refinement send share trans account instance ref refinement receive share trans account instance nl refinement refinements send receive specify amount withdrawn amount deposited 
pushout send receive import account class isomorphic espec transfer import account class spec var ext account var ext da db int spec prog stad create init person person name person name person balance balance stad stad account balance balance stad step deposit da db create account da db balance balance da balance balance db step step change account account balance balance balance balance step prog espec transitions essentially guarded rewrites transitions composed espec superpositions transitions constituent machines noted fiadeiro 
trivial example shows pushout especs composes behaviors parallel transfer account instance boils parallel composition subtracting account expressed send adding captured refinement receive 
concluding remarks builds concepts specware ing bias generating functional code supporting behavioral specifications generation imperative code 
builds previous efforts model behavior logically defining formal notion composition colimit refinement morphisms 
represents advance pre vious refinement methods vdm variety ways 
categorical foundations support controlled sharing substructure uniform approach datatype refinement greater automated support composition refinement 
working extend espec formalism directions 
especs naturally support assertion preconditions invariants postconditions safety constraints general 
stating liveness fairness constraints difficult 
second diagram notation convenient situations programming language notations extended assertions may better situations 
possible translate back spec translation setting purposes composition refinement 
third systems design necessary specify reason timing properties 
consequently extending especs features timed automata 
full version show especs support architectural approach system design 
architectures formally represented parameterized especs parameter especs interfaces components connectors 
instantiation components architecture performed refining interface especs component especs colimit 
body architecture espec characterizes system level struc ture invariants 
acknowledgments supported darpa air force research lab rome ny contract 
dro coglio comments 
alur dill theory timed automata 
theoretical computer science 
barr wells category theory computing science 
prentice hall englewood cliffs 
notes diagrams state 
tech 
rep kestrel institute 
gurevich evolving algebra guide 
specification validation methods ed 
oxford university press pp 

fiadeiro lopes 
mathematical semantics architectural connectors 
tech 
rep university lisbon campo grande portugal 
manna pnueli temporal logic reactive concurrent systems 
springer verlag new york 
pavlovic semantics fu st order parametric specifications 
formal methods woodcock wing eds vol 
lecture notes computer science springer verlag pp 

pavlovic 
tech 
rep kestrel institute march 
pavlovic smith composition refinement behavioral specifications 
tech 
rep kestrel institute september 
shaw garlan software architecture perspectives emerging discipline 
prentice hall 
srinivas specware formal support composing software 
proceedings conference mathematics program construction moeller ed 
lncs springer verlag berlin pp 

