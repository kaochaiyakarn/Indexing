reactor object behavioral pattern demultiplexing dispatching handles synchronous events earlier version appeared chapter book pattern languages program design isbn edited jim coplien douglas schmidt published addison wesley 
intent reactor design pattern handles service requests delivered concurrently multiple clients 
pattern simplifies event driven applications integrating synchronous demultiplexing events dispatching corresponding event handlers 
addition reactor pattern decouples generic demultiplexing dispatching code application specific event handler code 
known dispatcher motivation section provides context motivation reactor pattern 
context forces reactor pattern applied application handle events multiple clients concurrently incurring programming complexity performance overhead non portability multi threading 
illustrate reactor pattern consider event driven server distributed logging service shown 
client applications logging service record information status distributed environment 
status information commonly includes error notifications debugging traces performance reports 
logging records sent central logging server write records various output devices console printer file network management database 
supported part siemens 
douglas schmidt schmidt cs wustl edu department computer science washington university st louis mo distributed logging service logging server shown handles logging records connection requests sent clients 
logging records connection requests arrive concurrently multiple socket handles 
socket handle identifies network communication resources managed os 
logging server communicates clients connection oriented protocol tcp 
server listens passive mode socket handle connection requests arrive new clients 
passive mode socket factory creates separate data mode socket handle newly connected client 
clients connected send logging records concurrently server 
server applications distributed system handle multiple clients send requests services 
invoking specific service server application demultiplex dispatch incoming request corresponding service handler 
developing effective server mechanisms demultiplexing dispatching client requests requires resolution forces concurrency server block indefinitely handling single source events exclusion event sources may significantly delay multiple clients efficiency server minimize latency maximize throughput avoid utilizing cpu unnecessarily programming simplicity design server simplify efficient concurrency strategies adaptability integrating new improved services changing message formats adding server side caching incur minimal modifications maintenance costs existing code portability porting server new os platform require significant effort separation concerns implementing event handlers new services require modifications generic event demultiplexing dispatching mechanisms 
common traps pitfalls conventional multi threaded solutions intuitive way develop concurrent logging server multiple threads process multiple clients concurrently shown 
approach multi threaded logging server synchronously accepts network connections spawns thread connection handle client logging records 
multi threading implement processing logging records server fails resolve forces efficiency threading may lead poor performance due context switching synchronization data movement programming simplicity threading may require complex concurrency control schemes portability threading available os platforms 
result drawbacks multi threading efficient complex solution develop concurrent logging server 
completeness code example uses synchronous threading implement logging server appears appendix solution concurrency reactive operations convenient efficient portable way develop logging server reactor pattern 
pattern integrates synchronous demultiplexing events dispatching corresponding event handlers 
decouples implementation application specific services general purpose event demultiplexing dispatching mechanisms 
uses omt notation illustrate structure logging server designed reactor pattern event handler base class provides standard interface dispatching handlers registered process certain types events 
initiation dispatcher uses interface call back hook method application handler possible initiate operation blocking 
concrete event handlers logging handler logging acceptor customized process events associated socket handles 
code example applies reactor pattern logging server appears section 
applicability reactor pattern events may arrive concurrently different sources events blocking continuously polling incoming events individual source inefficient handler possesses characteristics exchanges fixed sized bounded sized messages peers requiring blocking processes message receives relatively short period time multi threading implement event demultiplexing infeasible due lack multi threading support os platform undesirable due poor performance uniprocessors due need overly complex concurrency control schemes redundant due multi threading higher level application architecture functionality portability extensibility application specific event handlers benefit decoupled application independent mechanisms perform event demultiplexing event handler dispatching 
structure participants structure participants reactor pattern illustrated omt class diagram key participants reactor pattern include handles handles identify resources managed os 
resources commonly include network connections open files timers synchronization objects 
handles logging server example handle event method event handler may active object spawning separate thread handling incoming events thread 
identify socket endpoints synchronous event demultiplexer wait read events occur 
synchronous event demultiplexer synchronous event demultiplexer blocks awaiting events occur set 
returns possible initiate operation blocking 
common demultiplexer events select indicates handles operations invoked synchronously blocking application process 
initiation dispatcher defines interface registering removing dispatching event handlers 
synchronous informs dispatcher call back application specific event handlers response certain types events 
common events include connection acceptance events data input output events timeout events 
event handler specifies interface initiation dispatcher call back hook methods defined handlers pre register process certain types events 
concrete event handler implements hook method process events application specific manner 
concrete event handlers logging server logging handler logging acceptor 
handler responsible receiving processing logging records 
creates handlers process logging records clients 
collaborations general collaborations collaborations generally occur reactor pattern concrete event handler registered initiation dispatcher application indicates type event event handler wants dispatcher notify events occur associated handle 
initiation dispatcher combines handle handlers uses wait events occur 
event demultiplexer notifies initiation dispatcher handle corresponding event source ready instance tcp protocol layer uses select synchronous event demultiplexing operation notify initiation dispatcher operation socket ready reading initiation dispatcher triggers event handler methods response events ready handles 
events occur initiation dispatcher uses handles activated event sources keys locate dispatch handler hook methods 
initiation dispatcher calls back handle event hook method event handler perform application specific functionality response event 
type event occurred passed parameter method alternative approach described section 
interaction diagram illustrates collaboration application code participants reactor pattern collaboration scenarios collaborations reactor pattern logging server illustrated scenarios 
scenarios show logging server designed reactive event dispatching handles connections requests logging data multiple clients 
client connects reactive logging server scenario shows steps taken client connects logging server 
sequence steps summarized follows 
logging server registers logging acceptor dispatcher accept new connections 
logging server invokes handle events method 
initiation dispatcher invokes synchronous event demultiplexing select operation wait connection requests logging data arrive 
client connects logging server 
logging acceptor notified initiation dispatcher new connection request 
logging acceptor accepts new connection 
creates service new client 
logging handler registers socket handle initiation dispatcher instructs dispatcher notify socket ready reading client sends logging record reactive logging server second scenario shows sequence steps reactive logging server takes service logging record 
sequence steps summarized follows 
client sends logging record 
notifies client logging record queued socket handle os 
record received non blocking manner steps repeat logging record completely received 
logging handler processes logging record writes standard output 

logging handler returns control initiation dispatcher event loop 
consequences benefits reactor pattern offers benefits separation concerns reactor pattern decouples application independent demultiplexing dispatching mechanisms application specific hook method functionality 
application independent mechanisms reusable components know demultiplex events dispatch appropriate hook methods defined handlers 
contrast application specific functionality hook method knows perform particular type service 
improve modularity reusability configurability event driven applications pattern decouples server functionality separate classes 
instance separate classes logging server establishing connections receiving processing logging records 
decoupling enables reuse connection establishment class different types connection oriented services file transfer remote login video demand 
modify extend functionality logging server implementation logging class change 
improves application portability initiation dispatcher interface reused independently os system calls perform event demultiplexing 
system calls detect report occurrence events may occur simultaneously multiple sources events 
common sources events may include handles timers synchronization objects 
unix platforms event demultiplexing system calls called select 
windows nt win api system call performs event demultiplexing 
provides coarse grained concurrency control reactor pattern serializes invocation event handlers level event demultiplexing dispatching process thread 
serialization initiation dispatcher level eliminates need complicated synchronization locking application process 
liabilities reactor pattern liabilities restricted applicability reactor pattern applied efficiently os 
possible emulate semantics reactor pattern multiple threads dispatcher thread handle 
design typically inefficient serializes event handlers increasing synchronization context switching overhead enhancing parallelism 
non preemptive single threaded application process event handlers preempted executing 
implies event handler perform blocking individual handle block entire process decrease responsiveness clients connected handles 
long duration operations transferring medical images active object pattern may effective :10.1.1.40.8396
active object uses multithreading multi processing complete tasks parallel dispatcher main event loop 
hard debug applications written reactor pattern hard debug inverted flow control oscillates framework infrastructure method callbacks application specific handlers 
increases difficulty single stepping runtime behavior framework debugger application developers may understand access framework code 
similar problems encountered trying debug compiler lexical analyzer parser written lex yacc 
applications debugging straightforward thread control user defined action routines 
thread control returns generated deterministic finite automata dfa skeleton hard follow program logic 
implementation section describes implement reactor pattern 
implementation described influenced reusable components provided ace communication software framework 
select synchronous event demultiplexer mechanism dispatcher uses asynchronous event demultiplexer wait synchronously events occur 
commonly implemented os event demultiplexing system call select 
select call indicates handle ready perform operations blocking application process 
general synchronous event demultiplexer selected existing os mechanisms developed implementers reactor pattern 
develop initiation dispatcher steps necessary develop initiation dispatcher implement event handler table initiation dispatcher maintains table concrete event handlers 
initiation dispatcher provide methods register remove handlers table run time 
implement event loop entry point entry point event loop initiation dispatcher provided handle events method 
method controls handle demultiplexing provided dispatching 
events occur returns synchronous event demultiplexing call reacts dispatching handle event hook method handle ready hook method executes user defined code returns control initiation dispatcher completes 
class illustrates core methods dispatcher public interface enum event type title types events handled initiation dispatcher 
description values powers bits efficiently form composite values 
accept event read event write event timeout event signal event close event class initiation dispatcher title demultiplex dispatch event handlers response client requests 
public register event handler particular event type 
int register handler event handler eh event type remove event handler particular event type 
int remove handler event handler eh event type entry point reactive event loop 
int handle events time value timeout implement necessary synchronization mechanisms reactor pattern application thread control possible eliminate synchronization 
case dispatcher serializes event handler handle event hooks application process 
initiation dispatcher serve central event dispatcher multi threaded applications 
case critical sections dispatcher serialized prevent race conditions modifying activating shared variables table holding event handlers 
common technique preventing race conditions uses mutual exclusion mechanisms semaphores mutex variables 
prevent deadlock mutual exclusion mechanisms recursive locks 
recursive locks efficient means prevent deadlock locks held thread event handler hook methods initiation dispatcher 
recursive lock may re acquired thread owns lock blocking thread 
property important reactor handle events hook method calls back application specific event handlers 
application hook method code may subsequently re enter dispatcher register handler handler methods 
determine type dispatching target types event handlers associated handle serve target initiation dispatcher dispatch operation event handler objects common way associate event handler handle event handler object 
instance reactor pattern implementation shown section registers event handler subclass objects initiation dispatcher 
object dispatching target convenient handlers order reuse extend existing components 
addition objects integrate state methods service 
event handler functions way associate event handler register function dispatcher 
functions dispatching target convenient register callbacks having define new class inherits event handler 
hybrid approach adapter pattern employed support objects functions 
define event handling interface assuming handler objects functions step define interface event handler 
approaches single method interface omt diagram section illustrates implementation event handler base class interface contains single method called handle event initiation dispatcher dispatch events 
case type event passed parameter method 
base class illustrates single method interface class event handler title base class serves target initiation dispatcher 
public hook method called back initiation dispatcher handle events 
virtual int handle event event type hook method returns underlying handle 
virtual handle get handle void const advantage single method interface possible add new types events changing interface 
approach encourages switch statements subclass event method limits extensibility 
multi method interface way implement event handler interface define separate virtual hook methods type event input handle output timeout 
base class illustrates single method interface class event handler public hook methods called back initiation dispatcher handle particular types events 
virtual int handle accept void virtual int handle input void virtual int handle output void virtual int handle timeout void virtual int handle close void hook method returns underlying handle 
virtual handle get handle void const benefit multi method interface easy extend subclassing involve switch statements 
requires framework developer anticipate set handler methods advance 
approaches described examples hook method pattern described factory callback pattern described 
intent patterns provide defined hooks specialized applications called back lower level dispatching code 
determine number initiation dispatchers application applications structured just instance reactor pattern 
case initiation dispatcher implemented singleton 
design useful centralizing event demultiplexing dispatching single location application 
operating systems limit number handles waited single thread control 
instance win allows select wait handles single thread 
case may necessary create multiple threads runs instance reactor pattern 
note event handlers serialized instance reactor pattern 
multiple event handlers multiple threads run parallel 
may necessitate additional synchronization mechanisms event handlers different threads access shared state 
implement concrete event handlers code implements concrete event handlers logging server described section 
handlers provide passive connection establishment logging acceptor data reception logging handler 
logging acceptor class class example acceptor pattern 
acceptor pattern decouples task service initialization tasks performed service initialized 
pattern enables application specific portion service logging handler vary independently mechanism establish connection 
logging acceptor passively accepts connections client applications creates logging handler objects receive process logging records clients 
key methods data members acceptor class defined class logging acceptor public event handler title handles client connection requests 
public initialize acceptor endpoint register initiation dispatcher 
logging acceptor const inet addr addr factory method accepts new sock stream connection creates logging handler object handle logging records sent connection 
virtual void handle event event type get handle called initiation dispatcher logging acceptor registered 
virtual handle get handle void const return acceptor get handle private socket factory accepts client connections 
sock acceptor acceptor acceptor class inherits event handler base class 
enables application register logging acceptor initiation dispatcher 
logging acceptor contains instance sock acceptor 
concrete factory enables acceptor accept connection requests passive mode socket listening communication port 
connection arrives client sock acceptor accepts connection produces sock stream object 
henceforth sock stream object transfer data reliably client logging server 
acceptor stream classes implement logging server part socket wrapper library provided ace 
socket wrappers encapsulate stream semantics socket interface portable type secure object oriented interface 
internet domain sock stream sockets implemented tcp transport protocol 
constructor logging acceptor registers dispatcher singleton accept events follows logging acceptor logging acceptor const inet addr addr acceptor addr register acceptor initiation dispatcher 
initiation dispatcher instance register handler accept event henceforth client connection arrives initiation dispatcher calls back logging acceptor event method shown void logging acceptor handle event event type called accept event 
assert accept event sock stream new connection accept connection 
acceptor accept new connection create new logging handler 
logging handler handler new logging handler new connection event method invokes method sock acceptor passively establish sock stream 
sock stream connected new client logging handler allocated dynamically process logging requests 
shown logging handler registers initiation dispatcher demultiplex logging records associated client 
logging handler class logging server uses logging handler class shown receive logging records sent client applications class logging handler public event handler title receive process logging records sent client application 
public initialize client stream 
logging handler sock stream cs hook method handles reception logging records clients 
virtual void handle event event type get handle called initiation dispatcher logging handler registered 
virtual handle get handle void const return peer stream get handle private receives logging records client 
sock stream peer stream logging handler inherits event handler enables registered initiation dispatcher shown logging handler logging handler sock stream cs peer stream cs register dispatcher read events 
initiation dispatcher instance register handler read event created logging handler registers read events initiation dispatcher singleton 
henceforth logging record arrives automatically dispatches handle event method associated logging handler shown void logging handler handle event event type read event log record log record peer stream recv log record write logging record standard output 
log record write stdout close event peer stream close delete void read event occurs dispatcher calls back logging handler handle event method 
method receives processes writes logging record standard output 
likewise client closes connection initiation dispatcher passes close event informs logging handler shut stream delete 
implement server logging server contains function 
logging server main function function implements single threaded concurrent logging server waits event loop dispatcher notify operations callbacks handlers 
main entry point logging server defined follows server port number 
const short port int main void logging server port number 
inet addr server addr port initialize logging server endpoint 
logging acceptor ca server addr main event loop handles client logging records connection requests 
initiation dispatcher instance handle events return main program creates acceptor initializes port number logging server enters main event loop 
subsequently initiation dispatcher singleton uses select event demultiplexing system call synchronously wait connection requests logging records arrive clients 
interaction diagram illustrates collaboration objects participating logging server example initiation dispatcher object initialized primary focus control flow logging server 
subsequent activity triggered hook methods acceptor handler objects registered controlled initiation dispatcher 
data arrives network connection initiation dispatcher calls back logging acceptor accepts network connection creates logging handler 
handler registers initiation dispatcher read events 
client sends logging record initiation dispatcher calls back logging handler process incoming record client connection logging server single thread control 
known uses reactor pattern object oriented frameworks including interviews reactor pattern implemented interviews window system distribution known dispatcher 
interviews dispatcher define application main event loop manage connections physical gui displays 
ace framework ace framework uses reactor pattern central event demultiplexer dispatcher 
reactor pattern commercial projects including corba orbs orb core layer singlethreaded implementations corba visibroker orbix reactor pattern demultiplex dispatch orb requests servants 
ericsson eos call center management system system uses reactor pattern manage events routed event servers supervisors call center management system 
project spectrum high speed medical image transfer subsystem project spectrum uses reactor pattern medical imaging system 
related patterns reactor pattern related observer pattern dependents informed single subject changes 
reactor pattern single handler informed event interest handler occurs source events 
reactor pattern generally demultiplex events multiple sources associated event handlers observer associated single source events 
reactor pattern related chain responsibility cor pattern request delegated responsible service provider 
reactor pattern differs cor pattern reactor associates specific event handler particular source events cor pattern searches chain locate matching event handler 
reactor pattern considered synchronous variant asynchronous proactor pattern 
proactor supports demultiplexing dispatching multiple event handlers triggered completion asynchronous events 
contrast reactor pattern responsible demultiplexing dispatching multiple event handlers triggered possible initiate operation synchronously blocking 
active object pattern decouples method execution method invocation simplify synchronized access shared resource methods invoked different threads control :10.1.1.40.8396
reactor pattern place active object pattern threads available overhead complexity threading undesirable 
implementation reactor pattern provides facade event demultiplexing 
facade interface shields applications complex object relationships subsystem 
concluding remarks reactor pattern provides benefits eventdriven applications 
simplifies development flexible applications reusable components decoupling application independent demultiplexing dispatching mechanisms application specific functionality performed user defined methods event handler 
likewise reactor pattern facilitates application extensibility handlers evolve independently event demultiplexing mechanisms provided os 
frank buschmann john vlissides helpful comments 
stevens unix network programming edition 
englewood cliffs nj prentice hall 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
rumbaugh blaha premerlani eddy lorensen object oriented modeling design 
englewood cliffs nj prentice hall 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
pree design patterns object oriented software development 
reading ma addison wesley 
custer inside windows nt 
redmond washington microsoft press 
pyarali harrison schmidt design performance object oriented framework high performance electronic medical imaging usenix computing systems vol 
november december 
schmidt active object object behavioral pattern concurrent programming proceedings nd annual conference pattern languages programs monticello illinois pp :10.1.1.40.8396
september 
schmidt oo encapsulation lightweight os concurrency mechanisms ace toolkit tech 
rep wucs washington university st louis september 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 
pattern separating assembly processing pattern languages program design coplien schmidt eds reading ma addison wesley 
schmidt acceptor connector design patterns initializing communication services pattern languages program design martin buschmann riehle eds reading ma addison wesley 
pyarali harrison schmidt design performance object oriented framework high performance electronic medical imaging proceedings nd conference object oriented technologies systems toronto canada usenix june 
linton calder design implementation interviews proceedings usenix workshop november 
schmidt ace framework available www cs wustl edu schmidt ace html 
object management group common object request broker architecture specification ed july 
schmidt suda object oriented framework dynamically configuring extensible distributed communication systems iee bcs distributed systems engineering journal special issue configurable distributed systems vol 
pp 
december 
harrison pyarali schmidt jordan proactor object behavioral pattern dispatching asynchronous event handlers th pattern languages programming conference september 
implementing logging server synchronous multi threading section shows synchronous multiple threads develop logging server shown 
sequence steps service logging record client summarized follows 
logging acceptor runs thread blocks socket call waiting client connection requests 
client connects server 
logging acceptor accepts new connection creates new logging handler service client handler run newly created thread 
client sends logging record 
client logging record synchronously received network connection 
record written standard output 
steps repeated client closes connection 
code shows implementation logging handler synchronous multi threading 
class logging handler public task title handle client logging records 
description logging handler class runs active object thread control 
task base clas defines activate svc hook active objects 
public method called logging acceptor new client connects server 
logging handler socket stream client logging record record store client 
client client active object spawns thread calls svc hook 
activate hook method called activate 
void svc void logging record record synchronously read logging record network connection write standard output 
client recv record done record write stdout private socket endpoint 
socket stream client 
primary advantage synchronous threading simplification application code 
particular operations performed logging server service client request independent operations required service client request 
easy service different requests separate threads amount state shared threads low minimizes need synchronization 
executing application logic separate threads allows developers utilize intuitive sequential commands operations 
