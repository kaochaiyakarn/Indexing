gspan graph substructure pattern mining investigate new approaches frequent graph pattern mining graph datasets propose novel algorithm called gspan graph substructure pattern mining discovers frequent substructures candidate generation 
gspan builds new lexicographic order graphs maps graph unique minimum dfs code canonical label 
lexicographic order gspan adopts depth search strategy mine frequent connected subgraphs efficiently 
performance study shows gspan substantially outperforms previous algorithms order magnitude 

frequent substructure pattern mining emerging data mining problem scientific commercial applications 
general data structure labeled graph model complicated substructure patterns data 
graph dataset denotes number graphs subgraph 
problem frequent subgraph mining find subgraph 
minimum support threshold 
reduce complexity problem considering connectivity property hidden structures situations frequent connected subgraphs studied 
kernel frequent subgraph mining subgraph isomorphism test 
lots known pair wise isomorphism testing algorithms developed 
frequent subgraph mining problem explored 
inokuchi proposed apriori algorithm called agm discover frequent connected disconnected substructures 
karypis developed idea adjacent representation graph edge growing strategy 
algorithm called fsg able find frequent connected subgraphs yan jiawei han department computer science university illinois urbana champaign uiuc edu chemical compound dataset minutes minimum support 
dataset novel algorithm complete task seconds 
agm fsg take advantage apriori levelwise approach 
context frequent subgraph mining apriori algorithms meet challenges candidate generation generation size subgraph candidates size frequent subgraphs complicated costly itemsets pruning false positives subgraph isomorphism test npcomplete problem pruning false positives costly 
contribution 
develop gspan targets reduce avoid significant costs mentioned 
entire graph dataset fit main memory gspan applied directly perform graph data projection apply gspan 
best knowledge gspan algorithm explores depth search dfs frequent subgraph mining 
techniques dfs lexicographic order minimum dfs code introduced form novel canonical labeling system support dfs search 
gspan discovers frequent subgraphs candidate generation false positives pruning 
combines growing checking frequent subgraphs procedure accelerates mining process 

dfs lexicographic order section introduces techniques developed gspan including mapping graph dfs code sequence building novel lexicographic ordering codes constructing search tree lexicographic order 
dfs subscripting 
performing depth search graph construct dfs tree 
graph different dfs trees 
example graphs fig 
isomorphic fig 

edges fig 
represent different dfs trees graph fig 

depth discovery vertices forms linear order 
subscripts label 
depth search tree edge fig fig fig table 
dfs codes fig 
order discovery time 
means discovered call root rightmost vertex 
straight path named rightmost path 
fig 
different generated graph fig 

right path fig 
fig 
fig 

denote subscripted forward edge backward edge 
forward edge tree edge set contains edges dfs tree backward edge back edge set contains edges dfs tree 
simplicity ordered pair represent edge 
forward edge backward edge 
linear order built edges rules assume ii iii definition dfs code dfs tree graph edge sequence constructed called dfs code denoted simplicity edge tuple labels respectively label edge 
example fig 
represented table shows corresponding dfs codes fig 

definition dfs lexicographic order suppose dfs tree set con taining dfs codes connected labeled graphs 
suppose linear order label set lexicographic combination linear order set details see 
dfs lexicographic order linear order defined follows 
iff true 
graph fig 
exist tens different dfs codes 
dfs trees fig 
listed table 
dfs lexicographic order definition minimum dfs code graph dfs tree dfs lexicographic order minimum called minimum dfs code canonical label theorem graphs isomorphic 
proof omitted problem mining frequent connected subgraphs equivalent mining corresponding minimum dfs codes 
problem turns sequential pattern mining problem slight difference conceptually solved existing sequential pattern mining algorithms 
dfs code valid dfs called child code called parent 
fact construct valid dfs code edge grows vertices rightmost path 
fig 
graph shown potential children edge growth shown assume darkened vertices constitute rightmost path 
grow rightmost vertex grow vertices rightmost path 
children children 
backward edges grow rightmost vertex forward edges grow vertices rightmost path 
restriction similar equivalence class extension freqt rightmost expansion frequent tree discovery 
enumeration order children enhanced dfs lexicographic order order 
definition dfs code tree dfs code tree node represents dfs code relation parent child node complies parent child relation described 
relation siblings consistent 
dfs code graph growth dfs lexicographic order 
pre order search dfs code tree follows dfs lexicographic order 
label set dfs code tree contain infinite number graphs 
consider frequent subgraphs finite dataset size dfs code tree finite 
fig 
shows dfs code tree level nodes contain dfs codes search code tree minimum dfs codes frequent subgraphs discovered 
frequent subgraphs discovered way 
mention fig 
darken nodes contain graph different dfs codes minimum code proved 
sub branch pruned contain minimum dfs code 

gspan algorithm edge graphs 
depth formulate gspan algorithm section 
gspan uses sparse adjacency list representation store graphs 
algorithm outlines pseudo code framework self explanatory note represents graph dataset contains mining result 
assume label set vertices edges 
algorithm line round discover frequent subgraphs containing edge second round discover frequent subgraphs containing procedure repeats frequent sub graphs discovered 
database shrunk procedure continues algorithm line subgraph turns larger subprocedure line graphs contains subgraph considered 
means set graphs subgraph 
subgraph mining recursively called grow graphs find frequent descendants 
subgraph mining stops searching support graph code minimum code means edge edge edge edge 
pruned 
search space dfs code tree graph descendants generated discovered see 
algorithm projection 
sort labels frequency remove infrequent vertices edges relabel remaining vertices edges frequent edge graphs sort dfs lexicographic order mining edge initialize set graphs contains subgraph break subprocedure subgraph mining 
return enumerate graph count children child subgraph mining 
experiments performance study comprehensive performance study conducted experiments synthetic real world datasets 
synthetic data generator provided karypis 
real data set tested chemical compound dataset 
experiments gspan done mhz intel pentium iii pc mb main memory running red hat linux 
implemented version fsg achieves similar perfor 
runtime synthetic data mance reported 
shown figures compare performance gspan fsg result available show implementation result dataset 
test linux machine similar configuration 
synthetic datasets 
synthetic datasets generated similar procedure described 
applied simplified procedure graph data synthesis 
data generator 
gspan tested various synthetic datasets different parameters number possible labels average size potential frequent subgraphs kernels average size graphs terms edges fixed param eters total number graphs generated number potentially frequent kernels shown fig 
speed 
chemical compound dataset 
chemical compound dataset retrieved url dataset contains chemical compounds different atoms atom types types bonds 
dataset sparse containing average vertices graph edges graph 
largest contains edges vertices 
discovered patterns tree contains cycles 
type atoms bonds labels 
goal find common chemical compound substructures 
fig 
illustrates runtime gspan fsg varies 
total memory consumption point gspan plotted 
fsg process aborted main memory exhausted runtime long 
fig 
shows gspan achieves better performance times comparison fsg 
comlab ox ac uk groups pte 
runtime sec 
fsg gspan support 
runtime chemical data introduced new lexicographic ordering system developed depth search mining algorithm gspan efficient mining frequent subgraphs large graph database 
performance study shows gspan outperforms fsg order magnitude capable mine large frequent subgraphs bigger graph set lower minimum supports previous studies 

synthetic data generator kindly provided professor george karypis university minnesota 
dr pasquale dipartimento di informatica sistemistica universit di napoli federico ii provided helpful suggestions usage graph matching library 
tong comments 
agrawal srikant 
fast algorithms mining association rules 
vldb pages sept 
asai abe arikawa 
efficient substructure discovery large semistructured data 
siam sdm april 
cormen leiserson rivest stein 
algorithms 
mit press second edition 
inokuchi washio motoda 
apriori algorithm mining frequent substructures graph data 
pkdd pages 
karypis 
frequent subgraph discovery 
icdm pages nov 
pei han asl pinto chen dayal 
hsu 
prefixspan mining sequential patterns efficiently prefix projected pattern growth 
icde pages april 
yan han 
gspan graph substructure pattern mining 
technical report uiucdcs department computer science university illinois urbana champaign 
zaki 
efficiently mining frequent trees forest 
kdd july 
