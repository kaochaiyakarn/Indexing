incentives build robustness bittorrent bittorrent file distribution system uses tit method seeking pareto efficiency 
achieves higher level robustness resource utilization currently known cooperative technique 
explain bittorrent economic methods achieve goal 
bittorrent file available upload cost placed hosting machine 
bittorrent multiple people downloading file time upload pieces file 
redistributes cost upload downloaders making hosting file potentially unlimited number downloaders affordable 
researchers attempted find practical 
previously deployed large scale logistical robustness problems quite difficult 
simply figuring peers parts file sent difficult incurring huge overhead 
addition real deployments experience high churn rates 
peers rarely connect hours frequently minutes 
general problem fairness 
total download rate downloaders mathematical necessity equal total upload rate 
strategy allocating upload peers happy download rates cohen org may peer download rate proportional upload rate 
practice difficult keep peer download rates dropping zero chance upload download rates correlated 
explain bittorrent solves problems 
bittorrent interface bittorrent interface simplest possible 
users launch clicking hyperlink file wish download standard save dialog followed download progress dialog notable having upload rate addition download rate 
extreme ease contributed greatly bittorrent adoption may important certainly complements performance cost redistribution features described 
deployment decision bittorrent publisher file 
downloaders bittorrent way get file want 
frequently downloaders cease uploading soon download completes considered polite leave client uploading download completes 
standard implementation continues upload window closed frequently results uploads continuing user gets back machine 
typical deployment number incomplete downloaders meaning ones file increases rapidly file available 
eventually peaks falls roughly exponential rate 
number complete downloaders increases slowly peaks time number incomplete downloaders falls exponentially 
peak incomplete downloaders passes downloaders complete 
peak incomplete downloaders passes finished downloaders uploading 
exponential falloff reflects rate new downloaders joining initial rush 
file available host downloaders bt want file downloaders upload downloading leave 
technical framework publishing content start bittorrent deployment static file extension torrent put ordinary web server 
torrent contains information file length name hashing information url tracker 
trackers responsible helping downloaders find 
speak simple protocol layered top downloader sends information file downloading port listening similar information tracker responds list contact information peers downloading file 
downloaders information connect 
file available downloader happens complete file known seed started 
bandwidth requirements tracker web server low seed send complete copy original file 
peer distribution logistical problems file downloading handled interactions peers 
information upload download rates sent tracker just statistics gathering 
tracker responsibilities strictly limited helping peers find 
trackers way peers find point coordination standard tracker algorithm return random list peers 
random graphs robustness properties 
peer selection algorithms result power law graph get segmented small amount churn 
note connections peers transfer directions 
order keep track peers bittorrent cuts files pieces fixed size typically quarter megabyte 
downloader reports peers pieces 
verify data integrity sha hashes pieces included torrent file peers don report piece checked hash 
erasure codes suggested technique help file distribution simpler approach proven workable 
peers continuously download pieces peers 
course download peers aren connected peers don pieces want won currently download 
strategies peers disallowing downloading known discussed 
suggested approaches file distribution generally involved tree structure doesn utilize upload capacity leaves 
simply having peers announce results tenth percent bandwidth overhead reliably utilizes available upload capacity 
pipelining transferring data tcp bittorrent important requests pending avoid delay pieces sent disastrous transfer rates 
bittorrent facilitates breaking pieces sub pieces wire typically sixteen kilobytes size keeping number typically requests pipelined 
time sub piece arrives new request sent 
amount data pipeline selected value reliably saturate connections 
piece selection selecting pieces download order important performance 
poor piece selection algorithm result having pieces currently offer flip side having pieces upload peers wish 
strict priority bittorrent policy piece selection single sub piece requested remaining sub pieces particular piece requested sub pieces piece 
job getting complete pieces quickly possible 
rarest selecting piece start downloading peers generally download pieces fewest peers technique refer rarest 
technique job making sure peers pieces peers want uploading done wanted 
sure pieces common left likelihood peer currently offering upload interest reduced 
information theory dictates downloaders complete part file uploaded seed 
deployments single seed upload capacity considerably downloaders performance better different downloaders get different pieces seed redundant downloads waste opportunity seed get information 
rarest job downloading new pieces seed downloaders able see peers pieces seed uploaded 
deployments original seed eventually taken cost reasons leaving current downloaders upload 
leads significant risk particular piece longer available current downloaders 
rarest handles replicating rarest pieces quickly possible reducing risk getting completely lost current peers uploading 
random piece exception rarest downloading starts 
time peer upload important get complete piece quickly possible 
rare pieces generally peer downloaded slower pieces multiple peers possible download sub pieces different places 
reason pieces download selected random complete piece assembled strategy changes rarest 
endgame mode piece requested peer slow transfer rates 
isn problem middle download potentially delay download finish 
keep happening sub pieces peer doesn actively requested sends requests sub pieces peers 
cancels sent sub pieces arrive keep bandwidth wasted redundant sends 
practice bandwidth wasted way endgame period short file downloaded quickly 
algorithms bittorrent central resource allocation 
peer responsible attempting maximize download rate 
peers downloading deciding peers upload variant tit tat 
cooperate peers upload cooperate peers 
temporary refusal upload stops uploading downloading happen connection doesn need stops 
algorithm isn technically part bittorrent wire protocol necessary performance 
algorithm utilize available resources provide reasonably consistent download rates somewhat resistant peers downloading uploading 
pareto efficiency known economic theories show systems pareto efficient meaning exchange happier tend properties 
computer science terms seeking pareto efficiency local optimization algorithm pairs see improve lot algorithms tend lead global optima 
specifically peers getting poor reciprocation upload providing start uploading get better download rate 
bittorrent algorithms attempt achieve pareto efficiency fleshed version tit tat play prisoner dilemma 
peers reciprocate uploading peers upload goal time having connections actively transferring directions 
unutilized connections uploaded trial basis see better transfer rates 
bittorrent algorithm technical level bittorrent peer unchokes fixed number peers default issue peers unchoke 
approach allows tcp built congestion control reliably saturate upload capacity 
decisions peers unchoke strictly current download rate 
calculating current download rate meaningfully surprisingly difficult problem current implementation essen tially uses rolling second average 
algorithms information long term net transfer amounts performed poorly value bandwidth shifts rapidly time resources go away available 
avoid situations resources wasted rapidly unchoking peers bittorrent peers recalculate want seconds leave situation second period 
seconds long period time tcp ramp new transfers full capacity 
optimistic unchoking simply uploading peers provide best download rate suffer having method discovering currently unused connections better ones 
fix times bittorrent peer single optimistic unchoke regardless current download rate 
peer optimistic unchoke rotated third period seconds 
seconds time upload get full capacity download reciprocate download get full capacity 
analogy tat quite remarkable optimistic unchokes correspond strongly cooperating move prisoner dilemma 
anti occasionally bittorrent peer peers downloading 
cases usually continue get poor download rates optimistic unchoke finds better peers 
mitigate problem minute goes getting single piece particular peer bittorrent assumes peer doesn upload optimistic unchoke 
frequently results concurrent optimistic unchoke exception exactly optimistic unchoke rule mentioned causes download rates recover quickly 
upload peer done downloading longer useful download rates decide peers upload 
current implementation switches preferring peers better upload rates decent job utilizing available upload capacity preferring peers happens uploading moment 
number complete downloaders incomplete downloaders leechers large deployment megabyte file time 
successful downloads time complete downloaders 
actual number downloads completed period probably times 
real world experience bittorrent implemented widely deployed 
routinely serves files hundreds megabytes size hundreds concurrent downloaders 
largest known deployments simultaneous downloaders 
current scaling bottleneck hasn reached appears bandwidth overhead tracker 
currently total amount bandwidth minor protocol extensions probably get 
adar huberman 
free riding gnutella 
monday 

barab si 
linked new science networks 
perseus publishing 
castro druschel 
kermarrec nandi rowstron singh 
splitstream high bandwidth content distribution cooperative environments 
proceedings iptps berkeley usa feb 
maymounkov mazieres 
kademlia peer peer information system xor metric 
proceedings iptps cambridge usa mar 
