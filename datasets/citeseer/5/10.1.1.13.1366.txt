citi technical report personal secure booting center technology integration www 
ch 
edu william 
umd 
edu department computer science university maryland college park pollack daniel reeves 
umich 
edu 
umich 
edu electrical engineering computer science department university michigan majority security breaches coming inside organizations number public computing sites users know system administrators increasing dangerous blindly trust system administrators manage computers appropriately 
current security systems vulnerable malicious software modification administrators 
solve problem developed system called saegis embraces smartcard personal secure storage computer component hashes uses hashes secure booting process ensure integrity computer components 
may center information technology integration university michigan west william street ann arbor mi rapid integration information technology society demand computer system security 
despite decades extensive research information security computer systems remain vulnerable malicious modifications 
trend reflects prevalent inaccurate assumptions computer systems trustworthy 
purpose define trusted computer computer system behaves users intend damaging leaking resource information 
major prob lem today modern commodity comput ers trustworthy tend overlook ignore physical security issues vulnerable exploitation software bugs 
adversary compromises computer methods install malicious modification de security mechanism computer 
example consider kerberos client steals user password ssl client leaks plain text packets loadable kernel module redirects system calls fool system integrity checker 
conventionally problem trusted computing tackled approaches access control mechanisms layered architecture sandboxing applicationlevel integrity checking 
approaches trust underlying hardware operating system kernels little components compromised 
furthermore approaches require custom operating systems increases management operational problems 
counter problem developed high assurance bootstrap process called aegis 
aegis ensures valid authorized operating system kernel started verifying integrity au definition narrower trusted computer security evaluation ria word trusted includes access control covert channel analysis definition closer ones neumann brewer goldberg component comprises bootstrap process digital signatures authenticity certificates 
boots operating system aegis guarantees boot process takes valid path terms integrity authorization initial power event login prompt inductive process 
aegis significantly improves security personal computers drawbacks 
users trust system administrator authorize digitally sign trusted operating systems applications 
security threats come inside organizations public computing sites internet libraries system administrators unknown user may choose trust administrators 
second aegis inflexible difficult change hardware configuration host boot freebsd 
solve problems developed saegis integrates smartcard bootstrap process 
saegis smartcard store set component hashes holder smartcard authorizes pushing control selection approved components system administrator user 
ported aegis sup port grub free flexible boot loader supports larger set operating sys tems 
remainder structured follows 
provide brief review aegis 
design saegis analyze security 
describe implementation provide performance benchmarks saegis 
conclude provide details 
background aegis secure bootstrap process review aegis provide background understanding saegis 
aegis secure bootstrap process goal provide trusted foundation computer system 
described section modern computer system usually trusted lack physical security untrusted initialization process 
way addressing problem ensure integrity computer system 
system said possess integrity unauthorized modification 
denning de fines integrity similarly communication 
aegis assures integrity personal computer boot time process called chaining layered integrity checks uses induction digital certificates 
aegis works follows 
system administrator authorized party generates hash bootstrap component creates certificate includes unique component identifier expiration date 
authorized party signs private key 

stored component possible data block flash memory device host mother board 

execution control passed component certificate expired 
signature valid hash value stored cate matches computed value component consideration 
important note aegis provides integrity guarantees starting system 
system running aegis provide guarantees integrity os remains valid 
described section aegis problems 
user forced trust system administrator certificates stored component bios controlled administrator 
administrator create install mali software simply creating signing component certificate 
aegis detect malicious software component passes validity tests described earlier 
second problem lack flexibility 
aegis boot freebsd 
furthermore hardware reconfiguration aegis requires creation installation new device certificates 
cause size limitation bios flash memory chip store file system drivers unable access data hard disk 
readers interested details aegis advised refer articles 
design design goals goal saegis follows personalization aegis system administrator responsibility manage certificates macs 
embracing smartcard personal storage macs saegis hands control users 
authentication aegis user attempts boot computer authenticated 
invoke boot process example hitting reset button may boot 
saegis boots operating system correct smartcard associated pin user 
factor authentication know theft mo bile computer threatening thief computer 
operating system flexibility operating system aegis prototype able boot freebsd 
contrast saegis employs free flexible boot loader called grub boot op erating systems linux freebsd netbsd openbsd windows nt 
hardware configuration flexibility aegis certificates stored flash memory chip hard configure 
saegis smartcard access library small fit flash chip hardware configuration information certificates macs moved smartcard easily configured flash chip 
goals achieved saegis prototype 
reason goal achieved discussed section 
design overview nutshell saegis aegis grub smartcard verify 
saegis relies aegis boot grub securely grub boots operating system kernel securely smartcard verification kernel checks integrity daemons application called verify 
basic idea saegis fol lows lower layer verifies integrity higher layers booting system integrity ensured 
comprehend design saegis essential understand component verifies boots 
bootstrap process saegis summarized events chronological order 

power self test post 
processor checks 
post invoked applying power computer hardware reset warm boot ctrl alt del dos jump processor reset vector invoked software 
starts bootstrap process 

bios section verifies bios sec tion boots section 
saegis bios divided parts section section 
mer contains bare essentials needed integrity verification graphic hash function md sha public key function rsa public key certificate trusted third party 
integrity part assumed assumed modified 
discussion assumption section 
bios section reads certificate flash chip verifies 
bios section reads binary cer bios section flash chip verifies binary 
check goes boots section 
bios section verifies rom exten sion cards executes 
bios section reads programs stored rom extension cards reads associated certificates flash chip verifies programs 
check goes executes 

bios section verifies grub stage boots 
grub divided parts stage stage intel compatible personal computer requires primary boot loader bytes long 
stage booted bios section stage booted stage 
bios section reads binary grub stage floppy disk reads cate flash chip verifies binary boots 

grub stage verifies grub stage boots 
grub stage reads binary certificate grub stage floppy disk verifies binary boots 

grub stage verifies kernel verification tools boots kernel 
grub stage mounts file system typically hard disk stores ker nel verify shell script invokes verify rc init inet unix 
reads files file system reads macs smartcard verifies files 
check goes boots kernel 

kernel uses verify application verify important files starts system daemons pass check 
verify invoked kernel boot check important files 
check fails kernel start related dae 
important files system dae login ssh verified unix detect password sniffer configuration files 
iii verified win detect trojan horse shared libraries 
dll verified windows nt detect password sniffer 
bootstrap process depicted 
boot check mac refer 
bootstrap process macs kernel apps workstation obtain pin user compute hash kernel kernel generate random challenge encrypt public key send smartcard pin smartcard protocol communication step list workstation smartcard carry protocol authenticate smartcard ver ify hash workstation 
protocol shown described follows 
smartcard check pin pin match set answer err decrypt private key compare stored hash set ok err workstation ok err kernel random number rsa encryption rsa decryption smartcard workstation communication protocol sign answer answer send workstation workstation encrypt answer sure signed smartcard 
answer ok original original continue boot halt boot process secret number pre sented 
blocks wrong pin typed consecutive times 
mallory adversary 
personal computer pc intel compatible personal computer verified booted 
consists bios section extension cards grub boot loader stage operating system kernel verify files 
claims security consideration claim security properties saegis 
section discuss security design 
model start constructing model system 
model consists participants alice legitimate user wants boot personal computer 
owns smartcard 
smartcard alice smartcard 
stores pri key macs 
pin pro system integrity boot pc booted saegis integrity components pc ensured bios extension cards grub boot loader operating system files verified 
user authentication pc booted saegis booted legitimate user 
assumptions assumptions model 

bios section integral 
assume bios section modified 
guarantees section starts saegis bootstrap process time pc booted 
security property entire saegis system relies assumption bios section base secure bootstrap 
bios section modified maliciously bios section may verified correctly resulting compromised section 
leads compromised grub stage stage compromised operating system kernel 
defeats goal saegis 
believe assumption reasonable 
portion intel latest generation flash rom write protected set ting pins rp high 
protection compromised setting jumper switches chip set attack countered storing bios rom prohibiting modification 

mallory read pc smartcard 
mallory read data stored pc 
read data smartcard 
reasonable assumption usually easy physically open pc access data storage 
contrast smartcard tamper resistant 
smartcard suf newly developed attacks ignore attacks cause smartcard harder compromise pc smart card developers devising sures new attacks 

mallory write pc bios section 
write smartcard 
similarly assumption mallory write pc protected region 
write smartcard 

cryptographic functions strong 
assume cryptographic hash functions md bios sha grub stage collision free 
assume random number generator protocol section unpredictable 
assume principal cipher rsa impossible compromise reasonable amount time 
mallory know alice private key 
mallory snoop modify messages serial port pc smartcard communicating 
attacks modification pc components assumption mallory modify wants host bios section 
alice notice boot saegis verifies byte code executed bootstrap process 
assumption correct bootstrap process invoked time alice boots pc 
assumption mallory forge certificate mac knowing alice private key happen assump tion 
modification pc components boot secure bootstrap system saegis attempt protect pc booted 
mallory modify system maliciously install trojan horse sniffer 
alice restore integrity pc rebooting 
unauthorized boot attempt mallory may steal pc try 
impossible mallory obtains ice smartcard pin authentication protocol section prevents attempt 
knowing alice private key assumption mallory produce ok ran dom number generator strong assumption 
mallory may try replay ok message ok random nonce mallory may try man middle attack modifying kernel replacing message host smartcard knowing hash value altered sends ok message 
workstation notices attack cause hash values match 
serial cable secrets 
example consider case mallory tries read alice mail 
alice may encrypt mail secure mail tool pgp 
system saegis mallory modify executable code pgp leak information 
saegis prevents detecting modifications 
operating system application software vendors publish signatures software alice store signatures smartcard check system 
unclear counter possible attacks mounted system administrators security software usually written assumption system administrators trustworthy attacks system administrators studied 
believe saegis step counter attacks 
assumption mallory read write messages serial cable connecting pc smartcard 
pro duce ok 
pin theft mallory may obtain alice pin breaking pc sniffing serial cable 
common problem today smartcard systems pin entered keyboard pc transmitted smartcard serial cable 
problem addressed smartcard reader built pin pad 
example pro duces smartcard reader 
approach problem time pad pins making replay pin meaningless 
implementation describe saegis prototype implementation design described section 
implemented pentium motherboard running mhz amd processor 
prototype aegis prototype go details aegis implementation 
saegis uses gnu grub 
interested readers consult grub website de tails 
grub stage mallory system administrator mallory may alice malicious system administrator may try compromise grub stage modified verify grub stage jumping 
stage tells aegis stage starts large calls aegis interrupt grub stage smartcard side code grub stage modified carry pro tocol described section 
communicate smartcard serial port smartcard communication library implemented replacing system dependent part sc library modified serial console access routines openbsd usr src sys dev ic com 

needs cryptographic functions 
sha routines grub ported kerberos version distributed mit 
rsa routines taken pgp 
prototype random number generation implemented 
replaced constant 
kernel command grub user interface loads kernel file system main memory 
command modified invoke verification protocol letting grub boot kernel 
command added update sha hash files verified addition kernel 
program smartcard implemented schlumberger access smartcard java 
access smartcard know offers programmability cryptographic functions des rsa sha 
smartcard reads byte input grub decrypts rsa private key 
compares hash value previously stored memory determines kernel image unmodified 
concatenates reply ok ran dom key signs resulting string rsa private key 
sends result grub 
prototype kernel hash included message sent smartcard host necessity checking value identified prototype implemented 
addition smartcard hold sha hash value 
improved allow flexibility 
verify performance evaluation verify program reads file computes hash verifies hash stored file returns result verification 
example verify follows 
example verify sure inetd modified started 
rc init inet boot verify usr inetd boot hash table txt daemon usr inetd implementation verify hashes stored smartcard 
evaluate efficiency saegis boot process timed 
amount time elapsed time pc powered operating system starts system daemon 
addition smartcard ac cess time time spent protocol section measured expensive components 
measurement carried linux redhat mhz amd proces sor 
instruction obtain number ticks processor powers 
numbers seconds averages trials 
variance small 
boot saegis boot saegis difference time sec time sec smartcard access result shows saegis adds seconds bootstrap process 
half added cost accessing smartcard 
half includes code checking involves md hashing rsa operations 
details available 
loading grub kb floppy disk takes time load ing smaller linux boot loader hard disk 
adding seconds bootstrap process takes minute acceptable environments 
discussion key management saegis effectively essential manage private key smartcard appropriately 
describe ways managing private keys 
computer protected personal laptop computer computer associated owner 
private key unique known owner computer owner smartcard 
saegis prevent adversary booting computer discouraging theft computer 
approach may cause problem smartcard lost broken stolen associated computer longer usable 
kind key escrow system needed address problem 
second computer protected public library internet care computer associated users 
current saegis prototype provide multi user authentication key pair smartcard computer 
achieve multi user authentication mechanism necessary certificate mechanism revocation symmetric key mechanism kerberos 
alternative au users boot time boot computer rely application level authentication 
saegis achieve assigning private key multiple users 
trade offs approaches discussion 
direction fix implementation limitations implementation limitations described section fixed random number generator verify hash smartcard kernel hash included message smartcard sends workstation smartcard holds hash 
smartcard access bios achieve goal described section necessary move smartcard access library bios 
library kb size problem flash bios 
unfortunately authors responsible smartcard programming permission access bios source code 
working licensing issues decided implement prototype wait open source bios projects mature platform 
partially supported research schlumberger implemented personal secure bootstrap process saegis extension aegis 
advantages saegis aegis smartcard lets users control smartcard serves authentication token flexible aegis 
aspects highlight value 
improvement important software attacks modify operating system common secure bootstrap aegis strongly demanded 
problems aegis lack flexibility boot freebsd kernel requires reprogramming flash chip hardware configuration changed 
solved problem proposed solu tion 
idea personalization saegis suggests system user trust system administrators 
believe huge security gain attacks come inside organizations 
acknowledgments jim rees university michigan directing serial communication boot loader 
professor peter honeyman professor brian noble university michigan advice 
homepage 
www com 
william 
chaining layered integrity checks 
phd thesis university pennsylvania 
william david jonathan smith 
secure reli able bootstrap architecture 
ieee symposium security privacy oakland ca may 
bellovin merritt 
tations kerberos authentication system 
proceedings winter usenix conference january 
ftp research att com dist internet security usenix ps 
eric brewer paul gauthier ian gold berg david wagner 
basic flaws internet security commerce 
www ao net endpoint security 
html 
dearie di norris rosenberg vaughan 
protection grasshopper operating system 
dorothy denning 
cryptography data security 
addison wesley 
free software foundation 
gnu grub 
www gnu org software grub grub html 
ian goldberg david wagner randi thomas eric brewer 
secure environment untrusted helper applications 
proceedings th usenix unix security symposium july 

bypassing integrity checking sys tems 
phrack magazine september 
volume issue article 
peter hazen 
flash memory boot block architecture safe firmware updates 
technical report ab tel 
developer intel com design htm 
gene kim eugene 
design implementation tripwire file system integrity checker 
technical report purdue university 
csd tr 
paul kocher joshua ben jamin jun differential power analysis related attacks 
cryptography research 
www cryptography 
com dpa technical index html 
oliver markus kuhn 
design principles resistant smartcard processors 
proceedings usenix workshop smartcard technology chicago may 
linux bios 
www acl lanl gov 
peter stephen patrick ruth taylor jeff turner john farrell 
inevitability failure flawed assumption security modern computing environments 
st national information systems security conference crystal city virginia october 
national security agency 
www com htm 
nag greenberg kim maccabe ladd wheat van 
prose parallel real time operating system secure environments 
peter neumann 
architectures formal representations secure systems 
technical report sri csl computer science laboratory sri inter national 
department defense 
trusted computer system evaluation criteria december 
www ncsc mil library rainbow std html 

www freiburg linux de 
jim rees 
iso library 
www citi umich edu projects smartcard sc html 

www com 
wahbe lucco anderson graham 
client software fault iso lation 

