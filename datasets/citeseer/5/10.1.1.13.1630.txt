symphony distributed hashing small world singh manku stanford university manku cs stanford edu bawa stanford university bawa cs stanford edu prabhakar raghavan verity verity com symphony novel protocol maintaining distributed hash tables wide area network 
key idea arrange participants ring equip long distance contacts drawn family harmonic distributions 
simulation demonstrate construction scalable flexible stable presence frequent updates offers small average latency handful long distance links node 
cost updates hosts join leave small 
peer peer file sharing applications popularity years 
systems napster gnutella kazaa freenet millions users 
research community working wide variety peer peer applications persistent data storage cfs farsite oceanstore past event notification application level multicast bayeux scribe multicast dns resource discovery cooperative web caching 
applications centralized components scalable distributed hash table dht substrate :10.1.1.17.4065:10.1.1.140.3129:10.1.1.142.752:10.1.1.1.4310:10.1.1.105.3673
dht self organizing overlay network hosts provides service add delete look hash keys 
consider network hosts wide area network wish cooperatively maintain dht entries change frequently 
replicating entire hash table times unfeasible large 
solution split hash table blocks host manage block 
requires mapping table maps block id manager network id order hundreds thousands hosts hosts short lifetimes replicating mapping table times challenging 
possibility store mapping table single central server consulted hash lookup 
load central server reduced caching mapping table entries leases 
central server single point failure bear traffic related arrivals departures 
researchers proposed distributed hashing protocols require central servers :10.1.1.17.4065:10.1.1.140.3129:10.1.1.142.752:10.1.1.1.4310:10.1.1.105.3673
mapping table stored explicitly 
hosts configure structured network mapping table lookups require small number hops 
designing practical scheme lines challenging desiderata scalability protocol range networks arbitrary size 
stability protocol hosts arbitrary arrival departure times typically small lifetimes 
performance protocol provide low latency hash lookups low maintenance cost presence frequent joins leaves 
flexibility protocol impose restrictions remainder system 
allow smooth trade offs performance state management complexity 
simplicity protocol easy understand code debug deploy 
propose symphony novel distributed hashing protocol meets criteria listed 
core idea place hosts ring equip node long distance links 
symphony inspired kleinberg small world construction 
extend kleinberg result showing links node possible route hash lookups average latency log hops 
advantages symphony offers existing dht protocols low state maintenance symphony provides low average hash lookup latency fewer tcp connections node protocols 
low degree networks reduce number open connections ambient traffic corresponding pings keep control information 
sets nodes participate locking coordination dis tribute state update smaller sized 
fault tolerance symphony requires additional links node tolerate failure nodes portion hash table lost 
protocols symphony maintain backup links long distance contact 
degree vs latency tradeoff symphony provides smooth tradeoff number links node average lookup latency 
appears protocol provides tuning knob run time 
symphony dictate number links identical nodes 
number stipulated function current network size fixed outset 
believe features symphony provides benefits support heterogeneous nodes incremental scalability flexibility 
discuss section 
road map section explores related 
section describes symphony 
section contains experimental results 
section compare symphony protocols 
section concludes 
related distributed hash tables plaxton rajaraman richa devised routing protocol hypercubes static collection nodes 
routing done digit fixing node id receives query forwards neighbor prefix 
turns bits digit neighbor maintain log neighbors resulting log worst case routing latency 
tapestry adapted scheme dynamic network global data storage system 
pastry scheme lines node forwards query neighbor longest matching prefix 
tapestry pastry number bits digit configurable parameter remains fixed run time 
embeds key space torus dimensions splitting key variable length digits :10.1.1.140.3129
node forwards query neighbor takes closer key 
nodes neighbors routing latency dn 
number dimensions fixed 
final network size estimated log resulting log routing latency logn neighbors 
chord places participating nodes circle unit perimeter 
bit hash key treated fraction routing 
node maintains connections immediate neighbors circle finger table connections nodes distances approximately circle 
routing done forwarding node closest past key looked 
chord requires logn neighbors provides log routing latency 
protocols joining leaving network introduce complexity require log messages 
stabilization protocol required maintain network integrity 
viceroy proposal provides logn routing latency constant number links 
chord nodes placed circle 
node additionally belongs approximately log concentric rings lying 
rings correspond layers butterfly networks 
node maintains connections neighbors rings belongs 
maintains connections pair nodes lower ring connection node ring 
routing requires log hops average 
dht clusters extensively studied scalable distributed data structures community 
term coined litwin seminal 
gribble implemented highly scalable fault tolerant available cluster internet services 
requirements dht wide area networks different 
small world networks milgram conducted celebrated experiment demonstrated small world phenomenon 
discovered pairs people society connected short chains acquaintances 
discovered people able route letters unknown persons hops forwarding short path 
model small world phenomenon kleinberg constructed twodimensional grid point maintains links closest neighbors just long distance link node chosen suitable probability function 
showed message routed node greedy routing log hops 
studied kleinberg construction proved optimality certain conditions 
inspired kleinberg construction 
extend result showing links routing latency diminishes log hops 
show basic idea adapted engineered practical protocol maintaining dhts peer peer network 
symphony protocol denote unit interval wraps 
convenient imagine circle ring unit perimeter 
node arrives chooses id real number uniformly random 
node manages sub range corresponds segment circle id immediate clockwise predecessor 
node maintains short links immediate neighbors 
nodes choose id uniformly expect manage roughly equi sized sub ranges 
nodes cooperatively maintain distributed hash table 
hash function maps object bit hash key manager hash entry node sub range contains real number restriction imposed 
pastry tapestry relationship number links 
long distance links node maintains long distance links 
link node draws random number probability distribution function shortly define 
contacts manager point away clockwise direction routing protocol describe section 
attempts establish link manager ensure number incoming links node bounded placing upper limit incoming links node 
limit reached subsequent requests establish link node rejected 
requesting node attempt re sampling probability distribution function 
practical matter upper bound placed number attempts node gives 
ensure node establish multiple links node 
probability distribution function pdf denote pdf pn denotes current number nodes 
function pn takes value lnn lies range 
drawing pn corresponds simple expression exp log produces random number 
continuous version discrete pdf proposed kleinberg 
distribution pn belongs family harmonic distributions 
observation inspired name symphony 
estimation drawing pdf pn poses problem node needs know 
difficult nodes agree exact value current number participants especially face nodes arrive depart frequently 
section describe estimation protocol helps nodes track run time 
denote estimate node draws pn choice number links established node design parameter fixed protocol 
experimentally show long distance links sufficient low latency routing large networks 
long distance links practice network hosts spanning continents embed set participating hosts circle network proximity account 
expect require fair amount engineering currently working problem 
circle established expect symphony able route lookups latency exceed ip latency source final destination large factor 
example demonstrated factor achieved construction roughly nodes :10.1.1.140.3129
phrase network links node denotes network node establishes short links long links nodes 
terms tcp connections node maintains average connections 
unidirectional routing protocol node wishes lookup hash key needs contact manager node forwards lookup link short long minimizes clockwise distance kleinberg analyzed static network participant knows precisely long distance link corresponding pn manages sub range size routes clockwise 
showed expected path length greedy routing log hops 
show general node links expected path length log 
theorem expected path length unidirectional routing node network links log hops 
proof sketch proof assuming attempted long distance link successful 
noted section connections fact rejected intended target link saturated incoming links 
account implementation detail noting provided fraction rejected links constant inflates expected number hops constant 
assume nodes accurate knowledge pdf generating long distance neighbors pn log probability half drawing value pn dx log independent significance half regardless current distance destination probability single long distance link cut distance half 
number links consider current distance diminishes half follows geometric distribution mean half log links node expected number nodes consider current distance halved log ke log log successive nodes route hash lookup diminish distance destination 
consider portion route distance showed expected number nodes path encounter node halves current distance log maximum number times original distance possibly halved log 
expected number nodes route distance log log remainder path consists nodes diminish distance 
average contribution small path lengths node chose id interval uniformly random 
average path length full route log 
fi important links chosen harmonic distribution 
proof technique shown average latency omega gamma links chosen uniformly random interval 
section presents graphical illustration observation 
bidirectional routing protocol section described nodes establish long links nodes 
average number incoming links node 
practice link nodes see continuous routing traffic 
materialized bidirectional tcp connection leverage tcp flow control duplicate elimination order delivery guarantees 
udp replicate functionality 
way leverage incoming links treat additional long distance links 
helps reduce average latency marginally 
benefit obtained exploiting insight distribution source id incoming link corresponds roughly pn direction 
observation node exactly clockwise roughly long distance links motivates protocol node routes lookup link incoming outgoing minimizes absolute distance theorem expected path length bidirectional routing node network links log hops 
proof lines theorem 
fi bidirectional routing improves average latency roughly see section 
note minimize absolute distance restrict clockwise movement possible get infinite loops 
bidirectional routing average latency log 
constant hidden big notation 
experimentally show coupled idea lookahead see section networks large nodes average latency 
estimation protocol estimation protocol insight denote sum segment lengths managed set distinct nodes 
xs unbiased estimator estimate improves increases 
idea estimating fashion borrowed viceroy shown estimate asymptotically tight logn 
estimation protocol executes nodes contributed segment lengths update estimates 
choice experiments show practice 
node estimates length segment partitions neighboring segments 
segment lengths readily available extra cost nodes inserts ring 
section show impact increasing average latency insignificant 
note implementation symphony employ different estimation protocol 
example accurate value available central server participants register participating network 
scenario estimates piggybacked small fraction normal lookup messages amortizing cost maintaining node maintain harmonic mean estimates comes 
delve sophisticated protocols estimating purposes simple estimation protocol segments works fine 
join leave protocols join join network new node know existing member 
chooses id uniformly random 
routing protocol identifies node current manager runs estimation protocol updating estimates nodes 
denote estimate produced 
node uses pdf nx establish long distance links 
link establishment requires lookup costs log messages total cost link establishments log messages 
constant hidden big notation 
see section actual costs determined experimentally 
leave departure node handled follows 
outgoing incoming links long distance neighbors 
nodes outgoing links just broken reinstate links nodes 
immediate neighbors establish short links maintain ring 
successor initiates estimation protocol neighbors updates estimate departure node requires average incoming links re established 
expected cost log messages 
constant hidden big notation 
see section actual costs determined experimentally 
re linking protocol node network maintains values current estimate link estimate long distance links established 
lifetime gets updated due estimation protocol initiated nodes 
link true current long distance links correspond stale estimate solution establish links afresh 
node re link update traffic re linking excessive 
re establishment long distance links requires log messages 
re linking criterion compromise re linking criterion works re link ratio link 
advantage scheme steadily grows shrinks traffic re linking smooth lifetime network 
particular nodes arrive sequentially node knows precisely times number nodes re linking time 
experimentally show presence imprecise knowledge re linking cost smooth lifetime network 
show benefits re linking marginal 
lookahead nodes connected long link periodically exchange information piggy backed keep 
particular inform positions respective long distance contacts circle 
node learn maintain list neighbor neighbors 
call lookahead list 
lookahead list helps improve choice neighbor routing queries 
denote node list takes query closest final destination 
query routed neighbor contains neighbor set 
note route directly choice neighbor greedy anymore 
hash lookups exported rpc style interface iterative non recursive queries dns forward client neighbor neighbor cutting average latency half 
receiving forwarded lookup request neighbor fresh choice best neighbor route 
experimentally show lookahead effectively reduces average latency roughly 
cost lookahead 
size lookahead list 
number long links remains unchanged node log time estimation segments growing network shrinking network log time estimation log segments growing network shrinking network quality estimated value network expands shrinks 
vertical line segment plots average interval captures distribution 
directly link neighbors neighbors just remembers id 
arrival departure node requires average messages update lookahead lists nodes immediate neighborhood 
messages need sent immediately node arrival departure 
sent lazily piggy backed normal routing packets keep exchanged pairs nodes 
lazy update lookahead lists introduce temporary inconsistencies 
acceptable routing crucially depend lists 
lookaheads just provide better hint 
currently investigating role approximate lookahead 
employ lookahead general 
cost lookahead significant update link require additional messages updating lookahead lists 
large log node effectively compute shortest path destination 
experiments section results simulation symphony networks ranging nodes size 
systematically show interplay various variables justifying choices 
study kinds networks static network nodes constructed placing nodes circle splitting evenly segments 
knowledge global accurate 
expanding network constructed adding nodes network sequentially 
estimate establish long distance links 
expanding relink network simply expanding network nodes re establish links re linking criterion mentioned section 
dynamic network nodes fraction latency links expanding uni expanding bi fraction latency log links expanding uni expanding bi latency distributions network nodes 
arrive depart 
describe exact arrival departure distributions section 
estimation protocol shows performance estimation protocol network grew zero nodes 
vertical segment captures nodes 
estimation protocol tracks fairly 
estimate significantly improved log neighbors obtained existing node 
impact average latency significant show section 
experiments described conducted 
routing protocol plots average latency networks static expanding expanding relink 
log static unidirectional link links links links links links links log expanding unidirectional link links links links links links links log expanding relink unidirectional link links links links links links links log static bidirectional link links links links links links links log expanding bidirectional link links links links links links links log expanding relink bidirectional links links links links links links links average latency various numbers long distance links ranging log log expanding uni expanding relink uni static uni expanding bi expanding relink bi static bi latency various networks log links node 
vertical segment plots average interval captures distribution 
number neighbours estimation protocol expanding uni expanding relink uni expanding bi expanding relink bi number neighbours estimation protocol expanding uni expanding relink uni expanding bi expanding relink bi time step growing network shrinking network left latency expanding networks estimation protocol various values number neighbors contacted estimating right cumulative number re links network expands nodes shrinks back 
time step exactly node joins leaves 
number links node varied 
increasing number links reduces latency significantly 
successive additions diminishing returns 
reason re linking marginal benefits 
bidirectional routing idea improves latency roughly 
shows latency distribution various networks log links 
variance latency distribution high 
having log links node diminishes average latency variance significantly 
plots latency network node maintains log links 
vertical segments capture node pairs 
type network average latency grows linearly log expected 
re linking protocol plot average latency number neighbors estimation protocol varies 
observe average latency relatively insensitive value 
justifies choice 
shows cost re linking lifetime network expands nodes shrinks back zero 
exactly node arrives leaves time step 
chose network small highlight curve 
large graph looks straight line 
cost re linking fairly smooth 
dynamic network dynamic network nodes arrive depart 
studied network nodes having log neighbors 
node alternates states alive asleep 
lifetime sleep time drawn different exponential distributions means hours hours respectively 
grow node pool linearly period day nodes members pool day 
second day pool remains constant 
third day sees demise random nodes regular intervals pool shrinks zero hours 
average number nodes participate ring time theta 
see estimation protocol able track sufficiently accurately average latency hops 
wish point network simulated dynamic 
set nodes point time quite different set nodes hour earlier 
average lifetime node hour 
real life network nodes longer lifetimes variable distributions 
current model simple sufficient highlight stability symphony presence high activity 
lookahead shows efficacy employing lookahead small 
average latency diminishes lookahead 
spread latency distribution captured vertical line segments graph shrinks 
network nodes average latency 
simulated lookahead log links node saw average latency drop 
note lookahead entail increase number long links node 
exchanged pairs nodes periodically 
incur extra cost increments neighbor lists piggy backed normal routing traffic keep 
cost joining leaving plots cost joining leaving network 
node joins leaves long distance links created apart updates short links 
join leave cost proportional number links established 
cost diminishes average lookup latency drops 
lookahead additional messages update lookahead lists 
exchanged lazily pairs nodes piggybacked keep 
cost join leave log 
clearly shows constant big notation 
example network size need messages establish long links 
load balance plots number messages processed node network size corresponding lookups 
lookup starts node chosen uniformly random 
hash key looked drawn uniformly 
routing load various nodes relatively balanced 
average variance drop employ lookahead 
curiously distribution bimodal hour simulation expanding network steady network shrinking network dynamic relink bidirectional hour simulation expanding network steady network shrinking network dynamic relink bidirectional performance dynamic network nodes log links estimation protocol re linking 
node alive asleep average hours hours respectively 
node pool linearly increases day 
pool steady second day 
random node departs regular intervals third day network shrinks zero 
vertical segment plots average range values covers distribution 
number long distance links network size nodes static bi expanding bi relink bi lookahead static bi lookahead expanding bi lookahead expanding relink bi number long distance links log lookahead dynamic bidirectional link links links links links links links impact lookahead routing typical network nodes 
log unidirectional links links links links links links log bidirectional links links links links links links log bidirectional lookahead links links links links links links cost joining leaving network nodes 
messages processed nodes bidirectional routing lookahead lookahead bandwidth profile network nodes links node 
node looks random hash key 
lookahead employed 
investigating reason behavior 
resilience link failures explores fault tolerance network 
top graph plots fraction queries answerable random subset links short long deleted network 
bottom graph studies impact removing just long links 
slow increase average latency explained demonstrated diminishing returns additional links 
clearly shows deletion short links detrimental performance deletion long links 
removal short links nodes isolated 
removal long links routes longer 
suggests fault tolerance need short links constitute ring structure 
section leverage insight augment symphony fault tolerance 
comparison random links compares average latency symphony network nodes form outgoing links nodes uniformly random 
clearly shows obvious idea choosing uniformly random long distance neighbors scale path length grows 
comparison analysis symphony simple protocol scales offers low lookup latency handful tcp fraction successful lookups fraction links dead long short unidirectional lookup bidirectional lookup latency fraction links dead long unidirectional bidirectional studying fault tolerance network nodes log long distance links 
top graph shows percentage successful lookups fraction links short long randomly deleted 
bottom graph shows increase latency long links randomly deleted 
log expanding bidirectional random links symphony links comparison network node links nodes chosen uniformly random 
network size nodes 
connections node 
cost joining leaving network small 
symphony stable presence frequent node arrivals departures 
highlight features unique symphony 
low state maintenance table lists lookup latency vs degree various dht protocols 
low degree networks desirable reasons 
fewer links network reduce average number open connections servers reduce ambient traffic corresponding pings keep control information 
second arrivals departures engender changes dht topology 
changes concomitant state update set nodes size typically proportional average degree network 
fewer links node translates smaller sets nodes hold locks participate coordination protocol distributed state update 
third small degree translates smaller bootstrapping time node joins smaller recovery time node leaves notice 
easier isolate faults low degree networks making debugging faster 
symphony provides smooth tradeoff average latency amount state node 
fault tolerance symphony allows replication content fault tolerance making copies node content nodes succeeding clockwise direction 
node maintains direct connections successors 
arrangement tolerate simultaneous failures portion hash table lost 
new key value pair inserted node propagates changes successors consistency 
furthermore lookups succeed successive nodes fail 
network remains connected base circle intact long successive nodes alive node 
average number tcp connections node practice small value suffice assuming independent failures short recovery times 
symphony design fault tolerance motivated section showed short links crucial maintaining connectivity 
cfs past variant fault tolerance scheme 
symphony create redundant long distance links fault tolerance 
backup long links 
short links maintaining connections successors node 
long links contribute efficiency network critical correctness see section 
protocols pastry tapestry maintain backup links link node 
glance table reveals overhead redundant links fault tolerance significantly symphony protocols 
having fewer links node benefits described preceding section 
degree vs latency tradeoff symphony provides smooth tradeoff number links node average lookup latency 
appears protocol provides tuning knob run time 
symphony dictate number links identical nodes 
number stipulated function current network size fixed outset 
believe features symphony provides benefits support heterogeneous nodes node merely required bare minimum short distance links 
number long distance links chosen individual node available bandwidth average lifetime processing capability 
dht protocols specify exact number identity neighbors node network 
clear accommodate nodes variable degrees 
symphony randomized construction adapt naturally heterogeneous nodes ranging home computers dial connections lan office computers 
incremental scalability symphony scales gracefully network size 
estimation protocol provides participant reasonably accurate estimate network size 
possible nodes adapt number long distance links response changes network size guarantee small average lookup latency 
obviates need estimate advance maximum size network lifetime 
flexibility application designer uses distributed hash table dht want implementation efficient leveraging knowledge unique problem scenario 
example specifics network topology hand behavior participating hosts priori knowledge load dht known 
dht rigid structure application designer severely constrained 
sym tcp lookup protocol tcp lookup notes connections latency connections latency fixed dimensions log log chord fixed links log viceroy fixed links gamma log log tapestry digits gamma log log pastry digits digits log symphony bidirectional lookahead bidirectional lookahead table comparison various protocols network size latencies measured terms hops respective network topologies 
allows number links variable 
outgoing links identical sense drawn probability distribution function 
believe randomized nature symphony poses constraints compared protocols 
comparison protocols compare symphony dht protocols network size nodes 
discuss protocols possibly lookahead deploy additional links available 
route nodes average latency optimal value nodes resulting average latency 
average number tcp connections 
dimensionality fixed outset 
clear dimensionality dynamically changed network expands shrinks 
nodes tcp connections network size small 
protocols runs zone rebuilding protocol background adjust hash table partitions 
low cost joining 
heuristics constructing topology aware real network proximity shown yield low ip latency synthetic networks :10.1.1.140.3129
chord stipulates node network log outgoing links result average latency 
terms tcp connections nodes log connections 
existing dht protocols symphony closest spirit chord 
chord borrow ideas symphony better performance 
example chord currently uses clockwise routing unidirectional links 
modified employ symphony style greedy routing bidirectional links minimizes absolute distance target hop 
chord uses expensive relinking stabilization protocol insertion deletion 
node joins log nodes pointing node successor re establish link new node 
experience symphony shows re linking worthwhile greedy routing continues satisfactorily nodes re link 
pastry digit size bits need average tcp connections node average latency 
pastry improve latency tcp connections node 
digit size parameter fixed outset 
fault tolerance pastry maintains backup links link routing table 
content replicated adjacent nodes 
pastry exploits network locality choosing id nodes 
average latency synthetic networks shown small 
tapestry uses bit digits resulting average lookup latency links node 
tapestry similar pastry 
digit size parameter fixed outset 
fault tolerance pastry maintains backup links link routing table 
viceroy maintains links node irrespective size network 
node neighbors rings link links 
links bidirectional unidirectional 
viceroy node average tcp connections node 
average latency viceroy log 
corresponds average levels reach highest ring levels come ring right level 
viceroy appears complex clear exploit network proximity maintaining multiple concentric rings 
symphony offers wide variety choices number tcp connections fixed value nodes 
shows average latency long links lookahead bidirectional routing 
topology results tcp connections node average 
increases symphony average latency reduces 
symphony backup links long distance links 
node replicates content successor nodes maintains direct connections 
ensures content availability successful lookups long string successive nodes fails 
lookahead little value pastry tapestry 
route lookup length fixed 
protocol choose different route lookahead lists available 
reason lookahead useful symphony message follow paths source destination 
suspect chord benefit employing lookahead 
see additional links possibly various dht protocols improve performance 
chord larger finger table 
change average degree run time response changes network sizes chord deploy symphony estimation protocol estimating node maintains connections immediate neighbors dimensional torus 
natural way links increase dimensionality 
fixed parameter clear dimensionality changed run time cleanly 
presumably additional links connect farther nodes dimension giving flavor chord symphony dimension 
viceroy uses links matter large remains unclear viceroy employ links available presumably entail construction built way butterfly 
pastry tapestry links increasing digit size parameter fixed outset 
expected number links formula log possible values average degree limited far apart 
symphony modified version chord appear protocols offer smooth tradeoff average latency number links node 
symphony simple protocol managing distributed hash table dynamic network hosts relatively short lifetimes 
series systematic experiments shown symphony scales low lookup latency maintenance cost neighbors node 
particular neighbors suffice estimation protocol long distance links bidirectional routing lookahead sufficient low latencies networks big nodes 
believe symphony viable alternative existing proposals distributed hashing 
plan adapt symphony environment heterogeneous nodes gain experience implementation currently working 
important step implementation take network proximity nodes heterogeneity account 
acknowledgments geoff voelker insightful comments went long way improving 
anonymous referees shankar ramesh chandra feedback 
partially supported 
kranakis 
efficient routing networks long range contacts 
proc 
th intl 
symp 
distributed computing disc pages 
bawa manku raghavan 
sets search enhanced topic segmentation 
submitted publication 
bolosky douceur ely theimer 
feasibility serverless distributed file system deployed existing set desktop pcs 
acm sigmetrics pages 
clarke hong miller sandberg wiley 
protecting free expression online freenet 
ieee internet computing 
cox muthitacharoen morris 
serving dns peer peer lookup service 
proc 
st intl 
workshop peerto peer systems iptps pages 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
proc 
th acm symposium operating systems principles sosp pages 
gribble brewer hellerstein culler 
scalable distributed data structures internet service construction 
proc 
th symposium operating system design implementation osdi pages 
hildrum kubiatowicz rao zhao 
distributed object location dynamic network 
proc 
th acm symposium parallel algorithms architectures spaa pages 
iyer rowstron druschel 
squirrel decentralized peer peer web cache 
proc 
st acm symposium principles distributed computing podc pages 
kleinberg 
small world phenomenon algorithmic perspective 
proc 
nd acm symposium theory computing stoc pages 
kubiatowicz bindel chen eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
proc 
th intl 
conference architectural support programming languages operating systems asplos pages 
litwin neimat schneider 
lh scalable distributed data structure 
acm transactions database systems 
malkhi naor 
viceroy scalable dynamic emulation butterfly 
proc st acm symposium principles distributed computing podc pages 
milgram 
small world problem 
psychology today 
plaxton rajaraman richa 
accessing nearby copies replicated objects distributed environment 
proc 
th acm symposium parallel algorithms architectures spaa pages 
ratnasamy francis handley karp :10.1.1.140.3129
scalable content addressable network 
proc 
acm sigcomm pages 
ratnasamy handley karp shenker 
application level multicast content addressable networks 
proc 
rd intl 
networked group communication workshop ngc pages 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
ifip acm international conference distributed systems platforms middleware pages 
rowstron druschel 
storage management caching past largescale persistent peer peer storage utility 
proc th acm symposium operating systems principles sosp pages 
rowstron 
kermarrec castro druschel 
scribe design large scale event notification infrastructure 
proc 
rd intl 
networked group communication workshop ngc pages 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proceedings multimedia computing networking mmcn 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm pages 
zhang zhao joseph katz kubiatowicz 
bayeux architecture wide area fault tolerant data dissemination 
proc 
th intl 
workshop network operating system support digital audio video nossdav pages 
