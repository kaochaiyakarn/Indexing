software practice experience vol 
february dataflow approach event debugging ronald olsson richard crawford wilson ho division computer science university california davis ca summary describes novel approach event debugging 
approach coarsegrained dataflow view events high level event recognized appropriate combination lower level events depends occurred 
event recognition controlled familiar programming language constructs 
approach flexible powerful current ones 
allows arbitrary debugger language commands executed attempting form higher level events 
allows users specify event recognition way write programs 
describes prototype dalek employs dataflow approach debugging sequential programs 
dalek demonstrates feasibility attractiveness dataflow approach 
important motivation current sequential debugging tools inadequate 
dalek contributes inadequacies providing events powerful debugging language 
generalizing dataflow approach aid debugging concurrent programs investigation 
key words debugging programmable debugging source level debugging event debugging dataflow program monitoring despite advances program verification techniques program debugging remain important activity 
unfortunately frustrating time consuming 
various tools developed aid user debugging activities 
large majority debugging focused debugging concurrent programs graphical interfaces debuggers 
topics important tend overlook fundamental problems debugging sequential programs problems solved 
takes opposing viewpoint sequential debugging remains area significant unsolved problems 
specifically existing sequential debuggers adb debug dbx sdb gdb require user interact debugger detailed level level abstractions term user refers person developing debugging program 
term debugger refers program aids user debugging 
debugger controls execution user program typically executes separate inferior process 
received june john wiley sons revised september olsson crawford ho user program 
unfortunately user means mentally pencil correlating occurrence logically related breakpoints single occurrence 
capability desirable abstractions application program require series procedure calls 
inadequacy current debuggers provide limited control actions taken breakpoint occurs 
powerful means control desirable loop print contents linked list loop single step execution inferior process value variables greater 
offers concrete methodology practical tools solving problems 
presents new approach event debugging describes approach incorporated sequential debugger 
notion event debugging received attention especially debugging concurrent programs offers way filter large amount information associated execution inferior process 
event corresponds occurrence interesting activity execution inferior process 
generally number low level events predefine event system typical events include control reaching statement procedure entry procedure exit concurrent programs receipt sending message 
important aspect event system lower level events combined higher level events 
current event schemes form pattern matching recognition 
presents novel approach event debugging 
approach coarse grained dataflow view events high level event recognized appropriate combination lower level events depends occurred 
event recognition controlled familiar programming language constructs conditional repetitive statements user defined functions 
dataflow approach permits active event recognition 
allows arbitrary actions specified debugger language occur attempting form higher level events 
permits actions occur near misses desired lower level events occurred information gleaned occurrences lower level events nearly satisfies desired condition 
dataflow approach flexible powerful existing pattern matching schemes event recognition 
accessible user way users specify event recognition close way users write programs 
demonstrate feasibility dataflow approach event debugging prototypical debugger dalek developed programs running top unix operating system 
employing dataflow approach event recognition provides powerful expressive debugging language 
particular dalek provides control structures conditionals loops user defined functions finds conventional programming languages 
control structures useful display contents entire linked list loop entire tree recursive procedure control actions debugger takes interacting inferior process 
example dalek semi mechanical alien life form opposed doctor efforts sight 
dataflow approach event debugging execute inferior process requiring user interaction reaches particular state execution interest debugging 
dalek provides rerun mechanism playing back execution program rich collection predefine functions 
sections overview dataflow approach event recognition describe incorporated dalek 
examples illustrate dalek usefulness power 
comparisons debugging research status direction summarized 
results indicate problems sequential debugging benefit additional effort represents step dataflow approach event debugging attractive 
additional design implementation issues examples appear 
background overview dalek reader assumed somewhat familiar standard sequential debugger debug dbx sdb gdb 
typical capabilities debuggers include setting breakpoints specified function entries source line numbers relative addresses executing associated block commands immediately suspending execution inferior process breakpoint execution program source statement machine code level displaying values program variables memory locations displaying sections source code 
source level debuggers differ languages users control behaviour resultant functionality provide 
differences noteworthy 
debug dbx provide mechanism tracing value variable displaying value suspending execution changes 
gdb sdb provide tracing 
secondly debug gdb provide dynamically typed convenience variables programmer debugger compute store values 
gdb convenience variables global debug global local debugging procedures 
dbx sdb provides convenience variables 
dalek gdb 
enhances gdb functionality significant ways 
dalek extends original gdb language conditional statement confused gdb conditional breakpoint command looping construct blocks local convenience variables procedures functions 
provides events abstraction mechanism construct models inferior process behaviour intended undesirable forms monitor program actual behaviour terms specified forms 
dalek language widely held debugging activity debugging require alterations source code 
quite debugging user gdb debugger developed gnu project free software foundation 
olsson crawford ho thinks simple procedures extremely helpful routine traverse print selected elements linked list 
injecting debugging code source code conditional compilation attractive solution 
user brought inferior process critical point execution debugger control discovering need routine 
furthermore seemingly minor modifications source code substantially alter symptoms exhibited bugs especially pointers involved 
debugger provide user ability write debugging code 
allow user direct code executed debugger command level automatically breakpoint 
furthermore debugger provide language contains mechanisms programmers generally find useful 
dalek language provides assignment statements statements blocks local global convenience variables procedures functions 
dalek code written user finds necessary execution inferior process suspended breakpoint 
dalek code variables reside debugger address space 
storage objects affect affected inferior process 
events event dalek interest specified procedural methods 
number dynamically typed attributes associated event 
definition primitive event specifies list attributes names command block written dalek language 
definition high level event similar primitive event specifies list constituents lower level events attributes access activation may depend 
event definitions interactively read file 
event recognition dataflow methods models dataflow tokens flow nodes directed graph 
dalek leaves graph represent primitive events independent sources tokens interior nodes represent higher level events 
initially activity inferior processes causes suspend breakpoint transferring control debugger 
inferior program remains suspended debugger triggers primitive event associated activity inferior debugger generally transfers control back inferior process computation dataflow graph reaches quiescent state described detail 
primitive event recognized generates token 
token corresponds instance event token composite object information required uses special help convey meaning identifiers dalek commands appear boldface dalek convenience variable debugger function names appear inferior process variable function names appear italics 
dalek inherits commands syntax gdb 
important 
silent command suppresses output announcing breakpoint occurred 
cont command resumes execution inferior process 
step command executes statement inferior process 
names convenience variables debugger functions start 
comments 
indicates current line continued 
dataflow approach event debugging characterize particular occurrence event carried attributes 
recognition primitive event causes copies token characterizing event occurrence flow dedicated arcs high level events depend 
dataflow model computation performed nodes 
dalek command blocks associated events correspond nodes 
incoming arcs represented queues arriving tokens append 
illustrates dataflow approach event recognition 
represent activities breakpoints inferior process occurrence trigger primitive events respectively indicated dashed arrows 
turn occurrence primitive events trigger higher level events indicated solid arrows 
example occurrence trigger event note occurrence trigger events highest level events triggered respectively 
primitive events order instance primitive event occur explicitly raised 
typically user specifies event raise command command block breakpoint inserted inferior process 
presents simple example primitive event defined raised 
element defined attributes kind command block shown 
note event names attributes prefixed backquote distinguish convenience variables inferior process variables 
shows breakpoint set line source file foo dalek suspends execution inferior process reaches line executes command block 
command block raises primitive event element ways depending values variables inferior process 
higher level events primitive events inferior process 
event recognition dataflow approach olsson crawford ho definition primitive event element attributes kind 
event define element kind command block primitive event element 
break foo commands silent suppress default announcement encountering breakpoint raise element event sets attributes event raise element value value middle event raise element value tail endif cont continue execution inferior process 
outline defining raising primitive event desired primitive event may raised different breakpoints source code 
extreme primitive event need bound breakpoint inferior process example illustrates 
example involves tracing value global variable 
modified event prints names procedure invoker value variable discovered monotonically increasing 
uses get attribute read values attributes 
loop specified dalek command level single steps execution inferior process raising modified discovers change value values attributes passed modified taken global convenience variable old val inferior modified raised changes value 
attributes old new values names routine changed routine caller 
event define modified oldval newval called caller examine attributes occurrence modified get attribute oldval get attribute newval printf monotonically increasing called get attribute called get attribute caller endif single step inferior rake modified changes value set old val old val event raise modified old val func func set old val endif step endwhile 
tracing global variable dataflow approach event debugging processes variable dalek predefined function func 
func returns name procedure frames inferior process call stack 
note example easily programmed event 
event allows subsequent examination history event instances correlation event instances higher level events aid greatly debugging program 
primitive events thought characterizing interesting changes control data state inferior process 
typical primitive events include entry exit procedures smaller blocks code changes program data ranging change variable value complex changes linked list empty array unordered graph cyclic 
complex changes expressed highlevel events 
high level events definition high level event specifies constituent events trigger high level event 
definition indicates lower level events tokens arriving incoming arcs activate event command block attempt recognize instance high level event 
minus sign prefixing constituent name definition high level event indicates arrival token constituent trigger high level event token enqueued attributes available activation high level event 
high level event triggered associated code decides react constituents tokens values attributes 
code decide constituents subset thereof comprise valid instance high level event 
case characterize particular occurrence high level event code assign values attributes copying selected constituents computing function available data 
possible actions include printing message re establishing interactive control keeping inferior process suspended modifying data control flow inferior process 
code generally remove selected tokens incoming queues avoid repeated recognition tokens subsequently triggered 
event code finishes execution tokens embodying new event propagate high level events depend recognition phase begins anew 
hand code decide appropriate combination constituents incoming queues attributes fail satisfy desired relationships 
suppress normal generation tokens representing event subsequent passing tokens higherlevel events depend code execute event dont propagate command 
transfer control recall control transfers inferior process debugger breakpoint allowing debugger raise primitive event 
generally code olsson crawford ho associated event executes entirety event command block executed 
single event triggers multiple higher level events order execute determined implementation triggered nodes executed dataflow graph reaches quiescent state dalek continues execution command raised initial primitive event 
exceptions general rule arise node executes command resumes inferior process usage risky frequently needed 
example execution single step command suspends event code returns control inferior process 
suspended event code resumed inferior process executes statement 
note resumed execution inferior process encounter breakpoint cause primitive event raised 
dalek handles events saving restoring execution states details scope see 
modelling exploring program behaviour events instance event attributes located dalek address space invocation event command block local variables commands event written isolation events 
structure allows events mirror block structure inferior process quite naturally 
permits stepwise refinement behavioral model 
user define events covering abstractions program highlight bug symptoms suspected causally contributing bugs 
history list records recognized event occurrences 
may browsed selectively user interactive mode accessed programmatically dalek language predefine functions provided expressly purpose 
event history list allows program behaviour explored program execution 
described part examples 
examples examples illustrate various dalek features described combine form powerful debugging tool 
stack example shows events monitor operation stack usual push pop operations 
inferior process stack implemented array called stack variable stack pointer recording offset top stack array 
shows definitions primitive events push pop higher level event push pop 
blocks code associated high level events depend relative order execute 
code example depend global convenience variable event history list described 
general dependencies considered bad debugging style 
dependencies events reflected topological ordering dataflow graph 
dataflow approach event debugging event raised push entered records stack pointer attribute event define push stack event set attribute stack stack pointer event raised pop entered push records stack pointer attribute event define pop stack event set attribute stack stack pointer correlate push pop 
event triggered arrivals pop 
queue constituent event push stacks unmatched push push pop executes queue constituent event pop contains pop event define push pop push pop ensure stack pointer push corresponding pop value push stack value pop stack printf stack pointer error pushed popped value push stack value pop stack printf pushed popped stack pointer stack stack pointer value push stack endif event remove push discard instances push event remove pop pop event queues 
events monitor stack activity push pop activated current value stack pointer recorded attribute stack event set attribute command passed push pop 
addition name attributes definition push pop names constituents push pop lower level events depends 
recall arrival token constituent event name prefixed cause commands high level event executed token queued arrival 
arrival token pop triggers execution push pop arrival token push 
code associated push pop reflects stack discipline 
maintains invariant token queues active pop queue empty push queue contains arrival order push matched pop 
code checks stack attributes passed push pop 
attributes reflect values stack pointer item originally pushed popped 
values differ push pop prints error message 
prints recorded stack pointer value contents top stack 
code uses predefine function value access constituents tokens attributes 
value arguments specify name constituent position high level event queue constituent attribute name 
queue positions numbered starting denoting oldest arrival convenient special case denotes arrival 
checking tack attributes push pop removes corresponding constituent events tokens queues olsson crawford ho event remove command uses position numbering value 
seen primitive events push pop activated event raise command breakpoints set inside push pop functions respectively 
event raise command executed dataflow graph quiescent cont command instructs inferior process continue executing 
shows dataflow graph corresponding code figures 
memory allocation example uses events monitor allocations deallocation memory 
misuse memory allocation deallocation routines malloc free terminology common source program error passing deallocation higher level event primitive events inferior process raise push push entered break push commands silent event raise push cont raise pop pop entered break pop commands silent event raise pop cont 
activating primitive stack events 
dataflow graph stack example dataflow approach event debugging routine invalid address especially block previously freed 
example shows errors memory allocator detected 
shows definition primitive events malloc free correspond invocations allocation deallocation routines 
malloc records attribute address address memory block allocated free records attribute address address memory block deallocated 
error detection carried high level event match 
match keeps track addresses memory blocks allocated matched deallocate request 
free occurs match checks see corresponding malloc event raised 
malloc address match prints error message 
note order freeing blocks need allocated 
malloc event recognized time triggered raised default applies free event event define malloc address event set attribute address quiet finish event define free address event set attribute address addr high level event match depends lower level events malloc free triggered free 
event define match malloc free local free addr returns length specified event queue set malloc set free addr value free address search malloc matching free value malloc address free addr remove token free queue th token malloc event remove free event remove malloc break loop endif set endwhile printf error attempt free unallocated address ox free addr event remove free event dont propagate endif 
memory allocator monitor quiet finish dalek predefined function resumes execution inferior process returns current procedure 
quiet finish returns procedure return value 
addr global convenience variable set inside free address block freed free argument 
free system dependent library routine addr set system dependent 
olsson crawford ho shown match triggered free 
matching malloc free events performed simple loop sequentially compares attribute address passed free returned previous malloc events 
example illustrates local block enclosed declares local convenience variables free addr 
example extended determine reason mismatched free block freed second time 
match requires small modifications 
attribute say needs specified definition set match 
loop needs added body second statement 
loop simply searches event history list match attribute equal free addr 
additional attributes malloc free recording names inferior process procedures invoke free crucial transition merely detecting symptoms bug discovering cause 
searching history list useful different contexts 
suppose example user detected contents allocated structure corrupted 
programmatic search history list determine address structure freed 
tree traversal example shown illustrates simple user defined function outputs order nodes binary tree 
user may invoke ptree interactively dalek command level point execution inferior process simply setting breakpoint commands call ptree 
function ptree especially useful invoke routines manipulate trees insert delete nodes displays effects tree 
note functions ptree written dalek executed debugger address space 
modification user program required 
simulation program example shows usefulness dalek debugging pseudo concurrent simulation program 
pseudo concurrent programs deterministic similar true concurrent programs 
consist multiple simulated processes executing parallel sharing global variables 
furthermore exact interleaving process execution hard predict 
programs obviously difficult debug 
dalek code print binary tree argument pointer subtree 
function ptree call ptree left printf item call ptree right endif 
tree traversal dalek dataflow approach event debugging simple simulation program shown uses csim simulation package 
consists processes master sender 
sender repeatedly sends message back master delivery message takes random period time 
difficulty debugging program large number interactions processes 
difficult isolate relevant interactions 
common practice insert source program debugging statements print information current state process 
debugging messages intermixed pseudo concurrent programs 
filtering irrelevant messages tedious 
dalek filtering easily accomplished 
shows primitive events recv higher level event message 
send raised message sent sender recv raised master receives message sender 
simplicity sender number encoded message 
send recv discard messages 
message matches pair send recv outputs information regarding match 
message detects difference contents message sent received prints error message 
indicated send raised breakpoints associated source code 
commands breakpoints similar shown 
include lib csim define stm define num define senders mbox mb event go ahead defines csim types procs vars mbox event event create clock mean send time number items number senders mail box messages tell sender start sim int msg mb mailbox mail box create master csim process go ahead event start sending message senders sender initiate processes hold wait creation senders set go ahead signal senders receive rob msg note dalek event recv raised printf received msg msg sender int create sender csim process identity wait go ahead num senders printf sent hold stm hold message transmission time send rob note dalek event send raised 
simple simulation program olsson crawford ho events send recv raised breakpoints indicated fig 
propagates recognizes messages sender number 
event define send msg event set attribute event set attribute msg event dont propagate endif event define recv msg msg event set attribute msg event set attribute msg msg event dont propagate endif correlate send recv checking message contents event define message send recv value send value recv value send msg value recv msg printf message completed 
time lg value send msg value send clock printf error sender msg value send value send msg printf receiver msg value recv value recv msg endif event remove send remove token queue send event remove recv token queue recv 
dalek code filter match sends receives comparison debugging discussion general event approach debugging viable sequential debugger 
number debugging tools see instance distributed programs employed approach 
tools look interactions processes provide information internal state content variables stack frames individual processes 
debugging sequential programs sequential parts distributed programs 
hand common sequential debuggers debug dbx gdb sdb require programmers think solely terms breakpoints low level easily correlated abstractions source program 
dalek events dataflow approach event debugging group data breakpoints events useful abstractions 
programming language debugging command language gives complete control execution inferior process analysis behaviour 
contribution dalek event recognition active process depending conditions actions specified user modify state inferior process desired way 
existing event debuggers passively record events generated inferior process replay controlled manner 
information recorded directly derived recorded events unavailable 
dalek event specification allows association arbitrary debugging commands event 
recognition event may cause dalek interact inferior process obtain information modify inferior process execution 
dalek provides considerably power control examine inferior process behaviour 
event debuggers employ pattern matching approaches event recognition 
approaches require special expressions see instance describe patterns matched 
expressions complicated confusing recognize sequences events exactly match patterns 
consequence erroneous event sequences hard detect patterns known advance 
dalek dataflow approach allows greater flexibility event recognition 
event interior node dataflow graph computational unit access attributes associated lower level events depends 
information arbitrarily complicated condition evaluated deciding event recognized propagated higher levels 
result normal erroneous event sequences captured 
dataflow approach event debugging significant advantages traditional debuggers 
allows correlation breakpoints events illustrated 
correlation activity depend information event queues shown stack example 
correlation accomplished traditional procedural debuggers techniques best ad hoc cumbersome 
secondly dataflow approach allows debugging code written blocks generally independent 
example consider breakpoints events 
suppose new highlevel event depend primitive events new primitive event raised new breakpoint change requires user write breakpoint code primitive event code high level event code code need changed needs new attributes 
traditional procedural debuggers making change equivalent adding high level event require substantial rewriting debugging code particular code associated breakpoint need modified 
third advantage dataflow approach provides history list mechanisms access programmatically 
program behaviour explored program executed 
extension memory allocator example described typical history list see uses 
traditional procedural debuggers new debugging procedures need olsson crawford ho defined bound breakpoints careful interfere existing breakpoints locations inferior program need re executed 
dalek provides framework obtaining high level abstraction behaviour program create abstractions 
dalek expert system performs debugging users 
user specify primitive events raised grouped form high level events 
property shared conventional debuggers current offer help 
existing sequential debuggers allow examination modification state inferior process expressiveness commands extremely limited syntax somewhat ad hoc 
situations powerful flexible command language necessary describe desired action 
dalek approach complete programming language proved useful 
example existing sequential debuggers printing modifying values nodes linked list elements require user type separate commands macros command repetition task merely tedious onerous 
operation done dalek debug simple loop 
dalek approach similar 
key difference dalek includes mechanisms part conventional modern debugger interpretive environment 
programmers augment programs extra debugging statements run time assertion checks needed production versions 
illustrated ptree function dalek provides simple means write code need arises control executed 
dalek similarly specify debugging program new assertions checked 
advantage defining statements assertions dalek address space debugging variables susceptible corruption inferior process 
dalek language powerful replace entire functions statements inferior process 
user fix bug forgetting check array bound accessing array element effect replacing bad code instructions written debugger language 
jump command skip bad code resume execution inferior process 
way multiple errors fixed exiting debugger recompiling program 
memory allocation example find insidious memory allocation bug dalek 
dalek debug 
dalek monitor memory allocation deallocation large complicated program dalek took fair amount time 
dalek required minute elapsed time moderately loaded load average vax inferior dalek finished initializing data structures overhead rest monitoring noticeable acceptable 
minute dalek handled events generated frees malloc free match events triggered 
dalek debugging certainly convenient faster implementation dalek dataflow approach event debugging event handling far optimal manually checking arguments invocation malloc free 
dalek performance measuring tool 
programmers usually obtain timing information particular segment code explicitly inserting system calls programs record time segment executes printing difference 
dalek provides predefined function returns cpu time inferior process 
execution time inferior process measured altering source code 
timing specified part event breakpoint easily changed interactively dynamically 
timing measurement accurate user time system time user time time cpu spends executing instructions user process address space system time time cpu spends executing system calls invoked process 
reason discrepancy cost debugger controlling inferior process charged system time inferior process 
dalek simple code profiler gather useful statistics concerning program behaviour 
example dalek count number times procedure statement executed find maximum length linked list reaches execution measure run time stack frame behaviour order determine conditional probabilities push follows push pop follows push dalek obtain information user needing modify recompile inferior process source code 
possible objection dalek approach requires programmer learn language 
dalek language differs language inferior programs written experience indicates programmers little trouble learning 
main reason dalek language differs syntactically primary concern dalek development semantic issues functionality syntactic sugar 
way implementation evolved favoured non flavour 
hindsight dalek language syntactically closer idea worth development effort unclear time 
debugging debugging code question naturally arises debugger language powerful dalek debugging code written language suspected containing errors 
instructions written debugger language debugged 
undertaking stage debugging possible solution reality tandem debugging complicates matters 
early dalek development copy dalek help debug dalek language code interpreted copy dalek turn execution application program 
experience indicated unequivocally user time accurate machines 
example machines employ instruction pipelining affected instructions pipeline pipeline flushed operating system switches contexts occurs alternating execution inferior process debugger 
olsson crawford ho stage debugging viable solution 
dalek supports introspection facilities user interrogate regarding state 
dalek introspection facility verbose mode selectively enabled user 
mode dalek displays command name enclosing block interpreted 
making debugger actions visible way allows simple errors easily 
dalek provides means pause execution interpretation user debugging program 
user examine alter state inferior process equally importantly debugging program 
debugging program paused inside event example values event attributes manually inspected altered 
debugging program logic overridden breaking enclosing loop forcing userdefined debugging function prematurely return specified value 
addition block code debugging program edited resuming interpretation 
dalek pause interpretation debugger commands encounters pause command user types interrupt character control 
method obviously afford user choice line debugging code interpretation pauses 
pause particular line debugging code user set meta breakpoint line dalek language program 
tighter control mode allows meta single stepping 
prior interpreting line debugging code mode displays information shown verbose mode addition offers user option pausing editing current command block skipping displayed command entirely 
status dalek features described features fully implemented 
dalek implementation augments gdb version approximate lines source code roughly lines 
see details dalek implementation 
free software foundation plans incorporate dalek release gdb 
prototype demonstrating feasibility new ideas dalek include features ideal debugger implementation optimized 
experience dalek indicated prototype significant improvement existing sequential debuggers 
served highlight number areas deserve study 
needed improvement raise level dalek language 
current language intentionally low level ensure sufficient power flexibility experimentation 
low level cumbersome way event queue searched memory allocation example requires having code loop examine value event queue 
experience dalek identifying primitive mechanisms commonly commonly combined 
common combinations available user higher level mechanisms debugger language 
single exception convenience variables restricted types declared inferior process new types presently defined dalek 
dataflow approach event debugging dalek provides extremely limited form replay mechanism shorthand re executing program specified point 
replay graphical displays useful debugging features authors efforts focus fundamental issues 
dalek currently works programs written extended programs written languages 
techniques provide debuggers multilingual capabilities debug swat planned versions gdb 
mentioned immediate efforts focus areas 
area current extend dalek support debugging concurrent programs 
fact dataflow approach event debugging initially developed intention working distributed environments 
eventbased debugging advantage pulling related information scattered different contexts available separate points time exactly case distributed programs 
example message send message receipt take place different times different process contexts group naturally higher level event illustrated simulation example 
new approach event debugging 
key points approach modelling events dataflow graph providing debugging language fully programmable 
described approach incorporated sequential debugger dalek 
dalek implementation demonstrated feasibility approach provided base hands experience 
experience indicated dalek significant improvement existing sequential debuggers 
methodology described provides solid foundation base debugging activities 
tools described represent concrete progress addressing significant problems debugging sequential programs 
methodology extended realm debugging concurrent programs incorporating tools debuggers concurrent programs substantially improve functionality 
richard stallman free software foundation fsf gdb available public 
having base build dalek greatly expedited research 
chris wee jain carole mcnamee cui zhang anonymous referees provided useful comments dalek earlier drafts 
early research supported part system integrators incorporated sii state california micro program 

de francesco development debugger concurrent language proc 
acm sigsoft sigplan software engineering symposium high level debugging pacific grow ca march pp 
olsson crawford ho 
curtis bugnet debugging system parallel programming environments proc 
third international conference distributed computing systems hollywood fl october pp 


distributed debugging amoeba proc 
workshop parallel distributed debugging madison wi may pp 


gait debugger concurrent programs software practice experience 

garcia berman approach concurrent systems debugging proc 
fifth international conference distributed computing systems denver may pp 


garcia molina kohler debugging distributed computing system ieee trans 
software eng se 

harter heimbigner king idd interactive distributed debugger proc 
fifth international conference distributed computing systems denver may pp 


leblanc robbins event driven monitoring distributed programs proc 
fifth international conference distributed computing systems denver may pp 


leblanc mellor crummey debugging parallel programs instant replay ieee trans 
comp 

lin leblanc 
event debugging object action programs proc 
workshop parallel distributed debugging madison may pp 


schwartz melliar smith vogt interval logic higher level temporal reasoning proc 
second annual symposium principles distributed computing montreal quebec august pp 


smith debugger message processes software practice experience 

curtis time management debugging distributed systems proc 
fifth international conference distributed computing systems denver may pp 


adams muchnick window symbolic debugger sun workstations software practice experience 

bourne tutorial adb unix programmer manual th edition vol 
bell laboratories holmdel nj january 

vms debugger manual aa la te vms version digital equipment maynard ma april 

dbx unix programmer manual berkeley system distribution vol 
computer science division university california berkeley ca august 

sdb symbolic debugger unix programmer manual th edition vol 
bell laboratories holmdel nj january 

stallman gdb manual gnu source level debugger third edition gdb version free software foundation cambridge ma january 

bates wileden edl basis distributed system debugging tools proc 
fifteenth hawaii international conference system sciences honolulu hi pp 


bates wileden approach high level debugging distributed systems preliminary draft proc 
acm sigsoft sigplan software engineering symposium high level debugging 
pacific grove ca march pp 


bates debugging heterogeneous distributed systems event models behavior proc 
workshop parallel distributed debugging madison may pp 


alvarado doctor unfolding text macmillan press 

crawford topics behavioral modelling event debugging thesis division computer science university california davis preparation 

olsson crawford ho dalek gnu improved programmable debugger proc 
summer usenix conference anaheim ca june pp 


csim manual revision microelectronics computer technology austin tx aca st october 

hibbard generalized path expressions high level debugging mechanism proc 
acm sigsoft sigplan software engineering symposium high level debugging pacific grove ca march pp 


bates 
private communication november 
dataflow approach event debugging 
johnson design implementation run time analysis interactive debugging environment ph 
dissertation university british columbia tr august 

johnson run time debugging language computer languages 

vax debug interactive symbolic multilingual debugger proc 
acm sig soft sigplan software engineering symposium high level debugging pacific grove ca march pp 


multilingual debugging swat high level debugger proc 
acm sig soft sigplan software engineering symposium high level debugging pacific grove ca march pp 

