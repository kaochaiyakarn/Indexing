transformation object oriented conceptual models logical theories pieter bert van maurice bruynooghe david marc denecker katholieke universiteit leuven department computer science celestijnenlaan leuven belgium pieter bert maurice bruynooghe david marc 
denecker cs 
kuleuven 
ac 
www 
cs 
kuleuven 
ac 
dt ai kt btw 
describes semi automatic transformation fi om object oriented conceptual models logical theories 
associating logical theory conceptual model able combine best worlds 
hand object oriented software development paradigm recognized suited build maintainable communicable conceptual models 
hand logical programming paradigm offers powerful semantically founded concepts represent knowledge logical inference systems possible prototype solutions computational tasks 
method mapping conceptual models logical theories traceable dealing evolution problem domain requirements manageable 
path offered building prototypes object oriented conceptual models 
lot research interest providing formal semantics object oriented modeling languages particular unified modeling lan guage 
oo modeling languages lacked formal semantics cing ambiguity meaning model 
defining transformation formalism approach define semantics 
example translation uml models investigated part precise uml project 
executable specifications allowing validation rapid ing important issue investigation 
important retain qualities oo conceptual modeling 
believe mapping conceptual models logical theories done properly gives firm semantics oo conceptual modeling language research assistant fund scientific research flanders belgium question creates executable specification 
logic programming paradigm particular offers powerful semantically founded concepts represent knowledge problem domain 
construction manipulation logical theories complex activity 
oo analysis methods better suited build maintainable communicable conceptual models problem domain 
key quality transformation traceability 
offers explicit connection conceptual model executable specification 
lack traceability different views system development maintenance creates lot problems inconsistencies especially requirements evolve 
traceable process changes models decisions propagated manageable way 
approach starts building conceptual model er oo conceptual modeling method 
model transformed id logic logical theory forms basis prototyping implementation software logical inference system system 
sect 
give overview er method oo conceptual modeling introduce example model rest 
sect 
id logic language representing logical theories 
section describes transformation 
section introduces typical tasks gives outline solved system general solver 
conclude set directions research 
object oriented conceptual modeling er method entity relationship object oriented specification method oo analysis method building conceptual models augmented behavior 
er uses notation formal nature 
modeling constructs introduced method offer strong guidance modeler imposing number methodological rules 
restrict expressivity modeling language ruling inferior ways model reality 
way er differs significantly notations methods uml rup 
example model represents simplified part educational resource management system 
purpose system administer teaching assistant teach exercise sessions 
graphical representation model fig 

er conceptual model introduces number classes corresponding concepts identified problem domain course session exercise teacher 
class refined unary binary relation involving participating classes 
introduces existential dependence object refined class single object methodological rule force finding organizing classes leading better models 
schedule pp relevant schedule nen slot assignment relevant session scope scope relevant assigned offer teacher teachers offer teacher slot 

relevant ses ion slot session 
fig 

er conceptual model exercise teacher assignment system participating class 
relationship reified methods relations associations modeled classes 
relations represented means circle refined class lines participating classes 
single circle indicates multiplicity restricted duplicate exist having participant tuple exercise teacher course 
ted multiplicity indicated circles teacher slot 
participant line binary relation denotes restricted connectivity teacher slot object related teaching ability teacher assignments 
attributes defined classes introducing existential dependence objects value domain 
example course name domain course name type 
er emphasizes formal specification constraints observable problem domain 
done implicitly semantics constructs existential dependence integrated definition model elements multiplicity connectivity relations 
possible explicit constraints specified top classes introducing universally quantified logical assertion 
population model instance time obey constraints 
explicit constraints represented means triangles connected classes apply 
constraint appropriate ability states teacher assignment course participating teaching ability depends course reached teacher slot exercise offer 
constraint double assignments states exercise teacher assigned teach certain session different teacher slots 
building class hierarchies generalization specialization important aspect oo conceptual modeling 
er characteristic generalization class inherited specialization class introducing relationship supporting polymorphic reasoning 
characteristics strengthened specialization classes 
specialization classes grouped mathematical partition generalization class turning class 
er supports multiple specialization definition multiple orthogonal partitions 
partition indicated half circle 
dashed lines represent inherited characteristics strengthened 
model partitions introduced 
model teacher slot consequently teacher assign ment exist entire exercise offer sessions particular session 
note slots assignments additive 
queries defined modeling derived information 
denoted circles question marks connected class defined 
queries applied individual objects class 
query assigned teachers specifies teachers teach session terms queries 
queries name take session argument 
evolution state problem domain modeled occurrence events objects 
specification events part er model 
events transactional declarative nature 
schedule events create assignments resp 
vacant slot course 
specified elegantly non determinism 
describe formalism specifying queries events constraints 
semantics er conceptual models including non deterministic behavior defined terms populations population evolutions set theory logic 
logical theories language semantics inductive definition logic id logic integration order logic logic programming interpreting logic program non monotone inductive definition 
id logic theory defined pair set order statements expressing true assertions domain discourse 
logic program represents non monotone inductive definition sub set predicates 
defined predicates 
defined predicates second partition strictly needed simplified model kept illustrative purposes 
consequently id logic generalizes subclasses logic programming datalog 
context id logic theory contains definition logic program 
general contain arbitrary number independent definitions 
appear rule heads 
predicates called open 
interpretation free 
semantics id logic theory interpretation satisfying conditions 
arbitrary valued interpretation open predicates fixing meaning 
interpretation turns standard logic program 
unique valued founded model resulting logic program model id logic theory model consequence formulas constrain possible interpretations open predicates 
defined 
defined teacher 
open offer teacher assignment 
open session teacher assignment 
slot teacher slot teacher teacher bert 
teacher pieter 
slot teacher teacher assignment slot teacher teacher teacher 
fig 

id logic theory shows example id logic theory 
different parts separated 
distinction defined open predicates explicit declarations upper part 
middle rules defined predicates 
terms predicates full enumeration 
bottom part contains fol formula second argument teacher teacher 
theory result transformation defined 
computing models lsystem id logic theory basic computational task find interpretation open predicates solution 
specified set atoms true interpretation atoms outside set false 
task known abduction studied logic programming 
id logic theory generalization standard logic programming 
basic computational task deduction query conjunction literals task find substitution qa true unique model program 
able combine computational tasks implementation sldnfa procedure :10.1.1.13.3663
sldnfa procedure exactly herbrand model case definite program 
sound complete extension sldnf procedure basis implementation logic programming 
id logic theory query sldnfa computes substitution exist fails founded model valued true founded model ua 
system number experiments including com hard problems ai planning 
extensions id logic discussion formulated basic version id logic omitted number aspects minor importance understanding 
formulated core id logic extended number features allow users express certain knowledge concise readable way 
features type declarations function declarations 
declarations enhance readability language exploited solvers optimize reasoning process 
id logic type declaration introduces unary predicate 
shows unary predicate course 
actual definition predicate defined predicate belongs part theory 
defined enumeration facts terms predicates declared open 
type course 
function attendees course int 
predicate follows course student course 
fig 

type function declarations id logic declares function 
hand function introduces alternative notation predicate predicate attendees hand introduces formula functional dependence arguments function result 
introduces formula restricting domain range function declared types 
predicate arguments restricted declared type example shows 
extensions compiled away equivalent type function free theory 
theory system take input 
transformation conceptual models id logic theories section describe transformation conceptual models id logic theories 
tool developed performs large part transformation automatically 
conceptual models built conceptually rich set constructs 
process transformation id logic define represent terms definitions fol formulae 
theory results restricted structure problem domain contain information actual objects 
declare predicates defined open 
aspects introduced context tasks see sect 

events currently taken account transformation approach logical programming behavior significantly different 
relation approaches investigation 
transformation informal way illustrated context example introduced sect 

transformation concepts clearly described covered example 
transformation classes domains class conceptual model type defined theory 
introduces unary predicate certain state system evaluates true atoms represent object class 
way types defined domains attributes introduced conceptual model 
shows types generated conceptual model fig 

reduce length lines abbreviated symbol names 
type 
type course 
type session 
type 
type 
type 
fig 

id logic theory types type system introduced sect 
simple allowing explicitly state properties type system see sect 

transformation relations attributes refinement class relation gives rise functions unary resp 
binary relations expressing existential dependences introduced refinement 
function introduced attribute 
domain functions type class refined relation decorated attribute 
range type participating class resp 
domain attribute 
functions shown fig 

partial fragments 
full theory 
function name course 
function course course 
function session session 
function 
function course course 
function 
function session session 
fig 

id logic theory functions existential dependences binary relations alternative introduce ternary predicate functions 
need impose functional dependences explicitly 
current representation closer ert 
multiplicity connectivity constraints integrated definition relation added theory 
shown fig 

multiplicity constraint binary refined teaching ability course course 
connectivity constraint teacher assignment 
fig 

id logic theory integrated constraints relations transformation generalization specialization primary characteristic generalization specialization introduces relationship objects specialization class generalization class 
indicated id logic theory 
generalization specialization rich concept introduces lot 
approach fully transform class isolation relate theory 
alternative define generalization classes terms specializations 
transformation equally applies multiple generalization specialization hierarchies elaborated 
partitioning constraints 
explained sect 
specialization classes grouped mathematical partitions generalization classes 
implicit disjointness completeness constraints explicit theory 
shown relationship fig 





fig 

id logic theory relationship completeness disjointness partition scope teacher slot object er belong directly single class 
words populations couple concrete classes disjoint 
due limitations form class hierarchy equivalent stating couple general classes disjoint done fig 

course 
course session 
fig 

id logic theory couple general classes disjoint strengthening 
notion specialization incorporates powerful possibility strengthening characteristics generalization class level specialization class 
done example refinement classes relation 
previous paragraph functions formulae generated refined classes independent generalization specialization strengthening 
functions generated strengthened definition relation specialization class related relation generalization class 
objects specialization class interpretable objects generalization class es 
relation defined fig 

formula states participating teaching ability session teacher slot function specialized level function generalized level 
participation formula needed 
second formula essentially participant 
range function introduced specialized level restricted specialization teacher slot cfr 


session session 
fig 

id logic theory strengthening relations fig 

third formula complicated 
additional link ted chain existential dependence 
formula states function composition specialized level equal function generalized level 
notice formulae explicit domain set variables universal quantification 
equations false range intervening truth formula 
transforming explicit constraints formalism set theory order logic expect transformation pose conceptual problems 
worked implemented 
possible formulation formula constraint appropriate ability teacher assignment straight forward specification er ds fig 

course course 
fig 

id logic theory constraint appropriate ability teacher assign ment transforming queries definition deterministic query er ds model introduces information derived current population applying query arguments object 
er ds queries preconditions defined 
id logic theory deterministic single valued er query represented means function domain cartesian product type introduced class objects query applied types arguments range type result 
query returning set gives rise predicate 
outlines predicate generated query assigned teachers session 
constraints queries predicate assigned teachers session 
defined assigned teachers 
assigned teachers session 
fig 

id logic theory query assigned teachers session dealt automatically 
conceptual model recursire queries introduce problems semantic equivalence fr query definition theory investigated context 
non deterministic queries need investigated 
full specification queries example refer forth coming technical report 
solving tasks transformation step prototyping system 
section shows system compute solutions task 
means important classes tasks database querying scheduling 
traditionally solutions applications different techniques 
general notes tasks presenting task representations refine view depicted input system 
oo modeling distinction actual instance conceptual model population conceptual model commonly 
logical context distinction 
context deductive databases corresponds distinction database edb intentional database idb 
id logic edb provided task 
follows represent corresponds population conceptual model 
description task consists hand theory population set containing open predicates 
hand consists query triggers computation 
define triple du representation theory system resolve task 
illustrate reasoning process population classes assumed empty 
ignored partitioning conceptual model simplify example population 
course ai 

offer course ai 
lot slot 
slot 
bert 

course ai 
bert 

slot 

course oo 
slot 
slot 
pieter 

course oo 
pieter 
furthermore referring result transformation applied example conceptual model meant 
database querying characterization class tasks posing queries fully known database 
formulation population database 
query teaches exercises course ai example answer resolving query assigned teachers ai teacher context theory dt 
system return answer substitution rr teacher bert empty answer 
note open predicates exists set empty database complete hypotheses predicates 
reduces inference process system deductive reasoning 
scheduling class differs database querying different points 
mainly expected answer simple substitution query set objects dependences 
explain example suppose looking assignment teachers exercises context population contains partial bert slot vacant 
answer scheduling task extension set dependences fill gap 
order allow system generate set expected answer pre declared open 
example set contains 
partial information predicates population part secondly task add requirement slot teacher assigned 
constraint part scheduling event appear conceptual model consequently derived theory fulfilled entire system life cycle 
take account enforces search schedule 
formally requirement bringing obtain input theory 
query scheduling task typically true interest set ments 
note solving problem done deductive reasoning needs abductive reasoning 
computed answer empty answer sub set id id slot id id new object identifier belong ing set 
remarks approach contains ingredients needed build prototype system 
flexible approach describe task capable deal simple uniform way different kinds problems declaring open defined predicates 
making suited kernel prototype system 
far efficiency concerned current prototype executes transformed program time consuming task 
obviously knowing predicates defined open population constraints simplified 
expect possible logic pro gram specializers ecce explored 
transformation object oriented conceptual models er os logical theories id logic 
step method provides modeling tool logical theories 
time transformation step complete formal semantics er conceptual models established formalism 
approach try build method supports aspects software development process 
approach possible build prototype system perform computational tasks context generated theory 
worked important classes tasks database querying scheduling 

transformation partial 
certain concepts er method archive object life cycles left 
explicit constraints queries translated automatically events taken account 
nondeterministic constructs ert allow complex planning functionalities specified elegant way 
important done integrate ert approach modeling behavior queries events logic programming approach tasks 
expect result deeper understanding paradigms 
theorem provers verify conceptual model entails certain property starting generated logical theory 
interesting application approach consists proving class non empty population exist 
possible may instance indicate multiple generalization specialization hierarchies 
transformation generates theory entirely tailored conceptual model hand 
alternative approach see conceptual model instance meta model 
meta model corresponding meta theory logic possible transform conceptual model instantiation meta theory 
semantics constructs expressed level meta theory 
logical knowledge representation meta theories built specific types knowledge reasoning patterns 
bringing back oo conceptual modeling introduce interesting modeling constructs patterns 

obtainable www cs kuleuven ac kt systems shtml 
pieter geert frank eric 
specialization generalization object oriented analysis strengthening multiple partitioning 
workshop managing specialization generalization hierarchies september 
pieter eric 
non determinism conceptual mod els 
proceedings tenth oopsla workshop behavioral semantics oopsla october 
pieter bert van maurice bruynooghe david marc denecker 
specifying educational resource management system approach 
report department computer science leuven leuven belgium preparation ch aft www cs kuleuven ac kt btw 
pieter bert van maurice bruynooghe david marc denecker 
transforming conceptual models id logic theories case study 
report department computer science leuven leuven belgium preparation draft www cs kuleuven ac kt btw jean michel robert france 
transforming uml models formal specifications 
pierre alain muller jean editors proc 
international conference unified modeling language uml notation 
springer verlag 
marc denecker 
extending classical logic inductive definitions 
john lloyd veronica dahl ulrich furbach ed kerber kung lau palamidessi luis yehoshua sagiv peter stuckey editors computational logic cl international conference london uk july proceedings volume lecture notes artificial intelligence pages 
springer 
marc denecker maurice bruynooghe victor marek 
logic programming revisited logic programs inductive definitions 
acm transactions computational logic october 
marc denecker danny de schreye 
sldnfa abductive procedure normal abductive programs 
journal logic programming february 
marc denecker kakas editors 
special issue abductive logic programming 
elsevier north holland 
special issue journal logic programming vol 
july august 
fuchs 
specifications preferably executable 
iee bcs software engineering journal 
ivar jacobson grady booch james rumbaugh 
unified software de velopment process 
addison wesley 
kakas bert van marc denecker 
system problem solving abduction 
nebel editor proceedings seventeenth international joint conference artificial intelligence pages 
international joint conferences artificial intelligence american association artificial intelligence 
craig 
applying uml patterns object oriented analysis design 
prentice hall 
michael 
ecce partial deduction system library benchmarks 
obtainable www ecs soton ac uk mal 
james rumbaugh ivar jacobson grady booch 
unified modeling lan guage manual 
addison wesley 
eric pieter frank jan bart stefan van 
object oriented analysis 
course notes department computer science leuven 
eric johan jan bart stefan van van 
manual 
version 
report cw department computer science leuven leuven belgium january 
stefan van johan eric bart 
constraints object oriented analysis 
nishio yonezawa editors object technologies advanced software lecture notes computer science vol 
pages 
springer verlag berlin 
isbn 
stefan van johan eric van 
entity relationship object oriented specification method 
magnusson meyer editors technology object oriented languages systems tools pages 
prentice hall uk 
van gelder ross schlipf 
founded semantics general logic programs 
journal acm 
