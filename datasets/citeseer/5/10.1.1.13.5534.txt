appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california ieee transmeta code morphing software speculation recovery adaptive address real life challenges james brian john banning richard johnson thomas kistler alexander jim mattson transmeta freedom circle santa clara ca transmeta crusoe microprocessor full systemlevel implementation architecture comprising native vliw microprocessor software layer code morphing software cms combines interpreter dynamic binary translator optimizer runtime system 
general structure cms resembles binary translation systems described literature unique respects 
wide range pc workloads cms handle gracefully real life operation plus need full system level compatibility expose issues received little attention previous literature exceptions interrupts dma self modifying code 
discuss challenges raised issues techniques developed crusoe cms meet challenges 
key solutions crusoe paradigm aggressive speculation recovery consistent state unique hardware commit rollback support adaptive exceptions occur handled efficiently interpretation 
transmeta crusoe vliw processor cms approach unique commercial architectures microprocessor system internal authors acknowledge numerous transmeta engineers designed implemented crusoe code morphing software processor 
excellent 
email contacts transmeta com transmeta com transmeta com 
vliw instruction set architecture isa little resemblance external isa presents users 
approach allows simple compact lowpower microprocessor implementation freedom modify internal isa generations supporting broad range legacy software available 
producing robust runtime performance comparable competing implementations requires cms deal effectively number difficult problems usually ignored literature binary translation dynamic optimization 
sketch structure cms focus challenges faced set apart systems described literature solutions implemented 
challenges natural consequences cms objectives cms faithfully implement complete architecture instructions including architectural registers complete exception behavior 
cms assumptions operating system running processor depend information assistance system 
system level implementation application level executes bios code 
consequence access executable files applications runs translation done line target software executes 
cms provide robust performance wide variety systems applications ranging games media processing desktop productivity server applications 
requires dealing unpleasant realities self modifying code precise exceptions 
important note regard cms migration tool past commercial systems cms interim solution transition code base new architecture deal unusual ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california important performance problems waiting code question converted 
section provides background crusoe processor features cms structure discussion 
section describes cms uses speculation recovery adaptive address number challenges full system high performance dynamic binary translation 
section surveys related 
crusoe cms crusoe processors microarchitectures designed simplicity moving complex infrequent tasks software 
full discussion architecture scope provide details relevant discussion 
crusoe tm vliw processor 
instruction called molecule issue risc operations called atoms subset functional units alus memory unit floating point media unit branch unit 
generalpurpose registers floating point registers allowing architectural registers assigned dedicated native vliw registers ample set available cms 
transmeta vliw hardware hardware interlocks 
cms guarantees correct operation careful scheduling inserting ops necessary 
unpredictably long latency operations loads caches additional latency handled automatically hardware 
cms tailored processor generations hardware change operation latencies aspects native isa microarchitecture affecting visible architecture 
fact current tm family evolved significantly tm family crusoe processors adding atoms efficiently implement segmentation bit operations indirect branches change target isa 
generation crusoe processors tm family native isa changes including complete re design instruction formats invisible code executing processor 
cms structured dynamic translation systems 
initially interpreter decodes executes instructions sequentially careful attention memory access ordering precise reproduction faults collecting data execution frequency branch directions memory mapped operations 
number executions section code reaches certain threshold address passed translator 
translator selects region including address produces native code implement code region identified stores translation various related information translation cache 
invalidates translation cache entry cms executes translation flow control reaches translated code region 
initially exits translation branch lookup routine chain path transfers control existing translation address back interpreter 
branch target identified translation branch operation modified go directly process called chaining cmelik 
time frequently executed regions code execute entirely translation cache overhead interpretation translation branch start exceed translation threshold 
interpret instruction find instruction 
interpreter rollback fault chain translate region store execute translation typical cms control flow translator chain target lookup 
variety exceptional events may interrupt typical control flow 
largely concerns treatment cases represented fault path 
translator largest complex component cms 
comprises modules decode instructions select region translation analyze data control flow region generate native vliw code region optimize schedule 
ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california choice translation regions scope may fairly large complex contain long traces statements nested loops include instructions 
provides extended scope optimization 
optimizer performs number traditional crusoe specific optimizations region schedules final native vliw code set single entry multiple exit traces 
done close attention cost translator significant portion execution time 
addition components cms includes runtime system handle devices interrupts exceptions power management garbage collection translation cache 
speculation recovery adaptive requirement cms deliver utterly faithful high performance implementation legacy commercial microprocessor architecture poses significant challenge 
key paradigm allows address technical obstacles speculation recovery adaptive 
speculation context refers making exploiting assumptions unproven translation time code translated 
example translator assume specific load store instructions non overlapping memory 
type speculation enables generation efficient translations assumptions prove false incorrect results may produced 
assumptions verified runtime appropriate action taken violation detected 
cms uses combination hardware software mechanisms detect failing assumptions 
mechanisms trigger native exceptions transfer control handlers various modes failure 
cms response failures similar way deals normal execution 
address infrequent failures cms invokes interpreter deal condition 
interpreter slower executing translations implements precise semantics guarantees correct machine state instruction boundary 
solution front time space cost works vast majority translations seldom fail speculative assumptions lifetimes 
varieties speculation occasionally fail repeatedly heavily executed translations case fault approach incurs unacceptable overhead 
cope gracefully eventuality cms monitors recurring failures generates conservative translation deems rate failure excessive 
reduce performance impact conservative translations cms attempts confine causes failures smaller regions originals 
transmeta native vliw processors provide hardware assistance various kinds speculation subsequent recovery describe mechanism subsection 
subsequent subsections describe challenges cms meets applying procedure speculation recovery adaptive cms faithfully reproduce precise exception behavior target overly constraining scheduling translations 
cms respond interrupts precise instruction boundaries system possesses consistent target state 
cms efficiently handle memory mapped system level operations penalizing normal non memory 
legacy pc software especially games includes performance critical self modifying code 
similar problems result pages containing code data common windows device drivers embedded systems running real time operating system qnx 
variety data section illustrate challenges 
collected tm system cases desired data easily extracted hardware data crusoe simulator provides accurate dynamic molecule counts cycle accuracy 
simulation benchmark set includes boots windows variants dos linux os benchmarks specint windows productivity applications media applications see appendix list 
generally selected summarized data set 
note issues discuss occur applications common system code 
hardware support speculation recovery compilers typically deal recovery speculation generating compensation code incorrectly sequenced operations performs operations omitted speculative code path corrects mismatches register assignments freudenberger 
approach hardware support required defer faults potentially faulting ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california instructions moved branches boosting smith detect overlapping memory operations scheduled sequence branch compensation code memory conflict buffers gallagher intel ia alat 
contrast crusoe native vliw processors provide elegant hardware solution supports arbitrary kinds speculation subsequent recovery works hand code morphing software 
registers holding state shadowed exist copies register working copy shadow copy 
normal atoms update working copy register 
execution reaches translation special commit operation copies working registers corresponding shadow registers committing done translation 
hand exceptional condition failure cms translation assumptions occurs inside translation runtime system undoes effects molecules executed commit rollback operation copies shadow register values committed previous translation back working registers 
rollback cms usually interprets instructions corresponding faulting translation executing original program order handling special cases encountered invoking exception handling procedure necessary 
commit rollback apply memory operations 
store data held gated store buffer released memory system time commit 
rollback stores committed simply dropped store buffer 
speed common case rollback mechanism designed commit operations effectively free rollback atoms cost couple branch mispredictions 
subsections describe ways cms takes advantage commit rollback mechanism 
precise exceptions special hardware support difficult impossible dynamic translation system statically scheduled host correctly model exception semantics target isa time achieving high performance 
primary reason exception semantics impose severe constraints instruction scheduling 
isa exceptions precise instruction causes exception commit rollback equivalently viewed checkpoint restart 
instructions preceding complete exception reported subsequent instructions may complete 
solving problem special hardware support unduly constrains scheduling host instructions requires compensation code reduce performance common case exceptions occur 
hardware support commit rollback interpreter recovery procedure place cms flexibility scheduling translated instructions 
reorder potentially faulting atoms hoist conditional branches bookkeeping required traditional control speculation generating space consuming compensation code 
consequence approach fault reflected level cms determine fault genuine result speculative instruction reordering 
interpreter re executes instructions entire translation encountering fault speculative infrequent cms ignore continue normal execution 
preferred strategy dealing recurring fault depends class 
genuine faults narrow translation size faulting instruction 
reduces amount rolled back interpreted neighboring regions remain large highly optimized 
ultimately run translations faulting instruction zero instruction translation simply calls interpreter execute faulting instruction 
frequently recurring speculative faults conservative policies eliminate sort fault encountered cutting translation smaller regions benefit aggressive translation 
new translation keeps track policies problem arises requiring different conservative policies cms add existing ones avoid bouncing translations incomparable policies solves problems 
interrupts commit rollback serve similar purpose respect interrupts 
interrupt causes rollback consistent target state translated code need concerned interrupts intermediate states consistent state instructions 
interrupts trigger adaptive normally directly related translation executed interrupt delivered 
ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california memory mapped crusoe system processor cms designed transparently run arbitrary code written architecture including operating system application software 
obvious difficulty accurately implementing corner cases system level architecture cms correctly implement low level interactions physical devices 
important rules associated transactions performed original program order trigger irrevocable interactions external devices 
architecture devices accessed different mechanisms explicit instructions memory mapped accesses 
easily recognized translated appropriately 
distinguished translation time regular memory accesses 
addition instruction access regular memory space course program execution 
dos boot linux boot os boot windows boot windows boot windows boot windows nt boot windows xp boot mean boots quake demo dos eqntott linux compress linux sc linux gcc linux tomcatv linux ora linux alvinn linux mdljsp linux multimedia win win pro mean apps degradation caused suppressing memory reordering entirely suppressing memory reordering solve problem severe handicap 
illustrate point ran simulations benchmark suite reordering memory operations 
presents representative subset results means entire set see appendix 
boots degraded cost high windows boot 
application degradation greater 
solve problem load store atoms crusoe hardware specify reordered respect original program 
speculative memory atom accesses memory page mapped space hardware raises exception 
point cms performs rollback previously committed state interprets 
faults recur cms translation time reordering offending memory 
data speculation memory operations access memory devices common translator prove load store addresses overlap precludes reordering 
key insight practice memory rarely overlap overlap obvious reordering usually safe beneficial 
crusoe provides simple hardware support alias hardware allows cms reorder selected memory hardware burden verifying runtime reordered fact overlap 
hardware detects violation raises exception cms may invoke rollback conservative re execution interpreter handle condition 
degradation caused alias hardware dos boot linux boot os boot windows boot windows boot windows boot windows nt boot windows xp boot mean boots quake demo dos eqntott linux compress linux sc linux gcc linux tomcatv linux ora linux alvinn linux mdljsp linux multimedia win win pro mean apps ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california simulation data benchmark suite demonstrates performance benefit alias hardware 
presents performance degradation results alias hardware severe reordering 
crusoe alias hardware simpler required enforce memory constraints order processor 
simpler approaches suggested vliw processors memory conflict buffer ia alat 
fully associative tables hardware mechanisms determine protected address table entries overwrite check order memory operation crusoe requires translator explicitly specify 
recurring faults handled cutting faulting translation smaller regions scheduling regions fault speculative load store reordering 
self modifying code smc programs modify execution cause significant problems microarchitecture 
cms manifests problem keeping translation cache consistent associated code 
cms speculates time code translates change 
case detection problems adaptation techniques interest 
original transmeta approach detecting smc simply write protect memory page code fragment page translated cms 
data protected page modified explicitly program implicitly system paging activity fault occurred cms discard affected translation 
page level protection adequate correctness critical performance common case efficiently handle self modifying code 
deal sharing code writable data page occurs performance critical loops graphics processing games 
common modern compiled applications device drivers games quake embedded code techniques assembly modules code local static data 
particularly common bios embedded software subject space constraints assembly code extensively 
costs incurred smc 
handling fault page written invalidating translations associated page 
second re generating translations time code page executed 
subsections discuss techniques minimizing cost detecting writes pages containing mixed code data techniques adapting code self modifying 
fine grain protection crusoe processor provides hardware support write protecting memory granularity finer full pages 
key insight finer granularity needed pages time pages share writable code data 
result pages need fine grain entries hardware cache software fault handler update cache memory misses allowing small simple hardware structure 
granularity supported identify single translation affected typically narrows impact reducing number faults number invalidated translations 
order avoid excessive processing common case paging virtual memory dma writes protected page invalidate translations page 
simulated benchmarks demonstrate benefit fine grain protection comparing number protection faults fine grain feature slowdown molecules executed instruction 
results table 
faults column gives ratio number protection faults fine grain support number fine grain support slowdown column shows impact molecules executed instruction result 
table slowdown fine grain protection faults slowdown win boot win boot corel quake demo self translations cms determines translation encountering legitimate protection faults due data stores region code faults expensive adding prologue code segment invoked just translation entered 
generally temporary monitoring purposes allow easy installation removal disturbing translation 
inserting prologue involves removing ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california existing chains translation replacing start address prologue address 
candidate translation self revalidation identified flagged 
time encountered re translated order capture translated code preserved initially 
handler fine grain protection fault determines translation affected enables prologue turns protection avoid cost faulting 
translation invoked prologue verifies code corresponding translation changed re enables protection re verifies code disables prologue executes translation 
technique eliminate protection faults due writes 
executes fault handler checks write protected area execution translation quite efficient writes frequent executions affected translations 
capture code checked translation executes normal optimized speed writes protected area 
example benefit quake demo benchmark achieves higher frame rate self revalidation 
protection faults happen frequently overhead fault handler checks significant revalidation expensive executing translation 
technique translation writing associated region write occurs checking prologue completed causing new fault preventing forward progress 
cases technique optimizing fault detection may better 
self checking translations protecting page creating translation possible leave memory page unprotected translation check source bytes changed fetching comparing values translation created 
merge checking code normal translation code detects mismatch rollback translation effects occurred 
scheduling constraints observed inserted checking code 
fetches checking operation appear logically stores including operation checked control flow path operation checked 
fetching self checking reordered relative stores alias hardware outlined section 
overhead self checking translation times smaller self average cost may higher translation executed times protection faults 
evaluate typical cost self checking translations ran simulations benchmark suite normally translations forced 
self checking adds mean code size ranging mean molecules executed ranging cache effects actual runtime impact higher 
self checking translations expensive interpretation re translation see data overhead significant especially long translations absolute cost 
technique eliminate unnecessary self modification failures attempt adapt producing smaller translations minimum code checked 
stylized smc techniques helpful code changing protection faults result data written page code 
techniques described methods adapting genuinely self modifying code pc applications rely self modifying code stylized ways 
common approach example modify immediate offset fields instructions inside inner loop just entering loop 
possible avoid continual special case translating original code way translation loads runtime immediate fields question code stream 
consider instruction label add eax translated crusoe code ld temp label add eax temp translation valid regardless immediate field modified application 
note technique conjunction self checking self revalidation verify instruction fields immediate operands modified 
approach particularly popular register poor machines loop invariant constants registers hold loop 
game doom uses critical loops instance occurs current applications adobe 
rarely appears portable compiled benchmarks spec 
ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california translation groups self modifying code repeatedly writes executes small number versions rewritten code 
example device independent blt driver windows uses versions benchmarks checked version depending operation performed graphics chip hardware capabilities 
cases desirable old translation available old version reappears 
cms keeps translations translation groups 
lists translations code region currently active translation list 
translation fails self check protection fault checked current match code new translation produced matching translation current 
result techniques cases encountered practice cms robustly obtains performance self modifying code mixed code data 
related cms closely related emulation binary translation dynamic optimization literature long history 
comments follow focus software emulation systems may hardware features facilitate emulation 
classify software emulation systems interpreters instruction time memory static translators offline dynamic translators online 
classification altman uses emulator interpreter cms includes interpreter dynamic translator call simply translator 
call emulated architecture target emulating architecture host 
emulation systems self hosting host target architectures 
systems generally created purposes optimization instrumentation 
known dynamic optimization system dynamo hp labs bala successor deli 
dynamo high level architecture similar cms fall back efficient native execution need attempt translation code problematic just improved 
reason tradeoffs systems quite different systems cms 
rich area research virtual target emulators target architecture specially designed virtual machine physical architecture 
interesting example comes ibm migration system powerpc architecture static translation machine code included compilers application object code 
java virtual machines better known example 
emulate byte code designed specifically efficiently interpreted wide variety machines 
early interpreter systems emulators developed sophisticated dynamic optimizers sun hotspot ibm jalape burke yang 
systems great deal common cms including tradeoffs translation cost code quality 
virtual machine semantics tightly controlled avoiding problems discussed 
cross hosted emulators emulating target architecture different host deal completely full variety target code 
common purpose move code target architecture host architecture usually facilitate customer migration older architecture newer intended replace 
examples dec migration tools dec vax vms alpha vest mips ultrix alpha osf mx see 
performance degradation undesirable systems usually benefit hosts significantly faster target problematic cases ported native code new architecture 
vest project objectives instance explicitly allowed rejecting target code diagnostic information guide manual intervention 
alpha migration project fx running windows nt code windows nt alpha chernoff 
fx uses interpreter static translator triggered interpreting target code runs offline preserves translations database 
perfect emulator instance doing bit bit floating point supporting windows nt debug api state arbitrary points 
commercial project hp aries migration hp pa ia zhang 
features interpreter dynamic translator architecture akin cms 
single block translations weaknesses keeping target floatingpoint register images memory cause severe performance problems significant classes code 
provides performance information knowledge project completed 
class migration tools intended vendor capture applications created vendor architecture 
early example hunter system dos emulator static translator 
emulated software intended primary target systems performance requirements modest 
difficult applications ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california handled special case modifications translation required significant manual intervention 
systems escape valves available cms seamlessly execute software provide performance competitive hardware microprocessors continue improve 
important distinction application level emulators address system code redirecting system calls similar system calls host 
cms need emulate device behavior host subsystem target 
system objectives constraints closest cms daisy ibm research ebcioglu 
daisy full system implementation powerpc system target tree vliw host interpreter dynamic translator architecture similar cms 
translation region selection different tree regions vs general code segments cms uses state repair approach handle precise exceptions commit rollback approach cms uses fine grain protection approach self modifying code 
discuss challenges 
binary translation systems 
extensive prior discussions may altman 
cms commercially available system provides high performance fully compatible implementation isa different host isa crusoe native vliw 
cms similar architecture number binary translation systems described literature key success attention challenges described 
paradigm speculating aggressively rolling back consistent state recovery exceptions detected adaptively deal recurring exceptions powerful part cms solution 
challenges apparent attempts run wide variety everyday workloads dealing cms robustly performing product experimental system 
erik altman kemal ebcioglu michael advances challenges binary translation optimization proc 
ieee special issue microprocessor architecture compiler technology nov pp 

erik altman david yaron sheffer welcome opportunities binary translation ieee computer march pp 

bala evelyn duesterwald sanjeev banerjia transparent dynamic optimization design implementation dynamo tech 
report hpl hp laboratories cambridge june 
bala evelyn duesterwald sanjeev banerjia dynamo transparent dynamic optimization system pldi june pp 

john banning peter benjamin david keppel alex paul fine grain translation discrimination patent march 
michael burke jalapeno dynamic optimizing compiler java acm java grande conference june pp 

chernoff reeve rubin yates fx profile directed binary translator ieee micro march april pp 

robert cmelik david edmund kelly colin hunter combining hardware software provide improved microprocessor patent feb 
robert cmelik david keppel shade fast instruction set simulator execution profiling proc 
sigmetrics conf 
measurement modeling computer systems pp 

giuseppe evelyn duesterwald paolo joseph fisher deli new runtime control point proc 
micro nov 
kemal ebcioglu erik altman daisy dynamic compilation architectural compatibility proc 
th annual int symp 
computer architecture june pp 

kemal ebcioglu erik altman michael dynamic binary translation optimization ieee trans 
computers june pp 

stefan freudenberger thomas gross geoffrey lowney avoidance suppression compensation code trace scheduling compiler acm trans 
programming languages systems july pp 

david gallagher william chen scott mahlke john gyllenhaal wen mei hwu dynamic memory disambiguation memory conflict buffer proc 
sixth int conf 
asplos october pp 

michael erik altman precise exception semantics dynamic compilation proc 
symp 
compiler construction april pp 

michael erik altman paul david dynamic binary translation ieee computer march pp 

ieee appeared proceedings annual ieee acm international symposium code generation optimization march san francisco california colin hunter john banning dos risc byte magazine nov pp 

intel intel ia architecture software developer manual vol order january 
edmund kelly robert cmelik malcolm wing memory controller microprocessor detecting failure speculation physical nature component addressed patent nov 
alexander technology crusoe processors white www transmeta com pdf white papers jan pdf jan 
gabriel kemal ebcioglu architectural framework supporting heterogeneous instruction set architectures ieee computer june pp 

sites chernoff kirk marks robinson binary translation comm 
acm feb pp 

michael smith mark horowitz monica lam efficient superscalar performance boosting proc 
th int conf 
asplos october 
frank inside duke press 
standard performance evaluation spec osg frequently asked questions www org osg faq archive 
sun microsystems java hotspot performance engine architecture java sun com products hotspot whitepaper html april 
malcolm wing godfrey souza gated store buffer advanced microprocessor patent jan 
sun yang java vm just time compiler fast efficient register allocation proceedings international conference parallel architectures compilation techniques oct pp 

frank yellin tim lindholm java virtual machine specification addison wesley 
cindy zheng carol thompson pa risc ia transparent execution recompilation ieee computer march pp 

benchmarks benchmarks os boots dos linux os windows windows windowsnt 
linux windows alvinn compress eqntott espresso gcc li mdljsp ora sc spice su cor tomcatv wave 
windows specint crafty 
windows windowsnt access corel navigator powerpoint 
miscellaneous quake demo help 
data included mean values tables 
keywords binary translation dynamic translation dynamic optimization emulation speculation self modifying code 
