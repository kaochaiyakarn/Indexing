haystack user experience interacting semistructured information david huynh mit artificial intelligence laboratory ai mit edu major stumbling block information management tools desktops email managers file browsers web browsers mismatch user mental model information objects system implementation model 
user may look name screen think person system may consider dead text 
user wants remember certain email message sent distant cousin may fact email management family relationship records domains separate applications talk 
goal haystack system reduce mismatch user system models information creating user object oriented interface 
achieve goal model user data uniformly fine levels granularity resource description framework rdf 
demonstrate internal system model data reflected user interface user manipulate ui representations information uniform manner sense user 
explain rdf build ui framework performs reflection systematically 
furthermore propose operations mechanisms organizing rdf data modeled rdf making system reflexive generic 
envision user everyday system interacting information cares generate metadata contribute global pool rdf data 
semantic web readily leverage information collected haystack matters users 
categories subject descriptors information interfaces presentation user interfaces graphical user interface interaction styles prototyping user centered design 
general terms design human factors 
keywords context menu direct manipulation drag drop information management metadata modal modeless object oriented rdf semantic web uniformity user interface user experience view binding 
technology square cambridge ma usa www may budapest hungary 
acm xxx 
copy right held author owner 
dennis quan mit artificial intelligence laboratory media mit edu 
david karger mit laboratory computer science karger theory lcs mit edu current software paradigm applications needed store view edit manage different types information application tailored types information 
cooperation different applications limited 
instance user specify favorite recipe abridged stored recipe database software comes cookbook indexed personal library software lent friend contact information managed address book software 
application focuses domain information recipes books contact info relationships example hard express record computer 
dealing application specializes limited number domains certain types information domain expressible application schemas 
instance microsoft outlook manages meetings expect things tasks related meetings domain outlook 
particular expect ability store map particular meeting location logically attaching map object representing location 
unfortunately meeting locations class objects microsoft outlook just text fields meeting objects 
consequently increase chance finding map user need user paste map body single meeting held location 
granularity software models information fine express information need user scenario firstclass object types microsoft outlook simply coarse 
problems arise applications fail model information user mental model 
user may look name screen think person system may consider dead text 
spell check body mail message subject text document filename 
context menus invoked different occurrences person name ui list different sets operations correlate contexts name displayed see 
drag drop supported cases 
rdf data modeling application centric paradigm today software built satisfy user need 
information modeled user mental model information user expects interact information various levels granularity software handle considers class objects schemas 
second user data segregated application barriers way metadata describing relationships user data easily added 
order address issues information modeled independently applications modeled schemas expressive match user model information 
haystack information management platform adopted resource description framework rdf core technology semantic web project purposes :10.1.1.21.3877
rdf capable describing fine grained semistructured data highly expressive extensible schemas functionality allows better match user model information 
furthermore storing user data rdf break information free application specific formats open possibilities synergy different types information 

inconsistent context menus invoked text strings vineet sinha different views microsoft outlook xp supports adding mail author contacts 
user information modeled appropriate levels granularity support user interface manipulations information way user expects 
furthermore single format data stored rdf enables information different types flexible ways prove useful intuitive user 
describe vision user interact semistructured information haystack explain rdf enables realization vision 
interaction model rdf data adopt web browser navigation paradigm allowing users navigate corpora annotated data 
piece information viewed browsing 
rdf predicates links traversing corpus involves hopping piece information 
navigation paradigm puts focus information applications 
information centricity emphasized ability rdf model information fine levels granularity 
rdf enables extend navigation paradigm 
links modeled predicates labeled annotated 
annotation links help improve user navigation experience drawing information relevant navigation step 
sources relevant information modeled rdf abstracting away storage local issues user 
second propose system managed binding presentation information user interface metadata concerning information stored system beneath 
binding allows semantics information exposed systematically ui facilitates system support direct manipulation mechanisms context menus drag drop 
direct manipulation turn enables integration simple operations composed perform complicated tasks 
contrast monolithic applications provide fixed sets functionalities application barriers intermingled 
third describes modalities user organize information 
organization mechanisms modeled rdf type information 
include classification mechanisms concept collections annotation mechanisms various user interfaces 
illustrate user experience brought forth functionalities implementation haystack system 
related systems built visualizing graph data 
com latest commercial endeavor models presents data unlabeled undirected graphs 
consequence benefits available directedness rdf model com system 
furthermore graph presentations suitable showing related thoughts insufficient provide coherent interaction experience common users 
users perceive information semantic networks 
graph manipulations worst incomprehensible unusable novice users best inconvenient tedious expert users domain information management 
systems developed augment existing information types metadata 
instance placeless documents system adds user specified properties documents manipulated directly managed uniform fashion 
systems rarely address usability issues involved manipulating information general 
addition birth semantic web tools built visualizing editing rdf data schemas 
rdf authoring tools generally come flavors ontology editors graph representation viewers user interfaces 
kinds tools focus collecting data conforms ontology addressing hci issues information collection 
ontology editors prot ont mat provide effective interfaces allowing ontology modeling experts enter information specific ontologies high degree precision 
unsuitable users simply want manage information mail photographs 
www com 

navigation paradigm shows screenshot haystack user interface 
left side window start pane right content area 
start pane contain items user instant messaging status list favorite documents links clipboard list starting points user task 
general start pane available tools information user currently needs accomplish task hand 
objects dragged dropped start pane 
content area acts web browser 
navigation toolbar top conventional back forward refresh home buttons address box 
immediately navigation toolbar title bar shows title object browsed set commands available altering view 
haystack depicted displaying particular information object user inbox 
content area hosts typical list view containing mail messages preview pane example 
piece information haystack viewed browsing web browser 
list visited information objects maintained allow backward forward gation 
navigation triggered clicking link typing unique resource identifier uri naming rdf resource models information object 
left click google favorites list shown start pane browse www google com 
cases left clicks inconvenient right click item select browse command popped context menu name jake beal selected mail message 
web surfed jumping links rdf data browsed rdf predicates different rdf resources model different information objects 
subsections describe navigation paradigm web extended power rdf 
predicated links 
haystack user interface hypertext links html unlabeled 
accurately labeled instance basis html document link author labeled author john doe document link author labeled written joe smith inconsistencies markup hypertext links useful human reader processed automatically computer 
semantic web links modeled rdf predicates resources named uniquely uris 
links systematically analyzed processed order improve user browsing experience 
instance user hovers mouse link document author haystack recognize authoring relationship pop tool tip listing documents author 
hand user hovers mouse link meeting person attendee meeting haystack show list contributions person meeting 
types relevance suggestions links labeled machine processing primary vision semantic web 
information centricity web surfed simply clicking links information wants web appears information centric user 
different types information lecture notes news articles maps business addresses restaurant menus accessed window web browser 
absence applications cases need user explicitly start shut applications 
design web contains content independent operating systems independent software applications 
user web simply contains information 
information centricity web easy 
adapting web browser navigation paradigm haystack benefits information centricity 
haystack information centricity apparent 
rdf model information level granularity user navigate small miscellaneous pieces information 
instance meeting location viewed text field meeting objects 
information web packaged unit web pages information haystack accessed unit sense user 
storage abstraction web navigation paradigm provides storage abstraction 
resource web identified url 
user needs know url order access 
details address machine resource stored full file path corresponding resource transparent user 
similarly haystack information object identified uri 
file paths storage dependent change files moved uris unique universal remain unchanged 
user haystack needs know uri information object access 
system automatically resolves uri storage location metadata uri 
metadata specify sources metadata particular uri 
capability powerful network address resolution redirections multiple sources specified 
instance user seeks information person metadata person retrieved automatically authorization sources including person student records schools attended certain government databases 
heuristics implemented haystack 
forms assisted navigation explored 
illustrated rdf powerful reflexivity rdf help improve navigation metadata encoded rdf 
similarly section explore rdf systematically construct ui presentations rdf data 

semantics presentation rdf allows model data accordance user mental model information 
data structured correctly right levels granularity structure needs reflected presentation data user interact data naturally 
accomplished providing mappings information object screen representations views object user readily associate views object 
information object assigned default view object navigated information automatically appears view explicit user action help applications 
user information appears capable displaying displays sensible form semantics 
works making ui information centric 
finer grained views piece information appear navigated 
appear part presentation piece information 
instance contact objects appear view meeting object show meeting attendance 
example contact objects displayed smaller views default views contact objects navigated individually 
haystack fine grained views information 
extreme view consist string text rendered flow inside paragraph capable flowing line 
smaller views easily composed bigger views 
user interface haystack built embedding views 
views part haystack user interface matter small application explicitly called render 
furthermore pixel screen traced back information objects views render pixel 
words mapping presentational elements ui metadata rdf store 
self updating views views remain true representations information render haystack keeps live mapping ui presentation underlying information rendered piece information changed ui representation updated 
mapping binding 
binding ensures stale version data screen 
small fine grained views easily composed bigger views views reused places user interface 
views self updating true representations underlying information simply embedded left manage 
consequently reuse views easy ui designers 
reuse presentation information object appear similar contexts object 
ui appear uniform coherent user 
weekly group meeting location room building ne attendees vineet sinha dennis quan david huynh rdf store displayed 
composition views wish emphasize self sufficiency rdf 
rdf cause solution generic ui framework haystack rdf encode finer grained information types calls generic framework information 
time enables encoding metadata helps build framework 

semantics manipulation nested views ui element screen systematically traced back underlying information objects views render pixel 
advantage binding haystack lets user manipulate ui elements screen order interact underlying information objects 
essence system support direct manipulation automated taken fine level granularity 
user ui element pixel appears reflect information rdf store 
operations contact object named david huynh large small views render information user interface meeting object attended order support direct manipulation define semantics available actions taken 
haystack information objects acted operations 
operation just resource annotated types characteristics objects act code executed carry action 
operations class information objects kept rdf store queried find operations applicable object edited newer implementations annotated record frequency bookmarked user regular organized see section sent user searched user haystack built reflexive data model haystack reflexive 
words operations operated way information objects 
consequence ui appears uniform coherent easy user develop simple mental model system 
direct manipulation special type operation operations invoked direct manipulation 
direct manipulation haystack currently supported mechanisms drag drop context menus 
drag drop ui element dragged haystack determines innermost view containing element traces underlying object rendered view 
object drag source 
drag operation mouse pointer travels various ui elements screen haystack determines innermost views containing elements highlights views provide feedback user 
drop occurs haystack detects ui element receiving drop determines associated underlying object drop target 
haystack queries operations type drag drop operation take arguments applicable drag source second drop target 
operation carried immediately 
user prompted select desired operation system decide choose operation allow user undo select desired 

highlighting views drag drop heuristics machine learning algorithms detect object user wants drag rendered hierarchy nested views enclosing pixel drag initiated 
drop target detected similarly 
current implementation chooses object corresponding innermost enclosing view order approximation 
context menus user right clicks ui element haystack determines associated underlying objects queries applicable operations 
shows sample context menu lists underlying objects views enclose clicked pixel picture entitled album containing picture 
object pop listing applicable operations 
machine learning algorithms specify order operations desirable ones top 
current implementation orders operations alphabetical order 
context menus implemented automatically provided haystack ui 
implication uniform support user knows find operation information object displayed 
guaranteed way listing available operations 
reader note operations incorporated system context menus 
instance information overload problem common solution address instances 
haystack provides unified mechanisms organizing retrieving information types mail messages operations 
section detailed description mechanisms 
operation composition unifying format data encoded rdf functionality integration easier 
piece information encoded rdf accessible rdf store interface information objects type share schema 
blackboard architecture allows piece functionality specialize handling data small set specific schemas attempting deal larger domain data consistency finesse 
information objects haystack appear capable rendering capable offering operations intrinsic concept applications software acts data changed 
haystack visible presence monolithic applications 
operations perform small tasks 
operations individually simple easy learn composed arbitrarily user perform complicated tasks 
operation composition mean carrying ordered sequence steps involving particular operation aimed accomplish goal achievable applying operation 
encapsulation unfinished operations shows piece ui inserted start pane rotate picture operation selection context menu shown 
piece ui view resource capture carrying rotate picture operation picture 
resource called ui continuation essentially encapsulation unfinished operation 
ui continuation provides user interface completing operation returning original context operation invoked view picture example 
ui continuation information object manipulated just object 
instance bookmarked returned time 
useful user decides turn attention task 
ui continuation modeless user keeps task navigate information objects order find information helps complete task 

sample context menu ui continuation lock user screen finishes task 
contrast existing applications mechanism capturing context unfinished task 
user trace sequence user interface actions return previously unfinished task re opening application invoking certain menu command clicking sequence buttons series dialog boxes 
context task defined set blocking user interfaces form modal dialog boxes user locked context unable parts application help completing task 
user forced dismiss stack modal dialog boxes order access functionalities application reconstruct context opening stack modal dialog boxes 

sample ui continuation 
unified organization user information accumulates need organization user automatically system 
modeling data rdf helps implement organization mechanisms better match user concepts organization 
organization applied information objects big small 
user organize various types items ranging mail messages contacts documents bookmarks journal entries notes appointments tasks operations system notifications instant messages editing comments documents frequently bibliographic entries favorite video clips organize set mechanisms 
furthermore objects different types organized 
favorites list contain just links web pages user object favorite regardless type 
mail messages instant messages placed common lists show conversations span delivery modes 
appointments tasks appear user calendar sorted prioritized respect 
timeline view display meetings family photos 
user learn small set organization mechanisms types information 
contrast today software offer application specific organization mechanisms overlap functionality differ user interfaces 
organization classification common mechanism organization classification assertion item membership classes 
assertion take form storage selection placing item box category tagging sticking colored labels item 
gives immediately feel information divided smaller units organization user progress organization smaller subsets need dealt time 
allows flexibility classifying item 
categorization checkboxes category 
emulate enforcing single membership 
haystack model category tagging concept collections adapt support storage selection appropriate 

favorites list contains items different types web pages cnn google photo albums conference trip photos operations send mail collections inbox collection mathematical set 
items inserted collection asserting memberships collection 
item belong collections person member clubs 
organization achieved putting items collections 
collections pervasively haystack purpose organization 
instance favorites list collection user inbox collection list menu commands context menu collection 
implementing generic mechanisms constructing managing collections provide user uniform way organizing information interacting system data 
shows collection operations context menu shown displayed view mail messages compare 
functionality including sorting grouping applied uniformly mail messages operations 
addition user manipulates items view context menu reflect changes 
generic mechanism building collections drag drop 
custom operations provided special collections shows operation add favorites operation 
custom uis provided appropriate 
displays list checkboxes corresponding collections checking checkbox user puts selected picture corresponding collection 
multiple checkboxes easy classify item category 
shows custom piece ui allows user quickly classify mail message spam 

collection operations organization annotation mode organization annotation 
user insert comments body long document resulting list comments bookmarks document 
cases annotations create associations various information objects meaningful user 
instance annotating certain book fact lent friend forgetful user determine locate book 
haystack annotation performed implicitly explicitly 
user drags document mail message haystack infers document attached message 
attach predicate added message document 
result annotation implicitly 
user replies mail message predicate added new message original 
annotations added explicitly haystack relationship view presents items graph nodes allows user draw labeled arrows nodes 
ui particularly useful user needs handle information graph tree forms 
easy construct family tree drawing arrows parents children 
likewise thoughts captured notes linked graph show logic argument 
haystack provides metadata editor editing raw rdf data directly 
shows editor listing outgoing predicates favorites collection object 
user add predicates order extend existing schemas create new schemas 
organization metadata input acts organization user takes cause metadata added system 
users go daily haystack organizing manipulating information care metadata constantly added global pool semantic web data 

metadata editor 
usage scenario section illustrate haystack perform series information management tasks 
consider scenario user reading mail sent colleague conference 
colleague asked user verify word plethora means abundance user right clicks word plethora finds offers operation look meaning dictionary 
operation brings user online dictionary specifies plethora synonym abundance user clicks back button return mail message clicks forward button title bar forward mail supervisor requested colleague 
action navigates newly created mail message attachments old message automatically included 
user decides classify mail message composed topic fresh mind 
simply checks appropriate categories illustrated organizing pictures 
conventional mail client user open drafts folder locate message drag appropriate folder return composition window 
user finds attached pictures proper orientation evident thumbnails 
user right clicks thumbnails attachments pane message view selects rotate operation 
need save attachments files open image editing application open files rotate images re attach mail message 
images manipulated directly displayed displayed thumbnails 
user wants attach photographs mail message 
clicks link labeled conference trip photos list favorites things 
action navigates photo album entitled conference trip photos drags pictures start pane 
user clicks back return mail message drags picture attachments area message 
user fills supervisor mail address clicks send button title bar send message 

looking word mail message 
picture 
acknowledgments supported mit ntt collaboration mit oxygen project ibm 

resource description framework rdf model syntax specification 
www org tr rec rdf syntax 
berners lee primer getting rdf semantic web 
www org swap primer html 
berners lee hendler lassila semantic web scientific american may 
dourish edwards extending document management systems user specific active properties acm transactions information systems vol 
april pages 
eriksson fergerson shahar musen automatic generation ontology editors 
proceedings th banff knowledge acquisition workshop banff alberta canada 
gamma helm johnson vlissides design patterns 
boston addison wesley 
handschuh staab maedche cream creating relational metadata component ontology driven annotation framework 
cap 
huynh karger quan 

haystack platform creating organizing visualizing information rdf semantic web workshop eleventh world wide web conference www 
haystack lcs mit edu papers pdf 
psychology personal information management applied ergonomics vol 
pages 
quan bakshi karger unified abstraction messaging semantic web submission twelve world wide web conference www 
sinha karger information retrieval semistructured data submission twelve world wide web conference www 
