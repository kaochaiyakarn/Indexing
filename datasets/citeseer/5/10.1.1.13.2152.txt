efficient algorithm generating necklaces fixed density joe sawada frank ruskey department computer science university victoria victoria canada ary necklace equivalence class ary strings rotation 
necklace fixed density necklace number zeroes fixed 
fast simple recursive algorithm generating listing fixed density ary necklaces aperiodic necklaces 
algorithm optimal sense runs time proportional number necklaces produced 
reasons develop algorithms producing lists basic combinatorial objects 
algorithms useful find applications diverse areas hardware software testing non parametric statistics combinatorial chemistry 
secondly development algorithms lead mathematical discoveries objects experimentally insights gained development algorithms 
primary performance goal algorithm listing combinatorial family algorithm running time proportional number objects produced 
amount output required print objects correct measure correct measure amount data structure change objects undergo typical applications need process part successive object changes 
efficient algorithm uses constant amount computation object amortized sense 
algorithms said cat constant amortized time 
necklaces fundamental type combinatorial object arising naturally example construction single track gray codes enumeration irreducible polynomials finite fields theory free lie algebras 
efficient algorithms exhaustively generating necklaces developed kessler prove efficient 
proven efficient ruskey savage wang 
closely related algorithms generating lyndon words aperiodic necklaces developed duval shown efficient berstel 
subsequently recursive algorithm developed flexible easier analyze earlier algorithms iterative :10.1.1.41.8926
applications necklaces required fixed density number zeroes fixed 
previous efficient generation algorithm fixed density necklaces known 
research supported nserc 
mail csr uvic ca research supported nserc 
mail csr uvic ca previous fixed density necklace algorithms running times delta wang savage kessler denotes number necklaces length density denotes number necklaces length wang savage base algorithm finding hamilton cycle graph related tree necklaces 
main feature algorithm generates strings gray code order 
basis kessler algorithm mapping lexicographically ordered compositions necklaces 
algorithms consider binary necklaces results apply general alphabet 
take new approach modifying ruskey recursive algorithm generating necklaces optimizing fixed density case :10.1.1.41.8926
recursive algorithms advantages iterative counterparts 
generally simpler easier analyze 
suitable conversion backtracking algorithms subtrees easily pruned computation tree 
fact just backtracking discover new minimal difference covers sets numbers achieving possible differences mod 
section give definitions related necklaces section introduce fast algorithm generating fixed density ary necklaces 
section analyze algorithm proving algorithm cat density 
background definitions ary necklace equivalence class ary strings rotation 
identify necklace lexicographically representative equivalence class 
set ary necklaces length denoted 
example 
cardinality denoted 
important class necklaces aperiodic 
aperiodic necklace called lyndon word 
denote set ary lyndon words length example 
cardinality denoted 
string ff pre necklace prefix necklace 
set ary pre necklaces length denoted 
example 
cardinality 
denote fixed density necklaces lyndon words pre necklaces similar manner adding additional parameter represent number non zero characters strings 
refer number density string 
set ary necklaces density represented cardinality 
example 
similarly set fixed density lyndon words represented cardinality 
set fixed density pre necklaces denoted cardinality 
addition introduce set contains elements character non zero 
cardinality denoted 
count fixed density necklaces delta delta delta gamma denote number necklaces composed occurrences symbol 
density necklace delta delta delta gamma gamma known gilbert riordan gamma gamma oe 

delta delta delta gamma 
get number fixed density necklaces length density sum possible procedure gen integer local integer gammap gen fa gammap gamma gamma gen recursive necklace algorithm 
values gamma delta delta delta gamma gamma number fixed density lyndon words counted similar formula 
generating fixed density necklaces step approach develop fast algorithm generating fixed density necklaces 
create new necklace algorithm recursive necklace generation algorithm gen :10.1.1.41.8926
optimize new necklace algorithm fixed density case making key observations fixed density necklaces 
give brief overview gen 
general approach algorithm generate length pre necklaces 
pre necklace generated stored array position character 
assume 
initial call gen recursive call appends character pre necklace get new pre necklace 
recursive call gen length pre necklace generated gamma length longest lyndon prefix long length current pre necklace call gen recursive call valid value character string updating values process 
algorithm generate necklaces lyndon words pre necklaces length lexicographic order specifying object want generate 
function allow differentiate various objects shown table 
computation tree gen consists pre necklaces length equal example show computation tree 
comparing number nodes computation tree number objects generated shown algorithm cat :10.1.1.41.8926
modified necklace algorithm necklace positive density character string non zero 
concerned generating necklaces lyndon words reduce size sequence type pre necklaces println lyndon words println necklaces mod println table different objects output different versions 
computation tree gen computation tree compressing pre necklaces character 
looking want generate nodes bold 
results modified computation tree shown 
notice successive level tree incrementing density pre necklace length 
generate modified tree create recursive routine original necklace algorithm determining valid values position string need determine valid positions values non zero character 
change array hold positions non zero characters maintain array indicate values non zero characters 
ith element array represents position ith non zero character ith element array represents value ith non zero character 
generate necklace length corresponding necklace 
maintain original necklace structure performing extra constant time operations 
note binary case second array necessary non zero characters 
parameter indicate current density string 
length current string lyndon prefixes non zero character indicate length longest lyndon prefix 
parameters compute valid positions values non zero character 
determine valid positions values non zero character maintain lexicographic ordering compute maximum position minimum value position computation tree gen new string pre necklace property 
compute maximal position character expression pca mod minimal value position mod mod 
properties pre necklaces larger values maximal position valid 
positions maximum position greater position assigned non zero character hold values ranging gamma 
note want generate necklaces length restrict position equal 
valid combinations position value lexicographically assign position value followed recursive call updating position non zero element greater equal call function print lyndon words necklaces similar manner original algorithm gen 
modified algorithm gen generating necklaces 
initial branch computation tree result separate call gen call specifying different combination position value non zero character 
note string generated gen generated separately 
nodes resulting computation tree gen pre necklaces length equal character non zero 
observe restricted generating necklaces lexicographic order 
orders possible re ordering order recursive calls 
fixed density necklace algorithm optimize modified algorithm fixed density case making observations 
restrict position non zero character depending density 
particular necklaces density non zero character position gamma gamma 
generating string length density just placed ith non zero character st non zero character come position gamma gamma 
place character position procedure gen integer local max integer max mod max max mod mod gen max gen fb gamma gamma gen fmax gamma max gamma gamma gamma gen gen modified recursive necklace algorithm resulting string length density non zero character nth position string generation placing gamma st non zero character 
strings generated restriction strings length density gamma 
approach may generate gamma strings call place gamma characters nth position 
case generate gamma strings strings call 
add additional constant time test see values placed nth position 
test similar test finding maximal valid position minimum value non zero character outlined previous sub section 
minimum value determined perform usual tests determine string necklace lyndon word 
larger values nth position result string lyndon word 
done function determine valid strings remains constant string generated 
summary modified necklace algorithm outlined optimizations 
non zero character gamma gamma inclusive 
computation tree solid edges 
ith non zero character placed gamma th position 

generating assigned gamma non zero characters 

determine valid values nth position function 
computation tree generating 
dotted lines indicate initial branches need follow modification 
arrows indicate strings produced adding final character nth position 
bold strings indicate actual necklaces produced function 
remaining string rejected necklace 
algorithm generating fixed density necklaces lyndon words lexicographic order 
binary case fact generate binary necklaces density complementing output generating necklaces density gamma case strings generated lexicographic order necessarily lexicographic representatives respective equivalence classes 
analysis algorithm section show cat 
start analysis analyzing trivial cases 
desired density string computation tree strings produced equivalent generation gamma know cat 
density simply generate string generate gamma strings bit ranges gamma rest string 
case density greater resulting strings generated constant amortized time 
non trivial cases examine number nodes computation tree noting amount generate node constant 
nodes computation tree consist pre necklaces non zero bit density ranging gamma length ranging gamma gamma recall set pre necklaces length density bit non zero 
size computation tree fixed density algorithm bounded expression procedure integer local max tail integer gamma tail gamma gamma max mod max tail max mod mod fb gamma gamma tail max gamma tail gamma gamma gamma fixed density necklace algorithm gamma gammad gamma recall generate binary fixed density necklaces density greater generating gamma complementing output 
case case restriction equal 
prove algorithm efficient show ratio size computation tree number strings produced bounded constant 
appear simple explicit formula approach derive upper bound terms 
lemma proof partition classes necklaces non necklaces 
show existence injective mapping proof omitted non necklaces 
bound computation tree sum fixed density necklaces fixed density lyndon words gamma gammad gamma plugging formulas fixed density necklaces lyndon words expression complicated quadruple sum 
prove lemmas give simple bounds fixed density lyndon words necklaces 
lemma inequality valid gamma proof element representative equivalence class ary strings elements 
add elements equivalence class get nl unique strings length density expression gamma delta gamma counts total number ary strings length density gamma delta gamma similar bound difficult obtain 
bound 
lemma inequality valid gamma proof considering case equation noting remaining terms non negative delta delta delta gamma 
delta delta delta gamma gamma exists injective mapping periodic necklaces lyndon words length density proof omitted implying upper bound 
previous lemmas basic binomial coefficient identities get simple upper bound size computation tree gamma gammad gamma gammad gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma simplification equations result lemma 
omit proof induction lemma inequality valid gamma gamma gamma gamma gamma gamma gamma gamma recall goal prove ratio nodes computation tree number strings produced bounded constant 
lemma lower bound number strings produced gamma gamma gamma gamma ratio computation tree necklaces produced gamma gamma experimentally constant 
theorem algorithm generating fixed density ary necklaces cat 
berstel average cost duval algorithm generating lyndon words theoretical computer science 
cattell ruskey sawada serra generating unlabeled necklaces irreducible polynomials gf manuscript :10.1.1.41.8926

duval en eration une section des classes de des mots de lyndon de born ee theoretical computer science 
kessler algorithm generating necklaces beads colors discrete mathematics 
necklaces beads colors ary de bruijn sequences discrete mathematics 
gilbert riordan symmetry types periodic sequences illinois mathematics 
ruskey savage wang generating necklaces algorithms 
wang savage gray code necklaces fixed density siam discrete math 

