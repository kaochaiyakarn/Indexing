strengthening zero knowledge protocols signatures juan garay philip mackenzie ke yang february interest zero knowledge protocols stronger properties concurrency unbounded simulation soundness non malleability universal composability 
show novel technique convert large class existing honest verifier zeroknowledge protocols ones stronger properties common string model 
precisely technique utilizes signature scheme existentially unforgeable adaptive chosen message attacks transforms sigma protocol honest verifier zero knowledge unbounded simulation sound concurrent zero knowledge protocol 
introduce omega protocols variant sigma protocols technique achieves properties universal composability 
addition conceptual simplicity main advantage new technique previous ones avoids cook levin theorem tends inefficient 
technique allows efficient instantiation security efficient signature schemes standard number theoretic assumptions 
instance instantiation technique yields universally composable zero knowledge protocol strong rsa assumption incurring overhead small constant number exponentiations plus generation signatures 
concept zero knowledge zk proof defined goldwasser micali rackoff fundamental tool cryptography 
informally prover proves statement verifier zk verifier gains information convinced veracity statement 
particular verifier zk proof done zk proof sense simulate proof 
early goldreich micali wigderson showed np statement proven computational zk 
early goldreich micali wigderson showed usefulness zk proofs multiparty protocols particular having parties prove correctness computations 
great deal properties zk proofs 
focus properties concurrency non malleability simulation soundness universal composability main goal construct efficient protocols achieve properties 
problem concurrency discussed dwork naor sahai 
informally problem arises verifiers interacting prover 
adversary controlling verifiers may coordinate timing messages simulator able simulate bell labs lucent technologies mountain ave murray hill nj 
mail research bell labs com 
computer science department carnegie mellon university pittsburgh pa 
mail cs cmu edu 
part research done bell labs 
research partially sponsored national science foundation nsf ccr ccr 
execution prover polynomial time 
canetti showed additional assumptions timing constraints common string logarithmic rounds necessary achieve concurrent black box zk 
rosen sahai showed logarithmic rounds suffice 
hand damgard showed concurrent constant round zk protocols achieved common string model 
furthermore barak showed non black box simulator constant round concurrent protocols constructed plain model 
problem malleability pointed dolev dwork naor 
roughly speaking problem adversary may able play man middle attack zk protocol playing role verifier protocol prover second protocol information protocol able prove second protocol prove information 
zk protocol suffer problem said achieve time non malleability adversary interacts prover 
dolev dwork naor give construction time non malleable zk protocol uses polylogarithmic number communication rounds 
katz describes efficient protocols time non malleable proofs plaintext knowledge encryption schemes 
protocols common string model consist rounds constant number exponentiations 
witness extractor uses resulting protocols proven secure concurrent setting timing constraints 
barak gives construction constant round time non malleable zk protocols plain model 
construction uses non blackbox proof security efficient 
sahai provides definition time non malleability case non interactive zk proofs 
de santis generalize unbounded non malleability proofs polynomial number simulator constructed proofs help adversary construct new proof 
remainder simply refer property non malleability leaving unbounded modifier 
definition strong sense requires witness extractable adversary 
introduce notion robust argument addition non malleable requires called simulator zero knowledge property common string distribution uniform real prover 
call string zk property 
give constructions non malleable robust zk proofs np language 
fact proofs non interactive achieve concurrent constant round zk 
notion simulation soundness proofs introduced sahai context chosen ciphertext security naor yung encryption scheme 
informally proof time simulation sound seeing simulated proof false statement generated simulator adversary generate proof false statement 
sahai notes naor yung encryption scheme adaptive chosen ciphertext secure time simulation sound proof 
de santis generalized notion unbounded simulation soundness 
proof unbounded simulation sound seeing polynomial number simulated proofs adversary generate proof false statement 
non malleable protocols unbounded simulation sound 
notions unbounded simulation soundness non malleability robustness extend naturally case interactive proof systems section 
informally say interactive zk protocol unbounded simulation sound adversary generate proof false statement interacting number simulated provers 
see mackenzie application unbounded simulation sound zk protocols threshold password authenticated key exchange protocol :10.1.1.101.6403
say zk protocol non malleable exists efficient witness extractor construction admits bounded concurrency meaning number sessions protocol execute concurrently retain zero knowledge property fixed polynomial security parameter 
successfully extracts witness adversary adversary cause verifier accept adversary allowed interact number simulated provers 
note definition non malleability implies zk protocol proof knowledge satisfies notion witness extended emulation barak lindell 
naturally non malleable zero knowledge protocol unbounded simulation sound 
call zk protocol non malleable string robust zk protocol 
universal composability notion proposed canetti describe protocols behave ideal functionalities composed arbitrary ways 
universal composability defined adaptive model static model denoting adversary allowed adaptively corrupt parties decide parties corrupt protocol starts respectively 
universal composability strong notion 
example universally composable zk uczk protocol non malleable intuitive sense concurrent 
canetti proved uczk protocols exist plain model assumption system set 
hand uczk possible common string model model focus 
pointed canetti non malleable protocols uczk protocols static corruption model 
non interactive proof techniques general np reductions protocols efficient 
canetti fischlin give construction uczk protocol np language secure adaptive model 
basically standard round zk protocol hamiltonian cycle universally composable commitments building block 
damgard nielsen general zk protocol construction canetti fischlin efficient uc commitment scheme 
specifically security parameter uc commitment scheme allows commitment bits constant number exponentiations bits communication 
efficient uc commitment schemes subgroup assumption decisional composite residuosity assumption dcra :10.1.1.112.4035
note efficient uc commitment scheme approach constructing uczk protocols tends fairly inefficient general np reduction hamiltonian cycle sat 
results 
show new technique allows convert certain types honest verifier zk protocols zk protocols stronger properties described concurrency unbounded simulation soundness non malleability robustness universal composability common string model 
precisely 
transform sigma protocol special round honest verifier protocols verifier sends random bits unbounded simulation sound zk protocol 
transform omega gamma col introduce variant sigma protocols non malleable zk protocol universally composable zk protocol 
main transformations sufficient achieve results uczk protocols secure adaptive model signature scheme existentially unforgeable adaptive attacks exists way functions exist sigma protocol prove knowledge signature 
note way functions construct commitments way functions exist sigma protocols exist np statement say cook levin reduction standard sigma protocol hamiltonian cycle 
requirement main transformations existence way functions 
hand certain signature schemes cramer shoup scheme dsa scheme admit efficient sigma protocols 
schemes price specific number theoretic assumptions able construct strengthened zk protocols efficient previously known constructions completely avoid cook levin theorem 
achieve uczk protocol version damgard nielsen sat hamiltonian cycle 
secure adaptive model require simulation sound trapdoor commitment scheme new type commitment scheme introduce may independent interest 
may trapdoor permutations show efficient version dsa 
sketch intuition technique 
select signature schemes second time signature scheme 
common string contain randomly generated verification key vk signature scheme prover verifier know corresponding signing key 
take protocol pi np statement oe modify pi consists witness indistinguishable wi proof statement oe true know signature message vk verification key vk vk freshly generated verification key time signature scheme sent verifier signature transcript wi proof secret key corresponding vk informally pi pi proof knowledge signature vk turns pi proof knowledge signature called sigma protocols see section pi constructed pi efficiently 
furthermore signature scheme admits efficient proof total overhead small 
particular show cramer shoup signature scheme dsa signature scheme total overhead constant number exponentiations plus generation signatures 
transformation completeness protocol pi obviously preserved 
protocol pi zero knowledge simulator generating verification key common string simultaneously generate corresponding signing key problem simulating pi witness indistinguishability pi furthermore show pi unbounded simulation sound adversary able cause verifier accept false statement interacting polynomial number simulated prover instances show construct machine having access signing oracle interacting manages forge signature 
order achieve non malleability robustness universal composability introduce omega protocols variant sigma protocols may independent interest 
nutshell omega gamma col similar sigma protocol assumes existence common string allows extraction witness single execution protocol 
example efficient omega gamma col discrete logarithm relation strong rsa assumption dcra :10.1.1.112.4035
example partial extracting omega gamma part col proving knowledge plaintext elgamal ciphertext decision diffie hellman assumption 
show original protocol pi omega gamma col transformed protocol pi non malleable basically noting extract witness pi extract forge signature 
furthermore distribution strings output simulator construction identical distribution strings real protocol 
construction robust zk 
show non malleable zk protocol easily augmented obtain zk protocol static model 
invoking result show corollary augmented version pi universally composable zk protocol static model 
show modify pi universally composable zk protocol adaptive model erasures maintaining efficiency 
achieve follow approach damgard jarecki lysyanskaya trapdoor commitment commit message sigma protocol opened sending message 
turns plain trapdoor commitment scheme provide properties need deal adaptive corruptions 
introduce stronger type trapdoor commitment scheme second signature scheme may greater efficiency signature scheme specifically designed time may employed 
call simulation sound trapdoor commitment sstc scheme 
furthermore demonstrate efficient construction sstc scheme dsa assumption 
organization 
section formulations various notions interactive zk protocols common string setting building blocks protocols 
section construction unbounded simulation sound zk protocols 
section introduce omega cols construction non malleable robust zk protocols 
section show non malleable zk implies universally composable zk assuming static corruptions demonstrate achieve universally composable zk adaptive model erasures sstc scheme 
section efficient instantiations constructions 
include cramer shoup signature scheme dsa signature scheme construct unbounded simulation sound zk protocols non malleable zk protocols sstc scheme dsa efficient omega gamma col discrete logarithm relation implying efficient non malleable zk uczk protocols discrete logarithm generalized omega gamma col proving knowledge plaintext elgamal ciphertext implying efficient non malleable zk protocol elgamal plaintext knowledge 
preliminaries definitions results common string crs model assumes string uniformly generated distribution available parties start protocol 
note generalization public random string model uniform distribution fixed length bit strings assumed 
distribution delta say delta denote element non zero probability delta element support delta 
say delta denote randomly chosen distribution delta 
set say denote uniformly drawn zero knowledge proofs proofs knowledge provide definitions related zero knowledge proofs proofs knowledge 
definitions proofs modified allow interaction 
relation lr fx rg language defined relation 
np language note natural witness relation containing pairs witness membership lr security parameter 
interactive machines define ha bi oe local output interactive execution crs oe common input transcript machine simply messages input output communication tapes 
transcripts match ordered input messages equivalent ordered output messages vice versa 
notation tr tr indicate tr matches tr definitions need define security adversary allowed interact instance machine 
convenient define common wrapper machine handles multi session type interaction 
interactive machine define protocol wrapper takes types inputs communication tape start message starts new interactive machine label common input private input freshly generated random input crs similar multi session extension concept canetti rabin 
msg message sends message interactive machine label exists returns output message machine 
define output tuple tr common input start message tr transcript input output messages output 
particular verifier zero knowledge protocol output accept reject 
say wrapper ignores subsequent start messages seeing 
effectively single session version say interactive machines coordinated single control distinct sets input output communication tapes 
interactive machines define ha bi hc di oe local output interactive execution interactive execution crs oe 
note concerned coordinated 
note zk definitions black box non simulators proofs knowledge non extractors 
definition unbounded zk proof pi unbounded zk proof resp argument system np language witness relation ensemble polynomial time distributions probabilistic polynomial time interactive machines probabilistic polynomial time machine exist negligible functions ff fi simulation error completeness length oe probability hp vi oe ff 
soundness unbounded resp polynomial time adversaries oe probability ha vi oe ff 
unbounded zk non uniform probabilistic polynomial time interactive machines pr expt gamma pr expt fi experiments expt expt defined follows expt expt oe oe return ai oe return ai oe runs follows common string oe common input private input runs common string oe common input runs null null interactive machine simply aborts 
point definition requires simulator simulate valid proof implemented having access witness invoking valid 
access witness simulate proof input 
definition string unbounded zk pi string unbounded zk argument system np language witness relation pi unbounded zk argument system additional property distribution string output exactly define string unbounded zk arguments shown protocol string unbounded zk argument proof 
loss generality assume input witness common input simply aborts 
supply witness restricted polynomial time may able generate witness 
may odd compared definitions standard zk assume unbounded prover capture correct notion unbounded zk particular allow test membership see sahai discussion 
defines unbounded simulation sound zero knowledge 
useful applications 
particular shown time version suffices security noninteractive zk protocol construction adaptive chosen ciphertext secure cryptosystems naor yung paradigm 
directly define unbounded version needed applications threshold password authenticated key exchange :10.1.1.101.6403
definition unbounded simulation sound zk pi unbounded simulation sound zk proof resp argument system np language pi unbounded zk proof resp argument system furthermore exists negligible function ff unbounded simulation soundness non uniform probabilistic polynomial time adversaries coordinated pr expt ff expt defined follows expt oe tr ha oe set transcripts machines return iff tr tr tr runs follows crs oe common input private input runs crs oe common input definition emphasize may asked simulate false proofs lr check idea adversary able obtain acceptable proofs false statements able produce new acceptable proof false statement 
defines non malleable zero knowledge nmzk proofs resp arguments knowledge 
protocol nmzk definition implies protocol nmzk explicit witness sense defined 
show protocol uczk model static corruptions 
note simulation soundness implied definition 
definition non malleable zk proof argument knowledge pi non malleable zk proof resp argument knowledge system np language witness relation pi unbounded zk proof resp argument system furthermore probabilistic polynomial time machines exists negligible function ff knowledge error string indistinguishability distribution output identical distribution output 
extractor indistinguishability distribution output identical distribution restricted output restricted output include extracted value 
extraction non uniform probabilistic polynomial time adversaries coordinated machines pr expt gamma pr expt ff experiments expt expt defined follows expt expt oe oe tr ha oe tr ha oe set transcripts set transcripts machines machines return iff return iff tr tr tr tr tr tr runs follows crs oe common input private input runs crs oe common input definition definition protocols emphasize may asked simulate false proofs lr check idea adversary able obtain acceptable proofs false statements able produce new acceptable proof witness extracted 
conclude zk definitions generalize notion robust interactive setting 
definition robust zk pi robust zk argument knowledge system np language witness relation pi non malleable string unbounded zk argument knowledge system sigma protocols overview basic definitions properties sigma protocols start definitions notation 
binary relation assume polynomial delta holds jwj jxj furthermore testable polynomial time 
lr fx rg language defined relation lr wr fw rg witness set np language note natural witness relation containing pairs witness membership lr define sigma protocol move interactive protocol probabilistic polynomial time prover probabilistic polynomial time verifier prover acts 
verifier required send random bits challenge prover 
common input players private input prover 
denote conversation prover verifier 
compute final messages prover invokes efficient algorithms delta delta respectively random bits input 
efficient predicate oe delta verifier decides conversation accepting respect relation algorithms delta delta oe delta public 
length challenges denoted assume depends length common string need broaden definition slightly deal cheating provers 
define lr input language property lr lr membership lr may tested polynomial time 
implicitly assume executes protocol common input lr sigma protocols satisfy security properties ffl weak special soundness conversations accepting lr lr pair accepting conversations called collision 
ffl special honest verifier zero knowledge probabilistic polynomial time simulator input lr generates accepting conversations distribution indistinguishable execute protocol common input witness honestly chooses challenges uniformly random 
simulator special sense additionally take random string input output accepting conversation challenge 
fact assume simulator special property lr lr required perfectly indistinguishable generalize definition slightly require computational indistinguishability 
specifically negligible function ff non uniform probabilistic polynomialtime adversaries pr expt gamma pr expt ff experiments expt expt defined follows expt expt return return return return sigma protocols satisfy property 
ffl special soundness conversations accepting conversations witness computed efficiently 
simple important fact see sigma protocol protocol witness indistinguishable wi 
defined respect restricted verifier honest means instance witnesses malicious verifier distinguish witness prover uses 
results follow need particular simple instance main theorem 
specifically slight generalization corollary enables prover relations values lr theta lr corresponding move sigma protocols move sigma protocol proving existence call protocol describe protocol assuming challenges length 
easily generalized long challenge length combined protocol long challenges protocol 
protocol consists running parallel verifier challenge split phi challenge challenge 
protocol follows loss generality say knows simulator runs generate 
sends message message 
challenge chooses phi able provide final response knows final response simply final message includes final responses 
note satisfies special soundness satisfies property 
ffl half weak special soundness conversations accepting exists conversations witness computed efficiently 
sigma protocols denote protocol 
signature schemes signature scheme sig triple sig gen sig sign sig verify algorithms probabilistic running polynomial time negligible probability failing 
sig gen takes prover verifier vk sk sig gen vk oe sigma sigma vk vk sig sign sk transcript sig verify vk transcript uss vk unbounded simulation sound zk protocol relationship crs vk drawn distribution sig gen common input prover knows witness 
input outputs public key pair sk vk sk vk sig gen 
sig sign takes message secret key sk input outputs signature oe oe sig sign sk 
sig verify takes message public key vk candidate signature oe input returns bit oe valid signature corresponding private key returns bit 
sig verify vk oe 
naturally oe sig sign sk sig verify vk oe 
security signature schemes specify existential unforgeability adaptive attacks signature scheme sig sig gen sig sign sig verify 
forger vk sk vk sig gen tries forge signatures respect vk 
allowed query signature oracle respect sk messages choice 
succeeds output valid forgery oe sig verify vk oe messages signed signature oracle 
say forger ffl breaks scheme forger runs time queries signature oracle succeeds probability ffl 
signature scheme sig existentially unforgeable adaptive chosen message attacks polynomial forger ffl breaks sig ffl negligible time signature scheme security formulated adversary may query signature oracle call existential unforgeability chosen message attacks term adaptive sense multiple queries 
note signatures scheme efficient don need public key cryptographic operations 
unbounded simulation sound zk ready result achieved technique unbounded zero knowledge protocol relation assume building blocks 
sigma sigma protocol binary relation 
sig sig gen sig sign sig verify signature scheme secure adaptive chosen message attack 

vk sig verify vk binary relation message signature pairs 

sigma vk sigma protocol special soundness property binary relation vk 
sig sig gen sig sign sig verify time signature scheme secure chosen message attack 
protocol uss vk shown 
assumes prover verifier share common input sigma protocol sigma prover knows crs oe verification key vk signature scheme existentially unforgeable adaptive chosen message attacks 
prover generates pair vk sk time signature scheme sends vk verifier 
vk common input sigma protocol sigma vk satisfying special soundness 
prover uses construction sigma protocols prove lr knows signature vk verification key vk 
note sigma vk satisfies special soundness intuitively proof knowledge 
prover signs transcript sk sends resulting signature verifier 
describe uss vk 
generates signature keys vk sk sig gen outputs oe vk sk 
sk checks common input lr aborts 
runs protocol normal generating sig sign sk vk knowledge complete sigma protocol sigma sigma vk vk 
theorem protocol uss vk argument 
proof completeness straightforward 
unbounded zk inspection produces exactly distribution real protocol 
fact runs lr fact sigma sigma vk vk sigma protocol witness indistinguishable unbounded zk follows straightforward hybrid argument 
unbounded simulation soundness adversary recall experiment expt definition unbounded simulation sound zk 
pr expt 
goal show negligible 
say forgery occurs accepts time verification key vk session different transcript 
expt expt forgery occurs experiment halts fails 
pr expt 
existential unforgeability property sig show difference negligible 
constructing non uniform probabilistic polynomial time attacker break sig probability ffl gamma number sessions starts simulator expt 
input verification key vk time signature oracle vk chooses cg runs experiment expt running simulator verifier normal inserting vk dth instance vk perform signature operation vk instance 
forgery occurs verification key vk halts outputs forgery transcript signature provided session view slightly modified experiment view expt forgery occurs 
forgery occurs probability gamma forgery occurs break sig vk probability breaks sig probability ffl gamma 
existential unforgeability property sig show negligible 
constructing non uniform probabilistic polynomial time attacker break sig signature oracle queries number sessions starts simulator expt probability ffl gamma gammak input verification key vk signature oracle vk runs experiment expt running simulator verifier normal inserting vk crs vk perform signature operations respect vk 
sends challenge forks experiment continues independently sub experiment giving independent random challenges 
examines output tr tr sub experiment 
lr argument simple version forking lemma follow directly signature oracle adversary output signature scheme sigma protocol knowledge signature 
consequently trying force results notation prove forking lemma hold situation simply prove result directly 
call successful sub experiment challenges sub experiment distinct sigma sigma vk vk satisfies half weak special soundness generate signature vk respect key vk transcripts tr tr 
vk time verification key sent message tr tr definition expt vk instance sub experiment 
generates signature new message vk respect vk breaks sig inspection calls signature oracle 
determine success probability note sub experiment view perfectly indistinguishable view expt probability success sub experiment second note probability random collision bit challenges gammak determine success probability lemma follows 
random variable denoting possible runs experiments challenge random variable denoting remainder run experiment initial part support support support predicate coll defined true challenges equal pair indicates full run experiment predicate oe indicates success experiment predicate oe indicates success sub experiment corresponding runs challenges distinct 
oe indicates succeeds lemma see succeeds probability ffl gamma gammak non malleable zk general nmzk construction similar construction replaced omega protocol defined 
omega protocols omega gamma col oe relation crs oe sigma protocol relation additional properties 

distribution ensemble common string oe drawn function delta delta oe delta takes oe additional input 
naturally simulator definition sigma protocols may take oe additional input 

exists polynomial time extractor string output statistically indistinguishable furthermore oe exists accepting conversations lr outputs informally way construct omega cols follows 
common string consist random public key pk semantically secure encryption scheme 
construct encryption key pk construct sigma protocol prove encryption sigma protocols notation denote protocol protocols omega gammae cols 
notice extraction property similar weak special soundness sigma protocols exists accepting conversation invalid proof accepting conversations guarantees proof valid 
extractor extract conversation witness accepting conversation 
having accepting conversations sharing guarantees extracted information witness 
prover verifier vk sk sig gen vk oe omega oe sigma vk vk sig sign sk transcript sig verify vk transcript nm vk oe non malleable zk protocol relationship common string vk oe oe drawn distribution associated omega oe common input nmzk protocol omega oe omega gamma col relation common string oe common input nm vk oe uss vk protocol sigma replaced omega oe 
oe resultant protocol sigma protocol 
omega omega omega extractor omega oe 
protocol nm vk oe shown 
describe nm vk oe generates signature keys vk sk sig gen sets oe distribution ensemble omega oe outputs vk oe sk 
sk checks common input lr aborts 
runs protocol normal generating sig sign sk vk knowledge complete protocol omega oe sigma vk vk 
describe nm vk oe 
generates signatures keys vk sk sig gen generates oe omega outputs vk oe sk 
simply runs outputs bit takes conversation produced omega oe generates omega 
sets 
outputs 
theorem protocol nm vk oe nmzk argument knowledge relation proof completeness straightforward 
string indistinguishability straightforward 
extractor indistinguishability follows extractor indistinguishability omega oe 
unbounded zk inspection produces exactly distribution real protocol 
fact runs lr fact oe omega oe sigma vk vk sigma protocol witness indistinguishable unbounded zk follows straightforward hybrid argument 
extraction adversary recall experiments expt expt definition non malleable zk 
pr expt pr expt 
goal show jp gamma negligible 
say forgery occurs accepts time verification key vk session different transcript 
expt expt forgery occurs experiment halts fails 
pr expt 
similar proof theorem show gamma cffl number sessions starts simulator expt ffl negligible 
expt expt forgery occurs experiment halts fails 
show gamma cffl ffl negligible 
fact extractor indistinguishability number sessions starts simulator expt equal number sessions starts simulator expt 
probability expt outputs session common input extraction property omega oe proof theorem show non uniform probabilistic polynomial time breaker oracle queries breaks sig probability ffl gamma existential unforgeability sig negligible 
extractor indistinguishability probability producing output unique transcript expt expt gamma cffl cffl gamma cffl cffl jp gamma cffl cffl negligible 
observe construction protocol nm vk oe fact string unbounded zk 
corollary protocol nm vk oe robust zk argument knowledge relation universally composable zk review framework universal composability 
prove nmzk protocol certain simple properties augmented uczk model static corruptions 
result implies corollary slight generalization protocol previous section augmented uczk model 
give new construction uczk model adaptive corruptions 
universal composability framework framework suggested canetti defining security composition protocols 
define security framework specifies ideal functionality describing desired behavior protocol trusted party 
proves particular protocol operating real world securely realizes ideal functionality defined 
briefly summarize framework ffl communication model assume asynchronous network guaranteed delivery messages 
assume messages authenticated authentication added standard ways model 
ffl entities basic entities involved parties adversary environment entities modeled probabilistic interactive turing machines 
ffl corruptions specify static adaptive corruptions 
static case adversary corrupts parties onset computation adaptive case adversary chooses parties corrupt computation evolves 
adversary corrupts party learns internal information including private input communication history random bits information explicitly erased party corruption 
corrupted behavior parties arbitrary malicious 
ffl real life execution high level execution protocol run parties presence environment machine input modeled sequence material section taken refer detail 
activations entities activated 
activated may write messages entities input tapes activate read messages entities output tapes 
activated may read messages party outgoing communication tapes write message party incoming communication tapes activating party 
may corrupt parties discussed 
party activated runs protocol 
see detail exact description activations 
environment outputs bit output protocol 
security parameter input real denote distribution ensemble random variables describing output interacting adversary parties running protocol input security parameter uniformly chosen random tapes entities 
ffl ideal process security protocols defined comparing real execution protocol described ideal process additional entity ideal functionality introduced essentially trusted party programmed produce desired functionality task 
additionally parties replaced dummy parties communicate access idealized execution environment activated generating inputs 
dummy party activated forwards input denote adversary idealized execution 
see destinations messages parties contents 
see exact description activations 
real life execution output protocol execution bit output denote distribution ensemble random variables describing output interacting adversary ideal process input security parameter uniformly chosen random tapes participating entities 
ffl security framework protocol securely realizes ideal functionality reallife adversary exists ideal process adversary environment input tell non negligible probability interacting parties running real life execution ideal process precisely corresponding binary distribution ensembles indistinguishable denoted real meaning exists inputs jpr real gamma pr gammad 
ffl hybrid model protocols typically invoke sub protocols 
hybrid model real life execution invocations sub protocols replaced invocation instance ideal functionality called hybrid model 
specifically model identical real life model addition sending messages parties may exchange messages unbounded number copies copy identified unique session identifier sid 
communication parties copies mimics ideal execution 
hyb denote distribution ensemble random variables describing output interacting parties running protocol hybrid model 
ae protocol secures realizes composed protocol ae constructed replacing message invocation new copy ae fresh random input sid contents message input subsequent message copy replaced activation corresponding copy ae contents message new input ae 
functionality zk zk proceeds follows running security parameter prover verifier adversary ffl receiving zk prover sid send zk proof sid halt 
ignore 
zero knowledge functionality relation ffl composition theorem composition theorem basically says ae secure realizes hybrid model functionality execution composed protocol ae running hybrid model emulates execution protocol hybrid model 
environment machine distinguish interacting ae hybrid model interacting hybrid model 
words hyb ae hyb zero knowledge functionality 
recall ideal zk functionality 
convention messages parties ideal functionality take form action sid action lower case messages ideal functionality take form object sid object upper case 
functionality 
functionality parameterized relation prover sends functionality input witness holds functionality forwards verifier 
pointed proof knowledge verifier assured prover knows shortcoming formulation designing analyzing protocols common string model operating crs hybrid model crs functionality security parameter chooses string distribution hands parties 
directly realizing zk crs hybrid model universal composition theorem result composed protocol new instance string needed proof extremely inefficient reflect notion crs model unbounded number protocol instances copy string 
canetti rabin suggested notion cope problem ffl universal composition joint state ideal functionalities denote multi session extension run multiple copies copy identified special sub session identifier ssid 
protocol hybrid model ae protocol securely realizes hybrid model 
construct composed protocol ae replacing copies single copy ae 
universal composition joint state theorem states ae running hybrid model correctly emulates hybrid model 
definition zk multi session extension zk shown 
note types indices sid differentiates messages zk messages sent functionalities ssid sub session id unique input message proof 
assume symbol relation string functionality zk zk proceeds follows running security parameter parties adversary ffl receiving zk prover sid ssid send zk proof sid ssid halt 
ignore 
multi session zero knowledge functionality relation nmzk implies uczk pi nmzk protocol prover verifier 
say pi prover sends message message contains common input auxiliary data aux may contain arbitrary public values 
reason aux discussed 
show augment pi additional information message allow parties universal composability framework 
augmented protocol denoted pi constructed follows 
instance pi run parties set aux ssid ssid defined previous section identity prover identity verifier 
th prover message formatted sid ssid data label th prover message data data field containing th message sent prover pi 
analogously th verifier message formatted ver sid ssid ver data ver label th verifier message ver data data field containing th message sent verifier pi 
accepting verifier checks aux corresponds values ssid outside prover data field aux previously 
theorem pi pi pi pi pi pi pi nmzk protocol relation augmented protocol pi securely realizes functionality zk crs hybrid model assuming static corruptions 
proof adversary operates protocol pi crs hybrid model 
construct ideal process adversary simulator environment tell interacting pi crs hybrid model ideal process zk simplicity assume copy zk accessed obviously duplicate actions copy zk differentiated sid value 
simulator generates oe pi uses oe common string crs stores simulator runs simulated copy messages received forwarded simulated messages sent simulated environment forwarded receives message zk proof sid ssid zk uncorrupted wishes perform zk proof common input simulates pi 
particular sets prover data field messages protocol pi 
uncorrupted simulates pi setting verifier data field messages actual verifier auxiliary data aux necessary nmzk allows copying proofs exactly zk functionality need way proof distinct 
protocol 
case simulated receives final message simulated forwards zk proof sid ssid actual uncorrupted controlling corrupted party starts interaction prover uncorrupted party ssid learns common input included message simulates pi 
particular sets verifier data field messages protocol pi 
interaction pi output 
sends zk prover sid ssid zk sends 
forwards response zk show hyb crs pi ideal zk define new experiment mixa 
new experiment runs simulated copies messages received forwarded simulated messages sent simulated environment forwarded simulator pi pi run produce oe queries crs answered oe 
uncorrupted party receives input zk prover sid ssid sets prover data field messages running protocol pi string oe common input uncorrupted party responds prover actual verifier protocol pi 
output experiment output mixa denote distribution ensemble random variable describing outputs mixa 
unbounded zk property hyb crs pi mixa see note construct adversary takes string runs protocol pi calls protocol wrapper label aux ssid simulating uncorrupted parties acting provers 
wrapper contains actual prover distribution outputs hyb crs pi wrapper contains simulator distribution mixa 
show mixa ideal zk follow unbounded extraction property see lemma 
say distributions distinguished probability fl 
mixa run simulation prover output messages extractor run perfectly indistinguishable output messages verifier difference comes extractor outputs incorrect witness session started receives output message indicating correct proof mixa interacting 
note transcripts corrupted prover uncorrupted verifier sessions transcripts uncorrupted prover corrupted verifier sessions auxiliary data aux 
vector corresponding simulated verifier sessions corresponding receives output message 
statistical difference distribution vectors resulting mixa vectors resulting fl 
construct adversary takes string runs mixa uses string generating new calls simulator protocol wrapper simulating uncorrupted parties acting provers corrupted verifiers verifier protocol wrapper simulating uncorrupted parties acting verifiers corrupted provers 
expt vector distribution resulting mixa 
hand expt pi vector distribution resulting receives output message mixa appeared clear distributions experiments statistically distinguishable probability distributions resulting mixa fl 
unbounded extraction property fl negligible 
definition unbounded extraction nmzk proof argument knowledge pi unbounded extraction non malleable zk proof resp argument knowledge system np language witness relation pi nmzk proof resp 
argument system furthermore exists negligible function fi unbounded extraction non uniform probabilistic polynomial time adversaries coordinated machines pr expt expt fi experiments expt expt defined follows expt expt oe oe tr ha oe tr ha oe set transcripts set transcripts machines machines tr tr tr tr tr tr return return vector output notation denote ith instance started wrapper protocol returns tr output runs follows common string oe common input private input runs common string oe common input lemma pi nmzk protocol relation pi unbounded extraction nmzk protocol proof notice exactly behavior exact correspondence vectors returned experiments cases bits expt expt 
fi pr expt gamma pr expt perform hybrid argument 
expt expt replaced 
denote maximum number sessions started notice polynomial expt expt expt expt 
telescoping argument pr expt gamma pr expt gamma fi 
expt expt replaced 
exactly behavior easy verify pr expt gamma pr expt gamma fi 
consider new adversary chooses randomly runs simulates jth session 
jth session calls time wrapper 
definition nmzk pr expt gamma pr expt ff analysis pr expt gamma pr expt pr expt gamma pr expt gamma fi fi delta ff 
theorem follows 
say protocol pi uczk protocol securely realizes functionality zk crs hybrid model corollary pi protocol nm vk oe addition common input aux ssid message 
augmented protocol pi uczk protocol assuming static corruptions 
uczk adaptive corruptions basic idea deal adaptive corruptions take version nmzk protocol corollary denoted nm vk oe aux apply technique proposed damgard jarecki lysyanskaya trapdoor commitment commit message sigma protocol commitment opened sending third message 
informally trapdoor commitment commitment scheme additional property secret trapdoor knowing trapdoor allows decommit arbitrary value 
precisely tc tcgen tccom tcver trapdoor commitment scheme satisfies properties completeness binding perfect secrecy 
properties unconditionally hiding commitment scheme 
trapdoor property says informally tcgen outputs secret key trapdoor public key secret key commitment decommitment pair associated value tccom pk function value output decommitment valid decommitment resulting tcver pk 
technical reasons plain trapdoor commitment provide properties need deal adaptive corruptions define stronger type trapdoor commitment scheme call simulation sound trapdoor commitment sstc scheme 
roughly speaking sstc scheme trapdoor commitment scheme extra input id commitment protocol guarantees commitment adversary input id binding adversary seen commitment input id opened simulator knows trapdoor arbitrary value commitment id id opened simulator unbounded number times arbitrary values 
formally define sstc scheme building formalization trapdoor commitment schemes 
definition simulation sound trapdoor commitment sstc scheme tc tcgen tccom tcver sstc scheme tcgen tccom tcver probabilistic polynomial time algorithms completeness id values pr pk sk tcgen tccom pk id pk tcver pk id simulation sound binding negligible function ff non uniform probabilistic polynomial time adversaries pr pk sk tcgen id hs sk ai pk tcver pk id tcver pk id id ff sk operates follows initially set universally composable commitments suffice constructed trapdoor permutations 
construction efficient sstc scheme 
prover verifier aux pi aux oe tccom pk aux aux oe pi aux oe erase pk tcver pk aux verify pi aux oe uc pk vk oe aux uczk protocol common string pk vk oe drawn pk tc theta vk sig theta oe omega common input auxiliary input aux pi nm vk oe aux ffl input commit id compute tccom pk id store id return ffl input decommit id tuple id stored compute pk sk id 
previous decommit input add id return hiding pk pk id equal length probability distributions identical tccom pk id tccom pk id trapdoor property pk sk generated non zero probability tcgen id equal length probability distributions identical tccom pk id pk sk id tccom pk id particular faked commitments correct 
pi move interactive proof protocol common input auxiliary input aux witness common string oe prover random bits similarly sigma protocols notation pi delta pi delta verify pi delta denote algorithms computing messages prover verifying proof respectively 
notation protocol uc pk vk oe aux shown 
theorem pi protocol uc pk vk oe aux aux ssid 
augmented protocol pi securely realizes functionality zk crs hybrid model erasing allowed assuming adaptive corruptions 
proof adversary operates protocol pi crs hybrid model 
construct ideal process adversary simulator environment tell interacting pi crs hybrid model ideal process zk simplicity assume copy zk accessed obviously duplicate actions copy zk differentiated sid value 
formally pi pi pi pi pi pi pi protocol nm vk oe aux uc pk vk oe aux simulator generates oe pi generates pk sk tcgen uses pk oe common string crs stores sk simulator runs simulated copy messages received forwarded simulated messages sent simulated environment forwarded receives message zk proof sid ssid zk uncorrupted witness zk simulates pi 
particular sets prover data field message generating commitment actual prover protocol appropriate part message computed pi 
sets prover data field final message opening commitment sending final message computed pi 
uncorrupted simulates pi setting verifier data field message particular random challenge actual verifier protocol 
case simulated receives final message simulated forwards zk proof sid ssid actual uncorrupted simulating uncorrupted party acting prover resulting receiving message zk proof sid ssid corrupted receiving challenge witness revealed uses sk change committed value 
takes original generates random bits runs actual prover protocol get new value new sets new pk sk aux new reveals new new controlling corrupted party starts interaction prover uncorrupted party ssid learns common input included message simulates pi 
particular sets verifier data field messages protocol pi 
interaction output 
sends zk prover sid ssid zk sends 
forwards response zk show hyb crs pi ideal zk define new experiment mixa new experiment runs simulated copies messages received forwarded simulated messages sent simulated environment forwarded pi run produce oe pk sk tcgen generated 
pk oe common string crs sk stored 
uncorrupted party receives input zk prover sid ssid sets prover data field messages way 
corruptions handled way 
uncorrupted party responds prover actual verifier protocol pi 
output experiment output mixa denote distribution ensemble random variable describing outputs mixa 
similar proof theorem show hyb crs pi mixa show mixa ideal zk follow similar proof theorem simulation sound binding property trapdoor commitment scheme 
pr ideal zk pr mix 
proof theorem may assume forgery sig occurs experiment 
existential unforgeability sig affects negligible amount 
proof theorem difference mixa comes extractor pi sends random challenge dependent message 
note corruption occurs second messages wrapper machine simulation just simulation received second message 
outputs incorrect witness session started receives output message indicating correct proof mixa interacting 
note transcripts corrupted prover uncorrupted verifier sessions transcripts uncorrupted prover corrupted verifier sessions auxiliary data aux 
vector corresponding simulated verifier extractor sessions corresponding receives output message 
ae statistical difference distribution vectors resulting mixa vectors resulting 
note ae jp gamma 
upper bound number verifier sessions 
average probability difference bit position ae complete proof simply need show ae negligible 
number times sends zk prover messages parties 
construct adversaries break signature scheme sig probability ae gamma gammak calls signature oracle break sstc scheme tc probability ae gamma gammak calls commitment revealing oracle 
existential unforgeability sig security tc follow ae negligible 
describe adversaries terms single construction take verification key sig signature oracle vk public key pk tc tc simulator described 
self supplied tc scheme self supplied sig scheme 
chooses random ug 
runs changing common string oe pk vk oe vk perform signature operations respect vk tc simulator fake commitments 
sends challenge extractor session say aux ssid forks experiment continues independently sub experiment giving random independent challenges 
examines output tr tr sub experiment 
lr call successful sub experiment challenges sub experiment distinct proceeds follows 
way sub experiment broken sig extraction property omega oe proof theorem 
broken tc commitment id aux revealed tc simulator corrupted forking 
lemma occurs probability ae gamma gammak break signature scheme sig probability ae gamma gammak break sstc scheme tc probability ae gamma gammak claimed 
efficient instantiations briefly describe efficient instantiations constructions 
discuss efficient signature schemes cramer shoup signature scheme dsa signature scheme associated efficient sigma protocols plugged constructions nmzk uczk protocols 
second construct efficient sstc scheme dsa construction uczk protocol 
third give example efficient omega gamma col discrete logarithm relation implying efficient nmzk uczk protocols discrete logarithm 
describe generalized definition omega gamma cols replace omega cols appropriately generalized definition nmzk protocols 
efficient generalized omega col proving knowledge plaintext elgamal ciphertext implying efficient nmzk protocol elgamal plaintext knowledge 
technically id simply aux ssid 
note generalization applicable uczk protocols 
particular protocol efficient best strict omega col 
signature schemes note constructions general version sigma protocol proving knowledge signatures follows 
consider binary relation vk signature scheme sig 
say polynomial time computable function partial knowledge function sig exists probabilistic polynomial time machine vk fs vk fs sig sign vk vk distribution 
intuitively partial knowledge function carries part information signature efficiently sampled knowing 
signature scheme sig partial knowledge function relation vk vk vk replace vk constructions uss vk nm vk oe uc pk vk oe sending randomly sampled partial knowledge running sigma protocol sigma sigma vk vk 
say vk partial signature relation sig 
show cramer shoup signature scheme dsa signature scheme admit efficient sigma protocols proving knowledge signatures general definition plugged constructions 
cramer shoup signature scheme cramer shoup efficient signature scheme existentially unforgeable adaptive chosen message attacks strong rsa assumption formally defined appendix addition main security parameter secondary security parameter public key modulus size 
value dependent set known attacks public key systems modulus size hard known attacks hash functions brute force attacks systems main security parameter describe scheme denote sig cs sig gen cs sig sign cs sig verify cs 
ffl sig gen cs pq prime hash sk hp qi vk hn hi return sk vk 
ffl sig sign cs sk delta gammah mod prime nfe xh gammah gamma mod oe mod return ffl sig verify cs vk odd bit number return delta gammah mod mod return return 
technical note expected polynomial time algorithm prime generation assume probabilistic strict polynomial time algorithm negligible probability failing 
effect security result 
theorem cramer shoup signature scheme secure adaptive chosen message attack strong rsa assumption assumption collision resistant 
today technology reasonable values may 
technical notations prime number safe prime gamma prime number 
set bit safe prime numbers prime set bit prime numbers set quadratic residues hash set efficient hash functions maps strings arbitrary length bit string 
note public key vk message signature extract pair 
note randomly generated signature pair random random bit prime equal random element independent 
function vk partial knowledge function cramer shoup 
furthermore vk compute delta gammah mod simply root known element th root delta mod quisquater sigma protocol proving knowledge roots special soundness property 
protocol directly adopted proving partial signature relation vk dsa digital signature algorithm proposed nist april may adopted standard digital signature scheme 
variant elgamal signature scheme defined follows security parameters cramer shoup signature scheme 
ffl sig gen dsa prime qj gamma order mod sk hg xi vk hg yi return sk vk 
ffl sig sign dsa sk mod gamma xr mod return hr mod si 
ffl sig verify dsa vk hr si gamma mod mod mod return return 
security dsa intuitively rests hardness computing discrete logarithms known security reduction proves 
simply assumed dsa existentially unforgeable adaptive chosen message attack 
note public key vk message signature hr si efficiently compute value gamma gamma mod note randomly generated signature value random element generated vk hr si partial knowledge function dsa 
furthermore vk simply discrete log base known element mod schnorr presents sigma protocol proving knowledge discrete log satisfies special soundness property 
protocol prove partial signature relation vk sstc scheme efficient sstc scheme tc dsa 
describe slightly simpler scheme tc weak simulation sound trapdoor commitments id empty string essence double reveal queries trapdoor commitment simulator allowed 
implement simpler scheme elements group technique similar damgard nielsen involves trapdoor commitment schemes tc tc commit elements trapdoor tc trapdoor tc tc bit indicating 
commit message generate random set assume factor oe false negligible probability 
dsa standard fixed way set multiple inclusive hash function defined sha 
parameters varied security level desired 
gamma commit tc tc respectively generating commitment 
open commitment open commitment say 
value 
open commitment say arbitrary value trapdoor sk trapdoor sk tc open commitment gammab normally sk open commitment gamma gammab 
proof satisfies weak simulation sound binding property follows closely damgard nielsen 
scheme satisfy full notion simulation sound binding revealing commitment different ways arbitrary id adversary determine trapdoor cause proof fail 
scheme tc satisfies simulation sound binding uses technique built commitment schemes tc tc built dsa follows 
dsa public key commitment message id generated follows 
compute ff ff mod id mod 
note discrete log mod dsa signature id pedersen commitment bases commit choose fi compute commitment fi open commitment output fi 
show simulation sound binding property show adversary break property break dsa follows 
assume dsa existentially unforgeable adaptive chosen message attack 
dsa key vk signature oracle generate dsa key pair vk sk choose bit say vk vk gammab public key commitment scheme 
say know id adversary going commitment double opening 
commit value id compute actual signature id sk commit value signature 
knowledge signature decommit arbitrary value commit value id id choose bit decide scheme compute signature scheme fake 
compute signature dsa signature oracle id compute signature sk adversary view independent adversary gives double opening id probability different openings fi fi mod fi gamma fi gamma mod signature id breaking dsa 
note know id adversary guess reducing probability breaking dsa polynomial factor 
efficient omega protocol describe efficient omega gamma col proving knowledge discrete logarithm 
protocol decisional composite residuosity assumption strong rsa assumption formally defined appendix public parameters primes qj gamma order discrete logarithm relation mod pg 
omega gammar col constructed follows common string consists parts paillier public key pk hn hi rsa modulus rsa modulus generators prover verifier share common input prover knows message prover sends encryption paillier encryption key pk 
sigma protocol prove plaintext paillier encryption discrete log technical difficulty discrete logarithm scheme weak simulation soundness uczk adaptive protocol require common string contain trapdoor commitment public key party 
paillier encryption different moduli 
overcome known technique adding commitment generators third modulus unknown factorization 
detailed construction appendix efficient generalized omega protocol np relation polynomial time computable function rg 
note may np relation 
define extracting omega gamma extr col omega gamma col extractor outputs similarly define extracting nmzk protocol extractor outputs extraction condition changed appropriately 
easy see replace omega gamma col construction nmzk protocols extracting omega col construction yields extracting nmzk protocol 
note prover omega gammah cols nmzk protocols receives full witness note identity function normal definitions omega gamma col nmzk protocol 
application generalized definitions proving plaintext knowledge 
see applications proof plaintext knowledge 
consider semantically secure encryption scheme 
scheme naturally induces relation encryption plaintext random bits consider function defined 
easy see extracting omega col essentially proof plaintext knowledge call function plaintext knowledge function 
efficient extracting omega col elgamal encryption plaintext knowledge function 
public parameters primes qj gamma order elgamal encryption scheme formally defined follows message space subgroup generated ffl enc gen mod sk pk return sk pk 
ffl encrypt vk mod mod return 
ffl decrypt sk return relation elgamal system mod mod defined 
restricted omega col constructed follows 
common string new public key elgamal system generated running enc gen fresh random bits 
corresponding decryption key discarded 
prover takes encryption message random bits constructs new encryption encryption key common string prover sends verifier performs sigma protocol proving elgamal encryptions plaintext 
sigma protocol proceeds follows 
prover picks computes outputs message 
challenge prover computes rc mod mod outputs third message 
verifier verifies note resulting nmzk protocols necessarily construct uczk protocols static corruptions uczk protocols definition proofs knowledge 
satisfied input lr challenge simulator generate encryption arbitrary value perfect property sigma protocol generate accepting conversation 
semantic security elgamal simulator computationally indistinguishable actual prover 
show extraction property satisfied 
generate fresh elgamal key pair sk vk enc gen putting vk common string passing decryption key sk interacts prover obtains accepting transcript tr 
outputs decrypt sk encryption transcript tr 
weak soundness property sigma protocol probability plaintext encryption gammak assuming bit challenges 
barak 
go black box simulation barrier 
nd ieee symp 
foundations computer sci pp 

barak 
constant round coin tossing man middle realizing shared random string model 
rd ieee symp 
foundations computer sci pp 
barak lindell 
strict polynomial time simulation extraction 
th acm symp 
theory computing pp 

bari pfitzmann 
collision free accumulators fail signature schemes trees 
advances cryptology eurocrypt lncs pp 

boneh 
decision diffie hellman problem 
proceedings third algorithmic number theory symp 
lncs pp 


efficient proofs committed number lies interval 
advances cryptology eurocrypt lncs pp 


efficient publicly verifiable secret sharing schemes fast delayed recovery 
information communication security second international conference pp 

camenisch 
separability efficiency generic group signature schemes 
advances cryptology crypto lncs pages 
canetti 
universally composable security new paradigm cryptographic protocols 
nd ieee symp 
foundations computer sci pp 

canetti fischlin 
universally composable commitments 
advances cryptology crypto lncs pp 

canetti kilian petrank rosen 
concurrent zero knowledge requires omega gamma rounds 
rd acm symp 
theory computing pp 

canetti lindell ostrovsky sahai 
universally composable party computation 
th acm symp 
theory computing pp 

full version eprint archive report 
eprint iacr org 
canetti rabin 
universal composition joint state eprint archive report eprint iacr org 
cook 
complexity theorem proving procedures 
rd ieee symp 
foundations computer sci pp 

cramer damgard schoenmakers 
proofs partial knowledge simplified design witness hiding protocols 
advances cryptology crypto lncs pages 
cramer shoup 
signature scheme strong rsa assumption 
acm trans 
information system security 
damgard 
efficient concurrent zero knowledge auxiliary string model 
advances cryptology eurocrypt lncs pp 

damgard nielsen 
perfect hiding perfect binding universally composable commitment schemes constant expansion factor 
advances cryptology crypto lncs pp 

full version eprint archive report 
eprint iacr org 
de santis di ostrovsky sahai 
robust non interactive zero knowledge 
advances cryptology crypto lncs pp 

dolev dwork naor 
non malleable cryptography 
siam comput 
rd acm symp 
theory computing pp 

dwork naor sahai 
concurrent zero knowledge 
th acm symp 
theory computing pp 

dwork sahai 
concurrent zero knowledge reducing need timing constraints 
advances cryptology crypto lncs pp 

elgamal 
public key cryptosystem signature scheme discrete logarithms 
ieee trans 
information theory 
goldreich micali 
line line digital signatures 
cryptology 
feige shamir 
witness indistinguishable witness hiding protocols 
nd acm symp 
theory computing pp 

fips 
secure hash standard 
federal information processing standards publication dept commerce nist national technical information service springfield virginia 
fips 
digital signature standard 
federal information processing standards publication dept commerce nist national technical information service springfield virginia 
fujisaki okamoto 
statistical zero knowledge protocols prove modular polynomial relations 
advances cryptology crypto lncs pp 

gennaro halevi rabin 
secure hash sign signatures random oracle 
advances cryptology eurocrypt lncs pp 

goldreich micali wigderson 
play mental game completeness theorem protocols honest majority 
th acm symp 
theory computing pp 

goldreich micali wigderson 
proofs yield validity languages np zero knowledge proof systems 
acm 
phil cited 
goldwasser micali 
probabilistic encryption 
computer system sciences 
goldwasser micali rackoff 
knowledge complexity interactive proof systems 
siam comput february 
goldwasser micali rivest 
digital signature scheme secure adaptive chosen message attacks 
siam comput 

quisquater 
practical zero knowledge protocol fitted security microprocessors minimizing transmission memory 
advances cryptology eurocrypt lncs pp 
jarecki lysyanskaya 
adaptively secure threshold cryptography introducing concurrency removing erasures 
advances cryptology eurocrypt lncs pp 

katz 
efficient non malleable proofs plaintext knowledge applications 
eprint archive report eprint iacr org 
kilian petrank 
concurrent zero knowledge poly logarithmic rounds 
rd acm symp 
theory computing pp 


digital signature algorithm 
patent july 
levin 
universal sorting problems 

russian 
engl 
trans problems information transmission 
mackenzie reiter 
party generation dsa signatures 
advances cryptology crypto lncs pp 
mackenzie shrimpton jakobsson :10.1.1.101.6403
threshold password authenticated key exchange 
advances cryptology crypto lncs pp 

naor yung 
public key cryptosystems provably secure chosen ciphertext attacks 
nd acm symp 
theory computing pp 

okamoto 
new public key cryptosystem secure factoring 
advances cryptology eurocrypt lncs pp 

paillier :10.1.1.112.4035
public key cryptosystems composite degree residue classes 
advances cryptology eurocrypt lncs pp 

pedersen 
non interactive information theoretic secure verifiable secret sharing 
advances cryptology crypto lncs pp 

pointcheval stern 
security arguments digital signatures blind signatures 
cryptology 
rosen sahai 
concurrent zero knowledge logarithmic round complexity eprint archive report eprint iacr org 
rd ieee symp 
foundations computer sci pp 


zero knowledge public keys 
ph thesis mit 

way functions necessary sufficient secure signatures 
nd acm symp 
theory computing pp 

sahai 
non malleable non interactive zero knowledge adaptive chosen ciphertext security 
th ieee symp 
foundations computer sci pp 

schnorr 
efficient identification signatures smart cards 
advances cryptology eurocrypt lncs pp 

exclusive collision lemma prove lemma proof theorem 
lemma exclusive collision lemma random variable random variable distribution parameterized value support support support coll predicate defining collision 
maximum support probability collision independent random variables max coll oe predicate prob oe ba 
oe oe oe coll 
prob oe gamma independent conditioned proof define new predicate oe oe oe essentially predicate oe requirement coll 
support prob oe 
function random variable value prob oe ba pa prob oe prob oe prob oe gamma prob coll gamma tighter analysis lower bound prob oe lemma improved gamma pq 
number theoretic assumptions review number theoretic assumptions 
strong rsa assumption 
strong rsa assumption generalization standard rsa assumption informally states rsa modulus exponent computationally infeasible find th root random informally strong rsa assumption states infeasible find arbitrary non trivial root random formally say safe prime gamma prime 
rsa gen probabilistic polynomial time algorithm generates random bit safe primes outputs pq 
assumption strong rsa non uniform probabilistic polynomial size circuit probability negligible pr rsa gen mod strong rsa assumption introduced bari pfitzmann applications see 
stronger assumption standard rsa assumption method known breaking factoring paillier cryptosystem decision composite residuosity assumption 
paillier encryption scheme defined follows function function takes input elements set fu ju mod ng returns gamma definition differs define message space prover verifier ff fi mod ff mod fi mod mod mod oe cx ff fi mod ca mod mod mod omega gamma col discrete log relation mod pg :10.1.1.112.4035
common string paillier public key strong rsa modulus generators 
public key pk hn gi gamma gamma gamma versus zn restrict security cryptosystem relies decision composite residuosity assumption dcra :10.1.1.112.4035
key generation choose random bit primes set pq set public key hn hi private key hn encrypt message public key hn hi select random ff compute ff mod decrypt ciphertext secret key hn compute mod mod mod decryption gamma decryption gamma paillier shows mod mod elements form dn function easily computed decryption :10.1.1.112.4035
efficient omega protocol proving knowledge discrete log detailed construction omega gammae col proving knowledge discrete logarithm 

