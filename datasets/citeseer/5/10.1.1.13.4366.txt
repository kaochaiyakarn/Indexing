deciding presburger arithmetic model checking comparisons methods vijay ganesh sergey david dill stanford university stanford edu 
new way binary decision diagrams automata algorithms solving satisfiability problem quantifier free presburger arithmetic 
previous approaches translate satisfiability problem model checking problem existing bdd model checker smv primary engine :10.1.1.55.5200
compare performance various presburger tools automata ilp approaches large suite parameterized randomly generated test cases 
strengths weaknesses approach function parameters reported reasons discussed 
results show single tool performs better parameters 
theoretical side provide tighter bounds number states automata 
efficient decision procedures logical theories greatly help verification programs hardware designs 
instance quantifier free presburger arithmetic rtl datapath verification symbolic timing verification 
satisfiability problem quantifier free fragment known npcomplete 
consequently search practically efficient algorithms important 
presburger arithmetic defined order theory structure hz set integers 
satisfiability presburger arithmetic shown decidable presburger 
theory usually defined natural numbers easily extended integers important practical applications representing integer variable natural variables reduction obviously effect known decidability complexity results 
research supported contract sa pg part national science foundation ccr 
content necessarily reflect position policy nsf government official endorsement inferred 
presburger formulas quantifiers alternation easy convert quantifier free formulas 
remainder focuses quantifier free presburger arithmetic verification problems require quantification performance decision procedures quantifier free formulas may qualitatively different quantified case 
primary goals presentation new decision procedure model checking comparison various approaches deciding quantifier free presburger arithmetic implementations 
distinct ways solving satisfiability problem presburger cooper method integer linear programming ilp approaches automata methods 
cooper method presburger original method solving quantified formulas efficient 
cooper method quantifier free formula requires introducing existential quantifiers eliminating 
process results explosion new atomic formulas method probably inefficient competitive approaches 
atomic formulas linear integer equalities inequalities natural think integer linear programming ilp algorithms means determine satisfiability quantifier free formulas presburger arithmetic 
ilp algorithms maximize objective function subject constraints form conjunction linear equalities inequalities 
way system checked satisfiability usually called feasibility problem interest 
efficient implementations ilp solvers available 
experimented commercial tool cplex open source implementations lp solve omega 
omega tool specifically tuned solve integer problems extension fourier motzkin linear programming algorithm integers 
order solve arbitrary quantifier free formula converted disjunctive normal form dnf ilp applied disjunct satisfiable 
disjuncts satisfiable entire formula satisfiable 
conversion dnf may lead exponential explosion formula size 
addition automata methods existing implementations lack support arbitrarily large integers native machine arithmetic 
consequences 
firstly making fair comparison ilp tools automata methods feature equivalent 
native machine arithmetic ilp tools gives unfair performance advantage 
secondly support large integers may crucial certain hardware verification problems solution set may integers larger int types supported natively hardware 
instance current rtl datapath verification approaches ilp approaches scaled bit vector size designs 
third approach uses finite automata theory 
idea atomic presburger formula represented finite state automaton goes back buchi 
comon proposed efficient encoding buchi :10.1.1.55.5200
wolper improved method comon implemented technique system called 
automata approach translate atomic formulas ws weak monadic second order logic suc cessor mona tool :10.1.1.1.9261
mona decision procedure ws uses binary decision diagrams bdds internally represent automata 
new automata approach symbolic model checking proposed evaluated 
key idea convert quantifier free presburger formula sequential circuit model checked smv 
experiments indicate smv approach quite efficient scalable formulas large coefficients automata techniques 
reason bdds represent states transitions resulting automaton 
factor contributes efficiency smv uses highly optimized bdd package 
addition existing tool saves lot implementation effort 
experiments required relatively small perl script convert presburger formulas smv language 
tools bdds states perform quantifier elimination manipulating automata directly 
quantifier alternation requires projection determinization automaton 
bdds states implementation determinization step particularly hard 
compare various automata ilp approaches suite randomly generated presburger formulas 
random generation controlled parameters number atomic formulas number variables maximum coefficient size 
approach identify classes presburger formulas performs poorly efficiently 
similar comparison done previously 
examples consist small set quantified presburger formulas obtained real hardware verification problems 
goal comparison study performance trends various approaches tools depending different parameters quantifier free presburger formulas 
organized follows 
section explains automata construction algorithms tighter bounds number states automata 
section describes implementation issues conversion satisfiability problem model checking problem construction circuit corresponding automaton 
section provides experimental results comparisons tools 
section concludes discussion experimental results 
presburger arithmetic definition 
define presburger arithmetic order theory atomic formulas form integer constants variables ranging integers operator semantics operators usual ones 
rest restrict quantifier free fragment presburger arithmetic 
formula atomic formula constructed formulas recursively follows typographic conventions 
notation 
reserve boldface letters represent column vectors represent row vectors 
term vector shall refer column vector specified 
notation represents vector variables atomic formula 
xn represents bit boolean column vectors 
row vector coefficients atomic formula denoted particular atomic formula vector notation written follows 

scalar product vectors give formal semantics quantifier free presburger arithmetic terms sets solutions 
variable assignment formula necessarily atomic free variables vector integers atomic formula particular assignment easily determined true false evaluating expression 
solution variable assignment formula true 
denote set solutions sol defined recursively follows atomic sol fw 
cg sol sol sol sol sol sol sol sol 
simplify definitions assume atomic formulas contain set variables 
true variables missing atomic formulas variables added zero coefficients 
idea automaton idea automata approach construct deterministic finite state automaton dfa quantifier free presburger formula language automaton corresponds set solutions 
automaton constructed satisfiability problem effectively reduced emptiness problem automaton checking 
formula atomic corresponding dfa constructed dfas subformulas complement intersection union operations automata 
complete construction arbitrary quantifier free presburger formula sufficient construct dfas atomic formulas 
section fix particular atomic presburger formula 
recall variable assignment vector integers integer represented binary format complement solution vector represented vector binary strings 
look representation variable assignment binary matrix row track represents integer corresponding variable th column represents vector th bits components alternatively matrix seen string columns string alphabet 
set strings represent solutions formula form language alphabet 
problem reduced building dfa atomic formula accepts exactly language intuitively automaton read string extract corresponding variable assignment instantiate formula check value left hand side lhs related right hand side rhs constant relation prescribes 
string accepted rejected 
rhs constant relation fixed value lhs solely determines input string accepted 
assume automaton reads string left right 
value lhs reading string appending letter right lhs value changes 
notice original value lhs new letter needed compute new value lhs resulting string 
property directly corresponds property transition relation automaton state solely determined current state input letter 
intuition define automaton follows 
states integers representing values lhs input alphabet input automaton transitions state 
set accepting states states satisfy special care taken initial state initial interpret empty string vector 
value left hand side initial state equal 
letter read vector sign bits complement interpretation value lhs state initial 
notice automaton finite explicitly defined set states integers 
examine structure infinite automaton show trim state space finite subset obtain equivalent dfa similar 
inf inf initial fig 

example automaton atomic presburger formula 
formal description automaton infinite state automaton corresponding atomic presburger formula defined follows initial acc fs initial set states set integers initial initial start state alphabet set bit vectors transition function defined follows initial 

non initial state 
set accepting states acc fl cg fs initial 

rest section show infinite automaton converted equivalent finite state automaton 
intuitively certain finite range values lhs transitions outside range starts diverging moving away range guaranteed stay outside range side diverging 
show states outside range collapsed states representing respectively states meaningfully labeled accepting rejecting affecting language original automaton definition 
vector lhs coefficients define jja jj ja jja jj ja notice jja jj jja jj non negative 
denote bit binary vector observe 
jja jj value expression 
rewritten 
fj ja jb fi ja jb largest positive value 
obtained setting setting case 
jja jj clear assignment 
smaller 
similarly 
jja jj lemma 
atomic presburger formula 
corresponding automaton defined section current state automaton claims hold 
jja jj state satisfy 
jja jj state satisfy proof 
upper bound claim 
assume jja jj state state satisfies 
jja jj lower bound claim similar proof claim 
ut discuss bounds states automata lemma 
lemma easy see automaton reaches state outside min jja jj max jja jj guaranteed stay outside range side 
reaches state min jja jj min jja jj subsequent state reach relation equality guaranteed false moment transitions onward 
similarly false forever true relations 
case states automaton min jja jj accepting rejecting 
automaton leave set states accept inputs reject 
replacing states min jja jj single state self loop transition inputs marking state appropriately accepting rejecting result automaton equivalent original exactly line reasoning applies states max jja jj replaced just state self loop inputs 
formally new finite automaton set states min jja jj max jja jj fs initial transitions range coincide transitions original infinite automaton original automaton state input max jja jj new automaton corresponding state subsequently input similarly state min jja jj new state automaton remains forever initial 

max jja jj 
min jja jj 

accepting states range satisfy relation 
new divergence states labeled accepting relation holds representative state 
instance formula 
state accepting rejecting 
initial state initial accepting accepting original infinite automaton 
bounds lemma repeat analysis number states automaton obtain new bounds tighter factor 
know bounds advance constructing smv model saves bit state atomic formula 
asymptotically course new bounds stay 
implementation previous section shown mathematical construction deterministic finite state automaton corresponding quantifier free presburger formula practice building automaton explicitly inefficient number states proportional value coefficients right hand side constant importantly number transitions state exponential number variables existing symbolic model checker smv means build symbolic representation automaton check language emptiness 
symbolic model checking expresses design finite state automaton properties design checked traversing states automaton 
past decade lot research boosting performance model checkers 
notable breakthrough early binary decision diagrams bdds successfully model checking pushing tractable size automaton states 
natural try utilize powerful developed techniques handling finite state automata checking satisfiability presburger formulas 
obvious advantages approach state art verification engines smv readily available remaining task transform emptiness problem automaton model checking problem efficiently 
addition smv exploit efficient bdd representation states transitions automata automata approaches mona states represented explicitly 
performed experiments cmu version smv model checker 
smv language allows express automaton transitions directly terms arithmetic expressions cost evaluating expressions smv prohibitively high 
internally smv represents state variables vectors boolean variables 
similarly representation transition relation function takes boolean vectors current state variables inputs returns new boolean vectors state variables state 
function state accept 
input clock fig 

circuit implementing finite state automaton 
effectively smv builds equivalent sequential digital circuit operating boolean signals shown 
current state automaton stored register state computed combinational circuit value current state new inputs result latched back register clock cycle 
special tester circuit checks current state strictly speaking smv constructs transition relation function function distinction important 
accepting sequence inputs read far string original terminology accepted automaton represents solution 
property check output circuit sequence inputs 
logical specification language smv written ag output property true language automaton empty original formula unsatisfiable 
property violated smv generates counterexample trace sequence transitions leading accepting state 
trace represents satisfying assignment formula translation arithmetic expressions boolean circuit primary bottleneck smv 
providing circuit explicitly greatly speeds process building transition relation 
relatively simple perl script generates circuit property efficiently transforms smv description 
structure resulting smv code follows closely mathematical definition automaton state variables explicitly represented boolean variables arithmetic operations converted combinational circuits equivalently boolean expressions particular ripple carry adders addition shift add circuits implement multiplication constant comparators implement equality inequality relations tester circuit 
experimental results satisfiability problem quantifier free presburger arithmetic npcomplete hope efficient general purpose decision procedure quite thin 
practical purposes important collect different methods evaluate performance different classes formulas 
strengths weaknesses approaches tools identified easier pick best solving concrete problems arise practice 
primary purpose experiments study performance ilp methods variations depending different parameters presburger formulas 
tools approaches picked automata tools approach smv model checker refer smv direct implementation automata approach dedicated presburger arithmetic mona automata solver ws general purpose automata library :10.1.1.1.9261
approaches integer linear programming ilp lp solve simplex open source tool branch bound integer constraints cplex best commercial simplex lp solvers omega tool fourier motzkin algorithm 
benchmarks consist randomly generated relatively small presburger formulas 
examples main parameters number variables number atomic formulas resulting formula conjunction atomic formulas maximum value coefficients 
set parameters generate random formulas run set examples tools 
results comparisons appear figures plots showing execution time automata tool depends particular parameter parameters fixed success rate tools parameters 
point run time graphs represents successful run experiment particular tool 
certain tool fewer points certain range means failed range ran memory time hit fatal error 
ilp tools complete example small fraction second fail 
run time informative ilp tools number completed examples success rates shown 
case mona readily available input language ws translating presburger formulas ws extremely inefficient 
simple examples smv solve time take significant time mona 
due inefficient translation comparison mona approaches quite fair 
omitted graphs considered discussion 
smv obvious strengths weaknesses easily characterized 
smv suffers number atomic formulas seen run time plotted function number atomic formulas 
largest number formulas handle batch tools including finished experiments atomic formulas 
suggests parallel composition automata atomic formulas smv suboptimal 
apparently better way composing automata 
varying number variables smv look alike 
tools complete experiments run time grows approximately exponentially number variables rate tools 
suggests bdd structure transitions behaves similarly bdds smv 
number states automata proportional values coefficients complete experiments coefficients larger fails experiments smaller values 
smv hand handle large coefficients moderate increase run time failure rate 
attribute behavior fact smv states transitions automata represented bdds available automata tools states represented explicitly 
say words ilp methods 
methods greatly superior automata general exhibit noticeable increase run time number variables number number atomic formulas number variables max 
coefficient size tools smv number atomic formulas number atomic formulas fig 

run time number completed experiments depending number atomic formulas test case 
formulas increase 
limiting factor ilps values coefficients cause failures overflows starting especially lp solve 
successful runs ilp tools fraction second failures due non terminating branch search overflow exceptions program errors 
omega especially notorious segmentation faults failure rate greatly increases values coefficients approach limit machine native integer float representation 
despite superiority ilp methods automata ones cases ilp methods fail automata methods efficiently 
interesting class examples characterized follows 
formula solution real numbers integer solutions exist sparse feasibility set set real solutions formula 
additionally direct implementation branch bound method incomplete feasibility set unbounded infinitely number variables number formulas max 
coefficient size tools smv number variables fig 

run time number completed experiments depending number variables single atomic formula 
smv finish experiments bar chart 
maximum coefficient value number variables number formulas tools smv log max 
coefficient log max 
coefficient fig 

run time number completed examples depending maximum values coefficients single atomic formula 
integer points checked 
claim holds extent heuristic rich top quality commercial tools cplex observed divergence examples trivial automata techniques 
omega approach stands rest ilp tools fourier motzkin method complete integer linear constraints 
unfortunately readily available implementation method unstable 
common weakness ilp approaches limit coefficient solution values due rounding errors native computer arithmetic 
quite easy construct example large integer coefficients cplex returns plainly wrong answer 
large coefficients extremely useful hardware verification operations long bit vectors translated presburger arithmetic 
conjecture efficiency ilp methods highly depends computer arithmetic fair comparison automata methods done ilp tools arbitrary precision arithmetic 
efficient decision procedures presburger arithmetic key solving formal verification problems 
developed decision procedure idea converting satisfiability problem model checking problem 
experimental comparisons show method efficient automata methods mona particularly formulas large coefficients 
approach bdds states transitions automata mona bdds similar structures transitions 
additional theoretical result provide tighter bounds number states automata 
automaton construction smv efficient 
advantage approach converting satisfiability problem model checking problem requires little implementation effort 
exploit existing smv model checker back employs efficient bdd package 
effort required translation presburger formula smv input language 
addition compare various automata ilp approaches suite parameterized randomly generated presburger formulas 
approach identify classes presburger formulas performs poorly efficiently 
instance ilp tools fail examples unbounded sparse solution sets handle large coefficients due native machine arithmetic 
automata tools sensitive parameters 
hand ilp approaches scale better number variables atomic formulas 
believe ilp tools unfair advantage automata methods due native arithmetic 
experiments done ilp tool support arbitrarily large integers tell difference 
automata approaches smv scales better coefficients size displays poorer performance large number atomic formulas compared 
perform equally number variables varied 
reason tools bdds states perform quantifier elimination manipulating automata directly 
quantifier alternation requires projection determinization automaton 
bdds states implementation determinization step particularly hard 
difference reasons relative efficiency approach 
extension approach full presburger arithmetic done combining traditional quantifier elimination method 
method introduces new type atomic formulas divisibility operator 
automaton construction easily extended handle 
believe approach may prove useful theories logics automata decision procedures 

tod amon gaetano borriello hu liu 
symbolic timing verification timing diagrams presburger formulas 
design automation conference pages 

alexandre hubert comon 
diophantine equations presburger arithmetic finite automata 
kirchner editor colloquium trees algebra programming caap volume lecture notes computer science pages 
springer verlag 

drechsler 
rtl datapath verification integer linear programming 
ieee vlsi design asia south pacific design automation conference bangalore pages 

bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 

buchi 
weak second order arithmetic finite automata 
zeitschrift fur mathematische logik und der mathematik 

burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation 

clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 

cooper 
theorem proving arithmetic multiplication 
machine intelligence volume pages new york 
american elsevier 

george dantzig curtis 
fourier motzkin elimination dual 
journal combinatorial theory 

jacob nils klarlund anders mller 
mona new techniques ws ws 
computer aided verification cav proceedings volume lncs 
springer verlag 

drechsler 
formal verification rt level computing design abstractions signal width reduction 
ifip international conference large scale integration vlsi montpellier pages 

kreisel krivine 
elements mathematical logic 

mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic publishers 

derek oppen 
pn upper bound complexity presburger arithmetic 
journal computer system sciences june 

presburger 
uber de eines systems der zahlen die addition als operation 
comptes rendus du premier des des pays slaves pages warsaw 

william pugh 
omega test fast practical integer programming algorithm dependence analysis 
supercomputing pages 

ranjan 
comparison presburger engines reachability 
hu vardi editors proceedings th international conference computer aided verification volume pages 
springer verlag 

williams 
fourier motzkin elimination extension integer programming problems 
journal combinatorial theory 

pierre wolper bernard 
construction automata linear arithmetic constraints 
proc 
th international conference tools algorithms construction analysis systems volume lecture notes computer science pages berlin march 
springer verlag 
