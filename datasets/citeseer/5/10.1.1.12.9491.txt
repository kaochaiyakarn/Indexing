ethernet approach grid computing douglas thain miron livny computer sciences department university wisconsin mail thain miron cs wisc edu despite competitors ethernet dominant protocol local area networking due simplicity robustness efficiency wide variety conditions technologies 
reflecting current software grid propose ethernet approach resource sharing effective reliable technique combining coarse grained software failures common poorly detailed 
approach involves placing simple important responsibilities client software acquire shared resources conservatively back periods failure inform competing clients resources contention 
simple scripting language simplifies encourages ethernet approach demonstrate grid computing scenarios including job submission disk allocation data replication 
conclude discussion limitations approach describe uniquely suited high level programming 

user designer distributed systems knows experience failures endemic large systems 
occur level individual transistors way high level software 
ordinary workstations fail reboot day 
tcp segments fails checksum 
estimate suggests large commodity clusters experience memory errors day despite error correcting hardware 
doubly true grid computing 
involved day day activities deploying operating systems need reminded tyranny failures frequently sources entirely unexpected 
known software tools techniques carefully manage capital investments data archives cpu clusters source failures frequently unmanaged resource free file descriptors free scratch space user home directory 
particular high levels abstraction integration tools command line shells necessary details analyze react precisely errors simply available 
fault single component contributors include blunt software interfaces conventions designed interactive users essential nature distributed systems 
suggest throw software start want investigate tools may expressive efficient reliable 
attack problem re idea ethernet arbitration protocol 
ethernet protocol simply endless retries set precise obligations placed clients encourage efficient shared resource worrying precisely source problem may 
propose ethernet idea simply hidden implementation technique exposed users administrators highest layers programming 
explore idea simple language fault tolerant shell exposes untyped failures manner similar exceptions languages 
example fragment retries program hour different configurations minutes try hour forany host xxx yyy zzz try minutes fetch file host filename language easily implemented greatly relieves user dealing complexity error conditions 
caution attitude reason error extend details necessary recovery 
show subtle details ethernet approach obeyed order achieve efficient allocation shared resources especially contention unexpected 
technique demonstrate grid computing scenarios conventional tools fail ethernet approach succeeds 
include submitting jobs scheduler sharing filesystem output buffer reading data potentially faulty servers 
state front ethernet approach applicable cases levels system 
useful uncontrolled systems highly variable performance description applies wide area computing systems 
applicable tightly controlled centralized systems 
describing details ethernet approach conclude discussion applicability 

programming grid pascal building pyramids imposing static structures built pushing heavy blocks place 
lisp building organisms 
alan perlis today deploying grid building pyramids stone mortar 
applications destined grid computing specialized aware role 
large existing codes written languages fortran java adapted grid environment glue languages perl tcl bourne shell 
glue programs serve insulate applications system preserving illusion reliable standalone system 
glue languages designed rapid prototyping system assembly user interface quite tasks 
suited grid computing 
grid jobs generally interactive 
may operate hours days months direct connection living user 
operate environments wildly different original designer 
glue programs environment appear plausible fall pieces grid environment 
major causes problem timing uncontrollable failures lack detail 
consider detail 
timing uncontrollable 
timing arbitrary programs far control ordinary user modern computing system 
consider nfs distributed file system 
client interface nfs implementations include way user specify long operation may retried considered failure 
parameter left system administrator typically values 
soft mounted file system indicates failure application retries exceed seconds 
hard mounted file system retries forever admitting failure application 
settings satisfy users 
users doing high throughput batch processing may perfectly happy suffer delay day simply convenience unsupervised recovery 
performing interactive may wish exposed failures seconds may retried 
delays unique nfs simply distributed file systems 
delays may forced waiting shared locks software licenses available disk space network bandwidth 
unexpected delays norm computing resource chosen heterogeneous group shared multiple users simply unreliable 
fundamental operation may take second may take hour user know 
failures lack detail 
systems built posix processes exchange little information interface programs 
posix programs permitted exit ways normally abnormally 
normal termination leaves integer result meaning program specific abnormal termination leaves signal number indicating system level problem segmentation fault division zero 
division error types somewhat analogous function exception oriented language may return ordinary integer number exceptions 
indicates function successfully computed result indicates result computed 
tempted distinction carry typed exceptions processes 
reality posix programs impractical 
consider command line cp invokes command cp copy file named file named ways command succeed fail minimum distinguish cases 
file copied 

file exist 

file system offline 

program cp loaded run 
distinctions important guide recovery actions 
case ought return immediately indicating success 
second case fault lies submitter command ought return immediately indicating failure 
third fourth cases may wish retry operation times reasonable expectation system repair 
sadly distinctions rarely available 
case success program exits code 
cases distinguishable 
second case programs examine arguments exit normally result 
third case appear description exceptional 
programs errors detected ordinary failure call resulting normal exit code 
fortran programs failures result inability execute open causing abnormal exit 
fourth case may distinguished failure create process error exit code 
failures runtime dynamic linking result indistinguishable exit code 
may fairly observed distinctions may programs time 
example versions grep tool searching files different normal exit codes distinguish file accessible matches 
programs rare exists convention codes 
similar discussion applies interfaces local process invocation 
example gram remote process invocation interface provides unique error codes detailing gram may fail provide exit status complete jobs 
file transfer protocol uses single code represent error discovered remote file system 
afs distributed file system uses error code represent authorization failure credential expiration 
examples abound 
lack failure detail may nearly sort programmable interface 
consequences 
argued situation hopeless programs interfaces archaic replaced modern invocation system hides errors provides details gives user better control timing process level 
readily admit making argument relating interpreted programs distributed systems 
live world populated programs 
rewriting correspond new interaction simply practical 
simply situation wish explore possibility constructing reliable system components 
particular believe ethernet philosophy resource management appropriate control information limited 
particular want language system assists detection handling failures unduly clutter program recovery code simplifies alternate resources recovery returns control timing user 
goals similar raised pun intended favor exception language feature dealing failures 
see exceptions different character failure detail unavailable 

ethernet approach allocating resources strive avoid disaster attain optimum 
reviewing properties ethernet applicable management computing resources networks 
carrier sense 
ethernet client consume resources 
resource wait sufficient capacity idle perform acquisition protocol allocate needs 
network means listening silent period storage device may mean watching sufficient space free 
acquisition protocol permitted occasionally fail allocating resource resource 
permitted second property collision detect 
client wary newly gained resource 
may client known collision 
may due race condition acquisition protocol underlying medium simply underlying flaws 
order detect collisions client observe effects actions simply assume success 
exponential backoff 
collisions suggest shortterm load system greater served 
central authority clients individually responsible reducing instantaneous load delaying trying increasing delay 
course problem solved clients return instant asymmetry random factor needed discourage cascading collisions 
limited allocation 
fairly acquiring resource collision client release periodically permit compete acquisition protocol 
requirement clients may starved service 
careful preserve requirements left different protocol 
example unable provide form carrier detect ethernet protocol aloha satellite network protocol 
key difference aloha client consumes resources detecting collisions fact 
see aloha algorithm implemented knowledge underlying system significant cost performance load 
original aloha network saturate offered load percent 
detailed properties may infer philosophical design properties may borrow software systems 
clients responsible efficiency 
computer systems full resources major minor central authority allocation management 
grid computing clients accept responsibility ensuring resources efficiently 
need necessarily preserve absolute fairness certainly starve waiting clients 
failures may turned performance problem 
sufficiently powerful tools resetting state harnessing alternate resources minor failure may turned reallocation resources cost performance 
pointed earlier nfs different users wish strike balance differently 
keep user interface simple 
consider ethernet switches ip routers see user interface simple packets go packets come implementation independent administrative interface snmp debugging tuning complex implementation dependent 
approach allow simple language expression allowing possibility debugging management back channels 

fault tolerant shell explore ethernet approach introduce scripting language called fault tolerant shell 
techniques describe possible language specialized syntax serves examples succinct watertight 
sketch unique features language 
details may technical report 
shell nested procedural scripting language atoms external commands 
compound procedures may built combining atoms structural elements 
procedure atomic compound return value simply succeeds fails 
external command succeeds exits normally exit code zero fails 
compound procedures succeed fail contents 
sequence atoms known group 
group fetches archive web server wget server file tar gz gunzip file tar gz tar file tar group executed sequentially succeeds components succeed 
component fails entire group fails immediately executing remainder 
gunzip fail entire group fail executing tar 
try construct primary tool ethernet approach heart 
try attempts execute don making observation 
group time limit 
contained group may executed number times limit 
succeeds try construct succeeds 
limit expires success try expression fails 
limit expire execution procedure procedure forcibly terminated resources consumes freed 
example previous example may attempted minutes try minutes wget server file tar gz gunzip file tar gz tar file tar contained group fail try delays attempting 
base delay second doubled failure maximum hour 
delay interval multiplied random factor order distribute expected values 
expected time operation unknown try may expressed maximum number attempts time limit try times try hour times 
try may catch react failures manner exception programming languages 
simple command failure equivalent failed external command throw command languages 
exception detail provided program available structured way shell 
example try times wget server file tar gz catch rm file tar gz failure forany construct attempts execute single alternative group success 
succeeds forany succeeds setting alternative variable successful value 
example fragment attempts retrieve file named servers forany server xxx yyy zzz wget server file tar gz echo got file server name suggests forall construct attempts execute alternatives parallel 
successfully complete forall returns success 
fails outstanding branches aborted forall returns failure 
example fragment attempts retrieve files named server 
forall file xxx yyy zzz wget server file number alternatives forall may execute simultaneously course limited number local resources limits memory disk space fixed kernel tables 
creation processes governed ethernet algorithm similar try 
address issue behavior try occupy attention 
try compound procedure result success failure may nested allowing failure conditions component 
example attempt retrieve file limited minutes combined unpacking group limited minute attempts whichever expires 
outer time limit minutes applies regardless depth nesting 
try minutes try minutes wget server file tar gz try minute times gunzip file tar gz tar file tar try may placed forany forall add resilience branch 
may placed outside order create tree cancellation time 
example fragment attempts retrieve file hour limiting attempt server minutes try hour forany server xxx yyy zzz try minutes wget server file important note applied blindly 
programs constructed understanding processes aborted restarted 
potentially repeated actions idempotent 
example rm command option instruct return success named file exist 
abstractions require effort 
due ways single command may repeated partially completion input output streams program may quite confused partial results 
shells problem attacked external storage hold results creating simple form transaction 
example fragment redirects output error streams file tmp pausing output command completes try times run simulation tmp cat approach introduces new problems 
user worry cleaning external storage failure provide unique names way process ids identifiers 
addresses problem allowing programs redirect standard input output privately named variables posix pipes 
variables may stored shell memory directly may kept appropriate place filesystem user administrator policy 
redirection variables takes form redirection files dash prefixes arrow operator try times run simulation tmp cat currently implemented posix interpreted language manner similar bourne shells 
executing script keeps log varying detail program 
online post mortem analysis may determine detailed reasons process failure exact resources execute program frequency failure branch forth 
creates new child process allocates new posix session id 
posix allows entire process session terminated single system call allowing easy cleanup try timeouts occur 
processes gently requested exit sigterm forcibly killed 
effective cases technique limits 
process may escape control manually creating new session id appropriate resource management tool security mechanism 
exactly problem occurs script executes external command 
case parent shell child shell grandchildren run different process groups 
handles gracefully trapping warning parent reacting killing children 
timeout leads forcible kill shorter child script passed environment variable 
technique worked far practice acknowledge heavily loaded system delivery signals may delayed possible grandchild escape destruction 
operating systems windows nt child processes may created involuntary nested groupings allowing reliable destruction termination 
reliable implementation platform 
race condition small observed unfortunate proper facility available posix 

applications demonstrate resilience ethernet approach scenarios relevant grid computing job submission disk allocation data transfer 
case demonstrate system performance scales number clients accessing shared resource 
preface explorations caveat offered network researchers real ethernet operated way 
intention demonstrate resilience resource contention 
grid computing systems suffer frequent unexpected bursts contention considered appropriate continuous mode operation 
systems engineered sufficient resources production loads 
initiation ethernet protocols deal contention logged noted administrators persistent overloads may accommodated 
evaluate scenario show possible client algorithms implemented minor variations scripts written 
fixed client aggressively repeats assigned delay regard sort failure 
aloha client uses ordinary try structure repeat unit exponential backoff random factor case failure 
ethernet client uses structure additionally adds small piece code perform carrier sense accessing resource 
see small additions significant effect system stability 
case show fixed clients scale poorly high loads frequently crashing zero throughput 
aloha clients described engineering 
affected significantly resource contention generally manage maintain level throughput allowing load worked 
ethernet clients maintain higher levels throughput high loads measuring resource state backing contention 
scenario consists large number clients attempting submit jobs condor system 
trying run submitter communicate condor 
agent works behalf grid user keeping jobs persistent queue finding jobs submitted number submitters ethernet aloha fixed 
scalability job submission sites may run 
condor submitter standalone executable examines job description file connects transfers necessary details files 
expect large numbers submitters compete systems chimera manage large trees dependent tasks user dispatching new jobs old ones complete 
composing scenario postulated contention number expected resources network connections physical memory disk job queue stored 
fact came unexpected source number available file descriptors fds 
systems go great lengths manage physical resources disks memories cpus 
overlooked resource just vital system heavy load 
aloha client scenario represented simple program try minutes condor submit submit job ethernet variant senses carrier competing clients number free fds falls critical value forces client defer try minutes cut proc sys fs file nr lt failure condor submit submit job shows throughput varying load submitters competing 
point represents number jobs submitted minutes number submitters 
fixed client fails completely load submitters 
aloha client settles time available fds jobs submitted 
timeline aloha submitter time available fds jobs submitted 
timeline ethernet submitter unstable throughput jobs minutes continues operate load increases 
ethernet client maintains percent peak performance load due competition managed resources cpu 
figures clarify reason throughput difference aloha ethernet clients 
figures show progress clients continuously submitting jobs course minutes 
heavy dotted line shows progressive number jobs submitted lighter line shows number available fds 
aloha clients immediately consume fds immediately fail backoff 
random retry factor begins distribute clients time consumption fds begins rise normal levels 
points number available fds spikes upwards 
due failing allocate fds 
turn causes connected clients fail backoff serving sort broadcast jam load extraordinarily high 
ethernet client attempts preserve critical value file descriptors 
result acceptable number clients continually running keeping fds high utilization 
second scenario producer consumer problem shared filesystem 
number jobs running remote cluster produce data size known total files consumed number producers ethernet aloha fixed 
buffer throughput total collisions number producers ethernet aloha fixed 
buffer collisions hand 
run place output files shared filesystem buffer mb consumer process collects outputs transmits remote archive manner similar kangaroo 
producer continuous loop producing output file random size mb second 
output written deleted fixed aloha ethernet retry technique applied 
output completed atomically renamed form done advise consumer complete 
consumer continuously reads files rate mb deleting consumed 
previous scenario reasonable fixed value give client knowledge resources running low 
problem disk space harder client may know size output 
client scenario advantage observing files buffer complete incomplete 
estimate available disk space ethernet client assumes incomplete items buffer size average complete files subtracts free disk space reported file system 
space remaining client proceeds write fails backs 
shows relative throughput client discipline 
manner quite similar scenario time transfers collisions 
aloha file reader time transfers 
ethernet file reader fixed aloha disciplines scale 
ethernet approach scales acceptably falling slightly heavy load 
reader may question wise design system mechanism allocating storage space independently data transfer nest srb srm 
certainly encourage devices deployed place output data written clear allocation policy appropriate output sizes known 
actual process allocation may subject contention 
hold system resources may source contention heavy loads 
third scenario demonstrate programmable solution problem black holes 
black holes services endlessly block terminate interacting client process slowly bringing system halt 
experimental setup consists web servers replicate read file service clients 
client repeatedly attempts read mb file server chosen random 
takes seconds ideal conditions 
server single threaded allowing client time transfer data 
permanent black hole 
permits clients connect provide data voluntarily disconnect 
aloha client system problem 
select timeout small wait unnecessarily accidentally connect black hole 
hand timeout small may accidentally abort legitimate transfer delayed reasons 
choose timeout unsatisfactory basis round number try seconds forany host xxx yyy zzz try seconds wget host data ethernet client attacks problem developing inexpensive test see server available 
simply attempts fetch known byte file 
succeed proceeds download large file fair assurance server working 
fail server may black hole simply heavily loaded 
case forany chooses server 
example try seconds forany host xxx yyy zzz try seconds wget host flag try seconds wget host data figures compare throughput approaches 
predictably aloha clients occasionally fall single black hole server wait full seconds failing trying 
ethernet clients effective suffer 

discussion strength ethernet approach wide applicability performance robustness variety situations 
source contention unknown programmer level throughput maintained simple exponential backoff burst 
knowledge system available appropriate carrier sense implemented improve throughput 
advocate blindness cause error optimal 
prefer tools describe errors sufficient level detail 
constructing interface right level detail difficult done way satisfies users 
consider ethernet approach valuable necessary ideal 
major weakness ethernet approach lies detecting errors specification task 
example remotely executed job may fail executable corrupt arguments simply wrong 
blind ethernet approach may attempt job hope success 
situations handled 
appropriate solution gain information positive activity 
example may test executable locally short input file submitting 
program attempted multiple remote sites declared failure 
presence files named arguments tested execution 
tests absolute guarantee serves reduce possibility specification errors discovered runtime 
idea great effect tool configuring source code details compiler operating system 
works simply attempting user desires attempting reason 
example ability memory map file probed compiling small program just inferences system details 
far reliable portable test 
ethernet approach known lower level software 
example nfs protocol employs exponential backoff presence failures wget utility employed built facility retrying failed transfers 
similar ideas historically process level attempt hide user ugly realities reliable software 
techniques necessary glue languages reasons 
underlying tools clever costs communication process invocation source failure resource contention clever tools take control 
tools may retry failures needs calling user wasting resources time 
conventional languages canceling runaway activity quite complex aborted thread may leave memory monitors resources unknown state 
contrast posix process natural unit cancellation associates thread control resources consumes 
memory freed files released network connections forcibly broken triggering exceptions peers 
ability cleanly abort running task ethernet approach uniquely suited high level programming 

related number methods proposed dealing failures timeouts general purpose languages systematic way 
widespread language structure dealing failures exception 
various languages differ critical elements exception concept requirement procedure declare exception types may throw 
precise problem driven argument 
side steps debate untyped exceptions 
notion distinct error value short circuits sequential evaluation appears languages 
early example feature snobol 
distinct error value shell languages allow explicit short circuiting group commands delimiter 
behavior implicit 
brittle property bears similarity special switch shell causes failure sequential list abort entire script 
integration time alternation generalpurpose languages successful 
practical tools attack problem running command nodes cluster 
notion alternative command forany succeeding completion branches proposed hoare csp 
variation introduced ada permits default timeout select permit real time termination constraints 
expresses expiration time exception unwinds stack case languages 
example posix alarm clock raises signal generates new context handle raising exception existing threads 
mechanism associate timeout running thread forcible cancellation threads running language difficult impossible thread runtime associate program resources thread allocated 

posit computing central challenge mess met 
current grid computing systems complex defy ability specialists deploy going extraordinary lengths tune debug 
admit contributing fair share mess 
systems hard part sensitive extraordinary set unexpected failure modes 
contribution proposition failures hidden depths system 
likelihood failure mechanisms fault tolerance expressed highest levels programming simple terms retry alternation 
necessary users designers assemble systems disparate components expected choose right remediation strategy 
just single customer disrupt movie theater misbehaved client ruin ethernet approach 
clients service trusted play fairly solution physically isolate 
accomplished certain extent systems allowed guaranteed allocations resources 
systems uncontrolled shared resources entry point requests 
ticket window movie theater tcp port web server system resource consumed cooperatively 
ethernet approach needed resources 
drawing existing languages proposed simple language allow user express fault tolerance literally user limit tolerance failures simple concise manner 
ethernet approach distributed computing seeks avoid disasters providing acceptable performance minimum fuss wide variety situations 
information may www cs wisc edu condor 

acknowledgments gratefully acknowledge fruitful conversations members condor team including peter keller marvin solomon 
supported part lawrence landweber ncr fellowship wisconsin research foundation 
abelson sussman sussman 
structure interpretation computer programs 
mit press cambridge massachusetts 
abramson 
aloha system alternative computer communication 
proceedings fall joint computer conference pages 
baru moore rajasekar wan 
sdsc storage resource broker 
proceedings cascon toronto canada 
bent leroy roy stanley dusseau arpaci dusseau livny 
flexibility manageability performance grid storage appliance 
proceedings eleventh ieee symposium high performance distributed computing edinburgh scotland july 
black 
exception handling case 
technical report tr university washington computer sciences department january 
boggs mogul kent 
measured capacity ethernet myths reality 
technical report research report western research laboratory september 
case 
simple network management protocol 
request comments internet engineering task force 
czajkowski foster karonis kesselman martin smith tuecke 
resource management architecture metacomputing systems 
proceedings ipps spdp workshop job scheduling strategies parallel processing pages 
dijkstra 
computer science 
communications acm march 
foster wilde zhou 
chimera virtual data system representing querying automating data derivation 
proceedings th conference scientific statistical database management edinburgh scotland july 

parallel distributed shell 
www llnl gov linux html 
goodenough 
exception handling issues proposed notation 
communications acm december 
griswold 
snobol programming language 
prentice hall englewood cliffs new jersey 
hoare 
communicating sequential processes 
prentice hall international 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer february 
ieee ansi 
portable operating system interface posix part system application program interface api language 
lampson 
hints computer system design 
proceedings th acm symposium operating systems principles volume pages 
long muir golding 
longitudinal survey internet host reliability 
symposium reliable distributed systems pages 
mackenzie mcgrath friedman 
generating automatic configuration scripts 
www gnu org software 
metcalfe boggs 
ethernet distributed packet switching local computer networks 
communications acm 
milojicic fu munoz 
increasing relevance memory hardware errors case recoverable programming models 
proceedings th acm sigops european workshop september 
postel 
ftp file transfer protocol specification 
internet engineering task force request comments rfc june 
sandberg goldberg kleiman walsh lyon 
design implementation sun network filesystem 
proceedings summer usenix conference pages 
shoshani sim gu 
storage resource managers middleware components grid storage 
proceedings nineteenth ieee symposium mass storage systems 
stone partridge 
crc tcp checksum disagree 
proceedings acm sigcomm stockholm sweden august 
taft duff 
ada manual volume lecture notes computer science 
springer verlag 
thain 
fault tolerant cookbook 
technical report tr university wisconsin computer sciences department 
thain 
son livny 
kangaroo approach data movement grid 
proceedings tenth ieee symposium high performance distributed computing hpdc san francisco california august 
thain livny 
error scope computational grid 
proceedings th ieee symposium high performance distributed computing hpdc july 
