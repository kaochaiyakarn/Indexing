applying patterns develop extensible orb middleware article submitted ieee communications magazine special issue design patterns 
distributed object computing forms basis application middleware 
heart distributed object computing object request brokers orbs automate tedious error prone distributed programming tasks 
article presents case study key design patterns needed develop orbs dynamically configured evolved specific application requirements system characteristics 
trends shaping commercial software development 
software industry moving away programming applications scratch integrating applications reusable components activex java beans 
second great demand distribution technology remote method invocation message oriented middleware simplifies application collaboration enterprises 
third increasing efforts define standard software infrastructures corba allow applications heterogeneous environments 
generation distributed applications video demand teleconferencing avionics require quality service qos guarantees latency bandwidth reliability :10.1.1.27.1465
key software technology supporting trends distributed object computing doc middleware 
doc middleware facilitates collaboration local remote application components heterogeneous distributed environments 
research supported part boeing nsf ncr siemens sprint 
douglas schmidt chris cs wustl edu department computer science washington university st louis mo usa goal doc middleware eliminate tedious error prone non portable aspects developing maintaining distributed applications 
particular doc middleware automates common network programming tasks object location object activation parameter marshaling fault recovery security 
heart doc middleware object request brokers orbs corba dcom java rmi 
article describes design patterns develop dynamically configurable orb middleware extended maintained easily statically configured middleware 
pattern represents recurring solution software development problem particular context 
patterns help alleviate continual re discovery re invention software concepts components documenting proven solutions standard software development problems 
instance patterns useful documenting structure participants common communication software micro architectures reactors active objects brokers 
patterns generalizations object structures successfully build flexible efficient event driven concurrent communication software orbs 
focus discussion article presents case study illustrates applied patterns develop ace orb tao 
tao freely available highly extensible orb targeted applications real time quality service qos requirements 
applications include avionics mission computers telecommunication switch management systems electronic medical imaging systems 
novel aspect tao extensible design customized dynamically meet specific application qos requirements network endsystem characteristics 
overview corba tao overview corba orb model corba object request brokers orbs allow clients invoke operations distributed objects concern object location programming language os platform communication protocols interconnects hardware 
illustrates components corba model collaborate provide portability interoperability transparency mentioned 
illustrates components corba model collaborate provide portability interoperability transparency outlined 
components corba model client side stubs marshal client operations requests transmitted servants standard internet inter orb protocol iiop implemented orb core 
server side orb core receives requests passes object adapter 
object adapter requests skeletons requests dispatch appropriate application level servant operation 
overview tao tao orb endsystem contains network interface operating system communication protocol corba middleware components features shown 
tao standard omg corba model enhancements designed overcome shortcomings conventional orbs high performance realtime applications real time idl stubs skeletons addition marshaling operation parameters tao components tao real time orb real time idl stubs skeletons designed ensure application timing requirements specified enforced 
real time object adapter orb core addition associating servants orb demultiplexing incoming requests servants tao object adapter oa implementation dispatches servant operations accordance various real time scheduling strategies rate monotonic maximal urgency 
orb qos interface tao qos interface designed map real time processing requirements orb endsystem network resources 
common real time processing requirements include latency bounds periodic scheduling deadlines 
common orb endsystem network resources include cpu memory network connections storage devices 
real time subsystem tao real time subsystem performs admission control assigns priorities real time threads schedulability application components orb endsystem resources guaranteed 
high speed network adapters tao subsystem contains daisy chained interconnect comprising number atm port interconnect controller apic chips 
apic designed sustain aggregate bi directional data rate gbps 
tao runs conventional real time interconnects vme multi processor shared memory environments 
patterns build extensible orb middleware section uses tao case study illustrate patterns help application developers orb developers build maintain extend communication software reducing coupling components 
patterns described section limited orbs communication middleware 
applied communication application domains including telecom call processing switching avionics flight control systems multimedia teleconferencing distributed interactive simulations 
illustrates patterns develop extensible orb architecture tao 
scope relationships patterns tao section describe pattern detail discuss patterns tao 
goal focus key patterns show improve extensibility maintainability performance complex orb middleware 
point additional material pattern 
discussion outline forces underlie main design challenges related developing extensible maintainable orbs 
explain absence patterns leaves forces unresolved 
addition describe patterns resolve forces illustrate tao implements patterns create extensible maintainable real time orb 
encapsulate low level system mechanisms wrapper facade pattern context role orb shield applicationspecific clients servants details low level systems programming 
orb developers application developers responsible tedious low level tasks demultiplexing events sending receiving requests network spawning threads execute requests concurrently 
problem developing orb difficult 
difficult developers low level system apis written languages causes problems orb developers intimate knowledge os platforms implementing orb systemlevel apis forces developers deal non portable tedious error prone os idiosyncrasies untyped socket handles identify connection endpoints 
apis portable os platforms 
example win lacks pthreads subtly different semantics sockets 
increased maintenance effort way build orb handle portability variations explicit conditional compilation directives orb source code 
conditional compilation address platform specific variations points increases complexity source code 
hard maintain extend orbs platform specific details scattered implementation files 
inconsistent programming paradigms system mechanisms accessed style function calls cause impedance mismatch oo programming style supported language implement tao 
avoid accessing low level system mechanisms implementing orb 
solution wrapper facade pattern effective way avoid accessing system mechanisms directly wrapper facade pattern 
pattern variant facade pattern 
intent facade pattern simplify interface subsystem 
intent wrapper facade pattern specific provides type safe modular portable class interfaces encapsulate lower level stand system mechanisms sockets select pthreads 
general wrapper facade pattern applied existing system level apis non portable non type safe 
wrapper facade pattern tao tao accesses system mechanisms wrapper facades provided ace 
ace oo framework implements core concurrency distribution patterns communication software 
provides reusable wrapper facades framework components targeted developers highperformance real time applications services wide range os platforms including win versions unix real time operating systems vxworks chorus 
illustrates ace wrapper facades improve tao robustness portability encapsulating enhancing native os concurrency communication memory management event demultiplexing dynamic linking mechanisms type safe oo interfaces 
oo tao wrapper facade encapsulation provided ace alleviates need tao access weakly typed system mechanisms directly 
compilers detect type system violations compiletime run time 
ace wrapper facades features eliminate performance penalties incurred additional type safety layer abstraction 
instance inlining avoid overhead calling small method calls 
likewise static methods avoid overhead passing pointer invocation 
ace wrapper facades solve common development problem just step developing extensible maintainable orb 
remaining patterns described section build encapsulation provided ace wrapper facades address challenging orb design issues 
demultiplexing orb core events reactor pattern context orb core responsible demultiplexing events multiple clients dispatching associated event handlers 
instance server side orb core listens new client connections reads writes giop requests responses connected clients 
ensure responsiveness multiple clients orb core uses os event demultiplexing mechanisms wait connection read events occur multiple socket handles 
common event demultiplexing mechanisms completion ports threads 
problem way develop orb core hard code event demultiplexing mechanism 
relying just mechanism undesirable single scheme efficient platforms application requirements 
instance asynchronous completion ports efficient windows nt synchronous threads efficient demultiplexing mechanism solaris 
way develop orb core tightly couple event demultiplexing code code performs giop protocol processing 
case demultiplexing code reused blackbox component similar communication middleware applications servers video demand applications 
new orb strategies threading object adapter request scheduling algorithms introduced substantial portions orb core re written 
orb implementation render independent specific event demultiplexing mechanism decouple demultiplexing code handling code 
solution reactor pattern effective way reduce coupling increase extensibility orb core apply reactor pattern 
pattern supports synchronous demultiplexing dispatching multiple event handlers triggered events arrive concurrently multiple sources 
reactor pattern simplifies event driven applications integrating demultiplexing events dispatching corresponding event handlers 
general reactor pattern applied application orb core handle events multiple clients concurrently single low level mechanism 
important note applying wrapper facade pattern sufficient resolve problems outlined 
wrapper facade select may improve orb core portability somewhat 
pattern resolve need completely decouple low level event demultiplexing logic higher level client request processing logic orb core 
reactor pattern tao tao uses reactor pattern drive main event loop orb core shown 
tao server reactor pattern tao event loop ates event loop orb core reactor remains blocked select event occurs 
giop request event occurs reactor request appropriate event handler giop connection handler associated connected socket 
calls connection handler handle input dispatches request tao object adapter 
object adapter request appropriate upcall method servant dispatches upcall 
reactor pattern enhances extensibility tao decoupling event handling portions orb core underlying os event demultiplexing mechanisms 
example event demultiplexing system call windows nt unix platforms 
reactor pattern simplifies configuration new event handlers 
instance adding connection handler performs encryption decryption traffic affect reactor implementation 
managing connections orb acceptor connector pattern context connection management key responsibility orb core 
instance orb core implements iiop protocol establish tcp connections initialize protocol handlers iiop server endpoint 
localizing connection management logic orb core application specific servants able focus solely processing client requests 
orb core limited running iiop tcp transports 
instance tcp transfer giop requests reliably flow control congestion control algorithms may preclude real time protocol 
likewise may efficient shared memory transport mechanism clients servants located endsystem 
ideal orb core flexible support multiple transport mechanisms 
problem corba architecture explicitly decouples connection management tasks performed orb core request processing performed application servant 
way implement orb internal connection management activities low level network apis sockets 
likewise connection establishment protocol tightly coupled communication protocol 
design approach yields drawbacks 
inflexible orb connection management data structures algorithms closely intertwined substantial effort required modify orb core 
instance tight coupling orb socket api hard change underlying transport mechanism shared memory sockets 
intrusive time consuming port tightly coupled orb core new networks atm different network programming apis tli win named pipes 

inefficient internal orb strategies optimized allowing orb developers application developers select appropriate implementations late design cycle extensive performance profiling 
example multi threaded real time orb client may need store connection endpoints thread specific storage reduce lock contention overhead 
similarly concurrency strategy corba server require connection run thread eliminate request locking overhead 
connection management mechanism hard coded tightly bound internal orb strategies hard accommodate efficient new strategies 
orb core connection management components support multiple transports allow behaviors re configured flexibly late development cycle 
solution acceptor connector pattern effective way increase flexibility orb core connection management initialization apply acceptor connector pattern :10.1.1.40.8396
pattern decouples connection initialization processing performed connection endpoint initialized 
acceptor component pattern responsible passive initialization server side orb core 
conversely connector component pattern responsible active initialization clientside orb core 
general acceptor connector pattern applied client server middleware allow flexible configuration network programming apis maintain proper separation initialization roles 
acceptor connector pattern tao tao uses acceptor connector pattern conjunction reactor pattern handle setup connections giop iiop communication 
tao client side orb core connector initiates connections servers response method invocation explicit binding remote object 
tao server side orb core acceptors creates giop connection handler service new client connection handlers derive handler enable dispatched automatically 
tao acceptors configured transport mechanisms sockets tli provided ace wrapper facades 
addition tao acceptor connector custom strategies systematically select appropriate concurrency mechanism described section 
illustrates acceptor connector strategies tao orb core 
client invokes acceptor connector pattern tao connection management remote operation connect call strategy connector 
connector consults connection strategy obtain connection 
example client uses caching connection strategy connections server 
creates new connections existing connections 
strategy minimizes connection setup time reducing request latency 
server side orb core reactor notifies tao strategy acceptor accept newly connected clients create connection handlers 
strategy acceptor delegates choice concurrency mechanism tao concurrency strategies reactive thread request thread connection priority described section 
connection handler activated orb core performs requisite giop protocol processing connection ultimately dispatches request appropriate servant tao object adapter 
simplifying orb concurrency active object pattern context object adapter dispatched client request appropriate servant servant executes request 
execution may occur thread control connection handler received 
conversely execution may occur different thread concurrent request executions 
corba specification address issue concurrency orb servant leaving decision orb developers users 
important develop orbs manage concurrent processing efficiently 
concurrency allows long running operations execute simultaneously impeding progress operations 
likewise preemptive multithreading crucial minimize dispatch latency realtime systems 
problem orbs concurrency architecture programmed directly os platform multi threading api posix pthreads api 
drawbacks approach non portable threading apis tend platform specific 
industry standards posix pthreads available widely os platforms including win vxworks psos 
direct mapping apis clear mapping functionality 
instance posix pthreads supports deferred thread cancellation win threads 
win thread termination api documentation strongly recommends release thread resources exit 
pthreads non portable unix vendors implement different drafts standard 
hard program correctly programming multithreaded orb hard application orb developers ensure access shared data serialized properly orb servants 
addition techniques required robustly terminate servants execute concurrently multiple threads complicated non portable 
non extensible choice orb concurrency strategy depends largely external factors application requirements network endsystem characteristics 
instance reactive single threading appropriate strategy short duration compute bound requests uniprocessor 
external factors change important orb extended handle alternative concurrency strategies thread request thread pool thread priority 
orbs developed low level threading apis hard extend new concurrency strategies affecting orb components 
orb support simple extensible portable concurrency mechanism 
solution active object pattern effective way increase portability correctness extensibility orb concurrency strategies apply active object pattern 
pattern provides higher level concurrency architecture decouples thread initially receives processes client request thread ultimately executes request 
wrapper facades provide basis portability simply thin low level system mechanisms 
facade behavior may vary platforms 
active object pattern defines higher level concurrency abstraction shields tao complexity low level thread facades 
raising level abstraction orb developers active object pattern easier define portable flexible easy program orb concurrency strategies 
general active object pattern application simplified centralizing point concurrency decisions 
pattern gives developers insert decision points request initial reception ultimate execution 
instance developers decide spawn thread connection thread request 
active object pattern tao tao uses active object pattern transparently allow giop connection handler execute requests reactively borrowing reactor thread control actively running thread control 
sequence steps 
processing shown triggered reactor notifies connection handler event pending 
currently configured strategy reactive thread connection thread request active object pattern structure tao concurrency strategies handler determines active passive acts accordingly 
flexibility achieved inheriting tao orb core connection handling classes ace base class called task 
process request concurrently handler simply invokes task activate method 
method spawns new thread invokes standard hook method 
active passive handler ultimately process request 
reducing lock contention priority inversions thread specific storage pattern context active object pattern allows applications components orb operate variety concurrency strategies enforced orb 
primary drawback concurrency need serialize access shared resources delete pointers created orb init orb initialization factory described section 
common way achieve serialization mutual exclusion locks resource shared multiple threads 
acquiring releasing locks expensive negating potential performance benefits concurrency 
problem theory multi threading orb improve performance executing multiple instruction streams simultaneously 
addition multi threading simplify internal orb design allowing thread execute synchronously reactively asynchronously 
practice multi threaded orbs perform better worse single threaded orbs due cost acquiring releasing locks priority inversions arise high low priority threads contend locks 
addition multi threaded orbs hard program due complex concurrency control protocols required avoid race conditions deadlocks 
solution thread specific storage pattern effective way minimize amount locking required serialize access resources shared orb thread specific storage pattern 
pattern allows multiple threads orb logically global access point retrieve thread specific data incurring locking overhead access 
thread specific storage pattern tao tao uses thread specific storage pattern minimize lock contention priority inversion real time applications 
internally thread tao stores orb core object adapter components reactor acceptor connector thread specific storage 
thread accesses components retrieved akey index thread internal thread specific state shown 
additional locking required access orb state 
thread specific storage pattern tao support interchangeable orb behaviors strategy pattern context alternative concurrency architectures described just strategies extensible orb may required support 
general extensible orbs support multiple request demultiplexing scheduling strategies object adapters multiple connection establishment request transfer concurrent request processing strategies orb cores 
problem way develop orb provide static non extensible strategies typically configured ways preprocessor macros strategies determined value preprocessor macros 
example threading available selected platforms conditional compilation select appropriate concurrency architecture 
command line options strategies controlled presence absence flags command line 
instance command line options enable various orb concurrency strategies 
configuration approaches widely inflexible 
instance preprocessor macros support compile time strategy selection command line options convey limited amount information orb 
hard coded configuration strategies completely divorced code affect 
orb components want options know existence understand range values provide appropriate implementation value 
restrictions hard develop highly extensible orbs composed transparently configurable strategies 
orb permit replacement subsets component strategies manner orthogonal transparent orb components encapsulate state behavior strategy changes component orb 
solution strategy pattern effective way support multiple transparently pluggable orb strategies apply strategy pattern 
pattern factors similarity algorithmic alternatives explicitly associates name strategy algorithm state 
strategy pattern removes lexical dependencies strategy implementations applications access specialized behaviors common base class interfaces 
general strategy pattern application behavior configured multiple strategies interchanged seamlessly 
strategy pattern tao tao uses variety communication concurrency demultiplexing real time scheduling dispatching strategies factor behaviors typically hard coded conventional orbs 
strategies illustrated 
instance tao supports multiple request demultiplexing strategies perfect hashing vs active demultiplexing scheduling strategies fifo vs rate monotonic vs earliest deadline object adapter connection management strategies process wide cached connections vs strategy application concurrency scheduling demultiplexing protocol avionics thread priority rate perfect hashing vme backplane medical imaging thread connection fifo active demultiplexing tcp ip table example applications orb strategy configurations strategies tao thread specific cached connections handler concurrency strategies reactive vs variations active objects orb core 
consolidate orb strategies factory pattern context potential strategy variants supported tao 
table shows simple example strategies create configurations tao 
avionics application hard real time requirements electronic medical imaging application high throughput requirements 
general forces resolved compose orb strategies correctly need ensure configuration semantically compatible strategies simplify management large number individual strategies 
problem undesirable side effect strategy pattern extensively complex software orbs extensibility hard manage reasons software complexity orb source code hard coded strategy types 
independent strategies act harmony provide comprehensive solution particular application domains real time avionics 
identifying strategies individually name requires tedious replacement selected strategies domain potentially different set strategies domain 
semantic incompatibilities possible certain orb strategies interact compatibly 
instance fifo strategy scheduling requests shown table thread priority concurrency architecture 
problem stems semantic incompatibilities scheduling requests order arrival fifo queueing versus dispatching requests relative priorities preemptive priority thread dispatching 
strategies useful certain preconditions met 
instance perfect hashing demultiplexing strategy generally feasible systems statically configure servants line 
highly configurable orb reduce complexities required managing myriad strategies enforce semantic consistency combining discrete strategies 
solution factory pattern effective way consolidate multiple orb strategies semantically compatible configurations apply factory pattern 
pattern provides single access point integrates strategies configure orb 
concrete subclasses aggregate semantically compatible applicationspecific domain specific strategies replaced wholesale semantically meaningful ways 
general factory pattern application needs consolidate configuration strategies having multiple variations 
factory pattern tao tao orb strategies consolidated factories implemented singletons 
factory encapsulates strategies factory shown encapsulates server specific strategies 
factories encapsulate concurrency strategies client factories tao server request demultiplexing scheduling dispatch strategies server 
factory pattern tao configure different orb personalities conveniently consistently 
dynamically configure orbs service configurator pattern context cost computing resources memory cpus continue drop 
orbs avoid excessive consumption finite system resources 
parsimony particularly essential embedded realtime systems require small memory footprints predictable cpu processing overhead 
likewise applications benefit ability extend orbs dynamically allowing strategies configured run time 
problem strategy factory patterns easier customize orbs specific application requirements system characteristics patterns cause problems extensible orbs high resource utilization widespread strategy pattern substantially increase number strategies configured orb increase system resources required run orb 
unavoidable system downtime strategies configured statically compile time static link time factories hard enhance existing strategies add new strategies changing existing source code consumer strategy factory recompiling relinking orb restarting running orbs application servants 
general static configuration feasible small fixed number strategies 
technique configure complex orbs complicates maintenance increases system resource utilization leads unavoidable system downtime add change existing components 
orb implementation reduce overly static side effect pervasive strategy factory patterns 
solution service configurator pattern effective way enhance dynamism orb apply service configurator pattern 
pattern uses explicit dynamic linking mechanisms obtain utilize remove run time address bindings custom strategy factory objects orb installation time run time 
widely available explicit dynamic linking mechanisms include dlopen dlsym functions svr unix functions win subsystem windows nt 
ace wrapper facades provide portable encapsulation os functions 
service configurator pattern behavior orb strategies decoupled implementations strategies configured orb 
instance orb strategies linked orb dlls compile time installation time run time 
pattern reduce memory footprint orb allowing application developers dynamically link strategies necessary specific orb personality 
general service configurator pattern application wants configure constituent components dynamically conventional techniques command line options insufficient due number possibilities inability anticipate range values 
service configurator pattern tao tao uses service configurator pattern configure factories run time contain desired strategies 
tao initialization code uses dynamic linking mechanisms provided os encapsulated ace wrapper facades link appropriate factory particular case 
design allows applications select personality particular orb run time 
addition allows behavior tao tailored specific platforms application requirements requiring access orb source code 
shows factories tuned different application domains avionics medical imaging 
particular configuration avionics concrete factory currently installed process 
applications orb configuration processed particular set orb concurrency demultiplexing dispatching strategies 
contrast medical imaging concrete factory resides dll outside service configurator pattern tao current orb process 
support different configuration orb factory dynamically installed orb process initialized 
concluding remarks article case study showing applied patterns enhance extensibility maintainability tao dynamically configurable real time orb 
qualitative quantitative evidence patterns helped clarify structure collaboration components perform key orb tasks 
tasks include event demultiplexing event handler dispatching connection establishment initialization application services concurrency control dynamic configuration 
addition patterns improved tao performance predictability making possible transparently configure lightweight optimized strategies processing client requests 
general patterns tao provided benefits increased extensibility patterns factory strategy service configurator easier reconfigure tao particular application domain allowing extensibility designed orb 
contrast middleware lacks patterns significantly harder develop extend 
article illustrated design patterns applied orb extensible 
enhanced maintenance design patterns essential capture articulate design rationale complex structures orb 
patterns help motivate structure orb describing architecture terms design forces recur software systems 
expressive power patterns enabled convey design complex software systems tao 
patterns article help improve maintainability orb middleware reducing software complexity 
increased portability reuse constructing orb atop oo communication framework ace simplified effort required port tao various real time platforms 
porting effort absorbed ace frame maintainers 
addition ace framework rich configurable high performance real time components able achieve considerable code reuse leveraging framework 
patterns incur liabilities 
summarize liabilities discuss minimize tao 
abstraction penalty patterns indirection increase component decoupling 
instance reactor pattern uses virtual methods separate application specific event handler logic general purpose event demultiplexing dispatching logic 
extra indirection introduced pattern implementations potentially decrease performance 
alleviate liabilities carefully applied programming language features inline functions templates optimizations eliminating overhead demultiplexing overhead minimize performance overhead 
result tao substantially faster original hardcoded sunsoft iiop 
additional external dependencies sunsoft iiop depends system level interfaces libraries tao depends ace framework 
ace encapsulates wide range low level os mechanisms effort required port new platform potentially higher porting sunsoft iiop uses subset os apis 
ace ported platforms effort port new platforms relatively low 
sources platform variation isolated modules ace 
final benefit applying patterns tao developed flexible orb devised richer vocabulary discussing orb middleware designs 
vocabulary key enabling step internals orb 
continue learn orbs patterns composed expect vocabulary grow evolve 
source code ace tao freely available www cs wustl edu schmidt tao html 
frank buschmann hans rohnert michael stal extensive comments 
johnson frameworks patterns components communications acm vol 
oct 
landis maffeis building reliable distributed systems corba theory practice object systems apr 
corba integrating diverse applications distributed heterogeneous environments ieee communications magazine vol 
february 
zinky bakken schantz architectural support quality service corba objects theory practice object systems vol :10.1.1.27.1465

object management group common object request broker architecture specification ed feb 
box essential com 
addison wesley reading ma 
wollrath waldo distributed object model java system usenix computing systems vol 
november december 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 
schmidt experience design patterns develop object oriented communication software communications acm special issue object oriented experiences vol 
october 
schmidt reactor object behavioral pattern concurrent event demultiplexing event handler dispatching pattern languages program design coplien schmidt eds pp 
reading ma addison wesley 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
buschmann meunier rohnert stal pattern oriented software architecture system patterns 
wiley sons 
schmidt levine design performance real time object request brokers computer communications vol 
pp 
apr 
harrison levine schmidt design performance real time corba event service proceedings oopsla atlanta ga acm october 
pyarali harrison schmidt design performance object oriented framework high performance electronic medical imaging usenix computing systems vol 
november december 
wolfe johnston real time corba proceedings third ieee real time technology applications symposium montr canada june 
jerome cox apic approach high performance network interface design protected dma techniques proceedings info com kobe japan ieee april 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
hu pyarali schmidt measuring impact event dispatching concurrency models web server performance high speed networks proceedings nd global internet conference ieee november 
hu schmidt principles developing measuring high performance web servers atm proceeedings infocom march april 
schmidt acceptor connector design patterns initializing communication services pattern languages program design martin buschmann riehle eds reading ma addison wesley :10.1.1.40.8396
ieee threads extension portable operating systems draft february 
schmidt flores gokhale software architectures reducing priority inversion non determinism real time object request brokers proceedings fourth ieee real time technology applications symposium san francisco ca ieee december 
schmidt harrison thread specific storage object behavioral pattern accessing thread state efficiently th pattern languages programming conference washington university technical report wucs september 
gokhale schmidt measuring optimizing corba latency scalability high speed networks transactions computing vol 

jain schmidt service configurator pattern dynamic configuration services proceedings rd conference object oriented technologies systems usenix june 
schmidt suda object oriented framework dynamically configuring extensible distributed communication systems iee bcs distributed systems engineering journal special issue configurable distributed systems vol 
pp 
december 
lee dang weeks shared libraries sunos proceedings summer usenix technical conference phoenix arizona 
custer inside windows nt 
redmond washington microsoft press 
gokhale schmidt principles optimizing corba internet inter orb protocol performance hawaiian international conference system sciences january 
