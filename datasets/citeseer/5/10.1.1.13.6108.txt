pt pt pt formal aspects computing 
bcs running programs backwards logical inversion imperative computation brian ross brock university department computer science st ontario canada keywords inversion abduction reverse computation program testing logic programming 
imperative programs inverted directly forward directed program code logical inference 
relational semantics imperative computations treats programs logical relations observable state environment taken state variables memory 
program relations denote forward backward computations direction computation depends instantiation pattern arguments relation 
view inversion practical applications relational semantics treated logic program 
depending logic programming inference scheme execution relational program compute inverse imperative program 
number nontrivial imperative computations inverted minimal logic programming tools 

proposes inverse computations imperative programs obtained directly forward directed source code logical inference 
established program semantics verification imperative program modeled logical relation declaratively describes computational behaviour respect observable environment 
horn clause subset order logic relational logic language program logical semantics interpreted logic program llo cve ros 
logic programs associated models computation logic program model imperative program may inference strategy applied resulting simple interpreter correspondence requests brian ross brock university department computer science st ontario canada 
ca running programs backwards logical inversion imperative computation language 
relevance program inversion appropriate inference strategy chosen non trivial imperative algorithms readily inverted inference relational semantics 
additionally logic programming semantics inherently nondeterministic nature nondeterministic inversions handled 
review inversion relevant logic programming topics section 
section presents means computing imperative inversions logical programming inference 
example program inversion section 
discussion concludes section 
background 
inversion problem function inversion process deriving function inverse function example values inverse inverse function best denoted relation domain range 
existence may certain derivation effective computation procedure general difficult determine 
existence decision procedure computing mathematical inverses enable solution unsolved problems mathematics 
program inversion similar function inversion 
conventional computation involves calculation result values initial data program call computations forward directed 
computational inversion reverse computation backward directed computation 
definition 
forward directed program inverted program computes inverse computation called inverse computation program inversion refers computing inverse computations deriving inverted programs forward directed source programs 
derive 
done formal derivation inverted programs forward directed programs dij gri cu vw vds 
example von wright suggests set converse commands symbolically applied constructs program derive specification requirement inverse vw 
example inversion single destructive assignment statement viewed outside context program components yields indefinite number prior states variable previous value 
von wright models value contained prior assignment determined ross nondeterminism hoa 
discussed may generalized mathematical expression computing inverse may difficult 
inverted program implementable deterministic language nondeterminism replaced deterministic constructs significant challenge probably impossible np complete problem instances 
contemporary imperative languages industry fortran cobol strictly deterministic inverses programs written languages techniques dij gri implementable languages inverses likewise deterministic 
program version important useful concept different software disciplines 
representative theoretical papers turing machine inversion reversible cellular automata mcc ben ben tn 
broy uses program inverses simplify derivation particular types recursive structures program synthesis 
inversion functional programming environments lisp kor fold unfold transformation systems dar hope hh 
programming environments undo operations inversions atomic operations lee 

logic programming presume familiarity classical order logic 
order theory defined alphabet order language axioms inference rules 
order theory logic programming defined follows 
see llo detailed treatment 
alphabet consists variables constants function symbols arity arity considered constants predicate symbols arity standard logical connectives logical quantifiers punctuation symbols 
terms inductively defined variable term constant term function arity tn terms tn term 
atomic formula atom formula tn predicate symbol arity tn terms 
language logic programs uses horn clause subset order logic defined follows 
definition 
definite program clause order sentence form bn bi atoms variables expression universally quantified 
called head bi body 
denoted bn 
definition 
unit clause clause form body empty 
denoted 
definition 
program clauses sam head arity said comprise predicate arity definition 
definite program query definite goal clause form bn bn running programs backwards logical inversion imperative computation denoted bn 
definition 
empty clause denoted empty head body 
represents contradiction 
definition 
horn clause definite program clause definite goal 
definition 
logic program set horn clauses 
goal clauses logic program represent queries verify respect program theorems 
definition 
variant clause new clause obtained renaming variables logic programming infinite set variable names presumed exist renaming purposes 
definition 
ground term atom term contain variables 
definition 
herbrand universe logic program set ground terms formed constants function symbols appearing definition 
herbrand base bp logic program set ground atoms formed predicate symbols ground terms arguments 
definition 
herbrand interpretation ip logic program logical interpretation domain constants assigned ary function mapping ul ul defined tn tn assigned definition 
sld resolution query am ak program clause bq 
resolvent derived mgu hold 
am designated selected atom 
general unifier mgu am substitution variables am am equivalent 
addition unifiers am exists substitution 

goal am bq am ak 
definition 
sld derivation program goal finite infinite sequence goals derived sld resolution sequence variants clauses sequence 
mgu gi derived gi ci 
variants created clause ci variables derivation gi 
definition 
sld refutation finite sld derivation empty clause goal derivation 
premise sld derivations 
wish know validity conjunction atoms ak 
sld derivation performed negation expression derives equivalent false ross original expression ak valid 
implies logical contradiction original query ak true 
approach inference termed sld refutation 
power logic programming refutation performed original query final mgu unifier variable values query true computed 
notationally sld iff computed answer substitution 
intended interpretation right hand expression taken theorem 
soundness sld resolution logic program goal computed answer substitution sld resolution correct answer proof 
see cla llo 
theorem 
completeness sld resolution correct answer exists computed answer sld resolution 
proof 
see cla llo 
theorem 
semi decidability sld resolution decision procedure obtaining terminating inferences general program goals programs 
proof 
horn clause logic turing powerful 
see hog 
convenient denote logic programs directly predicate logic derivations explicitly notation sld resolution 
definition denotes logic programs form 
definition 
program completion completion comp logic program 
clause tn lm transformed xn yd xn tn lm xi new logical variables yi logical variables local body goals lm equality theory equivalent yields mgu sld resolution see llo 

clauses predicate xn 
xn ek 
transformed step expression denoting predicate xn xn ek notation comp example comp refers completed transformation predicate usually performing logical substitutions derivations 
quantification argument unification goals relaxed confusion arise 
logic programming languages characteristic inference strategies determined definitions 
running programs backwards logical inversion imperative computation definition 
computation rule selection rule strategy selecting goal query resolution 
independence computation rule says possible answers program goal obtainable computation rule 
definition 
search rule criteria selecting clause resolve selected goal 
practically speaking search rule prioritizes clauses resolution determines ordering answers obtained 
derivations may infinite search rule determines non terminating derivations encountered 
definition 
backtracking mechanism inference system revert back previous point sld derivation perform alternative resolution step 
actual implementations logic programming languages prolog cm restricted inference strategy efficiently implemented conventional hardware 
query bn prolog computation rule selects goal 
prolog search rule clause unifies goal order determined textual order program file 
prolog backtracking strategy revert point derivation clause selection search rule try subsequent clause unifies selected goal 
backtracking applied exhaustively inference 
net effect prolog control strategy computation tree searched depth exhaustively 
disadvantage incomplete strategy inferences easily dive nonterminating branches tree 

logic program inversion logic programs inherently support inversion sic sm 
appropriate inference procedure permits determination relation represented program declarative logical semantics 
consider prolog append predicate goal append 
append append 
append infers goal append infers 
inferences goals represent inverses 
suitably written logic program permits variety different query forms fact query instantiated program relation 
inherent direction encoded pure logic programs program inversions computed natural product sld resolution soundness completeness 
mentioned earlier logic programming language implementations incomplete inference schemes prolog left right depth control ross valid solutions necessarily computable due non termination infinite branches computation tree 
consequently prolog predicates directed expect particular instantiation patterns arguments order terminate execute built predicates correctly 
akin direction encapsulated imperative computations acute prolog program usually deterministic nondeterministic components 
shoham mcdermott notion direction precise definitions sm 
definition 
logic program herbrand interpretation xn predicate arity xi variables xi 
function partition instantiations prolog inference strategy generate solutions consistent relation wrt definition 
prolog predicate directed set variable partition tuples function definition 
prolog predicate complete directed set variable partitions complete predicate fully invertible 
pure logic programs conceptually complete sense predicates typically restricted inference strategies prolog considered 

abductive reasoning logic programs abduction style logical inference conjectures particular hypothesis attempts establish premises 
abductive reasoning applied program inversion problem considers inverted computation way 
consider execution program transition represents atomic alteration environment store respect execution final state transitions 
invert computation inverted program treat state logically consistent state respect invert abductive approach assert conjectured final state establish premise valid state preceding reasoning repeatedly applied intermediate states leading inversion determined section abduction inverting loops imperative language 
logical construction suggested hogger bh greibach foster grammatical transformation 
consider logic program predicate schema 

arbitrary argument tuples 
executed prolog left right control rule goal fall infinite loop running programs backwards logical inversion imperative computation second clause distinct variables 
recurses chance establish additional computational constraints inference 
known left recursion logic programming 
hogger suggest transformation resolve problem 
definition 
forward simulation transform fst predicate matching schema 

fst fst 


identical vectors new distinct variables 
abductive reasoning fst follows 
order inferred terminating solution goal applied final goal clause means inference terminate 
fst immediately establishes required premise clause 
secondly recursive call clause involve successful resolution call fail clause fails 
fst explicit successful resolutions recursively invoked clause 
clause denotes termination loop 
fst results inverted execution starting conditions necessary termination left recursive loop priori iteratively unwrapping loop loop successfully inferred 
note fst generalizable replacing multiple conjunctions goals 
theorem 
correctness fst predicates st relations defined equivalent proof 
induction length inference see bh 

relational semantics inverted imperative computation simple imperative language see due industry computational equivalence primitive recursive functions turing machines hu 
operational semantics sa follows see source additional descriptions style semantics 
definition 
operational semantics program state consisting valuations program variables 
interpreter function il defined follows ross prog program statement statement statement statement eb statement statement eb statement arithmetic expression eb boolean expression list program variables fig 

syntax il program il il il il il eb il eb true il eb false il eb il eb eb true il eb false function evaluates terms respect current state ai statement notation denotes new state variable value replaced valuation wrt 
operational semantics takes form stack machine program code saved argument tuple current variable values second argument 
assumed expressions assignments boolean tests defined computable solution expression state 
note nontermination may arise statements terminated computation occurs code argument reduces 
translation source code relational semantics 
semantics defines logic program 
set logical connectives syntax described section 
function terms translated obvious way arithmetic boolean expressions predicates arity predicate names freely indexed program construct modeled unique predicate 
identical program constructs modeled predicate desired 
relation asgn eq introduced described 
defines input output relations environment program constructs 
relations constructs vi initial state executing state terminating execution operational semantics assignment boolean expressions presumed defined 
briefly ii defines main predicate program 
sequenced statements modeled iii linking input output running programs backwards logical inversion imperative computation empty def true ii programs program iii chains sk iv assignment def asgn eq xf def program xi xf xi xf 
def sk tests eb def eb 
eb 
vi loops eb def eb sj 
sj sj eb sj 
fig 

relational semantics relations chained statement relations output state statement relation input state statement relation 
test modeled unique predicate clauses clause accounts separate test cases 
iv asgn eq arithmetic equality relation respect intended herbrand interpretation ip logic program 
asgn eq xf final value xf variable value expression respect state commencement assignment 
initial value xi lost assignment referenced possibly relations predicate question 
important note invertibility assignment expression guaranteed asgn eq may denote computability possible inference proof see section 
computability expression inverses dependent problem hand 
loops modeled vi 
predicate uses forward simulation transform section applied predicate modeling forward directed loop eb eb 
eb 
relation matches schema required fst theorem logically equivalent transformation vi 
rationale fst operational control introduced fst inverts forward directed loops 
basically inverted presumes loop terminates negated test iteratively inverts ross loop body execution predicate 
note abductive clause abbreviated sj denoting initial final states identical 
call base clause iterative clause 
logical derivations follow step comments describe operation performed derive 
necessary term expanded step underlined 
assumed respect herbrand interpretation logic program respect logic program sld denotes sld resolution inference rule denotes general logical derivation step 
theorem 
equivalence relational operational semantics program relational semantics 
states 
il derives finite number steps 

il derives pair proof 

correspondence il straight forward program headers define initial state assignments 
loops proof uses induction size inference corresponding completed resolutions loop iterations 
base case loop test initially false iterations occur loop body 
relational derivation follows 
assumption subst 
comp subst 
comp false assume iterations simplify simplify corresponding derivation il il false order iterations loop 
correlates relational semantics derived step 
assuming hypothesis holds iterations loop iterations relational inference descriptions steps proof follows 
running programs backwards logical inversion imperative computation substitute comp simplify iterative clause 
repeat times 
substitute base clause comp 
simplify 
fold 
il derives il il il presumption true il ind hyp 
ind hyp 
induction hypothesis il il derived finite number steps entire derivation 
similar reasoning applies chains test statements omitted 

assignment boolean expressions defined way relation undefined non terminating loop modelled 
consider relation non satisfiable relation subst 
comp distr 
distr 
distr 
distr 
simplify false base clause simplify assume il derives finite number steps 
terminated result step il taken implying false determined 
contradicts relational result il terminate 
theorem 
computability inversions program 
final state sld 
proof 
theorem 
theorem states inverse exists particular program final state sld resolution infer programs relational semantics 
due completeness sld resolution 
theorem 
verifiability relations iff sld proof 
theorems 
theorem powerful result seen section 
essentially product central tenet theory logic programming 
important context imperative program analysis ross implies sld resolution verify input output relations imperative programs 
theorem reminder previous results practical importance inferring imperative program inversions reconcile fundamental computability limitations 
theorem 
undecidability inferring inversions decision procedure solving generalized sld 
proof 
theorem states sld resolution semi decidable 
carries restricted logic programs arise semantics programs programs encodable turing powerful hu 

example inversion power fig 

binary powers consider program power inverse relation 
ower uses binary powers algorithm integer inputs efficiently computes code straight forward 
forward execution input computes final state 
relational semantics power correspond imperative source code automatically compilable source 
state comprises values variables standard prolog notation cm constants denoted lower case literals logical variables upper case 
variable env conveniently denotes entire state individual state values referenced 
unique predicates corresponding loop 
chains exploit transitivity conjunction reversing order goals corresponding statements source program 
permutation conjunctions logically equivalent particular ordering ramifications prolog interpretation discussed 
proceeding sld inferences pointed expressions asgn eq relation example assumed invertible 
integer arithmetic expressions ii iii iv expressions fully invertible invertible contains value similarly running programs backwards logical inversion imperative computation power env env asgn eq 
env env 
env env 
env asgn eq asgn eq env 
env env 
env env 
env asgn eq asgn eq env 
fig 

binary powers inverse relation ii iii iv invertible values 
arithmetic theories corresponding computation schemes compute inversions obvious details omitted distracting main focus interest inversion imperative control 
sld inference 
line inference represents current goal 
simplify derivation fresh logical variables indexed needed unifying substitutions applied immediately 
letters temporarily denote terms 
ross power start 
initial query asgn eq start env env env env true asgn eq asgn eq env env env env true env env env true asgn eq 
env true carrying unifying substitutions original argument result start inferred 
inference possible 
continuing derivation step env asgn eq asgn eq env env env true env env env true asgn eq 
env true infers inverted computation start 
inference possible step inferred 
rest inference omitted computes inverted computation start 
note derivations imitate prolog computation strategy 
clauses selected unification order reside translation fig 
goals selected resolution left right 
inversions automatically obtained standard prolog interpreter cm 
ordering goals logic program fig 
permits inverted control asgn eq boolean test relations executed prolog depth left control strategy 
query power automatically infers inverted results 
prolog backtracking mechanism recovers failed branches inference tree 
backtracking searches alternative nondeterministic branches generated nondeterministic computations asgn eq yields positive negative integral square running programs backwards logical inversion imperative computation roots abductive unwinding loops 
addition query power returns true interpreter confirming valid relation power 
prolog perform tests negative relations 
example power returns false abductive reasoning outer loop stipulates order loop terminated query clearly violates 
query power returns false initial value correspond final values program relation 

feasibility computing inversions imperative programs logic programming techniques shown 
correctness inversions guaranteed 
assuming logical semantics imperative language sound translational semantics source program defines theory behaviour 
sld resolution sound inversions sound logical inferences source program logical semantics 
advantage ability obtain nondeterministic inversions 
logic programming model permits multiple initial values obtained final value 
mixed forward inverted computation conceivable 
approach conducive semi automation logical predicates compiled directly source program 
inferring inverse predicates responsibility logic programming system 
approach permits interactive program analysis performed 
inverse relation permits interactive inspection input output behaviour source program 
shown section powerful analytical tool 
inversion technique advantages formal derivation techniques dij gri 
logically inferred inversions compiled automatically source program complex derivation proofs unnecessary 
inversions restricted deterministic target languages dijkstra guarded language nondeterministic constructs 
logical inversions derived inverted programs usually guaranteed terminate 
establishing requires significant effort derivation 
completeness inversions depends entirely robustness inference system 
tools invert example section standard prolog control abduction arithmetic equality capable inverting imperative algorithms inadequate general cases 
fact abductive modeling loops aid inverting loops strictly required 
imperative algorithms including fibonacci numbers bubble sort knuth algorithm knu successfully inverted advanced logic programming control strategies 
interpretation dynamic control mechanisms coroutining intelligent backtracking search heuristics useful regard 
promising avenue investigated application constraint logic programming clp vh imperative program inversion 
constraints inequalities domains arithmetic 
asgn eq relation rudimentary equality constraint 
clp permits arithmetic reasoning constraints reasoning incorporated basic logic programming paradigm 
program ross tests statements regarded constraints clp system 
final state constraints valid constraint solver deduces 
inversion computability guaranteed sophisticated inference systems 
inversions unknown undecidable halting problem 
complexity mathematical primitives influences computability 
example higher order polynomials difficult invert simple arithmetic 
realities shouldn discourage analysis tractable inversions 
reasonable strategy consider supplementing inverted predicates problem specific information tj 
invariant relations added program predicates prevent inference fruitless nonterminating directions 
theorem proving logic programming advance need programmer intervention diminish 
application logic programming technology analysis imperative computations worth investigation 
direction includes consequence verification imperative control cve partial evaluation transformations ros 
harvey abramson supervision msc thesis direct extension rajiv advice clp languages jamie andrews rob scott paul input anonymous referees advice 
author supported nserc operating 
ben bennett 
logical reversibility computation 
ibm journal research development 
ben bennett 
thermodynamics computation review 
international journal theoretical physics 
bh hogger 
grammar related transformations logic programs 
new generation computing 
broy krieg bruckner 
derivation invariant assertions program development transformation 
toplas july 
cla clark 
predicate logic computational formalism 
technical report imperial college december 
cm clocksin mellish 
programming prolog rd ed 
springer verlag 
cu chen 
program inversion fun 
science computer programming 
cve clark van emden 
consequence verification flowcharts 
ieee transactions software engineering se january 
dar darlington 
experimental program transformation synthesis system 
artificial intelligence 
dij dijkstra 
program inversion 
selected writings computing personal perspective pages 
springer verlag 
gri gries 
science programming 
springer verlag 
gries van de 
inorder traversal binary tree inversion 
dijkstra editor formal development programs proofs pages 
addison wesley 
hh harrison 
synthesis function inverses 
technical report imperial college 
holland holyoak nisbett thagard 
induction 
mit press cambridge mass 
hoa hoare 
communicating sequential processes 
prentice hall 
running programs backwards logical inversion imperative computation hog hogger 
essentials logic programming 
oxford university press 
hu hopcroft ullman 
automata theory languages computation 
addison wesley 
knu donald knuth 
algorithms 
addison wesley nd edition 
kor korf 
inversion applicative programs 
ijcai pages 
lee 
formal approach undo operations programming languages 
journal acm january 
llo lloyd 
foundations logic programming nd ed 
springer verlag 
mcc mccarthy 
inversion functions defined turing machines 
shannon mccarthy editors automata studies pages 
princeton university press 
ros ross 
partial evaluation imperative programs prolog 
meta programming logic programming pages 
mit press 
sa antoniou 
logic foundation computer science 
addison wesley 
sic 
invertibility logic programs 
th workshop automated deduction pages austin texas february 
sm shoham mcdermott 
directed relations inversion prolog programs 
international conference fifth generation computer systems pages 
tj potter 
metalogical control logic programs 
journal logic programming october 
tn toffoli margolus 
invertible cellular automata review 
physica nonlinear phenomena 
vds van de 
computing 
springer verlag new york 
vh van hentenryck 
constraint satisfaction logic programming 
mit press 
vw von wright 
program inversion refinement calculus 
information processing letters january 
