design implementation semi preemptible io zoran edward chang university california santa barbara zoran cs ucsb edu cs ucsb edu ece ucsb edu allowing higher priority requests preempt ongoing disk ios particular benefit delay sensitive multimedia real time systems 
propose semi preemptible io divides io request small temporal units disk commands enable preemptible disk access 
main design strategies allow preemption component disk access seek rotation data transfer 
analyze performance describe implementation challenges 
evaluation shows semi preemptible io substantially reduce io waiting time little loss disk throughput 
example expected waiting time disk ios video streaming system reduced times throughput loss percent 
traditionally disk ios thought operations 
initiated stopped completed 
years operating system designers learned live restriction 
non preemptible ios stumbling block applications require short response time 
propose methods disk ios providing operating system finer level control disk drive 
preemptible disk access desirable certain settings 
domain real time disk scheduling 
real time scheduling theoreticians developed schedulability tests test task set schedulable deadlines met various settings 
real time scheduling theory blocking priority inversion defined time spent higher priority task prevented running due non low priority task 
blocking degrades schedulability real time tasks refer blocking waiting time 
undesirable 
making disk ios preemptible reduce blocking improve schedulability realtime disk ios 
domain preemptible disk access essential interactive multimedia video audio interactive virtual reality 
large amount memory required media data stored disks retrieved main memory needed 
interactive multimedia applications require short response time disk io request serviced promptly 
example immersive virtual world latency tolerance head movement rendering scene may involve disk io retrieve relevant media data milliseconds 
interactive ios modeled higher priority io requests 
due typically large io size non preemptible nature ongoing disk commands io requests kept waiting tens hundreds milliseconds serviced disk 
reduce response time higher priority request waiting time reduced 
waiting time io request amount time wait due non ongoing io request serviced disk 
response time higher priority request sum waiting time service time 
service time sum seek time rotational delay data transfer time io request 
service time reduced intelligent data placement scheduling policies 
focus reducing waiting time increasing disk access 
study explore semi preemptible io previously called virtual io abstraction disk io provides highly preemptible disk access average order millisecond little loss disk throughput 
semi preemptible io breaks components io job fine grained physical enables io preemption 
separates size duration operating system io requests 
semi preemptible io maps io request multiple fast executing disk commands methods 
method addresses reduction possible components waiting time ongoing io transfer time rotational delay seek time 
chunking 
large io transfer divided number small chunk transfers preemption possible small transfers 
io preempted chunk transfers chunking incur overhead 
due prefetching mechanism current disk drives section 
preempting 
performing just time jit seek servicing io request rotational delay destination track virtually eliminated 
pre seek slack time obtained preemptible 
slack perform prefetching ongoing io request perform seek splitting section 
splitting 
semi preemptible io split long seek sub seeks permits preemption sub seeks section 
example illustrates semi preemptible io reduce waiting time higher priority ios improve disk access 
illustrative example suppose kb read request seek cylinders requiring ms wait ms requires ms transfer rate mbps 
expected waiting time higher priority request arriving execution request ms maximum waiting time ms please refer section equations 
io reduce waiting time performing operations 
predicts seek time rotational delay 
predicted seek time long ms decides split seek operation sub seeks cylinders requiring seek ms 
seek splitting cause extra overhead case mask ms increased total seek time seek 
rotational delay rot seek ms knowledge disk driver waits ms performing jit seek 
jit seek method rot preemptible disk operation performed 
disk performs sub seek disk commands successive read commands size kb requiring ms 
io request serviced immediately disk command 
semi preemptible io enables preemption originally non preemptible read io request 
service io scenarios higher priority io arrives 
case disk incur additional overhead transferring data due disk prefetching discussed sections 
mask system choose perform seek splitting 
higher priority io arrives 
case maximum waiting time higher priority request mere ms arrives seek disk commands 
ongoing request stage transferring data longest stall higher priority request just ms expected value waiting time ms significant reduction ms refer section details 
example shows semi preemptible io substantially reduces expected waiting time increases disk access 
io request preempted service higher priority request extra seek operation may required resume service preempted io 
distinction io io preemption important 
enables preemption incurs little overhead 
preemption incur overhead reduce service time requests 
provides system choice trading throughput short response time tradeoff desirable 
explore effects io preemption section 
contributions summary contributions follows introduce semi preemptible io abstracts read write io requests preemptible 
result system substantially reduce waiting time higher priority request little extra cost 
show making write ios preemptible straightforward read ios 
propose possible solution making preemptible 
feasible path implement io 
explain implementation possible detailed disk profiling tool 
rest organized follows section presents related research 
section introduces io describes components 
section evaluate prototype 
section concluding remarks suggest directions 
related pioneering assumed nature disk ios inherently 
authors proposed breaking large io multiple smaller chunks reduce data transfer component waiting time higher priority requests 
minimum chunk size track proposed 
improve conceptual model respects addition enabling preemption data transfer component show enable preemption components improve bounds zero overhead show making write ios preemptible straightforward read ios propose possible solution 
proposed cooperative novel io semantics aimed reduce power consumption storage subsystem enabling applications provide information os scheduler 
similarly propose io abstraction enable preemptive disk scheduling 
semi preemptible io uses just time seek jit seek technique rotational delay preemptible 
mask rotational delay useful data prefetching 
order implement methods system relies accurate disk profiling 
rotational delay masking proposed multiple forms 
authors rotational latency sensitive schedulers consider rotational position disk arm better scheduling decisions 
authors freeblock scheduling disk arm services background jobs rotational delay foreground jobs 
seagate uses variant just time seek disk drives reduce power consumption noise 
semi preemptible io uses similar techniques different goal rotational delays preemptible 
large body literature proposing io scheduling policies multimedia real time systems improve disk response time 
io orthogonal contributions 
believe existing methods benefit preemptible io improve schedulability decrease response time higher priority requests 
instance model real time disk ios draw real time cpu scheduling theory 
authors adapt earliest deadline edf algorithm cpu scheduling disk io scheduling 
edf preemptive scheduling algorithm higher priority request able preempt lower priority request 
ongoing disk request preempted instantaneously 
applying classical real time cpu scheduling theory simplified preemption granularity independent system variables io sizes 
semi preemptible io provides ability 
semi preemptible io introducing concept semi preemptible io define terms rest 
propose abstraction disk io enables preemption io requests 
disk profiler disk parameters required implementation io 
definitions logical disk block smallest unit data accessed disk drive typically 
logical block resides physical disk location depicted physical address cylinder track sector 
disk command non preemptible request issued disk io bus read write seek interrogative commands 
io request request read write access sequential set logical disk blocks 
waiting time time arrival higher priority io request moment disk starts servicing 
io bus disk head read request seek time data transfer io bus time rotational data transfer time delay timing diagram disk read request 
order understand magnitude waiting time consider typical read io request depicted 
disk performs seek destination cylinder requiring time 
disk wait rotational delay denoted target disk block comes disk arm 
final stage data transfer stage requiring time data read disk media disk buffer 
data simultaneously transferred io bus system memory 
typical commodity system disk command issued io bus stopped 
traditionally io request serviced single disk command 
consequently operating system wait ongoing io completed service io request disk 
assume higher priority request may arrive time execution ongoing io request equal probability 
waiting time higher priority request long duration ongoing io 
expected waiting time higher priority io request expressed terms seek time rotational delay data transfer time required ongoing io request 
vi sequence fine grained disk commands service io request 
time required execute disk command vi ti 
duration time servicing io request disk idle disk command issued 
assumption higher priority request arrive time equal probability probability arrive execution ith com ti mand vi expressed pi ti expected waiting time higher priority request semi preemptible io expressed waiting ti 
ti remainder section chunking divides section just intime seek enables preemption section seek splitting divides section 
addition disk profiler summarize disk parameters required implementation semi preemptible io section 
chunking preempting data transfer component disk ios large 
example current maximum disk io size linux freebsd kb larger specialized video demand systems component preemptible io uses chunking 
definition chunking method splitting data transfer component io request multiple smaller chunk transfers 
chunk transfers serviced separate disk commands issued sequentially 
benefits chunking reduces transfer component 
higher priority request serviced chunk transfer completed entire io completed 
example suppose kb io request requires ms transfer rate mbps 
chunk size kb expected waiting time higher priority request reduced ms ms overhead small chunk sizes io bus performance bottleneck due overhead issuing large number disk commands 
result disk throughput degrades 
issuing multiple disk commands single increases cpu overhead performing io 
range chunk sizes disk throughput chunking optimal negligible cpu overhead 
values vary 
semi preemptible io provides technique deter disk increased io sizes 
method perform chunking system decide chunk size 
semi preemptible io chooses minimum chunk size disk throughput optimal cpu overhead acceptable 
surprisingly large chunk sizes suffer throughput degradation due sub optimal implementation disk firmware section 
consequently semi preemptible io may achieve better disk throughput traditional method io request serviced single disk command 
order perform chunking efficiently io relies existence read cache write buffer disk 
uses disk profiling find optimal chunk size 
chunking read write io requests separately 
read case disk drives optimized sequential access continue prefetching data disk cache read operation completed 
chunking read io requests illustrated 
axis shows time horizontal time lines depict activity io bus disk head respectively 
employing chunking large divided smaller chunk transfers issued succession 
read command issued io bus chunk 
due prefetching mechanism chunk transfers serviced disk cache disk media 
data transfers io bus small dark bars shown io bus line data transfer disk cache dark shaded bar disk head line occur concurrently 
disk head continuously transfers data read command fully utilizing disk throughput 
io bus disk head read request seek time rotational delay data transfer io bus data transfer virtual preemption data transfer 
illustrates effect chunk size disk throughput mock disk 
optimal chunk size lies smaller chunk size reduces waiting time higher priority request 
semi preemptible io uses chunk size close larger time time chunk sizes smaller due overhead associated issuing disk command io bus bottleneck 
point denotes point performance cache may suboptimal disk throughput minimum chunk size maximum chunk size firmware design sub optimal firmware design chunk size effect chunk size disk throughput 
write case semi preemptible io performs chunking write ios similarly chunking read requests 
implications chunking write case different 
write io performed disk command complete soon data transferred disk write buffer soon write command completed operating system issue disk command service higher priority io 
disk may choose schedule write back operation disk write buffers servicing new disk command refer delay external waiting time 
disk buffer multiple write requests write back operation include multiple disk seeks 
consequently waiting time higher priority request substantially increased disk services write ios 
order increase write requests take consideration external waiting time write io requests 
external waiting reduced zero disabling write buffering 
absence write buffering chunking severely degrade disk performance 
disk suffer overhead disk rotation performing io chunk 
remedy external waiting prototype forces disk write chunk write io disk media setting force unit access flag fully investigated reasons sub optimal disk performance subject 
size write io larger size write buffer disk signals io soon excess amount data fitted disk buffer written disk media 
scsi write command 
simple technique triggers write back operation write io 
consequently external waiting time reduced write back operation include multiple disk seeks 
jit seek preempting reduction component waiting time rotational delay seek time components significant 
rotational period tp ms current day disk drives 
reduce rotational delay component waiting time propose just time seek jit seek technique io operations 
definition jit seek technique delays servicing io request way rotational delay incurred minimized 
refer delay io requests due jit seek slack time 
benefits 
slack time io requests fully preemptible 
example suppose io request incur ms jit seek delays issuing disk command ms disk idle ms expected waiting time reduced ms ms 
slack obtained due jit seek perform data prefetching previous io service background request potentially increase disk throughput 
overhead semi preemptible io predicts rotational delay seek time io operations order perform jit seek 
error prediction penalty jit seek extra disk rotation wasted cache space unused prefetched data 
method regular io semi preemptible io jit seek seek time preemptible rotational slack jit seek rotational delay seek time jit seek 
data transfer data transfer time time jit seek method illustrated 
xaxis depicts time horizontal lines depict regular io io jit seek respectively 
jit seek read command io operation delayed issued just time seek operation takes disk head directly destination block incurring rotational delay destination track 
data transfer immediately follows seek operation 
available rotational slack issuing jit seek command preemptible 
key observations jit seek method 
accurate jit seek operation reduces component waiting time loss performance 
second significantly ongoing io request serviced possible completely sufficient slack available jit seek operation higher priority request 
pre seek slack available due jit seek operation possible ways pree seek slack simply left unused 
case higher priority request arriving slack time serviced immediately 
slack perform additional data transfers 
operating systems perform data prefetching current io necessary data transfer 
refer free prefetching 
chunking prefetched data reduce waiting time higher priority request 
free prefetching increase disk throughput 
point free prefetching useful sequential data streams prefetched data consumed short time 
operating systems perform background request proposed 
slack mask overhead incurred performing seek splitting shall discuss 
seek splitting preempting seek delay dominant component components reduced drastically 
full stroke disk arm may require ms current day disk drives 
may necessary reduce component reduce waiting time 
definition seek splitting breaks long seek disk arm multiple smaller sub seeks 
benefits seek splitting method reduces component waiting time 
long non preemptible seek transformed multiple shorter sub seeks 
higher priority request serviced sub seek delayed entire seek operation finished 
example suppose io request involves seek cylinders requiring ms seek splitting seek operation divided ms sub seeks cylinders 
expected waiting time higher priority request reduced ms ms overhead 
due mechanics disk arm total time required perform multiple sub seeks greater single seek seek distance 
seek splitting method degrade disk throughput 
section discuss issue 

splitting seek multiple sub seeks increases number disk head accelerations consequently increasing power usage noise 
method split seek operations semi preemptible io uses tunable parameter maximum sub seek distance 
maximum sub seek distance decides split seek operation 
seek distances smaller maximum sub seek distance seek splitting employed 
smaller value maximum sub seek distance provides higher responsiveness cost possible throughput degradation 
previous methods seek splitting may degrade disk performance 
note overhead due seek splitting cases masked 
pre seek slack obtained due jit seek greater seek overhead slack mask overhead 
specific example phenomenon section 
slack insufficient mask overhead seek splitting aborted avoid throughput degradation 
making tradeoff course depends requirements application 
disk profiling mentioned section io greatly relies disk profiling obtain accurate disk parameters 
disk profiler obtains throughput mb throughput mb chunk size kb scsi st lw chunk size kb ide wd bb sequential read throughput vs chunk size 
required disk parameters disk block mappings 
system uses disk mappings logical physical physical logical disk block address transformation 
optimal chunk size 
order efficiently perform chunking semi preemptible io chooses optimal chunk size optimal range extracted disk profiler 
disk rotational factors 
order perform system requires accurate rotational delay prediction relies disk rotation period rotational skew factors disk tracks 
seek curve 
jit seek seek splitting methods rely accurate seek time prediction 
extraction disk parameters described 
regards chunking disk profiler provides optimal range chunk size 
depicts effect chunk size read throughput performance throughput mb throughput mb chunk size kb scsi st lw chunk size kb ide wd bb sequential write throughput vs chunk size 
scsi ide disk drive 
shows write case 
clearly optimal range chunk size points illustrated previously automatically extracted figures 
disk profiler implementation successful extracting optimal chunk size scsi ide disk drives experimented 
interested cpu overhead performing chunking cpu utilization transferring large data segment disk different chunk sizes ide disk 
cpu utilization decreases rapidly increase chunk size 
chunk size kb cpu utilization remains relatively constant 
shows chunking small chunk size kb feasible ide disk incurring significant cpu overhead 
scsi disks cpu overhead chunking ide disks bulk processing done scsi controller 
perform jit seek system needs accurate estimate seek delay disk blocks 
disk profiler provides seek curve variations seek time 
seek time curve variations cpu utilization system time user system time chunk size kb cpu utilization vs chunk size ide wd bb 
seek time ms rotational period seek curve seek distance cylinders seek curve scsi st lw 
seek time scsi disk obtained disk profiler 
disk profiler obtains required parameters rotational delay prediction accessing disk blocks succession near microsecond level precision 
variations seek time order millisecond restricts possible accuracy prediction 
perform jit seek system combines seek time rotational delay prediction predict 
conducted detailed study prediction 
experimental results performance results implementation semi preemptible io 
experiments aimed answer questions level io influence disk throughput 
individual contributions components semi preemptible io 
effect io preemption average response time higher priority requests disk throughput 
order answer questions implemented prototype system service io requests traditional non preemptible method non preemptible io semi preemptible io 
prototype runs user level process linux talks directly scsi disk linux interface 
prototype uses logical block mapping disk seek curves rotational skew times automatically generated 
experiments performed pentium iii mhz machine seagate st lw scsi disk 
scsi disk tracks cylinder blocks track depending disk zone 
total disk capacity gb 
rotational speed disk rpm 
maximum sequential disk throughput mbps 
performance benchmarking performed sets experiments 
tested system simulated io workload 
simulated workload equal sized io requests experiment 
low priority ios data located random positions disk 
experiments performed preemption higher priority io requests random positions 
size set block order provide lower estimate preemption overhead 
tested come fcfs elevator disk scheduling policies 
second set experiments trace workload obtained tested linux system 
obtained traces instrumented linux kernel disk driver 
simulated experiments non preemptible ios serviced chunk sizes kb 
size linux freebsd breaking large ios 
assume large io preempted chunks case current operating systems 
hand prototype services larger ios multiple disk commands preemption possible disk command completed 
disk profiling prototype parameters semi preemptible io 
chunking divided data transfer chunks disk blocks chunk smaller 
jit seek offset ms reduce probability prediction errors 
seeks half disk size cylinders split equal sized smaller seeks 
scsi seek command perform sub seeks 
experiments disk access measure duration non preemptible disk commands non preemptible io semi preemptible io absence higher priority io requests 
results include detailed distribution disk commands durations maximum possible waiting time expected waiting time calculated equations explained section 
random workload depicts difference expected waiting time non preemptible io semi preemptible io 
experiment ios serviced data situated random locations disk 
ios serviced fcfs policy 
see expected waiting time non preemptible ios increases linearly io size due increased data transfer time 
expected waiting time semi preemptible io decreases io size disk spends time data transfer preemptible 
expected waiting time ms non preemptible io semi preemptible io io size kb improvements expected waiting time fcfs 
depicts improvements expected waiting time system uses elevator scheduling policy 
shows results randomly generated io requests serviced batches 
results better fcfs access elevator scheduler reduces seek component preemptible 
figures show effect improving io achieved disk throughput fcfs scheduling policy 
notice expected waiting time ms non preemptible io semi preemptible io io size kb improvements expected waiting time elevator 
able minor reduction disk throughput io 
reduction due overhead seek splitting mis prediction seek rotational delay 
details accuracy rotational delay predictions 
point worth mentioning reduction disk throughput semi preemptible io smaller large ios small ios due reduced number seeks smaller overhead 
disk throughput mb non preemptible io semi preemptible io free prefetching io size kb effect achieved disk throughput fcfs 
disk commands non preemptible semi preemptible io duration disk commands measure expected waiting time 
smaller value implies preemptible system 
shows distribution durations disk commands non preemptible io io exactly sequence io requests 
case non preemptible io io request serviced single disk com disk throughput mb non preemptible io semi preemptible io free prefetching io size kb effect achieved disk throughput elevator 
mand 
disk access preempted current io request completed 
distribution dense near sum average seek time rotational delay transfer time required service entire io request 
distribution wider io requests larger duration data transfer depends size io request throughput disk zone data resides 
case semi preemptible io distribution durations disk commands directly depend io request size individual disk commands perform io request 
plot distribution semi preemptible io case logarithmic scale probability density longer disk commands better visualized 
see semi preemptible io largest probability density time required transfer single chunk data 
chunk includes track cylinder skew duration command slightly longer 
peaks immediately right highest peak approximately ms probability disk experiments tracks cylinder 
part distribution ms ms due combined effect jit seek seek splitting seek rotational delays 
probability range small approximately kb kb kb io requests respectively 
trace workload results io traces obtained linux system 
io traces obtained probability density ms probability density ms waiting time ms io size kb io size kb io size kb non preemptible io linear scale waiting time ms io size kb io size kb io size kb semi preemptible io logarithmic scale distribution disk command duration fcfs 
smaller values imply higher 
applications 
trace dv obtained multimedia system servicing simultaneous video clients fcfs disk scheduler 
second trace elevator obtained similar setup linux elevator scheduler handle concurrent disk ios 
third disk trace tpc database benchmark warehouses obtained 
trace summary table 
trace number avg 
req 
size max 
block requests blocks number dv elevator tpc table trace summary 
expected waiting time ms non preemptible io semi preemptible io dv elevator tpc trace improvement expected waiting time disk traces 
disk throughput mb non preemptible io semi preemptible io free prefetching dv elevator tpc trace effect achieved disk throughput disk traces 
figures show expected waiting time disk throughput trace experiments 
expected waiting time reduced loss disk throughput traces 
elevator smaller throughput dv processes accessing disk concurrently increased total number seeks 
individual contributions shows individual contributions strategies respect expected waiting time random workload elevator scheduling policy 
section showed expected waiting time significantly smaller semi preemptible io non preemptible io 
compare contributions semi preemptible io show importance strategy 
time transfer single chunk data small compared seek time typically ms chunk transfer ms seek expected waiting time decreases data transfer time dominant 
data expected waiting time ms chunking chunking jit seek chunking jit seek seek splitting io size kb individual contributions semi preemptible io components expected waiting time elevator 
transfer time dominates seek rotational delays chunking useful method reducing expected waiting time 
seek rotational delays dominant jit seek seek splitting effective reducing expected waiting time 
summarizes individual contributions strategies respect achieved disk throughput 
seek splitting degrade disk throughput long seek split disk requires time perform multiple sub seeks 
requires accurate prediction seek time rotational delay 
introduces overhead case mis prediction 
data transfer dominant benefits chunking mask seek splitting jit seek overheads 
jit seek aids throughput free prefetching 
potential free disk throughput acquired free prefetching depends rate jit seeks decreases io size 
believe disk throughput mb chunking chunking jit seek chunking jit seek seek splitting free prefetching io size kb individual effects semi preemptible io strategies disk throughput elevator 
free prefetching useful strategy multimedia systems access data sequentially potential free throughput 
effect preemption estimate response time higher priority io requests conducted experiments requests inserted io queue constant rate 
constant arrival rate may unrealistic main purpose set experiments estimate benefits overheads associated preempting ongoing io request service higher priority io request 
table presents response time higher priority request semi preemptible io possible scenarios higher priority request serviced ongoing io completed io ongoing io preempted service higher priority io request io 
ongoing io request preempted higher priority requests arrive serviced wait io completed 
results table illustrate case ongoing request read request 
results write case table 
io avg 
resp 
ms throughput mb kb req table average response time disk throughput non preemptible io semi preemptible io 
preemption io requests possible overhead 
time higher priority request preempts low priority io request disk access extra seek required continue servicing preempted request higher priority request completed 
table presents average response time disk throughput different arrival rates higher priority requests 
size low priority io requests average response time increase significantly increase arrival rate higher priority requests 
disk throughput decrease increase arrival rate higher priority requests 
explained earlier reduction expected overhead io preemption extra seek operation preemption 
applications require short response time performance penalty io preemption acceptable 
external waiting time section explained difference read write io requests introduced notion external waiting time 
table summarizes effect external waiting time preemption write io requests 
arrival rate higher priority requests set req shown table average response time higher priority requests write experiments times longer read experiments 
higher priority requests arrival pattern experiments average seek time rotational delay read write experiments 
large unpredictable external waiting time write case explains results 
exp waiting ms avg 
response ms io kb rd wr rd wr rd wr rd wr table expected waiting time average response time non preemptible semi preemptible io req 
table presents results experiments aimed find effect write io preemption average response time higher priority requests disk write throughput 
example case kb write io requests disk buffer multiple requests write back operation include multiple seek operations 
semi preemptible io succeeds reducing external waiting time provides substantial improvement response time 
disk able efficiently reorder buffered write requests case non preemptible io achieves better disk throughput 
large io requests semi preemptible io achieves write throughput comparable non preemptible io 
suggest write preemption disabled maintaining high system throughput essential disk reordering useful reordering done operating system scheduler lowlevel disk knowledge 
io avg 
response ms throughput mb kb req table average response time disk write throughput non preemptible semi preemptible io 
design io proposed techniques reducing io waiting time data transfer chunking justin time seek seek splitting 
techniques enable preemption disk io request substantially reduce waiting time competing higher priority io request 
synthetic trace workloads shown techniques efficiently implemented detailed disk parameters 
empirical studies showed io reduce waiting time read write requests significantly compared non preemptible ios 
believe preemptible io especially benefit multimedia real time systems delay sensitive issue large size ios meeting realtime constraints 
currently implementing io linux kernel 
plan study performance impact traditional real time algorithms 
project partially supported nsf iis career iis itr uc dimi 
third author supported ibm faculty partnership award 
authors wish reviewers especially erik riedel seagate research valuable comments suggestions 
agrawala 

temporally determinate disk access experimental approach 
univ maryland technical report cs tr 
azuma 
tracking requirements augmented reality 
communications acm july 
chang garcia molina 
low latency fast scan media servers 
proceedings th acm multimedia conference pages november 

disk scheduling multimedia data streams 
proceedings spie february 
chang 
virtual io preemptible disk access poster 
proceedings acm multimedia december 
chang 
multimedia system 
ieee conference multimedia expo august 
chang watson acharya 

www cs ucsb edu zoran papers db pdf november 
huang chiueh 
implementation sensitive disk scheduler 
suny stony brook technical report may 
jeffay martel 
nonpreemptive scheduling periodic sporadic tasks 
proceedings twelfth ieee real time systems symposium december 
katcher 
engineering analysis fixed priority schedulers 
software engineering 
liu layland 
scheduling algorithms multiprogramming hard real time environment 
acm journal january 
schindler ganger 
freeblock scheduling outside disk firmware 
proceedings usenix fast january 
schindler ganger nagle 
higher disk head utilization extracting free bandwith busy disk drives 
proceedings osdi 
rajkumar 
guaranteeing timing constraints disk accesses rt mach 
proceedings real time systems symposium 
performance evaluation laboratory brigham young university 
trace distribution center 
tds cs byu edu tds 
riedel faloutsos ganger nagle 
data mining oltp system nearly free 
proceedings acm sigmod may 
ruemmler wilkes 
disk drive modeling 
computer 
schindler ganger 
automated disk drive characterization 
cmu technical report cmu cs december 
seagate technology 
seagate sound barrier technology 
www seagate com docs pdf whitepaper sound barrier pdf november 
shahabi ghandeharizadeh chaudhuri 
scheduling atomic composite multimedia objects 
ieee transactions knowledge data engineering 
shenoy vin 
cello disk scheduling framework generation operating systems 
proceedings acm sigmetrics june 
arpaci dusseau patterson 
microbenchmark extraction local global disk characteristics 
uc berkeley technical report 
hua wang 
framework supporting previewing vcr operations low bandwidth environment 
proceedings th acm multimedia conference november 

cooperative novel semantics energy aware applications 
proceedings osdi december 
worthington ganger patt wilkes 
online extraction scsi disk drive parameters 
proceedings acm sigmetrics pages 
worthington ganger patt 
scheduling algorithms modern disk drives 
proceedings acm sigmetrics pages may 
yu gum chen wang li krishnamurthy anderson 
trading capacity performance disk array 
proceedings osdi october 
