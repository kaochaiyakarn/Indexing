notion variability software product lines van jan bosch department mathematics computing science university groningen po box av netherlands jan bosch cs rug nl www cs rug nl research se mikael department software engineering computer science technical university ronneby sweden msv ipd hk se www ipd hk se msv discuss notion variability 
experienced concept far 
observed variability techniques increasingly important 
clear indication trend emergence software product lines 
software product lines large industrial software systems intended specialize specific software products 
contribution provide reader framework terminology concepts regarding variability 
addition recurring patterns variability 
suggest method managing variability software product lines 
time variability software assets increasingly important software engineering 
software systems originally relatively static accepted required change demand potentially extensive editing existing source code longer acceptable contemporary software systems 
covering wide variety suggested solutions newer approaches software design share common denominator point design decisions concerning supported functionality quality requirements delayed stages 
typical example delayed design decisions provided software product lines 
deciding product build software product lines software architecture set components defined implemented configured match requirements family software products 
second example emergence software systems dynamically adapt behavior run time selecting alternatives embedded software system accepting new code modules operation plug play functionality 
systems required contain called dynamic software architectures 
consequence developments described earlier decisions concerning actual functionality provided software system requirement specification effect software system new software systems required employ various variability mechanisms allow software architects engineers delay decisions concerning variants point development cycle optimizes business goals 
example cases leads situation decision concerning variation points delayed runtime resulting customer user performed configuration software system 
cases variability handled compilation removing complexity final product 
illustrates variability software system constrained development 
space arrows funnel denotes amount variability system 
development starts constraints system system built 
visualized having space arrows 
development number potential systems decreases increasingly variability run time exactly system running configured system 
step development design decisions 
decision constrains number possible systems argued 
software product lines considered beneficial delay decisions products implemented shared product line assets varied 
refer delayed design decisions variation points 
displays stereotypical variability funnels 
represents situation lot variability removed system early left rep possible systems resents situation lot effort preserve variability late development process 
arguably left funnel system easier develop right funnel system provides greater reusability flexibility 
software product lines goal software product line minimize cost developing evolving software products part product family 
software product line captures commonalities software products product family 
software product line product developers able focus product specific issues issues common products 
process creating specific software product software product line referred product instantiation 
typically multiple relatively independent development cycles companies software product lines software product line referred domain engineering product instantiation 
instantiating software product line typically means snapshot current software product line starting point developing product 
basically steps instantiation selection 
phase architecture stripped unneeded functionality 
possible variants selected variation points software product line 
possible systems extension 
phase additional variants created remaining variation points 
see conflicting goals product line 
hand product line flexible order allow diverse product line instantiations 
hand product line provide functionality box create products minimal effort 
conflict process customizing product line costly consequently simpler develop products fall scope product line product line offers just 
scope product line widens variability added product line 
increases cost product derivation 
problem statement increased variability mechanisms trend software engineering long time typically ad hoc solutions proposed 
best knowledge attempts organize existing approaches mechanisms framework taxonomy suggested design principles selecting appropriate techniques achieving variability 
aim contribution address problem providing set concepts terminology process managing variability 

related user expectations technologies requirement specification architecture description design documentation source code compiled code linked code running code variability funnel early delayed variability software product lines 
largely inspired earlier research group 
authors published book designing software product lines 
book largely case studies experience reports 
reports learned evolution software product lines complicated stand products dependencies various products fact may conflicting requirements different products 
empirical research suggests software product line approach stimulates reuse organizations 
addition follow provides empirical evidence hypothesis organizations get reuse benefits early phases development 
believe worthwhile software product line developing companies invest time money performing methods section 
variability patterns 
look variability patterns 
patterns model variability product families 
limit detailed design phase 
try cover entire development process gaining advantage discovering variation points earlier pointed 
number variability mechanisms discussed 
book discusses subsequent design remove variability architecture 
fails put mechanisms context variation management method 
variability linked features 
important characteristic approach important means early identification architecture design variability needs system 
requirements 
argument introducing external requirement specification contain information environment 
rationale requirement specification biased implementation 
features interpretation requirements need map implementation independent requirements implementation aware features 
feature modeling 
extended feature graph 
main difference aside graphical differences notation theirs external feature addition binding time 
feature graph notation important asset method implementing software product lines 
combined management method feature graph notation may important contribution building software product lines 
related method discussed 
domain analysis method feature graphs play important role 
form method seen elaboration method 
feature graphs recognized tool identifying commonality products 
take point view important identify variability architectures identify commonalities goal developing software product line able change resulting system 
order system flexible support changes 
form method uses layers classify features capability operating environment domain technology implementation technique 
fine grained layering different representations architectural design detailed design source code compiled code linked code running system abstractions 
advantage relate variation points different moments development 
consider contributions 
hierarchical feature graph bears resemblance integral hierarchical diversity model 
model variation points model variability 
notion variation points introduced 
model uses similar layering 
distinct granularities reuse identified component class algorithm correspond architecture design detailed design implementation levels 
feature interaction 
feature interaction modeled feature graph dependencies different features 
features seen incremental units development dependencies impossible link features single component class 
consequence source code large systems software product lines tends tangled 
features associated features called crosscutting features 
variability features hard implement requires system designed example design patterns 
methodology 
method managing variability bears resemblance architecture development method outlined 
steps method select cases find major abstractions 
method creating feature graph number cases order find variation points seen refinement steps 
method related fast family oriented abstraction specification translation method discussed 
empirically tested method uses scv scope commonality variability analysis method identify document commonality variability system 
result analysis textual document 
notation modeling variability terms features provided 
important lesson learned variation points bound early order save development cost 
remainder remainder discuss features useful abstraction describing variability section 
introduce framework terminology section 
section provide method managing variability 
section illustrate terminology examples variability techniques mozilla browser architecture conclude section 
features increments evolution issues need addressed express variability 
section suggest features useful abstraction doing 
define features follows logical unit behavior specified set functional quality requirements 
point view taken book feature construct group related requirements order magnitude difference number features number requirements product line member 
words features abstraction requirements 
view constructing feature set step interpreting ordering requirements 
process constructing feature set design decisions system taken 
features identified units incrementation systems evolve 
important realize relation features requirements 
means particular requirement performance requirement may apply features particular feature typically meets requirement functional requirement couple quality requirements 
software product line provides central architecture evolved specialized concrete products 
differences products discussed terms features 
consequently software product line support variability features tend differ product product 
categorization features suggested mandatory features 
product 
ability type message send mail server essential email client application 
optional features 
features enabled add value core features product 
example optional feature email client ability add signature message 
way essential feature users nice product 
variant features 
variant feature abstraction set related features optional mandatory 
example variant feature email client editor typing messages 
email clients offer feature having user configurable editor 
added fourth category external features 
features offered target platform system 
directly part system important system uses depends 
email client ability tcp connections computer essential part client 
functionality tcp connections typically part os client runs 
choice introducing external features motivated 
argued requirements reflect implementation details platform specific features 
features abstractions requirements need external features link requirements features 
categorization adapted notation suggested support external features 
addition integrated notion binding time discuss detail section 
example enhanced notation 
feature graph features email client illustrated 
notation uses various constructs indicate optional features variant features exclude xor variant features may 
example demonstrates different constructs indicate variability needed 
receive message feature instance mandatory variant feature pop imap variants 
choice delayed runtime meaning users email client configure variant 
making sort details clear early helps identify spots system variability needed early 
receive message feature implemented receive message class subclasses variant 
feature decomposition may give readers impression conversion component design straightforward 
unfortunately due phenomenon called feature interaction true 
feature interaction known problem specifying systems 
virtually impossible give complete specification system features features considered independently 
adding removing feature system impact features 
feature interaction defined characteristic system complete behavior satisfy separate specifications features 
feature interaction problem characterized follows problem individual features typically trace directly individual component cluster components means product defined selecting group features carefully coordinated complicated mixture parts different components involved 
applies particular called crosscutting features features applicable classes components entire system 
constructing feature diagrams may help developers identify parts system need support variability 
prerequisite building feature diagram requirement specification done early development process 
argue feature diagrams important tool management variability 
variability tcp connection signature file mail client variability ability change customize system 
improving variability system implies making easier certain kinds changes 
possible anticipate types variability construct system way facilitates type variability 
reusability flexibility driving forces development techniques object orientation object oriented frameworks software product lines 
consequently techniques allow delay certain type message receive message send message runtime vi emacs runtime edit runtime pop imap internal editor specialization xor specialization composition optional feature example feature graph win design decisions point development 
able identify variability feature graph notation examine notion variability closely 
discussing concrete variation point system certain characteristics reappear 
section introduce characteristics introduce suitable terminology 
abstraction levels runtime platform compiletime linux software development software system goes number development phases 
development phase representations 
say development consists transformations representations 
requirement specification transformed feature graph 
feature graph forms basis architecture design turn forms basis detailed design 
detailed design source code created 
source code compiled linked run 
different representations regarded different abstraction levels system 
initially developers high level models describing requirements features system 
highlevel representations design decisions taken architecture design created consequently development characterized going representations system concrete detailed descriptions 
transformation design decisions taken 
importantly design decisions delayed left open variability deliberately 
open design decisions referred variation points 
listed number representations system goes associated processes transform representations 
note transformation processes equal development phases 
transformation processes development methods example iterative methods instance extreme programming waterfall model methods considerable differences methods time effort spent various processes executed 
especially transformation processes technology dependent processes executed 
compare interpreted language python compiled language see program compiled linked product delivery python compiling linking done system executed 
variability techniques involved 
shows advantage interpreted language user variability techniques hand simply transformations compilation linking run time 
variation point properties representation user input technology expectations requirement specification architecture description design documentation source code compiled code linked code running code established variability associated different abstraction levels introduce additional properties variability 
variation point mutually exclusive states transformation process rc requirement collection ad architecture design dd detailed design implementation compilation linking execution ua user actions representation transformation processes implicit 
illustrated development system constrained 
early phases development open design decisions consequently lot variability 
decisions deliberately left open single point system denote variation point 
refer type variation points implicit 
designed 
soon design decision left open deliberately say variation point designed 
bound 
intention designing variation point system able insert variant stage 
soon happens variation point bound 
usually variation point designed idea variants added system 
order support notion distinction open variation points 
variation point associated set variants bound 
open variation point new variants may added set 
closed variation points 
closed variation point new variants added 
usually variation point open specific representations 
example variation point class 
variation point designed detailed design 
detailed design open new subclasses added phase 
linking takes place variation point closed impossible add new subclasses system re linking system 
noted modern programming languages linking may done dynamically case variability point remains open 
consequence sub classes may added product delivery 
properties defined section accurately describe variability system 
compare evaluate different techniques implementing variability 
section number techniques mozilla architecture 
recurring patterns variability observed representation development phase abstracted variability follows certain patterns 
best knowledge variability follows patterns single variant 
pattern variability set variants 
binding time single variant picked set available variants 
single variants identified feature diagrams looking xor specialization construct 
optional variant 
optional variant special case single variant set available variants contains variant optional 
optional variants indicated feature diagrams open relation 
multiple parallel variants 
multiple parallel variants variation point permanently bound variant variant selection binding process executed time variation point accessed 
type variation point recognized specialization construct feature diagrams 
note combinations patterns possible optional single variant 
patterns variability properties variation points classification different variability realization techniques 
unfortunately doing scope 
currently working discussing taxonomy variability mechanisms patterns described 
variability management previous sections suggest method managing variability development consists steps identification constraining implementation managing variants identification variability 
step process identify variability needed 
suggest feature diagram notation introduced approach doing 
diagram important variation points identified 
constraining variability 
variation point identified needs constrained 
purpose provide limitless flexibility provide just flexibility suit current needs system cost effective way 
constraining variation point activities need take place choose binding time variation point 
user able choose variant developers product delivery 
decide variants added system 
pick variability pattern point 
feature diagram notation information obtained diagram 
pick representation realization variation point 
relevant decision way new variants added 
implementing variability 
previous suitable realization technique needs selected 
section provided reader examples techniques 
techniques 
intend provide taxonomy mechanisms techniques 
providing taxonomy scope 
managing variants 
depending variation point open sort variant management needed 
cases variants may added manually 
common modern systems download install new variants internet 
example management software component mozilla architecture see section 
component automates downloading installation component variants 
especially multiple parallel variant pattern software management system needed manage variants 
case study mozilla example variability practice analyzed architecture mozilla browser 
mozilla browser developed called open source project 
consequently information readily available design 
addition variability techniques applied mozilla architecture interesting subject context 
mozilla project started mozilla personal security manager netscape decided source code netscape available open source license 
half year decided browser scratch original source code tangled repair 
moment writing commercial product mozilla source code netscape released 
main goal mozilla project provide browser product line building web applications 
remainder section list number mozilla features analyze terminology concepts introduced 
mozilla features mozilla theme run time classic modern user provided theme support mozilla mozilla psm themes 
important feature mozilla support user interface themes 
illustrates feature feature diagram 
mozilla implements model view controller architectural pattern 
consequently theme support variation point designed architectural design 
indicated feature diagram variation point bound run time 
default themes bundled mozilla 
users download third party themes variation point open runtime 
theme application wouldn look feel variation point follows single variant pattern 
security 
security mozilla handled component called personal security manager psm 
optional 
component added system users see 
psm provides services managing certificates components encryption decryption email messages variability feature deliberately built architecture allow third par mozilla ftp file gopher finger sun mozilla java support blackdown java link time ibm java java support mozilla ties add proprietary security components 
consequently security variation point designed architectural design 
variation point bound link time 
currently psm available variant variation point open run time mozilla uses dynamic linking users install different security component alternative available 
network 
variation point follows multiple parallel variant pattern way mozilla retrieves files 
files retrieved called component see 
component uses uris uniform resource identifier protocol handlers retrieve information websites ftp sites local filesystem jar file supported protocol 
variation point designed architecture design open detailed design instance multiple parallel variant pattern bound run time call basis time needs retrieved suitable protocol handler bound variation point 
java support 
mozilla optionally support java 
illustrate feature feature diagram 
learn variation point mozilla architecture java support 
variation point combines single variant pattern optional variant pattern 
binding variation point optional variants external architecture binding typically happens linking time 
feature graph list common java implementations available linux 
implementation mozilla interaction jvm java virtual machine done open java interface interface 
interface introduced architecture design java support variation point designed architecture design 
furthermore users install compliant java implementations variation point open runtime 
system capable downloading linking necessary binary components requiring restart application 
underlying techniques course techniques mozilla unique mozilla 
mechanisms employed mozilla common techniques 
section give brief overview indicate advantages respect variability 
broker pattern 
mozilla component architecture closely resembles com component infrastructure included ms windows 
architecture instance broker pattern described 
pattern provides variability mechanism single variant pattern describe 
hard coding components components request broker suitable component 
allows developers replace called component having change calling component 
allows provide component interface 
interface discussed example application technique 
browser accesses jvm interface 
consequently compliant jvm plugged architecture 
blackbox components 
main advantage architecture forces developers components blackbox fashion 
component bus constrains component specified idl interfaces 
prevents code different components gets tangled 
allows delaying binding linking compilation 
source code dependencies components dependency related variability bound compilation 
dynamic binding 
important technique dynamic binding 
dynamic binding system able new components run time 
system shut patched recompiled restarted time new component registered bus 
dynamic linking gives users flexibility variability techniques associ ated linking 
traditionally statically linked systems techniques applied product delivery dynamic linking applied product delivery 
scripting 
technique goes dynamic binding interpreted languages 
advantage interpreted languages compiled languages context variability scripts changed run time 
domain specific languages 
prominent feature mozilla architecture xml 
mozilla uses xml format storing exchanging structured data 
specifying things user interface code javascript code xml representation called xul 
xul example domain specific language domain case user interfaces 
summary section explained variability techniques applied mozilla architecture 
variation points selected mozilla architecture illustrate patterns identified 
fourth example java support shows patterns combined various ways 
terminology combination feature diagram able discuss techniques high level discussing implementation details 
observations variability mozilla architecture variation points bound run time 
mozilla highly customizable 
second observation variation points kept open product delivery 
observations fit trend delaying design decisions illustrated 
motivation writing observed increase application various variability techniques 
furthermore observed techniques applied adhoc fashion 
number contributions address issues main contribution provides framework terminology concepts regarding 
framework terminology provides reader tools describe variability software system terms variation points variants 
addition associate binding times variation points 
best knowledge generalizes notion variability way 
second contribution recurring patterns variability 
third contribution variability management method described section 
integral part method adapted version feature graph notation discussed 
adaptations consist adding binding time information feature graph constructs addition external feature construct 
terminology patterns variability management method software developers recognize variability needed system early design systems accordingly 
furthermore communicate intentions developers motivate design choices going detail implementation 
batory malley design implementation hierarchical software systems reusable components acm transactions software engineering methodology vol 
october pp 

beck extreme programming explained addison wesley 
bosch product line architectures industry case study proceedings st international conference software engineering november 
bosch evolution composition reusable assets product line architectures case study proceedings working ifip conference software architecture february 
bosch design software architectures adopting evolving product line approach addison wesley isbn 
buschmann kel meunier rohnert stahl pattern oriented software architecture system patterns john wiley sons 
coplien hoffman weiss commonality variability software engineering ieee software november december pp 

gibson feature requirements models understanding interactions feature interactions telecommunications iv montreal canada june ios press 
griss alessandro integrating feature modeling proceedings 
fifth international conference software reuse cat 
tb 
ieee comput 
soc los alamitos ca usa xiii pp 

griss implementing product line features component reuse appear proceedings th international conference software reuse vienna austria june 
van de van der linden saunders te integral hierarchy diversity model describing product family architecture proceedings nd ares workshop development evolution software architectures product families springer verlag berlin germany 
jacobson griss johnson software reuse architecture process organization business success addison wesley 
jazayeri ran van der linden software architecture product families putting research practice addison wesley may 
kang cohen hess novak peterson feature oriented domain analysis feasibility study technical report cmu sei tr software engineering institute mellon university pittsburgh pa kang form feature oriented reuse method specific architectures annals software engineering pp 

patterns model variability product families ieee software july august pp 
view model architecture ieee software november pp 

mozilla website www mozilla org 
netscape website www netscape com 
taylor heimbigner johnson medvidovic quilici rosenblum wolf self adaptive software approach ieee intelligent systems 
nada empirical study software reuse model information software technology nr pp 
elsevier 
investments reusable software 
study software reuse investment success factors journal systems software nr 
pp elsevier 
bosch evolution software product lines cases journal software maintenance research practice pp 

bosch characterizing evolution product line architectures proceedings rd annual iasted international conference software engineering applications iasted acta press anaheim ca pp 

zave jackson dark corners requirements engineering acm transactions software engineering methodology vol 


