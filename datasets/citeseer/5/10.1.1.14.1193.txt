software configuration management state art state practice fr andreas zeller ag ch baden switzerland com universit passau lehrstuhl passau germany zeller acm org 
open problems software configuration management scm 
purpose ignite discussion current scm directions 
findings dagstuhl seminar current state software engineering assess state scm goal identify effective scm tasks solutions establish core body scm knowledge denote remaining real world scm problems 
assessment scm open problems scm 
software configuration management scm success stories software engineering 
software organizations admit importance scm prerequisite coordinated software development 
consequently scm widely success 
scm tools market expected worth dollars 
dagstuhl seminar software engineering research education seeking new agenda joined experts software engineering fields take stock current state software engineering research education 
seminar addressed task scm area assessing state software configuration management 
particular attempted cover questions know 
scm tasks solutions practicing software engineer able perform 
teach 
core body scm knowledge validated useful practice 
know 
important open scm problems 
contrast earlier approaches searched novel ideas keep researchers busy years examined possible similarities area scm attempted identify remaining real world scm problems problems faced today practitioners sufficiently addressed scm research 
summarizes results purpose ignite discussion current scm directions 
auditing history traceability logging statistics status reports construction structure building snapshots optimization change impact analysis regeneration lifecycle support task management communication documentation process workspaces conflict resolution families connectivity access control change requests bug tracking change propagation partitioning accounting controlling assessing scm solutions team fig 

scm functionality areas dart system model interfaces relationships selection consistency installation parameterization instantiation re configuration deployment versions configurations versions configurations baselines project contexts repository kinds components components focused scm solutions provided supported automated scm tool system research prototype full fledged commercial system 
just matter economy solution proposed realized regard 
note consider scm organisational matters 
reason irrelevance fact convinced scm procedures need defined organisation scm tool selected course procedures 
difficulty organisation flavour procedures thing solution 
relying dart survey functionality scm systems grouped major functionality areas shown 
team centered functionality areas deal technical aspects scm components 
identify classify store access components form product 
structure 
represent architecture product 
construction 
support construction product artifacts 
team 
enable project team develop maintain family products 
areas italic areas covered considered part scm 
deployment 
support remote installation maintenance product 
contrast team centered areas process centered functionality areas cover management issues auditing 
keep audit trail product process 
accounting 
gather statistics product process 
controlling 
control changes 
process 
support management product evolves 
areas shall discuss state art assessing available proposed scm solutions means solve specific scm tasks 
assessment categories elaborated dagstuhl seminar scm solution ranked categories effectiveness 
solution 
considers factors task covers solution problem posed accomplishing task 
ratings high solution effective medium solution somewhat effective low solution hardly effective 

extent typical software development organization afford perform solution 
note may solution high cost organization afford 
ratings high solution affordable medium solution somewhat affordable low solution requires relatively high investment 

extent solution taught university including body knowledge conveyed students understand convey body knowledge 
ratings high know teach solution medium know teach solution extent low really know teach solution 
practice 
class users adopted solution laboratory users lu researchers developing prototypes models willing early prototypes solution early adopters ea willing advanced prototypes early majority em willing users industrial quality versions solution late majority lm willing solution considerable industrial experience 
research potential 
extent research supposed increase effectiveness practice 
ratings high major breakthroughs expected medium substantial improvements low details may improved 
scm team tasks solutions discussion solutions available team functionality area table page summarizes findings 
team notion workspace isolates developer crucial scm 
generally workspaces provide structure states configuration items configurations access rights different functions project 
extent requirements met systems varies file checkin checkout mechanisms rcs virtual file systems clearcase dfs database supported workspaces adele 
scm system provides means generate propagate apply changes scm system allows simulate workspaces workspace developer private directory branch version graph 
problem considered solved 
uncontrolled propagation changes chances people changes interfering high leads conflicts resolved 
merging changes manual 
textual merging considered unsafe environments effectiveness syntactic merging semantic merging validated 
solutions ease pain manual conflict resolution save valuable developer time 
group working needs connectivity propagate changes 
small group interconnection central repository suffices project sizes 
things get difficult multi site multi organization software developments socalled virtual software corporations 
local copies shared resources replicated cached remote access designed cooperation possible avoiding total project disclosure 
commercial scm tools clearcase offer support wide area connectivity area remains subject research 
components managing history individual components understood scm task 
tools sccs rcs decades 
efficient means store retrieve huge amounts versions repository available thoroughly validated 
identifying reconstructing configuration means components changes applied baseline task easily solved available scm tools 
scm component level may scm area best understood 
structure versioning structures systems related components completely solved 
start inventory components system model 
scm ranking scm solutions effectiveness scm tasks team workspaces individuals groups high high high lm low conflict resolution parallel rule automated merging low low med 
high local area connectivity high med high lm low wide area connectivity remote access replication caching components med med med ea med version management components revisions branches checkout checkin identification high high high lm low repository storage issues deltas high high high lm low configurations baselines parts lists identification structure high high high lm low system model interfaces relationships med 
low low lu med version management structures renaming reorganization retiring subsystems history med high high ea med selection baselines plus change sets generic configurations high high high em low consistency compatible versions construction med 
low low lu med building snapshots optimization dependencies high high high lm low regeneration integrated scm deployment high med med med replication medium high high high lm low installation consistent manner med med low em high parameterization customizing med med low med instantiation running med med low med reconfiguration dynamically low low low high table 
scm team tasks practical usage research potential systems go simple part lists relationships interfaces barely supported versioned 
exception rule build dependencies discussed section extent system modeling part scm discussed 
commercial scm systems free tools cvs allow decent versioning file hierarchies issues renaming reorganizing structures handled fully satisfying manner 
scm systems offer methods select specific configurations range goes tags rcs cvs elaborated rules clearcase adele 
organization versions changes scm system version model considerable impact way users interact scm system 
shown existing versioning models unified applying constrained changes quest user friendly intuitive scm interaction continues 
open problem identify denote consistent configurations presence multiple variants 
far systems ice cma confined lab 
hand ask variability construction time permanent variants scm issue 
general product variability best handled product product 
design change system issues variability construction time variability run time 
consistency issues may rise scope dynamic reconfiguration see section efforts spent variability may better directed software design 
construction scm task building products summarized rules 
virtually software product built numerous descendants 
significant improvements original include smart recompilation parallel distributed building automatic dependency tracking caching derived versions 
widely today difficult see room improvements 
important problem traditional distinction construction tools tools rcs separation hampers regeneration derived files 
notable exception example integration build facility integrated clearcase 
deployment deployment new field scm traditionally subsumed maintenance 
heimbigner wolf deployment encompasses installation parameterization instantiation reconfiguration iso lists replication 
replication means sure intended configuration correctly completely copied medium chosen delivery 
copying master preparing package cd documents putting files area electronically transferred customer site techniques replication 
evidently topic process engineering organization 
main challenge define apply process self check mistakes detected delivery 
see research opportunities area 
installation task transferring product user 
basic installation easy set files copied places reachable users 
task difficult product depends products specific versions 
managing dependencies denoting consistency partially solved today applications depend need installation support increase 
parameterization task adapting product user context task done site user factory especially hardware part delivery 
parameterization traditionally carried customization files environment variables 
tools gnu determine system properties automatically 
checks increasingly carried run time need system support windows registry rudimentary form capabilities 
instantiation task starting product execution 
trivial solved simple monolithic applications challenge soon multiple components interact trading services ones specified corba serve base determining consistent configuration 
reconfiguration means adapting product new requirements executing 
includes decisions installation parameterization instantiation may mean product entirely re creates replaces 
problem understood speaking isolated applications uploading software releases dynamically space probes telecommunication switches common usage 
dynamic reconfiguration gain importance software products interact undetermined time 
challenge scm see far classical scm concepts applied dynamically 
observation aspects deployment considered late life cycle software product usually software finished somebody discovers shipped customer site 
requirements specifications contain paragraphs requirements deployment issues 
software producers improve area complex software systems offer new research issues 
scm process tasks solutions turn process functionality area 
findings summarized table page 
process far scm system support user lifecycle model organization policies 
scm system comes built process small ranking scm solutions effectiveness scm tasks process lifecycle support process enforcement low 
low med lu med task management identify current pending activities med high high em low communication relevant events auditing history traceability logging high high high low individual items high high high lm low structures related documents high 
med 
low lu med 
accounting status statistics reports controlling high high high lm low access control unwarranted changes high high high em low change requests automatically med high high em low bug tracking automatically high high med med table 
scm process tasks checkin checkout cycle long transactions degree large scale processes supported varies 
experience tells big leap forward clear definition software processes 
tools beneficial really supportive take role increasing number required interactions developers 
consequently scm systems rigid enforcing process developers reduce effectiveness 
distinction support discipline effectiveness lifecycle support remains validated 
enforcing activities advanced scm systems offer means track current pending activities 
task management area overlapping project management 
tools carefully decided type information kept scm tool project management tool 
interface thin scm system handles states configuration items configurations information project management progress control 
tight coupling activities state control results leads sluggish scm systems 
ultimate process support achieved automated flow systems 
widely validation pending research topic 
practice flow typically organized informal communication 
scm systems support triggers associated specific events automatic notification email change occurred 
communication features understood cheap effective means simple flow support 
practical usage research potential auditing scm system provides features inquire change history specific configuration items features mature widely 
unsolved problem traceability related documents trace change implementation back design back requirements 
change implementation related change documentation 
change versioning activity scm allows changes associated room improvement 
accounting accounting facilities users managers inquire status product 
scm systems allow classifying components versions specific properties experimental proposed stable may simple tagging method sufficient 
know research addressed pending problems area 
controlling access control fundamental principles automated scm 
system features kind access control typically locks user time edit file 
scm systems support access control lists specific users allowed changes rely security features underlying repository 
access control widely scm research topic 
tracking change requests defect reports heart maintenance process starting soon independent testing begins 
process handling especially responsibility decisions definition records kept determines responsiveness organization user needs 
small organizations simple excel sheet provide support bigger organizations require elaborated data base dedicated queries 
advanced scm systems lifespan offer elaborated management change requests fact development process organized processing change requests 
effectiveness process remains validated improvements come scm vendors scm researchers 
important scm topic tracking product defects provides immediate insight current product quality 
bug tracking tools frequently come standalone tools freely available elaborated commercial systems 
integration scm repositories automated testing facilities leaves desired challenge scm vendors researchers 
scm mature discipline 
mature practice successfully 
mature research taught left researched 
research areas considered high potential automated change integration deployment issues major improvements feasible wide area connectivity version management structures system modeling consistency issues lifecycle support integration issues 
understood solutions available single scm system offers solutions 
integration flexibility issues scm users scm vendors scm researchers provided find way validate practical benefits new scm models 
validation issue state scm general 
compiling tables amazing see hard facts available back specific judgements 
important result assessment scm experience reports experiments needed need know know move 
encourage scm community prove right wrong look forward fruitful discussions 
acknowledgments 
participants organizers dagstuhl workshop software engineering research education suggestions contributions 
gregor snelting provided useful comments earlier revision 
walter tichy initiated discussion state scm helped lot ranking individual scm solutions 

berliner cvs ii parallelizing software development 
proc 
winter usenix conference washington 

binkley horwitz reps program integration languages procedure calls 
acm transactions software engineering methodology jan 

syntactic software merging 
estublier pp 


burrows wesley ovum evaluates configuration management 
ovum burlington ma 

conradi westfechtel version models software configuration management 
acm computing surveys june 

dart concepts configuration management 
feiler pp 


hoffman parnas software engineering research education seeking new agenda 
workshop report dagstuhl feb 

estublier ed 
software configuration management selected papers icse scm scm workshops seattle washington oct vol 
lecture notes computer science springer verlag 

estublier adele configuration manager 
tichy ch 
pp 


estublier favre scm pdm integration 
magnusson pp 


feiler ed 
proc 
rd international workshop software configuration management trondheim norway june acm press 

feldman program maintaining computer programs 
software practice experience apr 

fowler korn rao dfs multiple dimensional file system 
tichy ch 
pp 


fr hygiene software works software configuration management 
proceedings second european conference software quality oslo pp 


heimbigner wolf post deployment configuration management 
sommerville pp 


horwitz prins reps integrating noninterfering versions programs 
acm transactions programming languages systems july 

hunt vo tichy delta algorithms empirical analysis 
acm transactions software engineering methodology apr 

cm challenge configuration management works 
tichy ch 
pp 


mackenzie creating automatic configuration scripts 
free software foundation dec 
distributed gnu 

magnusson ed 
proc 
th symposium system configuration management brussels belgium july vol 
lecture notes computer science springer verlag 

system activity configuration management 
sommerville pp 


object management group 
common object request broker architecture specification aug 

keeping track managing messages 
cygnus support 

data model configuration management assistant 
proc 
nd international workshop software configuration management princeton new jersey oct tichy ed acm press pp 


source code control system 
ieee transactions software engineering se dec 

sommerville ed 
proc 
th international workshop software configuration management berlin germany mar vol 
lecture notes computer science springer verlag 

stallman mcgrath gnu program directing recompilation ed 
free software foundation 
distributed gnu 

tichy rcs system version control 
software practice experience july 

tichy smart recompilation 
acm transactions software engineering methodology july 

tichy ed configuration management vol software 
john wiley sons chichester uk 

van der hoek heimbigner wolf configuration management research 
estublier pp 


van der hoek heimbigner wolf system modeling 
magnusson pp 


westfechtel structure oriented merging revisions software documents 
feiler pp 


westfechtel conradi software configuration management engineering data management differences similarities 
magnusson pp 


methods tools software configuration management 
john wiley sons chichester uk 

zeller smooth operations square operators version set model ice 
sommerville pp 


zeller snelting unified versioning feature logic 
acm transactions software engineering methodology oct 
