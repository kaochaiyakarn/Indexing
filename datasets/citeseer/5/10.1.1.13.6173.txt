efficiently mining frequent trees forest mohammed zaki computer science department rensselaer polytechnic institute troy ny mining frequent trees useful domains bioinformatics web mining mining semi structured data 
formulate problem mining embedded subtrees forest rooted labeled ordered trees 
treeminer novel algorithm discover frequent subtrees forest new data structure called scope list 
contrast treeminer pattern matching tree mining algorithm 
conduct detailed experiments test performance scalability methods 
find treeminer outperforms pattern matching approach factor scaleup properties 
application tree mining analyze real web logs usage patterns 

frequent structure mining fsm refers important class exploratory mining tasks dealing extracting patterns massive databases representing complex interactions entities 
fsm encompasses mining techniques associations sequences generalizes complex patterns frequent trees graphs :10.1.1.36.2485
patterns typically arise applications bioinformatics web mining mining semistructured documents 
increases complexity structures discovered extracts informative patterns specifically interested mining tree patterns 
motivating example tree mining consider web usage mining problem 
database web access logs popular site perform mining tasks 
simplest ignore link information logs mine frequent sets pages accessed users 
step form user sequence links followed mine frequent user access paths 
possible look entire forward accesses user mine frequently accessed subtrees site 
supported part nsf career award iis nsf generation software program eia 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigkdd edmonton alberta canada copyright acm 
zaki cs rpi edu www cs rpi edu zaki years xml popular way storing data sets semi structured nature xml allows modeling wide variety databases xml documents 
xml data forms important data mining domain valuable develop techniques extract patterns data 
tree structured xml documents widely occurring real applications 
set xml documents discover commonly occurring subtrees appear collection 
tree patterns arise bioinformatics 
example researchers collected vast amounts rna structures essentially trees 
get information newly sequenced rna compare known rna structures looking common topological patterns provide important clues function rna 
introduce treeminer efficient algorithm problem mining frequent subtrees forest database 
key contributions follows introduce problem mining embedded subtrees collection rooted ordered labeled trees 
notion scope node tree 
show tree represented list node scopes novel vertical format called scope list 
develop framework non redundant candidate subtree generation propose systematic search possibly frequent subtrees pattern generated 
show efficiently compute frequency candidate tree joining scope lists subtrees 
formulation allows discover subtrees forest subtrees single large tree 
furthermore simple modifications allow mine unlabeled subtrees unordered subtrees frequent sub forests disconnected subtrees 
contrast treeminer base tree mining algorithm pattern matching 
experiments synthetic real dataset show treeminer outperforms factor 
algorithms exhibit linear scaleup increasing number trees database 
application study tree mining web usage mining 
input data form xml documents represent user session extracted raw web logs 
show mined tree patterns capture interesting relationships frequent sets sequences 

problem statement tree acyclic connected graph forest acyclic graph 
forest collection trees tree connected component forest 
rooted tree tree vertices distinguished called root 
refer vertex rooted tree node tree 
ordered tree rooted tree children node ordered node children designate child second child kth child 
labeled tree tree node tree associated label 
trees consider ordered labeled rooted trees 
choose focus labeled rooted trees types datasets common data mining setting datasets represent relationships items attributes named top root element main web page site 
fact treat node having label mine ordered unlabeled subtrees 
ancestors descendants consider node rooted tree root node unique path called ancestor denoted length path ancestor descendant 
node ancestor descendant 
immediate ancestor called parent child say nodes siblings parent say embedded siblings common ancestor 
node numbers labels denote tree set labeled nodes set branches 
size denoted number nodes node defined number position depth pre order traversal tree 
notation ni refer ith node numbering scheme 

label referred item node taken set labels allow different nodes label label node number function maps ni label ni node identified number label 
branch nx ny ordered pair nodes nx parent ny 
subtrees say tree ns bs embedded subtree denoted provided ns ii nx ny bs ny nx nx ancestor ny words require branch appears vertices path root leaf say contains sub tree size called sub tree 
note traditional definition induced subtree branch nx ny bs nx parent ny embedded subtrees generalization induced subtrees allow direct parent child branches ancestor descendant branches 
embedded subtrees able extract patterns hidden embedded deep large trees missed traditional definition 
henceforth subtree taken mean embedded subtree indicated 
definition subtree connected 
disconnected pattern sub forest main focus mining subtrees simple modification enumeration scheme produces sub forests 
scope nl refer subtree rooted node nl nr right leaf node nl 
scope node nl interval lower bound position node nl upper bound position node nr 
concept scope play important part counting subtree frequency 
tree mining problem denote database trees forest subtree occurrence identified match label set matching positions nodes formally 
tn nodes 
sm nodes match label ti ti 
tim sk ti 
branch sj sk iff ti ancestor ti condition indicates node labels match indicates tree topology matching nodes match label unique occurrence denote number occurrences subtree tree dt dt 
support subtree database defined dt number trees contain occurrence weighted support defined total number occurrences trees typically support percentage total number trees subtree frequent support equal user specified minimum support minsup value 
denote fk set frequent subtrees size user specified minsup value goal efficiently enumerate frequent subtrees domains interested weighted support support 
supported mining approach focus mainly support 
tree string encoding support support weighted support weighted support match labels match label string string subtree sub forest example tree subtrees example :10.1.1.104.714
consider shows example tree node labels drawn set 
shows node label circled number depth numbering scope 
example root occurs position label right leaf root occurs position scope root 
tree subtree support weighted support node occurs positions support match labels omit set notation convenience 
valid subtree 
sub tree disconnected sub forest 

generating candidate trees mains steps enumerating frequent subtrees need systematic way generating candidate subtrees frequency computed 
candidate set non redundant subtree generated 
second need efficient ways counting number occurrences candidate database determine candidates pass minsup threshold 
step data structure dependent treated 
concerned problem non redundant pattern generation 
describe tree representation candidate generation procedure 
representing trees strings standard ways representing labeled tree adjacency matrix adjacency list 
tree nodes branches note trees adjacency matrix representation requires fn space maximum fanout term storing labels fn term storing adjacency information adjacency lists require space term storing labels header pointers adjacency lists storing label pointer list node 
possibly large expect adjacency lists space efficient 
directly store labeled tree node label child pointer sibling pointer triplet require space 
efficient subtree counting manipulation adopt string representation tree 
procedure generate string encoding denoted tree initially set 
perform depth preorder search starting root adding current node label backtrack child parent add unique symbol string assume 
format allows conveniently represent trees arbitrary number children node 
branch traversed forward backward direction space usage store tree string exactly 
string encoding space efficient representations 
simpler manipulate strings adjacency lists trees pattern counting 
notation refer label sequence consists node labels depth ordering backtrack symbol label sequence ignores tree topology 
example 
show string encodings tree subtrees 
example subtree encoded string 
start root add string 
node preorder traversal labeled added encoding 
backtrack root adding follow node adding encoding 
backtrack root adding string 
note label sequence 
candidate subtree generation anti monotone property frequent patterns efficient candidate generation frequency super pattern equal frequency sub pattern 
consider known frequent pattern extension 
past experience suggests extension single item time efficient 
information frequent subtrees generate candidate subtrees 
equivalence classes say subtrees prefix equivalence class iff share common prefix th node 
formally string encodings trees function return prefix ith node 
class iff 
members equivalence class differ position node 
class prefix equivalence class prefix string element list label attached position attached attached attached prefix equivalence class example 
consider shows class template subtrees size prefix subtree size string encoding 
denotes arbitrary label valid positions node label may attached prefix cases subtree obtained adding prefix 
note node attached position valid member class yield different prefix shows actual format store equivalence class consists class prefix string list elements 
element pair label node specifies depth position node attached 
example refers case attached node position 
shows encoding subtrees corresponding class element 
note shares prefix th node 
subtrees shown illustration purposes store element list class 
prefix subtree size notation refer class omit subscript ambiguity 
element class write 
pair corresponds subtree size sharing prefix node labeled attached node ni notation px refer new prefix subtree formed adding lemma 
class prefix subtree nr right leaf node scope 

set valid node positions attached ni scope ni ith node lemma states valid element may attached nodes lie path root right leaf nr easy see attached position resulting prefix different nr depth numbering 
candidate generation equivalence class obtain candidate subtrees 
assume loss generality elements class kept sorted node label primary key position secondary key 
sorted element list candidate generation procedure describe outputs new class list respects order explicit sorting 
main idea consider ordered pair elements class extension including self extension 
candidates pair elements joined 
theorem formalizes notion 
theorem class extension 
prefix class encoding denote elements class 
px denote class representing prefix element list equivalence class prefix element list prefix element list candidate generation extensions element 
define join operator elements denoted follows case add class px 
add px 
case ii add class px 
case iii new candidate possible case 
possible subtrees prefix size enumerated applying join operator ordered pair elements 
proof omitted due lack space 
example 
consider showing prefix class contains elements 
step perform self join 
case produces candidate elements new class 
self join produces possible candidate subtrees node sibling child 
left subtrees illustrate cases 
join case ii applies second element joined ancestor possible candidate element remains attached node join see third subtree left hand class 
add class 
move class right prefix 
try join case iii applies new candidate generated 
merge subtrees obtain new subtree different prefix added class 
perform adding elements class shown right hand side 
case applies join single items produce candidate subtrees prefix class xi 
xi label indicates attached node 
join xi xj want connected subtrees insert element xj class xi 
corresponds case xj child xi 
want generate sub forests insert xj class xi 
case xj sibling xi connected roots trees sub forest 
allow class elements show class extension theorem produce possible candidate sub forests 
focus subtrees 
corollary automatic ordering 
prefix class elements sorted total ordering follows 
class extension method generates candidate classes sorted elements 
corollary correctness 
class extension method correctly generates possible candidate subtrees candidate generated 

treeminer algorithm treeminer performs depth search dfs frequent subtrees novel tree representation called scope list fast support counting discussed 
tree tree database trees tree horizontal format tid string encoding vertical format tid scope pairs scope lists scope list representation subtree tree xk refer node notation refer scope list element scope list triple tree id tid occurs match label length prefix scope item xk :10.1.1.104.714:10.1.1.104.714:10.1.1.104.714
recall prefix match label gives positions nodes match prefix 
prefix occur multiple times tree associated multiple match labels multiple scopes 
initial created single items labels occur tree single item empty prefix don store prefix match label single items 
show compute pattern frequency joins scope lists 
example 
shows database trees horizontal format tree vertical scope lists format item 
consider item occurs node position scope tree add scope list 
item occurs position scope add 
occurs scope tree add scope list 
similar manner scope lists items created 
frequent subtree enumeration shows high level structure treeminer 
main steps include computation frequent items subtrees enumeration frequent subtrees dfs search class 
describe step detail 
computing treeminer assumes initial database horizontal string encoded format 
treeminer minsup frequent subtrees classes frequent subtrees enumerate frequent subtrees enumerate frequent subtrees element px element frequent px px enumerate frequent subtrees px treeminer algorithm compute item string encoding tree increment count array 
step computes database statistics number trees maximum number labels 
labels belong class empty prefix position indicates attached node 
total time step tree 
theorem candidate class consists elements form efficient counting compute supports candidate integer array size cnt gives count candidate subtree encoding 
total time step tree 
computing create vertical scope list representation frequent item 
computing fk shows pseudo code depth search frequent subtrees enumerate frequent subtrees 
input procedure set elements class scope lists 
frequent subtrees generated joining scope lists pairs elements including self joins 
joining scope lists pruning step inserted ensure subtrees resulting tree frequent 
true go ahead scope list join avoid join 
convenience set denote possible candidate subtrees may result class extension theorem denote respective scope lists 
subtrees frequent current level form elements classes level 
recursive process repeated frequent subtrees enumerated 
elements total cost ln cost scope list join 
terms memory management easy see need memory store classes path dfs search 
need store intermediate scope lists classes current class new candidate class px 
memory footprint treeminer 
scope list joins scope list join subtrees class interval algebra scope lists 
sx lx ux scope node sy ly uy scope say sx strictly sy denoted sx sy ux ly interval sx overlap sy occurs sy 
say sx contains sy denoted sx sy lx ly ux uy interval sy proper subset sx 
scopes allows compute constant time descendant embedded sibling recall candidate extension theorem join elements possible outcomes add class px 
scope test candidate added px refers candidate subtree child node words represents subtree encoding px 
check subtree occurs input tree tid search exists triples ty sy tx sx mx ty tx triples occur tree tid mx extensions prefix occurrence match label sy sx lies scope conditions satisfied instance descendant input tree extend match label old prefix get match label new prefix px lx add triple ty sy lx scope list px 
refer case scope test 
scope test second candidate represents case embedded sibling descendants node position prefix scope strictly scope element added px represents pattern px number depending path length check occurs tree tid need check exists triples ty sy tx sx mx ty tx triples occur tree tid mx extensions prefix occurrence match label sx sy comes depth ordering scopes overlap 
conditions satisfied add triple ty sy lx scope list px 
refer case scope test 
note just check sx sy disjoint identical tids prefix match labels sx sy sx sy support counted unordered subtrees 
application scope scope test takes time 
distinct pairs respectively 
denote average number scopes match label 
time perform joins reduces small constant 
prefix elements infrequent elements prefix elements infrequent elements prefix elements infrequent elements scope list joins minsup example :10.1.1.104.714:10.1.1.40.9892
shows example scope list joins database minsup want mine subtrees occur trees initial class empty prefix consists frequent items scope lists 
pairs elements considered extension including 
consider extensions item produces new class frequent subtrees 
infrequent subtrees listed bottom class 
computing new scope list subtree perform scope tests want find occurrences scope subtree rooted 
si denote scope item tree find 
add triple new scope list 
manner test occurrences trees 
note instances candidate pattern 
new scope list occurs minsup tids pattern considered frequent 
consider result extending class 
frequent pattern scope list obtained applications scope test 
need test disjoint scopes match label 
example find satisfy condition 
add triple class 
notice new prefix match label obtained adding old prefix match label position occurs 
final scope list new candidate distinct tids frequent 
frequent patterns minsup 
reducing space requirements generally speaking important elements scope scope tests sure sy sx sx sy respectively 
test true add sy lx candidate scope list 
match labels useful resolving prefix context item occurs tree 
observation possible reduce space requirements scope lists 
add lx match label occurs subtree tid items occur tree optimization drastically cuts match label size match labels kept refer items occurrence 
special case items tree distinct match label empty element scope list reduces tid scope pair 
example 
consider scope list class :10.1.1.36.2485
occurs omit match label entries altogether triple pair triple 
opportunistic candidate pruning mentioned generating candidate subtree perform pruning test check subtrees frequent 
easily done bfs pattern search method see section dfs search may information available pruning classes level counted 
treeminer uses opportunistic pruning scheme determines subtree counted 
counted fk safely prune know subtree counted 
need impose ordering candidate generation efficiently perform subtree pruning test 
fortunately candidate extension method automatic ordering property see corollary 
know exact order patterns enumerated 
apply pruning test candidate generate subtree test candidate ordering property 
apply pruning test test subtree 
pruned perform scope list join get exact frequency 

algorithm serves base pattern matching algorithm compare treeminer 
employs breadth iterative search frequent subtrees 
high level structure shown similar apriori 
significant differences count number subtree matches input tree instance equivalence classes prefix tree data structure index opposed hash trees 
details pattern matching completely different 
pattern matcher assumes tree stored string encoding horizontal format see 
computed treeminer 
due lack space describe main features see details 
minsup 
frequent subtrees 
classes frequent subtrees 
fk 
ck classes candidate subtrees 
trees 
increment count 
ck classes frequent subtrees 
fk hash table frequent subtrees ck 
set frequent subtrees fk algorithm pattern pruning adding candidate subtree class ck sure subtrees frequent 
efficiently perform step creation fk line add individual frequent subtree hash table 
takes time check subtree candidate subtrees length takes time perform pruning check candidate 
prefix tree data structure new candidate set generated tree need efficiently find matching candidates 
prefix tree data structure index candidates ck facilitate fast support counting 
furthermore adding individual subtrees prefix tree index entire class class prefix 
prefix match input tree class elements match 
allows rapidly focus candidates contained class ck 
internal node prefix tree depth refers dth node label sequence 
internal node depth points leaf node internal node depth 
leaf node prefix tree consists list classes label sequence leaf contain multiple classes 
ex ample classes prefix encodings label sequence belong leaf 
storing equivalence classes prefix tree opposed individual patterns results considerable efficiency improvements pattern matching 
tree ignore classes prefix match look individual elements 
support counting consists main steps find leaf containing classes may potentially match check class prefix exactly matches check elements contained finding potential matching leafs label sequence tree database 
locate matching leafs traverse prefix tree root child pointers different items reach leaf 
identifies classes prefixes label sequence subsequence 
process focuses search leafs ck subtree topology leaf classes may completely different 
perform exact prefix match 
worst case may subsequences lead different leafs 
practice smaller small fraction leafs match label sequences especially pattern length increases 
time traverse root leaf log average number distinct labels internal node 
total cost step kn log 
prefix matching matching prefix class leaf tree main step support counting 
denote ith node subtree 
denote nodes positions recursive routine test prefix matching 
rth recursive call maintain invariant nodes matched nodes ir prefix node matches matches matches ir 
note nodes traversed consecutively matching nodes far apart 
maintain stack node scopes consisting scope nodes root current right leaf ir ir occurs depth scope stack size 
assume matched nodes rth node node matched child likewise search subtree rooted ir 
match position ir push ir scope stack 
hand node outside scope attached position pop scope stack nodes ik search subtree rooted il 
process repeated nodes matched 
step takes kn time worst case 
item occurs takes time 
element matching search match element searching starting subtree ik 
descendant embedded sibling 
check takes time 
match support element incremented 
interested support occurrence count incremented tree interested weighted support occurrences continue recursive process matches 

experimental results experiments performed mhz pentium pc mb memory running redhat linux 
timings total wall clock time include preprocessing costs creating scope lists treeminer 
number frequent trees length number frequent trees length distribution frequent trees length synthetic datasets wrote synthetic data generation program mimicking website browsing behavior 
program constructs master website browsing tree parameters supplied user 
parameters include maximum fanout node maximum depth tree total number nodes tree number node labels allow multiple nodes master tree label 
master tree generated recursive process 
node tree decide children generate 
number children sampled uniformly random range processing children nodes assign random probabilities branch including option backtracking node parent 
sum probabilities node 
probability associated branch indicates visitor follow link long tree depth equal maximum depth process continues recursively 
master tree created create subtrees specified parameter generate subtree repeat recursive process starting root generate random number decide child follow backtrack 
branch visited select unvisited branches backtrack 
default values parameters number labels number nodes master tree maximum depth maximum fanout total number subtrees 
synthetic datasets dataset default values values set default fanout set remaining default values 
dataset consists web logs files collected month cs department 
logs touched unique web pages department web site 
processing raw logs obtained user browsing subtrees cs department website 
average string encoding length user subtree 
shows distribution frequent subtrees length different datasets experiments exhibit symmetric distribution 
lowest minimum support longest frequent subtree nodes respectively 
datasets longest subtree nodes 
performance comparison shows performance versus treeminer 
real dataset find treeminer times faster support 
sup total time sec log scale total time sec treeminer minimum support treeminer minimum support total time sec total time sec treeminer minimum support treeminer minimum support performance comparison port treeminer outperforms factor 
reason maximum pattern length support 
level wise pattern matching able easily handle short patterns 
support maximum pattern length suddenly jumped unable efficiently deal long patterns 
exactly thing happens 
supports lower treeminer outperforms wide margin 
lowest support difference factor 
relatively short frequent subtrees 
treeminer outperforms lowest support shown difference factor 
experiments clearly indicate superiority method pattern matching method especially patterns long 
total time sec treeminer minsup number trees scaleup total time sec pm pm pruning tm tm pruning minimum support pruning scaleup comparison shows algorithms scale increasing number trees database trees 
level support find linear increase running time increasing number transactions algorithms treeminer continues times faster 
effect pruning evaluated effect candidate pruning performance treeminer 
find denoted pm graph benefits pruning fewer number candidates lesser cost support counting pattern matching 
hand treeminer labeled tm graph benefit opportunistic pruning scheme 
pruning tends benefit higher supports lower supports performance degrades candidate pruning 
treeminer pruning support times slower treeminer pruning 
main reasons 
perform pruning need store fk hash table need pay cost generating subtrees new pattern 
adds significant overhead especially lower supports frequent patterns 
second vertical representation extremely efficient faster perform scope list joins perform pruning test 
minsup pruning full pruning opportunistic full vs opportunistic pruning table shows number candidates generated dataset pruning full pruning pattern matcher opportunistic pruning treeminer 
full pruning opportunistic pruning extremely effective reducing number candidate patterns opportunistic pruning full pruning factor 
full pruning cuts number candidates factor 
pruning essential pattern matching methods may benefit scope list method cases high support 

application web xml mining demonstrate usefulness mining complex patterns detailed application study mining usage patterns web logs 
mining data collected web server log files useful studying customer choices helps better organize web pages 
accomplished knowing web pages frequently accessed web surfers 
logml publicly available xml application describe log reports web servers 
logml provides xml vocabulary structurally express contents log file information compact manner 
logml documents parts web graph induced page pairs raw logs summary statistics top hosts domains keywords number bytes accessed list user sessions subgraphs web graph extracted logs 
inputs web mining system web site analyzed raw log files spanning days extended periods time 
web site populate web graph help web crawler 
raw logs processed logml generator turned logml document contains information need perform various mining tasks 
web graph obtain page urls node identifiers 
enabling web mining user sessions logml document 
user sessions expressed subgraphs web graph contain complete history user clicks 
user session session id ip host name list edges giving source target node pairs time utime link traversed 
example user session shown name ppp net tr source target utime source target utime source target utime source target utime source target utime source target utime itemset mining discover frequent sets pages accessed ignore link information note unique nodes visited user session 
user session produces user transaction containing user name node set follows ppp net tr 
creating transactions user sessions obtain database ready frequent set mining 
applied association mining algorithm real logml document cs web site day logs 
user sessions average distinct nodes session 
example frequent set shown 
pattern refers popular turkish poetry site maintained department members 
user appears interested poet 
path www cs rpi edu name poetry frequency node ids path poems index html path poems picture html path poems html path poems contents html path html sequence mining task perform sequence mining look longest forward links user session generate new sequence time back edge traversed 
applied sequence mining logml document cs web site 
user sessions obtain maximal forward sequences average sequence size 
example frequent sequence shown indicates sequence user accessed pages related 
starting page contains list 
path www cs rpi edu name poetry frequency node ids path html path poems index html path poems contents html tree mining frequent tree mining easily extract forward edges user session avoiding cycles multiple parents obtain subtree corresponding user 
example user session get tree ppp net tr applied treeminer algorithm cs logs 
user sessions obtain subtrees single user session lead multiple trees multiple roots user graph average record length including back edges 
example frequent subtree shown 
notice subtree encompasses partial information sequence unordered information itemset relating 
mined subtree clearly informative highlighting usefulness mining complex patterns 
path www cs rpi edu name poetry path poems frequency nodes path html path poems index html picture html contents html html ran detailed experiments logs files collected month cs department touched total web pages 
processing logml database user graphs 
space shows results refer reader details results lead interesting observations support mining complex patterns web logs 
example itemset mining discovers long patterns 
sequence mining takes longer time patterns useful contain path information 
tree mining tough takes time sequence mining produces informative patterns obtained set sequence mining 

related tree mining instance frequent structure mining obvious relation association sequence mining :10.1.1.40.9892
frequent tree mining related tree isomorphism tree pattern matching 
pattern tree target tree subtree isomorphism problem decide isomorphic subtree mapping subtree preserves node adjacency relations 
tree pattern matching pattern target trees labeled ordered 
say matches node exists mapping nodes nodes root maps maps labels maps leaf ith child maps ith child subtree isomorphism pattern matching deal induced subtrees mine embedded subtrees 
interested enumerating common subtrees collection trees 
tree inclusion problem studied labeled trees obtained deleting nodes 
problem equivalent checking embedded presents dynamic programming algorithm solving ordered tree inclusion potentially substituted pattern matching step 
utilizes prefix information fast subtree checking step pattern matching efficient sequence operations 
little previous mining frequent subtrees 
asai freqt apriori algorithm mining labeled ordered trees independently proposed candidate generation scheme similar 
wang liu developed algorithm mine frequently occurring subtrees xml documents 
algorithm reminiscent level wise apriori approach mine induced subtrees 
related problem accurately estimating number matches small node labeled tree large labeled tree context querying xml data 
compute summary data structure give frequency estimates summary database exact answers 
contrast interested exact frequency subtrees 
furthermore deals traditional induced subtrees mine embedded subtrees 
advent xml data representation exchange standard active indexing querying xml documents mainly tree graph structured 
efficiently answer queries various node numbering schemes similar proposed 
looked path query evaluation uses local knowledge data graph path constraints graph schemas 
major difference works answering user specified queries regular path expressions interested finding frequent tree patterns documents 
mining frequent graph patterns 
agm algorithm discovers induced possibly disconnected subgraphs :10.1.1.36.2485
fsm algorithm improves agm mines connected subgraphs 
methods follow apriori style level wise approach 
agm fsm tree mining discover induced subtrees 
contrast discover embedded subtrees 
important differences graph mining tree mining 
trees rooted unique ordering nodes depthfirst traversal 
contrast graphs root allow cycles 
mining graphs methods apply expensive canonization step transform graphs uniform representation 
step unnecessary tree mining 
graph mining algorithms overly general efficient tree mining 
approach utilizes tree structure efficient enumeration 
dehaspe describes level wise inductive logic programming technique mine frequent substructures subgraphs describing chemical compounds 
reported mining predicates unfeasible due complexity subgraph patterns 
subdue system discovers graph patterns minimum description length principle 
approach termed graph induction proposed uses beam search mining subgraphs 
subdue may significant patterns perform heuristic search 
perform complete exhaustive search guarantees patterns 
contrast approaches interested developing efficient algorithms tree patterns 

introduced notion mining embedded subtrees forest database trees 
novel contributions procedure systematic candidate subtree generation subtree generated 
utilized string encoding tree space efficient store horizontal dataset notion node scope develop novel vertical representation tree called scope lists 
formalization problem flexible handle variations 
instance assume label node approach mines unlabeled trees 
simple change candidate tree extension procedure allows discover sub forests disconnected patterns 
formulation find frequent trees forest trees frequent subtrees single large tree 
relatively easy extend techniques find unordered trees modifying scope test traditional definition subtree 
summarize proposes framework tree mining easily encompass variants problem may arise different domains 
introduced novel algorithm treeminer tree mining 
treeminer uses depth search uses novel scope list vertical representation trees quickly compute candidate tree frequencies scope list joins interval algebra 
compared performance base algorithm 
experiments real synthetic data confirmed treeminer outperforms factor scales linearly number trees forest 
studied application treeminer web usage mining 
plan extend tree mining framework incorporate user specified constraints 
tree mining able extract informative patterns expensive task performing general unconstrained mining expensive produce patterns may relevant give user 
incorporating constraints way focus search allow interactivity 
plan develop efficient algorithms mine maximal frequent subtrees dense datasets may large subtrees 
plan apply tree mining techniques compelling applications finding common tree patterns rna structures bioinformatics extraction structure xml documents classification clustering 

abiteboul kaplan milo 
compact labeling schemes ancestor queries 
acm symp 
discrete algorithms january 
abiteboul vianu 
regular path expressions constraints 
acm int conf 
principles database systems may 
agrawal fast discovery association rules 
fayyad editors advances knowledge discovery data mining pages 
aaai press menlo park ca 
agrawal srikant 
mining sequential patterns 
th intl 
conf 
data engg 
asai abe arikawa 
efficient substructure discovery large semi structured data 
nd siam int conference data mining april 
chen park yu 
data mining path traversal patterns web environment 
international conference distributed computing systems 
chen counting twig matches tree 
th intl 
conf 
data engineering 
cole indyk 
tree pattern matching subset matching deterministic log time 
th symposium discrete algorithms 
cook holder 
substructure discovery minimal description length background knowledge 
journal artificial intelligence research 
dehaspe toivonen king 
finding frequent substructures chemical compounds 
th intl 
conf 
knowledge discovery data mining august 
fernandez suciu 
optimizing regular path expressions graph schemas 
ieee int conf 
data engineering february 
inokuchi washio motoda :10.1.1.36.2485
apriori algorithm mining frequent substructures graph data 
th european conference principles knowledge discovery data mining september 
mannila 
ordered unordered tree inclusion 
siam computing 
karypis 
frequent subgraph discovery 
st ieee int conf 
data mining november 
li moon 
indexing querying xml data regular path expressions 
th int conf 
large data bases 
krishnamoorthy zaki 
logml log markup language web usage mining 
acm sigkdd workshop mining log data customer august 
cooley mobasher srivastava 
web mining information pattern discovery world wide web 
th ieee intl 
conf 
tools ai 
shamir tsur 
faster subtree isomorphism 
journal algorithms 
shapiro zhang 
comparing multiple rna secondary tree comparisons 
computer applications biosciences 
wang liu 
discovering typical structures documents road map approach 
acm sigir conference information retrieval 
yoshida motoda 
clip concept learning inference patterns 
artificial intelligence 
zaki 
efficiently mining trees forest 
tech 
report cs dept rpi july 
zhang supporting containment queries relational database managment systems 
acm int conf 
management data may 
