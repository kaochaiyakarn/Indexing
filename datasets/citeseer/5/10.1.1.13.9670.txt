software practice experience vol 
march query diagram visual environment querying databases giuseppe santucci dipartimento di informatica sistemistica universit degli studi di roma la sapienza salaria rome italy pier angelo sistemi informatica rome italy summary years attempts define query languages characterized high expressive power easy query formulation 
issues concern graphical applications diagrammatic representation semantic model visual interaction 
describes architecture implementation graphical query system diagrammatic representation entity relationship schemata 
query language underlying system allows formulation recursive queries user interaction managing diagrams expressing queries simplified presence fully visual environment rich set interaction strategies 
key words entity relationship model visual query language user interfaces central development database area concerns tools allow non expert users understand easily extract information database 
fourth generation query languages procedural friendly casual user know logical structure database syntax semantics dbms language 
proposed visual object oriented query languages allow user extract information means graphical commands able combine ease high expressive power 
key issue order build bridge user data represent database means semantic model define visual query language 
way obtain full independence physical implementation database logical model 
semantic model existing relationships objects explicitly represented embedded obscure attribute equivalences relational model 
results argue entity relationship model follows candidate order reach goals 
choice falls model reasons 
model database received november john wiley sons revised may september santucci design phase powerful simple formalism 
non expert user easily understand formalism schema interacting graphical representation 
possible represent logical database schema model 
proposals visual query languages model available literature building real system ideas easy task 
problems solved involve heterogeneous aspects important ones concern graphical environment mapping semantic model logical model translation query model target dbms query optimization 
visual query system called query diagram qbd follows implementation prototype describing architecture system main issues coming 
qbd compared query language allowing recursive queries expressed graphically 
comparison shows share expressive power qbd friendly user interaction 
fact qbd heavy graphical mechanisms order express recursion requires immediate approach involves managing regular expressions 
prototype developed university rome dipartimento di informatica sistemistica 
needed order build prototype may estimated man years 
organized follows 
sections main features qbd architecture system described 
deal problems coming interpretation query discuss practical aspects prototype 
graphical query system aim section describe qbd means example user interaction system 
avoid theoretical aspects qbd 
qbd qbd main ideas choice representing database graphically means semantic model augmented generalization abstraction development powerful textual query language model proved relationally complete includes significant class recursive queries transitive closure development fully graphical environment user interaction 
instruction textual language expressed set visual constructs allowing user formulate query graphically model 
user interacts system mainly mouse device keyboard necessary 
enrichment system additional facilities 
included simplify user interaction query formulation 
query diagram query expressed elementary steps choice icons selection objects posing conditions navigation schemata 
presence semantic model allows user build query extracting information database worrying logical model relational tables schema 
general structure query presence main concept entity user selects 
main concept chosen user locates paths starting 
path corresponds subquery selects subset instances main concept 
subqueries combined usual set oriented operators union intersection difference 
subquery progress user delimit result putting conditions attributes main concept attributes concept path 
example referring suppose main concept entity person 
user follows path person owns car selects persons car 
condition imposed attributes concepts path person age car colour red restricts set persons owning cars ones satisfy conditions 
main feature qbd capability expressing recursive queries 
types queries involve recursion believe query language include feature 
class recursive queries subset corresponding transitive closure particularly significant real life queries involving recursion address operation transitive closure ancestors person chain flights connecting cities qbd graphical mechanism order express transitive closure easily 
interaction system system provides set tactics aiding user top browsing extraction subschema interest subschema simplification 
showing example interaction system give brief description additional facilities 

simple er schema santucci top browsing problem user meets considering new schema understanding information content 
library top refinements provided schema 
diagrams document conceptual schema different levels abstraction 
browsing top schemata user easily locate fundamental concepts links 
top browsing may locate subschema interest 
note word browsing normal meaning looking database instances 
unnecessary shall omit top 
subschema interest cases user interested querying portion schema 
allow extraction subschema set primitives called location primitives briefly expounded simply clicking concepts needed mouse device choosing tailored user built managed system querying schema structure locating concepts satisfy desired conditions 
done ways 
extraction attributes user puts meta conditions attributes system select concepts attributes satisfy conditions concepts attribute name 

extraction path search system provides algorithm searches paths connecting selected concepts 
user may specify conditions path length path presence particular concepts 
paths satisfying specified conditions user able choose 

extraction oil strategy subschema selected user expand adding neighbour concepts unit distance 

extraction top browsing possible obtain subschema interest top browsing mechanism 
concepts contained schema belonging top chain selected 
consequence concepts derive selected compose subschema interest contained detailed schema 
subschema simplification subschema defined possible transform new version closer query 
primitives modify diagrams called replacing primitives 
replacing primitives replace portion schema single concept add delete attributes single concept replacing object 
roughly speaking replacing primitives allow user change concept new 
new concept set instances query diagram subset original instances set attributes subset original attributes 
derive new attributes concept schema 
values new attributes computed starting values existing attributes 
contract path schema new concept replace isa relationship child entity 
new view schema created replacing primitive information extracted original schema may accessible 
example suppose dealing schema containing entities person car connected relationship owns 
possible replace concepts single entity person owning car new view contain information persons belonging entity person car 
example qbd subsection interaction user system shown example query formulation 
example refers schema containing information hypothetical airline see 
suppose user interested request find pilots may relatives passengers booked flight 
airline database santucci understand fully information content locate fundamental concepts involved query user activates top browsing session 
topdown refinements schema shown figures 
information content understood user build subschema interest location primitives selecting different location strategies 
example user chooses strategy extraction top browsing selects schema belonging top chain chooses concepts person pers fl ata flight see 
corresponding subschema interest detailed schema shown 
example query lying person nel user interested pilots 
reason user deletes uninteresting concepts replaces hierarchy structure associated entity lying person nel child entity pilot view stored suitable library order 
resulting schema shown 
point query session 
retrieve desired pilots user selects sequence entities pilot er creating effective bridge condition pilot surname er surname 
window mechanism put conditions attributes shown image comes previous version qbd window mechanism windows environment development 

refinement airline database query diagram 
second refinement airline database new relationship represented dotted line letters br shown 
select passengers booked particular flight user selects relationship booking entity depart ure imposing concept condition depart ure code 
corresponding textual query built system accessible user pilot bridge build pilot sname sname find depart booking depart code query saved appropriate library translated terms target data manipulation language dml 
note subschema extraction simplification mechanisms necessary query formulation session 
query performed original detailed schema 
aims simplifying schema creating user built view contains concepts interest 
santucci 
subschema interest refinement system architecture system architecture see main modules graphical interface translator dbms interface 
system uses libraries contain data schemata queries 
libraries interaction system user access different libraries schematic library contains application diagrams user views library contains views schemata contained schemata library may designed system administrator user built top schemata library contains schema schemata library set diagrams higher levels abstraction diagrams represent top refinements schema developed database design phase user queries library contains user queries schemata views queries recalled time 
displays concepts schemata views refinements related 
query diagram 
subschema interest final schema entity query represents queries formulated navigating schemata represented entity schema 
schemata application schemata top schemata views schemata taxonomy libraries shown previously 
schema contains concepts entity concept 
attributes defined concept schema contained entity attribute 
analyse links entities 
relationship expressed represents link schema query formulated 
entity schema linked reflexive relationships 
view links view schema original schema extracted second relationship refinement links schema belonging top chain representation 
entity schema connected entity concept relationship contains links schema concepts 
relationship refinement link links concept schema representing application high level abstraction set concepts schema represents application lower level abstraction represents refinement user passes level detail lower 
link necessary operation executed object belongs santucci 
resulting schema 
windows mechanism bridge top refinement schema propagated system schema highest level detail 
entity concept reflexive relationship conceptual link represents links concepts schema 
relationship described links concept attributes 
query diagram 
new relationship diagrams concepts populating libraries come documentation produced case tool master 
master support top design facility additional interface allows designer add information concerning links schemata relationship refinement concepts belonging refinement chain relationship refinement link 
information stored entity query relationship view generated qbd 
graphical interface graphical interface includes scrolling printing zooming functions 
divided distinct modules diagram handler command module 
logically distinct considered different applications interact environment order provide user functions query process involves 
diagram handler controls operations act schema command module controls query process additional facilities 
idea separating activities involve graphical operations diagrams ones concerning meaning operations 
santucci 
system architecture diagram handler main functions diagram handler dh follows shown 
include user interaction schema data manipulation file system dh considered executive part graphical interface 
allows user express graphical commands schema transmits information command module executes commands received response changing graphical status schema symbols 
components dh graphical manager manages drawing schema query diagram 
libraries 
structure diagram handler santucci controls user 
main characteristics include zooming scrolling printing schemata 
helps user dealing large schemata automatically scrolling schema user performs action involving concept positioned near margin window 
diagram data manipulator accesses modifies data structures schema 
access automatic local layout facility 
module necessary user modifies schema see section concerning replacing primitives order redraw simplified portion interest 
symbol graphic data manipulator accesses modifies graphic attributes symbols schema diagram ordinator controls data flow modules command module schema handler status controller controls status qbd user interacts system 
command module command module cm contains semantics syntax visual query language additional facilities 
main functions schema data manipulation supervision query formulation 
cm processes information receives dh basis current system status directs dh perform graphical activities changing colour symbol modifying schema 
architecture cm shown 

architecture command module query diagram cm composed submodules schema simplification manager contains rules semantics subschema simplification top browsing manager controls top navigation different schemata represent database different levels abstraction detail subschema extractor query navigator controls query formulation process user navigates conceptual schema parser performs syntax control static type checking conditions user puts attributes querying schema subschema data manager creates accesses updates graphs corresponding built modified user query data manager ordinator controls data flow modules dh 
translator translator analyses translates query receives input graphical interface 
query schema database 
corresponding logical model database relational network hierarchical 
translator know conceptual schema translated logical schema order deal query correctly 
structure implemented system assume logical model relational 
piece information non recursive queries translated relational algebra expressions recursive ones generalized loop structure 
dbms interface interface translates query generated translator expression formulated terms target dml 
dml allow expression recursive queries interface order compute recursive queries combine dml statements host language 
input query expressed logical schema database mapped physical schema 
dbms manage physical schema automatically interface access physical schema order translate query correctly 
actual prototype different interfaces available environment dbms supporting sql language 
interpretation conceptual query user interaction conceptual schema results simplified understanding data extraction information translation conceptual query terms target dbms poses problems 
define santucci mapping schema terms logical model 
interpret query correctly 
doing meet main classes problems coming syntactic considerations homonyms synonyms concept renaming logical model referring problems related semantic aspects concept may different meanings depending path followed query formulation process concerning operations abstraction classification model clashes inherently value oriented nature relational model 
note system architecture graphical user query formal counterparts corresponding different query languages textual query relational query dbms query 
shall language languages fits relevant context best 
mapping conceptual logical schema translating schema logical schema known problem methodologies tools available 
obviously result process unique schema converted equivalent logical schemata 
order delimit possible types mapping envisage choosing opposite strategies 
consists allowing simple mapping logical schema mapping concept schema relational table 
choice simplifies query translation realistic 
assume relational tables translator deals views built real logical schema 
case main disadvantage low efficiency computing query order obtain needed result system compute queries corresponding views compute user query 
point view allow kind mapping schema logical 
case translator needs additional information order locate relational table associated concept complex structure 
translation may require complex computation resulting logical query corresponds directly logical schema 
building qbd intermediate point view adopted limited set ways translate schema logical allowed 
chosen set produced default master case tool 
causes loss generality algorithms master include mechanisms normally database designers 
syntactic problems managing conceptual schema associated logical schema deal problem renaming attributes 
basic assumptions uniqueness name concept schema relational nature logical model underlying model 
inside schema find attribute associated query diagram concepts 
homonyms resolved conceptual logical levels 
conceptual level need distinguish attributes exactly order put conditions logical level manage relational table attribute twice 
known solution problem identify attribute couple concept name attribute name 
way ambiguities possible system recognizes perform renaming logical level 
note solution assumption name concept unique 
order simplify discussion assume uniqueness attribute names 
semantic problems conflicts names arise cases described previous paragraph 
particular may arise user follows circular path expressing query touching specific concept subquery twice object touched twice different subqueries different paths 
example referring schema assume user query find person residence city birth 
user express different subqueries selecting path person born city performing union second subquery coming selection path person lives city 
subqueries city name included order result city residence city birth 
analysing total query system able distinguish different meanings attributes entity city paths give results pairs persons cities meanings quite different may look 
example user wants find father person selects path person father person system able roles relationship manage fathers different way sons 
situations nature problem basically semantic system dealing attributes come concept conflict due different meaning concept paths depend homonyms attributes 
translator dbms interface able recognize situations order translate query correctly 
fact path followed user translated join relational tables corresponding objects touched navigating schema 
concept involved twice query system rename attributes 
simple way solve semantic problem associate concept path reach 
dealing twice concept system tests associated paths renames necessary attributes occurrences concept 
generalized set oriented operators presence main entity associates query type example main entity entity person result query set santucci persons eventually enriched attributes coming concepts matter kind subsequent operations user performs specify 
building query user perform set oriented operations subquery derived main entity 
subquery computed separately giving rise relational table 
system compares tables order compute resulting query set attributes tables may differ characterized key main entity 
case impossible perform pure set oriented operation approach needed 
solve problem introduce generalized set oriented operators 
type operator allows execution set oriented operation pair relational tables having identifier regardless remaining attributes 
computing result system performs set oriented operations projection tables identifier 
builds relational table structured follows 
case computing generalized differences structure table table involved operation 
cases table characterized union attributes tables 
note set oriented operation union performed result may affected null values 
show example 
assume system computing query find persons owning red live new york corresponding intersection paths person owns car person lives city 
subquery give result relation pname licence plate second relation pname cname 
generalized intersection relation pname licence plate cname corresponding equi join ixi 
query find persons owning red live new york system perform generalized union 
operation expressible pure relational query language need appropriate algorithm bounded looping primitive corresponds counting number tuples relation 
algorithm computing generalized set oriented operations described section 
qbd prototype describe current status prototype qbd focusing attention mainly translator sql interface 
particular show examples queries demonstrating system able solve syntactic semantic problems described previous section 
graphical user interface features described section system architecture implemented 
possible retrieve manipulate schema stored libraries browse top refinements express query save restore extract subschema modify concept portion schema save resulting view schema 
types queries expressed visual query language including recursive queries 
top browsing mechanism developed fully 
possible extract subschema interest query diagram clicking objects top browsing mechanism 
resulting view stored 
simplification subschema limited simplest cases 
possible remove generalization hierarchy putting child entities place exchange portion schema new concept 
phase intermixed navigation phase 
qbd user interface built microsoft ms dos environment 
new version user interface development microsoft windows environment figures come version 
translator dbms interface show examples query interpretation translation 
example refers airline database schema shown query find special services asked passengers booked atr aircraft registration number departing october 
user expresses query path spec srv asks booking depart simply clicking concepts mouse 
entity depart reached condition date stated 
query formulation continued path assigned atr 
point user puts final condition registration number aircraft saves query system compute 
output translation process terms sql statements form select spec srv ser cd service spec srv asks person booking depart atr plane spec srv ser asks ser asks pcd pcd pcd person pcd booking pcd pcd depart dcode booking dcode atr reg plane reg atr reg plane reg query particular difficulties interpretation translator needs access relational tables corresponding concepts involved query 
show complex example 
referring assume query find persons live new york boston displaying result name city born city number inhabitants greater displaying result name city number inhabitants 
user follow paths person lives city person born city putting appropriate conditions attributes 
expressed textual language underlying system query person santucci find city lives cname new york cname boston add cname intersect person find city born inhabitants add cname inhabitants order compute query system compute subqueries perform intersection 
result subquery relational table characterized attributes pname cname 
second subquery give relational table attributes pname cname inhabitants 
computing intersection system solve problems attribute cname different meanings set attributes different set attributes 
solve problem translator rename attribute cname pname cname inhabitants 
second problem related general problem computing generalized set oriented operations 
describe algorithm translator compute operations 
loss generality algorithm refers tables example 
computing union different solutions proposed 
suitable query language implement algorithm provided loop statement second appropriate sql language 
algorithm compute generalized set operators operation 

define relation result assume ixi 
project pname compute union pname pname 
tuple tuple exists satisfying pname pname add tuple components defined pname pname cname cname tuple exists pname pname cname null cname cname tuple exists pname pname cname null query diagram inhabitants inhabitants tuple exists pname pname inhabitants null 
words system performs set oriented operation identifier tables subsequently adding attributes result 
main problem step necessity embedding sql statements programming language step requires loop statement sql statements degrades performance 
cure problem derive new solution directly executable sql code 
basic idea transform union operation intersection operation computable join see step 
alternative solution 
pname pname keys persons belonging 
pname pname keys persons 
create table cname empty table containing attributes key 
insert values null tuple null values 
tm persons belonging null 
tm values attributes key table filled persons belonging 
create table empty table containing attributes cname inhabitants key 
insert values null tuple null values 
tm persons belonging null 
tm values attributes key table filled persons belonging resp 
contains persons belonging 
tuples belonging resp 
filled null values 
hold pname pname pname pname pname pname compute final result ixi 


project pname compute difference pname pname 
final result composed tuples correspondence 
formally ixi santucci 
ixi corresponding generated sql query step executed select person pname cname inhabitants cname person resides city born city person pname resides pname resides cname cname person pname born pname born cname cname person pname select person pname person resides city person pname resides name resides cname cname cname newyork cname boston intersect select person pname person born city person pname born pname born cname cname city algorithm proved correct respect specifications description generalized set oriented operators 
described graphical query system diagrammatic representation schemata presenting architecture implementation 
user interaction management schemata expressing queries simplified presence fully visual environment rich set interaction strategies 
systematic study performed establish effectiveness qbd environment 
study involved non experts computer science undergraduate students employees professional men 
tutorials designed introducing sql language qbd environment respectively 
addition metric measuring complexity query studied idea associating weight relational algebra operator 
subjects read tutorials exposed set queries increasing complexity measuring response times mistakes 
query diagram comparison sql queries qbd queries shows qbd environment decreases response time number mistakes 
give indicative figures sql queries right qbd queries mean response time sql queries qbd queries 
dealing implementation system modules mechanisms system copes major problems coming interpretation translation conceptual query dml 
problems syntactic semantic mainly related interpretation query 
illustrated mechanisms underlie generalized set oriented operations subqueries 
query language proposed part qm methodology development information systems italian state administration 
conceptual graphical approach followed qbd basis diagrammatic interface knowledge information management graphical query environment kim partially supported commission european communities exploratory action esprit program european strategic programme research information technology 
kim graphical query environment international standards unix osi osf available installation existing databases open distributed architectures provide user graphical conceptual interface 
customized prototype kim query environment conceptual approach developed european space agency 
aim integrate network heterogeneous databases different types 
carlo batini helpful suggestions comments 
partially supported progetto informatica italian national research council cnr sistemi informatica 
zloof query example database language ibm syst 


date database systems vol 
addison wesley publishing 

markowitz malhotra er eas formalism system modeling eas language chen ed 
entity relationship approach information modeling analysis er institute pp 


markowitz entity relationship role oriented query language proc 
rd conference entity relationship approach 

semantics query languages entity relationship model march ed 
proc 
th international conference entity relationship approach new york 

cruz mendelzon wood graphical query language supporting recursion proc 
acm sigmod conf 
management data pp 


wong kuo guide graphical user interface database exploration proc 
th vldb conference mexico city pp 


elmasri wiederhold formal high level query language entity relationship model proc 
nd international conference entity relationship approach washington pp 


el larson graphical query facility er databases proc 
th international conference entity relationship approach chicago pp 


cruz mendelzon personal communication october 
santucci 
su lam guo oql object oriented query language technical report university florida 

catarci santucci qbd graphical query language recursion ieee trans 
software engineering 

campbell embley relationally complete query language entityrelationship model proc 
th international conference entity relationship approach chicago illinois october pp 


embley reddy rusinkiewicz visual query language er data model proc 
ieee workshop visual languages rome pp 


chen entity relationship model unified view data acm transactions data base systems 

ullman principles database knowledge base systems vol 


consens mendelzon graphlog visual formalism real life recursion proc 
pods pp 


jagadish agrawal ness study transitive closure recursive mechanism proc 
acm sigmod annual conference management data pp 


srl 
master user manual rome 

di battista santucci tamassia architecture diagram server proc 
ieee workshop visual language pp 


batini ceri navathe logical database design entity relationship approach benjamin cummings eds 

catarci ferrara optim er automated tool supporting logical design complete case environment proc 
th international conference entity relationship approach rome pp 


di logical design relational environment ceri ed methodology tools database design north holland publishing 

codd relational model data large shared data banks cacm 

chandra programming primitives database languages th acm symp 
principles programming languages january pp 


dell ambiente di qbd query diagram con il sql della fini informatica italian 

batini di il progetto di sistemi nel istituto italian 

catarci ferrara kim uno un di proc 
th text processing conference december italian 
