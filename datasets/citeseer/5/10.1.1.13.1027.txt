generating robust parsers island grammars leon moonen cwi box gb amsterdam netherlands www cwi nl leon leon cwi nl source model extraction automated extraction information system artifacts common phase reverse engineering tools 
major challenges phase creating extractors deal irregularities artifacts typical reverse engineering domain example syntactic errors incomplete source code language dialects embedded languages 
proposes solution form island grammars special kind grammars combine detailed specification possibilities grammars liberal behavior lexical approaches 
show island grammars generate robust parsers combine accuracy syntactical analysis speed flexibility tolerance usually lexical analysis 
conclude discussion development mangrove generator source model extractors island grammars describe application number case studies 
keywords phrases island grammars parser generation source model extraction partial parsing fuzzy parsing reverse engineering program analysis 

software engineers spend large amount time understanding system maintained estimates uncommon 
consequently research invested development tools assist program understanding program maintenance activities 
majority tools consist phases extraction information referred source models system artifacts manipulation querying abstraction source models presentation results 
focuses phase extracting source models system artifacts 
challenges reverse engineering tools cope parsing artifacts extraction phase 
published proceedings th working conference reverse engineering wcre 
ieee computer society press 
artifacts typically contain irregularities hard impossible parse code common parser approaches 
goal obtain robust parsers handle artifacts irregularities 
examples kind irregularities want deal include syntax errors program maintenance environment want able deal systems containing syntax errors browse query code fix errors 
parser techniques fail encountering syntactic errors 
completeness source code system may incomplete 
typical situation header files system lost years making full reconstruction impossible 
dialects legacy language cobol language large number slightly different dialects 
ideally support 
parser dialect may accept code written 
embedded languages programming languages upgraded embedded languages database access transaction handling screen definition cobol examples include sql cics 
choose analyze ignore extensions extraction hampered 
standard parser 
grammar availability supporting legacy systems come languages grammar available 
proprietary languages grammar disclosed languages grammar parser processor handwritten 
grammars scratch expensive may pay back 
customer specific idioms 
systems specific idioms assigning values special variables combination libraries interface systems bypass limitations compiler runtime system 
standard parsers recognize customer specific idioms generally flexible aware 
example regarding cobol call analysis shown section 
preprocessing conceptual problems arise analysis code uses preprocessor parsers usually read preprocessed code resulting models preprocessed code 
maintainer mental model code 
hard map models especially conditional compilation 
people tried bypass problems reusing existing parser common exchange format gxl interface generation example 
solutions engineering perspective may write parser solve problems described 
proposed lexical analysis techniques remedy problems 
lexical analysis provides flexible robust solution handle incomplete syntactically incorrect code cost losing accuracy completeness 
additional advantage lexical analysis takes time develop solution lexical analysis syntactical analysis 
tedious expensive write parser language write grammar generate parser 
example van den brand report period months development fairly complete cobol grammar 
proposes solution remedy problems describe island grammars generate robust parsers build source model extractors 
island grammars grammars contain detailed productions rules describing language constructs interest generic productions capture remainder 
island grammars briefly sketched 
detailed account 
generating parsers island grammars combine accuracy syntactical analysis speed flexibility robustness lexical analysis 
remainder presents island grammars mangrove generator source model extractors island grammars 
propose reusable framework defining island grammars describe mapping parse results source models specified patterns term rewriting language java 
conclude application mangrove number case studies discussion related 

island grammars parsers reverse engineering tools number requirements parser recognize certain constructs interest language 
additionally parser robust obstructed irregularities input 
study parsers generated context free grammar definitions 
recall compiler class language give description defining context free grammar language generated satisfies order satisfy requirements stated need describe grammar hand generates sentences available actual language sentences irregularities hand give exact specification interesting parts language 
island grammar amounts definition island grammar grammar consists detailed productions describing certain constructs interest islands liberal productions catch remainder water 
expressed terms language properties definition language context free grammar set constructs interest ae 
island grammar properties 
ae generates extension 

recognize constructs interest sentence recognized 
higher complexity note island grammars require particular grammar specification formalism parsing technique 
limitations chosen formalism technique may influence island grammar 
express island grammars sdf syntax definition formalism supported generalized lr parsing 
benefit expressive power combo development island grammars easier 
formalisms parsing techniques 
example javacc java parser generator sun microsystems island grammar developed industrial partner software improvement group part documentation generator docgen 
requirements originating ll parsing technique javacc development extension grammar unwieldy 
tooling described section enables reimplement grammar sdf generalized lr parsing 

island grammar example figures show example island grammar describes cobol call statements 
specification uses short context free grammar sets nonterminals terminals productions theta start symbol string sentence iff derived repeatedly applying productions 
language generated contains sentences fs sg 
refer pp 
information 
complexity context free language computed analyzing productions see detailed discussion 
module layout lexical syntax layout module water imports layout context free syntax chunk input water chunk lexical syntax water 
base island grammars 
modular syntax definition formalism sdf 
note productions sdf reversed respect bnf righthand side arrow non terminal produced symbols left hand side 
section gives short sdf 
grammar contains modules module layout specifies lexical non terminal symbol layout containing whitespace characters 
symbol special meaning parsers recognized symbols context free production 
module water uses definitions module layout line adds context free non terminals symbol input produced list zero chunks line symbol chunk produced water line 
add productions chunk providing alternatives recognized water 
lexical non terminal water consists list characters whitespace line 
attribute prevents parser production applicable 
allows specify default behavior overridden productions generating ambiguities 
grammar specified module water extremely robust describes programming languages 
useful terminal symbols parsed sentence indistinguishable 
turn useful grammar adding islands specify constructs interest module call adds island specifying chunk produced literal call followed identifier line 
identifiers characters followed zero characters digits line 
simple grammar allows generate parser module call imports water context free syntax call id chunk call lexical syntax id 
cobol program calls 
module imports call context free syntax move id callee chunk call call handler chunk 
dealing call handler 
searches program calls cobol code 
may spectacular example similar done example tool grep show easy extend grammar complicated analysis 
furthermore modularity sdf allows reuse base grammar developed island grammars 
remember customer specific idioms described section 
example situation analyzing cobol system program calls call statement setting global variable calling generic call handler 
call handler enabled run time system dynamically load execute desired program static linking supported compiler standard call graph extractor able generate useful graphs system 
add support situation grammar 
suppose name call handler handler name global variable callee 
specify assignment callee program call line 
furthermore prevent parser recognizing calls handler attribute line 
call attributes figures explicitly specify constructor function create syntax tree 
attribute map different concrete syntax productions syntax 
processing easier 
note source potential errors subsequent assignments callee called recognized calls value callee computed assigned recognized 
problems back detailed data flow analysis 
practice call handlers disciplined manner strict coding conventions situations occur 

island grammar applications employment island grammars especially suitable reverse engineering opposed example compiler construction takes maximum advantage fact applications generally need complete parse tree 
particularly analyzers try arrive higher levels abstraction example architecture extraction profit early elimination detail parsing phase 
artifacts island parser island grammar syntax tree extractor parser generator extractor generator extractor specification source model 
mangrove architecture 
varying amount details productions construct interest trade accuracy completeness development speed 
example possible approach island grammars completely different side starting complete grammar language extending grammar number liberal water productions 
call grammar lake grammar 
approach typically useful allow arbitrary embedded code programs processed tool 
furthermore mix productions water islands allow variations islands lakes specify nested constructs conditional iteration statements lakes islands combine extraction language extraction embedded extension 
opinion main application area island grammars robust parser generation source model extraction simple analysis 
island grammars local non local analysis 
obviously grammars allow local analysis example call statements simpler allow non local analysis 
additional done back non local analyzer find combine islands belong 
main advantage island grammars lexical approaches easier structure specifying patterns requires state manipulation lexical approach 
solutions easily combined completely declarative making easier understand 
theory island grammars program transformations 
evidently restricted parts contained islands applications probably limited local transformations 
examples think include simple structure modifications normalization conditions enforcement coding standards 
general believe program transformations require depth knowledge source language usually expressed island grammar 

processing number ways process parse trees obtained parsing input sentence 
initial observations indicate island grammars water symbols occur sequence symbols 
consequently removing subtrees parse tree invalidate tree 
observation created simple filter removes subtrees parsed water parse tree 
applying filter processing resulting term easier faster input consider 
simple analysis term done lexical techniques 
note possible create grammars water occur list context 
filter invalidate parse tree respect grammars 
may may real problem depending processing remains done tree 
way process parse trees handwritten code 
currently processing cumbersome improve supportive tooling available generates access functions ast level order able create involved source model extractors hand written created mangrove generator source model extractors 
man grove described section 

mangrove mangrove generator source model extractors island grammars 
design requirements similar described murphy notkin lexical source model extractor 
approach ffl lightweight specification new extractor small relatively easy write 
ffl flexible constraints structure artifact analyzed possible create analyzers source structured data 
ffl tolerant constrains condition artifact analyzed possible analyze code compile 
overview mangrove architecture 
tools drawn ellipses artifacts boxes 
generation extractor types input grey boxes defines island grammar describing syntax constructs need recognized 
generate island parser second specifies mapping constructs desired source model 
grammar generate extractor reads output island parser converts source model 
artifacts island parser island grammar syntax tree user supplied refinements extractor source model parser generator generated visitors javac 
mangrove instantiation allows processing java 
contrast lexical approaches approach separates parsing analysis attaching semantic actions constructs recognized 
advantage resulting analyzers easier adapt easier combine existing analyzers new 
lexical analyzers hard adapt analysis logic entangled constructs recognized 
combining analyzers single new tricky 
inputs generally small easy write feel approach satisfies lightweight requirement 
flexibility robustness requirements satisfied island grammars generate parser 
extractor generator drawn dotted line indicate possible instantiations 
allow user choose language describes mapping constructs source model 
instantiations tool described 
allows user write mapping traversals ast java concrete syntax patterns simple functional specification 

syntax definition sdf mangrove reads island grammars written syntax definition formalism sdf 
definitions combine definition lexical context free syntax formalism 
definitions purely declarative opposed example definitions yacc semantic actions influence parsing describe concrete syntax 
sdf definitions modular productions non terminal distributed different modules module reuse productions importing modules define 
allows definition base kernel grammar extended definitions modules 
example module water defined extended module call 
sdf provides number operators define optional symbols alternatives js iteration symbols 
operators arbitrarily nested describe complex symbols 
furthermore sdf provides number disambiguation constructs relative priorities productions preference attributes indicate production preferred avoided alternatives exist associativity attributes binary productions example op 
sdf supported parser generator generates generalized lr glr parsers 
generalized parsing allows definition complete class context free grammars restricting non ambiguous subclass contextfree grammars ll lr lalr class restrictions common parser generators 
allows natural definition intended syntax grammar developer longer needs encode restricted subclass 
full class context free grammars closed composition combination cf grammars cf grammar generalized parsing allows better modularity syntax reuse 
information sdf refer 

mangrove java mangrove java allows extractor builder process results island parser object oriented programming language java 
overview tool 
apart obvious advantage able process mainstream object oriented programming language allows tool builder reuse large amount tools libraries interoperability techniques available java 
island grammar sdf generate java code construction representation manipulation syntax trees object oriented style 
generated classes relate syntax grammar scheme non terminal class generated ii production concrete class generated refines class corresponding result production 
factory methods generated convert parsed input string syntax tree object structure 
furthermore variants visitor pattern generated provide tree traversals asts 
reused generation java code 
generated code extended tool builder perform actual mapping ast desired source model 
done refining generated visitors feeding generated accept method ast node 
accept methods perform actual visitor chunk water call input accept 
uml class diagram call collector 
sal ast call visit methods defined visitor 
approach advantage user reconstruct traversal behavior refining visitors 
consequently easier error prone write extensions refinements generated code 
user extensions compiled generated code standard java compiler create extractor byte code executed java virtual machine 
extractor interfaces generated island parser utility parse tree syntax tree 
example presents uml class diagram showing classes generated island grammar cobol program call example section 
grey class generated example analysis added user 
class refines standard visitor collects identifiers called programs 
java code implements class shown 

mangrove asf mangrove asf allows extractor writer process parse results functional fashion term rewriting language asf 
programming asf done creating specifications consist number rewrite rules 
rules defined pattern matching concrete syntax defined sdf grammar 
concrete syntax advantage extractor writer learn new language public class extends visitor public set set new public void call set add 
java visitor collecting program calls 
module imports set context free syntax collect input set collect input set set variables input set set 
grammar collecting program calls 
processing terms 
term rewriting allows natural expression translation language 
combination syntax definition formalism sdf term rewriting language asf supported asf sdf meta environment 
environment generates parsers syntax directed editors sdf definitions provides interpreter compiler asf specifications 
mangrove asf instantiate extractor generator asf sdf meta environment 
architectural overview refer mangrove overview 
asf sdf meta environment contains support generation term traversal functions 
user attaches attribute production sdf additional functionality inferred perform traversal argument production 
conceptually adding attribute shorthand adding set productions rewrite rules calculated grammar 
default behavior generated rewrite rules 
user override behavior adding concrete rewrite rule particular sub term 
example figures show example generated traversals program call example described section 
build tool collect identifiers called programs 
grammar defines functions start traversal line actual traversal function line 
traversal function arguments contains term traverse second accumulator traversal results gathered 
asf equations define rewrite rules 
see rule starts traversal copy input empty accumulator 
rules contain patterns want specific behavior rule specifies call statement matched arbitrary identifier add identifier accumulated set 
call handlers supported rule collects identifiers assigned callee variable 
equations collect collect fg collect call id set set collect move id callee set set 
equations collecting program calls 

case studies done number case studies validate hypothesis island grammars create robust parsers allow construction lightweight flexible tolerant source model extractors 
case uses island grammars build analyzer computes cyclomatic complexity cobol programs 
second case done cooperation software improvement group involves creation source model extractor systems 

cobol cyclomatic complexity mccabe cyclomatic complexity measure better known software metrics computed source code 
case study build simple analyzer computes complexity measure cobol programs island grammars 
cyclomatic complexity metric control graph program 
computes number linearly independent control flow graphs number nodes edges control flow graph 
graph nodes edges mccabe defines cyclomatic complexity gamma 
simpler definition require construct control flow graph advance 
nist report structured testing mccabe defines cyclomatic complexity counting number decision predicates code 
approach case 
analyzer basically traverses parse tree counts occurrences decision predicates 
show man grove java build analyzer steps 
create island grammar cobol describes constructs influence cyclomatic complexity 
case cobol standard constructs repeat evaluate cobol case statement constructs go depending jumps list locations value variable 
constructs interest predicates surround code executed case errors error overflow computational statements invalid key access flat file databases 
note take special precautions prevent occurrences constructs strings comments recognized real occurrences called false positives 
done adding specific productions island grammar specify strings recognized water comments considered layout 
example productions 
second parser java classes generated island grammar described section 
third refine generated visitor computes cyclomatic complexity traversal parse tree 
done incrementing counter time syntax tree contains complexity increasing constructs specified island grammar 
compile code build executable analyzer 
parts write create analyzer small easy write construction testing refinement took hours 
grammar consists productions describing constructs interest reused base grammar added prevent false positives 
java code refines generated visitor contains integer field complexity counter methods perform exactly statement increment complexity 
applied analyzer number cobol systems lines written different dialects contained various extensions sql cics ims 
irregularities posed problems analysis 
initial results show performance measured detail 
example implosion prototype converts parse trees asts slow large inputs 
reimplementation solve issues 

component coupling case study performed cooperation software improvement group sig developed island grammar source model extractor parse components collect facts coupling 
gl application development environment marketed 
allows development conventional web applications 
application development model driven componentbased 
developers create models business processes 
models generate components inherit properties model 
model changed components updated accordingly 
eliminate need build systems scratch developers reuse components systems standard libraries 
components contain operations specify behavior 
components interoperate activating operations components similar objects methods object oriented setting 
get insight systems sig customer get information components system coupling 
collect information build source model extractor analyses components gathers facts activation components activation parameters 
module lexical syntax water 
strings water 
extractor generated island grammar describes module activation parameter passing uni face 
grammar extends base grammar developed prior knowledge uni face help activate documentation 
took approximately day develop test refine island grammar amount time develop source model mapping java 
complete island grammar contains productions including base grammar productions prevent false positives 
relatively high number influenced act case insensitive grammar contains number productions sole purpose specify case insensitive variants keywords recognized 
resulting source model extractor process source listings xml dumps modules 
extractor emits source model describes component coupling textual gxl format 

discussion 
expressive power island grammars depend particular grammar specification formalism parsing technique 
expressive power island grammar limited chosen syntax definition formalism important chosen parsing technique 
mangrove chosen express island grammars sdf syntax definition formalism supported generalized lr parsing techniques 
inherit expressive power express complete class context free languages island grammars 
different mangrove instantiations allow extractor writer choose processing language fits needs 
java instantiation enables processing mainstream objectoriented programming language allows reuse large amount tools libraries interoperability techniques available java 
asf instantiation allows processing term rewriting patterns concrete syntax advantage extractor writer learn new language term rewriting allows natural expression translation languages 

accuracy island grammars give restrictive description language analyzed 
hand consider advantage property allows irregularities releases structural requirements artifacts increases development speed 
hand lack detail may result erroneous results 
distinguish kinds extraction errors false positives occur grammar allows constructs recognized places recognized 
ii false negatives occur grammar restrictive allows constructs recognized places recognized 
false positives solved extending part grammar specifies water 
example false recognition constructs inside strings prevented adding production specifies string syntax water 
gives simple example specification 
specifies strings starting double quote number characters double quote 
false negatives straightforward solve 
needs reconsider grammar look productions restrictive 
common source false negatives nested constructs example statements contain statements 

related related divided methods perform lexical analysis syntactical analysis 
division comes application domain research focus sing computer language processing natural language processing 
lexical analysis tools available perform lexical analysis textual files 
known tool probably grep variants egrep agrep allows search text strings matching regular expression 
tools generally give little support process matched strings just print matching lines 
support available advanced text processing languages awk perl lex scanner generator allow user execute certain actions specific expression matched 
provides pattern matching parsing library generates parse trees strings match regular expression 
hierarchical lexical analysis murphy notkin describe lexical source model extractor 
approach uses set hierarchically related regular expressions describe language constructs mapped source model 
hierarchical patterns avoid pitfalls plain lexical patterns maintain flexibility robustness approach 
system cox clarke uses similar hierarchical approach 
main difference focuses extracting information syntax tree level extracts higher level source models 
hierarchical technique related computational linguistics divides natural language chunks recognized finite state cascade parser 
syntactic matching parser approaches increase accuracy level detail expressed 
syntactic matchers create syntax tree input allow user traverse query match tree look certain patterns 
relieves having handle aspects language focus interesting parts 
systems category provide traversals parse trees awk pattern matching processing provides similar operations syntax trees processing tools support querying syntax trees genoa uses traversal language refine allows queries order logic allows queries concrete syntax 
disadvantage systems full parse complete language making hard impossible deal incomplete sources dialects syntax errors 
proper amount interfacing possible connect island parsers generate remove problems 
fuzzy parsing notion fuzzy parsing comes flavors 
flavor parsers recognize sentence belonging language certain degree correctness allowing grammatical errors 
type fuzzy parsers mainly computational linguistics natural language processing 
productions fuzzy grammar annotated correctness degrees assess quality input sentence 
model grammatical errors adding special productions correctness degree ordinary grammar 
information refer 
second flavor fuzzy parsers parsers able discard tokens recognize certain parts programming language 
sniff programming environment kind fuzzy parsing 
number programming environments program browsers source navigator source explorer tool 
fuzzy parsers hand crafted perform specific task 
focus mainly fuzzy parsing support program browsing 
typically involves extracting information regarding symbol global definitions functions calls file includes parser reuse approaches address problems associated parser grammar development reusing existing parsers example genoa 
reuse retrieve grammars existing tools 
approaches ignore fact structure grammar tool tightly coupled design tool 
tool may need completely different grammar 
parser reuse problems signaled 
furthermore solve robustness issues dealing missing code embedded extensions syntactical errors 
island parsing term island parsing computational linguistics example 
sourceforge net sources redhat com www com www vital com html different notion referring island parsers start point sentence recognizing island parse complete sentence extending island left right contrast left right scanning done ll lr parsers 
technique example speech recognition 
similar approach applied rekers computer languages provide error recovery completion syntax directed editors 
island grammars term island grammars coined provides informal definition small example detailed discussion describe tool support 
try fill gaps improving definition describing properties island grammars providing number detailed examples result reusable framework island grammar definitions 
furthermore generator source model extractors island grammars supports various programming languages show number case studies 
case study cobol island grammars described 

robust parsing prerequisite reverse engineering tools 
shows island grammars generate parsers 
generated parsers combine accuracy syntactical analysis speed flexibility tolerance usually lexical analysis 
contributions extension previous island grammars detailed discussion definition island grammars 
mangrove generator source model extractors island grammars 
provide reusable framework definition island grammars syntax definition formalism sdf support various processing languages allowing developer pick language fits needs 
shown mangrove supports java asf programmers providing generated traversals ease mapping parse results source models 
report application man grove number case studies provide detailed discussion related 
combination island grammars generated traversals combines forms attractive default behavior island grammars allow limit part grammar necessary describe problem hand ii generated traversals allow treat cases need specific behavior 
consequently extractor specifications small easy write modify combine resulting lightweight flexible tolerant approach 
acknowledgments author mark van den brand tobias kuipers joost visser fruitful discussions 
arie van deursen jan heering paul klint provided valuable feedback earlier versions 
abney 
partial parsing finite state cascades 
proc 
esslli robust parsing workshop 
aho kernighan weinberger 
awk programming language 
addison wesley 

bibliography fuzzy automata grammars languages 

bergstra heering klint 
algebraic specification formalism asf 
algebraic specification chapter pages 
acm press addison wesley 

sniff pragmatic approach programming environment 
proc 
usenix conference pages aug 
van den brand asf sdf meta environment component language development environment 
proc 
compiler construction lncs 
van den brand klint 
term rewriting traversal functions 
technical report cwi 
appear 
contact cwi nl copies 
van den brand sellink verhoef 
obtaining cobol legacy code reengineering purposes 
proc 
nd int 
workshop theory practice algebraic specifications 
springer verlag 
carroll 
island parsing interpreter full augmented transition network formalism 
proc 
st conf 
eacl pages 

environment building complex business critical applications sep 
white 
cox clarke 
comparitive evaluation techniques syntactic level source code analysis 
proc 
th softw 
eng 
conf dec 
van deursen kuipers 
building documentation generators 
proc 
int 
conf 
software maintenance pages 
van deursen kuipers moonen 
arrangement method documentation generation system 
patent 
applied aug 
devanbu 
genoa customizable front retargetable source code analysis framework 
acm trans 
softw 
eng 
meth apr 
griswold atkinson 
fast flexible syntactic pattern matching processing 
proc 
th workshop program comprehension 
jozef 
descriptional complexity context free languages 
proc 
mathematical foundations computer science pages 
heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan 
holt winter schurr 
gxl standard exchange format 
proc 
th working conf 
reverse engineering pages 
kearns 

softw 
pract 
exp aug 
klint 
meta environment generating programming environments 
acm trans 
softw 
eng 
meth 

systematic approach fuzzy parsing 
softw 
pract 
exp 
kuipers visser 
object oriented tree traversal 
proc 
workshop language descriptions tools applications pages 
entcs volume 
ladd 
language implementing language processors 
ieee trans 
softw 
eng 
lee zadeh 
note fuzzy languages 
information sciences 
lesk schmidt 
lex lexical analyser generator 
computer science technical report bell laboratories murray hill nj usa oct 
markosian newcomb brand 
enabling technology reengineer legacy systems 
comm 
acm 
mccabe 
complexity measure 
ieee trans 
softw 
eng 
notkin 
lightweight lexical source model extraction 
acm trans 
softw 
eng 
meth jul 
paul prakash 
framework source code search program patterns 
ieee trans 
softw 
eng 
rekers 
parser generation interactive environments 
phd thesis university amsterdam 
rekers 
substring parsing arbitrary context free grammars 
sigplan 
piazza roberts 
separating parsing analysis reverse engineering tools 
proc 
st working conf 
reverse engineering pages 
sellink verhoef 
generation software renovation factories compilers 
proc 
int 
conf 
software maintenance 
stock 
island parsing bidirectional charts 
proc 
th conf 
computational linguistics pages 

languages machines theory computer science 
addison wesley 
tomita 
efficient parsing natural languages 
fast algorithm practical systems 
kluwer 

cobol island grammars sdf 
master thesis informatics institute university amsterdam 
visser 
syntax definition language prototyping 
phd thesis university amsterdam 
wall schwarz 
programming perl 
reilly associates 
watson mccabe 
structured testing testing methodology cyclomatic complexity metric 
nist special publication 
national institute standards technology washington sep 
