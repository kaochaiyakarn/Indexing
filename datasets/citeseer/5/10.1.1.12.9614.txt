static analysis jml assignable clauses fausto erik poll dipartimento di informatica italy sci university nijmegen netherlands cs kun nl speci cation language jml java modelling language includes called assignable clauses known modifies clauses specifying elds may change value side ect method 
uses interpretation trace semantics simple object oriented language de ne correct static analysis checking correctness assignable clauses 
jml java modeling language speci cation language java :10.1.1.34.8403
allows assertions included java code specifying pre postconditions invariants style ei el established design contract approach jml expressive 
instance speci cation method include called assignable modifies clause 
speci es locations may changed method frame condition style similar 
locations described set elds 
jml ers rich syntax expressing assignable clauses 
concern 
example assignable clause method update class myclass assignable information conveyed assignable clause essential reasoning methods 
instance loop veri cation tool 
rst sight checking correctness assignable clauses better generating correct assignable clauses easily automated 
chase tool performs syntactical analysis automatically check assignable clauses 
basically tool checks assignment method variable listed assignable clause 
assignments method call listed assignable speci cation 
full syntax assignable speci cations allowed 
unfortunately developers chase tool aware syntactic analysis performs limitations 
aliasing assignable clauses trickier may rst sight 
example assignable clause method partially funded murst interpretation type systems control flow analysis epsrc gr 
update class myclass incorrect chase tool average reader 
spot 
consider happens execution method update aliases refer object invoked 
represent situation assignment modi es state follows assignment results state assignments result state shown see modi ed locations aka aka 
assignable clause mentioned allow modi ed 
syntactical analysis performed chase sound complete useful quickly spot potential mistakes assignable clauses 
go step developing sound static analysis checking assignable clauses 
contributions 
formalise assignable clause method interpretation trace semantics 
show domain useful static analysis lacks compositionality properties 
re ne domain ar features better compositionality results 
idea keep track analysis locations stored variable 
way safely approximate set locations modi ed assignment 
instance command copies location ar keeps track able conclude subsequent assignment changes location eld eld location originally pointed method 
show static analysis ar spots erroneous assignable clause mentioned accepts computes correct assignable clause update assignable proofs theoretical results 
class myclass class subclass extends myclass eld int eld int eld myclass method update myclass subclass method update myclass myclass subclass myclass myclass int myclass subclass int int myclass 
program static information 
preliminaries powerset set 
total partial map denoted 
domain codomain dom rng 
denote 
vn 
map dom fv update 
wm 
dm domain may enlarged 
components pair separated 
de nition meta variables silently de nes pair selectors 
instance de nition implicitly de nes obj recall basics interpretation 
partially ordered sets posets concrete domain 
galois connection pair monotonic maps 

extensive reductive 
operator correct applied pointwise 
framework analysis build denotational trace semantics interprets expression command map input states traces states see 
type environment assigns types nite set variables 
implicitly denote type environment 
de nition 
id set identi ers nite set classes ordered subclass relation poset 
type set fintg extend type de ning int int vars id set variables fout vars 
de ne set type environments vars type dom nite dom kg expressions commands de nition 
specify simple object oriented language instance considered kernel real world object oriented languages 
frame variables values memory locations objects nil myclass myclass subclass 
state 
myclass 
myclass 
myclass 
de nition 
expressions commands de ned grammar nil bop nil new bop generic binary operation type id vn vars 
operators integer expressions 
note distinguish variables identi ers local method elds identi ers local object 
class contains elds functions called methods 
method set input output variables called parameters including special parameter holds result method object method called 
fields set maps bind class type environment elds 
variable eld 
de nition 
fields ff 
dom kg 
static information program static analyser 
de nition 
static information program consists poset map fields example program static information shown 
de ne frame map assigns values variables 
values integers locations nil location memory cell 
value assigned variable consistent type 
instance class variable assigned location nil memory map locations objects object characterized class frame elds 
illustrates di erent concepts 
de nition 
loc nite set locations value loc 
de ne frames objects memories frame dom 
value dom int loc obj frame memory loc obj dom example 

myclass 
myclass 
myclass type environment inside method update class myclass 
loc 
frame contains 

nil 

example 
objects class myclass consistent myclass myclass 

myclass 


object class subclass consistent subclass subclass 



memory contains 



notion type correctness frame memory constrains locations contain objects allowed see details 
note require bound 
de nition 
de ne states frame memory dom entails nil state shown 
de ne traces states 
de nition re ned de nition order ban traces represent execution expression command 
needed correctness proofs section 
de nition 
set traces set non empty sequences 
particular convergent trace 
represents terminated computation divergent trace 

represents divergent computation 
rst state fst 
div mean divergent 
div state lst 
de ne set traces divergent state ft div lst expressions commands denoted map initial state trace execution terminates convergent 
divergent 
special variable res holds value expression div lst res identify command expression denotation see instance example 
de nition 
de ne denotations fd 
fst refers computation 
denotational semantics denotations de nition de ned 
reasons space just say main operations operator sequential composition denotations denotation command application denotations operator disjunctive composition denotations conditional di erent targets virtual method call 
note loop interpreted xpoint 
bytecode granularity considered simplicity consider high level approach introduce explicit construction semantics 
property de ne formal semantics assignable clauses property interpretation denotations 
path period separated non empty sequence identi ers 
de nition 
path length dom 
type 
length path length type dom 
type 
paths positive length denoted paths length paths example 

myclass 
myclass 
myclass example 
paths fb paths fb paths handle speci es position memory frame value eld variable stored 
pair consisting location object identi er 
location nil value handle variable frame eld de nition 
handle element set loc id value handle state de ned hnil vi unde ned dom hl fi unde ned dom dom 
example 
value eld accessible handle hl ii 
value variable handle hnil 
de ne handle allows access value path state 
de nition 
paths handle hnil vi fi de ned loc unde ned 
map pointwise extended paths 
paths say aliases refer handle 
example 
consider state 
hnil bi hl ii unde ned 
hl aliases 
location reachable paths stored state position path points 
de nition 
paths loc 
say reachable exists restrict set denotations ban meaningless cases 
instance reachable locations updated 
essential de nition 
de nition 
say follows 
dom dom dom locations disappear objects change class 
dom reachable reachable reachability non fresh variables forged 
dom reachable unreachable objects updated 
modify de nition requiring follows formalise notion update trace say value handle read di erent states di erent 
benevolent temporary change considered update de nition 
compare value handle rst states 
de nition 
follows de ne assigned de ned 
assigned extended set handles change assigned fh exists assigned fst want approximate command set paths locations allowed assigned traces denotation de nition 
de ne paths 
contains denotations modify handles fd assigned example 
consider denotation execution state trace 

myclass 



assigned hl eld updated 
changes handle mean eld modi ed covers handles values modi ed instance execution state aliases modi es alias 
aliasing allows di erent paths handle 
best canonical paths approximates command 
example 

trace denotation change location pointed ig fb ig 
motivation choosing property looking 
commands best approximation paths 
solve problem consider paths property looking 
de nition 
paths ordered 
ag 
contains denotations commands modify handles ordering de nition just preorder 
implicitly consider element standing equivalence class 
example 
command stand denotation 
example 
example ig fb igg 
proposition 
map 
de nition map galois connection theoretically interesting comparing static analyses assignable clauses 
useless real analysis induces imprecise composition commands show 
example 
consider method update class myclass 
abstraction map induced map de nition 
abstraction depend modi ed 
denote optimal counterpart 
correctly approximates section 
gg 
point follows correctness point considering starting state bound arbitrarily long list distinct objects see pictures section 
fb gg correct imprecise approximation problem example says elds modi ed say variables put inside elds 
information vital precise instance example knew modi ed conclude modify elds aliases 
perspective say example shows cases property weak allow modular veri cation 
easy tell means assignable speci cations jml currently provides powerful modular veri cation 
practical evaluation precision needed 
anyway want solve problem shown example 
section consider re nement ar contains information missing 
re ned domain ar add information variable eld state trace covered de nition values paths rst state allows de ne precise de nition 
de nition 
ff kg type environment elds 
de nition sensible assume elds distinguished fully quali ed name 
de ne domain cov coverings cov fe dom 
paths dom 
paths re nement ar cov ordered pointwise de nition 
example 

int 
int 
myclass 

myclass 
myclass 
myclass 
element cov 

ffb 



ffb want mean execution change binding bound fresh locations result new command 
variable execution bound location bound fresh location 
execution elds object change binding bound fresh locations location bound execution 
formalise idea 
de nition 
paths loc 
say covers reachable paths de nition reachable example 
state 
fb covers reachable 
loc fresh variable 
covers reachable paths similarly covers extend de nition cov says variables elds covered 
variables elds treated asymmetrically variable stands single value eld stands eld objects 
require covered covered changed 
de nition 
say cov covers paths loc covers paths loc covers reachable hl fi hl fi 
de nition 
de ne cov 
div covers lst ar 

example 
commands method update myclass 
approximated respectively denotations belong 






ffb ffb 








ffb 



igg 






proposition 
map ar 
de nition map galois connection ar de ne approximation bytecode de ned sequential disjunctive composition bytecodes 
plan analysis high level source codes prefer approximate high level constructs de nition 
section explains approximations example automatically constructed commands expressions de nition 
analysis discuss static analysis uses domain ar explain mechanically construct approximation denotations single commands example combine approximation sequential disjunctive composition 
analysis going de ne uses singleton set sets paths represent value covered 
instance example computes igg precise information ig fb igg 
simplify notation removing level bracketing 
note contradict reasonings section 
just observe posteriori theoretically possible precision come analysis 
mean property looking de ned di erently 
assume value covered path de nition 
value covered computation covered cov 
answer question operation 
de nition 
paths cov de ne update fp pg operation pointwise extended sets functions sets 
example 
approximation example remember forget level bracketing 
fp bg fb fp fb fb de ne sequential disjunctive composition 
de nition 
ar ar de ne ar example 
denotation command example 
approximation 
fbg 




fb approximation 
fbg 




fb approximation 
fbg 




fb set example shows domain ar su er imprecision problem shown example 
analysis computes correct assignable clause method shown 
said chase tool gives incorrect answer method 
de nition 
ar de ne ar operation applied pointwise functions example 
example shows approximation method update class myclass 
approximation method update class subclass computed similarly 
ig 

fbg 




want approximation call method update know alternatives late binding mechanism choose approximation alternatives obtain 
fbg 




fb de ne approximation expressions commands 
recall special variable res holds value expression section method call expression language 
rst de ne empty covering expresses fact variable eld changed 
need auxiliary maps remove result res expression store covering set variable respectively 
de nition 
dom dom ar int fvg xa ej res 
de ne usually omitted nil new res fvg res bop nil res fp jp res res vn dm wn called denotation res 

dm res 
wn 
vn renaming operation method call substitutes actual arguments formal ones 
information covering value ows inside method call variable 
variable res takes covering information result method available value method call expression 
changes parameters method observable outside 
denotation considered method call computed previous iteration step provided user 
rst choice compute assignable clauses program iteration xpoint second checking assignable clauses correct 
second case check new denotation de nition user 
case user provided post xpoint immediate consequence operator induced post xpoints correct approximation minimal xpoint 
note case user specify assignable clause element extra covering information de nition 
example 
consider expression method update class myclass 


fbg 
res 
fbg 



fp res 
fbg 
res 
fb 



fp res 
fbg 
res 
fb 



de ne approximation execution command 
de nition 
de ne res fg 


res path removed example 
example shows approximation 
approximation 

fbg 
res 






fbg 
res 
fb 



fb 

fbg 




fb note consistent example result obtained intuition domain 
proposition 
map de nitions correctly approximates concrete denotation expressions commands 
paths potentially nite want compute assignable clauses program cut paths maximum length 
longer paths approximated introducing jml reach clause 
formalised semantics assignable clauses speci cation language jml interpretation trace semantics 
shown static analysis imprecise lacks information useful de nition precise sequential composition operator 
reason modular veri cation impractical 
re ned precise property ar su er problem 
de ned static analysis check modular way correctness ar annotations 
best knowledge rst correct static analysis check compute jml assignable clauses 
shown works correctly cases chase tool fails 
analysis implemented described detail algorithmic de nition section 
pointed section problem says elds may modi ed may assigned elds :10.1.1.34.8403
note similar assignable clauses jml respect 
re nement ar remedies problem keeping track additional covering information may assigned elds 
means modular checking ar require user supply extra covering information addition assignable clauses 
note suggests assignable clauses currently available jml may fundamentally unsuited accurate correct static analysis 
word best way specify side ects assignable clauses means said see 

cata huisman 
static checker jml assignable clause 
available www sop inria fr nestor 

cousot cousot 
interpretation uni ed lattice model static analysis programs construction approximation fixpoints 
proc 
popl pages 

greenhouse boyland 
object oriented ects system 
ecoop object oriented programming th european conference number lncs pages 
springer verlag 

leavens baker ruby 
jml notation detailed design 
kilov rumpe simmonds editors behavioral speci cations businesses systems pages 
kluwer 

leavens baker ruby 
preliminary design jml behavioral interface speci cation language java 
technical report dept comp 
sci iowa state university 
tech 
rep 

leino 
data groups specifying modi cation extended state 
oopsla pages 
acm 

leino poetzsch ter zhou 
data groups specify check side ects 
acm sigplan conference programming language design implementation pldi volume pages june 

loop project 
www cs kun nl bart loop index html 

meyer 
object oriented software construction 
prentice hall nd rev edition 

uller poetzsch ter leavens 
modular speci cation frame properties jml 
concurrency computation practice experience 
appear 


semantics tool compositional focussed static analyses 
cousot editor proc 
static analysis symposium sas volume lncs pages paris july 

jensen 
focused class analyses interpretation trace semantics 
available www sci papers html 

poll 
static analysis jml assignable clauses 
extended version 
available www sci papers html 

tarski 
lattice theoretical fixpoint theorem applications 
paci math 
