system problem solving abduction kakas dep 
computer science university cyprus box cy nicosia cyprus ac cy presents new system called system performing abductive reasoning framework abductive logic programming 
hybrid computational model implements abductive search terms tightly coupled processes reduction process highlevel logical representation lower level constraint store lower level constraint solving process 
set initial proof principle experiments demonstrate versatility approach stemming declarative representation problems underlying computational behaviour system 
approach offers general methodology declarative problem solving ai incremental modular refinement high level representation extra domain knowledge improve scale computational performance framework 
decades clear abduction play central role addressing variety problems artificial intelligence 
problems include diagnosis poole console planning kakas shanahan knowledge assimilation belief revision inoue sakama multi agent coordination kowalski sadri knowledge intensive learning muggleton mooney 
essential feature abductive approach problem solving fact allows application problems formalized directly high level declarative representation 
close link emerges declarative problem solving ai logical reasoning abduction 
despite variety applications abduction potential benefits easy develop general systems abduction computationally effective problems practical size complexity 
presents new system called system supports abductive reasoning framework abductive logic programming alp kakas denecker kakas 
framework problems bert van marc denecker dep 
computer science leuven celestijnenlaan leuven belgium cs kuleuven ac represented high level declarative way logic programming rules classical order sentences integrity constraints 
aims examine possibility developing alp declarative problem solving framework suitable variety ai problems computationally viable problems practical scale 
principled implementation system developed hybrid computational model formalizes abductive search solution terms interleaving processes logical reduction high level representation problem lower level constraint solving 
abductive search linked tightly construction associated constraint store 
validate approach carried set proof principle experiments initial implementation system aim test general underlying computational behaviour system different domains flexibility framework incorporate additional problem specific knowledge modular computationally enhancing way 
particular experiments designed test extend high level representation problems computationally improved extra domain knowledge added 
experiments considered include constraint satisfaction problems standard ai planning systems competition problems 
system developed follow earlier alp systems aclp system kakas denecker schreye bringing features systems 
main development design system previous systems fact non determinism abductive computation explicit allowing possibility implementing form parameterized heuristic search coupled process deterministic propagation state computation 
system available www cs kuleuven ac kt 
declarative programming abduction declarative problem solving high level representation problem hand closely related abduction 
reason stems fact declarative representation describes expert knowledge problem domain method solution task solving problems consists filling missing information representation pertaining goal hand 
typically logical framework representation solution consists finding extension predicate incompletely specified representation 
high level theory describing problem extended new problem goal satisfied 
computing extensions theory representing problem abductive task 
abduction problem solving method assumes general data structure solution problem solution carrier predicate level solution described terms level problem 
framework problem solving abduction needs expressing allow high level declarative representations complex problems missing incomplete information 
time framework practical value provide ways improving computational effectiveness high level representation particular problem 
framework combines representational expressiveness computational flexibility abductive constraint logic programming aclp framework integrates abductive logic programming alp methods constraint logic programming clp 
system developed framework 
briefly review underlying framework alp 
way formalize alp view special case id logic denecker logic extending classical logic inductive definitions 
language predicates consisting disjoint types predicates defined predicates ii open abducible predicates iii constraint predicates 
theory alp defined follows 
definition abductive theory triple constraint logic program defined pre appearing head rules 
set ground abducible atoms open predic ates 
set order formulae constraints 
called integrity representation application problem abductive theory splits view alp terms id logic parts 
set rules represents expert strong definitional knowledge problem knowledge fully determines group predicates defined predicates terms open predicates 
rule represents case defined predicate head true program exhaustive enumeration cases 
open abducible predicates definition 
general information may available indirectly expert weaker assertional knowledge problem 
represented theory integrity constraints 
set enumerates possible missing values open predicates 
abductive solutions build giving ground partial definition open predicates 
constraint predicates defined clp underlying constraint theory independent particular abductive theory assume constraint theory finite domain theory includes equality logical terms 
formal details scope 
alp abductive problem task defined follows 
definition abductive theory query consisting conjunction literals abductive solution explanation set ground abducible atoms answer substitution consistent definition generic defines notion abductive solution terms semantics standard constraint logic programming lp 
particular choice semantics defines entailment relation notion abductive solution 
context id logic inductive definition semantics essentially coincides founded model semantics gelder lp valued model rest adopting founded model semantics lp development system 
computed abductive solution gives ground definition open predicates turn logic program extends defined predicates 
example abductive theory give part theory representing planning domain 
open predicate con straint predicates defined predicates 
predicates simple predicates defining finite domain variables clp nota problem tion trucks 
formal details scope 
initial state problem set facts logic program including statements form system abductive search computation abductive solution system seen process reduction query set abducible hypotheses open predicates associated constraint store constraints general finite domain constraint theory supported particular alp framework 
similar computation clp important differences 
reduction involves hypotheses reduction integrity constraints effectively new abductive hypothesis integrity constraints need re evaluated remain true 
satisfaction result new constraints constraint store possibly new goals level original query 
second difference clp way constraint store reduction 
see subsection merely passive store constraints evaluated reduction actively reduction affect search 
example enables reductions pruned early setting new constraints provided remains satisfiable 
abductive inference system logical reduction query system defined derivation rewriting process states 
give brief formal details 
computational restriction form integrity constraints abductive theory imposed system 
sentences transformed classically equivalent sentences form literal 
integrity constraint called denial negative goal denoted simplify presentation assume rule form variables implicitly uni quantified referred free variables conjunction literals free variables occurring head occurring body 
rules homogeneous form non variable term appear head rule written equivalently state derivation consists types elements set literals possibly free variables called positive goals set denials called negative goals form conjunction literals free variables 
denotes set abducible atoms positive goal atoms predicate open predicate denotes set positive constraint atoms derivation starts initial state consisting literals query positive goals denials negative goals 
rewriting derivation proceeds selecting literal goal applying suitable inference rule yielding new state 
main inference rules rewrite rules different elements separated rule 
defined predicate open predicate defined predicate rule 
open predicate abduced atom 
constraint atom universally quantified variables 
constraint atom universally quantified variables 
contain universally quantified variables 
successful derivation terminates state 
contains positive goals form abducible atoms constraint atoms 
negative goals denials containing open atom selected resolved abduced atom 
constraint store satisfiable 
derivation universally quantified variables appear selected literal denial 
derivation succeed flounder fails 
note negation failure simply re written rd rule denial positive atom 
final state successful derivation 
substitution assigns ground term free variable satisfies constraint store called solution substitution substitution exists satisfiable successful derivation 
theorem abductive theory query final state successful de solution substitution abductive solution pair abductive search search abductive solution system proof theory depends closely computed constraint store 
typically abducible hypotheses computation non ground atoms variables restricted constraints associated constraint store computation 
constraint store plays central role carrying abducibles solution controlling abductive search 
respects computation viewed process constructing constraint store high level specification query abductive theory decision take abducible introduce satisfy integrity constraint extends differently current constraint store 
turn things constraint store guide decisions abductive search 
pattern abductive computation system follows 
deterministic propagation goals 
suspend evaluate choices quasi consistency goals evaluate choices goals 
global set choices new goals 
non empty return 
exit ground solution 
computation starts phase deterministic propagation current goals possible rewriting reduced goals left resulting state computation 
purpose phase fold expose collect choice points current state computation propagate construction constraint store new constraints necessarily imposed choices far previous iteration steps 
updated constraint store checked satisfiability phase grows 
significant effect computation enables detect early ensuing failure choices prior committing choices 
choice points exposed deterministic phase suspended new process evaluation begins 
explicit handling non determinism computation allows parameterized form heuristic search variety different types heuristics 
essentially types choices computation 
choice rule program rewriting positive goal cf 
second rewrite rule choice way satisfy denial cf 
rewrite rules 
choice points second type considered phase called quasi consistency try satisfy denials current state possible new positive goals 
choices result new possible constraint store compute subsidiary phase deterministic propagation 
quality ensuing constraint store various criteria tightness finite domain variables minimal change current constraint store forms possible heuristic criterion 
second criterion concerns number complexity new positive goals choice produce 
example preferring new goals deterministic introduce new abducibles associated denials name reflects fact stage computation satisfaction integrity constraint denials general contingent set new goals 
simple form different possibilities currently exploring implementation system 
phase quasi consistency computation examines choice points left suspended positive goals non deterministic apply form heuristic evaluation choose different possibilities 
global decision taken choice points computation returns top repeat process choice leads new positive goals terminates successfully labeling constraint store grounding abductive solution 
global approach system choice making tries cover choice points possible results informed decisions leading backtracking better computational performance 
facilitates heuristics helping parameterize available top level 
important parameter computation degree constraint store examined satisfiability quality measures construction 
possibility full check store point grows 
costly large part unnecessary 
hand incomplete check may result late choices recognition inconsistency constraint store 
intermediate possibility localizing check latest addition store variables current constraints variables connected constraints store 
induces form dynamic partition constraint store connected components reflects certain extend high level structure problem query hand help minimize computation required check satisfiability store 
experiments system number different experiments carried test underlying general computational behaviour initial implementation system affected extending high level representation problems additional information 
current version system implemented meta program top sicstus prolog uses finite domain constraint solver 
developed experimentation tool test different datastructures strategies 
currently form indexing abducibles constraints datastructures 
respect parameters abductive search previous section current version implements basic form heuristics 
particular methods checking satisfiability constraint store construction simple 
set experiments consists problems specification reduced finite domain constraint store phase reduction 
problems include standard constraint satisfaction problems queens graph coloring scheduling problems 
aim confirm execution deterministic compare execution time solving problem directly clp see overhead cost reduction high level rep resentation problem 
tables show sample experiments queens problem graph coloring problem 
graph coloring experiment set colorable planar graphs constructed 
run times split time needed find abductive solution subsequent time needed ground clp labeling 
experiments reported done linux machine mhz mb memory 
queens size abductive solution clp grounding ms ms ms ms graph coloring size nodes abductive solution clp grounding ms ms ms ms reduction specification done step backtracking occurs abductive solution experiments construction time abductive solution increases clearly size 
orders slower prolog clp program set constraints 
set experiments carried planning problems 
non deterministic problems abductive computation search system tested 
selected latest aips planning competition domains blocks world logistics 
table shows performance system blocks world domain 
experiment specification action move denotes moving block time problem time second considered domain logistics 
domain specification functors general event calculus 
specification layered top layer compact high level description logistics domain 
lower level actions original aips strips description derived high level ones 
table shows performance system problems system compute high level plans 
length plans final time goal achieved number column number abduced actions describing actual plan 
blank entry indicates system unable find solution time limit 
results low level plans second table 
plans computed separated phase input previous computed high level plans 
step expands high level plans number time points actions 
high level solutions problem length time max time points low level solutions problem length time ms ms ms ms ms problems took return solution 
finite domain solver incomplete system may go branch constraint store unsatisfiable see marked entries tables 
tried different satisfiability checks successful 
parameter check domain size variables see column table high level plans decreasing maximal number time points satisfiability check fails faster constraint store 
consequence problems solved reasonable time 
currently investigating improve check 
compared previous experiments aclp system reliable robust changes order execution query 
constraint solver incomplete possible derivation system failing find solution finding immediately 
main difference system previous systems separation search inference 
allows easy experimentation strategies different degrees deterministic propagation 
related abductive systems alp developed 
different methods bottom computation iwayama satoh tabling alferes rewriting rules completion fung kowalski kowalski 
system earlier alp systems aclp system knowledge abductive system paid particular attention computational aspects abduction constraint solving extensively control abductive search enhance computational behaviour 
level related answer set programming asp gelfond lifschitz 
strong connections established satoh iwayama alp asp 
level semantics frameworks large class theories asp admits special type integrity constraints equivalent 
level computation construction abductive solution system corresponds generation model asp significant differences respective computational models 
instructive develop systematic experiments compare systems approaches declarative problem solving 
abductive search system parametrized variety ways reflect type cooperation constraint solver heuristics 
important development system structure parametric space study techniques constraint programming advanced heuristic search incorporated order improve general computational behaviour framework variety problems 
particular study heuristic methods planning bonet geffner generalized abductive computation system 
general improvement underlying computational efficiency alp framework declarative problem solving framework clearly limited aiming framework general variety problems 
complementary line development system associated alp framework concerns study provide programming environment user facility incrementally refine high level representation problem modular way 
general methodology declarative problem solving abduction emerging alp modeling environment provides possibility extra problem specific declarative control knowledge included enhance computational performance 
alferes alferes pereira swift 
founded abduction tabled dual programs 
proceedings iclp 
bonet geffner bonet geffner 
planning heuristic search new results 
proc 
european conference planning ecp 
lamma mello 
implementation abductive logic agents 
ai ia lnai vol 

console console 
compiled knowledge guide focus abductive diagnosis 
ieee transactions knowledge data engineering 
denecker kakas denecker kakas 
abductive logic programming 
special issue jlp vol 
denecker schreye denecker de schreye 
sldnfa abductive procedure abductive logic programs 
logic programming 
denecker denecker 
extending classical logic inductive definitions 
proceedings cl 
fung kowalski fung kowalski 
iff procedure abductive logic programming 
logic programming 
gelder van gelder ross schlipf 
founded semantics general logic programs 
journal acm 
gelfond lifschitz gelfond lifschitz 
classical negation logic programs disjunctive databases 
new generation computing pp 

inoue sakama inoue sakama 
abductive framework nonmonotonic theory change 
proceedings ijcai pages 
iwayama satoh iwayama satoh 
computing abduction tms top expectation 
logic programming 
kakas kakas kowalski toni 
role abduction logic programming 
gabbay hogger robinson editors handbook logic ai logic programming volume pages 
oxford university press 
kakas kakas michael 
aclp abductive constraint logic programming 
journal logic programming special issue abductive logic programming 
kowalski sadri kowalski sadri 
logic programming multi agent systems 
annals artificial intelligence 
kowalski kowalski toni wetzel 
executing suspended logic programs 
fundamenta informaticae 
denecker bruynooghe 
abductive planning system event calculus 
journal logic computation 
mooney mooney 
integrating abduction induction machine learning 
abduction induction essays relation integration pages 
kluwer academic press 
muggleton muggleton 
theory completion learning 
inductive logic programming ilp 

role abductive reasoning process belief revision 
phd thesis dept computer science university sydney 
poole poole goebel aleliunas 
theorist logical reasoning system defaults diagnosis 
knowledge frontier essays representation knowledge pages 
springer verlag 
satoh iwayama satoh iwayama 
computing abduction tms 
proc 
iclp pages 
shanahan shanahan 
abductive event calculus planner 
logic programming 
