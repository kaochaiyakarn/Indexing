software experience vol january letter oriented perfect hashing scheme sparse table compression chin chen chang institute computer science information engineering national chung cheng university taiwan chen wu institute computer science information engineering national tung university taiwan summary new letter oriented perfect hashing scheme ziegler row displacement method 
unique tuple set static letter oriented key words extracted heuristic algorithm 
extracted distinct tuples associated sparse matrix 
sparse matrix compression technique perfect hashing function key words constructed 
key words perfect hashing functions letter oriented hashing sparse table compression row displacement method hashing fast addressing technique directly accessing data memory space 
set keys retrieve information associated key short time hashing function keys 
perfect hashing function defined mapping set keys address space 
methods proposed constructing perfect hashing functions 
sparse table mean table number non zero elements opposed zero elements useless vacant size table 
schemes compress sparse table linear array yield efficient memory usage 
frequently storing parsing tables compiler design 
consider sets static letter oriented keys 
new scheme constructing perfect hashing functions ziegler row displacement method 
extract unique tuple keys heuristic algorithm set letter oriented key words 
extracted tuples associated sparse matrix 
apply sparse matrix compression technique obtain compact matrix decompose compressed matrix set row vectors 
row displacement method employed compress decom received may john wiley sons revised june 
chang 
wu posed row vectors condensed linear array 
displacements decomposed row vectors determined applying ziegler row displacement method 
perfect hashing function set letter oriented keys constructed 
sections give detailed descriptions construction perfect hashing functions sets static letter oriented keys 
discussions practical implementations scheme 
sparse table compression known displacement methods proposed storing sparse tables 
methods bases constructing perfect hashing functions 
ziegler row displacement simple adopt form perfect hashing functions 
give brief description ziegler approach section 
reviews compression methods static sparse tables included 
sparse matrix non zero elements 
convenience matrix regarded set row vectors set column vectors 
ziegler proposed row displacement method compress row vectors matrix linear array non zero elements placed overlapped linear array conflict yield efficient memory usage 
applying ziegler row displacement method element position matrix directly stored location base memory base referred row displacement th row vector 
shows graphical illustration row displacement method 
furthermore ziegler gave suggestion sorting row vectors matrix descending order number non zero elements placing row vectors linear array obtain better results 
known problem computing optimal displacements row vectors np complete 
pointed ziegler tarjan yao method referred fit decreasing method yields excellent results practice 
xx xx matrix st row vector nd row vector rd row vector th row vector linear array zero element nonzero element 
graphical illustration row displacement method letter oriented perfect hashing scheme sorted row vectors compressed matrix ll maximal length row vector ziegler row displacement method placing row vectors linear array described follows step 
step 
step 
step 
step 
allocate set free linear locations denoted memory 
get row vector ll 
starting head search free location non zero elements fully placed conflicting non zero elements previously placed row vectors location allocate contiguous locations memory append repeat step location 
place overlapped repeat step row vector remains ll 
scheme section presents new perfect hashing scheme sets letter oriented keys 
assume unique tuple obtained set keys artificial rules 
map extracted distinct tuples set entries sparse matrix non zero elements represented represented 
section simple example explain scheme finding perfect hashing functions 
general model method part section 
consider case twelve months identifiers english listed january may february june march july april august extracting second tuples listed september october november december third letters twelve distinct extracted pairs produce matrix associated twelve pairs see 
sake readability represented dots 
reader may notice matrix sparse 
problem hashing scheme turns compress matrix condensed linear array storage extracted tuples matrix small possible 
straightforward algorithm compressing sparse matrix compact 
compressed matrix basis hashing scheme 
shall define functions describing algorithm clearly 
chang 
wu 










matrix th th row vectors position return false return true 
matrix th th column vectors position return false return true 
matrix move th row vector th row vector set elements th row vector 
matrix move th column vector th column vector set elements th column vector 
letter oriented perfect hashing scheme matrix place th row vector position th row vector set elements th row vector 
matrix place th column vector positions th column vector set elements th column vector 
example matrix check row return false second row vectors third position similarly return true 
merge row row vector second column vector original matrix consider sparse matrix associated example twelve months 
row index row vector th row vector merged col index column vector th column 
chang 
wu vector merged 
algorithm produce compact form sparse matrix stated follows 
algorithm compress matrix input matrix output 
compact matrix cm rows columns 

number rows cm 
number columns cm 
row col 

step initialization rf true cf true rf cf mean row flag column flag indicating row column available check respectively 
step merge rows rf true rf true true rf false row row number rows cm step merge columns le iter oriented perfect hashing scheme cf true cf true true cf false col col number columns cm step output results output cm output row output col graphical illustration result produced algorithm shown 
compact matrix cm obtained decompose parts shown 
position cm original row vectors decomposed row vectors define indices decomposed row vectors determining displacements row vectors contiguous linear array 
ri row vector row vector contained th original row vector cm 
define index define index 
cm decomposed row vectors total 
reconsider sparse matrix produced example twelve months 
executing algorithm compress matrix obtain compressed matrix follows 
results algorithm compress matrix 
chang 
wu 
triangular decomposition cm matrix values row col listed table depicts triangular decomposition cm index decomposed row vector matrix cm produced algorithm determining displacements decomposed row vectors cm contiguous linear array follows 
algorithm determine displacements input decomposed row vectors matrix cm 
output displacements decomposed row vectors base 
table row col matrix row col 
triangular decomposition indices cm step step step step record letter oriented perfect hashing scheme number index row vector 
sort row vectors number ll list sorted decomposed get row vector ll index 
apply ziegler fit decreasing method array 
descending order 
row vectors 
place vector linear record position element vector located 
set base 
repeat step decomposed row vector remains ll 
executing algorithm determine displacements displacements decomposed row vectors matrix cm base twelve months listed table ii 
extracted tuple mapped position original matrix compressed matrix cm rows columns 
values row col base determined transforming position non zero element matrix location linear array applied ziegler row displacement method obtain perfect hashing function twelve months english base row col row col row base row col table ii 
base cm matrix base 
chang 
wu instance key january example twelve months extracted character tuple expressed 
table obtain row col 
col row hashing value computed base row col base key october extracted character tuple expressed 
row col table 
col row hashing value computed base row col row base give general model scheme constructing perfect hashing functions sets letter oriented keys 
convenience denote lexical order example 
set letter oriented keys ki 
ei ai ai 
ai extracted tuple kj 
assume extracted tuples distinct 
cardinality set characters appeared extracted tuples 
instance characters appeared letters 
ei sparse matrix produced corresponding entry cm matrix rows columns produced algorithm compress matrix 
perfect hashing function keys defined base row col row col row base row col row col determined algorithm compress matrix base determined algorithm determine displacements number rows cm number rows cm 
may ensure correctness formula transforming position non zero element matrix location linear array 
example illustrates map set keys distinct extracted tuples matrix 
example 
assume tuple map set keys matrix distinctly 
matrix produced 
suppose letter oriented perfect hashing scheme tuples 
corresponding entry set 
way assume tuple map set keys matrix distinctly 
matrix produced 
suppose tuples 
corresponding entry set 
general algorithm constructing perfect hashing function set keys stated follows 
algorithm construct phf input set keys 
output row col base formula perfect hashing function 
step extract distinct tuples keys artificially 
step produce matrix associated distinct extracted tuples cardinality set characters appeared extracted tuples 
step call algorithm compress matrix compress matrix compact matrix cm rows columns determine values row col 
step decompose cm triangular parts shown 
record decomposed row vectors indices 
step call algorithm determine displacements find base 

chang 
wu step output row col base 
give examples explain algorithm construct phf works 
example consider cdc pascal reserved words listed array case const div downto file function goto label mod nil packed record repeat segment set type value var step extracted tuple reserved word rules 
length character character 
length character fourth character distinct extracted tuples executing step compress original matrix produced step obtain compressed matrix cm parameters row col 
executing step step parameters base determined 
compressed matrix cm parameters row col base shown 
example reconsider example 
instance key extracted tuple corresponds 
hashing value computed base row col base base 
letter oriented perfect hashing scheme 
results cdc pascal reserved words discussion sager proposed inefficient minimal hashing scheme 
fox effective scheme 
sager algorithm applied scheme sets words fox improvement sager algorithm formed minimal perfect hashing function words size set key words hashed near minimal perfect hashing scheme depends length extracted unique tuples available memory practical implementation 
space requirements methods proposed individually sager fox require words storage word hashed 
method reserved words cdc pascal programming language need words words storage word hashed words row col words base 
general number storage word required method 
chang 
wu cardinality set characters appearing extracted tuples denotes number key words hashed tuple length 
note magnitude highly depends intelligence mentioned algorithm extracting distinct tuples 
space needed method dominated extracted tuples 
time spent finding perfect hashing function set keys time complexity algorithm determine displacements analyse time required execute algorithm 
compressed matrix cm rows columns 
pq compression rate 
pq 
time complexity algorithm determine displacements method worst case time complexity 
near minimal perfect hashing scheme letter oriented sets key words 
scheme uses ziegler row displacement compression technique producing parameters hashing functions 
furthermore advantages achieved 
extracted distinct tuples represented matrix suitable bit string operations construction hashing functions 

computation hashing value addressing key simple 
space requirement method sizes row col fully depend length extracted tuples keys size base heavily depends compactness compressed matrix resulted adopted scheme matrix compression 
methods static sparse matrix compression 
example method proposed rre ziegler row displacement method applied large dictionaries 
worth investigating choice suitable compression method basis perfect hashing scheme large word sets 
researchers proposed perfect hashing schemes extracted tuples 
trial error find needed tuples 
find heuristic algorithm extract unique tuple arbitrary list word sets amount required time remains open 
letter oriented perfect hashing scheme authors referees useful comments improved presentation 
















perfect hashing functions single probe retrieving method static sets cacm 
chang chen jan design machine independent perfect hashing scheme appear computer journal 
chang lee letter oriented minimal perfect hashing scheme computer journal 
chang design letter oriented minimal perfect hashing functions journal chinese institute engineers 
minimal perfect hashing functions simple cacm 
cook letter oriented minimal perfect hashing function sigplan notices 
fox chen heath datta cost effective algorithm finding minimal perfect hashing functions acm conference proceedings pp 

jan chang addressing letter oriented keys journal chinese institute engineers 
minimal perfect functions method cacm 
sager polynomial time generator minimal perfect hash functions cacm 
brain near perfect hashing large word sets software practice experience tarjan yao storing sparse table cacm yao table sorted jacm 
fredman storing sparse table worst case access time jacm 
rre storing static tries pape ed graphtheoretic concepts computer science universities verlag rudolf linz pp 

rre efficiency sparse matrix storage techniques pape ed discrete structures algorithms verlag pp 

ziegler smaller faster table driven parser madison academic computing center university wisconsin madison wisconsin 
aho principles compiler design addison wesley publishing reading mass 
rre optimization parser tables portable compilers acm transactions programming languages systems 
garey johnson 
computers intractability guide theory np completeness freeman san francisco 
