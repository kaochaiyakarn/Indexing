journal selected areas communications special issue advances service overlay networks peer peer architecture media streaming duc tran member ieee hua senior member ieee tai fact current internet widely support ip multicast content distribution networks technologies costly concept peer peer promising start enabling large scale streaming systems 
called zigzag approach propose method clustering peers hierarchy called administrative organization easy management method building multicast tree atop hierarchy efficient content transmission 
zigzag multicast tree height logarithmic number clients node degree bounded constant 
helps reduce number processing hops delivery path client avoiding network bottleneck 
consequently delay kept small 
build tree satisfying properties easily efficient control protocol nodes place maintain tree effects network dynamics 
zigzag handles situations gracefully requiring constant amortized worst case control overhead 
especially failure recovery done impact constant number existing clients burden server 
index terms application layer multicast media streaming peer peer 
peer peer computing interest quite long instance numerous file sharing systems concepts developed :10.1.1.16.8178
investigate applicability problem streaming live media 
streaming architecture delivery tree built rooted source including receivers 
subset receivers get content directly source get receivers upstream 
consequently paradigm promises address critical problems large scale streaming systems network bandwidth bottleneck media source cost deploying extra servers incurred content distribution networks infeasibility ip multicast current internet 
building efficient streaming scheme truly challenge due issues including delay source receiver may excessive content may go number intermediate receivers 
shorten delay increasing liveness media content tree height kept small join procedure finish fast 
delay may long due occurrence bottleneck tree node 
worst bottleneck happens tree research funded part national science foundation ani 
authors school electrical engineering computer science university central florida orlando fl 
email cs ucf edu star rooted source 
bottleneck reduced tree chain case leaf node experiences long delay 
apart enforcing tree short desirable node degree bounded 
behavior receivers unpredictable free join leave service time abandoning descendant peers 
prevent service interruption robust technique provide quick graceful recovery failure occur 
receivers may store local data structures exchange state information maintain connectivity improve efficiency network 
control overhead receiver fulfilling purposes small avoid excessive network resources overcome resource limitation receiver 
important scalability system large number receivers 
reasons streaming hard implement deal security client heterogeneity 
investigate problems part 
address issues listed 
specifically propose solution called zigzag 
zigzag organizes receivers hierarchy clusters builds multicast tree atop hierarchy set rules called rules 
cluster head head responsible monitoring memberships cluster associate head responsible transmitting content cluster members 
failure head affect service continuity members case associate head departs head working designate new associate head quickly 
summary zigzag provides desirable features number receivers matter grow node degree multicast tree bounded constant 
multicast tree height bounded 
failure recovery done impact constant number existing receivers burden source 
important benefit source usually overwhelmed huge requests network 
protocol control overhead low 
receiver needs exchange control information receivers worst case 
average communicates constant number receivers 
join procedure fast maintenance overhead cluster structures small independent journal selected areas communications special issue advances service overlay networks previous solutions problem provide subset features achieve :10.1.1.16.8178
promising performance zigzag substantiated theoretical simulation analyses include comparison method :10.1.1.16.8178
results indicate zigzag scalable robust efficient solution especially large scale streaming systems 
zigzag best applicable streaming applications single media server broadcasting live long term sport event clients staying system period 
application sensor network live monitored data broadcast sensing site distant nodes processing 
section design zigzag approach alternative 
report results simulation study 
related works discussed concluded summary 
ii 
zigzag approach ease exposition refer media source server receivers clients 
referred peers 
section propose scheme called zigzag consists important entities administrative organization representing logical relationships peers multicast tree representing physical relationships peers link receive content 
firstly describe administrative organization 
secondly propose multicast tree built organization control protocol peers exchange state information 
propose policies adjust tree administrative organization client join departure discuss performance optimization issues 
administrative organization administrative organization manage peers currently system illustrated fig 

peers organized multi layer hierarchy clusters recursively defined follows number layers constant layer contains peers 
peers layer partitioned clusters sizes 
layer cluster size 
peer cluster layer selected head cluster 
head automatically member layer server head cluster belongs 
non head peer cluster layer selected associate head cluster 
exception holds highest layer server head associate head 
example fig 
highest layer layer server head associate head 
peer associate head cluster layer head cluster layer 
peer head cluster layer belonging layer 
role associate head clear discuss multicast tree section 
initially number peers small administrative organization layer containing cluster 
clients join leave organization grow shrink 
cluster size upper bounded split cluster 
cluster size upper bounded current size splitting new clusters sizes prone peers leave 
structure implies layer head cluster belongs lower layer 
note hierarchy extension proposed employed :10.1.1.16.8178:10.1.1.16.8178
difference definition new concept 
furthermore propose novel better solutions map peers administrative organization build multicast tree update structures network dynamics 
main contributions 
fig 
illustrates terms rest number peers 
additionally peer subordinate non head peers cluster headed peer called subordinates fig 
peers subordinates peer peers subordinates server 
foreign head non head peer layer called foreign head layer subordinates fig 
peer foreign head peers 
foreign subordinate layer associate head called foreign subordinate mentioned 
fig 
peer foreign subordinate peer 
foreign cluster layer cluster called foreign cluster mentioned 
fig 
layer cluster head peer foreign cluster peers 
super cluster suppose head cluster appears cluster higher layer 
call super cluster multicast tree multicast tree built administrative organization 
section propose rules multicast tree confined explain rationale 
join departure optimization policies follow rules 
call rules rules define demonstrated fig 
definition rules rule peer highest layer link link 
peer layer layer stands connectivity 
due rules content goes zigzag server peer cluster heads name proposed approach zigzag 
journal selected areas communications special issue advances service overlay networks server associate head head administrative organization peers fig 

administrative organization peers relationships server associate head head fig 

multicast tree atop administrative organization outgoing link incoming link highest layer layer 
rule non head members cluster receive content directly associate head 
words associate head links non head member cluster 
cluster layer associate head links non head members cluster layer associate head links non head members 
rule associate head cluster server get content directly foreign head 
associate head cluster layer link peer foreign head cluster layer link foreign head 
trivial prove rules guarantee tree structure including peers 
fig 
gives example client multicast tree built atop administrative organization 
terms parent children descendant meanings applied conventional trees 
term node interchangeably peer client 
furthermore specified layer peer implicitly refers node highest layer layer theorem worst case node degree multicast tree 
proof node foreign clusters having foreign subordinates 
consider node highest layer possibilities super cluster foreign cluster foreign subordinate foreign head subordinate relationships clusters peers associate head link layer non head may links subset foreign subordinates 
links permitted due rules 
degree exceed 
head implies server appear layer 
server associate head highest layer degree server exceed 
head associate head links subset foreign subordinates 
degree 
case degree node exceed proving theorem true 
theorem height multicast tree number peers 
proof longest path server node path server layer node 
path visits layer 
visit link counted associate head 
number nodes excluding server path twice number layers minus 
path length 
theorem proved 
theorems summarize properties multicast tree desire 
content server client goes intermediate clients outgoing bandwidth contention kept moderate client serves small constant number 
advantage diminished rules enforced 
clients join leave able adjust tree violating rules 
overheads incurred adjustment small keep system scalable 
motivation head parent subordinates approach follows 
suppose members cluster get content head 
highest layer node links subordinates layer belongs journal selected areas communications special issue advances service overlay networks 
worst case node degree 
furthermore closer source larger degree node 
words bottleneck occur early delivery path 
acceptable bandwidth intensive media streaming 
associate head parent nice property 
parent peer fails head children working helping reconnect children new parent quickly 
hand head cluster fails members cluster affected head involve transmitting content 
discuss policies failure recovery detail shortly 
control protocol maintain position connections multicast tree administrative organization node layer cluster periodically exchanges control messages layer children parent multicast tree 
non head peers cluster exchanged information sends just peer degree recipient cluster head sends information current delay server observed subset layer occurrence represents currently forwarding content fig 
peer layer needs send list head peers receiving content peer 
subset layer occurrence represents currently forwarding content foreign subordinate head subordinate associate head rules 
fig 
peer layer needs send list head associate head peer receiving content peer 
recipient parent sends information degree boolean flag true iff exists path multicast tree layer peer 
fig 
false true 
boolean flag true iff exists path multicast tree layer peer cluster size 
values peer updated information received children 
instances children send false peer set false set true receives true child peer 
theorem tells control overhead average member constant 
worst node communicate nodes acceptable information exchanged just soft state refreshes 
theorem worst case control overhead node amortized worst case overhead 
proof consider node highest layer belongs clusters layers having 
number children degree 
consequently worst case control overhead upper bounded 
worst case control overhead 
probability node highest layer amortized worst case overhead average node asymptotically increasing theorem proved 
client join departure multicast tree updated new client joins leaves 
new tree violate rules specified section ii 
propose join departure algorithms 
join algorithm new client submits request server 
administrative organization currently layer simply connects server 
join request redirected multicast tree downward finding proper peer join 
peer pursues steps receipt join request algorithm delay measured contact 
layer associate head 
add cluster 
new child 


select child min 
forward join request 
select child min 
forward join request goal procedure add layer cluster force get content associate head join algorithm stops layer associate head 
considers addable child peers want add layer cluster size avoid 
addable children chooses minimum keep delay server new peer small possible 
case addable child considers reachable children pursue delay minimization strategy 
peer algorithm exists reachable peer order receive join request earlier 
step contact peers degree 
tree height maximum degree number journal selected areas communications special issue advances service overlay networks nodes contact 
proves theorem true 
theorem join overhead terms number nodes contact 
proof theorem proved 
join procedure terminates step layer associate head tell members cluster 
follows control protocol discussed earlier 
new size joined cluster necessary 
cluster split newly created clusters sizes maintain structure administrative organization 
split algorithm section ii 
departure algorithm consider peer departs tree purposely accidentally due failure 
suppose highest layer layer 
result control protocol parent children peers layer aware departure 
basically tasks required recovery parent removes link children need new parent get content layer cluster selects new head head longer exists layer cluster needs new associate head associate head 
task trivial propose detail policies remaining tasks 
consider case belongs cluster 
associate head cluster required 
cluster head chooses subordinates new associate head reconnect current parent parent non head members 
peer new associate head experiencing best delay smallest 
heuristic choosing peer closest associate head little negative impact service quality currently perceived 
consider case 
foreign nate child head responsible finding new parent 
just selects layer non head minimum degree asks forward data furthermore head clusters layers new head 
handled easily 
random head subordinate layer 
replace new head clusters 
replaces position layer words associate head associate head gets link existing parent associate head gets link current associate head fig 
gives resulting multicast tree administrative organization peer fails 
original system fig 

peer layer selected replace position peer cluster peer belong 
example peer reconnects server surviving non head peer highest layer peer replaces peer layer peers reconnect peer follow rules 
example fig 
peer associate head fails 
peer replace peer peer ex child layer peer reconnects peer having minimum degree quick playback resumption 
keep service continuity peers reconnect peer layer connecting peer peer associate head place peer 
client departure requires peer layer plus peers layer plus peers layer reconnect burden server 
overhead failure recovery consequently stated follows theorem worst case number peers need reconnect due failure 
proof theorem proved 
cluster maintenance administrative organization requires size cluster highest layer cluster due client joins departures cluster may 
cluster split smaller clusters merged cluster form larger cluster size restriction satisfied 
section propose algorithms cluster split cluster 
cluster split suppose decide split layer cluster head associate head peers goal create new cluster move peers cluster 
basic idea split illustrated fig 

moving peers need find peers head associate head respectively 
members get content head appear super cluster get link cluster 
furthermore associate head get link parent details split algorithm include determining peers move head associate head making necessary enforce rules 
cases 
case case handled simply steps sort non increasing order endto delay 
suppose resulting list move peers cluster result cluster retains peers close associate head select head associate head cluster respectively 
addition peers children associate head promoted head associate head closer server improving delay poorest 


case boolean value true currently links layer associate head clearly rules 
follow steps journal selected areas communications special issue advances service overlay networks peer fails fig 

failure recovery original tree fig 
split head assoc general case head assoc split fig 

cluster split cluster split smaller clusters size layer partition sets condition satisfied minimized 
set remain cluster set moved cluster split peers link peers vice versa condition helps reduce number peer resulted split 
peer remove link associate head select random peer set new parent associate head 
inversely peer similar procedure takes place 
need head cluster head appear super cluster abandoning current children 
minimize number head chosen peer having smallest degree 
abandoned child reconnect random foreign head appearing choose peer having second smallest degree associate head cluster case case firstly follow steps case 
steps explained follows 
split server links probably foreign subordinates layer 
split server highest layer server longer link current children due rules 
abandoned child layer reconnect random foreign head appearing set abandoned child layer head split peer fails highest layer case assoc split head reconnect new associate head chosen peer having minimum degree 
enforce rules associate head get content foreign head 
choose layer foreign head 
split procedure highest layer illustrated fig 

happen super cluster due admitting similar split takes place 
case frequent split helpful anyway super cluster close 
split algorithm run locally head cluster split 
results sent peers need change connections 
number peers involved algorithm constant computational time get results major issue 
main overhead number peers need reconnect 
theorem tells overhead small 
theorem worst case split overhead 
proof computations cases similar compute worst case split case peers reconnect 
value equal number associate heads layer step requires peers reconnect 
step number children equal number foreign subordinates need reconnect 
furthermore peers need reconnect need 
algorithm case step requires reconnect 
total split procedure needs peers reconnect 
greater close theorem proved 
journal selected areas communications special issue advances service overlay networks cluster cluster carried top bottom administrative organization 
words layer accomplished layer cluster size case layer cluster merged layer takes place 
consider layer cluster having head associate head combine cluster layer smallest size 
criterion choose 
suppose cluster head associate head cases head layer case illustrated fig 
loss generality suppose head layer 
changes merge chosen head associate head new cluster respectively 
enforce rules members reconnect 
furthermore appear layer anymore abandoning layer current children 
overcome head layer child happens child selects non head currently minimum degree layer new parent child 
layer case need elect new associate head 
head simply selects having smallest degree associate head informs reconnect associate head 
second case illustrated fig 
head layer associate head layer select head associate head supposing higher degree select head vice versa 
loss generality assume head subsequent steps longer appears layer reconnect 
children simply redirected layer 
need associate head size larger associate head chosen head 
supposing associate head members reconnect 
necessary current parent happens needs new parent belong cluster layer new parent chosen layer non head smallest degree 
merge procedure runs centrally head assistance head number peers involves constant computational complexity small 
terms number worst case overhead resulted theorem 
theorem worst case merge overhead case handled similar minor modification 
proof case number peers required reconnect number peers plus number layer children 
peers need reconnect 
theorem proved 
performance enhancement network dynamics administrative organization multicast tree periodically reconfigured provide better quality service clients 
strategy follow dynamically balance service load peers alleviating network bottleneck 
instance peer busy serving children consider switching children non head busy 
service load balanced number children peer bandwidth capacity 
goal compute peer ratio degree bandwidth capacity attempt equalize ratio peers 
focus balancing service load peers layer cluster 
rules head cluster server layer link peer 
subordinates eligible transferring service load 
additionally associate head parent non head consider transferring service load non head non associate head member non head member suppose currently links foreign subordinates probably 
degree equals zero case associate head equals number 
follows steps transfer service load result violate rules algorithm 
defines bandwidth capacity peer 


select non head head max 
exists 
redirect 
update accordingly algorithm transfers children doing minimizes difference service load affects peers frequently activating algorithm cause peer result discontinuity client playback 
suggest peer run load balancing procedure degree larger value chosen appropriately follows 
consider layer cluster members excluding head associate head 
due rules balance best value feasible journal selected areas communications special issue advances service overlay networks xu yu yv layer xv children head layer xu yu yv layer xv children head layer fig 

cluster merge small cluster merged cluster larger cluster size non head head server fig 

direct zigzag non head members cluster receive content foreign heads include bandwidth capacity degree control information exchanged control protocol value computed easily 
choose iii 
alternative solution direct zigzag design zigzag approach 
early alternative rules non head members cluster receive content directly foreign head super cluster need role associate head 
call design direct zigzag call design previous section indirect zigzag non head members cluster get content indirectly foreign head associate head 
abbreviation refer schemes zigzag zigzag respectively 
fig 
illustrates example multicast tree resulted zigzag 
longest path server peer visit layer visit goes node 
exception applies highest layer server links subordinates 
multicast tree height number layers 
words zigzag results shorter multicast tree zigzag 
intuitively see peer degree zigzag higher zigzag handle peer bottleneck 
table gives theoretical comparison alternatives shows significant improvement zigzag 
algorithms zigzag proofs performance analyses 
suggestion zigzag streaming systems due scalability robustness efficiency 
live streaming system consisting high capable clients peer bottleneck control overhead may severe 
case zigzag preferable scheme provide high level content liveness 
iv 
simulation study section provided worst case analyses zigzag approach 
investigate performance various scenarios carried simulation study 
evaluating performance metrics mentioned previous sections peer degree join failure overhead split merge overhead control overhead considered peer stretch link stress defined 
peer stretch ratio length data path server peer multicast tree length shortest path underlying network 
pure unicast approach optimal peer stretch 
stress link number times packet goes link 
ip multicast tree optimal link stress packet goes link 
application level multicast scheme small stretch stress keep delay short network bandwidth efficiently utilized 
gt itm generator create node transit stub graph underlying network topology :10.1.1.22.6538
server location fixed stub domain node 
investigated system clients located randomly stub domain nodes 
client population accounts entire network 
set value cluster peers 
studied scenarios investigating failure free system running zigzag second investigating system running zigzag allowing failures third comparing systems running zigzag running nice :10.1.1.16.8178
zigzag alternative provided better performance values zigzag alternative backs theoretical comparison shown table due length restrictions report results zigzag scheme sections invite reader zigzag scheme results 
scenario failure scenario clients joined system collected statistics control overhead node degree peer journal selected areas communications special issue advances service overlay networks join overhead table zigzag versus zigzag worst case overhead analyses zigzag alternatives join failure degree merge split control direct indirect zigzag avg max fig 

joins join split overhead join id stretch link stress 
estimated join overhead split overhead accumulated joins 
overhead join measured number peers new client contact added multicast tree 
fig 
shows average new client needs contact clients 
worst case new client contact clients client population 
join overhead increases slowly clients join 
manner monotonic fact overhead join significant split takes place rapidly reduced 
understandable split cluster helps reduce node degree new client needs contact fewer peers 
see correlation join procedure split procedure fig 
fig 
significant increase split overhead corresponds rapid decrease join overhead 
terms split overhead wanted study worst scenario opted run split detecting cluster 
illustrated fig 
small split overhead incurred joins clients 
totally splits worst case split requires 
time split requires peers reconnect 
accounts client population 
fig 
shows degrees peers 
thick line bottom represents degrees leaves degree 
theoretical analysis section ii shows worst case degree simulation peers forward content peers 
zigzag handles peer bottleneck efficiently furthermore distributes service load peers fairly stdev 
terms control overhead shown fig 
peers exchange control split overhead zigzag avg max splits split id states 
dense area represents peers layers close layer sparse area represents peers higher layers 
peers high layers heavy control overhead communicate peers client population 
considered lightweight fact exchanged control information small size 
study link stress peer stretch results fig 

zigzag low stretch clients link stress underlying links 
especially values quite fairly distributed see dense areas figures 
recall client population study accounts entire network pair nodes link probability 
results got promising 
scenario failure possible scenario started system consisting clients built scenario study 
number peers fail sequentially evaluated overhead recovery overhead process 
fig 
shows results recovery overhead failures occur 
see failures affect system happen layer peers illustrated thick line bottom graph 
failures happening peers overhead recover small client population 
furthermore overhead recover failure really depend number clients system 
theoretical analysis section ii recovery overhead bounded regardless client population size 
journal selected areas communications special issue advances service overlay networks degree zigzag max stdev client id fig 

clients node degree control overhead stretch control overhead zigzag avg max stdev zigzag avg max stdev client id fig 

clients link stress peer stretch theoretical upper bound overhead worst case overhead simulation study turns half 
terms merge overhead result exhibited fig 

totally calls cluster requiring peers average reconnect 
worst case peers need reconnect accounts client population 
study consistent theoretical analysis section ii merge overhead small regardless client population size 
interestingly worst merge overhead simulation lot smaller theoretical worst case overhead implied theorem 
scenario zigzag versus nice compared performances zigzag nice 
nice proposed efficient technique streaming data :10.1.1.16.8178
nice organizes peers hierarchy bounded size clusters approach 
nice zigzag fundamentally different due multicast tree construction maintenance strategies 
example nice uses head cluster forward content members associate head 
link stress client id zigzag avg max stdev max 
degree link id failure probability fig 

zigzag vs nice maximum node degree zigzag nice worked scenario 
system initially contained server stabilized clients join sequentially 
ran admission control algorithm loop runs run letting client fail probability new client join probability admission control algorithm stopped collected statistics trees generated zigzag nice respectively 
fig 
exhibits advantage zigzag nice terms peer bottleneck 
zigzag maximum peer degree half maximum degree nice 
simulation journal selected areas communications special issue advances service overlay networks failure overhead zigzag avg max stdev failure id fig 

failure merge overhead peers fail result consistent theoretical analyses 
shows peer degree nice theoretical analyses shown peer degree zigzag :10.1.1.16.8178:10.1.1.16.8178
fig 
fig 
show average case worstcase results respectively metrics including control overhead join overhead failure overhead link stress 
approaches provide close average case results zigzag superior nice deals worst case scenarios better 
maximum control overhead technique nice fig 
join overhead fewer nice average worst cases fig 
fig 

recovery overhead measured failure period run loop 
enforcing rules recovery algorithm efficient nice 
failure happens peer highest layer nice requires peers reconnect 
recovery overhead scheme theoretical analyses zigzag approach requires constant number recovery phase regardless peers system 
consequently see fig 
zigzag clearly prevails nice terms maximum failure overhead 
note average failure overhead values schemes smaller layer peers failure require zero reconnection 
average link stress zigzag close nice worst case link stress slightly better shown fig 

way accident rooted degree bound scheme 
worst case degree nice bounded zigzag 
nice identical packets sent underlying link near heavy loaded peers 
study curves quite close close system runs larger underlying network clients lot larger expect link stress technique sharply better nice 
merge overhead zigzag avg max stdev merge id related techniques proposed address problem streaming media internet 
introduced simple scheme video demand services proposal support streaming applications 
mentions stability system network dynamics analyzes protocol overheads involved 
proposed builds single distribution tree peers 
new receiver joins traversing tree nodes downward source finding bandwidth 
get source involved failure occurs vulnerable disruptions due severe bottleneck source 
additionally orphaned peers reconnect join algorithm resulting long blocking time service resume 
coopnet employs multi description coding method media content 
method media signal encoded separate streams descriptions subset decodable 
coopnet builds multiple distribution trees spanning source receivers tree transmitting separate description media signal 
receiver receive descriptions best case 
peer failure causes descendant peers lose descriptions 
orphaned able continue service burdening source 
done quality reduction 
furthermore coopnet puts heavy control overhead source source maintain full knowledge distribution trees 
narada focuses multi sender multi receiver streaming applications maintains mesh peers establishes tree sender wants transmit content set receivers 
narada emphasizes small networks 
extension large scale networks proposed layer hierarchical topology 
better reduce cluster size reducing control overhead peer scheme nice focuses large networks multi layer hierarchical clustering idea :10.1.1.16.8178
nice uses head forward content members incurring high bottleneck 
extension journal selected areas communications special issue advances service overlay networks performance metrics average case failure control overhead join overhead failure overhead link stress probability zigzag nice zigzag nice zigzag nice zigzag nice fig 

zigzag vs nice average case max 
control overhead max 
failure overhead fig 

zigzag vs nice worst case failure probability zigzag nice failure probability zigzag nice done reduce bottleneck constant tree height 
approach worse nice terms metrics worstcase delay keeping bottleneck bounded constant 
furthermore failure recovery overhead approach upper bounded constant nice requires 
significant improvement bandwidth intensive applications media streaming 
takes account heterogeneity peers bandwidth capacity 
due heterogeneity peer may receive content multiple supplying peers 
investigates interesting problem deciding media data segments supplying peers need send receiving peer 
proposed optimal solution assignment techniques amplify total system max 
join overhead max 
link stress failure probability zigzag nice failure probability zigzag nice streaming capacity 
different problem theirs motivates extend scheme consider case peer may receive content collectively peer 
vi 
summary discussed problem streaming live media large network 
focused single source aimed optimizing worst case values important performance metrics 
proposed solution zigzag uses novel multicast tree construction maintenance approach hierarchy bounded size clusters 
key zigzag design rules 
algorithms developed achieve desirable properties high liveness high delay media server journal selected areas communications special issue advances service overlay networks client highly due local queuing processing intermediate peers 
local delay intermediate peer affected bandwidth contention 
keep server client delay small multicast tree height logarithm client population client forwards content constant number peers 
low control overhead client periodically exchanges soft state information parent children 
cluster bounded size client degree bounded constant control overhead client small 
average overhead constant regardless client population 
efficient join failure recovery join accomplished asking existing clients client population 
especially failure recovered quickly fewer constant number effect server 
low maintenance overhead enforce rules administrative organization multicast tree maintenance procedures merge split performance refinement invoked periodically low overhead 
fewer constant number clients need relocate procedure 
provided theoretical proofs simulation studies verify merits zigzag 
compared zigzag nice finding zigzag promising terms performance metrics :10.1.1.16.8178
stefan saroiu krishna gummadi steven gribble measurement study peer peer file sharing systems acm spie multimedia computing networking san jose ca usa january 
stoica morris karger chord scalable peer peer lookup protocol internet applications acm sigcomm san diego ca august pp :10.1.1.16.8178

sylvia ratnasamy paul francis mark handley richard karp scott shenker scalable content addressable network acm sigcomm san diego ca august pp 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems ifip acm international conference distributed systems platforms middleware heidelberg germany november pp 

chawathe sylvia ratnasamy lee breslau nick lanham scott shenker making gnutella systems scalable acm sigcomm karlsruhe germany 
tang xu dwarkadas peer peer information retrieval self organizing semantic overlay networks acm sigcomm karlsruhe germany 
yang hua chu sanjay rao hui zhang case system multicast acm sigmetrics pp 

banerjee bobby bhattacharjee scalable application layer multicast acm sigcomm pittsburgh pa pp 

deshpande bawa garcia molina streaming live media peer peer network cs stanford 
submitted publication 
padmanabhan wang chou sripanidkulchai distributing streaming media content cooperative networking acm ieee nossdav miami fl usa may pp 

duc tran hua tai scalable media streaming large peer peer networks acm multimedia conference juan les pins france december pp 

duc tran hua tai zigzag efficient peerto peer scheme media streaming cd rom proc 
ieee infocom san francisco ca march april 
ellen zegura ken calvert bhattacharjee model internetwork proceedings ieee infocom san francisco ca pp 

sheu hua chaining generalized batching technique video demand proc 
ieee int conf 
multimedia computing system ottawa ontario canada june pp 

yang hua chu sanjay rao seshan hui zhang enabling conferencing applications internet overlay multicast architecture acm sigcomm san diego ca august pp 

jain mahajan wetherall borriello scalable selforganizing overlays tech 
rep uw cse university washington 
xu mohamed susanne bharat bhargava peer peer media streaming ieee conference distributed computing systems july pp 

duc tran computer science doctoral student university central florida ucf fall 
got degree computer science vietnam national university 
research partially funded national science foundation includes refereed papers mainly areas multimedia networking multimedia databases systems 
received order pegasus ucf ieee outstanding graduate student ieee orlando 
tran member ieee acm reviewer numerous international conferences periodicals including ieee trans 
knowledge data engineering ieee trans 
multimedia journal multimedia tools applications 
going join university dayton assistant professor computer science august 
hua received degree computer science ph degrees electrical engineering university illinois urbana champaign respectively 
working ibm joined university central florida 
currently professor school electrical engineering computer science dr hua published articles including recognized best papers top international conferences 
served vice chair associate chair demo chair program committee member numerous acm ieee conferences 
currently editorial boards ieee transactions knowledge data engineering journal multimedia tools applications 
dr hua senior member ieee 
tai received degree electrical engineering university oklahoma 
computer science doctoral student university central florida working data systems laboratory 
main research interests image retrieval indexing multimedia networking clustering broadcasting techniques mobile ad hoc networks 
student member acm 
