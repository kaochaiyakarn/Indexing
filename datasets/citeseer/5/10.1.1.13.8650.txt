framework clustering evolving data streams aggarwal watson 
ctr 
clustering problem difficult problem data stream domain 
large volumes data arriving stream renders traditional algorithms inefficient 
years pass clustering algorithms developed data stream problem 
methods address scalability issues clustering problem generally blind evolution data address issues quality clusters poor data evolves considerably time 
data stream clustering algorithm requires greater functionality discovering exploring clusters different portions stream 
widely practice viewing data stream clustering algorithms class clustering algorithms useful application point view 
example simple pass clustering algorithm entire data stream years dominated outdated history stream 
exploration stream different time windows provide users deeper understanding evolving behavior clusters 
time possible simultaneously perform dynamic clustering possible time horizons data stream moderately large volume 
discusses fundamentally different philosophy data stream clustering guided application centered requirements 
idea divide clustering process online component periodically stores detailed summary statistics permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference berlin germany jiawei han wang uiuc philip yu watson 
ctr 
offline component uses summary statistics 
offline component utilized analyst wide variety inputs time horizon number clusters order provide quick understanding broad clusters data stream 
problems efficient choice storage statistical data fast data stream turns quite tricky 
purpose concepts pyramidal time frame conjunction approach 
performance experiments number real synthetic data sets illustrate effectiveness efficiency insights provided approach 
years advances hardware technology allowed automatically record transactions everyday life rapid rate 
processes lead large amounts data grow unlimited rate 
data processes referred data streams 
data stream problem extensively researched years large number relevant applications :10.1.1.119.3124:10.1.1.32.1927
study clustering problem data stream applications 
clustering problem defined follows set data points wish partition groups similar objects 
similarity objects typically defined distance measure objective function 
clustering problem widely researched database data mining statistics communities wide range applications :10.1.1.157.392:10.1.1.13.4395
clustering problem studied context data stream environment :10.1.1.32.1927
previous algorithms clustering data streams discussed assume clusters computed entire data stream 
methods simply view data stream clustering problem variant pass clustering algorithms 
task may useful applications clustering problem needs defined carefully context data stream 
data stream viewed infinite process consisting data continuously evolves time 
result underlying clusters may change con time 
nature clusters may vary moment computed time horizon measured 
example user may wish examine clusters occurring month year decade 
clusters may considerably different 
data stream clustering algorithm provide flexibility compute clusters user defined time periods interactive fashion 
note stream data naturally imposes pass constraint design algorithms difficult provide flexibility computing clusters different kinds time horizons conventional algorithms 
example direct extension stream means algorithm case require simultaneous maintenance intermediate results clustering algorithms possible time horizons 
computational burden increases progression data stream rapidly bottleneck online implementation 
furthermore cases analyst may wish determine clusters previous moment time compare current clusters 
requires greater book keeping rapidly unwieldy fast data streams 
data stream revisited course computation clustering algorithm needs maintain substantial amount information important details lost 
example algorithm implemented continuous version means algorithm continues maintain number cluster centers change merge necessary execution algorithm 
approach especially risky characteristics stream evolve time 
means approach highly sensitive order arrival data points 
example cluster centers merged way split clusters required evolution stream stage 
natural design stream clustering separate process online component offline macro clustering component 
online micro clustering component requires efficient process storage appropriate summary statistics fast data stream 
offline component uses summary statistics conjunction user input order provide user quick understanding clusters required 
offline component requires summary statistics input turns efficient practice 
phased approach provides user flexibility explore nature evolution clusters different time periods 
provides considerable insights users real applications 
organized follows 
section discuss basic concepts underlying stream clustering framework 
section discuss micro clusters maintained stream generation process 
section discuss micro clusters may offline macro clustering component create clusters different spatial temporal granularity 
algorithm clustering evolving data streams determine nature cluster evolution 
process described section 
section reports performance study real synthetic data sets 
section discusses implication method concludes study 
stream clustering framework section discuss framework stream clustering approach 
refer clustream framework 
separation stream clustering approach online offline components raises important questions nature summary information stored efficiently continuous data stream 
summary statistics provide sufficient temporal spatial information offline clustering process prone efficient online update process 
moments time summary information stored away disk 
effective trade achieved storage requirements periodic process ability cluster specific time horizon desired level approximation 
periodic summary statistics provide clustering evolution insights userspecified time horizons 
order address issues utilize concepts useful efficient data collection fast stream micro clusters maintain statistical information data locality terms microclusters 
micro clusters defined temporal extension cluster feature vector 
additivity property micro clusters natural choice data stream problem 
pyramidal time frame micro clusters stored snapshots time follow pyramidal pattern 
pattern provides effective tradeoff storage requirements ability recall summary statistics different time horizons 
summary information micro clusters offline component dependent wide variety user inputs time horizon granularity clustering 
discuss number notations definitions order introduce concepts 
assumed data stream consists set multi dimensional records 
xk 
arriving time stamps 
tk 
xi multidimensional record containing dimensions denoted xi 
xd 
defining concept microclusters pyramidal time frame precisely 
definition micro cluster set ddimensional points xi 
xin time stamps ti 
tin defined tuple cf cf cf cf cf cf correspond vector entries 
definition entries follows dimension sum squares data values maintained cf cf contains values 
th entry cf equal dimension sum data values maintained cf cf contains values 
th entry cf equal xp ij sum squares time stamps ti 
tin maintained cf sum time stamps ti 
tin maintained cf number data points maintained note definition micro clusters temporal extension cluster feature vector 
refer micro cluster set points cf 
summary information expressed additive way different data points 
natural choice data stream algorithms 
moment time statistical information dominant micro clusters data stream maintained algorithm 
shall see stage nature maintenance process ensures large number micro clusters efficiently maintained compared method discussed 
high granularity online updating process ensures able provide clusters better quality evolving data stream 
micro clusters stored particular moments stream referred snapshots 
offline macro clustering algorithm discussed stage finer level microclusters order create higher level clusters specific time horizons 
consider case current clock time tc user wishes find clusters stream history length macro clustering algorithm discussed subtractive properties micro clusters stored snapshots tc tc order find higher level clusters history time horizon length subtractive property important characteristic micro clustering representation feasible generate higher level clusters different time horizons 
course possible store snapshots moment time important choose particular instants time micro clusters stored 
aim choosing particular instants ensure clusters user specified time horizon tc tc approximated 
order achieve introduce concept pyramidal time frame 
technique snapshots stored differing levels granularity property discussed greater detail section 
depending recency 
snapshots classified different orders vary log clock time elapsed stream 
order particular class snapshots defines level granularity time snapshots maintained 
snapshots different ordering maintained follows snapshots th order occur time intervals integer 
specifically snapshot th order taken moment time clock value stream exactly divisible moment time snapshots order stored 
note definition allows considerable redundancy storage snapshots 
example clock time divisible 
state micro clusters clock time simultaneously corresponds order order order order snapshots 
implementation point view snapshot needs maintained 
observations data stream maximum order snapshot stored time units stream mining process log 
data stream maximum number snapshots maintained time units stream mining process log 
user specified time window stored snapshot units current time 
results quite easy verify needs proven formally 
lemma user specified time window tc current time ts time stored snapshot order just time tc tc ts proof smallest integer know know snapshots order snapshot order exist tc ts snapshot order occurs just tc tc ts tc ts case possible find snapshot factor user specified time window 
furthermore total number snapshots need maintained relatively modest 
example data stream running years clock time granularity second total number snapshots need maintained loss generality assume unit clock time smallest level granularity 
th order snapshots measure time intervals smallest level granularity 
purpose extreme example illustrate efficiency pyramidal storage process demanding case 
real applications data stream shorter 
order clock times snapshots snapshots table example snapshots stored log 
quite modest storage requirement 
possible improve accuracy time horizon approximation modest additional cost 
order achieve save snapshots order 
case storage requirement technique corresponds log snapshots 
hand accuracy time horizon approximation increases substantially 
case time horizon approximated factor 
summarize result follows lemma user specified time horizon tc current time ts time stored snapshot order just time tc tc ts proof similar previous case 
larger values time horizon approximated closely desired 
consider example discussed data stream running years 
choosing possible approximate time horizon total log snapshots required years 
historical snapshots stored disk current snapshot needs maintained main memory requirement quite feasible practical point view 
possible specify pyramidal time window accordance user preferences corresponding particular moments time calendar years months days 
storage requirements horizon estimation possibilities scheme different algorithmic descriptions directly applicable 
order clarify way snapshots stored consider case stream running starting clock time 
snapshots order stored 
clock time snapshots clock times illustrated table stored 
note large number snapshots common different orders 
implementation point view states micro clusters times stored 
easy see clock times distance successive snapshots better granularity 
note storage requirements estimated section take redundancy account 
requirements far worst case requirements 
important question find systematic rule eliminate redundancy snapshots different times 
note example illustrated table snapshots order occurring odd moments need retained non redundant 
snapshots retained discarded snapshots order occur times divisible non redundant 
general snapshots order divisible non redundant 
redundant generated snapshot marked crossbar number table 
snapshot generation rule applies general case different 
note new snapshot particular order stored oldest snapshot order needs deleted 
online micro cluster maintenance micro clustering phase online statistical data collection portion algorithm 
process dependent user input time horizon required granularity clustering process 
aim maintain statistics sufficiently high level temporal spatial granularity effectively offline components horizon specific macro clustering evolution analysis 
assumed total micro clusters maintained moment algorithm 
denote micro clusters 
mq 
associated micro cluster create unique id created 
micro clusters merged evident details maintenance algorithm list ids created order identify constituent micro clusters 
value determined amount main memory available order store micro clusters 
typical values significantly larger natural number clusters data significantly smaller number data points arriving long period time massive data stream 
micro clusters represent current snapshot clusters change course stream new points arrive 
status stored away disk clock time divisible integer time micro clusters order stored time past remote units deleted algorithm 
need create initial micro clusters 
done offline process data stream computation process 
data stream store points disk standard means clustering algorithm order create initial micro clusters 
value chosen large permitted computational complexity means algorithm creating clusters 
initial micro clusters established online process updating microclusters initiated 
new data point xik arrives micro clusters updated order reflect changes 
data point needs absorbed micro cluster needs put cluster 
preference absorb data point currently existing micro cluster 
find distance data point micro cluster centroids 
mq 
denote distance value data point xik centroid micro cluster mj dist mj xik 
centroid micro cluster available cluster feature vector value computed relatively easily 
find closest cluster mp data point xik note cases point xik naturally belong cluster mp 
cases follows data point xik corresponds outlier 
data point xik corresponds new cluster evolution data stream 
cases distinguished data points arrive data point xik needs assigned new micro cluster unique id decide completely new cluster created 
order decision cluster feature vector mp decide data point falls maximum boundary micro cluster mp 
data point xik added micro cluster mp cf additivity property 
maximum boundary micro cluster mp defined factor rms deviation data points mp centroid 
define maximal boundary factor 
note rms deviation defined cluster point 
cluster previous point maximum boundary defined heuristic way 
specifically choose distance closest cluster 
data point lie maximum boundary nearest micro cluster new micro cluster created containing data point xik newly created micro cluster assigned new id identify uniquely stage data steam process 
order create new micro cluster number clusters reduced order create memory space 
achieved deleting old cluster joining old clusters 
maintenance algorithm determines safe delete current micro clusters outliers 
merge micro clusters initiated 
step identify old micro clusters possibly outliers safely deleted algorithm 
tempting simply pick micro cluster fewest number points micro cluster deleted may lead misleading results 
cases micro cluster correspond point considerable cluster presence past history stream may longer active cluster stream activity 
micro cluster considered outlier current point view 
ideal goal estimate average timestamp arrivals micro cluster delete micro cluster timestamp 
estimation achieved simply storing points micro cluster increases memory requirements microcluster factor requirement reduces number micro clusters stored available memory reduces effectiveness algorithm 
find way approximate average timestamp data points cluster achieved data timestamps stored micro cluster note time stamp data allows calculate mean standard deviation arrival times points micro cluster values denoted respectively 
find time arrival th percentile points assuming time stamps normally distributed 
time stamp approximate value recency 
shall call value relevance stamp cluster relevance stamp micro cluster user defined threshold eliminated new micro cluster created unique id corresponding newly arrived data point xik cases micro clusters readily eliminated 
happens relevance stamps sufficiently lie userdefined threshold 
case microclusters need merged 
merge microclusters closest 
new micro cluster longer corresponds id idlist created union ids individual micro clusters 
micro cluster result merging operations identified terms individual micro clusters merged 
process updating executed arrival data point additional process executed clock time divisible integer time store away current set micro clusters possibly disk id list indexed time storage 
delete snapshot order snapshots order micro cluster contains fewer points simply find average time stamp points cluster 
mean equal cf standard deviation equal cf cf stored disk clock time snapshot divisible macro cluster creation section discusses offline components user flexibility explore stream clusters different horizons 
micro clusters generated algorithm serve intermediate statistical representation maintained efficient way data stream large volume 
hand macro clustering process voluminous data stream compactly stored summary statistics micro clusters 
constrained pass requirements 
assumed input algorithm user supplies time horizon number higher level clusters wishes determine 
note choice time horizon determines amount history order create higher level clusters 
choice number clusters determines detailed clusters rough clusters mined 
note set micro clusters stage algorithm entire history stream processing stream generation process 
user specifies particular time horizon length find clusters need find micro clusters specific time horizon 
achieve goal 
purpose find additive property cluster feature vector useful 
additive property follows property sets points 
cluster feature vector cf sum cf cf note property temporal version cluster feature vector directly extends discussed 
subtractive property true exactly reason 
property sets points 
cluster feature vector cf cf cf subtractive property helps considerably determination micro clusters pre specified time horizon 
snapshots pre defined intervals possible determine approximate micro clusters pre specified time horizon 
note micro cluster maintenance algorithm creates unique id new micro cluster created 
micro clusters merged micro clustering algorithm creates idlist list original ids micro cluster 
consider situation clock time tc user wishes find clusters past time horizon case find stored snapshot occurs just time tc 
pyramidal time frame ensures possible find snapshot tc pre specified tolerance user specified time horizon 
denote set micro clusters time tc tc set micro clusters time tc tc 
micro cluster current set tc find list ids micro cluster 
list ids find corresponding micro clusters tc subtract cf vectors corresponding micro clusters tc 
ensures micro clusters created user specified time horizon dominate results clustering process 
denote final set micro clusters created subtraction process tc 
micro clusters subjected higher level clustering process create smaller number micro clusters easily understood user 
clusters determined modification means algorithm 
technique microclusters tc treated pseudo points re clustered order determine higher level clusters 
means algorithm picks points random seeds iteratively assigns database points seeds order create new partitioning clusters 
iteration old set seeds replaced centroid partition 
micro clusters pseudo points means algorithm needs modified ways initialization stage seeds longer picked randomly sampled probability proportional number points microcluster 
corresponding seed centroid micro cluster 
partitioning stage distance seed pseudo point micro cluster equal distance seed centroid corresponding micro cluster 
seed adjustment stage new seed partition defined weighted centroid micro clusters partition 
important note execution macro clustering process needs carefully chosen snapshots pyramidal time window micro clustering process 
compactness input allows user considerable querying stored micro clusters different levels granularity time horizons 
evolution analysis clusters interesting changes recorded analyst evolving data stream effective number business applications 
context clustering problem evolution analysis significant importance 
example analyst may wish know clusters changed quarter year decade 
purpose user needs input parameters algorithm clock times clusters need compared 
assumed 
practical scenarios current clock time 
time horizon clusters computed 
means clusters created data arriving compared created data arriving 
important issue deciding changes clusters user results appealing intuitive point view 
changes occurring clusters terms broad objectives new clusters data time time 
original clusters lost changes behavior stream 
original clusters time shifted position nature changes data 
note micro cluster maintenance algorithm maintains useful tracking cluster information 
step compute discussed previous section 
divide micro clusters categories micro clusters ids corresponding idlist 
new micro clusters created time interval 
denote set micro clusters added 
micro clusters corresponding ids 
micro clusters deleted interval 
denote set micro clusters deleted 
micro clusters ids corresponding idlist corresponding micro clusters 
micro clusters partially created time modified 
denote set micro clusters retained 
macro cluster creation algorithm separately applied set microclusters create new set higher level clusters 
macro clusters created added deleted clear significance terms clusters added removed data stream 
micro clusters retained correspond portions stream changed significantly period 
large fraction data belongs retained sign stream quite stable time period 
empirical results thorough experimental study conducted evaluation clustream algorithm accuracy reliability efficiency scalability applicability 
performance results section 
study validates claims clustream derives higher quality clusters traditional stream clustering algorithms especially cluster distribution contains dramatic changes 
answer kinds queries micro cluster maintenance macro cluster creation change analysis evolved data streams pyramidal time frame micro clustering concepts adopted assures clustream better clustering accuracy maintaining high efficiency clustream scalability terms stream size dimensionality number clusters 
test environment data sets experiments conducted pc intel pentium iii processor mb memory runs windows xp professional operating system 
testing accuracy efficiency clustream algorithm compare clustream stream algorithm best algorithm reported far clustering data streams :10.1.1.32.1927
clustream implemented description stream means done strictly shows better accuracy birch 
comparison fair clustream stream means amount memory 
specifically stream incoming speed amount memory store intermediate clusters called micro clusters clustream amount memory store final clusters called macro clusters clustream 
synthetic datasets generated controlling number data points dimensionality number clusters different distribution evolution characteristics evaluate scalability experiments 
synthetic datasets usually different real ones mainly real datasets test accuracy cluster evolution outlier detection 
real datasets 
need find real datasets evolve significantly time order test effectiveness clustream 
candidate testing kdd cup network intrusion detection stream data set earlier evaluate stream accuracy respect birch 
data set corresponds important problem automatic real time detection cyber attacks 
challenging problem dynamic stream clustering right 
offline clustering algorithms detect intrusions real time 
proposed stream clustering algorithms birch stream effective clusters reported algorithms generated entire history data stream current cases may evolved significantly 
network intrusion detection dataset consists series tcp connection records weeks lan network traffic managed mit lincoln labs 
record correspond normal connection intrusion attack 
attacks fall main categories dos denial service unauthorized access remote machine unauthorized access local superuser privileges probing surveillance probing 
result data contains total clusters including class normal connections 
attack types classified types buffer overflow guess passwd neptune smurf spy 
evident specific attack type treated sub cluster 
connections dataset normal occasionally burst attacks certain times 
connection record dataset contains attributes duration connection number data bytes transmitted source destination vice versa percentile connections syn errors number root accesses continuous attributes clustering outlier point removed 
second testing rapidly evolving network intrusion data stream test method relatively stable streams 
previously reported stream clustering algorithms entire history stream data believe perform effectively datasets relatively stable distribution time 
example data set kdd cup charitable donation data set 
show datasets clustream consistently outperform stream algorithm 
kdd cup charitable donation data set evaluating scan clustering algorithms :10.1.1.101.2607
dataset contains records information people charitable donations response direct mailing requests clustering group donors showing similar donation behavior 
fields extracted total fields record 
data set converted data stream data input order order streaming assuming flow uniform speed 
synthetic datasets 
test scalability clustream generate synthetic datasets varying base size points number clusters dimensionality range 
know true cluster distribution priori compare clusters true clusters 
data points synthetic dataset follow series gaussian distributions 
order reflect evolution stream data time change mean variance current gaussian distribution points synthetic data generation 
quality clustering real data sets measured sum square distance ssq de average ssq clustream stream stream time units quality comparison network intrusion dataset horizon stream speed average ssq clustream stream stream time units quality comparison network intrusion dataset horizon stream speed fined follows 
assume total nh points past horizon current time tc 
point pi horizon find centroid cpi closest macro cluster compute pi cpi distance pi cpi ssq time tc horizon denoted ssq tc equal sum pi cpi nh points previous horizon mentioned algorithm parameters set 
clustering evaluation novel feature clustream create set macro clusters user specified horizon time demand 
furthermore expect clustream effective current algorithms clustering rapidly evolving data streams 
show effectiveness high quality clustream detecting network intrusions 
compare clustering quality clustream stream different horizons different times network intrusion dataset 
average ssq clustream stream stream time units quality comparison charitable donation dataset horizon stream speed average ssq clustream stream stream time units quality comparison charitable donation dataset horizon stream speed number points processed second elapsed time seconds clustream stream stream processing rate charitable donation dataset stream speed number points processed second elapsed time seconds clustream stream stream processing rate network intrusion dataset stream speed runtime seconds number dimensions scalability data dimensionality stream speed runtime seconds number clusters scalability number clusters stream speed algorithm determine clusters 
experiments dataset shown clustream substantially higher quality stream 
figures show results stream speed means stream flow speed points time unit 
note axis drawn logarithmic scale improvements correspond orders magnitude 
run algorithm times compute average 
know clustream better stream orders magnitude 
example time average ssq clustream orders magnitude smaller stream 
larger horizon shows clustream get higher clustering quality stream 
average ssq values different times consistently continue order magnitude smaller stream 
example time clustream average ssq orders magnitude smaller stream 
surprisingly high clustering quality clustream benefits design 
hand pyramidal time frame enables clustream approximate time horizon closely desired 
hand stream clustering algorithm entire history data stream 
furthermore large number micro clusters maintain sufficient amount summary information order contribute high accuracy 
addition experiments demonstrated clustream reliable stream algorithm 
cases matter times run clustream returns similar results 
interestingly fine granularity micro cluster maintenance algorithm helps clustream detecting real attacks 
example time connections belong neptune attack type horizon 
micro cluster maintenance algorithm absorbs data points micro cluster 
result clustream successfully cluster points macro cluster 
means detect distinct cluster corresponding network attack correctly 
hand stream algorithm mixes neptune attack connections normal connections attacks 
similarly clustream find cluster neptune attack type underlying data set time clusters neptune smurf time cluster smurf attack type time 
clusters correspond true occurrences important changes stream behavior intuitively appealing point view user 
examine performance stream clustering charitable donation dataset 
charitable donation dataset evolve time stream able cluster data set fairly 
figures show comparison results clustream stream 
results show clustream outperforms stream case indicates clustream effective evolving stable streams 
scalability results key success clustering framework high scalability micro clustering algorithm 
process exposed potentially large volume incoming data needs implemented efficient online fashion 
hand offline macro clustering part process required relatively negligible amount time 
compact micro cluster representation input 
time consuming frequent operation micro cluster maintenance finding closest micro cluster newly arrived data point 
clear complexity operation increases linearly number micro clusters 
evident number micro clusters maintained sufficiently larger number input clusters data order obtain high quality clustering 
number input clusters known priori instructive examine scalability behavior number micro clusters fixed constant large factor number input clusters 
experiments section fix number micro clusters times number input clusters 
tested efficiency clustream micro cluster maintenance algorithm respect stream real data sets 
figures show stream processing rate number points processed second progression data stream 
clustream requires time compute initial set micro clusters rate lower stream 
steady state reached clustream faster stream spite fact needs store snapshots disk periodically 
stream takes iterations means clustering converge clustream just needs judge set points absorbed existing micro clusters insert appropriately 
observation clustream maintains times higher granularity clustering information compared stream processing rate higher 
scalability behavior clustream algorithm data dimensionality number natural clusters 
scalability results report total processing time micro clustering process entire data stream 
series data sets generated varying dimensionality fixing number points input clusters 
data set series indicates contains points clusters 
notational convention second data set series third 
shows experimental results see clustream linear scalability average ssq network intrusion charitable donation micro ratio number micro clusters number macro clusters accuracy impact micro clusters data dimensionality 
example dataset series dimensionality increases running time increases times seconds seconds 
series datasets generated test scalability number clusters varying number input clusters fixing stream size dimensionality 
example data set series indicates contains points dimensions 
convention data sets 
demonstrates clustream linear scalability number input clusters 
sensitivity analysis section indicated number microclusters larger number natural clusters order obtain clustering quality 
large number micro clusters inefficient terms running time storage 
define micro ratio number micro clusters divided number natural clusters 
desirable high quality clustering reached reasonably small micro ratio 
determine typical micro ratios clustream algorithm section 
fix stream speed points time unit horizon time units 
real datasets test clustering quality varying number micro clusters 
dataset determine macro clusters corresponding time horizon measure clustering quality sum square distance ssq 
shows experimental results related accuracy impact micro ratio fix tc charitable donation dataset network intrusion dataset 
see number micro clusters natural clusters clustering quality quite poor 
small number micro clusters defeats purpose micro cluster approach 
micro ratio increases average ssq reduces 
average ssq real dataset stable micro ratio 
indicates achieve high quality clustering micro ratio need large compared natural clusters data 
number microclusters limited available memory result brings news real applications modest amount memory sufficient micro clustering process 
factor net 
int 
cha 
don 
table exception percent vs max 
boundary factor important parameter may significantly impact clustering quality maximal boundary micro cluster 
discussed earlier defined factor rms deviation data points corresponding cluster centroid 
value chosen small successfully detect points representing new clusters outliers 
time generate unpromising new micro clusters outliers 
varying factor ran clustream algorithm real datasets recorded exception points fall outside maximal boundary closest micro cluster 
table shows percentage total number data points real dataset judged belonging exception points different values factor table shows factor exception points 
typically choice resulted exception percentile reduce increasing 
note distances data points centroid followed gaussian distribution value results data points corresponding cluster boundary 
value factor set experiments 
evolution analysis experiments show clustream facilitates cluster evolution analysis 
network intrusion dataset example show analysis performed 
experiments assume network connection speed connections time unit 
comparing data distribution clustream micro clusters points added micro cluster point deleted micro clusters points retained 
shows connections disappeared added 
checking original dataset find points added deleted normal connections outliers particular feature number bytes data transmitted 
fact points case belong retained indicates data distributions windows similar 
happens attacks time period 
interestingly data points falling added deleted evolved significantly 
usually correspond newly arrived faded attacks respectively 
examples period data points correspond normal connections data points belong smurf attacks 
applying change analysis procedure shows smurf connections connections fall added micro clusters normal connections fall deleted micro clusters 
means normal connections non existent applying change analysis procedure data points belong added microcluster data points belong deleted micro cluster 
checking original labeled data set connections smurf attacks connections neptune attacks 
discussion developed effective efficient method called clustream clustering large evolving data streams 
method clear advantages techniques try cluster stream time viewing stream changing process time 
clustream model provides wide variety functionality characterizing data stream clusters different time horizons evolving environment 
achieved careful division labor online statistical data collection component offline analytical component 
process provides considerable flexibility analyst real time changing environment 
goals achieved careful design statistical storage process 
pyramidal time window assures essential statistics evolving data streams captured sacrificing underlying space stream clustering process 
exploitation ensures clustream achieve higher accuracy stream due registering detailed information points means approach 
micro clustering ensures scalable data collection retaining sufficiency data required effective clustering 
wide spectrum clustering methods developed data mining statistics machine learning applications 
examined context stream data clustering believe framework developed study separating periodic statistical data collection pyramidal time window provides unique environment re examining techniques 
going examine application clustream methodology developed clustering paradigms data streams 
aggarwal 
framework diagnosing changes evolving data streams 
acm sig mod conference 
ankerst optics ordering points identify clustering structure 
acm sigmod conference 
babcock models issues data stream systems acm pods conference 
bradley fayyad reina 
scaling clustering algorithms large databases 
sigkdd conference 
cortes hancock language extracting signatures data streams 
acm sigkdd conference 
domingos hulten 
mining high speed data streams 
acm sigkdd conference 
lewis elkan 
scalability clustering algorithms revisited 
sigkdd explorations 
guha mishra motwani callaghan 
clustering data streams 
ieee focs conference 
guha rastogi shim 
cure efficient clustering algorithm large databases 
acm sigmod conference 
jain dubes 
algorithms clustering data prentice hall new jersey 
kaufman 
finding groups data cluster analysis 
wiley series probability math 
sciences 
ng han 
efficient effective clustering methods spatial data mining 
large data bases conference 
callaghan streaming data algorithms high quality clustering 
icde conference 
zhang ramakrishnan livny 
birch efficient data clustering method large databases 
acm sigmod conference 
