software practice experience softw 
pract 
exper 
doi spe schr dinger token john aycock nigel horspool department computer science university victoria box victoria canada summary common problem writing compilers programming languages little domain specific languages input token may interpretations depending context 
solutions problem demand programmer intervention obfuscate language grammar may introduce subtle bugs 
technique simple drawbacks allowing token simultaneously different types show applied areas little language processing fuzzy parsing 
describe ways compiler tools support technique 
copyright john wiley sons key words parsing lexical analysis syntactic analysis superposition compilers processing input file performing lexical analysis syntactic analysis 
lexical analyzers scanners effectively break input sequence words examined syntactic correctness parser 
word scanner representative characters input typically referred tokens 
usually type token class words token describes clear cut 
problems arise token type depends context information scanner 
example problem comes pl statements legal ideally scanner divine uses correspond keywords correspond identifiers allow parser grammar rules directly reflect structure language pl case 
ideal token sequence grammar shown correspondence aycock department computer science university victoria box victoria canada 
mail aycock csc uvic ca contract sponsor national science engineering research council canada copyright john wiley sons received june revised january accepted january aycock horspool program text ideal token sequence id id id id stmt expr stmt id expr expr id id 
ideal token sequence simplified grammar 

unfortunately necessary context information produce token sequence directly available scanner 
pl problem arises keywords reserved contexts modern languages avoided particular difficulty 
compilation pl longer hot topic problem arises compiling little domain specific languages 
generally restrict keywords consider situation token type context dependent 
language may embedded sql embedded cobol interpretation tokens may vary greatly sql construct host language 
may dialects single language software re engineering tools obliged recognize 
sections discuss simple technique handling context dependent tokens implementation applications 
comparison purposes alternative techniques 
schr dinger token erwin schr dinger published quantum mechanics posed exaggerated case famous schr dinger cat 
cat acid share accommodation steel chamber radioactive material 
atom radioactive material decays chance happening broken global cat population decreased 
decay atom fate cat unknown chamber opened effectively cat exists superposition alive dead states time 
idea superposition faithful model token interpretation problem 
lieu context information token unique type superposition types possible types simultaneously parser inside chamber resolves token copyright john wiley sons softw 
pract 
exper 
program text token sequence schr dinger token id id id id stmt expr stmt id expr expr id id 
token sequence grammar schr dinger tokens 
shaded token types indicate interpretation eventually parser 
type context information 
term schr dinger token refer token superposition types 
returning pl example shows new token sequence scanner 
schr dinger tokens keyword identifier token unique type notice grammar unchanged ideal grammar schr dinger tokens programmer friendly modifications grammar required lies problem 
physical superposition embodies non determinism current computers particularly adept 
parsing algorithms commonly compilers lalr algorithm yacc deterministic generally cope fact input involving schr dinger token may temporarily unique parse 
general parsing techniques generalized lr parsing earley algorithm effectively simulate non determinism necessary handle ambiguity grammar 
past types parsers widely compilers due efficiency concerns things equal general parsing algorithms tend slower due extra overhead 
concern increases processor speed memory capacity 
number parser generators tools general algorithms approaches making algorithms faster 
note schr dinger token technique past computational linguists accustomed general parsing techniques 
specifically technique natural language parsing model case single word belong different parts speech 
best knowledge computational linguists name technique applied outside area natural language 
argue dual interpretation comparison operator assignment operator 
cat case possibly 
copyright john wiley sons softw 
pract 
exper 
id id aycock horspool alternative techniques number techniques dealing context dependent tokens 
parser independent manner practice involve programmer effort initially apparent 
techniques requiring grammar modification trigger grammar rewriting order modified grammar palatable particular parsing engine 
lexical feedback scanner aware context parser scanner share state 
parser uses shared state communicate context information scanner referred lexical feedback 
lexical feedback number problems practice 
couples scanner parser tightly share state parser scanner operate lock step 
scanner example tokenize entire input tight loop operate separate thread execution moment parser may direct change interprets input 
additionally programmer fully understand parser handles tokens subtle bugs may introduced 
enumeration cases scanner insists returning wrong token type wrong context grammar modified wrong token type accepted right token type programmer enumerates valid cases grammar 
pl example explicitly note grammar scanner may erroneously return token place id token 
grammar modifications correct addition new keyword requires changes logically unrelated grammar rules 
language superset alternative approach handling context dependent tokens scanner attempt distinguish return generic token type 
grammar rewritten accept superset original language 
eventually verified input conforms original grammar 
done actions associated grammar rules deferred semantic processing 
case programmer perform parser supposed place 
furthermore intent grammar rules hidden making maintenance difficult 
techniques folklore 
consequently citations section refer original sources 
copyright john wiley sons softw 
pract 
exper 
oracles schr dinger token doubt token type scanner invoke oracle 
oracle look forwards backwards input stream looking patterns glean context information 
oracle pl compiler scanner parser compensate weak parsing method 
practice oracles may feasible due performance impact reprocessing input complexity constructing correct oracle 
scannerless parsing clearly central problem context dependent tokens communication barrier scanner parser merge remove barrier 
promise scannerless parsing 
programmer supplies single grammar describes lexical syntactic rules making easy express context tokens 
tradeoffs 
programmer supply grammar specifies legal placement whitespace comments 
error prone decrease grammar size increase readability 
concern efficiency scannerless parsing uses powerful pushdown automata handle individual characters finite state automata 
point hard judge scannerless parsing tools available timing results published 
discussion alternatives schr dinger tokens closest spirit enumeration cases 
methods accomplish goal albeit different tradeoffs enumeration cases leaves scanner unchanged modifies grammar opposite schr dinger tokens 
broadly schr dinger tokens suffer problems alternative techniques extensive grammar modification limiting assumptions placed scanner parser operation 
implementation implementation schr dinger tokens divided logical parts support required parsing tools support user parsing tools programmer 
programmer support parser generator supports schr dinger tokens programmer need supply scanner produces said tokens 
done hand crafted scanner scanner generator tools 
gives partial lex specification running example 
distinct token type schrodinger returned parser signal appearance schr dinger token 
set possible types stored global array parser pedagogical reasons maximum copyright john wiley sons softw 
pract 
exper 
aycock horspool return return schrodinger id return schrodinger id za return id extern int types int schrodinger int type int type types type types type return schrodinger 
partial lex specification schr dinger tokens 
types imposed 
usual disambiguation rules preferring longest match applied 
overlap token definitions determined 
experience usually done inspection difficulty typical case single lexeme corresponds multiple token types 
possible construct scanner generator tool look cases automatically 
parser tool support parser generators appropriate support schr dinger tokens 
emphasize time tool modification invisible user programmer 
expository purposes yacc 
yacc uses lalr parsing algorithm flavor shift reduce parsing 
shift reduce parsing parser shifts values stack valid right hand side grammar rule seen atop stack time parser reduces popping values stack 
decision parsing action take controlled deterministic automaton transitions yacc encodes table 
core yacc parsing algorithm loop indexing table topmost stack value current input symbol performing action specified table entry 
shows algorithm pseudocode form 
shown supporting schr dinger tokens matter performing action token types 
unfortunately lalr parsing schr dinger tokens part ways 
simple example require parser distinct automaton states simultaneously possible deterministic automaton 
general parsing algorithms come 
yacc deterministic lalr algorithm fail algorithm generalized lr glr parsing simulates non determinism effectively copyright john wiley sons softw 
pract 
exper 
input true top stack switch action case shift case reduce case accept case error 
schr dinger token input true top stack foreach types switch action case shift case reduce case accept case error 

pseudocode lalr parsing algorithm conceptual modifications schr dinger token support 
running multiple parsers parallel 
essence glr parser employs algorithm 
single parsing stack lalr parsers glr parser set parsing stacks conceptually stack derivation currently considered 
glr parser lalr algorithm stack tops 
regardless general parsing algorithm required change outlined 
operation depends token type repeated types dinger token 
earley glr parsers examined lines code need modification 
depending parser design changes may required support schr dinger tokens 
object parser earley parser scanning parsing rewriting kit spark tokens black boxes 
parser invokes comparison method token discern information type 
parsing model line change token comparison method sufficient schr dinger tokens 
applications schr dinger tokens uses 
application areas domain specific languages fuzzy parsing whitespace optional languages 
domain specific languages domain specific languages languages tailored particular application areas need fully general programming languages long able express information intended copyright john wiley sons softw 
pract 
exper 
aycock horspool program text token sequence search nameserver nameserver search value nameserver value nameserver value 
schr dinger tokens parsing key value pairs 
value domain 
languages designed implemented ad hoc fashion making traditional compiler techniques difficult part due context dependent tokens 
configuration files example 
vary greatly complexity simple format involves key value pairs conf file workstations search csc uvic ca nameserver nameserver line word key remaining words line value 
process compiler tools reasonable consider making key reserved word 
way grammar reflect structure language appropriate actions easily associated different key search value action search nameserver value action nameserver 
taste prevents re key name value changing input line search nameserver shows scanner create schr dinger tokens easily handle case 
domain specific languages examples schr dinger tokens apply implementation follows 
command line arguments 
unix systems commands find expr allow complicated expressions command line arguments 
keywords reserved may appear arguments 
ii text network protocols 
number network protocols ftp smtp little languages client server communication 
keywords reserved 
iii programming languages 
modern domain specific programming languages contextdependent tokens 
author experienced re implementing guide unix registered trademark open group united states countries 
copyright john wiley sons softw 
pract 
exper 
program text token sequence schr dinger token int foo class bar static id noise id noise noise class noise id noise noise 
fuzzy parsing schr dinger tokens 
static noise compiler tools initial implementation ad hoc perl script 
data description language asn provision non reserved keywords distinguished context 
fuzzy parsing fuzzy parsing parsing recognizes part input 
fuzzy parsers useful software re engineering tools look certain features input 
fuzzy parser extract data structure definitions program instance find public class members java program 
fuzzy parser operates skipping tokens sees specified anchor symbol sentinel token indicates start input sequence fuzzy parser recognizes 
parsing input sequence fuzzy parser reverts skipping tokens 
engineering perspective fuzzy parser looking signal amidst noise 
shows idea applied create fuzzy parser locates class definitions programs purposes discovering class hierarchy example 
scanner token schr dinger token superposition types token actual type returned normally noise grammar skip uninteresting input tokens interpreting noise 
scanner configured return schr dinger tokens manner re modification fuzzy parsing 
fuzzy parsers constructed schr dinger tokens general parser powerful previous fuzzy parsers signal look need anchor symbol 
whitespace optional languages schr dinger tokens envisaged means representing piece text may multiple token types 
languages locating token boundaries task 
classic example fortran whitespace optional scanning tricky 
example partial input may correspond tokens depending context 
identifiers integers assumed invalid 
suggests address schr dinger tokens 
distinct token sequences shorter sequences padded special null type 
null tokens copyright john wiley sons softw 
pract 
exper 
aycock horspool program text token sequence id int null id null 
schr dinger tokens parsing fortran 
token interpretation shown due lack sufficient context 
program text token sequence list list int foo id id id null 
schr dinger tokens parsing template syntax 
id ignored parser accomplished grammar modifications permit id followed zero null tokens 
idea may handle lexical ambiguity subranges real number representations languages unclear denotes range values adjacent real numbers 
shown idea straightforward resolve ambiguity right shift operator nested template parameters template parameter lists terminated symbol 
superposition token types schr dinger token represents situations token interpretation dependent context 
general parsing algorithms schr dinger tokens major advantages compared methods addressing problem 

grammar modification required grammar accurately reflect language parsed enhancing readability maintenance 

robustness schr dinger tokens require programmer understand parser internal mechanisms 
assumptions parser performs actions associated grammar rules 

accurate modeling context dependent tokens capturing scanner uncertainty respect token types 

tight coupling scanner parser 
simplifies maintenance allows scanners parsers seen interchangeable software components 
copyright john wiley sons softw 
pract 
exper 
schr dinger token 
support schr dinger tokens may require little line code change 
schr dinger token technique useful addition language implementor toolbox 
shannon jaeger commenting draft 
susanne mike verifying part translation schr dinger 
anonymous referees suggestions improved presentation 

aho av sethi ullman jd 
compilers principles techniques tools 
addison wesley 

fischer cn leblanc rj jr crafting compiler 
benjamin cummings 

bentley little languages 
programming pearls 
addison wesley 

van den brand sellink verhoef current parsing techniques software renovation considered harmful 
international workshop program comprehension june 

schr dinger die situation der 
die naturwissenschaften 
translation 

johnson sc 
yacc compiler compiler 
unix programmer manual th edn vol 

bell laboratories 

levine jr mason brown lex yacc nd edn 
reilly associates 

tomita efficient parsing natural languages 
kluwer academic 

earley efficient context free parsing algorithm 
phd thesis carnegie mellon university 

earley efficient context free parsing algorithm 
communications acm 

jacobs 
parsing techniques practical guide 
ellis horwood 

aycock compiling little languages python 
proceedings th international python conference november 
software available csr uvic ca aycock python june 

schr er fw 
accent compiler 
gmd report german national research center information technology june 
www combo org accent doc ps june 

van deursen introducing asf sdf calculus example 
executable language definitions 
phd thesis university amsterdam 

wagner graham sl 
incremental analysis real programming languages 
proceedings acm sigplan conference programming language design implementation june 

aycock horspool faster generalized lr parsing 
proceedings th international conference compiler construction march 

aycock horspool sek faster generalized lr parsing 

submitted publication 

mclean horspool rn 
faster earley parser 
proceedings th international conference compiler construction april 

graham sl harrison am ruzzo wl 
improved context free recognizer 
acm transactions programming languages systems 

winograd understanding natural language 
academic press 

milne lexical ambiguity resolution deterministic parser 
lexical ambiguity resolution small si cottrell gw tanenhaus mk eds 
morgan kaufmann 

fisher ga jr weber lalr parsing languages reserved words 
acm sigplan 

clark keywords special identifier idioms 
acm sigplan 

pw 
cims pl compiler 
proceedings sigplan symposium compiler construction august 

salomon dj cormack gv 
scannerless nslr parsing programming languages 
proceedings sigplan conference programming language design implementation june 

visser scannerless generalized lr parsing 
report university amsterdam programming research group august 

lesk schmidt lex lexical analyzer generator 
unix programmer manual th edn vol 

bell laboratories 

postel reynolds file transfer protocol ftp 
rfc 
october 
copyright john wiley sons softw 
pract 
exper 
aycock horspool 
berners lee fielding frystyk hypertext transfer protocol 
rfc 
may 

postel jb 
simple mail transfer protocol 
rfc 
august 

levy web programming guide 
software practice experience 

international telecommunication union 
specification syntax notation asn 


systematic approach fuzzy parsing 
software practice experience 

sale 
classification fortran statements 
computer journal 

feldman si 
implementation portable fortran compiler modern tools 
proceedings sigplan symposium compiler construction 
august 

stroustrup programming language rd edn 
addison wesley 

jd 
situation quantum mechanics translation schr dinger cat paradox 
proceedings american philosophical society 
copyright john wiley sons softw 
pract 
exper 

