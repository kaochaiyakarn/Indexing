realistic modeling rendering plant ecosystems oliver deussen pat hanrahan bernd ch modeling rendering natural scenes thousands plants poses number problems 
terrain modeled plants distributed realistic manner reflecting interactions plants environment 
geometric models individual plants consistent positions ecosystem synthesized populate scene 
scene may consist billions primitives rendered efficiently incorporating subtleties lighting natural environment 
developed system built pipeline tools address tasks 
terrain designed interactive graphical editor 
plant distribution determined hand designing garden ecosystem simulation combination techniques 
parametrized procedural models individual plants geometric complexity scene reduced approximate instancing similar plants groups plants plant organs replaced instances representative objects scene rendered 
includes examples visually rich scenes synthesized system 
cr categories computer graphics dimensional graphics realism simulation modeling applications life medical sciences biology 
keywords realistic image synthesis modeling natural phenomena ecosystem simulation self thinning plant model vector quantization approximate instancing 
synthesis realistic images terrains covered vegetation challenging important problem computer graphics 
challenge stems visual complexity diversity modeled scenes 
include natural ecosystems forests department computer science university calgary calgary alberta canada cpsc ucalgary ca matt prusinkiewicz otto von university magdeburg stanford university center art media karlsruhe university calgary human environments instance parks gardens intermediate environments lands vegetation forest fires logging 
models ecosystems wide range existing potential applications including computer assisted landscape garden design prediction visualization effects logging landscape visualization models ecosystems research educational purposes synthesis scenes computer animations drive flight simulators games computer art 
beautiful images forests meadows created early reeves blau featured computer animation adventures andr 
reeves blau organized scene modeling sequence steps specification terrain map provides elevation points scene interactive procedural placement vegetation terrain modeling individual plants grass trees rendering models 
general scheme followed chiba forest rendering provides basis commercial programs devoted synthesis landscapes 
complexity nature necessary carefully computing resources cpu time memory disk space recreating natural scenes computer graphics 
size database representing scene rendering particularly critical item amount geometric data needed represent detailed outdoor scene represented modern computers 
consequently survey previous approaches synthesis natural scenes reflects quest tradeoff realism images amount resources needed generate 
scenes synthesized reeves blau obtained structured particle systems order particles tree 
handle large numbers primitive elements contributing scene particle models individual trees generated procedurally rendered sequentially model discarded soon tree rendered 
consequently size memory needed generate scene proportional number particles single tree total number particles scene 
approach required approximate shading calculations detailed information neighborhood trees available 
approximate shading reduced time needed render scenes 
approach controlling size scene representation reduction visually unimportant detail 
general methods achieving reduction subject intense research example see results easily apply highly branching plant structures 
consequently weber penn introduced heuristic multiresolution representation specific trees allows reducing number geometric primitives models occupy small portion screen 
multiresolution representation botanical scenes explored marshall integrated polygonal representations larger objects tetrahedral approximations relevant parts scene 
different strategy creating visually complex natural scenes proposed gardner 
case terrain trees modeled relatively small number geometric primitives quadric surfaces 
perceived complexity resulted procedural textures controlling color transparency tree crowns 
related approach trees plants represented texture mapped flat polygons example see 
approach produced visible artifacts position viewpoint changed 
accurate image representation introduced max developed algorithm interpolating precomputed views trees 
multiresolution extension method advantage hierarchical structure modeled trees 
shade described hybrid system walkthroughs uses combination geometry textured polygons 
kajiya kay introduced volumetric textures alternative paradigm overcoming limitations texture mapped polygons 
method generating terrains volumetric textures representing grass trees proposed 
chiba removed deformations plants caused curvatures underlying terrain allowing texels intersect 
volumetric textures limits memory disk space needed represent scene texel re applied multiple areas 
idea underlies oldest approach harnessing visually complex scenes object instancing 
paradigm instancing object appears times scene possibly resized deformed affine transformation defined different occurrences instances specified affine transformations prototype 
space needed represent transformations small space needed represent entire scene depends primarily number complexity different objects number instances 
plants particularly appealing objects instancing repetitive occurrences level plant species level plant organs branching structures 
leads compact hierarchical data structures conducive fast ray tracing discussed kay kajiya snyder barr 
hart defanti extended paradigm instancing hierarchical recursive self similar structures 
papers contain examples botanical scenes generated instancing 
complexity natural scenes difficult render specify 
interactive modeling techniques available commercial packages alias wavefront studio focus direct manipulation relatively small number surfaces 
contrast landscape plants may include millions individual surfaces representing stems leaves flowers fruits arranged complex branching structures organized ecosystem 
order model render scenes employ techniques summarized 
multilevel modeling rendering pipeline 
approach initiated reeves blau decompose process image synthesis stages modeling terrain specification plant distribution modeling individual plants rendering entire scene 
stages operates different level abstraction provides relatively high level input stage 
modeler concerned plant distribution specifying terrain plant distribution determined interactively algorithmically considering details individual plants 
reminiscent simulations flocks birds models flower heads patterns models organic structures morphogenetic processes simulations performed geometrically simpler objects visualization 
blumberg galyean extended paradigm multi level direction autonomous animated agents 
analogous way apply multi level modeling 
open system architecture 
clearly specifying formats inputs outputs stage pipeline provide framework incorporating independently developed modules system 
open architecture possible augment complexity modeled scenes increasing range available modules facilitates experimentation various approaches algorithms 
procedural models 
observed smith procedural models characterized significant data base amplification means generate complex geometric structures small input data sets 
benefit phenomenon employing procedural models stages modeling pipeline 
approximate instancing 
object instancing primary paradigm reducing size geometric representation rendered scenes 
increase degree instancing cluster scene components plants parts parameter spaces approximate objects cluster instances single representative object 
idea initially investigated extend applying vector quantization find representative objects multidimensional parameter spaces 
efficient rendering 
memory time efficient rendering techniques decomposition scenes composited ray tracing instancing support rendering polygons memory coherent ray tracing instancing 
employing techniques generated scenes detailed plant models 
number increased scenes required mb store 
plants plant visible average pixels image 
consequently reached limits useful scene complexity level visible detail size resolution output device 
system architecture considerations previous section led modular design modeling rendering system shown schematically 
modeling process begins specification terrain 
purpose developed interactive integrates number terrain modeling techniques section 
output terrain data file includes altitudes grid points superimposed terrain normal vectors indicating local slope terrain optional information describing environmental conditions soil humidity 
task determine plant distribution terrain 
developed techniques purpose visual editing plant densities simulation plant interactions ecosystem density distribution density position conversion quantization parameters scene elements rendering parameters interactive terrain editing terrain data ecosystem file quantization quantized ecosystem file rendering images plant characteristics ecosystem simulation procedural plant models plant parameters plant modeling geometric plant models architecture scene synthesis system 
bold frames indicate interactive programs input files specified user 
section 
editing approach particularly suited model environments designed people example gardens parks 
user specifies distribution plant densities paint program 
convert information positions individual plants developed half algorithm dot plant 
specify positions individual plants explicitly particularly important synthesis scenes include detailed views individual plants foreground 
define plant distribution natural environments forests meadows apply ecosystem simulation model 
input consists terrain data ecological characteristics plant species example annual perennial growth reproduction cycle preference wet dry soil shade tolerance optionally initial distribution plants 
growth plants simulated accounting competition space sunlight resources soil aging death seed distribution patterns perform simulations system plant modeling program extended capabilities simulating interactions plants environments 
allow simulations involving thousands plants simplified geometrical representations subsequently replaced detailed plant models visualization purposes 
specification plant distribution may involve combination interactive simulation techniques 
example model orchard may consist trees explicitly specified positions weeds positions determined simulation 
conversely designer scene may wish change aspects ecological simulation aesthetic reasons 
allow operations take plant distribution input processing 
plant distribution determined interactively ecosystem simulation represented ecosystem file 
contains information type position orientation plant needed assemble final scene parameters individual plants needed synthesize geometric models 
wish render scenes may include thousands plants possibly thousands polygons creation storage separate geometric plant model plant listed ecosystem file practical 
consequently developed program clusters plants parameter space determines representative plant cluster section 
algorithm performs quantization adaptively result depends characteristics plants ecosystem 
quantization process produces outputs plant parameter file needed create geometric models representative plants quantized ecosystem file specifies positions orientations instances representative plants scene 
employ modeling programs create representative plants interactive plant modeler system simulator 
programs input parametrized procedural plant models generate specific geometric plant models values plant parameter file section 
reduce amount geometric data extended concept instancing quantization components plants 
particular plant group plants parts branches leaves flowers similar respective parameter spaces replace occurrences parts instances representative part 
ecosystem rendered 
input rendering consists quantized ecosystem file representative plant models 
additional information may include geometry terrain human objects houses fences 
spite quantization instancing resulting scene descriptions may large 
experimented handle complexity section 
renderer called decomposes scene sub scenes rendered individually composited form final images 
unfortunately separating scene sub scenes impossible properly capture global illumination effects 
alleviate problem ray offers support instancing time efficient rendering scenes polygons long scene description fits memory 
scene description exceeds available memory employ memory efficient ray extended support instancing 
sections describe components modeling pipeline detail 
section examples illustrate operation system 
terrain specification modeling scene specification terrain 
goal step determine elevation data local orientations terrain additional characteristics water content soil may affect type vigor plants different locations 
terrain data may sources 
representations real terrains available example geological survey 
techniques developed creating synthetic terrains 
include hand painted height maps methods generating fractal terrains reviewed models simulation soil erosion 
order provide detailed control modeled terrain advantage data amplification fractal methods stages creating terrain loading height map painted hand left hills added noise synthesis middle stream cut stream mask right 
designed implemented interactive terrain editing combines various techniques procedural manner 
terrain editing consists operations modify terrain geometry spatial scope limited masks 
similar paradigm adobe photoshop selections choose arbitrary subset image edit 
assume masks values zero allowing smooth blending effects operations 
masks operations depend horizontal coordinates altitude points computed far 
possible masks select terrain altitude operations functions current altitude 
user editing actions create pipeline operations associated masks compute terrain altitude point stages pipeline evaluated order 
undo redo operations easily supported removing re adding operations pipeline re evaluating terrain 
examples editing operations include translation scaling nonlinear scaling algorithmic synthesis terrain 
synthesis algorithm noise synthesis generates realistic terrains adding multiple scales perlin noise function 
user adjust small number parameters control roughness terrain rate change roughness surface terrain frequency noise functions 
noise synthesis allows terrain easily evaluated single point considering neighboring points possible operations act locally 
advantage noise synthesis efficiency evaluation updating wireframe terrain view samples region interest applying operation typically takes second 
multiprocessor machine terrain evaluation multi threaded update time noticeable 
editor provides variety masks including ones select rectangular regions terrain top view masks select regions altitude masks defined image files 
useful masks designed cutting streams terrain 
user draws set connected line segments terrain influence mask minimum distance sample point segments 
spline applied smoothly increase influence mask close segments 
scaling operation terrain inside near stream scaled water level nearby terrain ramped rest terrain unchanged 
specification terrain illustrated 
snapshot hill far corner defined loading height map painted hand 
small hills added entire terrain noise synthesis 
image shows final terrain stream mask cut path stream 
total operators applied terrain total time model approximately fifteen minutes 
elevations created additional parameters terrain computed input ecosystem simulations direct source parameters plant models 
user interactively paint parameters terrain simulation provides sound basis modeling natural ecosystems 
consequently incorporates simulator rain water flow distribution soil related erosion algorithm particle system simulation water building facades dorsey 
water dropped terrain absorbed immediately rest flows downhill absorbed soil passes 
sample terrain water distribution generated approach shown 
sample terrain water concentration ranging high blue low yellow specification plant populations task populating terrain plants addressed methods offer different tradeoffs degree user control time needed specify plant distribution biological validity results 
underlying techniques divided space occupancy individual techniques 
classification related paradigms spatially explicit modeling ecology parallels distinction space structure models morphogenesis 
space occupancy techniques describe distribution densities plant species terrain 
image synthesis context distribution obtained approaches explicit specification 
distribution plant densities measured field counting plants occupy sample plots created interactively example paint program 
procedural generation 
distributions plant densities obtained simulating interactions plant populations ecological model 
models described literature commonly expressed terms cellular automata processes 
individual techniques provide location attributes individual plants 
distinguish approaches explicit specification 
plant positions attributes represent field data example obtained surveying real forest specified interactively user 
procedural generation 
plant positions attributes obtained point pattern generation model creates distribution points desired statistical properties individual population model applied simulate interactions plants ecosystem 
describe methods specifying plant distribution developed implemented components 
method combines interactive editing plant densities point pattern generation distribution individual plants 
second method employs individual ecological simulations 
interactive specification plant populations specify plant population terrain user creates set gray level images standard paint program 
images define spatial distributions plant densities plant characteristics age vigor 
image specifies distribution densities plant species positions individual plants generated algorithm 
floyd steinberg algorithm purpose 
black pixel describes position plant raster representing terrain 
implemented relaxation method iteratively moves plant position center mass voronoi polygon 
reduces variance distances neighboring plants produces visually pleasing effects 
position plant determined parameters obtained referring values appropriate raster images point 
values may control plant model directly provide arguments user specified mathematical expressions turn control models 
provides user additional means flexibly manipulating plant population 
operations raster images possible capture interactions plants 
example radius tree crown known image representing projection crown ground may combined user specified raster images decrease density vigor plants growing underneath 
simulation ecosystems individual models plant ecosystems operate various levels abstraction depending accuracy representation individual plants 
goal simulate complex scenes thousands plants follow approach represent plants coarsely circles positioned continuous landscape 
circle defines ecological neighborhood plant center area plant interacts neighbors 
biologically motivated rules govern outcomes interactions intersecting circles 
global behavior ecosystem model emergent property system circles 
implemented individual ecosystem models framework open systems 
systems operate branching structures represent plant circle located invisible positioning line 
lines connected branching structure spreads terrain 
steps sample simulation self thinning process 
colors represents states plants dominated green dominated red old yellow 
simulation began plants placed random square field 
due large number plants part field shown 
average area plants function density 
small dots represent results tenth simulation step 
large dots correspond states simulation shown 
example consider model plant distribution due fundamental phenomenon plant population dynamics 
phenomenon described follows page plots logarithm average plant weight function logarithm density data points fall line slope approximately called self thinning curve 
seeds planted moderate density combination density average dry weight lies self thinning curve plants grow appreciable mortality population reaches self thinning curve 
point intense crowding associated increase average plant size causes death smaller individuals model self thinning simplified version 
simulation starts initial set circles distributed random square field assigned random initial radii interval 
circles representing plants intersect smaller plant dies corresponding circle removed scene 
plants reached limit size considered old die 
shows snapshots simulation 
corresponding plot shows average area circles function density 
slope self thinning curve equal assuming mass proportional volume turn self thinning proportional area raised power curve density mass coordinates slope spite simplicity model captures essential characteristic plant distribution reached self thinning curve 
simulated distribution plant species terrain 
colors indicate plant species 
plants preference wet areas shown blue 
slightly complicated model describes plant distribution population different plant species 
species defined set values determine number new plants added field simulation step ii maximum size plants iii average growth rate iv probability surviving domination plant competitive advantage preference wet dry areas 
individual plant characterized species belongs ii size iii vigor 
vigor number range assigned plant randomized function water concentration plant location plant preference wet dry areas 
competitive ability plant determined product vigor relative size ratio actual maximum size 
circles representing plants intersect competitive abilities compared 
plant smaller competitive ability dominated plant may die defined probability 
presents result simulation involving mix plant species growing terrain shown 
plants preference wet areas represented blue circles 
plants preference dry areas assigned colors 
competition species segregation plants wet dry areas emerged 
similar models developed capture phenomena govern development plant populations 
modeling plants interactive editing plant populations simulation ecosystems determine positions high level characteristics plants modeled scene 
basis geometric models individual plants 
advances plant measuring techniques possible construct geometric model specific plant detailed measurements structure 
purpose visualizing plants differing age vigor possibly parameters preferable treat geometric models product underlying procedural models 
construction models computer graphics biological purposes field active study reviewed 
consequently discuss issue model parametrization incorporation high level parameters returned population model plant models 
consider different approaches reflect different predictive values mechanistic descriptive models 
mechanistic models operate simulating processes control development plants time 
inherently capture resulting structure changes age 
mechanistic model incorporates environmental inputs dependence resulting structure corresponding environmental parameters emergent feature model 
model predicts effect various combinations environmental parameters structure explicit parametrization needed 
systems extensions provide convenient tool expressing mechanistic models 
mechanistic models generated 
descriptive models capture plant architecture simulating underlying developmental processes 
consequently inherent predictive value 
family geometric models constructed capture key postures plant different ages different high level characteristics obtain geometries interpolation 
equivalent fitting functions map set high level parameters set lower level variables model accomplished regression see application example 
special case plant postures characterized single parameter interpolation key postures analogous key framing accomplished similar techniques 
applied interpolation parametrize models created 
approximate instancing geometric plant models large 
detailed polygonal representation plant may require mb store scene plants relatively small number ecosystem simulations require gb 
approach reducing space requirements simplify geometric representations objects small size screen 
incorporated version technique system parameterizing procedural plant models produce geometries different surfaces 
technique sufficient reduce amount data manageable levels 
instancing successfully past compactly representing complex outdoor scenes 
paradigm instancing geometric objects identical affine transformations instances object 
achieve reduction size geometric descriptions extended paradigm instancing objects resemble exactly 
sets similar plants represented instances single representative plant 
furthermore hierarchical structure plant scenes may decomposed groups plants individual plants branches different order plant organs leaves flowers lends instancing different levels hierarchy 
create hierarchies instances quantizing model components respective parameter spaces reusing 
automatic generation instance hierarchies plant models expressed limited class systems considered hart 
approach dealt exact instancing 
considered special cases approximate instancing plants analyzed tradeoffs size geometric models perceived distortion departure original geometry caused reduction diversity components 
achieved reductions database size ranging negligible visual impact generated images tree field grass 
result reminiscent observation smith set random numbers stochastic algorithms generating fractal mountains particle system trees reduced representative values significantly affecting perceived complexity resulting images 
generalize approach relating clustering 
assuming characteristics plant described vector real numbers apply clustering algorithm set vectors order find representative vectors 
reduce problem finding representative plants instancing problem finding set representative points parameter space mapping point representative 
assume plants similar appearance described close points parameter space case example size plant nonlinear function age transform parameter space perceptually linear 
cluster map plant parts manner entire plants 
clustering remapping stated terms vector quantization store code book plants plant parts input plant store mapping object code book plant geometry 
computer graphics vector quantization widely color image quantization applications include reduction memory needs texture mapping representing light fields 
multi dimensional clustering algorithm developed wan subdivides hyperbox containing data points choosing splitting planes minimize variance resulting clusters data 
extended algorithm include importance weight input vector 
weights possible optimize plant quantization process example allocating representative vectors plants occupy 
rendering rendering natural scenes raises important questions dealing scene complexity ii simulating illumination materials atmospheric effects 
addressed questions different strategies 
strategy split scene sub scenes manageable complexity render independently composite resulting rgb images final image 
separation scene sub scenes byproduct modeling process output distribution single plant species form sub scene 
ray casting algorithm implemented creates scene geometry procedurally invoking plant modeler run time 
reduces file saves disk space compared storing geometric information scene disk reading rendering 
example tree shown kb procedural model plant template mb standard text geometry format 
number operations applied rgb images combined 
image processing operations saturation brightness adjustments useful 
atmospheric effects introduced post process modifying colors pixel depth 
shadows computed shadow maps 
scene separation possible render scene quickly re render individual sub scenes needed improve image 
complex lighting effects easily included renderer doesn access entire scene description 
second rendering strategy ray tracing 
lacks capability easily re render parts scenes changed possible include complex illumination effects 
ray tracers procedural geometry descriptions expanded triangle meshes complemented hierarchy grids bounding boxes needed speed rendering 
requires entire scene description object prototypes bounding boxes hierarchy instancing transformations kept memory page swapping significantly decreases efficiency rendering 
case meshes stored disk read parts memory cache needed rendering computations removed memory prescribed limit amount memory 
consequently decrease performance memory size reached slower 
straightforward extension memory coherent ray tracing algorithms manage geometry non geometry instances scene managed geometry cache 
rays traced access entire scene complex lighting effects included 
example attenuating shadow rays pass translucent leaves tree crowns greatly improves realism visual richness 
examples evaluated system applying create number scenes 
examples combinations modules ecosystem simulation plant modeling followed rendering ii interactive specification plant distribution conjunction plant generation rendering 
presents visualizations stages self thinning process distributions shown 
plants represent hypothetical varieties red blue white flowers 
plant size values returned ecosystem simulation quantized representative values plant variety 
quantized values mapped age modeled plants 
scene obtained simulation steps plants 
file representing scene instancing gb estimated instancing mb resulting compression ratio approximately 
scene steps corresponding values plants mb mb compression 
mountain meadow top generated simulating ecosystem species plants discussed section 
distribution plants qualitatively similar shown schematically includes larger number smaller plants 
individual plants modeled high level detail possible zoom scene view individual plants 
complete scene approximately plants comprising approximately primitives polygons cylinders 
file representing scene instancing gb estimated instancing mb resulting compression ratio approximately 
field simulation steps time needed model scene mhz silicon graphics indy mb ram divided follows simulation ecosystem steps min quantization dimensional parameter space plant species quantized levels min generation representative plants min 
rendering time mhz silicon graphics origin mb ram pixels samples pixel approximately hours 
longer case rendering time depend critically amount ram 
example paradigm parameterizing quantizing instancing applied entire groups plants tufts grass 
number controlled parameter 
resulting lawn shown 
image different sets grass tufts generated times average 
total reduction geometry due quantization instancing including instancing grass blades tufts factor 
model parameter control size heaps leaves 
heap stick stick modeled manually 
interactive creation complex scenes requires proper techniques achieve aesthetically pleasing result 
illustrate process followed retrace steps resulted stream scene shown 
began definition hilly terrain crossed little stream 
cover plants created procedural models plant species fitting environment 
extracted images representing terrain altitudes stream position figures original terrain data 
zooming mountain meadow provided visual cues needed painting plant distributions example prevent plants placed stream 
interactively chose viewpoint approximately human height 
resulting perspective view terrain painted gray scale image plant species define distribution 
placed vegetation areas visible selected viewpoint speed rendering 
example shows image defines density distribution nettles 
nettles grow wet ground specified high density values stream 
density image served input determined positions individual plants 
dot diagram produced provided visual feedback refine density image step step desired distribution 
grass tufts varying daisy concentrations lawn leaves grass sample plant models stream scene 
top row apple bottom row grass reed yellow flower 
creating distribution covered area river image plant density distribution painted user resulting plant positions 
position plants established employed additional parameters control appearance plants 
vigor plants affects length stems number leaves controlled density image nettles 
control vigor grass height map result grass tufts slightly saturated color top hill lower areas 
oriented weighted sum terrain surface normal vector vector 
point scene changes density image satisfying result obtained 
opengl preview stream scene including yellow flowers shows preview distribution nettles yellow flowers 
prevent intersections plants painted density image yellow flowers multiplied inverted density image nettles 
apple trees placed painting black dots white image 
final scene rendered 
images representing species rendered separately resulting sub scenes composited described section 
clouds added real photograph texture map 
increase impression depth scene color saturation contrast decreased increasing depth postprocessing step colors shifted blue 
table provides statistics instancing geometric compression scene 
creation image took days plus day defining plant models 
actual compute time needed synthesize scene mhz processor silicon graphics onyx mb ram pixels samples pixel min 
figures examples scenes interactively created plant distributions 
simulate effect shadowing distribution yellow flowers rendered top view spheres approximate shape apple trees multiplied resulting image modified interactively initial density image yellow flowers 
followed similar strategy creating impor stream scene tant trees positioned rendered provide visual cues placements 
table contains statistics geometry quantization 
plant obj 
inst 
plant obj 
inst 
apple grass reed yellow flower table number prototype objects instances stream scene 
number polygons instancing instancing 
compression rate 
plant obj 
inst 
plant obj 
inst 
willow reed birch distant tree st john grass table number prototype objects instances dutch scene 
number polygons instancing instancing 
compression rate forest scene design experimental implementation system modeling rendering scenes plants 
central issue managing complexity scenes addressed combination techniques different levels abstraction different stages modeling rendering pipeline procedural modeling approximate instancing employment space time efficient rendering methods 
tested system generating number visually complex scenes 
consequently confident approach operational useful practical applications 
early step development techniques creating visualizing complex scenes plants concepts require research 
fundamental problem evaluation impact quantization approximate instancing generated scenes 
difficulty studying problem stems difficulty generating non images visual comparison purposes scenes large ii lack formally defined error metric needed evaluate artifacts approximate instancing objective manner iii difficulty generalizing results obtained analysis specific scenes 
partial solution problem set stage design analysis methods may suitable quantizing plants general purpose variance algorithm implementation 
research problems exposed experience include improvement terrain model coupling plant population model nature vegetation affects terrain example preventing erosion ii design algorithms converting plant densities positions account statistical properties plant distributions natural ecosystems iii incorporation morphogenetic plasticity dependence plant shape neighbors multi level modeling framework requires transfer information plant shapes population model procedural plant models iv extension modeling method animated scenes growing plants plants moving wind design methods conveniently previewing scenes billions geometric primitives example select close views details vi application faithful local global illumination models rendering plant scenes particular consideration distribution diffuse light canopy 
dutch landscape acknowledge craig kolb implementation variance quantization algorithm adapted needs system jacob experimental implementations discussions pertinent ecosystem modeling 
jim hanan richard levy peter room discussions pointers relevant literature referees helpful comments manuscript chris prusinkiewicz editorial help system support calgary 
research sponsored part national science foundation ccr pat hanrahan natural sciences engineering research council canada ogp prusinkiewicz 
alias wavefront division silicon graphics studio 
sgi program 
world builder 
pc program 
armstrong 
comparison index pixel neighborhood simulations forest growth 
ecology 
agrawala 
rendering compressed textures 
siggraph conference proceedings pages august 
blumberg galyean 
multi level direction autonomous creatures real time virtual environments 
siggraph conference proceedings pages august 
boots 
spatial concepts applications voronoi diagrams 
john wiley 

reducing storage required render system models 
master thesis university calgary october 
chiba muraoka doi 
rendering forest scenery textures 
journal visualization computer animation 
adobe 
adobe photoshop 
deussen 
modelling method user interface creating plants 
proceedings graphics interface pages may 
dorsey pedersen hanrahan 
flow changes appearance 
siggraph conference proceedings pages august 
duff 
compositing rendered images 
computer graphics siggraph proceedings 

model interference plant 
journal theoretical biology 
fleischer barr 
cellular texture generation 
siggraph conference proceedings pages august 
floyd steinberg 
adaptive algorithm spatial gray scale 
sid int 
symp 
dig 
tech 
papers pages 
fowler prusinkiewicz 
collision model spiral 
computer graphics siggraph proceedings 
gardner 
simulation natural scenes textured quadric surfaces 
computer graphics siggraph proceedings 
gersho gray 
vector quantization signal compression 
kluwer academic publishers 
green 
modelling plants landscapes 
michalewicz editor plants ecosystems 
advances computational life sciences pages 
csiro publishing melbourne 
hart defanti 
efficient anti aliased rendering linear fractals 
computer graphics siggraph proceedings 
hart 
object instancing paradigm linear fractal modeling 
proceedings graphics interface pages 
heckbert 
color image quantization frame buffer display 
computer graphics siggraph proceedings 
higgins richardson 
review models alien plant spread 
ecological modelling 
hoppe 
view dependent refinement progressive meshes 
sig graph conference proceedings pages august 
house schmidt kitagawa 
visualizing real forest 
ieee computer graphics applications 
kajiya kay 
rendering fur dimensional textures 
computer graphics siggraph proceedings 
kay kajiya 
ray tracing complex scenes 
computer graphics siggraph proceedings 
kelley malin nielson 
terrain simulation model stream erosion 
computer graphics siggraph proceedings 
kolb 

graphics stanford edu cek 

intensive comparison triangulated irregular networks tins digital elevation models dems 

levoy hanrahan 
light field rendering 
siggraph conference proceedings pages august 
deussen 
interactive structural geometrical modeling plants 
appear ieee computer graphics applications 
deussen 
interactive modelling animation natural branching structures 
boulic editors computer animation simulation 
springer 
adventures andr film 
marshall campbell 
multiresolution rendering complex botanical scenes 
proceedings graphics interface pages may 
max 
hierarchical rendering trees precomputed multi layer buffers 
schr der editors rendering techniques pages 
springer wien 
max 
rendering trees precomputed buffer views 
hanrahan editors rendering techniques pages 
springer wien 
kolb mace 
synthesis rendering eroded fractal terrains 
computer graphics siggraph proceedings 
ch prusinkiewicz 
visual models plants interacting environment 
siggraph conference proceedings pages august 

general multiscale model volumetric textures 
proceedings graphics interface pages 

synthesizing landscapes volumetric textures 
der editors rendering techniques pages wien 
springer verlag 
perlin 
image synthesizer 
computer graphics siggraph proceedings 
kolb hanrahan 
rendering complex scenes memory coherent ray tracing 
siggraph conference proceedings pages august 
prusinkiewicz 
visual models morphogenesis 
artificial life 
prusinkiewicz 
modeling spatial structure development plants review 

prusinkiewicz hammel mjolsness 
animation plant development 
siggraph conference proceedings pages august 
prusinkiewicz lindenmayer 
algorithmic beauty plants 
springer verlag new york 
hanan fracchia fowler de boer mercer 
prusinkiewicz davidson hammel 
modeling architecture expanding shoots systems 
canadian journal botany 
productions llc 
world construction set version 
pc program 
reeves blau 
approximate probabilistic algorithms shading rendering structured particle systems 
computer graphics siggraph proceedings 
reynolds 
flocks herds schools distributed behavioral model 
computer graphics siggraph proceedings 

ecology 
third edition 
freeman new york 
shade lischinski salesin derose snyder 
hierarchical image caching accelerated walkthroughs complex environments 
siggraph conference proceedings pages august 
rivet 
measurement visualization architecture adult tree dimensional device 
trees 
smith 
plants fractals formal languages 
computer graphics siggraph proceedings 
snyder barr 
ray tracing complex models containing surface tessellations 
computer graphics siggraph proceedings 
sokal 

third edition 
freeman new york 
ford 
model competition incorporating plasticity modular foliage crown development 
ecological monographs 
sutherland 
sketchpad man machine graphical communication system 
proceedings spring joint computer conference 
johnson 
plant crop modeling mathematical approach plant crop physiology 
oxford university press new york 
wan wong prusinkiewicz 
algorithm multidimensional data clustering 
acm trans 
math 
software 
watt watt 
advanced animation rendering techniques theory practice 
addison wesley reading 
weber penn creation rendering realistic trees 
sig graph conference proceedings pages august 
williams 
casting curved shadows curved surfaces 
computer graphics siggraph proceedings 
williams 
shading dimensions 
proceedings graphics interface pages june 
wu sharpe walker 
simulation dimensional point patterns application framework approach 
ecological modelling 
