jiazzi new age components old fashioned java jiazzi system enables construction largescale binary components java 
jiazzi components thought generalizations java packages added support external linking separate compilation 
jiazzi components practical constructed standard java source code 
jiazzi requires extensions java language special conventions writing java source code go inside component 
components expressive jiazzi supports cyclic component linking mixins open class pattern enables modular addition new features existing classes 
describes jiazzi enhances java components implementation type checking works 
implementation jiazzi available download 

current java constructs code reuse including classes insufficient organizing programs terms reusable software components 
packages class loaders various design patterns implement forms components ad hoc manners lack explicit language construct components places substantial burden programmers obscures programmer intent compiler programmers 
object oriented software systems increase size complexity components central design process deserve close integration language 
components support separate compilation enables development large programs deployment components binary form external linking eliminates hard coded dependencies components flexible possible client programmers :10.1.1.127.1416
addition components integrated classbased language java fit class system sean matthew flatt wilson hsieh school computing university utah wilson cs utah edu java classes jiazzi components jiazzi linker jiazzi component java virtual machine jiazzi components constructed java classes components loaded java virtual machines execution 
components import classes instantiated subclassed component 
inheritance component boundaries necessary grouping classes class extensions reusable components 
components accept imported classes supply methods component requires expects 
requiring exact match methods imported class prohibit composition class extending components mixins 
cyclic component linking allowed resolve mutually recursive dependencies components 
mutually recursive relationships especially common class level naturally span component boundaries 
jiazzi new component system java program units 
jiazzi provides combination components classes supports features 
illustrates high level jiazzi works jiazzi component built java classes jiazzi components 
resulting component execute directly java virtual machine 
jiazzi contributions component programming java apply statically typed object oriented languages 
special core language extensions conventions need java code construct component 
jiazzi integrates java stub generator external linker 
subclassing component boundaries cyclic component linking supported component boundaries placed design naturally 
allows easy retrofitting legacy java code component designs 
second jiazzi support addition features classes editing source code breaking existing class variant relationships 
functionality provided languages support open classes :10.1.1.100.5370
combination mixins cyclic component linking simulate open classes call open class pattern 
open class pattern jiazzi provides solution extensibility problem arises tension adding features creating variants class :10.1.1.127.1416:10.1.1.127.1416
open class pattern replace design patterns implement modular feature addition factories bridges combination external linking java language constructs subclassing instantiation 
section gives overview jiazzi components shows program designs 
section describes jiazzi modularly add features classes mixins open class pattern 
section explains type checking presence separate compilation works jiazzi 
section describes implementation jiazzi interactions java jiazzi 
section discusses related 
section discusses summarizes 

overview components jiazzi constructed units 
unit conceptually container compiled java code support typed connections 
types units atoms built java classes including java interfaces compounds built atoms compounds 
units import export java classes 
classes imported unit exported units classes exported unit imported units 
linking specified compounds determines connections exported imported classes 
groups classes connected units linked call groups classes packages emphasize similarity packages standard java 
package grained connections reduces quantity explicit connections units allows component system scale larger designs 
jiazzi includes component language provides convenient way programmers build reason units 
language structure classes unit imported exported packages described package signatures 
packages multiple unit descriptions enhance component language scaling properties 
introduce jiazzi simple example composes user interface ui library application complete program 
describe units describe package signatures 
package signatures package signatures constructs describe visible structure classes java package 
package describes ui library button window package signature applet describes application 
package signature structure class described class signature 
class signature specifies class super file ui sig signature ui ui class widget extends object void paint class button extends ui widget void string class window extends ui widget void add ui widget void show file applet sig signature applet ui class program extends ui window void run package signatures ui describes user interface library applet describes application conventions example package signature names package parameters file applet unit atom applet import ui ui ui export applet applet ui imports user interface library exports application conventions example names imported packages names exported packages 
widget public 
example methods superclasses classes described class signatures describe interface subtyping class members fields constructors inner classes 
class signatures describe java interfaces class member modifiers protected 
class signatures parameterized enclosing package signature package parameters bound packages package signature 
package parameter ui assume object string built purposes example reflects close coupling classes java virtual machine see section details 
classes object string referred package signature package parameters 
direct superclass specified ui widget comes package bound package 
allowing package implicitly limit package signature open class pattern section depends flexibility package signatures implicitly self 
atoms atom applet shown imports java classes package ui implement user interface library described package signature ui exports classes package applet implement applet described package unit package parameters package signatures describe imported exported package bound unit imported exported pack file applet applet program java package applet public class program extends ui window ui button new ui button public program start add public void run show java source implementation applet program 
applet sig jiazzi stub generator ui sig widget class applet unit button class program java java compiler window class program class program class jiazzi unit linker metadata applet jar files development process files source shown figures dashed rectangle tools rectangles files rounded rectangles archive files shaded rounded rectangles 
ages 
class signatures imported exported classes refer unit imported exported classes 
example package superclass applet program ui window package bound 
unit declarations imported exported packages constitutes unit signature 
class signatures provided unit signature necessary implement separate type checking jiazzi 
inside unit implementation unit imported classes visible outside unit implementation unit exported classes visible 
explain separate type checking detail section 
atoms built java classes compiled normal java source code 
shown java source exported program 
java source instantiate subclass imported classes 
example implementation program window subclassed class ui button instantiated 
java source refer imported classes exported classes private classes contained atom 
shows developed implementation jiazzi 
files provided developer unit definitions package signatures java source located separate source files 
implementation imported classes unavailable standard java source compilers javac jikes automatically know structure imported classes 
reason implementation provides stub generator uses class signatures imported classes generate stub class files 
example stub class files generated imported user interface classes 
class files java class stan file ui unit atom ui export ui ui ui file unit compound export ui ui ui applet applet ui local ui applet link ui ui ui ui applet applet exports user interface library links 
dard java source compiler 
java source compilation jiazzi component linker performs type checking ensure atom compiled java code conforms unit signature 
class files classes contained atom placed java archive jar file atom binary form 
example program class placed binary form applet jar 
atom unit signature placed jar file component meta data 
information developing jiazzi user manual 
compounds atom ui exports package classes implement user interface library described package signature ui 
links atom atom applet 
unit signature compound form atom exports packages described package signatures 
unit signature compound link section 
link section java classes contained units conceptually copied instantiating units unit instances statement 
atoms applet ui respectively instantiated unit 
link statement connections source packages left sink packages right clause 
source package imported package compound exported package compound unit instances 
sink package imported package compound unit instances exported package compound 
write notation imported exported unit 
compound exported package ui connected imported ui 
meaning connection classes package ui replaced classes ui unit instance name equivalence unqualified class name 
example ui widget inside implementation classes unit instance replaced widget ui 
ui ui ui applet ui applet applet graphical illustration connections 
exported package unit instance available outside linking compound connected compound exported packages 
encapsulation component level hierarchical linking compounds aware compound unit signature unaware units initially provided exported packages 
exported package ui connected package ui exported compound 
compounds exported package know classes initially exported 
illustration linking shown 
unit instances enclosing compound represented alternately shaded rounded rectangles 
packages represented boxes black tabbed left rounded right 
imported packages come unit left exported packages leave unit right 
connections represented lines right rounded part package left black tabs packages 
unit create multiple unit instances different contexts 
imports unit instance connected differently unit instance exports distinct group classes 
restriction number unit instances single compound complete program created unit 
informally compound reduced atom 
copying reduced bodies units create unit instances 
concatenating copied bodies renaming class mapping specified link section rewriting analogous way linker finds updates offsets link time 
result create unit instances undergo linking larger compounds 
course guarantee concatenated bodies formed form checking applied units linking 
explain rules section 
development shown 
atoms applet ui linked binary forms linked 
jiazzi component linker performs type checking copies class files atom rewritten connections compound 
example linker creates jar jar binary form 
class file program class copied jar jar 
ui connected ui program class imported classes package ui changed copy button class window class widget class metadata ui jar program class metadata applet jar jiazzi unit linker unit applet sig ui sig program class button class window class widget class metadata jar java virtual machine files development process building 
file color sig signature color orig class widget extends orig widget void setcolor int class button extends orig button class window extends orig window file font sig signature font orig class widget extends orig widget void int class button extends orig button class window extends orig window file sig signature orig class widget extends orig widget void setcolor int void int class button extends orig button class window extends orig window file nop sig signature nop orig class widget extends orig widget class button extends orig button class window extends orig window package signatures color font describe packages respectively add color font color font features package parameter orig nop empty extension exported classes ui copied jar 
format compound binary form atom binary form linking distinction atoms compounds 
compound imports classes safely executed java virtual machine jar classpath 

feature extensibility addition decomposing design classes useful decompose design multiple features 
features cross cut class boundaries benefit implemented separate components 
demonstrate jiazzi expressiveness file mix color unit atom mix color import ui init ui ui init ui nop ui init export ui color ui file mix font unit atom mix font import ui init ui ui init ui nop ui init export ui font ui file mix unit compound mix import ui init ui ui init ui nop ui init export ui ui local mix color mix font link ui init ui init ui init ui init ui ui ui ui ui ui units mix color mix font mix mixin constructions add color fonts color fonts package ui library classes 
show jiazzi decompose class library features multiple components 
continue example ui library adding color font feature ui library package signatures 
approaches pure mixin approach utilizes mixins add features classes open class pattern improvement pure mixin approach uses cyclic linking solve extensibility problem 
mixins units powerful express kind mixin exported class subclasses imported class 
exported class methods actual class connected imported superclass visible class imported unit outside visible exported class subclasses imported class visible imported class signature unit 
mixins feature addition suppose writing unit adds feature single package classes 
unit import initial construction classes features added call init package 
init package establishes variant relationships provides initial functionality 
unit imports previous construction classes result feature added call package 
package extended version init package 
unit exports package extended version package class package subclasses class package unqualified name forming series mixins 
features added unit added classes package 
uses mixins atom mix color add color feature package classes implement ui library 
ui ui init ui mix color ui init ui ui mix ui mix font ui init ui graphical illustration connections 
ui init widget void paint mix color button void string ui widget button widget void setcolor int button ui graphical illustration subclassing relationships local color black arrows point subclasses grey dashed arrow points desired subclassing relationship achieved mixins 
imported init exported package ui ui library init packages respectively 
package describe ui library initial structure 
package signature nop describe imported extension init new methods 
package adds new establishes normal mixin relationships classes 
atom mix font adds font feature ui library way color adds color feature 
compound mix composes color font create unit adds font color features package ui library 
inside mix method setcolor visible class ui widget exported unit instance subclass ui widget exported unit instance allows methods setcolor set font visible class ui widget exported mix 
linking illustrated 
mixins jiazzi enable reuse class implementations provide common type describe functionality add language level mixin proposals java language extension jam 
jiazzi mixins address different design space link time abstractions enable transparent class inheritance component boundaries opposed abstractions core language enable fine grained mixin oriented programming 
file open color unit atom open color import ui ui ui fixed ui fixed nop ui export ui color ui color uses open class pattern add color feature ui library 
pure mixin approach add features classes problematic see shows subclassing relationship color subclassing relationships similar 
subclassing variant having ui init button subclass ui init widget 
feature color added widget class ui widget 
mixins fails combine classes ui button widget create color buttons problem occurs trying add features vertical class extension create variants horizontal class extension known extensibility problem :10.1.1.127.1416:10.1.1.127.1416
solve problem approach utilizes cyclic component linking mixins 
open class pattern general solution extensibility problem allow modular addition new features existing classes ensure added features visible variants updated class 
example new method setcolor added widget visible instances widget variant button 
open classes multijava satisfies requirement features new methods :10.1.1.100.5370:10.1.1.100.5370
jiazzi directly support open classes open class pattern utilizes jiazzi expressive linking facilities simulate open classes 
open class pattern utilizes mixins upside mixins behave normal mixins just different perspective imported classes subclass exported ones 
method visibility reverse mixins method visible class exported unit inside unit visible imported class subclasses exported class visible exported class signature outside unit 
upside mixins necessarily requires cyclic component linking 
apply open class pattern suppose writing unit adds feature single package classes 
pure mixin approach unit import package export 
new feature implemented package classes extended version package forming normal mixins 
key open class pattern importing initial package unit imports result features applied package classes 
fixed package extended version forming upside mixins 
uses open class pattern color add color feature classes ui library 
imported fixed exported ui library fixed packages respectively 
ui ui fixed widget void paint widget void setcolor int widget open color button void string button button ui graphical illustration subclassing relationships local color 
file open color ui widget java package ui public class widget extends ui widget private int clr public void setcolor int clr protected int return clr file open color ui button java package ui public class button extends ui button public void paint 
super paint java source implementations widget button 
package describe structure ui 
package signature nop establish upside mixin relationship ui fixed ui 
pure mixin approach new added 
shows subclassing relationship color subclassing relationships window button 
classes instantiated subclassed create variants 
example ui fixed widget ui widget button variant 
seen class ui widget adds new method setcolor inserted superclass ui fixed widget establishes upside mixin relationship 
shown java source classes widget button package ui 
method hidden outside atom open color ui widget class file open font unit atom open font import ui ui ui fixed ui fixed nop ui export ui font ui file open unit compound open import ui ui ui fixed ui fixed nop ui export ui ui local open color open font link ui fixed ui fixed ui fixed ui fixed ui ui ui ui ui ui font uses open class pattern add font feature ui library adds color font feature ui library signature 
fixed widget upside mixin relationship widget color implementation method visible button shown java source button 
shows multiple feature adding components combined feature adding component compound 
font uses open class pattern add font feature ui library 
compound open instantiates open color open font applies resulting unit instances package import ui library 
uses open class pattern appears directly add color font features ui library 
shows open class pattern toend create ui library 
compound open fixed uses atom open init compound open create feature complete ui library 
atom open init provides initial implementation ui library need import package 
inside open fixed features ui library fixed package unit connecting fixed package imports unit andb 
illustrates linking done compounds open fixed 
features added open fixed open class pattern 
compound exported package ui fixed appears outside compound ui library provides color font features 
intermediate classes exported fixed hidden clients ui library 
result clients fixed isolated fact ui library built open class pattern 
shows global class inheritance hierarchy established compound open fixed 
classes independently developed units exist class inheritance hierarchy 
subclass subclass solves extensibility problem 
file open init unit atom open init import ui fixed nop ui export ui ui ui fixed file fixed sig signature fixed ui class widget extends object void int void setcolor int void paint class button extends ui button void string class window extends ui window void add ui widget void show file open fixed unit compound open fixed export ui fixed fixed ui fixed local open init open link ui ui ui ui fixed ui ui fixed ui ui fixed compound open fixed fixes features ui framework 
open init ui fixed ui ui ui open fixed open open color ui fixed ui ui ui fixed open event ui fixed ui ui ui fixed graphical illustration connections fixed 
widget void paint int open color widget void setcolor int widget void int open font open fixed open init button ui void string button button ui ui open graphical illustration global inheritance relationships established fixed 
combined cyclic component linking mixins nontrivial effect type checking 
inheritance cycles introduced class hierarchy method collisions occur ambiguous methods exist scope 
show section separate type checking jiazzi disallow constructions 
open class pattern unique jiazzi useful convention java code outside jiazzi components separate compilation especially separate type checking important source code open modification 
jiazzi open class pattern realistic enables configuration features external linking 
open class pattern jiazzi necessarily causes shift programming model java code uses add features 
adding better support open class pattern jiazzi minimize effects shift 

type checking java classes construction atom checked java language specification 
jiazzi uses conventional java compiler perform checks stubs generated imported classes ensure correctly classes atom contains 
jiazzi component linker ensures atom classes consistent atom unit signature 
compounds linker ensure linking units compound consistent compound unit signature unit signature units create unit instances compound 
checks performed type checking connections 
type checking connection requires matching classes source package classes sink package 
classes contained atom potential source packages classes exported atom unit signature sink packages 
atom source packages implicitly connected atom sink packages package name equivalence 
classes imported compound unit signature exported unit signatures compound unit instances potential source packages classes exported compound unit signature imported unit signature compound unit instances sink packages 
compound source packages explicitly connected sink packages source packages left sink packages right clauses compound link statements 
compare class signatures sources sinks jiazzi expands package signatures replacing package signature package parameters names packages bound 
expansion checks ensure package parameter bound package provides classes referred package parameter 
package signatures purpose type checking expanded generate unit signatures 
indirect properties class subclasses superclasses inherited methods require class exist environment classes classes signatures classes closed 
properties source classes extracted source environment connection properties sink classes extracted sink environment connection 
source environment connections unit created union class signatures classes potential sources class signatures unit imported classes 
classes contained inside atom class signatures extracted directly class definitions 
sink environment created union class signatures classes imported exported unit unit instance sink package located 
type checking amounts source sink class matching context source environment sink environment 
consider connection packages source sink inside unit ifa described described rejected 
addition rules hold typed 
method introduced introduced inherited method source environment 

ifp subclass introduced sink environment introduced inherited method source source environment 

class direct superclass sink sink environment direct indirect superclass connected superclass ofq source environment class visible sink environment 
rule straightforward rule ensures method requirements met 
method provided sink class source class superclasses 
rule rejects constructions cause method collisions 
chosen interpretation method collision disallows silent overriding signatures colliding methods ambiguous method calls signatures colliding methods differ return type 
file icon icon java package icon public class icon extends object public void paint draw void draw file cw cowboy java package cw public class cowboy extends icon icon public void duel draw int draw valid conventional java source code demonstrates java built package scoping 
rule ensures superclass relationships consistent connections prevents subclassing relationships hidden 
class visible sink environment exported imported unit contains sink 
rule ensures subclassing relationships true locally unit true globally correct unit compositions allowing subclass relationship hiding accommodate class hiding 
open class pattern section relies subclass relationship hiding intermediate classes open class construction hidden units import fixed classes 
rule depends method scoping checks method collisions methods visible class signatures 
explain method scoping detail section 
discuss type checking presence methods section 
method scoping method collision occurs methods conflicting types visible class 
visible source sink environments check connections rule methods collide visible scope 
important order reject method collisions modularly presence mixins method scope accounted 
considering method scope method collision occurs conventional non jiazzi java code 
draw exists introduces draw 
package scoping java code valid 
draw methods visible enclosing package lack public protected access declarations 
class different package scopes methods overlap ambiguity occurs 
observation similar riecke stone elaborated vouillon respect class typing 
protocol implemented jiazzi unit scopes 
rule consider methods hidden class signatures 
method mentioned class signature imported file cw sig signature cw icon class cowboy extends icon icon void duel int draw file icon sig signature icon class icon extends object void paint void draw file cw sig signature cw icon class cowboy extends icon icon void duel file icon sig signature icon class icon extends object void paint file mix cowboy unit atom mix cowboy import icon icon export cw cw icon file cowboy wrong unit compound cowboy wrong import icon icon export cw cw icon local cw mix cowboy link icon cw icon cw cw cw cowboy wrong creates method collision 
class hidden unit method mentioned class signature exported class hidden outside unit 
hiding establishes method scopes methods exist overlapping scopes collide 
cases method scope explicitly eliminate accidental method collisions wrapping units compounds 
atom mix cowboy exports class cowboy 
unit instance created mix cowboy connected compound cowboy wrong 
imported compound contains method collision occurs wrong rejected 
rewriting cowboy programmer wrap compound hide draw mix cowboy shown 
hide draw hides public interface draw right 
situations programmer expose pair colliding methods clients draw methods may need visible cowboy client programmer choose 
jiazzi ambiguous methods resolved scope composition rejected method collisions 
file hide draw unit compound hide draw import icon icon export cw cw icon local cw mix cowboy link icon cw icon cw cw cw file cowboy right unit compound cowboy right import icon icon export run run local cw hide draw link icon cw icon cw cw cw hide draw hides unwanted method allowing composition right 
moby contrast allows ambiguous methods exposed scope leaves complexity resolution caller 
methods addition instance methods subclassing java language features expressed class signatures 
instance fields static methods static fields checked instance methods 
constructors matched directly source class inherited 
checking methods deserves extra discussion 
concrete virtual methods method class interface hidden class signature 
non subclass class described class signature contain hidden methods 
restriction multijava open classes reason :10.1.1.100.5370
need upgrade libraries java allows methods unimplemented concrete classes 
successive versions java core libraries added methods existing classes compare initial current version class java awt graphics 
java method invoked implementation raise runtime error 
jiazzi requirement concrete classes methods conflicts java binary compatibility support 

implementation current implementation jiazzi consists stub generator offline linker operates class files 
linker performs unit level type checking rewrites class files form binary forms units 
binary forms units create unit instances compound loaded java virtual machine jvm 
class file constant pools contains symbols rewritten linker need parse inspect bytecode instructions method bodies 
class file features debug attributes important compatibility existing java development tools preserved rewritten class files 
compounds linked class file symbol rewriting update imported classes class files connections compounds rename classes hidden exported compound 
class file rewriting establish method scopes 
method scopes dependent unit boundaries class package boundaries depend built jvm mechanisms delineate method scopes runtime 
class file rewriting renames hidden methods 
accidental collisions occur valid constructions renaming applied multiple unit compositions distinct methods remain uniquely named 
run time performance penalty due units arises duplication binary forms units linking 
single unit create different unit instances lead binary bloat negative performance effects due instruction cache native compilation 
hand units different contexts optimized independently 
example method scoping method calls units linked 
symbols java class files easily rewritten symbols referred java native methods 
java native method bound method name method containing class 
changing name class method breaks connection 
classes native methods contained units 
renaming interferes uses java reflection api symbols referred runtime 
linked unit loaded linked directly jvm 
linking primarily performed class loader refer class loader linking contrast jiazzi linking described far 
exported classes unit appear normal java classes loaded available class loader 
compared jiazzi linking class loader linking fragile 
class imports bound classes differ classes compiled type checked 
description classes originally compiled provided jiazzi unit signature type checking class loader linking implemented jvm incremental program analysis constraints runtime checks checking methods implemented invoked 
currently component programs jiazzi combination jiazzi class loader linking 
classes standard language library object string strongly tied language linked class loader 
depend reflection native methods class libraries jiazzi components 

related techniques concepts jiazzi explored previously core component model derived program units jiazzi method scoping rules resemble riecke stone vouillon :10.1.1.127.1416
contribution jiazzi demonstrating techniques combined define practical component system java applies statically typed object oriented languages 
doing solved type challenge left open findler flatt :10.1.1.127.1416
language unit component system java 
language extension components objects import export methods types 
components class values 
moby structurally typed object oriented language supports ml style modules 
methods hidden modules object types created modules propagate hidden methods type 
hidden method invoked explicitly specifying originating class type 
moby subclassing relationships implicitly typing method invocations module applications create method collisions allowed 
resolve ambiguous methods moby relies object view coercion explicitly coerce type expression class superclasses 
moby support cyclic linking modules 
mixins pioneered clos 
jam extends java language mixins 
module system objective caml supports external class connections 
classes defined modules classes form mixins 
objective caml permit class supplied component functor provide methods required component 
theoretical module calculus java 
supports import export classes cyclic module linking 
consider situations imported classes inherit exported classes 
supports subclassing module boundaries extra methods provided imported class explicitly hidden resulting subclasses contain hidden methods 
jiazzi open class pattern provides modular way add features classes object oriented systems 
odersky addresses similar problem class adaptability adding views objects 
view unnamed function adds methods fields existing class 
views implemented separate compilation 
multijava java language extension addresses adding new methods fields existing classes open classes :10.1.1.100.5370
new methods added class scoped compilation units 
separate compilation supported clients class explicitly choose scopes view 
possible new compilation units multijava add new methods classes execution begins contrast jiazzi new methods fields added units undergoes link time construction 
separation concerns subject oriented programming address issues separating class features separate modules 
feature oriented programming role components individual mixin structures decompose designs feature hierarchies 
approach similar open class pattern mixin layers 
individual mixins mixin layers provides constructs apply mixins multiple classes 
java layers implementation mixin layers java 
jiazzi provide solution configuration runtime behavior component systems com corba javabeans 
components design time configure runtime behavior provide solution system deployment 
configuration code versus runtime behavior address reusability different times granularities 
jiazzi complements component systems 
example bean javabeans exists set java classes contained inside jiazzi unit 

design implementation jiazzi enhances java externally linked hierarchical separately compiled components 
jiazzi support mixin constructions cyclic linking allows open classes simulated leading clean functional decomposition features programs 
jiazzi change existing java development practice programs written java language execute conventional java virtual machines 
finished jiazzi core component model initial implementation enhancing jiazzi areas providing integrated support open classes jiazzi adding flexibility component composition providing control method scopes hiding methods add support online linking components metaprogramming protocol allows configuration component linking runtime statically jiazzi component language integrating jiazzi closely jvm class loader linking bytecode duplication avoided allow reflection native methods inside components 
expect areas improvement revealed gain experience jiazzi build large systems 
implementation jiazzi java available download www cs utah edu plt jiazzi 
acknowledgments don batory richard craig chambers eric eide robby findler kathleen fisher alastair reid patrick anonymous reviewers comments drafts 
sean supported part wilson hsieh full nsf career award ccr 
matthew flatt supported darpa contract 

jiazzi homepage 
www cs utah edu plt jiazzi 
ancona zucca 
jam smooth extension java mixins 
proc 
ecoop pages june 
ancona zucca 
true modules java classes 
proc 
ecoop appear 
bracha cook 
mixin inheritance 
proc 
oopsla pages oct 
lin 
comparing frameworks layered refinement 
proc 
icse pages may 
clifton leavens chambers millstein :10.1.1.100.5370
multijava modular open classes symmetric multiple dispatch java 
proc 
oopsla pages oct 
findler flatt :10.1.1.127.1416
modular object oriented programming units mixins 
proc 
icfp pages sept 
fisher reppy 
design class mechanism moby 
proc 
pldi pages may 
fisher reppy 
extending moby inheritance subtyping 
proc 
ecoop pages june 
flatt felleisen 
units cool modules hot languages 
proc 
pldi pages may 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
gosling joy steele bracha 
java language specification second edition 
addison wesley reading mass 
harrison ossher 
subject oriented programming critique pure objects 
proc 
oopsla pages nov 
javasoft sun microsystems javabeans components api java 
jdk documentation java sun com products jdk docs guide beans 
keene 
object oriented programming common lisp programming guide clos 
addison wesley 
leroy doligez emy vouillon 
objective caml system documentation user manual 
caml inria fr ocaml 
liang bracha 
dynamic class loading java virtual machine 
proc 
oopsla oct 
lindholm yellin 
java virtual machine specification second edition 
addison wesley reading mass 
odersky 
objects views components 
proc 
workshop state machines pages mar 
omg 
corba iiop specification edition 
formal document 
www omg org technology documents formal htm 
prehofer 
feature oriented programming fresh look objects 
proc 
ecoop pages june 
riecke stone 
privacy subsumption 
theory practice object systems 
rogerson 
inside com 
microsoft press 

basic model typed components 
proc 
ecoop pages june 
smaragdakis batory 
implementing layered designs mixin layers 
proc 
ecoop pages june 
szyperski 
component software object oriented programming 
acm press addison wesley new york 
notkin 
role components implement designs 
proc 
oopsla pages oct 
vouillon 
combining subsumption binary methods object calculus views 
proc 
popl pages jan 
feldman 
sealed calls java packages 
proc 
oopsla pages oct 
