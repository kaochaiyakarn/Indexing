published journal parallel distributed computing 
entropia architecture performance enterprise desktop grid system andrew chien stephen bhatia entropia pacific heights suite san diego ca entropia com exploitation idle cycles pervasive desktop pc systems offers opportunity increase available computing power orders magnitude 
desktop pc distributed computing widely accepted enterprise systems achieve high levels efficiency robustness security scalability manageability unobtrusiveness openness ease application integration 
describe entropia distributed computing system case study detailing internal architecture philosophy attacking key problems 
key aspects entropia system include binary sandboxing technology security unobtrusiveness layered architecture efficiency robustness scalability manageability open integration model allow applications sources incorporated 
typical applications entropia system includes molecular docking sequence analysis chemical structure modeling risk management 
applications come diverse set domains including virtual screening drug discovery genomics drug targeting material property prediction portfolio management 
cases applications scale thousands nodes dependences tasks 
representative performance results applications illustrate high performance linear scaling capability entropia system 
key words grid computing distributed computing high throughput computing scientific computing affiliated department computer science engineering university california san diego ucsd gilman drive la jolla ca preprint submitted elsevier science november years largest computing systems world distributed computing assembly large numbers pc internet 
grid systems sustain multiple continuously aggregating hundreds thousands millions machines demonstrate utility resources solving surprisingly wide range largescale computational problems data mining molecular interaction financial modeling systems come called distributed computing systems leverage unused capacity high performance desktop pc machines multi capabilities highspeed local area networks mbps gbps switched large main memories mb gb configurations large disks gb disks 
distributed computing systems leverage installed hardware capability lower performance pc achieve cost unit computing return investment superior cheapest hardware alternatives factor 
result distributed computing systems gaining increased attention adoption enterprises solve largest computing problems attack new problems unprecedented scale 
focus enterprise distributed computing 
terms distributed computing high throughput computing desktop grids synonymously refer systems tap vast pools desktop resources solve large computing problems 
number years significant element research commercial computing community working technologies grid computing 
systems typically involve servers desktops fundamental defining feature share resources new ways 
view entropia system desktop grid provide massive quantities resources naturally integrated server resources enterprise grid 
tremendous computing resources available distributed computing new opportunities harnessing enterprise quite challenging 
system operate environments extreme heterogeneity machine hardware software configuration network structure individual network management practice 
primary function resources desktop desktop word processing web information access spreadsheets resources exploited effecting desktop user productivity 
achieve high degree utility distributed computing systems capture large number valuable applications 
effort required deploy application system way secures application data executes minimal 
course systems support large numbers resources thousands millions computers achieve promise tremendous power requiring administrators 
entropia system provides solutions desktop distributed computing challenges 
key advantages entropia system ease application integration new model providing security unobtrusiveness application client machine 
provide rapid application integration entropia uses binary modification technology provide strong security guarantees ensure unobtrusive application execution 
systems require developers modify source code custom apis simply rely application behaved provide weaker security protection 
possible get access application source code especially commercially available applications regardless maintaining multiple versions source code require significant ongoing development effort 
relying intentions application programmers commonly applications quite time times exhibit anomalous behaviour 
entropia approach ensures large base potential applications high level control application execution 
remainder includes brief history distributed computing led large scale distributed computing systems section key technical requirements distributed computing platform section entropia system architecture implementation including key elements addresses technical requirements section description typical applications performance entropia system section 
conclude briefly perspective potential distributed computing section 
background idea distributed computing described pursued long computers connected networks 
early justifications arpanet described sharing computational resources national network motivation building system 
mid ethernet invented xerox parc providing high bandwidth local area networking 
invention combined alto workstation opportunity distributed computing parc worm result 
early academic projects developed distributed computing systems supported unix systems 
condor project best known widely 
early distributed computing systems focused developing efficient algorithms scheduling load balancing fairness 
systems provided special support security unobtrusiveness particularly case misbehaving applications 
furthermore manage dynamic desktop environments limited allowed application execution incurred significant management effort machine 
approximately time scientific computing community began move large expensive supercomputers relatively inexpensive unix workstations late low cost pc hardware 
time clusters inexpensive pcs connected high speed interconnects demonstrated rival supercomputers applications 
systems provided clear evidence pc deliver serious computing power 
growth world wide web www exploding popularity internet created new larger scale opportunity distributed computing 
time millions desktop pc connected wide area networks enterprise home 
number machines potentially accessible internet distributed computing system grew tens millions systems time 
scale resources millions types systems windows pc laptops typical ownership individuals enterprises management intermittent connection operation gave rise new explosion interest new set technical challenges distributed computing 
scott george search large prime numbers task considered synonymous largest supercomputers 
effort great internet mersenne prime search gimps running continuously years machines participating discovered th th th th th mersenne primes largest known prime numbers 
discovered november digits length 
gimps project project taken entropia startup distributed computing 
group distributed net pursued number cryptography related distributed computing projects period 
best known internet distributed computing project seti home began rapidly grew machines typically active time 
early internet distributed computing systems showed aggregating large scale resources possible resulting system resources single supercomputer certain class applications 
projects single application systems difficult program deploy sensitive communication computation characteristic application 
simple programming error cause network links saturated servers overloaded 
current generation distributed computing systems number commercial ventures provide capability run multiple applications collection desktop server computing resources 
systems evolving general compute platform 
providing tools application integration robust execution focus systems 
grid technologies developed research community focused issues security interoperation scheduling communication storage 
cases efforts focused unix servers 
example vast majority globus legion activity done unix servers 
systems differ significantly entropia system address issues arise desktop environment including dynamic naming intermittent connection untrusted users address range challenges unique windows environment major variants predominant desktop operating system 
requirements distributed computing distributed computing systems collection computing resources heterogeneous hardware software configurations distributed corporate network aggregate single easily managed resource 
distributed computing systems fashion ensures little detectable impact computing resources purposes respect various management resources resources single robust resource 
specific requirements distributed computing system include efficiency system harvest unused cycles efficiently collecting virtually resources available 
entropia system gathers desktop cycles unused desktop user applications 
robustness system complete computational jobs minimal failures masking underlying resource network failures 
addition system provide predictable performance users despite unpredictable nature underlying resources 
security system protect integrity distributed computation 
tampering disclosure application data program prevented 
distributed computing system protect integrity computing resources aggregating 
distributed computing applications prevented accessing modifying data computing resources 
scalability system scale large numbers computing resources 
large numbers pc deployed enterprises scaling relevant capabilities 
systems scale upward downward performing reasonable effort variety system scales 
manageability system involving thousands hundreds thousands entities provide management administration tools 
typical rules thumb requiring administrator systems unacceptable 
believe distributed computing systems achieve manageability requires incremental human effort clients added system 
crucial part manageability client crucial computing resources state identical running application running application 
unobtrusiveness system typically shares resources computing storage network resources systems corporate environment 
result resources unobtrusive competition non aggressive 
distributed computing system manage resources interfere primary desktops networks activities 
includes due system activities driven distributed computing application 
openness ease application integration fundamentally distributed computing system platform run applications 
number variety utility applications supported system directly affects utility 
distributed computing systems support applications developed kinds models distinct needs minimal effort 
believe criteria represent key requirements distributed computing systems 
entropia system architecture entropia system addresses key requirements described aggregating raw desktop resources single logical resource 
logical resource reliable secure predictable despite fact underlying raw resources unreliable machines may turned rebooted insecure untrusted users may electronic physical access machines unpredictable machines may heavily desktop user time 
logical resource provides high performance applications parallelism respecting desktop user desktop machine 
furthermore logical resource managed single administrative console 
addition removal desktop machines entropia system easily achieved providing simple mechanism scale system organization grows need computational cycles grows 
support execution large number applications support execution secure manner entropia employs proprietary binary sandboxing techniques enable win application deployed entropia system modification source code special system support 
users entropia system existing win applications deploy entropia system matter minutes 
significantly different early large scale distributed computing systems seti home competing systems require rewriting recompiling application source code ensure safety robustness 
enabling applications openness ease application integration requirement detailed section ways naturally conflicts security unobtrusiveness requirements 
requirement aims broaden set applications run distributed computing system allow applications integrated little burden 
may include applications originally designed run distributed computing setting applications may fragile development 
running applications thousands tens thousands desktop clients may violate requirements regarding security unobtrusiveness 
requirements necessarily restrict actions application impose constraints operate reducing set applications suitable distributed computing 
entropia approach application integration process known sandboxing automatically wrap application virtual machine technology 
application program submitted entropia system execution automatically sandboxed virtual machine 
application entropia system executes sandbox allowed access modify resources outside sandbox 
application completely unaware fact restricted sandbox interaction operating system automatically mediated entropia virtual machine 
mediation layer intercepts system calls application ensures complete control application interaction operating system desktop resources 
standard set resources mediated include file system access network communication registry access process control memory access 
job management resource scheduling physical node management entropia server user job management desktop clients fig 

architecture entropia distributed computing system 
physical node management layer resource scheduling layer span servers client machines 
job management layer runs servers 
non entropia job management systems system 
technique allows entropia system support arbitrary applications written programming language compiled windows executables java fortran third party shrink wrapped software common scripting languages 
source code required binary sandboxing supports broadest range applications possible little effort 
time sandbox mediates application execution system call level provides finegrain control system desktop resources applications 
layered architecture entropia system architecture composed separate layers see 
bottom physical node management layer provides basic communication naming security resource management application control 
top layer resource scheduling layer provides resource matching scheduling fault tolerance 
users interact directly resource scheduling layer available apis alternatively users access system job management layer provides management facilities handling large numbers computations files 
entropia provides implementation job management layer implementations developed needed top resource scheduling layer 
briefly describe layers describe advantages approach achieving robust scalable distributed computing resource 
physical node management distributed computing environment presents numerous unique challenges providing reliable computing capa bility 
individual client machines control desktop user manager 
shutdown rebooted ip address changed 
machine may laptop computer disconnected long periods time connected pass traffic network firewalls 
physical node management layer entropia system manages low level reliability issues 
addition communication naming physical node management layer provides resource management application control security 
resource management services capture wealth static dynamic information physical node physical memory cpu speed disk size available space client version data cached reporting centralized node manager system console 
application control services provide basic facilities process management including file staging application initiation termination error reporting 
ensures nodes recovered runaway applications detects terminates misbehaving applications detects reports damage software client installation 
security services employ range encryption binary sandboxing technologies protect distributed computing applications underlying physical node 
application communications data protected high quality cryptographic techniques 
binary sandbox controls operations resources visible distributed applications physical nodes order protect software hardware underlying machine 
sandbox controls usage resources memory disk network distributed computing application 
resource scheduling distributed computing system consists resources wide variety configurations capabilities 
resource scheduling layer accepts units computation user job management system matches appropriate client resources schedules execution 
despite resource conditioning provided physical node management layer resources may unreliable application may unreliable execution 
resource scheduling layer adapt changes resource status availability failure rates considerably higher traditional cluster environments 
meet challenging requirements entropia system support multiple instances heterogeneous schedulers 
layer provides simple abstractions administrators automate majority administration tasks reasonable defaults allow detailed control desired 
job management distributed computing application involves large amounts computation thousands millions cpu hours submitted single large job 
job broken large number individual subjobs submitted entropia system execution 
job management layer entropia system responsible decomposing single job subjobs managing progress job providing access status generated subjobs aggregating results subjobs 
layer allows users submit single logical job example monte carlo simulation parameter sweep application database search algorithm receive output single logical output 
details decomposition execution aggregation handled automatically 
layer approach provides wealth benefits system capability ease users administrators internal implementation 
physical node management layer manages complexities communication security naming allowing layers operate simpler abstractions 
resource scheduling layer deals unique challenges breadth diversity resources need deal wide range lower level issues 
resource scheduling layer job management provides job decomposition aggregation basic data management facilities convenient scalable web interface 
implementation section provide implementation details entropia system architecture layers scenario illuminate function part 
shows high level view entropia system annotated interactions components 
describe components interaction 
step user interacts entropia system submitting job 
job represents application collection inputs run application data 
call independent set inputs subjob unit assigned client machines 
job manager application registered advance consists application binary pre processor post processor 
datasets may registered advance 
registration requirement sending subjobs directly resource scheduling layer 
job manager job manager responsible pre post processing job submitting subjobs created subjob scheduler making sure subjobs corresponding job complete timely fashion 
job submission interface users specify application data files priority attributes clients needed run job 
application user submits entropia system step consists win binaries dll visual basic scripts 
binaries submitted application automatically sandboxed provide secure safe environment execution subjob client 
addition job management resource scheduling physical node management user job manager subjob scheduler node manager computation resource resource description entropia clients fig 

application execution entropia system 
user submits computation job manager 
job manager breaks computation independent subjobs submits subjobs subjob scheduler 
mean time available resources client periodically reported node manager informs subjob scheduler resource descriptions 
subjob scheduler matches computation needs available resources schedules computation executed clients 
results subjobs sent job manager aggregated handed back user 
visual basic scripts dos functions automatically executed inside sandbox 
application dependent pre processor step break job subjobs 
pre processing may simple enumerating list parameters application creating subjob set parameters complex running program split database number slices subjob 
subjob submitted subjob scheduler 
subjob scheduler subjob scheduler responsible scheduling subjobs clients robust execution 
subjob scheduler maintains list clients allowed run subjobs 
list decorated attributes client connectivity currently connected client status availability run subjob static client attributes amount memory client os type 
sandbox application single command takes application executables associated dll creates new sandboxed versions 
authenticate user system 
submit subjob specifying input files including executables libraries output files resource requirements including minimum memory disk processor speed run time priority script 
optionally check subjob status 
process output files subjob complete 
fig 

minimal steps submitting application entropia system 
information schedule subjobs effectively 
boxes hole center inside subjob scheduler represent client machines attributes assigned subjob scheduler 
step illustrates scheduler assigning subjobs clients ensuring client attributes satisfy subjob requirements 
example user specifies job needs minimum megabytes memory job subjobs assigned clients amount memory 
subjob scheduler maintains priority queues subjobs run entropia grid 
subjobs submitted scheduler placed queue appropriate priority determined priority associated job 
subjob scheduler schedule subjobs thousands clients 
provide scalability larger number clients provide subjob scheduler fault tolerance additional schedulers added configuration serve job manager 
subjob scheduler responsible providing fault tolerance insuring progress completion identifying faulty subjobs 
provided set policies 
priority subjob increased assigned client reasonable amount time 
subjob rescheduled run different client client disconnected long fails return result expected amount time 
subjob fails complete number tries subjob marked faulty returned job manager 
job manager choose re submit subjob notify user 
subjob assigned client step send subjob description security information subjob client step 
running subjob step files transferred client file server accessed network 
advantageous cache executable data files application job run times entropia system 
caching files provides scalability manageability reducing network traffic 
step subjob execution invoke user provided script orchestrate starting subjob executables 
subjob runs access machine resources controlled monitored entropia binary sandbox ensure subjob unobtrusive behaved stays resources client machine available 
systems resource scheduling assumes dedicated resources 
case desktop distributed computing environment 
subjob completes execution client notifies subjob scheduler step 
problem subjob may resubmitted deemed failed subjob 
regardless subjob scheduler notifies job manager step success failure running subjob 
job manager provides interface monitor progress job subjobs 
specified fraction subjobs complete results post processed 
example post processing phase filter results find top result 
step user retrieves results job desired subjob 
deployment management entropia grid clients managed node manager shown 
entropia client installed machine registers specified node manager step 
registration includes providing list client attributes 
attributes passed subjob scheduler node manager assigns subjob manager list available clients step 
node manager provides centralized interface manage clients entropia grid accessible enterprise network 
interface allows administrator easily monitor add remove restart clients 
node manager tracks status machines 
includes connectivity client performed client issues problems specific client 
interface designed provide scalable management vast numbers clients requiring minimal effort client added grid 
desktop client goal desktop client harvest unused computing resources running subjobs unobtrusively machine 
subjobs run low process thread priority 
sandbox enforces low priority processes threads created 
second desktop client monitors desktop usage machine resources entropia system 
desktop usage high client pause subjob execution avoiding possible resource contention 
resources monitored client include memory disk usage paging process thread allocation subjob 
pausing subjob remedy situation termination subjob may necessary 
third desktop client provides security client machine mediating subjob access file system registry graphical user interface 
prevents subjob processes doing harm machine ensures subjob execution machine state running subjob 
sandboxed desktop execution provide sandboxed environment binary modification intercept important windows api calls 
allows complete control application interaction desktop machine 
application resource usage control desktop environment important sure amount resources application consumes interfere usage desktop machine 
example application uses memory available machine spawns significant number threads machine unresponsive user interaction possibly crash 
prevent behavior entropia system automatically monitors limits application usage variety key resources including cpu memory disk threads processes application attempts resources entropia sandbox pause terminate application processes 
entropia sandbox guarantees strict control processes created running application 
protecting desktop machine controlling monitoring application resource usage application interaction desktop machine strictly controlled prevent adversely affecting desktop user machine configuration network 
control prevent application misbehavior due software bugs inappropriate input parameters misconfiguration virus 
entropia sandbox isolates grid application ensures invoke inappropriate system calls inappropriately modify desktop disk registry system resources 
sandbox application access usage system resources registry file system 
ensures modification resources redirected entropia sandbox 
sandbox prevents applications maliciously accidentally causing harm desktop resources modify desktop registry file system 
protection application modify system user files erase reformat desktop machine hard drive 
example power technique consider file system access application application uses standard windows api opening closing reading writing file 
protect desktop user application sandbox automatically maps file directory structure application ensure files read written remain entropia sandbox 
application may believe reading writing directory program files fact writing sandbox directory deep entropia software installation 
application running desktop pc grid computing system needs access subset windows operating system calls 
windows operating system provides rich set api functionality focused application interaction user external devices 
example windows api calls displaying graphics playing music logging user shutting machine 
functions invoked application definitely disturb desktop user 
entropia sandbox prevents grid application accessing parts windows api cause inappropriate interactions desktop machine user 
top requirement departments state desktop machine remains unchanged executing application 
requirement departments allow deployment desktop pc grid computing system inside enterprise 
entropia control application sandbox guarantees requirement met 
application protection protection application data important aspect security grid computing 
important sure users examine contents application data files tamper contents files application run desktop machine 
application protection needed ensure integrity results returned running application protect intellectual property data processed produced 
entropia sandbox keeps data files encrypted disk contents accessible non entropia applications 
addition sandbox automatically monitors checks data integrity grid applications data result files 
ensures accidental intentional tampering removal grid application files desktop users detected resulting rescheduling subjob client 
application performance section describe applications performance applications running entropia system 
application characteristics early adoption distributed computing technology focused applications easily adapted high demands met traditional approaches cost technology reasons 
applications called high throughput applications large capacity provides new kind capability 
applications exhibit large degrees parallelism thousands hundreds millions little coupling stark contrast traditional parallel applications tightly coupled 
high throughput computing applications ones capable limited amdahl law 
believe widespread availability distributed computing encourage reevaluation existing algorithms find novel uncoupled approaches ultimately increasing number applications suitable distributed computing 
example monte carlo stochastic methods inefficient conventional computing approaches may prove attractive considering time solution 
describe application types successfully distributed computing virtual screening sequence analysis molecular properties structure financial risk analysis 
discuss basic algorithmic structure computational concurrency perspective typical run sizes computation communication ratio 
common characteristic applications independent evaluation megabytes data requiring minutes cpu time 
virtual screening successful early applications virtual screening testing hundreds thousands millions candidate drug molecules see alter activity target protein results unhealthy affects 
commercial drugs address targets top selling drugs addressing 
current estimates place number genes gene encoding proteins percent considered high value targets 
testing typically involves assessing binding affinity test molecule specific place protein procedure commonly called docking 
docking codes matched distributed computing candidate molecule evaluated independently 
amount data required molecular evaluation small basically atomic coordinates molecules essential results smaller binding score 
computation molecule ranges seconds tens minutes average pc 
coordination overhead reduced bundling sets molecules increasing rigor evaluation 
low thresholds set initial scan quickly eliminate clearly unsuitable candidates remaining molecules evaluated rigorously 
entropia experience numerous docking codes generally deploy new codes hour job manager win executable available 
sequence analysis application area suited distributed computing involves dna protein sequence analysis applications including blast programs fasta wise smith waterman 
cases sequence set sequences compared sequence set sequences evaluated similarity 
sequence sizes vary comparison independent 
sets millions sequences gigabytes partitioned thousands slices yielding massive parallelism 
compute client receives set sequences compare size database enabling calculate expectation values properly final composite result 
simple model allows distributed computing version return results equivalent serial job execution 
distributing data manner achieves massive input output concurrency reduces memory requirements run sequence analysis programs hold data memory 
entropia experience number commonly sequence analysis applications including blast versions smith waterman 
uses different comparison algorithm blast usually compute intensive smith waterman compute intensive 
blast developed solve genomic related problems solving problems proteomics area exponentially growing processing requirements 
molecular properties structure demand structure property information combinatorial chemistry libraries means heavy demand molecular modeling programs gaussian jaguar 
programs deployed data parallel mode similar docking data parallelism arises independent molecule evaluations 
case evaluation time molecule may hours days 
algorithms principles solving physical laws equation 
memory mb disk gigabytes requirements programs require deployment machines sufficient resources 
fortunately desktops meet requirements 
entropia successfully demonstrated ability codes evaluate large libraries molecules 
results fed back large corporate databases may contain millions compounds 
financial risk management risk management essential element financial institution 
monte carlo methods evaluate wide range possible outcomes number samples evaluated direct impact reliability results achieved 
widely commercial packages typically evaluate samples falling short number needed achieve seed independence result independent starting point 
increases number samples increased model complexity increase accuracy results 
application sample simulation independent executed distinct processor achieve massive parallelism 
entropia distributed computing employed range risk analysis applications significantly increase accuracy monte carlo modeling results completing analysis results timely fashion 
demand scalability interesting aspects distributed computing applications scalability 
computational demands applications scales rapidly increasing data sets algorithm complexity met anytime soon 
result scalability offered distributed computing viable solution 
applications discussed problems scale hundreds thousands processors typical cases scaling thousands processors 
table shows latent demand applications 
problems easily require processors hour turnaround required 
example pharmaceutical libraries potential drug molecules tested sets thousands proteins 
large scale sequence analysis problems involve comparisons case sequences amino acids 
molecular structure property problem thorough evaluation combinatorial library molecules sets 
risk management problem rigorous daily analysis credit card accounts 
data required case megabytes 
interestingly executing large decoupled applications avoid common bottlenecks traditional parallel computing 
example load balancing problem small problems large ones 
large problems longest unit small fraction time total job requires leads efficient tiling regardless heterogeneity system 
note distributed computing powerful table application requirements area problem subjobs minutes subjob nodes hour virtual mol 
vs screening proteins sequence aa vs analysis properties evaluate mol 
structure risk sim 
management credit cards processors 
systems processors solve problems times faster single machine 
speedups transform week long runtime hour 
compute intensive problems believe benefits distributed computing dramatic transform modeling design computations drive business research 
experimental results managing heterogeneous volatile grid difficult challenge 
gantt chart illustrates typical behavior encountered production enterprise environments 
illustrates number challenges addressed physical node management layer 
gantt chart depicts activity nodes entropia distributed computing system horizontal line corresponds client machine marked black node executing subjob white 
chart depicts execution docking program evaluating molecules partitioned slices molecules 
subjob works slice processes molecules 
start subjob indicated dot 
nodes start subjob soon completed looks continuous line dots 
blanks occur subjobs run 
may node longer available variety reasons turned offline network problems 
minute mark system administrator added nodes grid 
effect similar job finished nodes available job 
node number started stopped nodes hr slices subjobs elapsed time min 
fig 

gantt chart depicting activity nodes enterprise environment 
triangles indicate node deliberately stopped 
vertical bands node result centrally administered system upgrades required reboot 
note application progress preserved case 
gaps scattered plot due network outages machines turned proper shutdown machines suspected misbehaving requesting returning results 
caused wide variety conditions ranging hardware software os failure 
subjob failed rerun node successfully complete job 
ideally job required subjobs complete case required 
additional subjobs caused reboots result variation subjobs execution time 
order ensure jobs completed timely fashion system initiate redundant subjobs molecules completed minute docking throughput molecules elapsed time minutes nodes nodes fig 

molecule completed versus time runs grid size nodes 
subjob failed return anticipated period determined user 
technique trades plentiful resources improvement average job completion time 
job average subjob ran minutes range varied widely seconds minutes 
subjobs ran anticipated limit minutes 
distribution actual subjob execution times reflecting application variability node speed heterogeneity available cycles variability shown mixed grid data points 
average subjob execution time mixed grid minutes standard deviation minutes variance 
shown distribution subjob running mhz pentium iii processor 
average subjob completion time mhz environment minutes standard deviation minutes variance 
distribution typical applications subjobs complete near average time significant numbers subjobs complete quickly slowly 
smoothness artifact values sorted size second resolution displayed scale 
slow subjobs challenge scheduling algorithms discern subjobs simply slow failed 
processors example pentium ii iii machines clock speeds ranging mhz ghz running different versions subjobs mhz average std 
dev 
variance mode subjob completion time subjobs mixed grid average std 
dev 
variance mode mixed grid constituency mhz mhz mhz completion time minutes fig 

distribution subjob completion times docking code 
service packs windows nt versions windows 
application code mixture fortran developed sgi irix environment required changes related porting win environment 
additional code written preand post processing data 
application performance assess delivered application performance range system sizes variety calculations docking molecules environment described processors 
graph shows resulting application throughput molecules completed minute time case processors 
takes approximately minutes length average subjob steady state producing results reached quite variable due variations size individual subjobs 
node job started nodes reached nodes minutes 
average throughput node case molecules minute molecules minute node case 
startup finishing phases discounted calculating throughput 
plotting throughput runs molecules varying number nodes compounds minute job job compound throughput scalability job processor mhz linux cluster job job processor mhz sgi number nodes job job job job fig 

scaling entropia system throughput virtual screening application 
produced graph shown 
demonstrates clearly linear scaling observed applications discussed 
points representing throughput processor sgi system processor linux cluster included calibration demonstrate high levels absolute performance achieved 
summary futures distributed computing potential revolutionize largescale computing achieved 
easy distributed computing seamlessly available accessed applications access dramatically computational power fuel increased functionality capability 
key challenges acceptance distributed computing include robustness security scalability manageability unobtrusiveness openness ease application integration 
entropia system architecture consists layers physical node management layer resource scheduling job scheduling 
architecture provides modularity allows layer focus smaller number concerns enhancing system capability usability 
system architecture provides solid foundation meet technical challenges distributed computing matures supporting broadening problems increasing breadth computational structure resource usage ease application integration 
described implementation entropia system number applications 
implementation includes innovative solutions areas particularly areas security unobtrusiveness application integration 
system applicable large number applications discussed virtual screening sequence analysis molecular modeling risk analysis 
application domains excellent linear scaling demonstrated large distributed computing systems 
expect extend results number domains near 
despite significant progress documented believe see mass distributed computing 
robust commercial systems entropia available widespread industry adoption technology 
writing confident years distributed computing deployed production majority large corporations research sites 
acknowledgments gratefully acknowledge contributions talented engineers architects entropia design implementation entropia system 
specifically acknowledge contributions scott shawn marlin wayne schroeder jon anderson ed definition development system architecture 
acknowledge dean wilson fong mike may contributions applications benchmarking understanding performance data 
lyman intel ghz pentium chip news factor jan 
foster kesselman globus project status report ipps spdp heterogeneous computing workshop 
grimshaw wulf legion vision worldwide virtual computer communications acm 
peer peer computing technologies sharing collaborating net intel press 
sun microsystems jxta www jxta org 
foster grid blueprint new computing infrastructure morgan kaufmann 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations international journal supercomputer applications 
entropia entropia announces support open grid services architecture press release entropia 
feb 
united devices platform www ud com 
platform computing load sharing facility www platform com 
litzkow livny condor technical summary technical report department computer science university wisconsin madison wi january 
heart mckenzie walden arpanet completion report technical report bbn jan 
worm programs early experience distributed computation communications acm 
hogg huberman kephart stornetta spawn distributed computational economy ieee transactions software engineering 
litzkow remote unix turning idle workstations cycle servers proceedings summer usenix conference usenix assoc phoenix az usa pp 

litzkow livny mutka condor hunter idle workstations th international conference distributed computing systems san jose ca usa pp 

delisle utopia load sharing facility large heterogeneous distributed computer systems software practice experience 
sunderam pvm framework parallel distributed computing concurrency practice experience 
chien pennington buchanan connelly giannini koenig krishnamurthy liu design evaluation windows supercomputer international journal high performance computing applications 
sterling beowulf cluster computing linux mit press 
gray internet growth summary mit 
entropia researchers discover largest multi digit prime entropia distributed computing grid press release entropia 
dec 
great internet mersenne prime search 
distributed net fastest computer earth 
sullivan new major seti project project data personal computers astronomical biochemical origins search life universe entropia www entropia com 
www com 
systems portable batch system www org 
thayer genomics moves chemical engineering news oct 
kramer lengauer evaluation incremental construction algorithm protein ligand docking proteins structure functions genetics 
fred fast rigid exhaustive docking 
morris halliday hart belew olson automated docking lamarckian genetic algorithm empirical binding free energy function journal computational chemistry 
ewing kuntz critical evaluation search algorithms automated molecular docking database screening journal computational chemistry 
jones willett glen molecular recognition receptor sites genetic algorithm description journal molecular biology 
davies think department chemistry oxford university 
eldridge murray auton empirical scoring functions development fast empirical scoring function estimate binding affinity ligands receptor complexes journal computer aided molecular design 
eisenstein molecular surface recognition determination geometric fit proteins ligands correlation techniques proceedings national academy science usa 
roberts surveying molecular interactions dot supercomputing acm san diego 
bohm automatic design accessible protein ligands peptides journal computer aided molecular design 
altschul gish miller myers lipman basic local alignment search tool journal molecular biology 
altschul madden zhang zhang miller lipman gapped blast psi blast new generation protein database search programs nucleic acids research 
gish states identification protein coding regions database similarity search nature genetics 
madden zhang applications network blast server methods 
zhang madden new network blast application interactive automated sequence analysis annotation genome research 
eddy profile hidden markov models biological sequence analysis wustl edu 
thompson higgins gibson improving sensitivity progressive multiple sequence alignment sequence weighting positions specific gap penalties weight matrix choice nucleic acids research 
pearson lipman improved tools biological sequence comparison proceedings national academy science usa 
wise intelligent algorithms dna searches www sanger ac uk software wise 
smith waterman comparison advances applied mathematics 
frisch trucks schlegel gaussian gaussian 

schmidt gordon jensen nguyen su montgomery general atomic molecular electronic structure system journal chemistry 
schrodinger jaguar www schrodinger com products jaguar html 

