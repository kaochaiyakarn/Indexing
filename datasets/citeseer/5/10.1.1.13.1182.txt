accepted publication math 
struct 
comp 
science comparing expressive power synchronous asynchronous calculi palamidessi department computer science engineering pennsylvania state university pond lab university park pa usa cse psu edu received february 
revised may 
asynchronous calculus proposed honda tokoro independently boudol subset calculus milner contains explicit operators choice output prefixing 
communication mechanism calculus powerful simulate output prefixing shown honda tokoro boudol input guarded choice shown nestmann pierce 
natural question arises expressive full calculus 
show case 
precisely show exist uniform fully distributed translation calculus asynchronous calculus reasonable notion equivalence 
result asynchronous calculus break certain symmetries possibly initial communication graph 
similar arguments prove separation result calculus ccs calculus calculus internal mobility subset calculus proposed sangiorgi output actions transmit private names 

communication fundamental concepts concurrent distributed computation kinds synchronous asynchronous focus distinction synchronous asynchronous 
synchronous communication usually understood simultaneous exchange information partners real life example telephone contrast asynchronous communication action sending message action reading supported nsf eia 
course communication telephone thought simultaneous transmission time negligible wrt clock partners reasonable assumption partners humans 
palamidessi usually take place di erent times 
example email 
advantages disadvantages methods known costly requires partners synchronize establish communication established ective 

motivations question arises naturally mechanisms equivalent implement 
direction simple principle asynchronous communication simulated inserting pair communicating agents bu er process see instance milner direction contrary clear researchers field radically di erent opinions 
motivation arises attempt solving clarifying question 
author opinion crucial point mechanisms available combination synchronous communication processes choices information exchange simultaneously synchronous communication intuitively powerful 
intuition supported example people try take common decision email telephone act way send time identical mails react way read agreement may reached 
calculus milner convenient framework study problem 
fact calculus synchronous paradigm contains asynchronous fragment boudol honda tokoro 
uniform context 
important asynchronous calculus richest paradigm asynchronous communication concurrency introduced far negative result regarding language significant 

background asynchronous calculus di ers calculus lack choice output prefix operators 
underlying model interaction processes calculus communication rule handshaking simultaneous execution complementary actions 
reason considered asynchronous due lack output prefix output action written parallel activities 
precisely calculus write represent process performs output channel continues afterward write represent process performs depending particular kind asynchronous communication implementation complicated instance order messages sent maintained need fifo bu er definition process requires guarded nondeterminism 
unordered communication just need bag defined input output replication 
synchronous vs asynchronous calculus input continues afterward 
calculi input output actions parameters names simplicity omit 
furthermore restriction operator enforce synchronization processes proceed communication takes place 
point view sender attempt perform output provokes suspension execution matching input action reception resumes continuation point asynchronous calculus contrary write sender process form parallel operator 
performed parallel output action automatically suspend sender primitive notion continuation point 
think process performs output unspecified moment handshaking moment message received 
reception enables continuation point receiver cause directly resumption activity sender course ect output prefix simulated implementing rendezvous mechanism receiver sends reception message acknowledgment sender sender waits receives acknowledgment 
kind technique fact boudol define encoding output prefix asynchronous calculus 
technique may surprising appeal novelty encoding consists elegant primitives link mobility translation defined compact fully compositional way 
independently honda tokoro proposed encoding compact fully compositional receiver takes initiative synchronizing sender 
probably fair say part success asynchronous calculus early days due encoding honda tokoro 
important factor course implemented relatively simple natural way 
implementation asynchronous calculus version called pict developed pierce turner 
encodings boudol honda tokoro output prefix combination choice operator 
subsequent honda tokoro showed encoding choice operator simple case local aka internal blind choice 
nestmann pierce showed input guarded choice encoded compositionally asynchronous calculus result fundamental contribution rmation asynchronous calculus practically useful paradigm input note kind communication unordered equivalent modulo silent actions bag process fresh name 
nestmann pierce interested obtaining called fully translation proposed kinds encoding 
fully wrt weak bisimulation see instance milner introduces divergences 
second fully wrt weaker relation called coupled simulation parrow divergence free 
refer second encoding take point view notion encoding relate expressive power languages introduce divergences 
palamidessi guarded choice considered convenient mechanism programming concurrent systems allows process suspend alternative input channels resume soon receives datum 
language feature busy waiting risk process stuck forever wrong channel 
implementations languages csp hoare hoare instance provide construct primitive 
nestmann pierce showed input guarded choice represent gap expressive power authors presentation asynchronous calculus includes construct operator language see instance boreale sangiorgi amadio 

slight modification translation nestmann pierce combined translation boudol provide encoding output prefix input guarded choice 
calculus ers possibility partners communication choices 
consider instance process ready send data alternatively channels assume process ready receive data alternatively calculus specified way choose arbitrarily select wrong channel 
precisely need specification called separate choice construct output guarded choice input guarded choice 
construct implemented asynchronous calculus 
clearly implement backtracking wrong attempts third process coordinate activities nestmann showed surprising result possible encode mechanism introducing divergences arise backtracking loops fully distributed way introducing coordinator processes 

contribution point may doubt interesting cases inter process coordination expressible calculus expressed asynchronous calculus 
fact 
consider modification previous example process ready output input alternatively process ready output input alternatively 
calculus simply called mixed choice construct define enforce communication apparently example similar previous fundamental di erence symmetric initial action previous example initially send receive 
encoding nestmann uses protocol send receive play completely di erent roles 
show general possible simulate behavior asynchronous calculus calculus separate choice 
intuitively reason agreement communication channel represents situation initial symmetry broken achieved language synchronous vs asynchronous calculus supports separate choice 
proving result techniques field distributed computing 
particular show certain symmetric networks possible separate choice calculus solve leader election problem guarantee processes reach common agreement elect leader finite amount time 
possible contrary solve problem mixed choice calculus 
technique inspired showed similar separation result concerning csp hoare hoare fragment csp input guards csp mixed choice calculus richer language csp result derived result 
interestingly proved csp encoded choice free fragment similar techniques 
result hold context calculus shown mentioned result nestmann pierce 
section go details relation 
question investigate extent calculus powerful ancestor ccs milner 
sake homogeneity consider value passing version ccs input output actions carry value parameters messages 
language call ccs vp seen subset calculus relabeling operator see section 
main di erence calculus messages names communication channels allowing change dynamically structure communication graph link mobility 
combination mixed choice link mobility powerful feature coordination distributed activities allows remote processes originally directly connected establish direct communication link take decision basis synchronous exchange information technique similar existence non existence certain symmetric electoral system show capability mixed choice calculus strictly expressive ccs vp consider expressiveness language calculus internal mobility proposed sangiorgi 
subset mixed choice calculus parameters output actions private names 
restriction enjoys pleasant properties symmetric rules input output simpler theory bisimulation equivalence 
boreale shown asynchronous version essentially expressive asynchronous calculus 
encoding idea main sending non private name calculus process send link intermediate process communicate directly send send private names 
mechanism simulated installing receives messages send viceversa 
intuitively idea presence mixed choice choice tests possibility communication guard selects corresponding branch single atomic step 
encoding boreale communication atomic anymore atomicity guarded choice mechanism palamidessi trivially encoded target language supports richer notion choice choice depending possibility performing sequence actions single action 
argument similar illustrated ccs vp show fact mixed choice calculus encoded 
notion encoding discussion existence non existence encoding criterion compare expressive power languages 
various encodings literature satisfy di erent structural semantic requirements 
properties notion encoding basis defining concept expressive power 
definitive answer 
context interested proving negative results non existence encoding consider minimal set requirements 
specifically require encoding uniform homomorphic wrt parallel operator renaming preserving sense permutation names domain source language exists permutation names domain target language semantically reasonable preserving relevant observables termination properties 
conditions defined precisely section 
requirement homomorphism wrt parallel operator ensures parallel processes translated parallel processes coordinator added translation 
interpret requirement condition degree distribution processes maintained translation 
condition notion encoding suitable compare expressiveness languages distributed systems processes expected coordinate help centralized control 
requirement renaming preserving ensures translation depend channel names 
condition natural want encoding preserve portability processes nodes distributed network 
encodings discussed satisfy criteria uniformity reasonableness possible exception encoding boreale preservation reasonable semantics open question 
boreale fact shown correctness encoding wrt barbed bisimulation sensitive internal loops 
note palamidessi stronger condition 
realized condition strong instance problematic new names translation 
synchronous vs asynchronous calculus 
calculus hierarchy summarizes results discussed introduces terminology full calculus proposed milner 
calculus choice operator free sense apply arbitrary processes 
instance write stands mixed choice subset occur prefixed processes called guarded choice operator 
say mixed choice emphasize fact input output silent prefixes guarded choice 
omit match mismatch operators 
languages lower part diagram traditionally operators result non encoding weaker 
general results obtained independent presence absence 
internal mobility calculus introduced sangiorgi language output prefix written context restriction operator yx denoted characteristics uses recursion iteration 
accidental context iteration strictly expressive recursion 
contrary recursion encoded iteration milner 
rest subset milner encoding recursion extends naturally encoding 
ccs vp represents value passing ccs relabeling operator 
value passing means actions parameters parameters channels actions 
consider values simply symbols consider operators values part language value passing ccs subset relabeling operator operator exist pugliese encoded 
reason consider relabeling operator 
worth noting non encoding ccs vp depend absence relabeling operator see section 
stands separate choice subset prefixes choice kind plus possibly guarded choice input output action 
represents input choice subset output prefix input actions choice 
input actions 
nc stands subset choice output prefix 
asynchronous calculus subset nc output prefix 
encodings obvious identity encodings holding language superset 
non trivial encodings proposed nestmann pierce proposed nestmann represents encodings proposed honda tokoro boudol milner encoding recursion iteration 
non encodings palamidessi nc uniform reasonable encoding uniform reasonable encoding identity encoding open problem nc calculus internal mobility calculus value passing ccs mixed choice calculus separate choice calculus input choice calculus calculus asynchronous calculus fig 

calculus hierarchy 

encoding open problem 
free choice construct match mismatch operators add expressive power 
result may obtainable weak requirements notion encoding 
shows variants calculus encodings separation results investigated literature 
considered ones opinion relevant issues investigated 
exhaustive overview variants expressive power recommend excellent book sangiorgi walker 

organization rest organized follows section recalls basic definitions 
section reformulates setting calculus notions symmetric electoral system 
section shows main result non existence symmetric electoral systems asynchronous calculus 
section discusses existence symmetric electoral systems synchronous case calculus ccs vp section synchronous vs asynchronous calculus interprets previous results non results 
section discusses related concludes 

relation previous version preliminary version appeared palamidessi 
principal differences version main separation result previously shown mixed choice calculus asynchronous calculus 
show separation lies exactly mixed choice separate choice proved indirectly combining result palamidessi result nestmann 
give proof separation calculus ccs vp 
palamidessi proof sketched 
show additional separation result calculus similar calculus ccs vp 
consider weaker condition notion encoding strengthen separation results 

preliminaries section give definitions notion hypergraph represent communication structure network processes 

mixed choice calculus mixed choice calculus 
subset calculus match mismatch operators free choice restricted guarded choice 
note papers adopt presentation calculus coincides see instance boreale sangiorgi sangiorgi 
countable set names 
set prefixes set calculus processes defined syntax prefixes xy processes xp prefixes represent basic actions processes input formal name channel xy output name channel stands silent non communication action 
process represents guarded global choice usually assumed finite 
abbreviations inaction represent empty sum prefix represent sum element binary sum 
symbols restriction parallel replication operator respectively 
indicate structure process expression conventions 
stands 

parallel operator left associative stands prefix operator precedence 
cases ambiguity parentheses 
palamidessi operators binders processes xp occurrences considered bound usual rules scoping 
set free names names occur scope binder denoted fn 
alpha conversion bound names defined usual renaming substitution defined result replacing occurrences possibly applying alpha conversion avoid capture 
operational semantics specified transition system labeled actions 
grammar actions xy xy action xy corresponds input prefix formal parameter instantiated actual parameter see rule sum table 
action xy correspond output free name 
bound output introduced model scope extrusion result sending process private bound name 
bound names action bn defined follows bn bn xy bn xy bn 
furthermore indicate names occur literature definitions transition system calculus induce called early late bisimulation semantics respectively 
choose early strong bisimulation semantics coarser late 
notion reasonable semantics coarser strong bisimulation separation result early transition system significant 
rules early semantics table 
congruence rule cong simplify presentation 
define congruence follows obtained alpha conversion notation ii xp fv scope expansion 
presentation labeled transition system calculus coarser definition obtained adding structural axioms commutativity see instance milner 
presentations sangiorgi define alpha conversion congruence rule form reasons choose intermediate definition suitable prove main theorem section 
way systems consider structured need symmetric axiom scope expansion 

separate choice calculus separate choice calculus subset output input prefixes guarded choice 
restriction specified synchronous vs asynchronous calculus sum xy sum xy open xy yp res yp yp par bn fn com xy xy close xy fn rep cong table 
early instantiation transition system symmetric versions par com close omitted 
modification grammar xy processes xp operational semantics described rules table 
palamidessi 
hypergraphs automorphisms section recall definition hypergraph generalizes concept graph essentially allowing edge connect nodes 
hypergraph tuple finite sets elements called nodes edges hyperedges respectively type function assigns set nodes representing nodes connected notation 
indicate 

concept graph automorphism extends naturally hypergraphs hypergraph automorphism pair permutations preserve type edges 


easy see composition automorphisms defined componentwise automorphism 
identity pair identity functions id id id 
easy show set automorphisms composition forms group 
orbit generated defined set nodes various iterations map 
represents composition times id possible show orbits generated constitute partition say automorphism balanced orbits cardinality 
example 
illustrates various hypergraphs 
hypergraphs correspond standard graphs sense edges connects nodes 
define balanced automorphisms single orbit nodes orbits nodes orbits nodes course identity balanced automorphism hypergraph case orbits cardinality 
hypergraph nodes edges connecting nodes 
hypergraph balanced automorphism apart identity orbits cardinality 
hypergraph nodes edges connecting nodes 
hypergraph balanced automorphism identity central node incident edges node incident edges 
synchronous vs asynchronous calculus edge connecting nodes edge connecting nodes node edge connecting nodes fig 

examples hypergraphs 

electoral symmetric systems section adapt calculi simplified version notions electoral system symmetric network 

election leader network need introduce concepts network network computation projection computation component network 
network represents system parallel processes possibly top level applications restriction operators 
di erence notion network process network want represent explicitly intended distribution 
instance process associativity convention write may interpreted network parallel processes network parallel processes formally network defined tuple form 
xn 
processes meant run parallel names meant globally bound bound top level system 
precisely network meant represent process 
xn 
convenient assume bound names 
di er palamidessi ent 
xn free names bound names convention 
process notation represent network convention write expression mean network constituted exactly processes 
denote process form 
xn specific bound names relevant simply represent network 

computation network possibly infinite sequence transitions 






note computation step may need apply cong rule right side transition order maintain bound names convention keep bound names di erent free names maintain parallel structure network 
fact transition generated close rule group set processes scope restriction operator need cong rule axioms scope expansion bring restriction operator top level re establish number components represent computation infinite sequence 
process 

relation extends defined usual exists cc identifying occurrences 
denote continuation note definition infinite computations extended 
consistent fact admit infinite transfinite computations 
projection proj defined contribution computation 
formally proj sequence synchronous vs asynchronous calculus steps 

definition depends proof tree generates transition step 

active transition contains node form note process active transition case involved communication step premise rule com close case communication action 
note may di erent may contain lower level application cong rule 
di er presence restriction operators renaming 
idle transition contain node form empty empty 
note notation proj accurate projection function sequence proof trees generate distinction inessential 
order define notion electoral system assume existence special channel communicating external world free unbound 
furthermore assume set names contains special subset equipped mapping natural numbers identify individual processes network 
sake simplicity shall denote names directly natural numbers keep mind just notation adding arithmetical capability calculus 
assume loss generality names bound names 
intuitively electoral system property possible run processes agree sooner leader communicate decision external world special channel 
definition 
electoral system network 
electoral system computation exists extension palamidessi exists 
leader 
projection proj contains output action form extension contains action form note system infinite computation contain output actions process extended 

symmetric networks order define notion symmetric network consider communication structure represent hypergraph 
intuitively nodes represent processes edges represent communication channels connecting processes 
definition 
hypergraph associated network network 
hypergraph associated 
fn 
fn pn 
extend notion automorphism networks take account special names process identifiers role binders top level 
definition 
network automorphism network 
xn 
hypergraph associated automorphism automorphism satisfies additional conditions coincides remember set natural numbers natural numbers assumed represent special subset names 
preserve distinction free bound names 
xn 
xn fact coincide intersection domains simplify notation represent 
slight abuse notation hypergraph denote domain set intuitively network symmetric respect automorphism process associated node identical modulo alpha conversion process obtained renaming process associated node notion renaming obvious extension standard notion renaming see preliminaries 
formally process apply alpha conversion rename bound names fresh ones extend identity new synchronous vs asynchronous calculus names define structural induction indicated 
xy xp furthermore need define application actions 
xy definition 
actions xy ready give formal definition symmetric network definition 
symmetric network consider network 
associated hypergraph automorphism say symmetric wrt node holds 
say symmetric symmetric wrt automorphisms 
note symmetric wrt symmetric wrt powers 

non existence symmetric electoral systems section result says certain communication graphs possible write symmetric network solving election problem 
need show enjoys certain kind confluence property lemma 
process assume transitions zw stands output action bound unbound xy 
exists zw see 
proof observe free names rule produced transition sum open res par rep cong 
cases assumption transition 
repeating reasoning descending tree arrive leaf transition form xy analogously rule produced zw transition sum res palamidessi psi psi zw zw fig 

illustration lemma 
par rep cong 
cases assumption zw transition 
repeating reasoning descending tree arrive leaf transition form parallel processes subprocess form modulo represent contexts usual definition 
furthermore transition zw transition obtained application rule par subprocess 
applying rule par plus rules trees zw transitions obtain transitions zw 
ready prove non existence result 
intuition attempt reach agreement leader processes symmetric network break initial symmetry communicate 
communication repeated lemma symmetry pair processes network 
result transitions lead symmetric situation 
infinite computation processes succeed break symmetry means leader elected 
theorem 
consider network 

assume automorphism orbit symmetric wrt 
electoral system 
proof assume contradiction electoral system 
show construct infinite increasing sequence computations 
contain action form symmetric wrt automorphism orbit obtained adding associations new names introduced computation eliminating associations names disappeared 
synchronous vs asynchronous calculus gives contradiction limit sequence infinite computation contain action form prove statement induction 
order understand proof important notice orbit 


define empty computation 
contains processes symmetric wrt orbit automorphism show construct new orbit automorphism contains processes symmetric wrt electoral system possible extend computation contains actions particular 

observe action component performs action 
contain subprocess symmetry contain subprocess 
furthermore free assumed numbers bound names 
extension action occurs 
implies hypothesis electoral system generate orbit 
contradiction 
action di erent di erent situations depending transition generated move process communication processes involves com close rule 
transition result move process part proof order simplify notation assume loss generality 

symmetry 

assume loss generality component performs step step symmetry fact 
mimic step derive palamidessi transitions 
form 
bound names convention respected 
bound names di erent free names processes bound names convention need conversion 
property compose displayed transitions computation 

equal free output action case argument may bound due restrictions top level remains show construct orbit automorphism symmetric wrt 
purpose need distinguish various cases depending case 

simply define restricted edges nodes 


case define restricted 

di erent bound free name components define follows undefined note defined 
synchronous vs asynchronous calculus occur bound 
observe generates orbit symmetric wrt new occurred 
choose transitions 

case define restricted 
contrary new choose transitions 
new 
possible early semantics instantiate input action arbitrary name 
proceed case 
transition results communication processes part proof specific property illustrated lemma 
interesting case agents di erent nodes communication graph 
agents inside node say transition proceed previous case 
processes transitions complementary 
assume loss generality input action output action 
generates orbit exists 

assume simplicity relatively prime write consider case step produced application com rule 
transition symmetry 
lemma transitions define symmetry complementary combine transition rest proof replaced pk rq palamidessi 
repeatedly applying reasoning obtain 
observe transition derive 
kr id defined 
compose transitions closing circle obtain composition displayed transitions gives intended continuation 

define 
observe restricted automorphism symmetric respect 
note may di er edges may disappeared com rule may extended set nodes share certain edge 
contain new edges com transmits free names corresponding existing edges 
define restriction 
consider case step obtained application close rule 
transition form name transmitted communication 
rea assumption relatively prime orbit 
drop assumption replace smallest pk rq computation constructed involves processes nodes 

complete computation repeat reasoning orbits 

sloppy notation processes permuted indexes increasing order 
synchronous vs asynchronous calculus obtain transitions 
note bound names convention di erent free variables 
combine transitions cong rule scope expansion push restriction operators top level network obtaining derivation 

note may contain additional edges names occur occur free 
need expand automorphism accordingly 
done defining exactly 
easy see orbit symmetric wrt 
restrictive notion symmetry considered proving negative results 
automorphism orbits provided cardinality balanced 
framework significant generalization language considered csp parallel operator top level 
condition single orbit impose parallel processes network code modulo renaming 
framework contrary restriction mentioned generalization essential 
fact easily extend theorem balanced automorphisms corollary 
consider network 
assume associated hypergraph admits balanced automorphism id symmetric wrt 
electoral system 
examples hypergraphs balanced automorphisms hypergraphs 
nodes filling represent nodes orbit 
proof corollary idea transform network balanced automorphism network orbit automorphism grouping nodes orbit single node 
example hypergraphs transformed hypergraphs respectively 
palamidessi fig 

examples hypergraphs balanced automorphisms transformation hypergraphs orbit automorphisms 
assume generates orbits cardinality assume loss generality 
belong di erent orbits 



qp define processes 



qp synchronous vs asynchronous calculus consider network 

clearly generate computations strongly bisimilar associated hypergraph di erent abstraction sense certain nodes grouped node explained 
note may contain names corresponding non existing nodes 
eliminate consider renaming 
qp 
defined div result integer division define 
easy see traces projections modulo renaming 
hypergraph nodes course 

edges edges minus 
qp 
note edges internal nodes transformed graph represented 
consider pair 
restricted 
easy see automorphism orbit symmetric wrt 
observe electoral system electoral system apply theorem 

existence symmetric electoral systems negative result previous section apply mixed choice construct fact possible establish simultaneous agreement processes breaking symmetry 
note presence mixed choice invalidates confluence property lemma 
consider example election problem symmetric network consisting nodes private edges connecting 
calculus specification solves problem sum modulo 
argument relevant actions argument 
note electoral system simple automorphism orbit theorem expressed happens hypergraph complicated 
claim existence symmetric electoral systems guaranteed large number cases claim 
connected hypergraph pair nodes connected sequence edges 
exists symmetric electoral system 
remember symmetric means symmetric wrt possible automorphism hypergraph 
palamidessi fig 

hypergraph connected fully connected pairs nodes directly connected edge 
claim substantiated idea electoral algorithm number nodes 
generic process executes broadcast private name processes possible connectivity hypothesis receive private name process way hypergraph fully connected 
repeat times choice guard output action input actions 
certain point input selected go 
point reached leader 
broadcast information processes output terminate 
wait receive name leader 
send terminate 
note algorithm works assumption process knows total number processes network 
di cult argument formal keeping general details algorithm broadcast private name depend structure hypergraph 
proving separation results languages su cient show solve symmetric electoral problem hypergraph suitably chosen 
consider simple hypergraph 
proposition 
hypergraph illustrated 
exists symmetric electoral system proof define idea illustrated 
broadcasts private name nodes receives private names nodes phase 
process uses compete election second phase 
phase algorithm define intuitively represents process receives names left neighbor synchronous vs asynchronous calculus fig 

evolution hypergraph running phase algorithm code described 
channel sends names right neighbor channel way name sent names received left neighbor 
way name broadcasted processes 
point natural define problem output may available consumed right neighbor may receive incorrect order relevant name received intended retransmitted times second intended retransmitted times 
order solve problem need output actions 
idea similar honda tokoro encoding output prefix 
replace action pair actions xy followed wy xw fresh name 
definition follows symbols represent sum di erence modulo respectively 
purpose perform second phase algorithm compete election 
meaning superscript clear 
time reaches point original hypergraph evolved fully connected hypergraph illustrated 
note longer occur 
interestingly phase algorithm syntax calculus version ccs vp calculus version ccs vp mean language obtained ccs vp replacing restriction operator ccs vp calculus obvious changes kind 
describe 
stated purpose compete palamidessi election 
node tries dominate nodes sending messages channel time sends message node say nodes dominated dominated superscript initially indicates additional nodes needs dominate winner 
obviously winner succeed dominate nodes 
point executes tells name winner name node channel outputs name 
note order know winner su cient keep track number nodes dominates order sends message node message new name sends back new name names communicate number nodes dominates outputting times time correspondingly executes part receives inputs input course symmetry need possible lose competition 
alternative output node try receive input nodes channels 
input actions succeeds dominated exits competition 
point executes dominator new name purpose described number nodes currently dominates instructions waits receive name winner winner channel sends name 
preliminary version error number nodes currently dominated calculated adding time doing output error pointed peng wu corrected author way described 
note corresponding code tuned case nodes 
peng wu coded algorithm case arbitrary rings counters verified program mobility workbench model checker 
synchronous vs asynchronous calculus definition follows zs ss 
ss times zs note code renaming corresponds structure hypergraph symmetric wrt automorphism hypergraph 
contrast phase algorithm second phase displayed syntax syntax analogous process written ccs vp hypergraph symmetric electoral problem solved languages 
general believe problem solved ccs vp fully connected graph 
claim 
fully connected hypergraph pair nodes connected directly edge 
exists symmetric electoral system ccs vp di cult prove claim general wrt fully connected hypergraph precise steps algorithm depend structure hypergraph 
section investigate limitations ccs vp showing class hypergraphs symmetric electoral problem solved languages 

non existence symmetric electoral systems ccs vp mechanisms name passing scope extrusion possible calculus extend dynamically communication structure network palamidessi essential solution electoral problem illustrated proposition 
fact shall see part solution completes hypergraph expressed ccs vp general ccs vp express solution symmetric electoral problem hypergraph 
intuitively problem symmetry broken long direct connection channel symmetric nodes nodes orbit 
ccs vp way create new direct connection nodes case sharing channel 
theorem 

network ccs vp associated hypergraph admit balanced automorphism id symmetric wrt exist electoral system 
example network represented automorphism defined 
clearly balanced orbits cardinality 
note hypotheses theorem satisfied edge 
proof theorem proof analogous theorem construction infinite computation leader elected 
suppose certain step computation evolved leader elected symmetric wrt balanced automorphism satisfies hypotheses theorem 
consider step reasons explained proof theorem step form cases transition result move process assume loss generality process move 
move symmetry construct derivations 
cardinality orbits constructed adding associations new names intro synchronous vs asynchronous calculus duced transitions proof theorem 
note balanced coincides processes orbit 
processes define composing transitions get non empty sequence transitions 
contain observe symmetric wrt transition results communication processes crucial part proof distinguishes ccs vp interesting case communicating processes di erent nodes 
assume loss generality partners communication 
note hypothesis processes orbit connected di erent orbits 
consider case 
communication derive rule close output actions form 
assume loss generality sender communication action 
symmetry 
distinct distinct free names bound names convention defined 
orbit orbit define 

cong rule scope expansion combine transitions computation note symmetric wrt di ers presence new edges nodes connected edge 
existing edges changed type nodes connected edge connected edge 
palamidessi case ccs vp proof analogous 
crucial point objects communications values 
communication channels steps computation 
uniform encoding section results show non asynchronous subsets ccs vp certain requirements notion encoding 
agreement notion encoding ad unique notion depending purpose 
reasonable require properties compositionality preservation intended semantics 
distributed system reasonable strengthen notion compositionality parallel operator requiring translated way ensure translation maintains degree distribution system introducing additional processes coordination functions 
likewise reasonable require encoding behaves wrt renamings permutation names domain source language exists permutation names domain target language call uniform encoding satisfies 
concerning notion semantics call reasonable semantics distinguishes processes exists maximal finite infinite computation intended observables visible actions di erent observables maximal computation intended observables actions performed channel 
note condition satisfied semantics insensitive infinite loops weak bisimulation coupled bisimulation 
corollary 
exist uniform encoding preserving reasonable semantics 
case notion hypergraph associated network slightly di erent distinguish edges represent channels edges represent values communication channels 
scope extrusion bisimilarity law 
synchronous vs asynchronous calculus proof uniformity preserves symmetry reasonable semantics distinguishes electoral system non electoral 
apply theorem proposition 
note hypergraph proposition orbit automorphisms 
corollary 
exist uniform encoding ccs vp preserving reasonable semantics 
proof analogous theorem proposition 
note hypergraph proposition balanced automorphisms satisfying conditions theorem 
note relax condition imposing just generic compositionality generic context non results hold anymore 
fact give encoding form 
yn monitor process coordinates activities interacting fresh channels 
yn translation network 
pn tree leaves monitors nodes 
disadvantage solution distributed implementation contrary centralized 

discussion non existence results hold disregard unfair computations 
proof theorem fact slightly modified construction consider time di erent process network 
way limit sequence fair computation 
theorems correspond theorems csp csp respectively 
main di erence results dealing richer languages 
particular calculi ccs vp admit parallel operator inside process just top level case csp csp versions considered processes network strictly sequential 
leads essential di erence 
proof shows network get stuck attempt elect leader output action csp sequential prefix computation leads output action repeated processes brings global deadlock 
proof contrary shows system run forever reaching agreement output action occurs processes execute corresponding output action generating infinite computation breaks symmetry 
di erence calculus network evolve dynamically 
reason theorem hold shown theorem 
feature complicates proof theorems take account evolution automorphism 
palamidessi parallel operator free constructor usually enhances significantly expressive power language 
instance essential implementing choice restricted form 
fact shown possible encode csp csp sublanguage csp input output guards choice nestmann pierce shown calculus input guarded choice embedded calculus choice 
crucial point parallel operator allows represent main characteristic choice simultaneous availability guards 
sangiorgi walker cite separation result slightly di erent semantic condition fn maximal computation contains exactly action subject maximal computation contains exactly action subject strictly speaking condition separation result follow theorem 
problem notion electoral systems requires processes execute action leader elected 
requirement corresponds imposing processes eventually know winner standard condition notion electoral system literature 
considered simpler permissive notion electoral system obtained requiring definition contains action form performed presumably winner 
results remain valid new notion electoral system way separation result proved wrt variant semantic condition 
way interpret results mixed choice really di cult mechanism implement 
possibility achieve fully distributed symmetry preserving implementation probably randomized techniques 
francez rodeh proposed randomized implementation csp solution fully satisfactory robust wrt adverse scheduling strategies 
currently investigating probabilistic extension purpose called pa palamidessi 
shown pa possible express solution leader election problems solvable encouraging 
people stimulating insightful discussions castellani pat lincoln dale miller uwe nestmann prakash panangaden benjamin pierce rosario pugliese julian davide sangiorgi scott smolka eugene stark 
special wu peng pointing errors corrected definitions 
furthermore express gratitude anonymous reviewers careful thorough reports helped enormously improve 
editors special issue mscs luca aceto giuseppe longo bjorn victor excellent job editors 
synchronous vs asynchronous calculus amadio castellani sangiorgi 

bisimulations asynchronous calculus 
theoretical computer science 
extended appeared proceedings concur lncs 
boreale 

expressiveness internal mobility name passing calculi 
theoretical computer science 
preliminary version appeared proceedings concur volume lncs 
boreale sangiorgi 

congruence properties calculus 
theoretical computer science 
boudol 

asynchrony calculus note 
rapport de recherche inria sophia antipolis 


existence symmetric algorithms find leaders networks communicating sequential processes 
acta informatica 
francez rodeh 

distributed data type implemented probabilistic communication scheme 
proc 
st ann 
ieee symp 
foundations computer science pages 
hoare 

theory synchrony asynchrony 
broy jones editors programming concepts methods proc 
ifip wg working conf 
programming concepts methods pages 
north holland 
palamidessi 

probabilistic asynchronous calculus 
tiuryn editor proceedings fossacs part etaps lecture notes computer science pages 
springer verlag 
postscript available cse psu edu papers prob pi fossacs ps 
hoare 

communicating sequential processes 
communications acm 
hoare 

communicating sequential processes 
prentice hall 
honda tokoro 

object calculus asynchronous communication 
america editor proceedings european conference object oriented programming ecoop volume lecture notes computer science pages 
springer verlag 
milner 

communication concurrency 
international series computer science 
prentice hall 
milner 

polyadic pi calculus tutorial 
bauer brauer schwichtenberg editors logic algebra specification pages 
springer verlag 
milner parrow walker 

calculus mobile processes ii 
information computation 
milner parrow walker 

modal logics mobile processes 
theoretical computer science 
nestmann 

encoding guarded choice 
journal information computation 
extended appeared proceedings express volume entcs 
nestmann pierce 

decoding choice encodings 
journal information computation 
extended appeared proceedings concur volume lncs 
palamidessi 

comparing expressive power synchronous asynchronous calculus 
conference record popl th acm sigplan sigact symposium principles programming languages pages paris france 
palamidessi parrow 

multiway synchronization verified coupled simulation 
cleaveland editor concur third international conference concurrency theory volume lecture notes computer science pages stony brook new york 
springer verlag 
pierce turner 

pict programming language pi calculus 
plotkin stirling tofte editors proof language interaction essays honour robin milner 
mit press 
pugliese 

personal communication 
sangiorgi 

calculus internal mobility agent passing calculi 
theoretical computer science 
sangiorgi walker 

calculus theory mobile processes 
cambridge university press 
