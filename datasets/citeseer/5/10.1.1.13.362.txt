categorical manifesto joseph goguen programming research group university oxford sri international menlo park ca tries explain category theory useful computing science giving guidelines applying basic categorical concepts category functor natural transformation limit adjoint colimit comma category 
examples intuition concept completeness attempted 
additional categorical concepts suggestions research mentioned 
concludes philosophical discussion 
tries explain category theory useful computing science 
basic answer computing science young field growing rapidly poorly organised needs help get category theory provide help ffl formulating definitions theories 
computing science difficult formulate concepts results give proof 
guidelines help formulation guidelines measure elegance coherence existing formulations 
ffl carrying proofs 
basic concepts correctly formulated categorical language proofs just happen step natural thing try works 
diagram chasing see section provides examples 
said purpose category theory reduce proofs simple calculations 
ffl discovering exploiting relations fields 
sufficiently formulations reveal surprising connections 
example analogy petri nets calculus suggest looking closed category structure category petri nets 
ffl dealing abstraction representation independence 
computing science viewpoints useful need achieve independence overwhelmingly complex details things represented implemented 
corollary guideline section objects abstractly iff isomorphic see section 
universal constructions adjoints define results uniquely isomorphism abstractly just sense 
research reported supported part science engineering research council national science foundation system development foundation contracts office naval research fujitsu 
ffl formulating conjectures research directions 
connections fields suggest new questions field 
guidelines help guide research 
example interesting functor advised investigate adjoints 
ffl unification 
computing science fragmented having different schools 
badly need kind conceptual unification category theory provide 
category theory abused different styles 
style abuse generality theory example generalised way include new examples genuine interest 
related style abuse categorical overkill language category theory describe phenomena require elaborate treatment terminology 
example describe galois connection language adjoint functors 
category theory called nonsense friends 
phrase suggests category theory relatively form content compared areas mathematics 
friends claim virtue contrast excessive concreteness representation dependence set theoretic foundations relatively poor guidance discovering elegant coherent theories provide 
section discusses 
category theory quite concrete ways categories just algebraic structure generalising monoids partial orders see example 
presents guidelines category theory general discussion specific examples 
claim originality believe underlying intuitions shared essentially workers category theory understandably reluctant place dogmatic assertions textbooks written documents guidelines necessarily imprecise exaggerated taken literally objective facts heuristics applying certain mathematical concepts 
particular may difficult apply impossible situations may need refinement 
reminder taken call 
attempt exhaustive 
particular technical definitions omitted purpose provide intuition definitions textbook 
newcomer category theory need text connection 
unfortunately existing text ideal computing scientists goldblatt comes closest 
classic text mac lane recommended sufficient mathematics background herrlich strecker book thorough see 
gives relatively concrete self contained account basic category theory computing scientists theories equations unification motivation examples 
far know attempt gives guidelines 
attempt know due lambek scott give number similar style 
categories dogma follows species mathematical structure corresponds category objects structure morphisms preserve 
part guideline order understand structure necessary understand morphisms preserve 
category theorists argued morphisms important objects reveal structure really category concept defined morphisms 
bias modern western languages cultures objects relationships accounts see related discussion 
way notation composition identity morphism object examples sets 
take sets objects morphisms clearly going functions 
set morphism just set ordered pairs specify particular source target sets 
consistent practice computation theory assigns types functions 
set theoretic representation functions artifact set theoretic foundations mathematics representations accidental properties concept intended capture 
properties sets ordered pairs composed yield third 
category set sets embodies contrary point view function domain arguments meaningful codomain results meaningful composition functions allowed meaningful sense 
see related discussions 
relations 
just functions desirable take view composition relations meaningful domains match 
may define relation set set triple theta allow composition defined iff gives rise category denote rel set considered subcategory 
graphs 
graph consists set edges set nodes functions give source target edge respectively 
major components graphs sets major components morphisms corresponding functions preserve additional structure 
morphism consists functions diagram commutes set show category graph graphs show composition morphisms pair identity functions satisfies diagrams serves identity composition 
paths graph 
graph path source target node paths composed form path iff source equals target clearly composition associative defined node identity path having edges 
category denoted pa 
details may places 
automata 
automaton consists input set state set output set transition function theta initial state output function mean preserve structure 
major components automata sets major components morphisms corresponding functions preserve structure 
morphism consist functions diagrams commute set theta theta theta fg hj phi phi phi phi fg denotes arbitrary point set point 
shown composition morphisms triple identities satisfies diagrams serves identity composition 
checks show category aut automata simplicity increases confidence correctness definitions 
types 
types classify things dogma form category having types objects course depending classified different categories arise 
simple example finite product types conveniently represented natural numbers morphisms describe called register transfer operations tuples registers 
indicates tuple ht data items registers morphism function ng mg indicating content register transferred register fact identify number set ng category opposite subcategory set denote variant objects finite subsets fixed countable set morphisms opposites functions get opposite subcategory set denoted say registers denoted variable symbols natural numbers 
going little assign sorts set symbols require morphisms preserve sorts 
denote category substitutions 
key attributes substitution set variables substitutes set variables occur substitutes 
substitutions natural source target objects set variables example 
clearly identity substitutions set variables substituting variable composition substitutions associative defined 
get category substitutions morphisms 
theories 
thesis lawvere developed elegant approach universal algebra algebraic theory defined category morphisms correspond equivalence classes terms objects indicate variables involved terms example 
approach theories closed finite products defined example 
lawvere original development unsorted easily extends sorted case ways including called sketches studied gray barr wells example see 
course theories kind form category 
isomorphism simple significant fruit category theory general definition isomorphism suitable species structure morphism isomorphism category iff morphism case objects isomorphic 
established principle algebra fields isomorphic objects abstractly precisely objects structure iff isomorphic object isomorphism class objects 
dogma seen corollary dogma 
provides immediate check structure correctly formalised satisfied objects morphisms wrong 
principle pervasive isomorphic objects considered defined isomorphism 
computing science principle guided successful search right definition data type 
diagram chasing useful way get overview problem theorem proof draw diagrams show main objects morphisms involved 
diagram commutes iff paths source target compositions morphisms paths equal 
fact pasting commutative diagrams common edge yields commutative diagram provides basis purely diagrammatic style reasoning equality compositions 
valid diagrams category proof style widely applicable example applies substitutions example 
extended conventions pushouts uniqueness morphisms certain common situations 
proofs suggested just drawing diagrams known proved 
simple illustration example prove composition graph morphisms graph morphism paste corresponding diagrams morphisms 
functors second dogma says natural construction structures species yielding structures species corresponds functor category species category second 
part dogma construction merely function objects species objects species preserve essential relationships objects including structure preserving morphisms compositions identities morphisms 
provides test construction properly formalised 
course functoriality guarantee correct formulation surprisingly helpful practice 
examples free monoids 
quite common computing science construct free monoid set consists finite strings including empty string construction gives functor category sets category monoids function inducing sending sending 
functor called polymorphic list type constructor functional programming 
behaviours 
automaton behaviour function monoid strings defined defined ux construction functorial 
need category behaviours 
obvious choice objects pairs morphisms pairs diagram commutes set 
denote category beh define aut beh 
functor helps confirm elegance coherence previous definitions 
see 
models 
lawvere approach universal algebra algebra functor theory set 
construction takes meaning interpretation structure interpreted constructed concretely set functors preserve finite products 
generally kind theory models functors set preserve structure theories finite products 
generally take models suitable category finite products finite product preserving functors 
example sorted algebras arise functors theory type system example seen example elements 
forget 
widgets forgetful functor category widgets category 
example group monoid forgetting inverse operation monoid semigroup forgetting identity 
notice ring identity monoid different ways additive structure multiplicative structure 
categories 
course small categories form category functors morphisms 
denoted cat 
diagrams path category construction 
construction example category pa paths graph gives rise functor pa graph cat graphs categories 
diagram category shape graph functor pa conventional write just call functor pa fact fully determined restriction graph morphism see example 
programs program schemes 
non deterministic flow diagram program parallel assignments go arbitrary built data structures including arbitrary functions tests seen functor graph program shape category rel objects sets morphisms relations 
edge corresponds program statement relation gives semantics 
example test natural numbers corresponds partial identity function 
defined iff assignment gamma corresponds partial function 
sending gamma 
semantics input node output node formula fp pa approach originated burstall 
techniques allow programs syntax semantics described program scheme functor theory enriched partial order structure morphism sets reader familiar categories note category 
semantics statements arises giving functor rel interpretation called algebra 
semantics program computed original conference version contains definition 
formula composition rel research done area 
example gives inductive proof principle collections mutually recursive procedures interesting consider program constructions similar setting 
theory interpretations 
extending discussion example interpretation theory theory functor preserves theory structure types finite products 
functors thing theory morphisms 
particular interpretations program schemes course programs arise way 
polymorphic type constructors 
think types functional programming language forming category objects int bool polymorphic type constructors list endofunctors functors set list theta list sending type ff type list ff theta list ff 
naturality third dogma says natural translation construction construction corresponds natural transformation looks mere definition phrase natural translation useful practice 
interesting concept historical origin category theory eilenberg mac lane formalise notion equivalence homology theories definition sense define functors functors sense define categories 
history explains homology theory appears categorical texts ill suited computing scientists 
examples homomorphisms 
indicated lawvere approach universal algebra algebras functors expect homomorphisms natural transformations 
natural equivalence 
natural transformation natural equivalence iff isomorphism 
natural notion isomorphism functors equivalent existence exactly concept motivated eilenberg mac lane context example specialises isomorphism algebras 
data refinement 
graph nodes labelled types edges labelled function symbols seen impoverished lawvere theory equations function symbols argument 
theories admit algebras functors set homomorphisms course natural transformations 
algebras viewed data representations basic data types functions programming language homomorphisms viewed data refinements 
considered connection basic program construction operations language lead general techniques developing correct programs 
interesting extend general variants lawvere theories sorted theories sketches general data representations studied data type literature 
program homomorphisms 
example defines programs functors expect program homomorphisms natural transformations programs 
burstall shows weak form milner program simulations arises just way 
generalised programs may different shapes maps edges paths defining homomorphism consist functor pa natural transformation theory applications including techniques proving correctness termination equivalence unfolding programs equivalent infinite trees 
polymorphic functions 
polymorphic type constructors functors example polymorphic functions natural transformations 
examples include append list list 
list reverse list 
list functor categories 
categories 
category denoted cat objects functors morphisms natural transformations 
particular theory algebras subcategory cat set 
limits fourth dogma says diagram category seen system constraints limit represents possible solutions system 
particular diagram represents physical conceptual system limit provides object projection morphisms represents possible behaviours system consistent constraints 
intuition goes back general system theory applications computing science products 
early achievement category theory give precise definition notion product previously known special cases understood vaguely general concept 
definition due mac lane 
product types 
types parallel composition product category types 
morphism theta takes inputs parallel types returns output type usual assume category types defining kind theory finite products including empty product product factors final object usually denoted 
subcategories set op products disjoint unions set theories 
generalised lawvere theory type system assumed finite products finite product preserving functor surjective objects category finite products 
degenerate cases theory bijective objects assume jt jaj subcategory may identify morphism theories finite product preserving functor preserves algebra theory finite product preserving functor set generally category finite products 
course homomorphisms algebras natural transformations giving category algebras 
get classical unsorted general algebras lawvere form 
sorted get sorted general algebras 
discusses congruences quotients generalised lawvere theories 
equations unification 
think pair morphisms theory equation 
fourth dogma general solution equation equaliser exists 
classical case unsorted obeying laws theories morphisms terms give general unifiers 
general kinds unification arise going general kinds theories example imposing associative commutative laws operations theory leads called ac unification 
theories weak weaken exists unique morphism requirement mere existence 
fact weak formalise classical definition unifiers stronger condition satisfied practice 
generalising system constraints diagram theory general solution limit exists 
examples situation solving systems linear equations polymorphic type inference unification sense unification grammars linguistics solving scott domain equations fixpoints 
examples discussed detail techniques proving unifiers exist 
example justification formula example semantics program 
adjoints fifth dogma says canonical construction species structure corresponds adjunction corresponding categories 
seen just definition canonical construction useful practice 
essence adjoint universal property satisfied value objects 
property says unique morphism satisfying certain conditions 
worth noting right left adjoints functor naturally equivalent adjointness determines construction uniquely isomorphism 
examples products sums 
constructions described intuitively canonical adjoints 
example binary products category give functor pi thetac left adjoint delta thetac diagonal functor sending object pair sending morphism 
thetac 
coproducts called sums iff delta right adjoint 
beautifully simple way formalise mathematical concepts basic importance due mac lane extends general limits colimits 

beautifully simple formalisation gives general definition free constructions left adjoints forgetful functors 
example path category functor pa graph cat example left adjoint forgetful functor cat graph may said give free category graph 
minimal realisation 
automaton reachable iff function surjective 
denote subcategory aut objects reachable morphisms surjective 
restriction beh aut beh right adjoint gives minimal realisation behaviour 
right adjoints uniquely determined provides convenient characterisation minimal realisation 
characterisation extends suggests general minimal realisation situations see 
syntax semantics 
spectacular adjoints syntax semantics algebraic theories due lawvere thesis see 
cartesian closed categories 
cartesian closed category binary products right adjoint functor sending theta remarkable concept turns essentially typed calculus see 
connection example basis efficient compilation higher order functional languages 
advantage optimisation techniques proved correct purely equational reasoning 
kleisli categories 
way generalise lawvere theories view arbitrary adjunction kind theory 
called monads called triples abstraction necessary structure kleisli category monad gives category free algebras 
surprisingly examples 
shows kleisli category generates generalised lawvere theory shows different problems unification solving systems equations naturally formulated finding kleisli categories 
examples include unification order sorted continuous theories 
moggi uses kleisli categories get notion computation gives rise interesting generalisations calculus 
colimits sixth dogma says species structure say widgets result interconnecting system widgets form super widget corresponds colimit diagram widgets morphisms show interconnected 
intuition arose context general systems theory 
may interesting note duality categorical definitions limits colimits suggests similar duality intuitive notions solution interconnection 
examples putting theories specifications 
complexity fundamental problem programming methodology large programs large specifications difficult produce understand get right modify 
basic strategy defeating complexity break large systems smaller pieces understood separately put back give original system 
successful effect takes logarithm complexity 
semantics clear specifications represented theories essentially sense lawvere sorted signatures specifications put colimits category theories 
specifically application generic theory actual computed pushout 
obj foops extend notion generic module functional logic relational object oriented programming combinations 
applied ada 
graph rewriting 
important problem computing science find models computation suitable massively parallel machines 
successful model avoid implementation details particular machines concrete serve intermediate target language compilers 
graph rewriting provides promising area search models colimits quite useful 
graph rewriting important unification grammars popular linguistics 
opportunities research areas 
initiality 
simplest possible diagram empty diagram 
colimit initial object simply explained object unique morphism object 
adjoint determined uniquely isomorphism initial objects category isomorphic course shown directly initiality gives convenient way define entities abstractly 
worth mentioning universality reduced initiality comma category colimits 
initial model semantics 
remarkable initiality useful computing science 
formalisation syntax initial algebra initiality applied increasing range fundamental concepts including induction recursion data types domain equations see computability model theoretic semantics functional logic relational combined functional relational constraint logic programming languages 
interesting involves initiality category model extensions morphisms just models 
general research seen formalising generalising smoothing classical herbrand universe construction interesting done lines 
solving domain equations 
scott presents inverse limit construction solving domain equations records suggestions lawvere clarify construction viewing colimit associated category retracts 
ideas taken generalises partial orders categories shows fixpoints initial algebras things 
key construction colimit infinite sequence morphisms generalising traditional construction 
fixpoint 
comma categories seventh dogma says species structure species structure obtained decorating enriching corresponds comma category functor 
difficult precise intuition hopefully examples help clarify things 
just examples computing science graphs 
categories graph comma categories 
example theta denotes functor set set sending theta category graph example comma category set theta 
labelled graphs 
category graphs forgetful functor set say giving node set graphs set node labels comma category category graphs nodes labelled way decorate edges graphs branches trees 
theories 
category categories finite products finite product preserving functors morphisms type system object category theories 
comma categories basic construction appeared lawvere thesis 
tend arise morphisms objects 
viewing category comma category available general results prove existence limits colimits 
topics particularly fundamental far exhaust richness category theory 
section mentions categorical constructions express surprise examples computing science 
categories 
morphisms usual composition identity source target serve objects higherlevel morphisms 
leads categories category cat categories canonical example natural transformations morphisms morphisms 
concept mentioned example places mentioned 
monoidal categories 
cases category natural notion multiplication usual cartesian product enjoys properties 
category petri nets studied mentioned variety suggests monoidal categories may broadly useful understanding relationships various theories concurrency see 
indexed categories 
strict indexed category just functor op cat 
papers give examples indexed categories computing science gives general theorems including simple sufficient conditions completeness associated grothendieck category 
moggi applies indexed categories programming languages particular shows get kind higher order module facility languages ml 
non strict indexed categories significantly complex foundational studies 
topoi 
profound generalisation idea theory category appears topos notion developed lawvere tierney 
sense notion captures essence set theory 
surprising relationships algebraic geometry computing science intuitionistic logic 
discussion traditional view foundations requires giving system axioms preferably order assert existence certain primitive objects certain properties certain primitive constructions objects objects interest constructed relevant properties derived system 
axioms self evident number simple possible order belief consistency easy possible 
approach inspired classical greek account plane geometry 
best known foundation mathematics set theory successful constructing objects greatest interest mathematics 
failed provide commonly agreed set simple self evident axioms 
example classical formulations set theory frankel vigorous attack nearly years 
debate generalised continuum hypothesis true originally startling proof paul cohen independent widely accepted axioms set theory 
debate axiom foundation asserts infinite sequence sets element fact aczel anti foundation axiom positively asserts existence non founded sets model various phenomena computation including communicating processes sense milner 
think fair say mathematicians longer believe ideal single generally accepted foundation mathematics longer believe possibility finding mathematics 
set theoretic foundations failed provide fully satisfying accounts mathematical practice certain areas including category theory encouraged research areas little mathematical practice large cardinals 
mac lane gives lively discussion issues see overview various approaches foundations 
case attempts find minimal set debatable concepts erect mathematics little direct relevance computing science 
course issue longer urgent new paradoxes discovered long time 
tried show category theory provides number broadly useful surprisingly specific guidelines organising generalising discovering analogies various branches mathematics applications 
wish suggest existence guidelines seen support alternative pragmatic view foundations provide general concepts tools reveal structures interrelations various areas mathematics applications help doing mathematics 
field developed computing science getting definitions right hardest task foundations sense useful suggest research directions may fruitful relatively explicit measures elegance coherence 
successful category theory purposes suggests provides beginnings foundation 
peter aczel 
non founded sets 
center study language information stanford university 
csli lecture notes volume 
michael barr charles wells 
toposes triples theories 
springer 
der mathematischen volume 
michael barr charles wells 
formal description data types sketches 
michael main melton michael mislove schmidt editors mathematical foundations programming language semantics 
springer 
lecture notes computer science volume 
jan brouwer 
uber den 
akademie van te amsterdam proceedings section sciences 
frege godel jean van heijenoort editor harvard pages 
rod burstall 
algebraic description programs assertions verification simulation 
mack adams john johnston richard stark editors proceedings conference proving assertions programs pages 
association computing machinery 
rod burstall joseph goguen 
putting theories specifications 
raj reddy editor proceedings fifth international joint conference artificial intelligence pages 
department computer science carnegie mellon university 
rod burstall joseph goguen 
semantics clear specification language 
bjorner editor proceedings copenhagen winter school software specification pages 
springer 
lecture notes computer science volume unpublished notes handed symposium algebra applications stefan banach center warsaw poland 
pierre luc curien 
categorial combinators sequential algorithms functional programming 
pitman wiley 
research notes theoretical computer science 
hans dieter ehrich 
theory specification implementation parameterization data types 
journal association computing machinery 
hartmut ehrig 
algebraic theory graph grammars 
claus hartmut ehrig gregor rozenberg editors graph application computer science biology pages 
springer 
lecture notes computer science volume 
samuel eilenberg saunders mac lane 
general theory natural equivalences 
transactions american mathematical society 
gian luigi ferrari 
unifying models concurrency 
phd thesis university pisa 
futatsugi joseph goguen jean pierre jouannaud jos meseguer 
principles obj 
brian reid editor proceedings twelfth acm symposium principles programming languages pages 
association computing machinery 
futatsugi joseph goguen jos meseguer okada 
parameterized programming obj 
robert balzer editor proceedings ninth international conference software engineering pages 
ieee computer society march 
hammond kennaway papadopoulos sleep 
introductory papers 
technical report sys school information systems university east 
joseph goguen 
mathematical representation hierarchically organized systems 
editor global systems dynamics pages 
karger 
joseph goguen 
minimal realization machines closed categories 
bulletin american mathematical society 
joseph goguen 
realization universal 
mathematical system theory 
joseph goguen 
homomorphisms correctness termination equivalence flow diagram programs 
journal computer system sciences 
original version proceedings ieee symposium switching automata pages contains additional section program schemes 
joseph goguen 
semantics computation 
ernest manes editor proceedings international symposium category theory applied computation control pages 
university massachusetts amherst 
lecture notes computer science volume springer pages 
joseph goguen 
reusing interconnecting software components 
computer february 
reprinted tutorial software reusability peter freeman editor ieee computer society pages domain analysis software systems modelling rub en prieto guillermo editors ieee computer society pages 
joseph goguen 
unification 
categorical view substitution equation solution 
maurice nivat hassan ait kaci editors resolution equations algebraic structures volume algebraic techniques pages 
academic 
report sri csl sri international computer science lab august 
joseph goguen 
types theories 
george michael reed andrew william roscoe ralph wachter editors topology category theory computer science pages 
oxford 
proceedings conference held oxford june 
joseph goguen rod burstall 
cat system structured elaboration correct programs structured specifications 
technical report report csl sri computer science lab october 
joseph goguen rod burstall 
fundamental algebraic tools semantics computation part comma categories colimits signatures theories 
theoretical computer science 
joseph goguen rod burstall 
fundamental algebraic tools semantics computation part signed theories 
theoretical computer science 
joseph goguen 
categorical approach general systems theory 
george klir editor applied general systems research pages 
plenum 
joseph goguen claude kirchner el ene kirchner jos meseguer 
obj 
jean pierre jouannaud stephane kaplan editors proceedings conference conditional term rewriting pages 
springer 
lecture notes computer science volume 
joseph goguen jos meseguer 
correctness recursive parallel nondeterministic flow programs 
journal computer system sciences october 
earlier version proceedings conference mathematical foundations computer science pages springer lecture notes computer science volume 
joseph goguen jos meseguer 
models equality logical programming 
hartmut ehrig giorgio levi robert kowalski ugo montanari editors proceedings tapsoft pages 
springer 
lecture notes computer science volume 
joseph goguen jos meseguer 
unifying functional object oriented relational programming logical semantics 
bruce shriver peter wegner editors research directions object oriented programming pages 
mit 
preliminary version sigplan notices volume number pages october 
joseph goguen jos meseguer 
software rewrite rule machine 
editors proceedings international conference fifth generation computer systems pages 
institute new generation computer technology icot 
joseph goguen james thatcher eric wagner 
initial algebra approach specification correctness implementation data types 
raymond yeh editor current trends programming methodology iv pages 
prentice hall 
joseph goguen james thatcher eric wagner jesse wright 
junction computer science category theory basic concepts examples part 
technical report ibm watson research center yorktown heights ny 
report rc 
joseph goguen james thatcher eric wagner jesse wright 
initial algebra semantics continuous algebras 
journal association computing machinery january 
early version initial algebra semantics james thatcher ibm watson research center report rc may 
robert goldblatt 
topoi categorial analysis logic 
north holland 
william hatcher 
logical foundations mathematics 

jacques herbrand 
recherches sur la th eorie de la 
de la soci des sciences des de iii 
horst herrlich george strecker 
category theory 
allyn bacon 
hoare jifeng 
natural transformations data refinement 
programming research group oxford university 
berthold hoffmann detlef plump 
jungle evaluation efficient term rewriting 
technical report fachbereich mathematik und informatik universitat bremen 
martin hyland 
effective topos 
troelstra van dalen editors brouwer symposium 
north holland 
robert keller joseph fasel editors 
proceedings graph reduction workshop 
springer 
lecture notes computer science volume 
richard kennaway 
graph rewritings 
theoretical computer science 
joachim lambek phil scott 
higher order categorical logic 
cambridge 
cambridge studies advanced mathematics volume 
saunders mac lane 
duality groups 
proceedings national academy sciences 
saunders mac lane 
categories working mathematician 
springer 
saunders mac lane 
greater health mathematics 
mathematical 
see mathematical pp 

william lawvere 
functorial semantics algebraic theories 
proceedings national academy sciences 
summary ph thesis columbia university 
maturana francisco varela 
tree knowledge 
new science library 
jos meseguer joseph goguen 
initiality induction computability 
maurice nivat john reynolds editors algebraic methods semantics pages 
cambridge 
jos meseguer ugo montanari 
petri nets monoids new algebraic foundation net theory 
proceedings symposium logic computer science 
ieee computer society 
full version report sri csl computer science laboratory sri international january submitted information computation 
robin milner 
algebraic definition simulation programs 
technical report cs stanford university computer science department 
robin milner 
calculus communicating systems 
springer 
lecture notes computer science volume 
eugenio moggi 
computational lambda calculus monads 
technical report ecs lfcs laboratory foundations computer science university edinburgh 
eugenio moggi 
category theoretic account program modules 
laboratory foundations computer science university edinburgh 
robert par peter johnstone 
indexed categories applications 
springer 
lecture notes mathematics volume 
jean claude 
graph rewritings 
theoretical computer science 
dana scott 
continuous lattices 
proceedings conference pages 
springer 
lecture notes mathematics volume 
stuart shieber 
unification approaches grammar 
center study language information 
michael smyth gordon plotkin 
category theoretic solution recursive domain equations 
siam journal computation 
report university edinburgh department artificial intelligence december 
andrzej tarlecki rod burstall joseph goguen 
fundamental algebraic tools semantics computation part indexed categories 
theoretical computer science 
monograph prg august programming research group oxford university 
william joseph tracz 
formal specification parameterized programs 
phd thesis stanford university appear 
alfred north whitehead 
process reality 
free 

