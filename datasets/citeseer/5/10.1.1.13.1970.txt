spidle dsl approach specifying streaming applications charles consel laurent yu calton pu universit de bordeaux inria labri avenue du albert schweitzer domaine universitaire bp cedex france consel yu fr www home page compose labri fr college computing georgia institute technology atlantic drive nw atlanta ga usa calton cc gatech edu www home page www cc gatech edu 
multimedia stream processing rapidly evolving domain requires software development expects high performance 
developing streaming application involves low level programming critical memory management nely tuned scheduling processing steps 
address problems domain speci language dsl named spidle specifying streaming applications 
spidle ers highlevel declarative constructs compared general purpose languages gpl improves robustness enabling variety veri cations performed 
assess expressiveness spidle practice specify number standardized special purpose streaming applications 
speci cations times smaller equivalent programs written gpl implemented compiler spidle 
preliminary results show compiled spidle programs roughly cient compiled equivalent programs 
development multimedia streaming applications increasingly important software activity account frequently changing requirements 
new formats compete structure main media types creating explosion format converters 
need continuous innovation multimedia device industry shifted increasing part stream processing hardware software shorten time market 
fortunately development streaming applications relies understood libraries operations ltering converting degrading multimedia streams sox 
furthermore account various application requirements implementation variants common stream operations available 
due lack programming language support development streaming applications tends labor intensive cumbersome error prone involves low level manipulation cope bit level data layout stream formats complicated plumbing components critical memory management scheduling processing steps 
di culties compounded performance critical nature streaming applications 
result streaming programs typically manually optimized time space case embedded systems 
introduces domain speci language dsl named spidle developing streaming applications 
language enables high level declarative programming streaming applications performance loss 
domain speci veri cations performed spidle programs enhance robustness 
domain speci design development spidle thorough analysis domain streaming applications 
analysis included study various speci cations standardized streaming applications typical streaming programs 
high level 
spidle ers high level constructs data types enable programmers concisely express stream processing 
domain speci data types attributes capture dedicated aspects values 
domain speci constructs common program patterns 
declarative 
spidle programmer need specify treatment stream compiler maps speci cation cient implementation 
information required trigger domain speci optimizations captured spidle program 
robust 
spidle safer general purpose language syntax semantics enable domain speci veri cations 
particular spidle compiler checks consistency component composition memory behavior 
idea language dedicated stream processing discussed literature 
existing approaches limited introducing language gluing components stream library geared exploiting features speci hardware platform :10.1.1.11.2821
contributions contributions identi ed common aspects key concepts development streaming applications close examination various streaming programs speci cations standardized streaming applications 
de nition spidle high level declarative language dedicated speci cation streaming applications 
language strongly typed enables various consistency checks 
resulting degree robustness spidle program goes achieved equivalent program written general purpose language 
show spidle highly expressive 
describe wide range streaming applications see web site including traditional ones gsm encoder gsm decoder mpeg audio encoder special purpose streaming applications ect adjusts cd audio headphones audio mixer mixes stereo audio streams mono stream 
demonstrate spidle concise 
spidle programs times smaller equivalent programs 
implemented compiler spidle programs 
generated code cient equivalent programs written overview section presents di culties involved developing streaming application 
section introduces spidle language focusing main language abstractions 
section gives overview compilation process section lists main veri cations performed spidle program 
section assesses approach 
section presents related section concludes discusses 
di culties developing streaming application section discuss issues involved developing streaming application illustrate working examples gsm encoding usage sox library 
rst brie introduce examples 
working examples gsm transcoding process coding decoding enables speech transmitted digital cellular telecommunication system 
speech signal compressed transmission reducing size digital representation keeping acceptable quality decoded output 
gsm coder works bit uniform pulse code modulation pcm speech input signal sampled khz 
input processed frame frame basis frame duration ms samples 
full rate encoder transforms frame samples block bits leading bit rate kbps 
sox library audio stream processing components 
ers command line interface enables audio le converted format 
various ects lters inserted conversion process 
examples include adding echo swapping channels band pass reject lters 
additionally command line interface enables audio les recorded played 
di culty mapping streaming speci cation program streaming application speci ed informally graph notation 
node represents stream lter transforms particular parts stream item 
edge de nes ow stream items 
notation convenient conceptual level complex map speci cation implementation 
speci cation typically describes stream tasks performed parallel implementation needs invoke corresponding components sequentially 
mapping needs take account implementation details stream tasks involved possibility side ects global state 
individual stream tasks require speci data layouts entail data conversion 
parts stream item may correspond bit fragments accessed low level bit operators 
example 
simpli ed version standardized gsm full rate speech encoding diagram depicted 
input speech frame rst preprocessed produce set free signal subjected rst order pre emphasis lter preprocess gure 
samples obtained analysed determine coe cients short term analysis lter lpc 
parameters lter samples 
result samples short term residual signal sta 
remaining operations speech frame divided sub frames containing samples short term residual signal 
sub frame processed subsequent functional elements refer elements sub frame processing 
simpli ed view gsm encoding process shows tangled paths stages involved forming bit encoded block stream items need split merged shared various stages 
intricacies require special care mapped cient implementation 
need manually optimize streaming program high volume stream items process stringent real time constraints satisfy translate high performance expectations developing lpc preprocess sta sub frame processing sub frame processing sub frame processing sub frame processing fig 

gsm ltp speech encoding diagram streaming program 
result programmer manually perform number optimizations performance resource usage goals attained 
streaming program requires local optimizations loop transformations relies global optimizations centered memory management 
example 
implementation gsm full rate speech encoding provided carsten contains number manual optimizations code inlining 
need manually optimize memory management streaming applications typically minimize data copying reduce cost memory management 
apply strategy major aspects need taken account ciency reasons implementation stream lter performs side ects expects speci data layout 
streaming applications transform contents stream item change layout incrementally gets processed size data fragment expands decompressed 
strategies commonly improve memory usage streaming application 
strategy schedule stream lters particular order depending side ects minimize copying 
strategy allocate memory output data layout early possible streaming process reduce temporary memory fragments 
example 
implementation gsm encoder optimized minimize copying minimize allocation temporary bu ers maximize data locality 
example consider sub frame processing lter shown 
components making lter depicted 
bit residual signal calculated long term predictor ltp lter fed regular pulse excitation lter bit signal highest lowest bits padded zeroes 
memory usage reduced propagating need bit bu er backward lter allocates incoming bit bu er 
strategy eliminates memory allocation memory copy 
ltp fig 

sub frame processing error prone re stream filter implementations expected data layout stream lter may incompatible current stream stage 
situation requires rewriting portion streaming program function wrapping stream lter 
libraries stream lters expertise required goes synopsis provided library manual 
side ects lter need carefully studied avoid unexpected data modi cation streaming stage corrupts subsequent processing 
example 
sox lters classi ed type stream stereo mono 
consider con guration audio stream passes exclusively stereo lters 
adding new lter operates mono stream requires wrapper function separates left right streams applying lter stream lter done 
di culty managing low level code need reduce memory usage implies compact data layouts typically stream items 
consequently accessing individual elds stream item requires low level bit operations 
code known hard develop maintain 
example 
table shows excerpt structure bit encoded block generated gsm encoder 
description clearly illustrates compactness data representation translates bit level data layout 
parameter number bits bit larc 
larc 
larc 
larc 
larc 
larc 
larc 
larc 
nc 
bc 
mc 

xmc 
xmc 


xmc 
nc 
bc 
mc 

parameter number bits bit xmc 
xmc :10.1.1.52.9500


xmc 
nc 
bc 
mc 

xmc 
xmc 


xmc 
nc 
bc 
mc 

xmc 
xmc 


xmc 
table 
data layout encoded blocks gsm encoder spidle language domain analysis stream processing identi ed key requirements language dedicated domain 
language ow describe paths stream items propagated processed stream tasks include stream speci declarations enable dedicated veri cations optimizations performed module enable streaming application decomposed manageable components include interface language enable disciplined re existing stream lter libraries 
overview spidle spidle program essentially de nes network stream tasks 
flow declarations specify stream items ow stream tasks nodes stream tasks edges types stream items 
stream task connector lter 
connectors represent common patterns value propagation 
filters correspond transducers primitive compound 
primitive lter refers operation implemented programming language 
facility enables existing lter libraries re 
compound lter de ned composition stream lters connectors 
composition achieved mapping output stream task input stream task 
abstractions ered spidle detail 
flow declarations abstractions address ow aspects streaming application stream speci es ow aspects task level mapping speci es stream items ow tasks 
streams 
stream task declares streams type constructor stream 
stream declaration de nes type items ow stream direction 
rst aspect addressed appropriate type language 
second aspect de nes items ow 
stream task declare stream input stream output stream 
input stream contains values ow stream task 
output stream describes values created stream task 
input output stream contains values propagated stream task 
example stream displayed 
stream inout int declaration extracted spidle de nition lter encoding gsm encoder 
speci es values type int ow lter encoding 
stream declarations stream task grouped clause named interface illustrated stream task examples 
mappings 
mapping de nes stream items ow stream task 
mapping declarations stream task grouped clause called map 
mapping 
rst kind common connects output stream task input 
example mapping follows 
map si map clause consists single mapping declaration 
left hand side sign de nes source stream mapping right hand side names destination stream 
shown example source stream represented stream expression expression constructs stream value applying concatenation operator constants stream variables 
mapping required processing item produces items processed sequentially 
situation illustrated mpeg audio encoder shown 
encoder bu er pcm samples split blocks processed lter 
mapping stream task needs collection items performing operation 
situation exempli ed mpeg audio encoder see lter expects receive samples produced lter single input stream item 
window subband filter subband samples pcm samples subband calculator scale factor fig 

mpeg subband filter stereo streams mapping cases re expressed mapping 
note reviewer mappings require additional information related stream declarations 
details included submission lack space 
stream tasks stream task connector lter 
di erence kinds tasks connector propagates stream items xed way guaranteed modify value stream expression enables 
restrictions apply lters 
spidle ers type constructor connectors lters 
type constructors enable programmer de ne task type 
instances new task type created spidle program 
improve re task type instantiated respect compile time run time arguments 
example instantiation lter section 
connectors 
kinds connectors mergers splitters 
merger fuses independent input streams single output stream 
splitter performs opposite operation 
connector link stream tasks connector declaration contains interface clause map clause 
example declaration merger gsm speci cation 
merger frame merger interface stream bit nc stream bit bc stream bit mc stream bit xmc stream bit stream bit bits map nc bc mc xmc bits connector merges input streams nc bc mc xmc single output stream bits 
filters 
lter compound combines set stream tasks primitive refers operation implemented foreign programming language 
compound lters 
compound lter de nes combination stream tasks 
result interface map clauses compound lter consists import clause referring spidle les de ning needed stream tasks 
compound lter imports task types needs instantiate clause de ne task instances respect speci context 
example declaration compound lter mpeg audio encoder speci cation follows 
filter int stereo interface stream int buffer stream float sample instantiate stereo ws fs map buffer ws buffer ws fs fs sb sample sample lter formal parameter stereo value run time lter instantiated 
value instantiate lter shown instantiate clause 
primitive lters 
primitive lter enables existing library code imported spidle 
compound lter primitive lter includes import clause clause refers les written programming language 
functions types imported allowing spidle propagate foreign values primitive lter 
primitive lter provides interface foreign function include instantiate clause 
consists run clause invokes foreign function 
spidle requires declaration stream passed foreign function specify ects function stream items 
stream declared read foreign function written foreign function 
critical information optimize memory management 
examine example primitive lter gsm speci cation 
filter weighting interface stream bit stream bit import func weighting filter run weighting filter lter reads input stream writes output stream streams passed foreign function weighting filter de ned le programming language assumed foreign language run clause 
compilation preliminary design spidle compilation process 
process consists steps 
dependencies stream tasks collected represented graph 
second graph annotated ects memory management information 
third resulting graph schedule stream tasks 
fourth memory layout stream items stage streaming process computed 
lastly code generated 
dependency graph 
spidle program compiler computes transitive closure referred stream tasks examining instantiate import clauses 
resulting information represented dependency graph 
ects 
pass determines ects compound lter ects primitive lters 
memory management 
analysis annotates graph stream tasks information describing lifetime memory fragments 
information computed stream declarations 
speci cally output stream memory needs allocated store value stream item 
conversely input stream memory stream item needed execution stream task 
task scheduling 
spidle programs possible schedule stream tasks 
current design scheduling strategy focuses choice points represented splitters 
spidle chooses schedule minimizes memory copies ect information 
memory layout 
streaming application transforms values format 
transformation carried incrementally item gets propagated various steps stream process 
situation introduces temporary memory fragments 
remedy potential source ine ciency compiler attempts allocate space eagerly 
size item grows gets processed nal size initial allocation 
course optimization applied example non contiguous data input streams processed replacing allocated bu ers input streams nal bu er may allowed 
currently spidle interfaced languages 
programming languages stream libraries mainly ciency reasons 
veri cations domain speci nature spidle compiler perform number veri cations reach compiler general purpose language 
veri cations focus composition stream tasks propagation stream items usage foreign libraries 
example stream declarations checked ensure types directions stream items compatible stream tasks combined 
inconsistent combinations ects directions detected 
mappings inspected nd unconnected streams input streams connected output stream 
note reviewer details veri cations included submission lack space 
assessment assessment language crucial step dsl approach 
experience dsl assessed respect pragmatic criteria expressiveness conciseness performance 
expressiveness 
assessing expressiveness dsl practice requires variety non trivial applications 
spidle express gsm encoder gsm decoder mpeg audio encoder 
applications satisfy industrial strength standards commonly mentioned cases assess domain stream processing :10.1.1.11.2821:10.1.1.52.9500
speci ed dedicated streaming applications referenced various libraries toolkits middleware stream processing 
conciseness 
spidle ers domain speci abstractions constructions enables programmer concisely de ne streaming application 
spidle programs times smaller equivalent version written performance 
performance measurements compiled code spidle programs show worst loss performance 
results preliminary improve compiler gets developed 
related streamit certainly related spidle :10.1.1.11.2821
java extension provides programmer constructs assemble stream components 
streamit spidle share goals approaches vary considerably 
streamit essentially gpl ers extensions corresponding common program patterns interface library components 
superset java performance compiled streamit code existing java compilers produce currently slower compiled equivalent code 
java intrinsic overhead memory management object layout may easy 
lastly streamit program intertwined java code veri cation local domain speci constructs done spidle 
system middleware abstraction describing information ow case distributed streaming applications 
goal expose underlying communication layer application adapt dynamically changing network processing conditions 
system ers distributed versions splitters mergers lters 
contrast spidle limited local stream processing focuses performance veri cation 
stream stream oriented languages describe hardware circuits 
aim languages represent circuits higher level abstractions processes streams signals emphasis reducing clock rate board area occupied generated circuit 
spidle operates di erent domain 
possible write compiler stream dedicated streaming applications constructs suited domain 
stream processing rapidly evolving eld requires software development high performance expectations 
address requirements developed domain speci high level declarative language named spidle specifying streaming applications 
spidle write variety industry standardized streaming applications special purpose ones 
speci cations experimentally validated expressiveness language 
spidle programs times smaller equivalent programs written implemented compiler spidle 
preliminary experiments show compiled spidle programs performance roughly comparable compiled equivalent programs 
implementation spidle compiler preliminary number optimizations need explored 
particular plan optimize locality account processor features data cache instruction cache determining scheduling stream tasks 
want study performance impact bu ering input stream items ring stream process 
ideas examples highly domain speci optimizations enabled presence explicit information language level factorized compiler 
track research aims go local stream processing tackle distributed case 
studying ways integrate spidle middleware distributed streaming 
particular working partly developed authors 
working graphical representation spidle 
visual version spidle quite natural step take considering notation commonly eld 
rst plan build tool capable visualizing spidle programs graph stream tasks 

consel marlet 
software methodology language development 
palamidessi glaser meinke editors proceedings th international symposium programming language implementation logic programming number lecture notes computer science pages pisa italy september 

ect 
www com works htm 

european telecommunications standards institute route des lucioles sophia antipolis cedex france 
gsm full speech transcoding nov 
ren smg 

gokhale stone arnold 
stream oriented fpga computing streams high level language 
ieee symposium custom computing machines pages apr 

draper willem boehm 
language optimizing compiler image processing recon gurable computing systems 
lecture notes computer science 

international organisation standardisation rue de case ch geneva switzerland 
moving picture experts group mpeg audio speci cations 
iso iec 

carsten 
implementation gsm coder decoder 
kbs cs tu berlin de toast html nov 

koster 
composing distributed information ows 
proceedings acm multimedia workshop multimedia middleware oct 

consel marlet muller 
devil idl hardware programming 
th symposium operating systems design implementation ler osdi pages san diego california october 

consel marlet muller 
dsl approach improve productivity safety device drivers development 
proceedings th ieee international conference automated software engineering ase pages grenoble france september 
ieee computer society press 

rizzo 
feasibility software fec 
technical report lr dip 
di ingegneria dell universit di pisa jan 

sox sound exchange 
www spies com sox 

spidle home page 
compose labri fr prototypes spidle 

stephens 
survey stream processing 
acta informatica 

thibault consel 
framework application generator design 
editor proceedings symposium software reusability pages boston massachusetts usa may 
software engineering notes 

thibault consel muller 
safe cient active network programming 
th ieee symposium reliable distributed systems pages west lafayette indiana october 

scott thibault renaud marlet charles consel 
domain speci language video device driver design implementation 
proceedings st usenix conference domain speci languages santa barbara california october 

amarasinghe 
streamit language streaming applications 
international conference compiler construction lecture notes computer science pages 
springer verlag 

arie van deursen paul klint joost visser 
domain speci languages annotated bibliography 
acm sigplan notices june 
