designing gui components uml cases jes jim nez luis 
de computaci universidad de spain 
ual es develop graphical user interfaces uml models case activity diagrams 
method obtains uml class diagram representing gui components suitable generating code fragments considered gui prototypes 

currently integrated development environments ide represent practice model driven development mdd offer tools raise abstraction level creating applications language editors form builders gui controls 
modeling allows developers visualize source code graphical form graphical abstractions flow charts depict algorithmic control flows structure charts simple block diagrams boxes representing functions subprograms 
mdd involves creating models methodological process begins requirements highlevel architectural design 
unified modeling language uml key tools behaviour modeling case model originated object oriented software engineering oose 
key concepts associated case model actors cases 
users systems may interact system represented actors 
required behaviour system specified uses cases defined needs actors 
case specifies behaviour possibly including variants system perform collaboration actors 
graphical user interfaces gui increasingly dominant design external system assumed increasing importance 
user interface significant part applications modeled uml 
means clear model user interfaces uml approaches addressed problem :10.1.1.11.8530
partially supported spanish project ministry science technology tic feder funds 

gui model driven development focus design gui uml case model 
design gui case model conversely design uses cases oriented gui design 
case model intended early stages system analysis order specify system functionality external view system 
cases specified means activity diagrams provide finer granularity rigorous semantics 
activity diagrams specifying user system interaction states represent outputs user labeled uml stereotypes representing visual components data output 
addition transitions represent user inputs labeled uml stereotypes representing visual components data input choices 
furthermore refinement uses cases means activity diagrams achieves precise specifications enabling detect include generalization relationships cases 
relations unstable semantics uml development received interpretations reflecting high degree confusion developers 
proposal helps clarify cited relations 
gui design reflects relationships cases applet frame inheritance implementation cases generalization applet invocation embedding implementation include relation 
method handles cases activity diagrams rules transformation transforms specifications user interface 
designer responsible specifications gui designed specification 
case diagrams viewed high level specification case description activity diagrams high level specification presentation logic system 
literature works accomplish design gui uml 
closest approach 
proposals identify aspects gui modeled uml notation set uml constructors may model gui 
method gui design case model completely addressed exists lack formal description cases gui components 
similar contribution state machines petri nets specify gui uml 
quoted approaches specify user interaction lack case relationships handling 
uses cases mapped uml class diagram represent data logic design gui 
rest organized follows 
section describes rules method designer follow build gui components cases class activity diagrams 
section presents gui project example internet book shopping illustrates design rules 
section describes formalism helps validate proposed method 
section discusses 

gui modeling method uml gmm method case diagram consists set actors users external systems cases 
relationships actors generalizations relationships uses cases include dependences generalizations 
addition relationships actors cases simple associations 
roles multiplicity directionality extend dependences considered approach 
activity diagram consists set states special cases initial final state 
states linked labeled transitions arrows transition branches diamond representing branching point 

steps applying method steps identifying gui project development firstly informal high level description system carried means case diagram 
case diagram involves actors main cases 
secondly case behaviour described means activity diagrams fulfilling restrictions methodology 
original case diagram goes refining obtaining formal diagram 
thirdly cases activity diagrams translated class diagram 
class diagram obtained previous step produces code fragments considered gui component prototypes 
certainly development sequence cyclic designer refine high level details case diagram phases 

rules gui design description method chosen java programming language gui coding due java swing gui approach adapted kinds user interface software 
assume reader knows basic behaviour java swing classes concepts method 
firstly consider kind window interfaces applet frame 
frame include window area gui components buttons labels text areas embedded invoke applets frames 
applet contain window area gui components 
frames building complex user interfaces tasks done gui components disabled executed task 
inheritance frames applets assuming means inheritance behaviour necessarily appearance 
summarize rules design follows 
actor representing user case diagram applet frame 
actors representing external systems considered visual component design 
choice applet frame depends actor perform tasks depends number associations cases 

generalization relationship actors generalizes corresponds inheritance applet frame represented applet frame representing 
case case diagram applet frame 
embedded frame associated actors 

generalization relationship cases generalizes corresponds inheritance applet frame applet frame 
include relationship cases includes corresponds invocation embedding applet frame sub applet frame 
state activity diagram necessarily falls categories terminal states non terminal states 
terminal state labeled uml stereotype representing output gui component stereotyped states 
nonterminal state labeled described means activity diagram 
non terminal states cases diagram 

transition activity diagrams labeled means conditions uml stereotypes conditions 
uml stereotypes represent input gui components 
kind transitions called stereotyped transitions 
conditions represent choices business logic 

case non terminal states case diagram specify include generalization relationships non terminal state case follow rules terminal state applet frame 
contains gui components associated activity diagram generalization relationship case non terminal state applet frame containing gui components associated activity diagram case contains gui components 

non terminal state appear case diagram applet frame gui components associated activity diagram gui components applet frame case 

conditions transitions taken account gui design 
regard case relationships interpreted follows 
include relationship case case includes means non terminal states activity diagram 
generalization relationship case case generalizes means activity diagram representing contains states transitions activity diagram states transitions replaced states resp 
transitions replacement relationship addition add new states transitions starting reaching particular case state practice replacement relation decided designer 
basically stereotyped states replaced output gui component replaced 
instance list columns replaced list columns lost functionality 
happens stereotyped interactions replaced input gui components replaced 
instance selection cited list 
conditions instance replaced restrictive 
inclusion particular case generalization includes generalizes handle generalization considering applets case invoke includes behaviour 
gui modeling example illustrate functionality uml gui modeling method explain simple internet book shopping model 
basically appear actors customer ordering manager administrator 
customer directly carries purchases internet querying certain issues product catalogue books carrying purchase 
manager deals total partially customer orders 
system administrator manage catalogue books adding eliminating books catalogue modifying existing 
considering scenario develop gui project uses cases 

step describing cases initially case diagram contains identified actors system 
case study actors customer 
non formal definition system refined causing precise cases diagram 
shows complete presentation logic definition internet shopping system 
manage catalogue applet directly depends cases connected means include relation 
include relationships cases withdraw article modify article add article modeled system designer relations optionality branches case manage catalogue behaviour go states activity diagram 
case administrator identification considered system designer relation mandatory state reached activity diagram case manage catalogue 
case manage catalogue composed article modify article add article applets frames 
manager administrator identified carrying kind operation restricted environment 
relation generalization intended inheritance behaviour gui components 
example query catalogue case established generalization purchase case 
means purchasing applet allows query operation catalogue 
fact applet purchasing inherits query catalogue 
note case query catalogue administrator inherits query catalogue generalizes cases withdraw article article 
distinction include generalization relationships established system designer activity diagrams include connected cases 
sections focus purchase case explain method 

step describing activity diagrams case correspond java applet frame component method 
activity diagrams describe certain graphical behavioural details graphical components applet 
case study adopted java graphical components jlabel jbutton 
graphical elements easily considered activity diagram modeled state transition stereotypes 
graphical components classified input text area button output components label list 
input output components associated terminal states transitions appropriate stereotype instance jlabel stereotypes associated states jbutton stereotype transitions 
graphical behaviour concerns states transitions describe separately 
states stereotyped 
stereotyped states represent terminal states labeled jlabel stereotypes 
instance shows activity diagram case 
behaviour shows customer begins purchasing process querying adding removing articles shopping cart 
usual purchasing process shopping system requests customer card number postal address carry shipment shopping cart empty 
diagram shows graphical behavioural content applet window purchases carried 
activity diagram composed states 
terminal states correspond graphical elements 
stereotyped labeled text related graphical element 
states described separate activity diagram order structure better design 
name separate activity diagram state 
rules proposed methodology state labeled stereotype means state described activity diagram 
new diagram represent 
internet shopping case diagram behaviour case simply way allowing hierarchical decomposition original activity diagram 
example activity diagram associated purchase case appear non terminal states manage shopping cart notify shopping cart empty 
time activity diagrams described states 
activity diagrams shown 
activity diagram shopping cart empty case observe target case modeled brings activity diagram 
model represents warning applet window containing text shopping cart empty 
shopping cart activity diagram states query catalogue shopping cart independent activity diagrams 
states correspond applet appear cases diagram 
transitions labeled means stereotypes conditions 
instance button connected transition jbutton stereotype name label name button 
example show cart transition stereotyped jbutton correspond button component called show cart 
conditions represent user choices business data logic 
condition user interaction graphical component related button list states second internal checking condition related states 
activity diagram case internal process 
example case study selections list modeled conditions 
note query catalogue activity diagram list results modeled state selected article condition 
shows transitions close exit proceed correspond conditions kind user choice 
exit output transition shopping cart means user pressed button called exit defined separate manage shopping cart activity diagram 
shopping cart empty shopping cart empty conditions business data logic conditions human factor participate 
condition action transitions useful model behaviour generalization relationships cases 
note original case diagram purchase case inherits behaviour catalogue means generalization relationship 
inheritance behaviour modeled purchase activity diagram non terminal state includes behaviour query catalogue activity diagram 
example observe behaviour query catalogue shown 
activity diagram user introduces searching criteria text area presses results shown list 
user select articles list presses button exit try new search pressing button clear 
purchase case inherits query catalogue possible interrupt behaviour 
condition action transitions interrupt inherited behaviour 
example query catalogue behaviour previously described adopted activity diagram purchase case nonterminal state catalogue 
output transition selected article add cart means add cart button purchase applet case interrupt query catalogue behaviour article selected condition 
analogously output show cart mean buttons interrupt inherited behaviour query catalogue 
hand generalization relationship represent inheritance behaviour extension instance purchase case inherits query catalogue case increases behaviour hold buttons add cart show cart proceed 
generalization relationship deal replacement behaviour increase behaviour 
example note original case diagram query catalogue administrator inherits query catalogue 
suppose behaviours activity diagrams results list shown customer actor state different shown administrator actor instance administrator results state 
case system designer behaviour activity diagram query catalogue case model behaviour activity diagram query catalogue administrator re writing replacing results list administrator results 
rule replacement considered transitions replacing button gui component 
conditions conditions actions replaced 
cases decision designer allow replacement states transitions 

step generating class diagrams cases translated classes name cases 
translated classes specialize java applet class 
components applet case described activity diagrams 
terminal state translated java swing class represented stereotype state 
java swing class connected container class class working applet window case diagram 
class diagram obtained cases activity diagrams uses association relationship role name terminal state 
example terminal states stereotyped translated class class diagram 
similar happens rest stereotyped states transitions 
non terminal states activity diagram may correspond cases applets activity 
case nonterminal states considered class class diagram 
described class diagram name class 
shows class diagram customer side 
class diagram contains applets directly specialize applet class class customer class class class 
classes inherit applet class super classes 
example purchase class inherits applet class class 
classes correspond cases customer side case diagram customer actor 
furthermore note stereotyped states transitions activity diagrams translated java classes class diagram 
stereotype name transition state translated appropriate java swing class 
name stereotyped state transition translated association swing class applet class contains 
example jbutton stereotype proceed transition appears manage shopping cart activity diagram see translated jbutton class 
transition name proceed interpreted association labeled name class class containing 
due extension resultant class diagram classes included 

step generating gui components rapid gui prototypes obtained class diagram 
shows visual result applet functionality 
note purchase window applet similar query catalogue window second includes buttons window 
similarity applets reflected original case diagram generalization relationship cases applets catalogue 
shopping cart window appears show cart button pressed purchase window 
note original case diagram shown button associated window means include relation cases 
hand information applet windows associated buttons remove article button shopping cart window button purchase window 
note windows described include relations cases 
observe activity diagrams shown track better behaviour example 
space reasons included just part gui project developed case study 
complete version project available www ual es html 

formalizing uml gmm section formalize described method provide formal definition case diagrams cases 
particular define case relationships include generalization 
define formed case diagram follows restrictions 
addition provide definition gui 
applet windows customer side define relationships gui inclusion generalization 
allow define generic transformation technique case diagrams set gui 
establish properties transformation technique 
define case diagram follows definition case diagram case diagram ucd act uc consists diagram name finite set act actor names users external systems finite set uc cases relations act act uc uc act uc uc uc usual write analogously formally define case specified means activity diagram follows definition case case si cond consists case name finite set states consist finite set uc cases finite set ss stereotyped states form sn sn state name special states sp initial branching states finite set si stereotyped interactions form cond interaction name 
condition optional finite set input stereotypes finite set output stereotypes finite set cond conditions transition relation si cond usual write 
denote name name case analogously define functions transitions get cases respectively transitions case 
si resp 
ss denotes set stereotyped interactions resp 
stereotyped states sn 
call exit conditions denoted exit interaction names transitions conditions transitions go state case 
assume reflexive replacement relation stereotyped states relation stereotyped interactions conditions 
replacement relation extended cases follows 
cases belongs transitions iff exists transitions 
assuming define inclusion generalization relationship cases follows 
cases say includes say generalizes exists define formed cases 
definition formed case case formed conditions hold transitions form si iff sn generalizes ex transitions form exit 
formed cases take account output component trigger input interaction input interactions added general case order obtain particular ones exit conditions non terminal state included main case 
previous definition formed case diagram includes formed cases include generalization relationships cases case diagram correspond definition formed case diagram formed case diagram ucd act uc satisfies uc formed uc generalizes uc includes provide definition gui gui components 
gui name set gui invoked embedded set stereotyped interactions states represent input output gui components 
definition gui graphical user interface gui consists gui name finite set guis finite set stereotyped interactions finite set stereotyped states sn 
gui compared means generalization inclusion relationships 
corresponds inheritance relationship second invocation embedding gui 
gui say generalizes exists generalizes exists exists gui say includes formally define transformation technique provides set gui case diagram 
order define transformation need suppose option stereotype representing menu option gui 
definition gui case diagram formed case diagram ucd act uc define gui associated ucd denoted gui ucd set gui act user gui gui name option gui name gui si si ss ss state result transformation technique 
theorem gui associated formed ucd satisfies conditions gui uc gui generalizes gui uc gui includes gui act uc gui includes gui 
studied method mapping case activity diagram models graphical user interfaces gui 
case study shown technique applied design internet book shopping system 
firstly plan extend deal extends relationship cases 
secondly incorporate methodology case tool order 
integrate technique development process 
keller 
user interface prototyping uml scenarios high level petri nets 
procs pages 
lncs 
keller 
generating user interface prototypes scenarios 
procs re page 
ieee cs 
nova ns ctor 
digging case relationships 
procs uml pages 
lncs 
sters winter 
coupling cases class models means validation verification requirements specifications 
requirements engineering 
kovacevic 
uml user interface modeling 
procs uml pages 
lncs 
liang 
cases classes way building object model uml 
information software technology 
nunes 
representing user interface patterns uml 
procs pages 
lncs 

formal approach cases relationships 
procs uml pages 
lncs 
pinheiro da silva paton 
user interface modelling uml 
information modelling knowledge bases xii pages 
ios press 
pinheiro da silva paton 
user interface modeling umli 
ieee software 
simons 
cases considered harmful 
proc 
tools europe pages 
ieee computer society 
stevens 
cases relationships unified modelling language 
procs fase pages 
lncs 
