arxiv cmp lg mar natural language interfaces databases androutsopoulos ritchie department artificial intelligence university edinburgh south bridge edinburgh eh hn scotland mail ion aisb ed ac uk ritchie ed ac uk department computer science university edinburgh king buildings mayfield road edinburgh eh jz scotland mail pt dcs ed ac uk natural language interfaces databases nlidbs 
brief overview history nlidbs 
advantages disadvantages nlidbs discussed comparing nlidbs formal query languages form interfaces graphical interfaces 
linguistic problems nlidbs confront follows benefit readers familiar computational linguistics 
discussion moves nlidb architectures portability issues restricted natural language input systems including menu nlidbs nlidbs reasoning capabilities 
explored areas nlidb research database updates meta knowledge questions temporal questions multi modal nlidbs 
ends reflections current state art 
natural language interface database nlidb system allows user access information stored database typing requests expressed natural language english 
example dialogue user commercially available nlidb dialogue borrowed system responses slightly simplified 
messages printed nlidb shown inthis typeface user entries shown typeface 
works projects 
willems 
project leaders 
documents describing projects 
bim nlidb bim mmi technical annex projects finish 
appear journal natural language engineering cambridge university press 
available research department artificial intelligence university edinburgh 
bim mmi led ds 

purpose serve key concepts problems methodologies lines research area natural language interfaces databases 
means complete discussion issues relevant nlidbs 
reader referred alternative surveys field 
detailed description natural language front reflects current state art 
contains hints capabilities existing nlidbs contain complete descriptions particular systems purpose compare particular nlidbs 
mainly information obtained published documents 
authors personal hands experience nlidbs mentioned 
system feature mentioned means documents cited state particular system provides feature implied systems similar capabilities 
assumes user requests communicated nlidb typing computer keyboard 
issues related speech processing discussed 
remainder organised follows section brief overview history nlidbs section discusses advantages disadvantages nlidbs section presents linguistic problems nlidbs cope section describes architectures adopted existing nlidbs section discusses portability issues related nlidbs section introduces nlidbs explicitly restrict set natural language expressions user allowed input user clearer view sorts questions system understand section describes nlidbs reasoning modules section highlights explored areas nlidb research database updates meta knowledge questions temporal questions multi modal interfaces section summarises current state art 
history prototype nlidbs appeared late sixties early seventies 
nlidb period lunar natural language interface database containing chemical analyses moon rocks 
lunar early natural language interfaces built having particular database mind easily modified different databases 
internal representation methods lunar argued facilitate independence database modules way somewhat specific project needs 
portability issues discussed section 
late seventies nlidbs appeared 
rendezvous engaged user dialogues help formulate queries 
ladder large databases configured interface different underlying database management systems dbmss 
ladder semantic grammars discussed section sections greatly influenced 
section largely information 
technique interleaves syntactic semantic processing 
semantic grammars helped implement systems impressive characteristics resulting systems proved difficult port different application domains 
different grammar developed ladder configured new application 
researchers started focus portable nlidbs semantic grammars gradually abandoned 
planes nlidbs appeared late seventies 
chat best known nlidbs early eighties 
chat implemented entirely prolog 
transformed english questions prolog expressions evaluated prolog database 
code chat circulated widely formed basis experimental nlidbs 
mid eighties nlidbs popular area research numerous prototype systems implemented 
large part research time devoted portability issues 
example team designed easily configurable database administrators knowledge nlidbs 
ask allowed users teach system new words concepts point interaction 
ask complete information management system providing built database ability interact multiple external databases electronic mail programs computer applications 
applications connected ask accessible user natural language requests 
user stated requests english ask transparently generated suitable requests appropriate underlying systems 
janus similar abilities interface multiple underlying systems databases expert systems graphics devices 
underlying systems participate evaluation natural language request user aware heterogeneity system 
janus systems support temporal questions discussed section 
systems appeared mid eighties datalog ldc 
numerous nlidbs developed mid eighties demonstrated impressive characteristics certain application areas nlidbs gain expected rapid wide commercial acceptance 
example ovum natural language interface standard option users dbms information centre type software reasonable choice alternatives 
commercially available nlidbs appeared claimed commercially successful 
nlidbs treated research exotic systems standard option interfacing databases certainly wide spread 
development successful alternatives nlidbs graphical form interfaces intrinsic problems nlidbs discussed section probably main reasons lack acceptance nlidbs 
years significant decrease number papers nlidbs published year 
nlidbs continue evolve adopting advances general natural language processing field discourse theories section exploring architectures transform nlidbs reasoning agents section integrating language graphics exploit advantages modalities section name lines current nlidb subset prolog described called datalog 
report natural language markets 
research 
generic linguistic front ends appeared 
general purpose systems map natural language input expressions logical language cle system see 
generic front ends turned nlidbs attaching additional modules evaluate logic expressions database section 
commercially available nlidbs intellect formed merger 
system experience robot 
bbn parlance built experience development rus systems 
ibm 
system stopped commercially available october 
symantec 
natural language natural language system previously known described derived system described 
bim 
english wizard linguistic technology 
founded author original intellect 
aspects linguistic capabilities intellect natural language reviewed 
noted researchers term database just mean lot data 
mean quite lot 
importantly data assumed represent coherent attempt model part world 
furthermore database structured model data nlidb designed data model 
database systems evolved lot decades 
term database system denotes computer science complex principled systems denote past 
underlying database systems early nlidbs deserve called database systems today standards 
early days database systems concept naive users accessing data directly done expert programmer writing special computer program 
reason navigational nature data model early database systems 
user need know structure data application 
needed know programming tricks get data 
development relational model data codd major impact database systems 
relational model storage structure table naive users understand 
relatively simple declarative query languages sql see section developed class user 
currently major developments database technology impact nlidbs 
growing importance object oriented database systems second trend relational database technology complex storage structures facilitate advanced data modelling 
note trends harder produce nlidb 
reflect tendency concentrate new complex database application areas network management computer aided design user naive immediate access database carried layer application software 
advantages disadvantages section discusses advantages disadvantages nlidbs comparing formal query languages form interfaces graphical interfaces 
access information stored database traditionally achieved formal query languages sql see sql 
assume example tables stored relational database employees table employee department phone thompson sales richardson accounting 
departments table department manager city sales ferguson london accounting richardson bristol 
table employees table shows department phone number employee 
second table departments table shows manager department city department located 
list showing employee manager created sql query select employees table employee departments table manager employees table departments table employees table department departments table department sql query instructs database system report possible pairs consisting employee value manager value employee value comes row employees table manager value comes row departments table rows department value 
form interfaces pre defined forms consisting fields 
user fills information known corresponding fields system completes remaining fields querying underlying database 
user wishing learn manager employee named thompson fill pre defined form employee information form shown left 
system respond filling remaining fields shown right 
employee information form employee thompson department phone manager employee information form employee thompson department sales phone manager ferguson answers employee called thompson system responds generating stack filled forms form possible answer 
powerful method called query example proposed zloof see description user combine arbitrary number forms form reflects structure database table 
manager thompson query example forms employee employees table department phone thompson employees table form employee department phone thompson departments table department manager city graphical query departments table form department manager city form shows system select employees table rows having thompson employee value 
occurrences variable show row selected employees table joined rows departments table department values 
entry shows corresponding manager value printed 
approach graphical interfaces similar user selects database tables query employee table manager table example 
selected table appears screen frame consisting attribute slots 
user fill attribute slots typing keyboard join attributes various frames mouse impose restrictions attributes mouse menu options 
find manager thompson user graphical query shown 
similar method allow frames correspond world entities managers employees departments database tables 
advantages disadvantages nlidbs mentioned literature 
advantages nlidbs artificial language advantage nlidbs supposed user required learn artificial communication language 
formal query languages difficult learn master non computer specialists 
graphical interfaces form interfaces easier occasional users invoking forms linking frames selecting restrictions menus constitute artificial communication languages learned mastered user 
contrast ideal nlidb allow queries formulated user native language 
means ideal nlidb suitable occasional users need user spend time learning system communication language 
practice current nlidbs understand limited subsets natural language 
training needed teach user kinds questions nlidb understand 
cases may difficult understand sort questions nlidb understand learn formal query language form interface graphical interface see disadvantages 
may argue subset natural language longer natural language 
better questions argued kinds questions questions involving negation quantification easily expressed natural language difficult tedious express graphical form interfaces 
example department programmers negation supplies department universal quantification easily expressed natural language difficult express graphical form interfaces 
questions course expressed database query languages sql complex database query language expressions may written 
discourse advantage nlidbs mentioned concerns natural language interfaces support anaphoric elliptical expressions sections 
nlidbs kind allow brief underspecified questions meaning question complemented discourse context 
formal query languages graphical interfaces form interfaces notion discourse context usually supported 
point clearer sections 
disadvantages nlidbs linguistic coverage obvious frequent complaint nlidbs system linguistic capabilities obvious user 
mentioned current nlidbs cope limited subsets natural language 
users find difficult understand remember kinds questions nlidb cope 
example able understand capitals countries bordering baltic bordering sweden leads user assume system handle kinds conjunctions false positive expectation 
question capitals countries bordering baltic sweden handled 
similarly failure answer particular query lead user assume equally difficult queries answered fact answered false negative expectation 
formal query languages form interfaces graphical interfaces typically suffer problems 
case formal query languages syntax query language usually documented syntactically correct query guaranteed answer 
case form graphical interfaces user usually understand sorts questions input browsing options offered screen query input guaranteed answer 
linguistic vs conceptual failures nlidb understand question clear user rejected question outside system linguistic coverage outside system conceptual coverage 
users try rephrase questions referring concepts system know rephrasing questions salaries system knows salaries think problem caused system limited linguistic coverage 
cases users try rephrase questions system conceptually handle realise particular phrasing question outside linguistic coverage alternative phrasing question answered 
nlidbs attempt solve problem providing diagnostic messages showing reason question handled unknown word syntax complex unknown concept 
see section 
users assume intelligence pointed nlidb users misled system ability process natural language assume system intelligent common sense deduce facts fact nlidbs reasoning abilities see section 
problem arise formal query languages form interfaces graphical interfaces capabilities system obvious user 
inappropriate medium mentioned argued natural language appropriate medium communicating computer system 
natural language claimed verbose ambiguous human computer interaction 
nlidb users type long questions form interfaces fields filled graphical interfaces done mouse clicking 
natural language questions ambiguous formal form graphical queries multiple meanings 
section presents problems area discusses nlidbs attempt address 
tedious configuration nlidbs usually require tedious lengthy configuration phases see section 
contrast commercial database systems built formal query language interpreters implementation form interfaces largely automated 
experiments carried comparing users cope formal query languages form interfaces graphical interfaces nlidbs 
describes experiment subjects ranging computer novices programmers asked perform database queries formal query language sql graphical interface see section nlidb known natural language see section 
subjects received training interfaces asked perform database queries similar queries subjects encountered training period 
experiment measured number queries subjects managed perform successfully average time subjects perform successful query 
interfaces said winner 
interface better kinds queries queries subjects performance roughly subjects asked sql graphical interface nlidb 
roughly speaking nlidb better queries data tables combined queries similar ones users encountered training period 
information similar experiments 
discusses various approaches evaluation natural language systems describes experiment wizard oz collect sample user questions sample questions input actual nlidb 
wizard oz experiment user interacts person nlidb computer network 
user aware interacting real nlidb 
provides set questions nlidb collected wizard oz experiment 
describes detail wizard oz experiment 
provides information experiments usability nlidbs describes detail experiment assessed usability intellect see section 
authors conclude natural language effective method interaction casual users knowledge database perform question answering tasks restricted domain 
describes experiment usability intellect concludes nlidbs practical alternative 
linguistic problems section presents linguistic problems nlidb confront attempting interpret natural language request 
problems arise nlidbs common kinds natural language understanding systems 
stressed section means full list linguistic problems nlidbs confront 
section merely presents problems mainly benefit readers familiar computational linguistics 
reader reminded messages generated nlidb printed typeface user entries printed typeface 
modifier attachment consider request list employees driving licence 
linguistically driving licence modifiers modify meaning syntactic constituents 
problem identify constituent modifier attached 
human immediately understand refers employees driving licence refers employees 
reading request corresponds structure list employees driving licence 
paraphrased employees working list having driving licence 
computer system consider reading list employees driving licence 
driving licence refers 
reading paraphrased list employees working driving licence 
second reading easily ruled 
example similar request list employees export licence second reading probably chosen export licence refers 
able choose correct reading system know particular application domain employees driving export companies export driving 
alternatively systems attempt resolve modifier attachment ambiguities heuristics 
pre uses right association principle resolve relative clauses attachment relative clauses assumed modify rightmost available constituent 
example list employee hired salary greater relative clause salary greater assumed refer employee 
advanced disambiguation techniques prepositional phrase attachment 
cases modifier attachment truly ambiguous 
consider request borrowed list employees division making shoes 
application domains making shoes may equally refer division employees 
cases nlidb user paraphrases readings ask user chose readings print answers corresponding readings indicating answers refer readings 
quantifier scoping determiners usually mapped logic quantifiers 
cases sentences words kind difficult determine quantifier wider scope 
consider question student taken course 
question readings 
student course variables 

check student course taken student course 
check course student taken student course reading student allowed taken different course second reading students taken course 
possible heuristic method resolve scoping ambiguities prefer preserving left right order quantifiers 
student taken course appears 
heuristic readings preferred reading universal quantifier introduced precedes existential quantifier introduced 
approach associate numeric strength determiner 
approach determiners greater strengths wider scopes 
returning question student taken course strength greater strength reading preferred 
reader referred chapter detailed discussion methods resolve quantifier scoping problems 
conjunction disjunction word denote disjunction conjunction 
introduces ambiguities difficult resolve 
examples borrowed illustrate problem list applicants live california arizona applicant lives california arizona reported 
possibility denote conjunction ruled applicant normally live state 
detects cases conceptually impossible denote conjunction turns 
section describes heuristic rule detecting cases conjunctive meaning 
minority female applicants know fortran mean female applicants belonging minority know fortran applicants female belong minority know fortran 
cases truly ambiguous 
case asked people live belmont boston parlance understands denote conjunction reports lation city 
contrast asked average salary blacks parlance provides answers corresponding possible meanings generating tables average salary ethnic group count black hispanic nominal compound problem average salary count english nouns modified preceding nouns 
meaning resulting compound constituent hard predict 
examples examples illustrate problem city department denote department located city department responsible city 
research department probably department carrying research 
research system probably system research system carrying research 
similar difficulties arise case adjective noun compounds 
example large may large volume sales employees big department may department employees department occupying lot space difficulty determining meaning noun noun adjective noun compounds meanings individual compounded nouns adjectives nlidbs require meaning possible noun noun adjective noun compound declared configuration phase see section 
ldc example system taught new noun department asked adjectives large small profitable nouns sales city precede new noun modifiers 
asked define meaning possible compound large department profitable department sales department terms concepts underlying database 
anaphora pronouns possessive determiners noun phrases project people denote implicitly entities mentioned discourse linguistic phenomenon called anaphora 
consider dialogue user ask ship destination unknown 

ship destination unknown 
saratoga ask understood refers ship destination unknown 
ask echoes back user question pronoun replaced system understands meaning 
prevents user misled cases pronoun anaphora resolved correctly 
shortened dialogue leads tpi 
reports 
leonard willems van loo 
project worker willems van loo leonard willems leaders 
van loo simplistic method handle pronoun anaphora keep list entities mentioned discourse 
pronoun encountered system examines list usually starting entries associates pronoun mentioned entity satisfies semantic constraints 
reports system reason refers project tpi pronoun masculine gender project neutral gender 
leaders probably reasoned refers people mentioned previous response projects mentioned previous response information stating persons projects leaders 
possessive determiner anaphora similar pronoun anaphora 
example reports mm 
projects 
project person bim noun phrases anaphoric expressions 
dialogue project anaphoric noun phrase referring project mmi leads mmi 
works project 
anaphora known problem natural language processing 
see overview issues relatively simple methods resolve cases pronoun anaphora 
elliptical sentences day discourse people incomplete elliptical sentences meaning complemented discourse context 
phenomenon illustrated dialogue user parlance highest paid female manager degrees harvard 

mit 

manager largest department 
name dept count patterson smallest department 
name dept count saavedra mit smallest department elliptical sentences 
handling complex cases elliptical sentences requires discourse model maintained system see section 
uses set discourse expectation contextual substitution rules allow elliptical utterances ones shown understood price largest single port fixed media disks 
speed 
smallest 
price smallest 
smallest ports 
speed ports 
handling elliptical sentences desirable feature nlidb 
nlidb users typically single stand questions ask 
exploratory query usually followed elliptical follow queries 
nlidbs chat oriented processing stand questions providing support elliptical questions 
systems questions shown formulated price largest single port fixed media disks 
speed largest single port fixed media disks 
speed smallest single port fixed media disks 
price smallest single port fixed media disks 
price smallest fixed media disks ports 
speed smallest fixed media disks ports 
having type question full annoying user problem alleviated providing facility editing previously entered questions 
utterances linguistic theories describe structure meaning grammatical perfectly formed utterances 
day language contains misspellings syntactically ill formed input telegraphic utterances main goal nlidb assist user system able understand user requests partially ill formed 
existing nlidbs handle simple cases utterances 
example parlance dropped articles sentences subject verb cases numbers agree capitalisation errors punctuation errors 
able understand sentences reynolds departments name people dept supervisory scientist 
ask uses dictionary correct spelling errors errors caused missing spaces 
orient converts cargo orient converts cargo 
architectures pattern matching systems early nlidbs relied pattern matching techniques answer user questions 
illustrate simplistic pattern matching approach consider database table holding information countries countries table country capital language france paris french italy rome italian 
primitive pattern matching system rules pattern capital country action report capital row country country pattern capital country action report capital country row rule says user request contains word capital followed country name name appearing country column system locate row contains country name print corresponding capital 
example user typed capital italy system pattern rule report rome 
rule allow system handle print capital italy please tell capital italy cases response generated 
second rule user request containing word capital followed word country handled printing capital country listed database table 
example capital country list capital country capital country please handled second rule 
main advantage pattern matching approach simplicity elaborate parsing interpretation modules see sections needed systems easy implement 
pattern matching systems manage come reasonable answer input range sentences patterns designed handle 
returning example second rule allow system answer det np vp rock contains magnesium parse tree syntax system question true capital country athens listing capital country considered indirect negative answer 
pattern matching systems necessarily simplistic techniques ones discussed 
savvy pattern matching system discussed employs pattern matching techniques similar ones signal processing 
pattern matching systems able perform impressively certain applications 
pattern matching approach lead bad failures 
case mentioned pattern matching nlidb asked titles employees los angeles system reported state employee worked took denote post code indiana assumed question employees states 
syntax systems syntax systems user question parsed analysed syntactically resulting parse tree directly mapped expression database query language 
typical example approach lunar 
syntax systems grammar describes possible syntactic structures user questions 
example similar example shows simplistic grammar lunar system 
np vp np det det rock specimen magnesium radiation light vp contains emits grammar says sentence consists noun phrase np followed verb phrase vp noun phrase consists determiner det followed noun determiner may grammar nlidb syntactic structure question rock contains magnesium shown parse tree 
nlidb map parse tree database query variable rock contains magnesium printout specimen question spacecraft question specimen question specimen emits info specimen contains info specimen rock specimen emits info emits radiation radiation radiation light contains info contains substance substance magnesium calcium spacecraft question spacecraft depart info spacecraft arrive info spacecraft vessel spacecraft depart info launched date departed date arrive info returns date arrives date semantic grammar evaluated underlying database system 
mapping carried rules completely syntactic information parse tree 
system example mapping rules stating mapping mapping rock rock 
mapping np det det mappings determiner noun respectively 
mapping np subtree example rock 
mapping contains contains 
mapping magnesium magnesium 
mapping vp mapping verb mapping noun sister verb 
mapping vp subtree example contains magnesium 
mapping np vp printout np vp mappings np vp subtree accordingly 
example mapping sentence shown 
syntax nlidbs usually interface application specific database systems provide database query languages carefully designed facilitate mapping parse tree database query 
usually difficult devise mapping rules transform directly parse tree expression real life database query language sql 
semantic grammar systems semantic grammar systems question answering done parsing input mapping parse tree database query 
difference case grammar categories non leaf nodes appear parse tree necessarily correspond syntactic concepts 
shows possible semantic grammar 
specimen spec rock specimen question contains contains info substance magnesium parse tree semantic grammar reader noticed categories grammar substance radiation specimen question correspond syntactic constituents noun phrase noun sentence 
semantic information knowledge domain question may refer specimens hard wired semantic grammar 
semantic grammar categories usually chosen enforce semantic constraints 
example grammar allow light follow verb contains 
contrast grammar previous section allows contains light 
grammar categories chosen facilitate mapping parse tree database objects 
example parse tree rock contains magnesium shown existence specimen question node direct system consult database tables containing information specimens tables containing information departures arrivals 
similarly contains info subtree direct system search table called contains info locate rows substance column magnesium 
semantic grammars planes ladder rel 
semantic grammar 
semantic grammars introduced engineering methodology allows semantic knowledge easily included system 
semantic grammars contain hard wired knowledge specific knowledge domain systems approach difficult port knowledge domains see section new semantic grammar written nlidb configured new knowledge domain 
example semantic grammar completely useless application database contains information employees salaries 
contrast information grammar previous section sentence consists noun phrase followed verb phrase probably application questions refer employees salaries 
intermediate representation languages current nlidbs transform natural language question intermediate logical query expressed internal meaning representation language 
intermediate logical query expresses meaning user question terms high level world concepts independent database structure 
logical query translated expression database query language evaluated database 
syntax rules semantic rules linguistic front natural language input parser parse tree semantic interpreter logical query database query generator database query database management system retrieved results response generator response lexicon world model mapping db info domain dependent knowledge database possible architecture intermediate representation language system modern natural language front ends cle intermediate meaning representation languages just 
shows possible architecture intermediate representation language system 
similar architecture sql 
natural language input processed syntactically parser 
parser consults set syntax rules generates parse tree similar shown 
reader referred information parsing techniques 
semantic interpreter subsequently transforms parse tree intermediate logic query semantic rules similar mapping rules section 
systems janus build montague semantics tradition carry semantic interpretation compositional rule rule manner 
syntax rule coupled semantics rule 
semantics rule computes logic expression constituent left hand side syntax rule function logic expressions constituents right hand side syntax rule 
logic expressions corresponding words declared lexicon 
early nlidbs syntax semantics rules ad hoc ideas expressed idiosyncratic formalisms 
modern systems syntax semantics rules increasingly influenced principled linguistic theories expressed variations known formalisms 
example uses grammar influenced gpsg cle grammar expressed unification formalism similar patr ii 
systems syntax rules linking non terminal symbols non leaf nodes parse tree corresponding semantic rules domain independent application domain 
information describing possible words leaf nodes logic expressions corresponding possible words domain dependent client class person class employee class technician class manager class salesperson class root class class feature class age class salary class hierarchy world model declared lexicon 
example lexicon lists possible forms words may appear user questions capital capitals border borders bordering bordered logic expressions describing meaning word 
example logic expression capital capital italy capital capital country capital variable standing capital country variable standing corresponding country 
similarly logic expression verb border countries border germany borders country country logic expression noun country italy country country country 
semantic interpretation module uses logic expressions words lexicon generate logical query 
example question capital country bordering greece mapped logical query 
variable names start capital letters 
answer capital country country country borders country greece capital capital country 
logic query states meaning user question find pairs capital country country country country borders greece capital capital country 
reader noticed logical query constructed logic expressions capital country border 
semantic interpreter consults world model describes structure surrounding world 
typically world model contains hierarchy classes world objects constraints types arguments logic predicate may 
shows world model hierarchy business application 
similar hierarchies team cle 
hierarchy states particular application domain person client employee employees divided technicians managers hierarchy typically combination constraints predicate arguments 
constraints specify classes arguments logic predicate may belong 
illustrate need predicate argument constraints consider business application assume underlying database holds information salaries employees hold information salaries people employed 
assume employee client 
question salary client retrieve information database contain information salaries clients 
nlidb able detect question conceptually problematic 
assume logic expression salary salary salary person logic expression client client person 
corresponding logical query answer salary person client person salary salary person 
predicate argument constraints specify argument client belong class type client class arguments salary belong classes salary class employee class respectively 
constraints require variable person logical query belong client class employee class 
client class employee class descendant hierarchy system able reason logical query contains class mismatch 
class mismatch reported user 
contrast assuming logic expression technician technician person person variable type technician class question salary technician generate logical query answer salary person technician person salary salary person 
case person required belong technician class employee class 
employee class ancestor subsumes technician class logical query contains class mismatch 
predicate argument constraints help system resolve natural language ambiguities 
consider example request list employees driving licence 
nlidb point view request contains modifier attachment ambiguity see section driving licence may refer employees 
case logic query answer employee employee employee drv licence lic employee employee lic 
second case driving licence refers logic query look answer employee employee employee drv licence lic employee lic 
world model specify arguments employee drv licence types employee class class drv licence class respectively second argument type drv licence class argument type person class persons allowed driving 
hierarchy state person class subsumes employee class class companies persons 
rule second logical query second argument type drv licence class type person class 
logic query generated parsing semantic interpretation module expresses meaning user question terms logical high level concepts 
logic query refer database objects tables columns specify search database retrieve necessary information 
order retrieve information requested user logic query transformed query expressed database query language supported underlying dbms database management system 
transformation carried database query generator mapping database information 
mapping database information specifies logic predicates relate database objects 
case interface relational database simplest approach link logic predicate sql select statement selecting rows database tables 
assume example database contains tables countries table country capital language france paris french spain madrid spanish germany berlin german 
borders table country country france spain france germany germany france 
consider logic query capital country bordering greece answer capital country country country borders country greece capital capital country 
mapping information link predicate country sql query select country countries table linking mean country true argument appears column country countries table 
similarly borders linked sql query select country country borders table mean borders true row borders table argument borders country row second argument borders country row 
capital linked select capital country countries table similar complex approach sql 
mapping information sql generate sql query similar select countries table capital countries table country countries table borders table countries table country borders table country borders table country greece transformation logic query database query need stage 
example writers describe principled multi stage transformation process nlidb developed university essex 
essex system generates logic query expressed version untyped calculus 
calculus expression transformed order predicate logic expression subsequently translated universal domain relational calculus domain relational calculus tuple relational calculus sql see description various forms relational calculus 
database query generated database query generator passed underlying dbms executes query database passes retrieved data response generator 
responsible reporting retrieved information user 
issues related response generation discussed section 
modern nlidbs underlying database assumed relational 
nlidbs support multiple underlying possibly heterogeneous databases see section 
research systems assume idiosyncratic database models especially designed facilitate development nlidb 
constructing new nlidb design issue division labour nlidb software dbms query language 
de facto industry standard query language sql 
language standard sql expressive programming language lacks constructs iteration recursion things 
computationally reasonable queries expressed natural language answered single sql query 
course current nlidbs support limited subset natural language 
cases subset may narrow queries expressed supported natural language subset sql 
point full natural language expressive single sql queries 
natural language subset supported linguistic component grows inevitably natural language queries mapped single sql queries 
cases designer nlidb choose restricting natural language subset match expressivity single sql queries allowing natural language query translated data dependent number sql queries piecing answer original natural language query set answers sql queries 
iteration recursion controlled nlidb software 
developments sql impact design nlidbs 
sql richer set storage structures types querying constructs sql 
hand means done dbms nlidb hand broader linguistic coverage needed nlidb ensure supported natural language subset captures expressivity dbms query language 
advantages nlidbs intermediate representation languages linguistic front part system generates logic queries see independent underlying dbms 
nlidb ported different dbms rewriting database query generator module see section 
approach allows development generic linguistic front ends parts interfaces systems databases expert systems operating systems 
example generic front cle system 
advantage particular architecture shown knowledge knowledge modified system new knowledge domain questions flights questions books library clearly separated rest front allowing knowledge domain portability see section 
nlidbs logical intermediate representation languages allow reasoning modules added semantic interpreter database query generator nlidb carry reasoning information stored database see section 
systems parse tree mapped directly expression database query language sql reasoning carried database query language 
practically impossible database query languages designed facilitate machine reasoning 
response generation discussion section focused interpretation natural language input 
generating suitable response important 
nlidbs interface relational databases simply print tuples retrieved database query approach acceptable retrieved database tuples may contain encoded information department codes department names 
system may able understand question case tuples retrieved 
cause failure explained user unknown word syntax complex relevant information database 
user question may contain false presuppositions database world case system report false presuppositions managers earning sales manager earns 
user request may express literally user wants know 
example may acceptable answer question flight athens response 
illustrate points consider dialogue user examples person works projects 
person 
david 

bim mmi rv 
rv works bim prolog 
question system detected false presupposition people working projects reported suitable message 
strictly logically speaking response person works projects 
second third questions system simply print responses printed additional information user probably wanted know 
cases cooperative responses see generated relatively simple mechanisms 
example questions david answer affirmative strategy print followed answer david 
usually difficult generate automatically questions david questions david 
description relatively simple mechanisms generate cooperative responses gives formal account techniques 
possible generate reasonable cooperative responses simple mechanisms 
cases order generate acceptable cooperative response nlidb able reason user goals 
discussed section 
problem nlidb may misinterpret question submitted user user aware query misinterpreted 
natural language questions readings nlidb may select reading question different reading user mind typed question 
cases may hard user understand system answered different question 
avoid misunderstandings contains module converts sql query back natural language 
reconstructed natural language request user ensure intermediate transformation stages caused request misinterpreted 
similar paraphrasing modules nlidbs 
describes paraphrasing module particular nlidb works 
retrieved information easier read nlidbs contain response formatting modules allow encoded information retrieved database dpt expanded natural formats sales department 
nlidbs natural language kinds retrieved data graphics pie charts 
multiple underlying systems architectures described far allow user interact single database 
cases access underlying applications may necessary 
certain domains information needed answer user question may distributed possibly heterogeneous databases 
see distributed heterogeneous databases 
nlidbs intellect allow user access transparently multiple databases single english question 
nlidb translates logic query set database queries expressed query language corresponding dbms 
nlidb collects joins partial results retrieved dbms reports answer user 
intellect configured interact database kbms expert system shell 
way reasoning layer added nlidb database allows nlidb carry reasoning data stored database see section 
ask configured interface transparently kinds software systems electronic mail systems screen word processors 
ask translates natural language request suitable expression directed appropriate underlying system 
way user views integrated computer system natural language understanding abilities 
janus ability interact databases expert systems decision support systems graphics systems underlying systems may involved answering user question 
example example asked greatest probability locating hours system database retrieve current positions separate expert systems compute navigation course submarine follow probability success submarine 
portability early nlidbs designed particular database application 
lunar example designed support english questions referring database particular structure holding data moon rocks 
application tailored nlidbs difficult port different applications 
years large part research nlidbs devoted portability design nlidbs different knowledge domains different underlying dbmss different natural languages 
section discusses different kinds nlidb portability presents methods approach goal portability 
discussion relates architecture 
knowledge domain portability existing nlidbs cope questions referring particular knowledge domain questions train services questions bank accounts 
nlidb provides knowledge domain portability configured wide variety knowledge domains 
typically nlidb reconfigured new knowledge domain teach system words concepts new domain concepts relate information stored database 
systems adopting architectures similar teaching modifies lexicon world model mapping database 
different nlidbs assume knowledge domain configuration carried people possessing different skills programmer systems part usually small defined nlidb code rewritten knowledge domain configuration 
assumed person carry configuration programmer preferably familiar nlidb code 
knowledge engineer nlidbs provide tools configure system new knowledge domain need programming 
assumed tools knowledge engineer person familiar basic knowledge representation techniques databases linguistic concepts 
dialogue domain editor knowledge engineer verb exceed population germany exceeds population portugal added system knowledge 
domain editor shield completely knowledge engineer programming language 
knowledge engineer required write prolog code map logic predicates database objects 
editor add verb verb exceed third sing 
pres exceeds past form exceeded perfect form exceeded participle form exceeding set subject belong numeric direct object set belong numeric indirect object linked complement predicate greater really wish add verb 
logic expression exceed defined greater arg arg arguments declared belong hierarchy class numeric see section 
systems parlance cle provide morphology modules allow system determine various forms words stems stored lexicon morphology rules 
way user specify word forms example exceed exceeds exceeded exceeding 
ability particularly important highly inflected languages word may numerous possible forms 
systems natural language cle built dictionaries listing common words 
dictionaries customised person configuring system include domain specific terminology 
db administrator designers team realistic scenario assume nlidb bought database nlidb linked 
situations responsibility installing configuring nlidb probably assigned local database administrator 
configuration tools designed persons understanding database concepts familiar particular database nlidb linked knowledge ai logics linguistics 
team tries infer questions asked database eliciting database administrator information structure database 
dialogue slightly simplified system collects information structure database table file chip 
reader reminded messages generated system shown typeface user entries shown typeface 
file name chip fields id maker width subject processor synonyms processor chip primary key id say processors pronouns subject field maker type field symbolic arithmetic feature symbolic 
user asked provide information table fields attributes subjects table describes processor dialogue continue system asking questions field chip 
reader noticed system questions refer logic concepts hierarchy classes predicates advanced linguistic concepts contain database terminology primary key 
user nlidb designers emphasise configuration phase complete nlidb learn new words concepts 
nlidb allow users teach system line definitions expressed natural language 
systems adopting approach usually large built vocabulary set primitive concepts meanings 
user extend system capabilities teaching new words defining meanings new words terms primitive concepts terms words system knows 
examples show capabilities parlance define person graduate degree earns month define rich employee employee earns year dbms portability nlidb provides dbms portability easily modified different underlying database management systems dbmss 
case nlidbs generate queries widely supported database query languages sql may possible port nlidb dbms minor modifications new dbms supports database query language old 
original database query language supported new dbms nlidb architecture ported new dbms rewriting module translates intermediate logic queries database queries 
contrast nlidbs intermediate representation languages may require extensive modifications new dbms support old database query language 
case nlidbs clearly separate linguistic front see rest system possible port nlidb configured particular different underlying dbms containing data knowledge domain modifying modules linguistic front 
natural language portability largest part research carried area nlidbs assumes natural language requests written english 
modifying existing nlidb different natural language difficult task nlidb may contain deeply embedded assumptions natural language 
nlidbs architecture modifying nlidb different natural language typically requires rewriting modifying syntax rules semantic rules lexicon 
attempt build portuguese version chat described 
information swedish version cle 
hardware programming language portability early eighties ability port nlidb different hardware software environments important aspects nlidbs 
nlidbs expensive research computing systems supporting exotic programming languages lisp machines making nlidbs impossible real life applications 
years availability powerful low cost computers fact ai languages prolog lisp commonly available allowed nlidbs easy port computing platforms 
restricted nl input current nlidbs support limited subset natural language 
limits subset usually obvious user see section 
users forced rephrase questions form system understand reached 
cases users try questions nlidb principle handle think questions outside subset natural language supported nlidb 
research projects attempt expand linguistic coverage nlidbs hoping eventually nlidbs able understand user requests particular knowledge domains 
alternative approach section deliberately explicitly restrict set natural language expressions user allowed input limits subset obvious user 
choosing carefully subset allowed natural language expressions design implementation nlidb simplified 
section presents approaches drastically restrict set natural language expressions user allowed input 
questions specific syntactic pattern allowed second user compose queries choosing words limited lists words displayed screen 
restricted nl syntax pre user allowed input questions specific syntactic pattern 
questions form conjoined noun phrases nested relative clauses conjoined relative clauses question simplified example question acceptable pre names ids categories employees assigned schedules include appointments executions orders addresses contain maple dates statuses comp example line contains conjoined noun phrases 
lines contain nested relative clauses 
notice clauses nested refers schedules refers appointments 
lines contain conjoined relative clauses 
clauses nested refer orders 
contrast question acceptable pre addresses appointments included schedules call times executions orders statuses comp example line contains clause nested relative clauses part 
conjoined relative clauses referring schedules 
nested respect refers orders schedules 
pre question pattern allow conjoined relative clauses part followed nested relative clauses part question ill formed 
claims pre question pattern allows users clear view questions system able answer pattern easy remember 
pre question pattern designed facilitate mapping user questions navigation graphs address address date status execution appointment order schedule includes assigned employee call time name id category pre database schema pre entity relationship database model 
shows database schema examples refer 
schema may exactly form schemata pre 
oval boxes correspond entity classes rectangular boxes correspond attributes continuous lines correspond relations 
conjoined noun phrases part pre question corresponds projection operator similar ones relational algebra 
projection operators determine attributes entity reported 
nested relative clauses part corresponds traversals continuous line links pre model 
conjoined relative clauses part corresponds select operators similar ones relational algebra 
select operator selects entities entity class criteria 
answer question example section pre transforms conjoined relative clauses part question select operator selects entities class order containing maple addresses having dates having statuses comp 
pre transforms nested relative clauses part question sequence relation continuous line traversals 
case example nested relative clauses mapped sequence traversals mapping orders appointments execution relation appointments schedules includes relation employees assigned relation 
pre transforms conjoined noun phrases part question projection operator 
employee entity reached previous step system reports name id category 
menu systems menu systems user able type directly questions 
question constructed choosing possible words phrases menus 
menus find delete insert commands attributes weight quantity city color name part supplier status suppliers parts specific suppliers specific parts specific greater greater equal equal equal number nouns comparisons connectors average total part city color modifiers part name part supplier city supplier name supplier supplier shipment part shipment supplier supplier status part weight shipment quantity shipped ship supply supplied initial screen displayed screen continuously updated 
method system illustrated examples 
section provides similar menu interface 
displays screen shown 
actual screens slightly complicated 
highlighted borders indicate menus currently active 
user selects find 
update capabilities see section discussed 
find word user question displayed lower part screen 
find selected attributes nouns connectors menus activated 
user selects color attributes menu question find color 
similar manner user selects name parts 
stage screen shown 
selecting word contents menus modified 
user selects color modifiers menu question find color name parts color 
point special menu appears screen listing possible colors 
selecting color red question complete 
user executes query selecting option screen system reports results retrieved database 
uses context free semantic grammar see section 
new word phrase selected system parses sentence assembled far processes grammar determine words phrases attached existing partial sentence form sentence system understand 
words phrases shown active menus 
way sentences system understand input user browse menus explore kinds questions system handle 
new semantic grammar needed new knowledge domain see section grammars cope large number possible user sentences 
menus greatly restrict kinds sentences user input find delete insert commands attributes weight quantity city color name part supplier status suppliers parts specific suppliers specific parts specific greater greater equal equal equal find color name parts nouns comparisons connectors part city color modifiers part name part part weight supplied screen words selected semantic grammars relatively simple write 
typically customised new application man hours 
menu approach guarantees user input free spelling errors allows user queries input simple pointing device 
mentioned applications requiring long questions menu searching tedious 
nlidbs intelligent agents nlidbs described far direct interfaces underlying database sense simply translate user questions suitable database queries 
database seen source information world 
nlidb contains simplistic world model section 
section discuss nlidbs contain knowledge surrounding world user 
knowledge allows handle questions answered directly dbms understand better user goals 
reasoning world cases may possible answer natural language question necessary raw data database 
questions involving common sense domain expertise typical examples 
cases answer question explicitly stored database produce answer nlidb able carry reasoning data stored database 
assume example database holds medical records af patients hospital names patients ages diagnoses patient treatments patients received assume nlidb asked patients develop lung disease 
assume database response generator response natural language input parser sem interpreter reasoning module dbms logic query rule base architecture nlidb reasoning module show explicitly probable patient develop disease probabilities stored database 
case nlidb able answer question told medical data database determine probable patient develop lung disease 
words nlidb access domain expertise case medical expertise form rules showing carry reasoning raw data database 
architecture extended allow nlidb carry reasoning data database 
possible extension exemplified add rule reasoning module top database shown 
systems adopting architecture transform natural language question logic query captures meaning question discussed section 
asked patients develop lung disease system generate logic query variables start capital letters report patient patient patient develop patient lung disease predicates logic queries may linked directly tables database discussed section 
example patient patient linked database table patients listing patients hospital 
patient patient true patients showed patient patient hospital 
predicates directly linked database tables suitable rules rule base showing evaluate instances predicates 
continuing example rule base contain rule develop patient disease prob develop patient disease rule says patient develop disease probability patient developing disease greater rules show data database assess probability patient developing disease 
example patient blood disease prob develop patient lung disease smoker patient prob develop patient lung disease rules show combine probabilities predicted rules cases rules apply patient blood disease smoker 
see rule reasoning probabilities 
logic queries rules rule base expressed prolog 
logic query treated prolog goal evaluated prolog interpreter rows database tables treated prolog facts 
see example information prolog linked external databases 
full power prolog available evaluating query defining rules rule base internal prolog database hold knowledge world easily encoded external relational database 
chat offer similar capabilities 
intellect configured kbms expert system shell reasoning module 
logic query passed kbms responsibility kbms find possible answers specialised inferencing techniques facts stored external database 
way full power expert system shell forward chaining backward chaining hypothetical reasoning available evaluating logic query shell tools develop rule base 
natural language capabilities intellect define kbms rules 
example kbms rule entered customer overdue balance outstanding credit risk high 
natural language questions query shell reasoning 
example application smith rejected cause system report steps took reject smith application 
reasoning module considered part nlidb independent layer top database system component expert database system 
strong argument favour view ability carry reasoning top database needed nlidbs 
graphical interface need access reasoning module order answer graphical query corresponding patients develop lung disease 
reasoning module part nlidb code 
independent module available application may need 
reasoning user goals user requests express literally user wants know 
consider dialogue example american airlines night flight dallas 
better system respond flight 
united flight 
case responses simply printing response nlidb reported additional information user probably interested know 
notice response alternative united flight reported user requested american airlines flight 
mentioned section cases reasonably cooperative responses generated relatively simple mechanisms 
example questions american airlines night flight dallas answer negative nlidb report answer weaker question carrier night flight dallas 
weaker question generated original removing restriction restriction carrier american airlines example 
similar elaborate method proposed 
unfortunately simple strategies dropping arbitrary restriction generate acceptable responses 
pointed previous dialogue american airlines night flight dallas 
miami 
dialogue system dropped restriction flight go dallas restriction carrier american airlines 
resulting cooperative response probably irritating user 
avoid inappropriate responses nlidb able understand user goals 
called plan recognition literature see example 
previous question nlidb able understand user goal go dallas inappropriate report flight miami 
achieved having rule stating person asks flight particular location goal person probably reach location 
rule state person specified particular carrier flying carrier probably preference goal 
rule state possible satisfy goals preferences preferences goals dropped 
american airlines night flight dallas american airlines night flight dallas system drop carrier constraint destination constraint 
reasoning user goals carried reasoning modules similar ones described previous section 
case rule base contain rules explaining user requests relate goals satisfy user goals 
user request mapped logic query logic query passed reasoning module 
reasoning module try satisfy user reasoning goals retrieving information database 
rules rule base thought constituting model user logic system describing user utterances relate user intentions beliefs 
need elaborate user models essential dialogue systems discussed section 
dialogue systems architectures discussed far focus understanding individual user questions 
parsing semantic interpretation modules form backbone system dialogue control rules current state discourse natural language input natural language interpretation module dialogue controller natural language generation module logic expression capturing meaning natural language input logic expression capturing meaning natural language output natural language output logic query results reasoning world module rules reason world database holding data world possible architecture dialogue oriented system reasoning response generation modules treated peripheral accessories 
words processing individual question drives system behaviour 
dialogue oriented systems system behaviour driven reasoning module reasons goals beliefs user system 
possible architecture dialogue oriented system shown 
architecture shown greatly influenced ir nli architecture described 
central module architecture dialogue controller 
dialogue controller reasoning module purpose understand user needs convey relevant information user 
dialogue controller consults rule base contains rules explaining carry dialogue 
example simplified dialogue control rule natural language consultation system rule says want system know system believe system know user related know system know ask system user know mutual want system know system know mutual believe system know user related system wants know piece knowledge called system believes user knows related system know user know system ask user question asked system assume system user know system wants learn system user know system believes user knows related current state discourse contains facts describing current goals beliefs system facts describing system currently understands goals beliefs user 
natural language interpretation natural language generation modules subordinate dialogue controller 
dialogue controller wishes communicate information user ask user question report retrieved information formulates logic expression captures meaning message generated 
logic expression passed natural language generation module transforms natural language message 
natural language interpretation module transform user response logic expression logic expression passed dialogue controller 
dialogue controller wishes retrieve information world formulates logic query passed reasoning world module 
uses rules reason world carry reasoning data stored external database discussed section 
dialogue oriented systems generation system messages see section equally important interpretation user input 
system messages carefully chosen guide dialogue areas clarify user goals beliefs 
system messages reflect correctly understanding capabilities 
topics section highlights areas nlidb research explored database updates meta knowledge questions temporal questions multi modal interfaces 
database updates nlidbs user allowed update interface linguistic knowledge natural language requests section systems support natural language requests update underlying database 
database updates natural language introduce new problems illustrated section 
ask update requests appear point dialogue system 
dialogue examples home port tokyo 
yokohama home port tokyo hong kong 
yokohama replaced hong kong home port tokyo 
cargo tokyo coal 
coal added cargo tokyo 
cargo tokyo 
grain coal ask knows ship may home port 
informed home port tokyo hong kong replaces yokohama previously known home port tokyo hong kong 
contrast ship may carry kinds cargo 
informed cargo tokyo coal ask adds coal kinds cargo known carried tokyo grain 
unfortunately satisfying natural language update request straightforward 
explained natural language update requests satisfied ambiguous lead unanticipated side effects due database constraints user aware 
consider database containing tables example borrowed employees table employee salary department adams inventory white marketing brown sales smith sales dialogue takes place list employees managers 
employee manager adams fisher white baker brown jones smith jones change brown manager jones baker 
done 
list employees managers 
employee manager adams fisher white baker brown baker smith baker departments table department manager sales jones marketing baker inventory fisher notice smith manager changed jones baker requested 
user aware database structure behaviour appear erratic 
user know database employees linked managers departments 
brown works sales department system changed sales manager jones baker caused employees sales department smith get new manager 
indirect link employees managers update request ambiguous 
changing sales manager jones baker system moved smith sales department managed jones marketing department managed baker 
maintains connection graph models user view database structure 
user utterance reflects awareness presupposition database object link restriction graph modified accordingly 
time ambiguous update request encountered system consults connection graph determine possible interpretations update request meaningful respect user current view underlying database 
ranks remaining candidate interpretations set heuristic rules 
example interpretations causing fewer side effects respect user view preferred 
returning dialogue list employees managers answered user view database equivalent table form employee manager adams fisher white baker brown jones smith jones system interprets request change brown manager jones baker request change sales manager jones baker user view database shown left 
side effects shown typeface 
employee manager adams fisher white baker brown baker smith baker employee manager adams fisher white baker brown baker smith jones system interprets request request move brown sales department managed jones marketing department managed baker user view database shown right 
second interpretation causes side effects user view preferred heuristics 
meta knowledge questions meta knowledge questions questions referring knowledge knowledge 
example meta knowledge questions information database 
known ships 
possible employee job titles 
handle relative clauses 
example shows ask reacts meta knowledge question known ships 
classes navy attributes destination home port 
interesting kind meta knowledge questions modal questions 
modal questions user asks case 
example female employee sales 
employee earn manager 
true candidates 
authors method handling modal questions nlidbs relational databases 
method nlidb developed essex university 
temporal questions nlidbs designed interface snapshot databases 
snapshot databases store information state world usually taken state 
consequently nlidbs support questions referring state world 
example nlidb database typically able answer questions manager sales department 
maximum manager salary 
usually support temporal questions referring past previous manager sales department 
maximum manager salary years 
smith sales manager annual sales income exceed 
nlidbs answer temporal questions cope semantics natural language temporal expressions tenses aspects temporal designed interface snapshot databases facilitate manipulation time dependent information 
decade computer scientists increasingly interested temporal database systems database systems designed store information previous states world generally support notion time 
reader referred temporal databases 
clifford hafner hinrichs considered natural language interfaces temporal databases 
multimodal interfaces discussed section form interfaces graphical interfaces appear advantages natural language interfaces 
systems attempt merge natural language graphics menus forms combine strengths modalities 
janus user allowed combine text menus graphics speech forming queries 
user example type question greatest probability locating hours mouse screen displaying positions ships determine set ships refers 
way integrate natural language modalities exemplified 
complex manufacturing information decision support system multimodal input capabilities simple nlidb 
methods simple nlidbs 
examples borrowed 
initially displays set menus listing available kinds actions queries move lot put object 
way user clear view system capabilities 
action query type selected displays form containing fields filled 
example user selects move lots action system displays form authors currently involved research natural language interfaces temporal databases 
move lots lots station field filled input form modality supported 
example lots field filled selecting lots diagram displayed screen typing natural language 
form filled follows denotes pointing mouse move lots lots baked lot station manual inspection station smallest queue moved allowing natural language mouse pointing user combine strengths modalities 
case lots field user chosen natural language baked lot allows universal quantification expressed easily 
difficult express universal quantification graphics mouse system display baked lots user select baked lots display mouse 
similarly natural language allows manual inspection station smallest queue expressed easily concisely 
natural language support user probably formal specification language numerous nested menus 
contrast case field user substituted part natural language expression pointing action diagram avoiding need provide lengthy natural language description location 
form filling approach passes kinds natural language ambiguity 
simplified example put object block box destination table corner clear system box modifier block corner modifier table table corner description destination example modifier object moved see section description modifier attachment problem 
question graphically displays objects anaphoric expressions pronouns see section follow questions may refer 
user subsequently deactivate possible referents pointing graphical representations reducing number possible referents system consider follow questions 
displays graphical representation discourse structure allowing user specify context follow questions refer 
shows modified example 
user specified baked lot lot baked follow questions lots lots hot 
baked lot 
lot baked 
context graph hot 
pronoun lot baked refers hot lots hot lots baked lot 
supports questions referring past events states 
user allowed specify previous time query refers dragging filling special fields see details 
state art attempted serve purposes introduce reader field nlidbs describing central issues indicate current situation area outlining facilities methods typical implemented systems 
goal surveying field achieved incompletely moment 
summary sufficient give rise general observations nlidbs 
dealt detail evaluation nlidbs 
complex problem 
difficult formulate general quantitative subtle qualitative measures effectiveness parsers programs extract syntactic information sentences consider entire system involving semantics querying response generation user interfacing situation complicated 
standard benchmarks developed see discussion 
circumstances appraisal current state field subjective 
order structure presentation round issues deliberately overlooked dimension distinction held important extent systems experimental research vehicles working commercial applications 
majority systems referred oriented exploration possible techniques production products 
fall category experimental prototypes include lunar chat team ask ldc intellect parlance natural language english wizard actual products systems real applications 
context caveats observations valid 
facets nlidbs dictionaries parsing great deal research development practical system modules constructed fairly straightforwardly 

relatively understood subareas mentioned single agreed consensus theory technique 
aspects nlidbs difficult theoretical problems remain solved nlidbs fully useful easily constructed 

development nlidbs longer fashionable topic academic research 

commercially available systems purport allow querying databases english remembered claim flexible possible interpretations 
systems may extremely effective tools database access may form english natural languages 
mean problem completely unrestricted natural language queries solved 

interfaces solely keyboard input natural language practical long term spoken input integration graphical user interfaces route practical success 
nlidbs useful testbed developing necessary techniques semantic interpretation subsequent incorporation complex systems 
acknowledgments authors bim kathleen bim bates bbn systems technologies barclay natural language john hilary quick ibm uk bruce sas software providing information systems developed companies 
authors grateful chris david john nerbonne provided pointers literature addresses companies developed nlidbs 
special john nerbonne comments earlier draft 
reports carried author supervision authors 
author grateful greek state foundation funding studies edinburgh 
allen 
recognizing intentions natural language utterances 
brady berwick editors computational models discourse chapter pages 
mit press cambridge massachusetts 
alshawi 
core language engine 
mit press cambridge massachusetts 
alshawi carter crouch pulman rayner smith 
clare contextual reasoning cooperative response framework core language engine 
final report sri international december 
androutsopoulos 
interfacing natural language front relational database msc thesis 
technical department artificial intelligence university edinburgh 
major manufacturer advertised system allowed program english closer inspection turned interpreter programming language basic 
androutsopoulos ritchie 
efficient portable natural language query interface relational databases 
chung ali editors proceedings th international conference industrial engineering applications artificial intelligence expert systems edinburgh pages 
gordon breach publishers pa june 
isbn 

modular answering system queries english programmer manual 
technical report aiai sr artificial intelligence applications institute university edinburgh march 

modular answering system queries english user manual 
technical report aiai sr artificial intelligence applications institute university edinburgh june 
ballard 
semantic acquisition 
proceedings th annual meeting acl new york pages 
ballard 
syntax semantics user defined modifiers transportable natural language processor 
proceedings nd annual meeting acl stanford california pages 
ballard 
ldc transportable knowledgebased natural language processor office environments 
acm transactions office information systems january 
bates moser stallard 
transportable natural language database interface 
kerschberg editor expert database systems pages 
benjamin cummings menlo park ca 
bbn systems technologies 
bbn parlance interface software system overview 
bell rowe 
exploratory study ad hoc query languages databases 
proceedings th international conference data engineering tempe arizona pages 
ieee computer society press february 
bim information technology 
open natural query system general description 
commercial leaflet 


natural language interfaces new philosophy 
magazine pages january 
bobrow 
rus system 
research natural language understanding bbn report 
bolt beranek newman cambridge massachusetts 
bobrow resnik weischedel 
multiple underlying systems translating user requests programs produce answers 
proceedings th annual meeting acl pittsburgh pennsylvania pages 
crawford 
natural language interface casual users 
international journal man machine studies 
carbonell 
discourse pragmatics ellipsis resolution task oriented natural language interfaces 
proceedings st annual meeting acl cambridge massachusetts pages 
ceri gottlob tanca 
logic programming databases 
springer verlag berlin 
ceri gottlob wiederhold 
efficient database access prolog 
ieee transactions software engineering february 
ceri 
distributed databases principles systems 
mcgraw hill new york 
clifford 
natural language querying historical databases 
computational linguistics december 
clifford 
formal semantics pragmatics natural language querying 
cambridge tracts theoretical computer science cambridge university press cambridge england 
clifford warren 
formal semantics time databases 
acm transactions database systems june 
codd 
relational model large shared data banks 
communications acm 
codd 
steps rendezvous casual user 
editors data base management 
north holland publishers 
cohen 
role natural language multimodal interface 
technical note computer dialogue laboratory sri international 
copestake sparck jones 
natural language interfaces databases 
knowledge engineering review 
damerau 
operating statistics transformational question answering system 
american journal computational linguistics 
damerau 
problems solutions customization natural language front ends 
acm transactions office information systems april 
davidson kaplan 
natural language access data bases interpreting update requests 
computational linguistics april june 
de fox turner walls 
natural language system formal semantics 
proceedings international conference current issues computational linguistics malaysia 
de turner walls 
natural language front relational systems formal semantics 
proceedings tokyo japan 
de 
generating english paraphrases formal relational calculus expressions 
proceedings th international conference computational linguistics bonn germany august 

natural language querying practical 
data base pages may 
diaper 
identifying knowledge requirements expert system natural language processing interface 
harrison monk editors people computers designing usability proceedings second conference british computer society human computer interaction specialist group university york pages 
cambridge university press september 
dowty wall peters 
montague semantics 
reidel publishing dordrecht holland 

accessing relational higher databases database set predicates logic programming languages 
phd thesis university zurich 
epstein 
transportable natural language processing simplicity pre system 
acm transactions office information systems april 
gal lapalme saint somers 
prolog natural language processing 
wiley chichester england 
gazdar mellish 
natural language processing lisp 
addison wesley 
prolog version available 
gazdar sag 
generalized phrase structure grammar 
blackwell oxford 
horacek 
dialog control natural language system 
proceedings th conference european chapter acl manchester england pages 
riley 
expert systems principles programming 
pws kent publishing boston 
isbn 

robust portable natural language database interface 
proceedings st conference applied natural language processing santa monica california pages 
grosz 
team transportable natural language interface system 
proceedings st conference applied natural language processing santa monica california pages 
grosz appelt martin pereira 
team experiment design transportable natural language interfaces 
artificial intelligence 
tasso 
ir nli expert natural language interface online data bases 
proceedings st conference applied natural language processing santa monica california pages 
hafner 
interaction knowledge sources portable natural language interface 
proceedings nd annual meeting acl stanford california pages 
hafner 
semantics temporal queries temporal data 
proceedings rd annual meeting acl chicago illinois pages july 
hafner 
portability syntax semantics datalog 
acm transactions office information systems april 
harris 
user oriented data base query robot natural language query system 
international journal man machine studies 
harris 
robot system natural language processing applied data base query 
proceedings acm annual conference 
harris 
experience robot commercial natural language data base query applications 
proceedings th international joint conference artificial intelligence tokyo japan pages 
harris 
experience intellect artificial intelligence technology transfer 
ai magazine 
hendrix 
natural language interface panel 
computational linguistics april june 
hendrix sacerdoti 
developing natural language interface complex data 
acm transactions database systems 
hinrichs 
tense quantifiers contexts 
computational linguistics june 
hirst 
anaphora natural language understanding survey 
springer verlag berlin 
hobbs 
resolving pronoun 
grosz sparck jones webber editors readings natural language processing pages 
morgan kaufmann publishers california 
jarke turner stohr vassiliou white 
field evaluation natural language data retrieval 
ieee transactions software engineering se 
johnson 
natural language computing commercial applications 
ovum london 
kaplan 
cooperative responses portable natural language data base query system 
artificial intelligence 
kaplan 
cooperative responses portable natural language database query system 
brady berwick editors computational models discourse chapter pages 
mit press cambridge massachusetts 
lopes 
transforming english interfaces languages experiment 
proceedings nd annual meeting acl stanford california 
de 
natural language relational query expressions 
icl technical journal may 
walls de fox turner 
modal reasoning relational systems 
technical report csm university essex dept computer science 
walls de fox turner 
formal approach translating english sql 
jackson robinson editors proceedings th british national conference databases 
lucas 
database applications prolog 
press 
main benson 
denotational semantics natural language question answering programs 
computational linguistics january march 

natural languages 
sun technology pages summer 
martin appelt pereira 
generality natural language interface system 
grosz sparck jones webber editors readings natural language processing pages 
morgan kaufmann publishers california 
martin church patil 
preliminary analysis breadth parsing algorithm theoretical experimental results 
technical report mit lcs tr laboratory computer science massachusetts institute technology june 
natural language natural language 
commercial leaflets 
ott 
aspects automatic generation sql statements natural language query interface 
information systems 
ovum london 
natural language markets 
isbn 
palmer finin 
workshop evaluation natural language processing systems 
computational linguistics 
perrault grosz 
natural language interfaces 
shrobe editor exploring artificial intelligence pages 
morgan kaufmann publishers san mateo california 
relational technology ingres forms menus 
resnik 
access multiple underlying systems janus 
bbn report bolt beranek newman cambridge massachusetts september 
scha 
philips question answering system 
sigart newsletter 
acm new york february 

improved responses english language front 
master thesis dept artificial intelligence university edinburgh 
shieber 
unification approaches grammar 
csli lecture notes number centre study language information stanford california 

comparison review commercial natural language interfaces 
de jong nijholt editors natural language interfaces laboratory commercial user environments proceedings th twente workshop language technology enschede twente university nl june 
mmc preprint institute language technology artificial intelligence tilburg university nl 
small 
experimental comparison natural structured query languages 
human factors 
sun microsystems manual 
tansel clifford gadia jajodia segev snodgrass 
temporal databases theory design implementation 
benjamin cummings california 
burger 
problems natural language interface dbms examples 
proceedings st conference applied natural language processing santa monica california pages 
ross thompson miller 
menu natural language understanding 
proceedings st annual meeting acl cambridge massachusetts pages 
ross thompson usable natural language interfaces menu natural language understanding 
proceedings chi conference human factors computer systems boston 
acm 
thompson thompson 
introducing ask simple knowledgeable system 
proceedings st conference applied natural language processing santa monica california pages 
thompson thompson 
ask transportable half dozen ways 
acm transactions office information systems april 
thompson 
rel rapidly extensible language system 
proceedings th acm national new york pages 
thompson thompson 
practical natural language processing rel system prototype 
editors advances computers pages 
academic press new york 
bethesda md intellect natural language system 
commercial leaflet 
bethesda md kbms knowledge base management system 
commercial leaflets 
ullman 
principles database knowledge base systems volume 
computer science press rockville maryland 
wallace 
communicating databases natural language 
ellis horwood new york 
waltz 
english language question answering system large relational database 
communications acm july 
warren pereira 
efficient easily adaptable system interpreting natural language queries 
computational linguistics july december 
weischedel 
hybrid approach representation janus natural language processor 
proceedings th annual meeting acl vancouver british columbia pages 
whittaker 
user studies design natural language systems 
proceedings th conference european chapter acl manchester england pages april 
ferrara brunner 
empirical study predictive powers simple attachment schemes post modifier prepositional phrases 
proceedings th annual acl pittsburgh pages june 
woods 
procedural semantics question answering machine 
proceedings fall joint computer conference pages new york ny 
afips 
woods kaplan webber 
lunar sciences natural language information system final report 
bbn report bolt beranek newman cambridge massachusetts 

