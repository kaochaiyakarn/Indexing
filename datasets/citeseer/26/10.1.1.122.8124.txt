classification model transformation approaches krzysztof czarnecki simon university waterloo canada czarnecki acm org computer org model driven architecture mda fra initiative object management group omg define approach software development modeling automated mapping models implementations 
basic mda pattern involves defining model pim automated mapping platform specific models psms 
mda approach promises number benefits including improved portability due separating application knowledge mapping specific implementation technology increased productivity due automating mapping improved quality due reuse proven patterns best practices mapping improved maintainability due better separation concerns 
current omg standards meta object facility mof mof uml uml provide established foundation defining psms wellestablished foundation exists transforming psms glr 
effort change situation omg initiated standardization process issuing request proposal rfp query views transformations qvt qvt 
process eventually lead omg standard defining model transformations interest pim psm transformations defining views models synchronization models 
driven practical needs omg request large number approaches model transformation proposed 
propose feature model compare different model transformation approaches offer survey categorization existing approaches published literature great aks wil atom atom viatra bm mb relational approach ak approaches glr submitted response omg qvt rfp nd submission round cdi ast implemented open source mda tools jam je gmt implemented commercial mda tools xde xde architect ca generator framework feature model different possible design choices model transformation approach explicit main contribution 
give detailed classification data individual approach require significant space details individual approaches moving target anyway 
propose clustering existing approaches major categories capture different flavours main design choices 
organized follows 
section presents feature model model transformation approaches 
section presents major categories existing transformation approaches 
section concludes remarks practical applicability different categories 
design features model transformation approaches section result applying domain analysis existing model transformation approaches 
domain analysis concerned analyzing modeling variabilities commonalities systems concepts domain 
document results feature diagrams common notation domain analysis 
fig 
shows top level feature diagram subnode represents major area variation 
explanation notation legend fig 

fig 
feature diagram representing top level areas variation essentially feature diagram defines taxonomy 
note aim taxonomy normative 
unfortunately relatively new area model transformations overloaded terms terms taxonomy different meanings original descriptions different approaches 
example term pattern denote model fragment zero metavariables approaches term denote specification constellation model elements model 
provide definitions terms 
elaborates major area variation fig 
giving feature diagram describing different choices text providing examples approaches supporting feature 
combination feature diagrams additional information referred feature model 
please note feature model treats model model model code approaches uniformly 
distinguish categories section 
transformation rules feature diagrams created feature modeling tool available cvs sourceforge net cgi bin cgi legend mandatory optional alternative inclusive fig 
features transformation rules transformation rule consists parts left hand side lhs right hand side rhs 
lhs accesses source model rhs expands target model 
rhs lhs may may syntactically separated 
words rule syntax may specifically mark rhs lhs classical rewrite rules syntactic distinction transformation rule implemented java program see section 
lhs rhs represented mixture variables variables hold elements source target models intermediate elements 
referred metavariables distinguish variables may part transformed model java variables transformed java programs 
patterns patterns model fragments zero variables 
string term graph patterns 
string patterns textual templates see section 
model model transformations usually term graph patterns see section 
patterns represented concrete syntax corresponding source target model language syntax textual graphical see section 
logic logic expresses computations constraints model elements 
logic may non executable executable 
non executable logic specify relationship models 
executable logic take declarative imperative form 
examples declarative form include ocl ocl queries retrieve elements view templates special case transformation rules 
lhs may minimal parameter list may contain logic access source model 
rhs contains pattern may include additional logic performing pattern composition 
source model xde implicit creation target elements constraints cdi 
imperative logic form java code calling repository apis jmi jmi manipulate models directly 
variables patterns untyped syntactically typed typed 
case syntactic typing variable associated metamodel element instances hold 
semantic typing allows stronger properties asserted 
example syntactic type variable expression semantic type expression evaluating integer value available current model transformation languages supported metaprogramming languages metaml metaocaml mml 
included semantic typing feature model indicate possible development 
aspects transformation rules bidirectionality rule may executable inverse direction see section 
rule parameterization transformation rules may additional control parameters allowing configuration tuning 
intermediate structures approaches viatra great require construction intermediate model structures 
rule application scoping fig 
features rule application scoping source scope scope source model considered rule application 
approaches support flexible scoping xde great scope smaller entire source model set 
important particularly performance reasons 
target scope scope target model rhs expanded 
target scoping may provided xde 
relationship source target fig 
features relationship source target approaches mandate creation new target model separate source ibm dstc 
approaches source target model support place update viatra 
approaches xde allow setting target scope new model possibly parts existing original source model place update 
furthermore approach allow destructive update existing target update extension 
approaches non deterministic selection fixpoint iteration scheduling may restrict place update extension order ensure termination viatra 
rule application strategy fig 
features rule application strategy rule needs applied specific location source scope 
may match rule source scope need application strategy 
strategy deterministic non deterministic 
example deterministic strategy exploit standard traversal strategy depth containment hierarchy source 
stratego str example term rewriting language rich mechanisms express traversal tree structures 
examples non deterministic strategies include point application rule applied non deterministically selected location concurrent application rule applied concurrently matching locations source viatra 
target location rule determined automatically manually 
case place update source location target location viatra 
approach separate source target models traceability links determine target ibm dstc rule may follow tractability link target element created rule element target 
target selected interactively user offered xde 
rule scheduling fig 
features rule scheduling scheduling mechanisms determine order rules applied 
scheduling mechanism vary main areas form scheduling aspect expressed implicitly explicitly 
implicit scheduling system user defined 
implicit user defined scheduling involves designing patterns logic rules guarantee certain execution orders 
example rule check information rule produce 
explicit scheduling dedicated constructs explicitly control execution order 
explicit scheduling internal external 
external scheduling clear separation rules scheduling logic viatra case internal scheduling 
example internal scheduling mechanism allowing transformation rule directly invoke rules cdi template approaches section offer way call templates 
rule selection rules selected explicit condition 
approaches allow non deterministic choice conflict resolution mechanisms priorities 
combination selection mechanisms offered 
rule iteration rule iteration mechanisms include recursion looping fixpoint iteration repeated application changes detected 
combination mechanisms offered 
phasing transformation process may organized separate phases phase specific purpose certain rules invoked phase 
example structure oriented approaches see section separate phase create containment hierarchy target model separate phase set attributes target 
rule organization fig 
features rule organization consider areas context organizing multiple transformation rules modularity mechanisms approaches allow packaging rules modules ast viatra 
module import module access content 
reuse mechanisms reuse mechanisms offer way define rule rules 
general scheduling mechanisms define composite transformation rules approaches offer dedicated reuse mechanisms inheritance rules ast derivation extension cdi specialization modules ast composition logic operators 
organizational structure rules may organized structure source language attribute grammars actions attached elements source language target language may independent organization 
example organization structure target 
approach rule target element type rules nested containment hierarchy target metamodel 
example target language package construct classes nested rule creating packages contain rule creating classes contain rules creating attributes methods 
traceability links transformations may record links source target elements 
links useful performing impact analysis analyzing changing model affect related models synchronization models model debugging mapping stepwise execution implementation back high level model determining target transformation see section 
fig 
features tracing approaches provide dedicated support traceability cdi expect user encode traceability mechanisms adding kinds links models viatra great 
approaches category require developers manually encode creation traceability links transformation rules cdi create traceability links automatically 
case automated support approach may provide control traceability links get created order limit amount traceability data gets generated 
choice location links stored source target separately 
preferable approach store guid model element store traceability information separate source target 
directionality rules applied direction binding lhs source expanding rhs target model 
cases declarative rule uses declarative logic patterns applied inverse direction 
property attractive context synchronization models 
alternative approach define separate rules direction 
transformation rules usually designed functional character input source model produce concrete result target model 
different inputs may lead output inverse rule may function 
case inversion enumerate number possible solutions infinite just establish part result concrete way part solutions variables defaults values output parts 
set rules may fail produce result due non termination 
major categories top level distinguish model code model model transformation approaches 
general view transforming models code special case model transformations need provide metamodel target programming language 
practical reasons reusing existing compiler technology code generated simply text fed compiler 
reason distinguish model code transformation better described model text model model transformation 
tools offer model model model code transformations xde 
model code category distinguish visitor template approaches 
model model category distinguish direct manipulation approaches relational approaches graph transformation approaches structure driven approaches hybrid approaches 
model code approaches visitor approaches basic code generation approach consists providing visitor mechanism traverse internal representation model write code text stream 
example approach 
object oriented framework providing set classes represent uml models api manipulating models visitor mechanism called generate code 
support mof standard define new metamodels new model element types introduced subclassing existing java classes represent predefined model element types 
template approaches majority currently available mda tools support template model code generation generator framework je architect xde provide model model transformations 
reuses existing open source template generation technology velocity xd 
template usually consists target text containing splices access information source perform code selection iterative expansion see cle template code generation 
terminology lhs uses executable logic access source rhs combines untyped string patterns executable logic code selection iterative expansion syntactic separation lhs rhs 
template approaches usually offer user defined scheduling internal form calling template 
lhs logic accessing source model may different forms 
logic simply java code accessing api provided internal representation source model jmi declarative queries ocl xpath xp 
generator framework propagates idea separating complex source access logic need navigate gather information different places source model templates moving user defined operations source model elements 
compared visitor transformation structure template resembles closely code generated 
templates lend iterative development easily derived examples 
template approaches discussed section operate text patterns contain untyped represent syntactically semantically incorrect code fragments 
hand textual templates independent target language simplify generation textual artefacts including documentation 
related technology frame processing extends templates sophisticated adaptation structuring mechanisms frames bas fpl fpl ang 
knowledge fpl applied generate code models 
model model approaches model model transformations translate source target models instances different metamodels 
approaches support syntactic typing variables patterns 
existing mda tools provide model code transformation generating psms case just implementation code 
model needed 
bridging large abstraction gaps psms easier generate intermediate models go straight target psm 
example going class diagram ejb implementation tools generate intermediate ejb component model contains necessary information produce actual java code 
transformations modular maintainable 
intermediate models may needed optimization tuning debugging purposes 
addition pim psm transformation model model transformations useful computing different views system model synchronizing 
direct manipulation approaches approaches offer internal model representation plus api manipulate 
usually implemented object oriented framework may provide minimal infrastructure organize transformations class transformations 
users implement transformation rules scheduling scratch programming language java 
examples approach include implementing transformations directly mof compliant api jmi 
relational approaches category groups declarative approaches main concept mathematical relations ak cdi declarative approaches glr mapping rules ast 
basic idea state source target element type relation specify constraints 
pure form specification non executable ak relations mapping rules ast 
declarative constraints executable semantic case logic programming 
fact logic programming unification matching search backtracking natural choice implement relational approach predicates describe relations 
glr gerber explore application logic programming particular mercury typed dialect prolog logic object oriented logic paradigm implement transformations 
qvt proposal cdi inspired logic approach 
approach distinguishes relations framework bi directional specifications transformations mappings executable unidirectional transformations implementing relations 
relational approaches side effect free 
support backtracking contrast imperative direct manipulation approaches section create target elements implicitly cdi 
relational specifications ak relations mapping rules ast interpreted bi directionally 
approaches naturally support bi directionality 
approaches fix direction executable transformations cdi mappings 
approaches cdi require strict separation source target models allow place update 
graph transformation approaches category model transformation approaches draws theoretical graph transformations 
particular approaches operate typed attributed labelled graphs aeh kind graphs specifically designed represent uml models 
examples graph transformation approaches model transformation include viatra atom great 
graph transformation rules consist lhs graph pattern rhs graph pattern 
graph pattern rendered concrete syntax respective source target language viatra mof syntax 
preferred complex syntaxes uml may result huge patterns relatively small transformations 
lhs pattern matched model transformed replaced rhs pattern place 
lhs contains conditions additional lhs pattern negative conditions 
additional logic string numeric domains needed order compute target attribute values element names 
great offers extended form patterns multiplicities edges nodes 
approaches scheduling external form scheduling mechanisms include nondeterministic selection explicit condition iteration incl 
fixpoint iterations 
fixpoint iterations particularly useful computing transitive closures 
structure driven approaches approaches category distinct phases phase concerned creating hierarchical structure target model second phase sets attributes target 
framework determines scheduling application strategy users concerned providing transformation rules 
example structure driven approach model model transformation framework provided 
framework implemented java provides called incremental users subclass define transformation rules 
basic metaphor idea copying model elements source target varied achieve desired transformation effect 
framework uses reflection provide declarative interface 
transformation rule implemented method input parameter type determines source type rule method returns java object representing class target model element 
rules allowed side effects scheduling completely determined framework 
structure driven approach 
special property approach rule organization rule target element type nesting rules corresponds containment hierarchy target metamodel 
execution model viewed top configuration target model 
hybrid approaches hybrid approaches combine different techniques previous categories 
transformation rule language trl ast composition declarative imperative approaches 
classified relational category decided classify separately stronger imperative component 
similar distinguishes specification implementation 
mapping rule trl declares relationship source target elements constrained set invariants 
similar relations fit relational category section 
operational rules trl represent executable transformation rules 
contrast mapping rules operational rules explicitly state rule creates update deletes elements 
scheduling explicit internal form rule explicitly calls rules body 
rule inheritance supported 
rules organized modules called units 
inheritance modules overriding supported 
xde example highly hybrid approach 
xde supports model model transformation pattern mechanism 
original motivation patterns xde provide automated application design patterns 
consequently basic concept xde pattern mechanism parameterized collaboration uml mechanism model design patterns 
general model model transformations subsequent goal basic pattern mechanism evolved highly hybrid complex approach 
pattern represented package containing parameterized collaboration number models automatically customized copied merged target imperative java 
pattern application parameters bound interactively wizard bound automatically 
automatic selection source elements may achieved declaratively ocl queries trough imperative java 
repeated pattern application supported collection typed parameters 
pattern application gets recorded parameter bindings record reapply pattern original parameter bindings 
xde put constraints relationship source target creation new target place update update existing target model possible 
scheduling supported pattern nesting sophisticated scheduling programmed java 
patterns associated jsp code templates called order perform model code transformation 
model model approaches approaches mentioned completeness transformation framework defined omg common warehouse metamodel cwm specification cwm transformation implemented xslt xslt 
cwm transformation framework provides mechanism linking source target elements derivation target elements implemented concrete language prescribed cwm 
effectively cwm gives general model actual mechanism implement model transformations 
models serialized xml xml metadata interchange xmi xmi implementing model transformations xslt standard technology transforming xml attractive 
unfortunately approach severe scalability limitations 
manual implementation model transformations xslt quickly leads implementations verbosity poor readability xmi xslt 
solution overcome problem generate xslt rules declarative rule descriptions demonstrated 
approach suffers poor efficiency copying required pass value semantics xslt poor compactness xmi 
discussion model transformation relatively young area 
related builds established fields program transformation metaprogramming graphical modeling languages application object oriented metamodeling language definition set new context 
satisfactory solutions transforming models text template approaches case transforming models models 
new approaches model model transformation proposed years little experience available judge effectiveness practical applications 
respect stage exploring possibilities eliciting requirements 
modeling tools available market just starting offer model model transformation capabilities limited ad hoc proper theoretical foundation 
tools target generation ejb applications model transformations offer specifically developed support goal 
classified existing model model transformation approaches direct manipulation approaches relational approaches graph transformation approaches structure driven approaches hybrid approaches 
remainder section offer comments practical applicability different flavours model transformation 
comments intuition application examples published approaches 
lack experiments practical experience comments somewhat speculative hope valuable may stimulate discussion evaluation 
direct manipulation obviously low level approach 
offers user little support guidance implementing transformations 
basically done user 
structure driven category groups pragmatic approaches developed context particularly applicable certain kinds applications generating ejb implementations database schemas uml models 
applications require strong support transforming models correspondence source target elements 
application context typically need iteration particular scheduling scheduling system defined 
unclear approaches support kinds applications 
graph transformation approaches inspired heavily theoretical graph transformations 
approaches powerful declarative complex ones 
complexity stems nondeterminism scheduling application strategy require careful consideration termination transformation process rule application ordering including property confluence 
large amount theoretical experience research prototypes 
experience practical applications approaches limited 
remains seen complexities approaches received practice 
relational approaches strike balance flexibility declarative expression 
provide flexible scheduling control nondeterminism 
current qvt submission fit category cdi partly ast 
hybrid approaches allow user mix match different concepts paradigms depending application 
practical approaches hybrid character 
evaluation different design options model transformation approach require experiments practical experience 
establishing comprehensive collection benchmark problems valuable step direction 
aeh andries engels habel hoffmann 
kreowski plump sch rr taentzer 
graph transformation specification programming 
technical report universit bremen see citeseer nj nec com article andries graph html ak kent 
relational approach defining transformations metamodel 

quel hussmann cook eds uml unified modeling language th international conference dresden germany september october 
proceedings lncs 
aks agrawal shi 
graph transformations domain specific models 
consideration publication journal software systems modeling july www org ang frame processor www com neu pages common techn htm september www com ast tni revised submission rfp qvt omg document august atom atom tool multi formalism meta modeling 
atom cs mcgill ca generator framework www de bas framing software reuse lessons real world 
prentice hall bm braun 
bi directional object oriented transformation language 
technical report technische universit nchen tum may ca architect www com products architect default htm cdi dstc ibm 
mof query views transformations revised submission 
omg document ad www dstc edu au research projects publications ad pdf cle cleaveland 
program generators xml java 
prentice hall cwm omg common warehouse model 
omg document march www omg org cgi bin doc formal czarnecki 
domain engineering 
chapter wiley software engineering encyclopedia second edition john eds wiley sons february pp 
fpl frame processing language sourceforge net projects fpl fra frankel 
model driven architecture applying mda enterprise computing 
john wiley sons je hosted eclipse generative model transformer gmt project website dev eclipse org cgi checkout download index html glr gerber lawley raymond steel wood 
transformation missing link mda corradini ehrig 
kreowski rozenberg eds graph transformation international conference barcelona spain october 
proceedings 
lncs vol 
springer verlag pp 
interactive objects project technology revised submission rfp qvt omg document august jam java model driven architecture may sourceforge net projects jmi java metadata interface july java sun com products jmi kang cohen hess nowak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university pittsburgh pa november mb braun 
model transformations mda 
ren pp 
mml meta ml www cse ogi edu projects metaml mof omg meta object facility mof omg document formal april www omg org cgi bin doc formal meta objective caml www cs rice edu taha metaocaml ocl omg object constraint language specification omg document september www itg lbl gov pdf user guide www com products default htm zivin guillaume 
general framework xslt model transformations 
proceedings workshop transformations uml genova italy april zivin 
levels model transformation 
xml europe paris france june graphic communications association pp 
qvt object management group mof query views transformations rfp omg document ad revised april qvt partners revised submission mof query views transformations rfp omg document ad august www org ren rensink ed 
proceedings workshop model driven architecture foundations applications university twente enschede netherlands june ctit technical report tr ctit university twente cs utwente nl str strategies program transformation www stratego language org uml unified modeling language march www omg org doc formal velocity apache jakarta project march jakarta apache org velocity 
designing automatic transformation visual languages 
journal science computer programming vol 

elsevier pp 
wil 
graphical transformation language mda 
ren pp 
xd attribute oriented programming sourceforge net xde rational xde www rational com products xde xmi omg omg xml metadata interchange xmi specification omg document formal www omg org cgi bin doc formal xp xml path language version november www org tr xpath xslt xsl transformations xslt version november www org tr xslt xml variant configuration language sourceforge net 
