development erlang joe armstrong computer science laboratory ericsson telecom ab joe cslab ericsson se describes development programming language erlang period 
erlang concurrent programming language designed programming large scale distributed soft real time control applications 
design erlang heavily influenced ideas logic functional programming communities 
sources inspiration came languages chill ada industry programming control systems 
describes development erlang programming language 
erlang language draws heavily various traditions logic functional realtime control programming communities 
goal language building large soft real time control systems 
large mean systems possibly millions lines code 
soft real time system mean system fail real time deadline missed 
erlang developed author colleagues ericsson computer science laboratory 
ericsson currently world largest supplier telecoms systems world leading manufacturer mobile phones 
ericsson product telephone exchange called axe programmed proprietary language called plex 
typical axe system lines plex 
axe specified time minutes year requirements common telecoms industry 
programming languages building systems deal range problems usually encountered traditional batch interactive computer systems 
example requirement system continuous operation means software upgrades stopping system 
implies fault tolerant processors software architecture protects integrity system various classes programmer error 
erlang grew series experiments performed see find better ways programming telecoms systems 
criterion success program telecoms systems effort fewer errors done conventional technology 
starts brief discussion various milestones language went 
followed sections describing language directions research mentioned 
milestones ffl early experiments telecoms laboratory fortunate position having hardware play 
lab ericsson md small telephone exchange modified controlled conventional unix machine 
programmed pots programming languages lay hands 
main declarative language programs pots lot shorter easier understand imperative language programs 
unfortunately declarative languages lacked features concurrency control poor error handling facilities 
concluded prolog added facilities concurrency improved error handling 
language existed time 
ffl prolog interpreter having decided liked prolog programming pots started series experiments call lots lots pots program pots extremely large number different telephony features prolog 
long programmed large subset features prolog 
wrote prolog meta added notion process prolog added facilities advanced error detection recovery 
described 
ffl group results prolog able attract curiosity interest group engineers responsible software architecture ericsson md 
pots stands plain old telephony service subscriber calls subscriber chat 
worked stockholm 
group thought results vehicle investigating software architectures 
began period collaboration led development erlang fully fledged language new range ericsson products 
period members computer science lab worked closely group meeting twice week 
time prolog language defined changed rapidly 
language grew evolved line acquired name erlang named honor danish mathematician erlang name associated telecoms industry 
ffl jam machine clear erlang called language prototyping telephone exchanges 
strange mixture declarative features inherited prolog multi tasking concurrency inherited ada original combination error handling mechanisms 
erlang far slow product development 
group measurements decided product development needed system times faster prolog 
requirement lead development number different machines compilation techniques implementing erlang 
cross compiler erlang strand developed 
number experiments jam machine invented 
warren machine added primitives concurrency exception handling 
time erlang effort grown people 
mike williams wrote byte code emulator jam code wrote compiler robert virding wrote support libraries 
distributed version system external users internally competing erlang engines experimented different implementation techniques 
resulting jam implementation delivered group 
fortunately times faster original prolog unfortunately revised original estimates wanted machine times faster original 
ffl adding distribution period erlang group expanded formal group 
om joined group added distribution language 
original language designed hooks adding distribution done implemented 
group decided go ahead build new erlang 
erlang wasn fast generally thought performance problems solved 
started development product called mobility server 
launched part product range 
time writing mobility server marketed countries 
things control mobile phone european parliament strasbourg 
ffl fight acceptance period means clear erlang suitable programming large scale industrial products 
successful number small projects erlang programming programmers represented small percentage programming effort ericsson 
mobility server project continued attracted new small projects 
time involved massive marketing activities 
don think single person ericsson came bjarne office copy erlang manual arm 
ffl beam performance major problem 
hausman started beam beam compiles erlang compiled conventional compiler 
beam compile threaded code freely intermixed compiled code 
compiled code faster takes space threaded code 
large embedded system millions lines code volume object code major problem 
infrequently non performance critical parts system compiled threaded code performance critical parts system compiled native code 
performance tools analyse system find parts system need native code compiled 
beam described 
applications beam comparable performance terms 
beam replaced jam principle system new product development 
ffl erlang systems users erlang spread internally ericsson word mouth 
didn find new users 
language spread needed produce training material hold courses train new users 
initially courses held computer science lab members erlang group 
holding courses great fun demand soon far supply 
april new erlang systems formed handle sales marketing education consulting erlang 
fortunate position having supervised number master degree boss computer science lab 
erlang machine 
students computer science university uppsala 
having completed masters degree students employed erlang systems 
mike williams moved computer science laboratory manage erlang systems soon built strong team consultants impressive training facilities 
ericsson programmers attended courses erlang systems 
erlang consulting important factors led spread erlang ericsson 
erlang projects close contact developers users 
knew user provide individual help tuition doesn scale 
start new project try get erlang systems consultants working project 
provide vital link users developers erlang 
significant factor success new projects 
interesting note skill level required entry level industrial programmer increased years 
degree computer science pre condition working state art software technology 
days amateur hacker fast disappearing 
ffl tools current erlang system comes extensive toolkit 
obvious software tools yacc lex look likes wide range tools useful building telecoms applications 
include things cross compilers interfacing erlang foreign language applications asn interface compiler snmp tool kit server new users erlang initially attracted language set tools comes language 
example extremely easy build snmp application erlang snmp toolkit 
snmp toolkit example contains mib compiler set default methods allows non expert user build snmp agent matter hours 
doing conventional language difficult 
versions tools written students part master thesis 
ffl mnesia real time applications need access data long periods time 
example telephone exchange subscriber data stored years accessible milliseconds 
charging data telephone bills kept lost 
mnesia real time distributed database designed programming telecoms applications erlang 
amnesia written entirely erlang 
ffl otp january new ericsson division created support applications written erlang 
users want lot just programming language 
example users want language operating systems hardware platform delivered package 
otp open telecom platform division provide ericsson users simple erlang system runs pc embedded system complete hardware 
division goal providing prospective users turn key system turn start programming day project 
standard otp software comes extensive libraries solve common application problems 
goal otp division transfer responsibility maintenance support erlang system computer science laboratory mainstream ericsson division 
erlang examples previous sections described development erlang 
sections describe erlang number small examples 
sequential erlang example factorial functions defined modules example factorial written module math 
export fac 
fac 
fac fac 

annotation export fac means function fac argument module 
exported functions called outside module 
module loaded system query evaluator function evaluation math fac 
example binary tree lookup key key val 
ok val lookup key key val key key 
lookup key lookup key key val 
lookup key lookup key nil 

tuple key val represents node binary tree 
tuples store fixed numbers arguments 
example append append 
append append 
notation occurring function head denotes pattern matching operation list 
element list remainder list 
occurring right hand side production denotes list constructor 
example sort sort pivot 
sort pivot pivot sort pivot sort 
notation expr 
introduces list comprehension infix append operator 
example adder lambda expressions introduced syntax fun 
example write adder fun 
fun 

fun adder 
fun 
concurrent erlang example area server start 
spawn fun 
loop 
loop tot 
receive pid square 
pid loop tot pid rectangle 
pid loop tot pid areas 
pid tot loop tot 
creates area server ask server area square rectangle ask return total areas requested compute 
spawn fun creates parallel process evaluates lambda expression fun 
spawn returns process identifier pid communicate process 
pid sends message process pid 
receive pattern matching operation receives message 
send asynchronous non blocking operation 
example area client client code uses server written pid self square receive area 
example global server examples process identifier server known client 
provide global service associate process identifier global name follows 
pid spawn fun register area server pid area server 
associates global name area server pid 
process evaluating node name registered send message process syntax area server msg distribution example spawning remote node spawn create process different erlang node 
pid spawn fun node alive node alive node primitives alive alive signify node willingness participate distributed computations 
evaluated alive remain anonymous take part distributed computations 
error detection erlang designed programming robust systems number primitives trapping errors 
error recovery automatic 
programmer design fault tolerant architecture implemented error detection mechanisms 
example catch 
exited divide zero catch 
exit divide zero 
exit divide zero catch expr converts error occurring expr term describing error 
example catch throw case catch exception 
actions 
actions 
normal return value 
throw exception 
non local returns performed throw expr 
expr evaluated value enclosing catch 
example links trapping exits processes linked 
process dies error message sent processes linked 
process flag trap exits true spawn link node fun receive exit 
actions spawn link fun creates parallel process evaluates fun creates link process performs spawn parent newly created process child 
exception raised child process error message sent processes child process linked 
example error child process cause error message sent parent process 
parent process receive error message take appropriate action 
example undefined processes call mod func arg argn function located system mod func behaves defined follows mod func arg argn 
error handler undefined function mod func arg 
argn function undefined function defined user system default 
usually defined undefined function mod func args 
case code ensure loaded mod module mod 
case exported mod func length args true 
apply mod func args false 
exit undef mod func args module 
exit undef mod func args interpret mod 
int eval mod func args 
exit undef mod func args 
hot code replacement example code replacement erlang designed non systems 
need able replace code data stopping system 
example shows change code server stopping server 
loop data 
receive request pid 
reply data data pid reply loop data change code 
loop data code represents server 
data represent local state server 
lambda expression determines behaviour server 
change code server send message change code garbage collector remove old function 
higher order processes large erlang systems programmed re code number programming patterns call behaviours 
processes behaviour determined lambda expression run time 
example behaviour show simple client server model programmed 
firstly code generic part client server generic client server module cs 
export start rpc loop 
start name data fun 
register name spawn fun 
loop data fun 
rpc name 
tag ref name query self tag receive tag reply 
reply 
loop data fun 
receive query pid tag 
reply data fun data pid tag reply loop data fun 
code provides skeleton code client server 
parameterise instantiating variable fun lambda expression gives server desired behaviour 
example key value dictionary server follows key value server module kv 
start 
cs start fun handler 
add key val 
cs rpc add key val 
lookup key 
cs rpc lookup key 
handler add key val data 
ok add key val data handler lookup key data 
find key data data 
add key val key 
key val add key val 
add key val add key val 
key val 
find key key val 
val find key 
find key find key 
error 
sequential programming small number higher order functions map fold zip provide library functions programmer re number different contexts 
note limited set functions 
functions help 
concurrent programming concurrent programs built small number higher order processes client server example 
application higher order processes capture concurrency mechanisms 
interestingly generic part higher order process typed functions parameterise process 
enter type system erlang dynamic type system inherited prolog 
types checked run time 
nonsense expressions example true type checked compile time result run time exceptions 
phil wadler decided erlang needed type system promptly informed making 
started project realised needed money help 
got money got type system 
time writing haskell prototype type checker evaluated type checker re written erlang 
evaluating type system type checking libraries standard erlang distribution 
complete certain observations type system 
point note type checker totally free standing erlang system 
changes erlang accommodate type system 
consequence user free compile run programs type checker says welltyped 
contrast say haskell ml type incorrect program compiled run 
programs behave correctly despite fact typed 
especially true systems software example programs kernel erlang run time responsible io distribution perform highly complex generic operations arbitrary data structures 
erlang type system user declare type 
example type fac int 
int 
fac 
fac fac 

type supplied checked type checker 
types annotated unchecked 
means type checker accepts supplied type analysing function see type programmer intended 
practise turns useful forcing bizarre code type checker 
example code erlang pretty printer pretty printer contains code unchecked pp 
type pp 

pp tuple 
pp list tuple list pp list 
pp float 
pp function turns arbitrary data structure deep list characters 
tell system pp type universal type 
correct statement program inferred type checker 
type checking standard libraries ffl type system uncovered errors 
kernel libraries written erlang experts programmers don type errors 
interesting see remains true start type checking code written experienced programmers 
ffl certain libraries dict passed type checker attempt 
derived types corresponded cases intuition derived types 
adding type declarations documentation purpose trivial operation 
interestingly remove number comments replace precise type declarations 
dict erl replaced comments fetch key dict 
value find key dict 
ok value error store key value dict 
dict type declaration dict key val key val 
type fetch key dict key val 
val 
type find key dict key val 
ok val error 
type store key val dict key val 
dict key val 
says thing precisely 
ffl modules type check attempt 
re write functions add unchecked annotation force code type checker 
complex modules functions needed small changes 
vast majority cases small change function corrected type error 
minority cases resort adding unchecked annotations 
kernel system modules able provide readable types majority functions resort unchecked annotation 
unchecked erlang functions contained primitives apply analysed type checker 
ffl debugging finding source type error cases extremely difficult 
proved frustrating 
tested programs believed correct rejected type checker finding exactly wrong difficult 
research leading 
ffl large systems build large systems 
problems associated building large systems software architectures choice programming language 
program patterns higher order processes greatly helps users structure large software systems 
speculated advantages strong type system seen large software systems 
intend test hypothesis 
ffl evolving systems systems evolve learn discover better ways programming things 
early design decisions turn wrong 
wish change major system interfaces turned wrong 
project managers worry backwards compatibility reluctant accept changes standard system software 
change basic system invalidates test procedures delay new product 
shortterm desirable keep system stable possible long term allow systems evolve phase old code design decisions 
interested techniques example partial evaluation simplify best case automate transition older newer version system 
ffl performance certain applications efficiently programmed erlang 
considering adding imperative features language solve problems 
reflections erlang spread successfully laboratory number commercial products 
speculate reasons occurred 
important factors ffl real problems real problems 
tend progress solve particular problem existing technology 
progress come user came problem solved erlang 
ffl working organisation ericsson organisation 
far easier sell idea internally come organisation outside 
ffl organisational support gap best laboratory limited resources produce minimally acceptable commercial product 
ericsson provided financial support created new jobs necessary help fill gap 
ffl provide support documentation courses mail hot line telephone support essential passing main stream phase development 
ffl lots tools project managers interested programming languages 
interested formal don give types calculi 
interested short time market writing bug free software 
provision large numbers software tools greatly reduce software development times improve quality software 
tools specific problem domain 
tools making snmp mibs manipulating asn data types building fault tolerant duplicated data bases hot standby ffl foreign language interfaces typical systems written different languages 
erlang 
large parts system purchased software packages written efficient integration essential 
armstrong virding williams 
prolog developing new programming language 
practical application prolog london april armstrong williams om virding 
concurrent programming erlang nd ed 
prentice hall armstrong 
erlang survey language industrial applications 
proceedings symposium industrial applications prolog 
october 
tokyo japan 
armstrong acker virding williams implementing functional language highly parallel real time applications 
th int conf 
software engineering telecommunication switching systems florence march april 
acker williams 
experiments programming languages techniques telecommunication applications 
sixth international conference software engineering telecommunication switching systems 
eindhoven 
hausman 
turbo erlang approaching speed implementations logic programming systems pp 
ed 
evan tick giancarlo kluwer academic publishers 
foster taylor 
strand new concepts parallel processing 
prentice hall 
marlow wadler 
practical subtyping system erlang 
acm international conference functional programming 
om nilsson 
mnesia industrial dbms transactions distribution logical query language 
international symposium cooperative database systems advanced applications 
kyoto japan 
new technology prototyping new services 
ericsson review 
