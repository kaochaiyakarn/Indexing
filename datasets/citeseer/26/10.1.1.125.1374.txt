xsl fo programming circles triangles rectangles erik meijer microsoft com wolfram schulte schulte microsoft com gavin bierman gavin bierman cl cam ac uk proposes extending popular object oriented programming languages vb java native support xml 
approach xml documents document fragments class citizens 
means xml values constructed loaded passed transformed updated type safe manner 
type system extensions xml schemas 
show xsds xml data model fit class nominal type system object graph representation target languages 
propose extend type system new structural types model xsd sequences choices groups 
propose number extensions language incorporate simple expressive query language influenced xpath sql 
demonstrate language type system translating selection xquery cases 
table contents 
apis programming languages 

programming xml apis 

integrating xml host language 

mismatch xml object data models 

edge labelled vs node labelled 

attributes versus elements 

elements versus complex simple types 

multiple occurrences child element 

anonymous types 

substitution groups vs derivation closed world assumption 

namespaces namespaces values 

occurence constraints part container type 

mixed content 

xen data model 

xml syntax object literals 

xen type system 

object literals 

embedded expressions 

xen validation rules 

new syntax 

generators iterators 

lifting 

filtering 

apply 

xquery cases 




bibliography 
proceedings xsl fo 
apis programming languages modern programming languages come parts programming language proper set apis 
relationship language api interesting 
whilst language senses master api slave closer look reveals fact form symbiosis api sense context programming language programming language interesting access rich set apis 
just biological artifacts symbiosis subject evolution 
heavily part api common programming pattern candidate promotion host programming language 
familiar situation imagine language numerals strings arrays available purely apis 
new application areas suggesting new candidates class world programming language 
consider language www com usual numerals strings booleans core language supports literals wide range types urls dates money sql www org heart table data type range class data types relevant business database applications date timestamp interval 
general purpose language specification integrated ideas garbage collection objects properties indexers events iterators language exposing concepts apis malloc free com programming patterns 
concrete consider example 
assume collection type implements system 
collection object ts type find frequently writing code executes common piece code written element collection ts try current system null dispose programming pattern appears java soon class language construct foreach ts intended denote code 
code compact readable reduces sources potential bugs frees compiler possible optimizations 
problem facing programming language designer identifying heavily apis common programming patterns mentioned earlier realizing class language features constructs 
random features leads language bloat potentially destroying coherence language may 
addition hopes promoting feature api better supported existence language 
see examples 
clearly tough problem requires serious research experimentation 
opinion areas ripe liberation api status data access concurrency security 
concentrate area data access 
discuss briefly concurrency section 
interesting take security recommend model fournet abadi fournet abadi 
shall fix attention object oriented programming languages exemplified java java language specification 
objects circles title 
considering api host language object oriented 
fact host language say applies equally java visual basic statically typed object oriented language 
rest considers promotion data access apis 
data interested xml 
triangle title reflecting tree graph structure xml documents 
motivate xml support class feature language 
argue support offered proceedings programming circles triangles rectangles xsl fo arbitrary xml documents 
introduce xen hypothetical extension class xml support 
give details language type system number examples illustrate elegance expressive power 
simple example program gives flavor language 
defines types card logo model simple business cards taken www brics dk xml schemas 
creates new card instance xml object literal uses path expression print fields card 
public class card sequence string name string title string email string 
phone logo 
logo public class logo attribute string url public class test static void main card card name john doe name title ceo widget title email john doe widget com email phone phone logo url widget gif card console 
programming xml apis programming circles triangles rectangles problems current api approach programming xml apis tend abuse strings represent literals various non string types documents queries api exposes 
example consider program xml data model system xml library net 
code method class takes string argument represents xpath expression executed document instance 
similarly method takes string xpath expression intended select int int zip int total string string format orders order zip item zip foreach price price qty quantity int decimal parse price int decimal parse qty proceedings xsl fo total return total strings represent xpath programs pretty clumsy string format pass parameters xpath annihilates possibilities static checking 
importantly passing strings represent programs security risk script code injection 
note result values passed strings programming involves lot expensive string type coercions 
rule thumb suggest see api uses strings representation important artifact api requires re designing consideration promotion programming language 
rule thumb java programmer jdbc jdbc programmer ado net ado net quickly conclude support database tables queries better provided programming language opposed poor support provided jdbc ado net apis 
reader notice proposals provide class language support database tables queries rectangles title 

integrating xml host language wide spectrum possibilities moving xml support api level class language feature 
currently popular technique form mapping xml host language 
exist plethora tools see www research com user wadler xml list links microsoft net environment contains tool called xsd exe translate xsd schema clr types xsd exe java tool 
bea interesting hybrid allows api approach approach coexist 
tools example map xsd schema orders items corresponding set classes program way int orders int zip arraylist items new arraylist foreach order zip zip items add item int total foreach item items total price quantity return total main advantage mapping xml values represented strongly typed world 
worth pointing code improved generic collections 
soon added java 
mapping technology works reasonably practice find annoying mismatches technology harder expected 
essence mapping technique fundamental impedance mismatch xml host language 
see natural counterpart java xsd constructs vice versa 
fact xpath data model usual object data models little common 
final problem mapping xsd schema classes see clearly example code high level expressive xquery xpath 
queries written lower level loops conditionals 
whilst ensures done type correctly resulting code verbose hard maintain 
perfect mapping xml objects type level lack expressive power path expressions object oriented programming language 
proceedings programming circles triangles rectangles xsl fo see approach boils hiding xml embracing 
interested finding clearer solution 
order successfully promote xml support api language level shall compare models carefully 
comparison argue inherent impedance mismatch xml object data models suggests modify host object language enhance xml support compromise full xml fidelity 
leads elegant language design incorporates strengths data models coherent language ideal circles triangles rectangles 

mismatch xml object section compare xml object data models concentrating deep mismatches 
give details substantial differences models contend inherent represent serious obstacles promotion full xml support object oriented programming language 
follows assume reader familiar basic details xml schema useful primer www org tr xmlschema xpath data model www org tr 

edge labelled vs node labelled probably deepest fundamental difference xml object data model assumes node labelled trees graphs see page data web assumes edge labelled trees graphs 
clearly represents profound dichotomy worlds best people unaware difference worst confuse 
clash concrete consider simple schema point element contains child elements element name point complextype sequence element name type integer element name type integer sequence complextype element assuming xml data model selecting child point element returns element node name parent type integer single text node child node 
note type result string element node properties type content 
types types describe structure nodes 
common misconception consider elements proper types 
people including authors section original soap specification www org tr soap believe element declaration point corresponds class declaration object world class point public int public int proceedings programming circles triangles rectangles xsl fo case selecting field point instance returns integer name parent properties corresponding element node xml world 
note top level element point mapped corresponding type point nested elements mapped fields types 
general different node types document element attribute text processing instructions comments properties nodes base uri node name parent type children attributes namespaces exposed xpath data model necessarily correspond familiar object data model 
words triangles easily circles 

attributes versus elements xml world important distinction elements attributes 
distinction simply exist object world 
example consider adding attribute attribute name color type string example element point 
item attributes collection point element distinct children collection accessed xpath attribute child axis 
corresponding mapped class color simply represented field different particular accessed normal member access equivalent axis 
ensure correct representation fields denoting attributes restricted primitive simple types require ad hoc extension object data model 
concepts global attributes attribute groups difficult model assume attributes modelled class members 

elements versus complex simple types xml data model distinction elements attributes hand simple complex types hand 
little misleading element attribute declarations define types 
clearer meaningful distinction xsd stratified world parts elements attributes describe nodes data model simple complex types describe content nodes 
object oriented world distinction usually mechanism describe structure members class declaration isolation 
difference 
unfortunately difference leads problems mapping tools 
noted earlier global element declarations complex type declarations mapped classes local element declarations field declarations inside classes 
problem handle element natural counterpart object data model 
element name line complextype sequence element ref point element ref point sequence complextype element clumsy solution chosen tools replace element copy actual element declaration refers 
proceedings programming circles triangles rectangles xsl fo 
multiple occurrences child element xml data model complex type permitted occurrences child element 
consider example declaration verse element children specific order element name verse complextype sequence element name type string element name type string element name type string element name type string sequence complextype element point mapping elements fields breaks object oriented languages allow duplicated fields 
automatic mapping tools generally pick ad hoc way example xsd exe tool invent arbitrary new field names duplicate elements 
clearly fragile unsatisfactory solution 

anonymous types xsd allows element declarations anonymous types insisting named types 
immediately begs question resolve type equivalence elements anonymous types structural equivalence nominal equivalence 
various xml specifications terribly consistent stable matter 
example may xquery xpath data model specification implies occurrence anonymous type assigned implementation defined globally unique type name 
element name foo complextype sequence element name bar complextype sequence element name type integer sequence complextype element element name baz complextype sequence element name type integer sequence complextype element sequence complextype element programming circles triangles rectangles declarations type properties bar node baz node different assigned separate globally unique type name 
proceedings xsl fo programming language perspective unusual choice 
meaningful approach employ structural type equivalence anonymous types 
course data model supports nominal type equivalence left difficult situation dealing anonymous types 
opinion solution generates unique type names fly unsatisfactory 
case better disallow anonymous types start 

substitution groups vs derivation closed world assumption xsd supports forms inheritance substitution groups elements derivation extension restriction complex simple types 
forms inheritance strangely intertwined elements substitution group content types related derivation 
restriction reflects stated earlier complex simple types describe content nodes 
object oriented languages support roughly amount derivation extension subclass add new fields methods 
languages permit subclass hide override members superclass 
unfortunately counterpart xml data model mismatch 
xsd distinguishes simple types complex types 
glance simple types correspond primitive types java 
simple types xsd derived simple types order restrict possible values type 
unfortunately primitive types object oriented languages sealed final specialized 
correspondence imperfect 
fundamental difference xml object data models adopts assumption respect substitution groups derivation extension restriction 
example xquery typing rules assume elements substitution group known performing static typechecking child access essence xml 
hand important feature object data model adopts open world assumption 
type checking member access static type receiver type assumed 

namespaces namespaces values xpath data model namespace nodes exist class values subsequently xpath deprecated name spaces class values 
case usual object data model 
example namespaces purely syntactic sugar point view underlying runtime don exist 
far notion namespaces exists places namespaces introduced places qualified names actual class status namespaces restricted xml 
instance java field names qualified 
feature models surface appeared related turned different 

occurence constraints part container type xsd occurrence constraints appear element declarations underlying type children element 
instance element declaration element states foo children named element name foo complextype sequence element name type string maxoccurs element name type string sequence complextype element proceedings programming circles triangles rectangles xsl fo natural thing consider elements types 
directly corresponds object data model local element declarations mapped fields 
foo expected mapped class single field type string class foo string string means completely different 
class foo member type array string instances 
obvious mismatch restrict size array foo number children 
mismatch pronounced start putting occurrence constraints sequence choice particles example 
simple counterparts object datamodel 
element name foo complextype sequence maxoccurs element name type string element name type string sequence complextype element 
mixed content idea mixed content reflects schizophrenic nature xml data versus xml documents 
element name bar complextype mixed true sequence element name type integer maxoccurs sequence complextype element children element instance bar aaa bbb ccc bar text node element node text node element node text node 
objects represent data documents natural interpretation mixed content object world 

xen data model 
xml syntax object literals programming circles triangles rectangles detailed examples previous section demonstrate foundational level significant gulf xml object data models impedance mismatch 
opinion impedance mismatch big attempt complete integration 
problems proceed 
approach take starting point object datamodel programming language 
model programmers familiar supported proceedings xsl fo underlying execution engine 
trying blindly integrate complete xml data model full complexity schemas shall take simpler design goal consider xml xml simply syntax serialized object instances 
shall see rest significant design advantages follow simple intuition 
take xml fragment point point consider simply denote xml serialization object type point say constructed series assignments point new point 
xml fragment valid instance point element xsd schema gave earlier xml data model properties exposed level programming language programmer just sees instance class point 
adopted simple view xml fact object data model corresponding powerful handle rich scenarios envisage 
order consume generate wide set documents need enrich type system new type constructors unions sequences streams 
carefully chosen designed integrate coherently existing type system 
interestingly resulting types look similar relax ng compact notation www oasis open org committees relax ng compact html dtds written xsd keywords 
define xml fidelity able serialize deserialize possible documents expressible xml schema language www xml com pub html closely match xml programming language parsed xml document 
xen design doesn support entirety full xml stack believe type system language extensions rich support potential scenarios 
example able cover complete set xquery cases xquery cases written large applications lines running significant fidelity problems 

xen type system section give details xen type system 
despite considerable expressive power carefully designed type system small coherent extension type system 
reasons space describe language support entirety language 
consider xen class declarations 
having zero field declarations inside class allow classes content type zero attributes addition zero method declarations usual 
denote class declarations identifiers types attribute declarations method declarations 
xen class declaration general form class attribute declaration field declaration decorated attribute keyword attribute attributes special semantics influencing serialization format types 
particular special axis distinguish child attribute access 
proceedings programming circles triangles rectangles xsl fo type sequence type corresponding xsd sequence particle dtd 
construct choice type corresponding style union xsd choice particle dtd 
construct type corresponding xsd particle possibly empty stream type corresponding xsd minoccurs maxoccurs unbounded occurrence constraint dtd construct nonempty stream type corresponding xsd minoccurs maxoccurs unbounded occurrence constraint dtd construct option type corresponding xsd minoccurs maxoccurs occurrence constraint dtd construct named type introduced content class 
types grammar 
sequence 

choice 




phrase indicate field names xen optional 
subtyping relationships new types defined structure name 
structural subtyping new 
limited form available java 
suppose example class colorpoint subtype class point array written colorpoint subtype array points written point 
fashion xen stream written colorpoint subtype stream points written point 
similar covariance rules apply structural types 
scope explain xen subtyping relationships greater detail 
refer interested readers accompanying papers unifying tables objects documents meaning xen 
papers give details related programming languages embrace xml xtatic xtatic 
illustrate type system syntax xen take examples xquery cases 
defines bibliography books dtds element bib book element book title author editor publisher price attlist book year cdata required fact dtd book nice example illustrating current object oriented languages fall short defining rich content models 
example equivalent notion union types java way indicate collection contain element 
give xen class declaration books 
states book editor author publisher price year attribute public class book sequence string title choice sequence editor editor sequence author author string publisher int price attribute int year proceedings programming circles triangles rectangles xsl fo 
object literals serializing values type book xml conform dtd book 
xml serialization outside language 
xen xml serialized objects language allowing programmers xml fragments object literals 
instance create new instance book object xml object literal book book year title concisely title author judith bishop author author nigel horspool author publisher addison wesley publisher price price book xen compiler contains validating xml parser analyzes xml literal compile time code construct correct book instance 
allows xen programmers treat xml fragments class expressions code 

embedded expressions addition class xml object literals xen allows arbitrary embedded code curly braces escape syntax curly braces escaped respectively 
xen statically typed type embedded expression allowable type see section section xen validation rules details 
example splice embedded expression concisely construct price book 
book book year title concisely title author judith bishop author author nigel horspool author publisher addison wesley publisher price concisely price book course embedded expressions attributes book year example provided expression type int computes year book 
validation rules xen allows write particularly concise code dealing embedded expressions 
consider declaration book authors computed embedded expression book book year title concisely title authors publisher addison wesley publisher proceedings programming circles triangles rectangles xsl fo price price book content type book expected type embedded expression authors choice sequence editor editor sequence author author able declaration authors 
author authors author judith bishop author author nigel horspool author variable authors type author 
type considered allowable expected type xen validation rules set documents described type author subset set documents described original union type 
declaration permitted explicit type conversions needed 

xen validation rules validation rules defined relation allowable types 
types 
say allowable set serialized xml documents type subset set serialized documents type case implicitly convertible allowable necessarily way 
instance serialized values type sequence serialized values type type sequence implicitly convertible type 
put restrictions class declarations particular impose non ambiguity constraints 
example class declaration perfectly legal xen obvious content model ambiguous class int class sequence choice sequence sequence choice sequence sequence proceedings programming circles triangles rectangles xsl fo validator attempt validate object literal possible ways flag error find exactly parse 
ambiguous context free grammars similar idea general purpose parser glr early asf sdf demanding particular parse unambiguous 
case literal ambiguous validator generate compile time error disambiguate embedded expressions write indicate validator intend choice second just course careful ambiguous content models values serialized outside world embedded expressions 

new syntax previous sections seen construct object instances xml literals 
language processes xml just important able generally query values 
purpose introduce path expressions xen 
inspired xpath xpath sql adapted extended object data model 

generators iterators streams values play important role xml content types instance book authors editors 
xen stream types implement interface iterate stream foreach loop book author authors author foreach author authors console note content type book says book authors result type author author book editors authors 
precise return type author author xen type equivalences author 
see companion papers unifying tables objects documents meaning xen detailed account xen type system 
whilst easy traverse streams foreach loops little verbose compared xpath 
couple sections discuss features added xen iteration streams simpler 
describing need tackle problem easy generate streams 
convenient way generate finite streams fact xen type system defines implicit conversion sequences streams 
example xen considers sequence author author subtype author 
code type correct new 
xen sequence constructor 
author authors new author author proceedings programming circles triangles rectangles xsl fo course works finite streams help generate complex infinite streams 
introduce yield statements 
method body contains yield statements return multiple times time yielding element stream 
example method generates stream integers yielding times int int int int yield concept methods return multiple times available xquery confusingly uses return keyword yield 
supported programming languages including icon clu python version 
turns especially generators convenient allow statement blocks expressions 
instance having define separate method just block expression int yield type int 

lifting important difference path expressions ordinary member selection object oriented languages way path expressions lift extend structural types streams sequences unions 
suppose bibliography contains zero books content model 
public class bibliography book books instance bib type bibliography want select titles books 
natural way write query path expression string titles bib books title xen code note result type sub expression bib books book 
java subsequent title member access allowed assumed stream elements stream 
xen notion member access generalized support style programming 
member access defined lifted mapped stream code valid behaves expected 
contrast write code achieve effect 
string books bs foreach book bs yield title string titles bib books code programming circles triangles rectangles note convenient xen code bib books title comparison somewhat clumsy code 
example promoting xml access language level allowed provide elegant support typical programming pattern 
similar situation happens instance choice type say choice string button 
natural way select field write returns proceedings xsl fo null happens type string value type color case type button 
precisely happens xen 
lifting forced define new method performs explicit instance check determine actual type color 
choice string button button return button return null place xen elegant 
nearly goes saying lifting member access sequence types extremely convenient 
fact xen automatically lifts member access including method calls structural types 
seen yields elegant compact code familiar xpath programmer 

filtering lifting filters example xpath feature indispensable writing concise code 
promoted vital programming pattern class language feature 
stream expression xen expression denotes stream resulting applying filter element 
boolean predicate stream element referenced implicit variable 
example bibliography books bib select books publisher addison wesley published filter expression 
book bib book publisher addison wesley year 
apply want lift operations member access method invocation structural type 
example suppose want collect title year books want print titles books 
promoted common programming pattern class language feature apply block 
stream expression code block xen statement apply expression generates stream resulting executing code block element original stream contain identifier denote current stream element 
collect titles publication dates stream addison wesley books henceforth called apply method body return new title year stream follows 
sequence string int bs return new title year case return type apply block sequence string int 
result expression stream type sequence string int built lazily 
apply blocks need just construct new streams 
printing titles books simply liner console proceedings programming circles triangles rectangles xsl fo note return type console void result expression void 
obviously void results consumed sense postpone evaluation void apply blocks 
consequence xen evaluates effect void apply blocks eagerly 

xquery cases point described features xen able express xquery cases xquery cases 
due lack space restrict just interesting ones 
case covered earlier 
asks list books published addison wesley including year title 
solved simple filter expression 
book bib book publisher addison wesley year second case asks create list title author pairs pair enclosed result element 
words output stream result elements result defined type result class result sequence string title author author query expressed different ways concise uses nested apply blocks 
book bibliography remembers title author book nested apply block generates required result element result authors titles bib book title title return author result title title title author author result conceptually return type query nested stream result 
similar xquery result xen typing rules 
fifth xquery case interesting requires join sense relational algebra results sources 
rectangles title come picture 
reader familiar relational databases may realized xen data model subsumes nested relational model 
example sql declaration create table customer name string null int proceedings programming circles triangles rectangles xsl fo corresponds xen declaration stream sequence types sequence string 
name int customer addition path queries xen supports class sql style select statements 
sql style select expressions stream originate actual relational database 
handle fifth case asks list book bn title book price source 
task get list books available bn sql easily done inner join 
select statement easily select bn books titles produce stream requested information bn select book prices title title title price price price price bn bn price price bn book prices book bn book title title xquery case uses different schema shops 

mentioned data access believe concurrency security obvious candidates promotion full language support 
current story concurrency security data access 
languages java provide crude support concurrent programming 
lock statement roughly just syntactic sugar monitor enter try monitor exit apart programmer left unsupported explicitly create start threads maintain reader writer locks mutexes apartment states lock cookies unfortunately today applications increasingly dealing complicated concurrent scenarios example complex orchestration code webservices 
clearly need better high level support concurrency security facilitate writing code 
interestingly proposals orchestration languages model concurrent communication called pi calculus pi calculus examples include bpel ws bpel ws wsci wsci 
languages unfortunately xml concrete syntax lack desired features concrete programming language 
interesting experiment add support join patterns join calculus join calculus programming oriented dialect pi calculus xen polyphonic proposal polyphonic 
resulting language begins approach kind programming language envisage necessary program advanced webservices 

argued generalizing type system language syntax possible modern object oriented circles language provide class support manipulating relational rectangles hierarchical data triangles sound statically typed manner 
demonstrated describing xen hypothetical extension 
proceedings programming circles triangles rectangles xsl fo approach build top current object data models particular try simply bolt naively entire xml data model xsd type system 
argued carefully approach hampered serious incompatibilities data models 
contrast consider xml basically syntax serialized object graphs inside language convenient way denote object instances externally wire format data interchange 
case assume independent way describe set allowable documents 
acknowledge hard language team consisting william adams joyce chen david hicks steve chris frank wolfgang herman matt warren msr cambridge programming principles tools group particular luca cardelli nick benton claudio russo cedric fournet alain frisch 
special chris steve original version xquery cases dare mike bibby insightful comments 
gavin bierman supported eu projects ii 
bibliography specification download microsoft com download acb ad efc zip fournet abadi dric fournet martin abadi 
access control execution history 
proceedings th annual network distributed system security symposium 
february 
research microsoft com fournet papers access control execution history ndss pdf java language specification java sun com docs books second edition html title doc html jdbc java sun com products jdbc ado net msdn microsoft com library default asp url library en html asp xsd exe msdn microsoft com library default asp url library en html asp java sun com xml dev dev bea com technologies index jsp data web abiteboul buneman suciu 
data web 
morgan kaufmann 
xpath www org tr xpath xml www org tr rec xml xquery cases www org tr xquery cases impedance mismatch dave thomas 
impedance imperative tuples objects stuff 
vol 
september october 
www fm issues issue column pdf essence xml jerome simeon philip wadler 
essence xml 
proceedings popl new orleans january 
www research com user wadler papers xml essence xml essence pdf asf sdf www cwi nl sen bin view sen proceedings programming circles triangles rectangles xsl fo unifying tables objects documents erik meijer wolfram schulte 
unifying tables objects documents 
proceedings dp cool 
www research microsoft com papers xs pdf meaning xen erik meijer wolfram schulte gavin bierman 
meaning xen 
preparation 
xtatic www cis upenn edu xtatic www org bpel ws ftp www software ibm com software developer library ws bpel pdf wsci www org tr wsci pi calculus milner 
communicating mobile agents pi calculus 
cambridge university press cambridge 
join calculus pauillac inria fr join polyphonic nick benton luca cardelli cedric fournet 
modern concurrency abstractions 
magnusson ed proceedings ecoop 
lncs springer verlag 
research microsoft com nick polyphony pdf biography erik meijer technical lead microsoft redmond united states america microsoft com erik meijer technical lead group microsoft currently works language design type systems data integration programming languages 
prior joining microsoft associate professor utrecht university adjunct professor oregon graduate institute 
erik designers standard functional programming language haskell 
wolfram schulte researcher microsoft research redmond united states america schulte microsoft com wolfram schulte researcher microsoft 
interested aspects software design development reliable systems 
currently leads research project focused advanced technologies software testing 
technical contributions microsoft data oriented programming languages 
microsoft wolfram assistant professor computer science university ulm technical university berlin 
gavin bierman university lecturer university cambridge computer laboratory cambridge united kingdom gavin bierman cl cam ac uk proceedings programming circles triangles rectangles xsl fo programming circles triangles rectangles gavin bierman university lecturer associate professor university cambridge computer laboratory 
research interests include semantics programming languages type systems database query languages semi structured data proof theory 
proceedings 
