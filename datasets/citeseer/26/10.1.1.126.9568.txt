adaptive software transactional memory marathe william scherer iii michael scott department computer science university rochester rochester ny scherer scott cs rochester edu 
software transactional memory stm generic synchronization construct enables automatic conversion correct sequential objects correct nonblocking concurrent objects 
stm systems significantly practical predecessors display inconsistent performance differing design decisions cause different systems perform best different circumstances dramatic margins 
consider dimensions stm design space concurrent objects acquired transactions modification ii acquired iii look acquired iv non blocking semantics transactions lock freedom vs obstruction freedom 
dimensional space highlight locations leading stm systems dstm herlihy ostm fraser harris 
drawing motivation performance series application benchmarks new adaptive stm astm system adjusts offered workload allowing match performance best known existing system tested workload 
traditional lock concurrent systems prone important problems including deadlock priority inversion lack fault tolerance 
coarse grain locks scalable algorithms fine grain locks notoriously difficult write 
ad hoc nonblocking implementations concurrent objects avoid semantic problems locks match exceed performance fine grain locking difficult write 
ideally mechanism provides convenience coarse grain locks semantic performance problems 
herlihy suggest automatically converting sequential code correct nonblocking concurrent code 
inspired part hardware proposals multiword atomic primitives subsequent researchers developed sophisticated constructions suffer various practical problems impose time space overheads high real world systems 
require unrealistic atomic primitives 
support static collections objects static transactions set objects accessed known advance 
supported part nsf numbers eia ccr ccr darpa afrl contract number financial equipment sun microsystems laboratories 
ed disc lncs pp 

springer verlag berlin heidelberg adaptive software transactional memory software transactional memory stm systems overcome problems employ atomic primitives compare swap cas load linked store conditional ll sc widely supported current multiprocessors :10.1.1.5.9270
support dynamic collections objects dynamic transactions 
space overheads modest 
performance overheads low outperform coarse grain locks important cases provide attractive alternative tuned fine grain locks convenience fault tolerance clean semantics considered 
working field envision day stm mechanisms embedded compilers languages java providing nonblocking implementations methods free 
stm systems may word object depending granularity data modified 
focus appear particularly suited object oriented languages java 
leading object stms currently dstm herlihy ostm fraser harris 
prior undertook preliminary comparison systems 
things dstm outperforms ostm order magnitude write dominated workloads ostm outperforms dstm factor read dominated workloads 
attribute difference choice acquire semantics discussed sections indirect object access dstm imposes extra cache typical read access 
current discuss principal design decisions object stm encompassing concurrent objects acquired transactions modification eager vs lazy acquire ii acquired object transaction metadata iii look readers currently acquired level indirection iv type nonblocking semantics lock free vs obstruction free 
taxonomy enhances previous understandings dstm ostm performance locating systems dimensional design space 
clarifying performance implications design dimensions taxonomy allowed develop adaptive stm system astm automatically adapts behavior offered workload allowing closely approximate performance best existing system scenario tested 
background section outlines common usage pattern api objectbased stm 
section presents characterization stm design space locates dstm ostm 
section describes variants astm revisit design decisions run time offered workload 
variants adapt dimensions ii iii third adds simultaneous adaptation dimension 
experimental results section show astm competitive better ostm dstm execution scenarios making highly attractive general purpose 
stm usage stm transactions provide nonblocking concurrent access shared transactional objects 
transactions typically proceed phases respect object marathe scherer iii scott open object available transaction 
transaction access object objects may concurrently opened multiple transactions 
acquire asserts transaction ownership object 
object acquired transaction time 
transaction subsequently attempts acquire object detect resolve conflict 
conflict resolution method determines stm lock free obstruction free 
acquire typically separate operation 
dstm implements part open operation eager acquire 
ostm implements part commit operation lazy acquire 
commit attempts atomically effect changes acquired objects current transaction 
typically done compare swap cas store conditional instruction update status field transaction descriptor accessible competing transactions 
loss generality assume cas remainder 
cas serves linearization point transaction 
release cleans metadata associated transaction commits aborts 
dstm introduced concept early release allows transaction relinquish accessed object prior committing 
early release reduces window contention multiple transactions transiently dependent particular object requires programmer exploit application specific knowledge ensure transactions consistent linearizable 
stm experiments section employ uniform api validating committing aborting transactions accessing objects read read write modes 
details technical report version 
stm design space section discuss key dimensions stm design space 
brief comparison dstm ostm light 
eager vs lazy acquire transactions acquire objects accessed eager acquire semantics commit time lazy acquire semantics 
eager acquire allows transaction detect contention earlier enables doomed transaction abort performing useless 
eager acquire easier ensure consistency conflict resolved detected transaction sure objects mutually consistent open operation 
lazy acquire contrast obvious approach requires transaction maintain private list opened objects re verify entire list opening 
approach imposes total overhead quadratic number opened objects 
alternative sandbox transactional code catch recover memory arithmetic faults impose limit execution time heuristic protection infinite loops 
cases may safe execute inconsistent data case verification overhead required requires application specific knowledge 
adaptive software transactional memory side tradeoff lazy acquire greatly shrink window transactions see contenders may unnecessarily aborted delayed 
particular lazy acquire transaction aborted transaction aborts attempts commit 
metadata structure transactional object typically wraps underlying data object contains pointer data object referenced 
different means acquiring object appear current object stm systems transactional object point transaction descriptor ii transactional object point indirection object contains pointers transaction descriptor old new versions data object 
option allows conflicting transactions see competitors metadata object release expensive released object left acquired state points descriptor subsequent accesses search descriptor write list find current version 
additionally maintaining descriptors previous committed aborted transactions constitute potential space overhead quadratic total number objects 
cleanup operation update transactional objects point directly current data object cost object 
cleanup omitted entirely object metadata cost overhead space 
alternatively lightweight cleanup phase zero pointers obsolete data objects making available garbage collection 
attractive intermediate option omit cleanup phase allow readers clean obsolete data objects incrementally 
indirection object referencing noted previous subsection cleanup essential transaction metadata 
optional object metadata 
performed provides readers direct access data objects currently transactional objects 
performed tend induce extra cache object opened read mode 
consequent slower reads significant impact throughput workloads 
lock freedom vs obstruction freedom lock free concurrent objects guarantee thread progress bounded number time steps 
obstruction freedom admits possibility livelock tends lead substantially simpler code lock free stm systems typically arrange acquire objects global total order 
perform recursive helping transaction performs transaction operations behalf detects conflict lock freedom naturally implemented lazy acquire sorting transaction discover need open object precedes opened object global total order 
marathe scherer iii scott arbitration competing transactions obstruction free system handled band separate contention manager 
right manager obtain high probabilistic strict guarantees progress 
placing dstm ostm dstm obstruction free ostm lock free 
transactional objects dstm point indirection locator object turn contains pointers transaction descriptor old new versions data 
status determines version object valid new version valid 
transactional object ostm points directly appropriate version data 
shall see difference object referencing results poor performance dstm read dominated workloads 
ostm lock free uses lazy acquire 
dstm uses eager acquire 
write access dstm acquires objects swapping new locator ostm acquires objects making point directly transaction descriptor 
dstm ostm acquires objects accessed read mode 
systems maintain private read list revalidate open operation 
ostm validate write list open 
bookkeeping sorting validation cleanup overheads cause ostm perform poorly write dominated workloads 
dstm cleanup phase arranges readers open time zero fields locators point obsolete data objects making available garbage collector 
stm design space dstm summarized point eager acquire object metadata indirect object referencing obstruction free ostm maps lazy acquire transaction metadata direct object referencing lock free section describe astm system 
adapts dimensions iii design space eager lazy acquire object metadata direct indirect object referencing obstruction free adaptive software transactional memory noted section demonstrated preliminary experiments location stm system design space plays key role algorithmic complexity performance 
fact different systems perform best different circumstances raises question possible adapt multiple design points obtain best worlds stm system performs scenarios 
address question astm design 
basic astm design experiments date identify workload lock freedom provides performance advantage obstruction freedom 
design flexibility algorithmic simplifications enabled obstruction freedom success practical contention managers avoiding livelock problems adopted obstruction freedom astm 
adaptive software transactional memory depicts transactional memory object tmobject borrowed dstm terminology astm 
default point directly data objects 
reader transaction acquire tmobject 
maintains private read list guarantees transaction consistency re validating objects list new open operation 
reads transaction invisible transactions system 
writer transaction hand acquires tmobject installing indirection object 
borrowing dstm refer indirection object locator 
illustrates object acquisition process 
astm locators dstm contain pointers transaction descriptor old new versions data object 
acquiring object writer instantiates new locator new version data object copies committed version current tmobject 
writer acquires target tmobject swing new locator 
start tm object cas data object transaction new object old object new locator fig 

acquiring previously object new active transaction data object new version copy transaction may states active aborted commit ted 
contention writer acquire attempt may fail may find active transaction locator tmobject 
contention manager invoked determine transaction proceed 
contention manager indicates transaction abort competitor attempts descriptor state 
current transaction retries acquire possibly waiting time competitor complete execution 
operations transaction complete committed successfully changing descriptor state 
immediately prior committing transaction perform final validation objects private read list 
tmobject points directly data object said state tmobject points locator acquired state 
remain acquired state writer completes subsequent reads suffer indirection overhead described section 
spread overhead cleanup time avoid entirely subsequent access write leave readers 
reader finds object acquired state transaction converts object marathe scherer iii scott start tmobject cas transaction old object new object old locator committed transaction data object old version data object new version fig 

cleanup opening acquired object read mode state 
illustrates conversion 
reader detects contention acquired tmobject locator refers transaction 
workloads dominated reads astm objects tend stay state improving performance lack indirection 
workloads dominated writes objects tend stay acquired state avoiding overhead cleanup 
additionally astm uses eager acquire default objects opened writable mode 
astm positioned perform variety workloads 
experimental results section confirm expectation 
workload effect readers vs writers dstm astm transaction opens objects write mode requires cases acquire objects commit 
subsequent readers may perform cases return objects state 
write dominated workloads rare 
roughly uniform mix reads writes transactions include reads perform 
case repeatedly flip acquired states 
readers slower due extra level indirection acquired needed revert objects acquired states 
interfere writers slowing 
results section show system throughput astm competitive better existing stm 
attribute primarily division labor reads writes eager acquire compared dstm avoid extra level indirection objects compared ostm benefits eager acquire significantly outweigh performance lost flipping transactional object states 
best case individual transaction may find objects incur indirection overhead 
worst case may find objects acquired 
addition indirection overhead incur costs cleanup objects opened read mode plus contention induced slowdown writes 
section assess benchmarks transactions fall points read write spectrum 
intend continue exploring reader writer tradeoffs research 
lazy astm adaptive software transactional memory described far astm uses eager acquire objects opened write mode 
suppose transaction detects conflict attempting open object mutual interest 
doomed fail detecting conflict early may allow abort avoid unnecessary 
similarly doomed fail opportunity kill right away 
noted section tradeoff go way 
general sure transaction eventually succeed 
obstruction free system astm contention manager simply informed guess 
waits aborts favor fails commit incurred significant cost 
similarly aborts fails commit wasted 
way cost avoided delayed acquire 
rightly kills possible detected inconsistency aborted soon suggesting may wasted overhead contention management 
evaluate tradeoffs developed lazy variant astm acquires objects commit time 
default eager astm lazy astm uses contention management obstruction free 
lazy acquire reduces window transactions may see competitors 
eager astm tmobject lazy astm acquired state 
readers perform cleanup necessary 
writers hand eagerly acquire target 
transaction maintains private write list descriptor addition read list 
write list read list opening new transactional object 
essentially transaction remains invisible transactions commit time 
result transactions may open object write mode time 
commit time transaction attempts acquire write list swapping pointers newly created locators corresponding respective tmobject 
fail transaction modified object 
ostm sorts objects uses recursive helping guarantee lock freedom astm traverses write list unsorted relies contention manager arbitrate conflicts 
adapting acquire semantics transactions doomed fail tend detect contention late lifetime lazy acquire doing lot wasted 
hand eager acquire doomed transactions interfere transactions delaying aborting 
unfortunately way general distinguish scenarios 
fact experiments far suggest tradeoffs largely cancel eager acquire usually little faster dramatically outperforms cases 
suggests eager acquire usually preferable order avoid bookkeeping complexity maintaining write lists 
specific case experimental results section reveal significant advantage lazy acquire transactions access large number objects read mode perform early release reducing window contention potentially conflicting transactions access marathe scherer iii scott objects write mode 
common example reader transaction uses early release incrementally linked path data structure 
transaction may suffer delays encounters objects eagerly acquired writers 
lazy acquire significantly reduces contention windows workload 
logical step quest adaptivity astm dynamically select object acquisition strategy 
observations synergy lazy acquire early release invoke history heuristic transaction adapt better acquire strategy eager lazy observations past transactions 
final version system full astm defaults eager acquire provides best performance cases details section 
maintain rolling averages percentages writes early releases follow write transactions executed thread 
long percentage writes threshold percentage early releases exceeds threshold subsequent transactions lazy acquire eager acquire 
heuristic assumes transactions tend behave similarly completed 
reflects quadratic cost incremental validation modest number writes result overhead significant overcome benefits reduced contention windows lazy acquire early release 
experiments set early release threshold write access threshold 
limited experimentation values suggests results largely insensitive exact percentage 
eager astm readers clean transactional objects necessary writers indirection objects dstm style locators 
full astm remains obstruction free requires contention management 
experimental results section provide detailed empirical analysis main aspects stm system design space addressed acquire semantics acquire methodology object referencing style progress guarantees 
experimental results variety concurrent data structures assess extent astm successfully adapts offered workload 
dstm ostm baseline compare results 
experiments conducted processor cache coherent multiprocessor ghz ultrasparc iii processors 
testing environment sun java beta hotspot jvm augmented jsr update doug lea 
measured throughput period seconds benchmark varying number worker threads 
results averaged set test runs 
experiments polka contention manager dstm variants astm eager lazy full scherer scott report manager fast stable 
perform incremental revalidation systems benchmarks consistency previously opened objects opening new 
write dominated workloads adaptive software transactional memory dstm eager astm objects opened write mode immediately acquired transaction free forget original transactional objects 
validation trivial transaction descriptor objects opened write mode consistent 
acquire objects lazily ostm lazy astm maintain write list addition read list revalidate objects lists incrementally 
astm defaults eager acquire mode switches lazy acquire mode incurs write list maintenance validation overhead ostm lazy astm 
sec threads fig 

intset performance results dstm ostm astm write dominated workloads ostm lazy astm suffer significantly bookkeeping incremental validation overhead maintaining write lists transactions 
dstm eager astm incur overheads 
strategy having astm acquire objects eagerly default enables astm remain eager acquire mode write dominated transactions 
assess impact design choice shows stm performance results intset benchmark 
intset maintains sorted list integers ranging 
range restricted benchmarks deliberately increase contention 
concurrent threads continuously insert delete nodes list 
transaction opens visited nodes write mode 
dstm eager astm astm perform comparably order magnitude better ostm lazy astm 
experiments modified versions code shown reveal overhead ostm lazy astm comes extra bookkeeping remainder comes incremental validation sorting ostm 
notice lazy astm livelocks drops low throughput essentially move processors 
shows performance results benchmark 
program uses priority queue heap simulate cache replacement web proxy marathe scherer iii scott frequently lfu algorithm 
lfu replacement policy assumes frequently accessed pages accessed 
transaction typically reads page increments frequency count rearranges heap necessary 
sec threads fig 

performance results dstm ostm astm approximate demand real web cache pick pages randomly zipf distribution 
result small set pages accessed frequently transactions essentially write dominated page cumulative probability selection pc 
dstm eager astm astm perform comparably 
lazy astm suffers bookkeeping overhead ostm additionally incurs overhead sorting recursive helping 
read dominated workloads discussed section style objects referenced considerable impact read performance 
dstm uses indirection objects locators ostm arranges transactional objects point data objects directly 
astm variants adapt object referencing style underlying workload 
illustrate facet astm performance relative ostm dstm read dominated benchmarks sorted list integers rbtree concurrent red black tree 
highly concurrent intset variant transactions open objects read mode release early moving list 
nodes updated upgraded write mode 
dstm performs worst due indirection overhead 
astm eager astm perform best lazy astm ostm incurring minor overheads bookkeeping sorting ostm 
objects typically released early writes occur transaction 
reason astm tends remain eager acquire mode 
sec sec adaptive software transactional memory threads fig 

performance results dstm ostm astm threads fig 

rbtree performance results dstm ostm astm rbtree concurrent red black balanced search tree 
linked list benchmarks threads repeatedly perform randomized insertions deletions 
transaction typically opens objects read mode searches tree right place perform insertion deletion 
subsequently upgrades write mode nodes needed rebalance tree 
performance results appear 
ostm perform comparably 
early releases involved transactions astm remains eager acquire mode 
nodes upgraded write mode dstm yields lowest throughput 
conflict window lazy object acquisition leads bookkeeping validation overheads helps reduce window contention transactions 
discussion marathe scherer iii scott sec threads fig 

performance results dstm ostm astm section early release lead situation lazy acquire expected significantly outperform eager acquire 
see situation benchmark 
represents random undirected graph sorted linked list node points separate sorted neighbor list 
increase contention restrict graph size nodes numbered 

transactions randomly insert delete node 
insertions transactions additionally select small randomized neighbor set target node 
transactions traverse adjacency list read early release find target node 
read update node neighbor list neighbor list new neighbors 
transactions long 
eager acquire window conflict large 
shows stm throughputs 
lazy acquire clear winner throughput factor higher eager acquire 
eager acquire reader transactions encounter unnecessary contention writer transactions objects released early anyway leading virtually serialized access main node list 
dstm bears additional indirection overhead performs worst 
synergy lazy acquire early release significantly reduces number read write conflicts 
eager astm performs little better dstm significantly worse lazy astm 
lazy astm lags little ostm threads data access patterns random due random neighbor sets transactions lazy astm apparently livelock progress 
ostm lock free suffer delay 
threads overhead recursive helping ostm causes reduction throughput 
astm follows lazy astm performance curve competitive ostm lazy astm 
astm defaults eager acquire mode transactions eager acquire consequently slow 
astm switches lazy acquire mode starts catching lazy astm ostm 
concluding remarks adaptive software transactional memory possibility automatically converting sequential code concurrent code stm attractive topic research brought verge practical utility :10.1.1.5.9270
depend constants overhead relative lock code small outweighed clear compelling semantic software engineering benefits 
detailed analysis design space modern stms identifying key dimensions stm system design 
various choices space lead varied performance tradeoffs 
consequently single stm performs best comparably possible scenarios 
analysis led create new stm system adapts offered workload yielding throughput comparable best existing system scenarios tested 
object acquisition methodology adaptive object referencing style obstruction free nature astm carefully selected give maximum throughput cases 
demonstrated feasibility adapting acquire semantics simple history heuristics 
analysis stm design space fairly exhaustive design dimension remains unexplored tradeoffs visible vs invisible reads 
preliminary results exploration read strategies shown suggest adapting may improve performance 
greater exploration execution scenarios favor eager lazy acquire semantics 
strive find better adaptation heuristics 
acknowledgments grateful sun scalable synchronization research group donating machine providing copy dstm code 
barnes 
method implementing lock free shared data structures 
proc 
th ann 
acm symp 
parallel algorithms architectures pages 
fraser 
practical lock freedom 
technical report cl tr cambridge university computer laboratory feb 
fraser harris 
concurrent programming locks 
submitted publication 
guerraoui herlihy 
theory transactional contention managers 
proc 
th ann 
acm symp 
principles distributed computing july 
harris fraser 
language support lightweight transactions 
proc 
th ann 
acm conf 
object oriented prog sys langs apps oct 
herlihy 
methodology implementing highly concurrent data structures 
proc 
nd acm symp 
principles practice parallel prog mar 
herlihy moir 
obstruction free synchronization double ended queues example 
proc 
rd intl 
conf 
distributed computing sys pages may 
marathe scherer iii scott herlihy moir scherer iii 
software transactional memory dynamic sized data structures 
proc 
nd ann 
acm symp 
principles distributed computing july 
herlihy moss 
transactional memory architectural support lock free data structures 
proc 
th ann 
intl 
symp 
computer architecture pages may 
herlihy wing 
linearizability correctness condition concurrent objects 
acm trans 
prog 
langs 
sys 
israeli 
disjoint access parallel implementations strong shared memory primitives 
proc 
th ann 
acm symp 
principles distributed computing pages 
lea 
concurrency jsr interest site 
gee cs edu dl 
marathe scherer iii scott 
design tradeoffs modern software transactional memory systems 
proc 
th workshop langs compilers run time support scalable sys oct 
marathe scherer iii scott 
adaptive software transactional memory 
technical report tr dept computer science university rochester may 
moir 
transparent support wait free transactions 
proc 
th intl 
workshop distributed algorithms pages 
springer verlag 
robinson 
data cache management frequency replacement 
proc 
acm sigmetrics conf 
measurement modeling computer sys pages 
scherer iii scott 
contention management dynamic software transactional memory 
proc 
workshop concurrency synchronization java progs pages july 
scherer iii scott 
advanced contention management dynamic software transactional memory 
proc 
th ann 
acm symp 
principles distributed computing july 
shavit 
software transactional memory 
proc 
th ann 
acm symp 
principles distributed computing pages aug 
stone stone heidelberger turek 
multiple reservations oklahoma update 
ieee parallel distributed technology nov 
turek shasha prakash 
locking blocking making lock concurrent data structure algorithms nonblocking 
proc 
th acm symp 
principles database sys pages 
