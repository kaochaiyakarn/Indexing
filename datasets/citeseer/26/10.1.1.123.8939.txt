routing indices peer peer systems arturo crespo hector garcia molina computer science department stanford university stanford ca usa db stanford edu finding information peer peer system currently requires costly vulnerable central index ooding network queries 
introduce concept routing indices ris allow nodes forward queries neighbors answers 
node answer query forwards query subset neighbors local ri selecting neighbors random ooding network forwarding query neighbors 
ri schemes compound hop count exponential routing indices 
evaluate performance simulations nd ris improve performance orders magnitude vs ooding system vs random forwarding system 
discuss tradeo di erent highlight ects key design variables system performance 
keywords peer peer systems routing index query processing query forwarding approximate content discovery distributed search mechanisms peer peer systems grown dramatically years 
system distributed computing nodes equal roles capabilities exchange information directly 
systems represent incredible wealth information allowing users exchange documents freenet music les napster word gnutella computer cycles seti home 
key part system document discovery 
goal help users nd documents content potential sources ciently 
mechanisms searching system advantages 
solutions classi ed broad categories mechanisms index non index search mechanisms specialized index nodes centralized search mechanisms indices ri routing indices node distributed search 
gnutella uses mechanism nodes index queries propagated node node matching documents 
search mechanism works ood ing network subset query hope nding match 
approach simple robust disadvantage enormous cost ooding network time query generated 
centralized search systems specialized nodes maintain index documents available system 
nd document user queries index node identify nodes having documents content 
central indices may built cooperation nodes napster nodes provide list available les sign time crawling network web search engine 
advantages centralized search mechanism ciency just single message needed resolve query 
centralized system vulnerable attack index sites shut court order hacker attack di cult keep indices date 
distributed index mechanism option study detail maintains indices node 
distributed indices need small traditional destination indices routing indices ris give direction document actual location 
illustrate consider shows nodes connected solid lines 
document content located node points neighbor pointing directly dotted arrow 
routes destinations indices proportional 
reduce size ris approximate indices allowing ris give de nite answer location document 
example gure entry ri node documents contents request documents content yield correct hint content 
study options building ective ris evaluate performance 
particular contributions introduce routing indices cient way locating content system sections 
kinds ris compound hop count exponential routing indices sections 
evaluate performance ris simulations nd ris improve performance orders magnitude ooding system versus random forwarding system section 
related problem indexing network closely related problem indexing distributed database 
survey current approaches please refer kos 
despite super cial similarities algorithms indexing distributed databases fundamental assumptions applicable systems 
distributed database algorithms assume nodes distributed database stable connected time 
say nodes fail 
fact nodes fail general expected fail repaired returned system 
second distributed database algorithms generally assume number nodes relatively small 
assumption applicable system tens hundreds thousands nodes 
working systems currently available indexing approach 
napster word uses centralized indices stated vulnerable attack di cult fund scale 
gnutella build indices queries ood signi cant part network resulting simple costly approach just query expand thousands requests gnutella network 
freenet uses interesting approach indexing 
node builds index location requested documents requested document retrieved low cost 
freenet limitations rst queries restricted identi er speci document second takes time node build ective index 
freenet newly connected node better just blindly forward queries neighbors 
oceanstore kbc uses approach similar proposed fact approach considered special case compound ri 
key di erence versus approach oceanstore assumes static network queries document identi ers content ofthe documents 
selecting neighbor forwarding query related traditional routing algorithms tan 
fact ri considered generalization data structures implement bellman ford routing algorithm bel ff 
major di erence algorithms standard routing algorithms designed transmit packet nodes shortest route 
case need get packet node nodes nd best answers query 
destination packet pre de ned ip routing depends query contained packet 
ip routing multiple destinations multicast algorithms studied extensively see exam system model ple mil 
multicast algorithms require creation relatively stable multicast tree 
case query processing system predict advance multicast tree look cost creating tree query prohibitive 
problem selecting best database send query studied part gloss project ggmt 
gloss assumes selecting set databases paths lead set databases 
empirically evaluated systems 
survey evaluation centralized search systems 
evaluation description state gnutella 
focuses search techniques indexes studies type local area index 
indices node indexes content nodes hops 
indices routing indices traditional indices 
peer peer systems system formed large number nodes join leave system time equal capabilities 
node connected relatively small set neighbors turn connected nodes 
neighbors node nodes andd 
note cycles network caused link 
document database accessed local index 
local index receives content queries request documents containing words database systems request documents containing picture sun returns pointers documents requested content 
query processing distributed search system distributed search system users submit queries node condition desired number results 
node receiving query rst evaluates query database returns user pointers results condition reached node selects neighbors forwards query state information 
turn neighbors evaluates query similar fashion returns result pointers user forwards query neighbors 
illustrate consider 
node initially receives query 
node checks local results sends results requesting node 
assuming condition satis ed node selects node best neighbor handle query forwards query dashed arrow 
note nodes able verify condition reached need include number results far state information query forwarding message 
processes query selects best handling query 
assume processed query results reach condition 
case returns query forwards query best neighbor case 
queries forwarded best neighbors parallel sequentially 
example send query wait results send query send query simultaneously 
parallel approach yields better response time generates higher tra may waste resources condition reached sending query need send 
focus sequential forwarding queries 
routing indices section example compound ri cri works 
section de ne ris general ris exponential ri hop count ri 
section 
objective routing index ri allow node select best neighbors send query 
ri data structure associated algorithms query returns list neighbors ranked goodness query 
notion goodness may vary general re ect number documents nearby nodes 
running example system retrieval text documents network depicted right 
simplicity network cycles discuss cycles section 
system documents zero topics queries request documents particular topics 
node local index quickly nding local documents query received 
nodes cri containing number documents path ii number documents topic interest show example cri node number documents topics path documents databases networks theory languages sample compound ri neighbors paths simplicity assume topics interest databases networks theory languages 
gure see access documents documents documents networks languages 
ri may coarser local indices maintained nodes 
example node maintain detailed local index classi ed sub categories 
keeping summary detailed index achieved compact ri cost introducing errors user queries subcategories 
speci cally summarizing local index may introduce ri 
example summarization groups subtopics single topic indices recovery sql databases may introduce number documents available 
fact query documents sql converted query documents databases making believe documents sql reality 
summarization introduce 
example summarization uses frequency threshold throws away topics documents may believe documents topic fact 
index compute goodness cris number documents may path measure goodness 
documents estimators ggmt ggmt 
focus estimators maintenance ris simpli ed model queries conjunction subject topics documents topic document topics independent 
estimate number results path cri si cri si cell column topic si row neighbor 
illustrate consider query documents databases languages received estimate number results goodness path path path 
note numbers just estimates subject 
particular local index db db routing indices db db strong correlation topics databases languages path may documents matching query topics databases languages hand strong negative correlation topics databases languages may documents path topic 
limitation cris take account di erence cost due number hops necessary reach document 
example documents path may just hop away documents path may scattered long chain nodes nding require messages 
sophisticated ris limitation 
rest section describe compound ris created maintained 
routing indices subsection ris particular compound ris improve performance query processing system 
consider system described 
part network ris attached node 
compactness representing topics interest database network theory languages letters db respectively 
example assuming rst row ofeach ri contains summary local index 
summary obtained consolidating subtopics main topics clustering local keyword index generate topics documents 
particular summary local index shows documents databases networks theory languages 
rest rows represent compound ri 
example ri shows node access database documents ini 
receives client query documents databases languages attempts local database answer query 
answers computes goodness path explained earlier 
case goodness andd respectively soa selects best query 
turn returns local results client ofa results computes goodness 
highest goodness forwards query turn returns local results forward query peers results needed returns query forwards best neighbor network example small query condition documents generate messages ooding messages ri 
send query serially depth rst fashion neighbors ranked randomly messages best case messages worst case 
savings number messages ris result forwarding query nodes high potential having results 
storage space required storing index information neighbor 
furthermore storage space neighbor adjusted increasing decreasing level summarization index 
speci cally ifs counter size bytes number categories number nodes branching factor centralized index require bytes node distributed system need bytes 
total entire distributed system bytes 
ris require storage space centralized index cost storage space shared network nodes 
creating routing indices turn attention ris created 
returning running example assume initially connection initial state system shown solid lines 
connection established node informs node documents accessed node speci cally aggregates ri sends example aggregation done adding vectors ri 
describe additional aggregation procedures section 
sends saying access documents databases networks theory languages 
need send information need know precise location documents accessed receives aggregated ri adds additional row ri identi er aggregated ri shown 
note aggregating ris reduce amount information transmitted storage space 
similarly aggregates ri excluding row ri sends aggregated ri note ri creation process done parallel 
update ris need inform neighbors access documents 
sends aggregate ri excluding row excluding row db db db db updates creating routing index shown 
update ri replacing row new information shown gure 
connected nodes send update nodes 
maintaining routing indices process maintaining ris identical process creating 
illustrate suppose client introduces new documents languages database 
neighbors summarizes new local index aggregates rows compound ri excluding row sends information replaces old row fori received aggregated ri 
turn computes sends new aggregates receiving update update ris compute new aggregates neighbors 
ciency wemay delay exporting update short time batch updates trading ri freshness reduced update cost 
choose send updates di erence old new value signi cant 
sending minor updates trade reduced update cost accuracy ri 
special frequent update case occurs node disconnects network 
illustrate suppose disconnects network 
node detects disconnection updates ri removing 
informs neighbors change access sending new aggregates ri 
turn neighbors update ris propagate new information neighbors 
note need participation participation neighbor disconnection process 
requiring participation disconnecting node important feature system nodes come go 
observe creation update ris expensive operations update sent neighbor prompts send update neighbors turn prompt update neighbors 
ris trade higher cost maintaining ris lower cost processing ri creation update algorithm input output updated ri side ect creation phase ri summary neighbor send ri update phase ri true wait batch aggregated ris arrive local index change aggregated ri ak received neighbor ri ak local index changed ri summary di erent ri ri neighbor ri aggregate ri send ri creation update algorithm queries 
systems trade may may 
experiments section suggest systems approach reduce total cost worth building ris 
experimental section show ratios updates queries high update queries approach reduces total cost 
algorithms data structures routing indices section formalize algorithms data structures ris 
general algorithms ri creation update usage explore alternatives main components ri 
algorithm creating updating ris algorithm creating updating ris 
algorithm started node joins system remains running node disconnects 
input algorithm local index 
algorithm uses functions summary summarizes local answer query input query client output query answers query forwards send local answers return rank neighbor rank append estimator ri sort tuples rank second attribute rank send query neighbor return ri usage algorithm index aggregate ri aggregates ri send sends aggregated ri neighbor algorithm assuming ri array row stores aggregated ri neighbor row reserved summary local index 
creation update algorithm divided phases 
rst phase creation phase newly connected node sends summary local index new neighbors 
second phase update phase node waits update messages changes local index 
stated node may wait set changes batch may ignore updates signi cant order reduce cost 
updating ri node sends new aggregate ris neighbors 
aggregated ris contain rows row neighbor aggregated ri sent 
algorithm answering queries algorithm answering queries 
algorithm run time new query received submitted user forwarded node 
input algorithm query pointer client issued query neighbor forwarded query 
algorithm starts attempting answer query local database 
local results obtained reach condition algorithm ranks neighbors estimator ri function function takes query row ri computes goodness neighbor respect query 
node sends query neighbor sequentially checking condition reached query returns 
hop hops neighbor db db alternative routing indices hop count routing indices sample hop count subsection alternative data structure ri hop count ri 
main limitation compound ri take account thenumber hops query required nd documents 
hop count stored aggregated ris hop maximum number hops 
call number horizon ri 
show sample hop count horizon hops 
node hop count ri neighbors hop neighbor node nd documents databases networks theory systems 
node nd documents hops neighbors 
note information horizon kind ri 
estimator hop count ri needs cost model compute goodness neighbor 
example neighbor may preferable neighbor query topic db nd results hop require hops nd results hand nd results going de ne cost terms number messages expand notion cost section de ne goodness neighbor ratio number documents available neighbor number messages required get documents 
neighbor allows nd documents message better allows nd document message 
simple model allows compute ratio regular tree cost model 
construction model assumes document results uniformly distributed network network regular tree fanout nodes connected exactly nodes ones leaves connected node 
assumptions takes message client nd documents root tree zero hops messages get documents zero hops initial message root message neighbors root get documents zero hops 
know documents node hops away hops away require message get rst documents additional messages get documents additional messages get documents 
compute number documents message dividing expected number result documents messages needed nd 
formally de ne goodness respect query hop count ri goodness ni horizon hop count ri goodness estimator cri ni ri entry hops 
example assume goodness query db documents prefer values assumption network topology regular tree documents uniformly distributed regular tree cost model 
assumption true formula heuristic 
turn problem create update hop count ris 
node needs notify neighbors update database rst builds aggregated ri fashion compound ri 
shifts columns right entries hop entries hops entries hops hops 
entries column original ri discarded summary local index placed rst column new table hop entry 
new aggregated ri sent neighbors turn update ris 
exponentially aggregated ri hop count ri ective account thenumber hops 
bene comes higher storage transmission cost compound ri 
section see hop count ri performance ected lack information horizon hybrid cri hri overcomes disadvantage solve storage transmission cost problem 
subsection alternative index structure exponential aggregated ri overcomes shortcomings cost potential loss accuracy 
exponentially aggregated ri stores result applying regular tree cost formula hop count ri 
speci cally eri node contains value computed goodness th th height fanout assumed regular tree goodness compound ri estimator summary local index neighbor topic interest entry 
show exponentially aggregated ri computed sample network 
gure assume neighbors andz leaf nodes fan tree 
entries topic db values 
exponential ri shares assumptions regular tree cost model may realistic con gurations approximate index 
fundamental di erence exponential ri hop count ri 
hop count information path db sample exponential routing index node horizon exponential ri keep information nodes accessible neighbor ri 
fact see section exponential ri outperforms hop count ri cases 
update exponential ris node needs send update associated neighbor update vector sent multiplies resulting vector adds goodness summary local index 
neighbor receives update vector replaces row sending node new vector propagates updates neighbors 
note updating exponential ris essential propagate updates new old values vector di erent example requiring euclidean distance vectors greater certain number 
exponential ri propagate updates nodes network 
cycles network section analyze cycles ect process creating updating ris strategies minimize ects 
illustrate ect cycles initial setup network depicted cycle 
assume node adds database new theory documents sends new aggregate ri sends update neighbors prompting send update sends update nally sends update receives update assume theory documents available node extra documents 
worse update prompt send update neighbors informing access theory documents creating nite loop 
able recognize update originated discard cycle lead nodes example node receive update general approaches dealing cycles ignore problem pretend cycles occur network op solution 
connection protocol prevents cycles forming network cycle avoidance solution 
allow cycles take update cycles routing indices actions recover ect cycle detection recovery solution 
examine approaches detail 
op solution solution works hop count ri exponential ri cycles compound ri algorithms trapped nite loop 
case hop count ri cycles longer horizon ect ri 
shorter cycles ect hop count ri ect limited regular tree cost model 
illustrate consider simple system nodes initially connected connected documents 
initial hop count ri topic shown left side 
assume establishes new connection new link causes series updates result hop count right side 
note believes get documents hops documents documents similarly documents reachable hops repeated counts documents available hops 
quantify ect extra columns goodness regular tree cost model goodness cycle created 
cycle created goodness increases 
di erence values error introduced cycle 
increase represents relative error 
cycle increases cost creating updating hop count ri updates sent node return cycle causing node send new update neighbors turn send update back node 
cycle broken update reaches horizon hop count ri 
similarly case exponential ri updates sent back originator 
ect cycle smaller smaller time update sent back due exponential decay di erence old update new update small algorithm stops propagating update 
illustrate scenario propagating updates hops neighbor hops neighbor initial state connection ects cycle hop count ri changes rst decimal digit goodness neighbor goodness resulting similar relative error 
previous case main ect cycle increase cost creating updating ri 
cycle avoidance solution solution allow nodes create update connection nodes connection create cycle 
techniques cycle avoidance extensively studied see tw survey 
main disadvantage approach absence global information may suboptimal update network 
cycle detection recovery solution detects cycles formed takes recovery actions eliminate ect cycles 
example cycles detected having originating node query update say include unique message identi er message 
update query forwarding node sends consequence message original message identi er 
message identi er returns say knows cycle recovery procedure started 
simple recovery procedure exclude ri ignore update messages coming link recovery procedure may reducing accuracy ri 
example assume modi es local database sends updates neighbors turn send updates send update simultaneously send update knows updates discard 
choose discard 
unfortunately information reasonable decision especially updates batched 
discards update may discarding shortest path experimental results section search mechanisms systems 
model system 
introduce simulation tool allows evaluate di erent search mechanisms ciently 
tool study performance di erent mechanisms factors ect performance 
close section analysis cases ris ectively 
modeling search mechanisms system goal subsection identify elements typical search mechanism system model element study impact performance 
typical system network nodes set documents 
users send requests consisting query node system 
objective search mechanism answer requests obtaining set documents size matches query addition search mechanisms allow updates addition nodes new documents 
process queries updates mechanisms described previous sections cris 
comparison purposes add additional mechanism ri 
ri choose best neighbor forward query search mechanism simply chooses random neighbor 
model elements search mechanism need de ne topology network location document results cycle policies costs measured 
topology network de nes number nodes connected 
model consider kinds network topologies tree tree added cycles power law graph 
rst topology tree interest cycles base case algorithms 
second topology start tree add extra vertices random creating cycles measure impact cycles search mechanisms 
third topology law graph considered model systems allows test algorithms realistic topology fff :10.1.1.37.234
model location document results distributions uniform biased distri bution 
uniform distribution nodes probability document result nodes document result 
second distribution assigns uniformly document results nodes remaining documents remaining nodes 
modeling cost search mechanism complex task 
model cost resources system network storage space processing power user experience mean query response time query throughput query turnaround time 
current systems critical resource network nodes connected links limited bandwidth dial connections dsl cable 
focus network number messages generated algorithm measure cost 
say user factors response time important focusing network bottleneck improving factors 
parameter name description base value network con guration parameters umn odes number nodes network topology network tree branching factor tree topology el extra links add cycles tree topology outdegree exponent power law document distribution parameters qr number query results available local indices distribution documents query ri parameters creation size average size ri creation update message bytes query size average size query message bytes number documents requested horizon decay ers ri compression minu minimum percentage di erence updates propagate simulation parameters evaluating search mechanism performance section experimentally compare proposed ris compound ri cri hop count ri hri exponential ri eri ri search mechanism 
explore performance ris ected approximate indices di erent conditions document result distribution number document results network topology 
evaluate search mechanisms built simulator 
simulator receives input model operation update query 
simulator iterates di erent network topologies document result locations outputs average number messages necessary perform operation plus con dence interval 
results computed con dence interval having relative error 
parameters set base values stated 
appendix explain detail operation simulator choice base values parameters 
shows number messages needed process query document distributions 
advantage ris obvious able reduce number messages half compared ri 
ris cri best performance followed eri hri 
di erence performance function number nodes generate index 
particular cri uses nodes network hri uses nodes prede ned horizon eri uses nodes exponentially decayed value index entry reaches minimum value resulting nodes hri fewer cri 
result shows nodes ri uses compute number messages cri hri eri ri routing index uniform comparison cri hri eri number messages requested results number results goodness path better ri see larger number nodes implies higher update cost 
ect document distributions biased uniform document distribution 
surprisingly biased distribution improve performance ris degrades performance ri search mechanism 
understand result analyzed traces simulations 
case ris document distribution algorithm directed queries nodes high number document results reach content loaded nodes queries needed travel nodes document results 
hand uniform document placement algorithms followed paths node obtained results 
summary case collected results traveling empty full node case collected results traveling path similar length documents 
result number messages document result cases 
case ri approach document distribution penalizes performance search mechanism needs visit signi cant number nodes nds content loaded node generating large number messages process 
compared ris non index ooding solutions 
case ris reduce number messages orders magnitude graph shown 
comparison completely fair gnutella systems nd results section network explore versus user de ned number results ris potentially better response time queries processed parallel sequentially 
nding results may applications users rarely examine rst top results returned search engine bri :10.1.1.109.4049
addition low response times may systems network contention created tens thousands messages generated query 
cri eri messages index compression ect cri hri eri ri messages added links ect cycles detect ignore increase requested ects ris 
shows number messages generated di erent requested result sizes cris performance hri indistinguishable eri omitted graph 
gure observe higher number requested documents messages generated omitted graph 
encouraging fact linear shape increase showing ris ri scale parameter 
analyzed ect decrease number document results available graph shown 
case obtained similar graph number messages grows linearly reduction document results 
errors ris particularly ect ri performance 
discussed section errors occur variety select scenario illustrate 
assume documents organized categories index hash table categories 
categories may hash bucket count represents aggregate number documents categories 
example suppose database documents network ones 
database network hash bucket consolidated database network bucket count documents 
query looking database documents ri believe reality 
adding original document counts chosen take minimum generating averaged generating mixed errors 
table size reduced occur 
show performance cri hri eri function index compression 
example value means number hash table buckets half number categories represents table sixth categories 
note scale linear 
graph see loss performance loss modest case signi cant reductions messages cri hri eri ri network topology tree tree cycle powerlaw size index 
query processing ris far cheaper ri highest compression levels 
conducted additional experiments mixed errors error models 
experiments similar results omitted brevity 
study perform cycles added tree network 
cycles created adding random links tree network umn odes links 
expected number messages increases add links cycles created 
increase tra result factors 
loss accuracy ri 
case detect recover policy loss result missing best route results explained section case op policy accuracy su ers introduced generation ri 
second query processing number messages increases 
case detect recover policy extra messages result return queries messages sent node detects cycle 
case op policy extra messages generated traverse cycle nding document results previous iteration 
gure observe increase number messages small detect recover policy signi cant ignore cycles 
unexpected result number messages drops links 
drop result added connectivity additional links create allows shorter routes document results 
similar performance eri shown hri cri ignore detect policy cri guaranteed terminate op policy 
ris perform di erent network topologies 
result analysis surprising rst glance ris perform better power law network tree network 
reasons result 
tree network connectivity node leaf messages cri hri eri tree tree cycle powerlaw updates network topology messages added links updates cycle policy nodes power law network nodes signi cantly higher connectivity rest 
analyzing traces simulation query algorithms direct queries connected nodes 
getting highly connected nodes large number results collected having issue messages 
second reason performance improvement power law distributions generate network topologies average path length nodes lower tree topologies 
lower path length improves performance need messages go node node 
hand factors hinder performance ri approach 
law network highly connected nodes easy nd just move randomly ri 
result ri approach visits signi cant number nodes nally highly connected node generating large number messages process 
shorter path length hinders ri bad decisions neighbor contact result return query messages 
shows number messages needed update kind ri network topology 
graph shows cost batch updates propagated network 
graph see cost cri higher compared hri eri 
result cri propagating update nodes hri eri propagate update subset network 
result con rms additional information better query performance cris come high price tag 
hand low update costs query processing performance close cris making excellent choice search mechanism system 
graph see network topology little impact update performance ris low correlation network topology number nodes needs updated 
concern performance may ected signi cantly cycles may op detect bytes minute updates minute updates minute loop nodes times value update exponentially decayed considered insigni cant 
shows number update messages generated di erent cycle policies di erent tree cycle network topologies 
previous experiment create tree cycle topology starting tree network adding random links create cycles 
experiment consider signi cant updates current index value 
expected number messages increases add links cases increase modest increase rapid cycles ignored 
expensive cycles propagate updates impact low 
stated earlier building ris advantageous queries ris update indices 
compare query update costs need count bytes transmitted simply messages query messages shorter 
show thenumber bytes transmitted minute eri system ri 
assume system single node 
processing queries minute horizontal axis shows number updates minute 
number corresponds observed average query load node run stanford 
say updates minute run roughly queries update 
comparison assume query messages bytes updates messages bytes hash table buckets bytes 
see gure number updates increases communication cost eri scheme increases 
cost ri scheme remains constant ris update 
crossover point updates minute 
long fewer updates minute ri pays practice expect number updates way minute especially critical keep indexes date updates batched 
ri eri studied improve ciency content search peer peer system 
achieve greater ciency placing routing indices node 
possible ris compound ris hop count ris exponential ris proposed experimentally evaluated simulations 
experiments conclude hri er signi cant improvements versus ri keeping update costs low 
routing indices particular help improve search performance current systems 
bel bellman 
dynamic programming 
princeton university press princeton nj 
bri brin :10.1.1.109.4049
anatomy large scale hypertextual web search engine 
proceedings th www conference 
clip com world wide web dss clip com gnutella html 
gnutella bandwidth 
clip com world wide web www clip com dss barrier html 
bandwidth barriers gnutella network scalability 
ff ford fulkerson 
flows networks 
princeton university press princeton nj 
fff faloutsos faloutsos faloutsos :10.1.1.37.234
power law relationships internet topology 

gravano garcia molina 
generalizing gloss vector space databases broker hierarchies 
proceedings rst international conference onvery large databases vldb 
ggmt gravano garcia molina tomasic 
ectiveness gloss text database discovery problem 
proceedings acm international conference management data sigmod 
ggmt gravano garcia molina tomasic 
precision recall gloss estimators database discovery 
inproceedings third international conference distributed information systems pdis 
ggmt gravano garcia molina tomasic 
gloss text source discovery internet 
acm transactions database systems tods 
kbc kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture persistent storage 
proceedings ninth international conference support programming languages operating systems asplos 
kos 
state art distributed processing 
acm computing survey september 
mil miller 
multicast networking applications 
addison wesley 
ps palmer ste 
generating network topologies obey power laws 
globe com 
tan tanenbaum 
computer networks 
prentice hall ptr 
tw tanenbaum 
operating systems design implementation 
prentice hall 
world wide web freenet sourceforge com 
freenet home page 
world wide web gnutella wego com 
gnutella development page 
world wide web ssl berkeley edu 
seti homepage 
word world wide web www napster com 
napster home page 
yang garcia molina 
comparing hybrid peer peer systems 
proceedings rst international conference onvery large databases vldb 
yang garcia molina 
cient search peer peer networks 
technical report stanford university october 
submitted icdcs 
appendix simulating system appendix described simulator works choice base values parameters 
simulator starts generating network topology 
distributes results nodes picks random node initially receive query update creates necessary ris 
build ris need full edged algorithms section know node query issued 
algorithm updates ri entries neighbors downstream node picked originator query 
cycles possible creating ris 
consider possible cycle policies op solution detect recover consider cycle avoidance solution ect detect recover policy processing queries updates 
name implies op solution special deal cycles 
detect recover policy track queries updates processed 
query update reaches node second time due cycle message forwarded breaking cycle 
generate errors simulate approximate indices ways 
scenario assume ris implemented hash tables document counts bucket 
generate consolidating buckets original hash tables adding document counts motivation consolidating buckets reduce size index 
second scenario errors generated normal distribution mean variance making errors positives negative unchanged mixed 
cases errors propagated updates compound node node real system 
case query building network distributing documents building ris send message selected initial node number documents requested case 
node nds local results available subtract number local results number requested documents number reached zero node sends request sequentially neighbors order prescribed ri number requested document set number received minus number documents 
turn node receives forwarded request procedure number requested documents reaches zero done node neighbors query proceed 
case query returned neighbor sent query node neighbor sends returned query best neighbor ri 
process count kind messages generated forwarded queries node sends query neighbor returned queries node sends back query forwarded condition met result messages sent originator query telling result accessed node 
note counting actual transmission answers messages application dependent depend performance search mechanism 
similar building ris treat cycles query processing policies prescribed model 
case update initially selected node updates ri aggregates rows sends neighbors appropriately modi ed depending ri 
turn neighbor checks changes ri signi cant comparing percentage di erence old new value minu parameter 
changes signi cant updates ri aggregates columns sends aggregated vector neighbors 
condition update varies di erent ris described previous sections 
update process apply cycle policies de ned model 
remaining appendix explain choice base values parameters 
rst parameter de nes size network 
simulations umn odes roughly double maximum number nodes study gnutella network 
parameter de nes topology network 
de ne topologies model de ne branching factor tree topology el number links added tree form tree cycles outdegree exponent law network 
simulator generate power law network power law degree generator ps 
set outdegree exponent equal best internet fff :10.1.1.37.234
document distribution parameters de ne documents distributed system 
simplicity assume queries number results qr 
nodes gnutella network answer query sowe set number nodes 
parameter de nes location document results network 
ri parameters de ne size ri tables messages parameters needed ri algorithm 

