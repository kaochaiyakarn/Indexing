existential heap abstraction entailment undecidable viktor martin rinard laboratory computer science massachusetts institute technology cambridge ma rinard lcs mit edu 
study constraints specifying properties data structures consisting linked objects allocated heap 
motivated heap summary graphs role analysis shape analysis introduce notion regular graph constraints 
regular graph constraint graph representing heap summary heap satisfies constraint heap mapped summary 
regular graph constraints form simple natural fragment existential monadic second order logic graphs 
key problems compositional static analysis proving procedure preconditions satisfied call site 
role analysis precondition checking requires determining validity implication entailment regular graph constraints 
central result undecidability regular graph constraint entailment 
undecidability entailment problem surprising simplicity regular graph constraints particular satisfiability regular graph constraints decidable 
undecidability result implies complete algorithm statically checking procedure preconditions postconditions simplifying static analysis results checking analysis results correct 
incomplete conservative algorithms regular graph constraint entailment checking possible argue heap specification languages avoid second order existential quantification favor explicitly specifying criterion summarizing objects 
keywords shape analysis typestate monadic second order logic type checking program verification graph homomorphism post correspondence problem research supported part darpa contract nsf ccr nsf ccr singapore mit alliance 
th annual international static analysis symposium sas version may pm typestate systems 
types capture important properties objects program reflecting format stored information set applicable operations intended objects program 
types help avoid programming errors increase maintainability program 
imperative language properties objects change time 
traditional type systems type object change object lifetime 
property traditional types limits set properties express 
desirable develop abstractions change properties objects change 
typestate system types objects change time 
simple typestate system introduced examples include 
similarly typestate systems step highly automated static checking complex properties objects 
difficulties specifying properties objects presence linked data structures property object may depend properties objects linked heap 
systems allow programmers identify properties object terms properties objects idea important properties object depend number properties objects introduced role system 
existential semantics roles 
allow definitions cyclic structures section adopted semantics heap satisfies set properties exists assignment predicate names heap objects local referencing constraints satisfied 
call constraints defined way role constraints 
existential quantification predicate names expressed existential monadic second order logic 
role constraints explicitly specify constraints incoming outgoing fields objects inverse acyclicity constraints 
role constraints encode may reachability properties implicitly reachability summary nodes 
entailment problem 
key problems compositional static analysis checking precondition procedure satisfied call site 
general checking precondition corresponds verifying validity implication entailment heap properties 
section conservative algorithm checking entailment role constraints 
study possibility existence complete sound algorithm role constraint entailment 
argue algorithm exists entailment problem undecidable 
regular graph constraints 
interesting undecidability result source undecidability particularly weak fragment role constraints 
call fragment regular graph constraints 
regular graph constraints capture problem mutually recursive properties potentially cyclic graphs abstracting details particular specification language 
local properties expressible regular graph constraints points referencing relationships role constraints regular graph constraints express sharing inverse acyclicity properties 
despite simplicity entailment regular graph constraints turns undecidable 
entailment role constraints undecidable entailment constraints encode regular graph constraints 
hope study regular graph constraints provides useful guidance researchers choosing appropriate abstraction linked data structures 
regular graph constraint graph heap satisfies constraint iff exists graph homomorphism existential quantification properties objects modeled regular graph constraints existence homomorphism regular graph constraints allow specifying properties graphs class graphs set trees regular graph constraints reduce tree automata set grids constraints reduce domino systems 
view regular graph constraints natural generalization constraints trees grids generalization weaker monadic second order logic undecidability non tree domains known 
consider class set heaps 
notion heap definition motivated garbage collected heap programming languages java ml 
heaps contain root node models roots heap global local variables null node contents null valued fields 
nodes heap reachable root unreachable nodes garbage collected heap may ignored edges total functions nodes nodes functions total consider null graph node 
results case heap contains kinds fields labeled 
model fields captures essence heap entailment problem simplifying presentation 
note entailment problem easily decidable object field heaps lists 
hand objects allowed fields undecidability result directly applies picking element subset fields program 
undecidability entailment 
section show exists simple efficient algorithm decides regular graph constraint satisfiable 
contrast entailment problem regular graph constraints undecidable 
sketch undecidability result section main technical contribution additional proof details 
common way showing undecidability problems graphs encode turing machine computation histories special form graphs called grids 
difficulty showing undecidability entailment regular graph constraints regular graph constraints define subclass grids class heaps satisfiability regular graph constraints heaps undecidable case 
show undecidability entailment regular graph constraints constraints sides implication restrict set possible counterexample models implication 
purpose introduce new class graphs called corresponder graphs section 
satisfiability regular graph constraints corresponder graphs encode existence solution post correspondence problem instance undecidable 
give method constructing implication counterexamples validity implication corresponder graphs satisfy regular graph constraint 
construction shows validity implication undecidable 
main difficulty proof characterization corresponder graphs finite set allowed disallowed homomorphic summaries section construction vaguely resembling characterization planar graphs terms forbidden minors 
consequences 
regular graph constraints closed conjunction certain cases closed disjunction section 
due closure conjunction implication reducible equivalence regular graph constraints 
result equivalence regular graph constraints undecidable 
results place limitations completeness systems role analysis 
implication problem graphs naturally arises compositional checking programs procedure preconditions postconditions regular graph constraints 
complete checking procedure preconditions call sites procedure postconditions undecidable 
furthermore impossible build complete checker role analysis results inputs checker regular graph constraints expressing set heaps program point 
similarly complete procedure semantically checking equivalence subsumption dataflow facts expressed regular graph constraints conservative fixpoint algorithm perform unnecessary iterations cases 
related 
shows undecidability alias analysis programs general control flow strengthening consequence rice theorem case program statements reachable 
contrast result shows local analysis single statement undecidable 
shape analysis algorithms non compositional originally program optimization 
analysis imprecision heap property entailment cause analysis perform extra fixpoint iterations may lead result sufficiently precise program optimization 
choose compositional approach program analysis ensures conformance program respect design increases scalability analysis allows analysis incomplete programs 
primary goal program reliability precision requirements needed avoid spurious warnings procedure precondition postcondition violations demanding requirements analyses intended program optimization 
precision requirements compositional analysis motivate study completeness heap property entailment algorithms 
systems support analysis tree data structures 
restriction tree data structures contrast notion heap allows nodes degree greater 
presence non tree data structures key factors implication regular graph constraints undecidable 
suggests alternative way gain decidability 
logic lr allows specifying reachability properties local variables 
lr allow defining set nodes reachability property stating properties objects set experience regular graph constraints indicates unrestricted existential quantification sets objects quickly leads heap abstractions comparison undecidable 
interesting note existential quantification disjoint sets objects occurs instrumentation predicate unknown truth value 
advantage approach existence abstraction predicates induce canonical homomorphism concrete heap 
case analysis appropriate compatibility constraints page sharpen heap properties eliminate values implication heap properties approximated combining sharpening simple structural comparison valued structures 
elements order logic transitive closure order logic inductive definitions page necessary naturally expressing reachability properties 
reachability properties turn useful criterion summarizing sets objects leading potentially intuitive semantics possibility verifying stronger properties 
considering extending role definitions regular expressions exploring possibility translating role constraints valued structures 
regular graph constraints section define class graphs considered subclass heaps deterministic graphs reachable nodes 
define notion regular graph constraints show satisfiability constraints heaps efficiently decidable 
state closure properties regular graph constraints 
preliminaries relational image set set 
word finite sequence symbols 
word denotes length graphs consider directed graphs 
graphs contain kinds edges represented relations 
relations represent fields objects object oriented program 
constant root represents root graph 
edges terminated null represent partial functions representations graphs containing partial functions 
definition 
graph relational structure null root finite set nodes root null distinct constants root null kinds graph edges nodes 
denote class graphs 
null si iff null successor node element set similarly successor element 
note exactly edges originating null 
drawing graphs show edges 
definition 
heap graph null root relations total functions null node reachable root 
denote class heaps 
example 
define heap representing list length root null root null null null root null null null null 
graphs constraints regular constraint graph constraint stating mapped graph constraint satisfaction relation corresponds abstraction relation program analyses 
definition 
say graph satisfies constraints graph write iff exists homomorphism homomorphism directed graphs special case homomorphism structures page 
definition 
function homomorphism graphs iff conditions hold null root null root 
si implies 
root iff root 
null iff null exists homomorphism call model shape analysis homomorphism corresponds abstraction function mapping heap objects summary nodes shape graph 
require homomorphism injective 
think homomorphism coloring graph nodes graph color node restricts colors successors colors colors successors colors 
example graph colored colors adjacent nodes different colors iff homomorphic complete graph self loops 
identity function homomorphism graph 
graph composition homomorphisms homomorphism transitive 
isomorphism set regular graphs constraints certain subset set closed formulas second order monadic logic 
formulas form 
xk 
xk denote sets nodes denote individual nodes quantifier free page 
isomorphism property iff standard tarskian semantics monadic second order logic formulas expressing closed formula true model isomorphism mind introduce constraints propositional combinations regular graph constraints correspond propositional combinations corresponding formulas iff iff iff 
similarly class graphs define satisfiability corresponding satisfiability formula class models validity implication corresponding validity implication formulas class models definition satisfiability 
graph satisfiable class graphs iff exists graph satisfiability problem class graphs graph determine satisfiable 
definition implication 
say implies class graphs write iff implies graphs implication problem entailment problem graphs determine 
say regular graph constraint equivalent regular graph constraint write iff iff 
note iff 
consider set models regular graph constraints see table summary satisfiability entailment different classes graphs 
closure properties section give construction computing conjunction graphs construction computing disjunction graphs 
constructions section 
conjunction show cartesian product construction obtain conjunction graphs 
definition cartesian product 
null root null root graphs 
graph null root null null null root root root 
null root null root null root proof proposition straightforward see 
proposition conjunction product 
graph iff 
disjunction definition graphs construction yields disjunction arbitrary graphs class heaps example 
ensure find union graphs set heaps simply require root null 
definition graphs 
graph null root iff root iff null 
root null root root null null fig 

graph sum definition graph sum 
null root null root graphs null root 
graph null root see 
previous definition justified proposition 
proof proposition uses fact non null node heap reachable root assumption root null graphs see 
proposition disjunction sum 
heap graphs 
iff 
graphs 
sequel deal graphs 
repeat operations graph stabilizes remove unreachable node null edges incident remove node mark marked return marked true pick successor marked true mark pick successor marked true mark perform resulting graph contain root unsatisfiable heap satisfying obtained follows graph nodes edges unmarked mark root return subgraph containing marked nodes edges satisfiability heaps fig 

satisfiability check heaps consider satisfiability problem regular graph constraint class heaps 
context program checking graph denotes property heap 
satisfiability problem interesting program checking reasons 
graph satisfiable represents contradictory specification 
supplied developer specification contains error 
derived program analysis considering cases case corresponding omitted consideration represents concrete heaps 
satisfiability easier entailment natural explore satisfiability 
satisfiability graphs class heaps efficiently decidable algorithm 
goal algorithm find graph exists heap recall property heap node exactly outgoing edge exactly outgoing edge 
property need hold take heap proving satisfiability satisfiable subgraph heap 
algorithm updates current graph heap removes root node 
correctness algorithm follows fact removes nodes range homomorphism see correctness proof 
undecidability implication heaps section presents central result implication graphs class heaps undecidable 
understand implication problem observe proposition holds 
proposition 
class graphs 
proposition provides sufficient condition graph implication hold direct consequence transitivity relation 
implication problem difficult converse proposition hold 
example graph contains nodes image homomorphism result eliminating nodes case undecidability implication means incompleteness implication test fundamental computable relation computable 
preceding check computable graph cleanup operation yield complete implication test 
idea undecidability proof seen section satisfiability problem regular graph constraints heaps decidable 
hand subclasses undecidable satisfiability problem 
subclass class grids 
grids regular graph constraints correspond tiling problems undecidable represent turing machine computation histories 
smaller class difficult regular graph constraint satisfiability problem definable larger class regular graph constraints 
show undecidability implication problem constraints sides implication describe subclass cg graphs satisfiability problem undecidable 
construct class cg way represent solutions post correspondence problem instances colorings graphs cg 
see page post correspondence problem pcp short 
call elements cg corresponder graphs 
choose cg class grids easier presence absence homomorphisms characterize cg characterize class grids 
definition corresponder graphs definition captures essence construction corresponder graphs need sufficiently rich proposition true sufficiently simple proposition true 
proven proposition proposition theorem yields undecidability result central contribution 
theorem 
implication graphs undecidable class heaps 
proof 
reduce satisfiability graphs class corresponder graphs problem finding counterexample implication graphs class heaps 
reduction proposition establishes implication graphs undecidable 
graph 
consider implication claim heap counterexample implication iff corresponder graph assume corresponder graph proposition 

conclude counterexample 
assume counterexample 

proposition conclude corresponder graph 
furthermore corresponder graphs corresponder graphs subclass class heaps 
shows example corresponder graph 
encode matching words pcp instance corresponder graph upper list nodes lower list nodes 
lists formed edges drawn horizontally 
list nodes list nodes connected edges drawn vertically 
edges allow coloring corresponder graph express matching letters words 
solution pcp instance list indices word pairs construction encodes list colors nodes corresponder graph 
edges nodes partition list nodes list nodes disjoint consecutive list segments 
coloring constraints edges ensure coloring sequence nodes coloring sequence nodes encode words pair pcp instance 
twice nodes word pairs pcp instance allow edge node node 
lists nodes nodes corresponder graph length length concatenated words solution pcp instance 
definition corresponder graphs 

uk 
lk corresponder graph cg 
uk 
lk graph isomorphic null root null root 


root ci ci null ui ui null li li null root null ui li null 

lk root 
lk null 

uk root 
uk denote set corresponder graphs cg 
uk 
lk cg 
satisfiability corresponder graphs undecidable proposition 
satisfiability regular graph constraints class corresponder graphs undecidable 
proof 
give reduction pcp 

vm wm instance pcp vi wi nonempty words vi 
vpi wi 
pi vi qi wi 
construct graph exists corresponder graph property iff pcp instance solution 
consider pcp instance bc ab illustrates corresponder graph homomorphism encodes solution pcp instance 
graph constructed pcp instance monadic second order logic formula 
null null null ab null bc fig 

example corresponder graph homomorphism coloring encodes solution pcp instance ab bc solution sequence indices encoded fact nodes colors followed colors 
node colors encode positions word 
node colors encode position word 
analogously node colors encode position word encode positions word 
null root 
disjoint lv lv lv lw lw lw ma mb mc root null lv lv lv null lw lw lw analogous lv lv lv mb mc analogous ma positions letter root null root ma fig 

formula graph constructed pcp instance 
disjoint denotes existentially quantified sets disjoint 
define singleton sets contain null root node respectively 
lv connects colors encode positions word similarly lv lw lw 
lv allows sequence words node colors analogously lw 
formula connects node representing choice word pair position word vk wk 
ma connects word positions containing letter similarly mb mc 
null null general define components null root follows 
pair words vi wi pcp instance introduce nodes nodes summarize nodes corresponder graph 
position word vi introduce nodes introduce nodes position nodes summarize nodes summarize nodes corresponder graph 
introduce nodes encode property node matching node denoting position word 
analogous reasons colored introduce nodes 
null root 
pi qi pi qi define graph edges follows 
ci nodes connected list begins root followed 
pairs different repeat list number times arbitrary order 
list encodes colorings represent pcp instance solutions 
nodes representing word positions linked order appear word 
position word followed position word null 
nodes vi words nodes wi words form disjoint lists edges 
root null pi pi pi pi null qi qi qi qi null define graph edges follows 
cj edge points position word 
numbered nodes point positions odd numbered nodes point positions 
ai bj word positions connected node points node indices node points node odd indices 
edges nodes nodes propagate information node denotes position word value index color nodes edge root nodes edge null 
distinction ensures colored node incoming edge node implies word occurring sequence words color nodes corresponder graph selected node 
root null qk wl pi qk wl null qk root qk pi wl pi qk wl null pi root pi claim 
pcp instance solution iff exists corresponder graph proof claim surprising defined notion corresponder graphs true 
see details 
homomorphisms characterize corresponder graphs section defined corresponder graphs parameterized family cg 
uk 
lk 
section give alternative characterization corresponder graphs subclass heaps satisfies certain set graph invariants 
chosen invariants invariant expressible homomorphism graph absence homomorphism graph 
graphs show class corresponder graphs definable set heaps counterexamples implication specific regular graph constraints 
proposition 
exist graphs heap iff corresponder graph 
proof sketch 
take graph 
see appendix figures graphs 
proof details 
corresponder graph show case qi 
show find homomorphism mapping nodes nodes nodes nodes nodes nodes 
showing qi difficult consider homomorphic image path root null 
difficult direction 
assume case qi 
show corresponder graph 
ensures roughly desired shape graphs qi ensure remaining invariants characterize corresponder graphs 
graphs eliminate models contain cycles certain 
example edges starting root leads cycle homomorphic 
way ensures property corresponder graphs edges root eventually leads null 
graphs ensure certain distinct paths graph commute lead node 
graphs ensure number nodes model graphs ensure nodes edge root iff node column edge node 
graph ensures node edge node uj node edge uj uj occurs uj list nodes 
similarly ensures edges nodes nodes proper order 
graphs ensure nodes edges nodes node edge root null node node 
having shown proposition proposition theorem follows 
proposed regular graph constraints abstraction mutually recursive properties objects potentially cyclic graphs 
regular graph constraints natural generalization tree automata domino systems 
shown satisfiability regular graph constraints decidable domain heaps 
main result shown implication regular graph constraints undecidable 
consequence result verifying procedure preconditions satisfied undecidable system constraints subsumes regular graph constraints 
fact decidability problems regular constraints sensitive choice class graphs summarized table 
table indicates techniques reasoning different classes graphs may substantially different 
expect support mechanized reasoning data structures contain set specialized techniques different classes graphs corresponding commonly data structures 
class satisfiability decidable source entailment decidable source graphs trivial easy trees grids heaps table 
decidability regular graph constraints chandrasekhar boyapati yuri gurevich patrick lam andreas podelski participants dagstuhl seminar reasoning shape useful discussions 
patrick lam darko marinov chandrasekhar boyapati anonymous reviewers useful comments earlier version 

michael benedikt thomas reps mooly sagiv 
decidable logic linked data structures 
proc 
th european symposium programming 

egon rger erich gr yuri gurevich 
classical decision problem 
springer verlag 

cristiano luca cardelli andrew gordon 
deciding validity spatial logic trees 
acm sigplan workshop types language design implementation 

venkatesan susan horwitz 
non approximability points analysis 
acta informatica june 

david chase mark wegman kenneth zadeck 
analysis pointers structures 
proc 
acm pldi 

comon dauchet gilleron tison 
tree automata techniques applications 
available www grappa univ lille fr tata 
release october 

bruno courcelle 
expression graph properties graph transformations monadic second order logic 
handbook graph grammars computing graph transformations vol 
foundations chapter 
world scientific 

das lerner mark 
esp path sensitive program verification polynomial time 
proc 
acm pldi 

robert deline manuel hndrich 
enforcing high level protocols low level software 
proc 
acm pldi 

drossopoulou damiani dezani ciancaglini giannini 
fickle dynamic object re classification 
proc 
th european conference object oriented programming lncs pages 
springer 

dawson engler benjamin chelf andy chou seth hallem 
checking system rules programmer written compiler extensions 
proc 
th usenix symposium operating systems design implementation 

ronald fagin larry stockmeyer moshe vardi 
monadic np vs monadic np 
information computation 

cormac flanagan rustan leino mark greg nelson james saxe raymie stata 
extended static checking java 
proc 
acm pldi 

jeffrey foster alex aiken 
flow sensitive type qualifiers 
proc 
acm pldi 

pascal fradet daniel le metayer 
shape types 
proc 
th acm popl 

rakesh ghiya laurie hendren 
tree dag cyclic graph 
proc 
rd acm popl 

antonio restivo 
dimensional languages 
grzegorz rozenberg salomaa editors handbook formal languages vol words 
springer verlag 

hodges 
model theory volume encyclopedia mathematics applications 
cambridge university press 

neil immerman 
descriptive complexity 
springer verlag 

daniel jackson 
alloy lightweight object modelling notation 
technical report mit laboratory computer science 

viktor patrick lam martin rinard 
role analysis 
proc 
th acm popl 

viktor martin rinard 
typestate checking regular graph constraints 
technical report mit laboratory computer science 
www mit edu papers index html 

james larus paul hilfinger 
detecting conflicts structure accesses 
proc 
acm pldi atlanta ga june 

anders ller michael schwartzbach 
pointer assertion logic engine 
proc 
acm pldi 

greg nelson 
techniques program verification 
technical report xerox palo alto research center 

flemming nielson hanne riis nielson chris hankin 
principles program analysis 
springer verlag 

ganesan ramalingam 
undecidability aliasing 
acm transactions programming languages systems toplas 

rice 
classes recursively enumerable sets decision problems 
transactions american mathematical society 

neil robertson paul seymour 
graph minors survey 
ian anderson editor surveys combinatorics papers london math 
soc 
lecture note series 

mooly sagiv thomas reps reinhard wilhelm 
solving shape analysis problems languages destructive updating 
acm toplas 

mooly sagiv thomas reps reinhard wilhelm 
parametric shape analysis valued logic 
acm toplas 

michael sipser 
theory computation 
pws publishing 

smith walker morrisett 
alias types 
proc 
th european symposium programming berlin germany march 

robert strom yemini 
typestate programming language concept enhancing software reliability 
ieee transactions software engineering january 

wolfgang thomas 
languages automata logic 
handbook formal languages vol words 
springer verlag 

david walker greg morrisett 
alias types recursive data structures 
workshop types compilation 
appendix regular constraints characterize corresponder graphs appendix graphs 
characterize class corresponder graphs cg 
presenting graphs conventions 
label denote root graph 
label edges relation relation edges 
note node outgoing edges useless graph terms specifying set models 
graph node graphs outgoing edge label 
graph presentation clearer node outgoing edge label node graph simply omit edges node sketch 
particular node outgoing edges graph sketch means outgoing edges unconstrained 
double headed arrow node node label denotes single arrows labeled show edge root null graph 
similarly show edges originating null 
display null times picture occurrences denote unique null node graph 
null fig 

graph null fig 

graph null fig 

graph null fig 

graph fig 

graph fig 

graph null null null null null fig 

graph fig 

graph fig 

graph null fig 

graph null null null null fig 

graph fig 

graph null null null null fig 

graph null fig 

graph null fig 

graph null null fig 

graph null fig 

graph null fig 

graph null 
