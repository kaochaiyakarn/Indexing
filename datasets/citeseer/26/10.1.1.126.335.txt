quality attributes large software systems large extent determined system software architecture qualities performance modifiability depend architecture code level implementation 
experience shows conflicts modifiability performance 
largest conflicts occur requirement possible modify system run time reconfigurations 
consequently need providing tradeoffs modifiability performance designing system architecture 
experiences industrial projects define design guidelines small taxonomy performance related quality attributes attributes related modifiability system 
incorporate guidelines design method making clear guidelines 
quality attributes software architecture design lars jan bosch daniel bengtsson department software engineering computer science university ronneby soft center ronneby sweden complex activity application development transformation requirement specification application architecture 
phases challenging activities better understood methodological technological support available 
process architectural design formalized intuitive rational engineering 
domain software architecture received considerable attention years 
extent especially quality requirements qrs heavily influenced architecture system 
qr conflicting making necessary find architecture provides appropriate compromise 
architectural design typical multiple objective design activity software engineer balance various requirements architectural design 
methods analyzing specific quality attributes analyses typically done isolation :10.1.1.48.785
experiences number architecture design projects ranging telecommunication applications embedded systems 
accumulated experience projects define set guidelines outline design method possible obtain reasonable balance different qr 
point provide guidelines performance related quality attributes throughput response time guidelines related modifiability cost modifying reconfiguring system initial deployment maintenance phase 
experiences section describe industrial systems studied summarize experiences projects 
detailed description systems 
billing gateway bgw system description bgw collects billing information calls mobile phones 
system developed ericsson 
bgw written approximately lines code object oriented design parallel execution implemented solaris threads 
bgw transfers filters translates raw billing information network elements ne switching centers voice mail centers telecommunication network billing systems post processing systems pps 
customer bills issued billing systems 
raw billing information consists call data records 
continuously stored files network elements 
certain time intervals files reached certain size files sent bgw 
bgw configuration window 
graphical user interface connected bgw 
interface different streams information going gateway visualized directed graph 
shows application network elements producing billing information leftmost nodes 
called msc new york msc boston msc mobile switching center 
mscs sent filter called 
function associated filter case filter function evaluates true contain proper information services 
contain information services simply filtered 
sent filter called 
case streams going filter 
function associated evaluates true cdr contains information roaming call roaming call occurs customer network operator travelling country 
case record forwarded formatter billing system roaming calls record sent formatter billing system non roaming calls 
record format billing systems differs format produced mscs 
coming filter reformatted sent billing systems 
graph example billing applications configured 
shows major threads application 
flow data bgw system contains number static threads 
flow information going system additional threads created dynamically 
ne sends billing file bgw data collection thread created 
thread reads file network stores disk 
complete file stored data collection thread terminates 
data processing part bgw actual filtering formatting implemented different way data processing thread ne node configuration see 
experiences system architecture parallel expected multiprocessor speedup 
speedup disappointing version performance dropped number processors increased 
reason dynamic memory management major bottleneck 
network element network element billing gateway system msc new york data collection msc boston data collection buffer msc boston network interface handler data flow buffer msc new york data processing data processing designers bgw wanted flexible system new cdr formats handled changing system 
major component bgw flexible parser handle data formats specified asn 
parser uses lot dynamic memory 
order increase flexibility new language possible define complex filters formatters defined 
new language easier adapt bgw new environments configurations 
new language led intensive dynamic memory small configurations 
consequently excessive dynamic memory stemmed efforts building flexible configurable system 
turned performance problems due dynamic memory management removed relatively easy 
replacing standard memory management routines solaris multiprocessor implementation called ptmalloc performance improved significantly 
investing redesign effort weeks performance improved approximately factor sequential case factor multiprocessor 
major part redesign introduce memory pools commonly objects 
fraud control centers fcc system description thread structure billing gateway 
cellular operators introduce cellular telephony area primary concern establish capacity coverage signing customers 
network matures financial issues important lost revenues due fraud 
software switching centers provides real time surveillance suspicious activities irregular events associated call 
idea identify potential fraud calls terminated 
single indication user interface handler buffer data distribution roaming data distribution buffer handler static thread dynamic thread post processing system post processing system call termination 
fcc allows cellular operator decide certain criteria fulfilled call terminated number indications detected certain period time action taken 
events continuously stored files cellular network 
certain time intervals files contain certain amount events files sent fcc 
fcc consists major software modules see 
module ericsson platform handles interaction switching network 
collected events passed main module fcc 
main module event files parsed divided separate events 
events stored checked pre defined rules database 
event triggers rule action module notified 
module responsible executing action associated rule send terminating messages switching network 
central part fcc data storage data processing 
commercial rdbms sybase implementation 
order improve performance fcc implemented parallel execution solaris threads 
processing main module threads 
shows threads communicating 
listener thread receives event file creates parser thread 
created parser thread thread ready receive file 
parser threads extract events file insert separate events event queue waiting processing 
events file extracted parser thread terminates 
number simultaneous parser threads dynamic 
parser fcc designed way flexible 
important ffc quickly support new types events new network release introduce new change format old events 
flexible design results frequent dynamic memory 
main module configurable number connections database server 
connection handled thread 
thread handles event architecture fcc 
time popping event event queue processing 
interaction database sql commands api provided sybase 
sql command constructed send database module 
final size sql command unknown dynamic memory construction 
thread responsible initiate actions caused event processes event 
experiences important industrial ericsson fcc project performance requirements kind telecommunication systems meet multiprocessor systems 
dynamic memory management performance bottleneck fcc 
reasons fcc intensive dynamic memory object oriented design parser string library dynamic construction database requests respectively 
optimizing dynamic memory management speedup increased significantly 
different approaches optimizing dynamic memory handling fcc 
approach replace standard memory handler parallel memory handler called ptmalloc 
approach split client unix processes unix processes different memory images 
performance characteristics approaches similar 
generic database systems system description database applications need high flexibility 
may want change number properties columns associated object record run time may want flexible searches give objects property value red 
type functionality easily supported regular standard database design 
having high degree flexibility making system configurable cases decrease maintainability cost lot changes require redesign regular database system user configurable system 
investigated flexible application database system 
standard rdbms oracle 
purpose system maintain information telecommunication products services 
development system joint effort swedish dutch ptt swiss ptt 
order obtain desired flexibility metadata approach similar reflection architectural design pattern ref 
tables meta data 
actual data stored tables independent record format matter record types tables data 
information record format stored meta data tables 
experiences measurements production database showed approach increased average access time approximately factor compared regular database implementation slow approximately 
consequently price flexibility dramatic unacceptable reduction performance 
identifying common cases reading object times common creating object able optimize implementation way performance degradation compared regular database implementation limited factor roughly 
optimization introduced controlled redundancy database 
resulted somewhat longer times creating object 
time reading object reduced significantly 
due optimizations average performance improved slow approximately slow 
dialysis machines system description aim dialysis system remove water certain natural waste products patient blood 
patients kidney problems consequently produce little urine type system 
project aimed designing new software architecture dialysis machines produced 
software existing generation products exceedingly hard maintain certify 
overview dialysis system 
system physically separated parts dialysis membrane 
left side dialysis fluid circuit takes water supply certain purity dialysis concentrate added pump 
sensor monitors concentration dialysis fluid measured value control pump 
second pump maintains flow dialysis fluid third pump increases flow reduces pressure dialysis fluid side 
needed pull waste products patient blood membrane dialysis fluid 
constant flow dialysis fluid maintained hydro mechanic devices rectangle curl 
right side extra circuit blood part pump maintaining specified blood flow side membrane 
patient connected part needles 
extra circuit uses number sensors identifying bubbles actuators 
heater dialysis fluid concentrate dialysis fluid circuit pump schematic view dialysis machine 
dialysis process treatment means standard process 
fair collection treatments exists including example dialysis filtration hdf ultra filtration uf variations single needle single pump double needle single pump 
treatments changed due new research results effectiveness particular treatment decreases long patient 
function dialysis system constant considerable set variations exists 
experience anticipated additional changes software hardware mechanical parts system necessary response developments medical research 
experiences sensor filter extra circuit patient learned number lessons project quality requirements context different functional requirements quality requirements hard specify 
instance driving quality requirements project maintainability 
requirement maintainability possible considerably better current system 
large assessment efforts driving quality requirements dialysis system architecture research communities exist developed detailed assessment evaluation methods quality attribute 
experience techniques suffer major problems context architecture assessment 
focus single quality attribute ignore equally important attributes 
second tend detailed elaborate analysis requiring excessive amounts time perform com plete analysis 
techniques generally intended design phases require detailed information available architecture design 
architecting iterative design dialysis system architecture earlier design experiences come designing architectures necessarily iterative activity impossible get completely right time 
designed software architecture types activities individual design group meeting design 
learned group meetings design teams meeting hours extremely efficient compared merging single individuals designs 
responsible putting things dealing details virtually creative design redesign performed meetings 
done hard decide design software architecture reached criteria 
important reason software engineers generally interested technically perfect solutions design approaching asymptotically reaches completely 
second important reason making hard decide design finished detailed evaluation giving sufficient insight attributes architecture design expensive consuming considerable time resources 
engineers delay detailed evaluation certain architecture fulfils requirements 
measurement systems system description measurement systems class systems measure relevant values process product 
measurement system quality control produced products separate acceptable unacceptable products categorize products quality categories 
example measurement system system sorting bad pieces wood floor manufacturing process 
measurement system contains considerable amounts software substantial part systems hardware connected real world sensors actuators 
developments domain sensors actuators changes measurement systems small single processor systems developed close hardware distributed computing systems modern sensors actuators contain processors 
increased functionality sensors actuators reduces complexity constructing measurement systems increased demands systems resulting increase size construction measurement systems complex activity 
involved design object oriented framework measurement systems 
architecture simple measurement system shown 
consists entities communicate achieve required functionality 
sensor actuator measurement item factory architecture simple measurement system 
trigger triggers factory physical item enters system 

factory creates representation physical object software measurement item 

measurement item requests sensor measure physical object 

sensor sends back result measurement item stores results 

collecting required data measurement item compares measured values ideal values 

measurement item sends message actuator requesting actuation appropriate measured data 
measurement systems fulfil number quality requirements intuitive type system designed framework concepts direct correspondence application domain 
way concepts combined logically consistent view domain expert 
reusable framework provide reusable components construction measurement systems 
requires delicate balance generality speciality 
means components decomposition dimensions chosen relatively general components different dimensions composed form specific components real system minimal extensions 
flexible requirements flexibility measurement systems higher average 
described actual composition system components analysis process reaction system analysis results needs easily adaptable application development system operation 
real time constraints traditional system construction approaches deal real time constraints running tests system measuring system responses discussed advantages expressing real time constraints directly part system 
difficulty real time concurrency platform dependence implementation techniques 
trigger experiences experiences collected measurement systems project quality attributes harder functionality designing system include correct functionality trivial architecture design effort directed achieving quality attributes 
discuss development measurement system object oriented framework measurement systems 
transformations architecture taken improve quality attributes 
boundary designing framework domain may defined task practice drawing boundary framework extremely difficult 
early discussions constantly extending framework agreed framework better include feature 
soon realised size framework unmanageable prioritizing features difficult 
balancing quality attributes experiences applications section systems worked valuable insights regarding implications certain quality attributes software architecture 
quality attributes favor similar architectural solutions quality requirements favor architectural solutions conflicting easy combine 
section simple categorization quality attributes 
section software architecture design method developed briefly introduced 
reasoning qualitative nature design method provides extent means perform quantitative assessments quality attributes software architecture 
architectural implications caused quality requirements discussed section 
section discuss relation architecture implementation performance maintainability respectively 
section presents set design guidelines 
guidelines support selection appropriate architecture transformations 
taxonomy quality requirements categorizing quality attributes number possibilities categorizing quality attributes 
suggest categorization subset quality attributes 
reason selecting particular categorization experience enables define conflicts occur attributes 
divide attributes major categories viz 
performance modifiability concerned effort needed redesign system 
separate requirement high throughput requirement response time 
modifiability decomposed quality attributes maintainability configurability 
part intend incorporate attributes reusability usability availability 
different ways meeting need changes system 
required advanced user able certain modification configurability requirement system behavior modified executable program 
instance bgw system input formats way input data processed configured user drawing graphs ones 
example run time configurability database system allows user define record formats 
requirement certain modification inexpensive perform designer refer maintainability requirement case redesign system 
consequently configurability maintainability address need modifying system meet certain changes 
case configurability program redesigned maintainability requirement states redesign program cost effective 
design method outline previously developed method designing architecture graphically 
method starts requirement specification 
input data architect synthesizes architecture primarily functional requirements 
version architecture contains initial archetypes 
definition usage term archetype differs 
define archetype basic abstraction model application architecture 
archetypes generally evolve design iterations 
architecture evaluated different evaluation techniques 
method uses evaluation approaches 
scenario evaluation techniques software qualities expressed typical scenarios 
simulation architecture modeled simulation environment behavior predict software quality attribute 
mathematical modeling including metrics statistics technique product process data predictions potential qualities resulting product task 
experience reasoning employs experienced designers intuitively identifies designs addressing certain quality requirements adequately 
results show potential software qualities sufficient architecture design finished 
generally evaluation initial architecture reveals number deficiencies 
address designer transforms architecture new version set available transformations 
categories transformations identified 
applying architecture style result changes structure 
applying architecture pattern adds certain behavioral rules architecture periodic objects 
applying design patterns impacts elements architecture 
converting quality requirement functionality handling robustness introducing exception handling 
transformations primarily reorganize domain functionality affect software quality attributes architecture 
set transformations architecture evaluation repeated process iterated quality requirements fulfilled 
architecture design method similarities architecture tradeoff analysis method proposed kazman 
differences exist major difference include concrete guidelines transform architecture order meet certain quality requirements concentrates identifying called tradeoff points design decisions affect number quality attributes 
guidelines modify software architecture 
outline architectural design method architectures meeting quality attributes experience shows generally large conflict configurability performance throughput response time 
major conflicts maintainability performance 
due commonly implementation techniques conflict maintainability performance 
run time configurability typically obtained interpreter structure operates meta data 
typical example reflection pattern 
number reasons kinds software architectures cause performance problems 
known interpretation costly executing functionality directly target hardware 
interpreter structure generate heavy dynamic memory 
reason structures interpreter operates partly unknown compile time order configure system dynamically run time need dynamic data structures 
object oriented design paradigm prevailing today tends intensify dynamic data structures 
frequent dynamic data structures easily generate serious performance problems multiprocessor platforms 
reason dynamic memory handling performance bottleneck 
experience fcc project projects studied shows distinction throughput response time important selecting suitable architecture 
experience particularly fcc shows order obtain throughput need process large chunks data time 
lead poor response times 
observation experiences various architectural styles particularly black board pipes filters architecture styles conclude pipes filters tend fair blackboard architecture sense variations response times smaller 
black board architecture improves throughput architecture opens possibility process chunks data arrive system exactly time may check rule fcc similar systems group data time 
architecture implementation performance known implementation techniques strong impact performance performance difference different sorting algorithms substantial 
relation performance software architecture obvious 
experience shows architectural decisions performance implications fully compensated clever implementation techniques particular decisions caused configurability requirements 
discussed previously experiences bgw fcc projects show consequence object oriented methods configurable design extremely heavy dynamic memory 
resulted poor performance particular multiprocessor system 
performance problem reduced optimizing routines allocating deallocating dynamic memory replacing standard memory handler memory handler optimized shared memory multiprocessors 
database project able reduce performance problems due meta data 
done controlled redundancy optimizing common cases 
performance half standard implementation implementation meta data optimizations 
consequently performance problems due configurability requirements solved implementation level 
performance problems remain highly optimized implementations 
means performance requirements completely postpone implementation phase performance major issue 
implementation techniques large impact performance 
architecture implementation modifiability similar performance modifiability influenced considerably implementation 
top level decomposition system architecture plays principal role achieving modifiable systems 
primary principle architecture new requirements affect components possible 
particular requirement added easy incorporate requirement 
discussed section maintainability configurability located modifiability heading 
advantage exploiting configurability cost incorporating new requirements small done advanced user 
important disadvantages exist 
new requirement needs implemented initial product development incorporating potential requirements may demanded 
acceptable cost incorporating requirement initial development small compared adding maintenance likelihood requirement high certain risk involved 
second run time configurability leads decreased performance 
design guidelines experiences far formulated set guidelines 
guidelines categorized quality requirements 
quality requirements studied taxonomy 
quality attribute hierarchy guidelines may associated 
guidelines architecture transformation phase architecture design method discussed section see 
phase entered architecture assessment analyzed architecture fulfil quality requirements 
suggest quality requirements categorized formulated categories shown 
architecture transformations performed different architectural styles architectural patterns design patterns 
studied cases described section formulated number guidelines concerned appropriate selection transformations respect quality requirements 
guidelines graphically shown corresponds architecture transformation phase 
estimation phase method indicates quality requirement unfulfilled enter architecture transformation phase 
guidelines associated quality attributes indicate suitable transformations positively affect unfulfilled quality attribute 
gl 
incorporating new requirements fielded systems competitive advantage convert modifiability maintainability requirements configurability requirements 
rationale configurability allows easy run time incorporation new requirements 
achieved changing system settings distributing binary component installation automatically incorporated system 
performed user site generally user minimal effort provides advantage competing products especially feature race products mobile phones 
dialysis system case simplify software evolution fielded system remote access typically achieved reconfiguring system adding new components 
performance safety affected negatively requirement incorporated version architecture 
gl 
performance requirements fulfilled convert modifiability requirements maintainability requirements 
addition configurability requirements convert maintainability requirements 
rationale configurability solutions interpreter architectural style generally lead considerable performance overhead maintainability solutions 
implementing modifiability requirements maintainability requirements consequently lead better performance 
dialysis system case discussed gives example 
gl 
throughput primary performance requirement blackboard architectural style 
rationale experiences fcc indicate throughput blackboard style systems better pipes filters architectural style 
gl 
response time primary performance requirement pipes filters architectural style 
rationale experiences fcc indicate response time individual events higher variation pipes filters style compared blackboard architectural style 
gl 
configurability requirement fulfilled interpreter architectural style 
rationale configurability concerned able adapt system situations specified point 
solution deals convert base level functionality meta model domain covering related functionality 
meta model interpreted interpreter 
meta model changed extended easily system configurable 
generally considerable performance penalty architectural style 
typical examples bgw fcc systems parser interpreter describe system behavior 
gl 
maintainability requirement fulfilled converted configurability requirement due performance requirements employ factory strategy design patterns factor behavior affected requirements 
rationale measurement dialysis systems maintainability improved separating stable functionality functionality judged changed 
factoring code changed increases maintainability editing existing code suffices define new subclasses instantiating previous classes 
gl 
performance requirement fulfilled convert dynamic object instantiation static object allocation possible 
rationale described earlier systems described section considerable amounts dynamic objects created destroyed 
studies show object memory management requires substantial computational resources 
avoiding dynamic object creation removal especially frequently iterated execution paths lead substantial performance improvements 
gl 
performance requirement fulfilled try increase granularity object definitions avoiding defining objects terms numerous sub objects 
try declare sub objects value composite aggregations 
rationale described earlier systems described section considerable amounts dynamic objects created destroyed 
objects defined terms sub objects declared created constructor aggregating object lead large number dynamic memory allocations creation aggregating object 
potential conflict guideline gl gl results division objects larger number sub objects 
consequently tradeoff gl gl depends degree maintainability performance requirements respectively 
guideline architecture transformation experiences industrial applications 
experience individual project shows modifiability performance important issues 
performance evaluations bgw fcc projects show conflict introducing concepts increase modifiability new language bgw meta data model obtaining high performance 
serious conflicts typically occur configurability requirement performance requirement 
joint experience projects formulated design guidelines defined small taxonomy important quality attributes 
guideline associated quality requirement taxonomy 
incorporated guidelines existing design method making clear guidelines 
experiences show performance extent modifiability affected implementation techniques 
performance problems performance problems caused excessive dynamic memory management bgw fcc large extent compensated appropriate implementation techniques 
architectural decisions negative performance implications fully compensated implementation phase meta data model 
important avoid adopt architectural styles performance major issue 
modifiability system larger extent performance decided top level architectural decomposition 
consequently important obtain reasonable balance different quality requirements top level architectural design 
hitherto considered performance modifiability 
plan extent guidelines method quality requirements reusability availability 
po bengtsson bosch scenario architecture reengineering proceedings th international conference software reuse pp 
june 
po bosch dialysis software architecture design experiences proceedings st international conference software engineering may 
bosch design object oriented framework measurement systems object oriented application frameworks schmidt johnson eds john wiley 
bosch software architecture design evaluation transformation proceedings ieee conference engineering computer systems december 
buschmann kel meunier rohnert stahl pattern oriented software architecture system patterns john wiley sons 
generic product database system proceedings isca th international conference computers applications cancun mexico april 
gamma helm johnson vlissides design patterns elements reusable object oriented software addison wesley 
optimizing dynamic memory management multithreaded application executing multiprocessor proceedings th international conference parallel processing august minneapolis 
multiprocessor performance evaluation telecommunication fraud detection application submitted publication 
mccall quality factors software engineering encyclopedia vol ed wiley pp 
points deviations pattern language fire alarm systems pattern languages program design addison wesley 
kazman abowd bass clements scenario analysis software architecture ieee software november pp :10.1.1.48.785
kazman klein barbacci longstaff lipson carriere architecture tradeoff analysis method tech 
report cmu sei tr 
klein pollak gonzales harbour practitioner handbook real time analysis kluwer academic 
knuth art computer programming vol 
searching sorting addison wesley 
rumbaugh jacobson booch unified modeling language manual addison wesley 
mellor recursive design application independent architecture ieee software pp 
january february 
smith williams software performance engineering case study including performance comparison design alternatives ieee transactions software engineering pp 

