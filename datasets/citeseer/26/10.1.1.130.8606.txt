submitted vldb journal review may authors publication 
modeling quality service workflows web service processes jorge cardoso john miller amit sheth jonathan arnold lsdis lab department computer science genome resource laboratory department genetics university georgia athens ga usa workflow management systems wfmss support various types business processes decade 
workflows commerce web services applications suppliers customers define binding agreement contract parties specifying quality service qos items products services delivered deadlines quality products cost services 
management qos metrics directly impacts success organizations participating commerce 
services products created managed workflows underlying workflow system accept specifications able estimate monitor control qos rendered customers 
predictive qos model possible compute quality service workflows automatically atomic task qos attributes 
model specifies qos describe algorithm simulation system order compute analyze monitor workflow qos metrics 
organizations constantly seeking new innovative information systems better fulfill missions strategic goals 
advent evolution global scale economies organizations need competitive efficient flexible integrated value chain different levels including information system level 
past decade workflow management systems wfmss distinguished due significance impact organizations 
wfmss allow organizations streamline automate business processes reengineer structure addition increase efficiency reduce costs 
researchers identified workflows computing model enables standard method building web services applications processes connect exchange information web chen dayal leymann fensel bussler 
new advances developments services web services set new requirements challenges workflow systems 
past research involved development fully distributed enactment services workflow management 
infrastructure meteor system specifically orbwork kochut sheth miller enactment services prototyping deploying applications various domains bio informatics hall miller healthcare sheth telecommunications luo military kang university administration capa 
experience real world applications aware existing workflow systems products research prototypes provide set indispensable functionalities manage streamline business processes 
organizations operating commerce global economies include competitive constantly changing markets new set requirements answered current workflow technologies 
important missing requirement management quality service qos technical aspects service level agreements slas 
organizations operating modern markets commerce activities distributed web services interactions require qos management 
products services defined specifications available customers 
appropriate control quality leads creation quality products services turn fulfill customer expectations achieve customer satisfaction 
qos major concern areas networking cruz georgiadis guerin real time applications clark shenker middleware zinky bakken schlichting research groups concentrated efforts enhancing workflow systems support workflow quality service management 
organizations able characterize workflows qos distinct advantages 
allows organizations translate vision business processes efficiently workflow designed qos metrics 
commerce processes important know qos application exhibit making service available customers 
second allows selection execution workflows qos better fulfill customer expectations 
workflow systems carry complex mission critical applications qos analysis serves ensure application meets user requirements 
commerce processes important know qos application exhibit making service available customers 
third possible monitoring workflows qos 
workflows rigorously constantly monitored life cycles assure compliance initial qos requirements targeted objectives 
qos monitoring allows adaptation strategies triggered undesired metrics identified threshold values reached 
fourth allows evaluation alternative strategies adaptation necessary 
unpredictable nature surrounding environment important impact strategies methodologies structure business processes 
order complete workflow initial qos requirements necessary expect adapt replan reschedule workflow response unexpected progress delays technical conditions 
adaptation necessary set potential alternatives generated objective changing workflow qos continues meet initial requirements 
alternative prior carrying adaptation running workflow necessary estimate impact workflow qos 
example workflow unavailable due malfunction components indispensable evaluate adaptive strategies applied correct process 
essential services rendered follow customer specifications meet expectations ensure satisfaction 
customer expectations satisfaction translated quality service rendered 
organizations realized quality service management important factor operations 
quality models iso iso created help organizations individual performers meet customer needs 
workflow qos composed different dimensions characterize workflow schema instances 
innovative aspect research reported developing comprehensive qos model specification computation covering various quality dimensions 
research carried order extend workflow system capabilities include project management features mainly done time dimension kao bussler eder panagos marjanovic orlowska dadam reichert marjanovic son kim dimensions workflow qos umbrella 
wfmss currently offer time management support technology available rudimentary eder panagos 
research workflow reliability issues conducted system implementation kamath alonso tang shrivastava 
crossflow project sch damen grefen aberer closely relates 
considers time cost associated workflow executions 
crossflow information past workflow execution collected log 
information continuous time markov chain ctmc derived 
markov chains directly support concept parallel executions introduced split structure power set parallel activities tasks inside split structure needs constructed 
small workflows computation power set affordable may case large workflows parallel nature power set reach millions states 
approach uses different concept compute quality service dimensions suffer exponential complexity 
reports comprehensive model specification workflow qos methods analyze monitor qos 
start investigating relevant qos dimensions necessary correctly characterize workflows 
target time dimension investigate dimensions required develop real usable workflow qos model 
qos associated dimensions selected necessary develop algorithms select methods compute qos 
workflows quality metrics associated tasks tasks compose workflows 
computation workflow qos done qos tasks compose workflow 
algorithm show workflow system coupled simulation system order predict qos 
key feature model qos workflow components tasks web services qos workflows 
furthermore test validity qos model deployed set production workflows area genetics 
executing instances workflow real data generated analyzed qos data 
term task workflow task corresponds traditional workflow task web service 
evident order model applied workflows tasks web service adhere qos model 
structured follows 
section describes workflow process illustrates real world scenario exemplify qos rest 
scenario set new requirements derived current limitations wfmss technology stated 
section introduce workflow qos model describe dimensions 
section describes quality service workflow tasks calculated 
section algorithm compute estimate workflow qos describe simulation techniques qos estimation 
section presents example compute qos workflow introduced initial scenario 
section discusses related qos area section presents workflow qos 
section presents 
scenario genome resource laboratory fgr university georgia realized competitive efficient adopt new modern information system infrastructure 
step taken direction adoption workflow management system meteor kochut sheth support laboratory processes hall miller 
laboratory supplies genome services customers adoption wfms enabled logic laboratory processes captured workflow schema 
result services available customers stored executed supervision workflow system 
workflow structure discussing scenario detail review basis elements meteor workflow model 
workflow composed tasks transitions 
tasks represented circle networks sub workflows rounded rectangles transitions represented arrow 
transitions express dependencies tasks associated enabling probability pn 
task outgoing transition enabling probability 
case probability omitted graph 
task outgoing transition classified split xor split 
split tasks enable outgoing transitions completing execution 
tasks enable outgoing transition completing execution 
split tasks represented xor split tasks represented 
task incoming transition classified join xor join 
join tasks start execution incoming transitions enabled 
xor join tasks executed soon incoming transitions enabled 
split xor split tasks join tasks xor join tasks represented symbol respectively 
symbol indicate input output logic task assumed xor 
workflow description genomic projects involve highly specialized personnel researchers sophisticated equipment specialized computations involving large amounts data 
characteristics human technological resources involved geographically distributed require sophisticated coordination infrastructure manage laboratory personnel equipment flow data generated 
services supplied research laboratory dna sequencing workflow 
simplified version dna sequencing workflow depicted 
complete description workflow appendix 
setup prepare sample prepare clones sequence assembly dna sequencing workflow workflow composed main tasks setup prepare sample prepare clone sequence assembly get sequences sequence processing process report 
individual task carries particular function necessary workflow spread multiple research centers 
setup task responsible initializing internal variables workflow process 
second task prepare sample consists isolating dna biological sample 
samples prepared variety protocols 
protocols need followed rigorously order obtain dna degraded form 
correctly prepared sample originate better dna sequencing quality dna template critical factors dna sequencing 
task prepare clones sequence clones specific regions genome dna isolated previous step 
step fully automated computer control example robotic system 
task executes sequencing uses dna test quality get sequences sequence processing proces report sequencing machines read biochemical letter cloned dna fragment 
output composed short decoded segments sequence 
automated sequencers revolutionized field bioinformatics enabling scientists catalogue sequence information hundreds times faster possible pre existing scanning techniques 
new approach allows automatic recognition major human intervention 
assembly task analyzes dna segments generated sequencing task 
step includes assembly larger contiguous blocks sequences dna small overlapping fragments 
complicated fact similar sequences occur times places genome 
test quality task screens escherichia coli coli dna contigs 
clones grown bacterial hosts contaminated 
quick effective way screen coli compare dna sequence coli genome 
coli task easier availability full genome 
get sequences simple task downloads sequences created assembly step ftp protocol 
sequence processing task analyzes dna segments generated assembly step 
goal task find dna sequences order identify macromolecules related structures functions 
new dna sequence compared repository known sequences swiss prot genbank number computational biology applications comparison 
obtaining desired data sequence processing task results stored mailed report created 
process report task stores data generated previous task database creates final report 
responsible electronically mailing sequencing results persons involved process researchers lab technicians 
workflow application requirements normal operation genome resource laboratory executes dna sequencing workflow regular manner 
workflow instances started order render sequencing services 
scenario current workflow technology execution workflow instances carried quality service management important parameters delivery deadlines fidelity quality reliability cost service 
laboratory wishes able state detailed list requirements service rendered customers 
requirements include final report delivered weeks specified customer nih 
profit margin 
example customer pays sequencing execution dna sequencing workflow cost laboratory 
error rate task prepare clones sequence data quality task sequence processing 
situations client may require urgent execution dna sequencing 
workflow exhibit high levels reliability workflow failures delay sequencing process 
requirements genetic workflow application underline nonfunctional requirements time cost fidelity reliability 
specification quality requirements important current wfmss include functions delineate specification management 
current wfmss limitations lack mechanism specify workflow qos current limitation wfmss 
missing element workflow qos model defined additional components need developed estimation algorithms methods monitoring tools mechanisms control quality service 
development integrated solutions composed modules specification estimation monitoring control result sophisticated quality management framework 
objectives functionalities module include quality service model developed allow specification workflow quality service qos metrics 
model allows suppliers specify duration quality cost fidelity services products delivered 
specifications set design time designers build workflow applications adjusted run time 
algorithms methods developed estimate quality service workflow instances started instance execution 
estimation qos instantiation allows suppliers ensure workflow processes executed exhibit quality service requested customers 
analysis workflow qos instance execution allows workflow systems constantly compute qos metrics register deviations initial requirements 
tools available monitor quality service running workflow instances 
workflow users managers need receive information qos status possible deviations desired metrics occur 
scenario assume unknown reason matching factor dna sequencing data drops threshold expressed customer 
matching factor reflects degree similarity query sequence probe compared subject sequence stored sequence database 
workflow qos monitoring tools automatically detect variation fidelity automatically notify interested users 
mechanisms available control quality service workflow instances 
control necessary instances behave initial requirements 
consider example workflow instances running correctly quality service specifications followed task fails 
task prepare clone sequence stops processing associated machines mechanical problem 
consequence workflow qos specifications time longer satisfied wfms raises warning alert exception 
faulty task needs replaced equivalent task restore soundness system 
replacement accomplished applying dynamic changes workflow instances manually automatically cardoso luo 
areas research important indispensable adequate quality service management focus specification estimation monitoring workflow qos 
workflow quality service stated earlier quality service important issue workflow systems 
international quality standard iso part iso iso describes quality totality features characteristics product service bear ability satisfy stated implied needs definition implies relation characteristics products services rendered initial requirements implied needs 
opinion definition quality includes important relationship requirements characteristics relevant applicable domain wfmss 
workflow qos represents quantitative qualitative characteristics workflow application necessary achieve set initial requirements 
workflow qos addresses non functional issues workflows workflow process operations 
quantitative characteristics evaluated terms concrete measures workflow execution time cost suggests dimensions time cost quality constitute criteria workflow systems include benefit 
qualitative characteristics specify expected services offered system security fault tolerance mechanisms 
qos seen integral aspect workflows integrated workflow specifications 
step define workflow qos model 
workflow qos model quality service characterized various dimensions 
investigated related decide dimensions relevant compose qos model 
research targeted distinct areas operations management organizations quality service software systems 
study areas important workflow systems widely model organizational business processes workflow systems software systems 
organizational side stalk hout 
investigated features successful companies assert competitive world markets 
results indicated success related capability compete organizations essential pillars time cost quality 
dimensions major concern organizations 
associates dimensions quality including performance reliability 
software systems quality service extensively studied 
major contributions areas networking cruz georgiadis guerin real time applications clark shenker middleware zinky bakken schlichting 
middleware systems set practical dimensions distributed object systems reliability performance include ttr time repair ttf time failure availability failure masking server failure 
data networks qos generally focus domain specific dimensions bandwidth latency jitter loss nahrstedt smith 
past deploying workflow applications aware need workflow process qos management 
additionally realized workflow processes particular set requirements domain dependent need accounted creating qos model 
previous studies experience workflow domain constructed qos model composed dimensions time cost reliability fidelity 
weikum information services qos divided categories system centric process centric information centric 
model specifies quality dimensions include system process categories 
qos specifications set task definitions 
information qos metrics computed workflows see section 
researchers identified need qos process model 
example daml specification ankolekar burstein daml semantically describes business processes composition web services 
semantic information facilitates process interoperability trading partners involved commerce activities 
specification includes constructs specify quality service parameters quality guarantees quality rating degree quality 
daml identified importance web services business processes specifications qos model adopted significantly improved order supply functional solution users 
current limitation daml qos model provide detailed set classes properties represent quality service metrics 
qos model needs extended allow precise characterization dimension 
addition semantic concepts minimum average maximum distribution function associated dimension allow implementation algorithms automatic computation qos metrics processes atomic tasks sub processes qos metrics 
task time time common universal measure performance 
workflow systems defined total time needed instance transform set inputs outputs 
philosophy time strategy usually demands businesses deliver value rapidly possible 
shorter workflow execution time allows faster production new products providing competitive advantage products rapidly introduced market 
additionally reducing time taken execute set tasks workflow process possible organization responsive customers needs 
important enhance wfms include time process execution 
measure time task response time 
task response time corresponds time instance takes processed task 
task response time broken major components delay time process time 
delay time dt refers non value added time needed order instance processed task 
includes example instance queuing delay setup time task 
metrics part task operation add value 
process time pt time workflow instance takes task processed words corresponds time task needs process instance 
task response time task computed follows dt pt delay time broken queuing delay setup delay 
queuing delay time instances spend waiting instance selected processing 
setup delay time instance spends waiting task set 
setup activities may correspond warming process carried machine executing operation execution self checking procedures 
time metric may considered integrate delay time synchronization delay corresponds time workflow instance waits mates join task synchronization 
qos model metric part task response time 
algorithm estimate workflow qos derive metric directly workflow structure task response time 
clear describe workflow qos computation 
task cost task cost represents cost associated execution workflow tasks 
cost important factor organizations need operate financial plan 
fundamental organizations wish reduce expenditures internal processes wish control product service cost 
workflow design prior workflow instantiation workflow execution necessary estimate cost execution order guarantee financial plans followed 
cost executing single task includes cost equipment cost human involvement supplies commodities needed complete task 
cost functions compute cost associated execution task 
task cost cost incurred task executed broken major components enactment cost realization cost 
ec rc enactment cost ec cost associated management workflow system workflow instances monitoring 
realization cost rc cost associated runtime execution task 
broken direct labor cost machine cost direct material cost setup cost 
direct labor cost cost associated person carrying execution workflow human task kochut sheth cost associated execution automatic task partial human involvement 
machine cost cost associated execution automatic task 
correspond cost running particular piece software cost operating machine 
direct material cost cost materials resources inventory execution workflow task 
setup cost cost set resource prior execution workflow task 
task reliability early workflow modeling krishnakumar sheth represented execution behavior task task structures 
workflow task structure initial state execution state distinct terminating states 
states indicates task failed non transactional tasks aborted transactional open pc tasks state indicates task done committed 
model represent task indicates starting point exists performing task different states reached execution 
task model structure introduce reliability dimension 
qos dimension provides information concerning relationship number times state done committed reached number times failed aborted state reached execution task 
task structures krishnakumar sheth task reliability corresponds likelihood components perform users demand function failure rate 
describe task reliability follow discrete time modeling approach 
selected solution workflow task behavior time characterized respect number executions 
discrete time models adequate systems respond occasional demands database systems discrete time domain 
dimension follows popular discrete time stable reliability models proposed nelson failure rate ratio successful executions scheduled executions 
failure rate table task reliability task wfms keeps track number times task scheduled execution times task successfully executed 
stable model software failure occurs fault removal performed 
alternatively continuous time reliability models failures malfunctioning equipment software expressed terms times failures terms number failures occurred time interval 
reliability models suitable workflows include tasks control equipment machines failure specifications determined manufacturer 
goel classified reliability models kinds input domain models times models failure count models fault seeding models 
jr 
presents software reliability models model qos dimension 
ideal situation associate workflow task reliability model representing working behavior 
possible believe common workflow system users knowledge expertise apply models 
task fidelity view fidelity function effective design refers intrinsic property ies characteristic produced service rendered 
fidelity reflects product produced service rendered 
fidelity difficult define measure subject judgments perceptions 
fidelity workflows predicted feasible carefully controlled needed 
workflow tasks fidelity vector dimension composed set fidelity attributes ar reflect quantify task operations 
fidelity attribute refers property characteristic product created transformed analyzed 
fidelity attributes workflow system compute workflows instances tasks meeting user specifications 
example test quality task checks fidelity attribute ae 
coli matching 
attribute reflects probability sample sequenced contaminated 
task associated fidelity function represents local normalized fidelity ai wi aj wi ak wi fn win formula weights fidelity attributes transformed appropriate values function fn normalized scale 
sum weights wik equal 
view fact humans feel awkward handling interpreting quantitative values tversky kahneman allow designer help domain expert map value resulting applying fidelity function qualitative scale miles huberman 
qualitative indicator detect areas workflow anomalies undesired behavior 
example mapping scale quantitative qualitative values shown table 
workflow designer responsible creation mapping table 
table created selecting set qualitative terms characterize fidelity 
qualitative terms may facilitate human understanding fidelity concept exhibited workflows cases 
qualitative fidelity quantitative fidelity unacceptable 
poor 
satisfactory 

perfect 
table example fidelity mapping table depending task type task uses different strategies set fidelity attributes 
scenarios drawn automatic tasks controlling hardware automatic tasks controlling software human tasks 
automated task controlling hardware device fidelity attribute set reading output status line device 
example task sequencing controls dna sequencing carried automatically sequencer 
sequencing finishes machine generates output files describe process executed 
values passed task automatically updates fidelity attributes 
automated tasks controlling software application procedure applied 
example task sequence processing executes various algorithms sequences received 
algorithms blast altschul gish 
algorithm searches dna sequences database identify macromolecules related structures functions 
search concluded algorithm returns value indicating confidence matching 
task returned value execution algorithm describe fidelity task execution 
human tasks procedure manual 
responsibility user manually input information relative fidelity task executed 
case task prepare sample lab technician sets fidelity attribute quality clones manually visual identification 
quality assurance reasons attributes set checked person carried task execution 
evaluating fidelity task accurately done human option place possible automatic task human task automatically check fidelity 
fidelity information effectively monitor workflow executions 
typically lifetime instance qualitative information describing task fidelity displayed graphical monitors tasks executed 
managers easily identify tasks exhibit unsatisfactory fidelity metrics 
qos model discussion popular workflow classifications distinguishes ad hoc workflows administrative workflows production workflows 
classification mentioned 
main differences types include structure predictability complexity degree automation 
recognize qos model better suited production workflows structured predictable repetitive 
production workflows involve complex highly structured processes execution requires high number transaction accessing different information systems 
characteristics allow construction adequate qos models workflow tasks 
case ad hoc workflows information behavior timing tasks largely unstructured procedure constructing qos model difficult complex 
creation qos estimates order facilitate analysis workflow qos necessary initialize task qos metrics initialize stochastic information indicates probability transitions fired runtime 
tasks transitions estimates set algorithms mechanisms simulation applied compute workflow qos 
qos estimates tasks having previously defined qos dimensions tasks target estimation qos metrics tasks 
specification qos metrics tasks design time re computed runtime tasks executed 
graphical construction workflow process designer sets qos estimates task 
estimates characterize quality service tasks exhibit runtime 
setting initial qos metrics workflow tasks may relatively simple 
example setting qos task controlling dna sequencer done time cost reliability specifications manufacturer dna sequencer 
cases setting initial qos metrics may prove difficult 
case tasks heavily depend user input system environment 
tasks convenient study workflow task real operations 
estimates data collected testing task 
idea test task specific inputs 
achieved elaboration operational profile musa 
operational profile input space partitioned domains input associated probability selected operational 
probability employed input domain guide input generation 
density function built probabilities called operational profile task 
runtime tasks probability associated input 
musa described detailed procedure developing practical operational profile testing purposes 
task runtime behavior specification composed classes information table basic distributional 
basic class associates task qos dimension minimum value average value maximum value dimension take 
example cost dimension corresponds minimum average maximum cost associated execution task 
second class distributional class corresponds specification constant distribution function exponential lognormal normal rayleigh time independent weibull uniform statistically describes task behavior runtime 
example table table show qos dimensions automatic task sp fasta task manual task prepare sample task see section tasks descriptions 
basic class distributional class min value avg value max value dist function time normal cost reliability fidelity ai trapezoidal table task qos automatic task basic class distributional class min value avg value max value dist function time normal cost reliability fidelity ai table task qos manual task values specified basic class typically employed mathematical methods order compute workflow qos metrics distributional class information simulation systems compute workflow qos 
devise values classes designer typically applies functions previous section derive task qos metrics 
recognize specification time cost fidelity reliability complex operation carried properly lead specification incorrect values 
additionally initial specification may remain valid time 
overcome difficulty task qos values periodically re computed basic class previous executions 
distributional class may need distribution re computed 
runtime workflow system keeps track actual values qos dimensions monitored 
qos runtime metrics saved re compute qos values basic class specified design time 
workflow system re computes qos values dimension allows system accurate estimations instance executions 
re computation qos task metrics data coming designer specifications workflow system log 
scenarios occur specific task particular dimension dim average calculated information introduced designer designer average average task dimension calculated executions independently workflow executed multi workflow average average dimension dim calculated times task executed instance workflow workflow average average dimension times task executed instance workflow instance average 
scenario occur loops exist workflow 
averages described table computed runtime available workflow system 
table shows compute average metrics similar formulae compute minimum maximum values 
designer averagedim average specified designer basic class dimension dim multi workflow averagedim average dimension dim task executed context workflow workflow averagedim average dimension dim task executed context instance workflow instance averagedim average dimension dim task executed context instance workflow table designer multi workflow workflow instance average task qos particular dimension determined different levels computed equations described table 
designer averagedim wi designer averagedim wi multi workflow averagedim wi designer averagedim wi multi workflow averagedim wi workflow averagedim wi designer averagedim wi multi workflow averagedim wi workflow averagedim wi instance workflow averagedim table qos dimensions computed runtime workflow system uses formulae table predict qos tasks 
weights wij set manually 
reflect degree correlation workflow analysis workflows set common tasks shared 
values entered designer may contain extraneous data imprecise bayesian approach bernardo smith considered prior knowledge order improve accuracy weights wij 
assume instance workflow running desire predict qos task rules choose formula apply predicting qos 
task executed formula chosen predict task qos data available 
task executed previously context workflow wn wn formula chosen 
case assume execution workflow wn give indication behavior workflow task previously executed context workflow instance formula chosen 
task previously executed context workflow instance meaning loop executed formula 
probabilities estimates transitions way seed tasks qos need seed workflow transitions 
initially designer sets transition probabilities design time 
runtime transitions probabilities re computed 
method re compute transitions probabilities follows lines method re compute tasks qos 
workflow executed values transitions obviously taken initial designer specifications 
instances workflow executed data re compute probabilities come initial designer specifications workflow executed instances workflow available instance workflow wish predict qos 
corresponds functions similar ones previously defined tasks qos see table 
qos computation qos estimates tasks transitions determined compute workflow qos 
describe modeling techniques compute qos metrics workflow process mathematical modeling simulation modeling 
selection method tradeoff time accuracy results 
mathematical method computationally faster yields results may accurate results obtained simulation 
note mathematical models extended queuing network models lazowska requires making simplifying assumptions 
mathematical modeling stochastic workflow reduction method consists applying set reduction rules workflow atomic task kochut sheth exists 
time reduction rule applied workflow structure changes 
iterations task remain 
state reached remaining task contains qos metrics corresponding workflow analysis 
set reduction rules applied workflow corresponds set inverse operations construct workflow 
decided allow construction workflows set predefined construction systems protects users designing invalid workflows 
invalid workflows contain design errors non termination deadlocks split instances aalst 
prove workflow graph reduced proposed set reduction systems accomplished proving reduction systems form finite church rosser transformation 
graph reduction allen knuth 
compute qos metrics developed swr algorithm cardoso uses set distinct reduction rules sequential parallel conditional fault tolerant loop network 
additional reduction rules developed 
decided reduction concept reduction rules reasons 
reason vast majority workflow systems support implementation reduction rules 
study fifteen major workflow systems workflow patterns support aalst barros fifteen workflow systems studied supported reduction rules supported reduction rule supported reduction rules 
study discuss network patterns 
network pattern intended provide structural hierarchical division workflow design levels order facilitate understanding grouping related tasks functional units 
second reason reduction rules simple making easy understand idea workflow reduction process 
reduction systems reduction sequential system 
illustrates sequential workflow tasks ti tj reduced single task tij 
reduction incoming transitions ti outgoing transition tasks tj transferred task tij 
sequential system reduction sequential system pj 
reduction applied conditions satisfied ti xor split tj xor join 
conditions prevent reduction applied parallel conditional loop systems 
compute qos reduction formulae applied tij ti tj tij ti tj tij ti tj tij ar ti tj reduction parallel system 
illustrates system parallel tasks tn split task ta join task tb reduced sequence tasks ta tb 
reduction incoming transitions ta outgoing transition tasks tb remain 
outgoing transitions task ta incoming transitions task tb ones shown 
probabilities pa pa pnb equal 
ij pa pb parallel system reduction qos tasks ta tb remain unchanged pb 
compute qos reduction formulae applied maxi ti ti ti 
ar tn reduction conditional system 
illustrates system conditional tasks tn xor split task ta xor join task tb reduced sequence tasks ta tb 
task ta task tb outgoing transitions incoming transitions respectively ones shown 
reduction incoming transitions ta outgoing transition tasks tb remain pai 
nb pa pb nb conditional system reduction formatted po formatted po formatted po qos tasks ta tb remain unchanged pb 
compute qos reduction formulae applied pai ti pai ti pai ti ar pa pa pan tn reduction loop system 
loop systems characterized simple dual loop systems 
illustrates simple loop system reduced 
simple loop system task ti reduced task tli 
reduction pi poi 
reduction applied probabilities outgoing transitions task tli ok changed plk plk 
ti simple loop system reduction compute qos reduction formulae applied tli tli tli ti pi ti pi ti tli ar pi ti li ln illustrates dual loop system reduced 
dual loop system composed tasks ti tj reduced single task tij 
reduction pi poi 
reduction applied probabilities outgoing transitions task tij ok changed plk plk 
dual loop system reduction compute qos reduction formulae applied tij tij ti tij tij ar ti pj tj reduction fault tolerant system 
illustrates fault tolerant system tasks tn split task ta xor join task tb reduced sequence tasks ta tb 
execution fault tolerant system starts execution task ta ends completion task tb 
task tb executed tasks set tn executed successfully 
reduction incoming transitions ta outgoing transition tasks tb remain 
pai pib 
ij ln formatted po fault tolerant system reduction qos tasks ta tb remain unchanged pa nb 
compute qos reduction formulae applied min ti 
ar pa pa pan tn function min selects minimum value set function defined followed formula utilized compute reliability corresponds sum probabilistic states tasks execute successfully 
summation corresponds generation binary sequence represents failing task represents success 
example fault tolerant system parallel tasks values indexes represent probabilistic state tasks succeed task fails 
term indicate probabilistic state considered reliability computation 
probabilistic state considered number tasks succeeding greater equal pa pa nb nb equivalently 
previous example probabilistic state considered reduction network system 
network task represents sub workflow 
viewed black box encapsulating unknown workflow realization certain qos 
network task ns having task ti replaced atomic task tj 
reduction applied qos task ti known 
replacement qos atomic task tj set workflow qos task ti tj ti 
network system reduction input output transitions network task ns transferred atomic task tj 
time cost reliability fidelity computations time cost 
operations compute time cost dimensions fairly intuitive 
reliability 
reliability dimension concepts system software reliability theory jr musa 
reliability functions applying workflow reduction systems assume tasks behave independently 
assumption widely employed modeling hardware systems considered inappropriate software systems tend violate independence supposition individual software systems 
mason show application structure influence dependability derived reliability components 
presents theory set rules applied construction application result systems violate underlying assumptions typical reliability models system independence 
order understand dependence software components necessary understand difference terms uses invokes parnas parnas 
utilization methodology creates dependency modules procedures 
module calls module state depends results invokes methodology problem arise module calls module module wait depend execution results 
observation mason state reduce dependence modules system application uses methodology interconnect components invokes methodology 
additionally module implementation details affect correctness modules system state independence 
architecture workflow systems directly follows points allow reduction task dependencies 
workflow systems orbwork kochut sheth message passing architecture exhibit invokes characteristics 
additionally tasks independent implementation point view state independent 
due architecture typical wfmss workflow applications reduced dependency factor tasks assumption dependencies ignored cases 
tasks exhibit strong dependencies due data transferred profiling approach may need considered 
hamlet 
proposed operational profiles passed connected components effectively compute reliability global system 
fidelity 
time cost reliability common universal measurements fidelity function effective design refers intrinsic property ies characteristic produced task realization 
fidelity fully depends intrinsic properties characteristics goods produced universal measurement 
means reduction rule previously possible specify general universal formula compute fidelity 
reduction system network systems fidelity attribute specific formula needs specified 
example swiss watchmaker tag heuer conducts series tests watches manufacturing process 
specific tasks carry tests placed strategic locations process 
testing task fidelity attribute associated represents number tests passed task executed 
case fidelity function specified sequential reduction rule tij anumber tests passed ti tj vx vy vx anumber tests passed vy anumber tests passed example function additive simply adds number tests passed task 
cases function multiplicative similar functions employed compute metrics reliability dimension 
responsibility designer set fidelity attribute involved workflow fidelity functions computing workflow qos 
designer select function available sets fidelity functions specifically constructed match particular domain requirements 
alternatively functions needed due specificity designer manually define new functions meet requirements 
simulation modeling order follow organizational strategies meet organizational goals workflow systems need able analyze workflows qos 
mathematical methods effectively see previous section alternative utilize simulation analysis miller cardoso 
simulation play important role tuning quality service metrics workflows exploring questions 
need adapt change workflow detected deciding changes carry difficult 
change possible effects explored simulation 
facilitate rapid feedback workflow system simulation system need interoperate 
particular workflow specification documents need translated simulation model specification documents new model executed animated fly 
project capabilities involve loosely coupled integration meteor wfms simulation system nair miller miller nair miller 
workflow concerned scheduling transformations take place tasks simulation mainly concerned system performance 
modeling purposes workflow abstractly represented directed graphs control flow data flow 
models represented directed graphs interoperation facilitated 
order carry simulation appropriate workflow model retrieved repository translated simulation model specification 
simulation model displayed graphically executed animated 
statistical results indicate workflows qos collected displayed 
order simulate meteor workflows enhancing web simulation system 
simulation entities flow digraph consisting types nodes 
source produces entities random times server provides service entities facility inherits server adds waiting queue signal alters number service units server sink sink consumes entities records statistics table nodes nodes connected transports move entities node 
edges provide smooth motion entities simulation model animated 
edges labeled branching probabilities 
mapping workflow digraph simulation digraph straightforward 
meteor start task mapped source sink node respectively 
meteor human task mapped facility number service units equal number human participants carrying task feeding worklist 
meteor transactional non transactional task mapped facility number service units equal number processors available execute task 
default mappings customized task allow requests queued mapped server 
edge meteor digraph mapped corresponding edge digraph 
meteor edges labeled data type objects flowing edge 
case xor nodes labeled boolean expressions 
evaluates true edge selected 
current version data flow handled custom coding 
boolean expression mapped probability condition evaluate true preceding conditions evaluate true 
details mapping workflow specifications simulation models specifications see 

workflow qos metrics interest section list workflow qos metrics interest compute table table 
computation done design time runtime 
design time qos computations help designer compose workflows exhibit qos metrics accord initial requirements 
runtime computation qos allows manager administrator identify workflow instances ceased meet initial qos requirements 
situation may occur tasks fail break necessary services unavailable 
metrics automatically computed swr algorithm 
workflow time workflow monitor records total time workflow instances spend process 
workflow process executed instances enter process proceed various tasks exit workflow process 
example scenario dna sequencing time constraint completed weeks 
wfms needs constantly monitor estimate time remaining instance termination 
table show important measurements workflow time execution workflow response time workflow delay time minimum workflow response time workflow response time efficiency 
workflow qos metrics time workflow response time swr workflow response time total amount time workflow instance spends workflow process finishes 
response time workflow equal sum response times individual tasks time tasks superimposed 
tasks superimpose response time executed parallel 
workflow delay time dt dt dt swr workflow delay time called waiting time total amount time workflow instance spends workflow processed task 
average delay time workflow equal sum delay times individual tasks time tasks superimposed 
minimum workflow response time min min min swr minimum workflow response time called service time workflow time required workflow instance processed accounting task delay time 
includes task response time ignoring completely impact task delay time 
minimum workflow response time equal sum process time individual tasks time tasks superimpose 
workflow response time efficiency min workflow response time efficiency ratio minimum workflow response time workflow response time 
instructive compare measures instance efficiency measurement provides indication time instance delayed execution indicates degree workflow process improved reducing response time 
table workflow qos metrics time dimension workflow cost reliability fidelity workflow qos metrics cost reliability fidelity workflow cost swr workflow cost analysis measures cost incurred execution workflow 
workflow process executed various tasks associated costs executed 
cost workflows need associated cost calculated managers sure operations initial budgets 
workflow reliability swr workflow reliability corresponds likelihood workflow perform users demand 
workflow fidelity attribute attribute swr workflow fidelity function effective design refers intrinsic properties characteristics produced service rendered 
table workflow qos metrics cost reliability fidelity dimension workflow qos computation example genome resource fgr laboratory process reengineering workflows 
laboratory technicians domain experts managers agreed alteration prepare sequence sequence processing workflows potentially beneficial sequencing dna 
prepare sequence workflow sequence processing workflow improve efficiency processes managed workflow system bioinformatics researchers decided merge processes 
researchers noticed quality dna sequencing obtained cases useless due coli contamination 
additionally felt advantageous algorithms sequence processing phase 
improve quality process test quality task sp fasta task added 
clones grown bacterial hosts contaminated 
quick effective way screen escherichia coli coli compare clones coli genome 
coli task easier availability full genome 
task sp fasta objective task sp blast task sequence processing sub workflow 
tasks compare new dna sequences repository known sequences swiss prot genbank 
objective find sequences homologous relationships assign potential biological functions classifying sequences functional families 
sequence comparison methods suffer certain limitations 
consequently advantageous try comparison algorithm sequence processing phase 
reason decided employ blast altschul gish fasta pearson lipman programs compare sequences 
actions taken reengineer existing workflows merge prepare sequence workflow sequence processing workflow add task test quality test existence coli sequences execute search sequences genome databases additional search algorithm fasta 
point alterations introduce processes identified 
functional perspective lab personnel domain experts workflow designer agreed new workflow accomplish intended objective 
new reengineered workflow named dna sequencing 
illustrated 
setting qos metrics dna sequencing workflow workflow design meets functional objectives non functional requirements need met 
prior execution new workflow analysis necessary guarantee changes introduced produce workflow meets desired qos requirements workflow time cost reliability fidelity remain acceptable thresholds 
accomplish necessary analyze qos metrics swr algorithm cardoso cardoso compute workflow quality service metrics 
step gather qos estimates tasks involved prepare sequence sequence processing workflows 
workflows executed times past workflow system recorded qos metrics 
designer qos estimates set methods 
omitted designer qos specification distributional class experiment involve simulation system compute predict qos metrics 
human tasks laboratory technicians researchers provided estimates qos dimensions 
automated tasks training sets 
example sp blast task constructed training set sequences different lengths 
sequences processed blast qos recorded 
time dimension linear regression predict metrics blast algorithm linear running time altschul gish 
equation estimate blast running time process sequence xy bx bx independent data input size dependent data running time 
estimated function defined bx 

task fidelity function sp blast task 
fidelity attribute hits indicates percentage sequences processed value lower value indication probability match query sequence sequence stored database occurred chance 
close matches number typically small 
blast hits percentage sequences new tasks introduced test quality sp fasta qos runtime information available 
qos information compute workflow qos designer specified design time 
initial qos estimates shown table 
designer specifications tasks quality test sp fasta table test quality fasta initial qos estimates sp fasta task automated task training set sequences derive set designer qos estimates 
time dimension linear regression equation defined function represented equation estimate duration fasta linear running time pearson lipman 
bx 

sp blast task fidelity function utilized characterize quality results obtained task sp fasta tsp fasta hits percentage sequences generally value statistically significant value borderline 
workflow qos computation possible fidelity dimension formulae defined reduction systems 
example parallel systems hits fidelity attribute function defined hits tn 

hits tasks fidelity attribute hits formula dna sequencing workflow result application function tsp blast fasta hits tsp blast hits tsp fasta hits function represents possible computation hits fidelity attribute 
shown solely objective illustrating fidelity attributes computed 
additional studies fasta blast applications give information processing sequences precise definition function 
computing qos metrics domain experts believe strong agreement tasks qos exhibited execution prepare sequence sequence processing workflows expected qos tasks scheduled dna sequencing workflow 
belief fact tasks executed initial workflows executed change newly constructed workflow 
functions see table utilized re compute qos metrics designer runtime information designer averagedim multi workflow averagedim designer averagedim multi workflow averagedim workflow averagedim table re computation qos dimensions dna sequencing workflow represent qos agreement tasks different workflows domain experts decided set weights beliefs 
formula domain experts believe recorded qos tasks previously executed give estimates execution tasks scheduled new workflow 
experts set weights wi wi formula respectively 
domain experts believe soon tasks scheduled new workflow qos estimates rely latest qos data recorded dna sequencing workflow 
consider qos data available dna sequencing workflow importance designer estimates influence qos estimates recorded execution tasks scheduled workflows dna sequencing 
formula experts set weights wi wi wi respectively 
experiments predict workflow qos metrics execution workflow workflow execution set weights formula table 
new workflow loop exist previously executed workflows necessary estimate probability transition test quality prepare sample enabled runtime 
prior knowledge sequencing experiments researchers calculate approximately dna sequence contain coli bacteria probability loop back transition enabled 
results run set experiments 
experiment involved execution swr algorithm predict qos metrics dna sequencing workflow actual execution workflow 
results shown qos dimensions 
diamonds indicate qos estimates swr algorithm squares indicate runtime metrics 
time hours fide time analysis instance fidelity analysis instance experiment results cost analysis time analysis relevant information interpreted chart observation instances registered actual running times cost reliability instance reliability analysis instance considerably different values estimated 
due topology workflow 
process expected dna sequences contain coli contamination 
happens re needed part workflow involving tasks prepare sample prepare clone sequence assembly re executed 
part workflow takes approximately workflow execution time 
coli contamination sequence time needed execute workflow doubles 
impossible know dna sequence contain coli swr algorithm gives estimate instance significantly different registered values 
instance executed qos metrics previous instance considered qos estimation 
result seen chart swr estimation converges mean time metrics recorded 
instances detect presence coli contamination results swr algorithm time dimension gradually converge hours level 
instances number executed detect presence contamination sequences processed 
result swr estimates accurate estimates start slowly converge lower time values 
costs associated task provided technical describing dna sequencing process 
cost analysis results observed strongly linked results obtained time analysis 
instances recorded actual costs considerably different values estimated 
due existence coli contamination sequences processed 
contamination detected re necessary carry sequencing double cost instance 
cost instance totally determined tasks prepare sample prepare clone sequence assembly involved necessary re 
tasks mainly automated software tasks considered zero cost 
time analysis convergence swr algorithm registered metrics seen 
particularity dna sequencing workflow discrete linearity cost 
re necessary contamination detected cost instance contamination re needed cost instance 
contamination times sequencing process cost instance nc 
property cost dimension observed chart instances re cost instances need reworking time cost 
fidelity analysis shows creation estimates 
seen swr algorithm constantly changes convergence response recorded qos metrics 
runtime fidelity metrics small range predicted estimates 
reliability analysis relatively easy interpret 
instance executed swr algorithm information specified designer derived task executions prepare sequence sequence processing workflows 
information suggests reliability new workflow design 
experiments instances executed failed 
reliability value registered workflow instance 
instance executions reliability estimates swr algorithm slowly converge 
expected workflow system executes instances reliability dna sequencing workflow decrease 
qos dimensions degree convergence swr algorithm directly dependent weights set re computation qos dimensions see table weights dna sequencing workflow 
higher weight associated multi workflow function implies faster convergence swr algorithm applied 
principal applies instance workflow function 
related literature quality service wfms limited 
crossflow project sch damen grefen aberer major contribution 
approach continuous time markov chain ctmc subsequently calculate time cost associated workflow executions 
research quality service wfms limited research time management umbrella workflow qos active productive 
eder 

extension cmp pert annotating workflow graphs time order check validity time constraints process build time instantiation time take pre emptive actions run time 
major limitation approach directed acyclic graphs dag modeled 
significant limitation workflows cyclic graphs 
cycles general represent re actions repetitive activities workflow 
approach deals acyclic workflows cyclic workflows 
experience modeling real world applications shown significant number workflows cyclic graphs 
dadam 
reichert dadam recognize time important aspect workflow execution 
workflow task minimal maximal durations may specified 
system supports specification monitoring deadlines 
monitoring system notifies users deadlines going missed 
checks minimal maximal time distances tasks followed initial specifications 
marjanovic orlowska describe workflow model enriched modeling constructs algorithms checking consistency workflow temporal constraints 
mainly focuses manage workflow changes accounting temporal constraints 
son 
solution deadline allocation problem queuing networks 
uses graph reduction techniques applied queuing theory 
studies workflow reliability literature 
research mainly concentrated system implementation issues 
kamath alonso authors propose architecture enhance workflow systems reliability replication 
different reliability levels different categories process instances 
tang propose fragmentation technique provide higher reliability replication solution 
shrivastava describe workflow system relies middleware infrastructure provide fault tolerant execution environment enhancing system applications reliability 
quality service workflows lacking significant amount research done areas networking cruz georgiadis guerin real time applications clark shenker middleware zinky bakken schlichting 
area web services researchers manifested interest qos 
daml ankolekar burstein daml specification allows semantic description business processes 
specification includes constructs specify quality service parameters quality guarantees quality rating degree quality 
current limitation daml qos model process needs qos metrics specified user 
workflow qos model extended additional dimensions useful workflow systems stronger requirements 
dimension maintainability 
maintainability corresponds mean time necessary repair workflow failures average time spent maintain workflows condition perform intended function 
maintenance actions mainly involve correction failures workflow execution 
workflow systems record period time necessary faulty task repaired 
time spent repair workflow component depends type error occurred 
actions simple restarting workflow scheduler crashed kochut sheth complex involving installation orb infrastructure new machine transfer workflow schedulers example 
increase maintainability advanced mechanisms developed allow workflow systems automatically recover errors 
luo 
describe architecture implementation exception handling mechanism 
system detects propagates exceptions occur instances execution exception handling module 
system case reasoning theory derives exception handlers repair damaged workflows luo sheth 
system ability adapt time 
knowledge acquired past experiences resolution new problems 
second dimension included trust dimension 
workflow systems coordinate manage web services development techniques global security level workflows specifications 
workflow systems applications face security problems dedicated mechanisms needed increase level security 
major problems include distributed nature wfmss non secure networks internet web servers access workflow systems data potential multi organizational span workflows 
systems security level assessed existence security mechanisms authentication access control labels audits system integrity security policy development techniques formal specifications formal proofs tests 
importance developing secure workflow systems recognized prototypes combining workflow security technology developed 
extended workflow technology implementation security modules 
miller fan fan describes workflow security architecture targets security services authentication access control data confidentiality data integrity non repudiation recommended international standards organization network information systems 
second kang describes multilevel secure mls workflow system enable distributed users workflow applications cooperate classification levels 
mls workflow systems allow users program multilevel mission logic securely coordinate distributed tasks monitor progress workflow classification levels 
functions compute qos dimensions runtime table terms weighted 
user responsible setting weights wi wi wi wi 
weights remain constant workflow system registers new workflow executions 
additional research useful analyze effect substituting constant weights variable weights 
idea allow workflow system automatically change weights number workflow executions 
instances registered workflow weights specified designer multi workflow functions decreased weight associated workflow function increased 
corresponds belief time qos metrics instances workflow give accurate fresh data swr algorithm 
bayesian estimates bernardo smith solutions investigated enable automatic adjustments weights 
evaluation business conducted commerce brings new set challenges requirements need explored answered 
commerce applications composed web services forming workflows turns represent abstraction cross organizational business processes 
workflows workflow systems conduct coordinate businesses heterogeneous distributed environment immediate operational requirement management workflow qos 
composition web services workflows undertaken ignoring importance qos measurements 
trading agreements suppliers customers include specification qos items products services delivered deadlines quality products cost service 
correct management qos specifications directly impacts success organizations participating commerce directly impacts success evolution ecommerce 
starting point show importance qos management workflows wfmss 
comprehensive qos model 
model allows description workflow components qos perspective includes dimensions time cost reliability fidelity 
qos increases added value workflow systems organizations non functional aspects workflows described 
model predictive 
qos workflow components tasks web services qos workflows networks automatically computed 
feature important especially large processes cases may contain hundreds tasks 
mathematical model formally describes formulae compute qos metrics workflow tasks 
formulae developed algorithm swr algorithm automatically compute qos workflow 
algorithm applies set reduction rules workflow task remains represents qos entire workflow 
describe simulation system workflow system carry efficient workflow qos simulations 
test validity qos model mathematical model deployed set production workflows area genetics genome resource laboratory 
executed workflow instances real data generated qos data collected analyzed 
analysis data corroborates initial hypothesis qos model mathematical model give suitable framework predict analyze qos production workflows 
aalst 

generic workflow models handle dynamic change capture management information 
proceedings fourth ifcis international conference cooperative information systems coopis edinburgh scotland ieee computer society press 
pp 

aalst barros hofstede 
workflow patterns homepage 
tm tue nl research patterns 
allen 

control flow analysis 
notices 
altschul gish miller myers lipman 
basic local alignment search tool 
journal molecular biology 
ankolekar burstein hobbs lassila martin mcilraith narayanan paolucci payne sycara zeng 
daml semantic markup web services 
proceedings international semantic web working symposium swws 
sheth miller kochut 
healthcare enterprise process development integration 
technical report lsdis lab department computer science university georgia athens ga bernardo smith 
bayesian theory wiley 
bussler 

workflow instance scheduling project management tools 
th workshop database expert systems applications dexa vienna austria ieee computer society press 
pp 

capa 
course approval process automation capa lsdis lab department computer science university georgia athens ga july june 
cardoso 

stochastic workflow reduction algorithm 
lsdis lab department computer science university georgia lsdis cs uga edu proj meteor qos swr algorithm htm 
cardoso 

workflow quality service semantic workflow composition 
ph dissertation 
department computer science university georgia athens ga cardoso luo miller sheth kochut 
survivability architecture workflow management systems 
proceedings th annual acm southeast conference athens ga pp 

silver miller cardoso sheth 
composite web service performance evaluation simulation 
proceedings winter simulation conference san diego california progress 
chen dayal hsu griss 
dynamic agents workflow xml commerce automation 
ec web 
pp 

clark shenker zhang 
supporting real time applications integrated services packet network architecture mechanism 
proceedings acm sigcomm 
pp 

cruz 

quality service guarantees virtual circuit switched networks 
ieee select 
areas commun 

dadam reichert kuhn 
clinical workflows killer application process oriented information systems 
th international conference business information systems bis poznan poland 
pp 

damen 
business business commerce logistics domain 
caise workshop infrastructures dynamic business business service outsourcing stockholm 
daml 
technical overview white describing key elements daml 
eder panagos rabinovich 
time management workflow systems 
bis rd international conference business information systems poznan poland springer verlag 
pp 

fan 

security meteor workflow management system 
sc 
thesis 
department computer science university georgia athens ga fensel bussler 
web service modeling framework 
vrije universiteit amsterdam vu oracle www cs vu nl dieter ftp wsmf pdf 
fgr 
genome resource laboratory gene genetics uga edu 


advanced quality function deployment 
boca raton fl st press 

quality service specification distributed object systems 
distributed systems engineering journal 


managing quality strategic competitive edge 
new york free press 
georgiadis guerin peris 
efficient network qos provisioning node traffic shaping 
ieee acm transactions networking 
german michael weikum 
xml enabled workflow management services heterogeneous platforms 
vldb 
goel 

software reliability models assumptions limitations applicability 
ieee transactions software engineering 
grefen aberer ludwig 
crossflow cross organizational workflow management dynamic virtual enterprises 
international journal computer systems science engineering 
hall miller arnold kochut sheth weise 
workflow build information management system geographically distributed genome sequence initiative university georgia department computer science lsdis lab athens ga technical report 
hamlet mason 
theory software component reliability 
rd international conference software engineering icse 
pp 

schlichting wong 

survivability customization adaptability cactus approach 
darpa information survivability conference exposition discex 
pp 


system reliability theory models statistical methods wiley john sons incorporated 
jr moss 
handbook reliability engineering management 
new york mcgraw hill 
iso 
iso 
international organization standardization www iso ch iso en iso iso iso index html 
kamath alonso mohan 
providing high availability large workflow management systems 
proceedings th international conference extending database technology avignon 
pp 

kang sheth kochut miller 
multilevel secure workflow management system 
proceedings th conference advanced information systems engineering heidelberg germany springer 
pp 

kao 
deadline assignment distributed soft realtime system 
proceedings th international conference distributed computing systems 
pp 

sch aberer 
deriving service models cross organizational workflows 
proceedings ride information technology virtual enterprises ride sydney australia 
pp 

knuth 

empirical study fortran programs 
software practices experience 


workflow strategies idg books worldwide 
kochut sheth miller 
orbwork corba fully distributed scalable dynamic workflow enactment service meteor large scale distributed information systems lab department computer science university georgia athens ga 

creating quality concepts systems strategies tools 
new york mcgraw hill 
krishnakumar sheth 
managing heterogeneous multi system tasks support enterprise wide operations 
distributed parallel databases journal 
lazowska graham sevcik 
quantitative system performance computer system analysis queueing network models prentice hall 
leymann 

web services flow language wsfl 
ibm software group www ibm com software solutions webservices pdf wsfl pdf 
luo 

knowledge sharing coordinated exception handling intelligent problem solving support cross organizational business processes 
ph dissertation 
department computer science university georgia athens ga luo sheth miller kochut 
defeasible workflow computation exception handling 
proceedings computer supported cooperative cscw adaptive workflow systems workshop seattle wa 
marjanovic orlowska 
modeling verification temporal constraints production workflows 
knowledge information systems 
mason 
software system reliability component reliability 
proceedings workshop software reliability engineering ottawa ontario 


kind workflow software 

november 
miles huberman 
qualitative data analysis expanded 
oaks california sage publications 
miller cardoso silver 
simulation facilitate effective workflow adaptation 
proceedings th annual simulation symposium san diego california 
pp 

miller fan wu arpinar sheth kochut 
security meteor workflow management system department computer science university georgia athens ga technical report pp 

miller nair zhang zhao 
java simulation animation environment 
proceedings th annual simulation symposium atlanta ga pp 

miller sheth kochut singh 
meteor web workflow management system 
journal intelligence information management systems integrating artificial intelligence database technologies 
miller xiang 
web simulation environment 
generation computer systems special issue web modeling simulation 
musa 

operational profiles software reliability engineering 
ieee software 
musa 

software reliability engineering reliable software faster development testing 
new york mcgraw hill 
nahrstedt smith 
design implementation experiences omega point architecture 
ieee jsac 
nair miller zhang 
java query driven simulation environment 
proceedings winter simulation conference colorado ca 
pp 

nelson 

statistical basis software reliability trw software series march 
parnas 

hierarchical structure 
proceedings ifip congress north holland 
pp 

parnas 

software fundamentals collected papers david parnas 
boston addison wesley 
pearson lipman 
improved tools biological sequence comparison 
proceedings national academy science usa 
pp 

eder liebhart 
extending pert workflow management systems 
european symposium advances databases information systems adbis st petersburg russia 
pp 

reichert dadam 
supporting dynamic changes workflows losing control 
journal intelligent information systems special issue workflow 


simplicity wins germany mid sized industrial companies succeed 
boston mass harvard business school press 
marjanovic orlowska 
managing change time dynamic workflow processes 
international journal cooperative information systems 
shrivastava 
architectural support dynamic reconfiguration distributed workflow applications 
ieee proceedings software engineering 
pp 

son kim kim 
deadline allocation time constrained workflow 
international journal cooperative information systems 
stalk hout 
competing time competition reshaping global markets 
new york free press 
tang 
fragmentation increase reliability workflow systems 
society design process science 
tversky kahneman 
judgement uncertainty heuristics biases 
science 
weikum 

guaranteed quality dependability information service 
proceedings conference buro technik und wissenschaft freiburg germany springer verlag 
pp 

shrivastava 
reliability mechanisms distributed workflow system department computing science university newcastle tyne technical report esprit ltr project ds year report pp 

zinky bakken schantz 
architectural support quality service corba objects 
theory practice object systems 

