architectural style perspective dynamic robotic architectures focus problem developing robotic architectures suited supporting runtime evolution specific evolution techniques 
insights provided current robotic architectures elaborate characteristics support quality evolvability 
combined insights architectural styles developed software engineering community outline ras architectural style layered connector event style intended provide architecture level support evolvable robotic architectures 
domain robotic systems importance systems capable reacting unpredictable conditions long recognized 
achieve goal robotic architectures research community developed situation task driven architectures take environmental unpredictability account 
task oriented architectures focus explicitly specifying environmental conditions task applicable explicitly accounting determination task success failure 
architectures account evolving systems runtime order modify set existing robot behaviors add new ones suspending operation feature refer runtime evolution 
software engineering community developed architectural techniques support development systems runtime evolution capabilities primarily focused dynamic architectures 
architectures models software systems changeable runtime model changes dynamically reflected system implementation 
research efforts focused making architectural model locus easier understandable change enactment 
pursue examination various robotic architectures currently investigate combination insights software architecture community 
goal elaborate integration research domains aimed better supporting runtime evolution robotic architectures focus fundamental architectural support fosters runtime adaptation discussing specific methods achieving 
sponsored part nsf ccf iis 
informatics department donald school information computer sciences university california irvine irvine ca usa ics uci edu taylor faculty informatics department donald school information computer sciences university california irvine irvine ca usa taylor ics uci edu john richard taylor examining robotic architectures canonical subsumption architecture approaches exemplified architecture reactive concentric rc architecture witas project 
robotic architectures discussion addresses foundations architecture continues discussion consequences concepts context runtime evolution historical insight architectures relationships comes 
continues discussion architectural style insights combine needs robotics domain order elaborate requirements statement dynamic robotic architectures 
fundamental contribution presentation ras architectural style combines insights fields study better support robotic architectures flexible changeable runtime 
main features ras style include strong components explicit connectors limited directional event communication explicit layering preserved implementation dynamically changeable architecture 
characteristics specifically intended promote effective construction runtime evolvable robotic systems style construction prototype self adaptive robotic architectures 
ii 
background related section set architectural context remaining discussion presenting basic notions software architecture architectural styles dynamic software architectures 
software architecture software architecture models commonly capture software system structure expressed interconnected components responsible software system computation 
perspectives software architecture explicitly model connectors manage enable communication components 
architectures clearly identify high level elements software system interconnections explicit 
architectures captured architecture description languages adls syntactically precise languages describing architectural structure systems 
software engineering research produced variety adls usually revolving specific modeling concerns 
architecture development environments dio focus providing support architectures adls software development providing tools specification visualization maintenance analysis deployment architectures 
important note architectural models provide full utility software development just descriptive models bearing implemented architecture 
architecture prescriptive nature model architecture final product order qualities pursued architecture analyses performed architectural level bearing software system developed 
architectural styles important concept software architecture architectural style codification design decisions applied construction systems 
architectural styles may capture domain knowledge designed promote qualities particular importance style example specifically intended development gui systems 
architectural styles critical concept achieving high level reuse specific architectural solutions domain expertise 
dynamic software architectures dynamic architectures focus techniques allow systems changed runtime modifying architectural model systems 
architecture runtime evolution focuses coarse grained changes enacted architectural elements aimed providing flexibility dynamism evolution necessarily require foresight development enacted long system deployment 
focusing level abstraction allows better cognitive grasp process clear understanding interconnections may relevant specific contexts 
additionally approach focuses attention high level issues low level concerns critical enactment conceptually important 
approaches rely development infrastructure architecture implementation mappings ensure modifications reflected system implementation 
perspective adopted driver change system behavior change topology system software architecture 
iii 
robotic architectures section discuss robotic architectures research literature context runtime evolution 
examine subsumption rc architectures architectural perspective looking general architectural foundations discussing characteristics support architecture runtime evolution 
subsumption subsumption architecture significant departure sense plan act spa paradigm robotic software construction achieved early success spa 
despite benefits subsumption suffered serious drawbacks particularly centered scalability reliability large complex systems drawbacks hindered adoption motivated development alternative architectural solutions 
architectural foundations subsumption architectures essence data flow style architectures flows originating sensors terminating actuators 
interposed flows architecture components respond events environment requests action 
subsumption architectures adopt layered decomposition capture behaviors independent components component compositions operate parallel layers group components relative complexity sophistication 
communication components facilitated inhibition suppression operations operations higher level modules allowed inhibit communication modules replace normal communication data flows 
runtime evolution explicit support runtime evolution subsumption literature architectures hold powerful lesson encapsulating behaviors independent modules communicating asynchronously assumptions reliability communications results highly modular systems 
sub sumption architectures topology architectural composition reflects behavior system modifying behavior matter altering topology 
focus architectural elements key factor enabling architecture runtime evolution 
important drawback subsumption support principled layering components 
topological location component indication layer belongs modules layer interact modules layer 
existence layers component layer membership wholly conceptual evident enforced architecture 
communication mechanisms impose important restriction components wholly override lowerlevel modules prevents component interactions fusion information 
drawbacks limit granularity reuse individual components limiting kinds interactions construction evolution limitations hinder flexibility evolvability 
layer architectures architectures strongly adopt layers abstraction mechanism differences component tasks treatment state information 
architectures variants differences lying specific implementation choices risen common strategy robotic architecture construction specific exemplar discussion architecture 
architectural foundations name suggest layer architectures focus constructing robotic control systems decomposing system layers skill layer sequencing layer planning layer 
skill layer focuses defining collection lowlevel behaviors maintain long term state responsible actions depend quick reaction 
sequencing layer responsible composing behaviors skill layer chains actions achieve tasks sequencing layer encapsulates behavioral complexity involved building robots 
sequencing layer usually limited maintaining historical state information attempts forecast conditions 
planning layer layers focuses operations take long time complete relative included behaviors layer encapsulates long term goals performs time consuming tasks generating complete plans action environmental projections 
runtime evolution support runtime evolution literature strongest benefit architectures activity lie defining architectural characteristic practically realized layers graceful interconnection layers providing input operation layers 
strong abstraction actual implementations enables independent operation components layers supports modularity incrementality 
significant drawback architectures architecture runtime evolution treatment sequencing layer 
architectures studied sequencing layer implemented specialpurpose language scripts interpreted runtime 
implementation choice included conceptual basis architectures practical adoption method exclusion leads consider drawback methodology general 
special purpose languages significant architectural consequence behaviors embody evident affected architectural means 
differences behavior robots evident software architecture primarily expressed special purpose code executed sequencing layer 
architectural topology primary driver behavioral characteristics architectures naturally lend architecture runtime evolution 
reactive concentric rc rc architectures adopt notion task procedure tp central abstraction encapsulate sequence activities take place behavior achieved 
conceptually maintaining notion control layers rc architectures exhibit layering implementations adopt approach corba 
architectural foundations conceptually rc architectures adopt control layer providing low level services deliberative layer providing time consuming services tp layer forms link layering mirrors separation skill deliberative sequencing layers 
terms actual architectural implementation conceptual division abandoned favor loosely coupled event bus architecture supports non layered interactions 
notion layers evident architectural topology components essentially belong single layer 
tps managed special purpose module specified special purpose task specification language tsl generate stubs forming basis custom coded tp implementations 
runtime evolution explicit support discussed literature runtime evolution rc architectures number features suited 
rc architectures exhibit componentbased development methodology event communication features allow development systems exhibit high degree flexibility decoupling critical qualities dynamic architectures 
methodology supports runtime initiation composition services provide necessary infrastructure runtime evolution 
rc architectures exhibit number drawbacks 
division layers control architecture purely conceptual evident architecture implementation 
rc architectures mirror drawbacks systems tp layer implemented special purpose artifacts architecturally visible 
examining rc architecture seen coarse grained component responsible enactment unknown number task procedures architecturally content 
low architectural visibility behaviors consequence making rc architectures unsuitable application architecture evolution techniques 
iv 
dynamic architectures robotic systems section addresses intersection principles system construction software architecture domain codified architectural styles domain robotic system development exemplified preceding discussion subsumption rc architectures 
discuss nature problem space requirements architectural style address effective discuss architectural style formulation composes features robotic architectures existing architectural styles 
problem space problem space interest dynamic robotic architectures support runtime evolution 
class systems support modification behavior runtime service interruption response variety stimuli 
full discussion methods evolution achieved current scope particular research approach 
specifically interested deliberative layer sequencing layer reactive layer skill layer turret center wall seek wall crawl collision recovery reactive fire move robot collision detector attacker memory deliberative connector sequencing connector reactive connector turn turret robot scanner fire control action requests requests notifications robot notifications fig 

partial illustration robot architecture annotations pointing important characteristics ras architectural style 
systems provide runtime evolution capabilities architecture centric manner changes behavior brought changes system architecture 
benefits strategy domain mirror general case architecture evolution architectural models provide expressive understandable modular reusable basis system evolution lower level approaches centered source code artifacts 
architectural style specifically targeted problem space support effective construction robotic systems promote qualities allow runtime change 
specifically support qualities critical evolvability 
focus runtime change critical architectural style supports easy evolution architectures 
incrementality 
important support incremental development incremental evolution 
reuse 
high degree reuse terms components component groupings important reducing development evolution effort 
ras architectural style section proposes new architectural style named ras intended development dynamic robotic architectures 
development style research activities aimed providing architecture level support qualities discussed immediately preceding section development study robotic architectures discussed results architectural styles stemming software engineering research 
focus discussion style example fig 
illustrates part architecture robot constructed ras style 
specific architecture developed operate infrastructure context research development self adaptive robotic systems embodied physical robot simulation platform allows focus fundamental software engineering concerns robotic architectures 
robots engage combat competing robots battlefield objective destroy opponents ensuring survival 
simple example robot follows battlefield walls searches moves wall finds far rotates turret facing center battlefield fires target scans maintains information robots injured adjust firing strength accordingly 
robot performs number evolutions architectural modifications changes targeting scanning strategies runtime response level energy number active opponents battlefield 
major characteristics style illustrated annotated example fig 
component 
fundamental premise style component nature systems built composition independent components encapsulating single task behavior 
components unaware existence identity components architecture 
followed sub sumption lesser extent rc approach supports high degree modularity incrementality reuse necessary create systems high evolvability 
explicitly layered 
ras style adopts explicit layering architectures partly follows conceptual delineation naming conventions architectures 
high level layers compose ras architectures deliberative sequencing reactive skill layers 
layers mainly differentiated requirements reaction time treatment state information complexity interactions system components 
style support layering mentioned layers layers form conceptual implementation basis ras style architectures 
important note layering reflected actual implementation system just conceptual design 
explicit separation control architecture independent layers supported encouraged communication conventions promotes modularity understandability incrementality reuse granularity layers just components 
skill layer different meaning context ras style systems contains components form foundational capabilities robot components belonging layer interface control software hardware actuators sensors gather information execute mechanical actions 
example fig 
robot scanner component emits notifications robots detected scanner turn turret component performs turret movement response directives 
layer closely tied capabilities hardware platform remains relatively static system evolved 
skill layer pushes information architecture notifications robot state changes provides information response explicit requests components 
reactive layer composed elements address actions robot take immediately receipt information skill layer indicates need action layer captures quick reflexes robotic system forms core functionality higher layers access corresponds skill layer 
components belonging layer maintain state information atomically react events received component illustrative architecture fig 
example immediately fires enemies detected memory past firing actions 
non reliance state optimizes reaction time components layer capability maintain state historic information relegated higher layers architecture emission notifications indicate actions taken 
sequencing layer contains components characterized complexity tasks behaviors embody address actions simply reactive nature may involve complex modes interaction layers 
wall seek component fig 
architecture example attempts locate nearest wall robot move explicitly requesting information current location robot size battlefield making decision request response interaction unavailable components reactive layer 
sequencing components may maintain shortterm state information course component computation similarly conventions architectures attempt predictions 
components layer access capabilities services provided lower layers 
deliberative layer ras style comprised components capability storing long term state information may concerned forecasting state corresponds planning layer 
components layer full access provided services architecture may engage complex interactions components involving multiple message exchanges 
specific example fig 
attacker memory component stores information attackers directs system fire strongly enemies 
predictive nature component example long term state maintenance aspect ras deliberative layer 
event communication 
ras style adopts event communication paradigm event integration ebi style 
communication components accomplished exchange types events action request communicates skill layer action atomic composite nature taken request request information action components architecture layers skill layer robot notification conveys information originating skill layer notification conveys state operational information originating components skill layer 
events initiators action implicit invocation 
ras style adopts directional message conventions similar architectural style requests may transmitted layers originating layer notifications transmitted layers example requests sent sequencing layer reactive layer notifications 
limiting restrictions important provide architectural support layering components promote careful design relationships components easily identify appropriate layer 
additionally event communication promotes modularity reduced coupling components enhances evolvability ras style architecture 
connector communication 
characteristic ras style reliance explicit connectors 
layers discussed previous paragraphs separated explicit layer connector illustrated fig 

connectors architectural elements responsible communication ras style connectors broadcast messages connected elements accordance directional conventions described 
connectors may included part intra layer arrangements act points access inner workings architecture provide support explicit monitoring communication 
facilities provide increased degree modularity visibility operation robot architectures particularly compared opaque nature communication subsumption architectures 
dynamic architecture 
ras style adopts dynamic architecture paradigm described section ii architectural model system maintained independently implementation evolution achieved modifications architectural model translated consistent changes system running implementation 
approach supported facilities environment provides higher degree visibility system evolution level abstraction appropriate architecture approach 
research self adaptive systems applied ras style construction architectures capability evolve runtime 
importantly application style critical enabling runtime adaptation conventionally constructed robots preclude runtime adaptation 
addition enablement runtime adaptation ras provided necessary degree modularity reusability allow modification behavior changes components relating behaviors allowing remainder architecture remain unchanged 
stylistic implications characteristics style intended support needs problem domain 
modularity fundamental characteristic supporting evolvability event nature style combined explicit connectors features intended support quality 
high degree decoupling consequence event communication utilizing direct interconnections components 
adoption layers conceptually practically actual implementation system promotes incrementality development layer enabling reuse coarser granularity just components 
explicit connectors increase visibility architecture communication place components system connectors event monitoring logging 
adopting stylistic conventions ras style carries potential detrimental effects 
adoption event communication paradigm example means potential message loss consequent loss possibly important information 
potentially lossy communication components implies service fulfillment guaranteed components may requests responded message received recipient component elected service request 
event systems may exhibit poor scalability number events emitted components grows large system handle layered directional event flow nature architectural style proposed partially alleviates issue effect event storms lessened fact components partially shielded sets system events 
reactive nature robotics domain problems event solutions exhibit large scale data transfers 
examination robotic architectures currently revealed number areas robotic architectures improved runtime evolution informed successes software engineering 
important weaknesses identified lack explicit architectural layering clearly encapsulated behaviors special purpose elements understanding systems evolving runtime challenging 
believe shortcomings addressed combination insights robotic architectures general purpose architectural styles 
outlines proposal ras architectural style currently context research robotic architectures 
main features ras strong component development focus explicit layering maintained implementation eventbased implicit invocation services directional flow event types adoption explicit connectors dynamic architecture techniques 
features intended support development systems amenable runtime evolution providing explicit support evolution promoting important qualities context modularity incrementality reuse 
direction centered elaboration stylistic elements continue support runtime evolution robotic architectures 
intend examine literature robotic architectures additional features integrated ras conduct studies order evaluate style larger complex systems applicability scalability 
plan examining current elaboration style augmented support reuse level components layers reuse specific component groupings layers 
intend deploy ras style architectures actual robotic platforms order examine effects stylistic principles real world arena 
gat layer architectures artificial intelligence mobile robots 
perry wolf foundations study software architecture acm sigsoft software engineering notes vol 
pp 

architecture development environment institute software research university california irvine www isr uci edu projects 
shaw clements field guide preliminary classification architectural styles software systems proceedings st international computer software applications conference pp 

taylor medvidovic anderson james whitehead robbins component message architectural style gui software ieee transactions software engineering vol 
pp 

open architecture software flexible approach decentralized software evolution ph dissertation university california irvine 
brooks robust layered control system mobile robot robotics automation ieee journal vol 
pp 

bonasso firby gat kortenkamp miller slack experiences architecture intelligent reactive agents vol 
pp 

doherty heintz merz persson distributed architecture autonomous unmanned aerial vehicle experimentation proceedings th international symposium distributed autonomous robotic systems 
taylor knowledge approach architectural adaptation management proceedings st acm sigsoft workshop self managed systems 
new york ny usa acm press pp 

nelson sourceforge net 
