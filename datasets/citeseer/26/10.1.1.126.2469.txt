spin extensible microkernel application specific operating system services brian bershad craig chambers susan eggers chris maeda dylan mcnamee pardyak stefan savage emin sirer dept computer science engineering fr university washington seattle wa application domains multimedia databases parallel computing require operating system services high performance high functionality 
existing operating systems provide fixed interfaces implementations system services resources 
inappropriate applications resource demands usage patterns poorly matched services provided 
spin operating system enables system services defined application specific fashion extensible microkernel 
offers applications fine grained control machine logical physical resources run time adaptation system application requirements 
decade bring radical change resource requirements common computer applications 
high performance applications time niche services large distributed databases interactive multimedia programs massively parallel systems common 
ap plication demands changing substantially operating systems base remained relatively static 
consequently application performance fl limited today operating systems provide inadequate interface computer system resources 
describes operating system called spin address tile requirements coming generation resource intensive applications 
spin requirements satisfied kernel support application specific services 
application specific service precisely satisfies functional performance requirements application class applications 
key idea spin application specific services implemented code sequences installed kernel runtime 
code sequences expose alternative interfaces enable alternative implementations existing interfaces demanding applications 
trusted compiler safe language runtime environment ensure installed sequences violate system integrity savage bershad 
ideas underlying spin stem research years addressed fundamental performance problems arise modern operating system services 
research cludes interprocess communication bershad draves synchronization bershad bershad thread management anderson networking maeda bershad thekkath felten virtual memory young mcnamee armstrong cache management wheeler bershad 
case interfaces exported service poorly matched needs important applications 
solution performance problem came enabling applications adapt behavior interface implementation system services realize maximum performance 
change required careful deliberate modifications operating system kernel 
goal building spin provide applications adaptable kernel platform enables system resources efficiently safely managed application 
efficient mean capable applications execute quickly programming complexity conven tional platform ultrix mach 
safe mean applications may run time protected hardware software firewalls 
rest position expand approach operating system adaptability resource management discuss language compiler requirements system briefly describe system current status 
operating system spin supports adaptability extensible microkernel safely execute application specific code kernel level 
application specific kernel components called spindles spin dynamically loaded extensions enable applications define precise interface implementation kernel services require 
specifically installing code kernel level allows flexible rapid response system hardware software events 
example application program install code sequence runs response threads preempted interrupt time slice event higher priority thread 
cases program ensure system wide application wide invariants 
third case application enforce constraints deny priority inversion 
spindles enable service partitioned user kernel boundary efficient manner satisfies safety sharing requirements 
service crafted terms application level components linked application address space kernel level components provides fast specialized access kernel services user level server manage long lived service state 
allowing applications participate implementation services permit informed decisions resource requirements 
placing implementation application component application level library kernel level code sequence service accessed low latency 
resource management operating system kernel offers general provides abstractions system physical logical resources implements set management policies resources 
spin kernel functions adaptable 
low level resource controllers provide lightweight abstractions physical hardware page frames activation contexts 
higher level resource abstractions threads address spaces implemented collections communicating spindles may individually replaced interposed 
spin addresses management resources level resource allocation architecture 
primary system allocator manages global pool resources pages cpus network bandwidth 
secondary user allocator manages private pools resources acquired system allocator 
user allocator may implemented spindle allow application specific knowledge directly applied management resources 
application may potentially user allocator applications special purpose resource requirements default policies 
system allocator responsible reclaiming resources shortage occurs 
user allocators turn may select individual resource instances important consequently influence eligibility reclamation 
resource management policy system allocator may vary depending types guarantees system needs provide application programs 
language compiler requirements operating system interface programming language defines primitive set operations available programmer lampson 
spin operating system interface defined actual programming language applications define install new interfaces match requirements 
anticipate aggressive spindles system decomposition require language associated compiler technology provide specialized support safety performance 
target language safe subset defined 
depend combination type safety object methodology explicit guards limit access untrusted spindles 
combination type safety defined interfaces kernel services ensure legal operations may invoked data structures shared spindles native kernel code 
synchronization trusted kernel code untrusted spindles accomplished time bounded closures defined spindles running context critical sections defined implemented kernel 
spindles compiled executing system run time 
rely aggressive compiler technology ensure spin microkernel extended user defined spindles performs non extensible monolithic operating system services built kernel 
performance achieved understood optimizing compiler technology intraprocedural data flow analysis symbolic evaluation inline expansion 
techniques eliminate overhead spindle language compiler inline expand calls spindles kernel operations replacing direct data structure accesses constants compiler evaluate predicate expressions guarding kernel operations context spindle code preceding call 
technology spindles installed executed quickly 
advanced compilation technology evaluation jones consel weise jones blend multiple spindle routines surrounding kernel code reduce overheads maintaining large numbers spindles 
reduce cost crossing kernel execution environment spindle 
partial evaluation program transformation technique specializes program code respect argument values 
context example spindles associated kernel event compiler specialize event dispatcher produce single code sequence tuned just spindles installed time 
status developing spin context mach microkernel osf unix server running dec alpha workstations 
partitioning system statically spin component native mach osf existing osf binaries continue run accessing osf services manage native component 
spin manage spin component applications explicitly marked run spin 
approach allow migrate away mixed mode system runs spin natively 
anderson anderson bershad lazowska levy scheduler activations effective kernel support user level mari parallelism 
acm transactions computer systems february 
bershad bershad practical considerations non blocking concurrent objects 
proceedings th international con erence distributed computing systems pages may 
bershad bershad anderson lazowska levy lightweight remote procedure call 
acm transactions computer systems february 
appeared proceedings th cm symposium operating systems principles december 
bershad bershad redell ellis fast mutual exclusion uniprocessors 
proceedings fifth international conference architectural support programming languages operating systems asplos pages october 
consel consel binding time analysis higher order untyped functional languages 
conference lisp functional programming pages 
draves draves bershad rashid dean continuations implement thread management communication operating systems 
proceedings thirteenth acm symposium operating systems principles pages october 
felten felten case application specific communication protocols 
proceedings super computer systems division technology focus conference pages 
jones jones sestoft mix self applicable partial evaluator experiments compiler generation 
lisp symbolic computing february 
jones jones gomard sestoft partial evaluation automatic program generation 
prentice hall 
lampson lampson hints computer system design 
ieee software january 
maeda bershad maeda bershad protocol service decomposition high performance net working 
proceedings fourteenth acm symposium operating systems principles pages december 
mcnamee armstrong mcnamee armstrong extending mach external pager interface accommodate user level page replacement policies 
proceedings usenix math symposium pages 
savage bershad savage bershad issues design extensible operating system 

submitted publication 
bershad chen fast interrupt priority management ing system kernels 
proceedings second usenix workshop microkernels kernel architectures september 
thekkath thekkath nguyen moy lazowska implementing network protocols user level 
eee acm transactions networking october 
weise weise ruf seligman automatic online partial evaluation 
functional programming languages computer architecture pages 
springer verlag august 
lncs 
wheeler bershad wheeler bershad consistency management virtually indexed caches 
proceedings fifth international conference architectural support programming languages operating systems asplos 
october 
young young exporting user interface memory management oriented operating system 
technical report cmu cs carnegie mellon university november 
bershad maeda moss efficient packet demultiplexing multiple endpoints large messages 
proceedings winter usenix conference january 

