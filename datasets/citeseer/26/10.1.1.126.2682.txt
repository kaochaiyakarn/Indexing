citi technical report virtual honeypot framework niels niels google com honeypot closely monitored network decoy serving purposes distract adversaries valuable machines network provide early warning new attack exploitation trends allow depth examination adversaries exploitation honeypot 
deploying physical honeypot time intensive expensive different operating systems require specialized hardware honeypot requires physical system 
presents honeyd framework virtual honeypots simulates virtual computer systems network level 
simulated computer systems appear run unallocated network addresses 
deceive network fingerprinting tools honeyd simulates networking stack different operating systems provide arbitrary routing topologies services arbitrary number virtual systems 
discusses honeyd design shows honeyd framework helps areas system security detecting disabling worms distracting adversaries preventing spread spam email 
october center information technology integration university michigan west william street ann arbor mi virtual honeypot framework internet security increasing importance business conducted 
despite decades research experience unable secure computer systems measure security 
result exploitation newly discovered vulnerabilities catches surprise 
exploit automation massive global scanning vulnerabilities enable adversaries compromise computer systems shortly vulnerabilities known 
way get early warnings new vulnerabilities install monitor computer systems network expect broken 
attempt contact systems network suspect 
call system honeypot 
honeypot compromised study vulnerability compromise 
honeypot may run operating system number services 
configured services determine vectors adversary may choose compromise system 
physical honeypot real machine ip address 
virtual honeypot simulated machine responds network traffic sent virtual honeypot 
virtual honeypots attractive fewer computer systems reduces maintenance costs 
virtual honeypots possible populate network hosts running numerous operating systems 
convince adversaries virtual honeypot running operating system need simulate tcp ip stack target operating system carefully order fool tcp ip stack fingerprinting tools nmap 
describes design implementation honeyd framework virtual honeypots simulates computer systems network level 
honeyd supports ip protocol suites responds network requests virtual honeypots research conducted author center information technology integration university michigan 
niels google niels google com services configured virtual honeypot 
sending response packet honeyd personality engine match network behavior configured operating system personality 
simulate real networks honeyd creates virtual networks consist arbitrary routing topologies configurable link characteristics latency packet loss 
networking mapping tools traceroute probe virtual network discover topologies simulated honeyd 
experimental evaluation honeyd verifies fingerprinting tools simulated systems virtual network topologies realistic network mapping tools 
demonstrate power honeyd framework show areas system security 
example honeyd help detecting disabling worms distracting adversaries preventing spread spam email 
rest organized follows 
section presents background information honeypots 
section discuss design implementation honeyd 
section presents evaluation honeyd framework verify fingerprinting network mapping tools fooled report specified system configurations 
describe honeyd help improve system security section related section 
summarize conclude section 
honeypots section presents background information honeypots terminology 
provide motivation comparing honeypots network intrusion detection systems nids 
amount useful information provided nids decreasing face sophisticated evasion techniques increasing number protocols employ encryption protect network traffic eavesdroppers 
nids suffer high false positive rates decrease usefulness 
honeypots help problems 
honeypot closely monitored computing resource intend probed attacked compromised 
value honeypot determined information obtain 
monitoring data enters leaves honeypot lets gather information available nids 
example log key strokes interactive session encryption protect network traffic 
detect malicious behavior nids require signatures known attacks fail detect compromises unknown time deployed 
hand honeypots detect vulnerabilities understood 
example detect compromise observing network traffic leaving honeypot means exploit seen 
honeypot production value attempt contact suspicious 
consequently forensic analysis data collected honeypots lead false positives data collected nids 
honeypots run operating system number services 
configured services determine vectors available adversary compromising probing system 
high interaction honeypot simulates aspects operating system 
low interaction honeypots simulates parts example network stack 
high interaction honeypot compromised completely allowing adversary gain full access system launch network attacks 
contrast honeypots simulate services exploited get complete access honeypot 
low interaction honeypots limited useful gather information higher level learn network probes worm activity 
analyze spammers active countermeasures worms see section 
differentiate physical virtual honeypots 
physical honeypot real machine network ip address 
virtual honeypot simulated machine responds network traffic sent virtual honeypot 
gathering information network attacks probes number deployed honeypots influences amount accuracy collected data 
example measuring activity worms 
identify worms complete tcp handshake send payload 
connection requests go unanswered contact randomly chosen ip addresses 
honeypot capture worm pay load configuring function web server 
honeypots deploy contacted worm 
physical honeypots high interaction allowing system compromised completely expensive install maintain 
large address spaces impractical impossible deploy physical honeypot ip address 
case need deploy virtual honeypots 
design implementation section honeyd lightweight framework creating virtual honeypots 
framework allows instrument thousands ip addresses virtual machines corresponding network services 
start discussing design considerations describe honeyd architecture implementation 
limit adversaries interacting honeypots network level 
simulating aspect operating system choose simulate network stack 
main drawback approach adversary gains access complete system compromises simulated service 
hand able capture connection compromise attempts 
mitigate drawbacks combining honeyd virtual machine vmware 
discussed related section 
reason honeyd low interaction virtual honeypot simulates tcp udp services 
understands responds correctly icmp messages 
honeyd able handle virtual honeypots multiple ip addresses simultaneously order populate network numerous virtual honeypots simulating different operating systems services 
increase realism simulation framework able simulate arbitrary network topologies 
simulate address spaces topologically dispersed load sharing framework needs support network tunneling 
shows conceptual overview framework operation 
central machine intercepts network traffic sent ip addresses configured honeypots simulates responses 
describe honeyd architecture explain network packets virtual honeypots reach honeyd host 
receiving network data honeyd designed reply network packets destination ip address belongs sim router honeyd internet virtual honeypots linux freebsd windows nt netbsd honeyd receives traffic virtual honeypots router proxy arp 
honeypot honeyd simulate network stack behavior different operating system 
honeypots 
honeyd receive correct packets network needs configured appropriately 
ways create special routes virtual ip addresses point honeyd host proxy arp network tunnels 
ip address router ip address honeyd host 
simplest case ip addresses virtual honeypots lie local network 
denote 
vn 
adversary sends packet internet honeypot vi router receives attempts forward packet 
router queries routing table find forwarding address vi 
possible outcomes router drops packet route vi router forwards packet router vi lies local network range router directly reachable cases direct traffic vi easiest way configure routing entries vi point case router forwards packets virtual honeypots directly honeyd host 
special route configured router determine mac address virtual honeypot 
corresponding physical machine arp requests go unanswered router drops packet retries 
configure honeyd host reply arp requests vi mac addresses 
called proxy arp allows router send packets vi mac address 
complex environments possible tunnel network address space honeyd host 
configuration personality lookup routing packet dispatcher network icmp tcp udp services personality engine routing diagram gives overview honeyd architecture 
incoming packets dispatched correct protocol handler 
tcp udp configured services receive new data send responses necessary 
outgoing packets modified personality engine mimic behavior configured network stack 
routing component optional honeyd simulates network topologies 
generic routing encapsulation gre tunneling protocol described detail section 
architecture honeyd architecture consists components configuration database central packet dispatcher protocol handlers personality engine optional routing component see 
incoming packets processed central packet dispatcher 
checks length ip packet verifies packet checksum 
framework aware major internet protocols icmp tcp udp 
packets protocols logged silently discarded 
process packet dispatcher query configuration database find honeypot configuration corresponds destination ip address 
specific configuration exists default template 
configuration packet corresponding configuration handed protocol specific handler 
icmp protocol handler supports icmp requests 
default honeypot configurations respond echo requests process destination unreachable messages 
handling requests depends configured personalities described section 
tcp udp framework establish connections arbitrary services 
services external applications receive data stdin send output stdout 
behavior service depends entirely external application 
connection request received framework checks packet part established connection 
case new data sent started service application 
packet contains connection request new process created run appropriate service 
creating new process connection framework supports subsystems 
subsystem application runs name space virtual honeypot 
subsystem specific application started corresponding virtual honeypot instantiated 
subsystem bind ports accept connections initiate network traffic 
honeyd contains simplified tcp state machine 
way handshake connection establishment connection teardown fin rst fully supported receiver congestion window management fully implemented 
udp datagrams passed directly application 
framework receives udp packet closed port sends icmp port unreachable message forbidden configured personality 
sending icmp port unreachable messages framework allows network mapping tools traceroute discover simulated network topology 
addition establishing connection local service framework supports redirection connections 
redirection may static depend connection quadruple source address source port destination address destination port 
redirection lets forward connection request service virtual honeypot service running real server 
example redirect dns requests proper name server 
reflect connections back adversary just run redirect ssh connection back originating host cause adversary attack ssh server 
evil laugh 
packet sent network processed personality engine 
personality engine adjusts packet content appears originate network stack configured operating system 
personality engine adversaries commonly run fingerprinting tools nmap gather information target system 
important honeypots stand 
appear fingerprint irix sgi tseq class td gcd si ae ipid ts hz df ef ack flags ops resp df ack flags ar ops resp df ef ack flags ops df ack flags ops df ack flags ar ops df ack flags ops df ack flags ar ops pu resp example nmap fingerprint specifies network stack behavior system running irix 
real probe honeyd simulates network stack behavior operating system 
call personality virtual honeypot 
different personalities assigned different virtual honeypots 
personality engine honeypot network stack behave specified personality introducing changes protocol headers outgoing packet match characteristics configured operating system 
framework uses nmap fingerprint database personality tcp ucp behavior fingerprint database personality icmp behavior 
explain information provided nmap fingerprints change characteristics honeypot network stack 
nmap fingerprint format similar example shown 
string fingerprint token personality name 
lines name describe results different tests 
test comprehensive 
determines network stack remote operating system creates initial sequence number isn tcp syn segments 
nmap indicates difficulty predicting isns class field 
predictable isns post security problem allow adversary spoof connections 
gcd si field provide detailed information isn distribution 
test determines ip identification numbers tcp timestamps generated 
tests determine stack behavior packets arrive open closed tcp ports 
test analyzes icmp response packet closed udp port 
framework keeps state honeypot 
state includes information isn generation boot time honeypot current ip packet identification number 
keeping state necessary generate subsequent isns follow bit source port bit destination port bit reserved header bits length bit sequence number bit acknowledgment number flags bits bit window size bit tcp checksum bit urgent pointer options diagram shows structure tcp header 
honeyd changes options parameters match behavior network stacks 
distribution specified fingerprint 
nmap fingerprinting concerned operating system tcp implementation 
tcp stateful connection oriented protocol provides error recovery congestion control 
tcp supports additional options implemented systems 
size advertised receiver windows varies implementations nmap part fingerprint 
framework sends packet newly established tcp connection uses nmap fingerprint see initial window size 
connection established framework adjusts window size amount buffered data 
tcp options fingerprint negotiated connection establishment honeyd inserts response packet 
framework uses fingerprint determine frequency tcp timestamps updated 
operating systems update frequency hz 
generating correct distribution initial sequence numbers tricky 
nmap obtains isn samples analyzes consecutive differences 
nmap recognizes isn generation types constant differences differences multiples constant completely random differences time dependent random increments 
differentiate cases nmap calculates greatest common divisor gcd standard deviation collected differences 
framework keeps track isn generated honeypot generation time 
new tcp connection requests honeyd uses type code destination unreachable port unreachable unused set checksum ip header including options bytes udp header diagram shows structure icmp port unreachable message 
honeyd introduces errors quoted ip header match behavior network stacks 
approximates distribution described fingerprint gcd standard deviation 
way generated isns match generation class nmap expects particular operating system 
ip header honeyd adjusts generation identification number 
zero increment random 
icmp packets personality engine uses pu test entry determine quoted ip header modified associated fingerprint information 
operating systems modify incoming packet changing fields network host order result quote ip udp header incorrectly 
honeyd introduces errors necessary 
shows example icmp destination unreachable message 
framework supports generation icmp messages described due space considerations 
routing topology honeyd simulate arbitrary virtual routing topologies possible proxy arp direct packets honeyd host 
need configure routers delegate network address space host 
normally virtual routing topology tree rooted packets enter virtual routing topology 
interior node tree represents router edge link contains latency packet loss characteristics 
terminal nodes tree correspond networks 
framework supports multiple entry points exit parallel 
entry router chosen network space responsible 
simulate asymmetric network topology consult routing tables packet enters framework leaves framework see 
case network topology resembles directed acyclic graph framework receives packet finds correct entry routing tree traverses starting root finds node contains destination ip address packet 
packet loss latency edges path accumulated determine packet dropped long delivery delayed 
framework decrements time live ttl field packet traversed router 
ttl reaches zero framework sends icmp time exceeded message source ip address router causes ttl reach zero 
network simulations possible integrate real systems virtual routing topology 
framework receives packet real system traverses topology finds virtual router directly responsible network space real machine belongs 
framework sends arp request necessary discover hardware address system encapsulates packet ethernet frame 
similarly framework responds arp replies corresponding virtual router real system sends arp requests 
split routing topology gre tunnel networks 
allows load balance honeyd installations delegating parts address space different honeyd hosts 
gre tunnels possible delegate networks belong separate parts address space single honeyd host 
reverse route outgoing tunnel selected source destination ip address 
example configuration described section 
configuration virtual honeypots configured template completely configured computer system 
new templates created create command 
set add commands change configuration template 
set command assigns personality nmap fingerprint file template 
personality determines behavior network stack discussed section 
set command defines default behavior supported network protocols 
default behavior values block reset open 
block means packets specified protocol dropped default 
reset indicates ports closed default 
open means open default 
possible configure routing loops normally undesirable avoided 
settings difference udp tcp 
specify services remotely accessible add command 
addition template name need specify protocol port command execute service 
specifying service honeyd recognizes keyword proxy allows forward network connections different host 
framework expands variables service proxy statement sport 
variable expansion allows service adapt behavior depending particular network connection handling 
possible redirect network probes back host doing probing 
bind command assigns template ip address 
template assigned ip address default template 
shows example configuration specifies routing topology templates 
router template mimics network stack cisco router accessible telnet 
web server template runs services simple web server forwarder ssh connections 
case forwarder redirects ssh connections back connection initiator 
real machine integrated virtual routing topology ip address 
logging honeyd framework supports ways logging network activity 
create connection logs report attempted completed connections protocols 
usefully information gathered services 
service applications report data logged honeyd stderr 
framework uses syslog store information system 
situations expect honeyd runs conjunction nids 
evaluation section presents evaluation honeyd ability create virtual network topologies mimic different network stacks 
start honeyd configuration similar shown traceroute find routing path virtual host 
notice measured latency double latency configured 
correct packets traverse link twice 
running nmap ip addresses results correct identification route entry route link route add net latency ms loss route add net latency ms loss route link route link create set personality cisco running ios set default tcp action reset add tcp port scripts router telnet pl create netbsd set netbsd personality netbsd running processor set netbsd default tcp action reset add netbsd tcp port proxy add netbsd tcp port sh scripts web sh bind bind netbsd bind example configuration honeyd 
configuration language context free grammar 
example creates virtual routing topology defines templates router accessed telnet host running web server 
real system integrated virtual routing topology ip address 
configured personalities 
nmap reports cisco router run netbsd 
identifies cisco router lists number possible operating systems including netbsd 
fully test framework nmap set class network populated virtual honeypots fingerprint nmap fingerprint file 
removing duplicates distinct fingerprints 
honeypots configured port closed open port ran web server 
launched nmap configured ip addresses checked operating systems nmap identifies 
fingerprints nmap uniquely identified operating system simulated honeyd 
fingerprints nmap list possible choices included simulated personality 
nmap failed identify correct operating system fingerprints 
problem honeyd due badly formed fingerprint database 
applications section describe honeyd framework different areas system security 
traceroute traceroute hops max ms ms ms ms ms ms ms ms ms ms ms ms traceroute measure routing path virtual routing topology 
measured latencies match configured ones 
network traditional role honeypot network decoy 
framework instrument unallocated addresses production network virtual honeypots 
adversaries scan production network potentially confused virtual honeypots 
conjunction nids resulting network traffic may help getting early warning attacks 
detecting countering worms honeypots ideally suited intercept traffic adversaries randomly scan network 
especially true internet worms form random scanning new targets blaster population infected percent honeypots honeypots honeypots honeypots time hours population infected percent honeypots honeypots honeypots honeypots time hours graphs show simulated worm propagation infected hosts connect virtual honeypot 
left graph shows propagation virtual honeypots activated hour worm starts spreading 
right graph shows propagation honeypots activated minutes 
code red nimda slammer section show virtual honeypot deployment detect new worms launch active countermeasures infected machines worm identified 
intercept probes worms instrument virtual honeypots unallocated network addresses 
probability receiving probe depends number infected machines worm propagation chance number deployed honeypots worm propagation chance depends worm propagation algorithm number vulnerable hosts size address space 
general larger honeypot deployment earlier honeypots receives worm probe 
detect new worms honeyd framework different ways 
may deploy large number virtual honeypots gateways front smaller number high interaction honeypots 
honeyd instruments virtual honeypots 
forwards tcp connections established udp packets carry payload fail match known fingerprint 
setting honeyd shields high interaction honeypots uninteresting scanning backscatter activity 
honeypot revirt detect compromises unusual network activity 
automated nids signature generation proposed block detected worm exploit network border 
effectiveness approach analyzed moore 
improve configure honeyd replay packets high interaction honeypots run different operating systems software versions 
hand honeyd subsystem support expose regular unix applications worms 
solution limiting restricted detecting worms operating system running framework worms target microsoft windows unix 
moore show containing worms practical internet scale large fraction internet cooperates containment effort 
honeyd framework possible actively counter worm propagation infected hosts contact virtual honeypots 
analogous moore model effect immunization worm propagation classic sir epidemic model 
model states number newly infected hosts increases linearly product infected hosts fraction susceptible hosts contact rate 
immunization represented decrease new infections linear number infected hosts ds dt di dt dr dt time fraction infected hosts fraction susceptible hosts fraction hosts 
propagation speed worm characterized contact rate immunization rate represented 
simulate worm propagation parameters code red worm 
susceptible machines address space set initial worm seed infected machines 
worm launches probes second 
simulation measures effectiveness active immunization virtual honeypots 
honeypots start working time delay 
time delay represents time required detect worm install immunization code 
expect immunization code prepared vulnerability actively exploited 
shows worm propagation resulting varying number instrumented honeypots 
graph left shows results honeypots brought online hour worm started spreading 
graph right shows results honeypots activated minutes 
wait hour vulnerable machines internet infected 
chances better start honeypots minutes 
case honeypots capable stopping worm spreading 
alternatively possible scan internet vulnerable systems remotely patch 
ethical reasons probably unfeasible 
reliably detect infected machine virtual honeypot framework active immunization appropriate response 
blaster worm idea realized 
spam prevention honeyd framework understand spammers operate automate identification new spam submitted collaborative spam filters 
general spammers abuse internet services proxy servers open mail relays 
open proxies connect proxies submit spam email open mail relays 
spammers open proxies anonymize identity prevent tracking spam back origin 
open mail relay accepts email sender address recipient address 
sending spam email open mail relays spammer causes mail relay deliver spam stead 
understand spammers operate honeyd framework instrument networks open proxy servers open mail relays 
honeyd gre tunneling capabilities tunnel class networks central honeyd host 
populate network space randomly chosen ip addresses random selection services 
virtual hosts may run open proxy may just run open mail relay combination network gre tunnels network internet honeyd open mail relays open proxies spam reporting network collaborative spam classifier honeyd framework possible instrument networks automatically capture spam submit collaborative filtering systems 

spammer attempts send spam email open proxy open mail relay email automatically redirected spam trap 
spam trap submits collected spam collaborative spam filter 
writing honeyd received processed spam emails 
detailed evaluation subject 
related areas research tcp ip stack fingerprinting effective methods classify remote operating system active probing passive analysis network traffic defeating tcp ip stack fingerprinting normalizing network traffic 
nmap uses tcp udp probes determine operating system host 
nmap collects responses network stack different queries matches signature database determine operating systems queried host 
nmap fingerprint database extensive operating system personalities honeyd 
actively probing remote host determine operating systems possible identify remote operating system passively analyzing network packets 
tool 
tcp ip flags inspected similar data collected nmap fingerprint database 
hand smart show defeat fingerprinting tools scrubbing network packets artifacts identifying remote operating system removed 
approach similar honeyd personality engine systems change network packets influence fingerprinting tools 
contrast fingerprint removes identifiable information honeyd changes network packets contain artifacts configured operating system 
high interaction virtual honeypots constructed user mode linux uml vmware 
example revirt reconstruct state virtual machine point time 
helpful forensic analysis virtual machine compromised 
high interaction virtual honeypots fully compromised easy instrument thousands high interaction virtual machines due overhead 
honeyd framework allows instrument unallocated network space thousands virtual honeypots 
furthermore may combination honeyd virtual machines get benefit approaches 
case honeyd provides network facades selectively proxies connections services backends provided high interaction virtual machines 
honeyd framework creating virtual honeypots 
honeyd mimics network stack behavior operating systems deceive fingerprinting tools nmap 
gave overview honeyd design architecture 
evaluation shows honeyd effective creating virtual routing topologies successfully fingerprinting tools 
showed honeyd framework deployed help different areas system security worm detection worm countermeasures spam prevention 
honeyd freely available source code downloaded www citi umich edu honeyd 
acknowledgments marius eriksen peter honeyman careful reviews suggestions 
jamie van dug song eric thomas provided helpful suggestions contributions 
arkin 
fuzzy approach remote active operating system fingerprinting 
www org august 
steven bellovin 
security problems tcp ip protocol suite 
computer communications review 
carl mitchell john quarterman 
arp implement transparent subnet gateways 
rfc october 
cert 
cert advisory ca nimda worm 
www 
cert org advisories ca html september 
cert 
cert advisory ca blaster worm 
www cert org advisories ca html august 
george dunlap samuel king peter chen 
revirt enabling intrusion analysis virtual machine logging replay 
proceedings symposium operating systems design implementation december 

remote os detection tcp ip stack fingerprinting 
www nmap org nmap nmap fingerprinting article html october 
glassman 
caching relay world wide web 
proceedings international world wide web conference pages may 
hanks li farinacci traina 
generic routing encapsulation gre 
rfc october 
hanks li farinacci traina 
generic routing encapsulation ipv networks 
rfc october 
herbert 
mathematics infectious diseases 
siam review 
crowcroft 
automated nids signature generation honeypots 
poster acm sigcomm august 
moore shannon brown 
code red case study spread victims internet worm 
proceedings nd acm internet measurement workshop pages 
acm press november 
david moore vern paxson stefan savage shannon stuart staniford nicholas weaver 
inside slammer worm 
ieee security privacy july 
david moore shannon geoffrey voelker stefan savage 
internet quarantine requirements containing self propagating code 
proceedings ieee infocom conference april 
laurent 
fighting worms honeypots honeyd vs exe 
lists insecure org lists honeypots jul sep html august 
honeypots 
vern paxson 
bro system detecting network intruders real time 
proceedings th usenix security symposium january 
jon postel 
transmission control protocol 
rfc september 
thomas timothy 
insertion evasion denial service network intrusion detection 
secure networks whitepaper august 
matthew smart robert malan jahanian 
defeating tcp ip stack fingerprinting 
proceedings th usenix security symposium august 
dug song robert malan robert stone 
snapshot global worm activity 
technical report arbor networks november 
lance 
honeypots tracking hackers 
addison wesley professional september 
stuart staniford vern paxson nicholas weaver 
wn internet spare time 
proceedings th usenix symposium august 
stevens 
tcp ip illustrated volume 
addison wesley 
jeremy ganesh beng hong lim 
virtualizing devices vmware workstation hosted virtual machine monitor 
proceedings annual usenix technical conference pages june 
david wagner paolo soto 
mimicry attacks host intrusion detection systems 
proceedings th acm conference computer communications security november 
michal william stearns 
passive os fingerprinting tool 
www stearns org readme 
viewed th january 
