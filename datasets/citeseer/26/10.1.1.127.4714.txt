benefits event driven energy accounting power sensitive systems prerequisite energy aware scheduling precise knowledge activity inside computer system 
embedded hardware monitors processor performance counters proved offer valuable information field performance analysis 
approach applied investigate energy usage patterns individual threads 
information active hardware units integer floatingpoint unit cache memory interface gathered event counters establish thread specific energy accounting 
evaluation shows correlation events energy values provides necessary information energy aware scheduling policies 
approach os directed power management adds energy usage pattern runtime context thread 
depending field application scenarios benefit applying energy usage patterns workstations passive cooling hand battery powered mobile systems hand 
energy aware scheduling evaluates energy usage thread system activity scheduling goal achieved 
workstations throttle system average energy exceeds predefined power dissipation capacity 
compact noiseless affordable system design possible meets sporadic high demands computing power 
nowadays mobile systems offer features reducible clock speed dynamic voltage scaling 
energy aware scheduling employ features yield longer battery life slowing low priority threads preserving certain quality service 
frank department computer science operating systems university erlangen 
erlangen germany acm org os directed halting cpu short periods time smooth energy consumption workstation keep average power limit imposed thermal conductivity device 
compact affordable design noisy fans feasible meets sporadic high demands computing power 
todays operating systems processor idle thread 
policy throttle energy consumption case high load 
approach enforces additional halt cycles defer energy limit average power case high load 
genuine saving energy possible processors offer feature tunable clock speed reduce power processor 
today embedded processors amd elan sc strongarm hitachi exhibit feature 
scaling core supply voltage clock frequency offers opportunities energy efficient operation device :10.1.1.143.7417
particularly academic results concerning variable voltage design applied latest products intel pentium mobile iii transmeta crusoe 
prerequisite kind decisions system software precise information relevant events 
practically information significant cpu scheduling gathered basis threads 
system software wants benefit dynamic system throttling dynamic speed setting dynamic voltage scaling know energy usage patterns individual threads 
thread specific energy accounting serious power management possible current operating systems adjusting power management parameters best black art 
discusses fine grained thread specific online analysis energy usage patterns fed back scheduler control cpu clock speed 
expected power savings subtle effects battery discharge analysis speed voltage correlation clock gating unused processor components floating point unit bus interface trace driven simulation unfeasible 
favor evaluation real hardware 
results implementation 
section describes energy related behavior hardware motivates thread specific energy accounting 
joule watcher exploiting information provided event counters section 
section propose line scheduling policies throttle cpu reduce energy consumption round section 
energy related characteristics system components typical components computer systems consume significant fraction energy processor memory display system graphics card network adapter disks 
mobile systems properties batteries considered 
option way software control energy savings display active system 
energy consumption system covered dynamic power management scope 
focus cpu aspects power management 
benefits event driven energy accounting power sensitive systems battery processor memory remain energy critical components investigation 
battery capacity battery dominated factors load power discharge 
charge capacity total amount energy battery deliver discharged constant current called discharge rate defined period normally hour 
discharge rate non linear impact total amount power battery deliver 
typical lithium ion battery characteristics discharge rate usable battery capacity normalized discharge rate high discharge rate lower usable battery capacity 
additionally usable battery capacity shortened intermittent load 
duty cycles reduce usable capacity compared continuous load average power 
due influence discharge rate load battery capacity energy accounting consider effects 
furthermore scheduler throttle system activity way establishes continuous load modest level 
sporadic high loads avoided 
processor factors influence energy consumption cpu functional unit working behalf instruction needs certain amount energy instruction fetch decode unit pipeline stages alu floating point unit need certain amount energy perform operation 
depending instruction mix electrical power usage cpu vary 
considering properties cpu compiler generate code optimized minimal energy usage 
energy accounting cope variable energy usage specific instrumentation algorithmic knowledge application 
cpu speed dynamically adapted supply voltage change energy performance :10.1.1.143.7417
neglecting impact external effects cpu performance memory latencies bus contention energy operation remains constant reducing frequency fixed voltage 
energy operation proportional frequency voltage changed factor allowable limits operation 
reduced clock speed low supply voltage targeted advanced scheduling policies 
energy accounting aware electrical characteristics cpu driven different operation points 
memory performance processor depends fast supply data code 
consequently improvement cache efficiency leads efficient processor units improvement energy efficiency 
benefit energy efficiency reinforced main memory access bus transaction needs energy consumed drivers bus system memory 
measurements see section data exchange processor second level cache placed outside cpu core significantly contributes energy consumption system 
addition cache memory aware code optimizations saving energy scheduling strategies respect cache affinity individual threads improve cache reuse threads shared memory segments order avoid bus transactions cpu stall cycles due cache misses 
consequently memory conscious scheduling strategies alleviate power consumption system 
requirements energy profiling energy profiling provide relevant information energy aware scheduler tune timing sequence speed execution 
halting cpu simplest form speed adjustment offers speed levels 
tuning clock speed presumes entity specific clock speed assigned policy determine appropriate speed settings 
previous field dynamic speed settings focus adjusting clock speed intervals :10.1.1.143.7417
approach motivated deadline driven real time strategies predefined workload 
envision interactive devices running unknown dynamically loaded software 
approach support threads application specific properties known advance 
approach measurement classification applications parts applications energy usage patterns 
line measurements employing digital correlate data gathered energy monitor profiling data sampled target system 
additional hardware effort software overhead sampling negative effects cache performance embedded systems small caches overhead correlate data power analysis nearly impossible due inertia voltage regulator associated processor inertia measurement unit 
novel approach line energy profiling consider power related effects instruction significant influence execution target system 
benefits event driven energy accounting power sensitive systems joule watcher energy accounting approach line energy accounting uses counters embedded target hardware register events imply consumption certain amount energy 
number type events stored updated thread system context 
information allows easily estimate energy consumption individual threads system 
counters register events interfering application overhead caused saving restoring counter values context switching routine 
show counter values strongly correlate specific energy consumption cheap easy methodology power consumption monitoring 
measurement methodology initial target environment simple pentium ii pc running linux operating system system observation embedded pc amd elan processor offers variable clock speed 
context switch routines kernel data structures modified hold values available performance monitoring event counters 
counters realized family registers configured count events 
accumulated counter values accessed system 
calibration software find correlation events energy values 
synthetic micro benchmarks trigger events certain type frequency seconds simple integrated power monitor measures electrical power system 
watt resolution smooth power value calculating average consecutive readings meter 
direct measurement processor chip set current possible due complex power supply target system 
point figures represents particular power measurement corresponding number events 
tune parameters calibrations software come close certain number events 
precise number events measurements 
get cloud reading points multiple power measurements certain deviation predefined numbers events 
measurements measurement single micro benchmark triggering integer operations running variable sleep interval 
variant number instructions second executed 
demonstrates correlation number micro operations second executed pentium ii cpu energy second consumed total system 
see nearly linear increase energy rising number integer control flow operations entail micro operations 
synthetic calibration software runs totally registers level cache main memory second level cache tlb misses 
conclude assign energy value ws watt second retired 
watt retired second fig 

correlation retired energy consumption functional unit cpu responsible additional energy consumption floating point unit 
hard build calibration software exclusively triggers floating point operations timely interleave micro benchmarks variable sleep intervals 
benchmark issues integer operations micro benchmark issues floating point operations integer operations loops blocking routines 
calibration software counts total number operations number floating point operations varying ratio event types 
having calculated energy integer micro operation subtract energy integer operations measurement point total energy gathered 
shows energy consumption system running certain amount floating point operations 
watt mflop fig 

correlation floating point operations energy consumption see linear correlation witha 
reason coarse watt resolution exploiting measurement get energy value ws floating point operation 
benefits event driven energy accounting power sensitive systems candidate energy consumption second level cache 
watt ads fig 

correlation cache energy consumption similar floating point calibration software vary ratio integer memory access operations result level cache misses handled second level cache 
plot see shows linear correlation number second level cache address ads energy consumption 
get energy value ws second level cache 
measurement deals memory requests consequence cache misses 
calibration environment mixes load store integer operations 
load store operations may cause second level cache misses trigger bus transactions memory chip activity 
watt bus tran mem fig 

correlation main memory energy consumption depending cpu ability tolerate outstanding transactions cpu stalls waiting data cache 
looking relationship energy memory see memory accounts approximately energy value ws 
discussion event counters proved provide detailed information hardware units 
furthermore hardware events mapped energy amounts fixed size 
mapping evaluated initial calibration procedure type system 
energy values event energy accounting precise additional overhead 
counters designed performance monitoring immediate relation energy consumption 
get results resolution external synthetic real world applications ghostscript 
exploiting types events floating point operations second level address memory transactions 
todays architectures offer limited number counters 
pentium family initial implementation comprises counters mapped variety events 
monitor events simultaneously 
multiplex counters thread running 
compare joule watcher power measurements real world applications re configure counters register necessary types events certain application procedures repeated 
technique sampling multiplexing accepted field performance monitoring known application analyzed runs 
goal monitor type applications 
includes single run applications just time compiled applications 
guarantee exact energy measurement applications assess sampling critical technique deployed field energy accounting 
evident energy event constant clock speed varies 
calibration software gauge various speed levels type cpu event 
performance monitoring counters common tool field performance profiling 
upcoming energy accounting systems expect hardware generations provide rich set event counters fully dedicated energy related activities 
energy aware scheduling demonstrate benefits event triggered energy accounting propose energy aware scheduling strategies throttle average power workstations reduce energy consumption mobile systems 
throttling average system power users workstations ask high performance systems affordable costs 
additionally favor compact package designs noiseless systems disturb working environment 
requests satisfied passive benefits event driven energy accounting power sensitive systems cooling 
low power components operate continuously passive cooling offer desired performance high price normally justified mobile systems 
typically high computing power personal workstations short bursts 
sporadic demand high power motivates approach power throttling 
employ affordable standard components normally rely active cooling fans 
throttle system activity average energy exceeds predefined power dissipation capacity passive cooling 
joule watcher energy accounting offers information energy regard individual threads system 
average system energy approximates threshold guarantees safe operation dedicated throttling thread halts cpu executing activated 
throttling thread enqueued run queues scheduler high priority highly interactive threads run low priority threads consuming lot energy throttled system cooled 
special care taken display server window system boosted priority level throttling thread long safe operation guaranteed 
throttling system local applications display server throttled activity 
remote applications impose high load display server server throttled resort 
reduction energy consumption operating system various options improve energy efficiency battery powered mobile systems 
operating system monitors high number cache misses restarting thread compulsory misses extend time slice thread reduce number restarts 
additionally scheduling strategies respect cache affinity individual threads improve cache reuse threads shared memory segments order avoid bus transactions cpu stall cycles due cache misses 
addition improvement performance memory conscious scheduling strategies alleviate power consumption system 
high number main memory bus transactions related main memory low number instructions indicates speed execution dominated main memory latency 
noticeable performance degradation scheduler improve energy efficiency throttling clock speed processor working behalf latency bound application 
means clock frequency kept low level applications run close optimal operation point 
application measurements demonstrated operation point application dependant 
analogously policy average power throttling see section throttle threads equivalently priority save energy yield longer battery life 
lower priority lower speed 
special care taken concerning display server timing sensitive threads 
field soft realtime applications movie audio players investigate energy aware apis admission control policies power management real time constraints see subsection 
energy aware api great demand api empower applications affect energy usage soon energy usage patterns contribute runtime context thread soon power class operating system managed resource 
envision types self tuning applications amount energy granted operating system applications tune quality service resolution images sampling rate voice frequency updates adapted requested system lifetime achieved 
scenario requires power admission control policies operating system os interface supports requests energy 
applications tune algorithmic behavior better energy efficiency depending characteristics device energy costs cpu instructions memory access cache size 
application find best trade main memory access data de compression cache 
scenario requires interface feed application information energy related costs line measurements applications induced system activities 
operating system knows going inside hardware adapt execution threads needs user 
upcoming power sensitive devices operating system scheduler move cpu centric approach activity control power related components 
thread specific event driven energy accounting absolute prerequisite reach goal 
approach event driven energy accounting proved offer thread specific energy patterns overhead 
current implementation small number counters intended originally performance profiling 
operating system technology ready deal variety counters locations hardware just small step embed new counters exclusively devoted energy accounting 
expect thread specific speed settings combination event driven energy accounting element operating systems power sensitive devices 
benefits event driven energy accounting power sensitive systems amd 
microcontroller user manual 
anderson dean ghemawat hen leung sites waldspurger weihl continuous profiling cycles gone 
proceedings th symposium operating systems principles sosp oct 
follow scheduling tlb information reduce cache misses 
proceedings th symposium operating systems principles sosp progress session oct 
performance implications locality information usage sharedmemory multiprocessors 
journal parallel distributed computing aug 
benini monitoring system activity os directed dynamic power 
proceedings international symposium low power electronics design islped 
benini de micheli dynamic power management electronic systems 
proceedings international conference computer aided design iccad 
benini selective instruction compression memory energy reduction embedded systems 
proceedings international symposium low power electronics design islped aug 
ellis lebeck vahdat system support energy management mobile embedded workloads white 
tech 
rep duke university department computer science oct 
ellis case higher level power management 
proceedings hotos mar 
flinn satyanarayanan energy aware adaption mobile applications 
proceedings th symposium operating systems principles sosp dec 
chan comparing algorithms dynamic speed setting low power cpu 
proceedings st conference mobile computing networking mobicom mar 
technical report tr icsi berkeley apr 
hitachi 
sh bit risc mcu mpu series sh hardware manual jul 
hong potkonjak srivastava line scheduling hard real time tasks variable voltage processor 
proceedings international conference computer aided design iccad nov 
ibm 
adaptive power management mobile hard drives 
white jan 
intel 
mobile power guidelines rev dec 
intel 
intel strongarm sa microprocessor developer manual apr 
intel 
intel technology jan 
intel anf toshiba advanced configuration power interface specification feb 
lorch smith software strategies portable computer energy management 
ieee personal communications magazine june 
martin siewiorek power metric mobile systems 
proceedings international symposium low power electronics design islped 
martin siewiorek impact battery capacity memory bandwidth cpu speed setting case study 
proceedings international symposium low power electronics design islped aug 
martin balancing batteries power performance system issues cpu speed setting mobile computing 
phd thesis department electrical computer engineering carnegie mellon university 
noble system support mobile adaptive applications 
ieee personal communications feb 
pering energy efficient voltage scheduling real time operating systems 
proceedings th ieee real time technology applications symposium progress session jun 
benini de micheli design battery powered embedded systems 
proceedings international symposium low power electronics design islped jun 
transmeta 
technology crusoe processors jan 
weiser welch demers shenker scheduling reduced cpu energy 
proceedings symposium operating system design implementation osdi nov 
weissman performance counters state sharing annotations unified approach thread locality 
proceedings eighth international conference architectural support programming languages operating systems asplos oct 
