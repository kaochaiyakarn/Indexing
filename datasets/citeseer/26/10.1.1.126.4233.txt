patrick th 
eugster distributed programming laboratory swiss federal institute technology lausanne ch switzerland patrick eugster epfl ch presents linguistic primitives publish subscribe programming events objects 
integrate primitives strongly typed objectoriented language mechanisms serialization multiple subtyping closures deferred code evaluation 
illustrate primitives java showing overcome respective lacks 
precompiler transforms statements publish subscribe primitives calls specifically generated typed adapters resemble typed stubs skeletons generated precompiler remote method invocations java 
categories subject descriptors computer systems organization computer communication computer communication networks distributed systems distributed applications software programming languages programming languages language constructs features concurrent programming structures general terms distributed programming keywords java type publish subscribe event linguistic support partially supported agilent laboratories lombard christian currently visiting swiss federal institute technology lausanne 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
oopsla tampa florida usa copyright acm objects events rachid guerraoui distributed programming laboratory swiss federal institute technology lausanne ch switzerland rachid guerraoui epfl ch 
christian heide damm department computer science university aarhus aarhus denmark damm daimi au dk rpc popular styles distributed programming relies extending notion invocation distributed context offering form remote procedure call rpc 
integration distributed interaction style object oriented programming language thoroughly studied :10.1.1.17.6050
java introduced variant remote method invocation rmi precompiler approach 
abstraction distributed interactions local ones rpc derivatives integrate naturally language distributed programming look simple 
publish subscribe motivated observation rpc best solution integration alternative distributed interaction styles asynchronous rpc tuple space paradigm language studied :10.1.1.113.9679
oki pointed existence distributed event applications publish subscribe interaction style appealing strong decoupling participants time participants don time space participants don know flow data reception sending block participants 
authors suggested libraries distributed interaction publish subscribe javaspaces distributed asynchronous collections implementing standardized api corba event notification services java message service knowledge little effort done inherently support publish subscribe language :10.1.1.102.5354:10.1.1.102.5354
linguistic support publish subscribe goal precisely explore ramifications integrating publish subscribe primitives strongly typed object oriented language 
goal advocate library vs integration approach case publish subscribe linguistic primitives designed simple principles lp type safety 
strongly typed language strong typing enforced local interactions far possible enforced remote object interaction 
type errors recognized compilation alleviating cumbersome debugging distributed applications 
lp encapsulation preservation 
events considered objects instances types 
implementation details revealed systematically describe subscription criteria 
lp application defined events 
events definable application minimal imposed design choices 
lp composable event semantics 
express form qualities service qos different semantics assignable events semantics composable 
combining principles straightforward 
instance combining content subscription event properties preservation encapsulation event objects systematically expressing subscriptions attribute value pairs ruling query languages sql commonly pictured contradiction se 
complexity added requiring transparency subscriptions giving underlying publish subscribe system full access subscription criteria order optimize filtering events factoring redundancies subscriptions different subscribers :10.1.1.22.8918
contributions language primitives expression type publish subscribe programming publish subscribe 
introducing new programming language illustrate primitives known general purpose java language 
way identify set mechanisms provided language strongly enforce support publish subscribe roughly serialization multiple subtyping closures deferred code evaluation 
viewed sufficient necessary conditions shown java incorporate mechanisms 
solution java language relies precompiler transforms specific constructs invocations specifically generated typed adapters 
sense precompiler seen publish subscribe counterpart java rmi compiler explore ramifications integration approach see section 
principles resulted previous experiences objects publish subscribe including applications helped devising domains banking telecommunications :10.1.1.102.5354
obviously principles exclusive application domains identify different requirements 
show interaction paradigms fact contradictory combination paradigms seen powerful tool devising distributed applications 
status primitives implemented infrastructure offered distributed asynchronous computing environment 
infrastructure base library approach integrating publish subscribe java similar principles making mechanisms achievement reflection parametric polymorphism serialization :10.1.1.102.5354
goal emphasize language issues leaving aside issues related distribution implementation distributed architecture underlying algorithms performance scalability addressed publications 
supported complementary approaches believe current intrinsically tied architecture deployed existing publish subscribe systems 
roadmap structured follows section introduces type publish subscribe variant allowed combine objects events 
section discusses semantics primitives syntax java 
section presents implementation primitives 
section discusses issues design alternatives 
section discusses related 
section concludes 

type publish subscribe section introduces model events objects type variant publish subscribe intrinsically coupled model 
depict effects subscribing types java give rough idea primitives publish subscribe interaction simple example 
model core idea underlying integration publish subscribe objects consists viewing events class citizens subscribing events explicitly specifying type 
obvents considering events class citizens specific constructs specific objects strongly enforce support lp 
emphasize object nature events call event objects abbreviate notation simply obvents 
similarly distinguish mainly categories objects introduce sub categories 
unbound objects unbound objects locality unbound semantics depend local resource 
objects serialized transferred address space termed data objects 
obvents obvents represent specific kind unbound objects 
objects notify events nested way contain unbound objects bound objects objects locality bound tied address space remain address space entire lifetime 
may local resources service objects 
subscribers potentially bound object take role subscriber general particular objects subscribe obvents 
obvent class best pictured factory instances notifications events kind event source 
notification event source reified obvent basically object serialized sent wire set destinations copy 
note introduce specific publisher type 
object bound unbound publish obvents 
subscribers introduced mainly illustration purposes 
see shortly application explicitly dealing objects view obvent handlers simply handlers 
effects publishing obvents publishing obvent understood form distributed object creation created objects clones acts template 
precisely distinct copy published obvent created subscriber obvent global uniqueness suppose obvent published address space address space contains subscribers receive new distinct clones say 
obvent local uniqueness scenario address space contains subscriber receive new obvent 
subscription sense seen contract hosting objects created copies published objects 
note obvent published twice distinct copies created subscriber 
type subscription type obvents basic subscription criterion strongly enforce integration publish subscribe interaction language way respects type safety lp matching notion event kind event type type scheme programming language subscription scheme type received events known compile time type checks performed 
illustrates intuitive idea underlying approach recurring example publish subscribe interaction stock trade application 
possible scenario 
stock market denoted publishes stock quotes receives purchase requests 
spot price requests satisfied immediately market price requests purchasing quotes day criterion fulfilled 
requests expire broker convenience intermediate party bank handle requests behalf instance issuing spot price requests stock market broker criterion satisfied 
note subscribing type receives instances subtypes objects type 
type publish subscribe type publish subscribe java strongly typed object oriented languages eiffel inheritance hierarchy determines conformance subtype relation 
type schemes notions type type type definition interface signature class concrete type type implementation identical 
java type system inspired separation inheritance subtyping sense 
avoid problems known multiple inheritance java offers single inheritance introduces multiple subtyping interfaces 
java types defined ways explicit declaration type explicitly declared declaring interface subtype superinterfaces interface extends interface represents subtype type declared 
implicit declaration defining class implicitly declares type time gives class implements 
class inherits class type defined subtype type 
class subtype multiple interfaces interface implemented class type defined subtype note class implements single interface adding new methods defines new type subtype type 
consequence intertwining types classes java possible subscribe interfaces classes 
expressing type publish subscribe express event distributed interaction type publish subscribe paradigm introduce primitives 
give overview give details section 
publishing obvent published primitive publish leading simple syntax publish statement triggers creation copy subscribed object rules described 
sense publish primitive seen distributed variant new primitive languages 
syntactically publish primitive bears common return primitive throw primitive raising exception java 
subscribing attempt satisfy lp lp lp chose obvent type basic subscription criterion 
pure static subscription scheme topics called subjects types case shown offer limited expressiveness 
observation motivated content publish subscribe called property publish subscribe subscription takes properties obvents consideration 
subscribing desired properties expressed predicate filter 
combine subscription type declaration filter subscription subscribe 
expression enclosed brackets represents block provided application expresses handle obvents type represented formal argument called order return boolean value indicating obvent interest 
second expression block evaluated time event successively passes filtering phase corresponds subscriber object 
formal argument represents event interest case 
subscription handle returned subscription expression 
allows things activation deactivation subscription 
motivation capturing code filtering closure delay evaluation avoid redundant filtering wasting network bandwidth interesting apply filters foreign hosts possibly entirely dedicated filtering 
gathering filters subscribers host compound filter generated factors redundancies individual filters 
doing performance significantly improved :10.1.1.22.8918
closure capture code applied evaluation received events enables avoiding callback mechanism greatly enforces type safety great advantage regrouping code related subscription single succinct expression 
note easily subscribe obvents type doing subscription subscribe return true example consider stock market example introduced 
stock quotes published stock market received brokers 
stock quotes carry set attributes amount price stock quotes 
shows java code simple stock quotes stock quote subscribers 
stock market publish stock quote obvent doing new mobiles publish give example subscription expresses interest stock quotes group price subscription subscribe return system print got offer system println easily seen stock quote published example satisfies criteria 

section illustrates mechanisms strongly support implementation publish subscribe language model 
discuss syntax precise semantics language primitives informally show fit java language leading new instance new expression respectively 
refer extension 
classes interfaces related approach package java 
inside obvents obvents objects serialized sent wire 
java incorporates default serialization mechanism exploited subtyping java io serializable 
basic type basic java obvent type subtypes type 
eases implementation obvent model general state mechanism enforces realization model language stock quote obvents public class implements obvent private string private float price private int amount public string return public float return price public int return amount public string float price int amount price price amount amount public class extends public string float price int amount super price amount stock quote notifications lm default serialization mechanism 
serialization mechanism eases transformation event objects low level messages 
principle strongly supports lp default serialization mechanism developers relieved burden implementing specific operations hooks obvents 
design phase obvents cut essential meaning event 
obvent semantics obvents viewed reified messages message objects 
different semantics messages manifest semantics imaginable obvents 
kind characteristics delivery semantics associated obvents expression quality delivery 
unreliable obvent published guarantee received subscriber 
best effort attempt deliver 
assumed default 
reliable successfully published reliable obvent received subscriber long 
subscriber fails eventually deliver obvent 
certified obvents subscriber temporarily disconnects fails eventually deliver obvent 
totally ordered obvents furthermore notified total order subscribers roughly spoken subscribers deliver obvents deliver order term subscriber side order 
package java import java io obvents public interface obvent extends serializable 
public interface reliable extends obvent public interface certified extends reliable public interface extends reliable public interface extends reliable public interface extends public interface timely extends obvent public long public long public interface extends obvent public int exceptions public class extends exception 
public class extends 
public class extends 
public class extends 
subscription handle public final class subscription public void activate throws public void activate long id throws public void deactivate throws public void public void int 
obvents exceptions subscriptions fifo ordered obvents published object delivered objects subscription matches order published publisher side order 
causally ordered type obvents delivered order published determined relationship 
note notion event represents message send receive 
translate respectively publishing receiving obvent case global order 
semantics called transmission semantics associated obvents 
govern handling obvents transit respect obvents 
obvents priorities delivery obvents delayed defer obvents higher priority 
timely similarly obvents delayed prioritize obvents 
obvents expire obsolete 
different semantics mutually exclusive 
instance obvents certified notion priority certified totally ordered time 
appears contradictions reside instance reliable simultaneously timely limited obvents total fifo causal order priorities 
cases type takes precedence illustrates dependencies different semantics 
note explored possible ramifications combinations identification implementation semantics ongoing task 
note kind order expressed obvent type instances satisfy order respect instances type subtypes supertypes order 
reliable unreliable timely priority fifo order certified total order causal order stronger dependencies obvent semantics expressing obvent semantics model characteristics associated obvents part obvents 
sense obvent reflects semantics seen context correct handling obvent assured moment transfer 
instances obvent type bound obvent source characteristics 
addition obvent type contract publishers subscribers chosen subtyping express limited form qos mandated lp 
shows java types corresponding different semantics outlined 
characteristics combined scheme requires mechanism expressing multiple subtyping 
lm multiple subtyping 
simple subtyping eases expression addition different event semantics multiple subtyping enforces composition semantics 
independent assured form multiple inheritance offered cecil eiffel subtyping types interfaces java mixins flavors ada 
term multiple subtyping simply denotes ability expressing multiple specialization relationships 
publish primitive obvent published means asynchronously sent concerned subscriber 
java language specification grammar lalr syntax introduce new statement publish expression expression non null expression type obvent opposed classes relying java serialization java serializable root type faked formal parameters root type java lang object expecting object specific type java io serializable throwing exception actual argument type 
prefer detecting type errors compilation 
primitive throw exception type signalling problems transmitting obvent 
summarizes basic exceptions 
subscribe primitive briefly shown section introduce second primitive subscribe express subscription 
syntax subscription expression combines subscription type closure declaration representing filter full signature closure boolean 
declaration second closure representing handler full signature void 
subscription expression syntax java details subscribe identifier block block represents type widened obvent type special case 
filter represented block return expression type boolean handler returns 
creation subscription returns object type subscription cf 

handle uniquely identifies subscription host 
subscribe identifier block block precise syntax subscription statements handlers handlers close closures known smalltalk block closure cecil anonymous function represent intuitive way handling callbacks underlying event dissemination system 
languages java lack support closures higher order functions callbacks implemented having application provide callback object callback method 
argument method represents effective event interest 
java interface implemented callbacks commonly called listener 
enforce strong typing type formal argument callback method listener conform type event interest 
easily achieved languages support parametric polymorphism case leads isolating event handling separate class 
closure hand enables regrouping code related subscription single succinct expression handlers specific type closures language provides general form closures easily support integration subscription expressions 
lm closures 
handlers specific type closures language provides general closures supports expression safely typed subscription primitives 
viewing closures objects handlers take role subscriber objects outlined section 
filters akin handlers filters closures specific signature 
concentration subscription related code syntax case filters conducted desire confining code filtering revealing 
enables migration code foreign hosts factoring redundancies filters different subscribers gathered individual hosts 
compilation filters deferred sense similar paradigm deferred code known level programming generalized levels multi stage programming advocated metaml 
lm deferred code evaluation 
mechanism providing form deferred code evaluation easily support expression safely typed content filters way supports optimizations avoiding redundant queries checking code 
restrictions closures local closures vary degree self containment advocate class block closure smalltalk variables scope closure declaration compilation variables bound entire lifetime closure executed context variables visible 
avoid binding variables anonymous class java access final variables enclosing block addition non local variables members scope compilation 
handlers described previously adopt semantics 
distributed closures case filters requires restrictions 
variable filter object object type known host filter evaluated forcing transfer code 
similarly method invocation performed variable static call force transfer code 
case java class compiled types uses byte code difficult foresee effects calls classes byte code 
method invocations including constructors cut essential ones order avoid filters opaque code types unknown filtering hosts 
invocations method invocations allowed filter nested invocations variables 
variables variables allowed filter formal argument representing filtered obvent local variables final outer variables enclosing block class members 
types variables restricted primitive types int object counterparts java lang integer including java lang string 
restrictions enforce location independency expressed filter offering possibility applying favourable stage remote host reduce network load filtering cost 
filter declares local variables types performs invocations differing ones described migration problematic 
scenario filter applied locally cf 
section 
note restrictions fully guarantee location independency filter java object referred variable gives access meta object representing class java lang class undesired things done 
come back particular case section 
investigating precise semantical definition filters aimed ensuring mobility 
thread policies obvent reached process hosting interested subscriber delivered executing handler 
comparable rpc style invocation arbitrary method bound object sense thread target object process invocation blocked completion invocation main difference invocation context rpc yield reply sent back invoker 
different levels concurrency supported 
context distinguish kinds thread policies multi threading handler executed concurrently number obvents 
semantics assumed default case ordered obvents 
single threading handler processes obvent time 
easily extend set instance thread policy ensuring instance obvent class processed time 
note java integrates mechanisms concurrency control policies achieved 
ensure obvent processed time handler easily write final object lock new object subscription subscribe 
synchronized lock handler languages integrate concurrency mechanisms obtain sophisticated concurrency control involve publish subscribe system concurrency issues goal optimizing concurrency thread policies explicit 
case straightforward express subscription handle object uniquely defines subscription 
control parameters corresponding methods added subscription type shown 
general expression qos probably tedious task devising language primitives 
qos increasingly important programming distributed scale knowledge little inherently express qos programming language way api 
managing subscriptions explained subscribe primitive creates expression representing subscription 
subscription activated triggering effective action subscribing deactivated representing action 
activating subscription subscription activated call activate method corresponding subscription handle 
method throws exception subscription issued subscription activated 
subscription activate 
variant activate method long argument combination certified events 
events lifetime subscriptions exceed actual lifetime hosting process 
recovering failure intentionally deactivated subscription concerned subscription locally uniquely identified method 
deactivating subscription similarly action expressed deactivate method defined subscription handles throw exception type 
deactivate 
immediate consequence subscriptions cancelled inside subscription associated handler 
interesting particular event point view concerned subscriber supersedes events signals absence events 
handler handle final variables declared enclosing block variable subscription handle assigned declared outside block instance private attribute enclosing class 
activation deactivation subscriptions performed unlimited number times 
corresponding exceptions thrown attempt de activating de activated subscription 

implementation issues section depicts implemented primitives publish subscribe interaction java way satisfies principles stated section 
general implementation choices lines extensions java language pizza adding parametric polymorphism algebraic types closures multi methods refrain incorporating new features java virtual machine extending compiler modifying existing packages classes java environment 
advocate precompiler publish subscribe counterpart compiler generation remote invocation proxies 
remote invocations benefit inherent support language require specific primitives remotely invocable java types compiled 
generating obvent specific classes psc precompiler translates publish subscribe statements expressions calls classes run obvent types class making primitives 
distributed architecture distributed asynchronous computing environment infrastructure initially developed general architecture support publish subscribe interaction specialized type publish subscribe 
architecture roughly pictured relying class dissemination 
obvent class mapped dissemination channel representing multicast group refer multicast class 
architecture multicast classes implemented different multicast protocols guarantees ranging strong guarantees exploiting broad variety primitives group communication causal ordering primitives weaker guarantees strong focus scalability network level protocols ip multicast gossip protocols 
adopted reflexive approach specific channels disseminate protocol messages subscription unsubscription requests advertisement publishing obvents 
messages obvents allow distributed processes learn possibly new multicast classes 
typed adapters avoid making java virtual machine exploit class dissemination adopt adapter concept 
adapters intermediate entities communication system application role consists mainly mediating events serialized representation objects 
case adapters mainly mediate serialized generic objects strongly typed obvents 
terms adapters type specific generated obvent class psc compiler 
obvent class psc generates class code publishing subscribing instances similarly support subscriptions types interfaces obvent type psc generates class code subscribing instances illustrates adapter obvent type translating primitives psc precompiler publish subscribe statements expressions translated method invocations 
publishing published obvent disseminated adapter dynamic type known runtime directly transformed call publish corresponding adapter class 
add publish method obvent interface interestingly parametric polymorphism applied class adapters library approach applied due purely static nature adapters :10.1.1.102.5354
import java public final class public static subscription subscribe subscriber public static subscription subscribe subscriber class public static void publish throws 
obvent adapter type java body automatically generated psc obvent class public class 
generated psc public void publish throws publish 
accordingly expressing publishing obvent publish transformed call publish method provided static type widened obvent 
publish note obvent class implement public argument constructor order enforce java built mechanisms 
subscriptions similarly transforming subscriptions static calls corresponding obvent types subscriptions interfaces impossible 
subscriptions handled differently 
short subscription statement involving type transformed invocation subscribe methods class possibly package java shown 
instance anonymous class representing subscriber created handler subscription expression subscribe 
handler implements subscriber interface new subscriber public void notify obvent handler package java import java io obvents public interface obvent extends serializable generated psc public void publish throws top level public final class 
public static subscription subscribe subscriber public static subscription subscribe subscriber filters public interface filter 
public interface extends filter 
public interface extends filter public boolean eval obvent handlers public interface subscriber public void notify obvent details obvent types java anonymous class declaration represents expression passed argument subscribe method corresponding adapter 
filters handling filters represents complex task precompilation 
filter statements deviate guidelines strongly enforce mobility previous section similarly transformed anonymous class representing unary predicate type shown applied locally 
subscription expression subscribe filter 
transformed invocation corresponding adapter class subscribe new public boolean eval obvent filter new subscriber 
depicted restrictions respected psc generates intermediate representation filter way similar done application specific handlers low level message filters applied locally expressed neutral specification language filters promote native language syntax 
precompiler generates tree constructs specific instance parse trees smalltalk 
invocation tree representation invocations filter generated root represents filtered obvent node represents method invocation 
leaf node stands outcome condition value obtained applying methods nodes path downto leaf nested fashion nodes represent attribute accesses 
evaluation tree second tree representing relationships leaves tree outcome filtering generated nodes represent mainly logical combinations subnodes aso leaves leaves tree 
information stored instance 
general description approach instrumenting java class parse trees generalization deferred code evaluation expressed filters subject 

discussion section discusses issues including design alternatives interoperability issues 
contrast type publish subscribe rmi pointing fact paradigms contradictory complementary 
fork explored alternative primitives expression publish subscribe obvent model outline believe come mind 
alternative expression publish subscribe obvent model fork similar primitive notification delivery 
obvent variable new notification assigned variable block representing handler executed time new value put variable null subscribe 
null primitive case java implemented similarly solution 
syntax difficult express problem occur case fork primitive spawning new coroutine execution corresponding block takes place 
notifications delivered continuously leading repeated evaluation handler 
absence subscription handle subscription referred outside expression 
dealt inside handlers parameterless unsubscription statement having handler return boolean value obvent evaluation signal subscription pursued 
variant leads restrictive solution subscription cancelled event delivered 
desirable cases possibility cancelling subscription 
filter note alternatively model think implementing filters giving application possibility instantiating variable sense simultaneously template object new subscribe filtering events matching template objects offers little expressiveness template objects usually compared attribute wise events making matching attribute range values attributes objects matching nested attribute difficult express 
alternatively matching performed inside template object renders matching opaque disabling optimizations targeted avoiding redundancies 
callback outlined section common way implementing callback language java consists asking application provide callback object implementing interface 
listener second considered alternative promoted nearly java api common publish subscribe engines introduces specific listener subscriber type 
type depicted inherently implemented anonymous class representing handler case explicitly implemented instantiated application catch event notifications subscriber sr subscription subscribe filter sr declared notify method weakly typed argument address lp 
dynamic overriding notify method adding variant argument type subtypes obvent order subscribe instances public void notify 
allow handlers obvent types provided subscriber add type safety 
dispatching dynamic overriding notify method called multi method 
dispatching method selection java clos cecil support multi methods 
dispatching java similarly offers dynamic uni dispatch class object referenced invoked variable representing dynamic type determined runtime static 
prevents typed solution dynamic overriding notify method 
approaches overcoming java lack multi methods ranging reflection modifying compilation extending virtual machine 
common technique double dispatch applied case solutions specific subscriber generated implemented obvent type subscriber type handles 
remove main advantage approach listeners consists giving freedom developer defining event handlers types including subtypes subscribed types 
addition required dynamic multi dispatch high price pay especially introduced publish subscribe primitives fact improve type safety 
note furthermore scenario multiple subscriptions subscriber type subtyping related types straightforward handle different filters combined event delivered times 
hand callback approach enables easy expressing thread policies subtyping developer express desire processing instance obvent type time 
multiple subtyping introduced express limited form qos obvents express complex event handling semantics 
obvents vs objects languages provide default serialization mechanism type java java io serializable obvents instances type 
general case shown distinction bound unbound objects object obvent opposite mandated type system singly rooted requiring extensions languages ada integrate mentioned serialization mechanism root smalltalk possibly including publish method 
obvent publishing obvents subscribing obvents 
case bear particular dangers prohibited 
similarly subscriptions issued inside obvents subscription expression affect object declared 
effective handlers subscribers referenced passed particular attributes obvents 
underline characteristic subscriptions subscription type serializable 
note second design alternative application object defined subscriber implementing interface notify method 
equipping objects ability subscribing translated adding notify method root type 
furthermore subscribers attributes obvents 
danger endless recursions ob vent subscribes easily banned considering subscription part state subscribed obvent published copies obvent reissue subscriptions performed master copy 
rpc publish subscribe originally introduced remote procedure call rpc remote invocations quickly applied objectoriented languages leveraging form remotely accessible entity guardians argus follow clu network objects modula obliq object potentially network object course remote objects java rmi 
invocations vs events mainly differences remote invocations event model interaction styles rpc model promotes abstraction remote object interactions local ones 
doing synchronous rpc inherently integrated language requires little support inherent interaction abstraction 
contrast model promotes interaction styles event publish subscribe interaction remotely method invocations locally making application developer aware distribution 
object passing semantics remote invocations possible ways passing objects proxy object created receiver address space value 
distinction goes notion granularity mediated section large locality bound objects interact remote invocations invocation arguments small unbound objects large remotely invocable objects 
contrast obvent model objects primarily passed value 
publish subscribe rpc contradictory complement 
combination represents powerful tool devising distributed applications passing object obvents 
hand hand collaboration interaction styles illustrated reconsidering simple example section 
publish subscribe interaction dissemination stock quotes appropriate scaling easily brokers appropriate interaction stock market purchasing stock options remote method invocation 
shows java rmi publish subscribe hand hand 
correctly handle serialization remote objects sense rmi rmi serialization mechanism enabling transparent integration rmi publish subscribe 
current implementation java rmi presents severe caveat especially visible integration events 
fact distributed garbage collection keeps remotely accessible object garbage collected long proxy object 
publishing event containing remote object proxy created subscriber sum time proxy garbage collected java virtual machine hosting represented object notified 
consequently single subscriber crashes remote object garbage collected 
weaker implementation java rmi proposed problem circumvented 
pure content java statically typed languages uses name equivalence types means types compatible declared 
different types exactly parents type hierarchy instances assigned variables vice versa 
type scheme allows said enforce structural equivalence types 
reflection subscribing obvents interest certain cases subscribe obvents implement method specified name formal actual parameters irrespective types obvents 
java just smalltalk provides introspection mechanisms enable querying objects type members attributes methods including facilities dynamically reading writing ones invoking ones 
java object gives access features method getclass enable expression purely content subscription subscription subscribe obvent 
class getclass method null return invoke null equals new float 
obvent type implements method class captured filter handler similarly dynamically extract information conforming event 
feature giving flexibility application developer opposed requirement type safety lp consider introspection necessary language mechanism current java prototype supports untyped filters 
shown currently existing engines lack reflection programming languages easily providing specific event types explicitly implement form introspection self describing messages advocated 
tuples back roots way achieving structural equivalence consist coming back concept tuples linda see section ancestors publish subscribe :10.1.1.113.9679
sense publish primitive extended order accept number actual arguments import java rmi import java rmi server import java user public interface extends remote 
stock market public interface stockmarket extends remote public boolean buy string float price int amount buyer throws 
stock quote obvents public class implements obvent private string private float price private int amount public string return public float return price public int return amount public string float price int amount price price amount amount public class extends private stockmarket market public stockmarket return market public string float price int amount stockmarket market super price amount market market subscribing final broker broker 
subscription subscribe return boolean bought buy broker 
buying stock quotes string float price int amount stockmarket market publish price amount market inversely subscribe primitive arbitrary number formal arguments subscription subscribe string float price int amount stockmarket market filter handler subscription criteria filter accessed handler 
argue languages inherently support structural equivalence instrumented distributed interaction style relies paradigm believe lead appealing style distributed programming requiring complex filtering 
language integration vs interoperability language integration contradictory requirement interoperability expressed 
publish subscribe nowadays application various contexts virtual reality group collaboration real time mainly due scalability properties achieved strong decoupling participants 
just corba added interoperability rpc neutral interface description language idl approaches neutral event description language edl help adding interoperability publish subscribe 
proposals languages plentiful omg object definition language odl cambridge event architecture languages tuple space implementations object interchange language oil objective linda xml 
believe specification language help adding interoperability system sense types package java seen java mapping 
events case pictured structures cases encompass methods code edl provide interoperability 
issue passing objects value language tackled corba currently investigating impact application concepts system 

related publish subscribe engines plentiful little integrating publish subscribe interaction object oriented programming language 
overview closest efforts focus linguistic support alternative distributed interaction styles rpc discussed previously 
publish subscribe event solutions focus language integration interoperability 
eco approach integrating event interaction discussed starting general event model 
authors ways adding event semantics object oriented language extension specific constructs addition specific classes adopting approach 
eco events constraints objects model incorporates events specific language constructs complementary objects necessitate considerable number language add ons 
precompiler handle extensions mentioned gives details implementation 
cea cambridge event architecture cea promotes publish register notify interaction style intermediate event trader mediates publishers subscribers 
cea object model events described odmg object definition language odl alternative specification languages xml mentioned 
events typed definition language java mappings mentioned 
filtering mechanisms included viewing events sets attributes forcing application define filters attribute value pairs 
message passing language integration evolved communication paradigms 
distributed interaction paradigms message passing consisting basically usually asynchronous send messages mainly single sends addressing groups similar publish blocking receive primitive 
distributed interaction paradigms message passing extensively parallel concurrent programming 
early mainly procedural process oriented languages occam named unidirectional channels sr semi synchronous sends synchronous remote procedure calls included form message passing 
tuple spaces known tuple space paradigm represents distributed interaction scheme closest publish subscribe :10.1.1.113.9679
original tuple space introduced parallel computing linda viewed form distributed shared memory main difference structured form data inserted retrieved tuple space tuples inserted tuple space sets values tuples read space specified set formal actual arguments ones seen placeholders defining types corresponding elements ones define values corresponding elements candidate tuple 
decoupling original tuple space linda form name addressing tuple elements strings carrying specific name 
idea reused original publish subscribe variant topics possibility name element linda straightforwardly transposed topic hierarchies expressing containment relationships topics 
general publish subscribe paradigm strongly influenced tuple space specifically strong decoupling participants time space 
publish subscribe vs tuple space publish subscribe increases decoupling adding flow decoupling replacing synchronous interaction pulling subscribers asynchronous notification mechanism 
fact original tuple space primitives push tuple space similarly publish read read tuple erasing withdraw tuple space 
publish subscribe adds asynchronous callback mechanism omitting equivalence sacrifices concurrency control scalability 
linguistic support series attempts transform structured form tuples object form mainly extending exact type equivalence tuple elements linda notion subtyping 
early approaches integrating tuple space object language smalltalk promoted tuples sets objects approaches objective linda considered tuples just events case single class citizens added form content matching templates 
callback mechanisms added javaspaces tspaces java supporting publish subscribe interaction 
contrast approach ones basically promote publish subscribe interaction weakly typed class channel advocate matching 

concluding history computing paradigms implemented separate libraries way programming languages 
monitor abstraction concurrent programming introduced hoare instance implemented library specific language construct portal 
nowadays java object potentially monitor 
evolution apply paradigms shown java currently includes limited form pointers library java lang ref main ancestors integrates pointers class concept 
aim advocating integration vs library approach support publish subscribe program ming 
hope practical experience currently gathering library approach integration approach able answer question kind approach adequate achieve object oriented publish subscribe :10.1.1.102.5354

acknowledgments ideas refined discussions andrew black oregon graduate institute science technology joe agilent laboratories edinburgh martin odersky mathias zenger michel swiss federal institute technology lausanne nicolas ricci lombard geneva 
mentioned anonymous reviewers valuable comments suggestions 

aguilera strom sturman chandra :10.1.1.22.8918
matching events content subscription system 
th acm symposium principles distributed computing 
maffeis 
software bus middleware java platform 
international workshop reliable middleware systems th ieee symposium reliable distributed systems 
andrews olsson 
evolution sr language 
distributed computing apr 
bacon moody bates hayton ma mcneil seidel 
generic support distributed applications 
computer mar 
birman hayden xiao budiu minsky 
bimodal multicast 
acm transactions computer systems may 
birman joseph 
reliable communication presence failures 
acm transactions computer systems feb 
nelson 
implementing remote procedure calls 
acm transactions computer systems feb 
boyland castagna 
parasitic methods implementation multi methods java 
th acm conference object oriented programming systems languages applications 

portal language description 
number lncs 
springer verlag 
cardelli 
language distributed scope 
th acm symposium principles distributed computing 
cardelli donahue jordan kalsow nelson 
modula type system 
th acm symposium principles programming languages 
carzaniga 
architectures event notification service scalable wide area networks 
phd thesis politecnico di milano dec 
ch 

efficient rmi java 
acm conference java grande 
chambers 
cecil language specification rationale version 
technical report uw cs technical report department computer science engineering university washington dec 
cook hill canning 
inheritance subtyping 
th acm symposium principles programming languages 

need know middleware mission critical interprocess communication white 
www com 
cugola fuggetta 
exploiting event infrastructure develop complex distributed systems 
th international conference software engineering 
deering cheriton 
multicast routing datagram internetworks extended lans 
acm trans 
computer systems may 
ellis stroustrup 
annotated manual 
addison wesley 
engler wallach kaashoek 
design implementation modular flexible fast system dynamic protocol composition 
technical report tm massachusetts institute technology laboratory computer science 
th 
eugster guerraoui 
effective multicast programming large scale distributed systems 
technical report dsc swiss federal institute technology lausanne 
th 
eugster guerraoui 
content publish subscribe structural reflection 
th usenix conference object oriented technologies systems 
th 
eugster guerraoui 
kermarrec 
lightweight probabilistic broadcast 
ieee international conference dependable systems networks 
th :10.1.1.102.5354
eugster guerraoui 
distributed asynchronous collections abstractions publish subscribe interaction 
th european conference object oriented programming 
fetzer 
fail aware publish subscribe erlang 
th international erlang user conference 
floyd jacobson mccanne liu zhang 
reliable multicast framework light weight sessions application level framing 
ieee acm transactions networking nov 
freeman arnold 
javaspaces principles patterns practice 
addison wesley 
gelernter :10.1.1.113.9679
generative communication linda 
acm transactions programming languages systems jan 
gosling joy steele 
java language specification second edition 
addison wesley 
meier nixon cahill jul filtering scalability eco distributed event model 
th international symposium software engineering parallel distributed systems 
sharma 
java message service 
technical report sun microsystems 
hoare 
monitors operating system structuring concept 
communications acm oct 
holbrook singhal cheriton 
log receiver reliable multicast distributed interactive simulation 
acm conference applications technologies architectures protocols computer communication 
ingalls 
simple technique handling multiple polymorphism 
acm conference object oriented programming systems languages applications 
international organization standardization 
ada manual language standard libraries 
ansi iso iec 
jr language 
digital press second edition 

object oriented distributed programming objective linda 
international workshop high speed networks open distributed platforms 
koenig 
messages vs objects application integration 
distributed computing apr 
lamport 
time clocks ordering events distributed system 
communications acm july 
lehman wyckoff 
tspaces wave 
hawaii international conference system sciences 
liskov 
distributed programming argus 
communications acm mar 
liskov 
history clu 
acm sigplan notices mar 
liskov shrira 
promises linguistic support efficient asynchronous procedure calls distributed systems 
acm conference programming language design implementation 
mathur hall jahanian prakash rasmussen 
publish subscribe paradigm scalable group collaboration systems 
technical report cse tr university michigan eecs department 
matsuoka kawai 
tuple space communication distributed object oriented languages 
rd acm conference object oriented programming systems languages applications 
meyer 
eiffel language 
object oriented series 
prentice hall 
moon 
object oriented programming flavors 
acm conference object oriented programming systems languages applications 
nielson nielson 
level semantics code generation 
theoretical computer science jan 
odersky wadler 
pizza java translating theory practice 
th acm symposium principles programming languages 
oki siegel skeen 
information bus architecture extensible distributed systems 
th acm symposium operating system principles 
omg 
notification service standalone document 
omg june 
omg 
common object request broker architecture specification 
omg february 
omg 
common object services specification chapter event service 
omg march 
paul lin bhattacharyya 
reliable multicast transport protocol rmtp 
ieee journal selected areas communications apr 

object space distributed parallel 
th ieee workshop trends distributed computing systems 

transputer special language occam 
byte magazine aug 

smalltalk reflective language 
international conference metalevel architectures reflection 
segall arnold 
elvin left building publish subscribe notification service quenching 
australian unix open systems user group conference 
skeen 
publish subscribe architecture publish subscribe overview 
www com 
sun 
java core reflection api specification 
sun 
java remote method invocation distributed computing java white 
sun sturman 
gossip reliable multicast large scale high throughput applications 
ieee international conference dependable systems networks 
taha sheard 
multi stage programming 
acm international conference functional programming 
tibco 
tib rendezvous white 
www rv tibco com 
yonezawa briot 
object oriented concurrent programming abcl 
acm conference object oriented programming systems languages applications 
