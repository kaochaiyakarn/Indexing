index analysis utility surajit chaudhuri vivek narasayya microsoft research microsoft research microsoft com databases get widely deployed increasingly important reduce overhead database administration 
important aspect data administration critically influences performance ability select indexes database 
order decide right indexes database crucial database administrator dba able perform quantitative analysis existing indexes 
furthermore dba ability propose hypothetical indexes quantitatively analyze impact performance system 
impact analysis may consist analyzing workloads database estimating changes cost workload studying index usage account projected changes sizes database tables 
describe novel index analysis utility prototyped microsoft sql server 
describe interfaces exposed utility leveraged variety front tools sketch important aspects user interfaces enabled utility 
discuss implementation techniques efficiently supporting indexes 
framework extended incorporate analysis aspects physical database design 

enterprise class databases require database administrators responsible performance tuning 
database administrators need take account resources database system application requirements characteristics workload dbms 
large scale deployment databases minimizing database administration function important 
project microsoft research investigating new techniques easy tune external internal database system parameters achieve competitive performance 
important area tuning required determining physical database design specifically choice indexes build database 
index selection problem studied early importance problem recognized 
despite long history area fundamental reasons problem addressed 
index selection intrinsically hard search problem 
enterprise permission digital hard copies part personal classroom uw granted fee provided copier distributed profit commercial copies bear notice lull citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmod seattle wa usa acm class database large number possible single multi column indexes 
modem query processors indexes innovative ways index intersection indexed access hard enumerate search space efficiently 
problem picking right set indexes simply solved search algorithm 
enterprise databases simply complex dba hit accept button recommendations index selection tool able perform impact analysis suggested index recommendations 
examples impact analysis queries updates executed days slow changes 
queries benefit index proposing add extent 
best knowledge adequate utility exists allows undertake impact analysis study 
absence index selection tool index analysis utility great importance allows dba propose hypothetical indexes quantitatively analyze impact performance system 
terms hypothetical interchangeably 
utility provides natural back index selection tool enumerate pick appropriate set indexes index analysis utility probe determine goodness set indexes 
context project built index selection tool index analysis utility 
index selection tool described leverages index analysis component :10.1.1.114.771
focuses index analysis utility 
provide overview index analysis utility system architecture index selection 
overview architecture illustrates related system components task index selection 
microsoft sql server database server 
term mean set indexes sizes table database 
hypothetical con may consist existing real indexes hypothetical indexes 
define workload set sql statements 
hypothetical configuration analysis hca engine supports sets interfaces simulating hypothetical configuration summary analysis data resulting simulation 
hca engine implemented library client tools link middle ware process serves multiple clients directly server extensions 
prototype implemented hca engine dynamic linked library dll 
hypothetical interfaces client tools configuration simulation define workloads define hypothetical configurations evaluate workload hypothetical configuration 
evaluating workload configuration estimate cost queries workload configuration real indexes configuration materialized 
addition tell query indexes configuration answer query 
dotted line shows interfaces hypothetical configuration simulation available directly sql server extensions 
software engineering reasons hca engine encapsulates functionality provides complete set interfaces index analysis client tools 
discuss hca interfaces discuss implementation sql database describing necessary extensions server interfaces 
summary analysis interface possible perform sophisticated summarization workloads configurations performance current configuration projected changes new configuration 
examples analysis analyze workload counting type query select insert update delete 
estimate storage space hypothetical configuration 
identify queries workload affected addition removal indexes 
index analysis microsoft index ui selection tool simulation tools hypothetical configuration analysis engine extended server sql inte faces microsoft sql server database 
architecture overview rest organized follows 
section review related area 
section presents interfaces hypothetical configuration simulation describes implementation microsoft sql server 
section describes summary analysis interfaces implementation provides example session illustrates synergy different summary analysis components assist dba selecting right indexes database 
discuss conclude section 
related substantial body literature physical database design dating back early best knowledge previous addressed problem estimating impact possible changes index configurations database size comprehensive manner 
stonebraker discusses views simulating hypothetical databases 
approach creates query simulate hypothetical database relies actual execution 
computation intensive 
approach relative estimation cost enables large class analysis low cost 
furthermore provided efficient mechanism implement hypothetical structures sampling techniques 
index selection algorithms exploit infrastructure exploring space alternatives pick optimal index configuration :10.1.1.114.771
papers focus efficiently searching space alternatives 
addition significant body index selection including 
index selection serious shortcoming index selection tools stay step optimizer see discussion 
case papers discuss support hypothetical configurations 

simulating hypothetical configurations section interfaces hypothetical configuration simulation describe interfaces implemented efficiently 
foundational concepts supported hca engine set context rest section 
workload 
workload consists set sql statements 
modem databases support ability generate representative workload system logging activity server specified period time 
example microsoft sql server sql server profiler provides functionality 
hypothetical 
configuration consists set indexes consistent schema constraints 
example table uniqueness constraint column index part configuration 
likewise table clustering index 
configuration may database scaling value associated 
database scaling value set multipliers captures size database 
multiplier mj associated table tl 
hypothetical configuration database scaling value represents database table ti database times number rows current database 
scaling factor represent database significantly larger smaller current database database relative sizes tables different today database 
result hca engine possible able project changes current database dimensions changes changes database size 
estimation projected changes 
effect projected changes current database captured ways 
hca engine supports ability estimate cost query workload respect hypothetical configuration 
second hca engine estimate index usage project indexes hypothetical configuration answer query workload 
interfaces hypothetical configuration simulation approach designing interfaces hypothetical configuration simulation influenced observation simulating hypothetical configuration consists estimating cost queries workload usage indexes 
presenting interfaces focus functionality syntax 
define workload workload name qi fi 
fd 
tq fn define configuration configuration name tablet set database size configuration name tablet table row count estimate configuration workload name configuration name remove workload workload name configuration name cost usage workload name configuration name command describe semantics command information generated command executed refer information analysis data 
simplicity analysis data relations non normal form 
implementation multiple normalized tables store analysis data 
create workload command associates name set queries 
queries specified file passed directly command 
workload information generated result executing command shown table 
frequency value ft associated query qi workload 
frequency interpreted hca engine mean workload consists fi copies query qi 
addition hca engine uses extended server interfaces expose parsed information query associate set properties query 
examples query properties sql text set tables referenced query columns query conditions 
define configuration command effect registering new configuration associating set indexes configuration 
indexes may existing real indexes hypothetical indexes 
index exists index name optionally substituted table 
set database size command sets scaling values table database 
table shows information associated configuration hca engine 
information associated index shown table 
indexes real hypothetical entities supported database information available system catalogs 
section describe hypothetical index created 
note syntax define configuration general include features physical database design materialized views addition indexes 
main challenge adding new hypothetical features arises having extend syntax define configuration creation hypothetical features supported efficiently 
workload query frequency query properties name id sql text tt table 
workload information configuration indexes name configuration current conf table 
configuration information scaling values ct index table num num 
cols 
index name name rows pages statistics histogram config name new config new contig table 
index information query id cost indexes table 
information generated estimate result executing estimate configuration workload configuration relation format shown table 
conceptually relation rows queries workload 
unit cost relative total cost workload current configuration 
attribute indexes query represents indexes expected server answer query hypothetical configuration existed 
remove command provides ability remove analysis data generated commands 
observe remove workload respectively configuration invoked information workload configuration removed including cost usage information 
remove cost usage invoked cost usage information specified workload configuration removed workload configuration information retained 
note user interfaces index analysis utility easy define workload configuration 
microsoft sql server representative workload system generated logging events server specified period time sql server profiler file 
addition filters specified relevant events logged 
alternatively workload dynamically created query analyzer interface 
approach highlighted buffer queries define workload dynamically 
defining user interface presents successive screens set indexes table sizes 
screens user typically dba list objects current true configuration create new configuration adding removing indexes current configuration 
implementing hypothetical configuration simulation interface commands primarily definitional pose implementation challenges 
likewise command involves deleting rows analysis data tables corresponding workload configuration cost usage specified command 
section focus issue efficiently implementing core functionality hypothetical configuration simulation interface estimate configuration command 
hypothetical configuration analysis engine create define optimize hypothetical index hc mode exec sql server 
interfaces hca engine sql server simplest option simulating hypothetical configuration physically altering current configuration viable incurs serious overhead dropping creating indexes 
seriously approach flawed changing indexes affects operational queries seriously degrade performance system 
likewise updating system tables database scaling value lead error optimizer estimates operational queries 
need alternative indexes hypothetical configuration need constructed changes database scaling value affect system tables directly 
solution problem relies observation cost metric query interested optimizer estimated cost actual execution cost 
metric justified consumer configuration optimizer 
words optimizer finds hypothetical index useful index real see additional justification 
optimizer decision index solely statistical information column index 
information consists histogram column values index defined density 
gather statistics necessary scan rows table 
statistical measures efficiently gathered sampling significantly compromising accuracy 
statistics collected possible optimizer consider hypothetical index plan generation execution plan possible 
discuss approach collecting statistics section 
steps executing estimate query illustrated 
create needed hypothetical indexes configuration 

request optimizer restrict choice indexes configuration 
consider table index sizes database adjusted scaling values 

request optimizer produce optimal execution plan query gather results cost query indexes answer query 
steps repeated query workload 
discuss implementation details steps sql server provide example illustrates operation hypothetical configuration simulation module 
sample table sample pages 
new sample 
convergence measures 
sample table sample table union new sample 
new sample sample pages 
convergence measures check convergence sample table new sample 

adaptive page level sampling algorithm histogram construction 

creation hypothetical indexes extend create index statement sql qualifier statistics fraction 
optionally possible specify fraction table scanned gathering sample data columns index 
fraction specified system determines appropriate fraction rows scanned 
example create index supplier stats orders supplier statistics command creates hypothetical index supplier column orders table 
tpc workload gb database 
number hypothetical indexes table 
za importance sampling creating hypothetical indexes rest toot tl sampling sampling gathering statistics 
fraction running time spent creating hypothetical indexes index selection tool 
describe sampling strategy creating hypothetical indexes 
adaptive page level sampling algorithm efficiently gather statistical measures relevant query optimization 
algorithm shown starts seed sample pages 
current implementation set number pages table 
time algorithm server maintains sorted list values sample table set statistical measures sample table 
sql server statistical measures consist density data set equi depth histograms characterized step boundaries 
data new sample cross validation purposes 
words checked values new sample divided approximately equal numbers bin histogram 
empirical results indicate test true density measure reaches convergence 
test convergence fails new sample added sample table 
addition done merge algorithm build new sample table sorted order 
absence convergence step repeated 
technical details algorithm behavior varying data distributions 
gto tt aa optimizer cost estimates gw ql tpc sampling 
effect sampling optimizer cost estimates 
optimizer estimation lo egg tpc query 
effect sampling estimated number rows 
example effectiveness server extension requests index selection tool hca engine create hypothetical indexes 
shows distribution hypothetical indexes explored tool tables pc gb database 
confirms expectation sampling significantly reduce cost creating hypothetical index 
fact total running time reduced factor 
cases index selection tool recommended final set indexes 
example show sampling create hypothetical indexes adversely affect optimizer estimates 
ran index selection tool workload consisting expensive queries tpc gb database 
adaptive sampling algorithm sampled data hypothetical indexes largest table lineitem 
ran tool fixed sampling rates full table scan recorded optimizer cost estimates estimated number rows case 
shows maximum error cost estimation sample compared full table scan 
shows similar results hold maximum error estimated number rows 
hypothetical configuration key issue supporting hypothetical configurations database scaling value ensuring operational queries run concurrently real database queries hypothetical configuration optimized 
optimizer obtains information tables indexes sizes system catalogs 
hypothetical configuration supported updating system catalogs 
information hypothetical configuration conveyed optimizer connection specific manner 
achieved augmenting server connection specific hc mode call extensible interfaces microsoft sql server 
hc mode call takes arguments set indexes corresponding hypothetical configuration generating query plan 
base index table configuration 
base index table clustered index table heap structure table clustered index 
sql server leaf node non clustered tree index contains keys clustered index table 
plan chosen optimizer depends columns available index necessary indicate base index optimizer 
sizes tables indexes database 
hca engine projects size index configuration database scaling value 
addition accounts fact sql server size non clustered index depends clustered index table 
example clustered index column non clustered index column size index proportional width column width column 
ii hypothetical clustered indexes index simulating hypothetical configuration ii 
hca engine computes different value size simulating configuration 
obtaining optimizer estimates hypothetical configuration defined hc mode task obtaining optimizer estimates uses traditional sql server api optimize queries execution mode 
mode supported microsoft sql server database systems 
results query optimization obtained interface 
addition providing optimizer cost estimate provides execution plan query including indexes answer query 
example consider database current configuration consists table indexes ii iz ii clustered index table rows 
workload wish simulate hypothetical configuration ii ia table rows 
simulate proposed configuration hca engine execute sequence steps index exist hca engine calls create index command statistics clause create hypothetical index hca engine computes new sizes indexes ii number rows scaled ooo account fact clustered index 
sizes si respectively 
hc mode ii argument indicates considered optimizer plan generation 
second argument indicates base index table proposed configuration 
third argument passes sizes index configuration 
hca engine executes query execute mode obtains cost index usage information 
maintaining analysis data tables section described schema analysis data table discussed data generated 
address issue maintaining analysis data tables system 
observe properties entities supported hca engine queries indexes determined schema analysis data tables assumed fixed 
important issues tables named 
stored 
propose alternatives problem 
analysis data system catalogs approach analysis data table system catalog 
solves naming issue system catalog names fixed priori 
server interfaces simulate hypothetical configuration invoked server writes resulting data appropriate system catalog 
tables accessed directly user sql summary analysis interfaces hca engine 
analysis data user specified tables approach hca engine writes analysis data returned server temporary tables connection specific 
index analysis session hca engine complete user provided option saving analysis data generated session user specified tables 
approach requires hypothetical configuration simulation interfaces augmented save command 
subsequently user name saved hca engine perform summary analysis data directly post arbitrary sql queries tables 
current implementation adopted approach 

summary analysis ability simulate hypothetical configurations provides foundation summary analysis 
section show index analysis utility builds infrastructure provide sophisticated analyses proposed changes 
figures provide examples summary analysis database administrator finds useful 
shows breakdown workload type queries 
drills queries type selection provides breakdown selection conditions queries table 
summary analysis provides dba better grasp workload system facing example dba view relative frequencies usage indexes current configuration 
dba may information identify indexes rarely candidates dropping 
think useful ways analyze information gathered hypothetical configuration simulation tables section 
refer information analysis data 
option producing summary statistics analysis data allow dba tools directly sql interface query information collected process hypothetical configuration simulation 
unfortunately approach generating sql queries relatively low level interface performing summary analysis shifts burden analysis consumer information 
option provide set canned queries support set predetermined summary analyses 
useful canned queries provide extensible framework generating new summary statistics available analysis data 
needed interface retains flexibility formulating ad hoc requests summary analysis overhead manually generating complex sql queries analysis data 
section describe query interface hca engine supports fulfil need 
interface describe principled design powerful user interface invoke hca summary analysis interfaces rich way 
section description generic summary analysis interface captures structure questions posed analysis data 
section summary analysis interfaces describe properties query index cost usage analysis objects formulate queries 
section provides examples interesting queries posed analysis interfaces gives flavor user interfaces 
discuss implementation summary analysis interface section 
section sample session database administrator index analysis utility 
conceptual model summary analysis model summary analysis recognizes foundational objects analysis workload analysis consists queries structural properties configuration analysis consists indexes structural properties cost index usage analysis represent relationship properties query configuration workload distribution 
distribution workload sql pe 
conditions tables 
tables 
il index 
analyzing frequency index usage configuration workload 
specific summary questions interest relate objects hca summary analysis interface provides generic querying model 
generic analysis interface advantage extend framework complex physical database design exploits common thread runs kind analysis 
objects properties summary analysis set objects 
example workload analysis set queries 
configuration analysis objects question indexes 
cost index usage analysis objects relationship objects capture interaction specific configuration queries workload 
case set objects summary analysis implicitly identified 
workload analysis workload name uniquely identifies queries workload 
likewise configuration name identifies indexes hypothetical configuration analyzed 
cost index usage analysis combination workload name configuration name uniquely identifies set objects analyzed 
object properties associated 
properties classified follows properties un atomic value number tables query 
special case atomic value boolean index clustered 
properties list set value list columns index set tables referenced query 
types objects list properties object gathered hca engine 

properties queries workload analysis object consideration query 
list properties currently parsed hca engine query 
properties atomic value query type insert delete update select query group clause boolean query order clause boolean query nested subqueries boolean 
properties list values tables referenced query required columns table columns selection conditions exist columns join conditions exist equi join conditions 
note list properties easily extended collecting additional interesting parsed query information 
example consider query select sc vi properties sql type select 
required tables 
required columns sc columns selection conditions exist equi join conditions properties indexes configuration analysis objects interest indexes 
properties indexes atomic value table index built width index number columns storage space time creation index clustered boolean 
property list values list columns index major minor order 
example consider clustered index ii columns table properties ii table width clustered true list columns ct 
storage space time creation properties filled appropriately 
properties relationship object query configuration relationship object query configuration property atomic value cost query configuration 
property list value list indexes configuration answer query 
note properties relationship object query configuration augmented information query execution plan operators plan 
measures aggregate measures objects properties form fundamental primitives summary analysis 
derived measures useful posing queries analysis data 
property object derive numerical measures 
atomic property measure value property storage index user defined function value 
list set property measure may count number elements list set number tables referenced query 
measure list set property may derived applying aggregate functions sum average values list set 
example aggregate functions may measures obtain derived measure set objects 
specification numerical measure consists property name expression derives numerical measure property value 
list set valued property aggregate measure 
aggregation function 
current implementation count min max sum average 
lift notion numerical measure list set objects derive aggregate measure obvious way 
measure object derive corresponding measure set objects applying aggregate function example workload set queries compute average number tables referenced query workload 
summary analysis interfaces simple abstractions objects properties measures provide approach problem defining convenient powerful query interface summary analysis 
generic analysis interface section geared supporting paradigm analyzing information hypothetical configuration simulation 
determine class analysis workload analysis 
configuration analysis cost index usage analysis specify necessary information uniquely identify set objects analysis 
specify workload name identify associated queries 

filter subset objects properties focus objects interest consider queries table orders 
may successive filtering operation supported drill user interfaces consider queries column supplier orders 

partition filtered objects set classes measure 
example queries survive filter partitioned query type insert delete update select 
partitions need disjoint 

rank summarize objects 
ranking achieved associating measure object query number tables referenced query measure order objects 
interface supports picking top objects ranked measure 
interface supports summarizing objects aggregate measure average number tables referenced queries 
partitioning mentioned ranking summarization done objects qualify filter 
done partition partitions share ranking summarization criteria 
filter partition steps described optional 
simplest form analysis rank objects measure summarize objects aggregation function 
query summary analysis interface explain syntax semantics interface series examples highlight aspect 
interfaces hypothetical configuration simulation focus functionality enabled interface syntax 
analyze usage parameter list top number summarize aggregation function measure expression partition partition parameter number steps format output format results produced depends ranking summarize output desired 
query uses summarize output consists row partition 
row columns value partitioning parameter summarized value partition 
example ql counts number queries workload type select update insert delete 
ql analyze workload workload summarize count partition query type partitioning clause omitted output scalar representing summarized value objects selected 
example counts total number indexes configuration 
analyze configuration current summarize count ranking option top output format columns column partitioning attribute second column object query string third column specifies rank object partition 
partitioning clause altogether number column tuples 
example returns expensive queries current configuration 
tuple output form workload name query rank 
analyze cost usage current top cost measures described earlier measures useful posing interesting queries analysis data 
measures specified measure clause partition partition parameter clause 
measure forms atomic property object 
example returns top indexes new ranked storage 
aggregation list set property 
qs counts number queries number tables referenced 
current implementation support count max min sum average aggregation 
note count summarize clause measure specification required ql 
analyze configuration new config top storage qs analyze workload summarize count partition count tables filter expressions syntax expression boolean expression base predicates composed boolean connectors 
atomic properties base predicates form property operator value 
operator comparison operator storage 
boolean properties equality check legal 
example counts number column non clustered indexes current config 
analyze configuration current config summarize count num columns clustered false set valued properties base predicates forms set property subset superset set 
example returns expensive queries current configuration query tables part supplier 
set property operator value aggregation function operator comparison operator filter satisfied queries tables count tables 
list valued properties base predicates set valued predicates apply interpreting list corresponding set 
addition predicate prefix matching allowed list property sublist ofi ofi list 
example qs counts number indexes config leading column 
columns list property index contains columns index 
analyze cost usage current top cost tables superset part supplier qs analyze configuration summarize count columns art size partitioning results objects analyzed may partitioned property need numeric ql numeric measure 
important special case name list set valued property 
case separate partition distinct value list set 
set valued object belongs partition member set example query belongs partition table referenced query 
computes average number indexes queries table eliminating join queries 
partitioning domain numeric number steps allows partitions coalesced fewer steps 
analyze cost usage workload current summarize average count indexes count join columns partition tables specifying objects analysis examples ql depending class analysis parameter contain workload name configuration name workload name configuration name 
general possible specify multiple workloads configurations parameter list making possible compare workloads configurations 
discuss details possible formats parameter list due lack space 
illustrate idea compares cost configurations queries table orders 
analyze cost usage workload current proposed summarize sum cost tables superset order examples summary analysis user interfaces summary analysis interface expressive perform rich set analyses 
provide examples class summary analysis user interfaces easy database administrator visualize results summary analysis 
examples expressed summary analysis interface 
distribution selection conditions orders table 

distribution selection conditions table 
oe distribution multi column indexes table 
analyzing distribution multi column indexes tables 
workload analysis example application partitioning count number queries sql type see 
list top tables queries posted 
comparing summary statistics workloads 
drilling table level find ns table conditions posted see 
analysis example application partitioning count number indexes table 
list top tables ranked count multi column indexes tables 
see cost usage analysis analyzing frequency usage index configuration workload 
cost query workload proposed configurations relative current configuration 

comparing cost configurations workload sql type 

cost comparison current vs proposed configuration query id 
comparing cost expensive queries configurations 
comparison configurations workload query update insert delete 
comparing cost workload configurations sql type query 
implementation summary analysis interfaces section briefly describe issues involved implementing summary analysis interface 
described section data generated hypothetical configuration simulation stored tables server 
query posed summary analysis interface hca engine maps query equivalent sql query analysis data tables 
addition hca engine may process results sql query completing analysis results 
fact summary analysis interface resembles sql easier hca engine map input sql query 
addition implementation summary analysis engine exploits ability compose operations table expressions clause sql query 
kind analysis workload configuration cost usage specified summary analysis query determines superset analysis data tables need joined answer query 
example workload analysis need access workload information tables see table 
hca engine generates table expression joins required analysis data tables retrieving objects specified parameter list 
addition filter expression specified query included 
hca engine generates table expression partitions partition parameter group construct aggregation applied attribute specified measure 
query requests top number rows measure generated applying order clause measure attribute 
cursor opened return number rows 
example session section provide example typical session dba impact analysis utility 

analyzing workload mentioned earlier evaluation current proposed design done respect workload 
dba begins specifying workload session 
may log queries run system past week 
dba tries understand workload mix asks breakdown queries sql type 
result analysis looks 
dba may decide focus expensive queries workload existing configuration requesting top queries ordered cost 
decide tables candidates indexing dba may wish see distribution conditions queries tables 
having picked table conditions dba may decide drill look distribution conditions queries columns table 
gives idea columns table candidates indexes 
dba finds columns table look promising 
analyzing current configuration dba may wish see indexes table exist current configuration 
requesting see indexes current configuration ordered storage requirement 
case index index dba decides explore hypothetical configuration scenarios include index exploring scenarios dba decides explore scenarios evaluate relative current configuration 
proposes hypothetical configuration consisting current configuration additional non clustered single column index column 
configuration compares cost workload cost workload current configuration 
adding single column index produces improvement total cost workload 
studying index usage proposed configuration lo dba sees new index queries 
impressed improvement performance dba decides explore different hypothetical configuration 
time proposes column index table addition current configuration 
dba compares cost configuration current configuration sees improvement workload 
looks top queries workload affected adding index notices expensive queries current configuration positively affected queries negatively affected 
decides build column index schedules index built midnight 

shown index analysis utility help dba enterprise class database select indexes database 
interfaces supported hypothetical configuration analysis engine shown functionality conduct interesting powerful analysis studies 
described implementation hypothetical configuration analysis engine microsoft sql server including necessary server extensions 
extend current framework incorporate aspects physical database design 

acknowledgments acknowledge nigel ellis sql server relational engine group helping incorporate extensions server 

ii project database group microsoft research www research microsoft 
pi el chang index selection relational databases proceedings ih ieee icc 
chaudhuri motwani narasayya random sampling histogram construction 
proceedings acm sigmod 
chaudhuri narasayya efficient cost driven index selection tool microsoft sql server 
proceedings rd vldb conference greece 
frank omiecinski navathe adaptive index selection rdbms proceedings edbt 
finkelstein physical database design relational databases acm tods mar 
gupta harinarayan ullman index selection olap proceedings icde 
harinarayan ullman implementing data cubes efficiently proceedings acm sigmod 
quass physical database design data warehouses proceedings icde 
lo olken random sampling databases technical report 
shasha framework automating physical database design proceedings vldb 
stonebraker hypothetical data bases views 
proceedings acm sigmod 
