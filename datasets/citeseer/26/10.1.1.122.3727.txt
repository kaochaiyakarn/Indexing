algorithms hybrid milp cp models class optimization problems jain grossmann department chemical engineering carnegie mellon university pittsburgh pennsylvania usa jain com grossmann cmu edu goal develop models methods complementary strengths mixed integer linear programming milp constraint programming cp techniques solve problems intractable solved methods 
class problems considered characteristic subset binary variables non zero objective function coefficients modeled milp 
class problems formulated hybrid milp cp model involves milp constraints reduced set cp constraints equivalence relations milp cp variables 
milp cp decomposition method lp cp branch bound algorithm proposed solve hybrid models 
algorithms rely relaxed milp feasibility cp problems 
application example considered cost schedule derived processing set orders release due dates set dissimilar parallel machines 
shown problem modeled milp cp combined milp cp opl model van hentenryck hybrid milp cp model 
computational performance models sets shows hybrid milp cp model achieve orders magnitude reduction cpu time 
integer programming benders decomposition constraint programming milp cp hybrid algorithms parallel machine scheduling 
significant interest developing models methods combine mixed integer linear programming milp nemhauser wolsey constraint programming cp stuckey solve combinatorial optimization problems 
primary reason interest methodologies solve similar problems proved successful solving complementary classes problems 
milp methods successfully applied solve diverse problems network synthesis crew scheduling planning capital budgeting modeled optimization problems 
cp methods proved successful solving highly constrained discrete optimization informs journal computing informs vol 
fall pp 
feasibility problems scheduling configuration resource allocation 
main objective developing integrated models methods complementary strengths milp cp solving problems intractable methods 
propose algorithms complementary milp cp models achieve goal certain class optimization problems 
structured follows 
section brief background milp cp solving optimization problems 
followed literature review integration techniques 
describe class problems subset binary variables appears objective function milp formulation 
electronic issn formulate class problems hybrid milp cp models involve milp constraints reduced set cp constraints equivalence relations milp cp variables 
propose decomposition branch bound algorithms solve hybrid models 
algorithms rely relaxed milp feasibility cp problems 
aim methods combine strength milp proving optimality lp relaxations power cp finding feasible solutions specialized propagation algorithms 
example consider scheduling problem involves finding cost schedule process set orders dissimilar parallel machines subject release due date constraints 
shown problem modeled milp cp combined milp cp opl model van hentenryck 
investigate computational performance alternative models number data sets highlight advantages disadvantages approaches 
problem modeled hybrid milp cp model solved proposed decomposition algorithm 
computational results drawn 

background milp methods developed decades operations research community nemhauser wolsey 
cp methods hand result research artificial intelligence community area logic programming constraint satisfaction colmerauer van hentenryck tsang 
frameworks rely branching explore search space 
primary difference lies way inference performed node 
linear programming lp branch bound methods milp involve solving lp subproblems generated dropping constraints integrality constraints obtain bounds objective function values prove set constraints inconsistent 
node objective function value lp relaxation worse best integer solution obtained far jain grossmann algorithms hybrid milp cp models lp subproblem infeasible 
branching performed solution obtained solving lp relaxation satisfy constraints original problem 
relaxed solution satisfies constraints original problem better best feasible solution far best feasible solution updated 
search terminates proved better solution exists best feasible solution 
effectiveness milp methods depends size linear programming subproblems importantly gap objective best feasible solution optimum objective function value obtained initial lp subproblem 
number sophisticated algorithms focus aspects different ways generating lp subproblems branch cut padberg rinaldi balas branch price 
algorithms valid inequalities improve performance solution algorithms 
cp hand uses constraint propagation inference engine 
node constraint propagation reduce domains variables 
domain variable continuous discrete boolean constraint propagation result empty domains case node 
branching performed domain variable consists element discrete boolean domains bounds certain tolerance continuous domains 
cp originally developed solve feasibility problems 
extended solve optimization problems 
achieved solving feasibility problem objective function problem rewritten constraint forces equal new variable 
domain new variable gives upper lower bounds objective function values 
feasible solution obtained search additional constraints restrict objective function values imposed search tree 
search terminates nodes 
effectiveness cp methods depends primarily constraint propagation algorithms reduce domain variable 
informs journal computing vol 
fall milp advantage effect constraints evaluated simultaneously global perspective constraints 
cp hand evaluates effect constraints sequentially communicating domains variables 
problems loosely constrained finding optimal solution cp may prove difficult 
milp requires solving lp subproblem node search tree constraints linear equalities inequalities 
imposes severe restriction expressiveness milp modeling language problems example progressive party problem smith modeling may require large number variables constraints 
cp uses constraint propagation imposes restriction 
commercial cp software packages ilog solver ilog chip dincbas eclipse wallace prolog iv allow number different constructs algebraic constructs write constraints compact manner 
caution sound judgment exploiting advantage having constructs model problem 
success cp solution approach highly dependent propagation mechanism constraints written constructs 
constructs available efficient constraint propagation engines 
applications sequencing scheduling constraints proved efficient strong propagation algorithms available 
interesting point constraints algebraic constructs variables continuous finite domains linear programming constraint propagation engine cp 

literature review number papers compared performance cp milp approaches solving number different problems example modified generalized assignment problem template design problem jain grossmann algorithms hybrid milp cp models smith progressive party problem smith change problem 
properties number different problems considered little effect performance cp milp approaches 
discussed earlier papers showed milp efficient relaxation tight models structure effectively exploited 
cp works better highly constrained discrete optimization problems expressiveness milp major limitation 
attempts integrate cp milp constraint propagation linear programming single search tree obtain bounds objective reduce domains variables 
approaches complete cp model corresponding partial milp model required 
cp richer modeling tool cp constraints may easily reformulated milp constraints 
approaches sense perform redundant computations constraint propagation problem simplex problem solved node 
problems may justified intractable methods 

systematic approach transforming cp model corresponding milp model 
automatic translation cp model milp model may result poor model involving numerous big constraints poor lp relaxations 
case advantage performing global reasoning lp relaxation essentially lost 
automatic translation user model problems approaches 
hooker 
argued new modeling paradigm may required perform efficient integration milp cp approaches 
modeling framework motivated mixed logic linear modeling framework proposed hooker 

algorithms solving models 
production planning problem showed computational performance proposed method informs journal computing vol 
fall vis vis pure milp cp approaches significantly better 
kasper interesting analysis cp milp approaches unifying framework branch infer develop various integration strategies 
divide constraints milp cp different categories primitive 
primitive constraints exists polynomial time solution algorithm non primitive constraints true 
interesting aspect classification primitive constraints cp non primitive milp vice versa 
discussed non primitive constraints infer primitive constraints symbolic constraints 
raman grossmann earlier modeled discrete continuous optimization problems disjunctions symbolic constraints form logic propositions 
model denoted generalized disjunctive program gdp converted part milp 
idea mip representability similar idea primitive constraints 
showed computationally efficient transform mip representable disjunctions linear constraints proposed hybrid branch bound algorithm handles non mip representable disjunctions directly 
performed clear general integration strategy perform better cp milp approach 
especially true cases methods tool solve problem hand 
usually possible enhance performance approach borrowing ideas 
example raman grossmann logic cuts written logic propositions improve performance milp models 
ideas edge finding carlier pinson applegate cook guiding search solve jobshop problems exploited caseau laburthe le pape develop efficient inference engines scheduling algorithms cp 
furthermore number similarities underlying ideas jain grossmann algorithms hybrid milp cp models approaches 
example probing integer preprocessing milp ways similar constraint propagation 
hooker give interesting operations research perspective consistency methods logical inference 
hooker deals subject milp cp integration detail 

theory algorithms proposed section motivated kasper 
algorithms premise combinatorial problems may characteristics better suited milp better handled cp 
problems pure milp pure cp approaches may perform 
discussed earlier prior integrating approaches models complete form usually cp 
algorithms problem solved relaxed milp cp feasibility models 
consider problem modeled milp structure min ax cv optimization problem continuous binary variables binary variables non zero objective function coefficients 
constraint set divided subsets 
set constraints models aspects problem represented efficiently milp framework assignment constraints significant impact lp relaxation 
second set constraints hand assumed affect lp relaxation significantly large number limited expressive power milp methods 
problem modeled cp 
note constructs available informs journal computing vol 
fall cp framework model problem logical constraints disjunctions different operator stuckey 
reason milp cp models problem may different variable definitions constraint structures 
equivalence established constraints complete labeling variables derived framework values variables 
assume equivalent cp model min cp variables 
domain variables continuous discrete boolean 
generally variables correspondence milp variables mapping sets variables established 
variables needed calculate objective function 
may may case variables 
usually equivalence established sets constraints 
consider class problems mentioned milp cp model structures 
assume difficult solve problem milp large number constraints constraint set finding feasible solutions hard 
assume broader expressive power cp results smaller constraint set 
constraint set cp smaller may efficient solve problem cp finding optimal solution proving optimality difficult cp lack relaxations 
ideally combine strength milp handle optimization aspect problem lp relaxation power cp find feasible solutions better constraint formulations 
achieve goal hybrid model class problems solved decomposition algorithm branch bound algorithm 
main advantage proposed methods smaller lp cp subproblems solved 
jain grossmann algorithms hybrid milp cp models hybrid model involves milp constraints cp constraints equivalence relations 
objective function hybrid model milp model 
constraints problem include milp constraints equivalence relations relate milp variables cp variables reduced set cp constraints derived cp constraint set assuming set cp variables fixed 
min ax cv noted hybrid model requires variables milp model variables cp model 
values cp variables obtained model satisfy constraints cp model 
furthermore optimal solution problem hand values cp variables obtained solving hybrid model optimality 
noted values milp variables obtained model may valid model model include milp constraint set 
integrated approach proposed solve hybrid milp cp model 
basis integrated approach relaxed milp problem cp feasibility problem principle solved alternative methods solved efficiently 
relaxed milp model obtain solution satisfies constraint sets optimizes objective function 
solution obtained relaxed milp derive partial cp solution equivalence relation 
cp feasibility model verifies solution extended full space solution satisfies constraints informs journal computing vol 
fall model 
partial solution milp extended full space solution obtained value objective function 
methods search solution space obtain optimal solution 
ideas essentially relaxed milp cp feasibility models 
difference lies order cp subproblems solved 

milp cp decomposition method algorithm similarities generalized benders decomposition 
algorithm summarized 
method relaxed milp model problem objective constraints solved optimality 
note integrality constraints variable dropped relaxed milp problem easier solve 
solution original problem infeasible 
values determine values equivalent cp variables acp feasibility problem tries extend partial solution complete solution satisfies constraints 
exists feasible solution solution optimal solution problem search terminated 
causes infeasibility inferred cuts added relaxed milp model problem 
cuts general cuts hooker 
context model cuts form iteration xi xi bk xk xk xk represents optimal values iteration general cuts may weak 
reason possible stronger cuts qk exploit special structure problem 
cuts cut current partial solution eliminate partial solutions similar characteristics 
cuts means communication relaxed milp cp feasibility jain grossmann algorithms hybrid milp cp models models play important role success methods 
entire procedure repeated solution obtained relaxed milp model extended full feasible solution relaxed milp problem infeasible 
assuming general cuts establish convergence proof milp cp decomposition method 
theorem 
milp cp decomposition method applied solve problem cuts method converges optimal solution proves infeasibility finite number iterations 
proof 
problem unbounded domain variable bounded 
problem infeasible 
consider cases individually 
case problem feasible relaxed milp master problem cuts iteration rm min ax cv xi xi bk optimal solution relaxed milp master problem 
corresponding cp feasibility subproblem cp find 
note iterations relaxed milp master problems rm feasible cp subproblems infeasible 
conditions satisfied algorithm terminates reaching iteration master problem iteration relaxation informs journal computing vol 
fall solve iteration relaxed milp problem rm optimality min ax cv determine equivalent try extending solution cp feasibility problem fixed partial optimal solution xk find feasible feasible optimal solution milp cp decomposition method original problem milp problem relaxation problem 
cuts added iteration exclude feasible solution original problem 
furthermore domain successive relaxation strictly smaller previous 
domain finite worst case jain grossmann algorithms hybrid milp cp models solution infeasible infeasible infer causes infeasibility generate cuts 
set 
elements non empty problem implies algorithm reach step subproblem feasible 
assume iteration subproblem yields feasible solution 
solution optimal problem belongs domain value solution equals optimum informs journal computing vol 
fall objective function value obtained relaxation problem 
feasible solution problem algorithm converge optimal solution finite number iterations 
case problem infeasible problem infeasible subproblem cp result feasible solution 
furthermore domain finite successive iteration shrinks integer point 
finite number steps master problem infeasible proving infeasibility finite number steps 
ways method implemented 
easier efficient approach solve relaxed milp model scratch cuts updated 
efficient approach store branch bound tree relaxed milp problem update cuts added see quesada grossmann 

lp cp branch bound method algorithm extends basic branch bound algorithm mixed integer problems solve problems represented hybrid milp cp model 
idea principle straightforward may difficult implement 
algorithm current best integer solution updated integer solution better objective function value 
proposed algorithm additional cp feasibility problem solved ensure integer solution obtained relaxed milp problem extended full space 
case current best integer solution relaxed milp problem updated 
extended best current integer solution updated cuts added current open nodes 
proposed method involves solving series lp subproblems obtained branching integer variables 
lp subproblem proposed algorithm form min ax cv qx cuts jain grossmann algorithms hybrid milp cp models lb lb lb difference various lp subproblems upper lower bounds integer variables 
set cuts updated search progresses 
objective function value feasible solution problem full space provides upper bound ub objective function 
denote set lp subproblems solved 
lp cp method summarized follows 
initialization 
ub 
lp subproblem generated lower upper bounds integer variables original problem include cuts 

check problems solved 
go step go 
node 
select remove lp subproblem set criterion selecting lp called node selection rule 
different rules selecting lp play key role efficiency algorithm nemhauser wolsey 
solve lp subproblem lp infeasible optimal value objective function lower bound greater ub go step 
integer variables integral values go step 
solution integral values integer variables determine cp variables values lp variables fixed solve cp feasibility problem tries extend partial solution 
find cp problem feasible update ub add cuts infer causes infeasibility generate tighter cuts add informs journal computing vol 
fall lp subproblems belonging set updating set 
go step 
branch variable 
variables assigned non integral values select prespecified branching variable selection rule nemhauser wolsey 
denote integer variable generate lp subproblems add set subproblem generated specifying floor optimal value upper bound subproblem generated specifying ceiling optimal value lower bound go step 
termination 
ub problem feasible solution unbounded 
optimal solution corresponds current value ub 
proposed decomposition methods successful course important choose suitable relaxed milp cp feasibility models 
furthermore cuts inferring strong cuts qx causes infeasibility cp feasibility models significantly reduce number problems solved 
cuts non trivial derived possible class problems hand 
worth emphasizing proposed algorithms impose restriction structure equivalence relation 
procedural 
noted hybrid models similar ones section solved opl van hentenryck 
opl solution algorithm hybrid model solves lp subproblem involving linear constraints constraint propagation subproblem involving constraints node search tree 
usually original cp constraints needed hybrid milp cp opl model 
furthermore equivalence relations written closed form equations inequalities symbolic relations 
algorithms section limited milp models subset binary variables non zero coefficients objective function principle generalized milp models binary continuous variables objective function 
jain grossmann algorithms hybrid milp cp models partial solution involve binary continuous variables cp problem extend partial solution full space 
case biggest challenge derive effective cuts exclude partial solutions feasible master problem extended full space 

scheduling problem consider specific scheduling problem falls class problems considered similar considered hooker 

scheduling problem involves finding cost schedule process set orders set dissimilar parallel machines processing order release date completed latest due date order processed machines 
processing cost processing time order machine im im respectively 
section consider alternative strategies model solve particular problem 

milp model scheduling problem described modeled milp 
main decisions involved scheduling problem assignment orders machines sequence orders machine start time orders 
binary variable xim assignment variable equal order assigned machine binary variable sequencing variable equal assigned machine order processed order continuous variable tsi denotes start time order variables milp model problem written min tsi ri tsi di xim informs journal computing vol 
fall max di min ri yi xim xi tsi tsi ii yi xim xi jain grossmann algorithms hybrid milp cp models tsi xim objective problem minimize processing cost orders 
constraints ensure processing order starts release date completed due date 
order needs exactly machine processing enforced assignment constraint 
inequality valid cut lp relaxation problem 
fact total processing time orders assigned machine difference latest due date earliest release date 
constraint logical relationship assignment sequencing variables 
underlying logic constraint order assigned machine processed 
constraint sequencing constraint max im 
ensures sequencing variable ii order processed order constraints logical cuts 
logic processed vice versa 
ensures sequencing variables zero assigned different machines 
adding constraints reduces computational time needed solve milp significantly 
logic cuts tried effective 

cp model scheduling problem modeled cp 
cp model contrast milp model highly dependent cp package model problem differences constructs available various modeling languages 
ilog opl modeling language van hentenryck 
opl set constructs especially designed scheduling problems develop compact cp model scheduling problem hand 
go details modeling language describe constructs model scheduling problem 
basic opl modeling framework involves set orders need completed certain set resources 
number different resource types available capture nature problem 
scheduling problem parallel machines resources modeled unary resources opl 
defining attribute unary resource process order instance 
order associated start date duration 
basic framework cp model opl constructs written follows min start ri start di duration requires tm zi zi start duration variable subscript represents machine selected process order variable subscripts powerful modeling constructs available cp software packages 
variable subscript objective function calculate cost order directly 
constraints ensure processing order begins release date completed due date start time order informs journal computing vol 
fall start 
duration order depends machine process 
enforced constraint uses variable subscript calculate processing time order constraint uses special opl construct requires 
enforces order needs unary resource set unary resources note constraint enforces assignment order specific machine sequencing orders assigned machine 
constraint uses opl specific boolean function returns value true false 
context scheduling problem function returns value true order processed unary resource corresponding machine false 
constraint ensures order processed unary resource subscript variable equal links decisions inference engine construct requires constraints model 
clearly seen variable constraint definitions cp model scheduling problem hand different milp model 
primarily specialized cp constructs model problem hand 
exists close resemblance modeling frameworks 
subscript variable cp model equivalent binary variable im milp model 
start time order definition models 
sequencing variable ii milp model equivalent variable cp model 
value variable obtained solution cp model 
equivalence drawn constraints frameworks 
constraints equivalent respectively 
set constraints play role set constraints 
major difference models milp model continuous time scheduling model 
cp model hand discrete time scheduling model start time integer variable opl framework 
jain grossmann algorithms hybrid milp cp models 
combined milp cp opl model developing pure milp cp models possible write combined model 
opl allows modeling problem combined milp cp model constraints expressed forms 
size integrated model larger may perform better cases fewer nodes may explored 
solution algorithm integrated model primarily uses cp solver 
cp node extra lp relaxation consisting linear constraints combined model solved obtain bounds objective function van hentenryck 
combined milp cp opl model scheduling problem hand written min tsi ri tsi di xim milp max di min ri start ri start di duration cp requires tm zi start tsi linking constraints ts im start duration informs journal computing vol 
fall model combination pure milp pure cp models earlier 
objective function problem milp model 
constraint set includes milp constraints constraints 
theoretical restriction excluding constraints se 
reason constraints dropped large number significantly tighten lp relaxation problem 
constraint set includes constraints cp model 
constraint set links milp variables cp variables 
constraint links assignment variables second constraint links start times rest extra constraints propagation stronger 

computational results scheduling problem solved different optimization models previous section 
models implemented ilog opl studio ilog 
uses cplex ilog solve milp ilog solver ilog ilog scheduler ilog solve cp solve combined milp cp opl model 
study behavior characteristics models consider numerical example problems 
section consider instances varying complexity class scheduling problems previous section 
size optimization models problems depends number orders number parallel machines 
consider problems different sizes terms number orders number parallel machines shown table 
parameters problems processing costs im release dates due dates processing times im 
problem size consider sets data 
objective demonstrate difficulty solving scheduling problem vary significantly data 
total instances scheduling problem 
details problems different sizes jain grossmann algorithms hybrid milp cp models table number machines problem problem number machines data sets online supplement available electronic format informs journal computing website pubs informs org 
distinguishing characteristic data sets problem processing times data set longer 
reason problems corresponding data set fewer feasible schedules total cost processing tasks higher 
computational results solving problems milp model cp model tables respectively 
clearly seen class problems cp models smaller size milp models 
furthermore size milp model increases rapidly comparison cp model 
problem sizes data set difficult solve milp cp methods 
took time solve problems cp model comparison milp model 
computational effort increases rapidly cases 
problem corresponding table computational results milp model problem set constraints variables nodes time objective cplex single processor version dual processor sun ultra workstation bsearch terminated tree size exceeded mb solution lower bound termination informs journal computing vol 
fall table computational results cp model jain grossmann algorithms hybrid milp cp models problem set points time objective ilog scheduler ilog solver single processor versions dual processor sun ultra workstation time finding suboptimal solution solution data set biggest example problem solved optimality methods reasonable computational time 
noted computational times milp model may possibly reduced sophisticated schemes branch cut 
similarly computational times cp model may possibly reduced developing special branching schemes example 
strategies outside scope 
advantage milp model values assignment variables obtained lp relaxations direct branch bound search obtain cost assignments 
scheduling orders machine daunting task 
sequencing constraint big form results poor relaxation 
furthermore sequencing variables directly contribute objective function value lp relaxation may may direct variables feasibility 
hand cp methods effective constraint propagation algorithms scheduling ideas edge finding task intervals caseau laburthe 
assignment chosen predefined enumeration strategy excluding infeasible schedules 
clearly complementary strengths milp cp methods may possibly combined tackle difficult problems 
possible ways combined milp cp opl model previous section 
computational results solving set example problems milp cp opl model table 
clearly milp cp opl model problems larger corresponding cp model 
smaller corresponding milp model sequencing variables constraints included combined milp cp opl model 
clearly seen problems solved faster combined model 
furthermore data set fifth example problem intractable milp cp methods solved optimality combined method 

milp cp hybrid model scheduling problem hand posed proposed hybrid milp cp modeling framework follows min tsi ri tsi di xim imp im max di min ri informs journal computing vol 
fall jain grossmann algorithms hybrid milp cp models table computational results combined milp cp opl model problem set points time objective cplex ilog scheduler ilog solver single processor versions dual processor sun ultra workstation im start start zi duration zi requires zi ts im start duration objective function hybrid model objective function 
constraints milp constraints 
constraints equivalent constraint set model 
constraint establishes equivalence milp variable im cp variable represented model 
noted need write equivalence relation closed form equations inequalities 
sharp contrast set equivalence relations milp cp opl model 
constraints reduced set cp constraints derived original cp constraints assuming assignment orders machines 
note cp constraint longer needed constraint order requires unary resource corresponding machine assigned 
constraints equivalent constraint set model 
proposed algorithms solve hybrid milp cp model scheduling problem hand 
section decomposition algorithm solving hybrid milp cp model 
reason choosing method easy implement sufficient test potential usefulness proposed methodology 
details decomposition algorithm context proposed hybrid milp cp scheduling model 
algorithm relaxed milp problem assigns machine order 
cp feasibility problem attempts find feasible schedule assignment 
feasible schedule obtained optimal solution 
causes infeasibilities inferred integer cuts exclude assignments similar characteristics 
relaxed milp problem resolved obtain assignment 
assignment possible scheduling problem infeasible 
integer cuts decomposition algorithm critical efficiency 
integer cuts cuts scheduling problem hand idea set orders scheduled particular machine possible find feasible schedule assignment orders assigned machine 
note cut generated informs journal computing vol 
fall solve relaxed milp problem min imx im 
xim xk im bk ik feasible determine extend solution cp feasibility problem fixed find start duration partial optimal solution im feasible optimal solution milp cp decomposition method scheduling problem jain grossmann algorithms hybrid milp cp models solution infeasible infeasible identify feasible schedule obtained 
add integer cut machines exclude assignment feasible set informs journal computing vol 
fall machine scheduled successfully 
integer cuts iteration stronger equation general form xim xk im bk im im optimal value im iteration example consider case orders assigned machine scheduled 
corresponding integer cut cut essence states assignment orders assigned machine allowed 
worth emphasizing constraints cut possible assignment 
furthermore noted scheduling problem parallel machines interact 
assignment specified schedule order processing derived machine individually 
means cp feasibility problem parallel machines decomposed cp feasibility problems single machine 
advantage decomposing problem manner easy identify machines feasible schedule obtained 
proposed decomposition algorithm implemented scripting language opl studio ilog 
implementation relaxed milp solved scratch cuts added 
major iteration decomposition algorithm involves solving relaxed milp problem cp feasibility problems 
size relaxed milp problem increases search progresses 
size cp feasibility problem machine depends number orders assigned machine varies major iteration 
instances scheduling problem hand earlier section solved decomposition algorithm 
computational results summarized table 
jain grossmann algorithms hybrid milp cp models table size cp subproblems reported varies iteration initial size relaxed milp problems reported 
final number constraints relaxed problem obtained adding number cuts initial number constraints 
computational time solving relaxed milp problems reported seventh column 
note computational time reported solving cp feasibility problems ones feasible 
current implementation opl scripting language possible obtain computational time cp feasibility problem infeasible 
experience computational time solving infeasible cp subproblem order magnitude solving feasible cp subproblem 
number cp feasibility subproblems solved problem equal product number machines number major iterations required 
recall cut added infeasible cp subproblem 
number cp subproblems computational time included equal total number cuts 
clearly seen instances scheduling problem hand solved efficiently proposed decomposition algorithm 
larger instances scheduling problem computational times significantly lower compared methods previous section 
recall data set problems difficult solve 
fewer assignments lead feasible schedule 
iterations needed integer cuts added 
computational results conclude proposed milp cp integration strategy tackle scheduling problem better milp cp milp cp opl solution approach 
numerical results problem different data reported 


objective develop models methods complementary strengths informs journal computing vol 
fall jain grossmann algorithms hybrid milp cp models table computational results hybrid milp cp model milp size major milp cp problem set objective cplex single processor version dual processor sun ultra workstation ilog scheduler ilog solver single processor versions dual processor sun ultra workstation milp cp solve problems intractable solved methods 
class problems considered characteristic subset binary variables non zero objective function coefficients modeled milp 
class problems formulated hybrid milp cp model involves milp constraints reduced set cp constraints equivalence relations milp cp variables 
solve hybrid model milp cp decomposition method lp cp branch bound algorithm proposed 
algorithms rely relaxed milp feasibility cp problems 
aim methods combine strength milp proving optimality lp relaxations power cp finding feasible solutions hard discrete optimization problems specialized propagation algorithms 
noted algorithms fairly general needed alternative methods solving feasibility problems may 
application example scheduling problem considered 
aim problem find cost schedule process set orders dissimilar parallel machines subject release duedate constraints 
shown problem modeled milp cp combined milp cp opl model van hentenryck 
computational results indicate cp model requires fewer constraints compared milp model 
computational effort required solve problems models increases rapidly problem size 
milp cp opl model larger size cp model smaller compared milp model 
combined opl model solve problems faster relative milp cp models 
scheduling problem modeled hybrid milp cp model solved proposed decomposition algorithm 
computational results indicate larger instances example scheduling problem computational times significantly smaller compared milp cp combined milp cp opl methods 
example problem demonstrates proposed methods computationally efficient solving certain problems 
acknowledged problem falls class problems considered computational efficiency proposed algorithms depends strongly nature relaxed milp problem feasibility cp problem cuts algorithm 
acknowledgments authors interesting discussions constraint programming help revising 
financial support national science foundation cts gratefully acknowledged 
informs journal computing vol 
fall applegate cook 

computational study job shop scheduling problem 
operations research society america 
balas 

mixed programming lift project branch cut framework 
management science 
johnson nemhauser vance 

branch price column generation huge integer programs 
operations research 
kasper 

branch infer unifying framework integer finite domain constraint programming 
informs computing 
carlier pinson 

algorithm solving job shop problem 
management science 
caseau laburthe 

improving clp scheduling task intervals 
van hentenryck ed 
logic programming proceedings th international conference mit press cambridge ma 

caseau laburthe 

cumulative scheduling task intervals 
maher ed 
logic programming proceedings joint international conference symposium mit press cambridge ma 

hooker 

optimization methods logical inference 
john wiley sons new york 
colmerauer 
prolog figures 
communications acm 
little 

properties combinatorial optimization problems effect performance integer programming constraint logic programming 
informs computing 
little mitra 

constraint logic programming integer programming approaches collaboration solving assignment scheduling problem 
constraints international journal 
dincbas van hentenryck simonis graf berthier 

constraint logic programming language chip 
fgcs proceedings international conference fifth generation computer systems tokyo japan 


generalized benders decomposition 
journal optimization theory applications 
jain grossmann 

hybrid constraint logic programming strategies solving scheduling combinatorial optimization problems 
comp 
chem 
engng 


example integrating constraint programming mathematical programming 
electronic notes discrete mathematics 

comparing constraint programming mathematical programming approaches discrete optimisation change problem 
operational research society 
jain grossmann algorithms hybrid milp cp models hooker 
logic methods optimization combining optimization constraint satisfaction 
john wiley sons new york 
hooker 

mixed logic linear programming 
discrete applied mathematics 
hooker kim 

integrating constraint propagation linear programming combinatorial optimization 
proceedings sixteenth national conference artificial intelligence aaai aaai aaai press mit press cambridge ma 

ilog 
cplex user manual 
ilog incline village nv 
ilog 
opl studio user manual 
ilog incline village nv 
ilog 
scheduler user manual 
ilog incline village nv 
ilog 
solver user manual 
ilog incline village nv 
le pape 
implementation resource constraints ilog schedule library development constraintbased scheduling systems 
intelligent systems engineering 
marriott stuckey 

programming constraints 
mit press cambridge ma 
nemhauser wolsey 

integer combinatorial optimization 
john wiley sons new york 
hooker 

mixed global constraints inference hybrid clp ip solvers 
annals mathematics artificial intelligence 
forthcoming 
padberg rinaldi 

branch cut algorithm symmetric travelling salesman polytope 
siam review 
smith 

integer linear programming constraint logic programming approaches template design problem 
informs computing 
quesada grossmann 

lp nlp branch algorithm convex optimization problems 
computers chem 
engng 

raman grossmann 

symbolic integration logic milp branch bound techniques synthesis process networks 
annals operations research 
raman grossmann 

modelling computational techniques logic integer programming 
computers chem 
engng 

wallace 

new approach integrating mixed integer programming constraint logic programming 
annals operational research 
smith hubbard williams 

progressive party problem integer linear programming constraint programming compared 
constraints international journal 
informs journal computing vol 
fall tsang 
foundations constraint satisfaction 
academic press san diego ca 
van hentenryck 
constraint satisfaction logic programming 
mit press cambridge ma 
jain grossmann algorithms hybrid milp cp models accepted john hooker received october revised july accepted march 
van hentenryck 
opl optimization programming language 
mit press cambridge ma 
wallace 

eclipse platform constraint logic programming 
icl systems journal 
informs journal computing vol 
fall 
