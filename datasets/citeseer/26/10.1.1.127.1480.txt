market equilibrium primal dual type algorithm nikhil christos papadimitriou amin vijay vazirani study market equilibria occupied center stage mathematical economics century polynomial time algorithms questions far researchers 
provide algorithm linear version problem defined irving fisher 
algorithm modeled kuhn algorithm bipartite matching 
polynomial time algorithm linear version old problem defined irving fisher consider market consisting buyers divisible goods 
money possessed buyers amount specified 
specified utility functions buyers assumed linear fisher original statement assumed concave utility functions 
problem compute prices goods buyer optimally happy relative prices deficiency surplus goods market clears 
defining problem fisher considered issue computability equilibrium prices built remarkable hydraulic apparatus purpose see description fisher done independently walras pioneering modeling market equilibria 
ensuing years study market equilibria occupied center stage mathematical economics 
achievement came arrow debreu established existence equilibrium prices general setting fixed point theorem 
welfare theorem showing pareto optimality allo college computing georgia institute technology 
done visiting berkeley icsi berkeley 
email nikhil vazirani cc gatech edu 
computer science department berkeley 
email christos cs berkeley edu 
sense fisher entirely mark algorithm reduces problem flow computations 
cations obtained equilibrium prices provides important social justification theory 
highly non constructive nature arrow debreu proof naturally raised questions efficient computability equilibrium prices 
despite impressive progress issue scarf useful applications polynomial time algorithms researchers case linear utility functions 
question raised gives polynomial time algorithms number goods agents bounded 
complexity theoretic aspects issues studied 
case linear utilities natural seek algorithmic answer theory linear programming 
linear programming formulation problem 
main contribution point suitable adaptation primal dual schema yields solution fisher problem 
algorithm modeled kuhn primal dual algorithm bipartite matching problem 
heart primal dual schema lies powerful paradigm algorithm starts trivial solutions primal dual lp corresponding problem alternately improves solutions termination criterion met see detailed discussion current primal suggests improve dual vice versa 
identify processes primal process updates amount sold buyer dual process updates prices goods 
algorithm prices buyers surplus money left 
update decreases surplus vanishes prices right market clear exactly 
proof correctness involves new combinatorial facts understanding min cut changes network derived bipartite graph capacities source edges increased 
prior stated paradigm processes making improvements relative outside setting linear programming 
naturally raises question formal mathematical framework primal algorithms set 
analogous setting primal dual algorithms course theory lp duality 
problem consider market consisting set buyers set divisible goods 
assume buyer amount money possesses amount 
addition utility functions buyers 
critical assumption functions linear 
denote utility derived obtaining unit amount prices goods easy compute baskets goods buyer 
say market clearing prices buyer assigned basket surplus deficiency goods 
problem compute prices polynomial time 
observe may assume unit scaling appropriately 
general rational scaling appropriately may assumed integral 
turns market clearing price iff potential buyer derives nonzero utility 
solution unique 
assume case 
high level idea algorithm denote vector prices 
prices buyer derives amount utility unit amount money spent 
clearly goods maximize ratio 
define bang buck clearly goods maximizing ratio equally happy combination goods 
motivates defining bipartite graph bipartition edge iff call graph equality subgraph edges equality edges 
goods sold edges equality subgraph buyers relative current prices 
computing largest amount goods sold manner exceeding budgets buyers amount goods available assumed unit accomplished computing max flow network direct edges assign capacity infinity edges 
introduce source vertex directed edge vertex capacity introduce sink vertex directed edge vertex capacity network clearly function current prices denoted algorithm maintains invariant prices min cut invariant ensures current prices goods sold 
eventuality buyers may left surplus money 
algorithm raises prices systematically maintaining invariant surplus money buyers keeps decreasing 
surplus vanishes market clearing prices attained 
equivalent condition min cut max flow equals total amount money possessed buyers 
setup define market equilibrium problem optimization problem find prices network supports maximum flow 
pick prices invariant holds start algorithm 
conditions guarantee initial prices low prices buyer afford goods 
fixing prices suffices goods cost unit integral 
interested buyer edge incident equality subgraph 
compute buyer prices fixed previous step compute equality subgraph 
edge incident reduce price iterative improvement steps follow spirit primal dual schema primal variables flows edges dual variables current prices 
current flow suggests improve prices vice versa 
define money prices set define money context clarify price vector define neighborhood assumption potential buyer invariant clearly stated 
lemma prices network satisfies invariant iff proof forward direction trivial maxflow value set sending amount flow neighborhood 
prove reverse direction 
assume min cut capacity cut cut infinite capacity 
moving side results cut 
condition stated lemma capacity cut larger previous 
min cut invariant holds 
invariant holds easy see unique maximal set say tight set prices clearly prices goods tight set increased violating invariant 
algorithm raises prices goods active subgraph consisting bipartition say algorithm freezes subgraph observe general bipartite graph may consist connected components equality edges 
clearly soon prices goods raised edges re main equality subgraph anymore 
assume edges dropped 
proceeding sure changes violate invariant 
follows lemma invariant holds tight set edge equality subgraph buyer proof invariant holds equality graph edge incident 
edges incidents buyers contradicts fact invariant holds 
raise prices goods active subgraph way equality edges retained 
ensured multiplying prices goods gradually increasing starting see desired effect observe equality edges iff algorithm raises starting happens event set goes tight active subgraph 
event edge equality edge 
observe prices goods increasing goods desirable buyers reason event 
event happens redefine active subgraph proceed iteration 
suppose event happens new equality edge tight anymore 
move active subgraph 
complete algorithm simply need compute smallest values event event happen consider smaller 
event straightforward 
build algorithm event 
finding tight sets denote current price vector 
lemma describes min cut changes increases 
section function denote money prices assume prices tight set empty restrict attention active subgraph purposes finding tight set 
de fine value nonempty set goes tight 
denote tight set prices cut network assume lemma prices min cut 
min cut 
min cut proof suppose definition lemma prices invariant holds 
min cut 
suppose prices cut strictly smaller capacity cut min cut 
suppose clearly cut infinite capacity 
mov ing side get smaller cut contradicting minimality cut picked 
particu lar inequality hold leading contradiction 
furthermore hand imply contradicting definition complete statement part lemma essential purposes unique min cut min cuts obtained moving bunch connected components cut side lemma suppose min cut proper subset proof cut capacity min cut 
chosen value cut capacity min cut lemma 
proper subset lemma max flow computations 
proof clearly min cut lemma min cut lemmas sufficient recurse smaller graph termination market clearing prices total money possessed buyers max flow computed network current prices surplus money buyers 
partition running algorithm phases phase terminates occurrence event 
phase partitioned iterations conclude new edge entering equality subgraph 
show proportional number phases executed far showing surplus vanish bounded time 
lemma termination phase prices goods newly tight set rational numbers denominator proof newly tight set consider equality subgraph induced bipartition sume graph connected prove lemma connected component graph 
pick subgraph reach vertices clearly edges suffice 
reaches path length products utility param eters 
alternate edges path contribute partition subgraph sets distinct sets 
considerations lead easily showing proving lemma 
lemma phase consists iterations 
proof iteration brings goods tight set active subgraph 
clearly happen times set going tight 
lemma consider phases necessarily consecutive lies newly tight sets increase price proof prices respectively 
clearly lemma increase price going lemma phases proof consider phase lies newly tight set phase 
phase earlier lies newly tight set 
phase phase appears tight set start algorithm 
charge entire increase price going increase takes place gradually intermediate phases 
lemma manner phase charged lemma follows 
corollary algorithm terminates market clearing prices max flow computations 
phases executes upper bound quite loose easy shave factor giving tighter version lemma 
establishing polynomial running time algorithm speeded ensuring phase prices increase substantially 
key idea preemptively freeze sets tight 
fixed 
actions taken case events modified follows 
newly tight set phase current prices 
algorithm executes extra step add price active subgraph find min cut network maximizes side maximal min cut 
subset side min cut 
freeze clearly prices computing function surplus subgraph algorithm continue phase prices added purpose finding 
algorithm maintains invariant 
suppose new edge enters equality subgraph begins satisfying subgraph determined follows 
add prices goods frozen part compute maximal mincut edge added course 
move part subgraph side active subgraph 
prices current phase set goods active subgraph point current phase 
say loose money computed prices lemma point current phase subset goods active subgraph loose 
proof consider set goods active subgraph 
partition subsets depending time added active subgraph current phase active subgraph start phase 
part came earliest 
hand invariant lemma follows 
consequence lemma current phase ends new tight set flow increase consider situation goods frozen 
call running algorithm til stage epoch 
surplus start epoch number phases executed epoch observation surplus frozen subgraph total surplus epoch current prices stage algorithm reduces constant factor executes epoch starting current prices 
turns base natural logs choice 
epoch consider epoch drops epoch surplus final epoch run lemma epoch appears newly tight set different phases 
epoch phases terminates market clearing prices 
easy see number epochs assuming get theorem algorithm executes max flow computations finds market clearing prices 
discussion definition buyer buyer allowed buy edge equality subgraph inequality satisfied equality 
condition analogous dual complementary slackness condition states primal variable non zero corresponding dual constraint satisfied equality 
algorithm polynomial running time modifications section 
leave open problem 
question algorithm fact strongly polynomial running time 
algorithm performed preliminary experiments conducted randomly chosen instances buyers goods 
considering importance efficiently computing equilibria especially context new applications arising internet developing algorithmic theory market equilibria polynomial time exact approximation algorithms worthwhile goal 
fisher original problem concave utility functions solved polynomial time 
utility functions incorporate fact buyer utility decreases gets 
vein defines generalization linear case extends ideas rate buyer derives utility depends piecewise linear concave manner fraction budget spent generalization worth studying raised open question linear case arrow debreu setting dichotomy buyers sellers 
third somewhat unexpected generalization arises viewing kelly charging rate control problem networks market equilibrium question :10.1.1.144.6615
different avenue progress may arise adler observation linear version fisher problem stated nonlinear complementarity problem 
acknowledgments wish ilan adler dick karp noam nisan herb scarf pete valuable discussions pointers literature 
iyer conducting experiments 
adler 
personal communication 
arrow debreu 
existence equilibrium competitive economy 
econometrica 
scarf 
compute equilibrium prices 
foundation discussion 
debreu 
economic theory mathematical mode nobel lecture 
aer 
deng papadimitriou safra 
complexity equilibria 
proceedings acm symposium theory computing 
eisenberg gale 
consensus subjective probabilities method 
annals mathematical statistics 
gale 
theory linear economic models 
mcgraw hill 
jain vazirani 
equitable cost allocations primal dual type algorithms 
proceedings rd acm symposium theory computing 
kelly :10.1.1.144.6615
charging rate control elastic traffic 
european transactions telecommunications 
kelly vazirani 
rate control market equilibrium 
preparation 
kuhn 
hungarian method assignment problem 
naval research logistics quarterly 
papadimitriou 
complexity parity argument inefficient proofs existence 
jcss 
scarf 
computation economic equilibria collaboration hansen 
foundation monograph new haven yale university press 
vazirani 
market equilibrium stepwise linear utility functions 
preparation 
vazirani 
approximation algorithms 
springer verlag berlin 
walras 
ments pure ou th orie de la elements pure economics theory social wealth 
lausanne paris 
th ed rev ed engl 
transl 
