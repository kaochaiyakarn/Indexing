synthesizing object oriented functional design promote re shriram krishnamurthi matthias felleisen daniel friedman department computer science rice university april preliminary version appeared european conference object oriented programming problems require recursively speci ed types data collection tools operate data 
time problems evolve programmer extend toolkit extend types adjust existing tools accordingly 
ideally done modifying existing code 
unfortunately prevailing program design strategies support forms extensibility functional programming accommodates addition tools object oriented programming supports adding new tools extending data set 
composite design pattern synthesizes best approaches process resolves tension design strategies 
show protocol suggests new set linguistic facilities languages support class systems 
evolutionary software development programming practice frequently confronts programmers design dilemma 
recursively de ned set data processed di erent tools 
anticipation extensions data speci cation tools implemented easy 
add new variant data adjust existing tools accordingly 
extend collection tools 
ideally extensions require existing code 
source modi cation cumbersome error prone 
second source may available modi cation tools distributed form object code 
necessary evolve research partially supported nsf ccr ccr ccr cda texas atp 
permanent address computer science department indiana university 
program di erent directions case code modi cations prohibitively expensive required duplication result duplicated maintenance costs 
dilemma manifests di erent application areas 
particularly important example arises area programming languages 
language grammars typically speci ed denote recursively de ned data sets 
language processing tools recursively traverse sentences formed grammar 
scenario new form data means additional clause bnf new tools able traverse possible elements extended grammar 
unfortunately prevailing design strategies accommodate required evolution functional approach realized conventional procedural languages implements tools procedures recursive types 
strategy easily accommodates extension set tools requires signi cant source modi cations data set needs extended 
standard object oriented approach de nes recursive set data collection classes variant bnf clause places method tool class 
parlance object oriented design patterns approach isknown interpreter pattern 
problem poses dual problem functional approach variants easy add tool additions require code modi cations 
collection tools large designer may visitor pattern variant ofthe interpreter pattern collects code tool single class 
roughly speaking visitor pattern emulates functional approach object oriented setting 
result su ers problem functional approach 
short design styles su er serious problem 
style accommodates form extension easily renders nearly impossible 
presents extensible visitor pattern new composite design pattern provides elegant solution dilemma 
composite pattern combination visitor factory method patterns 
implementation class object oriented programming language straightforward 
addition introduces linguistic abstraction facilitates implementation visitor extensible visitor patterns 
abstraction syntactically synthesizes best functional object oriented design approaches 
abstraction programmer speci es necessary pieces pattern translator assembles pattern implementation pieces 
consider approach promising avenue research pattern implementations 
section introduces simple example design dilemma brie discusses functional approach standard object oriented approach interpreter pattern extensible software 
section analyzes problems visitor pattern develops extensible visitor pattern context running example 
section describes typechecking issues arise pattern 
section presents linguistic extension facilitates implementation visitor extensible visitor patterns 
section discusses state implementation experiences 
sections describe related summarize ideas 
existing design approaches illustrate design problem concrete example simplistic geometry manager program derived department defense programming contest 
discuss functional object oriented design methods context expose failings 
cook devotes tutorial problem rst anticipated reynolds 
datatype shape num num point shape containspt point shape 
boolean containspt containspt shrink num shape 
shape shrink pct pct pct ds shrink pct functional approach types functional approach tools functional approach adding tools discussion term tool refer service provided program typically implemented class function procedure 
initially system speci es set data shape partitioned subsets squares circles translated shapes tool shape point determines point inside shape containspt 
set shapes extended composite shape union 
set tools grows include number shape creates copy shape shrunken dimensions percentage shrink 
functional approach functional language recursively de ned data speci ed datatype declarations 
declaration introduces new type variants 
haskell example programmer data datatype construct respectively represent set shapes shown fig 

new tag distinguish forms data 
variant speci es record structure xed number typed elds 
types may include datatype declared 
gure variants datatype describe structure di erent shapes square described length side number circle radius number translated shape displacement underlying shape 
values constructed writing name variant followed expressions elds variant 
example constructs square type shape side length 
tools map variants shape datatype results 
example fig 
shows outline tool containspt determines point inside shape 
mathematics elided rudimentary relevant example 
function de nition uses pattern matching pattern matches identi ers left bound right tothe corresponding values elds 
example pattern rst line function matches squares binds length square side 
datatype de nition shape recursive corresponding tools usually recursive recursive pointers structures unions represent set constructs 

recursive calls tool match recursive structure datatype 
template de ne tools example fig 
shows structure shrink takes shrink factor number shape produces shape dimensions shrunk speci ed factor 
add tools shrink making changes existing tools containspt 
functional style code variants de ned scope single function 
simpli es task comprehending tool 
easy de ne abstractions code variants 
unfortunately impossible add variant modifying existing code 
datatype representing shapes modi ed existing functional languages er extensible datatype mechanism restricted manner :10.1.1.17.268
second extensible datatype de nitions available code tool edited accommodate extensions datatype 
summary functional programming methodology easy add new tools impossible extend datatype code modi cation 
object oriented approach object oriented program data de nitions shapes tools developed parallel 
classes introduce new collections data specify signatures operations common variants 
concrete classes represent provide implementations actual operations 
known interpreter pattern 
instance sml program figs 
corresponds java program shown fig 

recursive collection classes lead corresponding recursive calls methods analogous recursion functional program 
setting straightforward extend set shapes 
su ces add new concrete class extends shape methods specify behavior existing tools extension 
example fig 
shows shapes added system 
importantly existing tools remain unchanged 
unfortunately interpreter pattern impossible add new tool existing code stay 
option create concrete class extension de nes method new tool 
ects client code creates instances concrete classes 
clients updated create instances new extended classes old ones objects create methods implement new tool 
ected clients include existing tool 
example fig 
shrink method creates concrete instances shape methods containspt shrink tools 
added invokes shrink object returned method support tools particular method physically updated 
summary object oriented programming represented interpreter pattern provides equivalent extensible user de ned datatype 
interpreter pattern solves problem extending set shapes 
conventional design di cult general impossible extend collection tools changing existing code 
furthermore code tool distributed classes di cult comprehend tool functionality 
abstractions branches tool reside shape programming language multiple inheritance abstraction may apply tools belong shape 
modi cations may change semantics operation 
cases sophisticated protocol necessary speci ed cartwright 
composite pattern 
class shape shape shrink double pct class extends shape double double boolean containspt point gg class extends shape double double boolean containspt point gg class extends shape point shape point shape boolean containspt point return containspt gg object oriented approach basic types tools class extends shape shape lhs rhs shape lhs shape rhs lhs lhs rhs rhs boolean containspt point return lhs containspt rhs containspt gg class shrink extends shape shrink double pct return new shrink object oriented approach adding variants class shrink extends class shrink extends class shrink extends object oriented approach adding tools protocol extensibility re interesting system recursive data domain toolkit subject change 
re extensibility dimensions essential 
section develop programming protocol object oriented concepts satis es desiderata 
protocol main stages 
explain represent extensible datatypes tools visitor pattern visitor pattern su ers problem functional design strategy 
visitor pattern reformulated programmer extend data domain toolkit systematic manner 
demonstrate protocol accommodate extensions multiple tools mutually referential data domains 
ideas illustrated fragments code written pizza parametrically polymorphic extension java 
choice pizza explained sect 

principle class language ei el java smalltalk su ces 
representing extensible datatypes representation extensible datatypes visitor pattern identical interpreter pattern class variant contains interpretive method process 
method consumes processor object contains method corresponding variant datatype 
variant process method dispatches method processor corresponding variant returns result invoked method 
illustrates datatype sect 
represented protocol 
di erent processors return di erent types results process method parametrically polymorphic type 
process argument parametric type implemented interface pizza 
return type place single xed type 
pizza type written running example parametric interface outline tool checks point containment containspt shown fig 

processor depends parameters object processed accepts arguments constructor stores instance variables 
check point shape create instance containspt processor accepts point argument new containspt 
instance containspt passed shape process method process new containspt similarly recursion processor implemented invoking process method appropriate object 
processor extra arguments change process current instance processor argument new instance processor created 
consider containspt processor fig 

deals translated shapes translating point checking underlying shape 
underlined expression method implements appropriate recursive callby creating new processor 
visitor pattern ensures code tool localized single class easily comprehensible functional approach 
absence parametrically polymorphic type system di cult specify types visitor pattern 
section discusses issue detail 
preliminary version protocol appears book felleisen friedman 
class shape process class extends shape double double process return gg class extends shape double double process return gg class extends shape point shape point shape process return gg interface visitor pattern types class containspt implements point containspt point public boolean public boolean public boolean return process new containspt gg visitor pattern tools class shrink implements double pct shrink double pct pct pct public shape public shape public shape return new process gg visitor pattern adding tools interface extends class extends shape shape shape shape process return gg datatype extension class extends containspt implements point super public boolean return lhs process rhs process gg adding tools processor extension extending program tool collection visitor pattern straightforward 
instance processor shrinks shapes interface 
outlined fig 

example translated shape shrunk shrinking underlying shape shrink factor change translated gure 
recursive call uses processor underlined gure 
extending datatype false start concrete subclasses represent datatype extending datatype description means adding new concrete subclasses 
new class contain process method de ning characteristic visitor style datatypes 
actual processors de ned separately 
parallel datatype extension de ne extension interface processors 
extended interface speci es method variant new variant 
course process method new variants accept processors implement new interface 
requirement expressed di erently di erent languages 
pizza example runtime check languages allow process overridden covariantly usage errors caught checking 
illustrate idea add union shape collection shapes 
new concrete class interface shown fig 

cast underlined gure requires processor implement extended interface 
extended processors class containspt implements point containspt point containspt point return new containspt public boolean public boolean public boolean return process gg class extends containspt implements point super containspt point return new public boolean return lhs process rhs process gg extensible visitor processor extension de ned class extensions existing processors earlier set shapes 
extensions implement new interface shown fig 

unfortunately straightforward extension containspt incorrect 
consider method containspt 
creates new instance containspt process translated shape 
new instance checks un translated point translated shape 
containspt implement method containspt processor process shape 
concretely checking shape new new new new contains point causes runtime error 
speci cally method creates new containspt processor new processor process shape process method nds processor implement interface raises runtime error 
extending datatype solution error points processors visitor pattern designed accommodate extension datatype 
suppose recursive processor handle variants vn 
long recursive call passes datum matter object instance subtype creates new instance recursive call new object handle variants vn 
new variant vn added processor provided recursive call longer process possible inputs 
avoid problem refrain making premature commitment recursive step 
delay making commitment prematurely wemust delegate decision processor creates 
initially delegate creates instances variant vn added extended new delegate overrides old create instances 
encode idea create extensible visitor protocol follows 
creation new processors performed separate method virtual constructor factory method called example 
shape process process datatype processor extension containspt 
virtual constructor expansion original constructor virtual constructor containspt point return new containspt 
expressions construct processors replaced invocations virtual constructor 

virtual constructor overridden extensions processors 
containspt point return new nal version code shown fig 

form system extension shown fig 

rectangles represent concrete classes parallelogram class thin ovals interfaces 
solid lines arrowheads show inheritance arrowheads indicate class implements interface 
dashed lines connect classes interfaces 
label dashed line names method class accepts argument 
boxed portion extended datatype corresponding processor 
processor datatype extension code outside thick box re change 
updating dependencies tools datatypes problem updating dependencies processors general counterpart 
suppose processors andp process datatype depend follows creates instances uses uses 
illustrates situation processor tail arrow creates instance processor head 
extended new variants tools extended andp respectively 
directly create instances extensions process problem resolved extension extensible visitor 
processor equipped virtual constructor processor uses including 
shown fig 
dashed lines indicate virtual constructor create updating dependencies tools instances processors 
extended re ect datatype extension virtual constructor correspondingly overridden 
processor gets current see fig 
existing code remains unchanged 
example existing dependencies redirected new ones added 
related problem arises program contains datatypes mutually recursive 
consider multimedia editor supports text images 
suppose wish incorporate graphical package editor 
editor provides new kind shape hybrid contains element 
entity char image image contains shape 
shape mutually recursive 
shows new de nitions 
presents processors device argument render shapes device respectively 
uses virtual constructor create new instances processor datatype 
extension datatype requires upgrade processors 
virtual constructors processor corresponding datatype extension create instances processor accepts extended datatype 
short treat processors unrelated implementing functionality related datatypes redirect dependencies discussed 
types typed object oriented languages provide kinds polymorphism object polymorphism parametric polymorphism 
object polymorphism means variable declared particular class type say hold instances subclasses parametric polymorphism allows types contain type variables implicitly universally quanti ed example list homogenous list containing type element 
typed object oriented languages provide object polymorphism er parametric polymorphism 
pizza parametric polymorphism greatly facilitates implementation extensible visitors 
illustrate point detail contrast pizza implementation java 
java process expected return values return type declared object 
choosing type cp force clients return subtypes cp inappropriate clients prevents re existing libraries classes 
clients invoke processors including recursive invocations narrowing casts restore returned value original type 
translate containspt return boolean boolean java version method public object return new boolean boolean lhs process boolean rhs process template mechanism provides limited amount parametric polymorphism :10.1.1.26.9545
thorup proposed di erent style type parameterization java virtual types 
implement extensible visitor virtual types types classes analogous virtual methods obtain bene ts type checking process follows virtual type declared processor process unfortunately currently possible virtual types personal communication august 
virtual types viable alternative extensible visitor 
choice object accommodate processors return primitive types subtypes type including object 
processors forced wrapped versions primitive types incurring space time penalties 
class hybrid extends shape class class char extends class image extends shape mutually recursive datatypes class implements device device device return new device return new class implements device device device return new device return new tools mutually recursive datatypes pizza version code see fig 
compiler statically veri es return type processor acceptable invoking context 
proper implementation programmer gets full bene type checking program incurs runtime expense 
contrast java version passes type checker programmer forced specify runtime checks 
checks compromise program robustness ciency 
compiler eliminate checks rely sophisticated ow analyses compilers perform 
pizza requires programmer repeat pieces type information 
example de ned extension containspt thetype parameter processor instantiated see fig 

methods inside processor need type declarations return type parameter interface 
powerful type inference mechanism smith trifonov palsberg alleviate problems especially context dynamically typed object oriented languages 
language extensible systems extensible visitor pattern solves problem requires mundane details writing class declarations de ne datatype variants de ning overriding virtual constructors keeping type information consistent 
tasks cumbersome error prone managed automatically wehave designed implemented language extension specifying instances visitor extensible visitor patterns 
system called provides constructs declaring extending datatypes processors 
datatypes processors translated collections classes 
processors de ned respect datatype 
action variant datatype implemented method mv processor 
method mv accepts argument instance class implement variant illustrates pizza oriented version specify datatype toolkit running example 
top de ne collection shapes followed containspt processor 
specify extended union shapes corresponding processor extension containspt 
example uses constructs datatype de nes new extensible datatype extends existing 
variant ofthe datatype elds listed keyword variant 
creates class new datatype translates variant concrete subclass process method 
processor de nes processor datatype speci ed processes clause 
optional uses clause followed list tools processor 
processor return type declared returns 
optional elds clause speci es parameters processor determines instance variable declarations constructor 
individual methods variants declared variant 
creates virtual constructor example tool listed dependency 
processor extensions inherit returns elds declarations comments apply equally visitor protocol 
datatype construct super cially related pizza algebraic data types 
pizza data types meant principally creating data structures provide default visitor methods 
clause optional tool may dependencies declare 
information inferred deciding tool dependencies updated design decision programmer 
datatype shape variant double variant double variant point shape processor containspt processes shape uses containspt returns boolean elds point variant variant variant return process datatype extends shape variant shape lhs shape rhs processor extends containspt processes variant return lhs process rhs process sample extended pizza speci cation uses dependency parent 
derived processor needs declare new elds dependencies 
constructor processor extension accepts values elds superclass conveys values inherited elds superclass constructor 
expands extensible visitor speci cation collection classes interfaces equivalent code sect 

implementation performance currently implemented language extension mzscheme version scheme extended java object system 
preliminary version implement drscheme programming environment 
drscheme motivated system helps beginners presenting scheme succession increasingly complex languages 
supports tools asa syntax checker program analyzer largest language handled drscheme complete mzscheme language times size standard scheme 
language processing portions drscheme developed maintained part time single programmer 
preliminary implementation played signi cant ole rapid development 
simpli ed speci cation language tower turn avoided clerical errors facilitated maintenance software 
current implementation years 
resulting environment daily courses rice university institutions 
environment develop actual applications overhead extensible visitor low practical 
applied domains 
wehave build chisel general purpose extensible document construction system 
system handles real world documents easily meets demanding performance criteria 
example chisel generates entire departmental brochure corresponding printed pages kilobytes generated html seconds modern workstation 
marginal cost method visitor pattern minimal 
sole di erence creation processors 
virtual constructor overridden cost local method call ectively inlined visitor 
cases overhead avoided entirely current instance re recursive calls 
cost indirection depends application constructs data objects methods 
experience cost negligible 
background related researchers including cook palsberg jay remy observed trade functional object oriented design approaches noted relative strengths weaknesses method datatype toolkit extension 
palsberg jay suggest solution 
solution replace dispatching visitor protocol generic functions perform double dispatch 
approach accommodate legacy classes classes explicit method visitor disadvantage potentially violating hierarchical design program address organization generic function depends language features support double dispatch 
palsberg jay propose re ection implement visitor protocol 
protocol visitors subclasses walkabout class provides default visitor 
default visitor examines argument argument base class walkabout obtains argument elds java re ection facility recursively visits eld 
palsberg jay approach scales legacy classes unclear system works variants instance variables unrelated elds variant multiple elds type 
proposal relies existence re ective operators languages 
system orders magnitude slower plain visitor making unsuitable practical 
contrast extensible visitor works generic object oriented languages incurs negligible overhead visitor 
lieberherr colleagues built system adaptive programming addresses structural behavioral adaptation systems 
system demeter programmers write separate speci cations traversals actions demeter combines generate complete program 
particular demeter consumes inputs description class graph traversal speci cation graph operations perform node glue code linking traversals operations 
consequently demeter applicable speci cations available production team reconstruct program 
wishes distribute product form object code protect proprietary algorithms probably unwilling distribute demeter speci cation 
contrast method assumes open ended program allows distribution extension object code 
literature design patterns contains attempts de ne implement patterns similar interpreter visitor 
primary presentation visitor pattern states datatype extension di cult solve problems arise 
baumgartner laufer russo propose implementation visitor multi method dispatch claim datatype toolkit extension easy recognize problems arise extending tools coordinating multiple tools 
palsberg lieberherr describe dynamic relationships classes captured expressively context relations extend override behavior classes decouple behavioral evolution inheritance hierarchies 
context relations er concise way expressing visitor operations authors mention solve recursive instantiation problem described sect 

alternatively view variants datatype specifying terms language interpreters tools 
functional language community interested problem creating interpreters fragments interpret portions language :10.1.1.17.268
approaches orthogonal handle semantic extensions interpreters consider problem extensible toolkit 
address problem extending datatype 
duggan findler liang hudak jones describe methods creating restricted notions extensible datatypes 
approaches produce datatypes extensible sense protocol 
programmer may specify variants datatype separately nal datatype assembled closed 
result possible extend variants existing datatype 
additions require access source code 
cartwright felleisen extensible interpreters translated object oriented framework probably resemble extensible visitor protocol untyped setting 
wehave programming protocol extensible visitor construct systems extensible recursive data domains toolkits 
novel combination functional object oriented programming styles draws strengths 
object oriented style essential achieve extensibility data dimension tools organized functional fashion enabling extensibility functional dimension 
systems extensible visitor extended modi cation existing code recompilation increasingly important concern 
described language extension writing extensible programs 
manages mundane potentially error prone administrative tasks arise implementing extensible visitor 
variant years programming environment drscheme 
drscheme able er hierarchy language levels facilitate sound programming 
supports multiple tools operate range language levels 
build systems document generator multiple rendering facilities 
suggests investigations ciency new language facilities 
current implementation extensible visitor incurs execution penalty due dispatching 
design patterns su er similar overheads popularity suggests users interested design extensibility considerations ne grained ciency 
example reports interpreter pattern implement command language slower hand crafted implementation states low development cost far outweighs execution penalty 
believe compiler exploit speci cation assemble cient code na translation outlined 
acknowledgments cartwright mike fagan bob harper thomas karl lieberherr jens palsberg scott smith helpful discussions comments preliminary versions 
baumgartner laufer russo 
interaction object oriented design patterns programming languages 
technical report csd tr purdue university feburary 
cartwright felleisen 
extensible denotational language speci cations 
hagiya mitchell editors symposium theoretical aspects computer science pages 
springer verlag april 
lncs 
clinger rees 
revised report algorithmic language scheme 
acm lisp pointers july 
cook object oriented programming versus data types 
foundations object oriented languages pages june 
coplien schmidt editors 
pattern languages program design 
addison wesley reading ma 
duggan 
mixin modules 
acm sigplan international conference functional programming pages may 
smith trifonov 
type inference recursively constrained types application oop 
mathematical foundations program semantics 
espinosa building interpreters transforming strati ed monads 
unpublished manuscript june 
felleisen friedman 
little java patterns 
mit press 
findler modular interpreters 
unpublished manuscript carnegie mellon university june 
findler flanagan flatt krishnamurthi felleisen 
drscheme pedagogic programming environment scheme 
ninth international symposium programming languages implementations logics programs 
flatt plt mzscheme language manual 
technical report tr rice university 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley personal computing series 
addison wesley reading ma 
gosling joy steele jr java language speci cation 
addison wesley 
hudak jones 
haskell vs 
vs awk vs 
experiment software prototyping productivity 
research report yaleu dcs rr department computer science yale university new haven ct usa october 
hudak peyton jones wadler 
report programming language haskell non strict purely functional language 
acm sigplan notices may 
version 
kernighan ritchie 
programming language 
prentice hall 
translator pattern external functionality homomorphic mappings 
proceedings tools usa pages july 
liang hudak jones 
monad transformers modular interpreters 
symposium principles programming languages pages 
milner tofte harper 
de nition standard ml 
mit press cambridge ma 
odersky wadler 
pizza java translating theory practice 
symposium principles programming languages pages 
palsberg cient inference object types 
information computation 
palsberg jay 
essence visitor pattern 
technical report university technology sydney 
palsberg xiao lieberherr 
cient implementation adaptive software 
acm transactions programming languages systems 
flexible command interpreter pattern extensible languageindependent interpreter system 
appears 
remy aux objets 
unpublished manuscript lecture notes course de ecole normale superieure 
reynolds user de ned types procedural data structures complementary approaches data abstraction 
editor new directions algorithmic languages pages 
ifip working group algol 
riehle composite design patterns 
acm sigplan conference object oriented programming systems languages applications pages 
palsberg lieberherr 
evolution object behavior context relations 
ieee transactions software engineering 
steele jr building interpreters composing monads 
symposium principles programming languages pages 
stroustrup programming language :10.1.1.26.9545
addison wesley 
sun microsystems 
java core re ection 
api speci cation 
thorup virtual types 
european conference oriented programming pages 

