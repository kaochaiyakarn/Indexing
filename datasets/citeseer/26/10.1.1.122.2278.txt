ieee transactions knowledge data engineering vol 
march april efficient data mining path traversal patterns ming chen senior member ieee jong soo park member ieee philip yu fellow ieee explore new data mining capability involves mining path traversal patterns distributed information providing environment documents objects linked facilitate interactive access 
solution procedure consists steps 
derive algorithm convert original sequence log data set maximal forward 
doing filter effect backward mainly ease traveling concentrate mining meaningful user access sequences 
second derive algorithms determine frequent traversal patterns large sequences maximal forward obtained 
algorithms devised determining large sequences hashing pruning techniques improved option determining large sequences batch reduce number database scans required 
performance methods comparatively analyzed 
shown option selective scan advantageous lead prominent performance improvement 
sensitivity analysis various parameters conducted 
index terms data mining traversal patterns distributed information system world wide web performance analysis 
ue increasing computing various applications importance database mining growing rapid pace 
progress bar code technology possible retail organizations collect store massive amounts sales data 
catalog companies collect sales data orders received 
noted analysis past transaction data provide valuable information customer buying behavior improve quality business decisions put sale placed shelves customize marketing programs name 
essential collect sufficient amount sales data meaningful drawn 
result amount processed data tends huge 
important devise efficient algorithms conduct mining data 
note various data mining capabilities explored literature 
important data mining problems mining association rules :10.1.1.40.6984
example database sales transactions desirable discover associations items presence items transaction imply presence items transaction 
mining classification approach trying develop rules group data tuples certain 
chen electrical engineering department national taiwan university taipei taiwan republic china 
mail cc ee ntu edu tw 
park department computer science women university seoul korea 
mail cs ac kr 
yu ibm thomas watson research center box yorktown heights ny 
mail watson ibm com 
manuscript received aug 
information obtaining reprints article please send mail tkde computer org ieeecs log number 
ieee common features 
explored ai domain context databases 
mining spatial databases conducted 
source data mining ordered data stock market point sales data 
interesting aspects explore ordered data include searching similar sequences stocks similar movement stock prices sequential patterns grocery items bought set visits sequence 
noted data mining application dependent issue different applications explored require different mining techniques cope 
proper problem identification formulation important part knowledge discovery process 
shall explore new data mining capability involves mining access patterns distributed information providing environment documents objects linked facilitate interactive access 
examples information providing environments include world wide web www line services users seeking information interest travel object corresponding facilities hyperlinks provided 
clearly understanding user access patterns environments help improve system design provide efficient access highly correlated objects better authoring design pages able lead better marketing decisions putting advertisements proper places better customer user classification behavior analysis 
capturing user access patterns environments referred mining traversal patterns 
note efforts elaborated analyzing user behavior little result reported dealing algorithmic aspects ieee transactions knowledge data engineering vol 
march april improve execution traversal pattern mining 
part explained reason services great potential infancy customer analysis may remain coarser level user occupation age study 
addition important note users traveling information providing services search desired information objects visited locations content showing difference traversal pattern problem mainly customer transactions 
unique feature traversal pattern problem unavoidably increases difficulty extracting meaningful information sequence traversal data 
information providing services increasingly popular nowadays growing demand capturing user behavior improving quality services 
result problem mining traversal patterns important address immediately 
consequently shall explore problem mining traversal patterns 
solution procedure consists steps 
derive algorithm called algorithm mf standing maximal forward convert original sequence log data set traversal subsequences 
defined section traversal subsequence represents maximal forward starting point user access 
explained step converting original log sequence set maximal forward filter effect backward mainly ease traveling enable concentrate mining meaningful user access sequences 
secondly derive algorithms determine frequent traversal patterns termed large sequences maximal forward obtained large sequence sequence appeared sufficient number times database 
note problem finding large sequences similar finding large itemsets association rules large itemset set items appearing sufficient number transactions :10.1.1.40.6984
different sequence mining traversal patterns consecutive maximal forward large itemset mining association rules just combination items transaction 
consequence schemes mining association rules reported literature difference problems calls design new algorithms determining large sequences :10.1.1.40.6984
explicitly algorithms determining large sequences 
referred full scan fs algorithm essentially utilizes techniques hashing pruning solving discrepancy traversal patterns association rules mentioned 
trimming transaction database proceeds passes algorithm fs required scan transaction database pass 
contrast properly utilizing candidate sequences second algorithm devised referred selective scan ss algo rithm able avoid database scans passes reduce disk cost involved 
specifically algorithm ss option candidate set generate subsequent candidate sets delaying determination large sets pass database scanned 
ss scan database obtain large set pass database scans saved 
noted concept selective scan mining association rules implementation performance implication different employed mining path traversal patterns 
experimental studies conducted synthetic workload generated referencing logged traces performance methods fs ss comparatively analyzed 
shown option selective scan advantageous algorithm ss outperforms algorithm fs general 
sensitivity analysis various parameters conducted 
organized follows 
problem formulation section 
algorithm mf identify maximal forward described section algorithms fs ss determining large sequences section 
performance results section 
section contains summary 
problem formulation pointed earlier information providing environment objects linked users apt traverse objects back forth accordance links icons provided 
result node revisited location content 
example www environment reach sibling node user usually inclined backward icon forward selection opening new url 
consequently extract meaningful user access patterns original log database naturally want take consideration effect backward traversals discover real access patterns interest 
view assume backward mainly ease traveling browsing concentrate discovery forward patterns 
specifically backward means revisiting previously visited object user access 
backward occur forward path terminates 
resulting forward path termed maximal forward 
maximal forward obtained back track starting point forward referencing resume forward path 
deferring formal description algorithm determine maximal forward algorithm mf section give illustrative example maximal forward 
suppose traversal log contains traversal path user shown fig 

verified algorithm mf set maximal forward user abcd 
maximal forward users obtained map chen efficient data mining path traversal patterns problem finding frequent traversal patterns finding frequent occurring consecutive subsequences maximal forward 
large sequence sequence appeared sufficient number times 
set maximal forward number times sequence appear order qualified large sequence called minimal support 
large large sequence elements 
denote set large candidate set obtained contains may appear explicitly superset fig 

illustrative example traversal patterns 
worth mentioning large sequences determined maximal sequences obtained straightforward manner 
maximal sequence large sequence contained maximal sequence 
example suppose ab ad cg gh bg set large abe cgh set large 
resulting maximal sequences ad bg abe cgh 
maximal sequence corresponds hot access pattern information providing service 
entire procedure mining traversal patterns summarized follows 
procedure mining traversal patterns step determine maximal forward original log data 
step determine large sequences lk set maximal forward 
step determine maximal sequences large sequences 
extraction maximal sequences large sequences step straightforward shall henceforth focus steps devise algorithms efficient determination large sequences 
algorithm traversal pattern shall describe section algorithm mf converts original traversal sequence set maximal forward 
mapping problem finding frequent traversal patterns finding frequent consecutive subsequences develop algorithms called full scan fs selective scan ss mining traversal patterns 
identifying maximal forward general traversal log database contains link traversed pair source destination 
part log database called referer log 
new path linked previous traversal source node null 
traversal sequence user shall map multiple subsequences represents maximal forward 
algorithm finding maximal forward follows 
traversal log database sorted user ids resulting traversal path user pairs ordered time 
algorithm mf applied user path determine maximal forward 
denote database store resulting maximal forward obtained 
algorithm mf algorithm find maximal forward step set string null initialization string store current forward path 
set flag indicate forward traversal 
step si di equal null new traversal write current string null database df set string go step 
step equal say jth string cross referencing back previous equal write string database df discard jth string go step 
step append string continuing forward traversal equal set 
step set 
sequence completed scanned go step 
ieee transactions knowledge data engineering vol 
march april consider traversal scenario fig 
example 
verified backward encountered fourth move 
point maximal forward abcd written step 
move conditional statement step true written flag meaning reverse traversal 
subsequent forward put string written reverse encountered 
execution scenario algorithm mf input fig 
table 
table example execution algorithm mf move string output ab abc abcd abc abcd ab abe ao ao noted cases traversal log record obtained contains destination pair 
example www browsing request message may contain destination url 
traversal sequence form user 
input convert set maximal forward 
difference case identify breakpoint user picks new url new traversal path meaning consecutive maximal forward may treated path 
certainly constraint ids source nodes increase computational complexity paths considered longer 
constraint little effect identifying frequent subsequences 
logical link subsequence containing hw occur frequently 
containing pattern hw emerge large 
algorithm mf fact employed case ids source nodes available 
determining large sequences database containing maximal forward users constructed derive frequent traversal patterns identifying frequent occurring sequences sequence said contain consecutive subsequence exists example said contain 
sequence called large sequence sufficient number users maximal forward containing consecutive subsequence 
pointed problem finding large sequences different finding large itemsets association rules calls design new algorithms 
consequently shall derive algorithms mining traversal patterns 
called full scan fs algorithm essentially utilizes concept dhp hashing pruning solving discrepancy traversal patterns association rules 
dhp major features determining association rules efficient generation large itemsets effective reduction transaction database size scan 
trimming database proceeds passes fs required scan database pass 
contrast properly utilizing candidate sequences second algorithm referred selective scan ss algorithm improved option determining large sequences batch reduce number database scans required 
algorithm full scan fs algorithm fs utilizes key ideas dhp algorithm 
details dhp 
example scenario determining large itemsets candidate itemsets appendix 
shown utilizing hash technique dhp efficient generation candidate itemsets particular large itemsets greatly improving performance bottleneck process 
addition dhp employs effective pruning techniques progressively reduce transaction database size 
recall represents set large set candidate 
general superset scanning fs gets hash table count number occurrences 
similarly dhp starting fs generates hash table count obtained previous pass determines set large reduces size database pass hash table determine candidate 
note mining association rules set candidate generated joining denoted 
due difference traversal patterns association rules modify approach follows 
distinct sequences say join form sequence contains contains dropping element sequence element sequence 
example technique hashing employed dhp reduce number candidate itemsets shown 

approach generating directly proposed algorithm apriori generating candidate itemsets association rules 
chen efficient data mining path traversal patterns remaining identical 
note small especially case deriving joining result large number candidate hashing technique helpful case 
increases size decrease significantly 
generally beneficial fs generate directly hashing 
count occurrences determine need scan trimmed version database set maximal forward determine large 
scan entire database count exceeding threshold nonempty iteration continues pass pass 
dhp time database scanned database trimmed fs improve efficiency scans 
algorithm selective scan ss algorithm ss similar algorithm fs employs hashing pruning techniques reduce cpu costs different algorithm ss properly utilizing information candidate prior passes able avoid database scans passes reducing disk cost 
method ss avoid database scans reduce disk cost described 
recall algorithm fs generates small number candidate hashing technique 
fact small generate candidate 
clearly generated size greater generated 
larger stored main memory find scan database performed saving round database scan 
seen concept determine scans database initial scan determine final scan determine large sequences assuming ck generated ck ck kept memory 
note minimum support relatively small potentially large long ck lk large 
ck generated ck ck ck ck may cost cpu time generate subsequent candidate sets large size cj may huge quickly compromising benefit saving disk cost 
illustrative example appendix determined abc abe ace bce 
fact suggests timely database scan determine large sequences fact pay 
database scan obtain large sequences determined far say lm construct set candidate cm lm point 
experiments ck ck usually beneficial database scan obtain set candidate big 
fs time database scanned database trimmed ss improve efficiency scans 
derive ck lk 
note ck fact equal ck 
derive 
process continues set candidate empty 
illustrative examples fs ss table number paths minimum support percent 
extensive experiments conducted section 
example run fs performs database scan pass determine corresponding large sequences resulting database scans 
hand ss scans database times skipping database scans passes able obtain result 
cpu disk times fs seconds seconds respectively ss seconds seconds respectively 
considering cpu times execution time ratio ss fs showing concept selective scan useful mining association rules mining path traversal patterns 
performance results table results example run fs ss assess performance fs ss conducted experiments determine large sequences rs workstation model 
algorithm fs time sec ck lk dk mb mb mb mb algorithm ss mb mb ck lk dk mb mb mb ieee transactions knowledge data engineering vol 
march april methods generate synthetic data described section 
performance comparison methods section 
sensitivity analysis conducted section 
generation synthetic traversal paths experiment browsing scenario world wide web www environment simulated 
generate synthetic workload determine values parameters referenced logged traces collected gateway location 
traversal tree constructed mimic www structure starting position root node tree 
traversal tree consists internal nodes leaf nodes 
fig 
shows example traversal tree 
number child nodes internal node referred fanout determined uniform distribution range 
height subtree child node root node determined poisson distribution mean mh 
height subtree child internal node ni determined poisson distribution mean equal fraction maximum height internal node ni 
height tree controlled value mh 
traversal path consists nodes accessed user 
size traversal path picked poisson distribution mean equal 
node root node traversal path generated probabilistically traversal tree follows 
internal node determine hop predetermined probabilities 
essentially edge connecting internal node assigned weight 
weight corresponds probability edge accessed user 
shown fig 
weight parent node assigned generally number child nodes 
probability traveling child node pi determined exponential distribution unit mean normalized sum weights child nodes equal 
internal nodes tree allow internal jumps go nodes 
internal node internal jump weight jump pj changed pj corresponding probability child node changed pi pj sum probabilities associated node remains 
path arrives leaf node move parent node backward probability internal node aggregate probability 
number internal nodes internal jumps denoted nj set percent internal nodes general cases 
sensitivity varying nj analyzed 
nodes internal jumps decided randomly internal nodes 
table summarizes meaning various parameters simulations 
performance comparison fs ss fig 
represents execution times methods fs ss percent 
fig 

traversal tree simulate www 
means height tree average size paths 
means number paths 
tree obtained height tree fanout internal node 
root node consists child nodes 
number internal nodes number leaf nodes 
number internal nodes internal jumps 
note total number nodes increases height tree increases 
experiment tractable reduced fanout tree height 
tree contained internal nodes leaves 
fig 
left graph represents cpu time find large sequences right graph shows time find disk time set mb sec mb buffer main memory 
chen efficient data mining path traversal patterns fig 

execution times fs ss 
seen fig 
algorithm ss general outperforms fs performance difference prominent cost taken account 
provide insights performance addition table section table shows results methods percent 
table fs scans database times find large sequences ss involves database scans 
note initial scans disk involved fs ss include disk read disk write writing trimmed version database back disk 
time methods shown fig 

considering cpu times total execution time fs seconds ieee transactions knowledge data engineering vol 
march april ss seconds 
note execution time ratio fs ss case slightly better associated table 
fig 
shows scale experiments cpu times method increase linearly database size increases 
experiment traversal tree levels fanout internal nodes minimum support set percent 
table meaning various parameters height traversal tree 
number child nodes fanout 
nj number internal nodes internal jump 
backward weight probability parent node 
pj jump weight probability internal jump 
parameter zipf distribution 
height tree 
number paths size database 
dk set forward lk ck set candidate sequences 
lk set large sequences 
average size paths 
table number large sequences execution times algorithm fs time sec ck lk dk mb mb mb mb mb mb mb mb algorithm ss ck lk dk mb mb mb fig 

input output cost fs ss pass 
seen ss consistently outperforms fs database size increases 
sensitivity analysis general algorithm ss outperforms fs loss generality shall conduct sensitivity analysis various parameters algorithm ss section 
performance evaluation carried condition chen efficient data mining path traversal patterns fig 

execution time fs ss database size increases 
fig 

number large sequences backward weight varied 
database size average size traversal paths minimum support percent 
fig 
shows number large sequences probability backward internal node varies 
probability increases number large sequences decreases possibility having forward traveling smaller 
fig 
shows number large sequences number child nodes internal nodes fanout varies 
corresponding traversal trees height 
tree fanout consists internal nodes leaf nodes 
tree second bar consists internal nodes leaf nodes third bar consists internal nodes leaf nodes 
results show number large sequences decreases degree fanout increases larger fanout traversal paths dispersed branches resulting fewer large sequences 
clearly large sequences decreases execution time find decreases 
fig 
gives number large sequences probability traveling child node internal node determined zipf distribution 
different values parameter zipf distribution considered 
zipf distribution branching probabilities child nodes generated follows 
probability pi ith child node accessed traversal path pi ieee transactions knowledge data engineering vol 
march april fig 

number large sequences fanout varied 
fig 

number large sequences parameter zipf distribution varied 
normalization constant number child nodes internal node 
get normalized section 
setting parameter corresponds pure zipf distribution highly skewed corresponds uniform distribution 
results show number large sequences increases corresponding probabilities skewed 
table shows performance results ss number internal nodes internal jumps varies percent percent total internal nodes 
number large sequences decreases slightly increases meaning large sequences jumps traversal table number large sequences percentage internal jumps varied time sec chen efficient data mining path traversal patterns table number large sequences height traversal tree varied time sec lk lk lk lk lk paths 
noted performance ss sensitive parameter 
table shows results ss height traversal tree varies 
fanout 
height increases numbers internal nodes leaf nodes increase exponentially 
height traversal tree increased height traversal tree increases number candidate nodes increases execution time find increases 
hand decrease height tree increases average visit node decreases 
number large sequences slightly decreases height tree increases 
fig 

example candidate set generation 
explored new data mining capability involves mining traversal patterns information providing environment documents objects linked facilitate interactive access 
data mining capability incorporated web usage mining tool 
solution procedure consisted steps 
derived algorithm mf convert original sequence log data set maximal forward 
doing filtered effect backward concentrated mining meaningful user access sequences 
secondly developed algorithms determine large sequences maximal forward obtained 
algorithms ieee transactions knowledge data engineering vol 
march april devised determining large sequences hashing pruning techniques improved option determining large sequences batch reduce number database scans required 
performance methods comparatively analyzed 
shown option selective scan advantageous algorithm ss general outperformed algorithm fs 
sensitivity analysis various parameters conducted 
appendix generation large itemsets candidate itemsets example transaction database shown fig 
large itemsets candidate itemsets determined follows 
essence generated large itemsets construct candidate itemsets pass 
minimal support equal database scan large itemsets determined candidate itemsets number occurrences greater equal 
detailed algorithm 
acknowledgments ming chen supported part project 
nsc national science council taiwan republic china 
jong soo park supported professors women university korea 
agrawal faloutsos swami efficient similarity search sequence databases proc 
fourth int conf 
foundations data organization algorithms oct 
agrawal ghosh imielinski iyer swami interval classifier database mining applications proc 
th int conf 
large data bases pp 
aug 
agrawal imielinski swami mining association rules sets items large databases proc :10.1.1.40.6984
acm sigmod pp 
may 
agrawal srikant fast algorithms mining association rules large databases proc 
th int conf 
large data bases pp 
sept 
agrawal srikant mining sequential patterns proc 
th int conf 
data eng pp 
mar 
beck navathe knowledge mining imprecise querying classification approach proc 
eighth int conf 
data eng pp 
feb 
berners lee frystyk hypertext transfer protocol internet draft feb 
bieber wan backtracking multiple window hypertext environment acm european conf 
hypermedia technology pp 

caramel crawford chen browsing hypertext cognitive study ieee trans 
systems man cybernetics vol 
pp 
sept 
catledge pitkow characterizing browsing strategies world wide web proc 
third www conf apr 
december randall world wide web unleashed sams publishing 
han cai cercone knowledge discovery databases attribute oriented approach proc 
th int conf 
large data bases pp 
aug 
han fu discovery multiple level association rules large databases proc 
th int conf 
large data bases pp 
sept 
ng han efficient effective clustering methods spatial data mining proc 
th int conf 
large data bases pp 
sept 

park 
chen yu hash method transaction trimming mining association rules ieee trans 
knowledge data eng vol 
pp 
sept oct 
piatetsky shapiro discovery analysis presentation strong rules knowledge discovery databases pp 

quinlan induction decision trees machine learning vol 
pp 

trio personal communication may 

wang 
chirn marr shapiro shasha zhang combinatorial pattern discovery scientific data preliminary results proc 
acm sigmod minneapolis pp 
may 

wu yu web usage mining analysis tool ibm systems vol 
pp 
jan 
ming chen received bs degree electrical engineering national taiwan university taipei taiwan republic china ms phd degrees computer information control engineering university michigan ann arbor respectively 
dr chen professor electrical engineering department national taiwan university 
research interests include database systems internet technologies multimedia applications 
research staff member ibm thomas watson research center yorktown heights new york primarily involved projects related parallel databases multimedia systems data mining 
published refereed international journal conference papers research areas papers appeared acm ieee journals transactions 
dr chen currently editor ieee transactions knowledge data engineering served guest editor special issue ieee transaction knowledge data engineering mining databases december 
invented international patents areas interactive video playout video server design interconnection networks concurrency coherency control protocols 
received outstanding innovation award ibm contribution parallel transaction design major database product numerous awards inventions patent applications 
dr chen senior member ieee member acm 
jong soo park received bs degree electrical engineering honors national university korea ms phd degrees electrical engineering korea advanced institute science technology seoul korea respectively 
served engineer korean ministry national defense 
visiting researcher ibm thomas watson research center yorktown heights new york july july 
currently associate professor department computer science women university seoul korea 
research interests include data mining geographic information systems digital libraries 
member acm ieee korea information science society kiss 
chen efficient data mining path traversal patterns philip yu sm received bs degree electrical engineering national taiwan university taipei taiwan republic china ms phd degrees electrical engineering stanford university respectively mba degree new york university 
ibm thomas watson research center yorktown heights new york currently manager software tools techniques group 
current research interests include database systems data mining multimedia systems transaction query processing parallel distributed systems disk arrays computer architecture performance modeling workload analysis 
published papers refereed journals conferences research reports invention disclosures 
holds applied patents 
dr yu fellow ieee acm 
editor ieee transactions knowledge data engineering 
addition serving program committee member various conferences served program chair second international workshop research issues data engineering transaction query processing program chair th international conference data engineering 
received ibm industrial honors including awards best ibm outstanding innovation outstanding technical achievement invention achievement plateaus research division awards 
