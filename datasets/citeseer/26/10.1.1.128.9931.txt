broadcast primitives replicated databases agrawal el abbadi dept computer science university california santa barbara ca mail agrawal cs ucsb edu explore di erent variants broadcast protocols managing replicated databases 
starting simplest broadcast primitive reliable broadcast protocol show ensure correct transaction execution 
protocol simple advantages including prevention deadlocks 
requires twophase commitment protocol ensuring correctness 
develop second protocol uses causal broadcast avoids overhead phase commit exploiting causal delivery properties broadcast primitives implicitly collect relevant information phase commit 
protocol employs atomic broadcast completely eliminates need transaction commitment 
increasing interest development broadcast protocols disseminating information distributed systems 
broadcast protocols varying properties proposed implemented di erent distributed systems 
protocols range simple broadcast protocols essentially ensure eventual delivery sites complex protocols enforce speci order delivery messages 
case causal broadcast protocol ensures partially supported nsf numbers ccr ccr 
copyright ieee 
published proceedings icdcs may amsterdam netherlands 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

causally related messages delivered order sites atomic broadcast protocol ensures messages delivered order sites 
various implementations protocols proposed di erent underlying hardware including amoeba isis transis total totem 
general weaker ordering requirements cient protocol 
important cited application broadcast protocols management replicated data 
increasing interest management replicated databases unit activity transaction consisting multiple operations need executed atomically unit 
proposals explore transaction semantics cases replication management protocols require addition broadcast primitives additional techniques ensure correct transaction execution 
furthermore atomic broadcast primitives expensive complex implement asynchronous systems subject failures 
raynal proposed protocols broadcast primitives relax serializability correctness criterion 
explore variants broadcast protocols managing replicated databases serializability 
particular start simplest broadcast primitive reliable broadcast protocol show ensure correct transaction execution 
protocol advantages including prevention deadlocks guaranteed commitment read transactions 
requires phase commitment protocol ensuring correctness 
develop second protocol uses expensive causal broadcast avoids overhead phase commit exploiting causal delivery properties broadcast primitives implicitly collect relevant information phase commit 
protocol employs atomic broadcast completely eliminates need acknowledgments transaction commitment 
system communication model distributed system consists set distinct sites communicate sending messages communication network 
common requirement assume easily enforced communication pair sites fifo messages delivered order sent 
users interact database invoking transactions sequence read write operations executed atomically 
transaction commits aborts results operations 
commonly accepted correctness criterion databases serializable execution transactions 
strict phase locking widely assume concurrency control locally enforced strict phase locking database sites 
distributed replicated database copies object may stored sites network 
multiple copies object appear single logical object transactions 
termed copy equivalence enforced control protocol 
correctness criterion replicated databases serializability ensures copy equivalence serializable execution transactions 
simplicity assume database fully replicated site stores copy objects databases 
furthermore assume transaction performs read operations initiating write operations 
note assumption reduce application expressibility traditional transaction model 
order enforce type transaction execution need defer writes standard transactions 
numerous proposals specify broadcast communication models distributed systems 
ofthese broadcast primitives subtle di erences speci cations assumptions regarding underlying system 
protocols properties de ne simplest primitive reliable broadcast protocol 
validity correct process broadcasts message correct processes eventually deliver 
agreement correct process delivers message correct processes eventually deliver strict phase locking transactions hold locks termination 

integrity message correct process delivers previously broadcast sender events causally related executed site sending message delivery message 
causal relationship events system transitive closure conditions 
causal broadcast protocol delivers messages causal order 
causal broadcast addition properties reliable broadcast guarantees property causal delivery broadcast message causally precedes broadcast message correct process delivers previously delivered causal broadcast protocols implemented systems isis transis 
atomic broadcast imposes total order delivery messages reliable broadcast property ordered delivery sites deliver broadcast messages delivered order sites 
worth noting atomic broadcast ensures order delivery sites necessarily ensure messages delivered order sent 
due fifo assumption communication links process atomically matter reliably causally broadcasts message message processes receive 
atomic broadcast implemented amoeba isis transis total 
broadcast primitives incorporate implementation various techniques faulttolerance including majority quorum approach 
particular communication layer maintains view current system con guration 
site failures recovery occur view dynamically restructured notion majority quorums 
long view majority membership system remains operational 
view current con guration notion write context 
avoids duplication orts provide fault tolerance multiple levels 
reliable broadcast protocol reliable broadcast simple communication primitive relatively straightforward implement compared ordered broadcast primitives causal atomic broadcast 
exposition developing replicated data management protocol uses reliable broadcast communication 
reliable broadcast guarantees eventual delivery motivations protocol remove need explicit acknowledgment remote interaction 
numerous replica control protocols proposed database literature protocols studied context point point communication environment 
start adapting read write protocol broadcast environments 
motivated reliable broadcast order eliminate need explicit acknowledgments write operations 
shift responsibility reliability property communication communication primitives simplify implementation application level 
recall assume transaction execution model rst read operations executed initiating site followed set writes broadcast sites 
commit protocol executed 
furthermore initiator transaction knows messages sends guaranteed delivered initiator issue consecutive write operations non blocking manner issues write operation immediately proceeds operation 
describe details protocol 
reliable broadcast protocol 

read rule 
read operation transaction executed locally initiating site transaction remains blocked read lock granted initiator 

write rule 
write operation transaction executed reliably broadcasting database sites 
delivery site acquires write lock currently held transaction delayed lock granted 
proceeds execute operation waiting write locks granted including initiator 

commit rule 
initiating site decides commit transaction reliably broadcasts commit request database sites including 
delivery site including checks pending write operations 
case broadcasts negative acknowledgment database sites 
positive acknowledgment database sites 
transaction aborted sites including negative acknowledgment tot commit request 
hand database sites acknowledge positively committed locks read locks write locks sites held released 
votes participants broadcast participant commit protocol decentralized phase commit protocol 
protocol simple fact fairly straightforward extension traditional read write protocol uses point point communication primitives 
fact assuming standard point point communication transactions optimistically assume operations delivered commit time optimistic assumption validated 
reliability property reliable broadcast protocol optimistic assumption appropriate 
protocol exploits reliability properties broadcast primitive requiring explicit acknowledgments operations executed remote database sites 
sense transactions execute waiting global synchronization veri ed time transaction commitment 
reliable delivery sole concern transaction system con icting operations executed order 
order guarantees ensured reliable broadcast primitive write operations may arrive di erent sites di erent orders 
inconsistencies detected eliminated commit time 
correctness protocol follows fact phase locking locally site write operations broadcast 
phase locking ensures con icting transactions committed order execution con icting operations 
serialization graph execution acyclic 
show serialization graph copy serialization graph need show serialization graph execution includes relevant write order read orders transactions 
write order ensured write operations broadcast sites concurrent con icting writes delivered di erent order di erent sites eventually aborted protocol 
furthermore phase locking fact write operations executed sites ensure read order 
transaction exe copy serializable 
important side ect approach transactions blocked global synchronization deadlocks resolved consistently 
observed noting transaction blocked initiating site read phase 
write operations broadcast non blocking manner sites receive write operations execute delay commitment initiating transaction forced abort 
cases consider 
blocked operation read operation global deadlock occur blocked operation write operation initiated site aborted commit time 
alternatively blocked operation write operation global deadlock occur blocked write operation 
reads executed writes transaction completion write operations veri ed commit time 
furthermore transactions blocked read phase involved local deadlock 
reliable broadcast decentralized phase commit protocol able eliminate need explicit acknowledgments write operations eliminate problem deadlocks 
nal interesting property protocol read transactions aborted 
site site incorrect execution early release read locks 
protocol read locks released termination commit abort transaction 
read operations usually frequent comparison write operations advantageous release read locks early possible 
strict phase locking protocol database management systems read locks released transaction initiates commitment 
order incorporate early release read locks modify protocol read locks released time commit request broadcast initiating site transaction 
simply releasing read locks early may result incorrect executions read locks maintained termination detect read write con icts concurrent write operations 
illustrate example inconsistency 
site transaction executes followed broadcast decides commit 
commit message broadcast releasing read lock 
likewise site transaction executes followed broadcast broadcasts releasing read lock 
releases read lock executed positive response commit request results committing successfully sites 
symmetrically receive positive acknowledgments commit 
execution 
capture inconsistency piggyback onthe commit message read set contains objects read transaction 
read set compared receiving sites write operations locally initiated transactions detecting read write 
resolve con ict denying commit request 
example illustrated read set piggybacked commit messages aborted case read set fr intersects 
modi ed commit rule stated follows commit rule 
site decides commit updating transaction reliably broadcasts commit request database sites including 
read locks held released read set containing identity objects read included commit request delivery site checks pending write operations note write operations remote sites may blocked due con icting read write operations transactions read set intersects write sets local transactions 
case broadcasts negative acknowledgment database sites 
broadcast database sites 
transaction aborted negative acknowledgments commit request 
hand database sites acknowledge positively committed write locks held released 
emphasized text indicates changes commit rule rst protocol 
commit decision read transactions broadcast read operations aborted due read write con icts read transactions aborted 
early release read locks allows execution writes con icting read operations commit phase reading transaction 
sense rule eliminates blocking due read locks may avoid unnecessary aborts remote transactions account 
illustrate example shown change second transaction execute local read operations 
site transaction executes followed broadcast broadcasts piggybacked fr releasing read lock site transaction executes broadcast broadcasts empty read set 
releases read lock obtains write lock executed 
furthermore arrives site responds positively commits releases lock 
commits site acquires write lock executed nally committed assume acknowledgments arrive delivered site 
note read locks released early aborted pending 
causal broadcast protocol section substitute reliable broadcast causal broadcast examine bene ts resulting powerful broadcast primitive 
start protocol previous section di erence messages exchanged causal broadcast primitive reliable broadcast primitive 
correctness argument depends reliability commit operations eventually delivered sites modi ed protocol remains correct 
di erent broadcast primitives ers interesting tradeo terms sets executed transactions potential interleavings operations 
hand causal broadcast imposes ordering restrictions message delivery reliable broadcast 
set transactions con icting operations reliable broadcast allow interleavings operations di erent sites 
case non con icting transactions commit protocol 
hand pair transactions executing con icting operations causal dependency causal broadcast protocol cap tures con ict causal dependency enforces 
commitment transactions ensured 
reliable broadcast protocol may violate causal dependency resulting unnecessary abort transactions 
elaborate show execution transaction reliable broadcast commits commit causal broadcast vice versa 
di erence communication primitives re ected analysis case causally related con icting transactions 
case con icting operations causally related causal ordering induced delivery messages may allow successful execution transactions aborted 
illustrate case execution transaction aborted protocol reliable broadcast completed protocol uses causal broadcast 
rst consider execution reliable broadcast 
transaction initiated site sends commit request broadcasting write commit acknowledgment arrives sites 
commit acknowledgment site site delayed 
interim site initiates transaction writes initiates commitment 
case neg ack site site site pos ack pos ack example transaction abort reliable broadcast causal broadcast 
site acknowledgment message site commit delays transaction initiated site 
site requests commit site nds pending broadcasts negative acknowledgment asa decision abort 
scenario occur reliable broadcast sites communicate causal broadcast 
commit acknowledgment site causally precedes write operation initiated site 
consequently site pending commit request arrives 
modify protocol take advantages causality 
particular eliminate need positive acknowledgment commitment causality information follows 
site receives causally dependent messages commitment transaction sites network receiving site commit transaction 
hand site receives negative acknowledgment aborted 
note order implement protocol communication layer expose mechanism determining causal relationships messages vector clocks associated messages 
furthermore information available application layer early detection con ict transactions 
particular detect con icting operations concurrent aborted 
describe protocol detail 
causal broadcast protocol implicit positive acknowledgments 
read rule 
read operation executed locally acquiring read lock initiating site transaction 
write rule 
write operation executed causally broadcasting database sites 
delivery site rst checks acquire write lock 
locked cases need read locked means initiated progress initiated commitment released lock included read set commit message described earlier 
case operations delayed granted write lock 
write locked ats 
case checks concurrent vector clocks associated incompatible 
case causally dependent write request operations delayed ats lock released hand concurrent rejects marks abortion 

commit rule 
site decides commit transaction broadcasts commit request releases read locks held includes read set delivery site checks marked abortion pending write operations read set non empty intersection write sets local transactions 
case aborted locally toc broadcasted 
receiving sites messages causally dependent receiving negative acknowledgment read transactions broadcast commit decisions aborted protocol 
detailed proof correctness requires case analysis di erent con ict cases pair transactions :10.1.1.128.9931
causal broadcast protocol implicit positive acknowledgment appropriate situations sites broadcast messages fairly frequently wait implicit acknowledgments drawback resulting substantial delays transaction commitment 
protocol explicit acknowledgment circumvent problem number messages involved commit phase transaction proportional square number sites 
protocol localizes commit decisions eliminates need acknowledgments 
preceding protocols read operations executed locally order maintain low number messages broadcasted sites 
eliminate need acknowledgments need order con icting transactions sites 
order total order delivered commit operations consistent decisions regarding execution delivery 
way ensure total order commit requests atomic broadcast totally ordering commit operations 
case system support atomic causal broadcast primitives 
example isis provides primitives application design 
commit requests delivered total order atomic broadcasts operations sent causal broadcast may con site site incorrect execution acknowledgments replaced atomic broadcast commit causal broadcast protocol 
current 
preceding protocol concurrency operations detected underlying communication system enables application layer detect concurrency messages 
unfortunately straightforward modi cation previous protocol include atomic delivery commit requests ensure correctness 
consider example 
site notice con ict set reads updates time receives operation committed 
commit transactions 
hand site set reads intersects local writes consequence aborted 
sites inconsistent states respect committing aborting di erent transactions 
case problem arises fact read write con icts localized 
order sites decisions regarding commit abort transactions need aware con icts readwrite write write 
order sites receive information read operations preceding protocol require read set attached outgoing commit request 
sites able distinguish read operations obsolete follows con icts read operation initiating site reading transaction 
possible solution item associate version number incremented update 
version numbers store transaction id transactions updated respective data items included read set attached commit messages 
going back example illustrated sites receive rst set reads 
determine obsolete rst oper ation delivered requests committing con icting transactions decide order transactions commit 
receipt sites notice obsolete imply transaction order con icts consistently decide abort 
case sites may re ect di erent con icts delivery concurrent writes 
previous protocol case easily detected vector clocks inconsistencies avoided 
transaction involved con ict commit request delivered rst executed con icting transactions aborted 
details algorithm provided :10.1.1.128.9931
atomic broadcast commit operations eliminates need negative acknowledgments necessary inform transactions involved con icting concurrent write operations read write con icts 
operations resolved relying total order enforced atomic broadcast 
advantage obtained elimination acknowledgments achieved price aborting times read transactions 
read transactions broadcast operations initiator reading transaction aware possible con icts transaction execution 
deadlocks occur resolved consistent manner 
reading transaction involved deadlock site way resolve deadlock aborting read transaction aborting writing transaction 
protocol negative acknowledgments sites aware con ict deadlock occur 
order maintain consistent execution sites protocol resolves deadlocks involve read transactions aborting reading transaction 
commit abort decisions consistently sites case write operation blocked read commit reading transaction broadcast 
read locks released case read transaction transaction committed 
discussion attempt exploit usefulness group communication primitives context particular application replicated databases 
observations regarding development 
stronger broadcast primitive better re replica control protocol database application perspective 
second protocols desirable property read transactions aborted need acknowledgments completely eliminated 
discovered development application layer completely isolated underlying communication subsystem 
particular protocols rely underlying layer providing mechanism detecting causality relationships broadcast messages 
represents rst step study usefulness broadcast primitives distributed replicated databases 
empirical evaluation needed clearly establish trade replica control protocols group communication point point communication 
agrawal alonso el abbadi 
exploiting atomic broadcast replicated databases 
proceedings euro par international conference parallel processing pages august 
amir dolev kramer malki 
transis communication sub system high availability 
proceedings second international symposium fault tolerant computing pages 
babaoglu bartoli dini 
replicated le management large scale distributed systems 
proceedings th international workshop distributed algorithms lecture notes computer science pages 
springer verlag october 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley reading massachusetts 
birman van renesse 
reliable distributed computing isis toolkit 
ieee press 
chandra hadzilacos toueg charron bost 
impossibility group membership 
proceedings acm symposium principles distributed computing 
hadzilacos toueg 
fault tolerant broadcast related problems 
mullen der editor distributed systems chapter pages 
addison wesley 
frans kaashoek tanenbaum 
group communication amoeba distributed operating systems 
proceedings th international conference distributed computing systems pages may 
moser amir melliar smith agarwal 
extended virtual synchrony 
proceedings th international conference distributed computing systems pages 
moser melliar smith agarwal papadopoulos 
totem tolerant multicast group communication system 
communications acm april 
raynal ahamad 
serializable causal transactions collaborative applications 
technical report irisa 
publication interne 
schiper raynal 
group communication transactions distributed systems 
communications acm april 
schiper 
primary partition virtually synchronous communication harder consensus 
proceedings th international workshop distributed algorithms lecture notes computer science pages 
springer verlag october 
skeen 
non blocking commit protocols 
proceedings acm sigmod conference management data pages june 
agrawal el abbadi :10.1.1.128.9931
broadcast primitives replicated databases 
technical report department computer science university california santa barbara 
