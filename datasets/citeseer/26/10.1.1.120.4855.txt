reasoning naming systems mic bowman pennsylvania state university saumya debray larry peterson university arizona reasons naming systems specialized inference mechanisms describes preference specify structure naming system inference mechanism defines criteria different naming systems evaluated example preference hierarchy allows compare naming systems identify class names naming system sound complete 
study example naming systems demonstrates prefer ence hierarchy formal tool designing naming systems 
categories subject descriptors database management languages query lan guages database management systems query processing information storage retrieval information search retrieval selection processes infor mation storage retrieval systems software question fact retrieval systems general terms design theory additional key words phrases descriptive naming systems inference mechanisms 
name syntactic entity denotes object naming system mechanism answers queries form object denoted name naming system resembles restricted database system infers object referenced name 
class queries handled system precision answers returns depend directly power inference mechanism 
conventional naming systems compilers price virtual memory managers fabry file systems ritchie thompson functionally simple database contains table name value pairs clients submit single name system returns supported part national science foundation dcr national aeronautics space administration ncc 
authors address debray peterson department computer science university tucson az 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm acm transact ng languages systems voi 
november pages bowman corresponding value 
elaborate naming systems white pages services identify users international organization tion peterson solomon yellow pages services identify network resources peterson sun microsystems document preparation utilities managing bibliographic data budd allow clients identify object giving collection attributes describe object refer systems descriptive attribute naming systems 
example client may learn user mailbox address querying white pages service name form name john doe phone org state university 
similarly client may learn address cycle server querying yellow page service name form service cycle arch mips load mips max 
cases answer returned naming system depends information available database power inference mechanism 
operational perspective naming system database contains collection records query name record 
naming system matches query records database sequence matching functions functions yields nonempty set matches sequence exhausted 
main contribution algebra specifying sequences matching functions 
call algebra preference hierarchy show serve formal tool designing reasoning naming systems 
particular allows evaluate naming systems discriminating set names sound complete 
rest section motivates preference hierarchy discusses related 
section presents preliminary definitions section describes preference hierarchies specify structure naming system inference mechanism section demonstrates utility preference hierarchies section concluding remarks 
motivation appreciate impact utility preference hierarchy impor tant understand naming system designer accommodate sets constraints requirements placed naming system entities system conditions naming system operate 
clients naming system place set requirements system naming system accept name information clients possess objects want identify respond precision expected clients 
example client symbol table manager case program specifies object identifier expects answer program uses symbol acm transactions programming languages systems vol 
november 
reasoning naming systems table accommodate ambiguous answers 
contrast clients white pages service case human users possess pieces information object want name willing tolerate ambiguous results long contains desired object 
second naming system constrained conditions implemented properties environment function 
cases limitations naming system exists perfect world 
example parser compiler fails insert identifiers symbol table symbol table manager fail independently entire compilation 
contrast naming systems function imperfect world 
example white pages service resolve names contain information put system users 
user enter particular fact naming system system respond queries information 
example naming systems implemented distributed environments may lose information independent components fail information may date communication delays components system 
preference hierarchy defined guide design naming systems satisfy various requirements con straints 
preference hierarchy useful applied complex descriptive naming systems preference hierarchy provides insights design conventional naming systems 
fact section points naming system originally conceived conventional system evolved time way suggests unconscious preference hierarchy 
related previous studies naming focus operational aspects naming systems describing architecture implementation archi tecture base elements 
example fowler lampson mann oppen dalal terry describe techniques managing decentralized naming service 
addition studies comer peterson watson give general characterizations resolution process 
contrast concerned functional aspects naming 
words consider question objects identified name question system structured 
addition explicitly addresses problem naming underlying ideas traced related areas naming systems thought specialized database systems process resolving name conceptually similar solving database query gallaire 
particular preference hierarchy unifies ideas done open world closed world databases reiter partial match retrieval incom plete information 
second view naming specific constraint satisfaction problem borning 
specific acm transactions programming languages systems vol 
november bowman comparisons related topics rest 

basic concepts naming systems answer queries universe resources certain properties 
resource possesses particular property property said describe resource 
example considering universe printers properties element set possess include fonts location resolution specific property location room describes particular printer 
practice naming system maintains manipulates database syntactic information set resources denotes resource database object record property attribute tagged field record 
example naming system knows printers store facts sort printer ip supports italic font located room printer type dots square inch resolution 
corresponding objects naming system database font italic location 
uid ip type uid iw font italic example attribute 
attribute consists tag denoted example attribute font italic consists tag font value italic 
convenience assume object contains id attribute refer object attribute value example object ip 
attribute entered naming system database object said registered meaning objects attributes meaning function resource represented object meaning attribute property specified example universe printers font property supporting italic font 
information naming system accurate attribute registered object implies describes 
example attribute phone registered object jones expect referent jones presumably person phone number 
clients query naming system set attributes naming system responds set objects correspond sense attributes 
formally set attributes names object attribute registered names maps sets attributes sets objects names denotes set objects named set attributes names said name corresponding semantic notion represents set properties repre sents resource property set describes resource 
relationship semantic syntactic domains parallel working single attribute set attributes schematically depicted 
top layer corresponds database acm ng languages systems vol 
november reasoning naming systems registered property 
set attributes object 
describes set objects 

represents set set resources fig 

relationship semantic syntactic entities objects operations fields records bottom layer corre sponds resources operations real world entities printer person 
dotted edges link single items sets items 
conventional naming systems operate perfect world exam ple symbol tables virtual memory systems implement procedure supports names function 
simply return set objects attributes registered 
general naming systems operate perfect world 
information client uses query naming system may contain imperfections 
example client may possess information identify desired objects uniquely information client possess may inaccurate 
likewise information contained naming system database may perfect may contain incomplete date infor mation 
naming system information specified client registered database approximate results obtained names operated perfect world 
preference hierarchy described section suggests method deriving various proce called resolution functions approximate names mapping imperfect world 

preference hierarchy naming systems distinguish quality different kinds information 
example descriptive naming system able resolve names contain multiplicity attributes 
doing reasonable give attributes importance 
suppose user trying identify john smith state university user sure individual state university uncertain name john 
user prefer naming system respond information smith state university acm transactions programmmg languages systems vol 
november 
bowman information john smith state university 
example naming systems implemented distributed environment domain name system mockapetris accommodate date information generally prefer attributes guaranteed current cached attributes may stale 
perfect world client accurately completely identifies set objects possibility missing date information database suffices names resolve set attributes 
essentially done responding queries conventional database systems 
imperfect world naming system cope potential problems inaccuracies attributes specified client imperfect information database 
furthermore providing single resolution function compensates problems naming system support number different resolution functions 
function tailored set assumptions contents database structure names 
intuitively resolution function naming system uses certain assumptions quality information system resolves names preferred set assumptions 
formally preference denoted total order set functions approximate portions perfect world naming system 
approximation functions compensates imperfection believed exist naming system information specified client called client approximation functions information contained database called database approximation functions 
preference metainformation system describing assumptions client believes reasonable 
preferred approxima tions provide answers believed reasonable accurate information system 
information fails distin set objects approximation tried 
rest section defines notion preference hierarchy describes role plays resolving names 
particular introduces intuition preference hierarchies gives example prefer ences establishes framework designing naming systems combinations preferences shows framework reason naming systems understand preferences better appreciate preferences real attribute naming systems examples client database preferences provided defined univers bowman profile peterson attribute name servers 
client preferences attributes specified client client approximation function constructs set attributes accurately describes objects sought client 
generally functions information property acm transactions programming languages systems vol november 
reasoning naming systems denoted attribute order determine accuracy 
example approximation consider social security number attributes accu rate client specifies social security number usually knows accurately 
set attributes approximation function preference accurate attributes remove attributes believes inaccurate returning accurate ones returns subset attributes 
formally client approximation function defined follows definition client approximation function 
client approximation function domain attributes function monotonic increasing set attributes implies 
client preference finite totally ordered set client approximation functions 
approximations high order client considers accurate 
example client may specify approxi mation assumes social security numbers accurate preferred approximation assumes social security numbers inaccurate 
selection approximation functions order late information attributes supplied client practice selection specific preference depends client assumptions information system kind objects client intends identify 
example client intends identify processors specify different preference client intends identify human users 
list informally describes preferences useful naming systems designed 
list illustrates possible preferences intended complete 
formal defini tions preferences section consider specific resolution functions detail 
universal preference 
universal preference consists single func tion universal maps set attributes 
function client believes attributes specified accurate sufficient distinguish set objects identified 
words function assumes client operates perfect world 
registered preference 
registered preference denoted prefers attributes guaranteed registered database 
consists approximation functions open closed open closed 
certain client approximation functions augment attributes specified client additional attributes type object described object location 
functions unnecessarily complicate constructions 
formal treatment functions bowman 
acm transactions programmmg languages systems vol 
november 
bowman attribute tag closed attribute constructed guaranteed registered object describes 
example naming system may guarantee object name name registered database 
client approximation function closed returns closed attributes name limits scope resolution portions database complete information 
open attribute may registered object corresponding property describes resource object denotes 
resolution name open attributes may contain objects database represent resources described attributes 
preference particu useful users responsible maintaining informa tion naming system 
example user may decide include home phone number database may choose leave 
case home phone number attributes closed may provide incomplete answers 
note registered preference order similar idea open closed world databases reiter 
making closed world assumption entire database distinction attribute attribute basis 
mutability preference 
mutability preference denoted considers time interval attribute describes object changes object properties time 
mutability preference may defined dynamic static 
static approximation function considers accurate attributes describe objects currently describe 
example serial number architecture processor remain constant lifetime 
static believes attribute describing processor serial number architecture accurate 
contrast dynamic returns attributes may change time 
properties involve proces sor location professor class load may change time 
informa tion client possesses properties may date 
way mutability preference encapsulates client belief specified information described object seeks may describe longer 
precision preference 
precision preference denoted prefers attributes match small set objects 
set attributes unambiguous client approximation function returns attributes unambiguous registered object database 
names unambiguous attributes example address tend precise 
attribute ambiguous registered object 
ambiguous attributes generally match objects names precise example hostname currently matches different machines internet 
ambiguous approximation function returns attributes acm transactions programming languages systems vol 
november name ambiguous 
reasoning naming systems ambiguous unambiguous 
precision preference optimize queries optimize search objects match name 
unambiguous attributes match single object set matching objects computed efficiently 
yellow pages preference 
person wishes locate inexpensive fix sink searches yellow pages phone book looking advertise inexpensive rates 
computer systems clients wish locate set resources provide particular service 
example client wish locate printer supports particular font located nearby building 
person looks inexpensive may willing accept expensive probably accept inexpensive carpenter 
way certain characteristics object client seeks absolutely necessary may 
example client may specify printer particular font nice certain building 
case naming system determine printers specified font form set select specified building possible 
example define yellow pages preference follows optional mandatory 
explicit preference 
possible clients parti tion attributes name classes 
partition corresponds result applying approximation function entire set attributes name approximation function reside name server potentially changes query 
consider example user querying bibliographic name server 
user may certain author name confident published journal year somewhat unsure exact title 
user explicitly partitions attributes name sets intuitively sets correspond set attributes approximation functions return existed 
set contains ideal match attributes 
assumption author correctly guessed title year 
second partition removes title attribute 
preferred set attributes contains author name 
database preferences preferences consist client approximations provide infor mation client specification 
similarly preferences consist database approximations encapsulate information descriptions set obj ects 
particular database approximation function accommodates imperfect information database approximating selection objects perfect database 
reconstruct perfect database acm transactions programming languages systems vol 
november bowman functions select objects existing database way mirrors selection objects function believes perfect database 
usually takes form strategy handling partial matches may sophisticated techniques statistical inference methods described wong 
definition database approximation function 
database approxima tion function domain attributes domain objects function contraction second argument set objects intuitively definition says database approximation function adds new objects database 
useful database approximation functions characteristics database approxima tion functions return complete answers information abut world 
words size database increases number objects matching name increases 
formally database approximation function monotonic increasing relative set objects sets objects implies 
unique approximation described exception rule unique returns single object uniquely matches set attributes 
second database approximation functions approximate set objects client intended identify information client set objects true database approximation functions 
specific function conform principle database approximation function called identity identity returns set objects matter attributes client specifies 
database preference total order set database approximation functions 
client preferences selection particular preference supplies naming system information assumptions client possesses regarding database 
particular preference may supply information handle different degrees partial match matches different locations 
examples describe potential solutions problems match preference 
match preference denoted pro vides approximations match attributes objects different preci sion 
functions preference ordered possible bl partial exact unique 
preferred approximation possible maps set attributes set objects possibly match 
words object selected long conflict attribute name object description contained database 
example consider database contains descriptions users uid cmb office department cs uid rao uid ilp office uid gmt acm transactions programmmg languages systems vol 
november 
reasoning systems consider name consists attributes office department cs 
case possible returns cmb rao gmt 
function computes defined case partial information 
second approximation partial returns objects possibly match attribute common name 
partial return cm rao gmt example 
third approximation exact returns objects described attributes name 
example exact returns just cmb object known match attributes name 
exact computes ii 
final approximation unique returns single object exactly matches name empty set case cm returned unique objects returned name consists single attribute office unique match 
preference may accuracy database question may complete 
object returned conflicts attributes client supplies 
note preference generalizes idea partial match retrieval 
voting preference 
voting preference denoted views attributes specified votes objects 
attribute name registered object attribute casts vote object 
voting preference defined ran ma unanimous 
preferred approximation unanimous functionally equivalent exact prefers objects receive votes 
majority approxi mation returns set objects receive majority votes object set described half attributes name 
implies majority may return objects attributes conflict attributes name 
ran matches set attributes object receives vote object client specified attributes registered 
contrast match preference voting preference assume information database correct 
attempts return reasonable matches conflicts may exist attributes specified client 
temporal preference 
temporal preference denoted differs voting match preferences attempt match set attributes object 
approximation functions constitute temporal preference distinguish objects length time information contained database stale 
temporal preference prefers objects described authoritative information information guaranteed accurate information cached 
provides method handling acm transactions programming languages systems vol 
november bowman date information database 
temporal preference may defined date cached authoritative 
approximation assumes accurate information database authoritative information 
objects match name authoritative attributes registered trait appears name 
cached authoritative allow object described information cached 
authoritative demands attributes registered objects stale database expects attribute value describes object 
date allows informa tion condition value database described object time assumption date information may provide hints correct value 
note temporal database preference bears close resemblance mutability client preference 
basic assumptions different 
hand mutability preference assumes database contains information describes object question 
case client possesses information date 
exam ple client may remember printer lw located gs 
printer moved gs database updated reflect change 
information client possesses date produce erroneous results identify printer 
hand temporal preference assumes client information accurate value attribute database date 
corresponds case client knows actual location lw location lw updated database 
database contains information keep client identifying lw location 
resolution functions resolution function defined ordering set client database preferences ordering called preference hierarchy 
preference hierarchy specifies relative importance preference resolving names 
functionally means resolution function selects approx imation function preference constructs composition func tions evaluates composition relative name database 
continues select functions combination computes nonempty set objects 
preferences specify order approximation functions selected preference hierarchy specifies order composition sets approximations 
theory assumptions approximation functions correct set objects selected composition resemble set client intended identify 
example consider construction resolution function naming system assumptions client presents naming system accurate information 
second database acm transactions programming languages systems 
vol 
reasoning naming systems contains information may incomplete 
infor mation database authoritative date cached 
naming system assumptions preferences applicable open closed cached authoritative partial exact 
collection preferences means resolution function select different sets approximations open authoritative exact open authoritative partial open cached exact open cached partial closed authoritative exact closed authoritative partial closed cached exact closed cached partial 
reasonable assume registered preference important match preference important temporal preference assumption implies relative importance preferences defines preference hierarchy 
preference hierarchy effects evaluation sets approximations 
approximations set applied order important important 
example set approxi mations evaluated order open authoritative exact open approximation important preference exact important 
rules guide evaluation ordered set approximations fl database approximation functions composition 
database approximation function defined fz 
client approximation functions composition nis client approximation function defined 

fi client approximation database approximation composition 
database approximation function defined fz 
intuitively database approximation functions act filters refining set objects composition database approximation functions removes objects component removed 
similarly client approximations act sets attributes removing adding composition client approximations respects effect opera tions 
operationally rules applied ordered set alternates database client approximation functions 
point third rule applied adjacent database client approxima acm transactions programming languages systems vol 

november 
bowman tions construct series database approximation functions 
rule applied construct single function called composite approx imation function 
composition open authoritative exact function defined open exact open 
second effect preference hierarchy order set composite approximation functions applied name 
preference hierarchy specifies induced preference set composition functions orders set composite approximation functions constructed preferences hierarchy 
example resolution function attempts exact partial matches closed attributes attempting match open attributes 
preference hierarchy induces preference sets approximations open cached partial open cached exact open authoritative partial open authoritative exact closed cached partial closed cached exact closed authoritative partial closed authoritative exact words closed authoritative exact preferred approxima tion 
composite approximation function computes nonempty set objects set returned resolution function 
resolution function evaluates compositions order preferred pre 
returns nonempty set computed composition 
formally set preferences ii 
totally ordered preference hierarchy members ii say important loss generality assume implies important set approximations tj 
preference induced defined lexicographic order set compositions tn induced preference set compositions name resolution function computes set objects described name way respects induced preference 
means resolution function may return set objects composition function preferred composition composition cj failed compute nonempty set objects 
formally definition definition name resolution function 
induced preference order set composite approximation functions ml rr 
defines domain attributes name resolution function domain objects ii wj implies 
acm transactions programming languages systems vol 
november reasoning naming systems intuitively composition function supports approximations perfect world system preference hierarchy 
assump tions encapsulated set approximations considered accurate composition returns nonempty set objects 
resolution function computes set objects described name relative preferred accurate set approximations 
complete example consider implementation resolution function defined preference hierarchy univers name server bowman 
univers resolution functions defined scheme language supports persistent data 
redundant compositions removed defini tion 
example approximations partial exact compute set objects names consist closed attributes 
partial closed equivalent exact closed 
optimiza tion univers function lookup defined follows lookup intersect authoritative closed exact closed intersect cached closed exact closed intersect authoritative open exact open intersect authoritative open partial closed intersect cached open exact open intersect cached open partial open tools reasoning resolution functions previous section focused structure preference induced preference hierarchy 
possible understand reason aspects behavior resolution functions 
section describes semantics preference hierarchy model develops tools may describe reason sets related resolution functions 
discussion follows denote set name database pairs serve domain resolution function 
specifically consists pairs set attributes set objects 
determined characteristics naming system support resolution function 
soundness completeness 
clearly possible construct resolution functions differ objects return set attributes 
context properties interest set attributes may desirable resolution function return objects named attributes return objects named attributes 
order formalize properties postulate oracle function returns precisely set objects client intended identify 
objects oracle returns returned client request naming system contained perfect information 
oracle knows acm transactions programming languages systems vol november bowman imperfections exist system compensates 
assume client attempts identify object oracle returns object 
oracle func tion soundness completeness formalized follows definition soundness 
name resolution function said sound name database pair oracle 
definition completeness 
name resolution function said complete name database pair oracle 
denote set pairs sound set name database pairs complete rp 
designer naming system ensure resolution functions system provides satisfy constraints soundness com 
example experience suggests clients generally want white pages naming system allows clients search name users complete 
contrast clients want yellow pages naming system allows clients locate system services sound 
case clients willing discard extra objects want desired object contained result second case client depends answers equally valid example client asks processor architecture answer contains processor different architecture tolerated 
suppose resolution function defined preference hier ii 
information soundness completeness approximation function preferences necessary able reason soundness completeness induced tion function 
instance profile supports white pages resolution functions attempt handle databases may contain incomplete information clients may specify inaccurate descriptions peterson 
important profile functions complete name database pairs database incomplete name contains inaccuracies 
results help system designer determine extent resolution function meets goals soundness completeness 
resolution function consists single composite approximation function sound composition returns subset objects client intends identify 
similarly resolution function complete objects client seeks contained set composition returns 
observation leads definition soundness complete ness composite approximation function composite approximation function sound set resolution function constructed just sound complete rc resolution function complete 
acm transactions programmmg languages systems vol 
november reasoning systems proposition 
composition monotonic database approxi mation functions sound xc sound sound zc zd 
proof 
recall database approximation functions return subset objects database 
sound sound add objects database approximation returns subset objects database 
monotonic increasing relative database xc implies subset xc 
sound sound 
proposition 
composition composite approximation functions complete complete additive function property dz sets objects complete rd proof 
complete returns objects client seeks 
pointwise determined complete complete subset contains oracle 
complete name database pairs rc rd propositions allow system designer determine composite approximation consists client database approxi mations sound complete 
example easy show composite approximation defined closed unanimous open ran complete open az run 


particular composite approximation complete database accurate potentially incomplete client description contains accurate open attribute nonempty set closed attributes accurate 
name resolution function consists composite approximation functions ordered induced preference may sets composite functions sound complete construct set name database pairs resolution function sound complete 
general concerned entire resolution function 
tion function defined induced preference set composite approxi mations determines set objects described name failure inaccurate approximations 
recall approximation fails computes empty set objects 
set name database pairs composite approximation fails contained xc set name database pairs sound 
fact may partitioned disjoint sets pc ec computes nonempty set objects empty set objects ec 
resolution function consisting induced order composite preferences ep rp may computed information acm transactions programmmg languages systems vol 
november 
bowman name database pairs pc ec composite approximation propositions proposition 
name resolution function defined induced preference 
sound plu eln sound xl ec sound zn proposition 
name resolution fi defined induced preference 
cz complete rl el ez complete empty 
case el ez induced preference just union 
fact union approximation small relative 
simi lar approximation may 
small relative simply union 
simplifications provide adequate estimate zp resolution functions written 
discrimination 
important criterion considering related naming systems objects return set attributes 
discriminating resolution function returns smaller set objects set attributes relative particular database 
may formalized follows definition 
resolution functions pl pz set name database pairs pl pz pa said discriminating pi written pz pi 
resolve denote set resolution functions defined partially ordered 
complete lattice bottom element function returns set objects top element function returns empty set 
different functions compared reasoned power discrimination 
example consider resolution func tions pl pz pl defined single composite approximation universal possible pz defined single composite approximation universal exact 
easy show containing name database pairs 
general choice particular resolution function family resolve depends consideration trade offs computational cost precision resolution offered alternative functions 
elements low lattice defined relatively efficient acm transactions programmmg lan ages systems vol november reasoning naming systems typically discriminating 
words may return multiple objects user sift 
hand elements resolve high lattice may computationally expensive typically discriminating 
functions run risk overly discriminating may return object user wants 
experience practice useful resolution functions tuned experimentally strongly influenced client requirements underlying system constraints 

applications preference hierarchy provides framework precisely specifying reasoning naming systems 
section shows preference hierarchy applied existing naming systems 
demon preference hierarchy prescriptive model designing new naming systems 
section concludes discussion different naming systems compared 
appendix contains procedures implement resolution function 
profile resolution functions profile naming system peterson provides white pages service identify users organizations 
profile supports suite resolution functions designed assumptions mind 
profile assumes database accurate potentially incom plete 
profile automatically generates information database 
attributes considered closed entered reliable system administrator 
remainder information added database system clients 
attributes considered open client enter different information 
second attributes contained name may inaccurate people may forget incorrectly remember information people 
third mentioned earlier clients profile system generally interested complete answers ones definitely contain objects client intended identify 
section shows assumptions affect com resolution functions profile 
preferences construct profile resolution functions consist client approximation functions database approximation func tions 
example approximation functions informally section define functions formally may reason resolution functions 
definition profile client approximation functions 
client approxi mation functions profile naming system universal closed describes implies registered open closed 
acm transactions programming languages systems vol november 
bowman definition profile database approximation functions 
database approximation functions profile naming system identity ran exists registered unanimous registered unique unanimous 
formally define resolution functions constitute profile naming system 
function give intuitive overview function preferences function importance order preferences 

returns objects match attributes 
pro defined xu preferences universal ran 

computes conjunction attributes preference closed attributes open attributes 
defined preferences open closed ran unanimous profiles 
uses open attributes reduce set objects returned 
profiles defined preferences open closed ran unanimous unique open identity ran unanimous 

matches object 
defined preferences closed unique 
definitions easy show discrimination order exists profile resolution functions 
order follows proposition 
containing name database pairs considering completeness resolution functions assumption simplify analysis inaccurate attribute acm transactions programming languages systems 
vol 
november reasoning naming systems client specification describe objects client intends identify match object database 
practice assumption guaranteed client specify inaccurate attribute describes object information naming system sparse sense error detection codes parity hamming codes distance reasonable values detect presence errors binary information 
claims completeness valid assumption proposition 
function complete sets attributes contain attribute registered object client intended identify 
proposition 
complete names contain nonempty set closed attributes accurate attribute describes object client intends identify 
proof 
consider ix oracle implies closed represents 
oracle closed represents 
definition closed attributes registered closed unanimous returns objects match closed attri returns oracle implies unanimous closed closed complete 
exists nonempty set closed oracle implies represents 
oracle nonempty set closed attributes represent defini tion attribute registered ran closed set objects closed attributes registered 
contained ran closed oracle closed ran complete 
ecu consists name database pairs closed attributes erroneous closed attribute cus rc 
point trivial show proposition implies ecu 

rp le 
proposition holds 
previously defined closed attribute guaranteed registered object describes 
resolution function uses open attributes may incomplete open attribute name registered objects client intends identify 
example open unanimous returns set objects match attribute name 
attributes name may registered object client seeks object match attribute name database 
leads definition attribute relevant set objects object possible argue completeness resolution functions formally assump tion far cumbersome describe set name database pairs approximation fails 
acm transactions programming languages systems vol 
november 
bowman describes implies registered 
attribute closed relevant entire database 
defini tion possible show proposition 
complete names open attributes name accurate relevant set objects client intends identify 
proof 
rou ix oracle implies open repre sents attribute open registered 
open represents attribute open registered recall open unanimous returns objects match open attributes 
unanimous open oracle definition completeness closed unanimous complete rou 
resolves names open unanimous earlier composite approximations returned empty sets 
occurs closed attributes inaccurate ecu ec 
set closed contains closed attributes describe objects client intended identify 
ecu rc 
includes name contains nonempty set closed attributes describe client objects 
rou may partitioned disjoint sets names contain accurate closed attributes contain accurate closed attributes 
trivial show contained rca ecu 
rou 
ug ecu ca ecu ec 
rou 
proposition implies rou 

complete rou proposition holds 
proposition 
complete names contain inaccurate open attribute nonempty set accurate open attributes attribute set registered object client intended identify 
proof 
ro ix oracle implies exists nonempty set open represents attribute registered 
oracle nonempty set open attributes represent attribute registered ran open set objects open attribute registered 
contained ran open oracle open unanimous complete foa 
name contains inaccurate attribute rou empty 
case ecu rca ecu ec 
rou ecu ec 
equivalent ecu rca ecu ec 
oa 
expression contains ro 
pro complete ro proposition holds 
profiles uses open attributes trim set objects returned may complete 
give sufficient conditions acm transactions programmmg languages systems vol 

november reasoning naming systems completeness 
note open attributes set attributes submitted client filtering possible profiles identical 
proposition proposition 
profiles complete names contain open attributes contain nonempty set closed attributes describe objects client intends identify 
better 
proposition fact open attributes set contribute discarding intended object 
reason possible incompleteness open attribute set attributes registered intended object 
open attribute relevant objects client intends identify contribute discarding intended object 
proposition 
complete names contain nonempty set accurate attributes relevant set objects client intends identify 
note proposition special case proposition closed attribute definition relevant objects 
resolution functions provided profile naming system attempt respond complete answers 
analysis section points design decision adversely affects goal 
composite function open unanimous selects objects match open attributes name 
function complete open attribute name relevant objects client identifies 
definition open attribute relevant large portion database open attributes relevant set objects client attempts identify 
understanding possible design new function similar precise match open attributes avoids problem 
function called profile defined preferences closed identity ran unanimous open identity ran 
propositions hold profile eti proposition 
function profile ew discriminating profile open attribute name accurate relevant object client identifies attribute name inaccurate irrelevant object client identifies 
acm transactions programmmg languages systems vol 
november 
bowman proposition 
function profile complete object client intends identify accurate open attribute name relevant 
example shows preference hierarchy help system designer understand resolution function meets goals 
sacrifices completeness substantial set name database pairs uses exact match open attributes profile overcomes weak ness expense discriminating certain sets attributes 
lookup resolution function consider naming system database contains accurate poten tially incomplete information set attributes specified client accurate may match objects client intended 
assumptions unreasonable database approximation functions return object conflicts client description 
example client specifies accurate attributes name domain arizona edu ran may match object attributes name toto domain arizona edu name toto conflicts part client specification 
case definition processor may name object returned client intends identify 
define new resolution function lookup specifically situation 
lookup uses partial possible conjunction closed attributes guarantee object returned conflicts attributes specified client 
formally partial possible defined follows definition possible database approximation function 
possible registered attribute tag registered 
definition partial database approximation function 
partial possible registered 
lookup resolution function defined preferences ambiguous unambiguous open closed partial exact ambiguous open possible partial exact assumptions information system valid lookup returns objects known conflict client specification 
general prefers acm transactions programming languages systems vol november reasoning naming systems objects known match client description known conflict description 
nontrivial resolution functions section discusses nontrivial resolution functions 
yellow pages 
yellow pages resolution function allows clients discriminate similar computational resources printers proces sors databases network services particular character 
descriptive yellow pages function peterson denoted yp defined follows set attributes yp partitioned mandatory optional subsets denoted respectively optional attribute set ordered az 

preferred answer matches mandatory attributes optional attributes match exists match optional attribute preferred match attribute optional attributes define different client approximation functions returns mandatory attributes optional attributes 
set attributes yp defined ivi exact 
example yp allows client ask processor architecture supports pascal compiler processors possess properties select load exist 

consider name server iden tify users organizations solomon 
yp name server defines client approximation set attri partitioned mandatory optional subsets 
tion function name server denoted defined preferences mandatory exact unique optional identity maximum maximum selects set objects match maximum number attributes 
function preference priority match preference 
nic 
nic name server called whois limits queries single attribute defines resolution function returns objects partially matched attribute 
resolution function functionally equivalent 
nic name server enforces restriction unambiguous attribute called handle acm transactions programmmg languages systems vol 
november 
bowman registered object client gives handle naming system guaranteed return object 
handles implemented attaching unique prefix registered attribute ensure uniqueness 
resolution functions conventional naming systems descriptive naming systems profile name server nic name server take advantage full expressive power preference hierarchy understanding preferences provides insight conventional systems 
conventional naming systems support simple inference system restrict database accurate unambiguous attributes restrict queries names containing single accurate attribute 
implies matches unique 
consequence conventional naming systems trivially resolution function returns set objects uniquely matched set unambiguous attributes name 
definition easy see proposition 
function sound singleton sets attributes 
notice restriction unambiguous attributes may registered implies systems complete attribute sets contain single unambiguous attribute 
proposition 
function complete sets attributes contain ambiguous attributes 
consider common scenario naming system map symbolic name machine readable address 
case symbolic name registered particular object authoritative attribute describes object object machine readable address cached attribute currently describes object case system designed flush binding chance stale date attribute described object time may describe case users naming system able accommodate date information 
case commonly referred hint terry 
important note conventional naming systems requirements placed generally sacrifice completeness sake soundness 
descriptive naming systems hand sacri soundness sake completeness 
accomplish conventional low level systems deal exclusively preference classes high preference hierarchy unambiguous unique authoritative attributes descriptive high level systems ac cept preference classes low hierarchy ambiguous cached attributes 
high level naming systems acm transactions programming languages systems vol november reasoning naming systems accommodate multiple preference classes low level naming systems accommodate preference class implicitly decision regarding preference 
mandate certain preference class 
comparing systems preference hierarchy provides handle comparing naming systems 
example conventional naming systems assume unambiguous attributes unique matches preference classes preference hierarchy directly compare profile discriminating resolution function conv follows profiled conv sets name database pairs words accurate view restrictive member profile family resolution functions 
compare naming systems preference hier embedded able conclude naming systems inherently different useful 
example interested knowing white pages yellow pages services fundamentally different simply synonyms thing 
answer relative systems experience fundamentally different 
white pages services open closed preference classes yellow pages services mandatory optional preference classes 
furthermore experience strongly suggests preference classes correctly represent environment systems operate requirements placed systems clients 
case white pages services fact useful information users known naming system significant constraint system resolution functions designed way dates missing information 
clients white pages system generally particular object mind submit name implied object identified attribute possess attributes name distinction mandatory optional attributes relevant 
case yellow pages services possible ensure necessary information stored database 
program responsible registering attributes distinction open closed attributes issue 
client names computational resource interested distinguishing similar resources clients generally care processor get long appropriate blend attributes 
fine grain control afforded partitioning name mandatory optional attributes useful 

concluding remarks reasons naming systems specialized inference mecha nisms 
defines preference hierarchy specify resolution acm transactions programm ng languages systems vo november 
bowman function associated naming system including conven tional descriptive systems 
preference hierarchy proved powerful describe naming systems encountered 
implemented general name server explicitly enforces model implement naming systems described 
addition providing formal model understanding existing naming systems preference hierarchy prescriptive tool designing new naming systems 
example profile naming system introduced section designed formally defined preference hierarchy clearly intuitive standing preferences guided design 
interesting note formal specification preference hierarchy led understand correct subtle flaw original definition profile 
led definition new function section 
example having defined preference hierarchy able apply problem designing yellow pages service identify computational resources printers processors databases network servers peterson 
particular wanted descriptive yellow pages service allow users discriminate set similar resources resources provided approximately service 
result resolution function yp section 
final example observed domain naming system dns mockapetris evolved way suggests implicit standing preference hierarchy 
specifically dns provides functionality conventional systems maps host names network addresses 
simpler systems dns implemented net environment database distributed multiple hosts 
years experience system led designers understand dns mechanism able deal correctly date data 
particular updated specification system reads cached data preference authoritative data 
informal definition directly corresponds temporal preference cached authoritative 
important points functionally simple systems maps names addresses possible environment system implemented impose constraints system technique deal constraints turn expressed terms preference hierarchy 
appendix appendix contains scheme function definitions imple ment name resolution functions described section 
define resolution functions univers name server bowman 
functions may included part query stored univers server referenced query 
note optimiza acm transactions programmmg languages systems vol 
november reasoning naming systems tions order avoid redundant computations composite approximation functions 
define profile ran unanimous closed ran closed open ran open dy unique closed unanimous open closed ran open unanimous closed unanimous closed unanimous open ran closed ran open ran closed ran closed open ran open define profile unique closed de profile new ran open unanimous closed unanimous closed ran open ran closed ran closed ran open exact closed unambiguous open unambiguous exact ambiguous partial open ambiguous exact closed ambiguous possible open ambiguous exact closed ambiguous exact open ambiguous partial open ambiguous acm transactions programming languages systems vol 
november 
bowman define yp null 
oex exact exact yp cdr unique mandatory maximum optional exact mandatory exact mandatory define conv unique unambiguous acknowledgments authors wish anonymous referees persisted helping improve quality 

object oriented scheme 
borning freeman benson 
constraint hierarchies 
pro ceedings ott 
acm new york 
bowman 
univers construction internet wide descriptive system 
ph thesis dept computer science univ arizona tucson aug bowman peterson 
univers attribute name server 
softw 
prac 
exper 
apr 
budd 
bib program formatting bibliographies 
user supplementary documents 
berkeley software apr comer peterson 
understanding naming distributed systems 

comput 
may 
abry 
capability addressing 
commun 
acm july 
fowler 
decentralized object finding forwarding addresses 
ph thesis dept computer science univ washington dec gallaire minker nicolas 
logic databases deductive approach 
acm comput 

june 
international organization standardization 

information processing systems open systems interconnection directory overview concepts models ser vice 
draft international standard international organization standardization new york 
lampson designing global name service 
proceedings th principles distributed computing aug 
acm new york 
jr databases incomplete information 
acm 
jr semantic issues connected incomplete information databases 
acm trans 
database syst 
sept 
mann 
decentralized naming distributed computer system 
ph thesis stanford univ palo alto calif may acm transactions programming languages systems vol november reasoning naming systems mockapetris 
domain names specification 
request com ments usc information sciences institute marina del ray calif nov oppen dalal 
clearinghouse decentralized agent locating named objects distributed environment 
tech 
rep opd xerox office products division palo alto calif oct peterson 
profile naming service 
acm trans 
comput 
syst 
nov 
peterson 
yellow pages service local area network 
proceedings sigcomm workshop frontiers computer communications technology stowe vt aug 
acm new york 
mathis 
nic name server datagram information utility 
proceedings th berkeley works lop distributed data management computer networks aug 
price 
table lookup techniques 
acm comput 

reiter 
closed world databases 
logic databases gallaire minker eds 
plenum press new york 
ritchie thompson 
unix time sharing system 
commun 
acm july 
solomon landweber 
name server 
comput 
networks 
sun microsystems 
yellow pages protocol spec 
sun microsystems mountain view calif feb terry 
caching hints distributed systems 
ieee trans 
softw 
eng 
se jan 
ullman 
principles database knowledge base systems 
vol 

computer science press rockville md watson 
identifiers naming distributed systems 
distributed systems architecture lampson paul eds 
lecture notes computer science 
springer verlag new york 
wong 
statistical approach incomplete information database systems 
acm trans 
database syst 
sept 
received october revised february june april march accepted march acm transactions programming languages systems vol 
november 
