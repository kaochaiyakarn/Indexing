discoverer automatic protocol reverse engineering network traces cui microsoft research microsoft com application level protocol specifications useful security applications including intrusion prevention detection performs deep packet inspection traffic normalization penetration testing generates network inputs application uncover potential vulnerabilities 
current practice deriving protocol specifications manual 
discoverer tool automatically reverse engineering protocol message formats application network trace 
key property discoverer operates protocol independent fashion inferring protocol idioms commonly seen message formats application level protocols 
evaluated efficacy discoverer text protocol binary protocols rpc cifs smb comparing inferred formats true formats obtained ethereal 
protocols inferred formats correspond exactly true format true format reflected inferred formats average inferred formats cover messages belong true formats observed trace 
application level protocol specifications useful security applications 
penetration testing leverage protocol specifications generate network inputs application uncover potential vulnerabilities 
network management protocol specifications identify protocols monitored network traffic 
generic protocol analyzers gapa binpac important mechanisms intrusion detection firewall systems perform deep packet inspection 
analyzers take protocol specifications kannan uc berkeley kjk cs berkeley edu helen wang microsoft research microsoft com input analyses 
date protocol specifications applications specified documentation reverse engineered manually 
efforts timeconsuming error prone 
took open source samba project years manually reverse engineer microsoft smb protocol 
example yahoo messenger protocol persistently reverse engineered despite open source clients regularly require patching support proprietary changes yahoo protocol 
period availability official client open source client month opensource projects simply abandoning effort due frequent changes initiated yahoo 
address pain tackle problem automatic protocol reverse engineering 
sources input reverse engineering task network traces application code 
tool discoverer performs automatic reverse engineering network traces 
leave application code reverse engineering 
discoverer focus reverse engineering message format specification leave protocol state machine inference 
automatically reverse engineer message formats wide range protocols face main challenges hints network trace 
evident information trace directionality byte streams 
protocols significantly different 
protocol message formats context sensitive earlier fields dictate parsing subsequent part message 
tool general base design inferring protocol idioms commonly seen message formats protocols 
cope hints dissect usenix association th usenix security symposium byte streams text binary segments tokens starting point clustering messages similar patterns cluster approximates message format 
comparing messages cluster observing characteristics known cross field dependencies length field followed string length infer additional properties tokens turn leveraged refine divide clusters messages subcluster approximates precise format 
process continues recursively longer divide message clusters newly finished inference 
recursive clustering phase look message clusters globally type sequence alignment algorithm merge similar clusters 
way produce concise message formats 
evaluated discoverer traces representative set protocols consisting text protocol binary protocols rpc cifs smb 
calibrated design traces remaining validation 
main metrics tool correctness inferred format correspond exactly true format conciseness inferred formats single true format reflected coverage messages covered inferred formats 
protocols tested inferred formats correspond exactly true format true format reflected inferred formats average inferred formats cover messages belong true formats observed trace 
significant difference message format coverage due heavy tail distribution message format popularity commonly seen practice 
reverse engineered message formats imperfect anticipate practical aforementioned applications 
instance penetration testing guided reverse engineered formats effective random inputs 
protocol fingerprinting tunneling detection probably require perfect protocol specifications 
applications firewalls err imperfect specifications tool serve help ease manual protocol specification process 
organize rest follows 
discuss common protocol idioms scope discoverer section 
describe design discoverer detail section 
evaluation methodology results section 
discuss related section limitations section 
summarize section 
problem statement application level protocols share common protocol idioms correspond essential components protocol specification 
algorithm applicable protocols base design inferring common protocol idioms 
section describe idioms explain scope discoverer 
common protocol idioms application level protocols involve concept application session consists series messages known application level data units adus hosts accomplishes specific task 
structure application session determined application protocol state machine essential component protocol specification characterizes possible legitimate sequences messages 
structure application message determined application message format specification essential component protocol specification 
message format specifies sequence fields semantics 
common field semantics include length reflecting size subsequent field variable length offset determining byte offset field certain point start message pointer special offset specifies index field array arbitrary items cookie session specific opaque data appears messages sides application session session ids example cookie fields endpoint address encoding ip addresses port numbers form set group fields put arbitrary order 
particular type fields format distinguisher fd field 
value field serves differentiate format subsequent part message reflects context sensitive nature grammar application level protocols 
message may sequence fd fields particularly multiple protocols encapsulated 
instance cifs smb message consists netbios header encapsulating smb header turn may encapsulate rpc message 
implies applications need scan message left right decoding fd field parsing subsequent part message 
scope discoverer focus deriving message format specification leave protocol state machine inference th usenix security symposium usenix association network packets length text variable length recursive tokenization binary variable merging clustering token pattern clusters binary constant inferred message formats packet message format binary text cluster token token text variable merged message formats overview discoverer architecture 
example assume single true message format fields binary field single byte represents length second text field 
token patterns text field shorter threshold treated binary 
merging phase kind tokenization errors corrected 

assume synchronous protocols identify message boundaries 
message consecutive chunk application level data sent direction 
spans packets tcp udp connection udp connection pair unidirectional udp flows matched source destination ip address port number 
aim deal applications obfuscate payloads 
aim capture timing semantics message usually follows message seconds 
design section overview discoverer describe main phases discoverer detail give concrete example message format inferred discoverer 
overview basic idea discoverer cluster messages format infer message format comparing messages single cluster 
achieve main phases illustrated 
tokenization initial clustering phase operates raw packets helps identifying field boundaries message giving order structure unlabeled messages 
reassemble packets messages break message sequence tokens approximation sequence fields 
tokens belong token classes binary text 
classify messages various clusters message token pattern simply represented message direction classes tokens 
recursive clustering messages token pattern necessarily format phase divides clusters messages messages cluster format infers message format comparing messages single cluster 
mimic left right recursive parsing applications processing messages recursively repeating steps 
infer message format captures content messages cluster 
identify fd field decides format subsequent part message left right scan values fd field divide cluster subclusters 
merging phase mitigates problem messages format may scattered multiple clusters 
merge similar message formats type sequence alignment algorithm compares field structure inferred message formats 
usenix association th usenix security symposium key design rationale discoverer conservative may scatter messages format cluster collate messages different formats cluster 
rationale ensure correctness inferred formats messages format cluster inferred format general trying capture multiple message formats 
tokenization initial clustering tokenization token sequence consecutive bytes belong application level field 
require tokenization process works particular distinction text binary protocols tool intended fully automatic wish spare user manual effort required distinguish text binary protocols 
hard declare protocol purely text purely binary text protocols contain binary bytes image file transferred binary protocols contain text fields name file 
tokenization procedure generates classes tokens text binary 
text token intended span bytes single message field representing text get request 
procedure finding text tokens follows identify text bytes comparing ascii values printable characters consider sequence text bytes binary bytes text segment 
avoid binary bytes text bytes require sequence minimum length 
set delimiters space tab divide text segment tokens 
look unicode encodings messages 
binary fields identifying field boundaries hard simply declare single binary byte binary token right 
note procedure admit errors consecutive binary bytes ascii values printable characters wrongly marked text token text string shorter minimum length wrongly marked binary tokens text field consisting white space characters wrongly divided multiple text tokens 
correct kind errors merging phase see section 
initial clustering token patterns byte wise sequence alignment needleman wunsch algorithm previous studies aligning comparing messages 
find byte wise sequence alignment ideally suited align messages similar byte patterns suitable aligning messages format 
instance fields variable lengths may lead mis alignment messages format 
parameter selection sequence alignment hard shown 
avoid aligning messages cluster messages token patterns 
token pattern assigned message tuple dir class token class token dir direction message client server vice versa followed classes tokens message 
consider message direction messages opposite directions tend different formats 
example token pattern client server text binary text 
note initial clustering coarse grained messages different formats may token pattern 
instance smtp commands typically text tokens mail receiver sender helo server name 
recursive clustering phase improve granularity clustering recursively identifying fd tokens dividing clusters 
recursive clustering recursive clustering relies identifying format distinguisher fd tokens 
find fd tokens need invoke format inference format comparison 
section explain procedures describing recursively identify fd tokens divide clusters 
format inference format inference phase takes input set messages infers format succinctly captures content set messages 
inferred message format defined sequence token specifications include token semantics token properties 
introduce token properties infer semantic meaning token certain token properties useful describing message format 
token properties currently cover perspectives binary vs text constant vs variable 
property reflects token class second decides token takes value messages format constant token different values different application sessions variable th usenix security symposium usenix association token 
define type token sum semantic property 
describe token properties semantics derived 
property inference token class identified tokenization phase 
constant variable tokens easily identified 
set messages come single token pattern cluster tokens message directly compared counterparts message simply token offset 
constant tokens take value entire set messages variable tokens take value 
semantic inference currently support semantics length offset cookie see section definitions 
discuss may possible support semantics section 
identify cookie fields merging phase requires correlating multiple messages session 
employ heuristics doing 
heuristics identifying length offset fields extension 
intuition identifying length fields specific pair messages difference values potential length fields consecutive binary tokens text token decimal hex format reflects difference sizes messages subsequent tokens 
simply check match value difference size difference 
match holds pairs messages cluster potential length field declared length field 
offset fields compare value difference difference offsets subsequent tokens 
format comparison goal procedure decide inferred message formats 
formats scans formats token token left matches inferred type semantic property token format counterpart 
tokens match formats considered 
ideally tokens considered match semantics match 
tokens semantics need compare values token class formats token pattern 
allow constant token match variable token takes value 
allow variable token match overlap sets values taken 
note policies conservative line design rationale 
recursive clustering format identify fd tokens algorithm 
invoke format inference set messages cluster 
scan format token token left right identify fd tokens 
criteria determining token fd 
check number unique values taken token set messages threshold referred maximum distinct values fd token 
fd token typically takes values corresponding number different formats 

tokens satisfying criterion perform second test follows 
cluster divided subclusters unique value taken token 
subcluster consists messages candidate fd token takes specific value 
require size largest subcluster exceeds threshold referred minimum cluster size 
guarantee meaningful format inference subcluster 
gain continuing splitting 

potential fd token passes second criterion invoke format comparison subclusters see formats different 
merge manifest formats leave intact 
process recursively performed subclusters message may fd token 
find fd token scanning message right message 
necessary scan way need recognize fds obtain clustering format inference 
looking fd token format inference invoked set messages subcluster 
inferred token properties semantics change set messages smaller possible stronger properties hold 
instance previously variable token constant token previously variable token identified length field 
usenix association th usenix security symposium merging type sequence alignment tokenization recursive clustering phases conservative ensure format inference procedure operates correctly set messages format 
leads new problem classification messages format may scattered cluster 
problem quite severe instance cifs smb trace messages clusters formats input phase total number true formats 
goal merging process coalesce similar formats different clusters single 
key observation merging phase sequence alignment clustering messages format align formats identifying similar ones different clusters 
leverage rich token types semantics properties inferred recursive clustering phase 
instance knowing particular token length field format necessitates counterpart format length field formats considered match 
refer algorithm aligning formats type sequence alignment 
type sequence alignment allow tokens class binary text align 
claim aligned tokens matched semantic share value see section details 
compensate tokenization errors allow gaps type sequence alignment 
addition gap penalties control gaps introduce extra constraints avoid excessive gaps 
consecutive binary tokens message format allowed align gaps precede follow text token message format alignment number binary tokens size text token text token aligned gap size difference aligned text token 
constraint handling case sequence binary tokens text token vice versa 
second text token allowed align gap allow gaps kind 
constraint handling case text field consisting white space characters mistakenly divided multiple tokens 
align compare message formats decide merge check gap constraints satisfied 
claim formats mismatched continue check number mismatches 
pair aligned tokens mismatched claim formats matched merge 
note conservative mismatched token treated variable token takes values new set covering formats 
gap constraints number mismatches decide merge message formats merging performance insensitive sequence alignment parameters scores match mismatch gap 
example better understanding concrete example smb tree connect andx request message format explain design output discoverer 
obtain true message format ethereal see 
final inferred format discoverer shown table 
see inferred format sequence tokens token properties binary vs text constant vs variable semantics length fields 
tokens unknown semantics possible values taken account format 
merging step messages true format scattered clusters different token patterns 
different token patterns due smb signature field 
field may take random values different token pattern consecutive bytes different offset take values printable ascii range wrongly treated text token 
messages token patterns split fine grained clusters recursive clustering phase due conservative approach 
merging technique mitigates classification problem effectively 
clusters merged single 
example shows possibility imprecise field boundaries 
example null byte field smb nt status treated null terminator text token 
believe kind imprecision affect effectiveness inferred format create extra inferred formats different values smb nt status 
evaluation implemented discoverer lines code windows 
tool takes network capture file libpcap format input outputs inferred message formats sequence tokens inferred properties semantics 
th usenix security symposium usenix association proto name netbios session service size pos field name type message type session message size pos show value field show length size pos value proto proto name smb smb server message block protocol size pos field show smb header size pos field show server component smb size pos value ff field name smb cmd smb command tree connect andx size pos show value field name smb nt status nt status status success size pos show value field show flags size pos value field show flags xc size pos value field name smb pid high process id high size pos show value field name smb signature signature size pos show value field name smb reserved reserved size pos show value field name smb tid tree id size pos show value field name smb pid process id size pos show value field name smb uid user id size pos show value field name smb mid multiplex id size pos show value field field show tree connect andx request size pos field name smb word count size pos show value field show commands xff size pos value ff field name smb reserved reserved size pos show value field name smb size pos show value field name smb connect flags size pos value field name smb password length size pos show value field name smb bcc byte count bcc size pos show value field name smb password password size pos show value field name smb path path sp sin dcf microsoft com ipc size pos show sp sin dcf microsoft com ipc value field name smb service service size pos show value field proto ethereal xml output example smb tree connect andx request message edited better presentation 
current un optimized implementation takes hours trace messages merging procedure slowest due need pairwise comparisons inferred formats 
discussing experimental results describe data sets evaluation methodology 
data sets tested discoverer traces different sites site responds unsolicited malicious traffic busy enterprise diverse high volume traffic 
trace consists cifs smb 
enterprise trace includes cifs smb rpc 
trace trace calibration data help guide design process set tunable parameters 
results output tool traces enterprise site served evaluation data 
cifs smb seen evaluation case tool trained trace different site rpc case tool evaluated new protocol 
cifs smb messages may encapsulate rpc layer rpc trace consists rpc traffic exclusively 
trace calibration evaluation hardly tailored tool 
experiment cifs smb rpc trace enterprise site contains traffic direction 
affect evaluation protocol formats directions equally complicated ethereal parsing results cifs smb trace 
say infer format direction guaranteed infer format direction performance direction give indication performance direction 
addition put messages different directions cluster unidirectional traffic problem easier 
trace tool reassembled consecutive data sent direction message 
cifs smb rpc traces leveraged ethereal parse identify message boundaries 
summary traces shown table 
usenix association th usenix security symposium type length server component smb cmd smb nt status smb flags smb flags smb pid high smb signature smb reserved smb tid smb pid smb uid smb mid smb smb reserved smb smb connect flags smb smb bcc smb password smb path smb service name true format example message concatenates human readable names fields 
token true field token true field token true field token true field type smb pid high smb tid length smb connect flags smb signature ff smb pid fe smb ff server component smb uid tn smb cmd smb bcc smb nt status smb mid smb password smb tun smb path smb flags ff tn 
smb service smb flags smb reserved smb reserved smb table discoverer inferred format true format 
means constant means binary text text tokens means unicode means null terminated hex value string token number different values token 
evaluation methodology protocol source size messages true formats enterprise rpc enterprise cifs smb enterprise cifs smb evaluation methodology compare quality output set true message formats 
obtain true format trying manually extract documentation rfcs protocol analyzers ethereal 
ethereal parse network trace produce message trace xml output includes list fields message values fields human readable names sizes 
output assign message true format name simply concatenation human readable names fields 
example ethereal xml output true format name shown 
characterize performance tool highlight results metrics correctness cluster contains messages true format discoverer table summary network traces evaluation 
incorrect inference 
measure correctness checking number different true formats followed messages cluster 
protocols clusters contain messages single true format 
conciseness conservative clustering may cause multiple inferred formats cover subsets single true format 
large number redundant formats affect conciseness protocol specifications generated tool 
measure conciseness ratio number inferred formats number true formats followed messages 
protocols achieved low ratio 
coverage measure trace coverage perspectives fraction messages covered inferred formats fraction true formats th usenix security symposium usenix association parameter value maximum message prefix bytes minimum length text segments letters minimum cluster size messages maximum distinct values fd alignment match score alignment mismatch score alignment gap score table summary parameters 
followed covered messages 
protocols message coverage format coverage 
semantic inference length fields inferred discoverer correct certain length fields missed due trace limitation 
instance true formats cifs smb fixed message size 
case discoverer treat length fields reflect message size constant tokens affect parsing messages formats practice 
tunable parameters discoverer just tunable parameters see table 
message larger bytes consider bytes referred maximum message prefix 
minimum length text segments controls tokenization procedure section 
minimum cluster size maximum distinct values fd recursive clustering phase see section 
match mismatch gap scores parameters sequence alignment 
observed performance discoverer sensitive settings parameters 
instance saw similar performance changed maximum prefix size bytes bytes changed minimum cluster size messages messages 
addition type sequence alignment sensitive match mismatch gap scores discussed section 
take parameters evaluations protocols 
rest section experimental results enterprise traces rpc cifs smb 
note inferred format cluster interchangeably infer format cluster 
number messages true format index heavy tail distribution message format popularity 
cdf number true formats correctness cdf number true formats followed messages cluster clusters merging phase 
protocol allows arbitrary number parameter value pairs arbitrary order 
refer set semantic 
currently unable identify set semantic 
treat ordering set elements distinct format 
doing observed formats parsing results ethereal 
leave identification set semantic see section 
show number messages true format trace 
note axis logarithmic scale 
clearly reveals heavy tail distribution messages fall top true formats 
observed similar trend rpc cifs smb trace 
implication tool format coverage message usenix association th usenix security symposium coverage different higher compared 
inferred formats covered messages 
covered messages belong true formats 
hard requirement minimum size cluster conjecture coverage ratio terms true formats improve trace grows format messages 
plots cdf number true formats followed messages cluster clusters merging phase 
reflects correctness tool 
shows inferred clusters correct 
correspond true format 
number rises include inferred formats match true formats 
manually inspecting results clustering errors mainly due inaccuracy ethereal parsing 
example message formats discoverer infers token connection proxy connection 
discoverer treat fd may followed set values close keep alive 
ethereal recognize proxy connection parameter returns null string field parsing result returns connection connection 
true formats cluster contains connection proxy connection 
conciseness number may improve ethereal accurate parsing 
merging phase reduced clusters clusters 
covered messages belong true formats gives ratio 
fact true formats scattered clusters 
hand conservative strategy eliminated false positives wrongly merging clusters correspond different true formats 
hand help merging clusters 
reason follows 
allows parameters form parameter value 
treat parameter value separate tokens space 
value token certain parameters proxy may arbitrary strings value tokens clusters overlapped values 
case treat mismatch 
clusters happen mismatch merge conservative policy 
number inferred formats merging merging true format index effectiveness merging rpc number inferred formats messages single true format scattered merging 
rpc rpc trace consists exclusively rpc traffic 
trace size mb order cifs smb trace observed similar trend distribution number messages true format 
inferred formats covered messages 
covered messages belong true formats 
recursive clustering generated clusters clusters contain messages single true format rest clusters messages true formats 
merging phase helped reduce clusters introducing false positives 
shows merging phase compensates tokenization errors recognizing wrongly classified binary text tokens 
see true formats messages merged single cluster 
cifs smb cifs smb fairly complex binary protocol includes layers protocols consists netbios session service headers encapsulate smb header turn layered rpc 
inferred formats covered messages 
covered messages belong true formats 
plot cdf number true formats followed messages cluster clusters merging phase 
see th usenix security symposium usenix association cdf number true formats correctness cifs smb cdf number true formats followed messages cluster clusters merging phase 
number inferred formats merging merging true format index merging effectiveness cifs smb number inferred formats messages single true format scattered merging clusters contain messages single true format clusters messages true formats 
manually checked clusters due imprecise parsing ethereal 
recognized field nt close frame field messages stub data messages messages format manual inspection 
take account factor clusters contain messages single true format consistent 
inspected clusters consisting messages formats clusters difference true formats followed messages field 
form stub data xx bytes difference xx says size stub data 
manual inspection conjecture stub data follow format size difference due text field variable length embedded stub data 
conservative measure correctness 
plot number inferred formats messages single true format scattered merging 
rpc merging technique effective cifs smb 
reduced number clusters introducing false positives gives ratio true formats 
related divide related categories 
discuss state art protocol reverse engineering 
second previous geared specific application performing purpose protocol reverse engineering 
discuss grammar inference 
date protocol reverse engineering appears painstaking manual process involves looking available documentation source code traces 
popular examples community include samba project messenger clients 
automatic protocol reverse engineering appears received attention 
closely related aware protocol informatics project 
aims employ sequence alignment techniques infer protocol formats trace protocol 
main limitation byte wise sequence alignment ideally suited aligning messages similar byte sequences suitable aligning messages similar formats 
addition selecting weights tune alignment hard shown 
previous studies performed level protocol reverse engineering specific purpose mind application level replay protocol identification 
leverage byte wise sequence alignment techniques achieve application level replay heuristically detecting adjusting specific fields network addresses lengths cookies 
driving application application level replay build application level proxy filter known attacks 
improve performance needleman wunsch algorithm uses called pairwise constraint matrix specifies ith byte message aligned jth byte second message usenix association th usenix security symposium field semantic ith byte 
semantic ith byte message unknown aligned byte second message may lead alignment errors 
key differences discoverer systems 
discover protocol format extent necessary replay discoverer aimed discover complete protocol format 
second byte wise sequence alignment cluster messages token patterns novel type sequence alignment technique align compare message formats token types 
represents significant improvement hand avoid byte pattern alignment recursive clustering phase achieve performance correctness hand mitigate merging similar inferred formats 
furthermore compared clusters messages comparing messages recursive clustering technique performs better look potential fd token look comparing subsequent tokens messages 
techniques identifying semantically important fields length fields borrowed 
ma perform protocol identification classify set sessions trace various protocols relying port numbers 
develop techniques profiling messages exchanged protocol product distributions byte offsets markov models byte transitions common substring graphs message strings 
main difference different goals 
aim characterize protocol bytes sessions protocol leverage format inference type sequence alignment techniques decipher message formats entire session 
problem protocol reverse engineering related theoretical problem grammar inference aims deduce grammar set sample strings drawn 
problem unfortunately theoretically unsolvable grammar simplest form grammar regular language 
regular language potentially infinite sample set turns task impossible 
language implicit application level protocols substantially complex regular language involving fields length fields 
complexity unable directly apply results grammar inference community 
extensions kolmogorov complexity learn simplest finite language positive examples appear complicated apply context sensitive grammars network protocols involve 
techniques speech recognition community probabilistic markov chain analysis applied correlation protocol fields difficult byte sequence message modeled independent samples markov process 
limitations section discuss limitations approach 
categorize limitations categories ones fundamental problem want solve due heuristics tool 
describe research directions solving limitations 
main fundamental limitations 
trace dependency format generated tool operates trace limited diversity traffic seen trace 
certain message formats occur trace certain variable fields take value trace impossible tool infer message formats identify fields variable fields 
pre defined semantics set pre defined semantics inferred 
possible find possible semantics fields just trace best hope extensible framework new semantic modules added desired 
move imprecision problems directly related design tool 
major imprecisions inferred message formats semantics capture semantics 
set semantics instance allows arbitrary number parameters specified order 
identifying list supported parameters set allows re ordering encoding considerably improve performance 
pointer field field value offset field array arbitrary items 
fields occur dns 
array length field value number items array arbitrary items dns 
plan study inference semantics 
th usenix security symposium usenix association coalescing fields identify binary field sequence binary tokens spanning single byte 
limitation ideally want field identified single binary token 
text fields clue may available delimiting binary fields 
way techniques frequency analysis byte vary 
kind techniques tend unreliable 
instance byte process id field significant byte may change frequently significant operating system usually issues process ids incrementally zero 
chose list fields series single byte tokens 
plan enrich semantic inference modules sequence binary bytes common semantic identified single field 
example length field spanning bytes identified single field semantic module detecting length fields 
asynchronous protocols asynchronous protocols difficult delimit messages network packets 
messages direction may interrupted direction messages direction may delayed allowing back back messages direction 
experimented asynchronous protocols far 
application sessions currently tool analyzes connection isolation 
session description various connections various hosts involved trivial process trace session knowledge derive formats session 
previous study aimed semi automatically discover session structures 
state machine inference currently envision state machine constructed trace inferred message formats assign type message simply inferring fsa captures sequences messages sessions trace 
hardly compact fsa application developer mind 
case fsa minimization techniques may simplify fsa considerably 
limitations due limited information available network traces 
tackle limitations achieve better reverse engineered protocol specification program analysis gain information insight parsing processing input program 
instance may easily identify consecutive bytes word byte integer run time analysis observing processed word execution 
focused reverse engineering network protocols discoverer useful reverse engineer input specifications file applications seen significant growth file attacks 
protocol reverse engineering highly manual process today suffered immense value protocol knowledge 
developed discoverer tool aims automate reverse engineering process 
discoverer leverages recursive clustering type sequence alignment infer message formats 
demonstrated discoverer infer message formats effectively network protocols cifs smb rpc 
plan enrich semantic inference research protocol state machine inference explore direction program analysis reverse engineer specifications network file input apply protocol specifications real world applications 
acknowledgments vern paxson ion stoica christian gautam valuable comments early draft 
joseph providing network traces 
anonymous reviewers insightful comments 
wang joshi guo 
generic application level protocol analyzer language 
proceedings th annual network distributed system security symposium ndss march 
cui paxson weaver 
gq realizing system catch worms quarter places 
technical report tr icsi 
cui paxson weaver katz 
protocol independent replay application usenix association th usenix security symposium dialog 
proceedings th symposium network distributed system security ndss february 
denis 
learning regular languages simple positive examples 
machine learning 
ethereal network protocol analyzer 
ethereal com 
instant messaging client 

sourceforge net 
gold 
language identification limit 
information control 
jelinek lafferty 
computation probability initial substring generation stochastic context free grammars 
computational linguistics 
kannan jung paxson 
semi automated discovery application session structure 
proceedings internet measurement conference imc rio de janeiro brazil october 
dacier 
automatic handling protocol dependencies reaction day attacks honeypots 
proceedings th international symposium advances intrusion detection hamburg germany september 
dacier 
automated script generation tool honeyd 
proceedings st annual computer security applications conference acsac december 
libpcap project 
sourceforge net projects libpcap 
ma savage voelker 
unexpected means protocol inference 
proceedings internet measurement conference 
microsoft 
microsoft network monitor 
www microsoft com downloads details aa cb 
needleman wunsch 
general method applicable search similarities amino acid sequence proteins 
journal molecular biology 
pang paxson peterson 
binpac yacc writing application protocol parsers 
proceedings internet measurement conference october 
protocol informatics project 
www 
net pi 
samba written 
samba org ftp misc french cafe txt 
watson 
taxonomy finite automaton minimization algorithms 
technical report cs eindhoven university technology eindhoven netherlands 
th usenix security symposium usenix association 
