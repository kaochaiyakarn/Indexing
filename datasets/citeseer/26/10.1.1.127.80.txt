faithfulness internet algorithms jeffrey david engineering applied science harvard university parkes eecs harvard edu laurent research cambridge uk microsoft com proving disproving faithfulness property describing robustness rational manipulation action information revelation appealing goal reasoning distributed systems containing rational participants 
formalizes notion faithfulness foundation properties presents general proof technique course proving ex post nash faithfulness theoretical routing problem 
formal approach take steps faithfulness analysis existing algorithms running internet 
consider expected faithfulness bittorrent popular file download system show manual backtracing similar ideas program slicing find rational manipulation problems 
primitive technique serious drawbacks useful disproving faithfulness 
building provably faithful internet protocols corresponding specifications quite difficult depending system knowledge assumptions problem complexity 
open problems associated challenges 
categories subject descriptors software engineering software program verification computer applications social behavioral sciences economics 
general terms algorithms design economics 
keywords backtracing computational mechanism design distributed algorithmic mechanism design computational failure models faithfulness program slicing rational failure rational manipulation permission digital hard copies part classroom granted fee provided copies distributed profit commercial advantage notice full citation page 
copy republish post servers redistribute lists requires prior fee 
sigcomm workshops aug sept portland oregon usa copyright acm 

faithfulness economics subfield mechanism design md studies build systems exhibit behavior equilibrium self interested participants pursue self interested strategies 
computer scientists recognized ideas md may applicable algorithm design multiple self interested competing nodes interested algorithm outcome 
extensions md may help distributed algorithm design algorithm calculation pushed back nodes interested calculation 
traditional md assumes self interested strategies consist entirely information revelation actions node may declared inputs algorithm created system designer 
network setting limitation valid assume networking mechanism infrastructure rational players control message paths mechanism computation 
setting node actions related algorithm involvement rationally manipulating part algorithm order try better outcome 
concluding seminal algorithmic mechanism design amd nisan ronen refer set problems come implementing mechanism network 
distributed algorithmic mechanism design feigenbaum discuss problems need reconcile strategic model computational model 
address issues parkes treatment rational manipulation distributed systems provide framework way reasoning faithful behavior mechanisms 
formalizes notion faithfulness foundation properties incentive communication algorithm compatibility proven guarantee participating nodes faithful suggested specification 
contrast formal approach prove faithfulness theoretical interdomain routing problem presents technique disprove faithfulness locate rational manipulation points specifications 
knowledge type analysis hasn widely attempted systems designers find parts algorithm protocol susceptible rational manipulation 
technique imperfect useful finding weaknesses bittorrent algorithm algorithm evaluated 
purposes informal definition faithfulness leaving formal discussion earlier 
interesting aspect protocols algorithms running internet cases default software program official protocol specification supplied clients 
system designer convey default suggested behavior wishes node follow 
allows mechanism designer suggest equilibrium strategy plan decision rule specifies actions node take possible states world 
definition 
system faithful respect knowledge assumption rational selfish utility maximizing node follows algorithm externally visible effects suggested strategy states world 
definition states assumptions types nodes system economics equilibrium concept node acting self interest follow default strategy equivalent indistinguishable outsider faithful system 
node follows default strategy utility maximizing strategy node strategy yields higher utility node 
say system faithful mean specification written faithful implemented correctly rational node choose run correct implementation 
old saying software development source code ultimate specification 
interpretation adage absence welldefined specification needs refer source code understand system behavior 
case distinction specification implementation 

software strategy software executed particular node seen representation node strategy 
software starts initial state 
software receives inputs information determine perceived state world 
software moves new state emitting external action 
node takes external action strategic delay said take empty action 
economics discusses strategies actions internal state transitions unobservable internal actions occur software wrapped part strategy generates external action observable outside nodes 
auction example auctioneer may ask node bid item 
node considers state world input ask moment responds auctioneer 
process described node strategy particular state 
view software machine code instruction program thought representing little bit components node strategy 
function call potential emit external action evaluate change perceived state world 
node perform strategy action mechanism designer restrict actions valid set expressed 
instance designer impose restriction actions framed valid ethernet packets network jack 
node manipulate signals jack directly subset actions expressed ethernet packets allowed physical transport 
commonly strategy space restricted strategies expressed finite multiset possible executions machine instructions 
node willing give strategy expression favor ease interaction proxies restricted languages cpu operating system general purpose machines allow node sufficient vocabulary express relevant strategies 
software provided system designer restrict strategy space 
restriction limit strategic choice options result outcomes far node ideal outcome 
example auction package may restrict node valuation expression numbers may devote resources node machine processing bids players distributed mechanism 
mentioned earlier software provide default suggested strategy restricted strategy space 
cost modifying system provided software utility gained modification greater cost modification rational node expend cost 
system terms mean building new software client 
mechanism design standpoint cares modifications come cost participants loss mechanism functionality 
documented instances rational manipulation internet algorithms negatively affect users system 
reason interested faithfulness properties system provided client software 
informally system robust rational manipulation faithful designer able give node piece source code set suggested run time options state feel free modify client see fit 
prove best strategy follow strategy 

faithfulness caveats systems built stack building block components 
example operating system provides basic communication primitives sockets 
top primitives components eventually including transport protocols tcp 
top components sit applications bittorrent system considered 
making faithfulness claim consider strategy manipulations parts system declare level assumed 
instance designer assert modifying firmware running network card costly anticipated rational players 
assertion aspects operating system arguably system closed source 
assertion application software especially knobs change default strategy hard access 
changing command line parameter easier modifying configuration file easier changing compiled opcodes executable 
expected utility gain manipulation lower cost rational person won manipulation 
important note utility isn strictly equal say increased performance peer peer sharing application 
include feelings community endowed prestige respect interesting useful 
possible person lower cost manipulation user modify spread client expose hidden details configurable options 
average person choose pay modification cost size expected gain person may happy adopt 
thoughts turn attention particular internet system 

faithfulness bittorrent bittorrent distributed file downloading system peers nodes download file addition original source :10.1.1.14.1911:10.1.1.14.1911
basic file distribution method server divides file pieces provides piece file peer turn serve piece peers 
peers build file filling missing pieces pieces held peers original file publisher 
parallel access scheme useful highly anticipated large file released latest linux kernel 
serving large file entirety small set users provide additional help system schemes spreading serving responsibilities interested peers 
helps avoid single file publisher download requests 
bittorrent users participate distributed serving scheme linking receipt pieces serving pieces 
idea node send file data peers effect speeding downloads 
incentives achieve described section 
bittorrent representing class parallel downloading systems interesting system investigate reasons system designed rational behavior mind 
system self described tit tat method seeking pareto efficiency :10.1.1.14.1911
words idea strategic behavior rational user 
useful understand strengths weaknesses incentive scheme 
second system designer provided suggested strategy default bittorrent client released source code executable form 
client default behavior switches controlled user 
fact client source code available reasonably small lines python script means cost changing strategy space potentially small 
third bittorrent system simple designer anticipate model classes rational users 
include nodes prefer download file upload bandwidth prefer get file fast possible prefer prevent receiving file study bittorrent fares face nodes type rational behavior 
classes rational behavior possible discussed shortly 
fourth bittorrent system popular 
package derivatives adopted file distribution commercial entities numerous individuals 
worth investigating strengths weaknesses real protocols 
bittorrent specifics bittorrent active development 
description system analysis done official bittorrent client version 
writing current version bittorrent numerous alternate clients available 
cohen provides short overview system focusing role incentives :10.1.1.14.1911
relevant pseudo code 
bittorrent works fashion system trusted tracker node maintains list peers active respect particular file 
complete peers hold entire file incomplete peers process downloading file tracked 
entering system peer announces tracker requests random subset list peers 
peer attempts bidirectional tcp connection members subset 
peer established tcp connections small subset internally marked peer 
connection endpoint request piece file peer fulfill request 
doesn affect unchoking decision peers send special messages update claim pieces possess 
information allows peer request valid piece 
peer capable receiving file piece connection regardless internally marked state 
fact basis optimistic unchoking described 
active peer complete altruistic send pieces file peers system preferring unchoking peers download pieces fastest 
incomplete peer hand unchoke peers currently providing pieces highest throughput 
complete incomplete peers optimistically unchoke new peer interval attempt find better trading partner higher throughput 
separate interval fastest partners kept state remaining peers 
system doesn require altruistic peer exist default behavior client remain running peer complete additional altruistic peer 
ideal bittorrent file large hundreds megabytes larger transfer times long people leave client running background 
additional altruistic peers help greatly speeding downloads remaining peers 
bittorrent default strategy normal method running client doesn user change bittorrent settings 
client designed run automatically user clicks special web link 
restrictive cohen argued simplicity bittorrent interface large measure program success :10.1.1.14.1911
default client behavior follows pseudo code 
choice constants picked experimentally bittorrent authors yield performance 
lambda pseudo code bittorrent algorithm lambda lambda python source lambda get list peers tracker 
called seconds startup 
get peers get list peers tracker send start connection subset list add new peer connection list called receipt start connection msg start connection peer add middle unchoke list decide send pieces 
called seconds node complete entire file unchoke fastest receivers unchoke fastest senders reward remaining peers place unchoke list 
optimistically unchoke peer called seconds optimistic unchoke pop peer unchoke list unchoke announce piece peers called receive piece piece receipt piece send piece connected peers request piece hear called receive piece piece peer piece false send request piece send piece requested peer called receive request piece request piece peer piece currently send piece pseudo code bittorrent algorithm focusing incentives implementation 
bittorrent client maintains connections variable list peers nodes upload 
set recalculated seconds seconds additional peer attempt find better trading partner 
incentives bittorrent strategy space provided bittorrent client sufficient robust rational manipulation 
rational user perform default strategy executing bittorrent client 
setting answer questions important acknowledge fact bittorrent popular system leaves users satisfied 
reality bittorrent users unaware workings client software view cost analyzing modifying bittorrent high simply unaware opportunity express different strategy 
users users modeled bounded rational nodes 
consider bittorrent run rational user plays strategy maximize utility 
understanding rational node react bittorrent client bit tricky different types rational behavior 
highlights problem reasoning faithfulness state assumptions node local utility models 
purposes analysis consider simple types rational nodes exist world speed critical node places high utility receiving file fast possible 
free rider node places high utility receiving file little upload bandwidth possible 
models case people pay internet connection amount bytes transfered 
reasonable classes peers types rational nodes 
instance people tend start downloads going bed 
nodes probably utility receiving file time steps tomorrow morning 
nodes may charged money isp continued bandwidth threshold amount time 
considering multiple node valuation functions useful demonstrate faithfulness problems bittorrent focusing utility models 
general assumption economics multi agent systems node aims maximize benefit receives system 
section consider extensions peers anti social malicious components utility function 
interest determining faithfulness bittorrent client specification speed critical free rider type nodes 
formal specification bit torrent system analyzed source code understand working system look strategy issues 

finding flaws faithfulness proving faithfulness general algorithms hard 
concurrent explores technique useful proving faithfulness 
approach splits distributed algorithm disjoint phases proven faithful showing node benefit combination deviations suggested strategy relevant phase 
phases certified locked phases affect 
demonstrating system faithfulness flaws easier non trivial 
faced specification source code find possible manipulation points backtracing idea useful studying bittorrent backtracing 
idea backtracing follows type rational node system communication configuration goal state trace backwards logical steps code interaction 
mark branches neighbor interactions candidate manipulation points 
examine classify point 
works backwards code paths find points code affect goal state candidate manipulation points examined manually explore effects selfish manipulation 
manipulation point classified false alarm point affect path goal state 
beneficial manipulation point manipulation suggested strategy occur beneficial system goal 
points represent optimizations provided system designer 
harmful manipulation point manipulation suggested strategy occur increases node utility hurts distributed mechanism execution nodes system 
backtracing similar program slicing slice consists parts program potentially af kb second time typical bittorrent startup throughput upload speed download speed kb second time uploading garbage bittorrent throughput upload speed garbage download speed illustration uploading garbage help speed critical rational node 
left throughput new peer entering bittorrent exchange 
peer benefits optimistic unchoking nodes minutes 
spikes occur different nodes unchoke node time re node 
just minutes node built piece wanted nodes begun uploading data nodes 
result nodes reciprocate download speed climbs 
contrast right hand graph 
notice time throughput scales radically different maximum download speed left graph show small blip right graph 
right hand graph node falsely advertised having pieces uploading garbage peers fast requested 
shortly uploading begins download speed data begins increase 
fect values computed point interest 
difference program slicing considers user single program backtracing focuses users interfacing client software game setting 
sample backtracing graph peers bittorrent system generated hand 
node graph represents particular function criteria potential affect goal state 
follow function calls backwards attempt find manipulation points 
manipulation point categorize chance manipulation false alarm beneficial manipulation harmful manipulation 
manipulation points considered set joint manipulation possibility exists node deviate suggested strategy multiple places achieve better outcome 
graph generated speed critical rational user mind 
goal user cause goal state lower left indicating piece downloaded successfully true pieces quickly possible 
nested loops tracing step suggest procedure onerous large systems 
classify candidate manipulation point verify additional points form newly inserted branch statements aren valid manipulations 
analyzing bittorrent system scratch types rational nodes goal state possible communication configurations took approximately hours 
backtracing imperfect requires human analyze candidate 
technique disprove system faithfulness identify design flaw 
flaws system may may faithful 
despite drawbacks backtracing procedure useful 
notable backtracing procedure manipulations described section expected began project suspect declaring held pieces manipulate connections turned false alarm affecting bittorrent protocol 
current incentives mechanism design contained relatively small systems bittorrent manual intensity backtracing may 
means perfect tool backtracing useful line faithfulness debugger 
backtracing bittorrent section report results backtracing exercise 
set results information revelation issues change underlying bittorrent algorithm 
identity client announces multiple times tracker different port numbers appears system new client 
effect increased visibility node optimistic proportional declared identities 
related known sybil attack 
upload bandwidth trickle nature bittorrent node physically higher bandwidth tries ensure stays list partner may able appearing slower reality 
partner unchokes fastest nodes list potential nodes see peer upload rate just kth fastest competitor 
reported upload rate really upload rate peer measured partner peer true speed set issues algorithm manipulation issues 
unchoke bittorrent client algorithm adds new connection halfway unchoke list see connection recipient 
means node newly may better closing re opening connection achieve better place optimistic unchoking line 
garbage upload client claim pieces file sending garbage peer requests piece 
garbage detected peer data integrity hash check writing disk garbage counts valid incoming traffic 
node high bandwidth connection bootstrap quickly attack 
example benefits manipulation confirmed experimentally shown 
harmful manipulation summary summary harmful manipulations backtracing graph helped reveal free rider run sybil attack tracker claiming parties running different ports ip address 
increases distribution peer contact information peers turn increases likelihood receiving pieces optimistic unchoking 
free rider optimistically peer sent piece re moved peer unchoke list 
free rider break re create connection jump line beneficial spot 
speed critical node additionally play garbage upload strategy 
cost manipulations lines python code hours programmer time 
tcp manipulations bittorrent distributed systems built top standard networking building blocks 
bittorrent runs top tcp 
strategies available bittorrent user enabled result changing behavior tcp implementation 
cost modification relatively high compared changing lines python application code imagine vickrey inspired scheme replacing system node reports true upload send kth speed 
bandwidth prevented throwing node meet bandwidth 
pragmatic issues complicated hidden bottlenecks sink may reduce actual throughput excluded node may able re enter system 
answer 
casting rational behavior previous networking established manipulation points tcp protocol 
authors analysis instinct focusing message sequences problematic 
analysis enhanced backtracing exercise tcp protocol 
separate tcp issues considered protocols design guidelines prevent accidental creation manipulation points 
applicable designers seeking create faithful systems 

open questions rationality studying bittorrent limited analysis network consisting rational nodes 
node types 
shown bittorrent faithful speculate system nodes utility functions addressed 
disadvantages system bittorrent presence peers unanticipated utility functions 
malicious peers particular challenge 
issue peer ip addresses downloaders 
malicious user publish file trojan horse generate bootstrap list probable affected targets list ip addresses passed back tracker 
alternatively wishes disrupt file distribution perform sybil attack filling tracker clients slow distribution providing garbage service 
generally happens mechanism design allow rational faulty nodes system 
computer science tends treat entities network set nodes degree faulty 
economics mechanism design tends treat entities rational set nodes consisting rational center 
happens world views collide 
posit questions vein open question known impossibility results distributed systems 
instance cases agreement presence faults machines requirement correctly reach consensus 
subset faulty nodes rational nodes unable express preferred strategy default software 
cases rational node perform correctly moving rational node correct category faulty category side stepping initial assumption 
open question start network consisting purely rational nodes running faithful mechanism 
add byzantine faulty node act arbitrarily 
change faithfulness properties 
design mechanisms faithful presence faulty nodes 
answer question change started network consisting nodes rational node 
knowledge built analysis mechanism demonstrate operate successfully presence rational faulty nodes automated tracing tools wonder sorts systems tools developed aid people program slicing useful faithfulness analysis 
open question program slicing ideas tools applied finding manipulation points real systems 
backtracing related ideas model checking implementation checked correctness specification 
active area systems research model checking tools reveal general specification clarity issues 
resulting specification implementation need form manipulation analysis 

explored software expression node strategy faithfulness relates rational manipulation strategy 
examined particular file download system called bittorrent backtracing technique similar program slicing find manipulation points 
categorizing manipulation points bittorrent harmful manipulations negatively affect welfare nodes system 
nodes may view costs manipulating bittorrent way relatively small compared potential gain 
began explore open problems relating showing faithfulness algorithms run internet 

acknowledgments peter key margo seltzer tang anonymous reviewers useful comments 
supported part nsf iis aci 
research performed author intern microsoft research 
anderson shenker stoica wetherall 
design guidelines robust internet protocols 
hotnets october 
blizzard game web site world bittorrent faq 
www blizzard com wow faq bittorrent shtml 
brandt weiss 
agents vickrey auctions 

ch 
meyer tambe editors intelligent agents viii volume pages 
springer 
revised papers th workshop agent theories architectures languages 
cohen :10.1.1.14.1911
incentives build robustness bittorrent 
workshop economics peer peer systems june 
douceur 
sybil attack 
st int 
workshop peer peer systems iptps 
dawson engler 
model checking large network protocol implementations 
appear nsdi 
joan feigenbaum christos papadimitriou rahul sami scott shenker 
bgp mechanism lowest cost routing 
proceedings acm symposium principles distributed computing pages 
joan feigenbaum scott shenker 
distributed algorithmic mechanism design results directions 
proceedings th international workshop discrete algorithms methods mobile computing communications pages 
info anarchy web site definition parallel downloading systems hive 
www org wiki wiki pl hive 
jeffrey david parkes 
rationality self interest peer peer networks 
nd int 
workshop peer peer systems iptps 
jeffrey david parkes 
specification faithfulness networks rational nodes 
third annual acm sigact sigops symposium principles distributed computing podc july 
web site press release bittorrent 
www com news archives php id 
nancy lynch 
distributed algorithms 
morgan kaufmann publishers 
noam nisan amir ronen 
algorithmic mechanism design 
proceedings st acm symposium theory computing pages 
noam nisan amir ronen 
computationally feasible vcg mechanisms 
proc 
nd acm conf 
electronic commerce ec pages 
noam nisan amir ronen 
algorithmic mechanism design 
games economic behavior 
david parkes 
iterative combinatorial auctions achieving economic computational efficiency chapter 
phd thesis pennsylvania may 
pablo rodriguez 
scalable content distribution internet 
phd thesis federal institut technology lausanne epfl sept 
stefan savage neal cardwell david wetherall tom anderson 
tcp congestion control misbehaving receiver 
computer communication review 
stefan savage 
private communication 
tip 
survey program slicing techniques 
journal programming languages 
mark weiser 
program slicing 
proceedings th international conference software engineering pages 
ieee computer society press 
