remotely keyed secure remote display access untrusted hardware extended version debra cook ricardo angelos keromytis department computer science columbia university ricardo angelos cs columbia edu 
software covertly monitors user actions known level security threat due ubiquity difficulty detecting removing 
software may inadvertently installed user casually browsing web may purposely installed attacker owner system 
particularly problematic case utility computing early manifestations internet thin client computing 
traditional trusted computing approaches offer partial solution significantly increasing size trusted computing base tcb include operating system software 
examine problem protecting user accessing specific services environment 
focus secure video broadcasts remote desktop access convenient untrusted terminal example applications 
posit applications tcb confined suitably modified graphics processing unit gpu 
specifically prevent untrusted clients accessing user data restrict boundary trust client gpu moving image decryption gpus 
gpu order leverage existing capabilities opposed designing new component scratch 
discuss applicability gpu decryption sample scenarios identify limitations current generation gpus 
propose straightforward modifications gpus allow realization full approach 
recognized major threat user privacy 
especially combined large scale distribution mechanism popular web site application computer worm potential large scale security violations considerable 
organizations increasingly spy employees computer activities technology public computers internet malware sensitive application 
addressing problem focused detection activity system building trusted system bottom combination hardware support operating system extensions application specific logic 
promising approaches offer limited security adversary legitimately controls infected system exhibit real time activity consider program simply takes snapshots system screen unsuspecting user accessing sensitive information 
images data sent encrypted networks existing protocols tls ipsec decryption performed operating system creating potential data copied untrusted client 
propose system graphics processing unit gpu trusted component safe system displays 
gpus leverage existing capabilities system opposed designing adding new component protect information sent remote displays 
specifically sensitive content directly passed gpu encrypted form 
gpu decrypts displays content storing plaintext system main memory exposing operating system cpu peripherals 
remote keying protocol securely convey decryption key gpu exposing underlying system 
mechanism basic block implement applications secure video broadcasts remote desktop display access trusting rest system 
furthermore design allows user securely enter password pin remote system revealing requiring additional hardware 
describe suitably modified usb keyboard possible completely protect user communications remote server 
initial step main purpose propose concept determine feasibility gpu decryption 
determine careful design current gpus allow gpu image decryption rates sufficient support example applications 
identify obstacles fully implementing scheme current gpus due limitations current gpu apis opengl 
difficult aspect moving decryption gpu api types operations supported gpu 
possible implement symmetric key ciphers aes opengl performance poor due number types operations required demonstrated 
ciphers implemented run entirely gpus current apis 
result focus forcing existing symmetric key cipher fit gpu order decrypt data implement operations possible gpu confine remaining ones program order illustrate concept 
currently rc display encryption 
cipher suited gpus improved api gpus required 
begun stream cipher designed gpus include estimate performance 
identify straightforward additions gpu designs allow realization scheme possible integration scheme trusted computing group proposed architecture 
remainder organized follows 
give overview opengl section 
describe motivation section prototype section 
discuss limitations gpu apis impacts ability remotely key implement decryption gpu section 
section preliminary performance analysis prototype 
discuss additional items considered section section 
opengl gpu background provide brief overview aspects opengl gpus relevant experiments 
basic knowledge capabilities limitations gpus necessary understand proposed architecture prototype 
common apis gpus opengl direct part microsoft directx api 
opengl order provide platform independence contrast microsoft direct 
see complete description opengl 
explain operations performed gpu limited api 
operations required prototype limitations exist direct opengl 
choose avoid higher level languages built top apis order ensure specific opengl commands 
examples languages include cg directx research brook compiler uses cg addition opengl direct 
higher level languages allow developer specify opengl commands utilized multiple ways implementing function opengl commands guarantee operations transformed opengl commands may transform code 
example code higher level language xors bytes transformed code executed operating system converted opengl commands converts bytes pixels xors pixels 
prototype requires display set bit pixels data format indicating items number bits pixel ordering color components specifies gpu interprets packs bits reading data system memory 
data format may indicate pixels treated floating point numbers color indices stencil indices 
floating point representation reading data system memory data unpacked converted floating point values range luminance scaling bias prototype applied color component 
step apply color map describe detail 
values color components clamped range appendix shows components opengl pipeline relevant pixel processing pixels treated floating point values 
opengl commands implementations consist writing bytes system memory gpu pixels color map logical operation xor turned 
logical operation xor produces bitwise xor pixel read pixel currently destination result written destination 
apply keystream image 
decrypting image necessary disable dithering prevent pixels averaged neighbors image read gpu 
color mapping slowest operations perform decryption function asymmetric cipher send secret key gpu 
color map applied particular component pixel pixel copied coordinate bit pixels byte typically dedicated red green blue alpha components 
format bits red green blue components bits alpha component may supported gpu 
bytes read system memory converted pixels gpu 
color map enabled individually components 
color map static table floating point numbers 
internal gpu value pixel component mapped converted integer value index table pixel component replaced value table 
example table consists entries implementation apply map red component pixel treat bits red value integer update red value corresponding entry table 
opengl requires support front buffer image visible back buffer image visible require support alpha pixel component back buffer 
limits bytes pixel red green blue components performing operations back buffer 
worth mentioning bit pixel format bits operated single bit value interpreted terms pixel components 
example possible add multiply bit integers representing pixels 
general bit pixels operate bit integers 
due limitations current apis algorithms performing certain byte bit level operations suitable gpus 
simple logical operations performed efficiently gpus large numbers bytes byte bit level operations typically symmetric key ciphers shifts rotates available apis gpus 
modular arithmetic operations required aes available note possible implement aes series copies color maps logical operations enabled 
shifts rotates performed single bytes defining color maps multiple copy commands shifts multiple bytes table lookups specific bits prove difficult 
example straightforward way implement opengl data dependent rotations rc mars 
consider des boxes 
index box key bits xored data bits 
masks pixels copied data extract desired bits merely xor key bits data bits requires copying pixel containing desired key bits pixel containing mask xor turned doing data pixel copying resulting pixels position 
color maps required emulate box 
may technically possible implement symmetric key cipher opengl larger number efficient operations required implementation 
opengl graphics programming common aspects vertex processing utilized 
shapes defined sets vertices colors textures applied 
addition defining basic image various parameters viewpoint projection lighting fog orientation set 
rotations translations applied shapes produce movement 
typical aspects graphics processing interest creating stream cipher suitable gpu 
gpus offer programmable vertex fragment units 
new capabilities apply vertex processing remove limitations encountered trying implement ciphers gpu 
motivation applications relevant include remote desktops thin client scenario video conferencing displays 
thin client scenario client connects server fulfills client computing needs 
application logic executed server client completely stateless little display updates sent server forward local user input events 
current thin client systems provide secure sessions encrypting display protocol transferred network 
scenarios client terminal untrusted public computers may desirable host operating system access unencrypted display updates 
example consider system koller 
case access sensitive data controlled manipulating content sent remote display client 
display data client secured number additional mechanisms devised prevent actual client application attack tool system 
hand display decrypted form gpu need block reads current display applications 
video conferencing wish prevent clients copying conference displays 
secure video recorded client audio scope concept demonstrate gpus applied digital cameras digital signal processors 
existing digital rights management drm architectures aimed preventing unauthorized copying video images decrypted remote untrusted os 
drm includes manage usage trade material protect unauthorized access unauthorized copying 
example microsoft windows media player drm series includes capability authenticating remotely keying media player 
images decrypted operating system media player sent gpu 
architecture security depends specific closed source media player program able access memory utilized decrypting data 
alternative models trusted gpus considered implemented knowledge 
trusted computing group scope includes untrusted clients proposed architecture utilizes distinct trusted platform modules may hardware software address multiple needs provide generic solution 
graphical applications approach considered alternative avoids specialized system components companion 
particular possibility tpm handle key negotiation remote server provide session key gpu 
note similar concerns arise handling voice traffic noted 
main goal moving decryption graphics gpu prevent underlying operating system software gaining access unencrypted data 
specifically consider software running client operating system attempts read modify displays responses transmitted server client 
address modifications client hardware altering gpu 
furthermore security client surroundings camera recording client display separate problem outside scope 
prototype architecture depicts architecture 
server encrypts data sends client 
data remains encrypted enters gpu decrypted displayed 
gpu buffer locked prevent display read processes operating system effectively turning frame buffer write memory 
decryption performed software running client operating system issues commands gpu opposed compiled program existing executing entirely gpu memory operations performed gpu 
software access keys data contained inside gpu specifies transformations decryptions steps gpu undertake 
ideally intermediate data produced decryption program keystream confined gpu 
explain section currently possible due gpu api 
server images display updates secret key encrypted images display updates establish secure session server transmits secret key proxy 
proxy card reader insert smartcard program client issues opengl commands gpu generate key stream 
certificate client gpu framebuffer keystream generation client transmits gpu certificate proxy 
proxy sends secret key gpu 
fig 

architecture remotely keyed decryption gpu decryption key changes session application basis may change session 
key conveyed gpu manner prevents client operating system gaining access 
way achieve remotely key gpu decrypt key 
key generate keystream directly gpu exposing key keystream os 
decryption key generation keystream performed non visible buffer back buffer gpu avoid visually displaying key key stream 
reading encrypted image back buffer logical operation xor enabled results image decrypted 
result swapped front buffer display decrypted image user 
operations require copy image plaintext system main memory 
possibilities entities involved authenticated key sent gpu depending components trusted 
case assumed gpu contains pre installed certificate private key 
certificate may issued manufacturer hardwired gpu 
option allow writing certificate gpu circumstances client os trusted gpu installed newly configured client 
simplest option authentication covers case server sending images trusted need verify person viewing images assumed fact viewer able start process client indicates safe send images server capable authenticating gpu certificate 
server establishing session key gpu gpu public key encrypts secret key sends gpu client 
second general scenario assumes server trusted requires verification user viewing images proxy entity smartcard reader 
user activate proxy inserting card smartcard reader attached untrusted system 
proxy establish sessions server remote system gpu 
server convey secret key gpu proxy shown 
process converting key encrypted server proxy session key encrypted proxy gpu session key requires key exposed smartcard 
proxy gpu treat underlying system including os part network connecting server links entities denote logical connections 
third scenario assumes server client os trusted 
images encrypted encryption key recorded smartcard 
encrypted images stored server 
scenario applicable real time applications interested 
view images untrusted system smartcard inserted card reader proxy key manually recorded entered proxy 
proxy gpu public key encrypts secret key sends gpu client 
proxy collocated client capable exchanging information client 
cases secret key works blocks frames data remote keying occur needed provide key data segment 
protocols remote keying new 
refer discussion authentication smartcards 
novel component implementing manner avoids exposing secret key outside gpu 
protocol remote keying requires utilizing asymmetric encryption algorithm encrypt secret key directly gpu public key establish session key encrypt secret key sending gpu 
obstacles arise due lack support gpu apis operations required public key ciphers modular arithmetic large integers mentioned section 
furthermore gpu certificate placed gpu exposing private key operating system 
discuss limitations gpu regards public key cryptography describing prototype 
implementation determine feasibility scheme implemented general scenario entities server proxy client 
stream cipher rc encrypt images opposed block cipher rate encryption required streaming video 
prototype implemented operations possible gpu opengl remaining operations restricted program moved gpu improved api discuss section 
specifically computation keystream efficiently implemented entirely opengl cipher rc 
description prototype notation set secret keys encrypt data 
encrypts subset data 
keys may individually pre determined computed master key pseudo random function prf 
frame refers frame video display update depending application 
rekeying refers obtaining interval rekeying occurs depends number frames displayed elapsed time 
number frames requests rekeying required 
amount time rekeying required 
session key communication server proxy 
gpu public rsa key component 
gpu private rsa key component 
gpu rsa modulus 
illustrates steps remote keying decryption images prototype 
certificate containing rsa key stored gpu memory 
prototype program client uses opengl write certificate gpu deletes operating system memory simulate having certificate gpu 
entering certificate gpu manner requires process monitored ensure program client gains access private key component rsa key written gpu 
certificate includes public parameter containing indication device gpu 
application started client os reads public information gpu certificate sends request proxy 
proxy requires activation entering time password inserting smartcard authenticates gpu information encoded certificate 
client sends connection request server 
server contacts proxy secure session established 
accomplished protocol designed secure session establishment 
single session key may entire session session key changed periodically depending protocol 
prototype proxy authenticates server certificate uses single session key contacting proxy server sends random nonce certificate containing public key rsa 
proxy generates random nonce encrypts server public key sends server 
server proxy concatenate nonces hash result proxy 
server sends encrypted aes key proxy decrypts encrypts gpu public key forwards result mod client 
client issues opengl command turn color mapping writes value received proxy specific pixel location server establish sk sk session request ready images display update request images display updates os writes data server framebuffer os reads public components gpu certificate proxy sk sk enter password start application certificate pubk mod certificate client gpu framebuffer write keystream framebuffer xor data 
keystream generation os writes pubk mod gpu gpu computes mod saves keystream generation 
fig 

remotely keyed decryption gpu protocol shown logical links proxy communicates server client 
gpu 
color map corresponds mod value written results decrypting value proxy obtain write operation performed gpu back buffer avoid visually exposing resulting pixels annoy user unnecessary interference 
explain series byte values resulting pixels key stream cipher 
client signals server ready receive data thin client applications request update display 
server sends encrypted data client 
ideally gpu computes keystream writing resulting bytes directly gpu back buffer 
explained section rc code represent operations performed gpu improvements gpus api 
client issues opengl command turn logical operation xor gpu writes data received back buffer 
result data xored keystream 
buffers swapped unencrypted image appears display 
common practice create image back buffer swap front buffer order create smooth transition frames 
frames time client signal server needs secret key conveyed proxy 
prototype uses images encoded bits pixel bits red green blue components 
alpha component encoded image written back buffer may support alpha component decrypted 
pixel format parameter certain opengl commands draw command writing data gpu easily changed accommodate pixel formats 
design decisions discuss design implementation decisions guided constraints existing gpus 
describe limitations programming gpu perform general keying decryption operations discuss current inability provide data compression 
mentioned section gpus designed perform general arithmetic byte level operations 
api commands common operations addition multiplication shifts rotates 
operations performed sequence commands certain circumstances limiting values single byte reading intermediate results gpu operating system allow result parameter subsequent command 
describe limitations impact ability remotely key gpu decrypt data gpu workarounds create prototype 
conclude enhancements opengl necessary fully realize architecture 
means performing modular multiplication values magnitude typical public key ciphers required securely implement remote keying 
second mechanism contents pixel pixel component parameter opengl command reading pixel value gpu required remote keying keystream generation 
third ability perform modular arithmetic values directly currently done color maps desirable efficiently implement certain ciphers rc gpu 
remote keying lack modular arithmetic limitations range values gpus impacts implementation asymmetric cipher remote keying 
proxy conveys secret keys gpu client os asymmetric key cipher 
existing public key algorithms require exponentiation modular arithmetic operations required emulated gpu existing apis trivially small values values involved viewed series bits values 
example exponents modulus rsa fit bits making entirely unsuitable security application 
remote keying gpu requires gpu able perform decryption function asymmetric algorithm 
note proxy gpu share secret key advance protocol exchange information merely having proxy encrypt information gpu public key establishing session key requires asymmetric cipher 
considered options prototype 
similar done rc operations implemented code represent function gpu 
second restrictions imposed size asymmetric cipher components allow implemented run gpu 
case rsa requires plaintext ciphertext restricted fit single byte requiring modulus exponents fit single byte resulting key components small secure exhaustive search private key data easily performed 
order illustrate concept decryption public key cryptography gpu toy values prototype private exponent public exponent modulus 
series bit values represent data case secret key rc encrypted rsa 
encrypted mini rsa proxy sent gpu 
rc keystream generator single byte values series rc secret key 
third possibility intend explore integration decrypting gpu trusted platform module tpm proposed trusted computing group 
chip handle certificate storage handling remote attestation key 
gpu handle image decryption tpm negotiated session key 
decryption data gpu decrypt images received server gpu client run symmetric key cipher described previously stream cipher 
consider options stream cipher existing stream cipher designing stream cipher suitable gpu 
respect running existing cipher gpu operations typically symmetric key ciphers infeasible due nature number opengl commands required emulate operations due infeasibility convert operations execute gpu limitations api 
common stream ciphers lili rc seal sober snow unsuitable implementation gpu 
chose rc possible implement opengl practical due specific opengl commands required resulting poor performance 
irregularly clocked feedback shift registers lili sober bit words snow seal operations bit rotations seal attractive implementing rc impossible implement opengl 
operations rc consist entirely adding bytes modulo swapping bytes 
operation required rc lacking gpu modular arithmetic 
modulus values represented sin gle bytes stored individual pixel components 
integers range mod computed color map 
requires knowing advance determine color map activate 
integer range create color map entry corresponds mod compute mod stored pixel component color map activated pixel containing copied new location 
result written new location entry color map 
poses problems 
opengl command activate color map issued program running operating system requiring exposed operating system 
expose keystream os provide partial information operating system may helpful determining keystream values 
second copying pixels locations buffer slowest operations gpus 
addition copy needed compute sum copies needed update indices move bytes appropriate pixel components locations 
result implementing rc opengl practical option 
opted implement keystream generator rc represent function eventually moved gpu 
keystream bytes written gpu computed 
requires function computing keystream read secret key gpu 
initially wrote byte output rc directly gpu generated 
number writes required image resulted poor performance 
changed prototype compute keystream bytes entire row pixels writing gpu reducing number writes height image tradeoff segment keystream temporarily stored operating system memory 
due inability efficiently generate keystream gpu existing stream cipher investigating designing stream cipher utilizing graphics operations gpus designed 
briefly describe concept 
mapping texture exhibiting sufficient randomness continuously morphing image changing certain variables viewpoint lighting extracting pixels image keystream generated 
keystream client memory case 
experiment initial version order estimate time compute keystream results shown section 
point creation new stream cipher suitable current gpus feasible fact may wider applicability applications true public key ciphers require devising new way function require exponentiation modular arithmetic numbers larger single byte 
proposed approach protects secrecy images sent untrusted system integrity images protected 
allow attacker change parts image immediately detectable user produce corrupt output screen attacker know session key 
adding message authentication code mac scheme currently feasible computation model modern gpus efficiently support secure mac constructs 
experiments determine feasibility architecture conducted sets experiments measure ability current gpus sustain decryption rates compatible example applications 
opengl api graphics card driver 
vendor specific opengl extensions making prototype gpu independent 
glut open display window 
requirement gpu support bit true color mode routine decrypting secret key requires representing bytes single pixel component 
code client consists opengl glut compiled visual version 
processes server proxy written java version java cryptography extension 
experiments utilized different clients order test different gpus 
environments selected represent fairly current computing environment lap top low gpu 
cases display set bit true color full hardware acceleration 
clients 
pentium iv ghz pc kb ram nvidia geforce ti graphics card mb memory running ms windows xp 
gpu driver uses opengl version 
pentium ghz laptop kb ram ati mobility graphics card mb memory running ms windows xp 
gpu driver uses opengl version 

pentium iii mhz pc kb ram nvidia tnt graphics card mb memory running ms windows 
gpu driver uses opengl version 
simulated streaming video applications sending stream images server client 
tested frame sizes pixels 
frames encrypted stored individual files server prior starting application 
small number unique frames created server repeatedly cycled set 
measure thin client performance average update size pixels pixel area 
average distribution update sizes standard bench web benchmark thin clients 
update sizes bench range areas areas pixels 
tests images encoded bit rgb pixels bits color component 
fig 

entities single system image size types tests run 
set tests determined delay due additional computation needed remote keying decryption compared sending unencrypted images 
tests entities server proxy gpu run pc laptop 
clients tested 
results set tests shown 
fig 

dedicated lan client fig 

shared lan client second set tests involved running entity separate systems lan determine performance data arrival rate impacted network delay 
client nvidia geforce gpu tests 
figures show results experiments 
tests run different lans 
case server proxy dedicated experiment traffic leaving server proxy aside due experiment 
second case ran tests shared servers general purpose computing 
cases element mbps connection lan 
hops client server client proxy hops proxy server 
tests number frames second encrypted unencrypted frames provided 
video conferencing applications number frames supported second important minimum rate fps required obtain tolerable video typical applications fps higher rates required better quality 
contrast rate updates thin client applications dependent user requests sporadic 
frames second reflects maximum burst rate supported 
note intention build robust streaming video application rtp accounted delay rate transmission lost packets focus remote keying decryption gpu determine resulting overhead 
tcp communication entities 
testing streaming images lan necessary client signal server ready frame avoid synchronization problems 
delay decrypting frames rc compared unencrypted images due writing keystream bytes gpu 
keystream written gpu row time 
test run write eliminated operations decryption performed average time unencrypted images 
actual computation keystream frame enabling logical operation xor gpu swapping buffers takes ms frames clients 
testing average thin client display size update pixels times encrypted dates unencrypted updates keystream required writes gpu 
contrast pixel frames required writes frame respectively 
limiting factor processing pixel updates time server create update read update file experiment 
determine rate client process pixel updates creation updates limiting factor array containing pixels stored memory server repeatedly sent client 
server client running system eliminate network delays bandwidth restrictions 
client process updates second platforms indicating decryption overhead gpu limiting factors small updates 
larger updates thin client applications consider increased delay entire display changes issue updates typically infrequent human factors perspective worse loading web pages opening applications 
sending images lan decreased rate pixel frames compared case processes pc due rate images sent server client limited bandwidth 
bandwidth consumed protocols maximum uncompressed rgb frames transmitted second mbps interface 
estimate time required computing keystream designed gpu described section loaded initial image gpu measured time execute opengl operations consideration 
series executions resulting image keystream xored current encrypted frame 
execution frame ms indicating differences time process encrypted frames versus time process unencrypted frames 
time remote keying mainly dependent time enter password insert smartcard proxy may take seconds password entered 
aside time dependent protocol transport delay entities 
public key encryption algorithm generating random nonces encrypting secret key aes added approximately seconds processing environment 
considerations encryption server client prototype focuses securing images sent untrusted client 
briefly mention additional items 
apply directly remote client video broadcast scenarios considering 
concern encryption images server encryption user input client 
third item observation encryption audio applies protecting audio video broadcasts remote conferencing applications 
proposing design new stream cipher suitable executing gpus ensure cipher efficiently implemented server 
respect new cipher suited gpus server write images gpu encryption sending client 
video conferencing applications images encrypted appear monitor speaker encrypted gpu server sends frames clients conference participants 
thin client applications encryption algorithm run gpu server encrypt update writing image gpu reading result server perform encryption operating system 
second complete system include protection user input client sent server 
user responses untrusted client pose interesting problem require preventing input keyboard mouse available untrusted os 
user inputs encrypted reach client os reach server 
potential solution encrypt keyboard inputs inside keyboard keyboard usb controller 
done portable folding keyboard available pda devices connects usb 
mouse may directly connected keyboard device common laptops input may taken keyboard 
option allow user pda keyboard communicate client bluetooth 
pin key cipher encrypting inputs 
pin sufficient length thwart brute force attack 
server may choose pin user displaying securely user scheme user select pin keypad displayed gpu pre establish pin user server 
server selects pin merely sends encrypted image client gpu decrypted user 
pin relatively small unpredictable area image 
attacker malware attempting modify pin best access encrypted image 
user select pin server displays keypad user client gpu 
user select characters keypad clicking entering series squares keypad coordinates selections sent server 
client os see coordinates user selections keyboard mouse inputs encrypted access unencrypted keypad making information useless attacker 
avoid guessing attacks relative locations mouse pointer keypad configuration changed time digit selected 
attacker malware client attempts alter coordinates sent server altered values may correspond valid positions keypad 
possibilities include graphical passwords shoulder surfing resistant pin entry methods intend investigate 
note encrypting decrypting audio digital signal processor dsp easily realized encryption gpu 
programmable dsps exist support typical byte level operations allowing existing ciphers implemented dsp 
allow extend concept include audio 
proxy attacks scheme described far susceptible proxy attack proxy server client assumed communicate untrusted network includes client operating system possible attacker perform man middle attack system gpu valid certificate perform key exchange proxy device 
encrypted data stream displayed attacker system gpu session key proxy transmitted user system displaying 
attack feasible proxy verify gpu communicating resides system user 
attacker extract encrypted image gpu frame buffer relay target system making attack obvious user 
possibility intend investigate packet leashes context communication proxy gpu increase cost gpu smartcard unacceptable levels 
data compression traditionally remote display videoconferencing systems extensive data compression order maximize network utilization allow environments 
encrypted data compressed system provides secure remote access compress data traffic encrypting 
clearly approach imposes limitation architecture order provide data compression client gpu able uncompress data 
data client process expose unencrypted display updates host operating system 
straightforward solution add hardware decompression abilities gpu 
accomplished widely available data decoding chips mpeg hardware decoders dvd ready gpus contain logic 
alternative approach particular thin client scenarios tailor display protocol compression operations available gpu 
thin client systems proposed remote display protocols employ different types commands compression algorithms different kinds display updates 
advantage approach derives characteristics protocol commands provide inherent compression negating need additional specialized compression algorithms 
example command instructs client fill rectangular region particular color consumes little bandwidth compressing potentially large region screen 
execution command clearly operations available existing gpus 
appropriately designing remote display protocol utilize similar operations believe possible improve architecture consume reasonable bandwidth compromising security 
address feasibility decrypting images displays graphics processing unit way combating rising threat 
primary insight suitably modified gpu serve minimal trusted computing base displays certain types widely applications video conferencing remote desktop display access 
main mechanism scheme decryption frames exclusively inside gpu storing key material plaintext system main memory 
technique protect types attacks aimed human interface layer 
explained scheme fully realized due current limitations gpu apis 
identified straightforward enhancements gpu apis overcome limitations 
prototype demonstrated concept feasible thin client applications video broadcast conferencing applications 
due need generate keystream client overhead entirely due writing keystream gpu computed 
designing keystream takes advantage typical graphics operations move keystream generation entirely inside gpu eliminate overhead 
improve performance applications image compression facilities need implemented inside gpu trend occurring 
addition numbers show typical video conferencing frame rates web browsing thin clients lack compression bottleneck performance system 
includes creating stream cipher runs entirely gpu takes advantage graphics operations developing prototypes fully integrate concept thin client applications expanding prototype include encryption dsps 

windows media series digital rights management 
www microsoft com windows drm 

fips data encryption standard des 

fips advanced encryption standard aes 


graphics stanford edu projects index html 


chaining layered integrity checks 
phd thesis university pennsylvania philadelphia 

farber smith 
secure reliable bootstrap architecture 
ieee security privacy conference pages may 

flanagan 
privacy security content protection 
download microsoft com download eda aa secure ppt 

camenisch chen 
direct anonymous attestation 
proceedings acm conference computer communications security ccs pages october 

butler sparks 
convergence 
usenix login december 

carroll 
microsoft business overview 
white microsoft august 

chou mitchell 
client side defense web identity theft 
proceedings isoc symposium network distributed systems security february 

jha 
testing malware detectors 
proceedings international symposium software testing analysis issta july 

clark 
bits smartcard protected operating system 
phd thesis george washington university 

cook ioannidis keromytis luck 
secret key cryptography graphics cards 
rsa conference cryptographer track ct rsa pages february 

coppersmith mars cipher 
www research ibm com security mars html 

davis reiter 
user choice graphical password schemes 
proceedings usenix security symposium pages august 

fernando 
cg tutorial 
addison wesley new york 

gobioff smith tygar yee 
smart cards hostile environments 
nd usenix workshop electronic commerce 


hu perrig johnson 
packet leashes defense wormhole attacks wireless networks 
proceedings ieee infocomm april 

bench version ziff davis www com benchmarks bench 

jr fraser molina 
coprocessor kernel runtime integrity monitor 
proceedings usenix security symposium pages august 

koller levoy cignoni scopigno 
protected interactive graphics remote rendering 
proceedings acm siggraph 

levy 
interface illusions 
ieee security privacy november december 

abadi burrows kaufman lampson 
authentication delegation smart cards 
theoretical aspects computer software 

mcgregor lee 
protecting cryptographic keys computations virtual secure 
proceedings workshop architectural support security anti virus pages october 

yang 
measuring thin client performance slow motion benchmarking 
acm transactions computer systems tocs feb 

opengl organization 
opengl 
www opengl org 

rogaway 
software optimized encryption algorithm 
journal cryptology pages 


digital rights management drm architectures 
lib magazine june 

rivest sidney yin 
rc block cipher 
www rsa security 
com rc 

rose 
stream cipher linear feedback gf 
information security privacy lncs page ff 

roth richter 
pin entry method resilient shoulder surfing 
proceedings acm conference computer communications security ccs pages october 

rsa laboratories 
pkcs rsa encryption standard version edition 
november 

zhang van doorn 
attestation policy enforcement remote access 
proceedings acm conference computer communications security ccs pages october 

zhang jaeger van doorn 
design implementation tcg integrity measurement architecture 
proceedings usenix security symposium pages august 

saroiu gribble levy 
measurement analysis university environment 
proceedings acm usenix symposium networked systems design implementation nsdi march 

schmidt lam 
interactive performance slim stateless thin client architecture 
proceedings th acm symposium operating systems principles sosp pages kiawah island resort sc december 

schneier 
applied cryptography nd edition 
john wiley sons new york 

shi perrig van doorn 
bind fine grained attestation service secure distributed systems 
proceedings ieee security privacy pages may 

simpson dawson millar 
lili keystream generator 
selected areas cryptology lncs page ff 

smith 
magic boxes boots security hardware 
ieee computer october 

snow 
www lth se cryptology snow 

texas instruments 
tms dsp cpu guide 

thorpe van oorschot 
graphical dictionaries memorable space graphical passwords 
proceedings usenix security symposium pages august 

trusted computing group 
trusted computing group architecture overview 
https www org home 

tygar yee 
dyad system physically secure coprocessors 
technical report cmu cs carnegie mellon university may 

walsh kuhn 
challenges securing voice ip 
ieee security privacy magazine may june 

woo davis 
opengl programming guide rd edition 
addison wesley reading ma 

ye smith anthony 
trusted paths browsers 
acm transactions information system security may 

yee 
secure coprocessors 
phd thesis carnegie mellon university 
appendix opengl pixel pipeline shows components opengl pipeline relevant pixel processing pixels treated floating point values 
gpu implementations required adhere pipeline serves general guideline pixels processed 
system memory unpack pack convert pixel storage modes convert luminance required convert luminance scale bias pixel transfer operations map color map depth clamp texture memory rasterization fig 

opengl pixel processing pipeline fragment operations convert legend framebuffer system framebuffer framebuffer system 
