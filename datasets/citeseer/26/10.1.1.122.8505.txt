ieee transactions large scale integration vlsi systems vol 
june survey design techniques system level dynamic power management luca benini member ieee alessandro member ieee giovanni de micheli fellow ieee dynamic power management dpm design methodology dynamically reconfiguring systems provide requested services performance levels minimum number active components minimum load components 
dpm encompasses set techniques achieves energy efficient computation selectively turning reducing performance system components idle partially 
survey approaches system level dynamic power management 
describe systems employ power manageable components dynamic reconfiguration impact power consumption 
analyze dpm implementation issues electronic systems survey initiatives standardizing hardware software interface enable software controlled power management hardware components 
index terms energy conservation energy management optimization methods 
electronic circuits system designs confronted problem delivering high performance limited consumption electric power 
high performance required increasingly complex applications multimedia running portable devices 
low power consumption required achieve acceptable autonomy battery powered systems reduce environmental impact heat dissipation cooling induced noise operation cost stationary systems 
words achieving highly energy efficient computation major challenge electronic design 
electronic systems viewed collections components may heterogeneous nature 
components may mechanical parts hard disk drives hdd optical parts displays 
example cellular telephone digital large scale integration vlsi component analog radio frequency rf component display 
components may active different times correspondingly consume different fractions telephone power budget 
similarly main components portable manuscript received february revised september 
supported part nsf contract ccr marco darpa silicon research center 
benini dip 
di elettronica informatica sistemistica universit di bologna bologna italy 
department engineering universit di ferrara ferrara italy 
de micheli computer systems laboratory stanford university stanford ca usa 
publisher item identifier 
ieee computers vlsi chips hdd display 
case hdd display power hungry components effective key achieving long operating times battery 
competitive electronic design able deliver peak performance requested 
peak performance required time intervals 
similarly system components required active state 
ability enable disable components tuning performance workload user requests key achieving energy efficient designs 
dynamic power management dpm design methodology dynamically reconfigures electronic system provide requested services performance levels minimum number active components minimum load components 
dpm encompasses set techniques achieve energy efficient computation selectively turning reducing performance system components idle partially 
dpm various forms portable stationary electronic designs application primitive full potentials unexplored complexity interfacing heterogeneous components limited designers simple solutions 
fundamental premise applicability dpm systems components experience nonuniform workloads operation time 
assumption valid systems considered isolation 
second assumption dpm possible predict certain degree confidence fluctuations workload 
workload observation prediction consume significant energy 
dynamic power managers different embodiments level component system network dpm applied physical realization style timer hard wired controller software routine 
typically power manager pm implements control procedure observations assumptions workload 
control procedure called policy 
example simple policy ubiquitously laptops timeout policy shuts component fixed inactivity time assumption highly component remains idle idle timeout time 
shall show simple minded policy may turn inefficient improved 
objective cover relate different approaches system level dpm 
describing systems employ power manageable components ieee transactions large scale integration vlsi systems vol 
june dynamic reconfiguration impact power consumption 
review compare different approaches dpm 
mathematical framework highlight benefits pitfalls different power management policies 
classify power management approaches major classes policies predictive schemes stochastic optimum control respectively 
class survey approaches applied system design described literature 
means implementing dpm electronic systems describe particular initiatives standardizing hardware software interface enable software controlled power management hardware components 
ii 
modeling power managed systems model power managed system set interacting power manageable components pmc controlled power manager pm 
model pmc black boxes 
concerned pmc designed topic deferred section iv focus interact environment 
purpose analysis understand type information exchanged power manager system components order implement effective policies 
take bottom view 
consider pmc isolation 
describe dpm systems interacting components 
analyze problem managing power network communicating systems 
power manageable components working definition component general 
component atomic block complete system 
notice granularity definition arbitrary components simple functional unit chip complex board 
characterizing property definition atomicity 
system level component seen indivisible functional block detailed knowledge internal structure assumed 
fundamental characteristic pmc availability multiple modes operation span power performance tradeoff 
components designed performance target power budget 
contrast pmc possible dynamically switch high performance high power modes operation low power low performance ones 
possible think pmc may continuous range operation modes number modes large 
intuitively availability operation modes gives fine control operate pmc way power waste minimized performance perfectly calibrated task 
practice number modes operation tends quite small increased design complexity hardware overhead supporting power management tightly controlled 
implementation techniques pmc surveyed section iv 
just stress fact increased flexibility offered pmc may cost taken account 
fig 

power state machine strongarm sa processor 
important characteristic real life pmc transitions modes operation cost 
cases cost terms delay performance loss 
transition instantaneous component operational transition performance lost transition initiated 
transition cost depends pmc implementation cases see section iv cost may negligible generally 
transition power cost case transitions instantaneous 
important neglect transition costs designing pmc excessive costs may low power operation states useless hard amortize cost transitioning 
practical instances model pmc finitestate representation called power state machine psm 
states various modes operation span tradeoff performance power 
state transitions power delay cost 
general low power states lower performance larger transition latency states higher power 
simple model holds single chip components processors memories devices disk drives wireless network interfaces displays heterogeneous complex single chip 
example strongarm sa processor example pmc 
modes operation run idle 
run mode normal operating mode sa chip resource functional 
chip enters run mode successful power reset 
idle mode allows software application cpu continuing monitor interrupt requests chip 
idle mode cpu brought back run mode quickly interrupt occurs 
sleep mode offers greatest power savings consequently lowest level available functionality 
transition sa performs orderly shutdown chip activity 
transition sleep state chip steps complex wake sequence resume normal activity 
psm model strongarm sa shown fig 

states marked power dissipation performance values edges marked transition times 
power consumed transitions approximatively equal mode 
notice null performance time exiting sleep longer versus ms 
benini survey design techniques dynamic power management hand power consumed chip sleep mode mw smaller mw 
power manageable components managed internally externally physical location implementation corresponding policy 
internally managed components called self managed components conservative policies lack observability system operation need tolerating little performance degradation assumptions demanding component environment 
examples components partially completely self managed 
example ibm hard disk drives low power inactive states idle active idle low power idle 
disk idle drives employ proprietary internal management technology called enhanced adaptive battery life extender selecting appropriate idle mode minimize power usage 
idle mode selection current disk drive access patterns ibm claims automatic adaptation helps improving access times 
disk need external power manager configuration set needed 
drives additional low power states stand 
times required entering exiting states longer needed transitioning 
decisions transitions stand sleep left external control 
power managed systems viewpoint system set interacting components externally controllable pmc notice generic definition pose limitation size complexity system 
activity components coordinated system controller 
complex systems control implemented software 
instance computer systems global coordination performed operating system os 
system controller precise date control status system components power manager naturally implemented module system controller 
power manageable system provide clean abstraction components power manager 
standardization interface pm system important feature decreasing design time 
choice realization dpm scheme requires modeling components power performance behavior workload 
model captured power state machine model 
hand models workload may vary complexity range simple assumption timeout schemes complex statistical models 
shall see section iii workload information required advanced power management approaches 
postulate existence system monitoring module capable collecting run time workload data extracting relevant information required drive pm 
structure generic system level pm shown fig 

fig 

structure system level power manager 
fig 

paperclip hardware diagram 
observer block collects workload information pmc system controller takes care issuing commands forcing state transitions 
components power managed system pmc power consumption components baseline power consumption reduced power management 
self managed components appear pm 
functionality pm clearly defined implementation constrained way 
systems pm hardware block software routine 
hybrid hardware software implementations possible 
pm implementation issues analyzed section iv 
example paperclip hand held electronic clipboard developed hp laboratories example system 
high level hardware organization paperclip shown fig 

major components cpu memory lcd digitizer put low power sleep state 
components real time clock fpga control logic active 
paperclip inputs come control buttons situated clipboard digitizer pen 
paperclip operate digitizer data transfer unit 
digitize paperclip stores digitized handwriting flash memory user writes sheet clipboard 
data transfer digitized handwriting transferred host pc serial ir interface 
ieee transactions large scale integration vlsi systems vol 
june power management paperclip hybrid hardware software implementation 
core pm functionality implemented firmware running cpu 
paperclip workload widely varying time 
user writing clipboard system idle 
paperclip turned soon writing stops resuming normal operation sleep period requires milliseconds 
pm puts system sleep greedily significant amount data lost writing resumes quality handwriting digitization may compromised 
power state transitions non cpu components forced pm module running cpu writing memory mapped locations 
pm commands decoded control circuitry implemented fpga distributed components 
cpu shutdown software 
wake interrupt driven interrupts generated pressing control buttons pressing pen clipboard 
notice sleep power reduced zero system components power manageable 
power managed networks cases systems isolated actively communicate 
call network set communicating systems 
network design traditionally focused communication quality throughput increased emphasis low power portable systems communication capabilities spurred research initiatives targeting power efficient networking 
energy conscious communication protocols power management extensively studied 
main purpose protocols regulate access communication devices shared medium trying obtain maximum power efficiency throughput requirement 
interference issue point point communication power efficient increasing predictability communication patterns possible accurately predict arrival time messages packets idle times exploited force communication devices low power inactive state 
main challenge network power management generally realistic assume power control centralized 
rely distributed algorithms take autonomous decisions system network local information incomplete global network status data 
network power management interesting relevant topic focus system level centralized power management 
iii 
dynamic power management techniques section analyze techniques controlling power state system components 
consider components black boxes behavior abstracted psm model 
defer section iv description interfacing layers component control implementation technical details 
focus design effective power management policies 
sake fig 

psm state power manageable component 
simplicity shall focus problem controlling single component equivalently system 
want clarify search dpm policy simple problem solve 
reason give example trivial problem 
consider system transitions power states instantaneous negligible power performance costs paid performing state transitions 
system dpm trivial task optimum policy greedy soon system idle transitioned deepest sleep state available 
arrival request system instantaneously activated 
unfortunately pmc nonnegligible performance power costs power state transitions 
instance entering low power state requires power supply shutdown returning state active state requires possibly long time turning stabilizing power supply clock system restoring context 
power state transitions cost typically case faced difficult optimization problem 
rough intuitive words need decide worthwhile performance power wise transition low power state state chosen multiple low power states available 
example consider strongarm sa processor described example 
transition times run idle states fast idle state optimally exploited greedy policy possibly implemented embedded pm 
hand wake time sleep state larger carefully compared environment time constants deciding shut processor 
limiting case workload idle periods longer time required enter exit state greedy policy shutting processor soon idle period detected reduce performance saving power power consumption associated state transitions order state 
external pm controlling transitions sa processor state observe workload take decisions policy optimality depends workload statistics predefined performance constraints 
notice policy trivial performance constraints pm keep processor state 
sa processor embedded control state external control sleep state partially self managed pmc psm model shown fig 
states 
state macrostate representing states processor greedy policy autonomously controlling transitions 
power consumption associated state benini survey design techniques dynamic power management sum power consumptions states weighted workload activity idleness probabilities 
state corresponds actual sleep state 
transitions represent transitions run states 
example leads observations 
policy optimization power optimization problem performance constraints vice versa 
second achievable power savings depend workload bursty degree system characteristics psm system 
general applicability dpm discussed section property system workload pair 
existing techniques dpm policy optimization surveyed discussed sections iii focusing predictive techniques stochastic control respectively 
applicability dpm putting pmc inactive state causes period inactivity duration sum actual time spent target state time spent enter exit 
define break time inactive state denoted minimum inactivity time required compensate cost entering state break time inferred directly power state machine pmc 
time enter exit inactive state power saved inactive state amortize additional power consumption typically required turn component 
intuitively dpm aims exploiting idleness transition component inactive low power state 
performance loss tolerated length idle periods workload upper bound inactivity time resource 
hand performance loss tolerated inactivity times may longer idle periods 
section analyze inactive states pmc possibility saving power transitioning component inactive states 
depends power states workload performance constraints dpm policy pm implementation 
techniques policy optimization implementation discussed impact performance constraints 
focus inherent represents possibility exploiting inactive state assumption performance penalty tolerated ideal pm available complete priori knowledge entire workload trace 
inherent property system workload pair 
example consider state psm component shown fig 

sake clarity inactive state shorthand notation optimum policy ideal pm controlling transitions consists shutting component idle periods longer waking right time serve upcoming requests delay 
resulting power consumption denoted lower bound power consumption achieved pm exploiting inactive state 
potential power saving defined gap power consumption system active state represents inherent state workload 
larger larger potential advantage exploiting dpm 
power savings achieved entering inactive state impairing performance 
needless say inactive state exploited practice arbitrary performance degradation tolerated 
interested studying dependence power state parameters workload statistics 
parameters power state represented break time workload statistics represented probability distribution idle periods intuitively larger respect average idle time smaller limiting situation idle periods shorter power savings achieved means dpm ideal pm implementing optimum policy shut resource providing general sum terms total transition time time required enter exit inactive state minimum time spent low power state compensate additional transition power 
example pmc fig 
computed expressed practice grows linearly transition time cost depends power saved inactive state reduces instance case arm sa processor greater components mechanical inertia hard disk drives 
case need add term represents additional time need spend state compensate excess power consumed state transition 
systems multiple inactive states different break time consequently different value defined state deeper sleep states lower power consumption cost longer expensive transitions 
designing power manageable components tradeoff sleep state obtain small values high 
sleep states smaller break times successfully exploited dpm 
ieee transactions large scale integration vlsi systems vol 
june fig 

plot state strongarm sa processor 
curves refer different workload statistics computed real world cpu traces provided ipm monitoring package 
comparison inactive states sa processor 
curves refer workload 
energy saved entering state idle period average value probability density idle periods 
symbols ratio average length idle periods 
replacing expression dividing obtain formula integrated rewritten product terms power saving state expected idle time excess normalized average idle period probability going state assuming perform transition convenient probability distribution average length idle periods longer power saved decreasing function takes maximum value asymptotically tends zero increasing values way goes zero depends order statistics workload distribution example want evaluate inactive states strongarm sa processor 
start computing break times 
power consumption associated state transitions equal ms ms ms ms intuitively observed section idle state break time smaller sleep state 
workloads evaluate take real world cpu usage traces provided ipm monitoring system described section iv 
trace compute probability distribution function evaluate different values behavior function break time shown fig 
different cpu workloads corresponding different user sessions editing software development graphical interactive games 
dependence workload evident graphical interactive games require cpu usage text editors reducing opportunity putting cpu state 
notice break time sleep state null mw independently workload 
corresponding actual value smaller strongly dependent workload 
fig 
compares curves inactive states workload editing trace 
state lower power consumption idle state states break time deepest exploitable 
account actual break times find inherent state greater state points compared shown square boxes graph 
mentioned section formally expressed inactive state depends characteristics inactive state workload 
typical workload information available designing pmc low power states computed 
represent properties inactive state independently workload time power product benini survey design techniques dynamic power management fig 

quality timeout predictor evaluated function timer duration 
safety efficiency timeout predict idle periods longer 
saved wasted power consumption 
data refer psm example cpu usage trace provided ipm monitoring package 
inactive states lower lead larger power savings 
incidentally dimension known power delay product cost metric comparing different electronic devices circuits 
predictive techniques real world systems little knowledge input events dpm decisions taken uncertain predictions 
rationale predictive techniques exploiting correlation past history workload near order reliable predictions events 
denote event want predict 
denote past event occurrence predictions purpose dpm interested predicting idle periods long go sleep symbols predictors minimize number mispredictions 
call predicted idle period longer shorter actual 
give rise performance penalty imply power waste performance penalty 
represent quality predictor define figures safety complement risk making efficiency complement risk making 
safety efficiency expressed terms conditional probabilities totally safe predictor totally efficient predictor 
predictor maximum safety efficiency ideal predictor availability enable actual implementation ideal pm discussed previous section 
predictors practical interest safe efficient causing control 
quality quality resulting control depends choice observed event second order workload statistics 
static techniques fixed timeout common predictive pm policy fixed timeout uses elapsed idle time observed event predict total duration current idle period 
policy summarized follows idle period begins timer started duration system idle pm forces transition state 
system remains receives request environment signals idle period 
fundamental assumption fixed timeout policy probability longer close critical design decision obviously choice timeout value timeouts main advantages general applicability slightly depends workload safety improved simply increasing timeout values 
unfortunately tradeoff efficiency safety large timeouts cause large number represent missed opportunity saving power sizeable amount power wasted waiting timeout expire 
example consider cpu usage traces described example game trace typical workload strongarm sa processor 
want evaluate quality timeout shutdown policy processor 
break time state ms evaluate safety efficiency timeout predict idle periods longer ms figures plotted fig 
function timer duration 
timeout increases predictions safer efficient efficiency null timeouts greater 
worth noting safety highly nonsmooth instance dependent behavior difficult choose optimal timeout values irregular curve fig 
refers trace smooth refers average traces collected equivalent user sessions 
fig 
shows power savings obtained applying timeout policy sa wasted power evaluated respect ideal power savings 
effect actual power savings similar effect ideal ones 
parameters reduce portion idle time effectively exploited save power 
ieee transactions large scale integration vlsi systems vol 
june fig 

scatter plot versus workload cpu personal computer running linux 
safety efficiency predictive shutdown scheme plotted function threshold value karlin proposed showed choice leads energy consumption worse twice energy consumed ideal policy 
rationale strong result related fact worst case happens traces repeated idle periods length separated pointwise activity 
case karlin algorithm provides power saving ideal algorithm saves power half idle interval 
ideal algorithm performs shutdown idle period half period spent state transition 
timeout schemes limitations waste sizeable amount power user idleness waiting timeout expire pay performance penalty wakeup 
issue addressed predictive shutdown policies take pm decisions soon new idle period starts observation past idle busy periods 
second issue addressed predictive wakeup described 
predictive shutdown predictive shutdown schemes proposed srivastava 
scheme nonlinear regression equation obtained past history predictions 
superscripts indicate sequence past idle active periods indicates current idle period length predicted active period 
system immediately shut soon idle 
notation observed event format nonlinear regression decided heuristically fitting coefficients computed standard techniques 
main limitations approach automatic way decide type regression equation offline data collection analysis required construct fit regression model 
second approach proposed srivastava threshold 
duration busy period immediately preceding current idle period observed 
idle period assumed larger system shut 
rationale policy class systems considered srivastava interactive graphic terminals short active periods followed long idle periods 
clearly choice critical 
careful analysis scatter plot versus required set correct value method inherently offline extensive data collection analysis 
furthermore method applicable scatter plot shaped 
example fig 
shows scatter plot versus development trace example 
plot observe time discretized multiple ms duration time slots assigned linux scheduler active process large majority idle periods shorter ms due presence system daemon required cpu second independently state user application scatter plot shaped enabling threshold predictors 
horizontal line shows break time sleep state strongarm sa processor 
safety efficiency threshold predictor shut sa plotted fig 
function interestingly efficiency small threshold values fact exploitable idle periods preceded short active periods way improving safety 
example threshold predictions unsafe due presence dense region bottom left corner scatter plot 
threshold help distinguishing idle periods longer shorter applicability quality history predictors depend correlation past events designer control 
matter fact short term correlation observed real world workloads nature strength correlation strongly instance dependent 
workload history predictors usually efficient safe timeouts 
predictive wakeup dpm strategy proposed hwang addresses second limitation timeout policies performance penalty paid wakeup 
benini survey design techniques dynamic power management fig 

effect workload quality timeout power manager 
safety efficiency 
saved wasted power 
reduce cost power manager performs predictive wakeup predicted idle time expires new requests arrived 
choice may increase power dissipation decreases delay servicing incoming request idle period 
adaptive techniques optimality dpm strategies depends workload statistics static predictive techniques ineffective suboptimal workload unknown priori nonstationary 
form adaptation required 
timeouts parameter adjusted timer duration history predictors type observed events principle adapted workload 
example fig 
shows graphs fig 
plotted different workloads 
parameters example represent quality timeout estimator shown strongly dependent workload 
suppose instance target power saving mw guaranteed regardless performance degradation 
workload editing trace timeout value meet constraint obtained corresponding curve fig 
ms workload changes instance similar development trace fixed timeout guarantee required power savings longer development trace power savings provided timeout ms mw 
adaptive predictive techniques proposed deal nonstationary workloads 
krishnan set timeout values maintained timeout associated index indicating successful 
policy chooses idle time timeout performed best set available ones 
policy helmbold keeps list candidate timeouts assigns weight timeout performed relatively optimum offline strategy past requests 
actual timeout obtained weighted average candidates weights 
approach introduced douglis keep timeout value increase causing 
timeout decreased tolerated 
predictive policies surveyed classified douglis 
aggressive shutdown policy proposed hwang 
policy capable online adaptation predicted idle time obtained weighted sum idle period prediction recursive formula dynamically changes actual observed event impact mitigated employing timeout scheme reevaluate periodically system idle shut 
impact reduced imposing saturation condition predictions workload prediction accuracy increased specializing predictors particular classes workload 
specialization restricts scope applicability reduces difficulties predicting completely general workloads 
proposed adaptive technique specifically tailored hard disk power management observation disk accesses clustered sessions 
sessions periods relatively high disk activity separated long periods inactivity 
assumption disk accesses clustered sessions adaptation predict session length 
prediction single parameter easily accomplished reported accuracy high 
stochastic control policy optimization optimization problem uncertainty 
predictive approaches address workload uncertainty assume deterministic response transition times system 
system model policy optimization abstraction introduces uncertainty 
may safer general assume stochastic model system 
predictive algorithms state system model real life systems multiple power states 
policy optimization involves choice perform state transitions choice transition performed 
furthermore predictive algorithms heuristic optimality gauged ieee transactions large scale integration vlsi systems vol 
june fig 

markov model power managed system environment 
comparative simulation 
parameter tuning algorithms hard parameters involved 
predictive algorithms geared power minimization finely control performance penalty 
stochastic control approach addresses generality optimality issues outlined 
trying eliminate uncertainty prediction formulates policy optimization optimization problem uncertainty 
specifically power management optimization studied framework controlled markov processes 
flavor stochastic optimization assumed system workload modeled markov chains 
assumption possible model uncertainty system power consumption response transition times model complex systems power states buffers queues compute power management policies globally optimum explore tradeoffs power performance controlled fashion 
markov model postulated stochastic control approach consists 
requester sr markov chain state set models arrival service requests system workload 
provider sp controlled markov chain states models system 
states represent modes operation system power states transitions probabilistic probabilities controlled commands issued power manager 
manager pm implements function state set sr sp set possible commands function representation decision process pm observes state system workload takes decision issues command control state system 
cost metrics associate power performance values system state command pair general markov model specialized assuming finite state set finite command set discrete slotted time 
continuous time markov models studied 
example simple markov model power managed system shown fig 

sr state markov chain states zero request issued service provider request issued provider 
transition probabilities states represented edge weights fig 

chain models bursty workload 
high probability receiving request period request received period mean duration stream requests equal periods 
sp model states state transitions controlled commands issued power manager 
commands respectively intuitive meaning switch switch command issued sp move new state period probability dependent command departure arrival states 
markov chain model sp shown fig 

edge weights represent transition probabilities 
notice values depend command issued power manager 
power management policy represented table associates command pair states sp sr instance simple deterministic policy static techniques perform policy optimization markov chains sr sp composed obtain global controlled markov chain 
problem finding minimum power policy meets performance constraints cast linear program lp 
solution lp produces stationary randomized policy 
policy nondeterministic function system state associates probability command 
command issued selected random trial state dependent probabilities 
shown policy computed lp globally optimum 
furthermore lp solved polynomial time number variables 
policy optimization markov processes exact computationally efficient 
stochastic control markov models advantages predictive techniques 
captures global view system allowing designer search global optimum possibly exploits multiple inactive states multiple interacting resources 
second enables exact solution polynomial time performance constrained power optimization problem 
third exploits strength optimality randomized policies 
important points need understood 
performance power obtained policy expected values guarantee results optimum specific workload instance single realization corresponding stochastic process 
second policy optimization requires markov model sp sr safely assume sp model assume know sr model 
third policy implementation practice may straightforward 
implicitly assumed power consumption pm negligible assumption needs validated case case basis 
markov model sr sp just approximation complex stochastic process 
model accurate optimal policies just approximate solutions 
example apply stochastic control example system state psm sa processor 
decision taken pm shut component 
stress typical application stochastic control main strength capability managing multiple states finding global optimum benini survey design techniques dynamic power management fig 

power performance tradeoff curves sa realization stationary markovian workload highly non markovian nonstationary workload 
solid dashed lines refer stochastic control timeout shutdown policies respectively 
large design space sleep state pm control wake 
simple example allows fair comparison stochastic control predictive techniques timeouts 
optimal markov policy computed formulating markov chain model workload composing controlled markov model extracted psm sa solving lp problem associated controlled markov model processor workload performance constraints 
comparative results static markovian workload shown fig 
solid line performance versus power pareto curve optimum stochastic control obtained varying performance constraint dashed line tradeoff curve timeout policy obtained varying timer duration 
optimum stochastic control performs better timeout heuristic degrees freedom available optimization exactly 
difference power proportional timeout time represents wasted opportunity saving power 
comparison repeated fig 
highly nonstationary non markovian workload 
timer values timeout shutdown outperforms stochastic control 
fact policy optimization guaranteed provide optimum results modeling assumptions verified 
class application stochastic control computer systems subject performance constraints 
policy optimization tool design exploration stochastic control target dpm technique 
fact markov models constructed system workload pareto curve optimum tradeoff points drawn power performance plane repeatedly solving policy optimization varying performance constraints 
pareto curve provides valuable information evaluate improve quality power management strategy 
adaptive techniques limitation stochastic optimization technique described previous section assumes complete priori knowledge system sp workload sr 
generally possible construct model sp system workload generally harder characterize advance 
furthermore workloads nonstationary 
adaptive extension static stochastic optimization approach chung 
adaptation simple concepts policy parameter learning policy interpolation 
simple parameter markov model workload assumed value parameters initially unknown 
policy constructs dimensional table addressed values parameters 
table element uniquely identified pair parameters contains optimal policy system workload uniquely identified pair 
table filled computing optimum policies different workloads 
system operation parameter learning performed online 
short term averaging techniques employed obtain run time estimates workload parameters past history 
parameter values estimated learning addressing lookup table obtain power management policy 
clearly cases estimated parameter values correspond exactly values sampled table 
case policy interpolation employed obtain policy combination policies table locations corresponding parameter values close estimated ones 
experimental results reported chung indicate adaptive techniques advantageous stochastic optimization framework 
simulations power managed systems highly nonstationary workloads show adaptive technique performs nearly ideal policy computed offline assuming perfect knowledge workload parameters time 
iv 
implementation dynamic power management section address different dpm schemes implemented circuits systems 
time describe infrastructure enable implementation complex power management policies electronic systems 
section organized follows 
describe physical mechanisms power management digital types components 
review dpm implemented ieee transactions large scale integration vlsi systems vol 
june hardware circuits include power manageable components 
address system level design describe power management implemented hardware software systems particular operating system power management 
conclude presenting experimental results software managed personal computers 
power management system components working definition system component provided section ii 
complexity component may vary irrelevant discussion 
section ii components considered black boxes 
concerned internal structure outline techniques exploited design power manageable components pmc 
clock gating consider digital components clocked 
class components wide includes processors controllers memories 
power consumption clocked digital components cmos technology roughly proportional clock frequency square supply voltage 
power saved reducing clock frequency limit stopping clock reducing supply voltage limit powering component 
note limiting cases clock freezing powering applicable idle components 
components active state response performance critical power consumption traded performance reducing clock frequency supply voltage 
solution usually preferred quadratic dependence power consumption supply voltage combined frequency 
considering possibly idle digital components clock gating freezing common technique power management 
clock idle component stopped period idleness 
power savings achieved registers clock halted combinational logic gates signals propagate due freezing data registers 
example clock gating implemented processors 
alpha microprocessor uses hierarchical clocking scheme gated clocks 
particular floating point unit controller freeze clock components adder multiplier divider instructions executed idle components waste power 
powerpc processor local global clock control 
highlight feature global clock control 
processor sleep state clock units may disabled 
hand pll necessarily disabled state system controller choose different levels power savings depending wake response time requirements 
example quick wake required processor wake sleep system clock cycles pll active 
hand maximum power savings pll shut state 
case wake time long allow pll external clock 
clock gating small performance overhead clock restarted simply clock freezing signal 
clock gating ideally suited implementing self managed components 
case clock stopped soon custom designed idleness detection logic signals component subunits idle 
cad tools developed support design local clock signal gating 
tools aim generating automatically circuit detects idleness issues signal freeze clock 
tools implement various methods realizing clock gating differ type unit controlled sequential controller data path pipelined circuit type idleness monitored state output pair sequential circuit external observability signals 
clock gating widely conceptually simple small overhead terms additional circuits zero performance overhead component transition idle active state cycles 
main design challenges implementation clock gating construct idleness detecting circuit small consuming little power accurate able clock component idle design gated clock distribution circuitry introduces minimum routing overhead keeps clock skew tight control 
cases seen previous example power dissipation reduced stopping clock distribution clock generation stopping master clock pll internal oscillator 
choice implies nonnegligible shutdown restart delays generally automated 
sleep states global clock generation stopped entered issuing external commands 
processors shutdown initiated dedicated instruction asserting dedicated signal 
supply shutdown important stress clock gating eliminate power dissipation 
clock gating local clock generator active dynamic power dissipation active clock circuitry 
second leakage currents dissipate power clocks halted 
result objective achieving minimum power dissipation required battery powered hand held devices may achieved clock gating 
power consumption idle components avoided powering unit 
radical solution requires controllable switches component supply line 
advantage approach wide applicability kind electronic components digital analog units sensors transducers 
major disadvantage wake time recovery time typically higher case clock gating component operation reinitialized 
thinking circuit processor controller component typically structured hierarchical compositions subcomponents 
power shutdown applied selected number subcomponents 
case complex circuits usually portion circuit powered run set minimal monitoring control functions wake powered components needed 
benini survey design techniques dynamic power management example strongarm sa chip power supplies internal power supply interface voltage supply 
powers cpu core majority functional units chip dma controller mmu lcd controller 
powers input output drivers internal khz crystal oscillator system control unit critical circuits 
sleep state sa example power supply shutdown 
power reduced mw opposed mw run state switching supply 
shutdown sequence entering sleep state goes phases flush memory state information preserved sleep period reset internal processor state program wakeup events shutdown internal clock generator 
phase takes approximatively sleep sa watches preprogrammed wake events 
processor wake goes phases ramp processor clock startup wait time stabilizing processor clock cpu boot sequence 
phases take respectively ms third phase negligible duration compared 
sleep state entered rising dedicated pin fault software procedure writes power manager control cpu 
power applicable electromechanical system components displays hdd systems mechanical moving parts hdd time constants involved accelerating moving parts usually larger involved powering electronic components 
furthermore acceleration deceleration tend decrease expected lifetime component 
lifetime reduction seen cost associated state transitions 
example consider ibm gs disk drive mentioned example 
component highlight main subunits spindle motor head positioning subsystem host interface 
ibm hdd power states spin state initialize drive power operational states seek write read inactive states performance idle standby 
different physical mechanisms reduce power inactive states 
state electronic components powered active idle state circuitry power saving mode idle head unloaded 
spindle motor rotating idle states motor standby sleep states 
standby state host interface active turned 
power consumption active states average decreases inactive states values respectively 
restarting hdd requires peak power due acceleration disks 
note lower power consumption longer corresponding wake time dpm strategies need take advantage low power states minimizing impact performance 
multiple variable power supplies dpm applicable components idle performance delays requirements varies time 
implementation technology slowdown noncritical components 
slowdown achieved lowering voltage supply component performance critical 
early implementations chips static power directed partitioning subunits powered different supply voltage 
voltage levels level employed border subunits running different supplies 
extension approach realm dpm enable dynamic adjustment power supply voltage system operation 
main challenges implementing extension guarantee clock frequency tracks speed changes caused dynamic voltage supply adjustments 
pioneering nielsen self timed circuits employed conjunction variable supply voltage 
self timed circuits synchronize local handshake signals need adjustable clocks 
unfortunately self timed circuits mainstream technology 
alternative approaches employ standard synchronous logic coupled adjustable clocks adapt frequency speed critical path different supply voltages 
issue systems dynamically variable supply voltage require high efficiency dc dc converters programmed wide range output voltages 
adjustable dc dc converters described literature 
variable supply voltage approach complemented dynamic threshold voltage adjustment achieved controlling body back bias 
dynamically varying supply voltages may quantized restricted finite number values may take values continuous range 
case possible identify finite number power states system concept finite state applicable 
state transition take finite time dc dc converters support arbitrarily fast changes supply voltage 
system level power management implementation consider dpm system level corresponding implementation issues 
note dpm schemes system level coexist local power management components 
considering electronic systems implemented hardware power manager specialized control unit acts parallel coordination system control unit 
words power manager may hardwired controller possibly merged system controller 
policies timeouts easily implemented timers 
stochastic policies implemented lookup tables stationary sequential circuits 
randomized policies require pseudorandom number generators implemented linear feedback shift registers 
typical electronic systems software programmable majority operating system ranging simple ieee transactions large scale integration vlsi systems vol 
june run time scheduler real time operating system rtos embedded applications full fledged operating system case personal computers workstations 
reasons migrating power manager software 
software power managers easy write reconfigure 
cases designer want interfere modify underlying hardware platform 
dpm implementations novel art experimentation software easier hardware 
general operating system software layer dpm policy implemented best 
os power management advantage power performance dynamic control performed software layer os manages computational storage tasks system 
implementing hardware software codesign problem hardware resources need interfaced os software power manager hardware resources software application programs need designed cooperate 
initiatives handle system level power management include microsoft initiative advanced configuration power interface acpi standard proposed intel microsoft toshiba 
supports implementation targets design personal computers improved usability innovative os design 
simplifies codesign providing interface standard control system resources 
hand aforementioned standards provide procedures optimal control power managed system 
industrial design standards industrial standards proposed facilitate development operating system power management 
intel microsoft toshiba proposed open standard called advanced configuration power interface acpi 
acpi provides os independent power management configuration standard 
provides orderly transition legacy hardware acpi compliant hardware 
initiative targets personal computers pc contains useful guidelines general class systems 
main goals acpi enable pc implement motherboard dynamic configuration power management enhance power management features robustness power managed systems accelerate implementation power managed computers reduce costs time market 
acpi specification defines interfaces os software hardware 
software hardware components relevant acpi shown fig 

applications interact os kernel application programming interfaces api 
module os implements power management policies 
power management module interacts hardware kernel services system calls 
kernel interacts hardware device drivers 
front acpi interface acpi driver 
driver os specific maps kernel requests acpi commands acpi responses messages kernel signals interrupts 
notice kernel may interact non acpi compliant hardware device drivers 
fig 

acpi interface pc platform 
bottom fig 
hardware platform shown 
represented monolithic block useful distinguish types hardware components 
hardware resources devices system components provide kind specialized functionality video controllers modems bus controllers 
second cpu seen specialized resource need active os acpi interface layer run 
chipset called core logic motherboard logic controls basic hardware functionalities real time clocks interrupt signals processor busses interfaces cpu devices 
cpu runs os system activity performed chipset 
power management standpoint chipset critical part active system relies exit sleep states 
important notice acpi specifies implement hardware devices realize power management operating system 
constraints imposed implementation styles hardware power management policies 
implementation acpi compliant hardware leverage technology architectural optimization long power managed device controllable standard interface specified acpi 
acpi system global power states 

mechanical state power consumption 
soft state called 
full os reboot needed restore working state 
sleeping state system appears power consumption reduced 
system returns working state amount time grows inverse power consumption 
working state system fully usable 
legacy state entered system comply acpi 
benini survey design techniques dynamic power management fig 

state definitions acpi 
global states shown fig 

ordered top bottom increasing power dissipation 
acpi specification refines classification global system states defining sleeping states state shown fig 

sleeping state low wake latency 
system context lost cpu chipset 
low wake latency sleeping state 
state similar sleeping state exception cpu system cache context lost 
low wake latency sleeping state system context lost system memory 
sleeping state lowest power longest wake latency 
reduce power minimum devices powered 
additionally acpi specification defines states system components 
types system components devices processor power states specified 
devices representations hardware resources system 
states defined devices shown fig 

contrast global power states device power states visible user 
instance devices inactive state system appears working state 
furthermore state transitions different devices controlled different power management schemes 
processor central processing unit controls entire pc platform 
processor power states shown fig 

notice intrinsic asymmetry acpi model 
central role cpu recognized processor treated simple resource 
acpi dpm implementations set experiments carried lu measure effectiveness different dpm policies 
lu acpi compliant computers running beta version windows nt acpi compliant 
computer desktop pentium ii processor ibm hdd 
second sony pcg laptop pentium ii fujitsu hdd 
experiments aimed controlling hdd unit different policies 
purpose lu implemented filter drivers fig 
control power states hdd record disk accesses analyze performance impact power management overhead algorithm 
power lines disks fig 

dpm filter drivers 
fig 

psm ibm hdd 
table disk parameters subscripts denote shut wake respectively monitored digital connected pc rs port record measurements 
ibm hdd states reading writing plates spinning plates spinning 
requests wait seek rotation delays disk see fig 

request arrives hard disk wait wake procedure addition seek rotation delays 
disk consumes states respectively 
takes approximately wake tod 
takes average 
behavior fujitsu hdd similar different parameters see table 
break times ibm fujitsu hdd respectively 
experimental results reported comparative analysis different algorithms 
comparison purposes computers execute trace input data long execution trace 
results show algorithms spend computation power management validating fundamental premise body ieee transactions large scale integration vlsi systems vol 
june 
laptop desktop computer power reductions measured compared case compared default min timeout policy windows os 
larger power savings achieved laptop computer shorter break time disk 
observer implementation seen section iii power management requires information usage hardware resource distribution interarrival times request resources distribution service times requests 
observer module fig 
pm takes care data collection 
acpi compliant pc observer may rely acpi messages obtain data needed drive policies 
computers acpi compliant 
section shall analyze implementation power manager observer module exploit acpi proprietary microsoft operating system 
basic requirements implementation observer follows 
low perturbation normal system activity monitoring transparent user modify usage patterns hardware resources little possible 
flexibility easy monitor multiple types resources 
number types observed resources dynamically controllable 
feature particularly useful laptop computers new devices installed system operation plug play capability 
accuracy known system utilities give access cumulative counts accesses system resources 
functionality sufficient obtain accurate statistics interarrival times service times 
important feature observer capability time stamping events high resolution 
software observer architecture analyzed section called ipm implemented extension linux operating system 
observer monitors accesses system resources stores form time stamped events 
core data structure located kernel memory space forced reside physical address space 
storing events kernel space prevents usage memory paging avoiding severe performance penalty possibly caused tlb misses 
hand storing event list kernel space imposes tight limitation maximum size 
list grow larger kb corresponds events 
event list implemented circular buffer allocated performance reasons 
circular structure protects memory violations 
number unprocessed events stored list grows larger number slots older events overwritten 
event loss causes decrease accuracy monitoring damage normal system operation 
size limitation event list kernel memory concern events processed discarded soon registered online monitoring 
event loss avoided observer collecting long event traces offline processing 
observer supports offline fig 

statistical analysis interarrival time 
device curves plotted lin log scale probability density solid line probability distribution bold line complement dashed line 
data refer software development 
monitoring simple dumping mechanism summarized follows 
number unprocessed events reaches value wake signal sent dedicated process 
process normally inactive waiting wake signal alter normal system activity 
wake signal asserted process active scheduled 
clearly execution process alter normal system activity 
perturbation limited fact list processed full 
devices controlled os device drivers monitored inserting standard function calls update event list device driver routines run component accessed 
monitoring change flow execution device driver minimal impact execution time 
boot time observer initialized specifying resources monitored 
cpu hardware components required operation chipset ram bus controllers controlled device drivers 
fortunately possible monitor cpu ancillary components observing os kernel executable code running cpu 
kernel running cpu active 
kernel schedules dummy process called idle task 
detect cpu idleness sufficient monitor scheduling idle task 
monitor installation requires kernel recompilation supports monitoring cpu keyboard serial parallel ports ps mouse ide hard disk cd rom 
system boot data structure created ipm compliant resource containing name type configuration flags unique identifier resource specific information type events monitored 
monitoring selectively enabled resource setting corresponding flags 
experiments run hp ct mhz pentium processor mb ram showed benini survey design techniques dynamic power management system operation slowed average available system components monitored showing convincing evidence monitor 
examples data collected monitoring system reported fig 
probability densities distributions request interarrival times plotted cpu keyboard mouse hard disk 
data collected code development user session 
different usage patterns tested editing game playing 
dpm powerful methodology reducing power consumption electronic systems 
power managed system state operation various components dynamically adapted required performance level effort minimize power wasted idle underutilized components 
system components state transitions nonnegligible power performance costs 
problem designing power management policies minimize power performance constraints challenging 
surveyed classes power managed systems power management policies 
furthermore analyzed tradeoffs involved designing implementing power managed systems 
practical examples power managed systems analyzed discussed detail 
dpm successfully employed real life systems required achieving deep understanding design systems optimally power managed 
acknowledgment authors 
chung 
lu stanford university bologna university help useful suggestions 
lorch smith software strategies portable computer energy management ieee personal commun vol 
pp 
june 
benini de micheli dynamic power management design techniques cad tools 
norwell ma kluwer 
sa microprocessor technical manual intel 
inch hard disk drive ibm 
benini hodgson siegel system level power estimation optimization int 
symp 
low power architecture design aug pp 

benini monitoring system activity os directed dynamic power management int 
symp 
low power architecture design aug pp 

advanced micro devices am low voltage flash memories 
monteiro devadas ghosh precomputation sequential logic optimization low power ieee trans 
vlsi syst vol 
pp 
dec 
malik tiwari guarded evaluation pushing power management logic synthesis design int 
symp 
low power design apr pp 

benini de micheli transformation synthesis fsm low power gated clock implementation ieee trans 
computer aided design vol 
pp 
june 
seelen power reduction clock gating symbolic manipulation symp 
logic architecture design dec pp 

method redundant clocking detection power reduction rt level design int 
symp 
low power electronics design aug pp 

oh pedram gated clock routing minimizing switched capacitance design automation test europe conf feb pp 

gary powerpc microprocessor portable computers ieee design test computers vol 
pp 

fernando pentium processor microarchitecture low power circuit design int 
conf 
vlsi design jan pp 

arm system architecture 
reading ma addison wesley 
jackson power considerations design alpha microprocessor design automation conf june pp 

harris technology directions portable computers proc 
ieee vol 
pp 
apr 
stemm katz measuring reducing energy consumption network interfaces hand held devices ieice trans 
commun vol 
pp 
aug 
microsoft 
evolution pc platform 
online www microsoft com htm 
intel microsoft toshiba 
advanced configuration power interface specification 
online www intel com ial specs html 
power sensitive network architectures wireless communications concepts issues design aspects ieee personal commun vol 
pp 
june 
mobile power management wireless communication networks wireless networks vol 
pp 
jan 
low power access protocols scheduling wireless mobile atm networks int 
conf 
universal personal communications oct pp 

zorzi rao energy constrained error control wireless channels ieee personal commun vol 
pp 
dec 
mangione smith low power communication protocols paging ieee symp 
low power electronics apr pp 

krishnan long vitter adaptive disk optimal rent buy probabilistic environments int 
conf 
machine learning july pp 

helmbold long dynamic disk spin technique mobile computing ieee conf 
mobile computing nov pp 

douglis krishnan bershad adaptive disk spin policies mobile computers nd usenix symp 
mobile location independent computing apr pp 

golding wilkes idleness hp laboratories tech 
rep hpl 
karlin manasse mcgeoch owicki competitive randomized algorithms nonuniform problems algorithmica vol 
pp 
june 
srivastava chandrakasan brodersen predictive system shutdown architectural techniques energy efficient programmable computation ieee trans 
vlsi syst vol 
pp 
mar 

hwang wu predictive system shutdown method energy saving event driven computation int 
conf 
computer aided design nov pp 

lu de micheli adaptive hard disk power management personal computers great lakes symp 
vlsi feb pp 

lu de micheli software controlled power management hardware software codesign symp may pp 

lu chung benini de micheli quantitative comparison power management algorithms date proc 
design automation test europe mar 
benini de micheli event driven power management portable systems isss proc 
int 
symp 
system synthesis nov pp 

benini glynn de micheli dynamic power management portable systems semi markov processes date proc 
design automation test europe mar 
benini de micheli policy optimization dynamic power management ieee trans 
computer aided design vol 
pp 
june 
ieee transactions large scale integration vlsi systems vol 
june qiu pedram dynamic power management continuous time markov decision processes design automation conf june pp 

chung benini de micheli dynamic power management nonstationary service requests design test europe conf mar pp 

ross probability models th ed 
new york academic 
puterman finite markov decision processes 
new york wiley 
automated low power technique exploiting multiple supply voltages applied media processor ieee solid state circuits vol 
pp 
mar 
nielsen van low power operation self timed circuits adaptive scaling supply voltage ieee trans 
vlsi syst vol 
pp 
dec 
chandrakasan data driven signal processing approach energy efficient computing int 
symp 
low power electronics design aug pp 

kapadia de micheli benini reducing switching activity datapath buses control signal gating custom integrated circuit conf may pp 

suzuki mips risc core processor variable supply voltage scheme variable threshold voltage cmos custom integrated circuits conf may pp 

design methodology ultra low power mpeg codec core exploiting voltage scaling techniques design automation conf june pp 

sanders brodersen low voltage cmos dc dc converter portable battery operated system power electronics specialists conf june pp 

wei horowitz low power switching power supply self clocked systems int 
symp 
low power electronics design aug pp 

yu meng high efficiency variable voltage cmos dynamic dc dc switching regulator int 
solid state circuits conf feb pp 

chandrakasan embedded power supply lowpower dsp ieee trans 
vlsi syst vol 
pp 
dec 
torvalds linux operating system commun 
acm vol 
pp 
apr 
luca benini received dr eng 
degree electrical engineering university bologna bologna italy ph degrees electrical engineering stanford university stanford ca respectively 
assistant professor department electronics computer science university bologna 
holds visiting professor positions stanford university hewlett packard laboratories palo alto ca 
research interests aspects computer aided design digital circuits special emphasis low power applications design portable systems 
dr benini member technical program committees technical conferences including design test europe conference international symposium low power design 
alessandro received laura degree electrical engineering ph degree electrical engineering computer science university bologna bologna italy respectively 
department electronics computer science systems deis university bologna 
visiting scholar computer systems laboratory csl stanford university stanford ca 
cooperated research group prof de micheli stanford 
joined department engineering dif university ferrara ferrara italy assistant professor 
research interests area computer aided design digital integrated circuits systems particular emphasis high level power modeling power optimization intellectual property protection 
giovanni de micheli professor electrical engineering computer science stanford university stanford ca 
research interests include aspects computer aided design integrated circuits systems particular emphasis automated synthesis optimization validation 
author synthesis optimization digital circuits new york mc hill coauthor dynamic power management circuit techniques cad tools norwell ma kluwer books 
editor chief ieee transactions computer aided design 
dr de micheli received ieee transactions computer aided design best award presidential young investigator award best awards design automation conference 
vice president publications ieee cas society 
general chair th design automation conference 
program general chair international conference computer design iccd respectively 
nato advanced study institutes hardware software design italy logic synthesis silicon compilation aquila italy 
