usenix association proceedings th usenix security symposium denver colorado usa august advanced computing systems association usenix association rights reserved information usenix association phone fax email office usenix org www www usenix org rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
publius robust tamper evident censorship resistant web publishing system marc waldman rubin faith cranor computer science dept labs research labs research new york university rubin research att com research att com waldman cs nyu edu describe system designed implemented publishing content web 
publishing scheme property difficult adversary censor modify content 
addition identity publisher protected content posted 
system differs provide tools updating deleting published content users browse content normal point click manner standard web browser client side proxy provide 
code freely available 
publication written words long tool spreading new controversial ideas goal bringing social change 
printing press world wide web powerful revolutionary tools 
seek suppress revolutions possess powerful tools 
tools give ability publication destroy published materials prevent distribution publications 
successfully censor publication may physically financially harm author publisher order send message advised consider alternative occupation 
threat personal harm authors may wish publish works anonymously believe readily accepted associated person gender race ethnic background characteristics 
quotations internet ability resist censorship promote anonymity nearly 
john quote net treats censorship damage routes interpreted statement internet censored 
peter steiner famous new cartoon captioned internet knows re dog hype internet haven anonymity 
increasingly people come learn take extraordinary precautions online writings censored true identity online revealed 
examples internet limited ability resist censorship church attempts online publication documents critical church 
church internet documents contain describe church secrets 
individual authors internet service providers major newspapers washington post defend publication excerpts church documents fewer words court 
church copyright trademark law illegal searches seizures attempt suppress publication church documents 
church convinced finnish police force operator anonymous remailer anon fi reveal true name user anonymous postings church 
church tried obtain names users year decided shut remailer 
digital millennium copyright act established help copyright owners better protect intellectual property online environment proving useful tool 
act requires online service providers take content notification copyright owner content copyright 
process place content owner refute infringement claim requires online service provider take content immediately restore infringement claim proven valid 
developed publius attempt provide web publishing system highly resistant censorship provide publishers high degree anonymity 
publius pen name authors federalist papers alexander hamilton john jay james madison 
collection articles published new york state newspapers october may influential convincing new york voters proposed united states constitution 
design goals design goals important shaping design publius 
censorship resistant system extremely difficult third party changes force deletion published materials 
tamper evident system able detect unauthorized changes published materials 
source anonymous way tell published material published web 
requires anonymous transport mechanism publishers web servers 
system allow publishers changes materials delete materials choose 
deniable system relies parties addition publisher publishing systems online offline third parties able deny knowledge content published 
fault tolerant system third parties involved malicious faulty 
persistent publishers able publish materials indefinitely setting upfront expiration date 
extensible system able support addition new features new participants 
freely available software required system freely available 
related purposes current web anonymizing tools placed categories 
category consists tools attempt provide connection anonymity tool attempts hide identity individual requesting particular web page 
second category consists tools attempt hide location author particular web document 
publius falls category briefly survey connection anonymity tools conjunction publius protect author anonymity 
connection anonymity tools anonymizer www anonymizer com provides connection anonymity acting proxy requests 
individual wishing retrieve web page anonymously simply sends request page anonymizer 
anonymizer retrieves page sends back individual requested 
known anonymizing proxy offers feature automatically generate unique pseudonymous user names corresponding passwords email addresses users send web sites 
time user returns particular web site pseudonyms generated 
functionality anonymizing proxy similar anonymizer 
anonymity tools developed concept mix networks 
mix network collection routers called mixes layered encryption technique encode path communications take network 
addition mix networks techniques buffering message reordering obscure correlation messages entering exiting network 
onion routing system anonymous private internet connections mix networks 
onion routing user creates layered data structure called onion specifies encryption algorithms keys data transported intended recipient 
data passes onion router way layer encryption removed recipe contained onion 
request arrives recipient plain text ip address onion router path 
proxy developed allows individual onion router anonymous requests 
crowds anonymity system idea people anonymous blend crowd 
mix networks crowds users need trust single third party order maintain anonymity 
crowds users submit requests crowd group web surfers running crowds software 
crowds users forward requests randomly selected member crowd 
server crowd members determine request originated 
main difference mix network crowds way paths determined packets encrypted 
mix networks packets encrypted pre determined path submitted network crowds path configured request traverses network crowd member encrypts request member path 
crowds utilizes efficient symmetric ciphers designed perform better mix solutions 
freedom anonymity system www freedom net provides anonymous internet connection similar onion routing implemented ip layer application level 
freedom supports protocols including smtp pop usenet irc 
addition freedom allows creation pseudonyms interacting web sites network users 
author anonymity tools janus currently known rewebber www rewebber de combination author connection anonymizing tool 
respect connection anonymity janus functions exactly anonymizer retrieves web pages individual behalf 
publisher anonymity provided url rewriting service 
individual submits url janus receives janus url return 
janus url form www rewebber com surf encrypted ek ek represents url encrypted janus public key 
new url hides true value may anonymous address url receiving request janus url janus simply decrypts encrypted part url private key 
reveals web page true location janus 
janus retrieves page sends back requesting client 
just janus sends page back client url contained page converted janus url 
goldberg wagner describe implementation anonymous web publishing system network 
rewebber network consists collection networked computers runs proxy server possesses public private key pair 
proxy server addressable unique url 
individual wishing hide true location www accessible file decides set rewebber servers request file routed 
encryption technique similar onion routing urls rewebber servers encrypted form url receiving get request url rewebber proxy uses private key peel away outermost encryption layer decryption reveals identity rewebber server request passed 
rewebber server chain knows true location problem scheme rewebber servers route crashes file 
crashed file server possesses private key exposes server chain rewebber servers eventually leads file multiple rewebber servers encryption leads long urls easily memorized 
order associate meaningful name long urls taz server invented 
taz servers provide mapping names taz urls way dns server maps domain names ip addresses 
anonymous publishing system currently operating built proof concept class project 
previous anonymous web publishing done context building system realize anderson eternity service :10.1.1.16.1952:10.1.1.16.1952
eternity service server storage medium resistant denial service attacks destruction participating file servers 
individual wishing anonymously publish document simply submits eternity service appropriate fee 
eternity service copies document random subset servers participating eternity service 
submitted document removed eternity service 
author forced threat delete document published eternity service 
review projects goals closely mirror inspired eternity service 
usenet eternity usenet news implementation scaled version anderson eternity service 
system uses usenet store anonymously published documents 
documents published anonymously formatted specific set rules call addition headers processing pgp sha 
correctly formatted message sent alt anonymous messages 
piece software called eternity server read anonymously posted articles alt anonymous messages newsgroup 
eternity server capable caching newsgroup articles 
helps prevent loss document deleted usenet 
problem usenet news store anonymously published file article usually exists news server short period time deleted 
addition posting censored particular news administrator posting cancel requests www faqs org faqs usenet cancel faq usenet 
ambitious implementation currently designed www org eternity design html 
freenet adaptive network approach censorship problem 
freenet composed network computers nodes capable storing files locally 
addition node network maintains database characterizes files stored nodes network 
node receives request non local file uses information database decide node forward request 
forwarding continued document message considered timed 
document passed back chain forwarding nodes 
node chain cache file locally 
caching plays main role dealing censorship issue 
multiple copies difficult censor material 
file published anonymously simply uploading nodes adaptive network 
freenet implementation infancy features need implemented 
intermemory system achieving immense self replicating distributed persistent ram set networked computers 
individual wishing join intermemory disk space extended period time exchange right store smaller amount data intermemory 
donation disk space incorporated intermemory 
data stored automatically replicated dispersed 
replication dispersion gives intermemory properties similar anderson eternity service 
main focus intermemory project anonymous publishing preservation electronic media 
small intermemory prototype described 
security cryptographic components fully specified comment anonymity properties 
describes detail implement full fledged eternity service 
students charles university attempting create software implementation eternity service thesis 
publius section describe system achieves stated goals 
call content published desired robustness properties publius content 
overview system consists publishers post publius content web servers host random looking content browse publius content web 
system supports static content html pages images files postscript pdf javascript works 
support interactive scripting cgi 
java applets publius pages limited 
assume static system wide list available servers 
publius content encrypted publisher spread web servers 
current system set servers static 
publisher takes key encrypt file published splits shares reproduce original give hints key 
server receives encrypted publius content shares 
point server idea hosting simply stores random looking data 
browse content retriever get encrypted publius content server shares 
described mechanism place detect content tampered 
publishing process produces special url recover data shares 
published content cryptographically tied url 
modification stored publius content url results failed tamper check 
tamper checks fail publius content read 
addition publishing mechanism provide way publishers update delete publius content 
sections describe publius functions detail 
simple example publisher html file 
publishing complicated content web pages links covered section 
publish text describes publish pseudocode 
pseudocode executed publius client proxy response publish request 
publish publius content publisher alice generates random symmetric key encrypts produce encrypted strong symmetric cipher 
alice splits shares shamir secret sharing reproduce secret 
shares alice computes namei wrap share corresponding name 
name calculated concatenating share message cryptographic hash xoring half hash output second half 
call xor halves wrap 
system md hash function namei bytes long 
note namei dependent bit web page contents share contents 
namei values publius server addressing scheme described 
recall publisher possesses static list size available servers system 
shares compute namei mod obtain values unique values obtained start pick value represents minimum number unique servers hold publius content 
clearly value needs greater equal shares needed reconstruct key somewhat smaller clearly desirable reduce number times need generate new key need create sufficient number shares high probability unique servers 
problem equivalent known coupon collectors problem 
coupon collectors problem different coupons collector wishes collect 
collector obtains coupons time randomly repetitions 
expected number coupons collector needs collect obtaining different coupons ln 
analogy unique slot available server list equivalent coupon 
key create ln shares 
unused shares thrown away 
alice uses index list servers 
alice publishes information directory called namei server location static list 
locations shares uniquely determined 
url produced contains namei values concatenated 
detailed description url structure section 
illustrates publication process 
retrieve text describes retrieve pseudocode 
pseudocode executed publius client proxy response retrieve request 
retriever bob wishes view publius content addressed publius url bob parses namei values computes namei mod discovers index table servers shares 
bob chooses arbitrarily 
list servers chooses issues get command retrieve encrypted file share 
bob knows encrypted file stored file called file server namei directory 
key share stored file called share directory 
bob retrieves shares similar fashion goes need retrieve files shares 
bob shares combines form key decrypts file 
bob verifies namei values corresponding selected shares correct recomputing namei wrap just decrypted 
namei correct match ones url procedure document generate symmetric key encrypt key producing split key shares shares required reconstruct store shares array share locations name md share name xor top bits name bottom bits name location name mod location member locations locations locations location address location insert address share publish queue name endif endfor sizeof locations empty publish queue return address share publish queue put share publius server ip address address return endif bob satisfied document intact collision hash function 
goes wrong bob try different set shares encrypted file stored servers 
worst case bob may try possible combinations get web page giving 
alternate retrieval strategy try combinations shares documents 
encrypted document tested share combinations 
willing initially download shares servers method determining key available 
gemmell sudan berlekamp welch method finding polynomial key corresponding shares corrupt 
value number shares needed form key 
number corrupt shares greater quite luck 
easily discover incorrect performing verification step described 
suspect key incorrect just perform brute force search trying combi nations shares documents 
example illustrates point 
shares publish algorithm require shares form berlekamp welch method generate correct polynomial shares corrupted 
suppose shares corrupt 
course don know ahead time perform berlekamp welch method leads key key tested subset encrypted documents 
tamper check failures lead suspect incorrect 
perform brute force search correct key trying combinations shares documents 
assuming untampered encrypted document method clearly succeed uncorrupted shares needed form correct key 
web page retrieved bob view browser 
implementation handled proxy 
publius urls tagged special parsed handled proxy 
proxy retrieves page verification returns web content browser 
transparent user 
user just points clicks usual 
section describes publius url proxy software detail 
available server table 


publisher name name name de fe fc location location server publius server publius servers server server server publius de fe fc publius publication process publisher computes namei values hashing web page symmetric key shares 
values compute locations 
publisher uses location value index static location table publishes encrypted file share directory named namei appropriate server 
delete desirable alice able delete publius content servers able delete content 
achieve just alice publishes file generates password alice sends encrypted document share server domain name servers hosting alice published document 
server domain name hash domain name server concatenated password server stores hash value directory encrypted file share file called password 
reason value stored opposed just pw pw prevents malicious server learning password deleting associated publius content servers hosting 
implemented delete cgi script running server 
delete publius content alice sends server domain name hosting server namei corresponds server 
server compares password received stored match removes directory matching namei files 
update system provides mechanism alice update previously published 
password mechanism delete content 
alice change web page published 
idea enable alice change content changing url may linked original site 
update retrieving original url receives new content 
addition file share password file called update servers namei directory 
initially alice updated content file exist 
bob retrieves url update file missing proceeds described section 
update content alice specifies file name containing new content original url original password new password 
update program publishes new content simply calling publish file name new password 
new content published original url find servers host publius content 
servers receives message alice call cgi script containing original password stored server recall server old namei new url 
server places new url update file deletes contents old file 
bob retrieves publius content update file exists servers return update url contents 
bob receives update url servers compares equal retrieves new url 
course bob aware retrieve program doing scenes 
point view procedure retrieve number shares needed reconstruct key number name values stored url name 
name set unique subsets elements element choose random integer range th element set location name mod address location share retrieve file share server address alue name retrieve server address endif endfor share 
share decrypt key true md share xor top bits bottom bits alue false break endif endfor return endif endfor return document retrieved retrieve request receives web page 
urls match bob proxy tries servers gets gives 
section discuss ways implemented tradeoffs arise 
update mechanism convenient leaves publius content vulnerable redirection attack 
attack malicious server administrators collaborate insert update file order redirect requests publius content 
mechanism exists publius prevent attack 
process publisher option declaring publius url 
publius client attempts retrieve publius content url update urls ignored 
see section information urls 
retrieve algorithm implementation issues section describe software components publius components implement publius functions 
publius urls successfully published document assigned publius url 
publius url form anon options encode name 
encode namei defined section encode function base encoding function verb www ietf org rfc rfc txt 
base encoding function generates ascii representation namei value 
options section publius url characters define publius client software interprets url 
bit options section encodes fields version number number shares needed form key update flag 
version number allows add new features versions publius time retaining backward compatibility 
allows publius clients warn user particular url meant interpreted different version client software 
field identifies number shares needed form key field update flag determines update operation performed publius content represented url 
update flag retrieval updated content performed manner described section 
update flag client ignore update urls sent publius servers response share encrypted file requests 
update flag role preventing certain types attacks described section 
older browsers enforce rule url contain maximum characters 
initial anon string characters long leaving characters namei values 
base processes data bit blocks producing ascii characters bit block 
results ascii characters namei value 
hashes produce ascii characters 
older browsers restrict different publishing servers scheme 
remaining characters options section described 
example publius url anon ah kl lx clk server software participate publius server needs install cgi script provide 
client software communicates server executing post operation server cgi url 
requested operation retrieve update publish delete file name password required information passed server body post request 
recommend limiting amount disk space time cgi script executes 
cgi script freely available see section 
client software client software consists proxy set publishing tools 
individual wishing retrieve publius content just requires proxy 
proxy transparently sends non publius urls appropriate servers passes returned content back browser 
receiving request publius url proxy retrieves encrypted document shares described section takes actions 
decrypted document successfully verifies sent back browser 
proxy unable find document successfully verifies html error message returned browser 
requested document updated redirect request sent browser update url 
publishing mutually hyperlinked documents suppose alice wants anonymously publish html files assume file contains hyperlink file alice anonymously published file retain hyperlink anonymously published file accomplish alice publishes file action generates publius url file burl 
alice records burl appropriate location file alice publishes file task complete 
alice wishes anonymously publish html files file hyperlink file file hyperlink file alice faces dilemma having decide file publish 
alice publishes file change hyperlink change hyperlink published 
similar problem occurs alice publishes file problem alice content file cryptographically tied publius url changing file way changes publius url 
coupled fact file file contain hyperlinks generates circular dependency file publius url depends publius url 
needed overcome problem way break dependency publius url file content 
accomplished publius update mechanism described section 
update mechanism alice easily solve problem mutually hyperlinked files 
alice publishes files order 
generates publius url curl file publius url file alice edits file changes address hyperlink 
file changes address hyperlink curl 
performs publius update operation curl newly modified file done newly updated file generates publius url curl file publius url file problem solved 
suppose bob attempts retrieve file curl 
bob proxy notices file updated retrieves file curl 
time bob clicks hyperlink 
bob proxy requests document redirected 
update mechanism ensures bob reads latest version document 
publishing directory publius contains directory publishing tool automatically publishes files directory 
addition file contains hyperlink file directory hyperlink rewritten reflect publius url 
mutually hyperlinked html documents dealt described previous section 
step publishing directory publish non html files record file corresponding publius url 
html files scanned hyperlinks files hyperlink previously published non html file hyperlink changed publius url information concerning hyperlinks html files directory recorded data structure called dependency graph 
dependency graph directed graph containing node html file directed edge added html file published file words edge added file contains hyperlink file addition file contains hyperlink file edge added graph causing creation cycle 
cycles graph indicate need utilize publius update trick alice uses publishing mutually hyperlinked files section 
html files scanned dependency graph checked cycles 
html files involved cycle published publius urls recorded 
hyperlink referring file involved cycle replaced publius url 
nodes cycle removed leaving cycle free 
topological sort performed yielding publishing order remaining html files 
result topological sort directed acyclic graph dag linear ordering nodes dag directed edge vertex vertex appears linear ordering 
html files published order file published hyperlinks pointing modified reflect publius url 
publius update operation performed files part cycle publius content type file name extension particular file usually determines way web browser interprets file content 
example file name extension htm usually contains html 
similarly file name extension jpg usually contains jpeg image 
publius url retain file extension file represents 
publius url gives hint browser matter type file points 
desired behavior wish give hosting server slightest hint type content hosted 
order browser correctly interpret byte stream sent proxy proxy properly identify type data sending 
publishing file prepend letters file name extension file 
prepend letter file extension actual mime type mime types variable length alternative implementation store actual mime type prepended characters represented length mime type string 
file published described section 
proxy ready send requested file back browser letter extension removed file 
letter extension proxy determine appropriate mime type document 
mime type sent header 
letter extension helpful determining mime type default type text plain sent text files 
default mime type binary files octet stream 
user interface client side software includes command line tools perform publish delete update operations described section 
retrieve operation performed web browser conjunction proxy 
addition web browser interface tools developed 
browser interface allows select publius operation retrieve update publish delete enter operation required parameters url password 
publius operation bound special anon 
url recognized proxy 
example publish url anon publish 
operation parameters sent body post request corresponding anon 
url 
proxy parses parameters executes corresponding publius operation 
html message indicating success failure operation returned 
retrieve operation requested successful requested document displayed new web browser window 
limitations threats section discuss limitations publius limitations adversary censor published document disrupt normal publius operation learn identity author particular document 
possible countermeasures attacks discussed 
share deletion corruption described section document successfully published copy encrypted document share stored servers 
copy encrypted document shares required recover original document 
clearly copies encrypted file deleted corrupted impossible recover original document 
similarly shares deleted corrupted retrieved impossible recover key 
case published document effectively censored 
naturally leads increase decrease harder individual group individuals censor published document 
update file deletion corruption stated section server receives request publius content associated update file url contained file sent back requesting proxy 
describe different attacks update file adversary censor published document 
attacks adversary mallory read write access files server hosting publius content wishes censor 
attack describe associated update file 
author executed publius update operation url 
mallory delete server censor content servers available 
censor publius content mallory cause request result retrieval different document choosing 
publius url 
mallory enters file called update places file directory associated request received mallory server sent back 
course mallory realizes single received client fool retrieving 
mallory help publius servers store mallory friends place update file directory 
mallory censorship clearly succeeds get update file placed server holding implementation publius requires shares downloaded mallory necessarily need thorough 
proxy request mallory lucky matching urls returned proxy issues browser redirect url 
happens mallory censored replaced publius content creation 
motivates higher values update flag described section attempt combat attack 
publisher turned update flag content published publius client interpreting url refuse accept update urls document 
content considered censored believing updated file publius content originally published 
second attack updated exists associated update file containing valid publius url points publius content censor content mallory corrupt update file servers 
way retrieve file correctly 
fact mallory corrupt servers censor document 
motivates higher values lower values attack worth mentioning 
mallory cause update files servers accessed client deleted effect restore publius content previous state update occurred 
motivates requiring clients retrieve servers performing verification 
attacks described shed light couple tradeoffs 
requiring download shares copies document extreme favors censorship resistance performance 
settling shares opens user set corrupt collaborating servers 
picking higher values minimizes problem 
lower values require adversary corrupt servers censor documents 
number shares number copies page retrieved chosen consideration 
denial service attacks publius web services susceptible denial service attacks 
adversary publius publish content disk space servers full 
affect applications running server 
take simple measure limiting publishing command 
better approach charge space 
interesting approach problem cpu cycle payment scheme known hash cash www org adam 
idea system require publisher publishing 
difficult efficiently fill server disk 
hopefully attack detected disk full 
hash cash client wishing store file particular server requests challenge string number server 
client find string bits match bits secure hash function md concatenation operator 
client find partial collisions hash function 
higher value time client requires find matching string 
client sends server file stored 
server stores file passes bit matching test 
scheme considering limit client ip address amount data client store particular publius server certain period time 
perfect raises bar bit requires attacker exert effort 
implemented protection mechanisms 
dwork naor describe cpu cycle payment schemes 
threats publisher anonymity publius designed tool anonymous publishing ways identity publisher revealed 
obviously publisher leaves sort identifying information published file longer anonymous 
publius anonymize hyperlinks published html file 
published html page contains hyperlinks back publisher web server publisher anonymity 
publius provide sort connection anonymity 
means adversary eavesdropping network segment publisher publius servers determine publisher identity 
server hosting publius content keeps log incoming network connections adversary simply examine log determine publisher ip address 
protect publisher sort attacks connection anonymity tool crowds conjunction publius 
rubber hose cryptanalysis anderson eternity service publius allows publisher delete previously published document :10.1.1.16.1952:10.1.1.16.1952
individual wishing delete document published publius possess document url password 
adversary knows publisher document apply called rubber hose cryptanalysis threats blackmail force publisher delete document reveal document password 
course adversary try force appropriate server administrators delete publius content wants censored 
publius content distributed servers located different countries jurisdictions attack expensive impractical 
browsers proxies today impose character limit url size 
limit lifted fixed table servers longer needed publius url contain ip addresses servers content stored 
predefined url size limit essentially limit number hosting servers stored publius url 
publius url structure remains essentially just ip addresses added 
option namei components url remain needed tamper checking url interpretation 
intend url format versions publius 
publius publication process encrypted file information stored host servers 
krawczyk describes rabin information dispersal algorithm reduce size encrypted file stored host server 
planning technique reduce amount storage needed host servers 
availability described publius web anonymous publishing system resistant censorship 
publius main contributions previous anonymous publishing systems include automatic tamper checking mechanism method updating deleting anonymously published material methods anonymously publishing mutually hyperlinked content 
current implementation publius consists approximately fifteen lines perl 
source code freely available www cs nyu edu waldman publius html 
usenix supporting 
adam back ian goldberg oscar hernandez hoare benny pinkus adam anton alex anonymous reviewers helpful comments recommendations 
aho hopcroft ullman 
data structures algorithms 
addison wesley publishing 
anderson :10.1.1.16.1952
eternity service 

www cl cam ac uk users rja eternity eternity html 
back 
eternity service 
phrack magazine 
www org adam eternity phrack html 

eternity service 

www mff cz eternity 
chaum 
untraceable electronic mail return addresses digital pseudonyms 
communications acm 
chen goldberg gottlieb yianilos 
prototype implementation archival intermemory 
proc 
acm digital libraries 
acm august 
www intermemory org 
clark 
distributed decentralised information storage retrieval system 

freenet sourceforge net freenet ps 
dwork naor 
pricing processing junk mail 
advances cryptology crypto pages 
springer verlag 
gabber gibbons kristol matias mayer 
consistent anonymous web access 
communications acm 
gemmell sudan 
highly resilient correctors polynomials 
information processing letters 
goldberg yianilos 
archival intermemory 
proc 
ieee international forum research technology advances digital libraries adl pages 
ieee computer society april 
www intermemory org 
goldberg wagner 
taz servers rewebber network enabling anonymous publishing world wide web 
monday 
www firstmonday dk issues issue goldberg index html 
wendy grossman 
wired december 
www wired com wired archive alt war pr html 
krawczyk 
secret sharing short 
advances cryptology crypto pages 
springer verlag 
motwani raghavan 
randomized algorithms 
cambridge university press 
ron newman 
church vs net 
february 
www net users home html 
library congress 
federalist papers 
loc gov const fed abt html 
reed syverson goldschlag 
proxies anonymous routing 
th annual computer security applications conference 
www net publications html 
michael reiter rubin 
crowds anonymity web transactions 
acm transactions information system security april 
rivest 
md message digest algorithm 
rfc april 
schneier 
applied cryptography 
john wiley sons 
shamir 
share secret 
communications acm november 
