ieee transactions knowledge data engineering vol 
may june hierarchical encoded path views path query processing optimal model performance evaluation ning jing yun wu huang elke rundensteiner member ieee efficient path computation essential applications intelligent transportation systems network routing 
navigation systems path requests submitted typically huge transportation network small time window 
path precomputation path view provide efficient path query response raises problems addressed precomputed paths exceed current computer main memory capacity large networks disk solutions inefficient meet stringent requirements target applications path views costly update large graphs resulting date query results 
propose hierarchical encoded path view hepv model addresses problems 
hierarchically encoding partial paths hepv reduces view encoding time updating time storage requirements previously known path precomputation techniques significantly minimizing path retrieval time 
prove paths retrieved hepv optimal 
complete solutions phases hepv approach including graph partitioning hierarchy generation path view encoding updating path retrieval 
depth experimental evaluation hepv synthetic real gis networks 
results confirm hepv offers advantages alternative path finding approaches terms performance space efficiency 
index terms path queries path view materialization hierarchical path search gis databases graph partitioning 
capability computing path queries essential feature new database systems advanced applications navigation systems geographical information systems gis computer networks 
example primary functionalities intelligent transportation systems find routes current location vehicle desired destination minimum cost cost represent travel time shortest distance minimal toll charges 
investigates solutions path finding general particular focus addressing problems inherent navigation system applications 
applications identify critical issues 
focus systems compute path queries submitted potentially large number concurrent requests peak rush hours 
solution scalable number path query requests 
second solution handle dynamic nature transportation network provide date query jing department electrical engineering institute technology peoples republic china 
mail edu cn 

huang department electrical engineering computer science university michigan ann arbor mi 
mail umich edu 
rundensteiner department computer science worcester polytechnic institute worcester ma 
mail cs wpi edu 
manuscript received july 
information obtaining reprints article please send mail tkde computer org ieeecs log number 
ieee results underlying transportation network data changes frequently 
third solution provide response near real time level performance seconds 
response seconds driver turn system effective 
fourth requirements instruction navigation systems interested efficiently determining link desired path complete path 
justified fact driver needs know immediately turn take knowing complete path critical especially may adjusted changing conditions traveling 
traditional path finding solutions variations heuristic search algorithm compute paths 
algorithms process path queries potentially large number concurrent path requests specified large transportation network amounts huge collection computational tasks 
result stringent constraint path query response time may satisfied 
alternative solution precompute pair shortest paths store line 
path computation reduced simple look ups requested path precomputed path view structure 
path queries processed efficiently recomputation update path view inefficient large networks took minutes graph nodes sun sparc experiments 
limitation prevents path view updated frequently undercutting accuracy computed paths 
ieee transactions knowledge data engineering vol 
may june fig 

hepv framework 
address issue hierarchical graph model link classifications 
system hierarchy created pushing high speed roads highways higher level 
path computation hierarchical structure efficient computed path guaranteed optimal sense may different path computed origin destination pair hierarchical structure imposed 
overcome limitation goal achieve high efficiency path view computation update losing benefit time efficient retrieval optimal paths 
propose hierarchical graph model called hierarchical encoded path view hepv 
hepv accomplishes major tasks fig 
hierarchy generation task constructs hierarchical graph fragmenting flat graph partitions pushing border nodes generate hierarchy 
hierarchical path encoding task stores shortest paths partition hierarchy 
hierarchical path view update task recomputes path views partitions traffic condition changed update 
path retrieval task retrieves optimal path hierarchical graph user requests 
proofs optimality provided section basis deriving optimal hierarchical path search algorithms 
detailed analyses experimental results hepv approach synthetic graphs real transportation networks 
compared approaches hepv approach efficient respect performance memory requirement 
large graph nodes hepv needs seconds update materialized path view worst case fragments changed 
time retrieve link desired path short measurable system 
retrieve complete path takes second average 
memory requirement kept small bytes compared bytes required conventional path view approach 
experimental results confirm hepv approach represents excellent compromise demand precomputation approaches processing path queries 
proposed hepv model successfully addresses previously mentioned path finding issues underlying navigation applications 
encoding path views hepv requires computation traditional approach processing path queries 
consequently suitable handling high volume concurrent path queries 
second hierarchical path views encoded hepv updated shorter time nonhierarchical solutions better capture dynamic nature transportation network 
third hepv efficient optimal path retrieval guarantees provide near real time path query response second average retrieving long path network nodes 
lastly hepv adopts encoded path view approach stores hops shortest paths 
hepv efficient determining links optimal paths fits query patterns underlying navigation applications 
differs significantly preliminary report aspects extend level graph model general multilevel graph approach complete proofs optimality paths retrieved hepv propose graph partitioning algorithm hepv automates partitioning step jing hierarchical encoded path views path query processing report comprehensive experimental results covering multilevel optimizations real gis random graphs 
remainder organized follows section discuss background path view approach 
show hierarchical graph created section 
section introduce task encodes updates hierarchical path views 
optimality theorems hierarchical path retrieval algorithms section 
experimental results analysis section compare proposed hepv approach alternative path finding techniques 
provide related section conclude summary contributions section 
background encoded path view section review basics encoded path view approach 
detailed treatment see 
basic graph definitions definition 
graph ni set nodes total number nodes graph 
ni nj set links link directed tuple ni nj denoted simply lij 
fc lij denotes nonnegative link weight lij fc cost function applied link lij 
call graph flat graph distinguish hierarchical graph define 
definition 
path ij km ordered sequence nodes km kp 
ni nj source destination nodes path respectively 
path weight sum link weights links path shortest path path ni nj gives minimum path weight possible paths ni nj 
path weight shortest path denoted 
path ni spw ij definition 
transitive closure graph defined closure ni nj lij nk ni nk closure 
definition transitive closure ni nj closure exists path pij words nj reachable ni 
flat path view fpv flat path view fpv stores pair shortest paths graph 
storing shortest paths entirety requires unrealistically large amount storage fpv stores origin destination direct successor node called hop weight shortest path pair 
exist shortest path pair stored different hop 
structure address issue turn information shortest path needed 
entire shortest path retrieved iteratively looking path views hops keys 
implement fpv associating source node table tuple stores hop shortest path weight path destination reachable source node 
tuple uniquely identified combination destination hop 
definition 
graph encoded path table node ni epi nj nk nk hop shortest path ni flat path view corresponds set tables tuples destination nexthop table associated source node 
give formal definition flat path view 
definition 
flat path view fpv flat graph set encoded path tables nodes fpv epi ni 
fig 
shows fpv example graph 
shortest path na ne na nb nc ne path weight 
tuple epa table associated na 
variation known dijkstra algorithm generate path views 
solution general shortest path algorithms utilized 
discussion computation fpv equal calculating pair shortest paths computationally expensive space requirement fpv high 
large maps computing updating fpv may take long time performed longer possibly unacceptable delays 
experiments see section show fpv encoding time graph nodes long seconds sun sparc workstation 
furthermore space requirement path view large efficiently cache data memory cost effective forcing usage secondary storage slows encoding process 
explore alternative solutions coping effectively 
computational complexity pair dijkstra algorithm log en log dn number nodes number links average degree 
networks sparse graphs low degree complexity log 

space requirement node reachable node 
ieee transactions knowledge data engineering vol 
may june fig 

encoded path view structure 
large graph sizes terms path encoding time storage requirement 
creating hierarchical graph researchers proposed hierarchical graph models 
typically designed guarantee optimality retrieved path 
contrast introduce hepv model show optimal 
creating hierarchy fragmentation hepv generates hierarchical graph flat graph fragmentation 
pushes border nodes nodes belong fragment generate map higher level 
maps interest gis maps computer network topology maps number border nodes generated effective fragmentation far smaller regular nodes explained section 
higher level map consists border nodes 
compact graph represents cross partition points map level 
shortest paths spanning fragment traverse cross fragment border nodes map higher level capture possible connections border nodes current level 
higher level map smaller lower level path retrieval efficiency greatly improved utilizing path information associated higher level map 
fig 
illustration concept 
level graph fig 
original flat map consists nodes grey dots 
fragmentation partitions applied level graph border nodes level classified regular nodes higher level level 
continuing processing create partitions level generate level graph border nodes level 
fragmentation necessary level number nodes level small 
fig 

creating hierarchy fragmentation 
effective fragmentation effectiveness hierarchical graph measured efficiency precomputation fragments compactness nonground level maps 
easy prove induction minimum total precomputation cost achieved fragments level number nodes 
achieve conducted series experimental evaluation 
experimented optimal decomposition algorithm minimizing number border nodes proposed exponential time complexity unrealistic large maps 
tested efficient suboptimal algorithm resulted excessive number border nodes 
experimented center greedy algorithm order achieve approximately equally sized partitions relies manually picking center nodes 
manual intervention unacceptable large 
proof trivial omit 
jing hierarchical encoded path views path query processing fig 

partition graph partition algorithm 
networks maps nonground level clues picking center nodes available 
achieve effective fragmentation developed novel partitioning algorithm called spatial partitioning clusters graph links partitions spatial proximity 
spatial partitioning takes advantage map characteristics grid patterns relatively short distance majority links 
experimental evaluation comparing approach alternative algorithms literature shows partition works gis data sets fig 

detailed discussion spatial partitioning algorithm 
hierarchical graph model formal model shows hierarchy created fragmentation method 
extend notations section hierarchical graphs link graph lw link weight 
path graph sp shortest path graph spw shortest path weight sp 
definition 
fragment graph graph lij lij lij 
lij ni nj fragment subgraph consists solely subset nodes links note required links nodes fragment nodes 
definition 
partition denoted partition set fragments fragments satisfying requirements requirement requirement lf requirement fragments gu nu lu wu lf holds lu 
definition requirements state fragments contain nodes links words fragments completely cover graph 
second third requirements state link belongs exactly fragment partition minimal respect set links nodes different fragments may overlap 
nodes link belong fragments link belong fragments 
fig 
depicts partition flat graph fig 

definition 
partition graph node intersection fragment gu fragments pg called border node set gu border gu nu nv ieee transactions knowledge data engineering vol 
may june fig 

example creating level hierarchical graph flat graph 
border gu border gv fragments gu gv said adjacent 
conversely remaining node set gu defined local gu nu border gu 
border node fragment appears fragment partition local node appears exactly fragment 
fragments said adjacent common border node 
fig 
border appear appears local definition 
partition supergraph defined uu border gu 
lij ni nj ni nj nu ni nj closure gu 
link lij link weight lw gs min spw gu closure gu min minimum function 
intuitively supergraph partition consists border nodes cross partition nodes 
exists pair border nodes fragment reachable path entirely fragment link supergraph link weight minimum path weight shortest paths fragments paths individual fragment 
super denote supergraph partition example fig 
flat graph divided fragments fig 

fig 
border nodes identified form supergraph fig 

fig 
path 
path con tained entirely single fragment 
lw shortest paths fragments sp spw sp spw 
choose minimum shortest path weight 
definition 
hierarchical graph flat graph defined hier partition partition super super 
hierarchical graph hier said level hierarchical graph 
jing hierarchical encoded path views path query processing hierarchical graph multilevel set graphs 
graphs bottom level fragments partition flat graph 
supergraph level say created partition level 
partitioning supergraph graphs level constructed 
graph top level trivial partition fragment supergraph lower level 
set graph fragments level represented gl algorithm create hierarchical graph hier flat graph gp 
pl 
gu fragment gp pl call gu graph lth hierarchical level 
fig 
viewed representation hierarchical graph model levels 
section algorithm creates hierarchical graph flat graph hierarchical graph model 
algorithm create hierarchical graph flat graph create hierarchical graph algorithm outlined fig 

algorithm hierarchical graph hier built bottom line 
partition flat graph created graph partition procedure line 
supergraph contains border nodes graphs level line 
border node pair fragment line path nodes line link border nodes supergraph line 
supergraph generated partitioned create fragments level line 
process continues small supergraph generated required partitioning 
algorithm follows definition hierarchical graph definition 
border gu pl ni nj border gu ni nj li ni nj closure gu ni nj ni nj endif endfor endfor gl endfor fig 

hierarchical graph creation algorithm 

encoding updating hierarchical path views hpv hierarchical graph created section hepv generates fpv fragment levels precomputing pair shortest paths fragment 
collection levels hierarchy called hierarchical path views hpv 
note creation hierarchical graph initial precomputation hpv line tasks see fig 
costs incur considered time 
order achieve high accuracy information stored hpv updated frequently possible underlying link weights link travel time changed 
hpv update cost line dynamic cost minimized efficiently hpv updated frequent update task performed 
frequent updates result accurate hpv 
encoding hierarchical path views assume hierarchical graph hier created corresponding flat graph 
fragment graph ground level gu create maintain fpv section 
graphs higher levels gu pl link nodes ni nj corresponds shortest path ni nj fragment level definition 
link nonground levels represented node node link weight pieces information 
hepv represent entire hierarchical path view model hpv represent stored path views 
ieee transactions knowledge data engineering vol 
may june fig 

hpv hierarchical graph 
fragment id fragment ground level path modeled link crosses hop path respective fragment 
call additional link attributes nexthop 
example fig 
link associ ated attributes means corresponding path link fragment flat graph hop flat path link weight lw 
link models path underlying flat graph hierarchical graph constructed nexthop link jointly identify direct successor path 
reason kind link representation optimize path retrieval hierarchical graph having recursively search hop iterating hierarchical graph direct access hop level hierarchy 
node ground levels encoded path view structure corresponds table tuples destination nexthop 
attributes destination nexthop fpv definition identify ground level fragment nexthop shortest path crucial optimal path retrieval hepv 
definition 
hierarchical graph hier encoded path table node ni gu defined ep spw nj nk gu gu nk nexthop sp gu spw gu shortest path weight respect gu jing hierarchical encoded path views path query processing algorithm hier create hpv hierarchical graph hier gu lw gu endfor endfor endfor pl ni nj border gu ni nj ni nj closure gu ni nj spw lw gu gv lw gv spw gu endif endif endfor endfor endfor fig 

hpv encoding algorithm 
ep spw nj gu gu nk nv nexthop shortest path sp gu pl note nk node ground level flat graph may level example fig 
encoded path view structure node denoted tuple tells shortest path weight spw hop shortest path sp node frag ment definition 
hierarchical graph hier gu pl hpv set encoded path tables nodes gu pv ni gu gu 
specific encoded path view lth level denoted pv pv pv pv 
gpl definition 
hierarchical graph hier hierarchical path view hpv pv pv pv 
words hpv hierarchical graph hier corresponds set encoded path tables associated node nodes levels 
example hpv fig 
corresponds set encoded path tables level level 
algorithm encodes hpv called fig 

algorithm calls functions creates fpv fragment invoking pair shortest path algorithm 
ni nj returns fragment level link ni nj belongs 
algorithm encodes hpv hierarchical graph starting ground level upwards top level 
level encodes path views level invoking pair shortest path algorithm line 
encoding path view level algorithm initializes updates link weights higher level 
lines guarantee weight link ni nj higher level equals minimum weight shortest paths ni nj entirely contained fragment level definition 
values shortest path weights obtained directly associated path views computed hpv encoding 
updating hierarchical path views hierarchical graph link weight fragment flat graph changed possibly corresponding link weights graphs higher level hierarchical graph may affected 
happen link say graph gu level longer models shortest path sp gu supergraph partition level 
important property hepv structure ieee transactions knowledge data engineering vol 
may june algorithm hier gv update hierarchical graph hier hpv 
gv fragments link weights changed 
gv gv gv gv endfor marked gv gv gv ni nj border gv ni nj ni nj closure gv ni nj gu lw gu spw gv continue endif lw gu need update hpv affected graphs hierarchical level unaffected graphs touched 
fpv approach path view typically affected strongly connected graph transportation data sets links changed 
update algorithm fig 
incrementally updates hierarchical graph hpv link weights fragments change 
algorithm calls functions marks fragment needs updated 
fragment updated 
creates encoded path view fragment pair shortest path algorithms 
returns fragment level contains link ni nj 
returns fragment say gu level shortest path weight spw gv corresponds link weight lw gu spw gv lw gu 
gv ni nj closure gw pl spw lw gw gu lw gu spw gw endif endfor endif endfor endfor endfor fig 

hpv update algorithm 
algorithm marks fragments contain links weights changed lines 
updates hpv starting ground level upwards top level reached 
level algorithm path views marked fragments lines 
connected border node pair lines shortest path weight contributes weight associated link higher level changed shortest path weight corresponding level link smaller weight link lines weight link updated definition lines 
fragment link belongs level marked hpv update line order path views level updated properly lines iteration 
optimal path retrieval hepv section optimality theorems assure path query issued hepv system level gives optimal path computed original graph level hepv 
jing hierarchical encoded path views path query processing hepv structure optimality theorems develop hierarchical path retrieval algorithms 
optimality retrieved hierarchical paths optimality theorem shows shortest path weight computed supergraph corresponds actual shortest path weight graph partition supergraph 
theorem 
partition graph supergraph partition node pair na nb spw spwg 
proof 
prove contradiction 
suppose spw spwg 
defini tion supergraph definition link corresponds shortest path na nb context fragment fragment subgraph flat graph definition spw spwg 
path pg border nodes nodes represented sequentially node sequence na im path weight repre sented im 
simple reasoning called principle optimality shortest path weight spwg denoted spwg spwg spwg spwg im 
border node sequence successive border nodes correspond border node entering fragment border node leaving fragment 
successive pair nodes border node sequence na im belong fragment say na im jm shortest path spg consists nodes fragment gj spwg spw 
similar reason gj spwg spw gj spwg im spw im 
rewrite spw spw spw gj spw spw im 
gj definition supergraph definition link weight lw equal minimum shortest path weights shortest paths fragments path na spw lw 
similarly gj spw lw gj spw im im 
know spwg spwg spwg spwg im equation spwg lw lw lw 
assumption spw spw results spw lw lw lw im 
formula says exists path na nb supergraph results path smaller path weight shortest path weight na nb supergraph contradiction 
proved theorem 
hierarchical graph defined recursively partitioning building theorem applied hierarchical graph results corollaries 
corollary 
hier hierarchical graph 
node pair na nb supergraph spw spwg 
corollary 
hier hierarchical graph 
node pair na nb supergraph spw spw 
corollary direct extension theorem hierarchical situation 
trivial prove corollary treat flat graph partition supergraph corollary 
hier hierarchical graph 
node pair na nb supergraph spw spwg 
straightforward prove corollary induction corollary corollary 
established shortest path computed supergraph level hierarchy corresponds actual shortest path flat graph globally minimal 
corollary 
hier hierarchical graph 
node pair na nb supergraph spw spwg 
ieee transactions knowledge data engineering vol 
may june corollary special case corollary states shortest path weight computed graph top level corresponds actual shortest path weight flat graph hierarchical graph hier constructed 
theorem presents method compute shortest path partition supergraph source destination nodes fragment may necessarily nodes supergraph 
shortest path weight minimum local shortest path weight fragment minimum possible concatenated shortest paths composed segments na border node ni ni border node nj nj nb 
theorem 
partition graph supergraph na nb local gu holds spw min spw gu min spw gu spw spw ni nj border gu ni nj 
proof 
paths na nb classified categories case path consists solely links frag ment gu case path consists links fragment gu fragments 
paths case path weight na nb denoted pw gu 
paths kind know shortest path na nb defined gu spwg spw 
means shortest path gu computed local fragment information 
path case consists links represented node sequence na im path contains links fragments leave fragment gu ultimately come back 
path contains border nodes ni nj ni nj border gu ni nj 
choose ni node nj node path 
path weight particular path denoted 
assume node sequence shortest path na ni nj nb 
principle optimality spwg spwg spwg spwg 
shortest path spg consists links fragment gu falls case 
spwg spw 
similarly spwg gu spw gu 
spwg theorem spwg spw 
follows shortest path weight na nb context flat graph spwg spw spw gu spw gu 
equation know shortest path sp path set sp gu sp sp gu nj border gu ni nj 
shortest path weight spw represented spw min spw gu spw spw ni nj border gu ni nj 
combining case case spw min spw gu min spw gu spw spw ni nj border gu ni nj 
extending theorem hierarchical graph corollaries 
corollary 
hier hierarchical graph gp 
na nb local gu holds spwg min spw min spw spw gu gu spw ni nj border gu ni nj 
corollary 
hier hierarchical graph gl pl 
na nb local gu pl holds spw min spw min spw spw gu gu spw ni nj border gu ni nj 
theorem presents method compute shortest path weight partition supergraph source jing hierarchical encoded path views path query processing destination nodes different fragments 
weight shortest path node na node nb corresponds minimum possible concatenated shortest paths composed segments na border node ni ni border node nj nj nb 
theorem 
partition graph supergraph na nu nb nv spw min spw gu spw spw gv ni border gu nj border gv 
proof 
path na nb represented node sequence na im ous nodes ni nj exist path ni border gu nj border gv path ultimately leave gu enter gv choose ni node nj node possible ni nj frag ments gu gv adjacent 
path weight flat graph 
assume node sequence shortest path na nb na ni nj nb 
principle optimality spwg spwg spwg spwg 
shortest path spg consists nodes fragment gu shortest path spg con sists nodes fragment gv spwg spw spwg spw 
gu gv nodes ni nj theorem spwg spw 
shortest path weight spwg represented spw spw gu spw spw gv 
equation know shortest path sp path set sp gu sp sp gv ni border nj border gv 

na border gu na ni nb border gv nb nj possible fragments gu gv adjacent case ni nj accordingly shortest path weight spw represented spw min spw gu spw spw gv ni border gu nj border gv 
get corollaries extending theorem hierarchical graph 
easily substitute arbitrary partition resulting supergraph graph corollary 
hier hierarchical graph gp 
na nu nb nv holds spwg min spw spw spw gu gv ni border gu nj border gv 
apply theorem fragment level hierarchical graph 
corollary 
hier hierarchical graph gl pl 
na gp nu nb nv pl holds spw min spw spw spw gu gu gv ni border gu nj border gv 
corollaries state compute optimal shortest path weight hierarchical graph 
fact source destination node pair recursively corollaries calculate shortest path weight 
discuss shortest path retrieval algorithms detail section 
path retrieval hepv structure hierarchical path views section optimality theorems section shortest path retrieval algorithm spr fig 

retrieve shortest path weight spwg nexthop nc hepv system algorithm fig 
checks subpaths combined border node pairs consists border nodes fragments na nb belong line respectively 
function ni nj supergraph shortest path retrieval retrieves shortest path weight spw supergraph nexthop path sp line 
shortest path weight spw flat graph minimum concatenated path weights lines ieee transactions knowledge data engineering vol 
may june algorithm spr na nb return nc spwg retrieve shortest path weight spwg nexthop nc shortest path sp hierarchical graph hier gp na gu nb gv 
spw ni border gu nj border gv spw spw gu spw spw gv spw spw spw gu spw spw gv na ni nc ep nexthop gu endif endif endfor spw spwg gu ep gu nexthop spw spw gu endif fig 

shortest path retrieval algorithm spr 

case source destination nodes fragment line corollary need check local shortest path sp gu lines 
words algorithm direct implementation path retrieval strategies shown corollary corollary 
fig 
function na nb retrieves shortest path weight spw nexthop supergraph level spw retrieved directly encoded path view lines 
corollary need compare paths concatenated border nodes involved fragments line find path minimum path weight lines 
case source destination nodes fragment corollary need check local shortest path lines 
function recursively called line line 
correctness shortest path retrieved spr algorithm guaranteed optimality theorems 
algorithm optimized source destination nodes query appear top graph hierarchy 
corollary query answered directly encoded path view graph reason recursive function optimized source destination nodes say na nb query appear graph level say corollary spw spwg start retrieve shortest path level eliminates having call function recursively lower levels 
retrieval shortest path hepv level efficient fpv approach simple look fpv due calling recursive function comparing concatenated local global paths experiments see section show significantly faster compute fly approach 
algorithm needs compare local shortest paths concatenated border nodes involved fragments 
appropriate partition flat graph number border nodes fragment smaller total number nodes fragment 
note performance spr algorithm independent number nodes shortest path algorithms 
spr preferable algorithms long path retrievals 
computational complexity spr algorithm exhaustive search possible paths exponential number hierarchical levels 
level hierarchical graph hier assume simplicity fragment number border nodes retrieve shortest path weight spwg spr algorithm needs compare possible concatenated local paths level supergraph paths level line spr algorithm calculate shortest path sp supergraph level function needs compare possible concatenated jing hierarchical encoded path views path query processing function na nb return nc spw retrieve shortest path weight spw nexthop nc shortest path sp hierarchical graph gu gl nc ep nexthop gu spw pl na nb gv pl ni border gu nj border gv nc spw ni nj gu spw gu spw gu spw gv spw spw spw gu spw gu spw gv na ni nc ep nexthop gu endif endif endfor spw spw gu ep gu nexthop spw spw gu endif return nc spw fig 

supergraph shortest path retrieval function 
local paths level supergraph paths level line function function retrieves shortest path weight top graph hierarchy 
computational complexity spr algorithm number hierarchical levels 
indicates balance number levels versus number fragments level define hierarchical graph 
empirical evaluation section confirms analysis 
experimental evaluation comprehensive set experiments evaluating performance hepv 
kinds graphs grid graph synthetic grid graphs correspond grid patterns randomly assigned link weights 
grid graphs experiments lend nicely controlling graph characteristics sizes numbers fragments 
random graph random graph general graph 
node randomly located prespecified area randomly assigned degree 
link created randomly picked nodes 
random graphs generated strongly connected graphs node reachable node 
real map available line street maps troy county surrounding areas detroit 
real data set verify validity kinds synthetic graphs 
experiments conducted sun sparc workstation mb main memory 
experiment repeated times results correspond average runs 
test computer dedicated machine experiments conducted night tasks processed machine variations minimized 
path retrieval tests runs results different paths 
result variations runs caused length difference paths tested 
comparative results similar terms relative performance runs outliers 
conducted experiments levels levels sufficient sizes maps interested hierarchy levels advantageous large network ieee transactions knowledge data engineering vol 
may june fig 

features hierarchical graph 
nodes 
section experimental results hierarchies levels 
characteristics hierarchical graph purpose experiment show relationship features hierarchical graph number fragments 
lays foundation understanding behavior hepv respect retrieval encoding storage interpreting experiments sections 
vary number fragments partition measure effects hierarchical graph 
grid graph evenly divide fragments 
average fragment nodes 
total number border nodes np side fragment border nodes 
fragment border nodes 
border node links border nodes supergraph belong fragment average node degree approximately fig 
compares features hierarchical graph number nodes fragment versus number fragments number nodes supergraph versus number fragments average node degree supergraph versus number fragments 
increase number fragments fragment size goes supergraph size goes 
average degree supergraph decreases slowly 
curves match analysis 
characteristics number fragments increases expect computational memory cost hierarchical graph decrease local individual fragments 
simplicity assume affect discussion 
increase supergraph 
experiments sections analyze trade 
encoding hpv experiment goal compare performance gain achieved path encoding due hierarchical graph model 
dijkstra algorithm encoding pair shortest path algorithm similarly 
computational complexity pair shortest paths dijkstra algorithm log graph 
level hierarchical graph partition flat grid graph nodes fragments size 
analysis section fragment nodes supergraph np nodes 
consequently encoding time fragments log log constant 
encoding time supergraph np log np np constants 
encoding time hpv log np 
en coding time fpv log constant 
expected hpv encoding time hierarchical graph fpv encoding time corresponding flat graph sufficiently large experiments real grid maps confirmed 
encoding time hpv versus graph size fig 
shows results experiments grid random real graphs 
find encoding time hpv levels fragments level smaller encoding time fpv types graphs 
encoding time real graph close encoding time grid graph graph size 
confirms transportation network similar grid graph 
increase graph size encoding jing hierarchical encoded path views path query processing fig 

encoding level hpv versus fpv 
fig 

encoding hpv versus hierarchical levels 
time fpv increases sharply encoding time hpv increases relative slowly 
experimental results confirm analytical evaluation clearly demonstrate superiority proposed hpv approach fpv approach 
increase graph size encoding time level hpv increases 
optimize encoding time large graphs create hierarchical graphs levels 
fig 
measure hpv encoding time hierarchical graphs levels 
level hpv fragments level level hpv fragments level fragments level 
results fig 
indicate large graphs node level hpv efficient encode level hpv 
encoding time hpv versus number fragments analytically determined section encoding time fragments log en coding time supergraph np log np 
increas ing number fragments cause encoding time fragments go fragments smaller 
encoding time supergraph increases larger 
interested determining optimal number fragments minimizes total encoding cost 
fig 
shows experimental results measuring encoding time level hpv vary number fragments 
optimal number fragments grid graph ieee transactions knowledge data engineering vol 
may june fig 

encoding time level hpv versus number fragments 
fig 

encoding time level hpv versus number fragments 
nodes 
indicates important run test building path finding system particular data set guarantee optimal setup 
fig 
measure encoding time hpv graph nodes 
vary number fragments level set number fragments level 
results fig 
show optimal setup number level fragments set number level fragment set 
updating hpv steps needed incrementally update hpv level hierarchical graph re encoding changed fragments second updating affected links super graph third supergraph 
cost updating hpv ce cu ce number fragments affected update ce cost fragment assuming fragments size cu cost updating supergraph ce cost supergraph 
cost function linear respect number changed fragments experiments level hpv fig 
match analytical results 
experiment indicates influence changing link weight limited confines fragment link contained necessary propagation change supergraph 
fragments unaffected 
flat graph jing hierarchical encoded path views path query processing fig 

updating time level hpv 
fig 

updating time level hepv 
graph typically affected links changed 
hierarchical grid graph nodes fragments encoding time fragment second encoding time supergraph seconds 
fragments changed cost incrementally updating hpv close cost encoding scratch 
reasonable extreme case approximately amount 
fig 
shows experimental results updating level hpv 
updating time goes sharply fragments updated 
fragments higher levels affected due increased number fragments updated lower levels 
hpv updating time rises sharply fragments updated level 
explained fact fragments updated level fragments higher levels affected updating time fragment level constant 
fig 
indicates fragments updated hpv updating time exceeds encoding time 
hpv incremental updating algorithm fig 
needs identify possibly affected fragments propagate update higher level updated fragment level updating costs incurred encoding scratch fragments updated 
fragments updated experiment prefer re encode hpv incrementally update 
memory requirement study hpv memory requirements hepv model compared flat graph 
flat graph ieee transactions knowledge data engineering vol 
may june fig 

memory requirement hpv versus fpv 
fig 

memory requirement hpv versus hierarchical levels 
nodes partition fragments similar size fragment approximately nodes supergraph np nodes section 
assume matrix store pair shortest path weight tables encoded path structure 
memory required store fpv pair shortest path weight flat graph small constant 
memory required store pair shortest path weight fragments small constant 
memory required encoding supergraph np np small constants 
total memory requirement level hpv np memory requirement fpv fig 
compare memory requirements hpv fpv 
memory requirement fpv increases sharply increase number nodes accordance analysis memory requirement fpv proportional square number nodes 
memory requirement hpv increases slowly increase number nodes confirms hpv requires memory fpv 
fig 
shows memory requirements hpv hierarchical levels 
large graphs hpv requires memory level hpv 
path retrieval performance evaluation compared flat graph savings gain hepv model include smaller path view encoding time section smaller path view updating time sec jing hierarchical encoded path views path query processing tion smaller memory requirements store path views section 
price benefits increase cost path retrieval 
retrieve shortest path weight hpv compare concatenated local shortest paths involved fragments shortest paths supergraph theorem theorem 
clearly incurs computational cost 
comparison implemented heuristic algorithm quite influential research shortest path problems due performance 
estimate function algorithm estimate minimum link weight unit 
estimate euclidean distance nodes times minimum link weight unit distance 
estimate underestimate actual shortest path weight gives correct result 
fig 
vary graph size measure path retrieval time fpv approach hepv model level hpv level hpv algorithm 
fpv efficient simple look encoded path tables suffices retrieve requested shortest path 
level hpv efficient minimal computation needed retrieve shortest path 
level hpv efficient level hpv paths precomputed level hpv represents shorter segments shortest paths precomputed level hpv 
path computation level hpv requires higher number expansions precomputed path segments level hpv 
twolevel hpv level hpv outperform significantly fig 

path retrieval times 
algorithm precomputing shortest path segments searches paths expanding individual link 
number link expansions search larger path retrieval hierarchical path views hepv model 
hepv model highly efficient path retrieval compared compute demand approaches 
related considerable effort devoted investigate transitive closure problems 
algorithms algorithm matrix representation calculation dijkstra algorithm graph traversal 
various methods proposed improve standard transitive closure algorithms databases 
agrawal jagadish disk hybrid algorithms combine features graph algorithms 
special access structure transitive closure queries proposed improve disk agrawal jagadish ausiello italiano huang studied incremental algorithms path computation 
new computer architecture computer network traditional algorithms adapted parallel distributed transitive closure algorithms 
capability efficiently calculating shortest path transitive closure active research topic advanced application domains route guidance 
hand materialized view transitive closure alternative approach precomputing maintaining transitive closure 
path view approach request shortest path achieved looking view eliminating need compute fly 
path precomputation approach ieee transactions knowledge data engineering vol 
may june proposed 
shown encoding structure acceptable storage overhead compared maintaining possible paths 
previous studied trade precomputing compute demand approaches context 
applied encoded structure type graphs developed incremental algorithms handle cyclic graphs 
related studied nonhierarchical path view algorithms 
previous efforts focused idea hierarchical structures 
proposed idea distributed parallel transitive closure computation 
approach divides relation fragments 
answer path query needs determine fragments path traverses perform computation fragments 
approach prefers fragmentation graph fragmented relation acyclic 
cost path query depends number fragments path traverses 
continuous notion high speed fragment 
unfortunately formation high speed fragment sensitive update underlying base relation authors recommended approach base relation stable 
shekhar proposed hierarchical algorithm navigation systems efficient flat guarantee optimality retrieved paths 
jung proposed hierarchical multigraph model dividing graph nodes pushing precomputed paths links boundary nodes 
address issue graph partitioning break map smaller important hierarchical graph creation influential performance path retrieval 
hierarchical graph refreshing inherent road navigation reflect dynamic traffic conditions handled 
data decomposition techniques studied proposed heuristics divide large database domains 
experimental evaluation optimal data clustering partition technique proposed acceptable due exponential complexity suggested suboptimal algorithm results fragments flat graph unnecessarily border nodes adverse effect efficiency path retrieval hepv 
center algorithm raises problem choosing center nodes fragment may difficult large graphs 
related effort studied data clustering techniques map databases evaluated current clustering algorithms 
evaluation devised partition algorithm proposed creating hierarchical graph 
propose hierarchical encoded path views hepv model optimizes shortest path query processing 
hepv divides large graph smaller graph fragments organizes hierarchical man ner 
path view storing pair shortest paths fragment precomputed frequently updated 
path computation hepv corresponds expanding shortest path segments stored path views 
pair shortest path view confined small graph fragment hepv efficient path view update storage costs shortest path precomputation approach entire flat graph 
hepv computes paths concatenating shortest path segments computed path computation compute demand approach searches paths expanding individual graph links 
prove paths computed hepv optimal 
conducted comprehensive set experiments sun sparc workstation grid graphs graphs real map data sets 
experimental results confirm superiority hepv model 
example graph nodes takes seconds encode path views level hepv seconds flat graph approach 
memory requirement needs mbytes takes close mbytes 
retrieve path graph nodes average time needed level hepv milliseconds times shorter approach 
large graphs hepv efficient path view encoding storage efficient level hepv 
general hepv model represents excellent compromise compute demand versus precomputing paths 
appropriate number levels hepv determined graph sizes required path query time constraint 
contributions proposed hepv developed link sorting partition algorithm efficient large map fragmentation developed algorithms create maintain hepv algorithm retrieve optimal shortest path proven optimality shortest path retrieved hepv conducted extensive experiments evaluating hepv approach contrasting alternative solutions 
plan extend hierarchical graph model parallel distributed environment 
extension hierarchical graph model constrained spatial temporal constraints path findings needs addressed 
acknowledgments supported part university michigan center excellence 
sub sponsored department transportation michigan department transportation 
grateful partial support national science foundation nyi 
jing hierarchical encoded path views path query processing intel illustra 
ning jing contribution research visiting department electrical engineering computer science university michigan supported part state education commission peoples republic china 
elke rundensteiner department electrical engineering computer science university michigan performed 
agrawal dar jagadish direct transitive closure algorithms design performance evaluation acm trans 
database systems vol 
pp 
sept 
agrawal jagadish efficient search large databases proc 
th vldb conf 
pp 

agrawal jagadish materialization incremental update path information proc 
fifth int conf 
data eng pp 

agrawal jagadish hybrid transitive closure algorithms proc 
th vldb conf brisbane australia pp 

agrawal access structure generalized transitive closure queries proc 
ninth int conf 
data eng pp 

ausiello italiano incremental algorithms minimal length paths algorithms vol 
pp 

bellman routing problem quarterly applications math vol 
pp 

cormen leiserson rivest algorithms mit press 
dijkstra note problems connection graph theory numerische mathematik vol 
pp 

egenhofer special spatial 
database requirements vehicle navigation geographic space proc 
acm sigmod int conf 
management data pp 

apers ceri complex transitive closure queries fragmented graph proc 
third int conf 
data theory lecture notes computer science springer verlag pp 

apers ceri distributed transitive closure computations disconnection set approach proc 
th vldb conf pp 

apers data fragmentation parallel transitive closure strategies proc 
ninth int conf 
data eng pp 

ceri parallel hierarchical evaluation transitive closure queries proc 
int conf 
parallel distributed information systems pp 


huang jing rundensteiner semi materialized view approach route maintenance intelligent vehicle highway systems proc 
second acm workshop geographic information systems pp 
nov 

huang jing rundensteiner hierarchical path views model fragmentation transportation road types proc 
third acm workshop geographic information systems pp 
nov 

huang jing rundensteiner path queries transportation networks dynamic reordering sliding window paging techniques proc 
fourth acm workshop geographic information systems nov 

huang jing rundensteiner evaluation hierarchical path finding techniques route guidance proc 
sixth ann 
meeting am 

huang jing rundensteiner effective graph clustering path queries digital map databases proc 
fifth int conf 
information knowledge management pp 


huang jing rundensteiner integrated query processing strategies spatial path queries proc 
int conf 
data eng appear 
hua su hua efficient evaluation transitive recursive queries connectivity index proc 
ninth int conf 
data eng pp 

implementation performance evaluation parallel transitive closure algorithm prisma db proc 
th vldb conf pp 

ioannidis ramakrishnan efficient transitive closure algorithms proc 
th vldb conf pp 

ioannidis ramakrishnan transitive closure algorithms graph traversal acm trans 
database systems vol 
pp 
sept 
jing 
huang rundensteiner hierarchical optimization optimal path finding transportation applications proc 
fifth int conf 
information knowledge management pp 

jung graph model topological road maps navigation systems proc 
th int conf 
data eng pp 

ii intelligent optimal path prediction vehicular travel ieee trans 
systems man cybernetics vol 
pp 
feb 

lee multiple path routing strategy vehicle route guidance systems transportation research vol 
pp 

federal systems architecture phase final report federal highway admin 
mccormick jr schweitzer white problem decomposition data reorganization clustering technique operations research vol 
pp 

pearl heuristics intelligent search strategies computer problem solving addison wesley reading mass 
shekhar coyle path computation algorithms advanced traveler information systems proc 
ninth int conf 
data eng pp 

yang shekhar hancock path planning evaluation databases pp 

ning jing received bs ms degrees electrical engineering phd degree computer science institute technology peoples republic china 
currently faculty member department electrical engineering institute technology 
visiting scholar department electrical engineering computer science university michigan 
current research interests include object relational databases multimedia databases databases internet information services geographic information systems 
dr jing received high education award state department outstanding visiting scholar state education commission 
yun wu huang received bs degree management science national tung university ms degree computer science indiana university 
currently phd candidate department electrical engineering computer science university michigan 
worked computer professional areas database computer network 
current research interests include databases multimedia databases geographic information systems 
ieee transactions knowledge data engineering vol 
may june elke rundensteiner received bs degree johann wolfgang university frankfurt west germany phd degree university california irvine 
currently associate professor worcester polytechnic institute department computer science having assistant professor department electrical engineering computer science university michigan 
dr rundensteiner goal develop database technology address model ling querying requirements advanced applications 
current research efforts include object oriented databases view techniques data warehousing database evolution multimedia databases geographic information systems 
received numerous honors awards including fulbright scholarship national science foundation young investigator award databases intel young investigator engineering award ibm partnership award 
member ieee acm 
