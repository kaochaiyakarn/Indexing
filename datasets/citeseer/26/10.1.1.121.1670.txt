architecture performance analysis david garlan school computer science carnegie mellon university mail sprite cs cmu edu garlan cs cmu edu software architecture expose important system properties consideration analysis 
properties frequently interest determining acceptability software design 
show queueing network modeling adapted support performance analysis software architectures 
describe tool transforming software architecture particular style queueing network analyzing performance 

important issue engineering complex software systems determining system performance 
currently estimating performance system advance building black art relying previous experience local knowledge ad hoc techniques 
unfortunate systems possible fairly predictions expected performance individual parts 
able try various scenarios contrasting adequacy different designs different assumptions 
emerging approach dealing problems take architectural view software 
software architecture system determines structure collection interacting components 
operating research sponsored defense advanced research projects agency rome laboratory air force materiel command usaf agreement number national science foundation 
ccr 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency rome laboratory government 
level abstraction hope able reason straightforward way system properties performance reliability take simple example consider mini architecture illustrated contains interacting components web server web client database 
assume client requests server receives responses asynchronously 
server may request database process filling client request 
acceptability design depend unanswered questions concerning performance system web site handle anticipated demand 
average response time 
large buffers 
maximum acceptable response time highest demand web site handle 
suppose demand expected peak brief periods degraded performance time acceptable 
performance degrade 
component bottleneck 
upgraded replicated 
transmission rate data affect performance 
client proceedings conference software engineering knowledge engineering server database 
internal web site unfortunately architectural designs characterized informally provide weak support system level analyses 
result may difficult answer questions degree precision 
stumbling blocks architects limited arsenal concepts tools carry analyses architectural level design 
estimates performance determined system components may difficult derive system behavior 
ideally needed way exploit system designers knowledge derive expected performance system performance related attributes parts 
fortunately mathematical model exists similar domain 
queueing network theory computer systems performance analysis predict attributes system attributes parts 
queueing network processes jobs 
elements queueing network hardware devices queue 
jobs require service set devices wait queue desired device busy 
job exists device queue time 
adaptation technique software architecture performance analysis straightforward glance 
hardware devices replaced software components 
job replaced sequence requests service 
component receives processes requests request completed component may send new request service component 
path sequence requests determined converting connections components described architecture acyclic directional graph 
adaptation overly simplistic incomplete evident applied examples simple web site example 
particular adaptation implicitly assumptions inappropriate context 
example assumes jobs service requirements connectors significantly affect performance 
order apply queueing network analysis software architecture examine resolve problems 
show adapt queuing network theory applied significant class architectural designs 
doing show bring system building analysis knowledge bear design process harnessing existing analysis technique new domain 
briefly reviewing relevant elements queueing network theory 
consider straightforward application theory 
powerful applied limitations ideal 
show basic ideas extended handle broader class system including cycles autonomous clients replicated services connector delays 
briefly describe implementation tool carries architecture performance analysis outline directions line research 

queueing network theory set stage brief queueing theory 
cover essentials product form networks 
basic units queueing network service centers queues queue buffer queueing discipline fifo round robin preemptive resume 
service center provides necessary service 
examples include bank teller hardware device database 
service center queue containing jobs process 
replicated service center represents identical providers service draw jobs single queue 
example airline baggage check counter line customers ticket agents 
infinitely replicated service center called delay center may model transmission delay 
queueing network analysis produce results individual queues associated service centers network 
derive performance characteristics individual service centers important pieces information known average time service center takes process job service time average rate jobs arrive arrival rate 
service time time job arrivals usually taken exponential distributions 
exponential probability density function expected value called memoryless expected time left wait regardless time passed 
renders history system unimportant greatly simplifying analysis 
assume exponential distributions return issue section 
information results queueing theory possible calculate single queue utilization service center occupied 
average time job spends waiting queue 
average queue length 
probability queue length system stable overloaded 
overloaded system queue grows faster jobs processed server keep 
queue implemented buffer length rate incoming jobs discarded due buffer overflow drop rate 
queueing network interconnected group queues 
jobs enter network receive service service centers leave 
average rate jobs enter network system arrival rate known 
service center service time known detailed treatment see lazowska sauer 
distribution known non exponential close 
larger variance analysis optimistic 
rate jobs arrive queue relative system arrival rate relative arrival rate 
addition results possible calculate expected values latency time job completely processed throughput rate jobs processed number outstanding jobs system utilized service center possible bottleneck 
system arrival rate queue relative arrival rate determine actual arrival rate queue 
relative arrival rate may specified known derived probabilistic path job network 
example jobs leaving web server may chance proceeding database 
transition probabilities expressed set linear equations solved relative arrival rates 
systems process kinds jobs 
model jobs different behavior queue divided job classes purposes job class affect destination job service times processing order 
transition probabilities specified job classes queues 
example context example architecture may job class web server proceed database job class server proceed client 

application software architecture simplest possible translation queueing analysis architectural terms 
simple analysis sufficient systems weak 
resolve problems extending translation section 
translation distributed message passing architectural style design fairly close queueing network equivalent 
components represent distributed processes 
connectors style directional represent asynchronous message streams messages queued processing components 
assume component single queue messages processed fifo order 
component processes message may produce new messages result 
message entering system corresponds queueing network job component finishes processing sends new message component new message represents job 
job exists sequence time individual messages completed sequence terminates 
illustrate consider simplification example 
jobs messages arrive outside visits client server database queueing disciplines permissible see section 
finished 
jobs arrive system second jobs arrive component queue 
components service times sc ss sd 
automated analysis add service time property component arrival rate property system 
utilization component ui rsi average queue length qi ui average response time si ui 
average population pi ui ui comprising jobs queue jobs receiving service 
probability pi system population sum components populations system response time suppose sc ss sd ms expect system response time utilization database component 
component close overloaded long queue high latency 
average queue length elements probability length 
estimated sd turns slightly larger database unable keep 
system acceptable database upgraded 
results useful technique limited applicability reasons 
assumes set services required job implicit architecture job visits service center 
case 
notion autonomous clients 
jobs arrive outside known rate components issue new jobs original example 
bottleneck system component responsible replicated distribute load device 
modeling software architecture level desirable require careful consideration 
connectors components add delays affecting system response time 
certainly included model 
complications understanding level software architecture requirements assumptions natural mathematical level may inherent hardware component level degree service center loaded affect service time 

extending model having observed inadequacies simple translation illustrated describe key extensions translation widely applicable 

cycles original architecture processed kinds jobs 
fetch visits client server client query visits client server database server client 
analyze performance system necessary attach additional information architecture component list kinds messages corresponding job classes services transition probabilities system list incoming job classes arrival rates 
properties create set linear equations components relative arrival rates enabling analysis 
example system information follows 
server receive kinds messages etch query client answer database 
client receive start outside server 
suppose jobs fetch rest query 
client finishes processing start sends server etch sends query 
server finishes etch answer sends client 
server finishes query sends message database database finishes message send server answer 

autonomous clients original architecture jobs generated web client 
system easily transformed jobs arrive outside 
complex system components initiate jobs various classes tedious transform hand 
job generation remain associated components transformation added automated analysis 
add client properties specifying classes generation rates initiated jobs 
system properties added longer specified calculated client properties 
effective system arrival rate sum clients generation rates 
open question request generation take usual service time negligible amount time example system appropriate 

replication obvious ways deal bottleneck component replicate speed reduce demand system 
options may vary expense difficulty system 
considering tradeoffs helpful compare performance improvement result applying different service time violate assumption needed keep mathematics simple 
option level expense 
results calculated techniques discussed 
purposes analysis instances replicated component identical 
creates problem jobs processed systems distinguish instances replicated components 
web example job initiated client returns client final processing display 
replicating client result optimistic prediction model attribute final processing client busy 
consider rate replicated client generates requests 
generation rate redefined rate instance rate alternative simply specify rate inconvenient degree replication changed 
individual analysis replicated component somewhat complicated ordinary component queue grow jobs service 

delay connectors example connectors abstraction creating sending messages 
far effect system performance neglected 
reality transmission delays increase system response time 
service centers model connectors model assumes message transit time may produce inflated response times 
model connector delay center 
arrival rate equal arrival rate component fed connector 
connector delay time property representing average time takes message traverse connector 
connector transmission delay affects system response time delay time connector traversed job added job response time 
affect component performance bottlenecks 

example revisited consider new version example section 
messages traversing connectors incur transmission delay 
jobs longer required visit component exactly job returns client final processing jobs visit database 
replication permissible option 
illustrate extensions terms model assume true system 
estimated service times sc ms ss ms sd ms delay dcs connectors client server delay dsd connectors server database ms client generates kinds jobs fetch query described section 
client generates fetches queries second 
information calculate various performance characteristics system 
effective arrival rate system sum generation rates 
transition probabilities system arrivals calculated generation rates 
system request generation takes essentially time system arrivals sent server sent client service 
section possible calculate relative arrival rates transition probabilities 
relative arrival rate server fetch query 
database fetch query 
client system arrivals sent server mimic negligible client generation time 
section relative arrival rates connectors components queues feed 
section return equations section 
utilization database 
server 
client 
database closest bottleneck greatest interest 
average queue length messages response time ms average population system messages transit 
section average system response time 
due delay client server 
suppose database considered upgrade 
assume replaced single instance service time ms identical instances service time ms compare performance options assuming rest system remains unchanged 
option average messages queue receiving service average queue length 
second option queue length 
utilizations second option better able handle average load 
response times ms ms performance standpoint second option better choice factors expense may factor final decision 
cf 
section 
implementation status distributed message passing style described implemented style aesop 
basic component type process connector type 
directional 
aesop environment allows user graphically construct software architecture style enter numbers needed analysis component connector workshops run analysis tools architecture 
numeric aesop acme acme analysis tool 
performance analysis aesop analysis results expected queue length displayed workshops 
results indicated graphically overloaded components unable keep anticipated demand highlighted 
style provides option components set degree replication 
effect option alter component appearance change predicted performance described section 
analysis tool automatically performs transformations described 
reads text file containing architecture described acme determines transformations apply analyzes resulting network outputs acme description annotated results analysis 
aesop exports imports acme descriptions making results visible user 
typical scenario user begins iterative design process constructing top level design 
estimates service times components names job classes fills transition probabilities 
user runs performance analysis tool 
results may replicate bottleneck components decompose components provide estimates lower level refine design 
making informed modifications repeats process acceptable architecture 

discussion shown apply queueing network modeling software architectures particular style 
naive adaptation sufficient simple architectures proves inadequate interesting designs 
useful extensions illustrated 
concerns remain 
performance predictions unreliable estimates supplied user 
application restricted style 
underlying mathematical assumptions restrict systems modeled 
consider turn 
dependence unreliable data unavoidable 
estimates early design process completely accurate performance analysis relies inputs 
reason take final answer 
performance analysis tool rerun design altered accurate estimates available providing user incrementally improving feedback 
application queueing network analysis extended architectural styles 
distributed message passing style intended mesh usual assumptions simple queueing network model 
expect styles violate style specific transformation original architecture needed produce tractable queueing network 
pipe filter style example modeling systems fan fan presents problem meet assumption jobs exist exactly queue service center time 
fortunately techniques exist repeatedly collapsing subnetworks approximately equivalent composite queue allowing job occupy set service centers simultaneously declaring passive resources systems approximated applying techniques 
believe styles amenable similar adaptation results 
remains area research 
earlier mathematical assumptions particular probability distributions assumed exponential 
results queueing theory discussed include analysis queues known distributions 
adapted software architecture approach described allowing users estimate performance systems distributions 
working details distributions item research 
style architecture designed constrains design particular ways 
described basic queueing analyses powerful queueing theory results exist incorporated tool 
knowledge style constraints select appropriate queueing theory techniques automatic transformation analysis may feasible designs style 
conversely architect criteria selecting style may include amenability analysis 

related bodies related exist 
area classical results queueing theory 
great deal done queueing theory texts available lazowska sauer jain 
build applying different domain interpreting results software design world 
noted issues resolved order 
second area architecture analysis 
architecture static analysis important growing area 
types analyses include real time systems unicon aesop component connector protocol compatibility reliability block diagrams adaptability saam 
adaptation queueing network modeling adds repertoire available static analysis tools complementing growing body architecture notations toolsets 

developers acme library bob monroe drew provided infrastructure analysis tool 
acknowledge developers aesop environment provided front tool 
abd 
extending reliability block diagrams software architectures 
technical report usc cse university southern california mar 
allen garlan 
formal basis architectural connection 
acm transactions software engineering methodology july 
garlan allen 
exploiting style architectural design environments 
proceedings sigsoft second acm sigsoft symposium foundations software engineering pages 
acm press dec 
garlan monroe 
acme architecture description interchange language 
proceedings cascon nov 
jain 
art computer systems performance analysis 
john wiley sons new york ny 
kazman abowd bass clements 
scenario analysis software architecture 
ieee software pages nov 
kazman bass abowd webb 
saam method analyzing properties software architectures 
proceedings th international conference software engineering pages sorrento italy may 
lazowska quantitative system performance computer system analysis queueing network models 
prentice hall englewood cliffs nj 
sauer chandy 
computer systems performance modeling 
prentice hall englewood cliffs nj 
shaw deline klein ross young 
abstractions software architecture tools support 
ieee transactions software engineering special issue software architecture apr 
