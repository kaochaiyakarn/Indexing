software practice experience softw 
pract 
exper prepared speauth cls version design cgal computational geometry algorithms library andreas fabri geert jan giezeman lutz kettner stefan schirra sven sch abb baden switzerland email andreas fabri abb ch utrecht university netherlands email geert cs uu nl eth rich switzerland email kettner inf ethz ch max planck institut informatik saarbr cken germany email mpi sb mpg de freie universit berlin germany email sven inf fu berlin de summary cgal computational geometry algorithms library written developed research groups europe israel 
goal large body geometric algorithms developed field computational geometry available industrial application 
discuss major design goals cgal correctness flexibility ease efficiency robustness approach reach goals 
generic programming templates plays central role architecture cgal 
give short generic programming compare object oriented programming paradigm examples paradigms effectively cgal 
give overview current structure cgal library consider software engineering aspects cgal project 
copyright john wiley sons key words computational geometry software library generic programming geometric algorithms arise various areas computer science 
computer graphics virtual reality computer aided design manufacturing solid modeling robotics geographical information systems computer vision shape reconstruction molecular modeling circuit design known examples 
research specific geometric problems areas led general study geometric algorithms field computational geometry 
lot efficient geometric methods data structures developed subfield algorithm design past decades 
techniques way practice 
important cause correspondence stefan schirra max planck institut informatik im stadtwald saarbr cken germany ccc received august copyright john wiley sons revised july accepted may fabri 
giezeman kettner schirra sch fact correct implementation simplest algorithms notoriously difficult task 
particular aspects need dealt close gap theoretical results computational geometry practical implementations 
precision problem 
theoretical papers assume exact arithmetic real numbers 
correctness proof algorithms relies exact computations replacing exact arithmetic imprecise built floating point arithmetic general 
second degeneracy problem 
theoretical papers exclude degenerate configurations input algorithms describe 
typically degeneracies problem specific involve treatment special cases algorithm 
simple examples configurations considered degenerate duplicate points point set lines intersecting point 
problems difficult handle degeneracies problems special case treatment solution general problem amount considerable fraction coding effort especially handling degeneracies treated afterthought 
theory approach excluding degeneracies consideration justified argument degenerate cases rare set possible inputs real numbers input set randomly chosen real numbers 
argument important understand general case treating special cases 
practice degenerate inputs occur frequently 
instance coordinates geometric objects may randomly chosen real numbers lie grid example may created clicking window graphical user interface 
applications called degeneracies high valued design example architecture features buildings align purpose 
consequence library address handling degeneracies 
precision problem degeneracy problem advanced algorithms bring additional difficulty frequently hard understand hard code 
reasons impractical users implement geometric algorithms scratch 
remedy situation computational geometry library providing correct efficient reusable implementations needed 
library called cgal computational geometry algorithms library developed common project universities research institutes europe israel 
discuss design software library 
sites contributing cgal utrecht university netherlands eth rich switzerland freie universit berlin germany martin luther universit halle germany inria sophia antipolis france max planck institut informatik saarbr cken germany risc linz austria tel aviv university israel 
participating sites leading field computational geometry europe ample experience implementation geometric algorithms 
cgal library central task successive esprit iv ltr projects names cgal 
goal projects large body geometric algorithms developed field computational geometry available industrial application 
copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal cgal library key tool reaching goal 
basis implementations geometric algorithms cooperative projects industrial partners 
projects litmus test library 
feedback cooperations ensure cgal serves industrial needs 
cgal project overcome aforementioned problems arising implementation geometric algorithms implementation effort accompanied research problems 
select best solutions practice experimentation needed 
computational geometry potential application areas different needs flexibility library components especially adaptability modularity library important design issues cgal 
course correctness ease efficiency design goals cgal 
providing decent amount functionality common important computational geometry design goal long list 
design goals cgal discussed third section 
decided design cgal library 
supports designs wanted widely standardized compilers approaching standard language 
cgal seen part global european effort provide algorithmic software enhance technology transfer industry decision partially motivated corresponding decisions related libraries leda 
panacea 
hardly called simple elegant language 
eiffel smalltalk properly object oriented lack acceptance 
java considered slow industrial strength code 
template mechanism generic programming paradigm known standard template library stl design generic modular library 
approach supported java 
templates generic programming paradigm code library gains certain independence 
library algorithms components variety implementations predicates subtasks geometric objects 
allows easily interchange components long interface 
section regard previous related computational geometry libraries roots cgal 
discussing design goals consider generic programming paradigm 
discuss circulators extension iterator concept standard template library circular structures 
useful implementation geometric objects circular structures arise 
subsequently discuss structure cgal different layers library 
kernel contains basic constant size geometric objects primitive operations objects 
basic library contains standard geometric algorithms non constant size geometric structures 
look engineering aspects addressed cgal project manual writing separation specification implementation testing 
conclude evaluation design 
technical parts assume reader familiar programming language basics standard template library 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch related amenta gives overview state art computational geometry software cgal provides 
computational geometry software intensively discussed acm workshop applied computational geometry 
design cgal kernel time project goals 
overview 
precision robustness aspects computational geometry library discussed :10.1.1.50.4318
topics designing combinatorial data structures cgal polyhedra described 
implementations computational geometry algorithms exist loosely coupled collections 
combination algorithms usually requires adaptation effort 
designed components library seamlessly 
implementation efforts computational geometry libraries started eighties 
libraries integrated allowing animation interaction typically restricted particular platform 
extent specifications components cgal roots cgal precursors developed members cgal consortium 
lesser extent cgal scavenged implementation techniques precursors 
precursors xyz library developed eth rich developed utrecht university gal developed inria sophia antipolis geometric part leda library combinatorial geometric computing developed max planck institut informatik saarbr cken 
implementation effort goal similar cgal project started center geometric computing located brown university duke university john hopkins university 
state goal effective technology transfer computational geometry relevant applied fields 
started working computational geometry library called implemented java 
design goals computational geometry potential application areas different needs 
foundation application programs cgal supposed sufficiently generic usable different areas 
address different kinds users academia industry 
users knowledge computational geometry programming range novice expert 
capture different requirements structured list primary design goals project 
important design goals project maintainability consider secondary project mission statement discuss 
correctness library component correct behaves specification 
basically copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal correctness matter documentation verification documentation implementation coincide 
easier said done 
modularized program correctness module determined correctness correctness modules depends 
clearly order get correct results correct algorithms data structures 
usually correctness geometric algorithm proven theoretical context simplifying assumptions exact arithmetic general position assumptions excluding degenerate configurations 
see design goal robustness subsection 
assumptions exact arithmetic hold practice correctness proof valid anymore 
accordingly modules modules arithmetic modules necessarily yield correct results anymore modules behave specification 
assumptions concerning exact computation hold concrete problem instance practice depends demand instance arithmetic 
geometric computations impose subtle dependencies modules combinations modules intrinsically harder 
demand geometric computations formalized studied basic geometric problems research arithmetic demand easy documentation demand needed 
ignoring simplifying assumptions relying sufficient exactness built arithmetic violate understanding correctness 
exactness confused correctness sense reliability 
wrong algorithms computing approximate solutions exact solutions long behaviour clearly documented behave specified 
algorithm handling non degenerate cases correct respect specification cgal provide algorithms handling degeneracies 
modularized project structure important test modules independently early possible 
specific technique quality assurance assertions invariants algorithm self checking functions runtime 
great help implementation process reduce debugging efforts drastically 
user able switch checking code goes production mode 
robustness design goal particularly relevant implementation geometric algorithms robustness 
implementations geometric algorithms lack robustness precision problems 
design correctness proofs geometric algorithms usually assume exact arithmetic implementations simply replace imprecise arithmetic 
imprecise calculations cause wrong mutually contradictory decisions control flow algorithm implementations crash best compute garbage inputs 
applications fraction bad inputs compared possible inputs small applications fraction large 
perfect solution precision problem known especially respect libraries 
primitives imprecise computations hard combine useful library components 
exact computation possible geometric problems saves correctness proof theoretical model computation actual code slows computation 
cgal allows copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch choose underlying arithmetic delegates decision balance trade efficiency robustness user 
flexibility different needs potential application areas demand flexibility library 
sub issues flexibility identified 
modularity clear structuring cgal modules dependencies possible helps user learning cgal structure grasped easily focus narrowed modules interest 
addition parts library isolated particular situation keeps cgal monolithic library 
cgal flexibility smaller independent parts 
natural examples distinction dimensional dimensional geometry separate modules convex hull computation point set triangulation 
adaptability cgal established environment geometric classes algorithms 
probably modules need adaptation 
example application convex hull algorithm user defined point type differs cgal point type 
idealistic situation theoretical convex hull algorithm algorithm described applied virtually programming language point type 
continuing analogy ideal theoretical typically declare operations assumed available point type express algorithm terms operations 
similarly library adaptation effort influence declaration point type operations convex hull algorithm 
extensibility wishes fulfilled cgal 
users may want extend library 
possible integrate new classes algorithms cgal 
example easy add new geometric classes library provide corresponding intersection functions similar existing native cgal classes 
openness cgal open coexist libraries better libraries programs 
standard defines standard template library common foundation platforms 
easy natural gain openness standard 
important libraries outside standard cgal easily adaptable particular leda number types combinatorial graph algorithms gnu multiple precision arithmetic library number type various visualization systems standardized 
copyright john wiley sons softw 
pract 
exper prepared speauth cls ease design cgal different qualities contribute ease library differ experience user 
mentioned correctness robustness issues qualities 
general importance learning time quickly library useful 
issue amount new concepts exceptions general rules learned remembered 
ease tends conflict flexibility situations solution 
flexibility cgal distract novice takes steps cgal 
smooth learning curve major point success story complete compatibility possible smooth transition new style comments member functions inheritance full object oriented programming 
newly learned feature put practice immediately 
cgal users supposed base knowledge stl 
reader aware tremendous difference developing library cgal library usually simpler 
successfully shown leda seen stl 
cgal places concepts borrowed stl parts standard library 
example streams stream operators cgal 
example container classes algorithms stl 
uniformity uniform look feel design cgal help learning memorizing 
concept learned applicable places wish apply 
function name learned specific class named differently class 
complete minimal interfaces goal similar implications uniformity design complete minimal interfaces see example item 
object module complete functionality provide additional decorating functionality 
certain function look ease certain class global picture hinder understanding similarities differences classes harder learn memorize 
rich complete functionality aim useful rich collection geometric classes data structures algorithms 
cgal supposed foundation algorithmic research computational geometry needs certain breadth depth 
standard techniques field supposed appear cgal 
completeness related uniformity 
examples distance intersection computations available appropriate pairs geometric classes subset 
certain pairs return type fit copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch framework currently available cgal solutions known 
completeness related robustness 
aim general purpose solutions example restricted assumptions general positions 
algorithms cgal able handle special cases degeneracies 
cases handling turns inefficient special variants efficient general provided library addition general algorithms handling degeneracies 
course needs clearly documented degeneracies handled 
efficiency geometric algorithms theoretical results time space complexity known 
theoretic interest efficiency realistic inputs opposed worst case situations growing 
practical purposes insight constant factors hidden notation necessary especially competing algorithms 
ideally implementations tested realistic input 
library hard tell input realistic 
different implementations supplied best solution instance trade time space efficient implementation degeneracies 
characteristics specific number type may exploited 
efficiency competing goal respect flexibility robustness ease 
expect library perform tailored applications 
places sacrifice time space efficiency order optimally meet goals places able avoid compromises respect primary design goals 
fact techniques flexibility cgal enable achieve optimal efficiency 
generic object oriented programming basically main techniques available realizing design goal flexibility cgal object oriented programming inheritance base classes virtual member functions generic programming class templates function templates 
paradigms available languages stay notion choice cgal 
flexibility object oriented programming paradigm achieved base class defines interface derived classes implement interface 
generic functionality programmed terms base class user select derived classes base class required 
classes may determined runtime generic functionality implemented knowing derived classes 
called virtual member functions runtime type information support paradigm 
base class usually pure virtual base class 
advantages explicit definition interface runtime flexibility 
main disadvantages paradigm provide strong type checking compile copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal time dynamic casts necessary achieve flexibility 
paradigm enforces tight coupling inheritance relationship requires additional memory object called virtual function table pointer adds call virtual member function indirection virtual function table 
particular interest considering runtime performance virtual member functions usually inline subject code optimization calling function modern microprocessor architectures optimize runtime difficulty runtime predictions mechanisms fail virtual member functions 
effects negligible larger functions small functions suffer loss runtime orders magnitude 
significant examples access point coordinates arithmetic low dimensional geometric objects see example 
class hierarchy tends dense long derivation chains worse multiple inheritance system hard learn understand test maintain 
generic programming paradigm features known class templates function templates 
templates incompletely specified components types left open represented formal placeholders template arguments 
compiler generates separate translation component actual types replacing formal placeholders template 
process called template instantiation 
actual types function template implicitly types function arguments instantiation time 
example swap function exchanges value variables arbitrary types 
actual types class template explicitly provided programmer 
example generic list class arbitrary item types 
definitions enable int actual explicitly list integers swap integer actual implicitly 
template class class list 
placeholder symbolically represents item type 
template class void swap tmp tmp example swap function illustrates template usually requires certain properties template arguments variables assignable 
actual type template instantiation comply assumptions order obtain correct template instantiation 
distinguish syntactical requirements assignment operator needed example semantical requirements operator copy value 
syntactical requirements fulfilled compilation simply fails 
notable exceptions compiler deduce virtual member function actual member function called allows compiler optimize call 
keyword final introduced java support intention 
techniques realized compilers far succeed cases arguable typical uses cgal optimized 
distributing library precompiled components hinder optimization done link time 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch semantical requirements checked compile time 
useful connect specific semantical requirement artificial newly introduced syntactical requirement tag similar iterator tags 
technique allows decisions compile time actual type tags 
set requirements needed obtain correct instantiation member function class template usually fraction requirements template arguments class template 
subset member functions instantiation class template sufficient actual types fulfill requirements needed subset member functions 
possible long compiler explicitly forced compiler allowed instantiate member functions possible compilation errors due missing functionality actual types occur 
enables design class templates optional functionality actual types template instantiation fulfill additional requirements 
example illustrating generic programming standard template library 
generality flexibility achieved carefully chosen set concepts concept defined set requirements 
function example appropriate concept named assignable includes requirement assignment operator 
actual type fulfills requirements concept model concept 
example int model concept assignable 
algorithmic abstraction key goal generic programming 
aspect reduce interface data types algorithm set simple general concepts 
iterator concept abstraction pointers 
iterators serve purposes refer item traverse sequence items stored data structure known container class stl 
different categories defined iterators input output forward bidirectional random access iterators different possibilities accessing items container class 
usual pointer referring array model random access iterator 
generic algorithms written particular container class stl iterators 
example sequences items specified iterators forming range 
notion half open interval denotes sequence iterators obtained starting reached 
container class supposed provide local type model iterator member functions returns start iterator sequence returns iterator referring past position sequence 
example function written model input iterator 
iff thevalue contained values range 
template class inputiterator class bool contains inputiterator inputiterator const value value return copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal advantages generic programming paradigm strong type checking compile time template instantiation need extra storage additional indirections function calls full support inline member functions code optimization compile time 
specific disadvantage generic programming lack notation declare syntactical requirements template argument equivalent virtual base class object oriented programming paradigm 
syntactical requirements scattered implementation template 
concise collection requirements left program documentation 
general flexibility resolved compile time gives advantages mentioned seen disadvantage runtime flexibility needed 
generic data structures algorithms parameterized base class object oriented programming achieve runtime flexibility 
applied mainly generic programming paradigm achieve flexibility efficiency cgal 
compliance stl important promote re existing generic algorithms container classes important unify look feel design cgal standard 
cgal easy learn easy familiar stl 
concepts stl powerful additions refinements needed cgal 
refinement concept handles 
combinatorial data structures necessarily possess natural order items 
restrict concept iterators concept handles item denoting part iterator concept ignores traversal capabilities 
model iterator model handle 
handle known trivial iterator 
refinement concept circulators kind iterators slightly adapted requirements suit needs circular sequences better occur naturally combinatorial data structures sequence edges vertex triangulation 
see section details circulators 
places object oriented programming paradigm example protected access internal representation polyhedral surface data structure time critical operation compared supposed performed internal representation 
example return value intersection polygons contain points segments polygons general 
cgal polymorphic list return result intersection routines 
note necessarily imply common base class cgal classes 
fact cgal common base class objects class hierarchy flat derivation 
applied appropriate design pattern generic wrapper described section kernel layer 
keeps influence design decision local 
circulators new concept circulators reflects cgal fact combinatorial structures lead circular sequences contrast linear sequences supported iterators container classes stl 
example polyhedral surfaces planar maps give rise circular sequence edges vertex facet 
implementing iterators copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch circular sequences possible straightforward natural past situation available 
arbitrary sentinel cyclic order break natural symmetry configuration bad idea lead cumbersome implementations 
solution stores iterator starting edge current edge kind winding number zero iterator past iterator solution known provide light weight iterator supposed terms space efficiency 
introduced cgal slightly different concept circulators allow light weight implementations 
support library provides adaptor classes convert iterators circulators integrating new concept framework stl 
circulators share requirements iterators 
categories defined forward bidirectional random access circulators 
operation denotes item refers 
operation advances item steps bidirectional item backwards 
random access advances natural number 
circulators compared equality refer item 
circulators develop different notions reachability ranges iterators 
called reachable equal finitely applications operator due circularity sequence true circulators refer items sequence 
particular reachable range denotes circulators obtained starting reached far range definition iterators 
difference lies denoting items circular sequence iterator range denotes empty range 
long asc range behaves iterator range stl algorithms 
possible write equally simple algorithms iterators circulators including full range definition see chapter 
additional test null required true sequence empty 
case said singular value 
complete description requirements circulators refer chapter 
repeat example function previous section range circulators 
usual circular structures ado loop preferable specific input elements sequence reached 
template class class bool contains const value null value return true return false currently implemented cgal adaptor class provides pair iterators 
copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal library overview cgal library modular units 
basically library structured layers support library stands apart 
layers core library basic non geometric functionality geometric kernel basic geometric objects operations basic library complicated algorithms data structures 
basic library geometric kernel planar map dimensional polygon convex hull dimensional lation dimensional core library configuration assertions circulators 

structure cgal 
support 
library zation number types finer level layers support library subdivided smaller modular units see fig 

modular approach benefits 
user modular design easier grasp possible understand small part having knowledge parts 
building library modules way organizing 
divide project partners help assemble pieces convenient way release library 
testing easier little coupling parts 
discussed detail section software engineering 
geometric kernel contains simple geometric objects points lines segments triangles tetrahedra 
criterion simplicity objects constant size 
geometric predicates objects 
furthermore operations computing intersection distance objects affine transformations 
geometric kernel split parts deal dimensional objects threedimensional objects general dimensional objects 
geometry dimensions studied lots applications reason special status 
dimensions cartesian homogeneous representations 
thing supplied cgal number types 
deep geometric objects represented numbers 
precise way computations numbers done important 
especially robustness issues preferable exact arithmetic floating point arithmetic 
order possible choose number type geometric kernel parameterized number types 
cgal provide implementation number types 
cgal provides necessary support number types sources leda 
line philosophy libraries re possible 
arithmetic operations needed cgal copyright john wiley sons softw 
pract 
exper prepared speauth cls 
fabri 
giezeman kettner schirra sch quite basic library supplies number types easily supported cgal 
basic library contains complex geometric objects data structures polygons planar maps polyhedra 
contains algorithms computing convex hull set points triangulations union polygons 
basic library independent parts independent independent kernel 
kind independence easiest obtain possible 
dependencies example algorithm computes union polygons depends part defines polygons 
independence kernel harder obtain design point view quite interesting 
algorithm defines precise way primitives uses 
interface template parameter algorithm called traits class 
example convex hull algorithm take points input able decide point lies left point decide go point second point third point left right turn 
case algorithm parameterized class point type predicates point type 
algorithm implemented terms types operations interface 
consequence types operations hardwired basic library algorithms sense independent kernel 
parameterization traits classes offers great flexibility modularity 
order meet design goal ease predefined traits class uses types operations kernel 
possible traits class chosen default user totally ignore existence mechanism 
sense basic library layer built top kernel 
core library support library deal things purely geometric nature 
core library offers functionality needed geometric kernel basic library 
support coping different compilers limitations 
basic support dealing assertions preconditions postconditions 
circulators random number generators belong 
support library adds functionality purely geometric vital rest library 
visualization important aspect support library 
languages vrml postscript programs leda windows deal visualization 
support library interfaces cgal objects existing software 
single standard way doing visualization important part separate kernel basic library 
adaptation number types libraries support library 
kernel geometric part cgal kernel contains objects constant size point vector direction line ray segment triangle iso oriented rectangle tetrahedron 
copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal type provides set member functions example affine transformation 
global functions available detection computation intersections distance computations 
current cgal kernel provides families geometric objects kernel family representation points cartesian coordinates 
family representation points homogeneous coordinates 
homogeneous representation extends representation cartesian coordinates additional coordinate common denominator 
formally dimensional space point homogeneous coordinates 
xd xd xd cartesian coordinates xd xd 
xd xd 
allows avoid divisions reduce computations involved geometric algorithms calculations integers 
example division cartesian coordinates point integer replaced multiplying common denominator families parameterized number type represent cartesian homogeneous coordinates 
class templates families directly visible user 
class templates single template parameter template class cgal point choose alternatives template argument example cartesian double get objects cartesian coordinates type double double precision floating point number type programming language cgal homogeneous int obtain objects homogeneous coordinates type int 
usually typedefs introduce conveniently short names types typedef cgal point cgal homogeneous int point design goal robustness motivated parameterization number type allows user choose underlying arithmetic influence precision computations 
algorithms computational geometry usually designed theoretical machine model exact arithmetic arbitrary real numbers mathematical sense 
computations done imprecise number type numerical errors evaluation geometric predicates may lead incorrect decisions 
control flow algorithm may deviate theoretical counterpart 
interplay discrete numerical aspects computational geometry allows possibility small errors evaluation predicate may lead decisions contradicting basic laws geometry catastrophic errors 
parameterization number type opens easy way overcome precision robustness problems exact computation 
example number type leda real leda 
number type models subset algebraic numbers integers leda reals leda reals closed operations adaptive evaluation guarantee comparison operations give correct result 
reals cartesian leda real guarantees exact decisions exactly control flow algorithm copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch theoretical counterpart 
robustness problems arise due wrong inconsistent decisions number real 
furthermore parameterization number type offers flexibility 
exact number types arbitrary precision integer number types rational number types fast potentially imprecise floating point types float double speed important reliability 
floating point number types allow choose precision floating point system leda leda allow balance efficiency accuracy 
small precision leads faster computation lead accurate results 
especially homogeneous coordinates integer arithmetic fixed sufficiently large precision large intermediate results arising arithmetic operations requires certain knowledge computations carried 
kind adaptation easy 
cgal requirements number type kept small 
easy number type compliant cgal 
cgal supports number types leda gnu multiple precision arithmetic library 
class templates parameterized cgal cartesian cgal homogeneous provide user common interface underlying representation higher level implementations independent actual coordinate representation 
list requirements template parameter defines concept representation class cgal kernel 
model concept representation class essentially provide names actual implementations 
example parameter cartesian types implemented follows template class class cgal cartesian public typedef cgal point typedef cgal vector typedef cgal direction typedef cgal segment typedef cgal line typedef cgal ray 
type names denote classes cartesian representation coordinates number 
number type template parameter class template cgal cartesian 
instantiation cgal cartesian argument fulfills requirements number types proper model representation class 
technique known nested typedefs name commonality idiom 
particular representation class tells name implementation class class template common interface 
class template inherits implementation template class copyright john wiley sons softw 
pract 
exper prepared speauth cls class cgal point public point 
design cgal nested typedefs provide name actual implementation type names related types 
representation class concept kernel traits class concepts basic library cgal closely related introduce name commonality basic geometric types 
cgal provides clean mathematical concepts user sacrificing efficiency 
example cgal strictly distinguishes points mathematical vectors distinguishes affine geometry underlying linear algebra 
points vectors see discussion illicit computations resulting identification points vectors geometric computations 
particular points vectors behave differently affine transformations 
provide automatic conversion points vectors 
geometric concept origin 
symbolic constant cgal origin acts point compute locus vector difference point origin 
function overloading implement operation internally simple conversion overhead 
note provide geometrically invalid addition points lead ambiguous expressions assuming points affine transformation write cgal perfectly legal expression 
slightly different expression contains illegal addition points 
thinking terms coordinates expect result addition allowed 
true expression affine transformation probably evaluate vector point previous expression 
vectors points behave differently affine transformations 
similar reasons automatic conversion provided 
major design decision avoid derivation hierarchies classes virtual member functions tendency couple classes tightly 
decision sake efficiency flexibility 
virtual member functions space time performance penalties largely avoided 
necessary apply local solutions get polymorphic behavior 
example intersection operations need polymorphic return value 
intersection line segment point segment empty 
convenient common base class possible return types 
cgal return type intersection generic object contain object type 
sooner needs know result type order take appropriate actions 
assign try assign returned object type cgal object potential return types 
successful cgal assign returns true 
example function intersection compute intersection segment line 
possible return types checked turn cgal assign actions corresponding detected return type taken template class void foo cgal segment seg cgal line line cgal object result cgal point cgal segment copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch result cgal intersection seg line cgal assign result contains intersection point 
cgal assign result contains segment intersection result 
intersection empty 
class hierarchy visible user 
cgal object refers instance wrapper class containing actual intersection result 
wrapper classes common base class virtual destructor 
possible object pointer base class refer actual instance wrapper class 
class cgal base base class wrapper classes public virtual cgal base template class generic wrapper class class cgal wrapper public cgal base public cgal wrapper const object object object cgal wrapper operator return object virtual cgal wrapper private object class cgal object polymorphic object public 
cgal base base const return base private cgal base base assign function uses runtime type information check passed object appropriate type get object assigned stored object 
template class bool cgal assign const cgal object cgal wrapper wp dynamic cast cgal wrapper base wp return false wp return true actual cgal code slightly complicated simulates runtime type information compilers supporting 
cases intersection objects copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal consist parts potentially different type example intersection polygons alist cgal object returned 
note class hierarchy introduced locally 
provides nice extensible solution return type problem intersections class hierarchy performance penalties avoided 
class hierarchies felt provide appropriate solution example cgal affine transformations maintain distinct internal representations hierarchy internal representations differ considerably space requirements efficiency member functions 
general representation gain performance terms space time 
general representation performance penalty caused virtual functions negligible member functions computationally expensive representation 
alternatively general representation affine transformations 
hierarchy justified specialized representations translation rotation scaling arise frequently geometric computing 
design decision constant size geometric objects kernel 
example member functions set cartesian coordinates point 
points viewed atomic units see assumption objects represented 
particular assumption points represented cartesian coordinates 
polar coordinates homogeneous coordinates example member functions set cartesian coordinates expensive complicated 
current cgal types cartesian representation types homogeneous representation member functions returning cartesian coordinates member functions returning homogeneous coordinates 
access functions provided implementing predicates operations convenient 
adding existence member functions returning cartesian homogeneous coordinates assumptions kernel weakness concerning generality 
libraries counting kernel objects objects point shared representation 
representation counts number objects pointing 
copying objects increments counter shared representation deleting object decrements counter representation 
counter reaches zero decrement representation deleted see item information 
implementation counting simplified non modifiability objects 
counting reason choosing non modifiability 
copy write new representation created object value changed modifying operation counting modifiable objects possible slightly involved 
basic library basic library cgal contains complex geometric objects data structures polygons triangulations including delaunay triangulations planar maps range segment trees kd trees 
contains geometric algorithms copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch convex hull smallest enclosing circle ellipse sphere boolean operations map overlay generators geometric objects 
describe sequel generic data structures generic algorithms traits classes cgal 
generic data structures generic programming paradigm introduced cgal compliant stl 
interfaces geometric objects data structures basic library extensive iterators circulators handles algorithms data structures easily combined provided stl compliant libraries 
triangulations example container data structure basic library 
interface contains member functions access vertices triangulation example vertices example vertices convex hull triangulation 
way provide functionality class triangulation public list vertex vertices list vertex convex hull 
main disadvantages 
sequence vertex pointers computed copied list 
second vertex pointers returned specific container list vertex user may need container vertex container 
approach avoids disadvantages sketch 
class triangulation public vertex vertex vertex successor vertex vertex predecessor vertex vertex convex hull vertex vertex convex hull successor vertex vertex convex hull predecessor vertex 
vertex pointer computed user asks calling successor predecessor function 
user free choose appropriate container sequence copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal vertex pointers directly storing container 
contrast approach functionality storing vertices container provided container 
interface disadvantage algorithm working sequence vertices know names access functions hard implement algorithm generically 
solution avoids disadvantage class triangulation public vertex iterator vertices vertex iterator vertices convex hull iterator convex hull convex hull iterator convex hull 
functionality accessing vertices factored separate classes models concept iterators stl 
demonstrate genericity third approach example shows function stl store vertices array 
triangulation insert points vertex vertices copy vertices vertices vertices vertex convex hull copy convex hull convex hull convex hull solution chosen cgal vertices convex hull triangulation accessed efficient internal representation convex hull cyclic 
previous example geometric data structures basic library contain sequence interest triangulations contain vertices edges faces 
names member functions return iterator ranges prefixed name sequence vertices edges 
names canonical extension corresponding names stl 
iterator interfaces extended naming scheme assimilate design geometric data structures basic library standard 
guarantees smooth learning curve users having base knowledge stl making cgal easy 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch generic algorithms implementing algorithm specific container geometric algorithms basic library iterators circulators handles 
generic comply stl 
example geometric algorithm convex hull 
algorithm takes set points outputs sequence points convex hull 
possible declaration algorithms interface fix certain container class pass points template class point list point convex hull list point points input read typelist point output written container type 
major drawback user forced provide input specific container 
user wants compute convex hull points stored vector user copy points vector list calling algorithm 
argument holds output written fixed container 
solution cgal generic programming paradigm uses iterator ranges containers 
function declaration looks template class inputiterator class outputiterator outputiterator convex hull inputiterator inputiterator outputiterator result input read iterator range output written output iterator result 
return value result iterator range result result contains sequence points convex hull 
design decouples algorithm container gives user flexibility container stl libraries implementations provided comply stl container example sequence points read standard input convex hull istream iterator point cin istream iterator point ostream iterator point cout points taken standard input resulting points convex hull written standard output 
called stream iterators stl 
example demonstrates flexibility gained stl compliance geometric algorithms basic library 
example complete running program 
generates points random uniformly distributed disc 
delaunay triangulation convex hull point set computed displayed graphical windows 
output shown fig 

copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal 
output delaunay triangulation convex hull include tutorial include tutorial io int main generate random points uniformly distributed disc random rnd random points disc rnd pts rnd list point pts copy rnd pts back inserter pts compute show delaunay triangulation delaunay triangulation dt dt insert pts pts window stream window window init window dt compute show convex hull polygon ch convex hull points pts pts back inserter ch window stream window window init copy pts pts ostream iterator point window window ch wait mouse click window point window return example programs cgal tutorial 
includes cgal header files uses representation cartesian double copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch parameterize geometric objects algorithms 
template mechanism prefix hidden cgal novice 
io includes cgal header files related graphical output 
class random points disc provided cgal model input iterator 
generates dimensional points uniformly distributed disk 
function template back inserter stl returns model output iterator appends items container 
note applied twice list stl polygon cgal showing genericity back inserter stl compliance cgal polygon 
function template ostream iterator point provided cgal returns model output iterator writes points output stream 
iterator type stl tailored standard library streams window stream cgal derived streams 
traits classes adaptability section design goals analogy ideal theoretical geometric algorithm introduced declares geometric primitives expresses algorithm terms primitives 
implementing algorithm data structure collect necessary types primitive operations single class called traits class encapsulates details geometric representation 
collecting types single class template technique intensively 
called nested typedefs name commonality idiom 
approach gains additional value traits technique standard library additional information associated existing types built types 
example iterator user want know value type iterator refers 
easily encoded local type iterators implemented classes 
struct iterator int typedef int value type 
pointer valid iterator approach sufficient 
solution chosen stl iterator traits class templates parameterized iterator 
template class iterator struct iterator traits typedef typename iterator value type value type 
value type iterator example class expressed traits iterator int value type 
pointers specialized version iterator traits exists class template parameterized pointer 
copyright john wiley sons softw 
pract 
exper prepared speauth cls template class struct iterator traits typedef value type 
design cgal value type pointer toint expressed traits int value type 
technique providing additional specific definition class template known partial specialization 
approach traits classes basic library attach information built types data structures algorithms 
modularization technique allows single implementation interfaced different geometric representations primitive operations 
traits class single template argument algorithms data structures basic library example triangulations template class traits class cgal triangulation 
note primitive provided template parameter traits classes simplifies interface 
primitives captured single argument easier apply prepared implementations traits classes 
implementing traits classes traits classes provide geometric primitives required geometric data structure algorithm 
default implementations provided geometric kernel cgal 
class templates parameterized kernel representation class example cgal triangulation euclidean traits cgal cartesian double 
single traits class triangulations sufficient representations number types possible kernel 
traits classes available cgal example basic library geometry part leda 
give example data structure cgal triangulation needs things points segments triangles orientation predicate 
traits class data structure looks template class class cgal triangulation euclidean traits public typedef cgal point point point type typedef cgal segment segment segment type typedef cgal triangle triangle triangle type 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch cgal orientation orientation predicate orientation const point const point const point const return cgal orientation 
ease typedefs introduce shorter names typedef cgal cartesian long typedef cgal triangulation euclidean traits traits typedef cgal delaunay triangulation traits triangulation delaunay triangulations euclidean metric predicates objects cgal kernel cartesian coordinates integer 
described interface user 
code fragment triangulation illustrates traits classes implementing data structure template class traits class cgal triangulation public typedef typename traits point point typedef typename traits triangle triangle traits traits insert const point traits orientation cgal collinear triangle 
member function inserts point triangulation 
type traits point point type traits class 
point insertion orientation point triple checked call function provided traits class 
collinear triangle created point triple 
type triangle traits triangle type traits class 
note instance traits traits class stored cgal triangulation 
allows user provide additional information traits class object direction projecting dimensional points twodimensional plane 
allow access additional data orientation member function 
call orientation call specific instance 
copyright john wiley sons softw 
pract 
exper prepared speauth cls default traits classes design cgal algorithms implemented functions default traits class chosen automatically explicitly function call 
user just ignore traits class mechanism example typedef cgal cartesian double typedef cgal point point typedef cgal polygon polygon polygon hull cgal convex hull points istream iterator point cin istream iterator point back inserter hull call convex hull algorithm traits class visible user 
default traits class chosen automatically definition algorithm template class inputiterator class outputiterator inline outputiterator cgal convex hull points inputiterator inputiterator outputiterator result typedef typename iterator traits inputiterator value type point typedef typename point return cgal convex hull point result cgal convex hull traits value type iterator inputiterator point type input 
determined iterator traits described previously 
default traits class supposed geometric kernel cgal know point type cgal point type knows representation means local type 
version convex hull points called arguments 
additional fourth argument set default traits class convex hull algorithms cgal convex hull traits 
second version function template defined follows template class inputiterator class outputiterator class traits outputiterator cgal convex hull points inputiterator inputiterator outputiterator result const traits traits compute convex hull primitives traits class mechanism functions know directly indirectly iterators circulators object geometric kernel 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch examples adaptability traits classes examples demonstrate adaptability basic library traits classes 
show plug cgal algorithm existing application point type change underlying metric distance computations cgal data structure dimensional data dimensional data structure cgal 
suppose user large application specific point type example leda rat point leda wants compute convex hull set points cgal ch graham andrew 
user needs appropriate traits class provides point xy include cgal ch graham andrew include leda rat point include leda list struct leda traits typedef leda rat point point struct xy bool operator const point const point const return compare struct bool operator const point const point const point const return left turn xy get xy object const return xy get object const return int main leda list leda rat point pts input points leda list leda rat point ch points convex hull 
cgal ch graham andrew pts pts back inserter ch leda traits return convex hull algorithm cgal adapted user point type parameter leda traits call cgal ch graham andrew 
functions compare left turn predicates provided leda list leda stl compliant 
cgal provides traits class copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal convex hull algorithms point type leda rat point cgal convex hull rat leda traits 
way adapting cgal change small part traits class 
necessary modifications done code library reused 
give example showing computation delaunay triangulation point set maximum metric usual euclidean metric 
include cgal triangulation euclidean traits include cgal delaunay triangulation typedef cgal cartesian double typedef cgal point point typedef cgal triangulation euclidean traits euclidean traits class traits public euclidean traits public cgal orientation extremal const point const point const point test const metric cgal oriented side side oriented circle const point const point const point const point test const metric int main typedef cgal delaunay triangulation traits dt list point pts 
dt dt dt insert pts pts return adapted traits class traits derived cgal default traits class triangulations 
predicates extremal oriented circle re defined maximum metric 
inherited primitives remain unchanged depend chosen metric 
cgal provides traits class triangulation traits 
third example deals problem dimensional data structure dimensional data 
suppose user terrain model set terrain points dimensional point represents position plane additional number level 
user wants compute delaunay triangulation vertical projection terrain model 
predicates defined traits class ignore additional number simply dimensional points 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch include cgal cartesian include cgal point include cgal triangulation euclidean traits include cgal delaunay triangulation include vector template class class level class terrain point public typedef cgal point point terrain point terrain point const point point const level level point point level level const point point const return point const level level const return level private point point level level class terrain segment class terrain triangle template class class level struct terrain traits typedef terrain point level point typedef terrain segment point segment typedef terrain triangle point triangle typedef cgal triangulation vertex point vertex typedef cgal triangulation face vertex face typedef cgal triangulation euclidean traits traits cgal comparison result compare const point const point const return traits compare point point compare cgal orientation orientation const point const point const point const return traits orientation point point point extremal cgal oriented side side oriented circle const point const point const point const point const return traits side oriented circle point point point point int main typedef cgal cartesian double typedef terrain point int typedef terrain traits int traits typedef cgal delaunay triangulation traits dt copyright john wiley sons softw 
pract 
exper prepared speauth cls vector terrain 
dt dt dt insert terrain terrain return design cgal terrain points represent positions dimensional points cgal functions provided standard model traits class concept triangulations re 
cgal provides traits classes cgal point triangulation works projection xy xz yz plane respectively 
example traits class xy plane called cgal triangulation euclidean traits xy 
software engineering project birth cgal library dates back meeting utrecht january 
shortly authors started developing kernel 
cgal project started officially october team developers grown circa people research assistants phd students academia professionals field computational geometry related areas 
amounts heterogeneous team developers working part time cgal full time 
cgal release january consists approximately lines source code library plus lines accompanying sources test suite example programs 
terms elder constructive cost model line counts people involved time schedule amount big project growing comparable smaller operating systems database management systems 
need software engineering quality control obvious 
project structure loosely coupled research groups needed taken account management 
intensive internet project web server email discussion groups matter course major progress design implementers meetings 
early modularization library dependencies modules possible crucial project order keep communication needs project partners reasonable 
library layers kernel basic library emphasized obvious dependencies 
basic library subdivided independent parts assigned different project partners 
kernel development started quite ahead internal release ready official start project 
idealized developing process cgal structured specification implementation test integration continuous regression testing 
influenced spiral model successive iterations process expected 
indivisible unit package 
parties involved developing process author editorial committee tester integration site 
author writes specification package comments empty lines counted 
www cs uu nl cgal copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch format manual page submits editorial committee discussion approval 
editorial committee considers issues interconnections different packages unified look feel design cgal 
approval specification author implements tests package 
literate programming tools recommended structure source code accompanying documentation implementation specification 
common format source code distributions plain source files 
strict separation specification implementation idealistic important 
puts main focus design qualities package implementation specific decisions restrictions 
discussion 
separation supported tools manual writing 
step author sends package external tester distinct project site 
package integrated maintained revision controlled integration site 
package supposed provide test suite 
integration test suite needs pass runs supported compiler system combinations 
internal external releases library collected test suites automatically evaluated 
developing process defines places quality control heterogeneous academic environment allows recommendations design reviewed editorial committee reviewers commissioned 
typically done developer meetings 
serious control errors necessary changes seen costly ones 
second specification mention pre postconditions functions 
supposed tested runtime assertions placed implementation preconditions allow early detection usage errors function caller postconditions catches implementation errors function 
assertions placed 
extension assertions program checkers respect geometric algorithms 
third author supposed test implementation thoroughly provide test suite achieves code coverage package proven code coverage tools gnu tools 
runtime tests recommended example bounds checker monitoring dynamic memory allocation 
fourth second external tester reviews specification implementation 
fifth integration library uses test suite check compliance new package parts library especially revised version module integrated 
design specifications communicated manual pages 
reasons developing process 
reason manual main documentation users cgal 
quality manuals tutorial determine acceptance cgal 
design design enable understand 
order provide appealing high quality manual pages latex 
self written style file adds additional formatting capabilities seen fig 
displays excerpt manual page dimensional points cgal 
principal manual page layout production code assertions omitted code 
assertions independently switched major packages 
distinction normal expensive checks allows computationally non trivial checks assertions sacrificing speed 
note templates code coverage important compiler able check syntactical errors templates 
copyright john wiley sons softw 
pract 
exper prepared speauth cls point cgal point definition design cgal object class cgal point point dimensional euclidean plane 
include cgal point creation cgal point rt hx rt hy rt hw rt operations introduces point initialized hx hw hy hw 
third argument explicitly defaults rt 
cgal point transform cgal aff transformation returns point obtained applying cgal vector returns difference vector cgal point cgal vector returns point obtained translating vector cgal point cgal vector returns point obtained translating vector 
shortened manual page dimensional points cgal 
intentionally close leda user manual writing process supporting tools different 
main goal layout provide dense compact presentation allows fast overview access information searched sacrificing correctness 
column layout member functions displays column remaining signature second column documentation third column 
certain allow flexible layouts entry gets long 
reduction rules remove const 
declarations function arguments usually implementation detail stated explicitly remove current class name function arguments rewrite operator declarations operator notation see operator examples fig 

done automatically original declarations latex source 
summary short member function documented efficiently single line 
evaluation design sections illustrate concepts techniques cgal accomplish design goals 
techniques described dedicated design goal flexibility 
modularity achieved structuring library layers packages 
approach generic programming paradigm specify interface template copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch argument terms concept led strongly decoupled collection modules 
example stl illustrates effect algorithms container classes container classes know algorithms algorithms know container classes 
connection established concept iterator 
various file formats visualization tools exist 
functions visualization part geometric objects separate modules 
adaptability addressed free choice arithmetic kernel traits classes basic library modularization 
kernel predicates distance intersection functions far adaptable geometric objects kernel 
addressed kernel 
extensibility primarily function overloading global functions independence modules 
generic object cgal object cope new object solves extensibility intersection function polymorphic return value 
decoupling modules generic programming paradigm allows write new algorithms data structures interface cgal cgal interfaces stl 
cgal open standard especially stl part allows adaptation libraries 
example provided support leda number types wrapper class gnu multiple precision arithmetic library 
support number types added easily 
modularization functions opens cgal file format visualization tool 
correctness addressed quality control project structure 
includes recommendation certain tools assertions program checkers 
strong modularization large independence help testing achieving correctness 
strong point achieving correctness modularity adaptability allow combination different modules need particular solution 
example adaptability respect number types utilized convex hull algorithm input points known integer coordinates certain range optimized arithmetic fixed sufficient bit precision general purpose arithmetic results correct algorithm 
robustness partially coupled correctness 
choice exact arithmetic homogeneous representation class kernel lead exact efficient primitives easier combine form robust algorithms 
ease achieved strong modularization smooth learning curve 
users familiar iterator concept immediately familiar algorithms data structures cgal 
new concepts handle easy learn due similarity iterator concept 
concepts kernel behave similarly users parameterization representation class arithmetic type complete cgal kernel 
easier header file cgal tutorial uses typedefs hide template instantiations novice sees simple classes selected default representation number type 
users get familiar templates kernel representation class provides uniform look geometric objects kernel 
basic library flexibility cgal usually hidden single template argument traits class default class exists 
functions argument hidden default parameter 
generic programming paradigm applied successfully cgal 
new concepts introduced 
generic programming contributed considerably uniform copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal look feel design 
naming convention choice expressive names abbreviations limited standard abbreviations geometry result readable easily interfaces 
efficiency tackled extensive templates inline functions 
relying compiler optimization capabilities traits class technique basic library allow optimal results 
compromises concerning efficiency benefit design goals places 
instance ease intersection computation kernel objects uses unified interface generic object return value relative elementary intersection computations line line intersections 
example non modifiability kernel objects 
modifiability lead efficient computation assume points implemented cartesian coordinates 
discussed section kernel layer restrict flexibility 
interesting issue concerning efficiency counting see 
counting source efficiency time efficiency space efficiency fewer copies object necessary 
especially objects small copies rarely scenarios counting slows computation especially memory management support fast allocation counted representation objects heap 
example convex hull computation illustrated section basic library layer faster points counting points coordinates doubles 
coordinates represented leda integer counting take space double counted points slightly faster 
experiments leda memory management speed heap allocation counted objects 
currently kernel offer alternative objects 
flexibility basic library allows kernels efficiency sufficient 
authors designed implemented cgal kernel right start cgal project order enable immediate start library implementation 
main architects design library people involved starting project initial implementation kernel people joined cgal team contributed development cgal 
want especially helmut alt mark de berg jean daniel boissonnat herv br christoph paul callahan schwarzkopf jochen comes olivier devillers eyal wolfgang stefan bernd rtner dan halperin har peled michael hoffmann marc van kreveld doron markus kurt mehlhorn stefan gabriele rg nievergelt marco nissen mark overmars michal pau sylvain sigal ralf holger michael seidel micha sharir nora sabine carl van remco veltkamp emo welzl peter widmayer martin alexander wolff mark 
want dietmar hl karsten valuable comments polymorphism solution copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch object 
anonymous referees helpful comments 
supported esprit iv ltr projects cgal swiss federal office education science cgal 

mehlhorn implementation geometric algorithms th world computer congress ifip volume 
elsevier science north holland amsterdam pp 


schirra precision robustness issues geometric computation handbook computational geometry elsevier science publishers amsterdam netherlands 

mehlhorn schirra degeneracy geometric computations proc 
th acm siam symp 
discrete algorithms pp 


gal library geometric algorithms inria sophia antipolis 


giezeman library planar geometry library spatial geometry utrecht university 

mehlhorn leda platform combinatorial geometric computing 
cambridge university press forthcoming 

mehlhorn uhrig leda user manual edition 
see www mpi sb mpg de leda leda html 

rg nievergelt peter michele de christoph adrian br xyz project experimental geometric computation proc 
computational geometry methods algorithms applications volume 
springer verlag pp 


peter implementing xyz programming environment geometric algorithms computational geometry methods algorithms applications proc 
internat 
workshop comput 
geom 
cg volume lecture notes comput 
sci springer verlag pp 

inf ethz ch html 

international standard iso iec programming languages 
american national standards institute west nd street new york 

amenta computational geometry software handbook discrete computational geometry crc press pp 


lee visualizing geometric algorithms state art lin manocha eds applied computational geometry proc 
volume lecture notes comput 
sci 
springer verlag pp 


kurt mehlhorn position panel discussion lin manocha eds applied computational geometry proc 
volume lecture notes comput 
sci 
springer verlag pp 


mark overmars designing computational geometry algorithms library cgal lin manocha eds applied computational geometry proc 
volume lecture notes comput 
sci 
springer verlag pp 


andreas fabri geert jan giezeman lutz kettner stefan schirra sven sch cgal kernel basis geometric computation lin manocha eds acm workshop applied computational geometry philadelphia may pp 

lecture notes computer science 

veltkamp generic programming cgal computational geometry algorithms library proceedings th eurographics workshop programming paradigms graphics 

schirra 
designing computational geometry algorithms library 
lecture notes advanced school algorithmic foundations geographic information systems udine september 

lutz kettner generic programming designing data structure polyhedral surfaces computational geometry theory applications 
appear 

epstein knight may nguyen 
sack workbench computational geometry algorithmica 
copyright john wiley sons softw 
pract 
exper prepared speauth cls design cgal 
de environment development algorithms computational geometry proc 
th canad 
conf 
comput 
geom waterloo canada pp 


baker tamassia 
algorithm engineering geometric computing library 
preliminary report 

mehlhorn schirra compute voronoi diagram line segments theoretical experimental results proc 
nd annu 
european sympos 
algorithms volume lecture notes comput 
sci 
springer verlag pp 


giuseppe franco preparata roberto tamassia robust proximity queries illustration degree driven algorithm design proc 
th annu 
acm sympos 
comput 
geom pp 



boissonnat preparata robust plane sweep intersecting segments technical report inria sophia antipolis france september 

john large scale software design addison wesley 

steve maguire writing solid code microsoft press 

kurt mehlhorn stefan thomas stefan schirra michael seidel christian uhrig checking geometric programs verification geometric structures proc 
th annu 
acm sympos 
comput 
geom pp 


granlund gnu mp gnu multiple precision arithmetic library edition june 

scott meyers effective addison wesley 

fitness realistic input models geometric algorithms ph thesis dept comput 
sci univ utrecht utrecht netherlands 

stanley lippman inside object model addison wesley 

schirra case study cost geometric computing proc 

appear 

alexander stepanov meng lee 
standard template library 
www cs rpi edu musser doc ps october 

david musser atul stl tutorial guide programming standard template library addison wesley 

silicon graphics computer systems standard template library programmer guide 
www 
sgi com technology stl 

david musser alexander stepanov algorithm oriented generic libraries software practice experience 

bjarne stroustrup programming language addison wesley rd edition 

gamma helm johnson vlissides design patterns elements reusable object oriented software addison wesley 

lutz kettner circulators herv br stefan schirra remco veltkamp eds cgal manual 
part support library 
cgal 
www cs uu 
nl cgal 

mehlhorn schirra leda number technical report mpi max planck institut informatik 

cgal consortium number types herv br stefan schirra remco veltkamp eds cgal manual 
part support library 
cgal www cs 
uu nl cgal 

barton scientific engineering addison wesley reading ma 

langer iterators standard library report 

ronald goldman illicit expressions vector algebra acm transaction graphics 

bob wallis forms vectors transforms andrew glassner ed graphics gems academic press pp 


derose geometric programming coordinate free approach theory practice geometric modeling frg oct 
springer verlag 

booch simplifying booch components lippman ed gems sigs publications pp 


design architecture tools lippman ed gems sigs publications pp 


scott meyers effective addison wesley 

geert jan giezeman remco veltkamp getting started cgal 
cgal www cs uu nl cgal 

nathan myers traits new useful template technique report 
copyright john wiley sons softw 
pract 
exper prepared speauth cls fabri 
giezeman kettner schirra sch 
stefan schirra parameterized implementations classical planar convex hull algorithms extreme point computations research report mpi max planck institut informatik im stadtwald saarbr cken germany january 

richard software engineering concepts mcgraw hill series software engineering technology mcgraw hill 

ross williams user manual edition may 

donald knuth literate programming computer journal 

donald knuth silvio levy system structured documentation version edition 

lisa smith annotated bibliography literate programming acm sigplan notices 

david parnas paul clements rational design process fake ieee transactions software engineering 

robert murray strategies tactics addison wesley 
copyright john wiley sons softw 
pract 
exper prepared speauth cls 
