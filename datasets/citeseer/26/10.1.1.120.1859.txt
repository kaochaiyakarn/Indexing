robust architecture distributed inference sensor networks mark stanford university computer science department stanford california email mark org inference problems arise sensor networks require computation global consistent local information known node 
large class problems including probabilistic inference regression control problems solved message passing data structure called junction tree 
distributed architecture solving problems robust unreliable communication node failures 
architecture nodes sensor network assemble junction tree exchange messages neighbors solve inference problem efficiently exactly 
key part architecture efficient distributed algorithm optimizing choice junction tree minimize communication computation required inference 
experimental results prototype implementation node mica mote network simulation results applications distributed sensor calibration optimal control sensor field modeling 
experiments demonstrate distributed architecture solve important inference problems exactly efficiently robustly 
sensor networks consist nodes measure characteristics local environment perform computations communicate wireless network 
years advancements hardware low level software led viable multi node sensor networks instrument unstructured environments unprecedented scale 
example mica mote measure temperature humidity pressure visible infrared light sound magnetic fields acceleration 
popular application sensor networks date environmental monitoring 
deployments sensor data downloaded network analysis network aggregates measurements simple local operations compute example averages maxima histograms :10.1.1.136.2762:10.1.1.15.3140
advanced applications tracking actuation require sensor networks solve significantly complex problems sensor fusion data modeling prediction optimal control 
solving inference problems requires combining nodes local measurements generate globally consistent view environment case actuation coherent controls change 
example node temperature sensor measure temperature location node sensor biased impossible infer true temperature measurement 
combining local information measurements sensors network solve global inference problem automatically temperature sensors nodes 
existing inference algorithms sensor networks focus solving specific tasks computing contour levels sensor values distributed sensor calibration target tracking :10.1.1.2.2839
general architecture inference sensor networks solve wide range problems including carlos guestrin jim mcfadden carnegie mellon university school computer science pittsburgh pennsylvania emails guestrin cs cmu edu probabilistic inference problems sensor calibration target tracking regression data modeling contour finding optimization actuator control decision making pattern classification 
core architecture powerful data structure called junction tree allows inference problems solved simple message passing algorithms 
proposals existing centralized inference algorithms sensor networks belief propagation particle filtering 
inference approaches general importantly fully address practical issues arise real deployments communication wireless networks unreliable due noise packet collisions wireless network topology changes time nodes fail number reasons batteries die 
address challenges insufficient implement existing algorithms sensor network architecture fundamentally new algorithms required 
address robustness issues propose novel architecture consisting layers spanning tree formation junction tree formation message passing 
nodes sensor network organize spanning tree neighbors high quality wireless connections 
pairwise communication neighbors tree nodes compute information necessary transform spanning tree junction tree inference problem 
addition algorithms jointly optimize junction tree minimize computation communication required inference 
inference problem solved exactly message passing junction tree 
algorithms quickly recover communication node failures reacting changes states 
demonstrate viability architecture experiments sensor network mica motes illustrate generality simulation experiments different inference tasks data real sensor network deployment 
extended version presents additional background details experiments 
detail application architecture probabilistic inference regression problems see :10.1.1.117.1253
inference problems sensor networks architecture useful solving wide variety inference problems arise sensor networks 
describe examples give sense range problems addressed 
see examples 
intuitive example optimal control nodes control environment achieve 
consider greenhouse deployment nodes actuate blinds achieve specific desired light levels different locations 
light level measured node depend states nearby blinds nearby nodes may conflicting desires 
achieve setting blinds best nodes specify node reward function specifies local utility setting blinds current light measurement 
example light location node depends blinds qi mi local reward function depends current light measurement mi controls applied nearby blinds open close 
blind may affect light level nodes reward functions may represent conflicting interests 
balance nodes competing desires select controls maximize sum nodes reward functions argmax nx qi mi solved enumerating possible control settings optimization problem requires exponential time 
exploiting locality structure reward function depends small set controls problem solved efficiently 
consider simple example binary controls reward function 
distributivity rewrite maximization problem max max max 
simple example decrease number operations 
generally exploit distributivity push max control variable past terms sum depend value potentially obtaining exponential decrease complexity 
probabilistic inference powerful tool solving problems reason partial noisy information 
problems arise sensor networks sensor measurements give incomplete view environment 
general task compute posterior distributions desired quantities probabilistic model environment set observed measurements 
challenging problems solved probabilistic inference example consider distributed sensor calibration task 
problem nodes obtain measurements field temperature measurements corrupted unknown independent biases 
task automatically remove biases exploiting correlation measurements obtained nearby nodes 
accomplish probabilistic inference require prior probabilistic model temperature field measurements biases local correlation structure natural choice prior graphical model distribution product local terms 
model compute posterior distribution true temperatures instantiating observed measurements multiplying terms model marginalizing nuisance variables 
posterior temperature estimates automatically calibrate sensors account measurement noise 
control problem exploit distributivity push past multiplications obtain efficient inference algorithm 
application architecture probabilistic inference problems considered depth :10.1.1.117.1253
important task arises sensor networks regression function fitting 
current sensor network deployments data gathering network measurements temperature fig 

temperature measurements sensor network deployed intel berkeley lab regressed function 
fig 

example junction tree 
uploaded central location 
wasteful measurements nearby locations correlated temperature measurements previous example 
regression powerful general framework maintaining structure sensor field significantly decreasing communication required access 
linear regression sensor field modeled weighted combination basis functions pk represents approximation value sensor field location time bj basis functions chosen advance weights wj optimized minimize sum squared error observed measurements model optimal weights constitute low dimensional summarization original data communicated network significantly cost 
general case computing optimal weights requires solving dense linear system 
kernel linear regression specialization technique basis function bounded support local region influence optimal weights solution sparse linear system 
shows result fitting function sensor network temperature data 
shown regression problems significant locality structure distributive property exploited yield efficient inference algorithm 
message passing junction trees inference problems may different common algebraic structure 
problem requires combine local pieces information set variables obtain global model summarize model subset variables example control problem specified set local reward functions combined addition form global reward function summarized maximization determine optimal actions subset control variables 
problems share essential structure solved algorithms pass messages junction tree 
describe important data structure structure message passing algorithms 
describe message passing operations type inference problem 
problems described set variables 
vn objects inference probabilistic inference random variables model regression optimal weights control control variables 
clique tree undirected tree node associated subset variables ci called clique 
clique tree example 
message passing inference algorithms node begins local information subset variables clique passing messages edges tree nodes obtain summaries relevant information stored nodes 
informally message node sends node computed combining node local information information obtains messages neighbors summarizing away information variables cj 
sending message node node combines information nodes local information summarizes away variables 
example control problem node adds local reward functions obtains neighbors maximizes control variables node clique 
messages may scheduled synchronously message computed may sent asynchronously converge correct values 
node incoming messages available combine local information obtain globally correct result clique variables 
example control problem node compute optimal settings clique control variables regression problem node compute optimal estimate sensor field local neighborhood probabilistic inference problem node compute posterior distribution clique random variables measurements nodes network 
guarantee correctness message passing algorithms clique tree satisfy structural constraint called running intersection property variable cliques ci cj cliques unique path nodes property holds tree called junction tree 
note junction tree appears appears satisfy running intersection property 
running intersection property guarantees nodes reasoning variable vi form subtree 
intuitively structure guarantees pairwise exchanges information nodes reasoning vi reach consensus 
structure holds variables simultaneously complete global consistency reached local communication 
overview architecture types information relevant solving inference problems sensor networks prior information reward functions control problem basis functions regression problem measurements obtained sensors 
simplicity assume prior information distributed nodes network deployment dissemination techniques node obtained sensor readings node begins local information subset variables di may overlap 
local variables known nodes 
organize nodes sensor network undirected tree distributed data structure junction tree missing cliques associated node 
hints layer architecture distributed inference spanning tree layer allows node select set neighbors communication links nodes organized spanning tree junction tree layer allows nodes compute cliques transform spanning tree junction tree embedded network inference layer allows nodes asynchronously pass inference messages edges junction tree node eventually converging correct result inference clique variables 
sections describe layers 
ii 
spanning tree formation goal spanning tree layer node choose set neighbors nodes form spanning tree adjacent nodes high quality communication links 
wireless sensor networks problem challenging link qualities asymmetric change time nodes discover new neighbors estimate associated link qualities detect neighbors disappear 
fortunately spanning trees studied distributed systems sensor networks multihop routing :10.1.1.1.5480
application unique requirements necessary develop distributed spanning tree algorithm specifically architecture 
addition correct robust failure require spanning tree algorithm stable tree remain fixed possible flexible choose wide variety different trees 
properties important routing crucial main goal routing move packets network 
setting spanning tree defines logical architecture inference algorithm spanning tree algorithm stable possible inference algorithm progress 
spanning tree determines computation communication required solve inference problem able flexibly choose different spanning trees minimize cost inference 
achieve goals spanning tree algorithm builds existing algorithms 
ieee protocol nodes network elect node lowest identifier root node chooses parent node offers path root 
ensure stability changing network conditions nodes compute robust link quality estimates exponentially weighted moving averages select edges bidirectional link quality consistently :10.1.1.1.5480
flexibly choose multiple trees developed descendant test strategies give node larger choice valid parents 
details spanning tree algorithm see 
iii 
junction tree formation recall node sensor network starts local information set variables di 
spanning tree built nodes formed distributed data structure similar junction tree tree node local information subset variables see 
junction tree specify clique ci node network 
cliques satisfy properties node clique include local variables ci di nodes running intersection property cliques ci cj variable nodes unique path carry fig 

example initial spanning tree node network dotted lines indicate high reliability links links spanning tree shown arrows 
node domain di local factor 
note running intersection satisfied include 
fig 

reachable variables messages 
node labeled clique ci 
reachable variables message obtained union local variables node 
circled variables added satisfy running intersection property included appears shown underlined variables messages 
robust distributed algorithm passes messages neighbors spanning tree order compute unique set minimal cliques satisfy properties 
spanning tree topology determines cliques junction tree robust distributed algorithm optimizing spanning tree induce cliques minimize communication computation required inference 
ensuring running intersection presenting algorithm assumptions stable valid spanning tree communication neighbors reliable 
generalize case assumptions hold describe optimizations minimize communication 
message passing algorithm node learns clique message passing algorithm sends message receives message neighbor 
node neighbor variables reachable rij di rij nbr messages defined recursively base case message leaf node simply node local variables 
interior node computes rij collecting variables reached neighbor adding local variables di sends rij message shows reachable variables messages example 
node receives reachable variable messages include variable knows carry satisfy running intersection property 
formally node computes clique ci ci di nbr rji 
example node receives reachable variables messages contain clique include shown 
reachable variables messages node compute separator sij ci cj neighbor sij ci rji set variables common nodes determines size inference messages exchange 
message passing algorithm asynchronous node initializes incoming reachable variables messages empty 
time node receives new reachable variables message neighbor recomputes reachable variables messages neighbors transmits changed previous values addition recomputes clique separators 
algorithm guaranteed converge unique minimal set cliques preserve running intersection property underlying spanning tree 
robust distributed implementation presentation assumed reliable communication neighbors spanning tree 
true physical layer implemented transport layer message acknowledgments hypothesis spanning tree consists high quality wireless links 
assumed reachable variables messages transmitted spanning tree algorithm run completion 
algorithm implemented way sensor network way determine distributed algorithm completed 
example node rule possibility new node join network 
algorithms run concurrently node responding changes states 
spanning tree layer node adds removes neighbor junction tree layer informed reacts updating reachable variables messages 
node obtains new neighbor rij computed sent removed neighbor set neighbors rik recomputed retransmitted changed previous value 
tight interaction layers permits junction tree reorganize quickly changing link qualities interference node failures cause spanning tree change 
minimizing communication junction tree algorithm part architecture nodes reason global aspects inference problem 
general space complexity reachable variables messages linear total number variables example leaf spanning tree rij include variables possibly dj 
large problems important choose compact encoding reachable variables bit vectors sets integer intervals minimize communication cost 
described algorithm retransmitted changes happen receives new reachable variables message neighbor 
great deal communication saved sending new value node sends patch allows node compute new value old 
full version describe optimized protocol nodes transmit add set drop set compactly communicate updates reachable variables messages describe problem specific structure exploited reduce communication 
optimizing junction tree algorithm transforms spanning tree junction tree computing unique set minimal cliques satisfy running intersection property 
note different spanning trees give rise junction trees different clique separator sizes example node chosen connect node node node clique need include variable 
size node clique determines amount computation perform separator sizes determine amount communication required neighbors tree 
facts motivate tree optimization algorithm chooses spanning tree gives rise junction tree small cliques separators 
input algorithm cost function decomposes cliques separators junction tree 
example minimize computation communication required solve inference problem may choose ci energy cost inference computations required node clique ci ij sij communication cost paid node send inference message node separator sij 
total cost nx ci ij sij nbr cost functions take account problem specific costs inference algorithm network characteristics link qualities heterogeneous processor speeds 
finding spanning tree minimizes cost function nphard simple reduction centralized junction tree optimization define efficient distributed algorithm greedy local search space spanning trees 
spanning tree algorithm build spanning tree link quality information 
tree optimization algorithm repeatedly reduces cost inference performing legal edge swaps example node swap edge edge edge 
nodes learn legal edge swap change global cost eq 
occur implemented distributed dynamic programming algorithm 
starting evaluation broadcast spanning tree edges node learn alternatives edge relative costs 
example suppose node sends neighbor message eval meaning find legal alternatives edge node propagates eval neighbors nodes 
node receives message sees originator potential neighbor propagates message back outside spanning tree 
node receives message node learns legal swap trade edge edge 
similarly node propagates request node propagates node outside spanning tree way node learns alternative 
general swapping spanning tree edges non local effects cliques separators induced junction tree node assess relative cost edge swap locally 
relative cost assessed efficiently extension evaluation broadcast scheme described 
key idea edge swapped edge reachable variables messages cliques cycle change 
direct consequence definition reachable variables messages eq 

similarly edge swapped edge reachable variables messages cycle change 
evaluate relative cost edge swap nodes swap cycle cycle closed new edge participate computation 
evaluation messages propagate swap cycle node adds local contribution cost estimate computes reachable variables messages clique separators swap implemented evaluates change cost eq 

evaluation protocol described detail 
node initiated evaluation broadcast collects responses performs edge swap minimizes cost tree 
nodes undertake edge swaps time swap cycles overlap resulting change cost may different individual cost estimates indicate 
coordinate updates evaluation broadcasts snooping broadcast channel indicates evaluations progress 
conflicting edge swaps distributed algorithm converge junction tree local minimum cost function 
described communication pattern tree optimization algorithm expensive node starts evaluation broadcast neighbor evaluation messages propagated nodes side edge 
fortunately typical cost functions possible prove running value change cost positive decrease evaluation messages propagate 
interested swaps increase tree cost halt propagation evaluation messages running cost positive 
method reduce communication cost hop count limit limit local search 
iv 
inference message passing top layer architecture robust distributed implementation message passing algorithm solving inference problem 
details algorithms vary different problems probabilistic inference regression structure message node sends node depends node local information messages receives neighbors separator sij ci cj :10.1.1.117.1253
quantities changes message recomputed retransmitted 
example node receives updated message neighbor recomputes retransmits messages neighbors junction tree layer signals separator sij node changed node recomputes retransmits message node spanning tree eventually stabilizes junction tree stabilize case rules guarantee inference messages eventually converge correct values nodes passing inference messages 
problems possible intelligent decisions retransmitting message worth communication cost 
example node transmitted message node receives new message neighbor happens updated message send different previous value 
cases possible obtain error bounds associated suppressing message updates effective way trade communication cost approximation error 
architecture achieved robustness tight interaction layers layer responds changes states react changing network conditions 
reached top algorithm stack consider application results inference sure inference algorithm run completion 
certainly solution problem application specific clear general useful inference algorithm guarantee point execution node partial result quantity computed final versions messages arrived useful 
inference algorithms naturally property regression algorithm partial result represents optimal estimate measurements obtained nodes communication range 
inference algorithms property partial results traditional algorithm probabilistic inference arbitrarily far correct results 
algorithms useful inference sensor networks extra necessary example see new message passing algorithm probabilistic inference resolves problem :10.1.1.117.1253
experimental results section evaluate architecture algorithms real mica sensor network realistic simulator 
brief summary findings see full version detail 
mica mote implementation set experiments test spanning tree junction tree layers real sensor network 
implemented layers tinyos deployed architecture sensor network intel berkeley research lab see 
network mica motes equipped mhz radio mhz microprocessor kb ram kb flash memory 
mote connected power supply ethernet instrumentation 
evaluation layers kernel regression inference problem variables basis function coefficients nodes 
shows communication properties junction tree layer plots total number bytes reachable variables messages represented bit encoding sent second algorithm runs 
messages sent spanning tree layer estimating link qualities 
spanning tree layer begins establishing links number reachable variables messages increases 
soon running intersection property satisfied communication ceases 
ran algorithm hours time tree remarkably stable average ran consecutive minutes sending single reachable variables message 
tested robustness spanning junction trees node communication failures 
simulated node link failures signaling individual motes testbed ethernet connections die ignore messages neighbor 
shows architecture robust recovering rapidly failures 
soon failure communication increases messages sent restore running intersection property tree stabilizes rapidly 
note communication cost repairing existing tree lower building initial tree 
quantify communication saved repairing broken junction tree ran experiments groups random nodes killed 
experiment nodes 
shows average number bytes reachable variables messages necessary build initial junction tree recover failures randomly selected nodes 
average node sends reachable variables messages build initial junction tree indicates building initial junction tree requires modest amount communication 
addition repairing junction tree failures requires communication recovering simultaneous node failure requires third communication building junction tree scratch 
simplicity implement complete tree optimization algorithm iii motes 
simple neighbor selection heuristic chooses neighbors average link quality initial clique highest intersection node initial clique 
heuristic decreased communication cost inference layer factor considering link quality 
addition spanning tree junction tree layers described far initial mica implementation message passing layer kernel regression problem described 
performed preliminary experiments sensor network mica motes regression problem kernels spatial temporal basis functions kernel 
experiments see nodes converged regression coefficients optimal offline solution epochs 
despite fact mica software fixed point arithmetic capabilities matrix operations required regression stable precise 
messages layer reliable communication acknowledgments requiring byte packets message 
main limiting factor mica small amount ram kb allow hold necessary matrices memory 
addressed problem block matrix operations page unused parts matrices flash memory 
simulation experiments test architecture algorithms designed network simulator data link qualities different deployment mica motes 
verify simulations realistic simulated communication cost experiment described 
simulated results qualitatively similar real results fact real network stable simulated 
gives confidence simulation results hold real network 
ran experiment test distributed tree optimization algorithm 
chose communication cost function proportional expected number transmitted bytes necessary successfully communicate inference messages calibration problem described account retransmissions 
piecewise constant curve represents current cost spanning tree exists horizontal line represents hypothesized optimum cost best tree able find centralized optimization techniques 
note initial spanning tree selected link quality information significantly expensive hypothesized optimum distributed optimization algorithm eventually finds trees cost factor 
set experiments performed distributed sensor calibration problem described 
temperature data real network learned gaussian graphical model true temperatures biases temperature measurements 
set distributed sensor calibration task created artificially biased set measurements sampling bias node adding biases held test set measurements 
inference task nodes estimate biases corrupted observations probabilistic model 
node uses probabilistic inference compute posterior mean bias estimate total bytes reachable variables messages office office conference storage elec copy kitchen lab server quiet phone layout mica network initial construction repair failures communication required recover failure total communication bytes junction spanning time seconds communication cost junction tree layer rms error junction spanning distributed global epochs seconds preliminary regression results total communication bytes node killed node killed edge killed edge killed junction spanning time seconds bytes robustness junction tree layer junction spanning time communication cost simulation fig 

experimental results 
figures axis time bottom bar shows valid spanning tree constructed top bar shows running intersection property enforced 
error metric report root mean squared error rms estimates biases sampled 
visualizes trace inference architecture robust message passing algorithm solve probabilistic inference problem :10.1.1.117.1253
main panel plots rms error inference algorithms 
line marked global refers centralized inference measurements 
case posterior mean bias estimates global inference rms error 
solving global inference problem nodes automatically eliminate bias 
line marked local refers centralized local inference node posterior computed measurement 
local inference performs predicting zero bias achieving rms error expected correlated measurements different nodes required automatic calibration 
third curve distributed robust refers architecture 
plot graphically demonstrates key properties algorithm messages passed partial results coincide estimates local inference convergence estimates coincide centralized global inference messages passed estimates informative approximations 
looking closely see junction tree valid complete spanning tree constructed estimates robust message passing algorithm quickly approach exact solution 
test algorithms robustness long term communication failure ran experiment time introduced period interference causes network segmented parts 
see algorithm converges inference period interference prevents complete spanning tree formed 
spite robust message passing algorithm converges excellent approximation half network forms junction tree performs inference available information 
tested architecture performance simulated node failures 
shows results experiment 
node dies measurement lost inference problem solved changing time explains changing error values global local inference 
notice network form junction tree solve inference problem exactly past seconds original nodes functioning 
experiment evaluates architecture regression task described 
distributed regression formulation described defined regression problem temperature data basis functions 
regression task node uses local estimate optimal model parameters predict measurement nearest neighbors measurement 
shows resulting root mean squared error task 
calibration case graph shows curves local curve corresponds node measurement predict neighbors measurements global curve corresponds fitting regression parameters offline resulting model prediction distributed line uses architecture distributed regression messages node locally predicts neighbors values current estimates basis function coefficients 
calibration case see results obtained distributed algorithm quickly converge obtained optimal offline solution 
third final inference problem instance control problem described 
defined actuation problem blinds moved change light conditions blind controlled specific node network 
node possible controls raise lower blinds varying amounts 
node network desired light value lux greater current value 
goal find positions blinds minimize mean squared deviation desired light values 
results shown compare methods local curve node chooses blind setting best fits desires global curve corresponds communication cost initial tree current tree hypothesized optimum junction spanning time rms error optimizing spanning tree number functioning nodes distributed robust redundant global local junction spanning time failing nodes calibration problem optimal solution obtained offline distributed curve uses architecture optimize setting distributed fashion node chooses control setting currently views best global solution 
calibration regression see control strategy obtained distributed algorithm quickly converges obtained optimal offline solution 
vi 
general robust architecture inference sensor networks solve wide range inference problems including probabilistic inference regression optimization 
particular distributed algorithms construct stable junction trees presence communication node failures distributed algorithms optimize junction tree minimize cost inference solve inference problem 
demonstrated viability architecture real sensor network deployment demonstrated generality applications distributed sensor calibration sensor field modeling optimal control realistic sensor network simulation 
results demonstrate architecture robust communication node failures applications inference algorithm quickly converges correct answer 
important feature architecture rely network layer provides multi hop routing difficult impossible sensor networks 
due part communication pattern algorithms neighbors tree communicate 
reason architecture tightly couples application networking layers network related application specific information minimize communication computation required inference 
expect tight coupling application networking layers useful types network computation 
general architectures address range sensor network applications robustness issues real systems significantly increase usefulness sensor network technology 
believe provides solid step goal 
rms error local distributed robust global junction spanning time convergence calibration algorithm rms error local distributed global junction spanning time convergence regression algorithm fig 

experimental results simulation 
rms error distributed robust global local junction spanning time cost plan interference calibration problem local distributed global junction spanning time convergence control algorithm gratefully phil david gay joe hellerstein wei hong sam madden alec woo helpful discussions assistance sensor network deployments 
mainwaring polastre szewczyk culler anderson wireless sensor networks habitat monitoring intel research tech :10.1.1.136.2762
rep irb tr 
hellerstein hong madden average sophisticated sensing queries ipsn :10.1.1.15.3140
intanagonwiwat estrin govindan heidemann impact network density data aggregation wireless sensor networks int conf 
distributed comp 
systems icdcs 
nowak mitra boundary estimation sensor networks theory methods ipsn 
estrin potkonjak collaborative approach place sensor calibration ipsn 
zhao liu liu guibas reich collaborative signal information processing information directed approach proceedings ieee vol :10.1.1.2.2839
pp 

aji mceliece generalized distributive law ieee trans 
information theory vol 
pp 

crick pfeffer loopy belief propagation basis communication sensor networks uncertainty artificial intelligence uai 
kumar extended message passing algorithm inference loopy gaussian graphical models ad hoc networks vol 
pp 

coates distributed particle filtering sensor networks information processing sensor networks ipsn 
guestrin robust architecture distributed inference sensor networks intel research tech 
rep irb tr 
robust probabilistic inference distributed systems uncertainty artif :10.1.1.117.1253
intelligence uai 
guestrin bodik madden distributed regression efficient framework modeling sensor network data information processing sensor networks 
guestrin koller parr multiagent planning factored mdps neural information processing systems 
cowell dawid lauritzen spiegelhalter probabilistic networks expert systems 
new york ny springer 
woo tong culler taming underlying challenges reliable multihop routing sensor networks int conf :10.1.1.1.5480
sensor systems sensys 
