consistent penetration depth estimation deformable collision response bruno heidelberger matthias teschner richard matthias ller markus gross penalty approaches efficiently resolve collisions dynamically simulated rigid deformable objects 
approaches compute penalty forces penetration depth intersecting objects exist algorithms estimating exact penetration depth 
discrete time simulations information cause non plausible collision responses case large penetrations due object discretization 
method compute consistent penetration depth information order reduce collision response artifacts inherent existing penetration depth approaches 
method considers set close surface features avoid discontinuous penetration depths 
propagation scheme applied case large penetrations avoid non plausible inconsistent penetration depth information 
interactive simulation environments dynamically deforming objects play important role computational surgery growing interest games 
environments require efficient robust methods basic simulation components deformation collision detection collision response 
efficient deformable models investigated detection collisions deformable structures gained increasing attention 
survey current approaches deformable collision detection tes 
existing approaches deformable modeling collision detection scenes consisting thou computer graphics laboratory eth zurich switzerland email heidelberger inf ethz ch sand volumetric elements simulated interactive rates tes tes 
order realistically simulate behavior colliding objects appropriate collision response considered 
idea commonly discrete time simulations generate forces eventually separate colliding objects 
response penalty forces computed penetrating object vertices function penetration depth represents distance direction surface penetrated object 
case deformable objects force computation intended reflect fact real colliding objects deform 
deformation induces forces contact area approximated penetration depth approaches virtual environments 
response forces commonly consider additional features friction computed function relative velocity colliding structures penetration depth 
penetration depth approaches sufficiently dense sampled surfaces case small penetrations 
interactive discrete time simulations discretized object representations requirements rarely met 
depending size simulation time step large penetrations occur result computation non plausible penetration depths directions 
fig 
illustrates problem 
discrete surface representations result discontinuous penetration directions 
discontinuities illustrated fig 
degrade stability response process 
contribution 
method compute consistent penetration depths directions colliding tetrahedral meshes triangulated surfaces 
contrast approaches consider closest surface feature pre vmv stanford usa november approach addresses problem non plausible penetration depth estimation 
strictly computing minimal distances illustrated left hand image approach computes consistent penetration distances illustrated right hand image 
collision response artifacts discrete time simulations significantly reduced 
approach addresses problem discontinuous penetration depths small displacements penetrating vertices illustrated left hand image 
smooth plausible approximations computed reduce artifacts collision response scheme 
sented approach considers set close surface features significantly reduce discontinuities estimated penetration depth directions small displacements penetrating vertices 
propagation scheme introduced approximate penetration depth direction vertices deep penetrations 
significantly reduces artifacts penetration direction case large penetrations 
method works underlying deformation model contact model computes penalty forces penetration depth 
scheme requires volumetric collision detection approach 
method primarily intended deformable objects applied rigid bodies 
method integrated collision response scheme dynamically deforming tetrahedral meshes 
experiments sec 
illustrate scheme significantly reduces artifacts compared standard penetration depth approaches 
provides plausible collision response wide range simulation time steps case large object penetrations 
scheme works objects geometrical complexity especially advantageous coarsely sampled objects 
related contact models collision response rigid deformable bodies investigated 
analytical methods calculating forces dynamically colliding rigid bodies moo hah bar bar bar bar pau 
approaches solve problems formulated linear complementarity problems lcp 
addition analytical methods second class collision response schemes called penalty forces 
approaches calculate response forces penetration depths order resolve colliding objects 
solutions ter pla 
penalty approaches simulations deformable objects cloth rigid bodies moo mck des 
third approach directly computes contact surfaces colliding deformable objects gas 
due computational efficiency approaches appropriate interactive simulations deformable objects 
consider various mechanical object properties 
friction surface characteristics incorporated 
penalty forces computed penetration depths exist approaches compute exact approximative penetration depth colliding objects defined minimum translation object undergoes resolve collision 
exact penetration depth computations minkowski sums cam gui hierarchical object presentations dob approximative solutions gjk algorithm gil iteratively expanding polytopes cam ber 
approaches object space discretizations fis employ graphics hardware hof sud introduce incremental optimization steps kim 
existing approaches efficiently compute minimal penetration depth address inconsistency problems result discrete time simulations see figs 

solution problem approaches continuous collision detection red 
approaches computationally expensive compared discrete collision detection approaches appropriate deformable objects 
presents alternative solution inconsistency problems 
approach computes penetration depths significantly reduce artifacts respective collision response scheme 
method section provides overview proposed algorithm followed detailed description stages 
algorithm overview method takes set potentially colliding tetrahedral meshes input computes consistent penetration depths directions colliding mesh points 
method proceeds consecutive stages stage detects colliding points scene spatial hashing approach see sec 

stage identifies colliding points adjacent non colliding points border points 
detects intersecting edges contain non colliding point border point 
exact intersection point corresponding surface normal penetrated surface computed intersection edge see sec 

stage approximates penetration depth direction border point adjacent intersection points surface normals obtained second stage see sec 

stage propagates penetration depth direction colliding points border points see sec 

result algorithm colliding mesh points scene appropriate penetration depth direction 
information input penalty collision response scheme 
experiments sec 
linear response forces 
surface friction considered 
point collisions stage detects object points collide tetrahedral mesh scene 
volumetric collision detection accomplished spatial hashing approach tes 
stage classifies mesh points colliding points black non colliding points white 
spatial hashing implicitly subdivides hash grid composed small axis aligned bounding boxes 
algorithm proceeds passes mesh points classified respect hash grid cells 
second classification applied tetrahedrons 
tetrahedron interferes cell associated points cell checked collision tetrahedron 
actual collision test computes barycentric coordinates point respect tetrahedron order detect point collides tetrahedron 
refer tes details 
stage mesh points scene classified colliding points non colliding points see fig 

edge intersections second stage identifies colliding points adjacent non colliding point border points 
underlying idea classify colliding points respect penetration depth 
information second stage finds intersecting edges contain non colliding point border point 
exact intersection point edges surface corresponding surface normal penetrated mesh computed 
order efficiently compute information original spatial hashing approach extended handle collisions edges surfaces 
second stage finds intersecting edges red tetrahedral meshes contain non colliding point white border point black 
exact intersection point corresponding surface normal computed intersection edge 
extended spatial hashing algorithm employs implicit subdivision described sec 

step intersecting edges classified respect hash grid cells efficient voxel traversal technique ama 
second step simplified intersection test gre performed classify mesh faces 
face intersects hash grid cell associated edges cell checked intersection respective face 
actual intersection test computes barycentric coordinates intersection point order detect edge intersects face 
addition barycentric coordinates interpolate smooth surface normal vertex normals face 
results smooth approximation penetration direction see sec 

edge possibly intersect mesh face 
intersection point nearest non colliding point edge considered stages 
second stage border point adjacent intersection edges 
intersecting edges exact intersection point corresponding surface normal see fig 

penetration depth direction third stage approximates penetration depth direction border points adjacent intersection points surface normals computed second stage 
third stage approximates penetration depth direction border points adjacent intersection points surface normals 
influence border point computed adjacent intersection points 
influence dependent distance intersection border point 
respective weighting function positive non zero distances increasing decreasing distances 
ensure convergence penetration depth information respect intersection point xi colliding point approaches xi 
leads weighting function influence xi xi xi xi denoting intersection point denoting border point 
weighting function normalized avoid normalization steps processing 
weight undefined coinciding points 
stage ensures collision detected case 
penetration depth border point computed influences resulting xi xi ni xi ni denoting unit surface normal penetrated object surface intersection point 
number intersection points adjacent border point penetration direction border point computed weighted average surface normals xi ni xi normalized penetration direction obtained 
third stage consistent penetration depths directions computed border points see fig 

contrast existing penetration depth approaches consider distance weighted averaging distances directions provides continuous behavior penetration depth function small displacements colliding points colliding points adjacent 
non plausible penetration directions due surface discretization penetrated object avoided 
propagation computed penetration depth information border points fourth stage propagates information colliding points border points see fig 

contrast existing penetration depth approaches compute penetration depth points independently 
idea propagation scheme avoid penetration depths case large penetrations 
stage propagates penetration depth direction colliding points border points 
propagation iterative process consists steps current border points marked processed points 
second new set border points identified colliding points adjacent processed points 
iteration aborted new border points 
penetration depth direction new border points computed information available adjacent processed points 
similar method described sec 
weighting function compute influence pj adjacent processed point pj border point pj 
pj influences pj penetration depth border point computed pj pj pj pj pj pj denoting normalized penetration direction processed point pj pj denoting penetration depth 
number processed points adjacent border point algorithm computes consistent penetration depths directions colliding points 
penetration direction computed weighted average penetration direction processed points adjacent border point jrj 
normalized 
fourth stage colliding points consistent penetration depth direction assigned see fig 

results integrated method simulation environment deformable objects tes 
various experiments carried compare quality performance proposed method standard closest feature approach 
test scenarios section performed pc pentium ghz geforce fx ultra gpu 
test deformable cubes consisting tetrahedrons simulated 
large penetrations objects occur due high relative velocity discrete time simulation 
illustrated fig 
standard approach fails compute consistent penetration depth 
results non plausible collision response 
employing approach scenario results consistent plausible penetration depth information 
second scenario simulates deformable spheres consisting tetrahedrons 
starting random position build stack spheres 
computing penetration depth standard approach leads heavy artifacts 
spheres tend stick due inconsistent handling penetrated object points 
case inconsistent penetration depths response forces cause non plausible equilibrium states 
applying approach response artifacts avoided 
fig 
illustrates second experiment 
variety deformable objects simulated third scenario illustrated fig 

approach computes consistent penetration information entire simulation resolves collisions plausible way 
stable resting contact objects maintained 
approach scales linearly number colliding points 
experiments section average time needed resolving colliding point 
time spent detecting edge intersections required second stage method see sec 

experienced similar computational costs calculate closest feature standard approach 
discussion approach eliminates collision response artifacts inherent existing approaches exist configurations plausible collision response computed 
colliding object entirely enclosed penetrated object algorithm compute penetration depth border points 
response scheme generate forces object point leaves penetrated object 
contrast standard approaches compute penetration depth information object points probably resolve collision arbitrary direction 
object point colliding object outside penetrated object approach compute plausible consistent penetration depth information colliding points 
exist cases objects crossing existing proposed approach able compute useful penetration depth information 
approach compute penetration depth definition 
computing shortest distance surface penetrated object approach approximates penetration depth points close surface 
colliding non border points depth propagated border points considering penetrated object 
supports consistency leads results differ significantly actual penetration depth definition 
disregard definition eliminates artifacts respective collision response scheme 
colliding points converge surface penetrated object computed penetration depth converges exact penetration depth 
approach consistent penetration depth estimation 
discrete time simulations method eliminates collision response artifacts inherent existing penetration depth approaches 
computing closest surface feature colliding points set surface features considered avoid dynamic discontinuities penetration depth function 
penetration depth computed colliding points close surface consistent information propagated colliding points larger penetrations 
general algorithm faster standard penetration depth approaches due propagation process 
experiments dynamically deforming objects illustrated advantages consistent penetration depth estimation compared existing methods 
ama woo fast voxel traversal algorithm ray tracing proc 
eurographics pp 

bar baraff analytical methods dynamic simulation non penetrating rigid bodies proc 
siggraph pp 

bar baraff coping friction non penetrating rigid body simulation computer graphics vol 
pp 

bar baraff issues computing contact forces non penetrating rigid bodies algorithmica vol 
pp 

bar baraff fast contact force computation non penetrating rigid bodies proc 
siggraph pp 

ber van den bergen proximity queries penetration depth computation game objects proc 
game developers conf 
cam cameron determining minimum translational distance convex polyhedra proc 
ieee int 
conf 
robotics automation pp 

cam cameron enhancing gjk computing minimum penetration distance convex polyhedra proc 
int 
conf 
robotics automation pp 

des desbrun schr der barr interactive animation structured deformable objects proc 
graphics interface pp 

dob dobkin hershberger kirkpatrick suri computing intersection depth polyhedra algorithmica vol 
pp 

faure energy method contact force computation proc 
eurographics pp 

fis fisher lin deformed distance fields simulation non penetrating flexible bodies proc 
workshop computer animation simulation 
gas 
gascuel implicit formulation precise contact modeling flexible solids proc 
siggraph pp 

gil gilbert johnson keerthi fast procedure computing distance objects dimensional space iee journal robotics automation vol 
pp 

gre greene detecting intersection rectangular solid convex polyhedron graphics gems iv pp 

gui guibas seidel computing convolutions reciprocal search proc 
symposium computational geometry pp 

hah hahn realistic animation rigid bodies proc 
siggraph pp 

hof hoff lin manocha fast geometric proximity queries rigid deformable models graphics hardware acceleration technical report university north carolina computer science 
kim kim lin manocha incremental penetration depth estimation convex polytopes dual space expansion ieee transactions visualization computer graphics vol 

mck mckenna zeltzer dynamic simulation autonomous legged locomotion proc 
siggraph pp 

moo moore wilhelms collision detection response computer animation proc 
siggraph pp 

pau pauly pai guibas quasi rigid objects contact proc 
symposium computer animation appear 
pla platt barr constraint methods flexible models proc 
siggraph pp 

red redon kim lin manocha fast continuous collision detection articulated models proc 
symposium solid modeling applications 
sud sud manocha fast distance field computation graphics hardware proc 
eurographics appear 
ter terzopoulos platt barr elastically deformable models proc 
siggraph pp 

tes teschner heidelberger ller gross optimized spatial hashing collision detection deformable objects proc 
vision modeling visualization vmv pp 

tes teschner heidelberger ller gross versatile robust model geometrically complex deformable solids proc 
computer graphics international pp 

tes teschner heidelberger zachmann fuhrmann 
cani faure thalmann collision detection deformable objects proc 
eurographics state art report appear 
colliding deformable cubes 
standard closest feature approach shown row causes non plausible penetration depth information case large penetrations 
causes artifacts collision response scheme eliminated approach illustrated second row 
colliding deformable spheres 
images illustrate sticking artifact standard penetration depth approach 
non plausible equilibrium states avoided approach shown images right hand side 
various colliding deformable objects 
scenario illustrates approach realistic collision response objects varying characteristics 
scene convex concave objects different size simulated 

