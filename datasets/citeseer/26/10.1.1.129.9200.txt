semi preemptible locks distributed file system randal burns robert rees darrell long department computer science department computer science ibm almaden research center university california santa cruz randal rees almaden ibm com darrell cse ucsc edu applications require ability obtain exclusive access data application granted privileges object preempted limits actions processes 
local file systems support exclusive access files maintaining information access rights current open file instances checking subsequent opens compatibility 
implementing exclusive access manner distributed file systems degrades performance requiring open file registered server maintains global open state 
introduce distributed lock managing file access called semi preemptible lock avoids performance limitation 
clients locally open requests files consistent distributed lock hold 
file system clients retain cache distributed locks absence open file instances 
file access lock cached client services open requests server message improving performance exploiting locality affinity files clients 
distributed client server file system presents local file system interface remote shared data 
file system client takes responsibility implementing semantics local file system translating local interface client server network protocol 
heterogeneous distributed file systems concurrently running client operating systems system may translating semantics different local file systems single network protocol 
distributed file systems principal method sharing data distributed applications 
programmers understand local file system semantics easily gain access shared data 
exactly reason distributed file systems easy difficult implement 
distributed file system takes responsibility providing synchronized access consistent views shared data shielding ap plication programmer tasks moving complexity file system 
locking construct file access locks implement semantics file open client opens file exclusive writing permitting shared readers concurrent opens read clients forbidden 
locks designed provide data consistency cache coherency suitable cache coherency protocol required addition file access locking 
locks allow clients choose exclusive access sharing options available native file system interface semantics local open enforced distributed system 
traditionally distributed file systems relaxed local semantics ease implementation performance reasons 
example andrew file system afs chooses considerably simpler model synchronizing file access posix local file system interface clients 
afs distributed mechanism enforce exclusive open modes clients 
relaxing semantics afs ability aggressively cache data file closed 
provides high performance low latency access data subsequent opens 
file systems cifs network file system willing suffer network message overhead order correctly enforce local semantics 
file systems send open close operations server 
server maintains globally consistent view file system open state checks open request outstanding open instances 
view unacceptable solution due limitations places clients 
registering open close requests means client conducts connection session oriented transactions servers 
cifs prevents clients caching file data file currently open 
cifs subsequently improved performance opens providing call opportunistic lock allowing single client cache data access privileges past close 
opportunistic locks apply limited specific cases data sharing general locking system 
contribution synchronized file access distributed environment semi preemptible lock 
client holding semi preemptible lock file right access file modes specified held lock 
clients maintain file open state locally need transact file system server opening closing file data 
clients may continue hold lock open instances 
way client cache access privileges right open file service subsequent open requests message server 
mechanism reduces server traffic eliminating open close messages consequently reduces latency avoiding message round trip time 
clients cache access privileges file belief file locally client 
temporal locality data caching effective distributed environment improve performance file open 
semi preemptible locks reduce distributed lock state 
clients hold multiple open instances single file concurrently 
open instances granted single semi preemptible lock holding separate lock open 
single lock summarizes client open state distributed system 
semi preemptible lock avoids client server interactions compared existing protocols synchronization file open close requests distributed system 
caching locks subsequent opens file client served locally 
storage area network file system brief digression file system architecture implement semi preemptible locking helps motivate performance advantages 
storage tank project ibm research building distributed file system storage area network san 
san high speed network gives computers shared access storage devices 
currently sans constructed fibre channel fc networks 
expect network attached storage devices available general purpose data networks sans constructed networks gigabit ethernet 
distributed file system built san removes server bottleneck requests giving clients direct data path disks 
building distributed file system san file system clients access data directly storage area network 
traditional client server file systems disk client control network storage area network san disk client tape client server cluster server server server schematic storage tank distributed file system storage area network san 
store data server private disks 
clients function ship data requests server performs behalf 
traditional file systems storage tank clients perform directly shared storage devices 
direct data access model similar file system network attached secure disks nasd shared disks ip network global file system san attached storage devices 
clients communicate storage tank servers general purpose network obtain file metadata 
addition serving file system metadata servers manage cache coherency protocols authentication allocation file data managing data placement free space 
file systems metadata data stored separately 
metadata including location blocks file shared storage kept highperformance storage server 
san storage devices contain blocks data files 
way shared devices san optimized data traffic block transfer data server private storage optimized metadata workload frequent small reads writes 
san environment simplifies distributed file system server removing data tasks radically changes server performance characteristics 
previously server performance measured data rate 
performance occasionally limited network bandwidth limited server ability read data storage write network 
san environment storage network server performance properly measured transactions second analogous database server 
data read write storage tank file server performs transactions traditional file server equal processing power 
computational resources efficiently storage tank semi preemptible demand messages server client client client client open state clients locks held open files open instance demands semi preemptible lock accepted denied depending client file system open state 
higher data rate file system client allow distributed file system fully utilize network infrastructure investment server hardware 
relatively slow process shipping data client server hide protocol overhead minimizing message traffic file system operations important 
protocol overhead added latency network server resources clientserver messages 
traditional client server file systems clients go server obtain data 
shipping data client takes significantly longer uses resources single server message overhead associated messages opening closing file hidden cost shipping data 
storage tank protocol overhead limits performance 
semi preemptible lock allows client open file contacting server message avoided time saved server critical path 
semi preemptible file locks distributed files systems little data sharing occurs practice data sharing indicates clients concurrently accessing file :10.1.1.12.448
additionally clients access data 
claims supported effectiveness data caching environment 
mature distributed file systems take advantage observation cache file data clients process actively uses data :10.1.1.130.3029
design decision cache file data file closed improves performance subsequent open system request client access data 
subsequent accesses system caching avoids server message data read disk performance improves 
client attempts access data sees additional latency file system server invalidates cache client holds data granting access new client 
reasons caching improves performance data access semi preemptible lock improves performance file open 
local process requests open file current lock held client obtains semi preemptible file access lock granting open 
local process closes file client records open file instances currently lock holds lock awaiting opens file 
analogous data caching holding access locks past close decreases latency avoiding server message client attempts open file 
caching locks hinders opens clients server demand lock granting access client 
recording open instances associated access lock client differentiates locks held protect open files released locks held improve performance subsequent opens 
consider second client wishes obtain exclusive access file locked client 
server processes second client request demanding lock client sending message requests release held lock 
client process holds open instance file requires held lock protect open instance denies demand requests server 
process holds open instance file client longer utilizes held lock releases safely 
access locks called semi preemptible server demand preemptible locks 
client refuse demand request 
semi preemptible locking system particularly appropriate san distributed file system data obtained server 
file access lock held client directly access data shared storage need interact server 
claim true direct access storage environments network attached secure disks nasd 
direct access storage clients interact term demand consistency existing lock terminology despite fact clients refuse demand 
term request appropriately describe server action request describe client process acquiring locks server 
lock name access sharing metadata read shared write update exclusive table locks combinations protected access modes allowed sharing modes selected metadata read write access 
servers data file systems save message semi preemptible locking 
managing file access enforce open semantics distributed system define suitable set file access locks mapping local file system open modes access locks 
certain cases local file system open modes client platforms paired distributed file access lock semantics 
exceptions map unsupported open modes restrictive file access locks 
mapping guarantees lock holder requested privileges reduces ability clients hold locks concurrently 
chosen locks exactly implement open mode semantics client file systems guarantee keep consistent views distributed open state clients 
deviations strict local semantics storage tank minor improvement file access synchronization provided known distributed file systems 
designers storage tank believe locks describe intuitive descriptive data sharing model 
locking scheme table describes semantics defined locks 
distributed file system clients select table lock describes intended access access modes open instances willing share 
system defines access modes read access allowing holder open files read data caching write access permitting holder open files write write caching metadata access right cache read metadata 
client file systems enforce local processes open file mode exceeds privileges granted intended access field restricts sharing granted lock 
distributed access model decided lock write data may read data lock mode shares access writers shares held lock requested lock table lock compatibility table 
access readers 
read write hierarchy appears protocols implementing consistency distributed system 
distributed data systems local file systems separate read write access choosing flexible interface congruent semantics data sharing 
local file systems find useful differentiate read write write improve performance local data cache management strategies differentiate special device files pipes limited access 
reasonable local file systems concepts apply distributed file sharing left locking 
locking modes associated compatibility table table describes pairwise combinations locks compatible 
distributed file system server uses data structure resolve action take client requests semi preemptible lock 
server evaluates requested lock row outstanding held locks column 
marks table indicate lock modes compatible 
marks denote incompatibility 
evaluating lock request held locks server compatible incompatible attempts acquire requested lock behalf client demanding incompatible locks 
lock demand denied client indicating held lock protects current open instance server denies requested lock 
semi preemptible file access locks server knowledge global open state file 
clients maintain state individually 
server forward lock requests resolved clients semi preemptible mechanism 
distributed file access locks indicate system set clients potentially hold file open 
server queries clients resolve conflicts 
system contain centrally located global record open files lock demands provide equally descriptive method determining global open state file 
hierarchy summarizing local open state storage tank restrict client lock holdings single distributed file access lock file 
clients may local open instances file protected single lock 
reduces number held locks distributed system decreases network traffic associated file locking 
restriction possible set locks define form compatible hierarchy provide facility clients change lock holdings releasing locks 
ensure single distributed file access lock suffices describe multiple local open instances set defined locks form compatible hierarchy 
suitable hierarchy meets condition compatible lock strength related 
strength indicates stronger lock protects access modes allowed weaker lock stronger lock allow locks concurrently held conflict weaker lock 
words stronger lock allows lock holder file access modes shares fewer 
note locks strength related compatible 
locks form compatible hierarchy allow file opens granted lock equal greater strength minimum strength lock file open mapped 
permits multiple compatible opens protected single lock equal greater strength lock required protect strongest open 
clients locking scheme able modify currently held lock change protected access sharing releasing lock 
need arises instances client holds semi preemptible lock protecting local open instances client requests lock file conflict open instances incompatible held semi preemptible lock client hold graphs locking scheme 
upgrades ing semi preemptible lock protects open instances local process request open instance compatible current open instances access sharing requirements semi preemptible lock provide 
case held lock strong client convert weaker compatible lock protects open instances 
process lock downgrade 
client release lock outright obtain weaker lock current open instances protect 
lock demands received server contain type file access lock requested clients resolve compatibility appropriate downgrade 
legal downgrade graph constructed transitive closure hierarchy graph shows transitions stronger weaker lock 
downgrade performed held lock locks weaker held lock compatible system outstanding locks 
second case held lock provide access sharing requirements new request 
held lock weak client attempts obtain stronger lock protect current open instances new request 
obtaining stronger lock continuing hold old lock called lock upgrade 
legal upgrade graph shows transitions held locks compatible stronger locks 
limiting upgrades compatible locks prevents locking system falsely refusing legal lock transitions 
discuss topic depth section 
compatibility determines pairs locks held concurrently concepts strength weakness help system determine action take change lock state service local open server client local opens lock table lock table client instance instance instance held locks held locks distributed local file access locks 
requests server demand messages 
lock management client uses concept compatibility lock strength local opens protection distributed lock 
local open instance represented minimum strength lock provides requested access modes limits concurrently held locks 
local open instance client assigns local lock 
local lock evaluate compatibility upgrades 
client manages local locks file local locks compatible client holds distributed lock stronger equal strength local locks 
client enforces conditions held distributed lock encapsulates open state 
client strength held file access lock server acts accordance held lock server illegal actions 
recall server demands held lock try reduce strength incompatible request arrives client 
holding stronger lock impact correctness 
previously stated client needs upgrade held lock stronger incompatible lock 
upgrade requests occur local file open requires stronger lock held lock 
client needed full strength current lock open instance incompatible new open request 
cases client needs upgraded lock incompatible currently held lock full strength held lock 
clients address situation downgrading current holding minimum strength lock protects current local locks upgrading needed lock 
example locks clarifies point 
suppose client holds lock protects local open local lock 
client receives open request requires local lock 
request compatible local lock incompatible held distributed file access lock 
client current holding intended access metadata access generic read read generic write write delete deletion intended access mode compatibility share read reader share write writer share delete deletion sharing mode table sharing modes windows nt 
upgrades limiting upgrades compatible locks avoid subtle race conditions lead unnecessary demands 
windows nt case study locking scheme intends support local file system semantics simplest design locking states possible 
locking allows distributed file system exactly implement posix semantics 
due small number locks locks cover windows nt open modes correctly violations windows nt semantics possible 
table presents options windows nt function call open file 
argument describes access mode open protects 
similarly describes access modes legally held concurrent open instances 
combinations arguments legal 
arguments outline key shortcomings implement windows nt file system client storage tank 
mapping arguments lock ignore delete share delete option applies file deletion file sharing 
file access options select minimum strength lock desired access sharing modes 
mapping exact share write appears share read generic write generic read 
cases include read privilege requested arguments generic write share write obtains lock includes read privilege read sharing 
differentiate open intent write open intent read write 
justified decision citing significant file sharing distinction part windows nt semantics 
chosen locks fail adequately describe options may fail concurrent opens separate clients file system semantics allow 
example windows nt semantics permits clients concurrently open files generic write share write system prohibit open occur 
mitigate effects inexact mappings system allow clients open file generic write share write long system 
concurrent opens existing local synchronization semantics override distributed locking 
consequently semantic violations occur distinct clients 
local correctness single clients mitigates shortcomings locking scheme care common occurrences file sharing 
implementing windows nt open semantics exactly prevent multiple clients opening file concurrently local semantics allow single client 
occur clients request write access read 
allows opens local semantics forbid 
despite shortcomings feel locks effectively manage exclusive file access windows nt environment 
choose implement locks simplicity 
implementing exact semantics locally addresses common cases sharing semantic violations influence concurrency correctness 
key feature reduction complexity supporting local file system open modes locks small locking data structures 
related research distributed file systems clients transact server open close file synchronization 
simplest technique implement local file system open semantics distributed environment 
file open file close requests require network operation 
andrew file system interacts server open close uses open close points synchronize cached data 
andrew implement data cache hold data past close general callback demand mechanism 
callbacks apply preemptible data locks 
storage tank file system uses open mode synchronization locks called tokens im local file system semantics 
tokens fully preemptible client held past close 
file system open close generates token request release 
file system open state token request conflicts managed completely server 
uses simple lock hierarchy data locks hierarchy apply open mode synchronization tokens 
dfs file system describes token mechanism similar semi preemptible locks management data metadata open state 
semi preemptible locks client refuse permit revocation token depending local state 
token management dfs differs elements system locking including file access locks data locks byte range locks managed single token mechanism 
dfs treatment token management concrete discussion locking address mapping local file system semantics distributed locking system 
comments directions argument semi client lock summarization improve performance relies temporal locality limited data sharing clients 
nearly identical arguments caching andrew file system hoarding coda disconnected operation 
arguments accepted file system research feel simulation measurement modern file system workloads required experimentally verify design 
step research validate locking design storage tank prototype quantify performance improvements 
space reasons omits discussion synchronization presence failure 
distributed file system presents local file system interface remote shared storage continue components fail 
modern file systems storage tank uses lease protocol ensure operational safety high availability presence client server failures network partitions 
distributed file systems need manage open state referential integrity synchronized access files 
existing distributed systems address problem relaxing local file system semantics sending file open request server 
introduced locking construct semi preemptible lock permits file system clients file open requests locally server transaction 
avoiding server messages open client improves performance exploiting locality access files 
file system client semi preemptible locks summarize open state open files may granted protection single lock 
reduces global lock state reduces client server messages 
distributed file systems play central role distributed computing mask complexity distributed data management users understand file system interface 
semi preemptible locking continue approach goal providing high performance file access distributed system 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
acm transactions computer systems february 
baker hartman kupfer shirriff ousterhout 
measurements distributed file system 
proceedings th annual symposium operating systems october 
benner 
fibre channel gigabit communication computer networks 
mcgraw hill series computer communications 
birrell needham 
universal file server 
ieee transactions software engineering se september 
culler singh gupta 
parallel computer architecture hardware software approach 
morgan kaufmann publishers san francisco california usa 

recovery file system 
acm transactions computer systems august 
frazier johnson 
gigabit ethernet mbps 
ieee internet computing 
gibson nagle amiri chang gobioff lee riedel zelenka 
file server scaling network attached secure disks 
performance evaluation review volume 
gibson nagle amiri chang gobioff riedel zelenka 
filesystems network attach secure disks 
technical report cmu cs school computer science carnegie mellon university july 
gray cheriton 
leases efficient faulttolerant mechanism distributed file cache consistency 
proceedings th acm symposium operating systems principles december 
gray reuter 
transaction processing concepts techniques 
morgan kaufmann publishers san mateo california usa 
pink 
design multicast distributed file system 
proceedings rd symposium operating systems design implementation 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
kazar 
synchronization caching issues andrew file system 
proceedings usenix winter technical conference february 
kazar anderson mason tu 
file system architectural overview 
proceedings summer usenix conference june 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems 
leach 
common internet file system cifs protocol 
technical report network working group internet engineering task force december 
mann birrell hisgen swart 
coherent distributed file cache directory 
acm transactions computer systems may 
nelson welch ousterhout 
caching sprite network file system 
acm transactions computer systems february 
barry erickson nygaard keefe 
bit shared disk file system linux 
proceedings th ieee mass storage systems symposium 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee transactions computers april 
thekkath mann lee 
frangipani scalable distributed file system 
proceedings th acm symposium operating system principles 
walker popek english kline thiel 
locus distributed operating system 
proceedings th acm symposium operating systems principles 
walsh lyon sager chang kleiman lyon sandberg weiss 
overview sun network file system 
proceedings winter usenix technical conference january 
