published proceedings nd international conference knowledge discovery data mining kdd density algorithm discovering clusters large spatial databases noise martin ester hans peter kriegel rg sander xu clustering algorithms attractive task class identification spatial databases 
application large spatial databases rises requirements clustering algorithms minimal requirements domain knowledge determine input parameters discovery clusters arbitrary shape efficiency large databases 
known clustering algorithms offer solution combination requirements 
new clustering algorithm dbscan relying density notion clusters designed discover clusters arbitrary shape 
dbscan requires input parameter supports user determining appropriate value 
performed experimental evaluation effectiveness efficiency dbscan synthetic data real data sequoia benchmark 
results experiments demonstrate dbscan significantly effective discovering clusters arbitrary shape known algorithm ans dbscan outperforms clarans factor terms efficiency 
keywords clustering algorithms arbitrary shape clusters efficiency large spatial databases handling noise 

numerous applications require management spatial data data related space 
spatial database systems sdbs database systems management spatial data 
increasingly large amounts data obtained satellite images ray crystallography automatic equipment 
automated knowledge discovery important spatial databases 
tasks knowledge discovery databases kdd defined literature matheus chan piatetsky shapiro 
task considered class identification grouping objects database meaningful subclasses 
earth observation database want discover classes houses river 
clustering algorithms attractive task class identification 
application large spatial databases rises requirements clustering algorithms minimal requirements domain knowledge determine input parameters appropriate values institute computer science university munich 
nchen germany ester kriegel sander informatik uni muenchen de known advance dealing large databases 
discovery clusters arbitrary shape shape clusters spatial databases may spherical drawn linear elongated 
efficiency large databases databases significantly just objects 
known clustering algorithms offer solution combination requirements 
new clustering algorithm dbscan 
requires input parameter supports user determining appropriate value 
discovers clusters arbitrary shape 
dbscan efficient large spatial databases 
rest organized follows 
discuss clustering algorithms section evaluating requirements 
section notion clusters concept density database 
section introduces algorithm dbscan discovers clusters spatial database 
section performed experimental evaluation effectiveness efficiency dbscan synthetic data data sequoia benchmark 
section concludes summary directions research 

clustering algorithms basic types clustering algorithms kaufman rousseeuw partitioning hierarchical algorithms 
partitioning algorithms construct partition database objects set clusters 
input parameter algorithms domain knowledge required unfortunately available applications 
partitioning algorithm typically starts initial partition uses iterative control strategy optimize objective function 
cluster represented gravity center cluster means algorithms objects cluster located near center medoid algorithms 
consequently partitioning algorithms step procedure 
determine representatives minimizing objective function 
second assign object cluster representative closest considered object 
second step implies partition equivalent voronoi diagram cluster contained voronoi cells 
shape clusters partitioning algorithm convex restrictive 
ng han explore partitioning algorithms kdd spatial databases 
algorithm called clarans clustering large applications randomized search introduced improved medoid method 
compared medoid algorithms clarans effective efficient 
experimental evaluation indicates clarans runs efficiently databases thousands objects 
ng han discuss methods determine natural number nat clusters database 
propose run clarans discovered clusterings silhouette coefficient kaufman rousseeuw calculated clustering maximum silhouette coefficient chosen natural clustering 
unfortunately run time approach prohibitive large implies calls clarans 
clarans assumes objects clustered reside main memory time hold large databases 
furthermore run time clarans prohibitive large databases 
ester kriegel xu focusing techniques address problems focusing clustering process relevant parts database 
focus small memory resident second run time clarans objects focus significantly run time database 
hierarchical algorithms create hierarchical decomposition hierarchical decomposition represented dendrogram tree iteratively splits smaller subsets subset consists object 
hierarchy node tree represents cluster dendrogram created leaves root agglomerative approach root leaves divisive approach merging dividing clusters step 
contrast partitioning algorithms hierarchical algorithms need input 
termination condition defined indicating merge division process terminated 
example termination condition agglomerative approach critical distance min clusters far main problem hierarchical clustering algorithms difficulty deriving appropriate parameters termination condition value min small separate natural clusters time large cluster split parts 
area signal processing hierarchical algorithm garc molina automatically deriving termination condition 
key idea points belong cluster walk point second sufficiently small step 
follows divisive approach 
require input domain knowledge 
furthermore experiments show effective discovering non convex clusters 
computational cost due distance calculation pair points 
acceptable applications character recognition moderate values prohibitive applications large databases 
jain explores density approach identify clusters dimensional point sets 
data set partitioned number nonoverlapping cells histograms constructed 
cells relatively high frequency counts points potential cluster centers boundaries clusters fall valleys histogram 
method capability identifying clusters shape 
space run time requirements storing searching multidimensional histograms enormous 
space run time requirements optimized performance approach crucially depends size cells 

density notion clusters looking sample sets points depicted easily unambiguously detect clusters points noise points belonging clusters 
database database database sample databases main reason recognize clusters cluster typical density points considerably higher outside cluster 
furthermore density areas noise lower density clusters 
try formalize intuitive notion clusters noise database points dimensional space note notion clusters algorithm dbscan apply euclidean space high dimensional feature space 
key idea point cluster neighborhood radius contain minimum number points density neighborhood exceed threshold 
shape neighborhood determined choice distance function points denoted dist 
instance manhattan distance space shape neighborhood rectangular 
note approach works distance function appropriate function chosen application 
purpose proper visualization examples space euclidean distance 
definition eps neighborhood point point denoted eps defined eps dist eps 
naive approach require point cluster minimum number minpts points eps neighborhood point 
ap proach fails kinds points cluster points inside cluster core points points border cluster border points 
general border point contains significantly points eps neighborhood core point 
set minimum number points relatively low value order include points belonging cluster 
value characteristic respective cluster particularly presence noise 
require point cluster point inside eps contains minpts points 
definition elaborated 
definition directly density reachable point directly density reachable point wrt 
eps minpts eps eps minpts core point condition 
obviously directly density reachable symmetric pairs core points 
general symmetric core point border point involved 
shows asymmetric case 
core points border points definition density reachable point point wrt 
eps minpts chain points directly density reachable density reachability canonical extension direct density reachability 
relation transitive symmetric 
depicts relations sample points particular asymmetric case 
symmetric general obvious density reachability symmetric core points 
border points cluster possibly density reachable core point condition hold 
core point border points density reachable 
introduce notion density connectivity covers relation border points 
definition density connected point point wrt 
eps minpts point density reachable wrt 
eps minpts 
density connectivity symmetric relation 
density reachable points relation density connectivity reflexive 
able define density notion cluster 
intuitively cluster defined set points maximal wrt 
density reachability 
noise defined relative set clusters 
noise simply set points belonging clusters 
density reachability density connectivity definition cluster database points 
cluster wrt 
eps minpts non empty subset satisfying conditions density reachable wrt 
eps minpts 
maximality density connected wrt 
eps minpts 
connectivity definition noise 
clusters database wrt 
parameters eps minpts define noise set points database belonging cluster noise 
note cluster wrt 
eps minpts contains minpts points reasons 
contains point density connected point may equal 
satisfy core point condition consequently eps neighborhood contains minpts points 
lemmata important validating correctness clustering algorithm 
intuitively state 
parameters eps minpts discover cluster step approach 
choose arbitrary point database satisfying core point condition seed 
second retrieve points density reachable seed obtaining cluster containing seed 
lemma point eps minpts 
set density reachable wrt 
eps minpts cluster wrt 
eps minpts 
obvious cluster wrt 
eps minpts uniquely determined core points 
point density reachable core points cluster contains exactly points density reachable arbitrary core point lemma cluster wrt 
eps minpts point eps minpts 
equals set density reachable wrt 
eps minpts 

dbscan density spatial clustering applications noise section algorithm dbscan density spatial clustering applications noise designed discover clusters noise spatial database definitions 
ideally know appropriate parameters eps minpts cluster point respective cluster 
retrieve points density reachable point correct parameters 
easy way get information advance clusters database 
simple effective heuristic section section determine parameters eps minpts dense cluster database 
dbscan uses global values eps minpts values clusters 
density parameters cluster candidates global parameter values specifying lowest density considered noise 
algorithm find cluster dbscan starts arbitrary point retrieves points density reachable wrt 
eps minpts 
core point procedure yields cluster wrt 
eps minpts see lemma 
border point points density reachable dbscan visits point database 
global values eps minpts dbscan may merge clusters definition cluster clusters different density close 
distance sets points defined dist min dist 
sets points having density cluster separated distance sets larger eps 
consequently recursive call dbscan may necessary detected clusters higher value minpts 
disadvantage recursive application dbscan yields elegant efficient basic algorithm 
furthermore recursive clustering points cluster necessary conditions easily detected 
basic version dbscan omitting details data types generation additional information clusters dbscan eps minpts unclassified nextid noise size point get point unclassified point eps minpts nextid dbscan database discovered cluster previous run eps global density parameters determined manually heuristics section 
function get returns th element 
important function point eps minpts boolean seeds point eps seeds size minpts core point point noise return false points seeds density reachable point seeds seeds delete point seeds empty seeds result eps result size minpts result size result get unclassified noise unclassified seeds append unclassified noise result size minpts seeds delete seeds empty return true call point eps returns eps neighborhood point list points 
region queries supported efficiently spatial access methods trees beckmann assumed available sdbs efficient processing types spatial queries brinkhoff 
height tree log database points worst case query small query region traverse limited number paths tree 
eps neighborhoods expected small compared size data space average run time complexity single region query log 
points database region query 
average run time complexity dbscan log 
points marked may changed density reachable point database 
happens border points cluster 
points added seeds list know point noise core point 
adding points seeds result additional region queries yield new answers 
clusters close happen point belongs border point clusters equal global parame ters 
case point assigned cluster discovered 
rare situations result dbscan independent order points database visited due lemma 
determining parameters eps minpts section develop simple effective heuristic determine parameters eps minpts cluster database 
heuristic observation 
distance point th nearest neighbor neighborhood contains exactly points points neighborhood contains points points exactly distance quite 
furthermore changing point cluster result large changes happens th nearest neighbors 
located approximately straight line general true point cluster 
define function dist database real numbers mapping point distance th nearest neighbor 
sorting points database descending order dist values graph function gives hints concerning density distribution database 
call graph sorted dist graph 
choose arbitrary point set parameter eps dist set parameter minpts points equal smaller dist value core points 
find threshold point maximal dist value cluster desired parameter values 
threshold point point valley sorted dist graph see 
points higher dist value left threshold considered noise points right threshold assigned cluster 
dist noise clusters threshold point points sorted dist graph sample database general difficult detect valley automatically relatively simple user see valley graphical representation 
propose follow interactive approach determining threshold point 
dbscan needs parameters eps minpts 
experiments indicate dist graphs significantly differ dist graph furthermore need considerably computation 
eliminate parameter minpts setting databases dimensional data 
propose interactive approach determining parameter eps dbscan system computes displays dist graph database 
user estimate percentage noise percentage entered system derives proposal threshold point 
user accepts proposed threshold selects point threshold point 
dist value threshold point eps value dbscan 

performance evaluation section evaluate performance dbscan 
compare performance clarans clustering algorithm designed purpose kdd 
research perform comparison classical density clustering algorithms 
implemented dbscan implementation tree beckmann 
experiments run hp workstations 
synthetic sample databases database sequoia benchmark 
compare dbscan clarans terms effectivity accuracy synthetic sample databases depicted 
dbscan clarans clustering algorithms different types common quantitative measure classification accuracy 
evaluate accuracy algorithms visual inspection 
sample database ball shaped clusters significantly differing sizes 
sample database contains clusters nonconvex shape 
sample database clusters different shape size additional noise 
show results clustering algorithms visualize cluster different color see www availability section 
give clarans advantage set parameter sample databases 
clusterings discovered clarans depicted 
database database database clusterings discovered clarans dbscan set noise percentage sample databases sample database respectively 
clusterings discovered dbscan depicted 
dbscan discovers clusters definition detects noise points definition sample databases 
clarans splits clusters relatively large close cluster 
furthermore clarans explicit notion noise 
points assigned closest medoid 
database database database clusterings discovered dbscan test efficiency dbscan clarans sequoia benchmark data 
sequoia benchmark database stonebraker uses real data sets representative earth science tasks 
types data database raster data point data polygon data directed graph data 
point data set contains names landmarks extracted geological survey geographic names information system location 
point data set occupies bytes 
run time ans data set high extracted series subsets point data set containing representatives set 
run time comparison dbscan clarans databases shown table 
number points table run time seconds dbscan ans number points dbscan ans results experiments show run time dbscan slightly higher linear number points 
run time clarans close quadratic number points 
results show db scan outperforms clarans factor grows increasing size database 

clustering algorithms attractive task class identification spatial databases 
known algorithms suffer severe drawbacks applied large spatial databases 
clustering algorithm dbscan relies density notion clusters 
requires input parameter supports user determining appropriate value 
performed performance evaluation synthetic data real data sequoia benchmark 
results experiments demonstrate dbscan significantly effective discovering clusters arbitrary shape known algorithm clarans 
furthermore experiments shown dbscan outperforms clarans factor terms efficiency 
research consider issues 
considered point objects 
spatial databases may contain extended objects polygons 
develop definition density eps neighborhood polygon databases generalizing dbscan 
second applications dbscan high dimensional feature spaces investigated 
particular shape dist graph applications explored 
www availability version larger font large figures clusterings color available url www dbs informatik uni muenchen de dbs project html 
beckmann kriegel schneider seeger 
tree efficient robust access method points rectangles proc 
acm sigmod int 
conf 
management data atlantic city nj pp 

brinkhoff kriegel schneider seeger efficient multi step processing spatial joins proc 
acm sigmod int 
conf 
management data minneapolis mn pp 

ester kriegel xu 
database interface clustering large spatial databases proc 
st int 
conf 
knowledge discovery data mining montreal canada aaai press 
garc molina 
dynamic approach clustering data 
signal processing vol 
pp 


spatial database systems 
vldb journal 
jain anil 
algorithms clustering data 
prentice hall 
kaufman rousseeuw 
finding groups data cluster analysis 
john wiley sons 
matheus chan piatetsky shapiro 
systems knowledge discovery databases ieee transactions knowledge data engineering 
ng han 
efficient effective clustering methods spatial data mining proc 
th int 
conf 
large data bases 
santiago chile 
stonebraker meredith 
sequoia storage benchmark proc 
acm sigmod int 
conf 
management data washington dc pp 

