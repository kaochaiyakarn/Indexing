christian hammer university passau passau germany 
hammer fmi uni passau de information flow control java path conditions dependence graphs language information flow control ifc powerful tool discover security leaks software 
current ifc approaches nonstandard type systems 
type ifc elegant precise lead false alarms 
precise approach ifc exploits active research static program analysis 
ifc approach path conditions program dependence graphs pdgs 
pdgs sophisticated powerful analysis device today handle realistic programs full java 
recapitulate theorem connecting classical notion noninterference pdgs 
introduce path conditions java pdgs 
path conditions necessary conditions information flow today path conditions generated solved realistic programs 
show path conditions produce witnesses security leaks 
approach implemented full java augmented classical security level lattices 
examples case studies demonstrate feasibility power method 
information flow control ifc important technique discovering security leaks software 
ifc main tasks guarantee confidential data leak public variables confidentiality guarantee critical computations manipulated outside integrity 
research supported deutsche forschungsgemeinschaft dfg sn 
jens krinke hagen hagen germany 
krinke acm org gregor snelting university passau passau germany 
snelting fmi uni passau de state art ifc exploits program analysis assign propagate security levels variables expressions guaranteeing potential security leak 
language ifc utilizes program source code discover security leaks 
huge advantage exploit long history research program analysis discover security leaks caused software approach may information flow physical side channels usually handled separate approaches 
overview article sabelfeld myers survey contemporary ifc approaches program analysis 
contemporary analysis methods non standard type systems 
security levels coded types typing rules catch illegal flow information :10.1.1.149.7391
type systems handle sequential concurrent programs discover timing leaks 
type analysis usually flow sensitive context sensitive object sensitive 
leads imprecision high number false alarms 
example known program fragment confidential public public public considered insecure type ifc type ifc flow sensitive 
see potential information flow confidential public guaranteed killed assignment 
type ifc performs worse presence unstructured control flow exceptions 
fortunately program analysis offer just sophisticated type systems 
particular program dependence graph pdg lively research adaptations real world languages standard data structure allowing various kinds powerful program ieee 
published proceedings ieee international symposium secure software engineering arlington usa 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
analyses 
proved theorem connecting pdgs classical noninterference criterion :10.1.1.9.4220
pdg decide potential information flow definitely case 
pdg provide detailed insight circumstances flow 
pdgs generate false alarms 
proposed base ifc combination dependence graphs constraint solving 
snelting published original idea elaborate algorithms needed approach scale full realistic programs :10.1.1.9.4220
hammer developed precise pdg full java difficult due effects inheritance dynamic dispatch due concurrency caused thread programming 
krinke pdg algorithm multi threaded programs integrated :10.1.1.14.4505
today handle realistic java programs powerful tool ifc available precise conventional approaches 
augment java pdgs denning style security level lattices introduce path conditions java pdgs 
new technique generate path conditions dynamic dispatch 
path conditions solved input variables solved conditions act witness illegal flow visible program fed witness 
examples performance data compare approach type ifc systems jif 
dependence graphs noninterference program dependence graphs standard tool model information flow program 
program statements expressions graph nodes 
data dependence edge means statement assigns variable statement reassigned underway 
control dependence edge means mere execution depends value expression typically condition statement 
path means information flow path guaranteed information flow 
particular statements influencing called backward slice easily computed bs small program dependence graph path statement statement indicating input variable eventually influence output variable path definitely influence power pdgs compared type systems stems fact flow sensitive order start 
small program dependence graph statements matter taken account result pdg indicates influences fact impossible due statement order program 
note pdgs slicing complex realistic languages procedures complex control flow data structures 
overview fundamental slicing techniques discuss technical details :10.1.1.20.9646
full java language computation precise dependence graphs slices absolutely nontrivial ongoing research worldwide years 
state art pdgs slicing summarized krinke 
pdg path guaranteed information flow true information flow caused hidden physical side channels timing leaks 
surprising traditional technical definitions secure information flow noninterference related pdgs 
noninterference introduced 
statement security level dom 
noninterference security levels written means statement security level may influence statement security level system considered safe goguen meseguer noninterference criterion possible statement sequences final statements output run output run purge dom purge removes statements statement sequence influence security level dom 
final program output unchanged statement influence statement security level deleted 
theorem demonstrates pdgs check noninterference 
theorem 
bs dom dom class private string names private string passwords public boolean check string user string password boolean match false try int names length names user passwords password match true break catch nullpointerexception catch return match 
java password checker noninterference criterion satisfied proof 
see dom dom noninterfering security levels pdg path security leak discovered :10.1.1.9.4220
power generality theorem underestimated 
generality stems fact independent specific languages slicing algorithms just exploits fundamental property correct slice 
applying theorem results linear time noninterference test bs traversed 
note pdg conservative approximation due imprecision underlying program analysis algorithms may contain edges 
case pdgs precise systems 
example pdg path considered safe false alarm generated 
pdgs java assume familiarity slicing technology example 
intraprocedural pdgs easily constructed method bodies known algorithms literature 
interprocedural slicing tricky 
standard analysis relies system dependence graphs sdgs include dependences calls transitive dependences parameters 
sdgs context sensitive different calls proce 
pdg dure method distinguished avoiding spurious dependences 
sdgs general understood dynamic dispatch objects method parameters sdg construction difficult 
treatment dynamic dispatch known possible targets method calls approximated statically case points information possible target methods standard interprocedural sdg construction done 
shows small java class checking password taken utilizes methods exceptions 
initial pdg check method seen 
solid lines represent control dependence dashed lines represent data dependence 
node method entry parameters node pw pws shorthand password passwords 
nodes represent fields class note fields arrays elements distinguished 
nodes represent initializations local variables match lines 
nodes immediate control dependent method entry 
nodes represent statements nodes predicates nodes 
pdg incomplete include exceptions 
dynamic runtime exceptions alter control flow program may lead implicit flow case exception caught handler call stack represent covert channel case exception propagated top stack yielding program termination stack trace 
type approaches disallow ignore 
implicit exceptions 
analysis conservatively adds control flow edges bytecode instructions throw unchecked exceptions appropriate exception handler exception callee turn receives conservative control flow edge 
analysis implicit flow caused exceptions covert channel uncaught exceptions checked 
resulting final pdg shown 

pdg exceptions method parameters issue 
sdgs support call value result parameters sdg node resp 
parameter 
java supports call value particular types object passed method 
field values stored actual parameter objects may changed method call 
possible field changes visible sdg adding modified fields formal parameters 
improve precision analysis representing nested parameter objects trees 
unfolding object trees stops fixed point respect aliasing situation containing object reached 
obtain safe dependency criterion leads precise java slices previous approaches 
shows small example program serves illustrate effects dynamic dispatch object sensitivity 
explain details security levels section right security levels low high 
main method holds variables secure annotated high low 
statements provide security level underlined source code 
secure data affect visible output program 
arguments system println require node path output node provides level exceeding level case low 
statements require security level 
shows sdg example 
brevity omitted pdgs set get methods 
effects method calls reflected summary edges shown dashed edges actual actual parameter nodes 
summary edges introduced reps represent transitive dependence class int void set void set int int get return class extends void set class static void main string part information flow int secure pub new set secure new set pub system println get part dynamic dispatch secure equals new set system println get part instanceof set system println instanceof 
java program corresponding formal formal node pair 
example call set secure contains summary edges target object secure field representing side effect value secure written field set 
summary edges enable context sensitive slicing sdgs time linear number nodes 
new object created field initialized secure 
object longer variable overwritten new object field set pub variable annotated low 
value longer contain high information perfectly legal statement 
information flow control slicing detect fact exists path initialization secure print statement leftmost println node 
path initialization pub output node 
fact generate false alarm stems object sensitivity pdg points data flow sensitivity pdgs backward slicing summary edges 
pub secure new set secure new set pub println get secure set println get main secure pub new statements show illegal flow information line checks secure zero creates object class case 
invocation set dynamically dispatched target object instance set zero type receives value 
analogous implicit flow secure 
pdg path secure predicate testing secure set target object summary edge reaches field second output node 
path witness illegal flow 
analysis rejects program prints high value 
value dependent secure statement attacker exploit runtime type gain information value secure 
implicit information flow detected analysis pdg path 
say words pdgs concurrent multi threaded programs common java 
krinke author precise algorithm slicing concurrent programs 
method needs may happen parallel information start algorithms known problem 
socalled mhp analysis krinke algorithm add dependences variables different threads particular ensure sequence statements pdg path correspond possible execution order 
paths contain impossible execution orders introduce time traveling filtered 
algorithm precise expensive limited fixed number threads 
currently implementing explore variations trade precision performance flexibility 
security levels declassification noninterference criterion prevents illegal flow practice wants detailed information security levels individual statements 
theoretical models ifc utilize lattice security levels simplest consisting just security levels high low 
provide specification option lattice 
pdg main set println instanceof option mark statements security level 
security level statement resp 
pdg node written confidentiality requires information receiver security level sender 
pdgs implies pred ensures 
dual condition integrity pred assumes statement resp 
node security level specified realistic 
want specify provided required security levels statements certain selected statements 
provided security level specifies statements sends information provided security level required security level specifies information smaller security level may reach statement compute actual security levels compare required ones 
provided security levels defined partial function set nodes resp 
statements programs 
specifies statement security level 
required security levels defined similarly partial function actual security level statement computed security levels predecessor provided security level pred defined pred simplicity presentation extend total function statements provided security level defined note neutral element 
gives provided security level statement limit pred term required may misleading 
pdg computed security levels due monotonicity computation limited height security level lattice minimal fixed point guaranteed exist computed standard iteration 
computed ensures confidentiality integrity computed similarly 
real confidentiality required security levels checked computed ones confidentiality violation security level allowed influence level 
note comparable 
declassification introduced model partial function similar function specifies declassification security level statement 
declassification simply changes computation defined pred incoming security levels ignored replaced declassification security level 
note declassification may raise security level incoming security level lower specified declassification level 
computation expressed transfer functions form ps ds ps ds constants predefined 
transfer functions build monotone function space lattice security levels monotone data flow analysis framework 
properties monotone data flow analysis frameworks apply particularly existence minimal fixed point example consider pdg password program 
choose level security lattice public confidential secret public confidential secret 
list passwords secret secret secret 
list names parameter password confidential visible user 
confidential confidential confidential 
starting provided security levels compute actual security levels depicted white public light gray confidential gray secret 
attempt require confidential secret information flows method require return statement required security level public public 
shows interference secret secret public 
clear match computed secret information reveals secure data 
return statements gets declassification public public 
usual procedures methods require contextsensitive analysis 
consider fragment function side effects safe secret public secret public secret provided security level high public low required security level high low 
ignore calling context handle sdg edges data control dependence edges violation security level high secret propagate due call secret 
computed security level high call public propagate high solve issue approach similar context sensitive slicing 
ifc checkers jif generalization denning lattices called decentralized label model 
model allows specify sets security levels called labels principals statement attach set operations label 
written slightly general 
approach easily generalized decentralized label model 
note decentralized labels overcome type analysis 
example adapted part jif syntax annotated declaration instantiations principal pp 
output statement replaced equivalent code allowed public output 
jif reports secure data flow public channel raised false alarm 
path conditions order analysis precise introduced path conditions necessary conditions information flow nodes 
formulae generation path conditions quite complex details see fundamental formula pc path node necessary condition execution control path start condition associated dependence edge :10.1.1.9.4220
control dependences typically condition statement data dependences conditions constraining information flow data types added see examples 
program variables path condition implicitly existentially quantified necessary conditions potential information flow 
true pc slightly interesting program fragments path conditions pc pc false examples indicate path conditions give precise conditions information flow determine flow impossible path graph 
go details path condition generation reader aware making path conditions full resp 
java realistic programs non trivial 
theoretical practical 
particular interprocedural path conditions pdgs security levels contextsensitive 
just mention things program transformed single assignment form pdg cycles ignored due high number cycle free pdg paths realistic programs interval analysis irreducible graphs exploited obtain hierarchy nested sub pdgs bdds minimize size path conditions 
today implementation val soft handle programs approx 
loc generate path conditions seconds minutes 
path conditions java complex inheritance dynamic dispatch considered 
known statically method re definition called runtime interprocedural path conditions implications 
example consider call redefined times classes path condition pc constraining information flow actual method parameter return value basically look follows pc instanceof pca instanceof pcb instanceof pcc pca pcb pcc standard path conditions re definitions example shows runtime type checks part path conditions 
note number implications drastically reduced exploiting points information 
java features exceptions generic classes static variables influence path condition generation pdg handles correctly standard formulae path conditions apply 
omit details path conditions java path conditions 
remember path pc false false alarm flow object sensitivity 
mentioned earlier path line node 
line prints value field value depends secure variable 
path indicates potential security leak obvious due dynamic dispatch line 
path condition path pc true true secure equals true true instanceof true instanceof true secure equals path condition trivial demonstrates concept witness program parameter illegal flow happen printed value depend value secure variable 
witness quite convincing jury law suit 
generally speaking path conditions illegal flow solved program input variables act witness security leak 
providing input values solved conditions illegal information flow visible immediately 
seen simple example witness 
general mechanism compute witnesses works follows 
discover interference statement required security level larger actual computed security level investigate source interference 
distinguish immediate transitive interference 
immediate interference exists predecessors lead computed security level 
usually subset predecessors responsible interference minimal subset pred lead 
path conditions give condition pi immediate interference compute pi pc 
interested transitive interference interference statement required security level statement provided security level path transmits investigate transitive interference correspondence slicing noninterference 
step compute backwards slice bs gives statements may influence bs extract statements provided security level possible set information sources bs dom computed security level smaller comparable provided security level sources 
need minimal subset computes 
path conditions give condition pt transitive interference compute pt pc note may exist multiple minimal subsets want examine 
applying formulae obtain witness pt pc names length names user passwords password simple path condition solved form 
general solving path conditions input variables order obtain explicit witnesses easy realistic programs consist huge heaps conditions extracted control statements switch combined substantial amounts conjunctions disjunctions implicit existential quantifiers upfront 
step minimal disjunctive normal form computed constraint solving attempted 
path conditions existentially quantified natural apply quantifier elimination systems 
quantifier elimination replaces existentially quantified variable constraints variables theory guarantees formulae equivalent 
note path conditions solved due decidability problems 
practice path conditions solved medium sized programs containing arithmetic conditions 
preliminary experience time writing java slicer security levels fully operational path condition generator adapted version 
give reader idea system performs realistic programs report preliminary findings 
largest object study purse applet case study 
program written javacard contains javacard api pdgs stubs native api methods 
program lines long 
pdg including necessary api parts consists nodes edges 
time pdg construction seconds plus seconds generation summary edges 
measured separately necessary context sensitive slicing requires algorithm 
backward slices selected choosing random node starting point 
average slice size nodes source code 
typical backward slices illustrates precise witnesses achieved path conditions described section 
case study ifc chose javacard applet called wallet lines long necessary api parts stubs pdg consists nodes edges 
time pdg construction seconds plus summary edges 
access wallet granted supplying correct pin annotated provided security level high 
annotated response method terminal required level low 
check system expected pin value leak www javaworld com javaworld jw jw javacard html method checking entered pin 
classic application declassification downgrading boolean result low method showed violations 
related papers written pdgs java knowledge indus slicer developed hatcliff fully implemented handle full java 
indus customizable embedded eclipse nice gui precise slicer 
particular allows time traveling concurrent programs 
mentioned overview article sabelfeld myers surveys language ifc methods 
focus type approaches dependences slicing mentioned authors obviously consider realistic option ifc 
amazing pdgs years 
ifc community ignored pdgs far precise pdgs full java difficult construct 
abadi author connect slicing noninterference calculus 
amazing theorem section holds imperative languages pdgs discovered earlier 
anderson example chopping show illegal information flow components supposedly independent 
employ security lattice 
volpano smith nonstandard type system ifc 
extended traditional type systems order check pure noninterference simple languages procedure calls 
procedures polymorphic respect security classes allowing context sensitive analysis 
proof noninterference case system reports typing errors 
extension multi threaded languages 
myers defines jflow extension java language type system information flow 
jif compiler implements language 
discussed approach precise efficient supports generic classes decentralized label model labels principals class objects 
barthe security type system strict noninterference declassification handling classes objects 
nullpointerexception exception type allowed 
values annotated low may throw exceptions 
constructors ignored objects initialized default values 
proof showing noninterference property type system 
strecker formulates non deterministic type system including noninterference proof 
handles mayor con cepts classes fields method calls omits arrays exceptions 
case study verifies secure interaction multiple javacard applets smartcard 
employ model checking ensure sufficient condition security policy lattice similar noninterference declassification 
implicit exceptions bytecode instructions modeled unstructured control flow may lead label creep cf 
sect 
ii 
defines interpretation cfg looking information leaks 
handle bytecode instructions single threaded java conservatively handles implicit exceptions bytecode instructions 
analysis flow context sensitive differentiate fields different objects 
propose object insensitive solution folding fields class 
experience object insensitivity yields spurious dependences 
true approximation call graph cha 
setting result false alarms 
combined static dynamic approach detection illegal information flow 
allows posteriori analysis programs showing unexpected behavior computation exact witness reconstruction illegal information flow 
system information flow control java programs path conditions dependence graphs 
path conditions precise necessary conditions information flow program points 
approach fully automatic flow sensitive context sensitive object sensitive 
precise traditional type ifc systems 
particular unstructured control flow exceptions lead false alarms 
handle full java language reflection analyze medium sized programs 
approach defines exploits time path conditions java pdgs 
preliminary results indicate number false alarms drastically reduced compared type ifc systems course potential security leaks discovered 
case studies apply technique larger benchmark ifc problems provide quantitative comparisons concerning performance precision approach ifc systems 
right handle medium sized programs 
security kernels usually really big better scale issue 
known problem java api smallest programs loads hundreds library classes analyzed client code 
bottleneck points analysis precise points java notoriously difficult 
pdg ifc expensive ifc 
precise security analysis costs minutes hours cpu time expensive compared possible consequences illegal information flow 
final outcome witnesses illegal information flow valuable law suits malicious software vendors 
acknowledgment 
frank nodes florian implementation 
abadi banerjee heintze riecke 
core calculus dependency 
proc 
symposium principles programming languages pages 
acm 

transforming timing leaks 
proceedings acm symposium principles programming languages popl pages 
acm press 
anderson reps teitelbaum 
design implementation fine grained software inspection tool 
ieee transactions software engineering aug 
barthe 
non interference jvm language 
proceedings acm sig plan international workshop types languages design implementation pages new york ny usa 
acm press 
bieber girard 

prototype tool detecting java card illegal flow 
java card forum cannes france sept 
chambers sarkar serrano srinivasan 
dependence analysis java 
proceedings th international workshop languages compilers parallel computing pages 
springer verlag 
sturm 
computer algebra meets computer logic 
acm bulletin 

information flow analysis java bytecode 
th international conference verification model checking interpretation volume lncs pages paris france jan 
springer 
goguen meseguer 
interference control unwinding 
proc 
symposium security privacy pages 
ieee 
hammer krinke 
dynamic path conditions dependence graphs 
proceedings acm sigplan workshop partial evaluation program manipulation pepm pages jan 
hammer snelting 
improved slicer java 
proceedings acm sigplan sigsoft workshop program analysis software tools engineering pages 
acm press 
krinke 
static slicing threaded programs 
proceedings workshop program analysis software tools engineering pages 
krinke 
advanced slicing sequential concurrent programs 
phd thesis universit passau july 
krinke :10.1.1.14.4505
context sensitive slicing concurrent programs 
proc 
fse esec pages 
acm press 
krinke 
program slicing 
handbook software engineering knowledge engineering volume advances 
world scientific publishing 
hendren 
scaling java points sparc 
compiler construction th international conference lncs pages 
myers 
jflow practical static information flow control 
popl proceedings acm symposium principles programming languages pages new york ny usa 
acm press 
myers nystrom 
jif java information flow 
www cornell edu jif 
banerjee dwyer hatcliff 
new foundation control dependence slicing modern structures 
proceedings european symposium programming esop pages 
lncs 
robschink 
abh und ihre anwendung der 
phd thesis universit passau januar 
german 
robschink snelting 
efficient path conditions dependence graphs 
proceedings international acm ieee conference software engineering icse pages orlando fl may 
rountev milanova ryder 
points analysis java annotated constraints 
proc 
th conference object oriented programming systems languages applications pages 
sabelfeld myers 
language security 
ieee journal selected areas communications january 
smith volpano 
secure information flow multi threaded imperative language 
proceedings acm symposium principles programming languages pages san diego ca january 
snelting 
combining slicing constraint solving validation measurement software 
proc 
static analysis symposium volume lncs pages 
snelting robschink krinke :10.1.1.9.4220
efficient path conditions dependence graphs software safety analysis 
acm transactions software engineering methodology appear 
strecker 
formal analysis information flow type system extended version 
technical report technische universit nchen july 
tip 
survey program slicing techniques 
journal programming languages sept 
volpano smith 
type approach program security 
proc 
tapsoft lncs pages lille france apr 

simulation optimization quantifier elimination 
journal symbolic computation 
