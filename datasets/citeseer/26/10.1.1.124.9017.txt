implementing multiple protection domains java chris hawblitzel chi chao chang grzegorz czajkowski hu thorsten von eicken technical report department computer science cornell university safe language technology protection single address space 
protection enforced language type system ensures objects forged 
safe language lacks features taken granted traditional operating systems rights revocation thread protection resource management support domain termination 
describes kernel portable java protection system addresses issues 
number micro benchmarks characterize costs language protection extensible web server kernel demonstrates safe language techniques large application 
traditional operating systems virtual memory enforce protection processes 
process directly read write processes memory communication processes requires traps kernel 
past decade operating systems research large number fast inter process communication mechanisms proposed 
cost passing kernel switching address spaces remains orders magnitude larger calling procedure 
increasing adoption extensible applications component software cost inter process communication leading difficult trade robustness performance 
example netscape browser allows plug ins loaded directly browser process extend netscape functionality 
error plug corrupt entire browser 
separate process plug cumbersome program slow amount communication plug ins browser 
web servers support plug ins case robustness issue important browser crash may annoying server crash disastrous 
robustness versus performance tradeoff pervasive component software ole javabeans activex 
microsoft com example provides different models composing components component run process protection multiple components share process termed proc performance 
applications desktop composed reusable components protection issue pressing properly isolated failure component cause large portions user desktop environment crash 
example consider chart object embedded word processor document 
charting component fails word processor able continue operating 
ideally new chart component instantiated replace failed component restarting word processor reloading document contains chart object 
explores safe language technology offer high performance protection software component environment 
safe languages java modula caml type safety controlled linking enforce protection multiple components relying hardware support 
safe language environment calls protection boundaries potentially cheap simple function calls enabling communication components desired performance drawbacks 
extensible applications component environments benefit protection features required different settings vary 
assume applications composed independently developed software components communicate structured interfaces 
assume protection mechanism enforce structure just modern languages enforce module class structures 
communication possible defined interfaces side effects 
settings strive enable failure isolation bug component crash components 
required degree failure isolation varies application suite produced group developers primary concern accidental effects component 
hand web server allowing arbitrary users upload extensions requires protection assumed guard malicious behavior 
projects described build protection domains components safe language environment protection domain specifies resources software component access 
central ideas linker create multiple namespaces object pointers objects capabilities cross domain communication 
multiple namespaces ensure variable procedure type names refer different instances different domains 
object safe languages unforgeable confer certain rights holder 
object oriented language methods applicable object essence call gates 
argues section straight forward approach flexible fast ultimately unsatisfactory objects capabilities leads severe problems revocation resource management inter domain dependency analysis 
order overcome limitations straight forward approach introduce additional mechanisms borrowed traditional capability systems 
result system described section called kernel 
kernel written entirely java provides sophisticated capability protection features 
choose java practical reasons java emerging widely general purpose safe language dependable java virtual machines widespread easy 
java allow multiple protection domains single java virtual machine jvm current sandbox model applets restrictive 
lacks characteristics taken granted traditional systems particular provide clear way different protection domains communicate 
concentrated efforts developing general framework allow multiple protection domains single jvm 
provide features traditional operating systems support rights revocation domain termination 
addition support flexible protection policies components including support communication mutually suspicious components 
main benefits system highly flexible protection model low overheads communication software components operating system independence 
current kernel implementation runs standard jvms 
language protection drawbacks 
code written safe language tends run slowly code written assembly language improvement cross domain communication may offset slowdown 
slowdown due current java just time compilers optimizing fast compile times expense run time run time performance sophisticated optimization java programs run fast programs 
second current language protection systems designed single language limits developers doesn handle legacy code 
software fault isolation verification assembly language may someday offer solutions active area research 
section describes extensible web server kernel 
section discusses related section concludes 
fact case java just time compilers opportunity perform optimizations impossible system hardware protection 
cross domain call merely function call compiler potentially inline call faster performance 
language protection background unsafe language code running address space potentially modify memory location address space 
theory possible prove certain pieces code modify restricted set memory locations practice difficult languages assembly language fully automated 
contrast type system linker safe language restrict operations particular piece code allowed perform memory locations 
term namespace express restriction namespace partial function mapping names operations actions taken operations executed 
example operation read field class system may perform different actions depending class name system refers 
protection domains software components constructed safe language system providing separate namespace component 
communication components enabled introducing sharing namespaces 
java provides basic mechanisms controlling namespaces selective sharing object static access controls selective class sharing 
selective sharing object domains selectively share objects simply passing 
example method class creates objects type passes object method class method acquires perform operations incrementing field method way performing operations 
java safety prevents method forging casting integer holding address pointer 
class class private int public static void method arg public int arg public static void method new new method static access control preceding example demonstrated dynamic form protection methods perform operations objects 
java provides static protection mechanisms limit operations method perform object method acquired object 
small set modifiers change scope fields methods object 
common modifiers private public respectively limit access methods class allow access methods class 
classes shown method access public field object private field selective class sharing domains protect control class namespace 
understand need look java class loading mechanisms 
allow dynamic code loading java supports user defined class loaders load new classes virtual machine run time 
class loader fetches java bytecode location file system url submits bytecode virtual machine 
virtual machine performs verification check sure bytecode legal integrates new class machine execution 
bytecode contains classes class loader invoked recursively order load classes 
class loaders enforce protection making classes visible domain hiding 
instance example assumed classes visible 
class hidden class appear class namespace obtains object type able access fields despite fact public 
straight forward protection domains share approach simple controls namespace provided java construct software components communicate protected 
essence component launched namespace share class object components mechanisms described 
continue term protection domain informally refer protected components argue impossible define protection domains precisely approach 
example shows hypothetical file system component gives objects type clients give access files 
client domains cross domain invocations file system invoking open method object 
specifying different values different objects file system enforce different protection policies different clients 
static access control ensures clients modify fields directly client forge client object 
class private int private directory public file open string filename 
filesystem example illustrates approach protection java resembles capability system 
things noted approach 
approach require extensions java language necessary mechanisms exist 
second little overhead involved making call protection domain cross domain call simply method invocation large arguments passed copy 
third object may shared domains java language way restricting passed cross domain method invocation 
began explore protection java share approach natural basis protection system began developing foundation 
worked approach number problems apparent 
revocation problem access object revoked 
domain object hold forever 
revocation important enforcing principle privilege revocation domain hold resource longer needs 
straightforward implementation revocation uses extra indirection 
example shows version earlier class created 
object wrapped object permits access wrapped object revoked flag set 
class public int method int arg int arg 
class private private boolean revoked public int meth int arg int arg revoked return meth arg arg throw new public void revoke revoked true principle solves revocation problem efficient purposes 
experience shows programmers forget wrap object passing domain 
particular easy remember wrap objects passed arguments common forget wrap objects points 
effect default programming model ends unsafe model objects revoked 
opposite desired model safe default unsafe special cases 
inter domain dependencies side effects object shared domains structure protection domains blurred unclear domains shared object accessed 
programmer difficult track objects shared protection domains java language provides help distinction 
distinction critical reasoning behavior program running domain 
mutable shared objects modified time domains access object programmer needs aware possible activity 
example malicious user try pass byte array holding legal bytecode class loader byte arrays objects passed method invocations wait class loader verify bytecode legal overwrite legal bytecode illegal bytecode subsequently executed 
way class loader protect attack private copy bytecode shared user safe malicious modification 
domain termination problems associated shared object come head consider happens domain terminated 
objects domain allocated released domain memory freed 
objects allocated domain kept alive long domains hold 
traditional os perspective natural process terminates objects disappear address space holding objects ceases exist 
hand java perspective objects deallocated reachable 
solution domain termination leads problems 
deallocating objects domain terminates extremely disruptive objects shared fine grained level explicit distinction shared non shared objects 
example consider java string object holds internal character array object 
suppose domain holds string object internal character array belongs domain 
domain dies string suddenly working may programmer ability deal disruptions level 
hand domain objects disappear domain terminates problems arise 
server domain fails clients may continue hold server objects attempt continue 
effect server failure propagated correctly clients 
second client domain holds server objects may indirectly hold resources open network connections files 
careful server implementation explicitly relinquish important resources exiting case unexpected termination may impossible 
third domain holds domain objects exits memory leaks terminated domain may unintentionally transferred remaining 
easy imagine scenarios recovery sort shared memory leak requires shutdown entire vm 
example shared memory leak current java api method string intern inserts string objects internal table shared system class string 
table implemented weak virtual machines provide objects removed 
means size internal table increases time entire virtual machine shut 
threads simply method invocation cross domain calls caller callee execute thread creates potential hazards 
caller block callee returns way caller gracefully back call disrupting callee execution 
second java threads support methods suspend modify state thread 
malicious domain call domain suspend thread callee execution gets blocked holding critical lock resource 
conversely malicious callee hold thread object modify state thread execution returns caller 
resource accounting final problem simple protection domains object sharing difficult hold domains accountable resources processor time memory 
particular clear define domain memory usage domains share objects 
definition domain held accountable objects allocates long objects remain alive 
shared objects aren deallocated domain exits domain continue charged shared objects allocated long exited 
cost shared objects split domains object 
objects contain objects malicious domain share object looks small contains pointers large objects domains charged resources consumed malicious domain 
summary simple approach protection java outlined section fast flexible runs trouble lack structure 
particular fails clearly distinguish ordinary non shared object constitute domain internal state shared object cross domain communication 
approach useful examine illustrates protection possible mechanisms provided java language 
suggests natural approach building protection system java language inherent protection mechanisms introduce additional structure fix problems 
section presents system retains flavor simple approach stronger distinction non shared shared objects 
kernel kernel capability system supports multiple cooperating protection domains run inside single java virtual machine 
capabilities chosen advantages access lists implemented naturally safe language ii enforce principle privilege easily iii avoiding access list lookups operations capabilities execute quickly 
primary goals kernel precise definition protection domains clear distinction objects local domain capability objects shared domains defined flexible communication channels domains capabilities support revocation capabilities clean semantics domain termination 
achieve goals willing accept higher cross domain communication overheads compared share approach 
order ensure portability kernel implemented entirely java library requires native code modifications virtual machine 
accomplish kernel defines class loaders examine cases modify user submitted bytecode passing virtual machine 
class loaders generate bytecode run time stub classes cross domain communication 
kernel class loader substitutes safe versions problematic standard classes 
implementation techniques kernel builds protection architecture radically different protection architecture default model java virtual machines 
protection kernel core concepts capabilities protection domains calls capabilities implemented objects class capability represent handles resources domains 
capability revoked time domain created 
uses revoked capability throw exception ensuring correct propagation failure 
protection domains represented java class domain 
protection domain namespace controls set threads 
domain terminates capabilities created revoked memory may freed avoiding domain termination problems plagued share approach 
cross domain calls performed invoking methods capabilities obtained domains 
kernel class loader interposes special calling convention calls follows 
arguments return values passed capabilities passed copy primitive types non capability objects 
object copied rules applied recursively data object fields deep copy object 
effect capabilities shared protection domains regular objects confined single domains 
kernel implementation kernel implementation capabilities cross domain calls relies heavily java interface classes 
interface class defines set method signatures providing implementation 
classes provide corresponding implementations declared implement interface 
normally interface classes provide limited form multiple inheritance properly called interface inheritance class implement multiple interfaces 
sun remote method invocation rmi specification pioneered interfaces compiler annotations 
separate interface definition language idl rmi specification simply uses interface classes flagged rmi system extend class remote 
extending remote language effect directs rmi system generate appropriate stubs marshalling code 
similarity kernel cross domain calls remote method invocations integrated sun rmi specification capability interface 
example shows simple remote interface class implements remote interface written accordance sun rmi specification 
interface readfile extends remote interface class shared visible domains byte throws byte int nbytes throws class implements readfile implementation hidden domains public byte 
public byte int nbytes 
create capability kernel domain calls create method class capability passing argument target object implements remote interfaces 
create method returns new capability extends class capability implements remote interfaces target object implements 
capability passed domains cast remote interfaces invoke methods interface declares 
example domain creates capability adds system wide repository repository service allowing domains publish capabilities name 
domain retrieves capability repository cross domain invocation 
domain target new instantiate new object capability capability create target create capability new object standard java calling convention passes primitive data types int float copy object data types 
domain bind domain readfile add repository name domain capability domain lookup domain readfile extract capability byte readfile cast readfile invoke remote method essentially capability object wrapper object original target object 
code method wrapper switches domain created capability copies arguments special calling convention invokes corresponding method target object 
target object method returns wrapper switches back caller domain copy return value capability returns 
local rmi stubs simple looking call capability create fact hides complexity traditional rpc systems 
internally create automatically generates stub class run time target class 
avoids line stub generators idl files allows kernel specialize stubs invoke target methods minimal overhead 
switching domains stubs roles copying arguments supporting revocation protecting threads 
default kernel uses java built serialization features copy argument kernel serializes argument array bytes byte array produce fresh copy argument 
convenient built java classes serializable involves substantial overhead 
kernel provides fast copy mechanism direct copies objects fields intermediate byte array 
fast copy implementation automatically generates specialized copy code class user declares fast copy class 
cyclic directed graph data structures user request fast copy code hash table track object copying objects data structure copied slows copying default copy code hash table 
generated stub contains revoke method sets internal pointer target object null 
capabilities revoked doing target object eligible garbage collection regardless domains hold capability 
prevents domains holding garbage domains 
order protect caller callee threads generated stubs provide illusion switching threads 
virtual machines map java threads directly kernel threads practical switch threads shown subsection slow cross domain calls order magnitude 
fast user level threads package solve problem require modifications virtual machine limit kernel portability 
compromise struck kernel uses single java thread caller callee prevents direct access thread avoid security problems 
conceptually kernel divides java thread multiple segments side call 
kernel class loader hides system thread class manipulates java threads interposes identical interface implementation acts local thread segment 
thread modification methods suspend act thread segments java threads prevents caller modifying callee thread segment vice versa 
provides illusion thread switching cross domain calls overhead switching threads 
illusion totally convincing cross domain calls really block way caller gracefully back callee doesn return 
class name resolvers standard java applet architecture applets little access java class loading facilities 
contrast kernel domains considerable control class loading 
domain class namespace maps names classes 
classes may local domain case visible domain namespace may shared multiple domains case visible namespaces 
domain namespace controlled user defined resolver queried kernel new class name encountered 
domain resolver load new bytecode system existing shared classes 
domain loaded new classes system share classes domains wants making capability available domains shared classes basis cross domain communication domains share remote interfaces fast copy classes establish common methods argument types cross domain calls 
allowing userdefined shared classes cross domain communication architecture extensible standard java security architectures allow pre defined system classes shared domains limit expressiveness cross domain communication 
ironically kernel needs prevent sharing system classes 
example file system thread classes security problems 
contain resources need defined domain basis class system example contains static fields holding standard input output streams 
words size fits approach class sharing java security models simply adequate flexible model essential kernel safe extensible fast 
kernel micro benchmarks evaluate performance kernel mechanisms measured number micro benchmarks kernel number systems 
indicated microbenchmarks run mhz pentium pro systems running windows nt java virtual machines microsoft vm ms vm sun vm sun vm symantec jit compiler 
numbers averaged large number iterations 
null table cost null cross domain call null compares cost regular method invocation takes tens nanoseconds 
kernel null takes longer regular method invocation 
ms vm significant fraction cost lies interface method invocation necessary enter stub 
additional overheads include synchronization cost changing thread segments lock acquire release pair call overhead looking current thread 
operations account cross domain call ms vm sun vm 
implementations operations independent hope significantly better performance system includes best vms 
operation ms vm sun vm regular method invocation interface method invocation thread info lookup acquire release lock kernel table 
cost null method invocations compare kernel traditional os cross domain calls table shows cost forms local rpc available nt 
nt rpc standard user level rpc facility 
com proc cost null interface invocation com component located separate process machine 
communication fully protected components factor regular invocation shown com proc entry 
kernel cross domain communication factor regular java invocation ms vm sun vm 
shared classes transitively classes shared classes refer allowed static fields prevent sharing non capability objects static fields 
addition ensure consistency domains domains share class share classes referenced class 
threads table shows cost switching back forth java threads ms vm sun vm 
base cost context switches nt kernel threads nt base java introduces additional overhead 
confirms switching java threads cross domain calls add significant cost kernel 
argument copying table compares cost copying arguments kernel java serialization kernel fast copy mechanism 
making direct copies objects fields intermediate java byte array fast copy mechanism improves performance substantially order magnitude large arguments 
performance difference second third rows copy number bytes due cost object allocation invocations copying routine object 
summary micro benchmark results encouraging cost cross domain call lower kernel nt 
kernel cross domain call incurs stiff penalty plain method invocation due lack optimizations java 
extensible server nt base ms vm sun vm table 
cost double thread switch regular java threads number objects size form rpc time nt rpc com proc com proc table 
local rpc costs standard nt mechanisms serialization ms vm sun vm fast copy serialization fast copy bytes bytes bytes bytes table 
cost argument copying driving applications kernel extensible server 
goal allow users dynamically extend functionality server uploading java programs called servlets customize request processing subset server url space 
building porting entire server java integrated kernel theshelf microsoft server iis 
kernel runs process iis proc extension includes system servlet access native methods allows receive requests iis return corresponding replies 
system servlet forwards request appropriate user servlet runs kernel domain 
implementation bridge iis kernel multithreaded allow multiple outstanding requests allows java code run thread iis uses invoke bridge 
server throughput measurements quantify impact kernel overheads performance server simple experiments measure number documents second served microsoft iis sun java web server kernel running inside iis 
hardware platform consists quad processor mhz pentium pro results obtained processor machines similar 
parameter experiments size document served 
tests follow scenario multithreaded clients repeatedly request document 
iis serves documents traditional way fetching nt file cache kernel utilize servlets return memory documents 
table shows overhead passing requests kernel decreases iis performance 
additional measurements show bridge accounts half performance gap remainder directly attributable kernel 
order magnitude gap kernel due fact written entirely java executed jit compiler 
time writing implementation iis plug jit fully functional 
cs servlets part motivation kernel came set servlets developed undergraduate computer architecture course cs taught cornell 
course staff wrote compiler assembler linker components java students course projects 
number reasons course staff chose web solution implemented components servlets running extensible web server jigsaw 
jigsaw web server written java servlets really just dynamically loaded classes robust protection 
servlets developed trusted course staff malicious attack source concern 
lack failure isolation new features course difficult 
addition lack clean servlet termination semantics impossible replace servlets restarting entire server 
experience set servlets strong influence kernel design 
servlets re implemented kernel 
protection domain component problems jigsaw version avoided 
related page size iis jw iis kernel bytes bytes bytes table 
server throughput pages second major vendors proposed extensions basic java sandbox security model applets 
proposals focused protecting trusted system resources untrusted applets really addressed applet applet communication protection 
addressing protection trusted system resources avoided difficult questions object sharing class sharing thread protection 
obvious approaches extend general model allowing communication mutually suspicious domains 
number related safe language systems idea object capabilities 
wallach describe models java security type hiding making dynamic class loading control domain namespace stack introspection capabilities 
recommended mix techniques 
language electric communities extension java targeted distributed systems 
security architecture capability programmers encouraged object fundamental building block protection 
odyssey system supports mobile agents written java 
supports capabilities defined special idl files 
systems allow non capability objects passed directly domains generally correspond share approach described section 
address issues revocation domain termination thread protection resource accounting 
spin project allows safe modula code downloaded operating system kernel extend kernel functionality 
spin particularly nice model dynamic linking control namespace different extensions 
uses modula pointers directly capabilities limitations share approach apply 
software protection techniques rely particular high level language java modula 
typed assembly language pushes type safety assembly language level code written assembly language level statically type checked verified safe 
software fault isolation inserts run time sandboxing checks binary executables restrict range memory accessible code 
suitable optimizations sandboxed code run nearly fast original binary risc architectures 
clear extend optimized sandboxing techniques cisc architectures sandboxing enforce protection fine granularity type system 
proof carrying code generalizes different approaches software protection arbitrary binary code executed long comes proof safe 
potentially lead safety overhead generating proofs nontrivial 
kernel enforces structure similar traditional capability systems 
kernel traditional capability systems founded notion unforgeable capabilities 
capabilities name objects context independent manner capabilities passed domain 
main difference traditional capability systems virtual memory specialized hardware support implement capabilities kernel uses language safety 
virtual memory specialized hardware led slow cross domain calls high hardware costs portability limitations 
java basis kernel simplifies issues plagued traditional capability systems 
systems capability lists kernel store capabilities data structures capabilities implemented java objects 
second rights amplification implicit object oriented nature java invocations methods functions methods automatically acquire rights self parameter 
addition selective class sharing amplify parameters 
capability systems support revocation idea indirection implement revocation certainly new 
issue resource accounting known implementers capability systems wulf point owns object hydra scheme things hard know cost maintaining charged accounting issue need addressed production operating system 
similarities exist kernel single address operating systems opal 
remove address space borders allowing cheaper easier sharing data processes 
opal implemented architectures offering large address spaces bit password capabilities protection mechanism 
password capabilities protected forgery combination encryption sparsity 
research operating systems support fast inter process communication 
projects exokernel eros provide fine tuned implementations selected ipc mechanisms yielding order magnitude improvement traditional operating systems 
systems carefully tuned aggressively exploit features underlying hardware 
kernel rigorously aims minimality designed scratch generation kernels evolved monolithic os kernels 
system successful common misconceptions kernel performance limitations 
exokernel shares goal ultra fast kernel concerned untrusted loadable modules similar spin project 
untrusted code efficient control hardware resources separating management protection 
focus eros project support orthogonal persistence real time computations 
despite quite different objectives systems manage provide fast implementations ipc comparable performance shown table 
short explanation operation column needed 
round trip ipc time taken call transferring byte process returning caller exokernel protected control transfer installs callee processor context starts execution specified location callee 
results contrasted argument method invocation kernel 
kernel performance comparable fast systems 
important note exokernel eros implemented mix assembly language code kernel consists java classes native code support 
improved implementations jvms jits enhance performance kernel 
explores safe language technology construct robust protection domains 
advantages language enforced protection portability cross domain performance 
straightforward implementation protection safe language environment object directly capabilities 
problems revocation domain termination thread protection resource accounting arise non shared object clearly distinguished shared capabilities 
argue structured approach needed solve problems capabilities shared non capability objects confined single domains 
developed kernel system demonstrates issues object sharing class sharing thread protection addressed 
far know kernel java system integrates solutions issues single coherent protection system 
experience kernel extend microsoft iis web server leads believe safe language system achieve robustness high performance 
simple servlets downloaded web server achieve performance close server running stand 
portability flexibility language protection natural choice variety extensible applications component systems 
performance point view safe language techniques competitive fast microkernel systems necessarily achieve promise making cross domain calls cheap function calls 
implementing stronger model protection straightforward share approach leads thread management costs copying costs increase overhead function call 
fortunately clearly room improvement 
small operations java allocating object invoking interface method manipulating lock slower necessary current virtual machines 
java just time compiler technology evolving 
expect virtual machine performance improves kernel cross domain performance improve 
continue explore optimizations possible top current shelf virtual machines examine performance benefits customizing virtual machine bring 
system operation platform time round trip ipc exokernel protected control transfer dec eros round trip ipc kernel method invocation args table 
comparison selected kernels 

bershad savage pardyak sirer fiuczynski becker eggers chambers 
extensibility safety performance spin operating system 
proceedings th acm symposium operating systems principles sosp copper mountain december 

bershad anderson lazowska levy 
lightweight remote procedure call 
proceedings th acm symposium operating systems principles sosp pages arizona december 

boyer yu 
automated proofs object code widely microprocessor 
acm jan 

chase levy lazowska baker harvey 
lightweight shared objects bit operating system 
proceedings acm object oriented programming systems languages applications oopsla october 

drossopoulou eisenbach 
java type safe probably 
proceedings th european conference object oriented programming jyv skyl finland june 

electric communities 
white 
available www communities com products tools 
engler kaashoek james toole 
exokernel operating system architecture application level resource management 
proceedings th acm symposium operating systems principles sosp copper mountain december 

general magic 
odyssey 
available www com agents 

gong 
java security near 
ieee micro may june 

gosling joy steele 
java language specification 
addison wesley 

ismail 
protection scheme mobile agents java 
proceedings rd annual acm ieee international conference mobile computing networking budapest hungary september 

performance kernel systems 
proceedings th acm symposium operating systems principles sosp october saint malo france 

heiser implementation performance single address space operating system 
technical report unsw cse tr june univeristy new south wales sydney australia 

javasoft 
javabeans version specification 
available java sun com 

javasoft 
remote method invocation specification 
available java sun com 

javasoft 
new security model jdk 
available java sun com 
javasoft 
java servlet api 
available java sun com 

javasoft documentation 
available java sun com 
jones wulf 
design secure systems 
software practice experience vol 


leroy 
objective caml 
available pauillac inria fr ocaml 

levy 
capability computer systems 
digital press bedford massachusetts 

liedtke 
proceedings th acm symposium operating systems principles sosp copper mountain december 

liedtke achieved ipc performance 
proceedings th workshop hot topics operating systems hotos may ma 

lindholm yellin 
java virtual machine specification 
addison wesley 

microsoft digital equipment 
component object model specification 
redmond wa july 

microsoft 
microsoft security management architecture white 
available www microsoft com security 

morrisett walker crary glew 
system typed assembly language 
appear symposium principles programming languages 

necula lee 
safe kernel extensions run time checking 
proceedings nd operating systems design implementation osdi seattle wa october 

necula 
proof carrying code 
th acm symposium principles programming languages pages paris 

nelson ed 
system programming modula 
prentice hall 

netscape 
java capabilities api 
available www netscape com 

saraswat 
java type safe 
available www research att com vj bug html 

shao 
typed common intermediate format 
usenix conference domain specific languages santa barbara california october 

shapiro farber smith 
measured performance fast local ipc 
th international workshop object orientation operating systems seattle washington 

sirer fiuczynski pardyak bershad 
safe dynamic linking extensible operating system 
st workshop compiler support systems software february 

wahbe lucco anderson graham 
efficient software fault isolation 
proceedings th acm symposium operating systems principles sosp asheville nc december 

wallach balfanz dean felten 
extensible security architectures java 
proceedings th acm symposium operating systems principles sosp saint malo france october 

world wide web consortium jigsaw www org jigsaw 

wulf levin harbison hydra mmp experimental computer system mcgraw hill new york ny 

