eulerian disjoint paths problem grid graphs np complete marx th december show edge disjoint paths problem np complete directed undirected rectangular grids union supply demand graph eulerian 
keywords disjoint paths grids np completeness disjoint paths problems arise naturally practical applications network routing vlsi design 
problem interesting theoretic point view beautiful characterization theorems restricted cases 
restriction planar graphs particular planar grid graphs practical theoretical interest 
prove np completeness planar case problem settling open question :10.1.1.53.268
complements characterization theorem okamura seymour 
disjoint paths problem graph set source destination pairs 
sk tk called terminals find disjoint paths 
pk path pi connects vertex si vertex ti 
basic variants problem graph directed undirected require edge disjoint vertex disjoint paths 
problem described terms supply graph demand graph follows disjoint paths input supply graph demand graph set vertices 
task find path pe paths pairwise disjoint path pe edge forms circuit 
graphs parallel edges loops 
vertex disjoint paths allow endpoints 
directed version problem research supported hungarian national science fund department computer science information theory budapest university technology economics budapest hungary 
cs bme hu directed 
slight abuse terminology say directed case demand uv starts ends directed path satisfying demand starts ends 
solution disjoint paths problem identify demand path satisfying 
say demand uses supply edge path satisfying demand uses edge 
undirected graph called eulerian vertex degree directed graph eulerian indegree equals outdegree vertex 
disjoint paths problem variants intensively studied overview see 
particular variants problem directed undirected edge disjoint vertex disjoint np complete planar 
consider directed undirected edge disjoint paths problem grid henceforth disjoint means edge disjoint 
exist disjoint paths endpoints cut contain edges demands crossing cut edges connecting say cut criterion holds true cut 
general cut criterion necessary condition important special case sufficient theorem okamura seymour 
assume planar undirected eulerian edge lies outer face edge disjoint paths problem solution cut criterion satisfied 
graph grid graph finite subgraph rectangular grid 
directed grid graph grid graph horizontal edges directed right vertical edges directed bottom 
clearly directed grid graph acyclic 
rectangle grid graph nodes vi connected vi 
study grid rectangle graphs motivated applications vlsi layout 
special case theorem rectangle investigated 
requirement edges lie outer face dropped restricted case shows example eulerian cut criterion holds terminals connected edge disjoint paths left reader verify claims 
section prove edge disjoint paths problem np complete rectangles eulerian 
answers open question :10.1.1.53.268
implies conp np generalization theorem give characterization case drop requirement terminals lie outer face 
characterization theorems literature case planar eulerian additional constraint holds theorem 
previously np completeness result known planar eulerian 
best knowledge negative result eulerian theorem stating disjoint paths problem np complete eulerian undirected nonplanar graph dag 
directed case proved edge disjoint paths problem npcomplete supply graph planar acyclic directed rectangle asked problem remains np complete additional constraint graph eulerian :10.1.1.53.268
settle question proving problem similarly undirected version np complete 
psfrag replacements example showing theorem hold terminals lie outer face 
reduction section prove edge disjoint paths problem directed undirected rectangle graphs remains np complete restricted case eulerian 
prove problem np complete directed grid graphs eulerian 
standard techniques result extended rectangle graphs undirected graphs 
observation useful lemma 
directed disjoint paths problem eulerian acyclic solution uses edges proof 
assume solution 
take demand edge delete directed circuit formed demand edge path solution 
continue remaining graph contains demand edges subgraph deleted directed circuits remains eulerian eulerian subgraph acyclic graph empty graph edges solution edges 
proving np completeness planar problem usually done ways reduction planar problem planar sat planar independent set reduction constructs planar instance locally replacing crossings copies crossover gadget planar graph coloring 
reduction types crossings global structure construction ensures crossings behave nicely 
resembles way proves np completeness disjoint paths problem planar dags 
theorem 
edge disjoint paths problem np complete directed grid graphs eulerian 
proof 
proof polynomial reduction restricted case sat formula conjunctive normal form task find variable assignment clause formula exactly literals true 
monotone sat literal positive negated cubic version problem variable occurs exactly times 
shown monotone cubic sat np complete 
number variables monotone cubic sat formula obviously equals number clauses 
assumed clause contains different literals 
reduction component design type psfrag replacements rd nd st rd nd st xn st nd rd st nd rd st nd rd rd nd st pn cn overview reduction 
variable setting gadgets left paths leave right bottom 
paths lead satisfaction testing gadgets 
construct variable setting gadgets satisfaction testing gadgets connect way disjoint paths problem solution formula satisfiable sense 
constructed graph grid graph construction ensures eulerian resulting instance 
gadgets connected structure gadgets described 
going diagonally top left bottom right place sequence copies variable setting gadget 
component corresponding xn top left corner 
continue sequence copies satisfaction testing gadget see 
denote pt lower right vertex component corresponding tth clause top left vertex component clause 
paths leave variable gadget right bottom called right exits lower exits gadget 
exits numbered topmost right exit right exit leftmost lower exit lower exit 
similarly satisfaction testing gadgets upper entries leftmost left entries topmost 
assume literals clause sorted variable literal smallest index clause 
occurrences variable numbered way occurrence variable clause largest index 
components connected follows 
ith occurrence variable xs jth literal clause ct connect ith right exit component xs jth upper entry component ct similarly lower exits left entries 
connection path grid consisting directed edges 
connections done going right right turn connection 
exactly demands variable xs appears clause ct demands start pn psfrag replacements xc xb xa pt paths entering satisfaction testing component 
component xs component ct 
exact location start vertices demands defined 
connections described cross vertex may crossings resulting grid graph 
solution disjoint paths problem call vertex bad crossing demand entering vertex left leaves bottom demand entering leaves right 
note lemma exactly demands go crossing 
show induction solution graph contain bad crossing 
clearly crossings left vertex 
assume bad crossings left vertex pt 
shows paths entering component clause ct dashed lines show possible paths may cross paths 
way literals ordered clause paths entering clause component cross recall component xn upper left corner 
furthermore way occurrences variable ordered paths leaving variable component cross 
induction hypotheses demand goes vertices vertices vertices vertices 
example demand going leave path bad crossing bad crossings left pt 
demands starts component xc ct destination 
leave xc right reach ct path way reaching ct bad crossing left pt 
similarly demands leave bottom 
exactly demands going ct leaves right bottom furthermore demands leave xc 
similar argument holds components xb xa 
clearly demand going ct pt psfrag replacements variable setting gadget 
reach ct bad crossings path 
demand going reach ct remains 
demand going enter ct 
bad crossings ct similar argument shows bad crossings left ct bad crossings left pt completes induction 
describe gadgets reduction 
variable setting gadget output edges right output edges bottom 
right simplified version gadget shown grid graph just planar dag 
structure real gadget order grid graph edges twisted high degree vertices split 
show simplified version works easy show holds real gadget 
demands start demands start demands start destination demands clause component corresponding clause ith occurrence variable 
seen solution leaves gadget right leaves bottom opposite 
true leave right leave bottom way 
see assume uses xa uses xb 
implies go uses uses demand go uses za uses zb 
go go show 
similar argument uses xb get demands go solution disjoint paths problem component xs possible states demands leave bottom call state true leave right false 
recall demands leave bottom reach respective clause components left leave right reach clause components top 
satisfaction testing gadget simplified equivalent shown 
paths enter correspond paths enter gadget left paths entering correspond entering top 
gadget contains endpoints demands corresponding variables 
demands start variable component corresponding jth literal clause 
precisely jth literal clause ct ith occurrence variable psfrag replacements satisfaction testing gadget 
xs demand starting gadget xs demand terminating gadget ct vertex endpoint demands vertex endpoint demands 
seen solution exactly leaves variable component right leaves bottom exactly enters clause component top enters left 
furthermore exactly enters left enters top remaining demand enters top demand enters left 
see notice demand reach demands reach satisfaction testing gadget effectively forces exactly variable gadgets state true 
easily verified eulerian constructed instance 
solution disjoint paths problem find satisfying assignment formula assign variable xs true false depending state gadget corresponding xs 
construction clause satisfied sense 
hand satisfying variable assignment find solution disjoint paths problem values variables determine demands leave variable setting gadgets extended graph 
noted disjoint paths problem easier rectangle graphs general grid graphs add new edge uv new demand new demand reach grid new edge :10.1.1.53.268
add new edges demands get full rectangle graph changing solvability instance 
clearly remains eulerian adding supply edge uv demand edge vu corollary 
edge disjoint paths problem np complete directed rectangle graphs eulerian 
reduction directed case undirected described lemma 
instance directed edge disjoint paths problem acyclic eulerian undirected graphs result neglecting orientation solution solution vice versa 
combining corollary lemma obtain corollary settling open question corollary :10.1.1.53.268
undirected edge disjoint paths problem np complete rectangle graphs eulerian 
acknowledgments grateful help preparing 
useful comments acknowledged 
frank 
disjoint paths rectilinear grid 
combinatorica 
frank 
packing paths circuits cuts survey 
paths flows bonn pages 
springer berlin 
garey johnson stockmeyer 
simplified np complete graph problems 
theoret 
comput 
sci 
moore robson 
hard tiling problems simple tiles 
discrete comput 
geom 
okamura seymour 
multicommodity flows planar graphs 
combin 
theory ser 

:10.1.1.53.268
disjoint paths 
technical report research institute discrete university bonn 

np completeness edge disjoint paths problems 
discrete appl 
math 

