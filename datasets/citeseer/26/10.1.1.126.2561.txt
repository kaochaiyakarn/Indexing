identifying open problems distributed systems andrew warfield norm hutchinson university british columbia andy norm cs ubc ca technology internet continues advance reached point potential benefits large scale finely distributed applications apparent 
opportunities emerging develop large systems cater highly dynamic mobile sets participants desire interact stores online content robust manner 
opportunities inevitably dictate substantial body research years follow 
applications intended function scale begun appear remain broad set open problems faced emerging class distributed system reality 
distributed systems research historically avoided hard problems carefully calculated operating constraints 
scalable resource clusters assumed away protected facilities connected reliable infrastructure 
large systems assumed cooperating nuclei administrative organizations fail 
peer environments participants assumed behave fairly resources :10.1.1.12.6173
specifications systems grow require operation massive scale highly distributed administration assumptions strongly challenged means providing useful systems 
short distributed systems research quickly approaching point hard problems avoided longer 
prior embarking construction large scale distributed operating system felt useful survey landscape problems faced construction class system 
summary urgent problems addressed order successful systems realized 
approach identifying open problems twofold 
designed taxonomy describe domain existing distributed systems 
model dimensional space axes define concurrency conflict resource access degree distribution mobility resources system 
model draw application pointto point multiplexed fragmented peer peer 
phylum defines target domain apply lessons learned groups 
taxonomy describe set architectural systems problems addressed 
second aspect examination step back examine implications involved adoption large scale distributed operating environments 
section concerned classical systems issues performance robustness scale concerned pragmatic factors involved building system 
broad set pertinent problems need addressed systems successful outside research laboratory 
taxonomy distributed systems section presents taxonomy describing distributed systems continuous space axes 
axes access concurrency resource distribution stem examination evolution distributed applications 
access concurrency considers number simultaneous accesses resource degree conflict accesses 
access concurrency problems emerged researchers began move time sharing mainframes 
resource distribution represents broadly system spread network infrastructure 
individually axes represents steadily increasing gradient complexity system architecture 
cases axes high degree system complexity explodes 
distributed applications reside close axes models 
observation suggests limiting factors exist inhibiting development complex systems 
consider axes systems individually 
access concurrency access concurrency originated desire allow users share resources original mainframe computers 
concurrency mechanisms allow clients share resource preserving state resource simultaneous accesses 
worth requirement avoid conflict concurrency mechanisms need act stateless request multiplexers 
complexity issues simple multiplexing internet scale conflict avoidance access concurrency especially hard 
order avoid conflicts concurrent access extra mechanisms put place 
mechanisms add overhead complexity system 
mechanisms support access concurrency involve tradeoffs efficiency effectiveness 
efficient concurrency control techniques aim allow highest possible amount simultaneous access may cost poorly preserving resource state unfairly scheduling access 
techniques optimized effectiveness protect resource state may severely limiting concurrency access 
example consider locking files preserve consistency concurrent systems 
pessimistic locking effective preserving state results complete loss concurrency file locked writing 
optimistic locking allows higher degree concurrency may perform worse high state conflict transactions aborted 
extreme case efficient concurrency conflicts may simply flagged left separate mechanism resolve 
inconsistencies addressed disconnection distributed file systems coda 
similar analogies access concurrency exist respect resources memory protection process scheduling 
emerging class large distributed systems issue high degree concurrency system demands efficiency individual users expect effective consistency preservation 
measures conflict resolution explored 
non trivial problem automatically conflicts information high degree structure files ad hoc databases windows registry 
additionally exist set resources resolution may appropriate fact large scale active conflict avoidance necessity 
resource distribution resource distribution describes degree system spread network dynamic resources 
smallest degree resource distribution mandates substantial amount overhead system 
consider difference ac cesses local file versus remote file service nfs cases contain complexity involved reading file disk remote access additional responsibilities locating service marshalling data message structures interacting network handling considerably larger set potential error cases 
transparency hallmark goal distributed systems problem concealing details distribution 
mechanisms remote procedure calls rpc intended simplify application development force distribution implemented deep system 
results directly problems traditionally associated distributed systems fragility inflexibility 
troubling aspect line consideration issues indicate fundamental flaw onset approaches distribution 
rpc really provides degree distribution passing call single remote host 
rpc just entered arena distributed systems complexity 
assuming resources accessed expressive reliable manner larger problem exists distribution 
order access resources possible locate 
furthermore resources static system mechanisms exist find ongoing manner 
instance location resource may determined directory service refreshed successive access 
large scale highly dynamic systems centralized service may sufficient track resource location methods forwarding pointers may employed :10.1.1.35.5611
distribution equates exactly extra mechanism complexity system 
larger distributed system mechanism required locate track access objects 
distributed applications axes described draw distributed applications shown 
note respective sizes domains means equal represent division simplicity 
follows brief presentation classes 
case supply example phylum demonstrate characteristics 
try identify weaknesses exist domain may acceptable advanced systems 
point point point point phylum represents simple set applications client connects resource un resource distribution fragmented resource point point peer peer multiplexed access concurrency taxonomy distributed applications shared access 
point point examples exist primarily components complex applications instance data channel ftp session point point associated resources allocated ends connection transfer 
consider simple rpc primarily point point application provided rpc server handles single request time 
point point applications characterized fact distribution aspects system typically quite visible 
failure occur identified resolved user 
ftp server respond crashes transfer user attempt connection 
clearly system property generally tolerable domain simple applications 
multiplexed multiplexed applications resources delivered high degree concurrency possibly conflict control relatively small scale distribution 
file web servers excellent examples phylum provide set centralized resources large number concurrent users 
note model file web servers high degree access concurrency barely distributed 
users typically need connect single point access resources 
distributed examples multiplexed applications distributed striped file systems scalable data structures :10.1.1.130.4550
cases users may connect single resource resource may forward requests additional link appropriate secondary server 
risk failure significant multiplexed systems resource provision side failure potential affect larger number users 
gate problem large multiplexed services served specialized hosting facilities high degree resource reliability may assumed 
precautions may involve installation redundant resources take rare case system failure 
fragmented resource fragmented systems resources spread move set connected endpoints 
communication substantially complex systems messages may travel directly resource may lead cascade interactions system 
existing fragmented systems domain name service dns frequently structured hierarchy coupled administrative domains 
note exist examples highly fragmented systems 
considered global dns database fragmented considerable number hosts 
orders magnitude smaller scope desired advocates universal internet scale directory services ldap see broad acceptance network 
distribution administration presents difficulty ongoing provision fragmented systems 
centralized resource single administrative body capable quickly affecting changes scope system 
fragmented resource issues arise changes applied allowed 
case dns updates frequently submitted human administrators authenticate apply changes hand 
existing systems acceptable property dns lookups handled acceptable degree frequency change small typically handled line 
approach provides high degree scalability 
peer peer peer peer applications highly distributed involve high degree potentially conflicting concurrent access resources 
fairly hypothetical description applications currently exist internet scale 
peer file sharing applications gnutella initial steps domain enter phylum 
gnutella need address conflict issues proven able scale 
class application acceptable weaknesses compound avoided 
failure high potential impact resources protected 
administration distributed coupling administrative domains may dynamic 
discuss issues extensively section 
open architectural problems taxonomy survey existing systems identify set prevalent architectural problems currently inhibit development advanced distributed systems 
problems failure resolution resource management administration communication infrastructure 
failure resolution despite advanced state systems research unable definitively tell resource failed 
nonterminal failure states livelock byzantine failure incredibly difficult detect resolve 
furthermore large distributed systems small failures potential cascade system disaster 
traditional design goals transparency layering force failure resolved inappropriately requiring masked system 
general purpose failure handlers predict possible fail states unable effectively address band failure 
currently exist accepted universal approach expressing detecting resolving failure distributed systems 
clearly failures detected resolved situation clear systems cope maintain degree sanity 
resource management order carry reliable services confines locked facilities need able expect reliable levels service nodes connective infrastructure distributed environment 
applications desiring high degree reliability able reserve resources comfortably expect reservations 
reservation systems rsvp presents support problem solve 
reservation schemes inevitably possibility reduction available resources situation akin partial failure real analogy local high speed network 
tolerating reduction service quality sudden change resource availability fundamental change system design 
furthermore highly distributed environment naive assume resources remain available 
applications able gracefully handle resource loss reallocation 
additional mechanisms redundancy supported system guard failure 
administration fragmentation resources mandates need provide adaptable configurable systems environment control distributed 
models developed allow scaling administration systems arbitrary non hierarchical structure 
systems define support techniques allowing variety levels trust relationships participants 
solution particular area involves localization administration highest possible degree 
specifically individual users local administrative bodies responsible configuring aspects local systems 
distributed systems resources potentially shared remote administratively disjoint parties mechanisms exist effectively handle express changes administrative boundaries 
mechanisms necessarily allow delegation trust responsibility appropriate manner 
communication infrastructure distributed systems dependent arguably defined communications infrastructure 
existing tcp ip network network interfaces operating systems surpassed expectations scalability remained essentially unchanged life internet 
existing network presents advanced distributed systems worth addressing briefly 
exists developed infrastructure group communications 
ip multicast substantial improvement existing network questionable scalability performance large dynamic system may possess significant vulnerabilities 
communication remains inextricably tied identified endpoints making mobility management extremely difficult 
importantly methods collaboration involving participants available 
interacting set resources universally handled coordinating resource typically leads single point failure congestion systems 
order peer peer applications reality mechanisms allow groups efficient ways developed 
open problems taxonomy able identify structural issues restraining development advanced distributed systems 
issues solved system constructed contribution distributed systems research 
feel system inevitably flounder available broad internet 
section identify set open problems identified taxonomy 
problems defined directly structure system necessary properties useful real environment 
exploration existing systems uncovered set significant open problems 
describe briefly remainder section 
physical resource discovery naming incredibly difficult provide useful integration distributed systems physical world 
network topologies especially exposed existing protocols provide entirely unrepresentative view resource location 
strongly desired property advanced distributed systems ubiquitous pervasive computing allow mobile users adapt locally available resources 
instance desirable easily locate access hotel printer 
emerged years addressing naming discovery resources physical dimension problem hardly solved 
emergence mobile devices provide geographic information problem relevant 
security privacy concerns privacy security clearly resources distributed 
centralized lightly distributed systems proven able access control lists acls encryption effectively protect resources 
systems administration distributed centralized solutions alternate mechanisms considered 
capabilities touted solution distributed case see successful broad application 
capabilities inherent problems respect access revocation typically requires rekeying resources clients 
furthermore capabilities difficult administer track context broad distribution 
long lived resources protected encryption capabilities may vulnerable attack 
economies sharing frequently cited benefit development finegrained distributed systems opportunity share unused resources 
reasoning approach uses resources time low overhead sharing scheme globally beneficial 
gnutella represents real world test philosophy users able required share local files 
study xerox parc shows users environment behave fairly small percentage hosts share :10.1.1.12.6173
proposes utility system file storage resources exchanged administrations manner analogous power system 
systems information sharing net involved artificial economies karma exchanged participants 
considerable opportunity explore sharing provided distributed systems 
effective solution problem strong effect success systems 
additionally system resources network bandwidth shared arbitrarily anonymously remain questions regarding payment services 
economy internet hinges largely traffic patterns existing applications emergence widely adopted system drastically changes patterns potential drastically effect financial operation net 
system evolution simply providing large scale system considerable feat 
ongoing maintenance evolution system considerably difficult 
internet plagued evolution issues 
systems simply designed change mind hypertext markup language html evolved generations authors provide backwards compatibility legacy browsers expense able new features 
internet single largest example problem generation internet protocol ipv development limited years 
implications rolling protocol entire internet incredible new protocol provides easier mechanism inevitable evolution 
systems designed evolution mind 
architectural assumptions application couplings minimized possible 
methods developed allow complete systems upgraded changed drastically low negative impact environment 
heterogeneity massive distributed systems reasonable expect mandate uniformity resources 
limits innovation flexibility inhibits evolution described 
order systems flexible improve time implementation requirements individual resources light possible 
furthermore requirements able change time 
software structure representation network application code independant functional unit client server source completely disjoint obscuring coupling inherent system 
stated attempts build systems transparently handle distribution impossible appropriately expose resolve failure 
exposing distribution completely leads systems complexity application development considerably difficult 
aspect oriented programming aop community focused attention concept crosscutting concerns elements system cut primary system modularity 
proposed linguistic mechanisms intended allow implementation concerns class modules called aspects 
aop may potential write code describes functionality network addressing fault control issues appropriately 
aop see may new means gaining benefits transparency associated weaknesses 
purpose identify problems necessarily addressed order develop advanced internet scale distributed systems 
taxonomical observation existing systems identified set open architectural problems including failure resolution resource management administration communication infrastructure 
set problems solutions strongly support acceptance large distributed applications network 
projects develop environments ubiquitous invisible pervasive distributed applications continue exciting research need address issues order realize visions 
gnutella 
gnutella wego com 
mojo nation 
www com 
adar huberman :10.1.1.12.6173
free riding gnutella 
technical report xerox parc august 
william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
symposium operating systems principles pages 
cox :10.1.1.35.5611
treadmarks shared memory computing networks workstations 
ieee computer feb 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
acm transactions computer systems february 
livny tannenbaum 
deploying high throughput computing cluster 
high performance cluster computing 
prentice hall 
steven czerwinski ben zhao todd hodes anthony joseph randy katz 
architecture secure service discovery service 
mobile computing networking pages 
mike jeffrey hightower tom anderson gaetano borriello 
century challenges data centric networking invisible computing 
mobile computing networking pages 
kubiatowicz oceanstore architecture global scale storage 
proceedings ninth international conference architectural support programming languages operating systems asplos november 
gribble welsh von behren brewer culler czerwinski gummadi hill katz mao ross zhao 
ninja architecture robust internet scale systems services 
steven gribble eric brewer joseph hellerstein david culler 
scalable distributed data structures internet service construction 
fourth symposium operating system design implementation osdi october 
robert grimm tom anderson brian bershad david wetherall 
system architecture pervasive computing 
proceedings th acm sigops european workshop september 
john hartman john ousterhout :10.1.1.130.4550
zebra striped network file system 
acm transactions computer systems 
gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
european conference object oriented programming ecoop 
lixia zhang steve deering deborah estrin scott shenker daniel zappala 
rsvp new resource reservation protocol 
ieee network magazine september 
