internet mathematics vol 
network applications bloom filters survey andrei broder michael mitzenmacher 
simple space efficient randomized data structure representing set order support membership queries 
bloom filters allow false positives space savings outweigh drawback probability error controlled 
bloom filters database applications years popular networking literature 
aim survey ways bloom filters modified variety network problems aim providing unified mathematical practical framework understanding stimulating applications 

simple space efficient randomized data structure representing set order support membership queries 
bloom filters allow false positives space savings outweigh drawback probability error sufficiently low 
burton bloom introduced bloom filters bloom popular database applications 
started receiving widespread attention networking literature 
survey ways bloom filters modified variety network problems aim providing unified mathematical practical framework stimulating applications 
describe mathematics bloom filters peters page internet mathematics history important variations 
consider types network related applications bloom filters collaborating overlay peer peer networks bloom filters summarizing content aid collaborations overlay peer topeer networks 
resource routing bloom filters allow probabilistic algorithms locating resources 
packet routing bloom filters provide means speed simplify packet routing protocols 
measurement bloom filters provide useful tool measurement infrastructures create data summaries routers network devices 
emphasize simple categorization loose applications fit categories categories meant exhaustive 
suspect new applications bloom filters variants continue bloom network literature 
emphasize providing brief summaries 
theme unifying diverse applications bloom filter offers succinct way represent set list items 
places network keep send list complete list requires space 
bloom filter offers representation dramatically reduce space cost introducing false positives 
false positives cause significant problems bloom filter may provide improved performance 
call bloom filter principle repeat emphasis 
bloom filter principle list set space effect false positives mitigated 

bloom filters mathematical preliminaries 
standard bloom filters presenting mathematics bloom filters 
bloom filter xn elements described array bits initially set 
bloom filter uses independent hash functions hk range 
mathematical convenience broder mitzenmacher network applications bloom filters survey 
example bloom filter 
filter begins array 
item set xi hashed times hash yielding bit location bits set 
check element set hash times check corresponding bits 
element set bits 
element set filter yielded false positive 
natural assumption hash functions map item universe random number uniform range 
element bits hi location set multiple times change effect 
check item check hi 
member hi set assume wrong probability 
bloom filter may yield false positive suggests element 
provides example 
applications false positives may acceptable long probability sufficiently small 
avoid silently assume kn probability false positive element set false positive rate estimated straightforward fashion assumption hash functions perfectly random 
elements hashed bloom filter probability specific bit kn kn kn note convenient close approximation proportion bits elements inserted table 
expected value course conditioned early considering performance bloom filters practical hash functions done ramakrishna ramakrishna 
question hash function practice remains interesting open question currently md popular choice fan 
internet mathematics probability false positive discussed second approximation justified fact high probability close mean 
return fact section 
kn kn general easier asymptotic approximations analysis worth noting bloom filters described slightly differently having array size shared hash functions hash function range consecutive bit locations disjoint 
total number bits bits divided equally hash functions 
repeating analysis find case probability specific bit kn asymptotically performance original scheme 
kn equality probability false positive large division 
difference small approach may useful implementation reasons example dividing bits hash functions may parallelization array accesses easier 
suppose wish optimize number hash functions 
competing forces hash functions gives chances find bit element member fewer hash functions increases fraction bits array 
optimal number hash functions minimizes function easily derivative 
conveniently note exp ln kn 
broder mitzenmacher network applications bloom filters survey ln kn 
minimizing false positive rate equivalent minimizing respect ln kn kn kn kn easy check derivative ln efforts reveal global minimum 
alternatively kn ln ln symmetry reveals minimum value occurs equivalently ln 
case false positive rate practice course integer smaller suboptimal preferred reduces number hash functions computed 
pleasant result equals probability false positive minimized depend asymptotic approximation 
repeating argument exp ln kn ln kn kn wehave ln ln ln symmetry minimized 
similarly derive fact calculus 
astute reader may concerned fraction bits bloom filter array may equal instantiation number bloom filter depends results hashing 
simply represents expected fraction bits array 
number bits array substantially expected probability false positive higher quantity computed 
mitzenmacher shows fact fraction bits extremely concentrated expectation simple martingale argument mitzenmacher 
specifically random variable corresponding number bits bloom filter show azuma hoeffding inequality nk similar bounds making negative dependence ranjan corresponds intuitive idea bit set slightly lowers probability bit set 
negative internet mathematics dependence allows chernoff bounds applied bound fraction bits giving similar exponential tail bound 
specific fraction bits may exactly high probability close large arrays justifies 

lower bound means determining efficient bloom filters consider bits necessary represent sets elements universe manner allows false positives fraction universe allows false negatives 
derive simple lower bound case 
suppose universe size representation associate bit string possible sets 
set letf string set mapped representation 
say bit string accepts element universe containing thatis representative string 
rejects intuitively accepts conclude set generated contains rejects sure set generated contain consider specific elements 
string represent accept element remember false negatives may accept elements universe maintaining false positive rate 
accepts elements 
fixed string subsets size elements represent sets 
bits distinct strings represent sets 
log log log log 
approximation suitable small compared whichis practical case interest 
find needs essentially log representation scheme false positive rate bounded 
recall expected false positive rate bloom filter ln broder mitzenmacher network applications bloom filters survey optimal value ln algebraic manipulation find requires log log log 
ln space wise bloom filters factor log asymptotic lower bound 
alternatively keeping space constant bits table optimal bloom filters yield false positive rate lower bound error rate methods represent sets fewer bits bloom filters maintaining rate false positives including compressed bloom filters discussed section techniques perfect hashing 
schemes appear complicated require computation offer flexibility bloom filters 
example set elements fixed find perfect hash function say hx plus fully uniform random hash function 
hx bits 
clearly scheme matches lower bound probability false positive exactly hand change set require expensive recomputation perfect hash function 

hashing vs bloom filters hashing common ways represent sets 
item set hashed log bits sorted list hash values represents set 
approach yields small error probabilities 
example log bits set element probability distinct elements yield hash value probability element set matches hash value set standard union bound 
bloom filters interpreted natural generalization hashing allows interesting tradeoffs number bits set element probability false positives 
bloom filter just hash function equivalent ordinary hashing 
bloom filters yield constant false positive probability constant number bits set element 
example false positive probability just 
theoretical analyses tradeoff useful typically needs asymptotically vanishing probability error achievable log bits element 
bloom filters received little attention theory community 
contrast practical applications constant false internet mathematics positive probability may worthwhile order keep number bits element constant 

standard bloom filter tricks certain operations easy implement 
example suppose bloom filters representing sets number bits hash functions 
bloom filter represents union sets obtained bit vectors original bloom filters 
nice feature bloom filters easily halved size allowing application dynamically shrink bloom filter 
suppose size filter power 
halve size filter just second halves 
hashing lookup highest order bit masked 
bloom filters approximate intersection sets 
suppose bloom filters representing sets number bits hash functions 
intuitively inner product bit vectors measure similarity 
formally jth bit set filters set element set simultaneously element element 
probability jth bit set filters algebraic simplification find expected magnitude inner product bloom filters magnitude inner product calculate estimate intersection equation 
note estimated counting number bits bloom filters explained section number bits set strongly concentrated expectation broder mitzenmacher network applications bloom filters survey letting respectively number filter respectively andz number inner product obtain 
counting bloom filters suppose set changing time elements inserted deleted 
inserting elements bloom filter easy hash element times set bits 
unfortunately perform deletion reversing process 
hash element deleted set corresponding bits may setting location hashed element set 
case bloom filter longer correctly reflects elements set 

bloom filter 
entry bloom filter single bit small counter 
item inserted corresponding counters incremented item deleted corresponding counters decremented 
avoid counter overflow large counters 
analysis fan reveals bits counter suffice applications 
determine counter size consider counting bloom filter set elements hash functions counters 
count associated ith counter 
probability ith counter incremented times binomial random variable nk nk probability counter bounded mp calculated formula 
loose useful bound derived follows nk mj jm suppose restrict ln argued optimize false positive rate ln eln max name counting bloom filter data structure introduced mitzenmacher 
internet mathematics allow bits counter counter overflow counter reaches value 
max bound holds set items union bound says counting bloom filter represents different sets items history overflows probability mt suffice applications 
way interpreting result observe ln total counter increments spread counters high probability maximum counter value log log log necessary counter 
practice counter overflow approach leave maximum value 
cause false negative eventually counter goes remained nonzero 
deletions random expected time event relatively large 

compressed bloom filters mitzenmacher mitzenmacher addresses question suppose server sending bloom filter servers network 
gain compressing resulting bloom filter 
choose optimal value minimize false probability calculated previously 
assumption random hash functions bit array essentially random string entry probability 
compression offer gain 
mitzenmacher demonstrates flaw reasoning 
problem optimized false positive rate bloom filter constraint bits elements represented filter 
suppose optimize false positive rate bloom filter constraint number bits sent compression size array uncompressed form larger 
turns larger sparser bloom filter yield false positive rate smaller number transmitted bits 
alternatively number transmitted bits improve false positive rate find suitable tradeoff 
example table goal obtain small false positive rates transmitted bits element 
compression optimal number hash functions false positive probability broder mitzenmacher network applications bloom filters survey array bits element transmission bits element hash functions false positive probability table 
sixteen bits element compression bigger sparser bloom filter reduce false positive probability 

making sparse bloom filter bits element hash functions compress result bits item high probability decrease false positive probability roughly factor 
historical applications 
dictionaries bloom introduced bloom filters conjunction application hyphenation programs bloom 
words hyphenated appropriately applying simple rules 
words say percent require table lookup 
avoid storing words handled simple rules bloom suggests bloom filter keep dictionary words require lookup 
false positives cause words handled simple rules require lookup 
bloom filters early unix spell checkers mcilroy mullin 
store search dictionary bloom filter representation dictionary stored 
false positive allow misspelled word ignored 
early systems memory scarce valuable resource space savings bloom filter offered significant performance advantages 
bloom filters proposed means succinctly storing dictionary unsuitable passwords security purposes spafford spafford 
manber wu describe simple way extend technique passwords edit distance dictionary word allowed manber wu 
setting false positive force user avoid password lie set unsuitable passwords 

databases bloom filters early uses databases 
speed semi join operations internet mathematics lohman mullin 
example suppose wanted determine employees business live cities cost living greater dollars 
distributed database host hold information regarding cost living hold information regarding employees live 
database send list cities second send bloom filter list 
second host send list potential employee city pairs back database false positives removed 
potential reduce communication hosts 
related vein bloom filters estimate size semi join operations fact bloom filters estimate intersections described section mullin 
bloom filters differential files mullin 
suppose changes database occur day processed batch job 
differential file keeps track changes occur day 
wants read record know record changed transaction differential file case differential file read read directly database 
keeping list records changed keep bloom filter records changed 
false positive forces read differential file database record changed 

sample network application distributed caching survey network applications early especially instructive example bloom filters distributed protocol 
fan cao almeida broder describe summary cache uses bloom filters web cache sharing fan 
setup proxies cooperate way cache proxy attempts determine proxy cache holds desired web page request proxy trying obtain page web 
scheme effective proxies know contents proxy caches 
summary cache reduce message traffic proxies transfer url lists corresponding exact contents caches periodically broadcast bloom filters represent contents cache 
proxy wishes determine proxy page cache checks appropriate bloom filter 
case false positive proxy may request page proxy find proxy page cached 
case additional delay incurred 
broder mitzenmacher network applications bloom filters survey setting false positives false negatives may occur bloom filter cache contents may change periodic updates 
small additional chance false positive introduced sending bloom filter greatly outweighed significant reduction network traffic succinct bloom filter sending full list cache contents 
technique open source web proxy cache squid bloom filters referred cache digests wessels 
cache contents changing frequently fan suggests caches counting bloom filter track cache contents broadcast corresponding standard bloom filter proxies 
alternative construct new bloom filter scratch update sent counting bloom filter reduces amortizes cost 
delta compression compressed bloom filters described mitzenmacher yield reduction number bits transmitted 

applications overlay networks early peer peer application bloom filters due marais bharat marais bharat context desktop web browsing assistant called 
cooperative users store annotations comments web pages visited central repository 
conversely see comments load annotated page 
request url encountered downloads periodically bloom filter corresponding annotated urls 

moderate sized networks constructions peer peer networks distributed hash tables order locate objects druschel rowstron ratnasamy stoica 
distributed hash tables particularly useful large scale scalability coping peer peer networks individual nodes may frequently 
moderate sized robust peer peer systems hundreds nodes bloom filters may provide attractive alternative locating objects distributed hash tables 
keeping list objects stored node peer peer system may prohibitive keeping bloom filter node may tractable 
example bit identifier object bloom filter bits object 
false positives situation yield extraneous requests objects nodes 
prototype system dubbed planetp idea described internet mathematics acuna filters store keywords associated documents object ids 
implementation challenges include frequently filters need updated 
similar approach additional grouping hierarchy described 
idea introduce hierarchy groups nodes governed leader 
leaders meant stable long lasting nodes form peer peer network bloom filters manner similar described bloom filters cover objects held group 
group leader controls routing group group specific issues 

approximate set reconciliation content delivery byers considine mitzenmacher rost byers demonstrate area bloom filters useful peer peer applications 
suggest peers may want solve type approximate set reconciliation problems 
suppose peer set items sa peer set items sb 
peer send peer succinct data structure start sending items items sa sb 
approach send runs elements checking bloom filter sending element lie sb 
false positives elements sa sb sent 
authors consider alternative data structure uses bloom filters allows faster determination elements sa sb difference small byers 
demonstrates bloom filters useful subroutines inside complex data structures 
application byers addresses distribution large files peers overlay networks 
authors argue encoded content 
setting peers may wish collaborate downloads receiving encoded packets peers source effectively increasing download rate 
encoded content large alphabet problem determining encoded packets peer needs peer simply problem determining sa sb 
content redundantly encoded obtaining large fraction sa sb entire set sufficient situation 

set intersection keyword searches reynolds vahdat bloom filters similar fashion byers goal find set intersection set difference broder mitzenmacher network applications bloom filters survey reynolds vahdat 
approach essentially database joins 
peer send bloom filter representing sb peer sends elements sa appear sb filter 
false positives yield elements sa fact sb desired determine elements find sa sb exactly 
bloom filter approach allows sa sb determined fewer bits transmitted sending entire set sa 
reynolds vahdat describe approach set intersection allows efficient distributed inverted keyword indices keyword search overlay network peer peer architecture 
document published author selects set keywords document 
node network responsible set keywords inverted index hashes keyword determine responsible nodes 
handle conjunctive queries involving multiple nodes set intersection methods reduce amount information needs sent determine appropriate documents 

applications resource routing 
basic routing protocol describing specific resource routing protocols literature provide general framework highlights main idea resource routing protocols 
general framework described czerwinski part architecture resource discovery service czerwinski 
suppose network form rooted tree nodes holding resources 
resource requests starting inside tree head root 
node keeps unified list resources holds reachable children individual lists resources child 
node receives request resource checks unified list sure way routing request resource 
checks individual lists find holds resource route passes request tree root 
straightforward routing protocol interesting resource lists represented bloom filters 
property union bloom filters obtained oring corresponding individual bloom filters allows easy creation unified resource lists 
false positives situation may cause routing request go incorrect path 
case backtracking tree may necessary slower safer routing internet mathematics mechanism may back 
papers utilize resource routing mechanism form 

resource routing networks rhea kubiatowicz rhea kubiatowicz utilize ideas basic protocol section design probabilistic routing algorithm peer peer location mechanisms conjunction oceanstore project kubiatowicz 
goal ensure requested file file replica nearby system request routed efficiently shortest path 
routing algorithm suggested specific networks druschel rowstron ratnasamy stoica 
rhea kubiatowicz node network keep array bloom filters adjacent edge overlay topology 
array edge bloom filter distance maximum value dth bloom filter array keeps track files reachable hops overlay network edge 
rhea kubiatowicz call array bloom filters attenuated bloom filter 
attenuated bloom filter finds files hops find shortest path file replica paths exist 
expensive algorithm applied file attenuated bloom filter hops taken suggests false positive occurred 
major challenges approach involve keeping bloom filters date generating network traffic 

geographic routing hsiao suggests type routing geographic routing system mobile computers hsiao 
convenience suppose geographic space square region recursively subdivided smaller squares fourth area previous level 
parent square broken children squares giving natural implicit tree hierarchy 
smallest square subregions side length side length original square levels recursive structure 
geographic routing scheme node contains bloom filter representing list mobile hosts reachable siblings level 
filters source finds level corresponding smallest geographic region currently contains desired destination forwards message center sibling level broder mitzenmacher network applications bloom filters survey contains destination node 
intermediate nodes forward message appropriately recursing implicit tree destination reached 
distributed hashing proposed means accomplishing geographic routing li 
network geographic routing bloom filters suggested possible alternative distributed hashing may prove better systems intermediate size 
exploring understanding tradeoffs techniques certainly interesting area 

applications packet routing area packet routing diverse uses bloom filters proposed 
examine bloom filters aid early detection forwarding loops find heavy scheme potentially speed forwarding multicast packets 

detecting loops whitaker wetherall suggest small bloom filter order avoid forwarding loops unicast multicast protocols whitaker wetherall 
normally packets trapped forwarding loop detected removed counter keeps track number hops packet taken removes number hops grows large 
loops small time live field may prevent substantial unnecessary looping 
loops rare long standing protocols guiding internet traffic today authors suggest problem experimental protocols suggested peer peer networks 
avoid problem authors suggest packet carry small bloom filter header bloom filter keep track set nodes visited 
node corresponding mask ored bloom filter passes filter change may loop 

queue management stochastic fair blue stochastic fair blue provides queue management algorithm uses counting bloom filter detect overly aggressive non responsive flows feng 
idea bloom filters detect flow behavior arises discussion applications bloom filters measurement tools section packet arrival increments counters counting bloom filter example hashes source destination pair packets flow hash internet mathematics counters 
packet processed corresponding counters decremented 
bloom filter entry associated value pi represent marking probability associated counter 
marking probability associated counter goes packet arrives number packets queued system corresponding counter lies threshold similarly packet arrives packets queued system corresponding counter marking probability decreased 
probability packet marked denotes congestion hosts minimum marking probabilities associated bloom filter counters arrival 
flows filling buffer higher probabilities marked 
flows non responsive marking eventually drive marking probability high certain threshold router limit flow fixed amount bandwidth adopt rate limiting policy 
false positive occur situation behaved flow happens hash counters hashed non responsive flows 
case flow punished responds proper fashion 
way mitigate effect suggested feng change hash functions periodically responsive flow punished unfairly resetting hash functions extremely continues punished 

multicast packets sent multicast tree router associates multicast addresses interface lists 
way think multicast address corresponds associated list interfaces connections packet associated multicast address comes interface list associated address forwarded interfaces list 
gr suggests alternative bloom filters gr 
keeping list interfaces address bloom filter addresses associated interface 
packet multicast address arrives interface bloom filters interfaces checked see packets address forwarded interface 
avoids need entirely store addresses router 
parallelization speed check packet interfaces 
handling removal address interface discussed imagine counting bloom filter handle deletions bloom filter accordingly 
broder mitzenmacher network applications bloom filters survey 
applications measurement infrastructure growing problem networks provide reasonable measurement infrastructure 
packets flow pass router 
packet source passed router 
challenge coping questions lies tremendous amounts data processed making complete measurement extremely expensive 
succinctness bloom filters may useful problems examples section illustrate 

recording heavy flows estan varghese excellent application bloom filters traffic measurement problems inside router reminiscent techniques stochastic fair blue algorithm estan varghese 
authors label data structure bloom filter variation clear discussion 
goal easily determine heavy 
hashed 
associated location bloom filter counter records number packet bytes passed router associated location 
counter incremented number bytes packet 
minimum counter associated packet certain threshold corresponding flow placed list heavy flows 
heavy flows detected small amount space small number operations packet 
false positive situation corresponds light flow happens hash locations hashed heavy flows light flow happens hash locations hit light flows 
estan varghese introduce idea conservative update interesting variation reduces false positive rate significantly real data 
updating counter packet arrival clear number previous bytes associated flow packet minimum counters 
call mk 
new packet bytes number bytes associated flow mk updated value counters maximum current value mk adding counter conservative update changes values counters reflect possible bytes associated flow shown example 
reduces probability light flows hashing location raise counter value location threshold 
internet mathematics 
example conservative update 
flow responsible previous bytes introduces new bytes counters increase 

ip traceback wanted trace route packet took network way doing router network record packet forwards 
router queried determine forwarded packet allowing route packet traced backward destination 
scheme allow malicious packets traced back uncorrupted routers order find source 
snoeren suggest approach addition bloom filters order reduce amount information needs stored order summarize set packets seen part source path isolation engine spie snoeren 
false positive setting means router mistakenly identifies packet having seen 
attempting trace back reverse path packet false positive lead branch giving multiple possible paths 
low false positive rate keep branching small number possible paths small 
course scheme practical authors give careful consideration information store discard stale information 

initial version survey broder mitzenmacher significant additional bloom filters 
briefly relevant theoretical expect useful network applications 
cohen matias introduce spectral bloom filters cohen matias estan varghese section extend basic bloom filter construction handle multi sets 
innovations second filter handle elements unique minimum counter filter improve accuracy resulting estimates 
cormode broder mitzenmacher network applications bloom filters survey muthukrishnan devise count min sketch designed handle problems data streams similar estan varghese cormode muthukrishnan 
able provide theoretical guarantees pairwise independent hash functions significant advance pairwise independent hash functions generally easy implement quite efficient practice 
tackles similar problems introduces space code bloom filter utilizes multiple bloom filters maximum likelihood estimation order approximate multisets kumar 
goal motivating variation obtain accurate estimates packet counts flows network router large flows 
chazelle kilian rubinfeld tal chazelle introduce call bloomier filter extends bloom filter handle situations element set associated function value discrete finite set values function value elements universe assumed undefined 
bloomier filter provides appropriate function value element returns value corresponding undefined element elements probability false positive bloomier filter may return incorrect function value 
amply demonstrates remain ways extending bloom filters interesting corresponding theoretical problems 

simple space efficient representation set list handles membership queries 
seen survey numerous networking problems data structure required 
especially space issue bloom filter may excellent alternative keeping explicit list 
drawback bloom filter allows false positives 
effect carefully considered specific application determine impact false positives acceptable 
leads back bloom filter principle list set space effect false positives mitigated 
plenty room develop variants extensions bloom filters specific applications 
example seen counting bloom filter allows approximate representations multi sets dynamic sets change time insertions deletions 
bloom filters internet mathematics starting receive significant attention algorithmic community number results may improvements 
expect burst applications really just 
simplicity power believe bloom filters continue modern network systems new interesting ways 
acknowledgments 
preliminary version survey appeared allerton conference broder mitzenmacher 
authors colleagues anonymous referees pointed related helped improve presentation material 
second author supported part nsf ccr ccr ccr alfred sloan research fellowship 
bloom bloom 
space time tradeoffs hash coding allowable errors communications acm 
broder mitzenmacher broder mitzenmacher 
network applications bloom filters survey proceedings annual allerton conference communication control computing 
cd rom 
coordinated science laboratory department electrical computer engineering university illinois urbana champaign 

hashing methods relational algebra operations proceedings tenth international conference large databases pp 

san francisco morgan kaufmann 
byers byers considine mitzenmacher rost 
informed content delivery adaptive overlay networks acm sigcomm computer communication review proceedings sigcomm conference 
byers byers considine mitzenmacher 
fast approximate reconciliation set differences boston university technical report july 
chazelle chazelle kilian rubinfeld tal 
bloomier filter efficient data structure static support lookup tables proceedings fifteenth annual acm siam symposium discrete algorithms pp 

philadelphia siam 
cohen matias cohen matias 
spectral bloom filters proceedings acm sigmod international conference management data pp 

new york acm press 
cormode muthukrishnan cormode muthukrishnan 
improved data stream summary count min sketch applications latin broder mitzenmacher network applications bloom filters survey theoretical informatics edited farach colton pp 

new york acm press 
acuna acuna martin nguyen 
planetp gossiping build content addressable peer peer information sharing communities rutgers technical report dcs tr 
czerwinski czerwinski zhao hodes joseph katz 
architecture secure service discovery service proceedings fifth annual acm ieee international conference mobile computing networking mobicom pp 

new york acm press 
druschel rowstron druschel rowstron 
storage management caching past large scale persistent peer peer storage utility proceedings eighteenth acm symposium operations systems principles pp 

new york acm press 
ranjan ranjan 
balls bins study negative dependence random structures algorithms 
estan varghese estan varghese 
new directions traffic measurement accounting acm sigcomm computer communication review proceedings sigcomm conference 
fan fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol ieee acm transactions networking 
feng 
feng shin kandlur saha 
stochastic fair blue queue management algorithm enforcing fairness proceedings twentieth annual joint conference ieee computer communications societies infocom volume pp 

los alamitos ca ieee computer society 

designing bloom filter differential file access communications acm 
gr gr 
scalable multicast forwarding available world wide web www acm org sigcomm ccr archive jan ccr sc posters ps 
hsiao hsiao 
geographical region summary service geographical routing mobile computing communications review 
kumar kumar xu li wang 
space code bloom filter efficient traffic flow measurement proceedings acm sigcomm conference internet measurement pp 

new york acm press 
kubiatowicz kubiatowicz bindel eaton chen geels gummadi rhea weimer wells weatherspoon zhao 
oceanstore architecture global scale persistent storage acm sig plan notices 
taylor seltzer 
self organization peer peer systems tenth acm sigops european workshop 
available world wide web www stanford edu candea portals sigops 
internet mathematics li li jannotti de couto karger morris 
scalable location service geographic ad hoc routing proceedings th annual international conference mobile computing networking mobicom pp 

new york acm press 
lohman lohman 
optimizer validation performance evaluation distributed queries proceedings twelfth international conference large databases pp 

san francisco ca morgan kaufmann 
manber wu manber wu 
algorithm approximate membership checking application password security information processing letters 
marais bharat marais bharat 
supporting cooperative personal surfing desktop assistant proceedings th annual acm symposium user interface software technology pp 

new york acm press 
mcilroy mcilroy 
development spelling list ieee transactions communications 
mitzenmacher mitzenmacher 
compressed bloom filters ieee acm transactions networking 
mullin mullin 
second look bloom filters communications acm 
mullin mullin 
tale spelling checkers software practice experience 
mullin mullin 
optimal distributed database systems ieee transactions software engineering 
mullin mullin 
estimating size relational join information systems 
ramakrishna ramakrishna 
practical performance bloom filters parallel free text searching communications acm 
ratnasamy ratnasamy francis handley karp shenker 
scalable content addressable network acm sigcomm computer communication review proceedings sigcomm conference 
reynolds vahdat reynolds vahdat 
efficient peer peer keyword searching middleware acm ifip usenix international middleware conference rio de janeiro brazil june proceedings lecture notes computer science pp 

new york springer 
rhea kubiatowicz rhea kubiatowicz 
probabilistic location routing proceedings st annual joint conference ieee computer communications societies infocom volume pp 

los alamitos ca ieee computer society 
broder mitzenmacher network applications bloom filters survey wessels wessels 
cache digests computer networks isdn systems 
snoeren partridge sanchez jones kent strayer 
hash ip traceback acm sig comm computer communication review proceedings sigcomm conference 
spafford spafford 
opus preventing weak password choices computer security 
stoica stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications acm sigcomm computer communication review proceedings acm sigcomm conference 

join semijoin algorithms multiprocessor database machine acm transactions database systems 
whitaker wetherall whitaker wetherall 
forwarding loops proceedings fifth ieee conference open architectures network programming pp 

los alamitos ca ieee computer society 
hawthorne ny ibm com michael mitzenmacher harvard university division engineering applied sciences cambridge ma eecs harvard edu received april accepted may 
