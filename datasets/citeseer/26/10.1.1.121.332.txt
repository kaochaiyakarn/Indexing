provably secure ubiquitous systems universally composable rfid authentication protocols mike burmester tri van le de medeiros examines anonymous simple rfid identification protocols require ability evaluate hash functions generate random values provably secure byzantine adversaries 
main contribution universally composable security model tuned rfid applications 
making specific setup communication concurrency assumptions realistic rfid application setting arrive model guarantees strong security availability properties permitting design practical rfid protocols 
show protocols provably secure new security model 
proofs employ random oracles protocols shown secure standard model assumption existence pseudo random function families 
radio frequency identification devices initially developed small electronic hardware components having main function broadcast unique identifying number request 
simplest types passive tags contain power source incapable autonomous activity 
devices powered reader radio waves antenna doubles source inductive power 
low cost high convenience value give potential research supported national science foundation ccr ani 
florida state university department computer science fl mail burmester cs edu massive deployment expected soon outnumber computing device types 
consequently increasingly applications interface information security functions 
challenging platform information assurance standpoint 
extremely limited computational capabilities imply traditional distributed multiparty computation techniques securing communication protocols feasible lightweight approaches considered 
privacy security requirements rfid applications quite significant 
ultimately accomplished rigorous view security types applications 
goal consider anonymous authentication protocols secure rfid applications provably secure strong adversarial model remain secure universal composition arbitrary applications 
computationally lightweight consideration hardware imposed constraints platform 
scalable large volume devices 
uc security 
universal composability uc framework specifies particular approach security proofs guarantees proofs follow approach remain valid protocol composed modularity arbitrary concurrent protocol executions including 
honest party honest party honest party corrupt party corrupt party uc framework defines real world simulation ideal world simulation emulation translates runs real world ideal world interactive environment captures external current protocol execution 
ideal world communications parties ideal functionality 
security follows cryptographic properties protocol channels honest parties ideal functionality absolutely secure functionality ensures desirable system behavior 
security ideal world depend cryptographic assumptions properties protocols ideal world concurrent compositionally secure 
real world trusted party honest parties communicate specified protocol rules 
adversary restricted computational bounds probabilistic polynomial time deviate protocol specification way corrupt multiple parties coordinate malicious behavior adversary interact environment arbitrarily particular capable manipulating communication channels 
uc security necessary show adversaries environment distinguish real world protocol execution ideal world emulation presence adversary distinguishing capability break specific cryptographic assumptions 
main feature uc framework uc security composite system derived uc security components need holistic re assessment 
uc security 
section argue universally composable security needed context rfid applications 
efficient emulation real protocol runs ideal world honest party honest party honest party fig 

architecture uc security proofs 
corrupt party corrupt party illustrate examples rfid authentication protocols provably secure restricted models fail provide adequate security realistic attacks 
example hb variant hb protocol introduced 
hb protocol shown secure passive adversaries reduction learning parity noise lpn problem 
achieve security active adversaries hb protocol adapted include challenges readers tags leading hb protocol proven secure active adversaries simplified model adversary malicious reader attacking single honest tag 
proof generalized parallel concurrent setting showing techniques original security proof necessary 
security results established simple attack model held providing evidence scheme secure practical applications adversary may communicate readers tags simultaneously 
man middle attacks exist result total protocol break 
second example new scheme named ya trap uses timestamps 
pointed tsudik adversarial reader may provide time current timestamp causing tag fully temporarily 
describe solution addresses issue additional computational burden tag extra bandwidth requirements solving open problem posed tsudik 
furthermore related issues captured directly security model availability requirement rfid protocols described section iii 
examples provide evidence comprehensive security models relevant context rfid applications 
compelling argument uc model offer basic functionalities components complex systems possibly ubiquitous 
uc security model allows modular approach design protocols pre designed shelf components 
formulate protocol security terms indistinguishability real ideal protocol simulations 
formalism informally proposed goldwasser properly specified beaver 
canetti consider computationally bounded adversaries setting establishing universal composability framework 
formal modeling real vs ideal simulations increasingly analysis cryptographic protocols including authentication key exchange zero knowledge proofs universe cryptographic primitives :10.1.1.112.1891
rfid privacy oriented protocol proven secure strong real ideal setting 
contribution universally composable security model rfid applications described section iii provides availability authentication anonymity guarantees 
model accommodates analysis practical protocols trap ya trap described sections ii respectively 
security proof trap proposed uc type security framework section iv 
security proof ya trap similarly constructed included sake brevity 
discussions security properties protocols trap ya trap accommodate kill keys avoiding vulnerability side channel attacks section ii 
trap optimistic secure anonymous rfid authentication protocol protocol describe referred trap stands optimistic trivial fid authentication protocol 
protocol optimistic sense security overhead minimal adversary passive eavesdropper inactive 
rfid authentication system components tags ti readers rj trusted server tags wireless transponders power respond electromagnetic field 
readers transceivers generate fields wirelessly transmit challenges tags 
readers may issue types challenges multicast unicast 
multicast challenges addressed tags range reader unicast challenges addressed specific tags 
protocols consider types challenges 
note multicast challenges just random strings tags range reader rj challenged random string communication efficient multiple unicast challenges 
server periodically updates value common random challenge 
period tag may authenticated 
shall assume honest tags ti adhere system specifications requirements authentication protocol 
applies honest readers rj trusted server tags issued individual private keys ki share trusted server keys tags authentication 
denote set authorised keys set keys issued loss generality may assume keys chosen random security parameter 
rfid authentication protocols shall assume honest readers rj server linked secure communication channel reliable authenticated 
protocol description describe trap pass optimistic protocol authenticates rfid tags anonymously 
shows protocol messages authentication checks performed 
fig 

trap 

sends rj broadcasts sys 
ti rj ri hki rt sys ri ti updates ri hk ri accepts ti ti ki ri ki hk sys ri ki hk sys ri 
updates rk hk ri lookup table fig 

protocol reader rj broadcasts random string sys obtained server updated regular intervals 
tag ti containing key ki range rj uses sys combine locally generated string ri sends broadcasts reader rj ri hki sys ri 
require step reader broadcasts challenge tags 
cheaper regular communication pass 
hk pseudo random function prf family keyed hash function 
ti computes value local string ri computing pseudo random function previous value stored locally 
server updates value ri local key lookup table see fig 

fig 

key lookup table strings rn keys kn table value ri sent ti find corresponding key ki check value hki rt sys ri 
tag ti challenged unauthorised reader value correct 
case cost tag server prfs computations 
tag interacted malicious reader stored values sync 
exhaustively search keys find correct value resynchronize 
note presence active attacks extra computational cost borne server tag 
follows show trap strong authentication protocol provably hides identity tags eavesdroppers malicious readers requiring tag perform expensive public key operations 
cases tag needs compute prfs authenticate 
case passive adversary protocol cost trusted server 
theorem trap guarantees availability anonymity secure authentication security framework defined section iii assumption keyed hash function chosen pseudo random function family hk best knowledge anonymous strong rfid authentication protocol shown secure comprehensive adversarial model 
iii 
security model section formalize security definitions rfid protocols 
model largely follows existing paradigms security general purpose network protocols specific context rfid applications aspects 
consider availability explicitly capturing security unauthorized disabling tags directly model 
secondly restrict concurrency prohibiting tags executing session time 
note restriction individual honest tags honest tags executing concurrently 
addition readers honest corrupt trusted server dishonest tags execute multiple sessions simultaneously 
requirement single honest tag participate session time facilitates design concurrently secure protocols 
restriction mild accordance capabilities rfid technology beneficial enables designers security protocols concentrate crucial security aspects balance competing interests requirements low computational cost low memory utilization 
proof structure proof consists stages 
provide mathematical description real protocol executions 
protocol runs model called real world simulations 
describe idealized protocol model honest parties access trusted party ideal functionality emulation translates real world protocol runs ideal world ones 
security ideal world readily seen follow behavior ideal functionality simulations 
show security real world proving environment distinguish real ideal world simulations adversary 
adversaries allowed schedule actions honest parties eavesdrop communications interact environment arbitrary manner byzantine adversaries 
simulations initialization honest parties real ideal honest parties initialized follows 
trusted server symbolized oracle os creates database keys ki 
choosing keys random security parameter poly 
consider dynamic corruption tags plan consider issue impact forward secrecy requirements full version 
adversary initialized subset valid keys 
kn keys correspond honest tags 
real world simulations adversary interacts honest tag ti accessing oracle oi models behavior honest tag corresponding key ki 
initialization requires special type oracle oi call ambivalent 
key ambivalent oracle oi selected randomly ki kj equal probability 
role ambivalent oracles soon clear 
simulation starts tag oracle ambivalent oracle independently initializes values ri ri random 
server os generates random value sys broadcast readers challenge tags server period simply period 
subsequently adversary may cause new periods commence telling os refresh value sys new random value counts periods completed current 
real simulation model adversary 
internally represent adversarial tags compromised valid keys invalid keys dishonest readers represent single party real simulation adversary access oracles oi interact calls specified 
shall refer interactions conversations 
crucial uc approach notion simulation environment maintains notion time require synchronized clocks needs discern adversarial actions precede adversarial actions 
describe types calls adversary tag oracles ambivalent oracles real protocol simulation oracle responses 
refresh called cause new server period 
os increments period counter generates new random value sys 
value broadcast honest readers challenge tags server period call refresh occurs 
send oi responds pair ri hki ri updates ri hki ri 
send oi responds pair ri hk ri key oi updates ri hk ri 
send os parses string consults lookup table entry type ki 
entry os checks hki rt sys replying indicating authentication success equality holds 
match check fails os searches key database ki hki sys 
key ki replies 
os privately outputs identity tag authentication successful key ki outputs 
output observed environment role identity ambivalent oracles ambivalent oracles oi enable interact parties identity possible choices 
ambivalent oracles attacks anonymity objective determine oi represents oi oj 
rules engagement adversary engage arbitrary concurrent conversations oracles communication session subject concurrency constraints tag ti adversary send call server period send send calls combined period different reason constraints allow single tags execute concurrently period want may disambiguate ambivalent oracles simply basis availability conflicts 
security definitions formally define security goals anonymous authentication protocols 
availability holds efficient adversary course simulation non negligible probability preventing tag ti authenticating reader rj session ses changing ti interaction rj session 
remain true interacted ti arbitrarily past attempting force inconsistent state 
note allowed interact honesty parties including reader rj ses 
advantage adv ti game av lb ti maximum probability rejects ti session adv ti av lb rob rejects ti ses relays oi rj ses adv av lb defined maximum ti av lb honest tags ti session 
important concern regard management kill process reader instruct rfid tag disable functionality permanently 
current methods disabling epc tags shown allow attacker perform power analysis recovery kill key 
attacks violate definition availability 
protocols adapted support kill key guaranteeing availability discussed section authentication holds efficient adversary simulation succeeds non negligible probability authenticating honest reader rj session ses server believes authenticated tag ti ses duration interval session ses disjoint duration intervals sessions oracle oi ambivalent oracle oi initialized oi 
note definition required know identity ti succeeded authenticating 
furthermore accommodates man middle attacks long attack leads acquiring knowledge keys subsequent authentication attempts ruling scenarios adversary simply relays messages honest parties successful attacks 
advantage adv ti auth adversary authentication simply probability succeeds 
adv ti auth rob authenticates ti ses ses sessions oi index honest user 
advantage tags ti 
adv auth maximum ti auth anonymity holds efficient adversary better chances time simulation outputting triple bit oi oj 
advantage adversary distinguishing ti tj adv anon defined difference winning losing probabilities adversarial guess bit equals adv anon rob oi oj rob oi oi adversarial advantage anonymity anon maximum adv anon pairs unified framework adversary need identify particular point simulation security property seeks defeat 
may weigh knowledge adjust strategy simulation maximize success violating security requirements 
ideal simulation recall number server periods counter period ideal functionality maintains database messages generated honest tags 
ideal simulation honest parties represented ideal functionality describe behavior interactions oracles ideal adversary sa uc framework ideal adversary sa reproduces actions real world 
cases consider depending messages sa sends initialization identical real world simulations 
refresh sa causes start new period generating fresh random value sys sending sys sa 
resets database empty start period 
send generates new random value returns sa 
sys stores pair database 
send generates random value returned sa sys stores pair database 
send checks exists pair pair database 
replies sa bit value 
parses string key ki 
checks ki sys 
match replies sa 
authentication successful returned key ki computes os private output rules engagement ideal simulation real simulation 
security ideal simulation availability ideal adversary sa call send period value returned result call send sys returns 
authentication returns ideal adversary sa call send period computed ki sys ki adversary controlled key value produced honest tag response call send sys sa 
anonymity obvious values returned honest parties generated independently random ideal adversary able distinguish parties checking simultaneous unavailability availability 
rules preventing concurrent execution ambivalent oracles tag oracles designed prevent 
iv 
security reduction trap prove theorem constructing real adversary ideal adversary sa probabilistic polynomial time environment distinguish execution sa ideal world execution real world 
accomplish emulating oracle calls oi real world simulation identically named calls sa ideal world 
show distinguish values returned ideal simulation form values returned oracles real world simulation 
note refresh calls identical observable effects real ideal worlds 
send call real world results oi returning pair ki new pseudorandom value generated oi 
send call sa ideal world results true random pair length returned 
pairs indistinguishable key ki due pseudorandomness function family send call real world results value returned parsed ki sys ki 
distinguish subcases honest tags adversarial tags 
send call sa ideal world results entry type database parsed ki sys ki consider cases outcomes sa differ argue happen negligible probability 
note cases correspond exactly 
suppose case occurs real world occur ideal world 
case able compute authentication value ki sys obtaining oracle call oi oi occur ideal world 
may happen negligible probability key ki function family assumed pseudo random 
secondly happens ideal world happening real world follows real world computation result valid authentication value real world happens reproduce correct value executed sa ideal world 
ideal world values chosen truly random happen negligible probability 
follows correspond overwhelming probability 
authentication outcomes identical sa authenticated identities output os real ideal worlds differ 
clearly happens identities corresponding honest party imply collision outputs independent pseudo random functions causing identity mismatch real world pseudorandom function matched random value chosen causing identity mismatch ideal world 
cases happen negligible probability 
extensions section describe pass optimistic rfid authentication protocol addresses drawbacks authentication protocols :10.1.1.58.476
protocol extension ya trap trivial authentication protocol proposed tsudik 
discuss accommodate kill keys trap ya trap introducing side channel vulnerabilities 
ya trap describe optimistic extension ya trap ya trap addresses availability 
extension includes extra optional pass deal large scale dos attacks 
step tag authenticated second optional step server authenticates timestamp 
protocol 
fig 

ya trap 
sends rj broadcasts sys 

ti rj ri hk sys ti 
ri hk ri sys ti 

rj ti ri hk ri optional 
ti sets ti ti 

accepts ti authentic sys ri sys 

ri ti sets ti optional pass optional server time period number attacks occur certain threshold server resynchronize correct timestamp tags 
optional pass tags time period identity information revealed 
period server may return normal authentication 
scheme resistant dos efficient ya trap protocol 
obtain new result ya trap proof provided full version theorem ya trap guarantees availability anonymity secure authentication security framework defined section iii assumption keyed hash function chosen pseudo random function family hk vi 
research kill keys trap ya trap may extended accommodate kill keys 
case ya trap disabling mechanism simple 
server executes authentication protocol max known executes extra optional step 
tag accepts valid disabled 
note tag update time non authenticated value max disabled 
accomplish trap protocol modified tag ti initialized keys authentication tag ki kill key ki computed ki hki fi value fi stored disable ti sends special command kill 
tag computes hki matches stored ki tag disabled 

corruption tags forward secrecy addressed having tags trusted server update long term private keys 
case tag trusted server mutually authenticated having extra pass 
extending uc security model express issues forward security presence key compromise challenging 
plan address important issue 
timing attacks security model tags trusted server take exactly computation step sending receiving authentication data 
secure implementation reflect semantic 
particular time taken pass constant 
done inserting artificial delay trusted server 
effect throughput workload server objective scalable optimistic protocols 
vii 
new universally composable framework study security rfid authentication protocols 
optimistic anonymous rfid authentication protocols trap ya trap proven secure new framework 
addition propose extensions protocols provide access controlled tag disabling kill keys way tolerates side channel attacks 
plan formally examine possibility extending security model examine forward security dos resilience effects tag capture incorporate specific descriptions side channel information leakage 
juels weis authenticating pervasive devices human protocols proc 
advances cryptology crypto ser 
lncs vol 

springer 
hopper blum secure human identification protocols proc 
advances asiacrypt ser 
lncs vol 

springer 
katz shin parallel concurrent security hb hb protocols proc 
advances euro crypt ser 
lncs 
springer 
gilbert sibert active attack hb provably secure lightweight authentication protocol international association research tech 
rep 
online 
available eprint iacr org pdf tsudik ya trap trivial rfid authentication protocol proc 
ieee intern 
conf 
pervasive computing communications percom 
ieee press 
goldreich micali play mental game th symposium theory computing stoc 
acm press pp 

beaver goldwasser multiparty computation faulty majority proc 
advances cryptology crypto ser 
lncs vol 

springer pp 

beaver secure multi party protocols zero knowledge proof systems tolerating faulty minority journal cryptology vol 
pp 

foundations secure interactive computing proc 
advances cryptology crypto ser 
lncs vol 

springer pp 

canetti studies secure multiparty computation application ph dissertation weizmann institute science rehovot israel june 
security composition multi party cryptographic protocols journal cryptology vol 
pp 

universally composable security new paradigm cryptographic protocols proc 
ieee symp 
foundations computer science focs 
ieee press pp 

canetti krawczyk universally composable notions key exchange secure channels extended proc :10.1.1.112.1891
advances eurocrypt ser 
lncs vol 

springer 
ller universally composable key exchange proc 
european symp 
research computer security esorics ser 
lncs vol 

springer pp 

canetti herzog universally composable symbolic analysis cryptographic protocols case encryption mutual authentication key exchange international association research tech 
rep print report 
online 
available eprint iacr org canetti fischlin universally composable commitments extended proc 
advances cryptology crypto ser 
lncs vol 

springer 
canetti lindell ostrovsky sahai universally composable party multi party secure computation proc 
acm symp 
theory computing stoc vol 

acm press pp 

laud formal analysis crypto protocols secrecy types simulatable cryptographic library proc 
acm conf 
computer communication security acm ccs 
acm press pp 

ateniese camenisch de medeiros untraceable rfid tags encryption proc 
acm conf 
computer communication security acm ccs 
acm press pp 

goldreich foundations cryptography 
cambridge university press vol 

oren shamir power analysis rfid tags invited talk rsa conference cryptographer track rsa ct 
available www wisdom weizmann ac il rfid 
scalable provably secure hash rfid protocol proc 
ieee international workshop pervasive computing communication security 
ieee computer society press 
lightweight rfid protocol protect traceability cloning attacks proc 
ieee intern 
conf 
security privacy communication networks 
ieee press 
secure efficient rfid protocol big brother obsolete proc 
intern 
conf 
pervasive computing communications percom 
ieee press 
buttyan lightweight authentication protocols low cost rfid tags proc :10.1.1.58.476
workshop security ubiquitous computing ubicomp 

