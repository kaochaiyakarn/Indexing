simple verification technique complex java bytecode subroutines alessandro coglio kestrel institute avenue palo alto ca usa ph 
fax www kestrel edu coglio coglio kestrel edu 
java normally compiled bytecode verified executed java virtual machine 
bytecode produced compilation pass verification 
main cause complexity bytecode verification subroutines compilers generate compact code 
techniques verify subroutines proposed literature reject certain programs produced mundane compilers difficult realize implementation java virtual machine 
presents novel technique simple understand implement prove sound 
powerful set accepted programs simple characterization includes code current compilers enables compilers extensive subroutines 
java bytecode java normally compiled platform independent bytecode language executed java virtual machine jvm 
bytecode language features intra method subroutines java compilers generate compact code sect 

idealized version java bytecode similar program list instructions 
positions list starting addresses instructions operate values stored finite collection named variables stack bounded size 
values integers floats addresses values carry explicit type tags integer zero float zero 
instance div instruction pops integers stack pushes back quotient formalized rule pi div hi vr sk delta delta ii hi vr sk delta div fi dv triple hi vr sk delta delta ii execution state program counter address instruction executed variable contains value vr vr maps variable names values stack consists integers top possibly empty sub stack sk rule says current instruction div program counter advanced integers popped float div pushed simplicity defined divisor 
subroutines realized jsr ret instructions pi jsr max hi vr sk hs vr sk delta ici js pi ret vr cc hi vr sk hc vr sk rt pushes calling address jumps subroutine address provided room stack size limit max 
jumps successor calling address stored variable 
instructions move values variables stack 
explicit notion subroutine textually delimited piece code jsr ret may scattered compilers usually produce code address range subroutine clearly identifiable certain java programs result bytecode subroutines exited implicitly branching exceptions see sect 
example making determination boundaries difficult 
rules include type safety checks ensuring values operated required types stack overflow underflow occurs 
checks fail explicit error state reached pi halt vr sk hi vr sk hi vr sk hi vr sk err er condition requires current instruction halt halt causes graceful program termination 
second condition requires normal state reachable rules happens type safety checks rule current instruction violated 
typical implementations jvm perform type safety checks performance reasons 
outcome operating values wrong types undefined sect 
err corresponds undefined state jvm implementation move 
notion type safety typesafe init err transitive closure init initial state characterized program counter variable empty stack 
verification security reasons jvm verifies incoming code prior executing 
goal verification statically establish certain type safety checks integers top stack div reached succeed performed run time execution engine safely omit 
compilers check equivalent properties java source code produced compilation pass verification 
requirement easy assess currently precise characterization output java compilers furthermore susceptible change compilers evolve 
advocated solution precise characterization set bytecode programs contract compiler developers jvm developers shall write compilers programs belong set shall write bytecode verifiers accept program belonging set :10.1.1.22.1261
complexity subroutines subroutines main cause complexity bytecode verification 
simple technique described sect 
works beautifully 
order accept code produced mundane compilers elaborate analysis needed 
explained sect 
variable may different types say int flt different calling addresses subroutine 
inside subroutine type result merging int flt 
modified inside subroutine type int flt 
simple minded data flow analysis blindly propagate causing mundane programs rejected 
sun technique verify subroutines informally described sect 
implemented keeps track data flow analysis variables modified inside subroutines 
modified type propagated ret 
thorough study sun approach problems ways fix 
bottom line works simpler programs rejects simple programs produced mundane compilers see sect 
example 
technique definition new technique data flow analysis key ideas merging different types keep calling addresses types 
int flt type cac calling address type 
lattice hl ti data flow analysis result adjoining top element fail lattice hp powerset operator set pairs sti vt map assigning type variable name st list types stack length max 
analysis address labeled set pairs fail 
join operation merge lattice elements converging control paths result merging sets pairs simply union merging fail yields fail 
instruction halt transfer function tf instance div tf div lift sti st st delta int delta int st delta fail higher order function lift 
defined lift fail sti vt st fail ff vt st sti lg fail argument lift definition tf div function maps pair sti pair st delta st st delta int delta int fail corresponds rule dv sect 

function lifted operate element wise set pairs yields fail pair result fail result set resulting pairs 
transfer function jsr operates set pairs element wise tf jsr lift sti max st delta fail transfer function parameterized calling address jsr appears 
pushes cac type stack see rule js 
transfer function operate element wise ret parameterized variable calling address tf ret fail sti vt cac sti vt fail filters set pairs respect pairs cac assigned kept discarded 
parameter determined address result tf ret propagated 
pair set assign calling address type transfer function yields fail 
see rule rt 
finite transfer functions monotone data flow analysis converges solution oe assigns oei address notion verification verified oei fail oei fail run time reached pair sti oei containing types values variables stack 
example solution shown fig 

instructions previously described push pushes stack increments integer top stack load pushes value stored store pi sti vti vti push int int push int int int div int int int int store flt int int jsr flt int push flt ca store int flt ca jsr int ca load int ca int int ca halt int int ca store ca ca flt int int ca ret flt int ca ca fig 

example solution 
moves top value stack addresses labeled pair types shown appropriate columns 
addresses labeled pairs improved readability types spread columns pair consists types left symbols pair consists types right 
technique simple understand implement 
attempt determine subroutine boundaries variables modified inside subroutines 
unstructured nature reflects possibly unstructured occurrences jsr ret programs 
treatment jsr ret simple run time behavior described rules js rt 
properties data flow analysis explores paths simulating execution type level 
type safe fail appear solution 
theorem soundness 
verified typesafe type safe programs rejected technique 
reason instruction pops integer stack jumps target address integer execution continues address 
program contains push immediately followed instruction reached 
data flow analysis insensitive actual value integer encountered just int 
followed instructions performing type unsafe operations program rejected 
consider integer insensitive operational semantics extends allowing execution non deterministically transfer control target address regardless value popped integer 
notion integer insensitive type safety defined sect 
replaced theorem characterization 
verified typesafe rightward implication proved analogously theorem 
leftward implication proved constructing assignment fl lattice elements addresses follows fli set pairs sti containing types execution state hi vr sk reachable init integer insensitive operational semantics 
construction fli fail 
shown fl solution data flow analysis fail appear solution oe oei fli 
matter fact shown fl oe 
theorem provides simple precise characterization programs accepted technique usable contract mentioned sect 

technique powerful sense accepts large set programs 
date bytecode program generated compiler satisfy characterization 
compilers quite expect bytecode verifiers integer sensitive full java bytecode notion insensitivity extended integers null features reasons believe characterization includes code current compilers 
addition may enable compilers elaborate subroutines order generate compact code 
technique refined accept type safe programs refining int type type possibly non zero integers refining transfer functions push accordingly refinements add complexity invalidate theorem 
addition benefit dubious example sensible compiler generate program push immediately followed 
considerations support informal argument technique embodies optimal trade power simplicity 
implementation need carry sets pairs data flow analysis arises order separate ret instruction 
singleton sets merged contain calling addresses variable stack element pairs separated merged single pair re introducing type 
words hybrid merging strategy pairs separated merged pair kept distinct different calling addresses corresponding positions 
program subroutines sets singletons analysis essentially reduces sect 

experimental measures suggest current compilers generate code infrequent subroutines 
presence subroutines sets pairs fairly small 
related point comparison techniques consider java code fig 
adapted fig 

variable contains undefined value method definitely assigned value return 
definite assignment part type safety checked bytecode verification jvm 
bytecode naturally produced fig 
accepted new technique shown fig 
real java bytecode instructions abstractions chap 
exception handler try block sect 
omitted variables denoted names numbers type udf indicates variable contains undefined value 
point comparison consider java code fig 
adapted fig 

continue inside block executed transfers control loop 
bytecode naturally produced fig 
accepted new technique shown fig 

note subroutine address range exited implicitly ret address realizing semantics continue 
sun technique rejects code fig 
types int udf merged udf inside subroutine sun technique udf coincides 
may modified address udf propagated address eventually iload causes verification fail requires int 
formal techniques proposed literature reject code fig 
inaccurately assign udf inside subroutine propagate caller successor similarly sun technique 
remaining formal techniques comparable power new technique straightforward realize jvm implementation data flow analysis :10.1.1.2.4230
declarative rules type assignments easy check easy compute type assignments satisfy rules 
model checker haskell type checker viable line verification problematic realize jvm :10.1.1.2.4230
exist commercial academic implementations jvm include bytecode verifiers documentation readily available treatment subroutines 
sect 
reports code fig 
rejected verifiers tried authors including various versions netscape internet explorer verifier 
probably verifiers employ official approach subroutines described sect 

static int boolean int try return return fig 

type safe java code rejected techniques verifiers 
pi sti vti vti vti vti iload int udf udf udf ifeq int int udf udf udf iconst int udf udf udf store int int udf udf udf jsr int udf int udf iload int int udf int int int ca ca ireturn int int int int udf int int int ca ca iconst int udf udf udf istore int int udf udf udf jsr int int udf udf goto int int udf ca astore ca ca int int udf int int udf udf udf iload int int udf int int udf ca ca ifeq int int int int udf int int udf ca ca iconst int int udf int int udf ca ca istore int int int int udf int int udf ca ca ret int int int udf int int int int udf ca ca ca iload int int udf ca ireturn int int int udf ca fig 

successful verification bytecode fig 

static void boolean try false continue fig 

type safe java code rejected techniques verifiers 
pi sti vti vti goto int udf iconst int int udf ca istore int int int int udf ca jsr int int udf ca goto int ca astore ca ca int int udf ca iload int ca ifeq int int ca goto int ca ret int ca iload int int udf ca int int int int udf ca return int int udf ca fig 

successful verification bytecode fig 

card verifier developed trusted logic uses polyvariant data flow analysis subroutines analyzes different contexts different callers :10.1.1.29.892
contexts include subroutine call stacks extended jsr shrunk ret 
code fig 
accepted code fig 
rejected 
apparently verifier includes checks nonrecursive calls subroutines prescribed sect 
path subroutine back address propagates call stack subroutine address false recursive call detected 
matter fact technique proposed includes subroutine call stacks non recursion checks cause rejection code fig :10.1.1.2.4230

easily removed technique 
evidenced new technique recursive subroutine calls harmless type safety 
prescription sect 
prohibiting recursive subroutine calls unnecessary misleading manifested examples 
interestingly sun verifier accepts code fig 
merges subroutine call stacks computing common sub stacks address non empty stack merged empty stack resulting empty stack propagated back eventually false recursion detected 
part ovm project christian independently implemented verifier treatment subroutines new technique 
trusted logic terminal verifier jeff file format independently implemented alexandre frey treats subroutines way verifier space time efficient demonstrating practicality technique 
publication formalizes proves properties approach subroutines 
alternatives direct subroutine verification subroutine lining variable splitting 
possibly unstructured jsr ret determining subroutine boundaries lining variable usage splitting may require non trivial analysis code 
unclear bytecode rewriting followed simpler technique sect 
altogether simpler faster new technique original bytecode 
short version comprehensive topic subroutines :10.1.1.124.6884
new technique lifted complete formalization java bytecode verification specware system formally derive bytecode verifier formalization 

ole agesen david detlefs eliot moss 
garbage collection local variable type precision liveness java virtual machines 
proc 
acm conference programming language design implementation pldi volume number acm sigplan notices pages june 

ken arnold james gosling david holmes 
programming language 
addison wesley third edition 

alessandro coglio 
improving official specification java bytecode verification 
proc 
rd ecoop workshop formal techniques java programs june 

alessandro coglio 
simple verification technique complex java bytecode subroutines 
technical report kestrel institute december 
revised may 
available www kestrel edu java 

alessandro coglio 
java bytecode subroutines 
technical report kestrel institute 
forthcoming www kestrel edu java 

alessandro coglio 
java bytecode verification complete formalization 
technical report kestrel institute 
forthcoming www kestrel edu java 

stephen freund 
costs benefits java bytecode subroutines 
proc 
oopsla workshop formal underpinnings java october 

stephen freund john mitchell 
type system java bytecode subroutines exceptions 
technical note stan cs tn computer science department stanford university august 

alexandre frey 
private communication may 

li gong 
inside platform security 
addison wesley 

james gosling bill joy guy steele gilad bracha 
language specification 
addison wesley second edition 

christian 
private communication june 

hagiya 
new method dataflow analysis java virtual machine subroutines 
proc 
th static analysis symposium sas volume lecture notes computer science pages 
springer september 

consortium 
jeff tm file format 
available www consortium org 

kestrel institute 
specware tm information www specware org 

project web site 
cs washington edu 

xavier leroy 
java bytecode verification overview 
proc 
th conference computer aided verification cav volume lecture notes computer science pages 
springer july 

tim lindholm frank yellin 
virtual machine specification 
addison wesley second edition 

flemming nielson hanne riis nielson chris hankin 
principles program analysis 
springer verlag berlin 

robert callahan 
simple comprehensive type system java bytecode subroutines 
proc 
th acm symposium principles programming languages popl pages january 

ovm project web site 
org 

joachim posegga harald vogt 
java bytecode verification model checking 
proc 
oopsla workshop formal underpinnings java october 

qian 
formal specification java virtual machine instructions objects methods subroutines 
jim alves foss editor formal syntax semantics java volume lecture notes computer science pages 
springer 

robert st ark joachim schmid egon 
java java virtual machine definition verification validation 
springer 

raymie stata mart abadi 
type system java bytecode subroutines 
acm transactions programming languages systems toplas january 

sun microsystems 
java sdk standard edition version 
available java sun com se 

sun microsystems 
java card development kit version 
available java sun com javacard 

sun microsystems 
connected limited device configuration specification version may 
available java sun com 

trusted logic 
tl embedded verifier 
information www fr solution tl embedded verifier html 

phillip 
compositional account java virtual machine 
proc 
th acm symposium principles programming languages popl pages january 

frank yellin 
low level security java 
proc 
th international world wide web conference pages 
reilly associates december 
available java sun com verifier html 

