appears proceedings aaai july madison wi 
okbc programmatic foundation knowledge base interoperability vinay chaudhri sri international ravenswood avenue menlo park ca vinay ai sri com richard fikes knowledge systems laboratory stanford university stanford ca kes ksl stanford edu technology building large knowledge bases kbs witness breakthrough kb constructed assembly prefabricated knowledge components 
knowledge components include pieces domain knowledge example theories economics fault diagnosis kb tools example editors theorem provers 
current kb development tools manipulate knowledge residing knowledge representation system krs tools originally developed 
open knowledge base connectivity okbc application programming interface accessing krss developed enable construction reusable kb tools 
okbc improves predecessor generic frame protocol gfp signi cant ways 
okbc larger range systems knowledge model supports assertional view krs 
okbc provides explicit treatment frames better way controlling inference specifying default values 
okbc practically platform supports network transparency implementations multiple programming languages 
discuss technical design issues faced development okbc highlight okbc improves gfp report practical experiences 
construction new knowledge base kb signi cant productivity gains obtained reusing existing knowledge components 
components include pieces domain knowledge example theories economics fault diagnosis kb development tools example editors theorem provers 
support reuse domain knowledge knowledge copyright american association arti cial intelligence www aaai org 
rights reserved 
okbc implementations lisp java may obtained ontolingua stanford edu okbc 
done author sri international 
peter karp systems campbell ave menlo park ca com adam farquhar knowledge systems laboratory stanford university stanford ca ksl stanford edu james rice knowledge systems laboratory stanford university stanford ca rice ksl stanford edu sharing community undertaken various orts including development shared portable ontologies farquhar fikes rice development de ned languages knowledge interchange genesereth fikes 
emphasis reuse kb development tools 
signi cant amount ort invested building customized tools speci knowledge representation systems krss 
tools single krs development ort wasted krs longer 
krs developer usually choice shelf tools forced develop tools 
open knowledge base connectivity okbc application programming interface api krss developed address problem kb tools reusability 
name okbc chosen analogous odbc open database connectivity database community geiger 
api speci es operations access system application program 
specifying api krs assumptions representation krs 
assumptions explicit okbc knowledge model 
restrictive enforce semantics operations api krss okbc supports behaviors allow di erences krss 
behaviors tool achieve exibility specifying okbc operations 
okbc speci cation consists components knowledge model collection operations access krs collection behaviors 
krs bound okbc de ning mapping okbc native api krs 
achieve interoperability kb tool accesses krs okbc operations 
tool isolated peculiarities krs krs bound okbc 
interoperability achieved okbc level okbc knowledge model 
example okbc knowledge model de nes concept class interpretation okbc bindings 
okbc appears proceedings aaai july madison wi 
guarantee particular class person de ned kbs residing di erent krss represents identical concepts 
okbc successor generic frame protocol gfp karp myers gruber improves gfp signi cant ways 
okbc supports larger class krss knowledge model includes assertional view krs provides explicit treatment frames better way inference specifying default values 
second okbc practically platform substantially larger range applications supports network transparency multiple programming languages remote procedure language 
drawn design experience okbc 
expressiveness vs generality tradeo emerged 
expressiveness knowledge model controlled range krss 
knowledge model expressive di cult de ne okbc bindings systems limited representational power 
knowledge model insu ciently expressive okbc bindings systems representational power expose capabilities 
second protocol augmented features support variability krss additional returned values behaviors 
feasible certain requirements krss expose di erence globally setting value behavior locally returning additional value operation 
devoted discussion technical issues faced design okbc 
intended comprehensive description okbc may chaudhri rice farquhar 
organized major classes enhancement okbc expanding range supported krss expanding range supported applications 
discuss practical experiences okbc 
okbc knowledge model okbc knowledge model designed include representational features supported krss karp 
includes constants frames slots facets classes individuals knowledge bases 
classes individuals form disjoint partitions kb see 
class de ned set entities 
entities class said instance class 
individual entity set 
entity associated collection slots 
slots describe direct properties entity 
example age fred age slot fred 
slots values inherited 
class associated collection template slots 
template slots describe properties instances class slots class describe properties class 
template slots classes facets individuals frames slots okbc knowledge model de nes classes individuals form disjoint partitions kb 
commit classes individuals slots facets represented frames 
commit slots facets represented classes individuals 
inherited subclasses class template slot class slot instance class 
facets describe properties slots associated entity example cardinality range 
template slot class associated collection template facets describe facets corresponding slot instance class 
orthogonal knowledge level distinction classes individuals notion frame 
frame data structure typically represent single entity slots facets associated 
decision entities represented frames driven primarily implementation considerations historically krss di erent decisions 
okbc knowledge model entities frames see 
example krs classes may represented frames 
classes generally represented frames okbc allows subset classes represented frames 
common krss excluded unnamed sets primitive data structures strings set frames 
okbc knowledge model slots facets represented classes individuals 
krss slot generally relation denotes set tuples 
systems slot class 
krss space classes slots disjoint 
systems slot individual 
shown knowledge model allows slot facet class individual 
kb collection classes individuals frames slots slot values facets facet values frame slot associations frame slot facet associations sentences 
multiple kbs may represented krs 
okbc supports operations apply speci frames kb example querying values slot frame operations apply krs speci kb example getting list kbs de ned speci krs operations appears proceedings aaai july madison wi 
apply krs kb example establishing connection knowledge server 
expanding range supported krss gfp successfully projects stanford university knowledge systems laboratory ksl farquhar fikes rice farquhar sri international paley karp karp lacked power exibility needed generic api 
enhancements considered address de ciencies encountered gfp ksl sri 
support assertions gfp inadequate krss prefer view kb collection logical sentences systems knowledge model expressive knowledge model gfp 
address problems introduced tell ask interface supports assertional view kb 
design approach supporting okbc analogous adopted krypton brachman fikes levesque 
okbc kb supports alternative isomorphic views kb view assertional view 
view called terminological component krypton 
de ning assertional view kb common denominator approach assertion language expressive power roughly equivalent object oriented frame language dened 
assertions support provided portability claims 
assertion language okbc de nes assertion language declarative speci cation knowledge 
rst order language conjunction predicate symbols disjunction explicit quanti ers function symbols negation equality 
predicate symbols okbc class individual primitive instance type subclass slot facet template slot template facet slot value facet value template slot value template facet value 
example instance john person means john instance class person 
convenience instance john person written person john 
awell formed formula wff atomic formula constructed enclosing predicate symbols followed anumber terms parentheses 
terms constants variables 
conjunction wffs wff 
okbc provides tell ask operations query update kb okbc guarantees ground wffs 
wff may 
okbc speci es ect telling wff kb identifying equivalent set okbc operations include tell 
example operation tell instance frame class asserts frame instance class equivalent operation add instance type frame class 
asking wff similarly equivalent set okbc operations including ask 
example operation ask instance class equivalent operation get class instances class 
assertions guaranteed supported okbc handle assertions outside okbc de nes operations 
okbc operation determines sentences may acceptable tell speci kb 
tell arbitrary formula application check formula 
formula application safely assert formula tell 
example consider wffs age john friend john sally 
straightforward assert tell add slot value 
application may wish assert disjunction age john friend john sally wff okbc binding krs free accept formula application check operation 
formula krs tell operation communicate formula krs 
mechanism kb may accept formulae contain quanti ers functions higher arity predicates 
equivalence tell arbitrary formulae set okbc operations tell 
formulae may portable di erent okbc bindings 
handling entities frames discussed krss di erent assumptions entities represented frames 
di erences uence semantics operations systematically process frames kb example get kb frames get kb individuals get kb classes respectively return frames classes individuals kb 
operations speci ed saying respectively return frames classes individuals kb 
di erences entities represented frames simplicity deceptive 
entities frames shown classes kb necessarily represented frames 
di erences obvious de ne operation get kb classes 
return classes frames 
return sets kb 
returning classes frames problem krss represent classes frames 
non frame classes important client application 
de ning get kb classes return sets problematic results appears proceedings aaai july madison wi 
okbc operation necessarily passed operation making application program complex 
complexity occurs generally possible perform operations creating slots adding slot values entities frames 
get kb classes return classes frames application program need identify classes frames treat di erently 
possible solution problem require krs appear represents class frame 
reasonable unnatural implementation extremely ine cient 
address problem introduced extra argument selector kb classes similar operations 
value selector frames classes frames returned value classes returned 
system classes represented frames classes returns identical results values selector 
expect applications frames value selector argument desirable property union get get kb individuals equals result get kb frames 
third legal value argument system default gives krs freedom cient natural method computing get kb classes 
entity categories frames shown krss represent categories entities frames 
consider krss krs represents slots frames krs 
furthermore consider kb stored krs kb stored krs created identical set okbc creation operations 
calling operation kb frames return di erent results kb kb 
may di cult application portably kbs acceptable okbc provides mechanism detect di erence 
frames behavior allows krs indicate categories entities represented frames 
values frames behavior constitute set keywords class slot facet individual 
values frames contain entity category implies frames may represent 
krss classes instances classes represented frames expect common set values frames class 
krss di erent values behavior frames expect get di erent list frames executing get kb frames kbs 
controlling krs inference area krss di er widely inference mechanisms support methods available control inference mechanisms 
crit ical applications means controlling type cost inferences krs performs response retrieval operation 
unfortunately widespread agreement inference mechanisms parameters control 
impossible okbc provide rich krs independent method controlling inference 
okbc provides restricted method specifying inferences performed retrieval operations methods krs indicate degree speci cations satised 
okbc provide means specify limits computing time performing inferences 
okbc retrieval operations support argument takes values direct taxonomic inferable 
inference level direct directly asserted non redundant values returned 
inference level taxonomic directly asserted inherited values returned 
inherited values computed taxonomic inheritance axioms de ned knowledge model 
example taxonomic inheritance axiom slot values states template slot class value instances slot value subclasses template slot value similar inheritance axioms dened facet values class subclass class instance relationships 
inference level inferable values inferable means supported krs returned including values inferable taxonomic inference level 
inference level value direct returning exactly directly asserted values may impose high burden systems forward chaining systems maintain distinction directly asserted inferred values 
permit exibility cases techniques 
inference level argument de nes lower bound values may returned 
example inference level direct directly asserted values returned krs prevented returning additional values 
second okbc operation accepting argument returns additional values called exact status 
value exact true known exactly direct taxonomic values returned 
okbc implementation returns false value exact compliant 
value status false indicates known results indicates may results krs unable nd integer indicates values exist 
specifying inference level terms lower bound result returning additional values exact status able permit exibility speci cation accurate 
appears proceedings aaai july madison wi 
handling defaults absence widely accepted model defaults brewka dix konolige okbc incorporates simple provisions default values slots facets 
template slots template facets set default values associated 
intuitively default values inherit instances inherited values logically inconsistent assertions kb values removed example instance default values explicitly overridden default values 
okbc require krs determine logical consistency kb guarantee means explicitly overriding default values 
okbc leaves inheritance default values unspeci ed 
requirements imposed relationship default values template slots facets values corresponding slots facets 
default values template slot template facet simply available krs way determining values slots facets 
slot facet values default values referred known true values 
operations slot facet values take avalue selector argument allows user choose default values monotonic known true values 
expanding range applications okbc implementation heavily uenced pragmatic considerations example need support di erent programming languages cient operation network 
network operation necessary applications developed clientserver model knowledge sharing restricted sharing kbs machine institution 
network transparency achieved abstraction called connection encodes actual location okbc kb mediates okbc application kb 
communicate kb application program rst establishes connection krs kb resides subsequently okbc operation program indicate connection executing 
okbc operations take explicit connection argument derive connection kb argument 
connection established user need aware actual location kb kb accessed address space application network 
network substrate okbc implementation plays important role supporting multiple programming languages allows okbc applications manipulate kbs network connection appears operates just local kb 
client side implementations okbc exist lisp java 
improve ciency networked environ ment okbc de nes implementation languageindependent procedure language 
procedure language allows application writer combine okbc operations single procedure set procedures 
procedures recursive transmitted network achieve substantial performance boost 
example computing information necessary display complete class graph kb may require calling okbc operations class get subclasses get printable representation class name 
result thousands invocations okbc operations 
procedure language invocations done single procedure single network call needed 
okbc operations large kbs may return values 
portion result necessary signi cant speedup obtained retrieving desired part result 
okbc supports enumerator operations allow application retrieve result batches 
java common programming idiom 
operations de ned get element determine enumerator elements fetch list elements prefetch batch elements free enumerator 
experiences okbc de ning metric measure success generic api di cult 
argue okbc successful goal enabling construction interoperable tools presenting empirical evidence de nition okbc bindings krss 
consider small case study building interoperable tool okbc 
okbc bindings de ning okbc bindings krs means implementing subset okbc operations calls native api krs rice farquhar 
okbc bindings systems de ned research groups ksl sri 
sri okbc bindings de ned loom macgregor burstein theo mitchell sipe wilkins paley karp 
ksl okbc bindings de ned ontolingua farquhar fikes rice theorem prover atp theorem prover developed ksl cml farquhar tuple kb rice farquhar le system kb clos 
university southern california information sciences institute produced version okbc binding loom 
okbc binding cyc lenat guha de ned cycorp 
okbc licensed systems 
see www com support projects area bioinformatics 
extensively ongoing projects stanford sri appears proceedings aaai july madison wi 
adopted hpkb program see www com hpkb 
okbc server implementations lisp java client implementations lisp java may obtained ontolingua stanford edu okbc 
krss okbc bindings de ned fall categories systems knowledge model closely match okbc knowledge model systems knowledge models expressive okbc knowledge model systems knowledge model expressive okbc knowledge model 
de ning okbc bindings systems knowledge model closely matching okbc knowledge model straightforward 
discuss handled systems categories 
binding expressive krs compliant okbc binding implement okbc operations 
okbc users interested subset functionality speci ed okbc krss knowledge models expressive okbc knowledge model 
excluding systems okbc de nes compliance classes allow krs specify subset okbc functionality supports 
reviewing numerous krs bindings developed compliance classes facets supported user defined facets read monotonic 
krs facets supported class supports facets user defined facets class supports user de ned facets read class supports read operations monotonic class supports operations monotonically update kb 
example consider okbc bindings unix le system directories mapped classes subdirectory relationships mapped subclass relationships les directory directories mapped individuals 
binding natural way create new facets 
okbc bindings unix directory system satisfy user defined facets compliance class 
user write permissions le system compliant read compliance class 
implementation okbc bindings le system included okbc source distribution rice farquhar 
binding expressive krs atp system developed ksl model elimination theorem prover supports full rst order logic fol provides limited support axiom schema de nitions designed handle large number ground facts 
provides example system knowledge model expressive okbc 
de ning okbc binding atp interesting design choices 
atp frame oriented system considerable freedom deciding objects correspond frames 
considered ties 
rst possibility speci class frame instances frames 
second possibility object function relation constant frame atp allows predications relation function constants 
rst choice harder okbc binding arbitrary atp kb include axioms class frame 
second choice atp notion frame slightly inclusive krss 
example atp frame representing number 
copying frame representing number krs provides data structures frames easily result frame data structure allocated built machine representation target krs prefer 
chose model constants frames 
atp supports ways representing basic relationships okbc 
consider subclass relationship class dog class mammal 
represented implication dog mammal wff subclass dog mammal expected querying asserting subclass relationships common operation wanted cient 
atp provides cient mechanism storing ground facts 
exploit cient representation wffs implemented ground facts 
addition cient okbc basic queries simpli es deletion frames 
inference level okbc de nes values direct taxonomic inferable 
implemented multiple theories feature atp place taxonomic inference axioms separate theory 
inference level direct atp looks ground facts inference level taxonomic atp uses facts taxonomic axioms inference level inferable available axioms 
atp sentence 
surprises may arise sentence told equivalent wff di erent form 
example relationship dog mammal asserted implication dog mammal corresponding wff subclass dog mammal 
long inference level inferable expected inferences drawn example dog mammal 
taxonomic inference level implication inference drawn 
interoperable tools built okbc browsing editing tools built okbc generic knowledge base editor gkb editor paley karp tool 
gkb editor tool graphically browsing editing kbs written common lisp 
java tool viewing editing contents kbs written appears proceedings aaai july madison wi 
commercial shelf widget package 
purpose current discussion say browser successfully tested krs able display class subclass relationships contents frames 
gkb editor initially developed tested 
initial testing gkb editor tested ontolingua 
differences ontolingua value frame names required behavior 
sets value frame names required behavior true ontolingua sets false 
browsing gkb editor substantially depends frame names 
porting gkb editor ontolingua required assign ctitious names frames ontolingua 
ctitious names signi cance user displayed pretty names frames shown 
di culty frame names able test gkb editor ontolingua successfully 
addition gkb editor successfully tested loom theo 
fact conjunction loom natural language generation project technical university berlin stede 
initially developed tested ontolingua tuple kb 
successfully tested di culty 
demonstrates language independence okbc freely transparently browse edit tightly coupled kbs implemented java network java kbs numerous di erent kbs written common lisp 
editor operation done means remote procedures 
experiment shows tools written okbc really interoperate wide range krss 
limitations okbc goal okbc enable construction reusable kb tools application programs access krs perform browsing editing reasoning tasks 
empirical evidence shown successful meeting goal 
potential users okbc usually concerned successfully okbc projects 
identify commitments sacri ces may need okbc successfully 
construct new okbc binding krs necessary identify knowledge model krs de ne mapping okbc knowledge model 
providing frame oriented assertional views kb okbc capable supporting wide range systems 
systems easily admit views 
okbc binding de ned systems users may nd intuitive natural mapping 
okbc bindings best knowledge model krs closely matches okbc 
okbc bindings isolate kb tool peculiarities krs certainly cover 
porting kb tool new krs usually requires additional ort 
example supports slot type called unique 
slots type inherited subclasses instances values inherited 
gkb editor handle peculiarity small amount code added 
similarly atp provides operations return proof value satis ed query okbc currently provide operations speci cally extracting proofs 
okbc lowest highest common denominator protocol 
hope expose functionality system exposes believe applications want 
addition protocol speci cally designed extensible means behavior mechanism clients servers negotiate powerful functionality provided protocol 
okbc solve problem semantic kb interoperation 
example okbc operation get slot values application may query salary person di erent systems guarantee returned values semantically identical system may return annual salary system may return monthly salary 
semantic interoperation scope okbc 
okbc functional interface kb brachman fikes levesque specify data structures implement knowledge model 
okbc application manipulate internal data structures krs implement frames 
summary shown okbc provides ective interface diverse software tools krss 
okbc knowledge model inspired extensive study existing krss 
okbc de nes comprehensive set operations accessing kb 
semantics operations precise exible support frame oriented assertional interaction 
supporting variability krss behaviors additional return values proved central techniques 
feasible certain requirements krss expose di erences okbc knowledge model globally setting value behavior locally returning additional value operation 
example support frame names advertised frame names required behavior degree conformity inference level argument exposed extra return value 
design experience okbc suggests existence expressiveness vs generality tradeo similar expressiveness vs tractability tradeo levesque brachman 
krss wehave okbc highly expressive appears proceedings aaai july madison wi 
require okbc support equally expressive knowledge model expose full functionality 
highly expressive knowledge model de ning okbc bindings krss limited functionality di cult time consuming 
design okbc tradeo guiding principle carefully controlling expressiveness knowledge model 
believe expressiveness vs generality fundamental tradeo knowledge sharing 
okbc represents major advance predecessor gfp 
okbc supports larger class krss knowledge model includes assertional view krs provides explicit treatment frames stronger method control inferences better method specifying default values 
gfp okbc practically platform substantially larger range applications supports network transparency multiple programming languages remote procedure language 
summary okbc substantially advances krss clientside kb tools 
success shown broad range systems commercial environment 
availability okbc implementations multiple programming languages attractive choice developers applications content services provided krss 
increased con dence applications interoperate multiple krss 
availability okbc compliant tools krs developers able shelf knowledge components primary focus 
believe okbc modest contribution achieving plug play operation kb tools krss 
acknowledgments stanford university supported contracts titled technology developing network information brokers contract number large scale repositories highly expressive reusable knowledge contract number 
sri international supported rome laboratory contract titled reusable tools knowledge base ontology development contract number darpa contract entitled ontology construction toolkit 
protocol undergone revisions input people including fritz mueller karen myers paley bob macgregor 
brachman fikes levesque 
krypton functional approach representation 
ieee computer 
brewka dix konolige 
non monotonic reasoning 
cambridge university press 
chaudhri farquhar fikes karp rice 
open knowledge base connectivity 
technical report ksl available knowledge systems laboratory stanford university 
farquhar iwasaki fikes bobrow 
compositional modeling language 
proceedings qualitative reasoning workshop 
farquhar fikes rice 
collaborative tool ontology construction 
international journal human computer studies 
geiger 
inside odbc 
microsoft press 
genesereth fikes 
knowledge interchange format version manual 
technical report logic computer science department stanford university 
karp riley paley pellegrini toole 
ecocyc electronic encyclopedia coli genes metabolism 
nuc 
acids res 

karp myers gruber 
generic frame protocol 
proceedings international joint conference onarti cial intelligence 
karp 
design space frame knowledge representation systems 
technical report sri international arti cial intelligence center 
lenat guha 
building large knowledge systems representation inference cyc project 
addison wesley 
levesque brachman 
expressiveness tractability representation reasoning 
computational intelligence 
macgregor burstein 
description classi er enhance knowledge representation 
ieee expert 
mitchell allen chalasani cheng etzioni ringuette schlimmer 
theo framework self improving systems 
architectures intelligence 
erlbaum 

paley karp 
generic knowledge base browser editor 
proceedings ninth conference innovative applications arti cial intelligence 
rice farquhar 
okbc rich api cheap 
technical report ksl available knowledge systems laboratory stanford university 
stede 
lexicon discourse markers text generation understanding 
technical report technical university berlin submitted publication 
wilkins 
practical planning extending classical ai planning paradigm 
san mateo ca morgan kaufmann publishing 
