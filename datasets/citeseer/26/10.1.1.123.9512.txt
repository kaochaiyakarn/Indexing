pilib hosted language pi calculus style concurrency vincent martin odersky cole polytechnique rale de lausanne inr lausanne switzerland martin odersky epfl ch 
pilib library written scala implements concurrency constructs calculus 
discussed features programming language scala possible syntax calculus 
huge advantage library respect simple calculus interpreter transmit value names get control type system access full power language terms expressiveness libraries 
support concurrency universal general purpose programming languages 
supported concepts vary widely language 
non exhaustive examples concurrent ml event model process synchronization 
occam programming language csp :10.1.1.30.8705
similar way pict calculus :10.1.1.127.1777
facile uses calculus style channel communication jo caml funnel polyphonic synchronization patterns join calculus :10.1.1.20.2602:10.1.1.14.7918
erlang actor model processes interpret messages mailboxes pattern matching 
oz uses logic variables process communication id concurrent haskell form mutable variables called structures :10.1.1.30.8705
contrast mainstream languages shared memory thread model 
popular languages java net common language runtime augment model thread synchronization monitor concept 
spite confusing variety trends observed 
large body theoretical research concurrency ccs successor calculus 
holds specifications concurrent systems 
calculus specification executable program provided infinite choices 
practice concurrent systems implemented sharedmemory threads synchronized semaphores monitors 
programs harder reason verify calculus specifications 
efficient implement 
situation desirable wide spectrum programming solutions move easily high level specification prototype thread low level implementation 
way achieve programming language low level high level concurrency constructs 
language tend quite large 
light great variety high level solutions proposed difficult pick concrete high level syntax confidence right 
better solution express high level language library abstraction terms low level 
high level language effect domain specific language domain process coordination 
similar skeletons parallel programming 
implemented library high level language embedded hosted low level language 
advantages separate compiler run time environment needs designed facilities host language high level language 
high level language convenient host language needs fair degree expressiveness 
describe experience embedding 
developed process coordination language closely modelled calculus implemented library host language scala 
scala new functional object oriented language interacts smoothly java 
compared environments scala additional language features suitable host language domain specific languages 
supports concepts 
rich type system generics dependent types 
object composition mixin style multiple inheritance 
named anonymous functions class values nested 
pure object orientation sense value conceptually object operator method call 
scala designed operate jvm net environment regarded extension language java 
scala constructs dealing concurrency language proper 
re uses concurrency constructs underlying environment 
constructs java net consist case class thread model monitors synchronization 
need define high level process model scala came taught class concurrency theory concurrent programming 
wanted able students program concurrent systems closely follow specifications ccs calculus 
time wanted relate java classical thread monitor model concurrent programming 
embedding high level concurrent language scala provided elegant means going specification classical implementation time available rich facilities java environment 
implementing high level concurrent language library abstraction poses challenges syntactic type system abilities host language 
show convenient syntax type discipline highlevel language achieved help scala constructs abstraction composition 
particularly important respect scala generic type system ability arbitrary operators methods dynamic receiver interpretation operators light weight syntax anonymous functions closures 
rest structured follows 
section introduces calculus pilib means example 
section elements pilib language detail 
section shows elements mapped scala constructs 
section languages features necessary embedding 
section gives brief description pilib implementation 
section concludes 
example place buffer specification calculus specification place buffer calculus consists set mutually recursive process definitions buffer put get put get put get put put get put get get put get put put get put get get put get definitions represent respectively state buffer contains zero elements buffer initially empty 
definitions parameterized names channels put put get get element 
additionally definitions parameterized names elements stored buffer 
logic definitions intuitive buffer empty state accept input item channel put pass state 
contains exactly item state output item go back state accept new item pass state 
buffer contains items output stored item go state 
put put get get put get instances guarded processes 
input guarded process binds input item channel put name continuation process put get 
second output guarded process outputs item channel get continuing process put get 
implementation pilib pilib modelled calculus concurrency primitives possible reproduce specification def buffer put chan get chan unit def unit choice put def unit choice get put def unit choice get process definitions replaced function definitions introduced def scala result type unit 
type contains just value corresponds void java 
buffer parameterized type stored items 
chan type channels carrying objects type calculus input guarded process put put get written put output guarded process get put get written get character replaces dot symbol 
calculus summation alternatives sequence guarded processes separated comma enclosed choice 
compared specification calculus implementation pilib advantages 
channels type typechecker phase compiler assures objects right type passed channels 
processes calculus modelled functions possible hide internal states nesting corresponding functions inside function buffer 
scope parameters put get extends local functions refer implicitly 
example buffer calculus process repeatedly creates new channel put buffer consumer process get item buffer discards 
put get put put get consumer put get get consumer put get put get put get buffer put get consumer put get processes put parallel operator linked sharing fresh channels put get introduced restriction operator 
calculus code exact counterpart pilib def producer put channel get channel val new channel choice put producer put get def consumer put channel get channel choice get consumer put get val put new channel get new channel spawn producer put get buffer put get consumer put get new features pilib appear lines show create new channels execute processes parallel spawn 
contrary pilib channels carry arbitrary objects calculus name 
channels values carry taken domain 
way typing channels pilib recursive type definition channel represent calculus channels class channel extends chan channel definition read calculus channel channel carry calculus channels 
seen implementation pilib close specification calculus 
scala special syntax calculus primitives pilib library implemented low level concurrency constructs scala inherited java 
rest try magic 
course written place buffer monitors java implementation certainly efficient 
relating implementation specification completely trivial 
pilib closely relate specification language implementation language gain immediate confidence program 
description pilib grammar section pilib interface compare original concurrency interface scala directly inherited java 
original concurrency interface original concurrency interface scala consists mainly class monitor function fork 
trait monitor def synchronized def def wait unit def wait timeout long unit def notify unit def notifyall unit def fork def unit unit synchronized method class monitor executes argument computation mutual exclusive mode time thread execute synchronized argument monitor 
threads suspend inside monitor calling method wait notify method monitor called subsequently thread 
calls notify threads waiting monitor ignored 
pilib interface grammar pilib 
grammar implemented library scala topic section 
just syntax pilib constructions give informal description associated semantics 
channel creation basis pilib interface concept channel called name calculus 
channel represents communication medium 
get object represents fresh channel carry objects type simply writes new chan 
guarded processes assuming expression evaluates channel carrying objects type term input guarded process continuation bound value transmitted object 
note expression type unit 
similarly output guarded process written value sent continuation expression type unit 
calculus communications pilib synchronous thread tries output value channel blocked long thread performs input channel 
time sub processes launched parallel continuation input guarded process applied transmitted value continuation output guarded process 
notice parent threads stay blocked long sub processes terminated 
summation specific ingredient pilib method choice takes arbitrary number guarded process arguments tries establish communication guarded processes thread 
choice blocking long communication take place 
took place guarded processes choice participate communication discarded 
multiple fork threads construction spawn allows fork threads time 
instance wanted execute concurrently expressions type unit write spawn summary concurrency primitives pilib 
construct result type participant types channel creation new chan chan input guarded process chan unit output guarded process chan unit summation choice gn unit gi multiple fork spawn 
pn unit pi unit derived constructs class chan contains methods perform synchronous read synchronous write 
constructs easily derived primitive constructs far 
example synchronous read val read equivalent implemented var null choice synchronous write write equivalent choice 
section explain possible implement pilib hosted language scala library 
going go pilib construction see interpreted language 
channel creation said basic way get fresh channel carries objects type expression new chan 
fact normal syntax creating instances parameterized class chan 
input guarded process expression scala allows see method takes exactly argument type class binary operator scala parser replace expression 
furthermore valid identifier 
input guarded process recognized parser code object type chan 
class method named parameter type unit function takes type values carried channel returns unit 
expression scala syntax describe anonymous function formal parameter body anonymous function creation anonymous object interface function unit type inferred method apply unique parameter body translated new function unit def apply unit output guarded process expression scala expression type replaced apply 
expression describing output guarded process recognized apply 
means class chan implements interface function product type transmitted value roduct helper class contains method necessary simulating dot symbol natural syntax 
guarded process type input output guarded process expression 
class class concrete sub classes 
encapsulate elements compose guarded process name channel continuation function input guarded process name channel transmitted value continuation function output guarded process 
summation summation written choice gn pilib 
just call function choice 
function unique parameter type takes argument sequence objects arbitrary length 
multiple fork processes syntax fork threads spawn 
seen far expression recognized spawn 
implementation construct class spawn def def unit spawn def def unit spawn def unit object spawn extends spawn def def unit spawn fork def def unit spawn fork def unit code fork low level function fork sub process 
def modifier applied parameters methods class spawn specifies argument passed evaluated 
evaluated time body function 
strategy evaluation called call name 
indication different threads executed sequentially order evaluation arguments method 
scala constructs embedding section summarize constructs proved useful hosting pilib scala 
polymorphism type genericity allowed parameterize channel type objects carry 
scala type system sure channel object right type 
scala methods polymorphic 
calculus agents represented methods pilib agents polymorphic place buffer example section 
type parameters bounds scala bounds recursive 
feature known name bounded polymorphism express recursive channels 
instance define kind channel carry pairs integers channels kind write class extends chan pair int type inference performed compiler allows omit type annotations type formal parameter continuation input guarded process 
higher order functions anonymous functions saw input guarded process expressed call method continuation function argument 
example higher order function 
furthermore natural express continuation anonymous function time 
syntactic sugar convenient write apply 
permitted scala parser perform simple powerful transformations 
fact functions members class methods allows overload easily operators introducing ambiguity 
call name parameter modifier def possible scala explicitly specify parameters called name 
instance allows write output guarded process parameter method def modifier 
construction spawn possible 
required replace cumbersome spawn 
sequence type feature scala definition choice method possibility function pass arbitrary number arguments methods 
case formal method parameter sequence type written scala 
overview implementation implementation calculus scala concept guarded process 
input guarded process consists elements channel input continuation function applied value transmitted channel 
output guarded process components channel output value transmitted object continuation function execute communication took place 
implementation guarded processes conceptually represented tuples components 
call sum set guarded processes 
implementation simply list guarded processes 
say sums compatible channel communicate channel implementation keeps global list pending sums sums waiting communicate 
call pending list 
invariant list sums contains pairwise incompatible 
pending list behaves queue new entries added 
explain invocation function choice 
argument function choice sequence guarded processes 
sequence turned sum 
point possibilities 
sum incompatible sum pending list case just append sum pending list 
exists pending list compatible sum 
find compatible sum perform linear search pending list order arguments choice matters 
pending sum communicate arriving sum extract list perform communication execute different threads continuation output guarded process continuation input guarded process applied transmitted value 
thing notice semaphore preventing choice method return threads running 
exclusive access pending list assured call synchronized method monitor object 
noticed implementation optimized 
put accent simplicity 
course possible improve implementation keeping interface 
implementation consists lines scala code large part dedicated syntactic sugar 
complete code available web :10.1.1.20.2602
pilib language concurrent programming style calculus 
language hosted library scala 
hosting provides free expressive language calculus proper 
possible transmit arbitrary values channels just names 
furthermore possible variables represent guarded processes sum 
gives ability express higher order guarded processes calculus restricted order processes 
variables representing continuations 
instance want guarded processes share continuation summation val choice pilib program corresponds closely calculus specification 
course run program perform possible traces specification 
trace necessarily fair pilib method choosing matching sum pending list 
fair implementation improvements efficiency remain topics 
experience pilib class positive 
close connections calculus students quickly familiar syntax programming methodology 
high level process abstractions big help developing correct solutions concurrency problems 
generally far easier develop correct system pilib java native thread monitor concurrency constructs 

dagstuhl book chapter skeletons book go 

armstrong virding williams 
concurrent programming erlang second edition 
prentice hall 

arvind 
id report asynchronous programming language computing machine 
technical report university california irvine california usa 

barth nikhil arvind 
structures extending parallel nonstrict functional language state 
hughes editor proceedings functional programming languages computer architecture th acm conference cambridge ma usa pages 
springer verlag august 
lecture notes computer science 

benton cardelli fournet 
modern concurrency abstractions lecture notes computer science 

box 
essential net volume common language runtime 
addison wesley 


jocaml mobile agents objective caml 
international symposium agent systems applications asa third international symposium mobile agents ma palm springs ca usa oct 


pilib pi calculus scala 
epfl ch feb 

fournet gonthier 
reflexive chemical machine join calculus 
principles programming languages jan 

mishra prasad 
facile symmetric integration concurrent functional programming 
international journal parallel programming april 

gosling joy steele bracha 
java language specification second edition 
java series sun microsystems 
isbn 

hansen 
programming language concurrent pascal 
ieee transactions software engineering 

hoare 
monitors operating system structuring concept 
commun 
acm oct 

hoare 
communicating sequential processes 
communications acm aug 
reprinted distributed computing concepts implementations edited reilly larson ieee 

inmos occam programming manual 
prentice hall international 

milner parrow walker 
calculus mobile processes parts ii 
information computation 

odersky 
functional nets 
proc 
european symposium programming number lncs pages 
springer verlag mar 

odersky 
report programming language scala 
epfl ch scala 

peyton jones gordon finne 
concurrent haskell 
acm editor conference record popl rd acm sigplan sigact symposium principles programming languages papers symposium st petersburg beach florida january pages new york ny usa 
acm press 

pierce turner 
pict programming language 
plotkin stirling tofte editors proof language interaction essays honour robin milner pages 
mit press 

reppy 
cml higher order concurrent language 
programming language design implementation pages 
sigplan acm june 

smolka 
object oriented concurrent constraint programming oz 
van hentenryck saraswat editors principles practice constraint programming chapter pages 
mit press 

