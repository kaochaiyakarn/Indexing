distributed segment tree support range query cover query dht zheng shen li scott shenker microsoft research asia beijing china international computer science university california berkeley range query defined find keys certain range underlying network received lot research attentions 
cover query find ranges currently system cover key rarely touched 
identify cover query highly desired functionality popular applications propose distributed segment tree dst layered dht structure incorporates concept segment tree 
due intrinsic capability segment tree maintaining ranges dst shown efficient supporting range query cover query uniform way 
possesses excellent query operations achieve complexity moderate query ranges 
balance load dht nodes design downward load stripping mechanism controls tradeoffs load performance 
implemented dst publicly available opendht service performed extensive real experiments 
results comparisons demonstrate effectiveness dst important metrics 

distributed hash table dht drawn immense attentions research field :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673:10.1.1.28.5987
mainly due inherent characteristics scalability self organizing capabilities convincingly demonstrated deployments applications dht employed underlying infrastructure :10.1.1.59.3214
primary design goal dht systems achieved efficient key lookup typically logn complexity 
inherent exact matching dht lookup functionality panacea 
instance range query defined find keys certain range underlying network difficult achieve dht lookup directly cryptographic hash function sha hash strips structural properties keys 
hand range query highly desired distributed applications database distributed computing location aware computing :10.1.1.60.5834
realizing challenge range query research community proposed variety solutions address problem different angles discussed detail section 
best knowledge highly desired functionality cover query find ranges currently system cover key rarely touched 
cover query arises number existing popular applications file swarming applications bittorrent avalanche file divided large number slices 
different slices exchanged peers accelerate downloading process 
clearly slice range slices download peer needs lookup peers slice range slices 
note slice typically represented range starting position position 
streaming applications ostream peers typically cache played portion bitstream manner 
new peers performed random seeks new positions need firstly lookup peers potentially serve sliding caching window covers desired playing position 
cover query dual problem range query keys inserted range query correspond keys may queried cover query 
turn ranges inserted cover query correspond ranges may queried range query 
recognizing duality hope design single structure support kinds query uniform way 
want leverage inherent advantages dht consolidate efficiency robustness works 
main contribution design distributed structure dht gracefully support range query cover query uniform way 
basic idea distribute segment tree dht name distributed segment tree dst structural information retained exploited efficient query 
importantly underlying dht lookup operations invoked parallel 
range query cover query achieved close complexity underlying dht lookup operations moderate query ranges 

related due space limitation discuss related works support range query dht refer readers range query solutions rely specially designed underlying structure 
mercury adopts circular overlay design philosophy similar dht hash stores data continuously order support multi attribute range query 
uses specially designed overlay load level level level level segment illustration segment tree range optimal representation range subranges :10.1.1.111.1818:10.1.1.59.3214:10.1.1.60.5834:10.1.1.60.5834:10.1.1.105.3673:10.1.1.28.5987
balancing explicitly considered 
skip graphs distributed data structure implements range search requires non trivial extensions dht maintain load balance 
big differences dst mercury skip graphs dst built top generic dht adopts highly regular data structure 
sense prefix hash tree pht similar dht traditional key lookup impose new data structure specifically trie structure pht generic dht richer functionalities retaining inherent benefits dht scalability robustness mainly perform comparisons pht experiments :10.1.1.60.5834
trie structure pht keys stored leaf nodes share prefix client knowledge structure pht 
result client spend additional dht get reach leaf nodes longest matched prefix 
bit key complexity logd binary search search intrinsically sequential 
contrary dst maintain highly regular architecture allow intermediate nodes store keys 
regularity dst allows client easily calculate union minimum subranges matches query range key simultaneously support range query cover query uniform structure 
client find responsible node subrange complexity underlying dht get operation queries subranges executed parallel 
mentioned aware supports cover query dht 
previous proposed scheme efficient service discovery asynchronous streaming applications 
essentially cover query problem solved specially designed architecture combines tree mesh 
application segment tree data structure efficient range representation design dst distributing segment tree dht enjoys desired features inherited underlying dht robustness efficiency scalability 
distributed segment tree section describe data structure motivates dst properties enables efficient range representations crucial range query cover query 
distribute structure dht 
basic data structure dst segment tree comes computational geometry essentially full binary tree properties listed 
note practical interests consider integers segment tree 

segment tree representing range length henceforth range called segment tree range height log 
node segment tree represents node interval sl tl log 
length ll tl sl 
clearly root node interval equals segment tree range leaf node interval 

non leaf node children 
left child right child represent intervals sl sl tl sl tl tl respectively 
union children covers interval parent 

neighboring nodes layer sl tl 
property ensures continuity segment tree 

nodes layer span seg ment tree range 
sl tl 
property ensures integrity segment tree 
exemplar segment tree representing range depicted :10.1.1.60.5834
easily verify properties 
theorem 
segment range represented union node intervals segment tree 
exist multiple possible unions range 
segment tree full binary tree trivial prove half theorem 
instance segment represented union intervals shown :10.1.1.59.3214:10.1.1.105.3673
second half theorem evident third property segment tree 
multiple possibilities represent larger range unions smaller subranges theorem ensures existence optimal representation 
theorem 
segment range expanded union log node intervals 
proof due space limitation give short intuitive proof 
segment suppose longest part represented single node left part represented right children segment tree right part represented left children 
log consecutive left children tree log consecutive right children 
segment represented log nodes tree 
parameters bounds input segment lower upper bounds current node interval ret resulting union node intervals lower upper ret lower upper ret add interval lower upper return mid lower upper mid lower mid ret mid mid upper ret table range splitting algorithm 
code snippet shown table shows range splitting algorithm constructs union minimum node intervals expand range 
dst segment tree structure distributed dht way similar adopted pht node interval assigned dht node peer associated key hash underlying dht logic 
words information node segment tree efficiently located dht lookup operation 
assignment implicitly connection structural information node intervals segment tree underlying routing due hash operation substrate dht 
consequently range query cover query achieved efficiently dst elaborated subsequent sections 
note segment tree structure range splitting algorithm described extended multidimensional cases straightforward way 
branch segment tree maintain structural information space filling curve convert space space works 
due space limit omit details 

range query range range query returns keys belong range currently stored overlay 
section describe key maintenance mechanism dst facilitates efficient range query discuss range query procedure dst 
insert remove basic operation insertion insert key specific leaf node determined dht ancestors leaf node node interval ancestor covers specific key 
words key inserted nodes interval covers 
segment tree full binary tree peer network reconstruct segment tree locally long knows segment tree range 
result key feasible applications range key space large segment tree range 
inserted leaf node ancestors simultaneously parallel 
theorem log parallel threads executed concurrently insertion complexity achieved exploring parallelism 
know node interval segment tree increase exponentially levels 
extreme case root node responsible segment tree range 
key insertion scheme load nodes levels quite unbalanced 
hand keys maintained parent node redundant purely improving query efficiency 
balance load impose constraint system parameter threshold limit number keys non leaf node needs maintain design downward load stripping mechanism achieve 
downward load stripping mechanism works follows node maintains counters left counter right counter 
left counter increased key put node covered left child 
right counter increased 
counter reaches threshold triggers saturation event 
insertion key triggers left saturation right saturation key discarded 
safe doing way aforementioned key maintained parent redundant improved query efficiency 
negative effect query parent interval split queries children intervals fortunately executed parallel 
clearly reducing redundancy embedded segment tree downward load stripping mechanism achieves better tradeoff load performance affect correctness query 
removing key dst quite similar insertion process 
key removed leaf node ancestors executed parallel 
difference may draw saturated node back 
case node may recruit additional key children 
additional key recruited marks 
recruitment mechanism helps improve query efficiency brings overhead 
tradeoff recruitment performed lazily 
robustness dst mainly depends underlying dht redundancy keys multiple intermediate nodes dst enhance system robustness 
keys maintained node recovered keys children query node replaced parallel queries children node failed recovered 
query range query client splits range union minimum node intervals segment tree range splitting algorithm 
uses dht get api retrieve keys maintained corresponding dst nodes 
final query result union keys returned 
dht get operations called parallel shorten latency 
theorem usually affordable log threads required parallel get invocations 
long span queried range moderate complexity range query achieved demonstrated section 
due downward load stripping mechanism may incur additional cost intermediate nodes saturated 
case client retrieve keys children saturated nodes 
worst case may need steps 
node higher level dst get saturated result longer query range expensive query 
practical cases query range shorter key space segment tree range 
additional cost practical range query low demonstrated section 
cover query section describe key maintenance mechanism dst facilitates cover query discuss cover query dst 
segment insertion remove contrary range query segments need inserted removed system 
simply hashing segments putting dht lose structural information segments cover query 
dst segment firstly decomposed union minimum node intervals range splitting algorithm 
segment inserted removed corresponding nodes interval belongs union 
theorem log nodes get involved segment 
note range query case key needs propagated stored ancestors corresponding leaf node needed cover query 
proper propagation children nodes may needed load balancing considerations stated 
range query case parallel insertions removals exerted shorten latency 
downward load stripping mechanism balance load nodes 
system parameter threshold set constrain maximum number segments node take 
different range query case node maintains single counter 
segment stored counter increase 
counter reaches threshold triggers saturation event 
saturation event cause segment relayed children 
process removing segment dst basically insertion 
due downward load stripping mechanism may need delete segment recursive way succeeds 
performed lazily impact search result 
query due duality query process similar insertion process range query case 
root leaf path nodes cover point 
means segments maintained nodes dst supports cover query segment range 
omit due space limit 
full nodes level inserted keys nodes th level nodes th level nodes th level th level percentage nodes get saturated different levels dst 
cover point 
invoking dht get nodes parallel shorten latency retrieve expected segments 
analysis section maximum segment span log dht get threads needed cover query cost little system resource cases 

evaluation implemented dst java publicly available opendht service planetlab 
report experimental results range query cover query section comparisons pht appropriate 
considering limited space report important metrics 
due vagaries load planetlab opendht built performance single experiment may elusive 
repeated experiment times calculated average results 
fair comparison pht run queries dst pht simultaneously located computers configurations 
pht dst utilize parallel dht operations shorten latency limit number concurrent dht operations concurrent threads dst dht implementations prevent system resource exhausting 
range query performance measure performance range query compare pht artificially generated keys preloaded dst pht 
uniformly distributed key space 
structural properties recall threshold constrain number keys maintained node 
experiment set measure number nodes saturated keys inserted 
shows plot percentage saturated nodes level segment tree key insertion process 
nodes th level length node interval saturated keys inserted 
nodes th level saturated keys inserted 
implies long span query range moderate saturated nodes cdf percentage inserts insert latency sec 
dst implementation pht implementation cumulative distribution function cdf latency insertion items 
encountered querying 
insertion performance shows cumulative distribution function cdf latency key insertion 
initial leaf node lookup sequential pht insertion latency pht spend longer time dst lookup parallel 
query performance experiment generated range queries length randomly distributed calculate average query span 
set block size pht set block size pht limits maximum number keys maintained single pht node 
clearly node maintain keys dst pht 
shows comparison results dst pht latency number dht get metrics respectively 
see query range small saturated nodes queries dst 
queried nodes low levels dst hard get saturated 
dst dht get called parallel result constant latency 
case seen 
query latency dst close constant query range 
contrary pht needs sequential steps lookup leaf key 
result pht spends time small span range query 
query span larger saturated nodes encountered dst pht queries 
schemes need spend additional get propagate queries children saturated nodes 
seen clearly query range 
divergence dst pht curves implies saturated nodes encountered pht dst caused pht spend longer time large span range query 
cover query performance load dst node experiment generate segments randomly average query latency sec 
average dht get dst implementation pht implementation span query range average query latency dst implementation pht implementation span query range average dht get comparison dst pht query latency different spans query ranges average query latency 
average number dht get 
distributed key space 
span segments distributed uniformly 
shows average number nodes maintained dst nodes level 
demonstrates effectiveness downward load stripping mechanism load balancing average number segments th level segment tree higher levels 
downward load stripping load significantly smoothed levels segment tree 
latency shows cdf latency averaged segments segment insertions cover queries 
average latency seconds seconds respectively 
notice query latency shorter insertion latency 
query process constantly querying dst nodes path root leaf 
insertion process elusive 
additional cost may imported saturated nodes 

proposed distributed segment tree dst layered dht structure incorporates segment tree concept purpose efficient support range query average load nodes level average load downward stripping average load downward stripping level dst average number segments maintained nodes level dst 
cdf percentage inserts queries insert query latency inserts queries sec 
cumulative distribution function cdf segment insertions cover queries items 
cover query 
introduced segment tree concept properties basis dst excellent range query cover query capabilities 
dst essentially tolerates redundancies achieve efficiency 
designed downward load stripping mechanism load balancing purpose 
possesses excellent query operations achieve complexity moderate query ranges 
dst built top dht enjoys inherent advantages dht scalability robustness implemented dst publicly available opendht service performed extensive real experiments 
results comparisons demonstrate effectiveness dst important metrics 
ratnasamy francis handley karp shenker scalable content addressable network proceedings acm sigcomm san diego ca aug pp :10.1.1.140.3129

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proceedings acm sigcomm pp :10.1.1.105.3673

druschel rowstron pastry scalable distributed object location routing large scale peer peer systems proc :10.1.1.28.5987
th ifip acm international conference distributed systems platforms middleware nov 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing university california berkeley computer science department tech :10.1.1.111.1818
rep ucb csd 
stoica shenker surana internet indirection infrastructure proceedings acm sigcomm pittsburgh pa aug pp 

stribling li kaashoek karger morris shenker overcite cooperative digital research library workshop peer peer system iptps ithaca new york feb :10.1.1.59.3214
chawathe ratnasamy lamarca hellerstein shenker case study building layered dht applications proceedings acm sigcomm :10.1.1.60.5834
bharambe agrawal seshan mercury supporting scalable multi attribute range queries proceedings acm sigcomm portland usa sept 
cohen incentives build robustness bittorrent may 
rodriguez network coding large scale distribution ieee proceedings infocom miami fl usa mar 
zhang liu li 
data driven overlay network live media streaming miami fl usa mar 
cui li nahrstedt ostream asynchronous streaming multicast application layer overlay networks ieee journal selected areas communications vol 
jan 
aspnes shah skip graphs proc 
acm siam symposium discrete algorithms soda 
zheng shen li segment tree control plane protocol peer peer demand streaming service discovery proc 
visual communication image processing july 
de berg van kreveld overmars schwarzkopf computational geometry algorithms applications 
springer verlag berlin 
rhea godfrey karp kubiatowicz ratnasamy shenker stoica yu opendht public dht service uses proceedings acm sigcomm 
