similarity search mercury system praveen krishnamurthy jeremy buhler roger chamberlain mark franklin joseph lancaster department computer science engineering washington university st louis similarity search important application modern molecular biology 
search algorithms aim identify sets sequences extensional similarity suggests common evolutionary origin function 
widely similarity search tool blast program designed compare query sequences database 
design blastn version blast searches dna sequences mercury system architecture supports high volume high throughput data movement data store reconfigurable hardware 
important component application deployment mercury system functional decomposition application reconfigurable hardware traditional processor 
mercury design performance analysis described 
computational search large databases dna protein sequence fundamental tool modern molecular biology 
rapid advances speed cost effectiveness dna sequencing led explosion rate new sequences including entire mammalian genomes generated 
order understand function evolutionary history organism biologists seek identify discrete biologically meaningful features sequence genome 
powerful approach identify features comparative annotation query sequence new genome compared large database known 
database sequences exhibiting high similarity query measured string edit distance hypothesized derive ancestral sequence query cases biological function 
blast basic local alignment search tool widely software rapidly comparing query sequence database 
blast algorithms highly optimized efficient similarity search growth databases uses sizes common search problems speed improvements general purpose computing hardware 
example national center biological information ncbi genbank database grew exponentially doubling time months 
problem particularly acute blastn variant blast designed compare dna sequences additional genome sequenced animals higher plants produces bytes new dna sequence 
response runaway growth databases distribute blast searches multiple computers responsible searching part database 
approach requires substantial hardware investment ability coordinate search processors 
alternate approach parsimonious hardware build specialized blast accelerator 
applicationspecific architecture exploiting high bandwidth modern storage systems accelerator execute blast search algorithms faster general purpose processor 
mercury system prototype architecture supports disk computation high data rates utilizing reconfigurable hardware 
traditional computing applications historically coded paradigm read input data main memory explicit calls compute data writing results back main memory send output main memory explicit calls 
contrast mercury system built concept continuous data flow 
data disk flow computational resource functions physically pipelined performed data results flow intended destination 
computational resources include reconfigurable hardware application deployment requires hardware software codesign 
mercury system builds reidel active disks dally stream processors entire reconfigurable computing community deliver system suited high volume high rate disk computations 
blastn application fits pattern 
describes re engineering original blastn application effective deployment mercury system 
examine existing application explore performance properties propose novel algorithmic optimization prototype number critical components application evaluate performance potential application running mercury system 
system architecture mercury system architecture illustrated 
associated disk controller reconfigurable logic provides computing capability close proximity data flowing disk drive 
configuration data need flow bus memory bus memory memory bus processor cache prior processed 
initial processing data happens locally data stored disk 
reconfigurable logic implemented field programmable gate array fpga 
application functionality divided portion executes reconfigurable hardware portion executes processor 
sense application deployment classic components hardware software codesign problem need map application elements multiple computational resources fpga processor 
unique aspect mercury system designed specifically high volume data applications 
computational resource better suited repetitive simpler operations large data set positioned closer data source computational resource better suited complex operations smaller data volume logically farther away data source 
application set matched mercury system architecture pipeline disk data reconfigurable logic firmware application module firmware socket disk controller bus bus cache bridge 
mercury system architecture processor memory bus main memory consumes high data volume input reduces data volume smaller set truly interesting application performs higher level processing smaller set 
previous illustrated system number text search applications 
explore similarity search application blastn properties match capabilities mercury system 
illustrates vision system architecture limited prototyping series implementations progressively closer exactly match architecture depicted 
earliest prototypes ata drives severely speed limited disks 
prototypes built set rpm ultra scsi drives organized raid configuration 
configuration demonstrated sustained read performance greater mb sec continuous gb reads 
prototype fpga infrastructure currently parallel disk controller bus desired serial configuration limits throughput fpga 
demonstrated sustained data throughput greater mb sec disk array fpga 
follows refer computations deployed fpga firmware computations deployed processor software 
facilitate deployment applications fpga developed firmware socket interface provides consistent environment development firmware applications modules 
data disk array delivered reconfigurable logic firmware socket outbound data reconfigurable logic delivered main memory processor access software 
description ncbi blastn section describes open source version blastn distributed national center biological information ncbi 
ncbi blast numerous biological research labs serves engine ncbi popular hits day web blast service 
shown ncbi blastn functionally organized pipeline stages word matching ungapped extension gapped extension 
inputs pipeline query sequence database consisting string dna bases 
base typically characters total denote uncertainty special properties certain bases 
dna sequences including special characters represented bits base ncbi blastn chooses compress sequence database bits base 
compression minimizes storage bandwidth cost unable process special characters pipeline 
input sequences word matching ungapped extension gapped extension 
pipeline stages ncbi blast algorithm stage blastn pipeline implements progressively sophisticated expensive computations identify biologically meaningful similarities query database 
stage blastn discovers word matches query database 
word match string fixed length called mer occurs query database 
significantly similar sequences frequently share mer match matches occur frequently chance unrelated sequences 
word match filtered stage tries extend ungapped alignment query database 
ungapped alignment may contain mismatched bases consists primarily matching base pairs 
ungapped alignments matching base pairs discarded remainder filtered stage extends gapped alignments permit mismatches localized insertion deletion bases 
final operation stage gapped alignments sufficiently matching base pairs reported user 
stage blastn compute intensive stage discards substantial fraction inputs received previous stage 
volume data processed stage gradually decreases 
table quantifies data reduction stage pipeline pi represents probability output stage word match stage alignments stages generated individual input stage 
stage measures number matches dna base read database 
stages highly effective reducing data volume stage 
note query length increases rate matches output stage stage increases raising workload stage 
performance predictions follow consider throughput individual stages pipeline throughput entire pipeline 
throughputs comparable normalized units input bases second database 
executing single computational resource software running single processor average compute time input base expressed ti compute time stage input item base match alignment stage normalized throughput 
reduction measurements ncbi blastn taken experiments generate timings section 
final similarities details blastn stage table 
match rate pipeline stages query size stage stage stage bases facilitate comparison firmware design briefly describe implementation ncbi blastn stage 
implementation requires default length mer match 
due speed advantages matching bits time full bytes mer match implemented phases 
checks nonoverlapping bit byte lookup table succeeds tries extend partial match bases adding matches direction 
mer matches occur close query database arisen underlying biological similarity 
avoid having stages expend effort discover similarity twice ncbi blastn implements redundancy elimination filter stage 
determining matches mer parameterized distance 
second eliminated region database considered stage pipeline 
performance ncbi blastn quantify performance ncbi blastn general purpose cpu measured execution time default parameters ghz pentium pc cache size kb gb ram running linux 
compared database containing mouse genome removing repetitive sequence queries various lengths selected random human genome 
cpu time measured separately pipeline stages 
length typical query sequence blastn application dependent 
example short dna sequence obtained single laboratory experiment may genome genome comparison query genomes billions bases long 
general blast implementation support largest computationally feasible query length accommodate long individual queries support optimization query packing multiple short queries concatenated processed single pass database 
conversely queries longer maximum feasible length may broken pieces processed separate pass database 
experiments tested queries lengths simulate different applications blastn assess impact query length performance firmware implementation 
reasonable upper bound query size ncbi blastn standard parameters generates mer word matches chance rate approaching match base read database 
timings averaged queries length query running time averaged identical runs blastn 
table gives distribution time spent various stages ncbi blastn varying query sizes 
included confidence intervals level 
time spent stage dominated time spent stages pipeline time spent stage negligible 
stages computationally intensive stage efficient filter discards input leaving stages comparatively 
table 
percentage pipeline time spent stage ncbi blastn query size bases stage stage stage measured running times experiments size mouse genome database computed throughput database second achieved ncbi blastn pipeline varying query sizes 
results shown row table 
throughput heavily dependent query length 
explain observation predicted filtering efficiencies pi pipeline stage distribution running times stage estimate average time spent process base stage word match stage ungapped alignment stage 
results shown remaining rows table 
overhead input remains constant stage decreases stage cost base stage increases linearly query length 
growth cost derives linear increase expected number word matches base occur purely chance absence biologically meaningful similarity 
table 
summary performance results software runs ncbi blastn query size units throughput sec stage time base sec base stage time match sec match stage sec alignment empirical performance results ncbi blastn pipeline clearly demonstrate stage performance bottleneck target speedup moving firmware 
firmware implementation stage firmware implementation stage reflects functionality stage ncbi blast attempt implement functionality mechanisms 
design decomposes stage illustrated 
initial implements prefilter bloom filters middle determines query position mers database successfully pass bloom filters hashing final performs redundancy elimination 
bloom filters blast word matching hash lookup redundancy eliminator 
division blast stage word matching prefiltering bloom filters bloom filter probabilistic algorithm quickly test membership large set multiple hash functions hash single array bits 
filters described burton bloom :10.1.1.20.2080
bloom filters find uses networking applications summary caches intrusion detection 
shows process programming mer querying membership 
programming filter amounts setting bits memory location obtained hash functions 
query bloom filter yields match memory locations vector obtained hashing query contain 
mer programming query checking hashes hashes bit vector 
bloom filter operation detail prefiltering scheme yield false negatives yields false positives rate determined number mers programmed amount memory available length memory vector 
rate modeled nk number mers programmed filter amount memory available bits number hash functions false positive rate readers referred details implementing bloom filters fpgas 
function available memory length query string shown 
false positive rate decreases exponentially linear increase memory relatively small amount memory kbytes able provide negligible false positive rate 
universal hashing schemes described affordable terms logic chip 
false positive rate bases bases bases bases bases bases bases memory kb 
variation false positive rate memory size prefiltering scheme effective firmware software store memory vectors chip block rams calculate hash functions parallel look locations memory vector parallel 
hash lookup implementation word matching firmware employ open address double hashing scheme 
note employ comparison byte boundaries case ncbi blastn 
hash function obtain position valid mers query eliminates false positives prefilter 
location mer database sequence hashes contains mer number times appears query sequence locations query sequence 
hashing mer database false positive eliminated comparing mer stored data structure 
hash table stored sram read random location single clock cycle 
pipeline various steps obtain effective rate match clk 
redundancy filter ncbi blast method filtering redundant alignments works software desirable firmware 
firmware redundancy filter removes redundant seed matches fly requiring feedback stage 
dth diagonal dynamic programming matrix set cells 
word match located single diagonal 
remove redundant matches filter keeps track word match counting position database diagonal 
current match overlapping close defined parameter previous match discarded 
information required stage filter implemented efficiently firmware 
method redundancy elimination described 
performance analysis assess performance design phases 
assess performance gain relative software stage 
second assess performance design exploits firmware implementation stage continues software implement stages 
discuss benefit gained firmware implementation stage provide performance targets design 
word matching stage firmware target false positive rate prefilter significantly frequency true positives prefilter 
load hash lookups reduced factor output probability stage table 
built firmware prototype prefilters capable consuming bases clk clock rate mhz 
prototype limited query size chip memory requirements large query size 
operationally execute query run pass database firmware stage design times pass comparing query 
results effective throughput queries th throughput queries 
hashing scheme open address double hashing eliminates false positives prefilter 
hash tables stored chip sram abundant memory lookup hash table takes average clock cycle collisions 
hash table redundancy filter prototypes sustain average input rate match clk lookup clk mhz 
hashing scheme redundancy filter operate lower throughput raw input rate prefilter enables slower raw throughput implementation stage support sec 
mercury system infrastructure currently limited approximately mbytes sec input bandwidth support throughput sec stage 
note bits base eliminates potentially significant post processing masked sequences arising ncbi blast bits base 
table compares performance stage firmware software ncbi blastn 
performance blastn mercury system previous section concerned performance individual stage pipeline 
consider pipeline performance 
component pieces described integrated functioning performance numbers follow model predictions 
table 
performance firmware word matching stage vs software throughput speedup query size ncbi blastn stage sec mercury blastn stage sec speedup executing application resource throughput determined minimum throughput achievable resource 
stage executing firmware stages executing software 
case throughput min throughput stage comes table ti compute stage comes table pi probability output stage comes table 
table compares performance blastn executing mercury system performance ncbi blastn 
shown significant speedup stage firmware refer table performance gain limited speedup 
due fact performance blastn mercury platform limited stage 
initial task deploying stage firmware high throughput rate successful application suffers limitations imposed remaining portions application 
table 
performance mercury blastn vs software ncbi blastn throughput speedup query size units ncbi blastn sec mercury blastn sec speedup software compute time match stage table maximum pipeline throughput sustained stage normalized units input bases second database 
query sizes approximately sec greater input rate supported firmware version stage 
concerned stage bottleneck performance system 
attention concentrates performance stage stage performance impacts performance application 
modeled min 
model input representing speedup stage attributable implementing firmware 
idea help set performance target firmware implementation stage understanding implications stage performance application performance 
plots throughput application function potential speedup various query sizes 
lower throughput stage throughput limited directly performance stage 
increasing performance stage performance improves throughput reaches limit imposed stage point saturates 
system throughput sec query query query stage speedup 
predicted throughput mercury blastn improved stage performance plots speedup entire application function performance gains stage query sizes 
speedup relative software implementation 
achieve modest performance gains stage implementing firmware performance improves software implementation approximately orders magnitude 
system speedup query query query stage speedup 
speedup mercury blastn improved stage performance related stated earlier alignment important problem motivation faster motivated significant 
research groups academic environments proposed alternative approaches problem 
hardware implementations smith waterman dynamic programming computation reported literature non reconfigurable asic logic reconfigurable logic 
enhancements focus entirely smith waterman algorithm understandably highly optimized 
analysis blastn pipeline shows significant reduction data reaching smith waterman stage application stage 
solutions greatly accelerate blastn 
compare solution existing high commercial systems 
existing commercial systems tm rely asic logic 
systems limited non reconfigurable designs implemented inflexible application designs easily updated exploit improvements microchip fabrication allowed general purpose processors exponentially faster time 
contrast systems reprogrammed tackle diverse applications simply newer faster fpgas minimal additional design 
commercial products rely asic technology tm tm solution 
highest tm cpu linux cluster performs blastn throughput sec query 
mercury blastn stage implemented firmware predicted throughput sec query 
tm nodes approximately twice throughput mercury blastn node 
tm solution uses fpga approach improve performance blastn 
solution throughput rate sec query 
throughput comparable mercury blastn stage firmware processing query length 
design blastn important search application mercury system architecture provides fpga traditional processor computing resources optimized disk data intensive applications 
prototype application components built firmware fpga stage blastn pipeline including addition bloom filter prefilter firmware hash table match redundancy eliminator 
performance comparisons firmware implementation stage original software implementation stage 
addition application performance predicted current version implements stage firmware version deploy stage firmware 
strong impact improvements stage performance application performance proceeding planned firmware implementation stage 
followed full deployment mercury prototype dna sequence data flowing data store fpga stage stage processing performed fpga match results coming stage delivered processor stage computation performed processor 
altschul gish 
local alignment statistics 
methods companion methods 
altschul gish miller myers basic local alignment search tool 
journal molecular biology 
altschul madden sch zhang zhang miller lipman 
gapped blast psi blast new generation protein database search programs 
nucleic acids research 
bloom :10.1.1.20.2080
space time trade offs hash coding allowable errors 
cacm may 
andrei broder michael mitzenmacher :10.1.1.5.4863
network applications bloom filters survey 
citeseer nj nec com html 
chamberlain cytron franklin andr 
system exploiting truly fast hardware data search 
proc 
int workshop storage network architecture parallel os pages september 
www com 
dally supercomputing streams 
proc 
supercomputing conf november 
praveen krishnamurthy todd sproull john lockwood 
deep packet inspection parallel bloom filters 
ieee micro 
praveen krishnamurthy david taylor 
longest prefix matching bloom filters 
proceedings conference applications technologies architectures protocols computer communications pages 
acm press 
singh dynamically reconfigurable analysis 
proceedings 
li fan pei cao almeida andrei broder 
summary cache scalable wide area web cache sharing protocol 
ieee acm transactions networking 
gibbs genome sequence brown norway rat yields insights mammalian evolution 
nature 

gene matching 
twelfth international field programmable logic application conference 

systolic filter fast dna similarity search 
proceedings ieee international conference application specific systems architecture processors 
hirschberg karplus 
kestrel programmable array sequence analysis 
proceedings ieee international conference applicationspecific systems architecture processors pages 

searching genetic databases splash 
ieee workshop fpgas custom computing machines pages 
dally ahn owens 
programmable stream processors 
ieee computer august 
lander initial sequencing analysis human genome 
nature 

speeding genome computations systolic array 
siam news 
national center biological information 
growth genbank 
www ncbi nlm nih gov genbank html 
www com 
pevzner waterman 
multiple filtration approximate pattern matching 
algorithmica 
ramakrishna fu 
performance study hashing functions hardware applications 
proc 
int conf 
computing information pages 
reidel faloutsos gibson nagle 
active disks large scale data processing 
ieee computer june 
smith waterman 
identification common molecular subsequences 
journal molecular biology march 

www com 
initial sequencing comparative analysis mouse genome 
nature 
west chamberlain zhang 
fpga search engine unstructured database 
proc 
nd workshop application specific processors pages december 
yamaguchi maruyama 
high speed homology search fpgas 
pacific symposium biocomputing pages 
zhang chamberlain west white 
massively parallel data mining reconfigurable hardware approximate string matching 
proc 
workshop massively parallel processing april 

