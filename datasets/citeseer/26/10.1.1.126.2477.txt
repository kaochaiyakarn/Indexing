vulnerabilities analysis matt bishop department computer science university california davis shields ave davis ca note presents new model classifying vulnerabilities computer systems 
model structurally different earlier models decomposes vulnerabilities small parts called primitive conditions 
hypothesis examining systems conditions detect vulnerabilities 
preventing conditions holding prevent vulnerabilities occurring know vulnerability exists 
formal basis model 
informal experimental method validation non secure systems described 
model accurately describes existing systems guides development tools analyze systems vulnerabilities 

problem statement errors computer systems programs called bugs 
studies analyzed origins bugs decrease number bugs system test informally verify prove formally verify lack bugs program 
tools bounds checking compilers dynamic debuggers profilers programmers check specific bugs program 
methodologies stepwise refinement breaks process design implementation set steps simplify refinement problem solution 
techniques technologies bugs exist 
bugs enable users violate site security policy called vulnerabilities security holes holes short 
vulnerabilities omnipresent 
system fielded programming errors configuration errors operation errors allowed unauthorized users enter systems authorized users take unauthorized actions 
efforts eliminate flaws failed miserably attempts patch vulnerability increased danger 
designers implementers rarely learn mistakes part security holes rarely documented open literature 
security holes arise inconsistencies errors design implementation operation maintenance 
inconsistencies occur requirements security policy axiomatic definition term secure developed external factors concern phrased poorly misunderstood interpreted consistently 
example suppose policy states electronic mail confidential 
mean sender address recipient address confidential 
designer transport mechanism may assume expect user agent encode sender recipient names 
designer user agent may expect transport layer encode sender address recipient address pulling source destination addresses 
failure protect addresses may violate security policy causing vulnerability 
theme vulnerabilities analysis devise classification set classifications enable analyst information desired set vulnerabilities 
information may set signatures intrusion detection set environment conditions necessary attacker exploit vulnerability set coding characteristics aid scanning code data 
specific data classify vulnerabilities depends specific goals classification 
explains multiple classification schemes extant 
serves needs community communities classifier belongs 
problem interest discover vulnerabilities attackers exploit 
seek classification scheme properties 
similar vulnerabilities classified similarly 
example vulnerabilities arising race conditions grouped 
require distinct vulnerabilities 
example vulnerability involving race condition may require untrusted users having specific access permissions files directories 
grouped condition improper dangerous file access permissions 

classification primitive 
determining vulnerability falls class requires answer 
means class exactly property 
example question vulnerability arise coding fault fault ambiguous answer 
scheme question distinct questions coding fault contribute vulnerability environmental fault contribute vulnerability answered ambiguity answers 

classification terms defined 
example coding fault arise improperly configured environment 
argue program checked environment environmental fault simply alternate manifestation coding fault term coding fault valid classification term 

classification code environment technical details 
means social cause vulnerability malicious simply erroneous example valid classes 
requirement eliminates speculation motives hole 
valid classification systems information difficult establish help discover new vulnerabilities 

vulnerabilities may fall multiple classes 
vulnerability rarely characterized exactly way realistic classification scheme take multiple characteristics causing vulnerabilities account 
allows structural different vulnerabilities may lie class indicated expect desire overlap 
remainder organized follows 
section reviews earlier vulnerability classification schemes gives examples vulnerabilities demonstrates meet requirements 
consider scheme analyzing implementation system secure design 
fourth section analyzes scheme determine result applicable systems secure design 
discuss experiments examples requisite analysis 
discuss develop tools detect vulnerabilities prevent exploitation 
conclude open research issues summary 
section reviews goals characteristics previous classification schemes explains inadequate needs 

prior major studies classified security flaws 
risos study focused flaws operating systems program analysis pa study included operating systems programs 
interestingly classification schemes similar classes flaws mapped 
studies classification schemes results 
risos pa schemes take level abstraction point view account 
classes broadly defined non primitive overlapping requirements 
aslam study extended approached classification slightly differently software fault analysis :10.1.1.5.7001
decision procedure determines class soft ware fault placed 
suffers flaws similar pa risos studies 
section contains review pa risos aslam classification schema 
show security flaws may classified multiple ways schemes 

risos risos research secure operating systems study defines classes security flaws 
incomplete parameter validation failing check parameter array index range array 
inconsistent parameter validation routine allowing shared access files accepts blanks file name file manipulation routine routine revoke shared access accept 
implicit sharing privileged confidential data sending information modulating load average system 
asynchronous validation inadequate serialization checking file access permission opening non atomically allowing process change binding name data check open 
inadequate identification authentication authorization running system program identified name having different program name executed 
prohibition limit able manipulate data outside protection domain 
exploitable logic error preventing program opening critical file causing program execute error routine gives user unauthorized rights 
ambiguity classes indicates vulnerability may multiple classifications example passes pointer address supervisor space kernel routine changes tuple flaw incomplete parameter validation prohibition limit 
symptom problem classes taxonomy 

pa neumann presentation study organizes classes flaws show connections major classes subclasses flaws 
improper protection initialization enforcement improper choice initial protection domain incorrect initial assignment security integrity level system initialization generation security critical function manipulating critical data directly accessible user improper isolation implementation detail allowing users bypass operating system controls write absolute input output addresses direct manipulation hidden data structure directory file written regular file drawing inferences paging activity improper change time check time flaw changing parameter unexpectedly improper naming allowing different objects name resulting confusion referenced improper deallocation deletion leaving old data memory deallocated process reallocated process enabling second process access information failing session properly 
improper validation checking critical conditions parameters leading process addressing memory memory space referencing bounds pointer value allowing type clashes overflows 
improper synchronization improper interrupting atomic operations locking cache inconsistency improper sequencing allowing actions incorrect order reading writing 
improper choice operand operation unfair scheduling algorithms block certain processes users running wrong function wrong arguments 
problem classification breadth categories 
pa classification vulnerabilities may fall multiple classes vulnerability falls different classes depending level abstraction analysis conducted 

aslam model taxonomy wad developed organize vulnerability data stored database 
consequently far detailed focuses specifically unix faults implementation level 
operational fault configuration error 
object installed incorrect permissions 
utility installed wrong place 
utility installed incorrect setup parameters 
environment fault 
coding fault 
condition validation error 
failure handle exceptions 
input validation error 
field value correlation error 
syntax error 
type number input fields 
missing input 
extraneous input 
origin validation error 
access rights validation error 
boundary condition error 
synchronization error 
improper inadequate serialization error 
race condition error classification scheme study precise pa risos studies 
provides depth classifying implementation level flaws faults language study 
appears meet requirements implementation level scheme clearly lacks high level categories classify design errors 
fact suffers severe problem 

problems models motivate discussion problems consider buffer overflow attack 
internet worm publicized flaw continues recur implementations browsers world wide web versions smtp agent sendmail 
finger protocol obtains information users remote system 
client program called finger contacts server called fingerd remote system sends name characters 
server reads name returns relevant information 
server check length name finger sends storage space name allocated stack directly return address routine 
attacker writes small program machine code obtain command interpreter pads bytes 
sets bytes return input buffer rightful caller main routine case 
entire byte buffer sent daemon 
bytes go input storage array excess bytes overwrite stack locations caller return address status word stored 
input routine returns code spawn command interpreter 
attacker access system 
gets local variables return state info return address main parameter gets input buffer main local variables message gets local variables return state info address input buffer program invoke shell program invoke shell main local variables flaw depends interaction processes trusted process fingerd second process attacker 
fingerd flaw attacker writes name long 
processes operating system services communicate 
processes involved flawed process attacker process operating system service routines 
view flaw considered perspective may differ view considered perspective 
example point view flawed process flaw may incomplete validation parameter process adequately check parameter passes operating system system call 
point view operating system flaw may prohibition limit parameter may refer address outside process space 
classification appropriate 
levels abstraction muddy issue 
lowest level flaw may say inconsistent parameter validation successive system calls check argument refers object 
higher level may characterized race condition asynchronous validation inadequate serialization problem 
higher level may seen exploitable logic error resource object deleted 
levels abstraction defined differently system contributes ambiguity 
example system psos 
follows higher level implying precisely abstraction hierarchy level occurs 
relationship distance levels important context 
respect fingerd process pa taxonomy buffer overflow flaw clearly type flaw problem checking parameters leading addressing memory memory space referencing bounds pointer value 
respect attacker process finger program flaw type operand data written connection improper specifically long arguably fingerd 
operating system point view flaw type flaw user allowed write directly process space return address execute treated data 
note architectural problem 
moving higher layers abstraction storage space return address variable object 
operating system point view flaw type parameter specifically return address changes unexpectedly 
fingerd point view issue execution data input improper validation specifically validating type instructions executed 
flaw type flaw 
highest level system changing security related value memory executing data executable 
type flaw 
valid characterization implementation level architectural design system requires return address stored stack just input buffer allocated stack hardware supporting unix operating system word protection page segment system requires process able write read stack 
respect fingerd process risos taxonomy buffer overflow flaw clearly type flaw problem checking parameters allowing buffer overflow 
respect finger process flaw type limit input data sent ignored violated 
operating system point view flaw type flaw user allowed write directly process space return address execute treated data 
moving higher storage space return address variable object 
operating system point view flaw type parameter specifically return address changes unexpectedly 
fingerd point view issue execution data input improper validation specifically validating type instructions executed 
flaw type flaw 
highest level type flaw system changing security related value memory executing data executable 
due nature protection model unix operating system valid characterization implementation level 
aslam taxonomy flaw class point view attacking program boundary condition error limit input data ignored class point view xterm program boundary condition error process writes valid address boundary class point view operating system environment fault error occurs program executed specific machine specifically stack machine 
aside absent explicit decision procedure flaw placed class access rights validation error code executed input buffer data return address outside process protection domain altered 
taxonomy satisfies decision procedure criteria uniqueness 
risos classifications somewhat consistent levels abstraction improper authorization classification runs layers abstraction 
point view plays role classification applies operating system point view levels process view 
usefulness classification scheme purposes 

summary problems previous flaw classification consistent different levels abstraction 
ideally flaw classified levels possibly refinement lower levels 
problem ameliorated somewhat overlap flaw classifications refines flaws flaws may shift class 
classes distinct leading problem 
point view problem 
point view affect class flaw falls examples show clearly 
tool classification classify flaws triple classes fall 
problem classes partitions overlap clear class component triple 
short examples demonstrate pa risos aslam classifications meet need taxonomies meet uniqueness defined decision procedure requirement 

relationship vulnerabilities specifications formal top level specification mathematical description computer system 
states specific conditions system design implementation meet 
ideally specifications shown consistent mathematical statement security policy system enforce 
systems psos gemini adopted approach 
dod trusted computer system evaluation criteria requires formal design proved conform 
assuming proofs correct security systems breaks level code verification 
proving implementation system correct conforms design implying transitivity implementation correctly conforms current capabilities 
straightforward approach express constraints mathematical invariants verify mathematically implementation invalidate invariants time 
informal version step uses formal testing 
property testing checks see program violate set specifications 
follows akin process assumes specifications initially available 

vulnerability analysis existing systems exercise verifying systems secure design 
systems meet criteria 
section discusses generalization technique larger class systems secure secure 
note general procedure locate vulnerabilities arbitrary systems undecidable problem rice theorem 
focus specific system details 

informal approaches describes security constraints system 
systems security policy may formal written specific informal unwritten ambiguous 
case certain rules emerge policy security constraints 
example user authenticated new identity changing identity 
data entered buffer may written buffer 
user bishop may alter passwords users 
part implicit security policy general sites 
third example site specific policy rule identifies single user special 
system vulnerabilities violate set rules 
formal methods mathematically determine rules determine formally program violates 
informal method determine rules explicit implicit security policy determine experimentally program violates 
unfortunately aspects system requirements implicit rules 
procedure identify implicit explicit rules system security policy 
derive set characteristics identify properties non secure programs specifically vulnerabilities 
include conditions needed properties result security breach 
alternate view vulnerabilities arise combination specific conditions environment specific properties program 
characteristics deduced vulnerabilities akin deducing security policy system oracle states actions secure non secure far realistic attempt deduce implicit security policy way system works 
people agree violates security 
disagree statement secure list requirements considered secure correct 
definition characteristic vulnerability condition hold vulnerability exist 
represent vulnerability set characteristics called characteristic set 
classify vulnerabilities characteristics sets 
meets criterion similar vulnerabilities classified similarly due characteristics consideration characteristic sets 
meets fifth criterion single may fall multiple classes 
remaining criteria require definition specific characteristics 
definition set characteristics sound characteristics independent subset set characteristics elements complement derived subset 
purposes require characteristic set sound 
simplifies classification lead minimal sized characteristic sets 
definition set characteristics complete respect system cs characteristic sets vulnerabilities system cs composed elements characteristic set associated vulnerability contains characteristics possible minimal 
hypothesis 
vulnerability unique sound characteristic set minimal size 
call set basic characteristic set vulnerability 

prevention vulnerabilities exploiting vulnerabilities cs system set 
complete set characteristics respect cs 
characteristic set selection elements vulnerabilities basic characteristic sets respectively 
vulnerabilities common characteristic 
elements basic characteristic sets property fails hold vulnerabilities conditions exploit exist 
determining similarity vulnerabilities exercise set intersection 
consider vulnerabilities define distance follows definition vulnerabilities units apart suggests procedure locate vulnerabilities look characteristics 
detected condition described characteristic negated 
single vulnerability consideration vulnerabilities characteristic non exploitable 
expand approach section 
review hypothesis want show 

hypotheses hypotheses wish test follows determine basic characteristic set vulnerability 
give set characteristic conditions cause vulnerability exploitable 
determine set characteristics set vulnerabilities generate characteristics examining known vulnerabilities system 
characteristics examine system vulnerabilities proceed iteratively 
size complete set characteristics system smaller set vulnerabilities 
intuition suggests obvious set vulnerabilities similar power set set characteristics 
combination characteristics creates vulnerability 
mean characteristics create large number vulnerabilities 
defining characteristics appropriately may create template large set characteristics example section 
case analysis system characteristic matching template may uncover different instances template characteristic 
characteristic suggests tool analyze system system programs determine condition exists 
true implication set tools designed look close vulnerabilities vulnerabilities known exist 
hypothesis suggests characteristics quite detailed enable automated manual search 

hypothesis assuming hypotheses correct analysis eliminate vulnerabilities 
simply look situations characteristic conditions hold negate 
reflections follow 
consider issue level abstraction 
low level characteristic path variable reset spawning checked easily automatically 
slightly higher level characteristic read environment execute reset safe value spawning broader susceptible mechanical checking 
higher level protection domain subprocess properly initialized design flaw clearly previous 
levels abstraction absorbed characteristics 
section contains examples 
characteristics inclusive lower level characteristics clear containment relationship 
hypothesize relationship holds complete sets characteristics different levels abstraction 
solves problem previous classification schemes 
point view bit trickier 
currently believe attribute characteristic 
essence vulnerability different characteristic sets points view 
area clearly needs study 

examples follows vulnerabilities discuss breakdown 
assume unix system environment 

data stack buffer overflows fingerd attack discussed earlier example 
breakdown follows 
failure check bounds copying data buffer 

failure prevent user altering return address 

failure check input data correct form user name network address 

failure check type words executed data loaded instructions 
invalidating conditions prevents attacker exploiting vulnerability 
attacker overflow bounds control flow continue text instruction space shift loaded data 

return address altered input overflows bounds control flow resume correct place 

user name network address valid sequence machine instructions unix systems cause program crash security breach 

system execute data return stack cause fault 
implemented negation data stack executed 
data heap leaving vulnerable attack 
sensitivity characteristics hosts clear 
systems ascii text valid instructions systems condition holds 
conditions relevant 
systems negated attack fingerd succeed 
approximate negation determining type location words memory 
words stack data may executed 
words may instructions executed 
words data words stack holds 
race conditions involving unix file accesses program xterm program emulates terminal window system 
reasons relevant discussion run omnipotent user root unix systems 
enables user log input output file 
file exist xterm creates log file owned user file exists xterm checks user write opening file 
root process write file system extra check necessary prevent user having xterm append log output say system password file gain privileges altering file 
suppose user wishes log existing file 
code fragment opens file writing access usr tom ok fd open usr tom append passwd passwd data usr access usr tom ok 
tom data passwd data passwd data open usr tom write 
usr tom semantics unix operating system cause name file loosely bound data object represents binding asserted time name 
data object corresponding usr tom changes access open open open file checked access 
interval attacker deletes file links system file password file name deleted file 
xterm appends logging output password file 
point user create root account password gain root privileges 
race condition conditions 
process interval checking condition file name opening file file name file satisfying condition 

attacker alter binding file object name 
characteristic specific file accesses 
general version characteristic delimit window opportunity check file attributes action taken file prior check 
generalizing requires looking general objects just file objects altering bindings properties addition names 
specificity specific version demonstrate levels abstraction 
buffer overflows race condition exploitable characteristic hold 
see bishop detailed discussion race conditions arising file accesses :10.1.1.140.3711

internet address spoofing initiating tcp connection steps illustrated 
host sends syn host syn contains sequence number host responds syn ack supplying sequence number incrementing sequence number 
host ends handshake ack containing sequence number 
ip spoofing refers host sending tcp initiation sequence packets ip address source address 
ensure ignores receives second message receive send rst packet connection reset 
characteristics attack 
sequence number victim predictable 

victim receive reply packet purported peer 
characteristics host impersonate purported peer syn ack received predict 
think communicating false prevent receiving traffic simply guess false reply packet receives interrupt connection cause state transition terminate way connection note quite general 
best known instance attack attacker flooded ports purported peer prevent receiving syn ack packet victim 
illustration point view point view purported victim vulnerability 
incoming messages block access ports finite time interval 
attacker point view subsumed 

summary examples demonstrate characteristics known vulnerabilities 
demonstrate aspects characteristics techniques derive 
consider implement tools mechanisms 

tool development central classification scheme put 
goal develop classification scheme lead tool development 
analysis leading characteristics composing vulnerabilities need build tools look characteristics 
aspect layers abstraction relevant 
tools automated run little guidance characteristics precise defined 
tools run human intervention analysis characteristics may broader 
example characteristic attacker alter binding file object name characteristic simple check recursive scan permissions unix file system characteristic incoming messages block access ports finite time interval difficult 
automate check finite resources analyzing time strategy considerably difficult 

research questions discussion vulnerability unique sound characteristic set minimal size 
system complete set characteristics small scanning opposed vulnerabilities advantageous quicker effective 
determine basic characteristic set vulnerability 
development questions effective tools look characteristics locating previously unknown vulnerabilities 
general characteristics tools look require minimal human intervention 


abbott security analysis enhancements computer operating systems institute computer sciences technology national bureau standards gaithersburg md 
hollingsworth protection analysis project final report information sciences institute university southern california marina del rey ca 

landwehr taxonomy computer program security flaws 
computing surveys 


neumann computer system security evaluation 
national computer conference 


aslam taxonomy security faults unix operating system department computer sciences 
purdue university west lafayette 

software vulnerability analysis department computer sciences 
purdue university west lafayette 


tour worm 
winter usenix technical conference 
usenix association 

structure multiprogramming system 
communications acm 


neumann provably secure operating system stanford research institute menlo park ca 


ko fink levitt 
automated detection vulnerabilities privileged programs execution monitoring 
tenth annual computer security applications conference 


fink levitt 
property testing privileged programs 
tenth annual computer security applications conference 


fink discovering security safety flaws property testing department computer science 
university california davis ca 

bishop checking race conditions file accesses 
computing systems 


heberlein bishop 
attack class address spoofing 
nineteenth national information systems security conference 

baltimore md 
pursuit capture kevin america wanted computer man 
new york ny warner books 
