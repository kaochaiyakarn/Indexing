formalising protocol recording provenance grids paul groth michael luck luc moreau school electronics computer science university southampton pg mml moreau ecs soton ac uk scientific business communities rely grids problemsolving mechanisms 
communities requirements terms provenance 
provenance documentation process necessity apparent fields ranging medicine aerospace 
support provenance capture grids developed implementation independent protocol recording provenance 
describe protocol context service oriented architecture formalise entities involved state machine dimensional state transition diagram 
techniques sketch liveness property system 
grid system coordinates computational resources subject centralized control standard open general purpose protocols interfaces deliver non trivial qualities service 
coordinating diverse distributed computational resources grids address large scale problems scope local homogenous systems 
scientific business communities rely grids problem solving mechanisms 
communities requirements terms provenance documentation process leads result 
necessity provenance apparent wide range fields 
example american food drug administration requires provenance drug discovery kept long drug years 
chemistry provenance detail procedure material generated allowing material patented 
aerospace simulation records provenance data required kept years design aircraft 
financial auditing american act requires public accounting firms maintain provenance audit report years issue report united states public law 
medicine provenance organ vital effective safe 
just examples requirements provenance science business 
provenance important physical record case purely silico scientific process 
need provenance information emergence grids infrastructure running major applications problem arises fully addressed grid community record provenance grids 
ad hoc solutions developed address lack provenance recording capability grid infrastructure 
unfortunately means provenance systems interoperate 
incompatibility components prevents provenance shared 
furthermore absence components recording provenance development applications requiring provenance recording complicated onerous 
drawback current solutions inability provenance shared different parties trusted parties example case auditing application run 
availability provenance related software components goal sharing trusted provenance information achieved 
address problem standards developed provenance information recorded represented accessed 
standards allow provenance shared applications provenance components grids making provenance information accessible valuable 
summary paucity standards components techniques recording provenance problem needs addressed grid community 
step addressing problems 
length assume reader familiar grids virtual organisations vo web services service oriented architectures soa 
rest organised follows section presents set requirements provenance recording system address 
section outlines design provenance recording system context service oriented architectures 
key element system provenance recording protocol described section 
section actors system formalised formalisations section derive important properties system 
section discusses related followed 
requirements step determining requirements placed provenance recording system defining kind provenance information system support 
context service oriented architecture identified types provenance information system record basic requirements gathering provenance interaction actors provenance actor 
types provenance information background number requirements provenance recording system needs address 
requirements include trust preservation security scalability generality 
case recording provenance client service interaction client service trust system maintains accurate representation interaction 
trust system able preserve provenance extended period time 
importance provenance organisations system secure internal external threats 
provenance recording system ability deal large amount wide variety provenance information needs scalable general customizable 
requirements mind detail system recording provenance soa 
soa provenance recording shows typical workflow architecture 
client initiator invokes workflow enactment engine turn invokes various services workflow specified initiator 
essence architecture broken types actors clients invoke services services receive invocations return results 
minimum architecture system record provenance 
requirements section identified types provenance information provenance recording system support provenance interaction actors provenance actors 
support gathering types provenance information aforementioned architecture system introduces trusted third party provenance services shown 
third party provenance services see third party provenance services key fulfilling requirements outlined 
case trust requirement client service need trust maintain accurate provenance information interaction 
need trust provenance service mutually agree 
provenance services support preservation placing burden preservation provenance service clients services maintain provenance information scope application run 
recording provenance multiple provenance services eliminates central point failure lowering demand placed particular provenance services 
imagine federations provenance services actively managing provenance information order maximise storage network resources improving scalability 
multiple provenance services promotes competitive environment clients services choose provenance service best suits needs terms factors trust reliability possibly cost 
advanced architecture support supporting typical workflow enactment architectures system supports advanced architectures shown 
order maintain provenance provenance services client needs inform original provenance service uses new provenance service 
example service inform provenance service provenance service invoking service 
creates link provenance services followed order provide entire provenance trace application started client initiator 
triangle interaction provenance services central recording interactions clients services system 
interaction client service consisting negotiation parties invocation result party required submit view interaction common provenance service 
architecture considers multiple actors inter client initiator workflow enactment engine service service service typical workflow architecture record provenance provenance service invoke client service result record provenance interaction client service provenance service action actors reduced common triangular pattern interaction described shown 
reduction possible system simple interaction client service foundation service oriented architectures 
additional requirement interaction recorded third party 
interaction actors governed provenance recording protocol detail 
case recording views triangular nature interaction client service provenance service stems requirement client service submit view interaction provenance service 
basic view consists input output data service 
party submits provenance service data sends receives interaction 
requirement vital recording accurate picture client service interaction allows provenance service verify interaction checking views parties agree 
requirement problems arise 
example case client party recording interaction provenance service service completely dependent client submit provenance 
fact submission provenance service evidence client invoked service client choose record client initiator provenance service workflow enactment engine provenance service service service service workflow architecture provenance recording client initiator provenance service workflow enactment engine fig 
architecture diagrams service provenance service service service service architecture provenance recording services invoking services interaction 
system provenance service know service invoked service submits information 
problem exists case service party submitting provenance service 
note requirement parties submit views prevent collusion parties allow provenance service detect parties disagree record interaction 
actor provenance mainly discussed system supports recording information interaction actors architecture 
system supports submission provenance information actor 
information include workflow enactment engine runs disk processing power service computation 
typically information provided actor verified interaction provenance 
simple mechanism store actor centric provenance tying interaction provenance 
basis provenance recording system interaction client service provenance service 
interaction specified provenance recording protocol 
recording protocol prep phase protocol consisting negotiation invocation provenance recording name notation fields propose pro activityid extra reply reply activityid extra invoke inv activityid data extra result res activityid data extra record negotiation rec neg activityid extra record negotiation rec neg ack activityid record invocation rec inv activityid extra data record invocation rec inv ack activityid record result rec res activityid data record result rec res ack activityid submission finished sf activityid submission finished sf ack activityid additional provenance ap activityid extra additional provenance ap ack activityid fig 
protocol messages formal notation message parameters 
tion phases 
negotiation phase allows client service agree provenance service store trace interaction 
phase protocol enters invocation phase client invokes service receives result 
synchronously provenance recording phase client service submit input output data provenance service 
data received provenance service termination phase occurs 
discussing messages parameters prep consider phases detail 
model protocol asynchronous message passing system communication expressed outbound message followed return message 
return message result service invocation reply service negotiation provenance service received particular message 
lists fourteen messages protocol 
messages divided groups client service interact provenance service 
propose reply invoke result messages belong group record submission finished additional provenance messages belong second 
usage message described detail phases protocol 
message parameters shown detailed 
activityid parameter identifies exchange client server 
contains identifier generated client distinguish exchanges called service comprising invocations pertain result client originator generates identifier unique threadid allows clients parse multiple interactions service timestamp time message sent clock sender client identifies client service identifies service 
parameters data contains data exchanged client service extra envelope contain messages related unrelated protocol allowing extended indicates total number messages entity sends provenance service list approved provenance services contains provenance service entity accepts rejection token 
prep divided phases negotiation invocation provenance recording termination 
negotiation process client service agree provenance service 
typically client presents list provenance services trusts service propose message 
service extracts propose message selects provenance service list 
service replies response message containing selected provenance service rejection parameter 
negotiation modelled simple request response protocol extensible extra parameter 
entities encode complicated messages envelope providing means complex negotiations take place allowing custom provenance recording advanced negotiations 
client service negotiated agreed provenance service skip negotiation phase protocol 
message informing service previously agreed provenance service enclosed extra envelope invoke message 
provenance service needs informed agreement service client record negotiation message 
invocation client successfully negotiated service invoke service receive result invoke message result message 
tried limit impact prep normal invocation extra parameters required sent activityid ex tra envelope 
activityid necessary identify exchange relation provenance stored service extra envelope allows protocol negotiation phase protocol extension 
provenance recording key phase protocol 
discussed previously client service required submit copies sent received messages provenance service 
submission done various record messages client service sending record negotiation record invocation record result messages 
messages inform sender message received provenance service 
record negotiation message contains list provenance services client proposed provenance service accepted service 
record invocation record result messages contain entire data transmitted client service perspective entities 
requirement data submitted allows provenance service complete view exchange 
order delay service invocation submission process done totally asynchronous fashion example client send record invocation message provenance service receiving result message service 
protocol requires copies invocation sent provenance service minimises performance penalties asynchronous submission adding benefit storing complete provenance exchange 
cater actor provenance interaction provenance additional provenance message 
message actor record provenance actors architecture enclosing extra envelope information pertinent 
important capability linking provenance records provenance services described section 
note constraints data submitted provenance service allowing wide variety applications supported 
termination final phase protocol termination 
protocol terminates provenance service received expected messages client service 
client service notified termination submission finished message blocking call waits expected messages received client service 
number expected messages determined parameter submission finished message 
asynchronous nature protocol submission finished message sent time negotiation phase 
actors activityid threadid timestamp client service activity identification elements rn ri rr sf constructed follows rec neg activityid extra rn negotiation messages rec inv activityid extra data ri invocation messages rec res activityid extra data rr result messages sf activityid sf submission finished messages ap ap ap 
apn additional provenance messages rn ri rr sf messages ap ap set sets additional provenance messages cn rn client negotiation messages ci ri client invocation messages cr rr client result messages csf sf client submission finished messages sn rn service negotiation messages si ri service invocation messages sr rr service result messages ssf sf service submission finished messages cs activityid cn ci cr csf ap client records client message store ss activityid sn si sr ssf ap service records service message store cs ss set provenance services characteristic variables client service ai activityid rec neg rn rec inv ri rec res rr sf sf ap ap apl ap client cs service ss extra psa data nid tid threadid ts timestamp client client service service nm ai sid nid tid ts client service ai sid sid ai nid nid ai tid tid ai ts ts ai client client ai service service sf ai nm sf ai ai sf nm nm service ai rec neg rec inv rec res sf apl service ai rec neg rec neg service ai rec inv rec inv service ai rec res rec res service ai sf sf service ai apl apl notation applies client ai 
initial state pi client ti service ti client ti ai service ti ai fig 
provenance service state space consider provenance service service client act response messages send receive 
understand actions actors complementary formalisation techniques chosen nature actors involved 
represent provenance service state machine asm 
second state diagram show possible responses client service 
techniques assume asynchronous message passing 
importance internal functionality provenance service lends asm formalisation importance external interactions client service state transition diagram formalisation appropriate 
provenance service 
provenance service plays central role prep 
far recording concerned interaction outside world simple receives messages sends 
initiate communication purpose simply store messages 
formalising provenance service explain accumulation messages dictates actions 
detail actions model provenance service asm behaviour governed set transitions allowed perform 
notation allows form transition limits complexity granularity previously describe distributed counting algorithm 
asm state space state space machine shown 
instance provenance service tuple consists element client message store cs element service message store ss 
tables defined functions argument type activityid consist sets messages client service 
set messages defined union sets rn ri rr sf ap sets excluding ap turn defined inductive types constructors named messages 
hand ap set contains additional provenance messages 
note ss cs defined ap ap power set ap informally shows number additional provenance messages stored activityid 
state space asm described initial state set transitions 
contains initial state space summarised empty client service message stores 
arrow notation function argument returning result 
client ti service ti take activityid argument return empty state 
asm rules transitions asm described rules form rule name condition condition pseudo statement pseudo rules identified name number variables rule operates 
number conditions met order rule fireable 
new state achieved applying pseudo statements state met conditions rule 
execution rule atomic rule may interrupt interleave executing rule 
maintains consistency asm 
shows asm transition rules 
receive neg transition rule receipt record negotiation message 
specifies behaviour provenance service receiving entity rec neg message containing activityid parameter extra envelope 
condition placed rule states rule fire rec neg message part communication channel communication channel point point communication mechanism provided implementation 
condition satisfied message consumed receive pseudo statement 
rule determines client service puts rec neg message correct field appropriate table 
table update rec neg ack sent send 
notify rule called tests see messages received client service 
messages received submission finished message sent 
test achieved invoking function complete ai checks fields accessed ai null 
transitions listed follow pattern receive neg rule consuming message placing correct field appropriate table 
entire set rules www org protocol rules htm receive neg ai psa rec neg ai psa receive rec neg ai psa ai client client ai rec neg rec neg ai psa elif ai service service ai rec neg rec neg ai psa send rec neg ack ai notify ai notify ai complete ai send sf ack ai fig 
state machine rules client service formalise actions client service 
case chosen asm formalism knowledge decision algorithm service selecting provenance service list proposed client 
furthermore want developers free experiment sort algorithm deem best 
want formally investigate actions client service response prep represent entities state transition diagram offers intuitive formal means describe actions client service sent received messages 
shows state transition diagram client service 
contains possible states client service regard prep 
transitions states permitted messages sent received actor 
example transition receipt result message transition sending invoke message case client 
diagram shows possible ways client service send receive messages 
believe formalisations provide firm basis developers implement protocol 
asm state transition diagram allow developers understand interaction client service provenance service prescribing particular implementation technique 
gives developers opportunity choose implementation mechanisms fit needs 
properties formal representations client service provenance service show important property prep liveness 
distributed systems common refer safety liveness properties denote bad happen eventually happen 
case prep liveness ultimately submission finished message sent client service 
show protocol live assumptions system implementing prep 
assume client service live eventually send receive messages designated protocol 
assume communication channel live 
sent messages delivered addressed party 
assumptions show client service eventually interaction provenance service invocation service 
state transition diagram show termination property holds 
assumption finite number additional provenance messages represented cycles graph 
assumption determine bound number messages client service exchange 
excluding additional provenance messages calculate bound enumerating paths start state state graph selecting longest twelve transitions messages long 
fixed bound finite number additional provenance messages client service send receive finite number messages terminate 
order provenance service able send submission finished determine complete record interaction client service 
complete function defined earlier 
show prep satisfies liveness property 
client service terminate actors send messages provenance service represented state machine fire appropriate rule corresponding receipt message 
rules turn update state record referenced activityid ai invoke notify rule 
notify checks complete record exists ai submission finished sent 
related provenance recording investigated mygrid www mygrid org uk project 
goal mygrid provide personalised workbench perform silico experiments 
mygrid allows users capture provenance data address general architectures protocols recording provenance :10.1.1.10.2710
ruth system recording provenance context data sharing scientists 
scientist notebook records digitally signs input data manipulations data 
data shared peer peer communication scientist refute provenance data digital signature process 
goal system generate virtual community scientists accountable data 
focuses mainly trust aspect notebook system protocols distributing storing provenance data 
focused data provenance databases 
buneman distinction tuples database contribute result provenance location source database contributed result provenance 
precise definition provenance xml hierarchy re start state state databases 
service transition key 
receive pro 
send positive reply 
send negative reply 
receive inv 
send res 
send rec neg 
receive rec neg ack 
send rec inv 
receive rec inv ack 
send rec res 
receive rec res ack 
send sf 
receive sf ack 
send ap receive ap ack client transition key 
send pro 
receive positive reply 
receive negative reply 
send inv 
receive res 
send rec neg 
receive rec neg ack 
send rec inv 
receive rec inv ack 
send rec res 
receive rec res ack 
send sf 
receive sf ack 
send ap receive ap ack fig 
state transition diagram client service moreau argued infrastructure support recording provenance grids trial implementation architecture demonstrate mechanisms handling provenance data recorded 
extends important ways 
consider architecture allows provenance services composite services 
secondly model implementation independent protocol recording provenance context service oriented architecture moreau implementation specific service oriented architecture 
necessity storing maintaining tracking provenance evident fields ranging biology aerospace 
science business embrace grids mechanism achieve goals recording provenance important factor construction grids 
development common components protocols standards construction process faster easier interoperable 
stepping stone development common provenance recording system implementation independent protocol recording provenance prep 
research funded part epsrc project gr 
buneman khanna 
tan 
data provenance basic issues 
foundations software technology theoretical computer science 
buneman khanna 
tan 
characterization data provenance 
int 
conf 
databases theory icdt 
foster 
grid 
point checklist july 
lawley decker luck payne moreau 
automated negotiation grid notification services 
ninth int 
europar conf volume lncs pages 
springer verlag 
moreau agents bioinformatics grid 
lee matsuoka sato editors proc 
rd ieee acm cc grid workshop agent cluster grid computing pages tokyo japan 
ruth xu bhargava regnier 
middleware reputation trust distributed data sharing communities 
proc 
nd int 
conf 
trust management oxford uk volume lncs 
springer 
moreau 
recording reasoning data provenance web grid services 
int 
conf 
ontologies databases applications semantics volume lncs 
zhao goble greenwood wroe stevens :10.1.1.10.2710
annotating linking browsing provenance logs science 
proc 
workshop semantic web technologies searching retrieving scientific data october 
