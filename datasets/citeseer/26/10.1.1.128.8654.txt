section cedar file system cedar file system cfs workstation file system provides access workstation local disk remote file servers single hierarchical name space 
cfs supports group cooperating programmers allowing manage local naming environments share consistent versions collections software 
david gifford roger needham michael schroeder personal workstations emerged important computing resource 
workstations applications design automation text processing electronic publishing educational comput ing scientific computing program development 
essential part personal workstation system method storing information 
pri mary strength time sharing technology came ability share stored information users system 
personal workstation achieve goal shared information including file system capable accessing remote files local area network attachment 
file systems capable performing remote file accesses commonly known distributed file systems 
distributed file systems late time variety distributed file systems developed 
discuss major types distributed file systems con trast different approach taken design experimental cedar file sys tem cfs 
cfs developed part cedar experimental programming environment xerox palo alto research center 
des distributed file system challenging task goals realized high performance remote file access low amortized system cost high reliability high availability information protection ability scale size system coordination concurrent access shared data 
acm explore goals met case study cfs 
contrast distributed file systems cfs provide access shared mutable files 
provides storage naming system immutable files updates resulting new versions immutable files 
immutable file file modified created 
examine immutable files practice case study cedar environment 
types distributed file systems distributed file systems classified major types remote disk systems block level access systems file level access systems 
remote disk system implements method shar ing disk drives number ions communicating disk requests local area net 
remote disk servers implement access col disk blocks called remote disks imposing structure disk blocks 
file system structures directories implemented client workstations 
order guarantee file system consistency mutable remote disks single user time 
sharing mutable infor mation possible 
read remote disks users typically store shared system libraries 
example remote disk system sun microsystems nd network disk system 
block level access system implements method sharing files number workstations com requests file blocks local area network 
file block contiguous portion file usually fixed length 
block level access servers implement access blocks named remote files 
communications acm march volume number user read write file time semantics concurrent file access defined particular file system 
simplest imple newcastle connection pro vide direct access blocks files named collection file system instances 
apollo domain file system ll sun microsystem nfs im prove performance adding local caching file blocks 
nfs protocol permits file blocks bytes read written file arbitrary byte position 
locus block level access file system addresses consistent sharing locking transaction mechanisms shared mutable files 
provides replication files 
combination functions locus produces interface semantics implementation quite complex 
sprite system caches file blocks remote servers main memory implements cache consistency protocol workstations guarantees block read request return data contained write re quest block 
file level access system implements method sharing files number workstations trans entire files local area network 
file level access servers implement efficient transfers files implies clients prepared buffer retrieved files storage medium 
cfs file level access system deals exclusively able shared files 
cfs updating shared files accomplished creating new file versions describe application layer system keep consistent views proper versions col related files 
itc distributed file system adopted transferring caching files cfs adds location transparency files 
itc file system maintains traditional client model shared mutable files 
possible employ hybrid approaches 
example sun workstation employs remote disk system nd block level access system nfs 
hybrid systems types distributed file systems provide distinct advantages remote disk systems eliminate need local disk provide shared access immutable data 
eliminating need local disk reduces cost size power consumption workstation 
block level access systems permit mutable blocks shared workstations 
block level access servers implement directory systems confused concurrent access safe multiple users create delete mutate blocks files 
high performance networks file servers block level access system cause multiple server requests required access entire file 
block level access systems eliminate need local disk 
file level access systems permit mutable files shared workstations 
entire files retrieved fewer access file servers nec essary 
individual blocks files change rapidly practical fetch entire files 
additional contemporary distributed file systems surveyed lg discusses number areas depth including concurrency control atomic actions communication aspects file servers 
approaches cache consistency distributed file systems cache information retrieved remote servers order improve performance 
cache set local copies remote data 
maintaining local copies frequently required remote data cache allows file system reduce number remote server accesses 
caches contain exact copies remote data say caches consistent 
possible caches inconsistent remote data changes corresponding obsolete local cache copies discarded 
problem keeping local cache copies date changes remote data known cache consistency problem 
variety approaches cache consistency problem implemented 
example sun microsystems nfs keeps cache main memory remote file blocks accessed 
remote file block written kept main memory seconds written back server remote file block read kept main memory seconds server contains newer information 
timing figures represent engineering balance tween system overhead true cache consistency 
maximum delay time infor mation written workstation visible workstation approximately seconds seconds data appears server plus seconds workstations notice server 
mechanisms record level locks certain sun applications guarantee data 
itc file system caches entire files accessed cache consistency algo rithm invoked file open close operations 
itc file system modified file written server file close operation called 
file opened itc file system guarantees provide latest version file stored remote server 
itc file system guarantees file level consistency specify updates kept multiple users write file 
optional mechanisms advisory locks access shared mutable files 
sprite file system caches remote file blocks workstation memory guarantees provide current data response block read operation 
accomplishes remote procedure call cache consistency protocol file servers workstations 
sprite uses non write file ing policy order maximize workstation perfor special section march volume number communications acm special section minimize server loading 
non write means file blocks updated immediately written back corresponding server 
sprite cache consistency protocol permits workstations cache blocks files open write 
workstation opens file write workstations informed cache blocks file forward read requests file server 
sole workstation writing cache file blocks forward write operations server 
workstations open file write caching disabled workstations 
cfs takes different approach previous systems eliminates cache consistency problem altogether 
cfs takes different approach previous systems eliminates cache consistency problem alto gether 
described remote files cfs immutable 
file cached change 
eliminating cache consistency immutable files simplify job file system meaning file operations 
expect complexity dealing sharing reappear part system 
complexity reappears version manage ment relatively easy manage application software 
case sun nfs itc file system cfs directories mutable directly read written file servers 
direc inconsistent concurrently updated process 
furthermore directory inconsistent tion crashes finishes updating directory 
simplest way keep directories consistent file servers perform directory operations behalf workstations 
overview cedar file system point motivate approach embodied cfs provide detailed description seman tics 
section snapshot cedar system describe certain features added time 
cfs designed support group programming context collection personal workstations local disk 
workstations connected shared file servers local area network shared information kept file server computers 
functionality required support group program ming efforts enabling simple efficient distrib implementation 
file system supports group cooperating programmers perform important jobs 
permit programmer manage private file naming environment 
second help group share consistent versions software subsystems developed parallel 
cfs addresses requirements providing workstation hierarchical name space includes files local disk file servers 
local files private workstation 
remote files ble workstations 
cfs supports simple copying model file sharing 
client cfs creates file local disk 
file available sharing client transfers file server 
giving remote name 
client workstation access file remote name workstation local disk 
basis consistency sharing atomic creation remote file 
distinctive feature cfs supports immutable files 
immutable file important properties name may reused contents may altered 
name im mutable file signifies fixed contents file file container variable information 
remote files cfs immutable remote files shared 
see sharing immutable files easy support consistent sharing easy im distributed file system 
distinctive feature cfs supports immutable files 
key features cfs local names remote files caching remote files local disk 
features decouple management local nam ing environment workstation manage ment space local disk 
previous file system local file name exist 
possible thousands local file names refer files stored local disk 
files referenced automatically retrieved remote server placed cache 
decoupling local naming local disk allowed con trol local naming environment existing software tools regard amount local disk space available 
cfs differs previous distributed file systems simplicity performance primary goals changing semantics traditional file systems cfs design 
forcing sharing file interface described earlier reflect intended servers eliminates workstation code responds 
semantics carefully selected provide file requests workstations servers 
communications acm march volume number sharing immutable files means tion cache machinery ignore possibility re mote files changing 
simple atomic updates server directories support consistent sharing elimi need transactions long term locks file servers 
files servers replaced entire units atomic updates file ways self consistent 
addition reduce load shared file servers reduce complexity workstation cache machinery cfs transfers caches files individual file blocks 
naming cedar file system cfs provides uniform hierarchical naming structure local remote files 
complete file name consists server root directory zero ries simple name version 
server part names file server stores file 
example ivy cedar cfs name fifth version program source file stored file server ivy 
empty server part means file local workstation 
example cedar mesa name copy file workstation 
cfs generates version part new file names 
new version successor highest existing version version exists 
version part file name argument cedar system operation existing file may completely specified variable omitted 
variables allowed low meaning lowest existing version high meaning highest existing version 
omitted version part defaults low high depending operation invoked low delete high open 
sort version naming appeared 
local working directory provides naming envi ronment programmer works 
cfs prepends current local working directory name file name argument start character 
search rule mechanism cfs 
application cedar command shell imple ments search rules cfs 
cfs uses form symbolic links called attachments file names idea introduced ctss developed multics inexpensive give local name remote file 
cfs forms attachment local name remote file storing remote file name local directory entry 
forming attachment viewed lazy copying done mode copy operation 
access re mote file delayed file contents associated local name needed client 
symbolic links file systems target file cfs attachment may turn inaccessible needed 
file systems target cfs attachment immutable change 
attachments useful separate man agement local name space transfer storage files 
attachments practical ways set complete local naming environment programming task files named eventually get 
support immutable files cfs enforces immutability remote files may altered created deleted 
existing local files may modified feature special purposes updating local log files 
tools editor compiler treat local files immutable creating new file versions writing results disk 
swallow file system design explored benefits table versions 
potential problems immutable files increased disk space increased disk alloca tion activity 
version file complete copy simplicity cfs attempt reduce storage space keeping track differences ver sions 
local files cfs problems gated automatically limiting number versions kept 
local name property called keep numeric value specifies number ver sions local name keep 
automatically processed keeps appeared alto operating system lo feature got little 
cfs local name created keep inherited highest existing version set argu ment operation doing creation 
keep processing occurs creating new version local name 
case cfs enumerate exist ing versions decreasing order 
keep versions encountered enumeration additional ver sions deleted open 
disk file deleted version reused new version created 
example existing version file named example 
bcd keep client open creating example bcd cause example bcd deleted disk file reused new file example bcd keeps typically set source files derived files 
files particular workstation read average number versions file workstation close 
cfs provides automatic mechanisms deleting unneeded versions remote files 
client tools exist delete files remote direc tory 
names immutable files reused cfs 
time new version immutable file created assigned name prefix old version new version number 
file servers accessed outside cfs possible cause forget current ver sion number counter file 
safeguard reused version numbers causing confusion system allows file creation time included file name arguments cfs operations 
creation time defined local clock reading contents file generated file property cfs propagates file copied renamed 
special section march volume number communications acm special section tion time specified file name argument cfs searches file version creation time 
version part name argument treated hint version check 
tion ti remote file may recorded attach ment 
acceptable multiple names bound immutable file contents name bindings broken 
copying deletion reasonable operations immutable files 
cedar file system operations cfs access file servers units files 
new remote files may created copying existing files 
local files held open clients read written smaller units 
readers writer locking provided workstation synchronize access local files different programs 
report includes appendix describes cedar file system operations detail abstracts selected operations 
begins line description operation pre sents operation name operation arguments square brackets right arrow operation results square brackets 
name keep bytes creation time procedure returns information file designated name 
ing version part name defaults high indicating highest existing version 
speci fied version part name treated merely hint information returned file specified creation time searching versions named file necessary 
false obtained remote server returned bytes 
name ot prepended name form file name 
open name openfile open procedure returns object perform read write operations specified file 
open name wanted 
results remote file opened file named opened 
specifies local lock set 
opening file writing causes creation time updated 
local name attached remote file opened writing attachment broken contents re mote file copied local disk file local name 
attempting open remote name writing produces error 
false local cache searched resolve symbolic versions high low 
create name pages keep openfile new local file specified name created opened writing 
files created file servers see copy 
creation time set 
version part may included name 
cfs assign ver sion number successor existing high version versions exist 
copy keep attach copy procedure copies file file 
attach true copy create attach ments described copy file contents 
delete name name resolved complete file name named file deleted 
error occurs file currently open station 
remote deletions occur directly remote server 
subsequent name bound deleted file result error 
delete flushes name cache 
name keep name local keeps remote servers implemented contain version part 
setting keep deletes versions new keep 
setting keep leaves current keep keep processing 
df application cedar file system primary application cfs support cedar software management tools known df sys tem permits cedar programmer easily facilities provided system 
df system develop major cedar appli cation programs cedar system provides environment development management large software systems 
tools df system provide way define share static snapshot software subsystem 
definition list compo nent file names recorded df file 
components may source files object files documentation files df files 
df file value tem 
programmer partic ular df file identify components subsystem certain find set file contents repre sents consistent version subsystem 
table files provided cfs directly support snap shot view subsystems 
particular version sub system shared immutable version df file names immutable versions component files 
tools df system establishing acm march volume number features cfs tools df system manage local naming environment share consistent versions multi component subsystems programmers 
tool called bring incorporate subsystem version defined df file local naming environment 
tool called generate share df file describes new subsystem version 
df file identities source files object files df files part subsystem specified remote file names version numbers 
tool uses cfs copy listed component file file server current local working directory component 
local name target copy operation simple name part remote name listed df file 
collapsing simple names way generate name conflicts ce dar avoided careful manual name choice 
finished subsystem component df file appears current working directory highest version simple name 
remote files referred df files specific version 
periods system development df file subsystem may refer high version df file subsystem 
high provides automatic access version 
part system re lease process high replaced spe cific version number creation time 
attachments allow significant optimizations 
cedar file system transfer contents missing files workstation disk fairly expensive proposition 
retrieving entire cedar system took hour frequently exhaust avail able local disk space completing 
mode copying cedar file system simply associates local names remote file names 
files df files need special section correspondence remote files named df files read transferred 
local file names workstation 
fast fill local disk 
programmer works local naming df files frequently specify creation times environment 
facilities cfs attaching local complete names component remote files 
names remote files allow setting local naming includes creation times copying correspon ments 
extra information provides files file servers 
presence ance incorrect component versions actual files local disk managed independently version numbers df files local cache remote files 
correct version numbers file servers gotten scrambled 
object files produced compiler contain simple names creation times object files read compilation 
debugger pre tools fhe df system provide way define share static sents names creation times cfs opening object files local working directory read symbol tables 
snapshot software subsystem 
la shows example working directory simple name df attached previously created remote df file 
user issues command df opens df reads contents attached remote df file 
local working directory remote file system df ivy cedar df attachment contents la attachment df file lb illustrates created attachments mesa mesa components listed df file 
creation attachments effect presence absence remote files cache 
point ivy cedar df certain cache read contents 
programmer changes subsystem components 
usually presents single component file names version parts arguments editor compiler tools 
compiler binder refer object files names 
current working directory naming local working remote file directory system df ivy cedar df attachment contents mesa ivy cedar mesa attachment contents mesa ivy cedar mesa attachment contents lb 
attachments created br march volume number communications acm special section local working remote file directory system df ivy cedar df attachment contents mesa 
ivy cedar mesa atta contents mesa 
ivy cedar mesa attachment contents mesa contents lc 
new version source file environment single component names bound collection source object files define particular subsystem 
lc supposes programmer modified mesa say editor 
editor stored modified source file new local version mesa 
new local file transferred file server 
local working remote file directory system df 
ivy cedar df attachment contents mesa 
ivy cedar mesa attachment contents mesa 
ivy cedar mesa attachment contents mesa 
ivy cedar mesa attachment contents df ivy cedar df attachment contents id attachments created new consistent version subsystem un der development created tool move changed components back home file server 
changed file transferred back remote server existing local name attached new remote file 
addi tion new version df file created list components new subsystem version copied remote server 
id shows state file system run 
created df new local file copied file server attached local name df new remote file 
maintains consistency multi component subsystems viewed clients 
action copy updated df file server 
file creations atomic file servers subsystem clients retrieve components df file client doing progress get old new mixture 
knowledge new version subsystem available commu implicitly higher level df files outside system word mouth computer mail system programmers may continue old version subsystem old version df file deleted file server 
example shows pattern cedar file system works system modeling tools support group programming 
cfs access remote files df files 
example document display programs accept remote names cfs retrieve cache files displayed 
users facility poke remote file servers directly tion df files 
implementation performance cedar file system cedar file system implemented cedar stations collection existing file servers 
cfs consists entirely workstation code 
ne perfor mance optimization existing file serv ers optimize file status requests optimiza tion added cfs operational 
block diagram cfs lines ing communication components 
shown cfs requires implementation file pro tocol ftp access remote file servers 
depends lower level file system workstation called file allocates sectors local disk disk files named unique identifiers 
cfs uses disk files implement local files cached remote files 
cfs implements local file name hier index cache remote files tree keyed complete file names 
tree stored disk file 
tree entry local file contains physical location file clients cfs cedar file system local directory hierarchy cache remote files ftp file access file servers local disk files 
structure cfs implementations communications acm march volume number local disk 
entry attachment contains name possibly creation time associated remote file 
creation time speci fied attachment created 
entry tree cached remote file contains physical location cached file copy local disk 
megabyte local disk tree uses ap byte pages depth approximately entries larger disks corre larger trees 
file servers cfs uses interim file system ifs file servers common xerox research development community 
cfs accesses ifs servers internet 
file server provides shared hierarchical directory 
file transfer protocol new files stored existing files read renamed deleted 
operations files 
file names include version numbers new ver sion file stored file server automatically gen new version number name 
file servers allow directories enumerated formation existing files retrieved 
cfs uses access control system provided ifs implements simple access control list pro tection mechanism 
users identify user name password cfs workstation 
credentials passed ifs part file transfer protocol 
cfs designed atomic file transfer operations way servers provide locks held file operations 
updates file server directories indivisible serialized 
transferring new file server assigning new version number entering name file server directory appear single act 
step fails trace attempt re mains visible 
atomicity implemented sim ple mutual exclusion file server 
cfs designed atomic file transfer operations way servers provide locks held file operations 
furthermore transaction facilities cover multiple server opera tions needed cfs depends clients keep track files hold cur rent information 
sole task cfs report unique file name store contents file 
explain application information build robust directory system 
order improve system availability perform ance key directories automatically replicated multiple servers 
key directories presently rep include cedar system collection user utilities called cedar de sign automation tools 
replication directories automatically performed demon wakes regular intervals 
demon examines designated master server replicated directory incre mentally copies files added rep lica servers 
note immutability server files greatly simplifies demon task 
client point view replicated directory stored pseudo server list servers directory replicated server list access replicated directory 
practice servers list examined order located available 
file caching cfs uses portion local disk occupied local files cache remote files 
requests open remote files reading satisfied cache 
performance effects client tell requested file cache transferred remote server 
cache managed automatically approximate lru strategy 
caching immutable files easy 
remote files immutable changes occur file servers need reflected workstation caches 
clearly properties contents existing remote files change creation new remote files need reported 
determining flush file cache left file machinery 
cfs starts regis ters procedure file called remove remote file cache 
independent process file calls procedure keep set num ber pages free local disk default free pages 
file call procedure synchronously client allocation request request satisfied set free pages available disk 
result allocation re quest satisfied synchronously flushing cache 
having file trigger cache flushing helps control disk fragmentation 
file allocator requires reasonably sized runs pages call cache flusher syn available necessary 
virtue scheme cache flushing allows file share disk dynamically multi ple clients 
example alpine transactional file system run workstation uses file provide storage data base 
alpine demands bigger file data base file call cfs flush cache room 
remote file deleted cfs re moved cache workstation caused deletion 
special section march volume number communications acm special section file open count versus hundreds milliseconds cedar file system performance shows response time distribution open operations observed compilation large software subsystem provided suggest elapsed time required open operations typical activity 
workstation computer dorado 
file server computer alto bytes memory multiple oom byte disks 
server workstation transfer bps experimental ethernet 
file server shared cedar system files approximately workstations 
file server load measurement known precisely times recorded represent ative daily 
noted distribu tion bimodal times second 
times correspond remote files ready cached local files 
starting sec ond remote files retrieved 
re sponse time distribution files centered approximately seconds 
time open spent waiting disk file server 

histogram file opening times discussion feel cfs successful limited goals directly address needs primary clients df system 
cfs par tially addresses goals outlined ning certain respects fall short perfect system 
example cfs address goal allow ing workstation operation file servers un available 
realize goal require predicting needs order specify remote files keep resident cache 
better approach develop highly reliable file servers replication 
immutable remote files replication easy manage 
potential goal addressed cfs eliminating workstation disks long term private file storage 
private files cause users dependent particular workstation 
considered implement scheme entire private workstation environment copied private directory file server 
saved communications acm march volume number environment allow user move workstation allow user recover failure workstation disk 
partially developing design mechanism con software management tools reduced need automatic backup 
backup working files remote private directories 
important function cfs provide com plete consistent local naming environment development software subsystem 
ret local locking mechanism provided cfs works purpose changed 
problem names contents files locked 
result name deleted local naming environment corresponding file open 
applications depend cedar garbage collection mechanism close files files stay open needed 
tidying local naming environment deleting unneeded names thwarted 
better allow name deletion occur ahead content deletion happening automatically clients file open 
scheme necessary lock name content file separately 
df files look lot directories provide way name files 
tempting consider inte grating df files file system directories provide single naming mechanism 
approach consolidation starting file servers named files unique identifiers df files provide mapping simple names uid directories workstation file system 
design necessary retain immutability df file versions support consistent sharing 
file system ries immutable change require new versions directories path back root name space 
practical system probably require immutable variable directories 
design requires exploration 
cam bridge file server uid named files multiple file name indexes automatic deletion files provide ideal base exploration 
cache possible operate cedar pro grammer workstation effectively file cache 
mbyte cache lowers significantly load file servers 
experience single file server running alto support ce dar programmers dorado workstations times faster alto 
appears system scale configurations servers workstations suffering serious loss performance reliability 
system works file servers workstations separated gateways slower long distance internetwork links connected local area network 
cfs started conservative design intended meet specific set needs program develop ment activities cedar 
features previous file systems versions keeps symbolic links selected combined unproven fea tures creation time naming sharing im mutable remote files caching files meet requirements understood specific applica tion 
cfs continues enhanced active today integral part cedar pro gramming environment 
retrospect combination cedar file sys tem semantics higher level tools main taining consistent versions shared software tems worked extremely 
sufficient local storage believe unnecessary appli cation shared file servers provide mutable files block time access files longterm locks transactions 
acknowledgments 
cedar interim file system precursor cfs developed david gifford help larry stewart explored auto matically managed cache remote files local workstation disk 
design implementation cedar file system done primarily michael schroeder bob advice andrew birrell mark brown butler lampson roy levin roger needham eric schmidt larry stewart paul ed taft 
comments andrew birrell mark brown john guttag cynthia hibbard ed lazowska roy levin paul mcjones greg nelson greatly im proved initial versions 

ct daley multics virtual memory concepts design 
commun 
acm may 

bobrow 
paged time sharing system pdp 
commun 
acm 
mar 

boggs pup internetwork architecture 
ieee trans 
commun 
apr 

brown taft alpine file system 
trans 
camp 
sys 
nov 

marshall randell newcastle con world unite 
softw 
pmt 
exp dec 

ed 
ctss programmer guide 
nd edition 
mit press cambridge 
mass 

dion cambridge file server 
acm op 
sys 
rev oct 

donahue integration mechanisms cedar 
acm notices july 


lampson 
pier processor high performance personal computer 
rep csl 
xerox palo research center palo alto calif jan 

lampson 
sproull open operating system single user machine 
proceedings th acm symposium operating system principles 
dec 
acm new york 
pp 


leach architecture integrated local network 

sel 
areas commun 
sac nov 

metcalfe boggs ethernet distributed packet switching local computer networks 
commun 
acm july 

nelson welch caching sprite network file system 
acm trans 
comp 
sys 
feb 

reed swallow distributed data stor age system local network 
local networks computer com 
north holland amsterdam 
pp 

special section march volume number communications acm special section 
adding garbage collection runtime types strongly typed statically checked 
concurrent language 
rep csl 
xerox palo alto research center palo alto calif july 

satyanarayanan itc distributed file system princi ples design 
proceedings th acm symposium ing system principles orcas island washington dec 
pp 


schroeder gifford needham caching file system programmer workstation 
rep cls 
xerox palo alto research center palo alto calif nov 
schmidt 
controlling large software development distrib environment 
rep cls 
xerox palo alto research center palo alto calif dec 

file servers network distributed systems 

sum dec 

swinehart dc zellweger hagmann structure cedar 
acm sigplan notices 

teitelman cedar programming environment midterm report examination 
rep csl 
xerox palo alto research center palo alto calif june 

thacker alto personal computer 
rep csl 
xerox palo alto research center palo alto calif aug 

walker locus distributed operating system 
acm op 
sys 
rev oct 

walsh lyon sager overview sun network file system 
proceedings usenix winter conference dallas texas 
pp 


networking sun workstation 
part 
sun micro 
mountain view calif 
feb 

swinehart structural view cedar programming environment 
acm trans 
prog 
lang 
syst 

oct 
cr categories subject descriptors computer communi cation networks distributed systems network systems software engineering programming environments operating systems file systems management distributed file systems directory structures 
general terms design experimentation performance additional key words phrases cache consistency file replica tion immutable file system modeling authors addresses 
david gifford laboratory computer science technology square cambridge ma 
roger need ham computer laboratory corn exchange st cambridge cb qg 
michael schroeder digital equipment systems research center lytton st palo alto ca 
permission copy fee part material granted provided copies distributed direct cial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm special interest groups technical interests 
acm special interest groups ad areas 
members sig receive benefits ex devoted special interest 
fol lowing publications available membership special subscription 
sigact news automata computability theory letters ada newsletter cassette edition newsletter print cassette editions newsletter computers society sigchi bulletin computer human interaction sigcomm computer communication review data communication newsletter computer personnel research sigcse bulletin computer science education quote quad apl bulletin computer uses education sigarch computer architecture news architecture computer systems sigda newsletter design automation sigart newsletter artificial asterisk systems intelligence documentation database business data processing newsletter biomedical computing newsletter computers physically handicapped print edition siggraph computer graphics computer graphics sigir forum information retrieval sigmetrics performance evaluation review measurement evaluation newsletter microprogramming sigmod record management data signum newsletter numerical mathematics newsletter office information systems sigops operating systems review operating systems sigplan notices programming languages sigplan fortran forum fortran sigplan lisp pointers newsletter security 
audit 
control bulletin symbolic algebraic manipulation simulation modeling pc newsletter small personal computing systems applications sigsoft software engineering notes software engineering newsletter university college computing services communications acm march volume number 
