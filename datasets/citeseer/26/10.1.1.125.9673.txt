gap practical anonymous networking krista bennett christian lab department computer sciences purdue university krista org christian org www gnu org software gnunet 
describes anonymity achieved gnunet framework anonymous distributed secure networking 
main focus gap simple protocol anonymous transfer data achieve better anonymity guarantees traditional indirection schemes additionally efficient 
gap new perspective achieve anonymity 
new perspective possible relax requirements stated traditional indirection schemes allowing individual nodes balance anonymity efficiency specific needs 
anonymity aspect gnunet framework secure peer peer networking 
gnunet framework provides peer discovery link encryption message batching 
gnunet primary application anonymous file sharing 
anonymous file sharing application uses content encoding scheme breaks files blocks described 
blocks transmitted gnunet anonymity protocol gap 
describes gap attempts achieve privacy scalability environment malicious peers actively participating adversaries 
gnunet core api offers node discovery authentication encryption services 
communication nodes network confidential host outside network observe actual contents data flows network 
type data observed packets padded identical size 
availability guarded accounting scheme link authentication require knowledge transactions :10.1.1.30.3785:10.1.1.30.3785
goals gnunet project explore possibilities limitations secure peer peer networking 
achieving privacy significant problem peer peer technology bundled applications 
additional security features needed peer peer networks trusted store sensitive data medical records 
gnunet strict peer topeer network nodes exercising control network 
portions supported sponsors krista bennett christian kind central server open network attacks attackers trying control entities legal challenges threats force operators critical exposed nodes business 
best way guard attacks centralized services 
gap strives achieve initiator responder anonymity relation entities including gnunet routers active passive adversaries responder initiator respectively 
actions involved publishing content indistinguishable involved responding requests responder anonymity covers publisher anonymity gap 
possible peers retrieve content publishers gap 
content migrates network 
responder anonymity broken certainty original publisher identified 
anonymity intermediaries desirable participation protocol internet generally visible powerful adversary 
gap strive hide participation protocol 
gap important adversary correlate action initiating participant 
significant difference gap prior mix protocols traditional mix protocols perform source rewriting hop 
gap mixes specify return address allowing network route replies efficiently 
gap attempt avoid direct network connection initiator responder 
order achieve anonymity important decouple relationship initiator action 
anonymity achieved adversary determine initiator action 
achieved making initiator look intermediary participant merely routing data 
realization allows gap bypass typical restriction indirection anonymous routing protocols require reply takes exactly path request path statically predetermined optimized en route :10.1.1.30.3785
protocols multicasts reply consume large amounts bandwidth 
order understand gap works important realize powerful global passive adversary operation proxy services website anonymizer com generally perceived anonymizing requests customers degenerates situation customers merely provide cover traffic proxy service 
entity proceed reasonable anonymity proxy service actual operator proxy service service 
similar problems arise centralized anonymity systems ones distributed trust provide cover traffic senders receivers 
global passive adversary attack schemes treating set mixes black box simply looking messages going coming initial entry point final exit point 
type network edge analysis impossible peer peer network receivers senders part mix 
anonymizing peer peer infrastructure initiators part mix network 
anonymize responders gap practical anonymous networking part mix network 
typically prefer attack small set publishers large group readers gap approach anonymizing senders receivers potentially broader applicability greater usefulness censorship resistant networking 
anonymity adversarial model communication defined anonymous probability adversary prove probability greater node initiator responder communication 
discussion adversary assumed means interactions nodes protocol determine node initiator 
show certain assertions adversary node gap determine degree anonymity trade anonymity efficiency 
note question system sufficiently anonymous specific application depends entirely application purpose choice may vary 
allows nodes operate efficiently applicable 
important note burden proof put adversary 
adversary identify node prove communication originated 
legal system require initiator disprove origin anonymity essentially illegal 
aside restriction evidence obtained protocol related interactions prove node performed particular action adversarial model gap allows adversary break cryptographic primitives 
adversary assumed see encrypted unencrypted traffic nodes times decrypt encrypted traffic nodes node controlled adversary 
adversary controls arbitrary number nodes network nodes free collaborate band 
adversarial nodes violate protocol behaved participants network 
adversary interrupt communications arbitrary nodes network 
gnunet peer peer network peer willingly joined messages sent machines part overlay network problems exit nodes communicate final recipient part network arise 
adversary described extremely powerful power limited slightly 
reason adversary able control decrypt traffic node sends receives node engage anonymous communication 
true anonymous networks 
order provide user degree anonymity protocol requires node able communicate node controlled malicious adversary 
gap prove adversary bound constraint practice 
fact powerful adversary obeys rule break anonymity gap certain probability degree anonymity provided gap depends strength adversary internal trade offs krista bennett christian individual node chooses take 
note trade negotiated peers impact operation 
determination degree anonymity achieved estimate power adversary essentially guessed 
guess adversary controls communications result order achieve degree anonymity communication may take place 
anonymity gnunet section describes anonymity achieved gnunet gap 
order able evaluate anonymity guarantees gap provides new perspective communications results anonymity described 
scheme employed gap laid guarantees efficiency discussed 
hiding initiator activity consider scenario illustrated 
scenario node receives queries sends 
picture nodes sent queries fig 

hiding exposed node correlate nodes queries traffic analysis reveals sent query 
external adversary tell started communication 
allowed send query twice traffic analysis reveal sent new query merely queries nodes 
sense indirections hide original senders powerful adversaries indirections obfuscate node doing 
scheme tries achieve anonymity observable gap practical anonymous networking open network hide fact node participating 
best scheme guarantee adversary distinguish activity node initiates mere participation protocol 
example demonstrates node hide activities handling traffic nodes 
protocol overview gap protocol consists types messages queries replies 
query consists resource identifier gnunet ripe hash codes node identifier describes reply sent 
reply field primary difference wire format compared protocols freenet crowds reply goes sender query 
time live field included routing purposes 
time live pseudo random initial value decremented routers additional pseudo random components expression 
reply merely data requested 
communication nodes uses link encryption node linked nodes possible 
resource identifier query passed gap application layer 
reply received certain randomized exponentially increasing amount time query retransmitted 
queries searches success guaranteed 
example resource may simply unavailable time query 
application layer responsible deciding give 
node receives query processes query steps 
determine node busy process query 
check includes cpu bandwidth free space routing table 
node busy drop query exit 

determine desired resource available locally enqueue reply sender queue receiver specified query 

decide nodes query sent query live information load accounting information random factor influence decision enqueue sending nodes doing decide replace identifier previous requester local identifier current anonymity goals load local node 
node replaces identifier previous requester identifier associate previous requester query routing table 
choose target nodes enqueue queries 
peers flush individual queues containing mix queries replies random bounded amount time 
krista bennett christian receiving reply look routing table matching query identity receiver 
enqueue reply hand content application layer requests local clients 
copy content local storage migration content considered valuable space available 
discard infrequently accessed content local storage 
send random content network provide background noise network idle boost content migration anonymity guarantees section presents analysis anonymity peers achieve gap 
analysis assumed peers achieve perfect mixing messages queries replies time interval 
perfect mixing sense means adversary timing analysis correlate messages peer receives messages peer sends 
time interval achieved depends delay strategy peer optimal delay strategies mixes scope 
order answer question strong anonymity guarantees indirection provide additional constraints considered 
observation traffic node creates foreign traffic route order obscure actions 
suppose node injects queries system routes queries users 
adversary participate network monitors encrypted traffic see amount data node received amount data sent 
simple adversary determine queries originated probability adversary uses timing analysis possible adversary exclude certain amounts traffic routed long time ago 
interpretation long depends potential delay query may typically face node 
nodes delay queries random amounts time order timing analysis harder 
excessively long delays query useless query equivalent producing noise exception nodes perceive 
suppose adversary actively participating network 
case traffic originated active adversary included adversary knows traffic originate node scrutiny 
point clear assumption node interacts node collaborate adversary trying break anonymity 
zero probability node identified originator 
degree anonymity achieved depends power adversary amount traffic node routes compared amount traffic node generates 
long node routing foreign traffic adversary absolutely certain node originator 
level certainty adversary consider identity gap practical anonymous networking originating node sufficiently established depends entirely specifics application hand 
section discusses participants individually trade anonymity efficiency order degree anonymity provided fit needs individual applications 
trading anonymity efficiency suppose node gap sends query node assume forwards query third node furthermore suppose maliciously uses address return address 
case determine forwarded query eventually send reply directly see 
term indirect node performs source identity rewriting 
forward indicate original sender identity preserved 
fig 

replies notice know certain query originated certain reply originated simply nodes obey protocol indirected query reply 
anonymity depends packets indirect amount traffic changed malicious action 
damaged anonymity hand potentially damaged anonymity 
able tell particular query really originate messages originate sender receive reply 
discern message set messages originate excluding message set increase probability originator messages currently sending 
higher chance guessing traffic originate tell closer intended recipient reply send reply directly reply takes shorter krista bennett christian path total amount traffic produced reduced 
malicious behavior improved efficiency network 
note trade anonymity efficiency effect terms anonymity efficiency 
technique improves bandwidth utilization latency reply saving indirection performance gain higher 
needed communicate may decide send query directly send related queries related sense responses located node reasonable assume closer location document way number hops content decreased speeding download process 
suppose queries sending new queries user 
stated yield probability query originates sufficiently large compared security may required queries replies causes great deal chooses indirect queries forwards queries preserving original sender address probability adversary assign originator query increased implementation implementation gnunet gap available website www gnu org software gnunet 
joining network node wants join network obtain list peers large contain non adversarial node 
node non adversarial sense attacker advertise nodes entirely adversary control case adversary keep track new node doing making sure communicates exclusively adversarial nodes 
new node initial public keys nodes sufficient collaborate adversary 
convenience gnunet automatically download addresses network entry points multiple servers 
node gnunet rsa key pair 
nodes keys exchange bit session keys establish link encryption infrastructure nodes 
blowfish symmetric cipher 
nodes periodically sign current internet address time stamp expiration propagate information public key 
initial exchange public keys occurs node joins exchange public keys encrypted channels 
encoding content gnunet requires related queries download single file completed 
systems queries may related 
queries replies gap practical anonymous networking nodes indirect queries hide queries originate source rewriting queries sent node look uniform 
node uses combination network load factors internal node determine indirect queries 
general network load high node fewer queries assuming traffic hidden 
network load low queries indirected 
queries usually sent group potentially mixed messages content replies peer advertisements 
grouping messages form larger packet introduces delays decreases message overhead 
encrypted packets containing queries indistinguishable packets containing data grouping padding noise equivalent size 
query contains identity node reply sent 
originally address initiator query nodes indirect query change sender identity match 
indirected packets distinguished receiver packets originate node different return address 
node keep track queries indirected send reply node query originally came 
routing probably biggest scalability issue gap 
mix networks avoid issue keeping state encrypted messages 
problem approach requires slow public key cryptography encrypt reply blocks 
query messages replies accomodate encrypted reply blocks 
reply blocks signed increasing number public key operations message sizes subject manipulations malicious hosts prevent nodes properly routing replies 
onion routing addresses issues mixes adding state symmetric keys 
note number anonymizing tunnels onion routing typically smaller number messages gap problem large routing tables significantly smaller case onion routing 
gap decided bandwidth public key operations presumably bottleneck memory routing information 
implementation gap contains various heuristics estimating long keep entries routing table time live importance query 
note downloading large file queries blocks parallelized 
source rewriting optional gap gap malicious behavior described section allowed 
nodes usually increase receive traffic willing able handle 
nodes receive great deal traffic improve performance reducing number packets indirect 
replies krista bennett christian significantly bigger queries behavior improve situation particularly bottlenecks network 
possible behavior exploited attack uses flooding node traffic malicious node tries break anonymity 
seen queries originate attacker count formulas adversary knows come decides amount traffic gets high starts preserve sender addresses queries nodes may decrease far longer protect queries discernible attack applies mixes adversaries dominate traffic mix deduce operation mix 
gap attempts guard type attack dropping queries nodes generating excessive amounts traffic 
choosing node gnunet node receives query decides nodes send query load cpu network local credit rating sender random factor :10.1.1.30.3785:10.1.1.30.3785
number nodes chosen receive query zero 
nodes receive query chosen list nodes node established connections biased random selection process 
selection process biased nodes hash close query metric 
variant algorithm pastry :10.1.1.142.752:10.1.1.126.3062
selection process takes account network activity preference hot paths 
furthermore queries pad messages uniform size making bandwidth wasted transmit random noise 
query sent immediately group nodes 
put buffer queues data sent selected node 
buffer sent full randomized timer goes entirely discarded node decides busy note protocol guarantee reliable delivery 
behavior directly leak information attacker independent original sender fact originator chance receive indirected query 
replies sent back path query took originally potential shortcuts intermediaries perform source rewriting advertise peer receiver reply 
various attacks applied powerful adversary message routing scheme 
attack timing analysis looks time passes query reply 
time estimate distance sender 
gap defends attack introducing random amounts delay query reply step 
furthermore nodes choose routes query random making timing results hard gap practical anonymous networking reproduce :10.1.1.30.3785
freenet content migration caused request constantly changes location content making harder pinpoint exact location 
routing distributed hash tables chord pastry subject attacks adversary predict route query :10.1.1.142.752
adversary likelihood peer route query break anonymity 
gap harder adding significant amounts variability routing process 
method gap employs add variability modify nature cover noise sent peers 
generating injecting noise network peers look lists pending unanswered queries choose queries forward additional hosts host list sent queries peer 
suffices plausible peer receive route query 
disadvantage gap guarantee log steps finding reply 
looping queries hops live time live far field contained query message time live discussed 
field bound extent network query traverses 
particular needed prevent queries looping indefinitely 
deterministic routing algorithms pastry chord problem design loops occur :10.1.1.142.752
random nature routing gap cause queries loop back peer forwarded 
loop detection requirement prevent queries staying network long 
detecting loops simply remembering queries routed routing table feasible routing tables typically unable keep state queries network 
query contains field time live bounds long query routed 
freenet uses similar scheme 
routing algorithm deploys hops live field query 
node path decrements live value reaches 
query forwarded certain probability 
needed prevent adversary sending queries lowest hops live value order see nodes send replies reply determined forwarded queries exceed hops live value drawn nodes reply fact nodes storing requested content 
freenet scheme problematic adversary probes test peer replies certain probability certainty 
content migration peer investigation node storing content attack may adversary knows set correlated queries probe multiple times fresh content 
gnunet block encoding files give adversary easy way produce multiple independent probes run probabilistic attack 
reason gap hops live field 
semantics gap time live field slightly different 
time live field relative time krista bennett christian specifies long peers route replies query 
peer receives query adds time live local time 
new absolute time produce total ordering queries peer receives 
fixed number routing slots assigned latest queries total order 
note relative time live field query negative peer may route queries replaced routing table entry sufficiently old 
total order queries guarantees query loop network 
implementation needs careful routing replies received requests node replying query send replies routing table slot query allocated long plausible node received response peer 
adversary mount attack series queries mi overwrite routing table entry subsequent reply course 
situation victim claim plausible delay short time routing table 
additional delay longer deceive adversary responses query peers obviously routed back adversary routing table entry replaced mis 
gap defends attack sending replies query stayed routing table amount time plausible peer received reply 
node requested content disappears routing table content sent 
noted solution may appear leave system open denial service attacks keep node able route content 
gnunet economic model ensures traffic generated flooding node eventually causes flooded node drop traffic malicious node routing table entries overwritten attack abusive nodes :10.1.1.30.3785:10.1.1.30.3785
measuring anonymity discussion section assumes routing gap sufficiently random prevent adversary establishing node low probability chosen route specific query 
furthermore adversary supposed able correlate queries fact belong file 
assumption reasonable having plaintext file possible correlation 
adversary know exact details file accessed queries correlated 
explanation efficiency traded anonymity section clear degree anonymity gap offers configurable 
node injects query user network indirected transactions surely anonymous 
note parameters 
node determines bandwidth available 
bandwidth quota exceeded ceases perform source rewriting additional traffic 
gap practical anonymous networking chooses anonymous specific download search needs 
currently available traffic may minimal amount background noise available bandwidth inject queries certain frequency network 
degree anonymity traffic available fig 

anonymity traffic illustrates relationship 
suppose noise network routed node kbps active adversaries contributing traffic network 
node network sends requests constant rate probability packet originates node available foreign traffic network increases basic noise level anonymity node increases 
point network traffic may reach capacity node node stops routing additional traffic maximum degree anonymity node achieve sustaining data rate node needs anonymity current volume network guarantee slow rate requests data network 
adversaries unknown power exact degree anonymity probability adversary determine originator computed manner practice 
reason require knowledge traffic controlled adversary 
fact bandwidth adversary anonymity provided adversary flood network messages 
attack applies anonymizing networks 
stated section adversary controls traffic entire network determine certainty action originated 
estimating number adversary controlled hosts open network gnunet obviously difficult 
proving authenticity remote krista bennett christian microprocessor ultimately trustworthiness remote machine open problems :10.1.1.30.3785
gnunet compensates impossibility guaranteeing anonymity powerful attackers providing deniability 
powerful adversary determine sent message deniable encoding searching mechanism content see ensures adversary may unable determine message 
situation similar adversary floods network known traffic occurs minimal amount traffic network allowing minimal degree anonymity 
situation problematic may sound peers start slow download rate increase network load network especially idle nodes spread query busy nodes 
load network quickly rise proximity peer starting download allowing peer increase gnunet content encoding inherent property downloading node initially send small set queries due tree structure encoding requirement node start small achieve anonymity network load rises practice code anyway 
network level background noise key exchange node advertisement propagation sufficient node hide origin single query 
related indirection delays noise achieve anonymity long gap 
interestingly traditional perception focused decoupling identity receiver identity responder placing anonymizing service anonymizer com middle 
approach works weak adversaries web site operators see intermediary ip logs help adversaries perform traffic analysis part anonymizing infrastructure 
communications costly 
example freenet number indirections determined length search path query takes node content 
search path length transfers content 
traffic overhead approximately size content 
freenet attempts counter problem clever routing content migration strategies minimize design allow user trade anonymity efficiency 
systems crowds allow user set number indirections system aim :10.1.1.30.3785
traffic overhead adjusted 
authors describe network nodes indirect requests probability pf degree anonymity crowds offers defined probability node collaborating adversary receives communication node sent request 
gap practical anonymous networking gap unknown strength adversary impossible practice determine exact degree anonymity achieved 
analysis crowds assumes nodes equally active equally suspicious 
adversary nodes control traffic analysis may give better data node responsible query assumption traffic non malicious nodes decrypted 
sending noise traffic analysis harder discussed course increase network load crowds probabilistic attack described infer identity initiator :10.1.1.30.3785
attack idea adversary attempt correlate multiple transfers network infer initiator higher average chance sender 
attempts attack difficult multicasts replies choosing different path network initiator responder path back responder initiator 
probabilistic attack described requires adversary control nodes participating network adversary able relate multiple transactions 
gnunet transactions correlated query reply reveal context adversary knows exactly content transmitted 
case probabilistic intersection attack time help reveal identity user 
distributed network anonymity goals :10.1.1.114.1491
uses broadcasts multicasts data transfer 
achieves scalability dividing network tree hierarchy small broadcast groups 
sender anonymity nodes constantly broadcast noise order disguise active phases 
receiver addresses addresses broadcast groups 
peer broadcast groups advertise group located higher tree address 
group forwards received messages child groups 
messages dropped network load gets high 
messages addressed specific group dropped earlier 
advertising specify broadcast group anonymity peer increased number groups may receive reply larger 
advertising specific group hand improves latency peer fewer messages dropped 
traffic assumed maximum peers sustain 
allows peers trade anonymity latency bandwidth 
dc net anonymous network dining cryptographers protocol requires node communicate node message 
onion routing chaum mixes 
message user chooses path mix network encrypts message public keys mixes 
message sent path long nodes path compromised identity initiator directly exposed 
networks anonymity node depends behavior nodes network 
gap node able indi krista bennett christian choose exchange portions anonymity efficiency impacting security nodes 
comparing anonymous protocols compare gap related anonymity protocols focusing freenet dc net mixes onion routing crowds simple proxy :10.1.1.114.1491:10.1.1.30.3785
note designs compared address different applications interactive anonymous browsing high latency anonymous mail 
systems differ widely respective costs benefits difficult impossible fair comparison 
dc net rely broadcasts multicasts communications protocols unicast 
gap freenet unicast nodes may choose route message multiple nodes seen application level multicast duplicates processed recipient opposed anonymizing multicast schemes recipient just sees traffic noise 
anonymous protocols achieve form initiator sender anonymity 
case proxy sender anonymous relation responder relation proxy sender identity data directly exposed proxy 
mix networks initiator part mix network initiator anonymity partial reason 
anonymizing networks single point failure typically hop node controlled adversary fully expose initiator 
argue message encrypted decrypted final recipient anonymity violated 
contents exposed possible correlate transaction sender 
definition anonymity allows adversary may see participation network allow adversary determine peer initiated transaction 
freenet gap responder anonymity achieved addition sender anonymity 
reply gets anonymized goes back network responder known initiator 
responder anonymous dc nets protocol deals way broadcast messages symmetry 
mixes onion routing anonymous responders reply blocks published responders anonymous default 
crowds require prior knowledge responder initiator making responder anonymity impossible public rendezvous point 
mixminion discusses attacks mix networks 
protocols allow nodes trade anonymity efficiency order improve performance 
simple proxy dc net freenet degree anonymity fixed circumstances 
crowds node choose reduce number indirections communications path size multicast group case replies increasing efficiency network 
note node reduces number indirections reduces load nodes network load reducing incentive trade 
joining larger multicast group gap practical anonymous networking affects nodes receive additional useless multicast traffic 
gap node query tells recipient shortcut response able reduce load route reply having impact anonymity load node 
attackers actively participate protocol hard defend 
best defense dc net single non collaborating node thwart attack node 
case proxy node network trusted collaborative attack succeed 
adversary control respective multicast group small order ascertain identity recipient 
freenet onion routing crowds lesser degree vulnerable probabilistic attack time described :10.1.1.30.3785
gap adversary control significant portion bandwidth node routing order able determine reasonable probability traffic initiated node 
freenet gap anonymity protocols built content location capabilities 
requires knowledge address multicast group containing responder 
systems compared require prior knowledge initiator address responder 
mixes require public key operations request node processing message systems require symmetric operations request initial public key exchange establish link encrypted channels 
anonymizing systems peer peer system allows ip level anonymization internet traffic onion routing 
offer responder anonymity 
worse user probably fact applications typically aware anonymization requirements 
users combination applications web browsers mail clients allow responder identify user due information leaked higher level protocol tunneled anonymizing ip layer infrastructure 
improves mixes witness help select path network 
way initiator need know large set peers order build anonymous tunnel receiver 
peer peer network set mixes large dynamic opposed static sets previous architectures 
peer peer networks gnunet faced problem operator responsible keeping network running 
open networks easy target adversaries powerful disrupt internet connections 
individual peers isolated peers ip level allowed connect nodes controlled adversary 
peer peer users probably notice type attack peers considered unreliable able reach large fraction peers considered normal 
gnunet attempts attack harder providing transport krista bennett christian abstraction tunnel gap messages protocols smtp making harder adversary disrupt communications noticed :10.1.1.114.1491
measuring anonymity gap model anonymity probability 
described approach probabilities prevent individual peers sticking :10.1.1.10.986
peer probability originator query may easy target peers significantly lower probability say 
proposed entropy anonymity metric takes probability distribution account :10.1.1.10.986
information theoretic approach resulting metric expresses bits information adversary need expose peer 
turns difficult apply metric gap computing entropy network requires global view network typical peers 
peers attempt reduce individual probabilities knowledge global distribution 
entropy metric shows anonymizing protocols need attempt balance probabilities possible 
requirement taken account gap designed needed formally determine amount information leaked protocol type adversary 
discussion gap focused single query sent initiator 
practice downloading file gnunet require multiple queries 
active adversary described correlate queries content guessing global active adversary obtained file user downloading downloading able correlate queries 
adversary able correlate queries may possible active adversary infer identity initiator probabilistically 
better defense type attack open issue 
assumed mixing performed peer optimal 
improving mix algorithms basically orthogonal issue indirection anonymization protocols routing decisions peer impact mixing strategy type mixing slightly different comparison traditional mix networks hop determined entirely message 
general scalable anonymous routing strategies open problem 
hope evaluate scalability routing strategy 
content migration issue 
peer sends local content correspond query received recipient knows sender stored content 
solution randomly forward content frequent basis peer received store locally 
gap practical anonymous networking approach may forward content peer remove local store 
onion routing content migration may solution costly limiting 
adaptive indirection scheme allows node anonymizing network individually trade anonymity efficiency negatively impacting nodes network 
new perspective perceive anonymity perspective strong adversaries monitor network traffic potentially participate anonymizing network described 
perspective derive anonymizing protocol allows participants choose perform source rewriting order increase efficiency violating protocol 
implementation gap gnunet uses current network load exchange increasing anonymity efficiency allowing improvement scalability 
final thought trading anonymity efficiency may mean anonymous short term increased network efficiency may mean greater usability 
may lead users eventually increased anonymity 
anonymous reviewers constructive feedback roger dingledine helpful discussions 
additionally grateful jan vitek victor raskin support 

krista bennett christian ioana 
efficient sharing encrypted data 
proceedings 

castro druschel hu rowstron 
exploiting network proximity distributed hash tables 
proceedings international workshop directions distributed computing 

david chaum 
untraceable electronic mail return addresses digital pseudonyms 
communications acm 

david chaum 
dining cryptographers problem unconditional sender recipient untraceability 
journal cryptography pages 

ian clarke oscar sandberg brandon wiley theodore hong 
freenet distributed anonymous information storage retrieval system 
lecture notes computer science 

george danezis roger dingledine nick mathewson 
mixminion design type iii anonymous remailer protocol 
ieee symposium security privacy 

claudia diaz bart preneel 
measuring anonymity 
proceedings workshop privacy enhancing 
krista bennett christian 
ferreira christian paul ruth 
transport layer abstraction peer peer networks 
proceedings gp pc 
ieee computer society 

michael freedman robert morris 
peer peer anonymizing network layer 
proceedings th acm conference computer communications security ccs washington 
christian 
excess economic model resource allocation peer peer networks 
wirtschaftsinformatik june 
:10.1.1.30.3785
rick 
proving authenticity remote microprocessor 

michael reed paul syverson david goldschlag 
proxies anonymous routing 
th annual computer security applications conference pages december 

michael reiter rubin 
crowds anonymity web transactions 
acm transactions information system security 

plattner 
introducing peer peer anonymous internet usage collusion detection 
proceedings workshop privacy electronic society association th acm conference computer communications security ccs washington dc usa november 

antony rowstron peter druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
lecture notes computer science 

vincent brian levine clay shields 
responder anonymity anonymous peer peer file sharing 
proceedings ieee international conference network protocols icnp 

andrei serjantov george danezis 
information theoretic metric anonymity 
proceedings workshop privacy enhancing 

rob sherwood bobby bhattacharjee aravind srinivasan 
protocol scalable anonymous communication 
ieee symposium security privacy 

clay shields brian neil levine 
protocol anonymous communication internet 
acm conference computer communications security pages 

ion stoica robert morris david karger frans kaashoek hari balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings conference applications technologies architectures protocols computer communications pages 
acm press 

paul syverson david goldschlag michael reed 
anonymous connections onion routing 
ieee symposium security privacy pages oakland california 
