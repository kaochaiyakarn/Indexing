titanium high performance java dialect lambda kathy yelick luigi geoff pike carleton miyamoto ben arvind krishnamurthy paul hilfinger susan graham david gay phil colella alex aiken computer science california berkeley berkeley national laboratory titanium language system high performance parallel scientific computing 
java base leveraging advantages language allowing focus attention parallel computing issues 
main additions java immutable classes multi dimensional arrays explicitly parallel spmd model computation global address space zone memory management 
discuss features design approach report progress development titanium including current driving application dimensional adaptive mesh refinement parallel poisson solver 
overview titanium language designed support high performance scientific applications 
historically languages claim achieved significant degree serious scientific programmers 
reasons high learning curve languages dependence parallelizing compiler technology consequent absence compilers tools incompatibilities languages libraries 
goal provide language users access modern program structuring object oriented technology enables users write explicitly parallel code exploit understanding computation compiler uses optimizing compiler technology reliable gives predictable results 
starting design point titanium java 
chosen java reasons 
lambda supported part defense advanced research projects agency department defense contracts dabt department energy contracts de fg er de ac sf director office computational technology research division mathematical information computational sciences eng lawrence livermore subcontract 
national science foundation contracts cda army research office contract daah microsoft graduate fellowship 
information necessarily reflect position policy government official endorsement inferred 

java relatively small clean object oriented language compared instance easy extend 

java popular popular languages 
learning titanium effort acquainted java languages 

java safe language titanium 
safety enables user write compiler perform better optimization 
titanium main goals order importance performance safety expressiveness 
ffl performance fundamental requirement computationally demanding scientific applica tions 
design choices reflect goal 
instance execution model explicitly parallel eliminating need parallelizing compiler 
distributed data fully defined programmer complete control layout process boundaries 
addition programmer may type modifiers variable declarations locality information compiler may find hard infer reliably static analysis 
ffl safety meanings titanium 
ability detect errors statically 
instance titanium compiler ensure processes execute correct sequence global synchronizations 
ability detect report run time errors bound indices accurately 
forms safety facilitate program development importantly enable precise analysis effective optimizations 
ffl expressiveness 
priorities target customers sacrificed goals necessary 
built features true multi dimensional arrays iterators points index sets including irregular ones class values span processor boundaries similar global pointers split titanium far expressive languages comparable performance 
titanium parallel spmd single program multiple data model computation 
inthis model parallelism comes running program asynchronously processors processor having data 
titanium processes transparently read write data resides processors 
titanium programs run distributed memory shared 
support smps java threads see section 
titanium program written smp guaranteed run efficiently distributed memory architecture claim language supports architectures equally 
summary titanium language uses java base strict extension java titanium compiler translates titanium portability economy prototype temporarily generating 
addressing problem high performance machine 
remainder outline new language features relationship java omissions java features novel optimizations facilitated java base language driving applications motivate initial version titanium language 
related essence competing approaches parallel programming language library 
relevant efforts 
libraries 
relative simplicity robustness libraries parallelism scientific computing 
particular spmd programs written fortran mpi communication synchronization form vast majority large scale parallel 
mpi lower raw performance global address space 
cray mpi achieves bandwidth mb sec global address space achieves bandwidth mb sec 
furthermore global address space compiler optimize remote accesses techniques local memory hierarchy 

multidimensional array support titanium strongly influenced maps 
titanium sacrifices expressiveness performance 
titanium arrays may rectangular maps arbitrary shapes 
titanium static general domain rectangular domain 
general domain type making harder optimize code uses common rectangular kind 
java ad 
project includes java ad extension java spmd style program ming 
main new feature java ad multidimensional distributed arrays similar hpf arrays 
java ad offers interface mpi explicit communication 
current plan java ad standard java mpi calls approach prevents optimizations implementing titanium 
split 
parallel execution model global address space support titanium split ac 
titanium shares common communication layer split distributed memory machines extended part titanium project run memory machines 
split differs titanium default pointer type local global local pointer default simplifies interfacing existing sequential code easier port shared memory applications distributed memory machines 
split uses sequential consistency default consistency model provides explicit operators blocking operations 
ac compiler introduces non blocking memory operations automatically dependence information parallel program analysis 
titanium ac regard 
language extensions main new features titanium immutable classes explicit support parallelism multi dimensional arrays mechanism programmer control memory management 
class example public static void main string replicated variables take values processes 
single int single int proc barrier proc barrier simple example synchronization 
immutable classes java objects accessed 
simplifies language adds extra level indirection object creation destruction reduces performance programs intensive small objects 
typical example user defined complex number class 
remedy problem introduced immutable classes 
immutable classes extensions existing class including object extended 
non static fields classes final restrictions allow compiler pass objects value allocate stack objects 
effect behave existing java structs 
immutable classes special titanium types point see section 
parallelism global synchronization 
important kind synchronization spmd programs processes participate 
instance barrier causes process wait processes reach barrier 
shows typical spmd skeleton 
group simultaneously execute code shown synchronizing barriers 
program correct long processes value initialization classes relies java rule final fields initialized constructors 
case barriers ensure process executes executes 
different values execute different sequence barrier statements error 
titanium performs global synchronization analysis ensures compile time bugs occur 
global synchronization analysis recognizing single valued variables replicated variables process owns instance value processes 
example single valued 
titanium single valued variables compiler verifies program structurally correct program structurally correct subexpressions satisfy set single valued variables processes execution variable processes terminate processes execute thesame sequence global synchronization operations identical values variable details aiken gay 
local global 
storage associated titanium process called region object contained single region 
local variables objects created new contained region process allocates 
objects regions obtained communication primitives 
default titanium assumed global may point region 
programmer declare variable points objects type tin region current process declaring variable local similarly qualifier declare object field points object region 
distributed memory machines local pointers significantly efficient global pointers take space access objects faster 
smps global local pointers equivalent 
communication 
processes communicate reads writes object fields cloning objects copying parts arrays 
communication supported broadcast method communication exchange method 
methods global synchronization processes processes call broadcast exchange operation complete 
barrier method defined 
uses global synchronization operations maintain structural correctness program 
process process synchronization handled java synchronized methods andthe synchronized statement 
consistency model 
programmer may synchronization constructs prevent writes shared objects language rules race conditions 
languages global address spaces programmers may simple shared variables synchronization structures appear system shared variables race conditions 
intuitive semantics shared accesses sequential consistency states memory operations appear take effect total order consistent processor program order 
machines hundreds thousands cycles memory latency local remote sequential consistency expensive machine designers opted weaker consistency models processor consistency release consistency 
krishnamurthy shown languages provide stronger model sequential consistency static analysis languages execute hardware weaker semantics 
analysis requires aliasing synchronization information context titanium current consistency model rely analysis 
java consistency model weakly consistent program level roughly says programmers may see unexpected program behavior protect conflicting barriers locks language specified synchronization primitives 
memory management titanium incorporates zone memory management extension java 
allocation canbe placed specific zone 
zones freed explicit delete zone operation 
run time system maintains counts ensure zones deleted remain 
approach advantages allows explicit programming locality placing objects accessed zone perform better collection distributed memory machines 
keeping count zones individual objects mitigates problems cyclical data structures cyclical data structures reclaimed long contained single zone 
preliminary study style memory management sequential programs faster malloc free conservative garbage collection cases 
study compiler modified perform counting pointers zones 
related study stoutamire obtained speedup amr code zones improve data locality 
arrays points domains titanium arrays distinct java arrays multi dimensional 
domains specify index sets indexed points explicit lists integers fortran 
points tuples integers domains sets points 
fragment shows multi dimensional array constructed 
point point double new double dimensional points declared initialized 
rectangular domain set points rectangle corners variable initialized dimensional array maps point double 
multi dimensional iterator called foreach allows operate elements foreach statement executes body bound successive points domain foreach domain style iterator simplifies removal array bound checks loop body 
specified allows compiler reorder iterations sophisticated fragile analysis fortran compilers perform tiling optimizations titanium foreach intended enable uniprocessor optimizations generate parallelism 
titanium array elementwise operators allow writing statements asa expressive titanium foreach complex array level expressions considerably difficult optimize 
type represents conventional rectangular index ranges dimensions general domain type represents arbitrary index sets 
arrays may rectangular foreach accepts general domains 
important feature modern partial differential equation solvers hard available abstraction mechanisms 
extensions preceding extensions principally motivated considerations performance performance 
placed lower priority extensions enhance expressiveness introduced 
titanium allows programmers provide additional operators array indexing syntax defining member functions special names 
motivation expect notations interest particular audience scientific programmers 
second plan introduce form parameterized types 
going debate possibility adding facility java 
resolution intend conform closely possible selected specification 
incompatibilities ideally titanium largely superset java simplicity compatibility code 
areas incompatibility threads numerics 
ffl threads 
current version titanium language current implementation support threads 
considering adding threads current spmd model purpose parallel execution multiple processors overlap long disk user possible java modules written threads awt titanium programs 
addition threads complicate global synchronization barriers believe associated extended limited thread model 
ffl numerics 
titanium adhere java standard numerics believe existing java implementations 
include support finer control ieee floating point features exceptions rounding modes adequate attention issues 
optimizations prototype compiler performs standard analyses optimizations finding defs uses variables computing possible control flow paths finding moving loop invariant expressions finding induction variables performing strength reduction array index expressions omits construction control variable foreach optimizations variable necessary 
generating code rely compiler perform analysis done special knowledge titanium language libraries 
furthermore analyses able take advantage safe clean semantics java 
perform optimizations reasonably expect compilers perform code produce 
experiments shown perform straightforward optimizations compiler want happen 
loops naive implementation loop yields poor results 
depending static type iteration domain internal representation currently union 
simplicity consider iteration single 
calculation requires single pointer increment iteration innermost loop 
trivial example compilers perform strength reduction calculations required titanium arrays arbitrary stride 
strength reduction generate code shown 
example allow titanium programs achieve performance competitive fortran 
applications properly evaluating programming language requires implement representative intended domain 
developing titanium compiler run time system parallel non trivial applications ported written scratch 
section describes ofthese applications amr em 
foreach sr dsr gp sr sr sr dsr gp sr sr sr dsr assign sr id break id break id break titanium code excerpt generated code case amr amr full dimensional adaptive mesh refinement poisson solver 
complete lines titanium code 
half code belongs routine called grid generator 
amr extension multigrid algorithm linear solvers 
multigrid relaxation uses grids different resolutions covering entire problem domain 
amr allows grids high levels resolution cover subset problem domain 
area interest level set rectangular patches 
similarly parallel amr solvers distribute patches processors relax lockstep 
patches large communication overheads small 
various points computation grid generator recomputes patch hierarchy onthe need accuracy 
load balances computation assigning similar amount processor 
aside grid generator large fraction code dedicated computing interfaces coarse fine boundaries 
computation onerous complex linguistic support effective aid 
amr large titanium program interesting note global synchro analysis section helped uncover bugs development 
em em computational kernel application models propagation electro objects dimensions 
preprocessing step casts problem simple computation irregular bipartite graph containing nodes represent electric magnetic 
computation consists series leapfrog integration steps alternate half time steps changes electric field calculated linear function neighboring magnetic vice versa 
preliminary results time run programs listed implementation set optimizations incomplete 
sequential performance set benchmarks show sequential performance titanium code 
experiments multigrid poisson solver em computation described standard daxpy operation vectors 
multigrid examples compared code written combined fortran em daxpy examples compared unable obtain full amr code written language performed fortran java arrays titanium arrays multigrid multigrid em performance sequential titanium compared languages 
computation benchmark sequential comparisons 
multigrid problems grid theta points grid theta theta 
em graph nodes fixed degree random connectivity 
daxpy element vector 
numbers taken mhz ultrasparc processor 
performance versions daxpy em problems java arrays titanium arrays bounds checking turned 
multigrid solvers extensive domain operators written 
java array version compiled standard java compiler 
access native code java compiler machine interpreted java byte codes roughly magnitude slower titanium 
column table shows percent increase running time titanium array version relative fortran version 
parallel performance titanium runs top standard posix thread library smps active message layer distributed memory multiprocessors networks workstations 
shows speedup em amr way sun enterprise smp fixed problem size 
overhead parallel runtime library minimal 
amr development running shallow grid hierarchy levels 
speedup limited serial multigrid computation coarse grid 
em attains linear speedups runtime overheads offset improved cache behavior smaller data sets 
experience far java choice base language easy extend safety features greatly simplify compiler writer task 
believe extending java easier obtaining high performance java strict language specs assuming feasible 
features titanium hard impossible achieve java libraries compiler able perform static analysis optimizations 
goals project 
wish system robust available scientific computing community 
wish basis research optimization explicitly parallel programs optimizations memory hierarchy domain specific 
speedup processors performance way sun enterprise smp em speedups sun ultrasparc smp 
ben greenwald joe earlier contributions 
intel various hardware donations including millennium sun microsystems donating clumps multiprocessor hardware 
aiken gay 
barrier inference 
proceedings fifth annual symposium principles programming languages pages january 
aiken gay 
memory management explicit regions 
proceedings conference programming language design implementation june 
appear 
carlson draper 
distributed data access ac 
proceedings th symposium principles practice parallel programming ppopp santa barbara ca july 
bryan carpenter zhan geoffrey fox wen li 
dataparallel extensions java 
www npac syr edu projects july doc html december 
culler dusseau goldstein krishnamurthy von eicken yelick 
parallel programming split 
supercomputing portland oregon november 
paul hilfinger phillip colella 
language scientific programming 
grossman editor symbolic computing applications scientific computing frontiers applied mathematics chapter pages 
siam 
krishnamurthy yelick 
analyses optimizations shared address space pro grams 
journal parallel distributed computation 
leslie lamport 
multiprocessor computer correctly executes 
ieee transactions computers september 
madsen 
divergence preserving discrete surface integral methods maxwell non orthogonal unstructured grids 
technical report riacs february 
steven scott 
synchronization communication multiprocessor 
architec tural support programming languages operating systems 
luigi 
virtual machine partial differential equations 
phd thesis california berkeley 
stoutamire 
portable modular expression locality 
phd thesis university berkeley 
thorsten von eicken david culler seth copen goldstein klaus erik schauser 
mechanism integrated communication computation 
proc 
th int symposium computer architecture gold coast australia may 

