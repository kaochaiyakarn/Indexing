implementing statecharts promela spin erich lakhnech michael siegel christian universit zu kiel institut informatik und praktische mathematik 
kiel germany ferm yl informatik uni kiel de translate statecharts promela input language spin verification system extended hierarchical automata intermediate format discuss possible frameworks translation leading sequential parallel code 
show context sequential code verified efficiently parallel code 
conclude discussion application resulting translator known case study demonstrates feasibility linear temporal logic model checking statecharts 
statemate case tool specification analysis design documentation complex reactive systems 
licenses tool equal parity fields aerospace communications electronics transportation 
graphical language statecharts proposed david harel serves statemate description control data transformation timing aspects system development :10.1.1.20.5519:10.1.1.20.461
statemate supports specification simulation static dynamic checks code generation vhdl ada 
language statecharts incorporates abstractions specification language reactive systems 
includes uninterpreted events means communication environment specification parts specification 
communication mechanism synchronous broadcast events 
statecharts related synchrony hypothesis gerard holzmann bell laboratories mh mountain avenue murray hill new jersey gerard research bell labs com states controlling hardware software infinitely faster environment controls 
abstractions statecharts attractive candidate exhaustive automatic analysis traditional model checking techniques cope finite state systems 
providing statemate state art technology model checking focus 
aim describe statecharts translated promela spin allow linear temporal logic model checking statecharts 
implemented translator idea report experiments application 
current previous follows 
harel naamad gave description statecharts implemented statemate 
rigorous informal description formalized 
operational semantics statecharts 
operational semantics forms basis translation discussed 
basic idea translation explained fully current 
related area model checking statecharts extensive discussed 
probably closely related investigate version statecharts 
report translating language statecharts supported statemate input language symbolic model checker 
detailed topics focus operational semantics statecharts description compilation schema semantics 
structure follows 
section explain intermediate steps performed obtain format simple describe translation statecharts promela 
section describe operational semantics extended hierarchical automata 
section discusses basic schema translation section describes optimizations basic schema 
section discusses case study verification production cell specification 
intermediate format statecharts semantics graphical statecharts language extends standard state transition diagram notation parallelism hierarchy broadcast communication 
statecharts comprise powerful concepts transitions multiple target transitions transition priority simultaneous execution maximal non conflicting sets transitions 
add tools linked statemate tool deal involved semantics concepts 
order simplify understanding statecharts reasonable restrict sub language 
transition statecharts labeled event expression condition action expression optional 
form guard transition describes actions performed transition taken 
sub set consider transition labels restricted follows boolean combinations predicates st allowed expression cond informally predicate st true iff system currently resides state st effect transition generation events 
consider data transformations history timing issues 
aspects orthogonal investigations sense interfere basic concepts sections 
sub set supported translator 
actual syntax transitions complicated statemate 
harel naamad introduce intermediate format transitions transformed called full compound transitions full ct 
purpose full ct collect labeling information spread transition segments compute advance states entered transition taken 
translating statecharts promela able verify correctness translation verify compiler correctness 
order need structure directed operational semantics 
unfortunately full ct language suited giving semantics definition contains called transitions important part language cf 

transitions possibly multiple sources multiple targets transitions respect hierarchy states cross hierarchy levels 
understood powerful goto mechanism allows arbitrarily move control state hierarchy 
price pay transitions intricate semantics especially combined statecharts priority mechanism 
transitions spoil clean decomposition system subsystems dangling transitions source target result destroy clean structural operational semantics definition statecharts 
tv image sound picture txt txt text working waiting mute sound standby disconnected 
statechart inter level transitions 
example depicts model tv set statecharts transitions state standby state working 
example inspired 
overcome problems transitions proposed extended hierarchical automata eha intermediate format 
eha formalism uses single target transitions usual automata definitions transitions simple priority concept facilitates computing step eha compared statecharts 
transformation statecharts eha described basically lifting transitions uppermost states exited entered resp transition taken 
order faithfully model semantics original statechart transitions eha extended labels allow constrain enabledness statecharts transitions determine target configuration transition 
example depicts extended hierarchical automaton corresponds statecharts 
transitions replaced transitions labeled 
component label source restriction restrict enabledness transition 
component target determine states entered sub automata transition target 
transition labeled enabled waiting standby active event transition states working picture entered 
exactly corresponds transition labeled 
detailed explanation follows sequel 
tv working image sound picture txt txt text power standby mute sound waiting disconnected labels described table transitions generate events action part omitted label source restriction guard target ong 
tv set extended hierarchical automata 
empty source restriction denotes source constrained 
current describe translate eha promela 
translator statecharts eha described implemented part tool set 
extended hierarchical automata operational semantics extended hierarchical automata consist sequential automata hierarchy parallel composition 
introduce notation eha explain semantics 
sequential automata 
eha consists set sequential automata 
sequential automaton tuple set states initial state set transition labels specific labels transition relation 
sequential automata surrounded dashed lines 
sequential automata example automaton tv states working waiting tv set automaton image states picture text images usual image video text automaton sound states sound may automaton power states standby disconnected power supply may 
interaction components eha defined state hierarchy broadcast communication mechanism 
state hierarchy 
hierarchy parallel composition extended hierarchical automata defined single composition function 
consider set sequential automata fa ang mutually disjoint state spaces 
composition function maps state sequential automaton set automata say refined require composition function tree function designated root automaton root details 
refined single automaton refined parallel composition automata 
call basic state denoted basic 
dotted arrows depict composition function 
state working refined parallel composition automata image sound state waiting refined sequential automaton power 
composition function 
working 
fs js text standby events broadcast communication communication media eha statecharts instantaneous broadcast uninterpreted events events don structure 
events received environment generated result transition eha 
case events generated visible environment 
denote set events eha events tv set model mute sound configuration 
usual automata speak states sequential automata control states 
sequential automata form eha control state eha call configuration composition control states component automata 
sequential automaton contribute state configuration 
due hierarchy configuration upward downward closed state configuration non basic state direct sub automata contribute configuration vice versa 
denote set configurations conf 
note case parallel composition sub automata contributes configuration par ent configuration 
example means tv set state sound active state respective automata belong current configuration 
initial configuration 
initially hierarchical automaton configuration derived initial states set sequential automata 
derivation performed top manner root automaton contributes initial configuration initial state state configuration refined automata automata contribute initial states initial configuration 
example initial configuration corresponds plugged tv set stand mode 
initial state depicted 
extended transitions 
transitions depicted labeled arrows boxes 
contrast statecharts transition eha resides sequential automaton transitions respect hierarchy 
enabled transition means leave source state enter target state 
source target transition refined automata sub structure transition affects sub structure leaving source state sub structure left entering target state configuration target entered 
define issues precisely 
label transition source state target state tuple sr ex ac td source restriction sr conf js allows constrain enabledness transition set expression ex guard proposition event state names constant true primitive events states connected 
models ex tuples wherec configuration set events ac set generated events 
target td conf js determine states entered simultaneously entering target state tuple wherec conf transition sr ex ac td automaton enabled status denoted enabled iff source state active state source restriction active sub configuration sr transition guard ex enabled ex 
semantics eha 
extended hierarchical automaton eha wheref set tial automata set events composition function 
semantics eha kripke structure step 
conf set states elements called status wheres initial state initial configuration derived initial states sequential automata described 
step 
transition relation step 
defined sequel 
step relation 
maximal non conflicting set enabled transitions constitutes transition refer step eha 
non conflicting means respects non determinism sequential automaton enabled transitions taken priority transitions emerging state sub structure preempt transitions sub structure 
idea de fine step 
inductively components hierarchical automata fire transitions results components composed step relation 
distinguish extended hierarchical automata interacting environment receiving events environment generated events environment open system approach interacting environment closed system approach 
closed systems root 
step 
open systems root 
step 
rule allows environment insert arbitrary sets events step 
note step sequential automata fire transitions events environment impact postponed step 
rules establish relation step 
relation defined inference rules 
refer rules start rules 
inference rule system denoted 
wherea sequential automaton status hierarchical automaton eha wherec conf configuration eha root automaton progress rule applies sequential automaton states configuration outgoing transitions enabled taken non deterministically 
effect transition determined transition label target state target states td entered events ac generated 
specified inference rule fsg tr enabled tr tr sr ex ac td 
fs td ac example consider status fon outg progress rule applies root automaton tv transition waiting working 
obtain derivation inference system tv fon outg 
picture ong similarly progress rule applies automaton power power fon outg 
obviously transitions taken step effects inconsistent 
priority concept extended hierarchical automata statecharts transition contributes current step 
modeled rules far derivation automaton tv satisfies premise step 
rule constitutes complete derivation constitutes step 
see derivation set rules include transition power 
composition rule 
rule explains automaton delegates step sub automata 
rule applies automaton states configuration outgoing transitions disabled state refined set automata fa amg 
relation collects results performed subautomata fa amg 
specified inference rule fsg tr tr enabled tr fa amg 
am 

fsg note active state refined parallel composition components executed simultaneously interfere step 
example consider status picture ong root automaton tv doesn enabled transitions sub structures image sound may execute transition 
progress rule applies resulting derivations image picture ong sound picture ong obtain derivation automaton tv tv picture ong text satisfies premise step 
rule derivation constitutes step 
stuttering rule applies sequential automata states configuration outgoing transition guards enabled sub structure 
effect rule remain state generating events 
specified inference rule fsg basic tr tr enabled tr 
fsg example consider status text previous example composition rule applies image sound requested execute transition 
image progress rule applies sound stutter rule applies 
derivation stutter rule sound text composition rule yields tv text picture constitutes step 
note non determinism automaton eha induces non determinism step relation eha 
immediately evident existential rule 
interplay rules 
progress stuttering rules may produce derivations collected composition rule 
example consider status wherec fon outg 
premises progress rule satisfied automaton power switch state standby disconnected 
transition discarded composition rule rule collect derivation power set possible steps configuration 
superfluous inferences avoided traversing strategy state hierarchy root automaton move downwards composition function current active automaton enabled transition composition rule downward movement ends progress stutter rule applies 
application progress rule stops inferences sub components 
translation extended hierarchical automata promela basic schema target system software package spin formal verification distributed systems 
protocol simulator called bit state analyzer spin includes linear temporal logic ltl model checker object interest 
programs written promela process meta language 
properties expressed ltl formulae omega automata 
restrict description promela parts relevant translation 
promela inspired dijkstra guarded command language notation hoare language csp offers wide range constructs description reactive systems parallel processes interleaving model parallelism global local data variables finite types types bit byte short int statements express assignment conditions combined statements sequential execution conditionals loops 
synchronization parallel processes common channels synchronous message passing 
statement statements atomic preventing interleaved execution statements parallel pro cesses 
list far complete detailed info refer language manuals accessible web book overview 
model checker spin uses explicit state enumeration reduction strategy spin partial order reduction 
extended hierarchical automaton eha semantics step 
translation maps eha promela model model contains variables necessary encode states promela process es encodes transition relation step 
operational semantics described section crucial structural translation rules semantics generic pattern generating code transitions sequential automata parallel hierarchy compositions extended hierarchical automata 
translation construct extended hierarchical automaton instantiation corresponding rule 
worked sequel 
implementation status status structure status tuple configuration eha conf eha set events recall configuration set states eha model configurations define sequential automata states variable distinguishes different values values model states sequential automata extra state model automaton active state current configuration 
model events define boolean variable event potential data space allocated variables suffices encode conf implement concurrent access variables promela processes encode transition relation step 
need pre post state copies state event variables synchronous parallel composition promela 
define sets variables variable suffix belongs pre state variable suffix belongs post state 
implementation suffers theoretical state vector twice long expected consists pre post state variables expect pre state variables 
see post state variables treated quite economically translator spin lead doubling state space 
initial status initial status wherec initial configuration conf empty set events 
encoding initialize pre state variables automata states respective states rest automata nonactive state 
post state variables automata initialized non active states 
event variables pre post state initialized false 
idea state changes step kripke structure computed post state variables 
initial status post state variables set nonactive resp computation current step set variables need reset variables 
modeling transition relation support closed systems 
specification checked closed system specification supposed comprise model environment 
tv remote control panel power control sound st mute image sound picture txt txt text txt working waiting mute sound sound st mute txt source restriction guard target ong disconnected power standby 
tv set closed system 
example complemented tv set remote control manual service panel power supply control 
time depict hierarchy statecharts style composition function corresponds state embedding 
idea components generate randomly events stutter sensed tv control system 
remote control panel coincide events generated power control component 
implementation parallel composition 
intriguing problem implement parallel composition extended hierarchical automata 
set sequential automata fa ang state st wherea fa ang automata parallel 
assume set considered composition rule 
general observations sequential automata ai contribute transition relation step 
simultaneously communication simultaneous execution events generated transitions sensed step cf 

question translate stated pattern parallel execution promela uses interleaving model parallelism 
choices parallel solution 
transitions located parallel automata executed interleaved fashion parallel automata mapped promela processes 
solution requires scheduler implement lock step nature transition relation 
sequential solution 
arbitrary interleaving parallel transitions determined compile time yielding fully sequential implementation 
solution sound transitions independent composition rule 
drawback implementing synchronous parallel composition interleaving nondeterminism 
illustrated example 

implementing synchronous parallel composition interleaving 
example consider statecharts depicted left 
statecharts generates simultaneously events right generation events depicted interleaving model parallelism orders events generated introduces intermediate states statecharts semantics 
different interleavings step relation lead result 
expect partial order reduction techniques spin able reduce number possible interleavings 
known promela patterns exploited reduction algorithm encourages protocol designer choose structure model appropriate 
hand sequential implementation guarantees exactly interleaving chosen 
sequential solution efficient possible parallel proceed describing sequential solution 
observation coincides compilation scheme synchronous languages 
consequence sequential solution partial order reduction techniques implemented spin benefit code 
partial order techniques cope state explosion caused interleaving interleaving statecharts need reduction 
flow control sequential automata 
described section operational semantics induces traversing strategy composition function order avoid superfluous derivations inference system 
imagine depth search composition function deepest level application progress stuttering rule 
worked sequel 
rules control sequential automata passed manner root automaton considered take transition start rule 
enabled outgoing transition active state composition rule applies sub automata active state scheduled active state non basic state stuttering rule applies step complete 
described composition rule result rule depends result subcomponents 
sub automata corresponds parallel composition pass control arbitrary order 
advantages schema hierarchical structure mapped clauses promela translation faithfully implements hierarchy statecharts clauses redundant checks avoided higherlevel transitions checked enabledness control passed lower transitions higher ones enabled current step 
implementation sequential automata 
implementation sequential automata executes transitions progress rule depends execution subcomponents composition rule stutter rule 
cases implemented conditions pre state variables assignments post state variables 
flow control passed sequential automaton detects active state formulae common rules 
sequential automaton results code code associated outgoing transitions code associated outgoing transitions fi recall suffix denotes pre state copy 
discuss code associated outgoing transitions state 
implement non deterministic exclusive choice outgoing transitions clause 
tv example state obtain code implementing effect transition code implementing effect transition transitions taken fi effect transition described progress rule tr sr ex ac td transition chosen premise rule 
rule 
fs td ac requires set post state variables encoding fs td ac true post state variables encoding ac true 
complementary code code implementing situation transitions enabled 
code comprises option clause 
cases consider state basic state post state fsg stuttering rule achieve set variable implementing post state true 
state non basic state control passed sub automata fa amg composition rule 
contributions transitions ai transitions computed sequentially 
recall composition rule results status fsg result sub automata ai 
sub automata independently set corresponding post state variables true remains control passed back sub automata set variable implementing post state true 
implementation start rule 
described sequential automata implemented 
com putation step 
initiated start rule invokes depth search composition function 
enclosing code start rule code sequential automata compositions statement hide intermediate states result successive computations effect transitions 
resulting promela program just displays tran sitions step 
corresponds steps original eha 
implementation infinite runs described encode transition relation 
order generate infinite runs promela model wrap code infinite loop 
loop begins actual status pre state variables post state variables set zero 
loop consist consecutive parts 
post state transition relation computed post variables described previous section 

resulting post state copied pre state calculation step 

post state variables reset variables implementing control states automata set respective nonactive state event variables set zero discussed initialization section 
parts enclosed atomic statement order hide intermediate steps 
atomic statement broken loop execution loop 
property claim access variables comprises observable state system 
manner number states generated verifier reachability analysis corresponds exactly number states original statecharts model 
means properties model formulated knowing implementation details 
verification results counterexamples returned user terms original specification 
optimizations basic schema basic schema important understand correctness translation optimized get better performance 
translator generates optimized code leads decrease memory time requirements compared basic schema 
post copies state variables needed 
reduce number post state variables 
write access state variables exclusive step statement accessing state variable 
transition guards may refer arbitrary states statecharts may read write conflicts 
idea analyze statecharts situations readwrite conflicts may arise generate post state copies cases needed avoid conflict 
translator analyzes transition guards generates post state copies variables occur conditions transition guards 
variable ordering 
described section post state variables zero values control locations visible property outside atomic statement 
graph encoding technique take advantage particular situation variables grouped 
variables declared ones assures comprise suffix part state vector 
marking deterministic sequences 
promela provides ad step sequence executed single statement efficient verifications atomic sequence 
verification gain time space deterministic flows marked 
translator includes statements step described implementation sequential automata transition scheduled taken stutter step executed code performs number assignments correspond setting post state variables control states events deterministic 
sequence included step 
detect deterministic sequential automata 
simple heuristic state sequential automata outgoing transition automaton deterministic 
check implemented translator 
straightforward extension deterministic automata executed sequence deterministic automata parallel original statecharts currently supported translator 
production cell case study production cell case study launched forschungszentrum informatik karlsruhe germany demonstrate benefits formal methods industrial applications 
contributions including statecharts reported 
specification due university oldenburg 
statechart specification contributed third party restrict discussion verification figures detailed explanation specification 
statecharts specification contains parallel automata events synchronize components model 
number variables needed encode states events promela boolean enumeration type variables 
reachable state space states counted spin version 
experiment done sparc ultra gb memory 
statistics state space analysis 
default search mb graph encoding technique mb figures show trade default search graph encoding technique default search fast consumes memory graph encoding technique slower reduces memory requirements considerably 
experiment recursive indexing method option spin version upwards turned worse time space default search mb memory means benefit reduction technique 
reason data global models recursive indexing exploits fact data associated processes local variables communication channels 
unfortunately verification figures incomparable contributions different modeling approaches 
closest modeling uses different semantics statecharts 
doubt comparison figures meaningful 
spin verification safety properties 
approach limited safety properties 
translate promela full range spin verification system available linear temporal logic model checker bit state hashing algorithm hash compact algorithm features 
verification successfully counterexample generation facility spin detecting errors statecharts specification 
specification verified find errors manual entering specification statemate tool errors 
errors detected simulating specification statemate model checking result translation spin 
replay counterexamples statemate interactive simulation mode helpful debugging 
industrial relevance commercial tool statemate offers interactive simulation statecharts code generation statecharts 
tried verify safety properties dynamic test tools statemate reachability analysis tool longer part distribution 
case study infeasible tool didn manage get results runtime day 
furthermore reachability analysis covers safety properties 
limits extended contribution allows verification safety liveness properties efficient linear temporal logic model checkers available 
cover tools translator comfortable tools translator available public 
tools include model extractor allows statemate graphical user interface drawing statecharts 
implemented spin back allows translate counterexamples back terms original statecharts specification 
facility allows automatically replay counterexamples statemate 
backend translation described hidden user user need learn promela order spin model checking statecharts 
graphical editors drawing statecharts documented syntax translator separately statemate 
case ascii code level interface available 
admit sub set statecharts discussed sufficient industrial specifications written statemate 
statemate statecharts model checked traditional finite state model checking techniques 
full language statecharts apart generic charts supports finite state systems integer real variables restricted sub ranges statemate 
didn try confident interesting features statecharts timing primitives data transformations history concept handled promela spin 
plan extend sublanguage 
translator supported full sub language statecharts guarantee specification verified spin 
state space turns infeasible spin offers bit state algorithm bit state analyzer approximation full state space 
heuristic state collapsed couple bits allowing search considerably bigger state spaces 
spin implementation hash compact algorithm gives statistical guarantee full coverage 
general solutions alleviate state explosion problem abstraction techniques manual automatic 
idea find smaller model exposes behavior property verified 
localization technique proposed kurshan examples automatic abstraction 
investigated abstraction techniques statecharts uses dialect 
related area 
compositionality divide conquer technique verification 
literature area far extensive discussed 
order apply compositionality verification statecharts investigate compositional aspects semantics done 
symbolic techniques model checking deliver alternative insight problem model checking statecharts 
symbolic techniques successful hardware verification obdd representations state space leads performance results time space 
considering software wide ranges variables involved spoil performance obdd techniques 
encouraging results model checking software specifications exists 
plan investigate abstraction techniques employ symbolic model checker smv statecharts 
described statecharts translated promela mentioned possible options generation sequential parallel code 
translation allows generation code size linear size input statechart 
translator passes parallel structure statecharts faithfully model checker spin designed cope state explosion problem limiting practical model checking 
motivated generating sequential code efficient parallel code 
verified safety properties production cell case study 
space time requirements verification showed translator spin verification systems size possibly larger 
translator support tools available public experiments 
acknowledgments peter making specification production cell available bernd weber adapting statemate 
translator written vdm domain compiler uwe schmidt hans martin providing tool 
erich bell labs worked topic summer 
model checking statecharts 
www informatik uni kiel de erm anderson beame burns chan notkin reese 
model checking large software specifications 
proceedings fourth acm sigsoft symposium foundations software engineering volume software engineering notes pages new york october 
acm press 
berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 

need die verification statemate designs 
tools algorithms construction analysis systems tacas number lncs pages 
springer verlag 
chan anderson beame notkin 
improving efficiency symbolic model checking state system requirements 
proceedings acm sigsoft international symposium software testing analysis issta volume acm software engineering notes pages new york march 
acm press 
damm pnueli 
compositional real rime semantics statemate designs 
proceedings compos appear 
springer verlag 
siemens ag 
applications formal verification industrial automation telecommunication 
proceedings workshop formal design safety critical embedded systems 
harel 
statecharts visual formalism complex systems 
science computer programming 
harel naamad 
statemate semantics statecharts 
acm transactions software engineering methodology oct 
holzmann 
design validation computer protocols 
prentice hall englewood cliffs new jersey 
holzmann 
state compression spin 
proc 
third spin workshop april 
holzmann 
model checker spin 
ieee trans 
software engineering may 
special issue formal methods software practice 
holzmann peled 
formal verification 
proc 
forte berne switzerland october 
holzmann puri 
minimized automaton representation reachable states 
manuscript 

schmidt 
programming vdm domains 
bj rner langmaack hoare editors vdm vdm number lecture notes computer science pages 
vdm europe springer verlag april 
huizing 
de roever 
design choices semantics statecharts 
information processing letters february 
web site 
www com htm 

phd thesis universit oldenburg 
kurshan 
computer aided verification coordinating processes automata theoretic approach 
princeton univ press 
lewerentz lindner 
formal development reactive systems case study production cell 
number lncs 
springer verlag 
lind nielsen andersen behrmann larsen 
verification large state event systems compositionality dependency analysis 
tools algorithms construction analysis systems tacas number lncs 
springer verlag 
mcmillan 
symbolic model checking 
kluwer academic publisher 
lakhnech siegel 
formal semantics statecharts supported statemate 
nd bcs facs northern formal methods workshop springer verlag july 
lakhnech siegel 
hierarchical automata model statecharts 
asian computing science conference asian volume lncs 
springer verlag december 
production cell web site 
www fzi de spin web site 
netlib bell labs com netlib spin html wolper leroy 
reliable hashing collision detection 
proc 
th int 
conference computer aided verification lncs 
springer verlag 

