hp autoraid hierarchical storage system john wilkes richard golding carl staelin tim sullivan hewlett packard laboratories configuring redundant disk arrays black art 
configure array properly system administrator understand details array workload support 
incorrect understanding changes workload time lead poor performance 
solution problem level storage hierarchy implemented inside single controller 
upper level hierarchy copies active data stored provide full redundancy excellent performance 
lower level raid parity protection provide excellent storage cost inactive data somewhat lower performance 
technology describe known hp autoraid automatically transparently manages migration data blocks levels access patterns change 
result fully redundant storage system extremely easy suitable wide variety workloads largely insensitive dynamic workload changes performs better disk arrays comparable numbers spindles larger amounts front ram cache 
implementation hp autoraid technology entirely software additional hardware cost benefits small 
describe hp autoraid technology detail provide performance data embodiment storage array summarize results simulation studies choose algorithms implemented array 
categories subject descriptors input output data communications input output devices channels controllers input output data communications reliability testing fault tolerance redundant design operating systems storage management secondary storage general terms algorithms design performance reliability additional key words phrases disk array raid storage hierarchy 
modern businesses increasing number individuals depend information stored computer systems 
modern disk drives mean time failure mttf values measured hundreds author addresses hewlett packard laboratories page mill road palo alto ca email wilkes golding staelin sullivan hpl hp com 
permission digital hard copy part material fee granted provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission association computing machinery 
acm 
copy republish post servers redistribute lists requires prior specific permission fee 
acm xxxx xxxx john wilkes data parity fig 

data parity layout different raid levels 
years storage needs increased enormous rate sufficiently large collection devices experience frequent failures 
worse completely reloading large storage system backup tapes take hours days resulting costly downtime 
small numbers disks preferred method provide fault protection duplicate mirror data disks independent failure modes 
solution simple performs 
total number disks gets large costeffective employ array controller uses form partial redundancy parity protect data stores 
raids redundant arrays independent disks described early park balasubramanian popularized group uc berkeley patterson patterson 
storing partial redundancy data incremental cost desired high availability reduced little total storage capacity cost number disks array plus cost array controller 
uc berkeley raid terminology number different raid levels representing different amount redundancy placement rule redundant data 
disk array products implement raid level 
raid level host data blocks bit byte interleaved set data disks parity stored dedicated data disk see 
raid level host data blocks block interleaved disks disk parity block stored rotates round robin fashion different stripes see 
hardware software raid products available vendors 
unfortunately current disk arrays difficult chen lee different raid levels different performance characteristics perform relatively narrow range workloads 
accommodate raid systems typically offer great configuration parameters data parity layout choice stripe depth stripe width cache sizes write back policies 
setting correctly difficult requires knowledge workload characteristics people unable unwilling acquire 
result setting raid array acm transactions computer systems vol 
february 
data parity raid raid hp autoraid hierarchical storage system daunting task requires skilled expensive people cases painful process trial error 
making wrong choice costs resulting system may perform poorly changing layout inevitably requires copying data second device reformatting array reloading 
step process take hours opportunity inadvertent data loss operator error commonest source problems modern computer systems gray 
adding capacity existing array essentially problem full advantage new disk usually requires reformat data reload 
raid arrays suffer reduced performance degraded mode drives failed include provision spare disks pressed service soon active disk fails 
allows redundancy reconstruction commence immediately reducing window vulnerability data loss second device failure minimizing duration performance degradation 
normal case spare disks contribute performance system 
secondary problem assuming spare disk working spare idle array controller may find failed late 
solution managed storage hierarchy fortunately solution problems great applications disk arrays redundancy level storage hierarchy 
basic idea combine performance advantages mirroring cost capacity benefits raid mirroring active data storing relatively inactive read data raid 
solution part data active part inactive cost performance reduce mirrored data active subset change relatively slowly time allow array useful just move data levels 
fortunately studies access patterns disk shuffling file system restructuring shown conditions met practice salem bunt floyd ellis geist majumdar mcdonald bunt ruemmler wilkes ruemmler wilkes smith 
storage hierarchy implemented number different ways manually system administrator 
large mainframes run decades 
gelb discusses slightly refined version basic idea 
advantage approach human intelligence brought bear problem knowledge available lower levels operating acm transactions computer systems vol 
february 
john wilkes systems 
obviously error prone wrong choices mistakes moving data level adapt rapidly changing access patterns requires highly skilled people allow new resources disk drives added system easily 
file system file basis 
best possible place terms balance knowledge file system track access patterns file basis implementation freedom 
unfortunately different file system implementations customers hands deployment major problem 
smart array controller block level device interface small systems computer interface scsi standard scsi 
level disadvantage knowledge files lost enormous compensating advantage easily deployable strict adherence standard means array approach look just regular disk array just set plain disk drives 
surprisingly describing array controller solution 
name hp autoraid refer collection technology developed possible embodiment array controller 
summary features hp autoraid summarize features hp autoraid follows mapping 
host block addresses internally mapped physical locations way allows transparent migration individual blocks 
mirroring 
write active data mirrored best performance provide single disk failure redundancy 
raid 
write inactive data stored raid best cost capacity retaining read performance single disk failure redundancy 
addition large sequential writes go directly raid take advantage high bandwidth access pattern 
adaptation changes amount data stored 
initially array starts empty 
data added internal space allocated mirrored storage data stored way 
happens storage space automatically reallocated raid storage class data migrated mirrored storage class 
raid layout compact data representation data stored array 
allowed proceed capacity mirrored storage shrunk total usable space 
exact number policy choice implementors hp autoraid firmware maintain performance 
space mb units 
acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system adaptation workload changes 
active set data changes newly active data promoted mirrored storage data active demoted raid order keep amount mirrored data roughly constant 
data movements usually done background affect performance array 
promotions occur completely automatically relatively fine granularity kb units 
hot pluggable disks fans power supplies controllers 
allow failed component removed new inserted system continues operate 
relatively commonplace features higher disk arrays important enabling features 
line storage capacity expansion 
disk added array time maximum allowed physical packaging currently disks 
system automatically takes advantage additional space allocating mirrored storage 
time workload permit active data rebalanced available drives workload newcomer previous disks getting maximum performance system 
easy disk upgrades 
conventional arrays disks need capacity 
advantages new drive purchased optimal capacity cost performance point regard prior selections 
second entire array upgraded new disk type twice capacity interrupting operation removing old disk time inserting replacement disk waiting automatic data reconstruction rebalancing complete 
eliminate reconstruction data drained disk replaced advantage retaining continuous protection disk failures process require spare capacity system 
controller fail 
single array controllers capable running entire subsystem 
failure primary operations rolled 
failed controller replaced system active 
concurrently active controllers supported 
active hot spare 
spare space needed perform reconstruction spread disks increase amount space mirrored data array performance simply left idle 
disk fails mirrored data demoted raid provide space reconstruct desired redundancy 
process complete second disk failure tolerated physical capacity entirely filled data raid storage class 
simple administration setup 
system administrator divide storage space array logical units scsi acm transactions computer systems vol 
february 
john wilkes terminology correspond logical groupings data stored 
creating new lun changing size existing lun trivial takes seconds go front panel menus select size confirm request 
array need formatted traditional sense creation lun require pass newly allocated space zero initialize parity operation take hours regular array 
needed controller data structures updated 
log structured raid writes 
known problem raid disk arrays called small write problem 
doing update place part stripe takes os old data parity read new parity calculated new data new parity written back 
hp autoraid avoids overhead cases writing raid storage log structured fashion empty areas disk written old data reads required 
related papers published raid reliability performance design variations parity placement recovery schemes see chen annotated bibliography 
hp autoraid builds studies concentrate architectural issues multiple raid levels specifically single array controller 
storage technology iceberg ewing stk uses similar indirection scheme map logical ibm mainframe disks count format array scsi disk drives art private communication nov 
iceberg handle variable sized records hp autoraid scsi interface handle indirection fixed size blocks 
emphasis iceberg project achieving extraordinarily high levels availability emphasis hp autoraid performance single component failure model regular raid arrays achieved 
iceberg include multiple raid storage levels simply uses single level modified raid storage class ewing 
team ibm almaden done extensive improving raid array controller performance reliability ideas seen application ibm mainframe storage controllers 
floating parity scheme menon menon uses indirection table allow parity data written nearby slot necessarily original location 
help reduce small write penalty raid arrays 
distributed concept menon mattson spreads spare space disks array allowing spindles hold data 
hp autoraid goes allows data parity relocated uses distributed spare capacity increase fraction data held mirrored acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system form improving performance 
schemes described menon courtney dual controller version hp autoraid array handle controller failures 
loge disk drive controller english stepanov mime chao logical disk de jonge scheme keeping indirection table fixed sized blocks held secondary storage 
supported multiple storage levels targeted raid arrays 
extended function controller hp disk divisions looked issues progress development suitable controller technologies approach adopted hp autoraid cost effective 
log structured writing scheme hp autoraid owes intellectual debt body log structured file systems lfs carson setia ousterhout douglis rosenblum ousterhout seltzer seltzer cleaning garbage collection policies blackwell kitsuregawa 
large literature hierarchical storage systems commercial products domain example chen cohen dec bunt epoch systems gelb henderson poston katz miller misra smith proceedings ieee symposia mass storage systems 
concerned wider performance disparities levels exist hp autoraid 
example systems disk robotic tertiary storage tape optical disk levels 
hierarchical storage systems front disks act cache data tertiary storage 
hp autoraid mirrored storage cache data moved storage classes residing precisely class time 
method maximizes storage capacity number disks 
highlight system kohl extended lfs level storage hierarchies disk tape fixed size segments 
highlight segments mb size better suited tertiary storage mappings secondary storage levels 
schemes inactive data compressed burrows cate exhibit similarities storage hierarchy component hp autoraid operate file system level block device interface 
modern array controllers hp autoraid takes advantage kind optimizations noted baker ruemmler wilkes possible nonvolatile memory 
acm transactions computer systems vol 
february 
john wilkes roadmap remainder remainder organized follows 
overview technology hp autoraid array controller works 
come sets performance studies 
set measurements product prototype second set simulation studies evaluate algorithm choices hp autoraid 
conclude summary benefits technology 

technology section introduces basic technologies hp autoraid 
starts overview hardware discusses layout data disks array including structures mapping data blocks locations disk 
followed brief descriptions normal read write operations illustrate flow data system series operations usually performed background ensure performance system remains high long periods time 
hp autoraid array controller hardware hp autoraid array fundamentally similar regular raid array 
set disks intelligent controller incorporates microprocessor mechanisms calculating parity caches staging data nonvolatile connection host computers appropriate speed matching buffers 
overview hardware 
hardware prototype provide performance data uses back scsi buses connect disks fast wide scsi buses front host connection 
alternatives exist packaging technology outside scope 
array presents scsi logical units hosts 
treated virtual device inside array controller storage freely intermingled 
lun size may increased time subject capacity constraints 
block lun contain valid data stored address array controller need allocate physical space 
data layout intelligence hp autoraid controller devoted managing data placement disks 
level allocation scheme 
physical data layout pegs segments 
data space disks broken large granularity objects called physical extents shown 
typically mb size 
acm transactions computer systems vol 
february 
mb scsi buses scsi controllers hp autoraid hierarchical storage system parity logic mb bus speed matching ram scsi controller mb scsi host processor processor ram control logic dram read cache nvram write cache ram fig 

overview hp autoraid hardware 
combined physical extent group peg 
order provide redundancy usable mirrored raid storage class peg includes different disks 
time peg may assigned mirrored storage class raid storage class may unassigned speak mirrored raid free pegs 
terminology summarized table 
table summary hp autoraid data layout terminology 
term meaning size pex physical extent unit physical space allocation mb peg physical extent group group assigned depends storage class number disks stripe row parity data depends segments raid storage class number disks segment stripe unit raid half mirroring unit kb rb relocation block unit data migration kb lun logical unit host visible virtual disk user settable allocated pegs manner balances amount data disks hopefully load disks retaining redundancy guarantees disk stripe example 
disks hp autoraid array different sizes allocation process may leave uneven amounts free space different disks 
acm transactions computer systems vol 
february 
john wilkes disk addresses disks fig 

mapping pegs disks adapted 
segments units contiguous space disk included stripe mirrored pair pex divided set kb segments 
shows mirrored raid pegs divided segments exactly way segments logically grouped storage classes different ways raid segment stripe unit mirrored storage class segment unit duplication 
logical data layout rbs 
logical space provided array visible clients divided relatively small kb units called relocation blocks rbs 
basic units migration system 
lun created increased size address space mapped set rbs 
rb assigned space particular peg host issues write lun address maps rb 
size rb compromise data layout data migration data access costs 
smaller rbs require mapping information record put increase fraction logically sequential accesses devoted disk seek rotational delays 
larger rbs increase migration costs small amounts data updated rb 
report exploration relationship rb size performance section 
peg hold rbs exact number function peg size storage class 
currently unused rb slots peg marked free rb data allocated 
mapping structures 
subset mapping structures shown 
data structures optimized looking physical disk address rb logical lun relative address common operation 
addition data held access acm transactions computer systems vol 
february 
pegs segment mirrored pair physical extents disk column shown pex segment stripe disk disk disk disk disk hp autoraid hierarchical storage system physical extent groups pegs segment contains slots relocation blocks rbs disk disk disk disk disk mirrored peg fig 

layout pegs mirrored raid 
peg spread disks 
raid peg uses segments disks assemble stripes mirrored peg uses segments disks form mirrored pairs 
raid peg times history amount free space peg cleaning garbage collection purposes various statistics 
shown various back pointers allow additional scans 
normal operations start host initiated read write operation host sends scsi command descriptor block cdb hp autoraid array parsed controller 
may active time 
additional may held fifo queue waiting serviced limit requests queued host 
long requests broken kb pieces handled sequentially method limits amount controller resources single consume minimal performance cost 
request read data completely controller cache memories data transferred host speed matching buffer command completes various statistics updated 
space allocated front buffer cache read requests dispatched back storage classes 
writes handled slightly differently nonvolatile front write buffer nvram allows host consider request complete soon copy data memory 
check see cached data need invalidating space allocated nvram 
allocation may wait space available doing acm transactions computer systems vol 
february 
john wilkes virtual device tables lun 
list rbs pointers pegs reside 
pex tables physical disk drive usually trigger flush existing dirty data back storage class 
data transferred nvram host host told request complete 
depending nvram cache flushing policy back write may initiated point 
done hope subsequent write coalesced increase efficiency 
flushing data back storage class simply causes back write data mirrored storage class 
flush usually trigger promotion rb raid mirrored 
exceptions describe 
promotion done calling migration code allocates space mirrored storage class copies rb raid 
space mirrored storage class background daemons chance run example may turn provoke demotion mirrored data raid 
tricky details involved ensuring turn fail brief free space management policies anticipate worst case sequence events arise practice 
mirrored reads writes 
reads writes mirrored storage class straightforward read call picks copies issues request associated disk 
write call causes writes disks returns copies updated 
note back acm transactions computer systems vol 
february 
peg tables peg 
holds list rbs peg list store 
fig 

structure tables map addresses virtual volumes pegs physical disk addresses simplified 
hp autoraid hierarchical storage system write call issued flush data nvram synchronous host write 
raid reads writes 
back reads raid storage class simple mirrored storage class normal case read issued disk holds data 
recovery case data may reconstructed blocks stripe 
usual raid recovery algorithms followed case discuss failure case 
implemented current system techniques parity declustering holland gibson improve recovery mode performance 
back raid writes complicated 
raid storage laid log freshly demoted rbs appended current raid write peg overwriting virgin storage 
writes done ways rb writes batched writes 
simpler efficient 
rb writes soon rb ready written flushed disk 
doing causes copy contents flow past logic xors previous contents parity stripe 
data written parity written 
prior contents parity block stored non volatile memory process protect power failure 
scheme data rb write causes disk writes data parity rb 
scheme advantage simplicity cost slightly worse performance 
batched writes parity written data rbs stripe written batch 
batched write valid data peg written prior contents parity block copied nonvolatile memory index highest numbered rb peg contains valid data 
parity calculated xoring rbs indices equal value 
rbs written data portion stripe stripe reached batch completes point parity written 
new parity computed fly parity calculation logic data rb written 
batched write fails complete reason system returned pre batch state restoring old parity rb index write retried rb method 
batched writes require bit coordination rb writes require additional parity write full stripe data written 
raid writes batched writes 
addition logging write methods method typically raid implementations read modify write cases 
method reads old data parity modifies acm transactions computer systems vol 
february 
john wilkes rewrites disk allow forward progress rare cases peg available logging write processes 
better update data holes see section place raid migrate rb mirrored storage background migrations array idle 
background operations addition foreground activities described hp autoraid array controller executes background activities garbage collection layout balancing 
background algorithms attempt provide slack resources needed foreground operations foreground trigger synchronous version background tasks dramatically reduce performance 
background operations triggered array idle period time 
idleness defined algorithm looks current past device activity array completely devoid activity 
idle period detected array performs set background operations 
subsequent idle period continuation current triggers set operations 
long period array activity current algorithm may need moderate amount time detect array idle 
hope apply results golding improve idle period detection prediction accuracy turn allow aggressive executing background algorithms 
compaction cleaning hole plugging 
mirrored storage class acquires holes empty rb slots rbs demoted raid storage class 
updates mirrored rbs written place generate holes 
holes added free list mirrored storage class may subsequently contain promoted newly created rbs 
new peg needed raid storage class free available mirrored peg may chosen cleaning data migrated fill holes mirrored pegs peg reclaimed reallocated raid storage class 
similarly raid storage class acquires holes rbs promoted mirrored storage class usually rbs updated 
normal raid write process uses logging holes reused directly call garbage array needs perform periodic garbage collection eliminate 
raid peg containing holes full array performs garbage collection 
rbs copied peg small number rbs fill holes full peg 
minimizes data movement spread fullness pegs case 
acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system peg containing holes empty holes plugged array peg cleaning appends remaining valid rbs current raid write log reclaims complete peg unit 
migration moving rbs levels 
background migration policy run move rbs mirrored storage raid 
done primarily provide empty rb slots mirrored storage class handle write burst 
ruemmler wilkes showed bursts quite common 
rbs selected migration approximate written algorithm 
migrations performed background number free rb slots mirrored storage class free pegs exceeds high water mark chosen allow system handle burst incoming data 
threshold set provide better burst handling cost slightly lower burst performance 
current autoraid firmware uses fixed value value determined dynamically 
balancing adjusting data layout drives 
new drives added array contain data contribute system performance 
balancing process migrating disks equalize amount data stored disk request load imposed disk 
access histories balance disk load precisely currently done 
balancing background activity performed system little 
type imbalance results new drive added array newly created raid pegs drives system provide maximum performance previously created raid pegs continue original disks 
imbalance corrected background process copies valid data old pegs new full width pegs 
workload logging uncertainties faced developing hp autoraid design lack broad range real system workloads disk level measured accurately evaluating performance 
help remedy hp autoraid array incorporates workload logging tool 
system specially formatted disk tool records start times externally issued request 
events recorded desired 
overhead doing small event logs buffered controller ram written large blocks 
result faithful record particular unit asked drive simulation design studies kind describe 
acm transactions computer systems vol 
february 
john wilkes management tool hp autoraid controller maintains set internal statistics cache utilization times disk utilizations 
statistics relatively cheap acquire store provide significant insight operation system 
product team developed line inference management tool uses statistics suggest possible configuration choices 
example tool able determine particular period high load performance improved adding cache memory array controller short read cache 
information allows administrators maximize array performance environment 

hp autoraid performance results combination prototyping event driven simulation development hp autoraid 
novel technology hp autoraid embedded algorithms policies manage storage hierarchy 
result hardware firmware prototypes developed concurrently event driven simulations studied design choices algorithms policies parameters algorithms 
primary development team product division designed built tested prototype hardware firmware 
supported group hp laboratories built detailed simulator hardware firmware model alternative algorithm policy choices depth 
organization allowed teams incorporate new technology products possible time fully investigating alternative design choices 
section measured results laboratory prototype disk array product embodies hp autoraid technology 
section set comparative performance analyses different algorithm policy choices help guide implementation real thing 
experimental setup baseline hp autoraid configuration report disk system controller mb controller data cache 
connected fast wide differential scsi adapters hp system processor mb main memory running release hp ux operating system 
drives gb rpm seagate st immediate write reporting turned 
calibrate hp autoraid results external systems took measurements disk subsystems 
measurements acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system taken host hardware days host configurations number disks type disks data general series disk array storage system model mb front cache 
refer system raid array array chosen recommended third party raid array solution primary customers hp autoraid product 
supports connection host fast wide differential scsi channels 
single channel bottleneck system array configured raid 
results raid better raid 
set directly connected individual disk drives 
solution provides data redundancy 
hp ux logical volume manager lvm stripe data disks mb chunks 
hp autoraid raid array disks central controller controller level cache 
refer configuration lvm just bunch disks 
performance results presenting database macro benchmarks order demonstrate hp autoraid provides excellent performance real world workloads 
workloads exhibit behaviors burstiness simple rate tests relying provide misleading impression system behave real 
macro benchmarks 
oltp database workload transactions run hp autoraid array regular raid array lvm 
database test gb allowed fit entirely mirrored storage hp autoraid working set sizes larger available mirrored space discussed 
benchmark raid array disks spread evenly scsi channels mb cache enabled cache page size set kb optimal value workload default kb stripe unit size 
shows result hp autoraid significantly outperforms raid array performance lvm 
results suggest hp autoraid performing expected keeping data mirrored storage means writes faster raid array fast lvm 
presumably reads handled equally cases 
shows hp autoraid performance data migrated mirrored storage raid working set large contained entirely mirrored storage class 
type oltp database workload described database size set acm transactions computer systems vol 
february 
john wilkes transaction rate relative raid array transaction rate relative drive system raid array autoraid lvm number drives gb 
fit drive hp autoraid system started drive system baseline 
mirrored storage able accommodate third database case thirds drive system drive system larger systems 
differences performance drive systems due primarily differences number migrations performed differences larger systems result having spindles spread amount mirrored data 
drive configuration limited host cpu speed performed drive system 
data see database workload fairly random access pattern large data set hp autoraid performs factor optimum third data held mirrored storage optimum thirds data mirrored 
micro benchmarks 
addition database macro benchmark ran micro benchmarks synthetic workload generation program known db drive arrays saturation working set size random tests gb 
measurements taken slightly different conditions ones reported section hp autoraid contained mb controller data cache 
hp host tests 
acm transactions computer systems vol 
february 
comparison hp autoraid non raid drives regular raid array 
systems drives entire gb database fit raid hp autoraid 
performance hp autoraid different numbers drives 
fraction gb database held mirrored storage drive system drive system nearly drive system larger systems 
fig 

oltp macro benchmark results 
os second megabytes second autoraid raid raid cache random reads autoraid raid raid cache sequential reads hp autoraid hierarchical storage system autoraid raid raid cache single fast wide differential scsi channel hp autoraid raid array tests 
case lvm striping 
nature workload probably immaterial 
addition disks match amount space available data configurations 
test fast wide single ended scsi card required host cpu cycles believe affect micro benchmarks cpu limited 
raid array kb cache pages cache noted 
data micro benchmarks provided 
shows relative performance arrays random sequential reads writes 
random kb read throughput test primarily measure controller overheads 
hp autoraid performance roughly midway raid array cache disabled 
cache searching algorithm raid array significantly limiting performance cache hit rate close zero tests 
random kb write throughput test primarily test low level storage system systems driven disk limited os second megabytes second autoraid raid raid cache random writes sequential writes fig 

micro benchmark comparisons hp autoraid regular raid array non raid drives 
acm transactions computer systems vol 
february 
john wilkes behavior benchmark 
expected ratio os second raid os small update hp autoraid os mirrored storage write place 
sequential kb read bandwidth test shows mirrored storage hp autoraid largely compensate controller overhead deliver performance comparable 
sequential kb write bandwidth test illustrates hp autoraid ability stream data disk nvram cache performance better pure solution 
explanation relatively poor performance raid array cases results shown best obtained number different array configurations 
results demonstrated difficulties involved properly configuring raid array parameters adjusted caching cache granularity stripe depth data layout single combination performed range workloads examined 
thrashing 
noted section performance hp autoraid depends working set size applied workload 
working set size mirrored space performance shown 
shows performance obtained entire working set fit mirrored storage 
active write working set exceeds size mirrored storage long periods time possible drive hp autoraid array thrashing mode update causes target rb promoted mirrored storage class second demoted raid 
hp autoraid array usually configured avoid adding disks keep write active data mirrored storage 
data write active cost performance advantages technology course reduced 
fortunately fairly easy predict detect environments large write working set avoid necessary 
thrashing occur hp autoraid detects reverts mode writes directly raid automatically adjusts behavior performance worse raid 
simulation studies section illustrate design choices inside hp autoraid implementation trace driven simulation study 
simulator built pantheon cao golding simulation framework detailed trace driven simulation environment written 
individual simulations configured simulator called changed name avoid confusion parallel raid array project name cao 
acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system set available simulation objects scripts written tcl language ousterhout configuration techniques described golding 
disk models simulation improved versions detailed calibrated models described ruemmler wilkes 
traces drive simulations variety systems including cello time sharing hp series hp ux system snake hp series hp ux cluster file server oltp hp series hp ux system running database benchmark medium weight transactions system described section personal workstation server 
subsets traces usr disk cello subset database disks oltp oltp log disk 
long time periods months simulation runs day subsets traces 
trace contained detailed timing information resolution 
described considerable detail ruemmler wilkes 
modeled hardware hp autoraid pantheon components caches buses disks wrote detailed models basic firmware alternative algorithms policies design experiments 
pantheon simulation core comprises lines lines tcl hp autoraid specific portions simulator added lines lines tcl 
complexity model number parameters algorithms policies examining impossible explore combinations experimental variables reasonable amount time 
chose organize experiments baseline runs runs related changes baseline 
allowed observe performance effects individual closely related changes perform wide range experiments reasonably quickly 
cluster high performance workstations run simulations executing experiments took week elapsed time 
performed additional experiments combine individual changes suspected strongly interact positively negatively test aggregate effect set algorithms proposing product development team 
hardware implementation hp autoraid available early simulation study initially unable calibrate simulator disk models 
high level detail simulation confident relative performance differences predicted simulator valid absolute performance numbers calibrated 
relative performance differences observed simulation experiments suggest improvements team implementing product firmware acm transactions computer systems vol 
february 
john wilkes snake const density const bit rate const density const bit rate oltp db const density const bit rate const density const bit rate oltp log const density const bit rate const density const bit rate cello usr const density const bit rate const density const bit rate percent improvement versus rpm disks snake kb kb kb oltp db kb kb kb oltp log kb kb kb cello usr kb kb kb disk spin speed rb size fig 

effects disk spin speed rb size performance 

turn updated baseline model correspond changes implementation 
far individual results report chosen describe highlight particular behaviors hp autoraid system 
disk speed experiments measured sensitivity design size performance various components 
example wanted understand faster disks cost effective 
baseline disks held gb rpm 
evaluated variations disk spinning rpm rpm keeping data density bits inch transfer rate bits second constant 
expected increasing back disk performance generally improves performance shown 
results suggest improving transfer rate important improving rotational latency 
rb size standard autoraid system uses kb rbs basic storage unit 
looked effect smaller larger sizes 
workloads see kb size best ones tried balance seek rotational overheads versus data movement costs right 
surprising disks track sizes kb transfer sizes range tend get benefit fewer mechanical delays 
acm transactions computer systems vol 
february 
percent improvement versus kb snake oltp db oltp log cello usr percent improvement sequential layout versus random layout data layout hp autoraid hierarchical storage system snake alternate inner outer shortest queue shortest seek shortest seek queue oltp db alternate inner outer shortest queue shortest seek shortest seek queue oltp log alternate inner outer shortest queue shortest seek shortest seek queue cello usr alternate inner outer shortest queue shortest seek shortest seek queue percent improvement versus random read disk selection policy fig 

effects data layout mirrored storage class read disk selection policy performance 
data layout system allows blocks remapped blocks host system tried lay sequentially physically 
see bad problem get compared performance system host lun address spaces initially laid completely linearly disk best case completely randomly worst case 
shows difference layouts modest improvement performance linear case compared random 
suggests rb size large limit impact seek delays sequential accesses 
mirrored storage class read selection algorithm front read cache misses rb stored mirrored storage class array choose read stored copies 
baseline system selects copy random attempt avoid making disk bottleneck 
possibilities strictly alternating disks alternate attempting keep heads disks near outer edge keeping near inside inner outer disk shortest queue shortest queue disk reach block determined time algorithm jacobson wilkes seltzer shortest seek 
policies stacked aggressive policy falling back break tie 
experiments random final fallback policy 
shows results investigations possibilities 
shortest queue simple load balancing heuristic performance improved acm transactions computer systems vol 
february 
john wilkes snake oltp db cello usr fig 

effect allowing write cache overwrites performance 
average random workloads 
shortest seek performed better random average complex implement requires detailed knowledge disk head position seek timing 
static algorithms alternate inner outer perform better random interact patterns workload decrease system performance 
note passing differences show microbenchmarks type reported disks typically driven saturation allow effects show 
write cache overwrites percent improvement overwrites versus overwrites investigated policy choices managing nvram write cache 
baseline system instance allow write operation overwrite dirty data cache second write block previous dirty data cache flushed disk 
shows allowing overwrites noticeable impact workloads 
huge impact oltp log workload improving performance factor 
omitted workload graph scaling reasons 
hole plugging rb demotion rbs typically written raid reasons demotion mirrored storage garbage collection 
normal operation system creates holes raid promoting rbs mirrored storage class 
order keep space consumption constant system rbs raid 
default configuration hp autoraid uses logging writes demote rbs raid quickly demotion done idle time fill holes left promoted rbs 
reduce done raid cleaner allowed rbs demoted idle periods written raid hole plugging 
optimization acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system reduced number rbs moved raid cleaner cello usr workload snake improved mean time user os 

summary hp autoraid technology works extremely providing performance close nonredundant disk array workloads 
time provides full data redundancy tolerate failures single array component 
easy authors delivered system manuals day demonstration running trial benchmark minutes getting connected completely unmodified workstation 
product team experiences demonstrating system potential customers 
hp autoraid technology panacea storage problems workloads suit algorithms environments variability response time unacceptable 
able adapt great environments encountered real life provides outstanding general purpose storage solution availability matters 
product technology hp advanced disk array available 
acknowledgments colleagues hp storage systems division 
developed hp autoraid system architecture product version controller customers performance algorithm studies 
people put enormous amounts effort making program success possibly acknowledge directly name 
chris ruemmler wrote db benchmark results section 
dedicated memory late colleague helped establish collaboration produced body 
salem 
adaptive block rearrangement 
tech 
rep cs tr department computer science univ maryland college park maryland 
baker ousterhout seltzer 
non volatile memory fast reliable file systems 
proceedings th international conference architectural support programming languages operating systems 
comput 
arch 
news oct 
acm transactions computer systems vol 
february 
john wilkes blackwell harris seltzer 
heuristic cleaning algorithms log structured file systems 
proceedings usenix technical conference unix advanced computing systems 
usenix association berkeley calif 
diamond voigt 
adaptive hierarchical raid solution raid write problem 
part 
hewlett packard storage systems division idaho 
burrows lampson mann 
line data compression logstructured file system 
proceedings th international conference architectural support programming languages operating systems 
comput 
arch 
news oct 
cao lim venkataraman wilkes 
parallel raid architecture 
acm trans 
comput 
syst 
aug 
carson setia 
optimal write batch size log structured file systems 
usenix workshop file systems 
usenix association berkeley calif 
cate 
levels filesystem hierarchy disk 
tech 
rep cmu cs 
carnegie mellon univ pittsburgh penn chao english jacobson stepanov wilkes 
mime high performance storage device strong recovery guarantees 
tech 
rep hpl 
hewlett packard laboratories palo alto calif chen 
optimal file allocation multi level storage hierarchies 
proceedings national computer conference 

chen lee 
striping raid level disk array 
tech 
rep cse tr 
univ michigan ann arbor mich chen lee gibson katz patterson 
raid highperformance reliable secondary storage 
acm comput 
surv 
june 
ho sontag 
hp ux operating system hp precision architecture computers 
hewlett packard journal dec 
hewlett packard palo alto calif 
cohen king brady 
storage hierarchies 
ibm systems journal 
ibm new york 
dec 
storage management vax systems 
digital equipment maynard mass de jonge kaashoek hsieh 
logical disk new approach improving file systems 
proceedings th acm symposium operating systems principles 
acm new york 
deshpande bunt 
dynamic file management techniques 
proceedings th ieee phoenix conference computers communication 
ieee new york 
jr walsh bowers 
disk drive memory 
patent filed feb granted december 
english stepanov 
loge self organizing storage device 
proceedings usenix winter technical conference 
usenix association berkeley calif 
epoch systems 
mass storage server puts optical discs line workstations 
electronics november 
ewing 
raid overview 
part 

storage technology available www com raid html 
floyd ellis 
directory patterns hierarchical file systems 
ieee trans 
know 
data eng 
june 
acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system geist reynolds 
minimizing mean seek distance mirrored disk systems cylinder remapping 
performance evaluation may 
gelb 
system managed storage 
ibm systems journal 
ibm new york 
golding staelin sullivan wilkes 
tcl known simulation configuration problems claims researcher 
proceedings tcl tk workshop 
available tech 
rep hpl ccd concurrent computing department hewlett packard laboratories palo alto calif golding bosch staelin sullivan wilkes 
idleness 
proceedings usenix technical conference unix advanced computing systems 
usenix association berkeley calif 
gray 
census tandem system availability 
tech 
rep 
tandem computers incorporated cupertino calif henderson poston 
mss ii mainframe unix mass storage system rapid access storage hierarchy file management system 
proceedings usenix winter conference 
usenix association berkeley calif 
holland gibson 
parity declustering continuous operation redundant disk arrays 
proceedings th international conference architectural support programming languages operating systems 
comput 
arch 
news oct 
jacobson wilkes 
disk scheduling algorithms rotational position 
tech 
rep hpl csp 
hewlett packard laboratories palo alto calif katz anderson ousterhout patterson 
line storage low latency high capacity storage systems geographically distributed networks 
ucb csd 
computer science div department electrical engineering computer science university california berkeley berkeley calif kohl staelin stonebraker 
highlight log structured file system tertiary storage management 
proceedings winter usenix 
usenix association berkeley calif 

efficient mass storage parity recovery mechanism 
ibm technical 
bulletin july 
ibm new york 
majumdar 
locality file referencing behaviour principles applications 
msc thesis published tech 
rep 
department computer science university saskatchewan saskatchewan 
mcdonald bunt 
improving file system performance dynamically restructuring disk space 
proceedings phoenix conference computers communication 
ieee new york 

background data movement log structured disk subsystem 
ibm res 
development 
ibm new york 
menon 
methods improved update performance disk arrays 
tech 
rep rj 
ibm almaden research center san jose calif declassified nov 
menon 
methods improved update performance disk arrays 
proceedings th international conference system sciences 
vol 

ieee new york 
acm transactions computer systems vol 
february 
john wilkes menon mattson 
comparison alternatives disk arrays 
proceedings th international symposium computer architecture 
acm new york 
menon courtney 
architecture fault tolerant cached raid controller 
proceedings th international symposium computer architecture 
acm new york 
miller 
file migration cray mp national center atmospheric research 
ucb csd computer science division department electrical engineering computer science university california berkeley berkeley calif misra 
capacity analysis mass storage system 
ibm systems journal 
ibm new york 
kitsuregawa 
dynamic parity stripe raid disk arrays 
proceedings parallel distributed information systems international conference 
ieee new york 
ousterhout douglis 
beating bottleneck case log structured file systems 
operating systems review jan 
ousterhout 
tcl tk toolkit professional computing series 
addison wesley reading mass london 
park balasubramanian 
providing fault tolerance parallel secondary storage systems 
tech 
rep cs tr 
department computer science princeton university princeton new jersey 
patterson gibson katz 
case redundant arrays inexpensive disks raid 
proceedings acm sigmod international conference management data 
acm new york 
patterson chen gibson katz 
redundant arrays inexpensive disks raid 
spring compcon 
ieee new york 
rosenblum ousterhout 
design implementation log structured file system 
acm trans 
comput 
syst 
feb 
ruemmler wilkes 
disk shuffling 
tech 
rep hpl hewlett packard laboratories palo alto calif ruemmler wilkes 
unix disk access patterns 
proceedings winter usenix 
usenix association berkeley calif 
ruemmler wilkes 
disk drive modeling 
ieee computer march 
scsi 

secretariat computer business equipment manufacturers association 
draft proposed american national standard information systems small computer system interface scsi draft ansi standard february revision 
seltzer chen ousterhout 
disk scheduling revisited 
proceedings winter usenix conference 
usenix association berkeley calif 
seltzer bostic mckusick staelin 
implementation logstructured file system unix 
proceedings winter usenix 
usenix association berkeley calif 
seltzer smith balakrishnan chang padmanabhan 
file system logging versus clustering performance comparison 
conference proceedings usenix technical conference unix advanced computing systems 
usenix association berkeley calif 
acm transactions computer systems vol 
february 
hp autoraid hierarchical storage system friedrich 
implications distributed data commercial environment design hierarchical storage management 
performance evaluation may 
north holland amsterdam 
smith 
optimization systems cache disks file migration summary 
performance evaluation 
north holland amsterdam 
stk 

iceberg disk array subsystem 
storage technology available www com iceberg html 

compressed executables exercise thinking small 
proceedings summer usenix 
usenix association berkeley calif 
acm transactions computer systems vol 
february 
