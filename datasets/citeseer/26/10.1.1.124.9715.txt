guessing attacks computational soundness static equivalence mart abadi mathieu baudet bogdan warinschi university california santa cruz lsv cnrs inria projet ens cachan france loria inria nancy france 
indistinguishability pieces data lists pieces data represented formally terms relation called static equivalence 
static equivalence depends underlying equational theory 
choice inappropriate equational theory lead overly pessimistic overly optimistic notions indistinguishability turn security criteria require protection impossible attacks worse ignore feasible ones 
define justify equational theory standard fundamental cryptographic operations 
equational theory yields notion static equivalence implies computational indistinguishability 
static equivalence remains liberal applications 
particular develop analyze principled formal account guessing attacks terms static equivalence 
study security frequent reason pieces distinguished observer 
example pieces data encrypted messages observer attacker attempts underlying analyzing encrypted messages 
encrypted messages indistinguishable matter discern meaningful difference 
encrypted messages may different instance may look numbers 
formally indistinguishability represented terms relation equivalence 
roughly terms generally lists terms statically equivalent satisfy equations 
essentially special case observational equivalence relation process calculi 
simpler observational equivalence continued interaction system observer observer gets data conducts experiments 
reduced combination static equivalence usual bisimulation requirements static equivalence depends underlying equational theory 
choice inappropriate equational theory lead overly pessimistic optimistic notions indistinguishability turn security criteria require pro tection impossible attacks worse ignore feasible ones 
define equational theory standard fundamental operations justify apply resulting concept static equivalence 
operations include various flavors encryption tion 
static equivalence theory implies computational indistinguishability 
words formal notion static equivalence indicates data indistinguishable computationally feasible experiment tell pieces data apart 
property soundness theorem 
important explored completeness omit discussion see 
notion computational sorts assumptions typically employed complexity theoretic cryptography 
includes certain assumptions security properties operations assumptions appear reasonable fairly standard picking satisfactory ones somewhat delicate 
static equivalence conservative exclude feasible attacks remains liberal applications 
particular develop formal account guessing attacks terms 
guessing attacks constitute significant threat protocols rely passwords weak secrets literature con tains studies guessing attacks formal computational approaches 
formal approaches relative simplicity enables automation 
hand formal approaches varied ad hoc 
suggested formulation guessing attacks static equivalence 
believe idea number 
leads crisp definition fairly independent specific choices cryptographic operations extends nicely general process calculi date idea worked fully setting appropriate equational theory 
aim address gap 
related frequent shortcoming formal analyses lack computa tional justifications 
lack allows possibility protocol safe attacks formally feasible attack exists 
active line aims address shortcomings defining proving computational soundness results formal methods 
research includes computational study static equivalence theories considered include define theories model probabilistic encryption functions encryption weak keys provided satisfactory account attacks important piece context :10.1.1.142.1557
line research includes study guessing attacks ad definition attacks 
build previous go 
section section presents formal model defines sorted terms equational theory corresponding notion static equiva 
section interprets syntax formal model includes cryptographic assumptions 
section establishes computational soundness static equivalence equational theory 
section applies results study guessing attacks 
section concludes 
space constraints omit cryptographic constructions decision static equivalence proofs additional details included extended version 
model order represent cryptographic messages way sorted signature equipped equational theory 
sorts terms set sorts types consider defined grammar skey symmetric keys public encryption keys private decryption keys data passwords data coins coins encryption pair pairs messages symmetric encryptions messages type asymmetric encryptions messages type set sorted terms written 
built number variables 
names sk pk 
function symbols data encryption data deco data decryption data coins public key encryption private key decryption pub public key extraction data domain predicate key decryption skey coins symmetric encryption skey symmetric decryption sdec skey data domain predicate decryption pair pairing pair projection pair second projection data boolean constants 
data additional data constants encryption decryption symbols may available sorts set types symbols available define analogously 
assume pairs encrypted data values pair pairs encrypted enc component component function symbols represent encryption decryption functions auxiliary operations 
functions deco data values keys data values may constant symbols grammar may represent passwords dictionary 
contrast may represent strong keys scoping rules justify respective uses constant symbols names 
fact take type coins relates difficulties probabilistic password encryption 
language provides direct way attacker value results applying particular key 
proper ties essential guessing attacks practice example eke protocol 
remaining functions fairly standard public key symmetric encryption sense take parameter type coins 
omit type annotations function symbols 
instance type data may write pair enc data 
addition abbreviations enc sk pub sk rk 
write var names sets variables names term extend notation tuples sets terms 
term closed var 
write oe 

xn 
tn substitution dom oe 
xn var oe var 
tn names oe names 
tn 
substitution oe ground closed oe 
consider sorted substitutions ti sort xi 
equational theory model semantics cryptographic primitives equipping terms equational theory reflexive symmetric transitive relation stable sorted substitutions terms variables case names stable application contexts 
specifically consider equational theory generated equations deco deco pub pub sdec symbols represent variables appropriate sorts 
equations fairly standard 
surprise may inclusion deco attacker sees guesses confirm ciphertext encrypted decrypting comparing result equation comparison succeeds guess correct 
instance indistinguishable sort consequences equation important protocols rely weak secrets 
equation holds reasonable implementations particular keyed permutations oriented left right equations form convergent rewriting system call frames static equivalence frames represent sets messages available observer example sent public network 
precisely frame expression 
xn tn set restricted names closed term sort xi 
simplicity require loss name restricted names 
tn name may disclosed explicitly instance dedicated mapping xi tend omit binders identify frame underlying substitution 

xn 
tn closed term deducible frame exists term dom names names frames dom dom statically equivalent written sse pair terms var dom names names holds 
proving static equivalence may easy 
efficient methods exist cases 
particular static equivalence decidable polynomial time unsorted convergent expect result carries sorted convergent subterm theories alternative decision procedure subject main theorem see section 
close section examples equivalences theory rk sse rk rk sse rk sse sse pub sk pub sk sse pub sk pub sk sse sse examples simple examples symmetric encryptions keys illustrating encryptions hide plaintexts equalities plaintexts keys encryptions 
examples illustrate fresh names constant intuitively weak secret look fresh names 
values encryptions fact double encryption example unrelated underlying names 
example resembles example illustrates public key ciphertext pub sk look 
examples plaintexts encrypted available observer somewhat related plaintexts may variable 
example treats case observer plaintext encrypted case observer relation value value encryption example indicates distinguish fresh name intuitively adversary tell sees ciphertext kor success shared key decryption detectable 
implementation section interpret syntax formal model 
discuss cryptographic assumptions implementation relies 
interpreting syntax detail mapping terms distribution ensembles bit strings 
encryption schemes 
mapping uses public key encryption scheme pi ep dp symmetric encryption scheme pi ks es ds 
uses symmetric deterministic type preserving encryption scheme pi definition type preserving 
triples component key generation function second encryption function andthe third decryption function 
write security parameter 
write kj process generating encryption key pi pi respectively similarly write pk sk generating pair pk sk encryption decryption keys pi usual encryption functions es randomized write ep ande public key symmetric encryptions respectively message encryption key random coins write ep es corresponding encryption processes fresh 
assume set keys pi form ff thatthe set coins pi pi ff functions ff ff polynomially bounded linearly increasing say pi type preserving encryption pi map set bit strings corresponding type 
sorts functions random drawings 
value concrete meaning sorts terms characterized asin sort carrier set function symbol :10.1.1.142.1557
function 
sort procedure written drawing random element distribution written 
require element probability probability collision negligible inverse polynomial operations mentioned computable probabilistic polynomial time 
conditions ensured construction properties secure encryption schemes defined subsection carrier set type defined inductively skey skey symmetric keys pi public keys pi private keys pi data data ff coins coins ff pair air ciphertexts pi ciphertexts pi denotes concatenation bit strings applied extension sets strings assume encoding identifiers types bit strings meaning function symbols follows symbols implemented bit strings concatenation projections expect 
constants 
mapped arbitrary computable se quences bit strings length ff prefixed tag data mapped respectively data ff data ff 
implementations defined pk coins ko pk sk sk ko kc decryption dp sk sk data ff ko kc decryption dp sk succeeds ff implementations sdec similarly 
implementations deco defined data kk deco data kk assume inverse bijections particular tags left unchanged functions 
drawing random values type defined addition appropriate tags case skey dedicated key respectively fst kp snd kp 
data coins uniform distribution pair recursively draw random elements tag concatenate 
encrypt random element witha fresh random key appropriate kind 
interpreting terms frames 
associate frame en 
xn tn distribution defined procedure computing sample oe 
name sort occurs draw value ba 
compute value closed term ti recursively function symbol 
sn cs 
cs 
resulting concrete frame oe ct 
xn ctn 
define notation closed terms tuples closed terms similarly may write en specify values names cn en specify values constants 
cn 
ensemble family distributions identify single valued dirac distribution unique value 
indistinguishability 
ensembles distinguishable written ss adversary negligible 
cryptographic assumptions symmetric asymmetric encryption schemes satisfy notion related type type security 
essentially require type encryption function restricted elements reveal key encryption hide partial information underlying plaintexts belonging carrier set 
definition 
pi ks es ds symmetric encryption scheme 
foreach security parameter type consider experi ment stage adversary key generated ks provided access oracle es may submit messages oracle receives return corresponding encryptions es outputs challenge message st bit selected random tagged encryption ko kes tagged encryption random element random key st outputs bit 
adversary successful advantage defined pi pr successful say pi secure adversaries function pi negligible 
definition 
pi kp ep dp asymmetric encryption scheme security parameter type consider stage adversary pair encryption decryption keys pk sk generated pk sk pk outputs challenge message state infor mation st bit selected random tagged encryption pk ko pk tagged encryption random element random public key st outputs bit 
adversary successful advantage adv pi pr successful say pi secure adversaries function pi negligible 
notion security encryption schemes data values keys standard standard notion area definition 
pi symmetric deterministic type scheme set keys ff 
real random security ror security parameter type consider experiment adversary key generated provided access oracle may submit tagged messages oracle receives return corresponding tagged encryptions submits challenge message state infor mation st bit selected random tagged encryption random element st outputs bit adversary successful challenge message messages submitted encryption oracle advantage ror pi pr successful say pi ror secure adversaries adv ror pi negligible 

encryption passwords data values pwd foreach security parameter type consider ex periment stage adversary outputs key ff state information st bit selected random tagged encryption random element random element st outputs bit adversary successful advantage defined pwd pi pr successful say pi pwd adversaries enc function pwd pi negligible 
pi secure ror pwd secure 
condition ror security variant ind security require allow enc class encryption algo rithm strong keys just passwords 
condition main result remains true frames constants keys enc 
condition pwd security addresses security passwords keys 
intuitively states encryption random value distributed value 
related previous condition possibly different distribution encryptions random values values 
difference due fact layers encryptions passwords see example 
implementation pi pi pi secure secure schemes pi pi pi respectively secure secure secure possible secure implementation standard cryptographic tools outlined extended version 
soundness static equivalence section main soundness result 
usual result requires hypothesis excludes encryption cycles formedness conditions key position expression position corresponds argument subterm form pub second argument subterm 
encryption cycle frame sequence names 
kn sort data skey kn exists subterm form ki subterm position ki subterm instance frame sk pub sk encryption cycle pub sk pub sk 
frame formed satisfies conditions reduced normal form respect rewriting sys tem ii contain symbols dec sdec success sdec success fst snd iii terms key position forms depending sorts skey names sort names terms form pub sort data names constants iv terms type coins may names appear third encryption name appears twice terms appears identical encryption cycles vi subterm form enc name constants 
subterm form enc enc 
condition ii indicates focus indistinguishability constructors preclude functions observations may distinguish frames 
condition iii says keys atomic terms symmetric encryptions terms form pub public 
similarly condition iv says coins names encryptions different coins encryption 
condition isthe acyclicity requirement 
condition vi restricts occurrences constants plaintexts deterministic encryption strong keys rep resented names 
instance condition excludes frame enc enc equivalent formally computationally happen bit string implementations 
generally terms suchthat encryptions enc enc may behave dis fresh names formally computationally bit string values collide negligible probability obtain theorem sse soundness 
formed frames suchthat sse 
secure implementation ss 
proof theorem extended version relies ona detailed formal analysis static equivalence particular decision procedure static equivalences consideration 
theorem step step complexity theoretic validation decision procedure 
application security guessing attacks weak secrets pins passwords serve encryption keys safe challenging possibility guessing attacks data depends weak secret allows attacker check values weak secret 
example message contains fixed cleartext hello encrypted password pwd drawn attacker sees message try decrypt values dictionary yields cleartext hello probable value password 
attacker may mount attack offline avoiding detection 
attack possible fact data available attacker pwd distinguished value pwd hello pwd hello pwd 
conversely immunity attacks formulated static equivalence frames corresponds available attacker variant weak secrets replaced fresh keys arbitrary keys believe suggested treatment guessing attacks terms static equivalence attractive respects 
treatment computationally sound 
comparison previous computational justification formal criterion results strengths 
apply criterion formulated terms standard notions ad hoc criterion consequently fit standard analysis method deal properties kinds attacks 
addition general immediately apply scenarios multiple weak secrets 
satisfying results follow theorems somewhat 
formalism modeling password constant sort data password revealed frame 
sse 
substitutions 

correspond instantiations distinct actual values frames represents attacker may obtain course protocol execution line 
soundness formal notion corollary theorem generalization multiple passwords 
formal notion applied examples literature eke protocol corollaries yield computational guarantees examples 
corollary single password 
assume secure implementation 
bea formed frame constant sort data distinct constants sort data 

sse 
wis computationally hidden computable sequences bit strings ff ss corollary multiple passwords 
assume secure implementation 
formed frame 
wn constants sort data 
cn fresh distinct constants sort data 


wn 
cn sse 

wn 

wn computationally necessarily pairwise distinct computable bit strings 

ff wn ss wn investigate computational foundations formal data indistinguishability static equivalence 
define particular equational theory obtain computational soundness result 
largely ideas common previous equational theory computational assumptions straightforward 
main diffi culties address relate encryption data values 
correspondingly obtain soundness result formal criterion protection data values 
direction generalization results primitives 
instance certain password protocols sophisticated exponentiation include 
primitives digital signatures important trace properties process equivalences static equivalences hope extensions may serve component eventual computational justification process equivalences 
acknowledgments 
steve kremer anonymous referees help ful comments 
research partly carried mathieu baudet visiting university california santa cruz bogdan warinschi university 
partly supported national science foundation ccr ccr ccf itr ara aci jc 

abadi baudet warinschi 
guessing attack computational soundness static equivalence extended version 
manuscript 

abadi cortier 
deciding knowledge security protocols equational theories 
proc 
st international colloquium automata languages programming icalp volume lncs pages 
springer 

abadi cortier 
deciding knowledge security protocols equational theories 
proc 
th ieee computer security foundations workshop csfw pages 

abadi fournet 
mobile values new names secure communication 
proc 
th acm symposium principles programming languages popl pages 

abadi gordon 
bisimulation method cryptographic protocols 
nordic journal computing 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 

abadi warinschi 
password encryption analyzed 
proc 
nd international colloquium automata languages programming icalp volume lncs pages 
springer 

backes pfitzmann waidner 
composable cryptographic library nested operations 
proc 
th acm conference computer communications security ccs pages 

bana 
soundness completeness formal logics symmetric encryption 
phd thesis university 

baudet 
deciding security protocols line guessing attacks 
proc 
th acm conference computer communications security ccs pages alexandria virginia usa nov 

baudet cortier kremer 
computationally sound implementations equational theories passive adversaries 
proc 
nd international colloquium automata languages programming icalp volume lncs pages 
springer 

bellare pointcheval rogaway 
authenticated key exchange secure dictionary attacks 
advances cryptology eurocrypt volume lncs pages 
springer 

bellovin merritt 
encrypted key exchange password protocols secure dictionary attacks 
proc 
ieee symposium security privacy ssp pages 

blanchet abadi fournet 
automated verification selected equivalences security protocols 
proc 
th ieee symposium logic computer science lics pages 

boreale de nicola pugliese 
proof techniques cryptographic processes 
proc 
th ieee symposium logic computer science lics pages 

mackenzie patel 
provably secure password authenticated key exchange diffie hellman 
advances cryptology eurocrypt volume lncs pages 
springer 

corin 
analysing password protocol security line dictionary attacks 
technical report tr ctit centre telematics information technology univ twente netherlands 

corin malladi alves foss 
guess 
new tool finds new guessing attacks extended 
ifip wg acm sigplan workshop issues theory security wits pages 


theory dictionary attacks complexity 
proc 
th ieee computer security foundations workshop csfw pages 

fournet 
private communication 

gennaro lindell 
framework password authenticated key exchange 
advances cryptology eurocrypt volume lncs pages 
springer 

goldreich lindell 
session key generation human passwords 
advances cryptology crypto volume lncs pages 
springer 

gong 
verifiable text attacks cryptographic protocols 
proc 
th ieee conference computer communications infocom pages 

gong lomas needham saltzer 
protecting poorly chosen secrets guessing attacks 
ieee journal selected areas communications 

katz ostrovsky yung 
practical password authenticated key exchange provably secure standard assumptions 
advances cryptology eurocrypt volume lncs pages 
springer 

laud 
symmetric encryption automatic analyses confidentiality active adversaries 
proc 
ieee symposium security privacy ssp pages 

lowe 
analysing protocols subject guessing attacks 
journal computer security 

micciancio warinschi 
completeness theorems abadi rogaway logic encrypted expressions 
journal computer security 

micciancio warinschi 
soundness formal encryption presence active adversaries 
proc 
theory cryptography conference tcc volume lncs pages 
springer 

phan pointcheval 
security ciphers semantic security pseudo random permutations 
proc 
selected areas cryptography sac volume lncs pages 
springer 

steiner tsudik waidner 
refinement extension encrypted key exchange 
acm sigops oper 
syst 
rev 

tsudik 
remarks protecting weak secrets poorly chosen keys guessing attacks 
proc 
th ieee symposium reliable distributed systems srds 

