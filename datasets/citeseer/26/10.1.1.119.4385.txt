cil intermediate language tools analysis transformation programs george necula scott rahul weimer department electrical engineering computer sciences university california berkeley necula weimer cs berkeley edu 
describes language highlevel representation set tools permit easy analysis source source transformation programs 
compared cil fewer constructs 
breaks certain complicated constructs simpler ones works lower level syntax trees 
cil high level typical intermediate languages address code designed compilation 
result representation easy analyze manipulate programs emit form resembles original source 
comes front translates cil ansi programs microsoft gnu extensions 
describe structure cil focus disambiguates features confusing program analysis transformation 
describe program merger structural type equality allowing complete project viewed single compilation unit 
representative application cil show transformation aimed making code immune stack smashing attacks 
currently cil part system analyzes instruments programs run time checks ensure type safety 
cil served project believe usefully applied situations 
programming language known flexibility dealing low level constructs 
unfortunately known difficult understand analyze humans automated tools 
embarked project analyze instrument programs order bring existing safe usage pointers enforce research supported part national science foundation career 
ccr itr 
ccr 
ccr gifts research microsoft research 
information necessarily reflect position policy government official endorsement inferred 
horspool ed cc lncs pp 

springer verlag berlin heidelberg george necula apparent examined number intermediate languages front ends deciding create 
available toolkits met requirements 
high level support detailed analyses designed fed compiler low level suif failed handle gcc extensions prevented working software extensions linux device drivers kernels 
struct int fld str struct int fld str str fld str fld fig :10.1.1.33.8725

short program fragment highlighting ambiguous syntax extracting precise meaning ofa program requires additional processing ofthe syntax 
example consider lines fig 

syntax different meanings line involves memory line involves 
low level representations ambiguities typically lose structural information types loops high level constructs 
addition difficult print low level representation way faithful original source 
goal find compromise approaches 
applications targeting systems want carry analyses source source transformations programs 
intermediate language task simple analyze close source able handle real world code 
describes cil highly structured clean subset ofc meets requirements 
cil features reduced number syntactic conceptual forms example looping constructs reduced single form function bodies explicit return statements syntactic sugar eliminated 
cil separates type declarations code type promotions explicit flattens scopes alpha renaming function bodies 
simplifications reduce number considered manipulating program making amenable analysis transformation 
steps carried stage compilers cil analysis easier exposing structure syntax 
cil conceptual design tries stay close cil program mapped back statements source program 
additionally translating cil fairly easy including reconstruction syntactic idioms 
key requirement cil ability parse represent variety occur real world systems code compiler cil intermediate language tools analysis transformation specific extensions inline assembly 
cil supports gcc extensions nested functions handle entire linux kernel 
rest ofthis describes handling ofc features cil applications 
section describe syntax typing semantics language 
expressions instructions section control flow information section 
section details treatment 
discuss source level attributes section 
having described features cil move analysis section applying existing multi file programs section 
section discuss related conclude section 
handling lvalues lvalue expression referring region storage 
lvalue appear left hand side assignment 
understanding lvalues requires simple syntax tree 
shown fig 
fragment str fld may involve memory depending types involved :10.1.1.33.8725
str fld arrays fragment refers offset single contiguous object named str 
str array fld pointer value str fld loaded offset value referenced :10.1.1.33.8725
case str pointer fld array similar 
pointers str str fld str fld referenced :10.1.1.33.8725
result program analyses care differences find hard analyze lvalues syntax tree form 
lvalue var variable mem exp field field index exp fig 

syntax lvalues cil lvalue expressed pair ofa base plus offset 
base address starting address storage variable local global pointer expression 
distinguish cases tell quickly accessing component ofa variable memory region pointer 
offset variable memory region denoted base consists ofa sequence index designators 
meaning ofan lvalue memory address type ofthe object stored 
fig 
shows definitions oftwo judgments define meaning 
meaning ofa variable base address ofthe variable type 
judgment says lvalue base refers object oftype address lvalue offsets treated functions george necula var ptr mem struct 
field array sizeof index fig 

typing evaluation rules cil lvalues shift address type pairs new address type pairs object 
judgment means lvalue offset applied lvalue denoting yields lvalue denoting object oftype address 
judgment address range sizeof 
considering example fig 
lvalues shown cil representations obvious variable pointer indirection 
str fld mem lvalue mem lvalue var str field fld str fld var str index index interpretation standard equivalences tasks instrumenting memory access program easier :10.1.1.33.8725
intermediate representations occurrences ofthe variable share variable declaration 
easy change variable properties variable name type allows pointer equality checks comparing variables 
expressions instructions cil syntax basic concepts expressions instructions statements 
expressions represent functional computation side effects control flow 
instructions express side effects including function calls local intraprocedural control flow 
statements capture local control flow 
syntax cil expressions fig 

constants fully typed original textual representation maintained addition value 
sizeof expressions preserved computing dependent compiler compilation options transformation may wish change types 
casts inserted explicitly program conform type system implicit coercion rules 
expression explicit syntax represent implicit coercion array address element 
cil intermediate language tools analysis transformation rule typing judgment exp case analysis type exp leading distinct typing rules exp addition allows syntax directed type checking making coercion explicit source 
operator printed type rule way convert array pointer element lvalue array lvalue ptr expressions 
side effects converted cil instructions statements discussed 
exp constant const lvalue lvalue exp type exp type unop unop exp binop binop exp exp cast type exp lvalue lvalue instr set lvalue exp call lvalue option exp exp list asm raw strings lvalue list exp list fig 

syntax expressions instructions instruction contains single assignment function call 
set instruction updates value ofan lvalue 
call instruction optional lvalue return value function stored 
function component ofthe call instruction type cil removes redundant operators applied functions function pointers 
arguments functions expressions side effects embedded control flow 
asm instruction capture common occurrence assembly systems programs 
cil understands microsoft gnu style assembly directives reports inputs list outputs list ofthe assembly block 
information volatility raw assembly template strings stored interpreted 
cil stores location information statements take advantage information insert line directives emitting output 
allows error messages heavily transformed program line correct source line original program 
integrating cfg intermediate language top ofthe lvalues expressions instructions cil provides highlevel program structure low level control flow information 
program structure captured recursive structure statement george necula annotated successor predecessor control flow information 
single program representation routines require ast type analyses pretty printers routines require cfg dataflow analyses 
stmt instr instr list return exp option goto stmt break continue exp stmt list stmt list switch exp stmt list stmt list loop stmt list fig 

syntax statements fig 
shows syntax statements 
addition information show statement contains labels source location information list predecessor statements 
assignments function calls grouped instr control flow embedded 
cil resolve break continue gotos leaving code motion transformations loop unrolling easier 
return statement optionally records return value 
function cil return statement 
statement records condition expression branches lists 
cil loop forever looping construct break statement exit loop 
cases pretty printer able print nicer looking loop 
notice fig 
syntax case switch statements 
reason implement case optional label associated statement 
switch statement consists ofan expression list represent entire body ofthe switch case labels indicating starting point ofthe various cases 
provide faster access individual cases store starting points ofthe cases separate list switch statement 
handling types fig 
describes representation ofc types cil 
named type arises uses type names defined typedef 
types usual counterparts notable features cil respect type handling composite types structs 
programs declare named anonymous composite types file scope local scopes 
hard move expressions involve locally defined types forces scan entire ast find declarations types 
simplify tasks cil moves type declarations ofthe program gives global scope 
anonymous composite types unique names cil composite types declaration top level 
cil intermediate language tools analysis transformation type void int float ptr type array type exp fun type variable list enum named string type struct union string item list string field list fig 

syntax types structure easy change definition ofa composite type provides common place watch recursive type definitions definitions involve 
far types concerned cil similar suif suif eliminates user defined typedefs introduces extraneous ones cil careful maintain typedef structure source 
handling attributes useful mechanism programmer communicate additional information program analysis 
decided extend purpose gnu notation pragmas attributes 
pragmas appear top level attributes associated identifiers types 
advantage ofthis method gcc able process annotated file ignores attributes pragmas recognize 
gnu declaration contain number ofthe form attribute attribute 
example prototype function linux kernel int const char fmt 
attribute format printf attribute associated name declared indicates printf function argument format string arguments starting second matched format specifiers 
difficulty gnu notation attributes apparent lack formal specification attribute placement attribute association types identifiers 
worked specification extend placement oftype qualifiers ansi 
attributes pragmas sub language ofc expressions excluding comma expression side effecting expressions including constructed attribute format attribute example 
george necula syntax declarations front supports declaration base type declarator declarator identifier declarator declarator declarator declarator attributes appear ofthe declaration associated declared identifier 
attributes associated types 
particular attributes appearing base type associated type appearing pointer type constructor associated pointer type 
attributes appearing declarator parenthesized declarator associated type ofthe declarator 
example declaration declare array pointers functions arguments returning pointers integers int void attribute belongs type int pointer type int 
attribute belongs function type array type type 
attribute applies declared name gcc compiler accepts ofthis attribute language accept contexts declarations occur 
example name attributes accepted function prototypes function definitions 
suggests placement carefully designed gcc added ad hoc manner 
cil analyses source source transformations section describes concrete uses 
small example demonstrates ease cil encode simple program transformations 
second shows cil support serious program analysis transformation tasks 
preventing buffer overruns demonstrate cil source source transformations cil encoding ofa refinement stackguard buffer overrun defense 
stackguard gcc patch places special canary word return address stack checks validity ofthe canary word returning function 
buffer overrun rewrites return address modify canary detected 
algorithm slight chance ifthe attacker cil intermediate language tools analysis transformation exception guard function 
class object type contain array 
inherit visit types method match inspect type raise array guard follow pointers array array keep looking class restore ra stmt object rewrite returns inherit look returns method match check statement return new block restore ra restore ra stmt new block return descend statements class get push ra restore ra object inherit consider function method need guard 
try raise exception need guard list iter fun vi inspect local variable new vi find arrays local arrays return local arrays guard get push ra modify new restore ra modify function saves return address entry restores exit stackguard file apply transformation stmt instr call lval var svar get push ra restore ra external functions build call functions get push ra stmt get push ra restore ra stmt restore ra new get push ra restore ra fig 

complete ocaml source refined stackguard transformation cil george necula guesses canary value incurs overhead functions local array variables 
fig 
shows refined implementation stackguard 
transformation pushes current return address private stack function entered line pops saved value returning line 
assume external functions get push ra restore ra purpose 
functions local variables contain arrays modified code lines implements check 
transformation simplified fact cil functions explicit returns checked line 
code library routines visitors 
applying transformation remains provide link time implementation functions save restore return address 
transformation significantly complicated performed ast 
fact transformation perform elaboration cil performs 
ensuring memory safety programs ccured system combines type inference run time checking existing programs memory safe 
carries program analysis ofthe structure ofthe types program 
uses results ofthe analysis change type definitions memory accesses program 
safety memory statically verified appropriate run time check inserted 
analysis involves iterating types program comparing involved casts form structural equality 
cil simpler type language recursion limited composite types easier 
result ofthis analysis pointers transformed multiword structures carry extra run time information example array bounds information 
memory reads writes involving pointers instrumented contain run time checks 
transformations quite extensive require detailed modifications lvalues variables declarations 
clear disambiguation ofthese features provided cil difficult determine syntactic constructs represent accesses memory change 
transformed program available user inspection compiler consumption 
cil high level structural information means resulting output quite faithful original source allowing compared easily possible conventional intermediate representations 
ccured ofthe program merger described section handle entire software projects 
uses attributes described section communicate detailed information pointer structure 
cil intermediate language tools analysis transformation program merger described far intermediate language program analysis source source transformation easy 
analyses effective applied program 
designed implemented tool merges ofa program compilation units single compilation unit proper renaming preserve semantics 
designed merger application impersonate compiler works gnu microsoft visual compilers keep track files compiled build program specific compiler options file 
compiler invoked compilation linking tool creates expected object file stores preprocessed source file 
actual compilation delayed link time 
compiler invoked link program learns names object files constitute project 
ofthe associated preprocessed source files loaded merged 
setup benefit projects simply changing ofthe name ofthe invoked compiler linker 
actual merging units turned surprisingly tricky 
file scope identifiers renamed properly avoid clashes globals similar identifiers different files 
identifiers functions declared static names introduced typedef tags structure enumeration types 
unfortunately sufficient file scope type identifiers declared header files result multiple copies different names inclusion point 
uses name equivalence types copies longer compatible leading numerous type errors merged program 
result need careful renaming file scope identifiers 
illustrate problem consider file fragments 
clarity add suffix file scope names second file reality names identical files especially originate header file 
file struct list int data struct list extern struct list head struct tree struct stuff data struct tree struct stuff int elem 
file struct list int data struct list extern struct list head struct tree struct stuff data struct tree struct stuff int start int elem note tags list list name 
fact name ifwe give different names merged program conflicting declarations ofthe global head 
ofthe extra start field stuff tags stuff tree names dif george necula ferent stuff tree respectively 
case ifwe fail rename tree tag program misbehave strange way 
situations occur practice vortex gcc specint benchmarks 
renaming errors hard find large program 
motivated try describe precisely problem merging algorithm involved way argue change behavior ofthe program 
naming problem arises fact uses name equivalence types different compilation units free different names types intended interoperate units 
essence means linked program cares structural type equivalence 
try merge different modules go name equivalence structural type equivalence 
similar problem occurs distributed systems remote procedure call remote storage different components different type names types structurally equivalent compatible 
fact common argument favor structural type equivalence :10.1.1.33.8725
merging algorithm pass compilation units incrementally accumulating merged program 
file merging phases 
phase merge types tags depend variable names 
second stage rewrite variable declarations function bodies 
order merge types expand typedef definitions 
possible body ofa typedef refer name defined type names defined 
leaves set definitions recursive shown 
loss model tag definitions follows tag definition struct type int ptr struct note constructor applied tag 
case pointer array constructor applied base type modeled base type case constructor applied constructed type treated constructor application 
sets definitions merged program file merged find ofthe set share names defined tags 
language definitions considered precisely structural type equivalence recursive types 
pair struct struct scan bodies ofthe definitions find match possibly match renaming match provided tags renamed name 
notice consider renaming tags 
exactly ofthe kinds generated pair definitions second kind zero equalities right ofthe equivalence cil intermediate language tools analysis transformation decide names tags file process variable function definitions 
variable declarations share static inline function definitions 
remove duplicate global function prototypes extern variable declarations 
implementation ofthe merger algorithm lines code 
tried merger various programs 
largest specint specint benchmark suites 
reasonably fast biggest cost saving preprocessed source files ofthe object files 
example merge sources ofthe gcc compiler machine intel pentium mhz took seconds preprocess save ofthe sources seconds parse preprocessed sources seconds merge 
gcc consists source header files totaling lines 
result tokens result ofthe merging file tokens thirds tokens shared modules 
similar results programs 
side benefits merger observed gcc microsoft compiler parse faster produce slightly faster executables merged files supposedly due increased ability optimize program 
increased opportunity inlining optimization phase substantially slower full optimization turned 
related variety languages developed compilers 
low level extract recognizable source transformation 
intermediate representations designed specifically aid high level analyses sufficient elaboration ofthe source cil lvalues example enable detailed trouble free analysis transformation 
microsoft ast toolkit supports microsoft extensions support gnu extensions 
tightly integrated compiler works program compiler works offers hooks various compilation stages 
high level program representation harder source source transformations 
example provide expressions side effects cil 
front written standard ml 
uses syntax trees come built support control flow graphs 
full ansi type checking annotate code explicit casts type promotions 
edison design group front features high quality parser full ansi languages 
emphasis thorough syntax analysis error checking 
uses high level intermediate language leaves george necula task complicated constructs appropriate back 
works source file time 
breeze infrastructure building compilers 
initially parses program syntax tree 
comes library routines construct control flow graphs carry various analyses routines lower representation ofthe program derived syntax tree 
built support provided analyzing programs spanning files 
system meets requirements closely suif 
suif infrastructure compiler research consisting intermediate language front ends edison front library routines manipulate intermediate representation 
intermediate language object oriented design supports program representation various levels 
library includes transformers ensure properties part design 
suif handles full ansi language support ofthe gcc extensions appear programs apache web server linux kernel 
example handle assembly instructions attributes 
result able suif process large open source projects linux kernel specint gcc benchmark 
addition compared suif output cil external representation usually closer original source 
cases typedefs suif retain user supplied names introduces extraneous casts confuse certain kinds analyses ccured 
example line ofthe example page emitted suif int int char struct type str cil output memory accesses statement apparent time output stays close source str fld suif comes support merging multiple source files cases fails correctly :10.1.1.33.8725
example suif version correctly handle example described section earlier versions appear 
programming language supports number attractive systems programming 
unfortunately features difficult reason 
abundant expertise interpreting constructs ofthe programming language tools program analysis especially source source transformation easy 
cil intermediate language tools analysis transformation cil minimal design attempts distill language constructs ones precise interpretation stay fairly close high level structure ofthe code results source transformations bear sufficient resemblance source code 
cil successfully simple analyses transformations pervasive transformation instruments programs code ensure memory safety 
believe cil comes close desire analysis transformation infrastructure 
ofthe cil features came context task cil 
surprisingly difficult handle lvalues types correctly ofthe difficulties generated implicit conversions array pointer element function pointer 
satisfactory solution ofthese problems introduce construct exist feature cil exercised embedded control flow graph 
ccured includes simple data flow analysis support bounds checking elimination starting cil project data flow analysis 
expect ofthese experiences ll gain confidence part ofthe design change better suit needs analyses 
extremely useful program merger act compiler transparently project 
merging errors manage get past compiler linker nightmare find large program important specify carefully merging algorithm works 
restricted version type equivalence recursive types simple sufficient purposes 
cil currently handles extensions 
exception gcc trampoline extension nested functions encounter practice 
step extend system handle 
source code cil associated tools available www cs berkeley edu necula cil 
acknowledgments wish bhargava raymond help implementation cil infrastructure mihai budiu assistance suif experiments anonymous referees suggestions improving 
george necula 
roberto amadio luca cardelli 
subtyping recursive types 
acm transactions programming languages systems 

luca cardelli james donahue mick jordan bill kalsow greg nelson 
modula type system 
proceedings th annual acm symposium principles programming languages pages january 

microsoft 
ast toolkit 
research microsoft com sbt ast asp 

cowan calton pu dave maier jonathan walpole peat steve beattie aaron perry wagle qian zhang heather hinton 
stackguard automatic adaptive detection prevention buffer 
proceedings th usenix security conference pages january 

edison design group 
front 
www edg com cpp html 

iso iec 
iso iec programming languages 
brian kernighan dennis ritchie 
programming language second edition 
prentice hall englewood cliffs 

holger urs lzle 
suif compiler system 
technical report university california santa barbara 
computer science dept december 

bell labs 
front sml 
cm bell labs com cm cs doc overview html 

calvin lin samuel daniel jimenez tok 
breeze 
www cs utexas edu users breeze 

paul mcjones andy hisgen 
topaz system distributed multiprocessor personal computing 
proceedings ieee workshop workstation operating systems november 

george necula scott weimer 
ccured type safe retrofitting legacy code 
proceedings th annual acm symposium principles programming languages january 

standard performance evaluation 
spec benchmarks 
july 
www spec org osg cpu cint 

robert wilson robert french christopher wilson saman amarasinghe jennifer anderson steve tjiang shih wei liao chau wen tseng mary hall monica lam john hennessy 
suif compiler system parallelizing optimizing research compiler 
technical report csl tr stanford university computer systems laboratory may 

