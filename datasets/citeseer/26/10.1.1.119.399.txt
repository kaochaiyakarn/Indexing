insertion evasion denial service network intrusion detection thomas com timothy com secure networks january counted counts counts counted 
albert einstein game people throw ducks balloons 
homer simpson currently available network intrusion detection id systems rely mechanism data collection passive protocol analysis fundamentally awed 
passive protocol analysis intrusion detection system ids unobtrusively watches tra network patterns suspicious activity 
outline basic problems reliability passive protocol analysis isn information wire base happening networked machines fact system passive inherently fail open meaning compromise availability ids doesn compromise availability network 
de ne classes attacks exploit fundamental problems insertion evasion denial service attacks describe apply types attacks ip tcp protocol analysis 
results tests attacks popular network intrusion detection systems market 
id systems tested vulnerable attacks 
indicates network id systems fully trusted fundamentally redesigned 
intrusion detection security technology attempts identify isolate intrusions computer systems 
di erent id systems di ering classi cations intrusion system attempting detect attacks web servers consider malicious requests system intended monitor dynamic routing protocols consider rip spoo ng 
regardless id systems share general de nition intrusion unauthorized usage misuse computer system 
intrusion detection important component security system complements security technologies 
providing information site administration id allows detection attacks explicitly addressed security components service wrappers attempts provide noti cation new attacks unforeseen components 
intrusion detection systems provide forensic information potentially allow organizations discover origins attack 
manner id systems attempt attackers accountable actions extent act deterrent attacks 
cidf model intrusion detection systems di erent id systems deployed world wide di erent designs 
di erent id systems helps amodel consider 
common intrusion detection framework cidf de nes set components de ne intrusion detection system 
components include event generators boxes analysis engines boxes storage mechanisms countermeasures boxes 
cidf component software package part larger system 
shows manner components relate 
purpose box information events rest system 
event complex low level network protocol occurrence 
need evidence intrusion 
boxes sensory organs complete ids box inputs intrusion detection system information security events 
boxes analyze input event generators 
large portion intrusion detection research goes creating new ways analyze event streams extract relevant information anumber di erent approaches studied 
event analysis techniques statistical anomaly detection graph analysis biological immune system models proposed 
boxes boxes produce large quantities data 
information available system operators 
box component ids de nes means store security information time 
output high level interpreted events analysis box output reactions events countermeasure box event box output storage events locally storage box output raw low level events raw event source cidf component relationships id systems designed alarms 
commercially available id systems equipped form countermeasure box capability ranging shutting tcp connections modifying router lter lists 
allows ids try prevent attacks occurring initial attacks detected 
systems don provide box capabilities hooked home response programs achieve similar ect 
network intrusion detection passive analysis id systems driven audit logs provided operating system detecting attacks watching suspicious patterns activity single computer system 
type ids discerning attacks initiated local users involve misuse capabilities system 
host multi host intrusion detection systems major shortcoming insulated network events occur low level interpret high level logging information 
network intrusion detection systems driven interpretation raw network tra attempt detect attacks watching patterns suspicious activity tra network id systems discerning attacks involve low level manipulation network easily correlate attacks multiple machines network 
important understand network id advantages host id distinct disadvantages 
network id systems bad determining exactly occurring computer system id systems kept informed operating system exactly happening 
probably impossible accurately reconstruct happening system watching shell login telnet sessions 
network id systems examining contents actual packets trans system traffic exchanged router router attacker traffic watched monitor internet monitor ethernet example network topology passive monitor network 
systems parse packets analyzing protocols network extract relevant information 
typically accomplished watching network passively capturing copies packets transmitted machines 
passive network monitors take advantage promiscuous mode access 
promiscuous network device sni er obtains copies packets directly network media regardless destination normal devices read packets addressed 
shows simpli ed network topology passive network monitor deployed 
passive protocol analysis useful unobtrusive lowest levels network operation extremely di cult evade 
installation sni er cause disruption network degradation network performance 
individual machines network usually ignorant presence sni er 
network media provides reliable way sni er obtain copies raw network tra obvious way transmit packet monitored network seen 
signature analysis question information relevant ids depends trying detect 
system monitoring dns tra names hosts queried responses queries relevant 
system attempting detect attacks ftp servers contents tcp connections ftp port interesting 
attacks discerned simply parsing ip packets attempt circumvent lter ip fragments clearly observable simply examining fragment set elds individual ip fragments 
attacks occur multiple packets interpreted outside context actual protocol instance dns query relevant detection phf string session pattern matching signature analysis close connection countermeasure box passive protocol analyzer store contents connection disk storage box tcp stream reconstruction ethernet cidf model network ids certain host 
id systems identify attacks technique called signature analysis called misuse detection 
signature analysis simply refers fact id system programmed interpret certain series packets certain piece data contained packets attack 
example ids watches web servers programmed look string phf indicator cgi program attack 
signature analysis systems simple pattern matching algorithms 
cases ids simply looks substring stream data carried network packets 
nds substring example phf get cgi bin phf identi es network packets vehicles attack 
signature analysis passive protocol analysis de ne event generation analysis techniques majority commercially available id systems 
shows components cidf model 
simplicity sake remainder refers systems network id systems 
need reliable intrusion detection importance security system critical intrusion detection systems function expected organizations deploying 
order useful site administration needs able rely information provided system awed systems provide information dangerously false sense security 
forensic value information faulty systems negated potentially misleading 
implications failure id component reasonable assume id systems logical targets attack 
smart intruder realizes ids deployed network attack ids rst disabling forcing provide false information distracting security personnel actual attack progress framing attack 
order software component resist attack designed implemented understanding speci means attacked 
unfortunately little information publicly available ids designers document traps pitfalls implementing system 
furthermore majority commercially available id systems proprietary secret designs available source code 
independent third party analysis software security problems di cult 
obvious aspect ids attack accuracy 
accuracy ids compromised occurs causes system incorrectly identify intrusion occurred false positive output occurs causes ids incorrectly fail identify intrusion fact occurred false negative 
researchers discuss ids failures terms de ciencies accuracy completeness accuracy re ects number false positives completeness re ects number false negatives 
attacks seek disable entire system preventing functioning ectively 
say attacks attempt compromise availability system 
points vulnerability id systems component identi ed cidf model unique security implications attacked di erent reasons 
inputs raw data system boxes act eyes ears ids 
attack event generation capabilities ids blinds happening system monitoring 
example attack box network ids prevent obtaining packets network appropriately decoding packets 
intrusion detection systems rely sophisticated analyses provide security information 
systems reliability box components important attacker knows detection complicated analytical techniques may provide avenues attack 
hand overly simplistic systems may fail detect attackers intentionally mask attacks complex coordinated system interactions multiple hosts 
need reliable data storage obvious 
attacker subvert box components ids prevent recording details attack poorly implemented data storage techniques allow sophisticated attackers alter recorded information attack detected eliminating forensic value 
box capability attacked 
network relies countermeasures protection attacker knows box continue attacking network immune safety measures employed system 
importantly countermeasure capabilities fooled reacting legitimate usage network case ids turned network un 
apparent di erent points intrusion detection system attacked 
comprehensive treatment potential vulnerabilities far outside scope 
attempting document general problems common id systems focus speci class attacks certain types intrusion detection systems 
exist serious problems passive protocol analysis event generation source signature analysis intrusion detection systems 
documents problems presents attacks exploit allow evade detection id systems veri es applicability popular commercial id systems market 
problems network id systems de nes general problems network intrusion detection rst insu cient information available packets read wire correctly reconstruct occurring inside complex protocol transactions id systems inherently vulnerable denial service attacks 
rst problems reduces accuracy system second availability 
insu ciency information wire network ids captures packets wire order determine happening machines watching 
packet signi cant system manner machine receiving packet behaves processing 
network id systems predicting behavior networked machines packets exchange 
problem technique passive network monitor accurately predict machine network going see process expected manner 
anumber issues exist actual meaning packet captured ids ambiguous 
network ids typically entirely di erent machine systems watching 
ids completely di erent point 
basic problem facing network ids di erences cause inconsistencies id system machines watches 
discrepancies results basic physical di erences stem different network driver implementations 
example consider ids system located di erent places network 
systems receive packet di erent points time 
di erence time important lag happen system prevent accepting packet 
ids processed packet thinking dealt normally system 
consider ip packet bad udp checksum 
operating systems accept packet 
older systems 
ids needs know system watches accept inaccurate reconstruction happened machines 
operating systems accept packet obviously bad 
implementation example allow ip packet incorrect checksum 
ids doesn know discard packets endsystem accepts reducing accuracy system 
ids knows operating system machine network runs able tell just looking packet machine accept 
runs memory discard incoming packets 
ids determine case system assume system accepted packet 
cpu exhaustion network saturation system cause problem 
problems result situation ids simply determine implications packet merely examining needs know great deal networking behavior systems watching tra conditions network segments 
unfortunately ids doesn informing obtains information packet capture 
vulnerability denial service denial service dos attack intended compromise availability computing resource 
common dos attacks include ping intended consume disproportionate amounts resources starving legitimate processes 
attacks targeted bugs software intended crash system 
infamous ping death teardrop attacks examples 
denial service attacks leveraged subvert systems compromising availability disable 
discussing relevance dos attacks security system question system fail open arises 
fail open system ceases provide protection disabled dos attack 
fail closed system hand leaves network protected forcibly disabled 
terms fail open fail closed heard context access control devices networks 
fail open rewall stops controlling access network crashes leaves network available 
attacker crash fail open rewall bypass entirely 
designed fail closed leaving network completely inaccessible protected crash 
network id systems passive 
control network maintain connectivity 
network ids inherently fail open 
attacker crash ids starve resources attack rest network ids wasn 
obvious susceptibility dos attacks network id systems important forti ed 
unfortunately denial service attacks extremely di cult defend 
resource starvation problem easily solvable di erent points resources ids consumed 
attacks crash ids easily xed nding vulnerabilities easily done 
attacks discuss di attacks sni er network id systems 
attempt subtly thwart protocol analysis pre signature recognition system obtaining adequate information 
third leverages simple resource starvation attacks disrupt disable entire system 
attacks involve speci cally manipulating network usage create abnormal pathological streams tra cases require low level packet forgery 
normal spoo ng attacks techniques simpli ed fact attacker manipulating sessions attempting disrupt users 
attacks new speci tra analysis systems necessarily intrusion detection 
mechanisms fool protocol analyzer thinking happening network 
rst call insertion involves attacker stu ng system subtly invalid packets second evasion involves exploiting inconsistencies analyzer system order slip packets past analyzer 
insertion ids accept packet system rejects 
ids mistake believing system accepted processed packet hasn 
attacker exploit condition sending packets system reject ids think valid 
doing attacker inserting data ids system network cares bad packets 
call insertion attack conditions lend insertion attacks prevalent vulnerabilities intrusion detection systems tested 
attacker insertion attacks defeat signature analysis allowing slip attacks past ids 
understand insertion attacks foil signature analysis important understand technique employed real id systems 
part signature analysis uses pattern matching algorithms detect certain string stream data 
instance ids tries detect phf attack look string phf get request longer string look get cgi bin phf 
ids easily detect string phf request simple substring search 
problem di cult solve attacker send request webserver force ids see di erent string suchas get cgi bin 
attacker insertion attack add original stream 
ids longer pick string phf stream data observes 
gives simple example attack 
attacker confronts ids stream character packets attacker originated data stream vern paxson lbnl describing attacks roughly time system network monitor sees attack sees rejected system attacker data stream accepted monitor insertion letter characters letter accepted ids 
result ids system reconstruct di erent strings 
general insertion attacks occur ids strict processing system 
obvious reaction problem ids strict possible processing packets read wire minimize insertion attacks 
severe problem evasion attacks occurs design approach taken 
evasion system accept packet ids rejects 
ids mistakenly rejects packet misses contents entirely 
condition exploited time slipping crucial information past ids packets ids strict processing 
packets evading scrutiny ids 
call evasion attacks easiest exploit devastating accuracy ids 
entire sessions carried forth packets evade ids blatantly obvious attacks couched sessions happen right nose sophisticated analysis engine 
evasion attacks foil pattern matching manner quite similar insertion attacks 
attacker causes ids see di erent stream data system time system sees ids information ids misses critical detection attack 
insertion attack mentioned attacker sends request contents ids additional data request innocuous 
evasion attack attacker sends portions request packets ids mistakenly rejects allowing system network monitor sees attack sees accepted system attacker data stream rejected monitor evasion letter remove parts stream id system view 
example original request get gin meaning id systems 
shows type attack 
real world insertion evasion reality insertion evasion attacks easy exploit 
attacker usually luxury injecting arbitrary characters stream 
attacks come pattern matching consideration 
example place insertion attacks leveraged low level stream reassembly 
understand insertion evasion play reassembly ll rst explain mean term 
network protocols simple easy analyze 
involve system sending single request waiting system respond 
example network monitor easily determine purpose single udp dns query looking packet 
protocols complex require consideration individual packets determination actual transaction represent 
order network monitor analyze monitor entire stream packets tracking information inside 
example order discover happening inside tcp connection monitor attempt reconstruct streams data exchanged connection 
protocols tcp allow amount limits ip protocol maximum packet size contained discrete packet 
collection data transmitted packet group 
arrive destination order transmitted order packet number indicates place intended order stream 
commonly referred sequence arrival order intended order sequenced reassembly number call collections packets marked sequence numbers sequenced 
responsibility re ordering extracting information contained reconstructing original collection data sender transmitted 
process collection unordered sequenced packets reconstructing stream data contain termed reassembly 
shows example stream data tagged sequence numbers reassembled 
reassembly issues manifest ip layer ip de nes mechanism called fragmentation allows machines break individual packets smaller ones 
individual fragment bears marker denotes belongs context original packet eld called set 
ip implementations able accept stream packet fragments sets reassemble original packet 
insertion attacks disrupt stream reassembly adding packets stream cause reassembled di erently system system accepted disruptive packets 
inserted packets change sequencing stream consuming hundreds sequence numbers preventing ids dealing properly valid packets follow 
packets inserted overlap old data rewriting stream ids 
situations packets inserted simply add content stream changes meaning 
evasion attacks disrupt stream reassembly causing ids parts 
packets lost ids vital sequencing stream ids know sees evasion attacks 
situations fairly simple attacker create entire stream ids 
ambiguities cases defending insertion evasion attacks easy 
behavior attacker exploiting insert packets ids cases simply wrong 
ids verifying checksum examining header eld correctly xing problem merely involves modifying ids section info needed ambiguity section network topology ip ttl eld may large number hops destination section network topology packet may large downstream link handle fragmentation section destination con guration destination may con gured drop source routed packets section os destination may time partially received fragments di erently depending os section destination os destination may reassemble overlapping fragments di erently depending os section destination os destination host may accept tcp packets bearing certain options section destination os destination may implement paws silently drop packets old timestamps section destination os destination may resolve con icting tcp segments di erently depending os section destination os destination may check rst messages ambiguities identi ed check things 
cases xing problem easy 
situations monitor determine looking packet accepted 
due varying system behavior operating system di erently 
basic network ambiguities cause problems 
cases ids knows exactly path packet going take destination won know arrive 
attacks exploit kinds problems easily defended ids source information resolves ambiguity 
ids knows operating system running destination system may able discern packet acceptable system 
ids reliably track topology network may able determine packet received system 
general say tra analysis problem ambiguous important secondary source information 
shows ambiguities identi es 
ambiguity potentially resolved ids certain information reliable view topology network con guration systems watching os version systems 
course exhaustive list 
sections provide examples insertion evasion attacks ect protocol analysis network ip transport tcp layers 
sections provide real world examples attacks ip network id systems great detail working basic attacks de ned 
line description ip addresses set received packet short ip datagram 
received packet short ip datagram 
ip version isn ip header length eld small ip header length set larger entire packet bad header checksum ip total length eld shorter header length packet ip options ip returns error addressed host small fragment freebsd ip input packet discard points ip input network layer problems discussion speci observable problems network intrusion detection systems ip layer 
insertion evasion problem occurring ip processing ids ects higher levels processing problem allows attacker insert arbitrary ip packet allows attacker extension insert arbitrary formed udp icmp packet 
extremely important id system immune insertion evasion attacks level 
simple insertion attacks ways attacker send ip packet ids accept 
collected candidate methods examining ip driver source code bsd operating system 
condition causes bsd drop received packet accounted intrusion detection system 
inconsistency bsd ids represents potential insertion evasion attack ids 
lists points freebsd ip input routine discard received datagrams 
bad header fields easiest way ip datagram discarded header eld 
header elds ip packet described rfc 
problem attempting packets bad header elds insertion attacks doing prevents packet forwarded internet routers 
di cult packets attack ids situated lan attacker case attacker manipulate ids packet forgery 
example version eld assigning value eld prevent packet routed 
problem bad header elds fact need correct packet parsed correctly correctly meaning manner intended attacker 
instance incorrectly specifying size ip packet size header may prevent ids locating transport layer packet 
ip header eld easy neglect checksum 
may unnecessary ids verify accuracy checksum captured ip packet datagram bad checksum processed ip implementations 
ids reject packets bad checksums vulnerable simple insertion attack 
harder problem solve isthe ttl eld 
ttl time live eld ip packet dictates hops packet traverse way destination 
time router forwards packet decrements ttl 
ttl runs packet dropped 
ids network segment systems watches possible send packets ids see setting ttl just long packet reach ids short packet arrive destination similar problem occurs relation don fragment df ag ip header 
df ag tells forwarding devices split packet fragments packet large forwarded simply drop packet 
maximum packet size network ids larger systems watches attacker insert packets making large destination network setting df bit problems lead ambiguities ids intimate knowledge topology network monitoring 
ip options ip checksum problem fairly simple solve ids reasonably assume checksum wrong datagram accepted endsystem addressed 
trickier problem parsing ip options 
vary hosts interpretation options requires specialized processing 
example systems drop packet strict source routed host address speci ed source route 
reasonable ids drop packets avoiding insertion attack 
operating systems con gured automatically reject source routed packets 
ids knows source routed packet destination rejects packets correct action take 
examination source route options ip packets may requirement security program 
options accounted obviously relevant 
instance timestamp option requests certain recipients datagram place timestamp line option description bad option length source route option set strict source route host listed hops source route host con gured drop source routed packets source route route hop route record route option set record route route hop timestamp option length short timestamp timestamp recording space full ow counter wrapped back zero timestamp record space hold timestamp ip address timestamp record space hold timestamp ip address timestamp bad timestamp type freebsd ip packet discard points packet 
code processes timestamp option forced discard packet option malformed 
sni er validate timestamp option manner systems watches inconsistency exploited 
lists places freebsd option processing code discards incoming datagrams 
ip option processing problems bsd option processing code results transmission icmp error message notifying sender errant datagram problem 
ids potentially listen messages determine oddly speci ed option correct 
reliable operating systems sun solaris instance rate limit icmp suppressing error messages 
furthermore tracking icmp responses datagrams bearing options requires ids keep state consume resources potentially allow avenue denial service attack 
mac addresses obviously ip problem se implications insertion attacks exist due link layer addressing 
attacker lan network monitor direct link layer frames ids allowing host speci ed ip destination see packet 
attacker knows link layer address ids simply address fake packet ids 
system lan process packet ab ad ca fe attack system monitor sent ethernet ab ad ca fe attacker ab ad ca fe ethernet sent ethernet ab ad ca fe insertion attacks link layer ids doesn check address received packet won know 
shows example attacker inserts character ids directing packet ids ethernet link layer 
attacker doesn know link layer address network monitor exploit fact network monitor operating promiscuous mode addressing frame fake address 
ids veri es destination address ip header correct link layer address reliably fooled falsely addressed link layer frames 
ip fragmentation ip packets broken smaller packets reassembled destination 
termed fragmentation integral part ip protocol 
ip fragmentation allows information travel di erent types network media may di erent packet size limits limiting entire protocol arbitrary small maximum packet size 
detailed explanation ip fragmentation stevens rfc 
systems reassemble stream ip fragments important network monitor correctly reassemble fragments 
ids correctly reassemble fragments attacked simply ensuring data exchanged machines arti cially fragmented packets 
basic reassembly problems streams ip fragments usually arrive order 
fragment stream clearly marked ip header contains ag speci es fragments follow agiven packet 
rarely happens protocol allows fragments arrive arbitrary order 
system able reassemble datagram fragments arrive order 
fragments usually arrive order easy mistake assuming 
ids properly handle outof order fragments vulnerable attacker intentionally scramble fragment streams elude ids 
important ids attempt reconstruct packets fragments seen 
easily mistake attempt reassemble soon marked nal 
signi cant problem fact received fragments stored stream fragments reassembled entire ip datagram 
ids attacked ooding network partial fragmented datagrams completed 
naive ids run memory attempts cache fragment fragmented packets completed 
systems deal problem 
systems drop fragments ttl avoid running memory due full fragment queues 
drops old incomplete fragment streams manner consistent machines watching vulnerable insertion due accepting fragment streams systems dropped evasion due dropping fragments systems discarded attacks 
overlapping fragments long known serious security implications arising interactions fragmentation network access control devices packet lters 
known attacks involving fragmentation allow attackers potentially evade packet lters employing pathological fragment streams 
rst attacks involves simply sending data smallest fragments possible individual fragments contain data lter 
second problem far relevant id systems 
involves fragmentation overlap occurs fragments di ering sizes arrive order overlapping positions 
fragment arriving station contains data arrived di erent fragment possible newly arrived data may overwrite old data 
presents problems ids 
ids handle overlapping fragments manner systems watches may stream fragments reassemble completely di erent packet endsystem receipt fragments 
attacker understands speci inconsistency system ids obscure attack data inside overlapping fragment streams reassembled di erently systems 
overlap resolution complicated fact data fragments di erently depending positions 
situations con icts resolved favor new data 
old os resolve attach windows nt solaris see attack forward overlap reverse overlap resolve attack forward reverse overlap operating system overlap behavior windows nt favors old data bsd favors new data forward overlap linux favors new data forward overlap solaris favors old data hp ux favors new data forward overlap irix favors new data forward overlap ip fragment overlap behavior various os data preferred new data discarded 
ids incorrectly vulnerable evasion attacks 
shows di erent scenarios involved fragmentation overlap 
ects system fragmentation bugs id systems aren ip implementations incorrectly handle overlapping fragments 
ip drivers systems 
complexity ip fragment reassembly existence incorrect implementations quite 
ids knows exactly systems nonstandard drivers incapable accurately reconstructing happening 
example windows nt resolves overlapping fragments consistently favor old data unable create fragment stream forced window nt rewrite previously received fragment 
di ers bsd resolves con icts suggested standard favor new data cases forward overlap 
gives examples popular operating systems resolve overlap 
result fragmentation reassembly di erent endsystem depending operating system 
ids knows os system running absolutely way form con ict resolution performed conclusive evidence reassembled 
ip options fragment streams ip packets bear options 
ip packet fragmented question arises options original packet carried fragments 
rfc dictates certain ip options fragment datagram example security option appear rst fragment 
strict implementation ip discard fragments incorrectly options 
implementations 
ids doesn behave exactly machines watching respect vulnerable insertion evasion attacks 
forensic information ip packets unfortunate fact ip version protocol way authenticated 
poses problems id systems attempting collect evidence information seen ip headers forge ip packet appearing come arbitrary host 
problem particularly severe connectionless protocols 
connection oriented protocols weak drawn origin session valid connection created sequence numbers employed protocols tcp provide cursory assurance attack originating address appears come 
ids observe connection uses correct sequence numbers reasonable assurance blindly spoofed 
unfortunately assurance exists connectionless protocols attack dns instance sourced address net 
important operators id systems aware questionable validity addressing information re system 
tcp transport layer problems large portion attacks detected id systems occur tcp connections 
imposes requirement ids able reconstruct ow data passing stream tcp packets 
ids manner consistent systems watching vulnerable attack 
normal tcp connections initiated innocuous network applications telnet di cult 
attacker stretching tcp protocol limits exploiting os bugs limits avoid detection problem far di cult 
di erent ways implement tcp connection monitor 
advantages serious aws 
lack canonical right way process captured stream tcp packets major problem network id systems 
de nition terms tcp connection monitoring complicated subject 
order simplify discussion de ne terms describing information monitor track record information owing tcp session 
part terms synonymous bsd tcp implementation 
tcp connection identi ers client server distinguish connection network 
client source server destination ip addresses client server tcp port numbers 
connections exist network share identi ers 
ll refer information connection parameters 
tcp protocol speci cation rfc de nes states connection 
refer states observable ids involving actual exchange data hosts 
vast majority possible connections exist closed state meaning connection currently exists parameters 
active established connection said established state 
ll introduce states relevant discussion 
tcp implements reliable sequenced stream protocol 
reliable mean connection determine data sent successfully received remedy situation isn 
tcp sequenced employs sequence numbers determine piece data represented packet belongs stream 
order ids reconstruct information owing tcp connection gure sequence numbers 
call process ids goes determine current valid sequence numbers connection synchronization 
scenario ids confused current sequence numbers termed desynchronization 
ids desynchronized connection accurately reconstruct data passed connection 
cases id systems completely blinded reconstructing data connection occurs 
major goal attacker ids connections 
sequence numbers tcp tracks pieces information connection 
tcp de nes ow control mechanism prevents side connection sending data side process tracked side window 
tcp allows band data sent stream urgent pointer 
collection state information represented internally endsystem manner 
refer concept block information implementation manage follow single connection block tcb 
network ids maintain tcb connection watches 
ids state transition useful connections fact closed state 
infeasible ids maintain tcb possible connection network ids de nes mechanism created newly detected connections destroyed connections longer relevant 
discussion ids tcp problems isolate di erent points processing connection ids subverted 
tcb creation point ids decides instantiate new tcb detected connection stream reassembly process ids uses reconstruct stream associated open tcb tcb teardown point ids decides retire tcb 
contributing attacks points data insertion attacks allow attacker confuse ids data arriving system 
cases context stream reassembly data insertion attacks reliable monitoring tcp session practically impossible important ids vulnerable insertion attacks 
easy goal achieve 
simple insertion attacks ip protocol di erent ways single packet inserted ids 
tcp input processing complex di erent cases cause received packet dropped 
ids doesn process tcp packets manner systems monitoring potentially vulnerable insertion attacks 
analysis ip monitoring source code bsd kernel obtain candidate cases potential insertion attacks 
bsd tcp input function causes received packet dropped complete processing identi ed possible problem 
lists points freebsd tcp input code incoming segments dropped 
tcp segment acknowledged receiving system generates message response segment occurs indicate rst ack message 
transmission message response bad segment signi cant ids potentially detect invalid segments examining manner acknowledged complicated resource ciency issues potential behavior di erent operating systems 
malformed header fields data tcp packet extracted reassembly looking header elds 
dangerously easy design tcp session monitor vulnerable packet insertion important validate header elds tcp packet considering data 
easily overlooked eld code determines type message sent tcp segment 
tcp code speci ed series binary ags 
certain combinations ags invalid result discarded packet 
additionally tcp implementations accept data packet acknowledge ack ag set 
tcp speci cation tcp implementations required accept data contained syn packet 
obscure point implementations may handle correctly 
ids doesn consider data syn packet vulnerable trivial evasion attack may vulnerable insertion attacks involving incorrect system implementations 
overlooked tcp input processing issue checksum computation 
tcp implementations required validate incoming packets internet checksum 
id systems fail perform check packets inserted systems simply sending tcp segments intentionally corrupt checksums 
tcp options ip important ids process tcp options correctly 
unfortunately processing tcp options signi cantly trickier processing ip options 
reason fact tcp options created timestamp window scale instance 
fact tcp speci es rules tcp option appear context connection 
certain options invalid certain connection states 
rfc introduces new tcp options designed increase reliability performance tcp high speed environments 
new line acknowledged 
condition actual received packet short bad checksum set short tcp header long actual received packet short rst listening process rst listening process connection closed state packet syn received listen state rst ack packet received listen state track new connections received rst packet listen state rst ack packet received listen state packet syn received listen state broadcast multicast syn received resources failure resources ack packet bad sequence numbers syn sent state received packet syn syn sent state received packet bad cc echo time wait state packet bad cc option packet received time wait state ack bad timestamp old tcp cc bad cc non rst packet rst listening user process terminated ack packet receive window ack bit set non syn data packet rst ack packet bad sequence numbers duplicate ack ack ack packet sent window ack time wait state received ack freebsd tcp input packet drop points tcp input options came possibility tcp options appear packets syn segments departure previous convention 
rfc dictates options appear non syn segments option speci ed accepted previously connection 
certain tcp implementations may reject non syn segments containing options previously seen important ids blindly accept packet 
hand systems may simply ignore bad options continue process packet ids doesn correctly determine system done vulnerable insertion attack trivial packet evasion attack 
concept de ned rfc paws protection wrapped sequence numbers 
systems implementing paws track timestamps segments segment received contains timestamp echo older threshold time dropped 
attacker trivially create tcp segment arti cially low timestamp cause paws compliant tcp stacks drop packet processing 
ids need know system supports paws needs know system threshold value timestamps information ids may erroneously process invalid tcp segments worse incorrect guess validity segment enable evasion attacks 
tcb creation rst point tcp session monitoring subverted tcb creation 
tcb creation policies ids determine point begins recording data connection initial state sequence numbers synchronize monitoring actual session 
tcb creation troublesome issue 
di erent methods employed determine open tcb straightforward methods problems 
techniques obviously inferior important indicate 
tcb creation establishes initial state connection including sequence numbers ability forge fake ids allow connections parameters forged connection 
tcb creation concept revolves tcp way handshake wh tcp packets client active opener connection server passive opener 
wh establishes initial sequence numbers connection parameters running timestamps instance may important 
options available system implementing tcb creation tcb completely opened way handshake completed successfully 
wh ends connection agreed sequence numbers unable exchange data 
ids hand options 
id systems attempt determine sequence numbers simply looking sequence numbers appearing tcp data packets refer data rely entirely wh 
compromises approach information wh relied ids ids necessarily need wait entire wh opening tcb 
attempt outline straightforward mechanisms establishing ids 
means complete list ways task accomplished techniques expect see utilized typical id systems 
requiring way handshake rst decision ids designers rely completely way handshake tcb initiation 
ids relies wh record data connection observe handshake 
distinct disadvantages 
rst obvious fact ids entirely tcp connection wh 
obviously presents problems program initialization time ids able see connections start presents serious opportunity connection evasion prevent ids seeing wh 
problem occurs combination tcp reassembly 
ids uses wh determine initial sequence numbers connection validates data sequence numbers potentially desynchronization attacker realistic looking fake handshake 
ids records sequence numbers handshake real connection di erent sequence numbers parameters undetectable long attacker created tcb open 
tcp options compound problem 
order correctly deal tcp extensions ids see way handshake handshake determines certain options legitimate connection 
ids fails detect vulnerable insertion attacks operating systems notably bsd 
ects filtering handshake detection security conscious networks network ltering place di cult remote attacker send packets network source addresses machines lter 
technique referred inside outside ltering spoof protection attacks tcb creation harder attacker trying trick ids opening tcb easily forge server response packets 
ids take advantage trusting packets appear originate machines lters ids assumes presence lters forging packets impossible 
trusted packets reliable indicator connection state 
important base decision trust packet source address packet type tcp message contains 
ids trusts syn ack packets assuming server response messages protected packet lters accurately detect attacks network clients ltered addresses clients servers 
course ids con gured know addresses trustworthy aren 
ids blindly relies fact addresses lan spoof protected completely vulnerable actual spoof protection exists 
con guration ids consistent actual packet lters 
requiring full handshake ids requires full wh record data connection sees accepts packets way handshake 
packets sent client server attacks considered complete control attacker sent server 
tcp terminology means ids doesn start recording connection enters established state 
mentioned previously requiring complete handshake dangerously easy connections due packet evasion techniques simple performance problems tcp monitor cause packets attacker induced performance problems 
allowing partial handshake ids requires partial wh record data connection sees portion handshake occur 
evidence way handshake validates tcb initiation ll see problems blindly creating synch data streams potentially reduces ability attacker trick system creating false 
requiring partial handshakes decreases probability connection missed due packet drops load 
question arises portion way handshake needs seen ids tcb created 
ids create tcb sees initial connection solicitation client syn sees server return positive response server syn ack 
presence inside outside ltering di cult attacker spoof server response server syn ack responses reliable indication connection occurring 
attacker spoof server response syn ack contains valid sequence numbers connection allowing ids accurately initialize tcb 
case important note handshake completed connection doesn exist 
indication ids connection isn spoofed client responds server syn ack ack con rming server initial sequence number 
ids uses partial handshakes open opening nonexistent connections 
data synchronization alternative requiring way handshake initial state connection looking data packets presumably connection opened 
ids active participant connection doesn necessarily consider wh packets entirely feasible track normal connections simply looking ack packets packets containing data 
primary advantage technique refer data sni er picks data systems require handshakes 
system recover loss important detect connection began program started 
unfortunately data creates possibility sni er accept data doesn correspond open connection 
worse id systems synch data strict sequence number checking desynchronized attacker observable connection state forged data initiating attack 
syn packets potential problem allow ids synch data pay attention wh packets occur starts recording data 
systems initialize connection state rst observed data packets re initialize see evidence real wh performed wh presumed set real state previous state data recorded regarded intentionally faked 
implemented reliably 
process combining data synchronization handshake synchronization necessarily allows monitor resynchronize connection packet input poor implementations result tcp session monitors desynchronized due falsely injected wh packets attacker 
poor implementation strategy relies solely client syn packets resynchronize connection 
received tcb opened ids resets appropriate sequence newly received syn packet 
attacker inject fake syn packets needs send syn packet completely invalid sequence number ids desynchronized 
legitimate data exchanged connection longer far ids concerned valid sequence numbers ids discarding valid data blinded 
simple way address problem accept rst syn packet seen connection 
presumably legitimate way handshake packet forged attempt 

major problems approach ids remains vulnerable attacks connections start program examines original wh legitimate syn appear connection ids reliable way determine syn fact rst syn appear connection packet drops complicate importantly attacker permanently connection inserting invalid syn packet legitimate connection starts 
better approach rely syn ack packets resynchronize 
long attacker forge valid looking syn ack packet server ids assumption syn acks server legitimate represent real connection handshakes 
problems associated 
ids observing stream data detected way handshake necessarily know host client server 
observation wh determines client server 
attacker forge syn ack packet appear connection server ids determine correctly case desynchronized 
ignoring syn packets tcp monitor need resynchronize wh packets syn packets ignored entirely data basis sequence number initialization 
implemented fashion forged data packet potentially connection 
smarter implementation consider synchronization purposes data packets originate local hosts assuming attacker forge packets appearing come hosts 
tcp stream reassembly di cult task network intrusion detection system accomplish accurate reconstruction actual data exchanged tcp connection 
tcp provides information system determine piece data valid data belongs context connection 
bsd code manage process lines long involved entire tcp ip protocol implementation 
points connection distinct advantage observing monitor data side connection automatically retransmit period time 
participants connection actively manipulate ensure data exchanged correctly 
tcp session monitor luxury 
misses packet practically request retransmission easily detect missing piece data due order packet arrival dropped packet 
ids strictly passive participant connection quite easy data 
problem acute fact proper reassembly requires accurate sequence number tracking 
ids misses packets potentially lose track sequence numbers 
recovery mechanism permanently connection 
techniques ids recover packet loss resynchronize connection attacked 
basic reassembly problems id systems sequence numbers 
insert data reassembled stream order received 
systems 
attacker blind system simply accompanying connection constant stream garbage data output monitor tcp driver meaningless 
systems normal tcp streams 
arrival tcp segments order normal occurrence happening route tcp endpoints changes reduces latency path 
unfortunately happens id system correctly re order packets 
output system inaccurate 
course attacker send stream data order system correctly reassemble ectively ids see meaningless data 
challenges reassembly system check sequence numbers assurance segment correct sequence numbers accepted endsystem addressed 
issues cause tcp implementation drop properly sequenced data 
simplest ip tcp insertion problems higher level issues problems 
major problem ids cope system advertised window 
window connection represents number bytes data accept preventing connection sending data bu er 
data sent past window discarded 
addition time ids detects change window di erent fromthe time system detects change reacts 
packets arrive period time ids system inconsistent cause problems 
ids account manner potentially vulnerable insertion attack 
information available ids captured packets provides useful indication system state acknowledgment sequence number 
acknowledgment number represents sequence number system expects see 
presumably system tcp bugs break assumption valid piece data eventually acknowledged message 
may apparent ids reliably monitor stream simply waiting acknowledgment acting piece data 
easy may 
acknowledgment number cumulative represents expected piece data context entire connection 
necessarily directly acknowledged acknowledgment generated response 
segments operating system tcp overlap behavior irix favors new data forward overlap hp ux favors new data forward overlap linux favors new data forward overlap aix favors new data forward overlap solaris favors new data forward overlap freebsd favors new data forward overlap windows nt favors old data tcp overlap behavior various operating systems worth data acknowledged ack ids simply wait individual packet sees 
great problem ids stream reassembly fact attacker send identically sequenced packets varying data 
header information change packet packet checksum packet alter system state exactly manner packets processed destination host 
unfortunately system knows processed 
information exchanged wire ids determine packet valid 
worse insertion attack ids coupled ambiguity allow determine packets accepted ids sending segments system reject acknowledging sending valid packets brief delay 
ids accept bad data move sequence space forward causing ignore valid data potentially ids actual connection 
similar tcp hijacking attack described laurent 
overlap ip fragments tcp segments arrive order varying sizes 
ip fragmentation cause new data overlap old data 
ids resolve problem manner consistent hosts watching accurately reassemble stream data 
rules handling tcp segment overlap quite similar reassembling fragmented ip datagrams 
cases systems resolve con ict favor old data con ict resolved favor new data 
great potential bugs ip reassembly bug system ids exploitable attacker 
details overlap resolution behavior various operating systems 
overlapping tcp segments possible attacker create stream packets assemble completely innocuous string sent attack signature accompanied single overlapping segment 
playing segment overlap allows attacker literally rewrite packet stream destination host ids resolves overlap exactly manner system see attack 
endpoint tcp overlap bugs ip fragmentation overlap resolution large potential inconsistency implementation vendors tcp reassembly code 
example windows nt resolves con icts order tcp segments consistently favor old data bsd resolves con icts indicated rfc occasionally favor new data 
fragmentation reassembly ids knows system network streams containing con icting segments unable accurately monitor certain types systems 
summary reassembly issues issues great problem connections tcp segments normal connection arrive order aren fake tcp segments injected stream speci cally confuse ids 
real world attacker trying evade ids attempt tcp stream hard monitor possible stretch limits protocol 
vulnerabilities ids tcp reassembly code insidious immediately obvious speci problem may manifest ids pathological sequence inputs 
majority ofthe time ids may appear reassembling tcp streams perfectly 
testing ids tcp implementations problems time consuming expensive easy skip testing entirely 
tcb teardown tcb teardown policies ids determine point system ceases recording data connection 
tcb teardown necessary state information required track connection consumes resources connection ceases exist longer sense dedicate resources tracking 
system destroy old point trivially simply ooding meaningless connections ran resources track connections 
tcp connections close re explicitly requested 
tcp messages rst fin exist speci cally terminate connection 
barring sudden crashes endpoints tcp connections terminated messages 
tcp explicitly provides noti cation terminated connections may logical design ids uses messages decide close connection tcb 
adequately manage connection resource problem 
tcp connections implicitly time 
connection alive exchange data inde nitely 
tcp provides mechanism ensure hosts alive periodically exchanging messages mechanism commonly takes far long recognize dormant connections practical 
method time arbitrary dormant connections ids remains simply ooding connections explicitly terminate 
problem tcb teardown ids tearing connection active force system lose state 
context pattern matching engine means stream input abruptly terminates 
attacker induce incorrect termination tcb tracking prevent pattern matching working abruptly halting pattern matching complete attack signature passes network 
hand ids fails tear tcb connection really closed vulnerable soon connection legitimately closed parameters re new connection completely di erent sequence numbers technically systems wait period time reusing connection parameters operating systems enforce 
absence synchronization recovery techniques completely blind ids entire connections 
id system tcb teardown policies attacked design relevant discussion 
identi ed options contribute ids ceases track connections discuss rami cations 
means exhaustive summary possible options 
tcp connection teardown messages possible way ids determine tracking connection listen tcp control messages indicate connection shut 
doing allows ids quickly recover resources connections terminated prevents desynchronization new connections parameters 
unfortunately connection termination request messages may control attacker signi cant trusting messages 
tcp provides connection teardown messages 
rst message allows orderly connection teardown sides connection acknowledge connection ensure data completely sent connection closes 
second message abruptly terminates connection due error 
fin processing tcp provides orderly teardown fin message 
system sending fin message indicating nished sending data ready close connection 
fin messages acknowledged side connection sends message shut 
presence inside outside ltering fin messages reliable indicators terminated connections 
connection completely terminated sides send fin message acknowledge side message 
attacker fake fin shutdown connection forging packets appear come server 
rst processing ids rely fin messages terminate connection 
tcp provides method abruptly notify connection connection closed reset rst message 
rst segments acknowledged way rst message accepted system see continues sending data connection 
way practically ids time connection seeing rst means ids potentially mistakenly shut connection alive dormant 
rst problem severe due system tcp bugs 
technically rst message valid correctly sequenced rst messages spurious sequence numbers created attacker ort tear connections ignored 
operating systems check sequence number rst messages 
relying timeouts tcb teardown alternative tcp connection teardown messages simply time connections dormant threshold time period 
prevents ids fooled false tcp teardown messages potentially simpli es ids tcp code 
cost simplicity systems rely timeouts tcb teardown easily circumvented 
termed sneakers attack famous suspense movie robert sophisticated alarm system employing similar technique attacker renders sum movements undetectable ids waiting ids time packets 
sneakers attack particularly troublesome noted previously ids employ form connection timeout tcb teardown dormant tcp connections remain established far longer ids devote resources track 
attacker induce timeout waiting long lling ids interesting meaningless connections forced garbage collect older connections potentially evade ids causing lose state 
additionally systems completely ignore tcp teardown messages desynchronized connection legitimately closed 
connection ceased exist ids maintains tcb times 
new connection occurs parameters connection times ids system desynchronized due di erent sequence numbers new connection 
attack carried specialized code attacker simply uses telnet create connection closes connection re opens 
sequence numbers machine change connections vulnerable ids able track second connection 
denial service attacks denial service attacks id systems severe nature passive id systems fail open rewall access network isn cut monitor system unresponsive 
basic goal attacker cause ids fail losing access machines attacked 
denial service attacks exist due buggy software 
ids crashes receives certain bad packet series bad control messages cued remote attacker defeated instantly 
fortunately easily xed vendors 
unfortunately nding bugs requires painstaking software audits 
interesting id systems launch denial service attacks systems 
id system includes countermeasure capability ability set packet lters reaction attack fooled false positives due forged attacks react attacks haven occurred 
resource exhaustion di erent types denial service attacks valid id systems 
attacks ll discuss involve resource exhaustion attacker identi es point processing requires allocation sort resource causes condition occur consumes resource 
resources exhausted attacker include cpu cycles memory disk space network bandwidth 
cpu processing capabilities ids exhausted ids spends cpu cycles reading packets determining matching location saved network state example ip fragment needs matched fragments datagram represents 
attacker determine computationally expensive network processing operations force ids spend time doing useless 
id systems require memory variety 
tcp connection state needs saved reassembly queues need maintained bu ers data need created pattern matching 
system requires memory simply read packets rst place 
system runs allocates memory needed perform network processing operations example receipt ip fragment means id system need obtain memory create maintain ip fragment queue packet 
attacker determine processing operations require id system allocate memory force ids allocate memory meaningless information 
point id systems need store logs activity 
event stored consumes amount disk space computers nite amount disk space available 
attacker create stream meaningless events having continually stored eventually exhaust disk space ids unable store real events 
network id systems track activity networks monitor 
part capable doing networks rarely full capacity monitor systems keep extremely busy network 
id system systems read packets just sent speci cally 
attacker overload network meaningless information prevent id system keeping happening network 
resources exist depending design system 
instance systems set router lters response attacks consider fact router limited capacity storing lter entries point router lter storage completely consumed system unable add new entries 
id system doesn take account defeated forcing spend router lter storage reactions fake attacks 
basic problem resource consumption ids system simulate operation machines watching order track occurring 
systems need concern network tra directly involves 
ids spending resources coping network system network inherently prone resource starvation attacks systems 
problem exacerbated fact network id systems operate promiscuous mode reading tra wire regardless destination 
resources consumed ids processing tra isn destined real machine apart network bandwidth consumed tra system network ected 
performance ids degraded greater extent systems trying track making di cult ids keep giving attacker edge 
exhausting cpu resources attacker goal exhausting id system computational capability isto prevent keeping network 
cpu starved ids process captured packets quickly packets ll bu ering capacity operating system captured data starts dropped 
example occurs useful 
bsd unix packet capture accomplished berkeley packet filter bpf device 
bpf interacts directly low level network drivers interface driver snapshots packets re handed ip layer processing 
packets captured bpf stored kernel bu er stay application reads 
application doesn read data bu er faster bu er lled newly captured packets space queuing captured packets runs 
happens captured packets necessarily dropped application chance examine 
attacker prevent id system keeping packet capture forcing spend time doing useless 
order attacker identify operations force ids perform consume large amounts processing time 
id systems easy ine cient algorithms process save look state network tra attacker cause system process information forces algorithms worst case conditions 
concrete example ip fragmentation 
ip fragments arrive stored related fragments arrive 
facilitate reassembly systems store fragments order data appear nal packet 
means fragment arrives system needs locate correct fragment storage area nd right place area store speci fragment 
systems simple ordered list store incoming fragments 
new fragments arrive system locate correct list packet full linear lookup determine new fragment received list fragment go 
new fragments arrive list gets longer time required look fragments list increases 
attacker force process operate worst case sending large amounts tra smallest possible fragments large amounts cpu cycles consumed tracking tiny ip fragments 
protocol parsing expensive 
ids needs analyze encrypted tra may spend large amount time simply decrypting packets encryption decryption extremely expensive operations 
demand kind processing great increase technologies ip sec deployed 
exhausting memory id systems require memory operate 
di erent types protocol processing di ering memory requirements 
attacker force ids consume available memory resources render system nonfunctional system may simply quit abruptly runs memory may thrash trying squeeze space slow virtual memory systems causing ects cpu exhaustion 
attacker trying exhaust memory ids examines system trying determine points system allocates memory 
attacker attempts isolate network processing events cause system allocate memory long duration time attacker induces processing sending packets ids forced process manner 
packets time ids run memory process incoming packets 
id systems employ garbage collection automatically reclaim memory actively 
unfortunately incorrectly garbage collection problems 
garbage collection system isn aggressive reclaiming memory able keep demand slow memory exhaustion attacks 
garbage collection system aggressive consume memory needed real processing causing system incorrectly process network tra examples memory allocations include tcp tcb creation attacker creates connections various hosts id system network packet forgery creates ood entirely fake connection tcp reassembly attacker sends large amounts tra streams order data need reassembled forcing system consume memory data reassembly queues 
exhausting network bandwidth simplest way starve ids resources simply create tra system low level network interface keep 
packet arrives interface copy packet wire bu er interrupt system cause system copy packet kernel 
interface capable handling limited amount tra overwhelmed load starts dropping incoming packets 
modern network interfaces operate ciently keep drastically high network loads older hardware 
point old isa bus network interfaces saturated drastically lower point network media saturated 
attacker creates tra prevent keeping saturating network 
targeted packet circumstances 
switched networks possible create large amounts tra seen certain systems 
attacker create ood packets switched ids ood ids maintaining ability communicate machines attacking 
type attack closely related cpu exhaustion times system run cpu cycles long network interface saturated 
regardless component system fails rst ect attacker ids keep network misses signi cant packets 
abusing reactive id systems circumstances ids instrument denial service attacks 
ids reactive countermeasure capability vulnerable attacks create false positives forced react attacks don exist 
countermeasures employed subverted completely block access legitimate tra shut valid connections 
cases reactive capabilities network id systems doing harm 
basic problem reacting attacks discovered monitoring ip tra ip addresses trustworthy 
attacker forge tra appearing come ip address tra appears contain attack id system may react 
circumstances easy 
example attacks occur connectionless protocols attacker doesn need see responses packets 
simply creates blindly sends forged packets ids fooled believing attack coming isn 
examples include icmp ping syn death packets ping attack involving large icmp echo requests udp packet storms 
attacks involve tcp connections faked ids doesn correctly identify way handshake 
ids doesn require handshake recording data tcp attacks faked easily ping speci manner handshakes attacked ect 
essential issue attacker trigger alarms events occurring fake addresses 
ids idea real source attack reacts falsely forged events restricting connectivity faked addresses 
addresses attacker speci cally chosen maximally ect connectivity example attacker cut access network dns servers 
amount damage caused depends manner ids reacts attacks general 
id systems limit shutting tcp connections appear vehicles attack systems abused shut legitimate connections forging tra appear attack performed connections easily abused impact connectivity speci tcp connections vital network connectivity instance bgp routing 
systems ective ways react attacks modify router lters cut tra sites appear originating attacks 
systems pay extra power vulnerable damaging denial service attacker cause ids recognize false attacks cut access critical network resources strategically forging addresses 
regardless countermeasures employed important realize facilities dangerous long attacker forge attacks 
types attacks may legitimate basis deployment countermeasures simply due fact performed blindly forged addresses 
attacks safely reacted ids rock solid network processing implementation 
methodology support assertions regarding vulnerabilities id systems results extensive tests actual commercially available intrusion detection systems 
purposes tests ascertain characteristics subject tcp ip implementation provide concrete examples actual attacks performed 
tests designed easily repeatable illustrate obvious possible manner de ciencies tested system 
overview tests involve injecting packets test network subject id system running 
tracking subject administrative console output able observe characteristics system underlying tcp ip implementation 
extent tests involved consideration subject black box 
tests involved tcp protocol 
cases tests involved interactions injected packets third host representing hypothetical target attack 
test target host explicit addressee packets 
presence target host allowed easily create real tcp connections subject ids monitor 
addition target host acted control experiments 
target reactions injected packets allowed observe empirically behavior real tcp ip implementation contrast behavior deduced behavior subject ids 
tests involved mimicking phf webserver attack 
phf attack exploits speci unix cgi script phf attempt gain access webserver 
phf attack subject id systems attack reproduced standard tcp network tools telnet 
order reproduce phf attack string get cgi bin phf target host 
test created network conditions appear phf attack attempted 
test speci packets injected network di ered subtly 
subject id system reacted test reporting reporting phf attack 
considering id system output speci types packets test able deduce signi cant characteristics subject ids 
conducting complicated subtle tests subject conducted series baseline tests 
purpose tests ensure subject ids con gured properly functioning time tests conducted ids fact detect phf attack phf reproduction string 
test cases process target host ran accepted incoming tcp connections port printed input obtained machine tcp stack 
examining output process able deduce subject ids detected attack network conditions created 
tools primary tool employed tests casl specialized scripting language developed secure networks allows programmable generation capture raw packets 
tests casl script inject packets network cases read parse responses 
detailed overview casl provided 
target host ran freebsd implementation bsd 
bsd tcp ip stack best documented easily obtainable ip implementations available freebsd far popular bsd implementation 
freebsd time testing stable release operating system 
test tool listen tcp port print input target host tcp stack 
tool purpose bare bones diagnostic program widely available popular documented listening mode tool simply accepts incoming connection prints character data tcp driver presents 
ran test observed speci packets transmitted network lbl tcpdump 
tcpdump low level network diagnostic tool passively monitors networks promiscuous mode prints summaries captured packet 
ran tcpdump tool test platform rst execution speci test script 
tcpdump provided ip level packet traces accompany test results easier discern exactly happening network tests 
test network non switched ethernet 
hosts network included ids target host test platform 
network dormant time conducted tests 
test execution tests involved casl script run interpreter test platform generated injected packets addressed target host 
de ne tests terms script name speci network interactions ids characteristic attempts ascertain validity bsd tcp ip driver target host completely accurately reconstructed phf string test attempted send 
test valid bsd resulted detection phf attack subject ids 
suggest subject ids detect attacks invalid tests reliably detect attacks valid ones 
cases ids failed detect attack test re initialized ids re ran test multiple times 
concluding subject ids detecting attack signatures re ran baseline test con rm operational integrity immediately ran considered test 
test de nitions name baseline operation complete tcp handshake send test string single tcp data segment 
behavior tested ids con gured properly test string adequately reproduce phf attack subject 
target validity valid name baseline operation complete tcp handshake send test string series ordered character tcp data segments 
behavior tested ids con gured properly test string adequately reproduce phf attack subject 
target validity valid name frag operation complete tcp handshake send test string single tcp data segment byte ip fragments sent order 
behavior tested subject ids perform ip fragment reassembly 
target validity valid name frag operation complete tcp handshake send test string single tcp data segment byte ip fragments sent order 
behavior tested subject ids perform ip fragment reassembly 
target validity valid name frag operation complete tcp handshake send test string segment broken byte fragments fragments sent order 
behavior tested subject ids handle basic order ip fragmentation reassembly 
target validity valid name frag operation complete tcp handshake send test string single tcp data segment byte fragments fragments sent twice 
behavior tested subject ids handle reassembly fragments completely duplicated 
target validity valid name frag operation complete tcp handshake send test string single tcp data segment broken byte fragments sent completely order arbitrary duplicated fragment 
behavior tested subject ids handle reassembly pathological correct cases 
target validity valid name frag operation complete tcp handshake send test string single tcp data segment byte fragments sending marked fragment 
behavior tested subject ids correctly wait fragments arrive attempting reassembly 
target validity valid name frag operation complete tcp handshake send stream fragments containing signature string word get replaced string sni 
send forward overlapping fragment rewriting sni back get target host 
behavior tested subject ids correctly handle forward overlap ip fragments 
target validity valid name tcp operation complete tcp handshake simulate disconnection target host network send target string series byte tcp data segments 
behavior tested subject ids wait tcp acknowledgment target acting data captured packets 
target validity inapplicable name tcp operation complete tcp handshake send test string stream byte tcp data segments sequence number wraps back zero 
behavior tested ids correctly deal wrapped sequence numbers 
target validity valid name tcp operation complete tcp handshake send test string stream byte tcp data segments duplicating entirely segments 
behavior tested ids correctly handle completely duplicate tcp segments 
target validity valid name tcp operation complete tcp handshake send test string stream byte tcp data segments sending additional byte tcp segment previous segment completely contains di erent character 
behavior tested subject ids correctly handle duplicate tcp segments 
target validity valid name tcp operation complete tcp handshake send test string letter replaced letter series byte tcp data segments 
immediately send byte tcp data segment forward modi ed letter rewriting back target host 
behavior tested subject ids handle overlap order tcp streams 
target validity valid name tcp operation complete tcp handshake send test string series byte tcp data segments increase sequence number midway stream 
behavior tested ids recover sudden changes sequence number 
target validity invalid name tcp operation complete tcp handshake send test string series byte tcp data segments interleaved stream byte data segments connection drastically di erent 
behavior tested subject ids check sequence numbers reassembly 
target validity valid name tcp operation complete tcp handshake send test string series byte tcp data segments segments sent order 
behavior tested subject ids handle basic order tcp reassembly 
target validity valid name tcp operation complete tcp handshake send test string series byte tcp data segments sent random order 
behavior tested ids handle pathological order tcp reassembly 
target validity valid name operation complete tcp handshake send test string series byte tcp data segments handshake occurred arbitrary sequence number 
behavior tested ids require handshake start recording data connection 
target validity invalid name operation complete tcp handshake send test string series byte tcp segments interleaved syn packets connection parameters 
behavior tested ids resynchronize syn packet received complete tcp handshake 
target validity valid name operation complete tcp handshake send stream arbitrary data random sequence number occurred 
connection parameters connect type test string manually 
behavior tested ids desynchronized due badly sequenced fake data prior real connection initiation 
target validity valid name operation complete tcp handshake immediately shut connection rst 
re connect parameters drastically di erent sequence numbers send test string series byte tcp data segments 
behavior tested ids correctly resynchronize connection legitimately torn rst 
target validity valid name operation complete tcp handshake send test string series byte tcp data segments 
midway stream tear connection rst continue send rest data segments 
behavior tested ids recording data sees rst 
target validity invalid name insert operation complete tcp handshake send test string series byte tcp data segments bad ip checksum 
behavior tested ids verify ip checksum received packets 
target validity invalid name insert operation complete tcp handshake send test string series byte tcp data segments 
behavior tested ids verify tcp checksum received segments 
target validity invalid name insert operation complete tcp handshake send test string series byte tcp data segments bit set 
behavior tested ids accept tcp data segments ack bit 
target validity invalid name evade operation complete tcp handshake include test string initial syn packet 
behavior tested ids accept data syn packet 
target validity valid summary tests scripted de ned easily repeated fast 
de ning test suite able completely test new id systems matter minutes 
majority testing time spent de ning new tests 
running individual tests id systems took negligible time 
process releasing scripting tool tests public 
process completed intend suite ids test scripts developed available public 
hope de ne framework arbitrary network id systems quickly evaluated 
test suite means complete provide test results support points de ne complete evaluation process id systems 
tools conduct tests hands community hope tests extended de ne complete test suite 
results applied tests popular network intrusion detection systems market 
case tests identi ed serious exploitable problems manner ids reconstructed data transmitted network 
results tests surprising believe support basic points 
cases id systems tested general problems precluded passing entire collections speci tests 
example systems tested correctly handled ip fragmentation systems incorrectly handled speci fragmentation tests 
ran test id system 
systems tested netranger system available associated hardware 
unable test system network obtain cooperation organization product 
prevented running tests product netranger second system tested added tests rst exposure system 
tests tcp required access local network test machine access netranger 
system test network flight recorder nfr system intrusion detection system se network monitoring engine detection system things 
results signi cant usage nfr automated network ids necessarily product 
important note number failed tests product necessarily indication relative quality 
number tests ids passes biased heavily presence speci bugs 
test suite designed provide score product highlight speci characteristics 
speci results systems tested internet security systems realsecure version windows nt netranger version version release build windows nt network flight recorder nfr version beta 
results tests ids 
individual ids described table interpretation results 
test plus sign indicates ids saw phf attack result packets test injected 
sign indicates ids reported attack ran test 
question mark indicates unable perform test product 
overviews speci id systems iss realsecure iss realsecure automated network intrusion detection system 
performed tests windows nt version product available unix platforms 
realsecure appears independent network monitor components 
rst handles signature recognition captured packets second provides realtime playback capability allows administrators watch information exchanged tcp connection real time 
signi cant di erences playback facility signature recognition facility 
realsecure signature recognition engine test name expected result realsecure netranger nfr baseline baseline frag frag frag frag frag frag frag tcp tcp tcp tcp tcp tcp tcp tcp tcp insert insert insert evade ids test suite results playback system appear sanity check presenting contents user 
sequence number checking performed session playback order packets displayed order 
attacker trivially obscure actions realsecure session playback simply accompanying connection stream meaningless tcp packets connection confuse administrators sending packets order 
signi cant problem realsecure systems tested handle ip fragmentation reassembly 
attacker completely evade realsecure fragmenting packet sends network 
realsecure appeared serious problems tcp reassembly duplicate segments appeared network 
realsecure detected attack ofthe tests ran involved sending multiple tcp segments sequence number tests resulted valid reassembly test string target host 
realsecure appear pay attention tcp rst messages 
able realsecure closing connection client rst message immediately parameters 
realsecure recognized attacks streams connection reset 
realsecure appear pay attention tcp syn messages able realsecure connections preceding arbitrary data segments random sequence numbers 
realsecure vulnerable insertion attacks 
appear check verify ack bit set tcp data segments 
netranger netranger automated network intrusion detection system 
netranger interfaces passive network monitor packet ltering router creating reactive ids ability respond realtime attacks addresses ltering router major feature system 
limited access netranger system 
hardware requirement price system impractical obtain copy testing relied cooperation organization product 
tests performed global internet able perform certain tests due timing issues 
test results netranger showed major problems 
systems reviewed netranger version tested completely unable handle fragmented ip packets 
attacker evade netranger completely fragmenting packets 
able evade netranger injecting duplicate sequenced segments di erent connection stream tcp test 
netranger detect data syn packet attacker evade netranger checks putting crucial data initial syn packet 
able netranger connections preceding connection fake randomly sequenced data 
netranger failed detect attacks connection parameters followed 
netranger vulnerable insertion attacks doesn appear validate tcp checksums 
netranger appear reliably verify ip checksums 
tests performed netranger 
conjecture netranger vulnerable attacks tests measure 
hopefully tests run netranger 
automated network intrusion detection system 
tested windows nt version 
net appears realtime connection playback capabilities unable get working evaluation copy tests 
id systems tested appeared strict network monitoring system 
record data connections weren marked way handshake 
stopped recording connection torn rst packet 
prevented tcb desynchronization tests disrupting system strictness implementation may insertion rst packets instance evasion attacks 
validated ip tcp checksums accept data ack bit set 
appear wait acknowledgment accepting data 
able connections injecting fake syn packets stream syns ignored endpoint apparently lost pattern matching state 
netranger failed detect data syn packets 
reassemble overlapping tcp segments manner bsd vulnerable evasion attack 
systems reviewed completely unable handle fragmented ip packets 
attacker evade fragmenting packets 
network flight recorder monitoring engine network flight recorder 
systems tested nfr automated network intrusion detection system nfr provides network monitoring component variety applications 
nfr user programmable extensible available source code 
reviewed nfr engine automated network intrusion detection system 
intent product results signi cant bearing nfr non security uses 
additionally nfr completely programmable product really interpreter network programming language possible users product address concerns bring modifying underlying engine 
nfr able handle ip fragmentation veri ed independent testing process con rmed nfr ability reassemble fragmented udp packet able perform test nfr available source code 
unfortunately nfr unable handle pattern matching atcp stream sent failed fragmentation tests 
nfr version beta vulnerable insertion attack tests 
verify ip tcp checksums accepted data ack bit set 
nfr detects data syn packets 
nfr immediately tear connection tcb rst seen 
able nfr sending spurious syn packets connections unable successfully tests 
nfr reassemble overlapping tcp segments bsd vulnerable evasion attack 
discussion tests revealed serious aws system examined 
ids examined completely attacker 
reason believe skilled attackers internet don know aren exploiting fact 
problems tested minor easily xed 
presence vulnerabilities leads believe id systems adequately tested 
ability forge packets ability insert packets id systems fairly trivial attacker forge attacks arbitrary addresses 
ability react attacks recon guring packet lters major advertised feature systems tested 
shows capability leveraged system operators attacker facilities may harm 
problems outline solution 
adding secondary source information ids allowing conclusively identify packets accepted system appear ways create connections tracked passive id systems 
network conditions attacker needs induce elude ids abnormal ids may detect attack occurring unfortunately 
regardless problem obviously solvable presence signi cant ids users designers 
users need understand manner con gure ids network real impact security system availability network 
designers need understand basic problems identify packet capture testing systems rigorously 
security community buyers network id systems designers systems interested third parties enhance reliability security intrusion detection systems 
additional independent third party analysis testing id systems large extent de ne secure systems 
implications operators things done ids operators enhance security system 
additionally ids operators need understand outputs systems read critically session playback data may occurring session source addresses attacks may 
critically important step taken ids ectively set spoof protection lters internet injecting packets addresses forged look internal systems network 
bidirectional packet forgery completely confuse network intrusion detection systems 
important understand attacker successfully breaks ids protected network probably controls ids 
attacker direct access network attacking forge valid looking responses systems attacking 
forged packets prevent ids obtaining coherent picture happening network 
soon ids records successful attack network administrators assume bets attacks occurring knowledge ids 
attacker fool session playback facilities playing arbitrary data back operators 
session playback may accurately represent happening inside connection 
real time connection monitoring id system reconstruction happening tcp stream printing recording packet wire trusted 
critical importance id system operators con gure system react arbitrary attacks 
attacker easily deny service entire network triggering reactions faked packets id systems recon gure router lters particularly vulnerable attacker forge attacks appear come important sites dns servers cause ids cut connectivity sites 
possible step taken mitigate risk countermeasure subversion allow system con gured react certain hosts 
systems tested appeared allow type con guration 
course spoof connections hosts exploit evade countermeasures entirely 
attacks trivially forged ping udp attacks reacted attacker simply forging packets cause countermeasures deployed disrupt network 
systems aren strict reconstructing tcp sessions don wait handshakes recording data vulnerability tcp connections 
implications designers particularly great relevance designers intrusion detection systems outlines detail attacks systems need resistant 
sense entire presents relevant ids designers 
issues need addressed ids vendors 
problems outline occur abnormal series packets injected network 
overlapping ip fragments tcp segments common connections consisting entirely overlapping segments certainly attacks 
possible reliably reconstruct information contained streams possible alert administrators presence abnormal packets 
course doesn design strategy value ids drastically reduced tell administrator detected attack host tell speci cally information better complete lack information available 
important issue vendors need address testing 
problems discovered basic conditions leading problems occur frequently normal tra appeared indepth testing performed 
severe aws systems attempted address problems instance program reassembled fragments perform signature recognition packets fragmented 
testing network intrusion detection systems simple 
order test network ids carefully coordinated streams forged packets need injected network tools capable doing manner exible test id systems products 
de nes framework id systems tested hopefully availability tools increase ability vendors test systems 
implications community number attacks network id systems relative simplicity problems demonstrated exploitable commercial systems tested indicates network intrusion detection mature technology 
research testing needs occur network intrusion detection looked reliable component security system 
research done independently vendors 
credible public evaluations network intrusion detection systems currently exist 
trade press evaluates security products ease security 
network intrusion detection fragile important receive scrutiny community 
de nes methods network intrusion detection systems tested 
obvious tests extended methodology improved 
stands bene hoped serve catalyst 
issue drastically impacted ability test id systems availability source code 
product reviewed source code available 
intrusion detection susceptible attack think wise demand source code vendors 
products freely available source code obtain peer review products secret source code 
clear marketing claims trusted source information id systems 
staniford chen common intrusion detection framework cs ucdavis edu cidf valdes sri statistical anomaly detector proceedings th national computer security conference october 
staniford chen cheung crawford frank levitt wee yip grids graph intrusion detection system large networks th national information systems security conference 
fox henning reed neural network approach intrusion detection proceedings th national computer security conference october 
porras valdes live tra analysis tcp ip gateways appear internet society networks distributed systems security symposium march 
zhang chung mukherjee olsson methodology testing intrusion detection systems ieee transactions software engineering vol 
pp 
october 
authentication server rfc january 
stevens tcp ip illustrated vol 
addison wesley reading ma 
postel internet protocol darpa internet program protocol speci cation rfc usc information sciences institute september 
postel internet protocol darpa internet program protocol speci cation 
rfc usc information sciences institute section line september 
atkinson security architecture internet protocol 
rfc naval research laboratory august 
postel transmission control protocol darpa internet program protocol speci cation rfc usc information sciences institute september 
jacobson braden borman tcp extensions high performance rfc lbl isi cray research may 
simple attack tcp th usenix unix security symposium june 
secure networks custom attack simulation language casl user manual 
avian research available download ftp avian org src hacks nc paxson bro system detecting network intruders real time th annual usenix security symposium january 
paxson internet packet dynamics acm sigcomm september cannes france 
lawrence berkeley national laboratory tcpdump available download ftp ftp ee lbl gov tcpdump tar possible assistance people 
people gave input criticism tests possible cooperation companies running id systems 
express sincere appreciation help 
possible secure networks alfred oliver jon wilkins assistance project 
obtained valuable comments vendors reviewed 
speci cally marcus network flight recorder mike neumann elliot turner comments critiques technical 
vern paxson lbl published document nished regarding design real time network intrusion detection system bro 
details attacks network id systems catch 
paxson extremely valuable input 
course appreciate greatly fact network flight recorder source code available public review 
thing especially market competitive nfr approach source code release model followed vendors 
possible assistance jennifer myers ectively rewrote technical results document 
casl tests possible development security tool called casl 
casl network protocol exploration tool designed allow security auditors quickly easily simulate network events low level 
minimal amount ort casl ectively forge kind ip packet 
slight programming ability casl perform complex protocol interactions networked hosts 
casl inspired tools darren reed known utility allowed experimenters forge large 
casl expands signi cantly types tools 
bene ts casl predecessors include complete programming language typical high level language control constructs statements designed easy learn shell script languages network programming functionality rivaling code 
ability create arbitrary packets just ones thought designed program 
tools allow users create arbitrary packets including raw data presumably built tool casl allows users lay format new packet types expressive simple record syntax allowing protocol header elds laid bit bit byte byte 
ability input packets reading wire quickly extract information 
network reads familiar tcpdump expressions select packets number packets read examined simultaneously 
casl self contained free standing program doesn depend network programming tools operate 
installed quickly casl script supported platform 
tool small consumes fairly low amount resources casl programs easily share system large applications don consume large amounts memory cpu general purpose languages perl tcl tend 
designed tool meet needs di erent audiences hand casl expressive useful tool experienced uent programmers simple picked quickly bourne shell scripting 
casl script little line packet template users simply want forge packets tens hundreds lines functional code loops variables conditionals subroutines high level language capabilities 
making casl available free noncommercial hopes state art security research 
information casl contact secure networks secure networks secure networks security research development located calgary alberta canada 
addition extensive publically available security research results secure networks sells security assessment tools 
nd www com 
secure networks reachable email info com telephone 

