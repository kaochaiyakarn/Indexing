cyclone safe dialect trevor jim lambda greg dan michael james cyclone safe dialect designed ground prevent buffer overflows format string attacks memory management errors common programs retaining syntax semantics 
examines safety violations enabled design shows cyclone avoids giving hallmark control low level details data representation memory management 
commonly held belief security community safety violations buffer overflows sloppy 
quote typical common errors cause vulnerabilities buffer overflows poor handling unexpected types amounts data understood 
unfortunately features valued highly manufacturers reliability 
implication safety violations prevented just changing priorities 
true highly trained motivated programmers produce extremely robust systems security top priority witness openbsd 
true programmers ensure safety security programs write 
believe reasons safety violations show lambda labs research trevor research att com university www cs cornell edu projects cyclone 
programs reach deeper just poor training effort roots design 
take buffer overflows example 
introductory programming course warns teaches techniques avoid continue announced security bulletins week 
reasons fundamental poor training ffl cause buffer overflows bad pointer arithmetic arithmetic tricky 
put plainly error cause buffer overflow able train programmers point errors completely eliminated 
ffl uses nul terminated strings 
crucial efficiency buffer allocated hold different strings different lengths deallocation danger overwriting nul terminator usually leading buffer overflow library function 
library functions strcat alternate versions help letting programmer give bound length string argument dozens functions posix alternative 
ffl bounds pointers commonplace standard way iterate elements array start pointer element increment just past array 
standard states address just past array valid 
bounds pointers common expect occasionally dereferenced assigned causing buffer overflow 
short design programming language encourages programming edge safety 
programs efficient vulnerable leads conclude safety violations remain common programs 
number studies bear :10.1.1.32.7648
programs unsafe tempting suggest programs written safe language java ml modula year old lisp 
realistic solution 
thing abandons legacy code 
safe languages look different high level explicit memory management give programmers control low level data representations 
features unique efficient indispensable systems programmers 
developing alternative want safety want switch high level language cyclone dialect designed prevent safety violations 
goal design cyclone safety guarantee java valid program commit safety violation keeping syntax types semantics idioms intact 
cyclone programmers feel bits 
think programmers little trouble adapting dialect find cyclone appropriate language problems ask solution 
cyclone development years 
total written lines cyclone code lines compiler lines supporting libraries tools port bison parser generator 
ported lines benchmark applications developing streaming media overlay network cyclone 
cyclone freely available comes extensive documentation 
compiler accompanying tools licensed gnu general public license libraries licensed gnu 
high level overview cyclone 
presents design philosophy cyclone gives overview techniques safe version reviews history project mistakes course corrections inspired 
remainder organized follows 
section points features lead safety violations describes changes prevent cyclone 
section gives details implementation performance 
section discusses evolution cyclone design pointing key decisions mistakes reversed 
discuss section 
section discuss existing approaches making safer explain cyclone approach different 
conclude section 
cyclone cyclone language design comes directly cyclone uses preprocessor exceptions follows lexical conventions grammar 
cyclone pointers arrays structures unions enumerations usual floating point integer types data representation cyclone cyclone standard library supports large growing subset posix 
intention easy programmers learn cyclone port code cyclone interface code cyclone code 
major differences cyclone related safety 
cyclone compiler performs static analysis source code inserts run time checks compiled output places analysis determine operation safe 
compiler may refuse compile program 
may program truly unsafe may static analysis able guarantee program safe inserting run time checks 
reject programs compiler happily compile includes unsafe programs perfectly safe programs 
reject safe programs impossible implement analysis perfectly separates safe programs unsafe programs 
cyclone rejects safe program programmer may choose rewrite program analysis verify safety 
easier identified common idioms static analysis handle added features language idioms programmed cyclone modifications 
modifications typically include adding annotations supply hints static analysis cause program maintain extra information needed run time checks bounds checks 
table restrictions imposed cyclone preserve safety ffl null checks inserted prevent segmentation faults ffl pointer arithmetic restricted ffl pointers initialized ffl dangling pointers prevented region analysis limitations free ffl safe casts unions allowed ffl goto scopes disallowed ffl switch labels different scopes disallowed ffl pointer returning functions execute return ffl setjmp longjmp supported cyclone understood starting imposing restrictions preserve safety adding features regain common programming idioms safe way 
cyclone restrictions summarized table extensions summarized table 
techniques cyclone safe applied great deal research additional techniques cyclone 
previous projects typically techniques resulting incomplete coverage 
example bounded pointers protect array access violations stackguard protects buffer overflows 
goal cyclone prevent safety violations 
previous projects optional add ons practice seldom production code cyclone safety default 
rest section illustrate cyclone features giving examples safety violations code explaining cyclone restrictions detect prevent introducing language extensions safely program restrictions 
safety violations describe buffer overflows lead root exploits 
lead crashes exploited mount denial service table extensions provided cyclone safely regain programming idioms ffl null pointers require null checks ffl fat pointers support pointer arithmetic run time bounds checking ffl regions support form safe manual memory management ffl tagged unions support type varying arguments ffl injections help automate tagged unions programmers ffl polymorphism replaces uses void ffl implemented fat pointers ffl exceptions replace uses setjmp longjmp attacks 
null consider getc function int getc file call getc null happens 
standard gives definitive answer 
getc written safety mind perform null check argument 
inefficient common case check probably omitted leading segmentation fault 
cyclone provides solutions 
automatically insert run time null checks pointers 
example cyclone insert code body getc null check argument dereferenced 
requires little effort programmer null checks slow getc 
repair extended cyclone new kind pointer called null pointer indicated 
example cyclone declare int getc file indicating getc expects non null file pointer argument 
character change tells cyclone need insert null checks body getc 
getc called possibly null pointer cyclone insert null check call extern file getc null check cyclone prints warning inserts null check 
suppressed explicit cast getc file check warning programmer force null check occur declaring new pointer variable new variable call file file null check getc null check constants stdin declared pointers place functions declared return pointers 
effect null checks pushed back uses way sources 
just cyclone compiler ensure null dereferences occur 
null pointers perfect example cyclone design philosophy safety guaranteed automatically possible programmer control needed checks performed 
buffer overflows prevent buffer overflows restrict pointer arithmetic cyclone permit pointer arithmetic pointers pointers 
provide kind pointer indicated permits pointer arithmetic 
pointer represented address plus bounds information representation pointer takes space pointer pointer call fat pointer 
extra information fat pointer allows cyclone determine size array pointed insert bounds checks pointer accesses ensure safety 
example fat pointers string length function written cyclone int strlen const char int return size return return looks version strlen exceptions 
declare argument fat pointer char pointer 
second body function able get size array pointed notation size 
lets check bounds loop 
means guaranteed dereference outside bounds string nul terminator missing 
contrast strlen scan past string lacks nul terminator 
fat pointers add overhead programs take space pointers inserted bounds checks 
ensure safety give programmer new capabilities finding size base array programmer explicit control 
easy pointers cyclone 
programmer wants pointer needs change single character declaration 
arrays strings converted pointers necessary automatically compiler 
programmer explicitly cast pointer pointer inserts bounds check pointer inserts null check bounds check 
pointer pointer cast pointer checks resulting pointer size 
uninitialized pointers snippet crashed author palm pilot form switch event etype case case field 
part function processes events 
problem pointer properly ini case switch oversight initialized second case 
function dereferences isn accessing valid pointer unpredictable address stack space allocated 
prevent cyclone perform static analysis source code 
analysis detects uninitialized second case compiler signals error 
usually catches real bug times analysis isn smart properly initialized 
may force programmer initialize variables earlier don consider error non pointers uninitialized 
example declare local array non pointers initializing elements char buf contains garbage 
sprintf buf 
err char buf :10.1.1.2.4977
common code array accesses bounds allow 
dangling pointers naive unsafe 
version function takes int returns string representation char int char buf sprintf buf return buf function allocates character buffer stack prints int buffer returns pointer buffer 
problem caller pointer deallocated stack space easily lead safety violations 
easy compiler warn returning address local variable gcc prints just warning example 
technique catch simple variation char int char buf char sprintf buf buf return address buf stored variable returned :10.1.1.2.4977
passes gcc wall complaint 
cyclone prevents dereference dangling pointers performing region analysis code 
region segment memory deallocated 
example cyclone considers local variables block region deallocated exit block 
cyclone static region analysis keeps track region pointer points regions live point program 
dereference pointer non live region reported compile time error 
example cyclone region analysis knows address buf pointer local stack 
assignment tells cyclone pointer stack area 
local stack area deallocated returned report error 
cyclone region analysis intraprocedural program analysis 
rely programmer annotations track regions function calls 
example strcat function declared follows cyclone char strcat char dest const char src region variable 
declaration says region strcat takes pointer dest region pointer src returns pointer region 
fact standard specifies strcat returns dest 
information enables cyclone correctly reject program char int char buf sprintf buf return strcat buf region analysis deduces result call strcat buf points local stack region returned function 
cyclone region analysis described greater detail separate :10.1.1.10.8871
free free function create dangling pointers depending implemented cause segmentation faults root compromises incorrectly called pointer returned malloc reclaim block memory twice 
difficult design analysis guarantee correct pointers free current solution drastic free op 
obviously programmers need way reclaim heap allocated data 
provide ways 
programmer optional garbage collector 
helpful getting existing programs port cyclone changes 
cases constitutes unacceptable loss control 
recognize programmers need explicit control allocation deallocation 
cyclone provides feature called regions 
code declares region allocation region deallocates region region int sizeof int int rnew char hello code uses region block start new region lives heap 
region deallocated exit block explicit free 
variable handle region allocate region ways 
construct behaves malloc requires region handle argument allocates region handle 
example initialized pointer int sized chunk memory allocated region 
second rnew construct programmer wants allocate initialize single step 
example initialized fat pointer array elements allocated region 
region handles may passed functions library function 
sprintf print buffer allocates buffer region places formatted output buffer returns pointer buffer 
example initialized pointer string hello allocated region 
sprintf risk buffer overflow risk passing buffer small 
allocated buffer freed region goes scope just stack allocated buffer 
region analysis knows point region region deallocated exit block 
uses knowledge prevent dangling pointers region example prohibits storing global variable wrongly access region deallocated 
regions safe version arena style memory management widely apache 
programmers styles memory management plan extend cyclone accommodate safely 
cyclone safe languages supports safe explicit memory management relying garbage collector 
type varying arguments possible write function takes argument type varies call call 
printf function familiar example printf printf hello call printf second argument int call second argument char 
perfectly safe case compiler catch errors examining format string see types remaining arguments 
unfortunately compiler catch errors 
consider extern char printf lazy way print string problem general contain format directives causing printf look non existent arguments stack 
compiler check string literal 
core dump 
danger greater user program gets choose string format directive causes printf write number characters printed far location specified pointer argument write arbitrary value location chosen attacker leading complete compromise 
known format string attack increasingly common exploit 
solve cyclone steps 
add tagged unions language int int str char declares new tagged union type tagged union cases ordinary union adds tags distinguish cases 
int case tag int char case tag str 
function takes tagged union argument look tags find case argument extension switch statement void pr switch case int printf break case str printf break case switch executed tag int variable gets bound underlying int body case 
similarly second case taken tag str underlying string tags enable pr function correctly detect type argument 
callers explicitly add tags arguments 
example pr called follows pr new int pr new str hello line calls pr int adding tag int notation new int 
second call string hello tag str 
inserting tags hand inconvenient provide second feature automatic tag injection 
example cyclone printf declared printf char fmt inject tagged union containing possible types arguments printf 
cyclone printf called just explicit tags printf hello compiler inserts correct tags automatically placed stack 
printf function accesses tagged arguments fat pointer cyclone bounds checked uses switch sure arguments right type 
printf safe format string argument comes user input cyclone permit printf programmer arguments type inconsistent way 
tags programmer detect inconsistency run time take appropriate action return error code exit program 
type varying arguments posix functions including scanf functions ioctl signal socket functions bind connect 
cyclone uses tagged unions injection sure functions called safely presenting programmer interface goto goto statements lead safety violations jump scopes 
simple example int int goto int possible program declares variable enters blocks sequence 
compilers stack allocate local variables block entered deallocate pop storage block exits mandated standard 
example compiled way program enters block space allocated stack initialized value 
goto jumps middle second block directly assignment contents pointer variable declared second block assignment expects top stack 
unfortunately exactly allocated program tries write location probably triggering segmentation fault 
cyclone static analysis detects situation signals error 
goto enter scope safe allowed cyclone 
apply analysis switch statements suffer similar vulnerability vulnerabilities features misused cause safety violations 
examples bad casts implemented missing return statements violations const qualifiers improper unions 
cyclone analysis restricts features prevent safety violations 
implementation cyclone compiler implemented approximately lines cyclone 
consists parser static analysis phase simple translator gcc back experimented microsoft visual 
able existing tools gdb flex ported completely cyclone bison 
user compiles garbage collection enabled boehm demers weiser conservative garbage collector shelf component 
built useful utilities including documentation generation tool memory profiler 
order get rough idea current potential performance language ported selection benchmarks cyclone 
program loc diffs cyc cacm cfrac finger grobner get load ping post mini httpd tile total benchmarks cfrac mini httpd total table benchmark diffs benchmarks useful testing cyclone safety guarantees performance benchmarks safety violations revealed subsequently fixed ported cyclone 
process porting tested limitations cyclone interface library forced provide complete library support 
example small benchmarks finger get parts library cyclone compiler tools sockets signals 
benchmarks tried pick benchmarks range problem domains 
networking mini httpd web server web utilities get post ping load finger 
cfrac grobner tile benchmarks computationally intensive applications heavy arrays pointers 
cacm compression utilities 
benchmark programs cyclone cyclone homepage 
ease porting tried design cyclone existing code ported modifications 
table quantifies number modifications needed port benchmarks 
benchmark table shows number lines code cyclone versions 
diff column shows number lines changed port column shows percentage lines changed relative original program size 
porting grouping benchmarks tried minimize changes 
particular benchmarks involving non trivial dynamic memory management cfrac grobner load tile compiled garbage collector cyclone benchmarks garbage collector 
second grouping gives results versions benchmarks modified cyclone regions possible 
usually fewer lines needed changed port benchmarks cyclone 
common changes changing pointers cyclone pointers example changing char char 
column table shows percentage changes form generally simple change accounted changed lines 
changes adapting cyclone stricter requirements allocation initialization const enforcement function prototyping 
typical changes forms included changing malloc new adding explicit initializers adding explicit const type qualifiers casts ensuring functions prototypes explicit return values 
performance table compares performance benchmarks cyclone bounds checking enabled cyclone bounds checking disabled 
presently simple bounds check elimination effort date focused safety performance gap second third measurements gives upper bound improvement expect 
ran benchmark times mhz pentium iii mb ram running linux kernel gcc back 
gcc flags march compiling benchmarks 
observed skewed distributions benchmarks report medians semi interquartile ranges non web benchmarks semi interquartile range difference high quartile low quartile divided 
measure variability similar standard deviation recommended skewed distributions 
web benchmarks median mean essentially identical standard deviation mean 
table shows slowdown factor cyclone relative achieve near zero overhead bound applications web server programs considerable overhead computationally intensive benchmarks worst grobner factor slower version 
seen slowdowns factor pathological scenarios involving pointer arithmetic microbenchmarks listed 
common sources overhead safe languages garbage collection bounds checking 
checked unchecked columns table show bounds checks important component overhead expected 
garbage collection overhead easy measure 
profiling garbage collected version cfrac suggests garbage collection accounts approximately half overhead 
partially cfrac resulted improvement bounds checks require significant changes program value comparison clear 
expect overhead vary widely different programs depending memory usage patterns example load tile relatively little dynamic allocation garbage collection overhead 
cyclone representation fat pointers turned important overhead 
represent fat pointers words base address bounds address current pointer location essentially representation bounded pointers 
compared pointers fat pointers larger space overhead larger cache footprint increased parameter passing overhead increased register pressure especially register impoverished 
code generation big difference gcc march flag increased speed programs making heavy fat pointers cfrac grobner factor causes gcc efficient implementation block copy 
safety array bounds violations benchmarks ported cyclone mini httpd grobner tile 
test time cyclone time checked factor unchecked factor cacm sigma sigma theta sigma theta sigma sigma theta sigma theta finger sigma sigma theta sigma theta sigma sigma theta sigma theta get sigma sigma theta sigma theta sigma sigma theta sigma theta ping sigma sigma theta sigma theta post sigma sigma theta sigma theta sigma sigma theta sigma theta mini httpd sigma sigma theta sigma theta sigma sigma theta sigma theta sigma sigma theta sigma theta garbage collector benchmarks cfrac sigma sigma theta sigma theta mini httpd sigma sigma theta sigma theta table benchmark performance surprise grobner dates back mid 
hand consistent research shows bugs linger years widely software :10.1.1.32.7648
mini httpd web server consults file decide client access protected web pages 
tries careful reveal password file clients 
ironically code protect password file contains safety violation define auth file strcmp file strlen file sizeof auth file auth file 
code trying see file requested client 
unfortunately file string shorter strcmp passed bounds pointer 
result access file denied region memory just string constant happens contain file name cause program crash region memory inaccessible 
cyclone error run time bounds check 
grobner benchmark serious violation affecting safety correctness 
program represents polynomials arrays coefficients multiply routine handles polynomials single coefficient special case 
unfortunately code general case turns completely wrong loop unrolled incorrectly multiplication ends applied bounds pointers 
result answers returned unpredictable 
test cases provided distribution follow code path performance experiments consider correct input cases 
cyclone bounds checks quickly illuminated source problem 
tile program array bounds violations due error order evaluation bug code cur cur cur function global arrays 
reallocation supposed occur greater equal cur guard error 
cyclone caught bounds check 
addition argument old size array second argument new size 
platform uses right left evaluation code passes new size array argu ments 
caught bounds check cyclone 
bounds access caught causing incorrect initialization new arrays 
design history cyclone began typed assembly language tal project :10.1.1.33.3468
tal project goal ensure program safety machine code level adding machine checkable safety annotations machine code 
machine code annotations easy produce hand designed simple language called popcorn front built compiler automatically translates popcorn machine code plus necessary annotations 
popcorn worked proof concept tal disadvantages 
different porting code interfacing code difficult 
language research group adopted 
cyclone reworking popcorn agendas understanding low level safety gain outside adopters 
turns compatibility serious requirement critical advancing agendas 
obvious start compatibility cyclone appealing idea help understand better design safe low level language surprise 
programmers don write kinds programs programmers safe languages java tricks aren available highlevel languages 
programs safe intended safe learned great deal porting systems code cyclone 
choices design cyclone ml language worked 

choices right ml cyclone ended closely expected start 
played gradually years cyclone development 
notable mistakes course changes ffl originally supported arrays fat pointers type array element type array 
array passed functions value type array supported subscripting pointer arithmetic 
matches closely ml array types popcorn implemented ml 
converting code array painful requiring nontrivial editing type declarations converting pointer arithmetic array subscripting 
abandoned fat pointers easy port code requiring changes changes pointer arithmetic 
ffl didn understand importance strings 
nul termination isn guaranteed safety committed explicit array bounds 
nul pointless string library ignored 
programmed language ported code came understand important nul efficiency memory reuse changed string library match 
ffl switch case default falls case explicit break 
exactly opposite cases fall case fall probably bug 
added explicit statement rule case fall statement 
decision correct mistake wrong 
porting error prone examine switch statement look intentional fall throughs add statement 
gotten rid special meaning break switch longer needed consequently break switch loop break head loop early versions cyclone 
eventually realized going basic instinct programmer gaining restored semantics switch break 
ffl originally implemented tagged unions extension enumerations enumeration constant case tagged union associated value 
tagged union general decided just 
mistake enumeration really treated int programmers rely 
uncommon see things enumeration variable 
aren able tagged unions eventually separated enum 
programmers wide variety memory management strategies moment cyclone supports garbage collection arena memory management 
major goal project going forward research ways accommodate memory management strategies retaining safety 
limitation current release assignments fat pointers atomic thread safe 
plan address requiring programmer acquire lock accessing thread shared fat pointer enforced extension type system 
locks necessary thread local fat pointers 
experimenting number new pointer representations 
instance pointer array safely represented just address long pointer moves forward inside array zero terminator overridden 
new representations easier interface legacy code improve space overhead fat pointers 
plan explore ways automatically translate programs cyclone 
beginnings compiler tries report informative errors places code needs modified tool built semi automatically construct cyclone interface libraries 
related enormous body research making safer 
techniques grouped strategies 
static analysis 
programs lint crawl source code flag possible safety violations programmer review 
examples lclint metal slam prefix :10.1.1.114.3285:10.1.1.134.652:10.1.1.134.652:10.1.1.134.9305:10.1.1.134.9305

inserting run time checks 
assert statements safe system debugging versions libraries electric fence cause programs perform sanity checks run 
technique combat buffer overflows printf format string attacks :10.1.1.29.1037

combining static analysis run time checks 
systems ccured perform static analyses check source code safety automatically insert run time checks safety guaranteed statically :10.1.1.152.1345
techniques cyclone uses third strategy 
ccured projects applies way comes close ruling safety violations hard program pass lint crash advanced checking systems lclint slam metal find safety violations 
say similar systems mentioned 
furthermore systems simply assert probably popular usually turned code shipped avoid performance degradation 
ccured cyclone seek rule safety violations 
main disadvantage ccured takes control away programmers 
ccured needs maintain extra bookkeeping information order perform necessary run time checks modifying data representations 
example int represented just address represented address plus extra data allows bounds checking 
means ccured control data representations programmer basic operations dereferencing pointer arithmetic different costs depending decisions ccured 
furthermore ccured relies garbage collector programmers control memory management 
decisions ccured concerned porting legacy code little change cyclone concerned preserving hallmark control low level details data representation memory management porting old code writing new code 
cyclone dialect prevents safety violations programs combination static analyses inserted run time checks 
cyclone goal accommodate style low level programming providing level safety guaranteed high level safe languages java level safety achieved previous approaches 
research supported part nsf sloan br afosr onr nsf graduate fellowships 
opinions findings recommendations expressed publication authors reflect views agencies 
todd austin scott breach sohi 
efficient detection pointer array access errors 
acm conference programming language design implementation pages june 
thomas ball majumdar todd millstein sriram rajamani 
automatic predicate abstraction programs 
proceedings acm conference programming language design implementation pages june 
thomas ball sriram rajamani 
automatically validating temporal safety properties interfaces 
spin workshop model checking software volume lecture notes computer science pages 
springer verlag may 
singh timothy tsai 
transparent run time defense stack smashing attacks 
usenix annual technical conference san diego california june 
william bush jonathan pincus david 
static analyzer finding dynamic programming errors 
software practice experience 
cert 
denial service attack ping 
advisory ca december 
www cert org advisories ca html 
cert 
double free bug zlib compression library 
advisory ca march 
www cert org advisories ca html 
crispin cowan matt barringer steve beattie greg hartman 
automatic protection printf format string vulnerabilities 
th usenix security symposium washington august 
crispin cowan calton pu dave maier heather hinton jonathan walpole peat steve beattie aaron perry wagle qian zhang 
stackguard automatic adaptive detection prevention attacks 
th usenix security symposium san antonio texas january 
cyclone 
www cs cornell edu projects cyclone 
john philip koopman 
performance evaluation exception handling libraries 
international conference dependable systems networks june 
roman 
re linux ident buffer overflow 
bugtraq mailing list november 
www 
securityfocus com archive 
dawson engler benjamin chelf andy chou seth hallem 
checking system rules system specific programmer written compiler extensions 
proceedings fourth usenix symposium operating systems design implementation october 
dawson engler david yu chen seth hallem andy chou benjamin chelf 
bugs deviant behavior general approach inferring errors systems code 
proceedings eighteenth acm symposium operating systems principles october 
chris evans 
gdm remote hole 
bugtraq mailing list may 
www 
securityfocus com archive 
chris evans 
interesting traceroute flaw 
bugtraq mailing list september 
www securityfocus com archive 
david evans 
static detection dynamic memory errors 
sigplan conference programming language design implementation may 
justin forrester barton miller 
empirical study robustness windows nt applications random testing 
th usenix windows systems symposium august 
mike mike 
stackghost hardware facilitated stack protection 
th usenix security symposium washington august 
dan grossman greg morrisett 
scalable certification typed assembly language 
rd international workshop types compilation volume lecture notes computer science pages montreal canada september 
springer verlag 
dan grossman greg morrisett trevor jim michael hicks wang james cheney :10.1.1.10.8871
region memory management cyclone 
proceedings acm conference programming language design implementation 
acm june 
raj jain 
art computer systems performance analysis 
wiley 
philip koopman john 
exception handling effectiveness posix operating systems 
ieee transactions software engineering september 
david david evans 
statically detecting buffer overflow vulnerabilities 
th usenix security symposium washington august 
elias levy 
re rpc solaris 
bugtraq mailing list november 
www securityfocus com archive 
greg 
bounds checking projects 
www gnu org software gcc projects bp main html 
medianet 
www cs cornell edu people medianet htm 
barton miller lars bryan :10.1.1.32.7648
empirical study reliability unix utilities 
communications acm december 
robin milner mads tofte robert harper 
definition standard ml 
mit press 
greg morrisett karl crary neal glew dan grossman richard samuels frederick smith david walker stephanie weirich steve zdancewic 
talx realistic typed assembly language 
second acm sigplan workshop compiler support system software pages atlanta ga 
published inria technical report march 
george necula scott weimer :10.1.1.152.1345
ccured type safe retrofitting legacy code 
ninth acm symposium principles programming languages portland january 
appear 
umesh shankar talwar jeffrey foster david wagner 
detecting format string vulnerabilities type qualifiers 
th usenix security symposium washington august 
stephan somogyi bruce schneier 
inside risks port 
communications acm october 
tf 
wu ftpd remote format string stack overwrite vulnerability 
bugtraq vulnerability june 
www 
securityfocus com bid 
