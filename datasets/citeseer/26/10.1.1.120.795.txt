design jml accommodates runtime assertion checking formal verification gary leavens cheon curtis clifton clyde ruby david cok tr march revised march keywords specification languages runtime assertion checking documentation tools formal methods program verification programming contract java language jml language eiffel language larch family specification languages 
cr categories software engineering requirements specifications languages tools jml software engineering design tools techniques modules interfaces object oriented design methods software engineering software program verification assertion checkers class invariants correctness proofs formal methods programming contract reliability tools validation jml programming languages language classifications object oriented languages logics meanings programs specifying verifying reasoning programs assertions invariants logics programs mechanical verification pre post conditions specification techniques 
slightly corrected version appears frank de boer susanne graf willem paul de roever eds formal methods components objects pages 
volume lecture notes computer science springer verlag berlin 
see www springer de comp lncs index html 
copyright springer verlag 
rights reserved 
department computer science hall iowa state university ames iowa usa design jml accommodates runtime assertion checking formal verification gary leavens cheon curtis clifton clyde ruby david cok department computer science iowa state university hall ames iowa usa leavens cheon ruby cs iastate edu phone fax eastman kodak research development laboratories dewey avenue building rochester new york usa david cok kodak com phone fax 
specifications detailed design documentation existing code primarily written read programmers 
formal specification languages heavy symbolic mathematical operators discourages programmers limit assertions expressions underlying programming language difficult write complete specifications 
assertions expressions underlying programming language cause problems runtime assertion checking formal verification expressions potentially contain side effects 
java modeling language jml avoids problems 
uses side effect free subset java expressions added mathematical operators quantifiers forall exists 
jml hides mathematical abstractions sets sequences library java classes 
goal allow jml serve common notation formal verification runtime assertion checking gives users benefit tools cost changing notations 
java modeling language jml result cooperative international effort aimed providing common notation semantics specification java code detailed design level 
jml designed cooperatively different tools common notation behavioral interface specifications 
explain features jml design assertions easily understandable programmers suitable runtime assertion checking formal verification 
background hoare style specification mean uses pre postconditions specify behavior methods 
behavioral interface specification language specification language specifies syntactic interface module behavior 
jml interface specification languages larch family resolve 
design contract languages tools eiffel app place specifications inside programming language code 
contrast vdm way specify interface details particular programming language 
ocl uml uml languageindependent poses problems java programmer uml standard notations details java method signatures 
example uml syntax specifying signatures operations standard notation declaring java method declaring exceptions method may throw pp 

ocl standard constraints correspond jml exceptional postconditions 
jml specify interface behavior specifying detailed designs include java details 
jml suited task documenting reusable components libraries frameworks written java 
tool support easily integrated code lend tool support activities related detailed design coding testing maintenance 
important goal jml enable wide spectrum tools 
tools enforce jml semantics type checking important jml tools help tasks 
runtime checking testing 
iowa state group provides www 
org runtime assertion checking compiler generates class files jml annotated java sources tool uses runtime assertion checker generate test oracle code junit tests 
documentation 
david cok provides tool available www org generates html documentation similar notes uml nonstandard ways specify exceptions method may throw java syntax directly property string 
runtime assertion checking iowa state relies adding instrumentation compiled code steven edwards group virginia tech working wrapper class approach runtime assertion checking allow instrumentation programs source code available 
produced javadoc containing specifications 
generated documentation useful browsing specifications posting web 
static analysis verification 
tools prepared partners compaq university nijmegen esc java tool statically checks java code errors 
esc java understands subset jml annotations 
loop tool assists formal verification correctness implementations jml specifications theorem prover pvs :10.1.1.34.8093
addition daikon dynamic invariant detector outputs invariants java programs subset jml korat automated testing tool uses tool exercise test data derives 
discuss jml meets needs tools runtime assertion checking documentation static analysis verification 
focus runtime assertion checking formal verification consider extremes spectrum tools support 
tasks runtime assertion checking formal verification widely differing needs runtime assertion checking places high premium executability 
specification languages intended runtime assertion checking eiffel app allow assertions completely executable 
sensible language intended support runtime assertion checking formal verification 
hand formal theorem proving reasoning place high premium standard mathematical notations 
specification languages intended formal reasoning verification vdm members larch family especially feature variety symbolic mathematical notations 
expressive mathematical notations quantifiers impossible general execute runtime 
including notations sensible language intended support formal theorem proving reasoning runtime assertion checking 
problems describing problems arise addressing needs range tools exemplified runtime assertion checking formal verification 
notational problem said syntax matter experience larch smalltalk larch showed programmers object learning specialized mathematical notation larch shared language 
similar problems finney preliminary experiment demonstrating symbolic notation specifications may hard read 
conversely executable languages eiffel app programmers feel comfortable programming language expressions assertions 
assertion language appealing purposes documentation highly symbolic mathematical notations 
summarize problem address provide syntax specification expressions 
specification expressions syntactic forms denote values assertions 
syntax mean close programming language expressions programmers feel comfortable features necessary support runtime assertion checking formal verification 
undefinedness problem expressions programming language may abruptly terminate throw exceptions may go infinite loops consequently may undefined values strictly mathematical point view 
programming languages typically provide features deal explicitly undefinedness 
example java provides short circuit versions boolean operators allow programmers suppress evaluation subexpressions 
want programmers mathematicians jml notations jml specification expressions look java expressions java semantics validate standard laws logic 
potential undefinedness java expressions satisfy standard rules logic example java conjunction equal logic equal 
resolve conflict willing accept slightly different semantics assertion evaluation long programmers surprised 
second problem address find semantics expressions assertions validates standard laws logic surprise programmers useful runtime assertion checking 
side effects problem important semantic issue expressions programming language java including eiffel contain side effects 
side effects practical problem related runtime assertion checking 
generally assumed assertions may evaluated skipped change outcome computation assertion side effects potential alter computation outcome 
example assertion side effects mask presence bug revealed cause bugs 
principal uses runtime assertion checking debugging isolating bugs unacceptable side effects assertion checking alter outcome computation 
third problem address prevent side effects assertions retaining syntax normal programming language expressions possible 
mathematical library problem specification languages come library mathematical concepts sets sequences 
concepts especially helpful specifying collection types 
example specify stack type mathematical sequence describe abstractly states stack object may take 
vdm ocl interface specification languages larch family libraries mathematical concepts 
standard theorem provers pvs 
discussed section want limit barriers java programmers overcome jml 
fourth problem address provide library mathematical concepts way overwhelm programmers useful formal verification 
goals jml addition providing solutions preceding problems design jml guided constrained goals 
important goals allow users write specifications document detailed designs existing code 
motivates choice making jml described 
jml useful documenting code regardless designed particular design method discipline 
important cost specification high justified knows design code stabilized documentation potentially useful people 
general jml design adheres goal able document existing designs significant aspect jml design departs goal jml imposes specifications supertypes subtypes property termed specification inheritance order achieve behavioral subtyping 
jml specification inheritance justified goals want jml support modular reasoning reasoning behavior compilation unit just specifications compilation units opposed details implementations 
modular reasoning important difficulty understanding object oriented program increases rapidly size program benefits abstraction mechanisms object oriented languages lost 
consequently modular reasoning important formal verification scope verification problem limited 
specification inheritance resulting behavioral subtyping allows modular reasoning sound allowing reason static types 
subsumption java allows subtype object substituted supertype 
requirements behavioral subtyping guarantee substituted objects obey specifications inherited static type 
benefits modular reasoning programmers verifiers favor specification inheritance conflicting goal able document existing designs follow behavioral subtyping 
case possible requirements behavioral subtyping cases subtype obey inherited specifications supertype 
simply supertype allow subtypes desired 
note involve changing code design specification interfere goal documenting existing code 
outline remainder organized follows 
section discusses solution notational problem described 
having described notation general terms section provides background jml 
subsequent sections treat remaining problems discussed 
ends discussion related 
solving notational problem solve notational problem described section jml generally follows eiffel basing syntax specification expressions java expression syntax 
side effects desired specification expressions jml specification expressions include java expressions cause obvious side effects assignment expressions java increment decrement operators 
furthermore jml suitable formal verification efforts jml includes number operators java section 
syntax operators comes flavors symbolic textual 
want introduce excess notation cause difficulties programmers reading specifications jml adds just symbolic operators 
logical operators forward reverse implication written respectively logical equivalence written respectively 
inclusion symbols logical operators inspired calculational approach formal methods 
symbolic operator compare types see subtype relationship 
operators added java available jml specification expressions textual notation consisting backslash followed english word phrase 
example logical quantifiers jml written forall exists 
quantifiers jml operators backslash syntax 
important old method postconditions indicate expression value taken pre state method call 
example old denotes value evaluated pre state method call 
notation borrowed old operator eiffel 
jml expressions backslash syntax include fresh says allocated pre state method call allocated null post state result denotes normal result returned method 
syntax operators serve important purpose prevent rest operator name interpreted java identifier 
allows jml avoid reserving java identifiers specification expressions 
example result program variable distinguished result 
trick useful allowing jml specify arbitrary java programs 
goal jml document existing code add new reserved words java 
background jml section provide additional background jml useful understanding solutions remaining problems 
semantics specification expressions just jml adopts java expression syntax attempts keep jml semantics similar java particular semantics specification expressions semantics 
name variable field expression denotes primitive value integer object 
values semantics allows directly express aliasing lack 
example expression arg says arg aliased 
java allows compare states objects equals method 
example postcondition clone method write say result returned clone newly allocated object state receiver fresh result equals result note exact meaning equals method type left designer type java 
knows object hard conclude equals 
jml uses semantics specifiers show care java programmers choosing equals equality tests 
eiffel larch style interface specification languages jml need state functions applied extract value expression 
values implicitly extracted needed methods operators 
easier programmers lends succinctness notation 
currently jml adopts java semantics integer arithmetic 
types int complement arithmetic finite 
java programmers theory aware nature integer arithmetic jml adoption java semantics causes misunderstandings example published jml specifications inconsistent semantics 
suggested adding new primitive value types infinite precision arithmetic jml particular suggests type infinite precision integers 
currently implementing experimenting idea 
method type specifications explain jml semantics method specifications example 
jml uses special comments called annotations hold specification behavior added interface information contained java code 
specifier writes annotation comments inserting sign usual characters signify start comment 
multi line annotation comments signs beginnings lines ignored 
starts model import directive says jml consider types named package org models imported purposes specification 
allows jml tools find type see third line package 
type type model instance field named 
declaration model keyword says field part java code solely purposes specification 
instance keyword says field imagined purposes specification non static field class implements interface 
declaration model instance fields invariant 
says field null 
invariant declarations specifications methods 
jml method specifications typically written header method specify 
scope formal parameters method bit strange extends backward method specification 
works best java tools expect comments related method javadoc comments precede method header 
consider specification method push 
shows general form normal behavior specification case 
specification case includes precondition indicated keyword requires specification clauses 
specification case satisfied precondition satisfied clauses satisfied 
additionally normal behavior specification case method throw exception precondition satisfied 
specification case push includes requires clause frame axiom introduced keyword assignable normal postcondition keyword ensures 
omitting instance fields static final java default fields declared interfaces 
model import org models public interface stack public model instance public instance invariant null public normal behavior requires true assignable ensures equals old void push object public normal behavior requires isempty assignable ensures equals old trailer result old public exceptional behavior requires isempty assignable signals exception instanceof object pop ensures result isempty pure boolean isempty fig 

specification code interface stack 
specification languages larch family precondition just true omitted 
larch family omitted frame axiom means assignable strong specification says method side effects 
suggestion erik poll decided specification strong default 
jml omitted frame axiom allows assignment locations 
agrees defaults omitted clauses jml impose restrictions 
jml allows specifiers write exceptional behavior specification cases say precondition satisfied method return normally throw exception 
example appears specification pop method 
specification specification cases connected 
meaning method satisfy specification cases 
value model instance field empty call pop return normally satisfy ensures clause 
value model instance field empty call pop throw 
kind case analysis desugared single specification case semantics usual way 
specification cases push pop heavyweight specification cases section 
specification cases useful wants give relatively complete specification especially purposes formal verification 
runtime assertion checking documentation may want specify part behavior method 
done jml lightweight specification cases indicated absence behavior keyword normal behavior 
gives example lightweight specification case specification method isempty 
dealing undefinedness discussed section fundamental problem underlying language specification expressions dealing expressions value undefined 
java undefinedness expressions typically signaled expression throwing exception 
example divides integer expression throws 
exceptions may thrown methods called specification expressions 
specification languages adopted different approaches dealing undefinedness expressions 
wanted semantics surprising java programmers doing formal verification 
typically java programmer try write specification way protects meaning expression source undefinedness 
accomplished short circuit boolean operators example specifier write denom num denom sure division defined carried 
specifications meaningful protective 
semantics jml rely programmer writing protective specifications ensures expression value 
adopted underspecified total functions approach favored calculational style formal methods 
expression value java arbitrary unspecified value 
example num integer value approach say value uniformly substituted surrounding expression 
jml expressions implicit argument program state uniform substitution values need carried assertion 
advantage substitution approach validates rules standard logic 
example jml equivalent 
consider happens throws exception case may chose unspecified boolean value say means equals equal seen simple case analysis value 
case throws exception similar 
furthermore programmers write protective specifications surprised details semantics 
jml assertion checking compiler takes advantage semantics undefinedness attempt possible detect possible assertion violations 
assertion checking attempts value assertion false undefinedness subexpression allows 
way assertion checker follow rules standard logic detect places specifications sufficiently protective 
example jml caters needs runtime assertion checking formal verification 
preventing side effects assertions discussed section important prevent side effects assertions practical theoretical reasons 
jml designed prevent side effects statically 
effect checking type system 
type system designed simple possible 
allows specification expressions call java methods constructors allows calls called method constructor declared modifier pure 
semantics jml assure pure methods constructors side effect free 
jml purity restrictions jml semantic restrictions pure methods constructors follows pure method implicitly specification includes specification case section assignable ensures correct implementation method side effects 
pure constructor implicitly specification allows assign instance fields class appears including inherited instance fields section 
ensures constructor correctly implemented new expression calls side effects 
pure methods pure constructors may invoke methods constructors pure 
type system modular allows purity method constructor checked code specifications methods constructors calls 
methods constructors override pure method constructor pure 
inheritance purity consequence specification inheritance necessary type system modular presence subtyping 
restriction implies pure method may perform input output may assign non local variables 
similarly second restriction pure constructor may may assign non local storage instance fields object constructor initializing 
note jml saying method may assign non local storage means precisely benevolent side effects prohibited section 
necessary sound modular reasoning 
useful restriction reasoning supertypes specifications reasoning concurrent programs 
restrictions motivated modularity considerations 
inheritance purity consequence method pure overriding method side effects 
particular method object specified pure override method java class obeys jml purity restrictions 
type system jml important advance languages eiffel trust programmers avoid side effects assertions statically checking property 
see subsection jml purity restrictions give rise practical problems 
practical problems jml purity restrictions initial practical problem decide methods java libraries specified pure 
way start answer question static analysis conservatively estimate methods java libraries side effects 
conservative analysis count method having side effects assigns non local storage calls native methods may directly indirectly 
methods safely specified pure provided overridden methods analysis says side effects 
researchers purdue provided list methods tools open virtual machine project 
hope integrate technology jml tools eventually 
declaring method pure entails strong specification method possible overriding methods side effects 
finding method known methods override obey jml purity restrictions deciding method specified pure 
decision affects just existing overrides method implementations overrides 
decision 
problem particularly vexing methods intuitively side effect free obey jml purity restrictions 
methods benevolent side effects common examples 
benevolent side effect change internal state object way externally visible 
examples protocol object illustrate importance problem 
see www org 
consider computing hash code instance class 
may computationally costly implementation may desire compute hash code time asked cache result private field object 
hash code requested subsequent occasions cached result returned computation 
example done hashcode method java string class 
jml storing computed hash code cache considered side effect 
string hashcode method specified pure 
second consider computing object equality 
implementations object fields lazily initialized computed access 
equals method happens method called object trigger delayed computation 
example multijava compiler compiler class delayed computations override object equals method trigger previously delayed computation side effects 
difficult rewrite method side effect free probably need change compiler architecture 
similar kinds lazy initialization fields occur implementations singleton pattern usually affect equals method 
shown cases methods protocol object overridden methods pure 
purity specification inheritance examples imply hashcode equals specified pure object 
object typically java type elements collection 
specification collection type hash table hashcode equals methods elements 
changes jml unsuitable specifying collection types 
problem problem collection types specify subclasses object pure hashcode equals methods 
specifications operating instances subclasses methods violating jml type system 
solving problems desire intuitively side effect free methods specifications pure jml semantics strong considered changing semantics assignable clause order allow benevolent side effects 
know retain sound modular reasoning 
case methods runtime assertion checking problematic side effects cause 
addition prevent problems programmer wrongly believes side effects benevolent clear automatic static analysis prevent problems tool modular 
far viable solution identified refactor specifications adding pure model specification methods specifications place program methods pure 
intuitively side effect free program method pure jml semantics create pure model method returns result side effects 
replaces calls calls assertions 
currently experimenting solution 
important part experiment replace uses object equals method pure calls new pure model method object called 
specifications methods shown 
assignable clause specification equals method permits benevolent side effects specified return result call 
overrides equals override method 
override equals specified pure override class specified terms pure equals method implementation model method simply call equals 
implementation equals call program code call model methods model methods specifications 
avoid code duplication equals declared pure methods share common implementation code introduce non model pure private method equals call 
applied refactoring collection classes java util packages previously specified order check solution viable 
far results satisfactory 
may restructuring part jml release jml tools able handle details approach 
particular runtime assertion checker able compile model methods added object having object source code available 
legally ship sun source code object jml release 
working solutions problem allow obtain experience approach case studies 
synchronized methods purity jml currently permits synchronized methods declared pure meet criteria described section 
obtaining lock side effect affect control flow program allowing synchronized methods pure violate intent jml purity restrictions 
surface synchronized method gains lock may change outcome concurrent threads 
furthermore execution method block conceivably causing deadlock concurrent threads occur doing assertion checking 
largely ignored concurrency far jml design leave resolution issue 
public normal behavior assignable ensures result obj public boolean equals object obj public normal behavior requires obj null assignable ensures result true obj equal object public normal behavior requires obj null typeof type object assignable ensures result obj public normal behavior requires obj null assignable ensures result false public pure model boolean object obj return obj fig 

refactored specification object equals method pure model method 
text specification case specification informal description formally equivalent writing true 
mathematical libraries described section need provide library mathematical concepts jml way overwhelm programmers useful formal verification 
hiding mathematics convenient mathematical concepts sets sequences specification particularly collection classes 
example specification stack uses type part jml org models package 
package contains types intended mathematical modeling 
sequences include sets bags relations maps convenience types 
types org models pure methods constructors 
example method returns sequence object receiver argument placed front receiver changed way 
trailer method similarly returns sequence containing element receiver changing receiver 
methods pure runtime assertion checking changing underlying computation 
jml gains advantages having mathematical modeling types java package opposed having purely mathematical concepts 
types java implementations runtime assertion checking 
second types assertions avoids special mathematical notation normal java expressions method calls things concatenating sequences intersecting sets 
advantage main audience consists programmers mathematicians 
theorem provers second part mathematical libraries problem described section library mathematical modeling types useful formal verification 
types org models package intended correspond loosely libraries mathematical concepts theorem provers pvs 
gain experience add additional methods types improve correspondence mathematical concepts 
possible add new packages types tailored specific theorem provers notations ocl 
translating specification expressions theorem prover input loop tool currently treats methods way special case pure methods org models package 
resulting proof obligations complex desirable 
types models package known able special case replace general semantics method call call specific function theorem prover library mathematical concepts 
facilitate may model types declared final currently case 
related discussed jml differs conventional formal specification languages vdm larch family resolve 
summarize main difference org models package types non pure methods 
various kinds iterators 
methods iterators side effects specification expressions 
jml specification expressions subset java programming language design java programmers 
alloy annotation language aal offers syntax similar jml annotating java programs 
aal supports extensive compile time checking static analysis techniques 
similar static analysis tools esc java aal supports method calls relational expressions assertions 
aal assertion language simple order logic relational operators subset java expressions 
believe java syntax gain acceptance java programmers 
jml adopt aal features specifying sets objects regular expressions 
helpful jml frame axioms allow jml precisely describe locations assigned method 
option similar benefits approach taken 
discussed jml differs design contract languages eiffel tools app 
summarizing jml provides better support complete specifications formal verification extending set specification expressions expressive mathematical constructs quantifiers ensuring specification expressions contain side effects providing library types corresponding mathematical concepts 
jml specification model declarations frame axioms contribute ability specify types completely easily done design contract tools 
know design contract tools java :10.1.1.29.2898
approaches vary simple assertion mechanism similar assert macros full fledged contract enforcement capabilities 
jass icontract focus practical design contract java 
handshake focus implementation techniques library fly instrumentation contracts 
contract java focuses properly contract violations 
notations tools suffer problems eiffel 
guarantee lack side effects assertions handle undefinedness way facilitate formal verification reasoning support expressive mathematical notations quantifiers provide set immutable types designed specifications 
sum focus runtime checking difficult write complete specifications formal verification reasoning 
jml synthesizes best worlds design contract mathematical specification languages 
expressive mathematical notations specification model declarations library mathematical modeling types easily write complete specifications jml design contract language eiffel 
complete specifications jml purity checking allow jml useful formal verification 
jml synthesis features allows serve roles java formal methods community 
experience far approach modest impact 
release jml downloaded times 
jml universities teaching aspects formal methods 
somewhat extensively java smart card industry outside industry 
extend range tools jml supports include tools model checking specification concurrent java programs 
invite join effort furnish java programmers single notation tools 
acknowledgments leavens cheon clifton ruby supported part national science foundation ccr ccr 
lutz sharon ryan janet leavens comments earlier drafts 
contributed design implementation jml including baker erik poll bart jacobs joe rustan leino raymie stata michael ernst gary arnd poetzsch heffter peter ller acknowledged 

abraham de boer de roever steffen 
proof system multithreaded java 
frank de boer susanne graf willem paul de roever editors formal methods component objects proceedings lecture notes computer science 
springer verlag 

pierre america 
inheritance subtyping parallel object oriented language 
jean editors ecoop european conference object oriented programming paris france pages new york ny june 
springer verlag 
lecture notes computer science volume 

pierre america 
designing object oriented programming language behavioural subtyping 
de bakker de roever rozenberg editors foundations object oriented languages rex school workshop noordwijkerhout netherlands may june volume lecture notes computer science pages 
springer verlag new york ny 

barringer cheng jones 
logic covering undefinedness program proofs 
acta informatica october 

fischer moller 
jass java assertions 
workshop runtime verification held conjunction th conference computer aided verification cav 
published electronic notes theoretical computer science havelund rosu eds 

juan john peter lindsay richard moore brian ritchie 
proof vdm practitioner guide 
springer verlag new york ny 

grady booch james rumbaugh ivar jacobson 
unified modeling language user guide 
object technology series 
addison wesley longman reading mass 

chandrasekhar boyapati khurshid darko marinov 
korat automated testing java predicates 
proceedings international symposium software testing analysis issta pages 
acm july 

patrice 
back basics language support semantics basic infinite integer types jml larch 
technical report cu cs computer science department concordia university october 

patrice 
improving jml safer effective language 
technical report computer science department concordia university march 

cheon gary leavens 
larch smalltalk interface specification language 
acm transactions software engineering methodology july 

cheon gary leavens 
quick overview larch 
journal object oriented programming october 

cheon gary leavens 
runtime assertion checker java modeling language jml 
hamid mun editors proceedings international conference software engineering research practice las vegas nevada usa june pages 
csrea press june 

cheon gary leavens 
simple practical approach unit testing jml junit way 
boris magnusson editor ecoop object oriented programming th european conference spain proceedings volume lecture notes computer science pages berlin june 
springer verlag 

curtis clifton 
multijava design implementation evaluation language supporting modular open classes symmetric multiple dispatch 
technical report department computer science iowa state university ames iowa november 
author masters thesis 

curtis clifton gary leavens craig chambers todd millstein 
multijava modular open classes symmetric multiple dispatch java 
oopsla proceedings th acm sigplan conference object oriented programming systems languages applications volume acm sigplan notices pages new york ny october 
acm 

edward cohen 
programming calculation programs 
springer verlag new york ny 

david detlefs rustan leino greg nelson james saxe 
extended static checking 
src research report compaq systems research center lytton ave palo alto dec 

krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
proceedings th international conference software engineering berlin germany pages 
ieee computer society press march 
corrected version iowa state university dept computer science tr 

edsger dijkstra carel scholten 
predicate calculus program semantics 
springer verlag ny 

andrew duncan urs holzle 
adding contracts java handshake 
technical report department computer science university california santa barbara ca december 

stephen edwards wayne timothy long murali sitaraman bruce weide 
part ii specifying components resolve 
acm sigsoft software engineering notes oct 

michael ernst jake cockrell william griswold david notkin 
dynamically discovering program invariants support program evolution 
ieee transactions software engineering february 

robert bruce findler matthias felleisen 
contract soundness objectoriented languages 
oopsla conference proceedings object oriented programming systems languages applications october tampa bay florida usa pages october 

robert bruce findler mario matthias felleisen 
behavioral contracts behavioral subtyping 
proceedings joint th european software engineering conference esec th acm sigsoft international symposium foundations software engineering fse september vienna austria september 

kate finney 
mathematical notation formal specification difficult masses 
ieee transactions software engineering february 

john fitzgerald peter larsen 
modelling systems practical tools software development 
cambridge cambridge uk 

cormac flanagan rustan leino mark lillibridge greg nelson james saxe raymie stata 
extended static checking java 
proceedings acm sigplan conference programming language design implementation pldi volume sigplan pages new york june 
acm press 

lisa friendly 
design distributed hyperlinked programming documentation 
fra ss garzotto nanard nanard editors proceedings international workshop hypermedia design montpellier france june pages 
springer 

david gifford john lucassen 
integrating functional imperative programming 
acm conference lisp functional programming pages 
acm august 

david gries fred schneider 
logical approach discrete math 
texts monographs computer science 
springer verlag new york ny 

david gries fred schneider 
avoiding undefined underspecification 
jan van leeuwen editor computer science today trends developments number lecture notes computer science pages 
springer verlag new york ny 

john guttag james horning garland jones wing 
larch languages tools formal specification 
springer verlag new york ny 

hoare 
axiomatic basis computer programming 
communications acm october 

hoare 
notes data structuring 
ole 
dahl dijkstra hoare editors structured programming pages 
academic press new york ny 

hoare 
proof correctness data representations 
acta informatica 

marieke huisman 
reasoning java programs higher order logic pvs isabelle 
ipa dissertation series university nijmegen holland february 

marieke huisman bart jacobs 
java program verification hoare logic abrupt termination 
maibaum editor fundamental approaches software engineering fase volume lncs pages 
springer verlag 
earlier version technical report csi 

daniel jackson 
alloy lightweight object modeling notation 
acm transactions software engineering methodology april 

bart jacobs joseph 
java program verification challenges 
frank de boer susanne graf willem paul de roever editors formal methods component objects proceedings volume lecture notes computer science pages 
springer verlag berlin 

bart jacobs eric poll 
logic java modeling language jml 
fundamental approaches software engineering fase genova italy volume lecture notes computer science pages 
springer verlag 

bart jacobs joachim van den berg marieke huisman martijn van ulrich hendrik 
reasoning java classes preliminary report 
oopsla conference proceedings volume acm sigplan notices pages 
acm october 

cliff jones 
systematic software development vdm 
international series computer science 
prentice hall englewood cliffs second edition 


upgrading pre postcondition technique 
editors vdm formal software development methods th international symposium vdm europe noordwijkerhout netherlands volume conference contributions volume lecture notes computer science pages 
springer verlag new york ny october 

urs holzle john bruno 
reflective java library support design contract 
pierre cointe editor meta level architectures reflection second international conference reflection saint malo france july proceedings volume lecture notes computer science pages 
springer verlag july 

khurshid darko marinov daniel jackson 
analyzable annotation language 
proceedings oopsla conference object oriented programming languages systems applications volume sigplan notices pages new york ny november 
acm 

kramer 
icontract java design contract tool 
tools technology object oriented languages systems los alamitos california pages 

leslie lamport 
simple approach specifying concurrent systems 
communications acm january 

craig 
applying uml patterns object oriented analysis design unified process 
prentice hall ptr upper saddle river nj second edition edition 

gary leavens 
overview larch behavioral specifications modules 
haim kilov william harvey editors specification behavioral semantics object oriented information modeling chapter pages 
kluwer academic publishers boston 
extended version tr department computer science iowa state university ames iowa 

gary leavens 
larch manual 
version 
available ftp ftp cs iastate edu pub ps gz world wide web url www cs iastate edu leavens html april 

gary leavens 
larch frequently asked questions 
version 
available www cs iastate edu leavens larch faq html may 

gary leavens albert baker 
enhancing pre postcondition technique expressive specifications 
jeannette wing jim woodcock jim davies editors fm formal methods world congress formal methods development computing systems toulouse france september proceedings volume lecture notes computer science pages 
springer verlag 

gary leavens albert baker clyde ruby 
jml notation detailed design 
haim kilov bernhard rumpe ian simmonds editors behavioral specifications businesses systems pages 
kluwer academic publishers boston 

gary leavens albert baker clyde ruby 
preliminary design jml behavioral interface specification language java 
technical report iowa state university department computer science may 
obsolete version 

gary leavens cheon 
preliminary design larch 
martin wing editors proceedings international workshop larch july workshops computing pages 
springer verlag new york ny 

gary leavens krishna kishore 
concepts behavioral subtyping sketch extension component systems 
gary leavens murali sitaraman editors foundations component systems chapter pages 
cambridge university press 

gary leavens rustan leino erik poll clyde ruby bart jacobs 
jml notations tools supporting detailed design java 
oopsla companion minneapolis minnesota pages 
acm october 

gary leavens don 
complete algebraic characterization behavioral subtyping 
acta informatica 

gary leavens william weihl 
reasoning object oriented programs subtypes extended 
meyrowitz editor oopsla ecoop proceedings volume acm sigplan notices pages 
acm october 

gary leavens william weihl 
specification verification objectoriented programs supertype abstraction 
acta informatica november 

gary leavens jeannette wing 
protective interface specifications 
formal aspects computing 

gary todd leavens 
verifying object oriented programs subtypes 
technical report massachusetts institute technology laboratory computer science february 
author ph thesis 

rustan leino 
myth modular specification programs 
technical report digital equipment systems research center lytton avenue palo alto ca november 
obtain author leino microsoft com 

rustan leino greg nelson james saxe 
esc java user manual 
technical note compaq systems research center october 

rustan leino james saxe raymie stata 
checking java programs guarded commands 
technical note compaq systems research center palo alto ca may 

karl lieberherr doug orleans johan 
aspect oriented programming adaptive methods 
communications acm october 

barbara liskov john guttag 
abstraction specification program development 
mit press cambridge mass 

barbara liskov jeannette wing 
behavioral notion subtyping 
acm transactions programming languages systems november 

bertrand meyer 
eiffel language 
object oriented series 
prentice hall new york ny 

bertrand meyer 
object oriented software construction 
prentice hall new york ny second edition 

jeremy nimmer michael ernst 
static verification dynamically detected program invariants integrating daikon esc java 
proceedings rv workshop runtime verification 
elsevier july 

william ogden murali sitaraman bruce weide stuart zweben 
part resolve framework discipline research synopsis 
acm sigsoft software engineering notes october 

international standards organization 
information technology programming languages environments system software interfaces vienna development method specification language part base language 
iso iec december 


design contract tm automate java tm software component testing 
available www com jsp products tech papers jsp product feb 

arun raghavan gary leavens 
desugaring jml method specifications 
technical report iowa state university department computer science august 
obsolete version 

rosenblum 
method programming assertions 
proceedings th international conference software engineering pages may 

clyde ruby gary leavens 
safely creating correct subclasses seeing superclass code 
oopsla conference object oriented programming systems languages applications minneapolis minnesota volume acm sigplan notices pages october 

spivey 
formal specifications 
software engineering journal january 

michael spivey 
notation manual 
international series computer science 
prentice hall new york ny 
isbn 

jean pierre talpin pierre jouvelot 
type effect discipline 
information computation june 

jos warmer kleppe 
object constraint language precise modeling uml 
addison wesley longman reading mass 

jos warmer kleppe 
ocl constraint language uml 
journal object oriented programming march 

alan wills 
capsules types program validation smalltalk 
america editor ecoop european conference object oriented programming volume lecture notes computer science pages 
springer verlag new york ny 

jeannette wing 
writing larch interface language specifications 
acm transactions programming languages systems january 

jeannette marie wing 
tiered approach specifying programs 
technical report tr massachusetts institute technology laboratory computer science 

jim woodcock jim davies 
specification refinement proof 
prentice hall international series computer science 
