tinyos operating system sensor networks levis madden polastre szewczyk woo gay hill welsh brewer culler 
tinyos flexible application specific operating system sensor networks form core component ambient intelligence systems 
sensor networks consist potentially thousands tiny low power nodes execute concurrent reactive programs operate severe memory power constraints 
sensor network challenges limited resources event centric concurrent applications low power operation drive design tinyos 
solution combines flexible fine grain components execution model supports complex safe concurrent operations 
tinyos meets challenges platform choice sensor network research groups worldwide supports broad range applications research topics 
provide qualitative quantitative evaluation system showing supports complex concurrent programs low memory requirements applications fit kb memory core os bytes efficient low power operation 
experiences tinyos platform sensor network innovation applications 
advances networking integration enabled small flexible lowcost nodes interact environment sensors actuators communication 
single chip systems emerging integrate low power cpu memory radio optical communication mems chip sensors 
low cost systems enables embedded networks thousands nodes applications ranging environmental habitat monitoring seismic analysis structures object localization tracking :10.1.1.136.2762
sensor networks active research space ongoing networking application support radio management security partial list :10.1.1.20.6380:10.1.1.16.1535:10.1.1.13.1596:10.1.1.112.2772
primary goal tinyos enable accelerate innovation 
broad requirements motivate design tinyos 
limited resources motes limited physical resources due goals small size low cost low power consumption 
current motes consist mips processor tens kilobytes storage 
levis expect new technology remove limitations benefits moore law applied reduce size cost increase capability 
current motes measured square centimeters version fabrication measures mm 
reactive concurrency typical sensor network application node responsible sampling aspects environment sensors manipulating actuators performing local data processing transmitting data routing data participating various distributed processing tasks statistical aggregation feature recognition 
events radio management require real time responses 
requires approach concurrency management reduces potential bugs respecting resource timing constraints 

flexibility variation hardware applications rate innovation require flexible os application specific reduce space power independent boundary hardware software 
addition os support fine grain modularity simplify reuse innovation 

low power demands size cost untethered operation low power operation key goal 
battery density doubles roughly years power ongoing challenge 
energy harvesting offers promising solutions small scale harvest power 
insufficient continuous operation energy efficient designs 
broad range applications sensor networks address extremely low power operation provide great deal flexibility power management duty cycle strategies 
approach requirements focus broad principles event centric applications solution event centric 
normal operation reactive execution concurrent events 
platform innovation space networked sensors novel complex focus flexibility enabling innovation right os 
tinyos tiny fewer bytes flexible operating system built set reusable components assembled applicationspecific system 
tinyos supports event driven concurrency model split phase interfaces asynchronous events deferred computation called tasks 
tinyos implemented nesc language supports tinyos component concurrency model extensive cross component optimizations compile time race detection 
tinyos enabled innovations sensor network systems wide variety applications 
tinyos development years currently third generation involving iterations hardware radio tinyos operating system sensor networks stacks programming tools 
groups worldwide including companies products 
chapter details design motivation tinyos including novel approaches components concurrency qualitative quantitative evaluation operating system presentation experience platform innovation real applications 
contributions 
design programming model tinyos including support concurrency flexible composition 
second evaluate tinyos terms performance small size lightweight concurrency flexibility support low power operation 
third discuss experience tinyos illustrating design applications environmental monitoring object tracking declarative query processor 
previous tinyos discussed early system architecture language design issues operating system design detail provide depth evaluation discuss extensive experience system years 
section presents overview tinyos including component execution models support concurrency 
section shows design meets requirements 
sections cover enabled innovations applications sect 
covers related 
section presents 
tinyos tinyos component programming model codified nesc language dialect tinyos os traditional sense programming framework embedded systems set components enable building application specific os application 
typical application size base os bytes largest application database query system bytes 
overview tinyos program graph components independent computational entity exposes interfaces 
components computational abstractions commands events 
commands events mechanisms inter component communication tasks express intra component concurrency 
command typically request component perform service initiating sensor reading event signals completion service 
events may signaled asynchronously example due hardware interrupts message arrival 
traditional os perspective commands analogous events upcalls 
commands levis events block request service split phase request service command completion signal corresponding event decoupled 
command returns immediately event signals completion time 
performing computation immediately commands event handlers may post task function executed tinyos scheduler time 
allows commands events responsive returning immediately deferring extensive computation tasks 
tasks may perform significant computation basic execution model completion run indefinitely allows tasks lighter weight threads 
tasks represent internal concurrency component may access state component 
standard tinyos task scheduler uses non preemptive fifo scheduling policy sect 
presents tinyos execution model detail 
tinyos abstracts hardware resources components 
example calling getdata command sensor component cause signal event hardware interrupt fires 
components entirely software combination split phase operations tasks distinction transparent programmer 
example consider component encrypts buffer data 
hardware implementation command instruct encryption hardware perform operation software implementation post task encrypt data cpu 
cases event signals encryption operation complete 
current version tinyos provides large number components application developers including abstractions sensors single hop networking ad hoc routing power management timers non volatile storage 
developer composes application writing components wiring tinyos components provide implementations required services 
section describes developers write components wire nesc 
lists number core interfaces available application developers 
different components may implement interface 
component model tinyos programming model provided nesc language centers notion components encapsulate specific set services specified interfaces 
tinyos simply consists set reusable system components task scheduler 
application connects components wiring specification independent component implementations 
wiring specification defines complete set components application uses 
compiler eliminates penalty small fine grained components program application plus operating system analysis lining 
tinyos operating system sensor networks interface description clock hardware clock write eeprom read write hardware id access interface bus leds red yellow green leds mac radio mac layer mic microphone interface pot hardware potentiometer transmit power random random number generator receive active message sendmsg send active message stdcontrol init start components time get current time tinysec lightweight encryption decryption watchdog watchdog timer control fig 

core interfaces provided tinyos unused components functionality included application binary 
lining occurs component boundaries improves size efficiency sect 
evaluates optimizations 
component classes interfaces provides uses 
interfaces define component directly interacts components 
interface generally models service sending message specified interface type 
shows simplified form component part service provides stdcontrol timer interfaces uses clock interface shown fig 

component provide interface type times long gives instance separate name 
fig 

specification graphical depiction component 
provided interfaces shown component interfaces 
downward arrows depict commands upward arrows depict events levis fig 

sample tinyos interface types interfaces bidirectional contain commands events 
command function implemented providers interface event function implemented users 
instance timer interface fig 
defines start commands fired event 
interaction timer client provided separate interfaces commands events grouping interface specification clearer helps prevent bugs wiring components 
nesc types components modules configurations 
modules provide code written dialect extensions calling implementing commands events 
module declares private state variables data buffers 
configurations wire components connecting interfaces components interfaces provided 
illustrates tinyos timer service configuration wires timer module hardware clock component 
configurations allow multiple components aggregated single exposes single set interfaces 
example tinyos networking stack configuration wiring separate modules sub configurations 
component interface namespace uses refer commands events uses 
wiring interfaces configuration connection local name interface component local name interface provided 
component invokes interface referring explicitly tinyos operating system sensor networks fig 

tinyos timer service configuration implementation 
easy perform inter positioning introducing new component component graph uses provides interface 
interfaces wired multiple times example fig 
std control interface main wired photo 
fan transparent caller 
nesc allows fan long return type function combining results calls 
example result logical fan returns failure sub call fails 
component provide parameterized interface exports instances interface parameterized identifier typically fig 

top level configuration surge application levis small integer 
example interface fig 
parameterized bit id passed commands events interface extra parameter 
case parameterized interface allows single timer component implement multiple separate timer interfaces client component 
client parameterized interface specify id constant wiring configuration avoid conflicts id selection nesc provides special unique keyword selects unique identifier client 
tinyos application described top level configuration wires components 
example shown graphically fig 
simple application periodically acquires light sensor readings photo sends back base station multi hop routing multihop 
nesc imposes limitations improve code efficiency robustness 
language prohibits function pointers allowing compiler know precise call graph program 
enables optimizations entire call paths remove overhead cross module calls inline code small components callers 
section evaluates optimizations boundary crossing overheads 
second language support dynamic memory allocation components statically declare program state prevents memory fragmentation runtime allocation failures 
restriction sounds onerous practice component abstraction eliminates needs dynamic allocation 
rare instances truly needed tinydb discussed sect 
memory pool component shared set cooperating components 
execution model concurrency event centric domain sensor networks requires fine grain concurrency events arrive time interact cleanly ongoing computation 
classic systems problem broad approaches atomically queuing arrival run click message passing systems executing handler immediately style active messages 
events time critical start symbol detection chose approach 
nesc detect data races statically eliminates large class complex bugs 
core execution model consists run completion tasks represent ongoing computation interrupt handlers signaled asynchronously hardware 
tasks explicit entity language program submits task scheduler execution operator 
scheduler execute tasks order obey run rule 
standard tinyos scheduler follows fifo policy implemented policies including earliest deadline 
tinyos operating system sensor networks tasks preempted run completion atomic respect 
tasks atomic respect interrupt handlers commands events invoke 
facilitate detection race conditions distinguish synchronous asynchronous code synchronous code sc code reachable tasks 
asynchronous code ac code reachable interrupt handler 
traditional os approach ac minimize prevent userlevel code ac 
restrictive tinyos 
component writers need interact wide range real time hardware possible general approach queuing 
example networking stack components interface radio bit level byte level hardware signal strength indicators 
primary goal allow developers build responsive concurrent data structures safely share data ac sc components mix sc ac code 
non preemption eliminates races tasks potential races sc ac ac ac 
general update shared state reachable ac potential data race 
reinstate atomicity cases programmer options convert conflicting code tasks sc atomic sections update shared state 
atomic section small code sequence nesc ensures run atomically 
current implementation turns interrupts atomic section ensures loops 
section covers example atomic section remove data race 
basic invariant nesc enforce follows race free invariant update shared state sc occurs atomic section 
nesc compiler enforces invariant compile time preventing nearly data races 
possible introduce race condition compiler detect span multiple atomic sections tasks storage intermediate variables 
practical impact data race prevention substantial 
eliminates class painful non deterministic bugs 
second means composition essentially ignore concurrency 
matter components generate concurrency wired compiler catch sharing violations compile time 
strong compile time analysis enables wide variety concurrent data structures synchronization primitives 
variations concurrent queues state machines 
turn easy handle time critical actions directly event handler update shared state 
example radio events dealt interrupt handler packet arrived point handler posts task 
section contains evaluation concurrency checking ability catch data races 
levis active messages critical aspect tinyos design networking architecture detail 
core tinyos communication abstraction active messages am small byte packets associated byte handler id reception active message node dispatches message event handlers registered receive messages type 
handler registration accomplished static wiring parameterized interface described 
am provides unreliable single hop datagram protocol provides unified communication interface radio built serial port wired nodes 
higher level protocols providing multihop communication larger adus features readily built top am interface 
variants basic am stack exist incorporate lightweight link level security see sect 

am event driven nature tight coupling computation communication abstraction suited sensor network domain 
implementation status tinyos supports wide range hardware platforms generations sensor motes 
supported processors include atmel series atmel atmega series texas instruments msp series processors 
tinyos includes hardware support rfm tr cc radios custom radio 
tinyos applications may compiled run platforms modification 
underway port tinyos arm intel hitachi processors support bluetooth radios 
tinyos supports extensive development environment incorporates visualization debugging support tools fine grained simulation environment 
desktops laptops serve proxies sensor networks wired networks allowing integration server side tools implemented java matlab interfaces database engines postgresql 
nesc includes tool generates code marshal active message packet formats java classes 
tinyos includes high fidelity mote simulator compiles directly tinyos nesc code scaling thousands simulated nodes 
gives programmer omniscient view network greater debugging capabilities 
server side applications connect proxy just real sensor network easing transition simulation environment actual deployments 
tinyos provides support integrated gdb debugging applications directly mote 
tinyos operating system sensor networks meeting key requirements section show design tinyos particularly component model execution model addresses key requirements limited resources reactive concurrency flexibility low power 
section quantifies basic aspects resource usage performance including storage usage execution overhead observed concurrency effectiveness system optimization 
limited resources look metrics evaluate tinyos applications lightweight space time footprint real applications small compiler reduce code size optimization overhead fine grain modules low 
absolute size tinyos program component graph defines components needs 
components resolved compile time compiling application builds application specific version tinyos resulting image contains exactly required os services 
shown fig 
tinyos applications small 
base tinyos operating system bytes associated runtime primitives including floating point libraries fit just kb 
blink represents footprint minimal application base os primitive hardware timer 
incorporates sophisticated timer service requires additional memory 
captures footprint radio stack incorporates radio stack generic timer case real applications 
applications fit kb largest tinydb fits kb 
footprint optimization tinyos goes standard techniques reduce code size stripping symbol table 
uses program compilation prune dead code cross component optimizations remove redundant operations module crossing overhead 
shows reduction size achieved optimizations range applications 
size improvements range mat habitat monitoring simple applications 
component overhead efficient tinyos minimize overhead module crossings 
virtual functions crossings basic boundary crossing regular procedure call 
atmel platforms costs clock cycles 
program analysis nesc removes boundary crossings optimizes entire call paths applying extensive cross compo nent optimizations including constant propagation common sub expression elimination 
example nesc typically inline entire component caller 
levis fig 

size structure selected tinyos applications tinyos timer component triggering timer event crosses component boundaries 
shows cycle counts event chain cross component optimizations 
optimization saves boundary overhead total savings 
increase crossing overhead interrupt occurs lining requires handler save registers total time spent handler goes 
remaining boundary crossing posting task handler 
fig 

optimization effects clock event handling 
shows breakdown cpu cycles boundary crossing clock event handling requires module crossings 
optimization reduces cycle count tinyos operating system sensor networks anecdotally code produced program optimization smaller faster unoptimized code original hand written code predates nesc language 
reactive concurrency evaluate tinyos support concurrency looking metrics concurrency exhibited applications support race detection compile time context switching times handling concurrent events real time constraints 
exhibited concurrency tinyos component model simple express complex concurrent actions sensor network applications 
sample applications fig 
average tasks events represents potentially concurrent activity 
applications exhibit average code measured bytes reachable interrupt context 
example high concurrency application consider tinydb covered sect 
network query processing engine allows users pose queries collect combine filter data network sensors 
tinydb supports multiple concurrent queries collects data sensors applies number transformations sends multi hop routing tree basestation user receives results 
tasks events tinydb perform concurrent operations maintenance routing tables multi hop routing time synchronization sensor recalibration addition core functionality sampling processing sensor data 
race detection nesc compiler reports errors shared variables may involved data race 
evaluate race detection examine reported errors accuracy 
initially tinyos included explicit atomic statement analysis detect potential race conditions tinyos applications data races 
race detection implemented applied detection application tinyos source tree finding variables potentially race condition 
false positives discussed genuine data races frequency code statements 
fixed bugs moving code tasks atomic statements 
tested application verified presence atomic sections interfere correct operation 
shows locations data races tinyos tree 
half races existed system level components applications half application specific 
disproportionate number races due amount internal state maintain complex concurrent operations 
tracks node levis fig 

component locations race condition variables interactions records flash periodically sends basestation complex concurrency lots state written concurrency issues understood 
nesc version race free 
finite state machine style decomposition tinyos led common form bug non atomic state transition 
state transitions typically implemented read modify write state variable atomic 
canonical example race shown fig 
fix 
fig 

fixing race condition state transition original versions communication eeprom components contained large numbers variable accesses asynchronous code 
large atomic sections decrease responsiveness promoted offending functions synchronous code posting additional tasks 
tinyos operating system sensor networks false positives fell major categories state guards buffer swaps causal relationships 
class state guards occurred access module variable serialized run time state variable 
state transition example illustrates function variable count safe due monitor created state 
buffer swaps controlled kind sharing ownership passed producer consumer merely convention races fact useful nesc requires programmer check 
third class false positives occurs event conflicts code caused execute overlap time race 
causes event race worth explicitly checking 
cases type qualifier remove warnings 
context switches tinyos context switch overhead corresponds cost task scheduling interrupt handler overhead 
costs shown fig 
hand counts empirical measurements 
interrupt overhead consists switching overhead function overhead handler varies number saved registers 
fig 

tinyos scheduling overhead real time constraints real time requirements sensor network domain quite different traditionally addressed multimedia control applications 
sophisticated scheduling shed load tasks ongoing sensor nodes exhibit bursts activity go idle lengthy intervals 
delivering constant bit rate flows meet hard deadlines servicing radio channel processing sensor data routing traffic 
initial platforms required modulate radio channel bit bit software 
required tight timing transmitter generate clean waveform receiver sample bit properly 
platforms provide greater hardware support bits start symbol detection requires precise timing encoding decoding error checking keep pace data rate 
approach allowing sophisticated handlers proven sufficient meeting requirements typically handler performs time critical posts task remaining 
simple scheduler allowing handler execute snippets processing chain components allows applications schedule set deadlines directly trying coerce priority scheme produce correct ordering 
critical need manage contention levis sequence events associated communication handler sampling interval application tasks 
applying analysis verify jitter bounds met area 
flexibility evaluate goal flexibility primarily refer anecdotal evidence 
addition quantitative goal fine grain components look qualitative goals supporting concurrent components hardware software transparency interposition 
fine grained components tinyos allows applications constructed large number fine grained components 
approach facilitated cross module lining avoids runtime overhead component composition 
tinyos code base consists components modules configurations 
applications tree average components modules configurations 
modules typically small ranging lines code average median 
shows component breakdown data code space components tinyos radio stack lining applied 
shows relatively small size components large number components involved radio communication 
components selectively replaced new components interposed stack implement new functionality 
concurrent components discussed previous section component source concurrency 
bidirectional interfaces explicit support events enable component generate events autonomously 
addition static race detection provided nesc removes need worry concurrency bugs composition 
current set modules contain interrupt handler sources concurrency 
hardware software transparency tinyos component model shifting hardware software boundary easy components generate events may software upcalls hardware interrupts 
feature ways tinyos code base 
hardware interfaces analog digital conversion implemented software wrappers complexity initializing collecting data sensor hardware component 
cases software components radio start symbol detection specialized hardware modules 
example radios support different hardware software boundary component structure 
interposition aspect flexibility ability interpose components components 
component provides uses interface type inserted removed transparently 
tinyos operating system sensor networks fig 

breakdown code data size component tinyos radio stack 
inlined column indicates corresponding component entirely lined 
dead code elimination applied cases example seen uva interposes component network stack fairly low level 
unknown applications component buffers payload message aggregates messages destination single packet 
receive side component decomposes packets passes recipients individually 
remaining completely transparent application scheme decrease network latency increasing bandwidth 
similar type seen object tracking application described sect 

routing stack allows components enable example reliable transmission duplicate message filtering 
similarly sensor stacks allow components implement weighted time averaging threshold detection 
low power application specific nature tinyos ensures unnecessary functions consume energy precious resource node 
levis aspect ensure low power operation 
examine aspects tinyos low power operation support cpu power management power management interfaces efficiency gains arising hardware software transparency 
cpu power usage split phase operations eventdriven execution model reduces power usage avoiding heavyweight concurrency threads 
minimize cpu usage tinyos scheduler puts processor low power sleep mode task queue empty 
decision quickly run semantics tasks maximizes time spent sleep mode 
example listening incoming packets cpu handles interrupts second 
current sensor hardware cpu consumes ma active ma idle radio uses ma receiving 
system measurements show power consumption listening receiving ma 
scheduler needs examine task queue event manages operate idle mode time 
power management interfaces scheduler achieve power levels required long term applications application needs convey runtime requirements system 
tinyos addresses requirement programming convention allows subsystems put low power idle state 
components expose stdcontrol interface includes commands initializing starting stopping component subcomponents depends 
calling command causes component attempt minimize power consumption example powering hardware disabling periodic tasks 
component saves state ram nonvolatile memory resumption start command 
informs cpu change resources uses system uses information decide deep power saving modes 
strategy works components stopped base system sensor board consumes comparable self discharge rate aa alkaline batteries 
node lifetime depends primarily duty cycle application requirements pair aa batteries power constantly active node days permanently idle node years battery shelf life 
exposing start interface levels enable range power management schemes implemented example power scheduling disable radio stack communication expected powering sensors 
hardware software transparency ability replace software components efficient hardware implementations exploited yield significant improvements energy consumption platform 
demonstrated single chip mote integrates microcontroller memory radio transceiver radio acceleration logic mm tinyos operating system sensor networks silicon die 
standard software radio stack consumes ma involving cpu instructions second hardware implementation software components consumes allows efficient microcontroller sleep modes providing fold improvement communication bit rate 
enabled innovations primary goal tinyos enable innovative solutions systems challenges networks resource constrained devices interact changing physical world 
evaluation goal inherently qualitative 
describe subsystems novel approaches adopted directly related features tinyos 
particular tinyos kinds innovations simpler appear examples cross layer optimization integrated layer processing ilp duty cycle management low power wide range implementation fine grain modularity 
radio stack mote network device simple low power radio transceiver little data buffering exposes primitive control raw bit interfaces 
requires handling aspects radio software controlling radio state coding modulating channel framing input sampling media access control checksum processing 
various kinds hardware acceleration may provided elements depending specific platform 
addition received signal strength obtained sampling baseband energy level particular times 
ability access various aspects radio creates opportunities unusual cross layer optimization 
integrated layer processing tinyos enables ilp combination fine grain modularity program optimization applicationspecific handlers 
example support link layer acknowledgments acks generated checksum computed 
tinyos allows radio stack augmented addition error checking simply interposing checksum component component providing byte byte radio packet processing component 
important able provide link level acknowledgments higher levels estimate loss rates implement retransmission acks efficient 
event protocol stack developed avoid buffering level allows checksum computation interleave byte level 
ack generated immediately receiving byte underlying radio component send ack synchronously reversing channel direction levis re arbitration 
note holding channel real time operation enabled sophisticated handlers traverse multiple layers components data races 
collection optimizations greatly reduces latency power turn allows shorter timeouts sender 
clean modularity preserved code time critical paths span multiple components 
ilp flexible modularity similar manner provide flexible security confidentiality authentication 
link level security important degrade power latency 
ability overlap computation ilp helps latency interposition easy add security transparently needed 
showed mechanisms avoiding copying gather scatter stack substantially modify packet headers trailers changing components stack 
tinyos radio stack ye example demonstrates ilp combining style media access transmission scheduling 
allows low duty cycle similar tdma flexible channel sharing 
power management listening radio costly receiving minimizing duty cycle important 
traditional solutions utilize form tdma turn radio long periods reception 
tinyos allows novel alternative supporting fast fine grain power management 
integrating fast power management precise timing able periodically sample radio short intervals physical layer looking preamble 
yields illusion radio duty cycle listening avoiding priori partitioning channel bandwidth 
coarse grain duty cycling implemented higher levels needed 
tinyos enabled efficient solution epidemic wakeup problem 
functionality placed different levels radio stack tinyos detect wakeup sampling energy channel bring ability receive packets 
low level wake requires duty cycle fold improvement typical packet level protocol 
similar approach derive network neighborhood proximity information 
hardware software transparency existence variety radio architectures poses challenge system designers due wide variation hardware software boundaries 
radio platforms supported tinyos distribution kbps rfm kbps hardware accelerated rfm kbps 
addition uart stacks supported 
hardware accelerated rfm platform exemplifies direct replacement bit level processing hardware achieves higher communication bandwidth 
extreme cases entire radio stack built pure hardware spec mote chip pure software tinyos operating system sensor networks 
transparently hardware acceleration encryption 
stack elements component remain unchanged component thin abstraction hardware element software implementation 
time synchronization ranging time location critical sensor networks due embodied nature sensor nodes node real physical relationship outside world 
challenge network time synchronization eliminate sources jitter media access delay introduced radio stack 
traditional layering hides details physical layer 
timing protocols perform round trip time estimation account errors 
tinyos allows component interposed deep radio stack signal event precisely bit data transmitted eliminates media access delay calculations 
similarly receivers take timestamp hear data bit comparing fine grain timestamps reduce time synchronization error bit time 
broadcast synchronization rbs achieves synchronization accurate interposition comparing time stamps receivers cost packet transmissions sophisticated analysis :10.1.1.109.7382
ability interact network stack low level enabled precise time flight tof measurements ranging ad hoc localization system built tinyos 
transmitter sends acoustic pulse radio message 
tinyos low context switching overhead enables receivers check acoustic pulse radio message concurrently 
difference timestamps signals produces acoustic tof measurement 
tinyos accurately measure arrival times directly event handlers handlers execute immediately solution queuing precise timing true time synchronization example 
newest version ranging application uses processor control acoustic transducer perform costly localization calculation 
controlling acoustic transducer requires real time interactions processors enabled tinyos low overhead event handling 
exploit parallelism processors computation communication overlapped split phased nature tinyos am model trivial 
routing rigid non application specific communication stack industrial standards ieee bluetooth limit design levis space routing protocols 
tinyos component model ease interposition yield flexible communication stack 
opens platform implementing different routing protocols broadcast routing probabilistic routing multi path routing geographical routing reliability routing tdma routing directed diffusion :10.1.1.19.6069:10.1.1.60.686:10.1.1.117.1253
large number routing protocols suggests sensor network applications may need diverse set communication stack 
tinyos parameterized interfaces extensible component model enable coherent routing framework application route network address geographic location flooding application specific gradients 
dynamic composition virtual machines experience sensor network applications utilize common set services combined different ways 
system allows compositions concisely described provide flexibility full reprogramming tremendous decrease communication costs 
mat tiny byte code interpreter runs tinyos meets need 
single nesc module sits top system components including sensors network stack non volatile storage 
mat presents virtual stack architecture programmer 
instructions include sensing radio communication arithmetic stack manipulation 
mat set user definable instructions 
allow developers vm framework writing new vm variants extending set tinyos services dynamically composed 
virtual architecture hides split phased operations tinyos synchronous instructions simplifying programming interface 
requires vm maintain virtual execution context continuation split phase operations 
stack architecture virtual context switches trivial contexts bytes statically allocated component consume system resources 
contexts run response system events timers packet reception 
programs propagate network user introduces single mote running new program network rapidly autonomously 
mat programs extremely concise orders magnitude shorter binary equivalents conserving communication energy 
tinyos event driven execution provides clear set program triggering events nesc interfaces allow users easily change subsystems ad hoc routing 
mat extends tinyos providing inexpensive mechanism dynamically compose programs 
nesc static nature allows produce highly optimized efficient codes mat demonstrates run time flexibility re introduced quite easily low overhead 
aside traditional user kernel boundary tinyos allowed tinyos operating system sensor networks possibilities emerge 
mat suggests run time compile time boundary sensor networks better served lean byte code interpreter sits top tinyos substrate 
applications section describe applications built tinyos platform environmental monitoring system declarative query processor magnetometer object tracking 
applications represents distinct set design goals exhibits different aspects tinyos design 
habitat monitoring sensor networks enable data collection scale resolution previously unattainable opening new areas study scientists 
applications pose challenges including low power operation robustness due remote placement extended operation 
application habitat monitoring system great coast maine 
researchers deployed node network island monitor presence leach storm underground burrows :10.1.1.136.2762
network designed run unattended field season months 
nodes placed burrows monitored light temperature relative humidity pressure passive infrared network relayed readings back base station internet connection satellite uploaded database 
illustrates tiered system architecture application 
fig 

system architecture habitat monitoring levis simple tinyos program ran motes 
periodically sampled sensors relayed data base station 
achieve long network lifetimes nodes power management facilities tinyos aggressively consuming low power state compared ma active 
nodes sampled sensors concurrently split phase data acquisition operation serially resulting power reduction 
months deployment network collected sensor readings 
specialized gateway node built mote connected high gain antenna relayed data network wired base station 
gateway application small bytes extraordinarily robust ran continuously failing entire months deployment 
gateway required just watt hours energy day solar panel 
comparison early prototype version gateway embedded linux system required watt hours energy day solar panel 
linux system failed days gateway mote operating months researchers lost access island winter 
object tracking tinyos object tracking application ota uses sensor network detect localize track object moving sensor field prototype object remote controlled car 
object movement field determines actions communication motes 
mote periodically samples magnetometer reading changed significantly sample broadcasts reading neighbors 
node largest reading change estimates position target computing centroid neighbors readings 
geographic routing network routes estimated position base station controls camera point target :10.1.1.112.2772
operation tracking application shown fig 

ota consists distributed services routing data sharing time synchronization localization power management sensor filtering 
twelve different research groups collaborating architecture individual subsystem implementation 
tinyos execution model enables running services concurrently limited hardware resources 
component model allows easy replacement comparative analysis individual services 
currently implementation consists components 
general purpose services time synchronization localization competing implementations enabled different features tinyos 
replacement low level components sensing allowed ota adapted track light values magnetic fields 
research groups successfully implemented application specific services framework 
hui developed approach tinyos operating system sensor networks fig 

event triggered activity object tracking application 
vehicle tracked drives position dashed line nodes broadcast readings light nodes node declares leader aggregates readings routes base station dark arrows addresses power management object tracking network 
algorithm chooses connected subset motes allows degraded sensing non units placed low power state 
service extensive tinyos power management interfaces shown reduce energy consumption minimal degradation tracking accuracy 
tinydb sensor network users prefer interact network highlevel declarative interface low level programming individual nodes 
tinydb declarative query processor built tinyos supports view largest complex application date 
poses significant challenges concurrency control limited resources 
tinydb queries expressed sql syntax propagate network perform local data collection network aggregation 
queries specify data user interested data collection rate user specify details query propagation data collection message routing 
example query select avg light sensors temp sample period levis tells network provide average light value nodes temperature greater seconds 
tinydb uses aggregation greatly reduce network bandwidth requirements requires nodes coordinate produce results 
tinydb relies heavily tinyos component oriented design concurrency primitives ability perform cross layer optimizations 
tinydb consists components perform query flooding local data collection formation routing trees aggregation query data catalog available sensor devices attributes location node 
uses routing data collection power management interfaces tinyos inter operates variety implementations services 
tinyos task model meshes concurrency requirements tinydb supports multiple simultaneous queries scheduling timer query fires set results query due 
timer event posts task collect deliver results corresponding query 
non preemptive nature tasks support safe concurrent handlers avoid data races despite extensive information sharing 
example benefit cross layer optimization tinydb message snooping important determining state neighboring nodes network 
snooping enable query propagation new nodes joining network learn ongoing queries snooping results broadcast neighbors 
technique enables message suppression node avoid sending local reading superseded message node case query requesting maximum sensor value network 
related sensor networks basis ad hoc networking data aggregation distributed algorithms primitives localization time synchronization 
addition mote platform number low power sensor systems proposed developed systems addressed flexible operating systems design 
projects traditional embedded systems pdas customized hardware :10.1.1.109.7382
wide range operating systems developed embedded systems 
range relatively large general purpose systems compact real time executives 
discuss range embedded real time systems detail 
systems generally suitable extremely resource constrained sensor nodes mandate compact specialized os designs 
focus attention number emerging tinyos operating system sensor networks systems closely match resource budget execution model sensor networks 
traditional embedded operating systems typically large requiring hundreds kb memory general purpose systems consisting binary kernel rich set programming interfaces 
examples include qnx palmos os 
os target systems greater cpu memory resources sensor network nodes generally support features full multitasking memory protection tcp ip networking posix standard apis undesirable terms overhead generality sensor network nodes 
family smaller real time executives ariel closer size tinyos 
systems support restrictive programming model tailored specialized application domains consumer devices automotive control 
small kernels developed share features common tinyos 
systems support degree modularity flexibility tinyos design wide range applications 
emeralds real time microkernel requiring kb code supports multitasking hybrid edf rate monotonic scheduler 
concerned reducing overheads semaphores ipc 
small kernel avr processor written assembly provides multitasking semaphores message queues kb memory 
nut os small kernels provide non preemptive multitasking similar vein tinyos task model somewhat expensive mechanisms inter process communication tinyos lean cross module calls 
os consists mainly library routines interface hardware bluetooth communication stack supports event driven programming model akin tinyos 
modules post single byte event dispatcher fires single handler registered event type 
number operating systems explored component architectures 
click scout kernel classic examples modular systems address specific needs low power embedded systems 
units component model supported knit language oskit similar nesc 
knit components provide interfaces new components assembled existing ones 
nesc knit lacks bidirectional interfaces static analyses data race detection 
embedded systems taken component oriented approach application specific configurability 
systems heavyweight composition mechanisms com corba support runtime component instantiation 
pure levis closely match tinyos goal lightweight static composition 
systems consist set components wired manually composition tool form application 
components vary size fine grained specialized objects larger classes packages pure 
vest proposed toolkit building component embedded systems performs extensive static analyses system schedulability resource dependencies interface type checking 
discussion sensor networks novel set systems challenges due need react physical environment nodes asynchronously communicate resource constraints operate tight energy budget 
hardware architectures new area changing rapidly 
began designing operating system sensor nets believed layers boundaries years mainframes laptops ideal 
focused building framework experimenting variety system designs proper boundaries emerge time 
key elements rich component approach bidirectional interfaces encapsulated tasks pervasive event concurrency system analysis optimization 
surprising just varied innovations 
reflecting experience date tinyos component approach worked 
components see great deal re generally defined narrow powerful interfaces 
nesc optimizations allow developers fine grained components little penalty 
facilitated experimentation core subsystems networking stack 
developers experience initial frustration overhead building components closed namespace just calling library routines compensated ease allows introduce simple extensions minimal overhead 
resource constrained event driven concurrency model remarkably expressive remains unchanged version os 
chose task event distinction simplicity modest storage demands fully expecting sophisticated needed 
able express degree concurrency required wide range applications 
mechanics approach evolved considerably 
earlier versions tinyos distinction asynchronous synchronous code provided inadequate support eliminating race conditions exceedingly difficult find experimentally 
point tried introducing hard boundary ac user processing tasks 
tinyos operating system sensor networks impossible meet real time requirements network stack ability perform carefully designed bit processing handler missed 
framework innovation concept led better support building atomic sections low level concurrent data structures cleanly integrate information asynchronous external world local processing 
particularly true low level real time operations achieved sophisticated handlers 
tinyos differs strongly event driven embedded systems concurrency structured modular components monolithic dispatch constructed global understanding application 
eased conceptual burden managing concurrency led important software protocols components split phase data acquisition data pumps components network stack power management idiom allows hardware elements quickly easily 
number cases attention protocols provided benefits integrated layer processing preserving clean modularity 
tinyos means finished system continues evolve grow 
language tools system optimization promising taken 
currently components follow implicit software protocols making protocols explicit entities allow compiler verify components properly 
examples protocols include buffer swapping semantics networking stack state sequencing control protocols 
parallels exist needs vault mc 
richer means expressing composition desirable 
instance developing routing architecture layers stack required significant self consistency redundancy specifications 
simple example definition header fields multiple layers encapsulation provided network stack 
explored template wiring defines skeleton structure behaviors composition naming conventions stackable components inserted 
template wiring produces set modules configurations meet specification merges component composition creation single step 
expect incorporate higher level models composition nesc tinyos clear defined 
continue actively develop deploy sensor network applications design decisions users experiences systems field 
sensor networks new domain filled unknowns uncertainties 
tinyos provides efficient flexible platform developing sensor network algorithms systems full applications 
enabled innovation experimentation wide range scale 
levis 
ansi ieee std edition 

tinysec link layer security tiny devices 
www cs berkeley 
edu tinysec 

asada dong lin pottie kaiser 
wireless integrated network sensors low power systems chip 


atwood pister 
preliminary circuits smart dust 
proceedings southwest symposium mixed signal design san diego california february 


real time kernel 
www net 

schr der 
pure family object oriented operating systems deeply embedded systems 
proceedings nd ieee international symposium object oriented real time distributed computing 

bluetooth sig www bluetooth org 

bulusu estrin heidemann 
scalable ad hoc deployable rf localization 
proceedings grace hopper conference women computing vancouver canada october 

matt 
constraints approaches network security 
nai labs technical report september 

center information technology research interest society 
smart buildings admit faults 
www berkeley edu applications disaster response html 

cerpa elson estrin girod hamilton zhao 
habitat monitoring application driver wireless communications technology 
proceedings workshop data communications latin america caribbean apr 

clare pottie agre 
self organizing distributed microsensor networks 
spie th annual international symposium aerospace defense sensing simulation controls aerosense unattended ground sensor technologies applications conference apr 

deline fahndrich 
enforcing high level protocols low level software 
proceedings acm sigplan conference programming language design implementation june 

doherty brewer pister 

www 
eecs berkeley edu projects ivy 

nut os www de en software html 

elson girod estrin 
fine grained network time synchronization broadcasts 
fifth symposium operating systems design implementation osdi boston ma usa dec 

engler chelf chou hallem 
checking system rules system specific programmer written compiler extensions 
proceedings fourth symposium operating systems design implementation oct 

estrin embedded research agenda networked systems embedded computers 
national press washington dc usa 
tinyos operating system sensor networks 
flatt felleisen 
units cool modules hot languages 
proceedings acm sigplan conference programming language design implementation pages 

ford back benson lepreau lin shivers 
flux oskit substrate kernel language research 
symposium operating systems principles pages 

friedrich stankovic humphrey 
survey configurable component operating systems embedded applications 
ieee micro may 

ganesan 
application programmer interface api 
www isi edu scadds papers pdf 

ganesan krishnamachari woo culler estrin wicker 
empirical study epidemic algorithms large scale multihop wireless networks 
citeseer nj nec com ganesan empirical html 
submitted publication february 

gay levis von behren welsh brewer culler 
nesc language holistic approach networked embedded systems 
proceedings programming language design implementation pldi june 

gupta birman 
holistic operations large scale sensor network systems probabilistic peer peer approach 
proceedings international workshop directions distributed computing june 

ha blum stankovic abdelzaher 
aida application independant data aggregation wireless sensor networks 
submitted special issue acm january 

heidemann silva intanagonwiwat govindan estrin ganesan 
building efficient wireless sensor networks low level naming 
proceedings th acm symposium operating systems principles banff canada october 


architectural overview qnx 
www qnx com literature whitepapers html 

hill culler 
mica wireless platform deeply embedded networks 
ieee micro nov dec 

hill szewczyk woo hollar culler pister 
system architecture directions networked sensors 
architectural support programming languages operating systems pages boston ma usa nov 

hui ren krogh 
power management wireless sensor networks 
proceedings second international workshop information processing sensor networks ipsn palo alto ca usa apr 

hutchinson peterson 
kernel architecture implementing network protocols 
ieee transactions software engineering 

intanagonwiwat estrin govindan heidemann 
impact network density data aggregation wireless sensor networks 
proceedings international conference distributed computing systems icdcs july 

intanagonwiwat govindan estrin 
directed diffusion scalable robust communication paradigm sensor networks 
proceedings international conference mobile computing networking aug 
levis 
integrated integrated 
www 
com 

jason hill 
integrated wireless communication platform 
webs cs 
berkeley edu retreat slides mote chip nest jan pdf 

karlof li polastre 
arrive algorithm robust routing volatile environments 
technical report ucb csd university california berkeley berkeley ca mar 

karp kung 
gpsr greedy perimeter stateless routing wireless networks 
international conference mobile computing networking mobicom pages boston ma usa 


rev 
www inf ethz ch vs res proj smart html 


concurrent embedded executive microcontrollers 
www com htm 

kohler morris chen jannotti kaashoek 
click modular router 
acm transactions computer systems august 

estrin wicker 
impact data aggregation wireless sensor networks 
international workshop distributed event systems debs vienna austria dec 

levis culler 
mat tiny virtual machine sensor networks 
international conference architectural support programming languages operating systems san jose ca usa oct 

levis lee woo madden culler 
simulating large wireless sensor networks tinyos motes 
technical report ucb csd tbd berkeley computer science division march 

liu ning 
distribution key chain commitments broadcast authentication distributed sensor networks 
th annual network distributed system security symposium san diego ca usa feb 

liu cheung guibas zhao 
dual space approach tracking sensor management wireless sensor networks 
proceedings acm international workshop wireless sensor networks applications september 

lu blum abdelzaher stankovic 
rap real time communication architecture large scale wireless sensor networks 
proceedings ieee san jose ca september 


real time operating system 
www 
com 

madden franklin hellerstein hong 
tag tiny aggregation service ad hoc sensor networks 
osdi 

madden hong hellerstein franklin 
tinydb web page 
telegraph cs berkeley edu tinydb 

mainwaring polastre szewczyk culler anderson 
wireless sensor networks habitat monitoring 
acm international workshop wireless applications wsna atlanta ga usa sept 

microsoft 
microsoft windows ce 
www microsoft com embedded 


ariel technical overview 
www com technologies ariel technology bri ef html 
tinyos operating system sensor networks 

os 
www com technologies os html 

net 
www net 

min 
cho shih sinha wang chandrakasan 
energy centric enabling technologies wireless sensor networks 
august 

mosberger peterson 
making paths explicit scout operating system 
proceedings usenix symposium operating systems design implementation october 

nilsen 
nilsen finite state machine operating system 
www de en software html 

nowak mitra 
boundary estimation sensor networks theory methods 
proceedings nd international workshop information processing sensor networks palo alto ca april 

palm palmos software overview 
www palm com docs palmos html 

perrig szewczyk wen culler tygar 
spins security protocols sensor networks 
wireless networks sep 
previous version appeared 

ping 
time 
xxx lets get written intel tech report 

polastre 
design implementation wireless sensor networks habitat monitoring 
master thesis university california berkeley 

priyantha miu balakrishnan teller 
cricket compass contextaware mobile applications 
proceedings th acm mobi com rome italy july 

qnx software systems qnx realtime os 
www qnx 
com products os html 

red hat embedded operating system 
sources 
redhat com 

reid flatt stoller lepreau eide 
knit component systems software 
proc 
th operating systems design implementation osdi pages 

sharp 
mag tracking demo 
xxx lets get written tech report 

sharp nest challenge architecture 
www ai mit edu people index 

stankovic wang humphrey zhu lu 
vest virginia embedded systems toolkit 
ieee iee real time embedded systems workshop london december 


os mobile operating system 
www 
com 

development team 
linux microcontroller project 
www org 

university california berkeley 
node self organized wireless sensor network 
today cs berkeley edu demo aug 

von eicken culler goldstein schauser 
active messages mechanism integrating communication computation 
proceedings th annual international symposium computer architecture pages may 
levis 
pister 
smart dust communicating cubic millimeter computer 
ieee computer january 


design ad hoc localization system sensor networks 
master thesis university california berkeley 

culler 
calibration parameter estimation sensor networks 
acm international workshop wireless sensor networks applications wsna atlanta ga usa sept 

wind river systems 
www com products pdf 

wind river systems datasheet www com products html ds html 

woo culler 
evaluation efficient link reliability estimators low power wireless networks 
technical report uc berkeley 

wood stankovic 
denial service sensor networks 
ieee computer oct 

conner krishnamurthy mainwaring elliott 
real world experiences interactive ad hoc sensor network 
international conference parallel processing workshops 

ye heidemann estrin 
energy efficient mac protocol wireless sensor networks 
proceedings ieee infocom newyork ny usa june 

ye heidemann estrin 
flexible reliable radio communication stack motes 
technical report isi tr usc isi aug 

shin 
emeralds small memory real time microkernel 
symposium operating systems principles pages 
