ocala architecture supporting legacy applications overlays joseph kannan lakshminarayanan stoica university california berkeley labs university bingen increasing demand new applications led researchers propose new network architectures address limitations current internet 
rigidity internet today overlay networks implement architectures hope gaining large user base 
despite sustained efforts test deploy new network architectures testbeds planetlab efforts attracted significant number users 
believe chances user acceptance overlays eventually new network architectures substantially improved enabling users leverage functionality modifications applications operating systems 
design implementation experience ocala overlay convergence architecture achieves goal 
ocala interposes overlay convergence layer transport layer composed overlay independent sub layer interfaces legacy applications overlay dependent sub layer delivers packets overlay 
previous efforts design enables simultaneous access multiple overlays communication hosts different overlays communication overlay hosts legacy hosts extensibility allowing researchers incorporate overlays ocala 
currently support overlays ron hip linux windows xp :10.1.1.161.2760
research groups users ocala year legacy applications ranging web browsers remote desktop applications 
past decades researchers proposed plethora solutions extend internet functionality improve resilience security 
sustained efforts add new functions mobility multicast ip researchers turned attention developing new network architectures overlays address internet limitations :10.1.1.161.2760
trend fueled focus interface provided network substrate substrate implemented 
distinguish implementation difficulty changing ip hand advent planetlab testbed nsf geni initiative promises create worldwide testbed evaluating new network architectures hand 
order evaluate feasibility proposals ultimately bring closer reality important experiment real users running real applications 
ideally users able opt new experimental architectures changes legacy applications supporting legacy applications top new network architectures inherently difficult proposition legacy applications assume traditional semantics ip addresses dns names new network architecture may offer substantially different interface 
existing solutions general tailored particular network architecture leading little reuse duplication effort different implementations :10.1.1.161.2760
describe design implementation solution ocala overlay convergence architecture legacy applications enables legacy applications take advantage functionality provided new network architectures 
ocala differs existing solutions enables applications running machine access different overlays simultaneously stitching multiple overlays users residing different overlays communicate hosts communicate overlay point understands ip extensibility new overlay incorporated ocala minimal effort 
nutshell ocala design re factors protocol stack imposing overlay convergence oc layer 
oc layer positioned transport layer ip stack 
decomposed oc sub layer interacts legacy applications presenting ip interface overlay dependent sublayer oc sub layer tunnels traffic applications overlays 
main contributions overlay network architecture overlay overlay way implement new network architecture top ip 
term legacy applications refer existing applications web browsers assume ip semantics agnostic architecture supporting legacy applications extensible implementation architecture proxy 
implementation ocala proxy requires changes applications operating systems 
realizing design borrow techniques protocols literature address virtualization dns capture rewriting ssl :10.1.1.11.605
implemented oc sub layer ron architectures linux windows xp 
addition researcher hip host identity protocol irtf group implemented oc module hip lines code 
illustrate utility design ocala provide services intrusion detection secure wireless access secure intranet access network address translation nat box traversal legacy applications 
ocala come limitations 
fact ocala positioned transport layer hard impossible legacy applications take advantage network architectures provide transport application layer functionalities multipath congestion control data storage :10.1.1.115.4299
rest organized follows 
related section 
overview architecture section detailed design section 
overlay specific modules section 
discuss applications ocala section 
implementation details section evaluation section 
lessons initial deployment section conclude section 
related supporting legacy applications non ip communication infrastructures addressed variety contexts 
examples include overlay networks new network architectures ron hip doa wrap support mobility mechanisms enable hosts overlays participating :10.1.1.161.2760
implemented os kernel modifications user level proxies proposals specific particular context 
contrast ocala enables user simultaneously access different overlays communicate hosts residing overlays user directly connected 
goal stitching multiple network architectures resembles goal triad uip ipv ipv transition mechanisms 
proposals focus providing universal connectivity 
contrast focus main goal triad provide content routing scope discussion 
legacy applications ssh explorer transport layer tcp udp overlay convergence oc layer overlay doa dtn hip ron oc independent oc sublayer oc dependent oc sublayer overlay convergence oc layer 
exposing users functionality provided new network architectures individually stitched 
layering widely principle networking 
architectures hip wrap hide details underlying layers interposing shim layer transport network layers 
ocala oc layer similar shim layer 
ocala different architectures explicitly splits oc layer overlay independent sublayer overlay dependent sublayer respectively act traditional network link layers 
division enables ocala provide simultaneous access inter operability different network architectures 
implementing ocala rely techniques protocols previously proposed different contexts 
intercepting dns requests interposing proxies data path coral improving web browsing performance wireless networks :10.1.1.11.605
local scope addresses utilized context supporting mobility redirection process migration server availability 
address negotiation protocol similar oc sublayer security protocol generalization ssl 
design overview focus network architectures overlays offer service model packet delivery similar ip opposed provide transport application layer functionalities data storage oceanstore :10.1.1.115.4299
examples overlays improve internet resilience ron detour overqos overlays provide new functionalities mobility overlays bridge multiple ip address spaces architectures hip delegation oriented architecture doa :10.1.1.161.2760
network architectures realized overlays convenience exposition reminder term overlay refer overlay networks network architectures implemented overlays 
host overlay overlay specific identifier id hosts contact overlay 
simplest case overlay id host ip address ron overlays forms identifiers doa flat ids hip uses hashes public keys 
overlay ids may human readable hosts may assigned human readable names convenience 
goals design centered main goals transparency legacy applications break despite fact traffic relayed overlay ip 
inter operability hosts different overlays able communicate users able form paths span overlays 
hosts participate overlay accessible 
expose overlay functionality users control choosing overlay send traffic able leverage overlay functions despite overlay unaware legacy applications 
factor common functionality relying security provided overlays architecture provide basic security features host authentication encryption 
overlay convergence layer conceptually solution interposes layer called overlay convergence oc layer transport layer network layer see 
oc layer replaces ip layer internet stack consists overlay independent oc sublayer overlay dependent oc sublayer 
main functions oc sublayer consistent ip interface legacy applications multiplex demultiplex traffic applications various overlays 
addition oc layer provides common functions overlays 
examples functions authentication encryption 
oc sublayer consists modules various overlays responsible setting overlay specific state sending receiving packets particular overlay 
example oc module inserts maintains private triggers endpoints overqos module may perform resource reservation 
note ip viewed default overlay module 
shows example applications host open connections ip overlays web browser uses ip connect cnn server chat client irc uses preserve anonymity uses ron improved resilience 
design enables hosts different overlays communicate 
shows host oc ip oc irc ssh ron ron internet host ssh oc ron host irc oc www cnn com applications host establish connections ip overlays ron 
hosts different overlays communicate gateway host connected overlays 
refer communication channel hosts oc layer path communication channel hosts oc layer tunnel 
example path hosts consists tunnels respectively 
layering ocala discussion level services implemented oc oc data plane analogous services provided network data link layers osi protocol stack 
data link layer provides communication nodes link layer domain oc provides communication nodes overlay 
similarly network layer provides communication different link layer domains oc layer provides communication different overlays 
ocala enforce strict layering 
traditional layering layer uses service provided layer ocala allows legacy applications access services provided oc sublayer passing overlay specific names identifiers oc oc sublayer 
names resolved oc sublayer semantics opaque oc sublayer 
allows achieve main goal ocala enable legacy applications take advantage functions provided overlays keeping oc sublayer agnostic overlays 
detailed architecture section goal driven description ocala showing design achieves goals achieving transparency legacy applications bridging multiple overlays exposing overlay functionality users factoring common functionality 
achieving design goals challenging conflicting requirements 
instance hand want expose rich functionality provided host appl 
oc ron host bar oc ron ron bridging multiple overlays 
host foo ron appl 
oc ron overlays users preserve narrow ip interface exposed legacy applications 
tension apparent design decisions 
design aim find sweet spot achieving opposing goals 
goal achieving transparency basic goal system ensure legacy applications oblivious existence overlays 
ideally applications changes re configuration ip layer replaced oc layer 
design fundamentally constrained legacy application interacts external world 
legacy applications dns request send receive ip packets ip address returned dns reply 
legacy applications identify internet hosts names ip addresses names resolved dns ip addresses 
describe justify design decisions regarding names ip addresses seen legacy application overlay hosts identified primarily names 
names resolved overlay specific resolution protocols 
overlay free implement resolution protocol may differ dns lookup 
ip address returned application resolution protocol local meaning 
ip address serves oc handle retrieve state corresponding remote host 
similarly tunnel descriptor oc layer maintain hop hop state 
path descriptor oc layer maintain state 
local scope ip addresses similar address virtualization technique solutions overlay names users exercise control overlay delivering traffic fields ip headers ip addresses port numbers dns names 
approach user specify rules packets processed fields ip header 
host foo ov setup foo ov resolve foo ov id name res 
service local addrbook dns opendht legacy app 
transport layer oc layer oc handle ip ab ron oci setup pd ab tunnel overlay specific setup protocol overlay dtn ron path setup protocol 
host foo ov id oc layer example user specify packets sent address port forwarded ron packets sent forwarded overqos 
second approach users encode overlay application traffic inside dns requests 
refer unique name associated overlay host overlay name 
overlay name form foo ov ov specifies overlay foo name unique overlay 
receiving dns request overlay name application oc layer sets state allows intercept forward subsequent packets application host foo ov overlay ov 
main advantage relying solely information ip headers works internet applications application sends receives ip packets 
hand overlay names advantages 
overlay names identify hosts example nated hosts routable ip addresses 
property fundamental overlays bridge multiple address spaces 
second names human readable easier remember 
third user need know ip address destination advance feasible cases 
overlay provides support content replication ip address server ultimately serves content may known users run application 
implementation chooses dns names primary method overlay selection 
supporting applications dns requests support ip header fields overlay selection 
overlay specific resolution second design decision resolve overlay names overlay specific mechanisms 
name form foo ov resolved oc module overlay ov 
design choice main advantages dns resolution 
allows multiple names exist dns namespace enabling fully extensible namespace 
overlay allowed implement name allocation resolution manner chooses requirement global infrastructure 
second allows ocala support network architectures assume global ip address allocation 
examples include names way refer hosts 
examples include architectures leverage name resolution implement different functionality doa 
remainder section describe control plane data plane operations ocala transparently set path tunnel legacy applications data overlay 
control plane path setup new connection setup triggered receipt dns request previously unseen overlay destination receipt data packet connection configured particular overlay 
final result operations establish path oc layer set state required handle application traffic 
general path consists tunnels oc layer section consider single tunnel path 
generalize description multi tunnel paths section 
consider legacy application host wants communicate remote legacy application host called foo ov see 
application issues dns request foo ov intercepted oc sublayer 
receiving request oc layer associates globally unique path descriptor remembers mapping name descriptor foo ov order service requests foo ov 
oc sublayer invokes corresponding module oc sublayer setup tunnel foo ov overlay ov 
turn oc sublayer invokes resolution service obtain overlay id idb foo ov 
examples resolution services dns ron opendht doa implicit name identifier hashing 
oc sublayer resolves name instantiates necessary state communicating foo ov returns pointer state tunnel descriptor oc 
example setup phase involves negotiating pair private triggers remote host instantiating mapping state foo ov private trigger ids 
setup operations data packet connection intercepted similar describe 
minimize collisions randomly choosing path descriptor bit number space 
oc oc host id host foo ov id legacy app 
transport layer foo ov td ab id ip ip ab data ipa ip data ab overlay dtn ron idb ipa data ip ba ip ip ab legacy app 
transport layer ip data oc oc pd ab pd ab data td ba td ba id forwarding data packet host ip address ipa ip address 
mappings modify packet bold 
receiving tunnel descriptor oc oc sublayer performs oc layer setup peer sublayer oc layer host allocates descriptor tunnel oc sublayer oc handle 
completion oc layer setup protocol oc layer host stores mapping returns oc handle oc handle legacy application form local scope ip address 
maintain compatibility ip belongs unallocated address space 
shows state instantiated hosts setup protocol 
data plane packet forwarding legacy application host addresses packets destined foo ov oc handle returned oc sublayer see 
oc sublayer retrieves state associated handle appends path descriptor packet handing oc layer sent tunnel 
oc sublayer tunnel state sends packets foo ov overlay identifier idb 
destination packet handed oc sublayer uses path descriptor header demultiplex packet 
sending packet application oc sublayer rewrites source address packet local oc handle associated path destination address packet rewritten local ip address evident description constraint imposed supporting unmodified legacy applications leaves little choice overload semantics application level names ip addresses 
discuss limitations overloading names addresses transparency section 
goal bridging multiple overlays multiple overlays deployed potential undesirable side effect hosts different overlays may able reach 
example allows nated hosts act servers servers unreachable ron 
internet today hosts different ip address spaces communicate 
internet hosts participate overlays 
instance hard convince cnn join routing overlay deploy oc layer servers 
architecture addresses problems allowing remote resolution names 
principle borrowed proposals doa 
host belonging overlay ov resolves overlay name foo ov oc layer forwards resolution gateway participates overlay ov resolve name 
provide inter operability overlay legacy hosts designing special oc modules send receive ip traffic legacy hosts 
performing remote resolution path descriptors state handlers intermediate hops gateways 
tunnel descriptor handle passed oc oc sub layers host path descriptor handle oc layers different hosts 
intermediate hops path descriptor retrieve state required relay packet 
note decoupling path tunnel descriptors allows different paths share tunnel 
describe mechanisms bridge different overlays detail 
overlay gateways consider host overlay wishes contact host ron overlay see 
enable communication deploy host gateway resides ron runs oc modules overlays 
host sets hop path gateway intermediate hop 
multi hop path setup protocol creates tunnels consecutive hops sets routing state oc layer intermediate hop create path 
give details protocol 
assume overlay name host foo ron 
configuration files host described section indicate connections foo ron go gateway name bar 
communicate host application host issues dns request foo ron 
oc layer intercepting request instructs oc module set tunnel bar 
operation identical tunnel setup section 
tunnel setup oc asks peer set rest path destination recursively 
setup protocol path established unique path descriptor overlay client appl 
oc ov legacy client legacy gateway oc ov overlay ov internet internet oc legacy gateway ov overlay ov legacy server overlay server appl 
oc overlay client connecting legacy server 
legacy client connecting overlay server 
pd common path descriptor helps identify path path breakages dynamically detected quickly repaired 
gateway case nat maintains path state 
legacy gateways legacy gateways similar overlay gateways tunnels ip legacy host participate overlay natively run oc layer 
overlay functionality improved routing available tunnel established overlay overlay host gateway 
types legacy gateways legacy server gateway 
legacy server ls gateway allows overlay enabled client contact legacy server see 
functionally ls gateway runs oc layer oc module say special oc module called 
setup protocol similar overlay gateway 
consider overlay host connecting cnn com ls gateway 
oc layer ls gateway forwards setup requests module 
module behaves nat box respect server 
resolves name cnn com dns allocates local port tunnel 
packets sent server rewritten changing source address ls gateway altering source port allocated local port 
local port multiplex incoming packets sent oc layer appropriate handle 
legacy client gateway 
legacy client lc gateway enables overlay servers offer services legacy clients see 
functionally lc gateway runs oc layer oc module say special oc module called legacy clients overlay enabled run oc layer 
ov match ron match protocol tcp hop configuration snippet indicating ssh traffic connections dns names ron go instance ron running planetlab minimum latency metric 

addition client configured lc gateway dns server 
module intercepts dns queries client dispatches oc layer initiates tunnel overlay 
module sends dns reply internet routable address client captures packets sent legacy client address sends overlay 
client contact machine foo machine provided dns server set address lc gateway 
design lc gateway similar 
case fact addresses returned gateway routable considerably limits number clients connect simultaneously 
goal exposing overlay functionality different new architectures overlays provide different functionality 
users able choose overlay architecture best suited particular application 
overlay selected may allow customization functionality offers 
example ron allows users choose metric paths optimized overqos allows users specify qos parameters architectures doa allow users explicitly interpose middleboxes path 
greater flexibility users able customize preferences tunnel path 
preferences interest include overlay specific options latency optimized paths ron specific overlay independent options identity gateways authentication 
limited options available legacy application communicating preferences oc layer initial design encode user preferences dns name 
example dns name foo delay ms overqos identify connection host name foo path ms delay overqos 
overloading dns names traffic suffer limitation gateways dns names requests demultiplexing 
host appl 
oc host mbox host foo middle box oc interfacing 
appl 
oc include preferences multiple disadvantages highly restrictive syntax plain cumbersome utilize 
approach implemented ocala soon stopped 
opted traditional approach express user preferences xml configuration files 
receiving setup request overlay name oc sublayer reads preferences associated name configuration file proceeding setup operation 
snippet configuration file shown 
directly manipulating configuration files offers great flexibility users expect users mainly rely pre written configuration files graphical user interface described section 
support middleboxes ocala allows users customize data path redirecting traffic specific middleboxes configuration files described earlier 
new network architectures provide support middleboxes allowing sender receiver explicitly insert middleboxes data path 
ocala facilitates middleboxes manner similar support gateways 
consider case sender imposed host wishes contact host see 
difference operation gateway module say transcoder running allowed perform arbitrary transformations data sent point forwarding 
design module implements single function call oc layer pass packets 
configuration file specifies operations applied connections traversing 
protocol imposed receiver similar 
goal factoring common functionality second order design goal ocala architecture aimed reducing development effort overlay developers leverage oc layer implement general functionality various overlays 
cer tain features security data compression common requirements multiple overlays 
security authentication data connections important requirements overlays especially cases flat names employed 
ocala incorporates basic security mechanisms oc sublayer leaving overlay implement mechanisms oc module 
particular oc sublayer offers encryption authentication operate agnostic overlay traffic 
oc layer authentication mechanism human readable names relies existence certification name allocation authority users obtain certificates associating overlay name public key 
ocala protocol securely communicating host known name similar secure sockets layer protocol ssl relies certificate authorities 
designed custom protocol reusing ssl general middleboxes need operate unencrypted data possible existing model ssl 
aggregation compression data packets sent network increase connection throughput 
compression decompression data packets built oc layer available oc ds 
limitations primary goal design achieve transparency legacy applications providing complete access overlay functions 
review design meets goal 
access overlay functions oc layer enables legacy applications take advantage overlay functions mobility anycast qos route optimizations middleboxes important limitations 
fact ocala positioned transport layer hard impossible legacy applications take advantage overlay networks provide transport application layer functionalities multipath congestion control data storage :10.1.1.115.4299
second current instantiations ocala support unicast legacy applications provides support legacy applications ip multicast 
artifact current implementation fundamental limitation 
currently designing multicast abstraction oc layer 
note centralized authority necessary human readable secure naming scheme 
easy extend model hierarchical name allocation schemes 
transparency oc layer overloads ip addresses ways may break assumptions legacy applications 
contrast current ip scope ip addresses returned oc layer applications local 
firstly local scope addresses implies addresses returned legacy applications may valid hosts 
experience break common applications ssh remote desktop ftp servers 
peer peer applications sip may ocala hosts run ocala 
secondly applications ftp encode addresses data packets potentially oc layer performs ip header rewriting delivering packets application 
implementation avoids address rewriting extent negotiating local addresses oc layer technique borrowed 
legacy gateways address rewriting avoided 
local scope addresses contexts limitations workarounds known 
supporting overlays hosts may routable ip addresses left little choice limitations addresses 
overlay dependent layer overlay dependent layer implements functionality offered specific overlay 
section interface exported oc module oc sublayer 
describe working ron oc modules developed house overlays :10.1.1.161.2760
description serves validation architecture blueprint implementing oc modules overlays 
oc module api table shows basic api functions oc module needs implement expose oc sublayer 
simplicity exposition omit error overlay name related functions 
function calls oc oc setup name pref path setup path host name preferences pref close tunnel close tunnel send tunnel ip pkt send ip packet tunnel callbacks oc oc setup done path callback invoked tunnel tunnel tunnel established recv path ip pkt receive ip packet tunnel table oc module api 
basic api consists functions call backs 
setup function sets tunnel local host remote host user preferences 
user preferences pref overlay name remote host name passed setup call 
path field represents path descriptor oc sublayer oc sub layer setup done callback 
oc sublayer creates tunnel returns tunnel descriptor tunnel oc layer callback setup done 
function call invoked oc sublayer close specified tunnel 
function usually called path state oc sublayer expires 
discuss timeout values state context implementation section 
function call invoked oc sublayer includes handle oc state tunnel tunnel descriptor packet 
recv call invoked oc module oc sublayer receiving packet overlay 
ron module ron aims improve resilience internet alternate routes overlay :10.1.1.161.2760
ron offers interface similar ip surprisingly requires little effort implement oc module ron 
ron uses ip addresses dns names overlay ids overlay names respectively 
oc sublayer asks ron module setup connection ron host identified name foo com ron name resolved dns infrastructure obtain ip address 
ron module sets state associating preferences destination ip address tunnel passes handle oc sublayer 
data plane operations involve simple encapsulation 
module new network architecture uses rendezvous communication abstraction support services mobility multicast anycast service composition middleboxes 
describe module works host contacts host 
receiving request oc sublayer oc module resolves name bit identifier implicit mapping identifier host derived simply hashing name 
identifier obtained hashing corresponds public trigger identifier idb 
require resolution infrastructure 
name resolved module initiates private trigger negotiation contacting host public trigger idb 
hosts exchange pair private triggers respectively communicate exclusively triggers host sends packets host id host sends packets id 
control protocol sets required state module sends packets captured oc layer encapsulating payload headers include private triggers identifying flow 
oc module allows receiver imposed middleboxes stack ids 
host wishes impose hosts contacting inserts public trigger form idb idm 
client sends trigger negotiation request public trigger idb overlay delivers stack idm 
oc module obtains identity hop automatically proceeds setup tunnel oc sublayer 
applications legacy applications benefit ocala different ways 
firstly ocala enables applications leverage new functionality offered overlays 
secondly oc layer ocala allows path traverse multiple overlays composing functionalities 
describe applications demonstrate types benefits 
functionality enabled overlays offers functionality nat traversal receiver imposed middleboxes hip offers secure mobility 
applications leverage hip oc modules 
nat traversal enables access machines nats 
oc module conjunction oc layer user run legacy servers nats 
addition allowing external users contact servers enables home users securely access machines simply remembering human readable name home machine 
users deploy software nat traversal attractive feature users point view 
receiver imposed middleboxes enables hosts redirect incoming traffic go may located network 
leveraged functionality force incoming traffic legacy server pass intrusion detection located physical path server 
popular bro intrusion detection program implementation writing line shim layer oc layer relays packets analyzed bro :10.1.1.116.8880
fig instance legacy server may run user home machine may operated professional firm user server proxy machine running ftp server contacted client proxy ftp start response server default installation gaia auth syntax error auth kerberos syntax error user logged type ok stor complete possible attack 
quit closed finish bro ftp traffic analyzer detects attempt upload file called known backdoor 
ure shows example analysis performed bro 
note bro legacy application packets sent valid ip headers 
reason shim layer assigns virtual addresses points rewrites packet ip headers appropriately sends bro 
bro communication remote hosts looks conversation virtual hosts perform stateful analysis tcp analysis matching data packets tcp connection corresponding acknowledgments 
bro sees virtual addresses unable perform certain analysis address scan detection looks unsuccessful connection attempts hosts network 
secure mobility hip enables hosts securely communicate hosts mobile 
leverage functionality hip support ssh connections remain alive hosts changes ip address 
functionality enabled oc layer oc layer ability provide simultaneous access multiple overlays bridge different overlays enabled easily implement applications secure intranet access implemented flexible secure version virtual private networks oc layer contact legacy hosts overlay 
legacy server gateway runs inside organization unrestricted access intranet hosts 
access intranet machines external hosts relay packets legacy gateway 
authentication encryption important requirements scenario simply leverage oc layer security mechanisms purpose 
routing overlay including vanilla ip communicating user machine legacy gateway 
main advantage system vpn systems client access multiple intranets time intranets address range 
users specify preference file example connections com go gateway con com gateway 
distinguishing feature system traditional client assigned ip address intranet address space 
improves security system making difficult client infected scanning worm directly attack hosts intranet 
overlay composition overlay composition allows application explicitly different network overlays 
apart allowing inter operability allows user merge functionalities multiple overlays interesting ways 
example user connects internet wireless hop may uninterrupted communication switching various wireless networks 
addition user may wish optimize wide area performance ron 
achieve connect close ron gateway relay packets ron optimized path 
implementation implemented oc layer user level proxy 
ocala inserts new layer network protocol stack implementation avoids modifications operating system packet capture device 
oc layer reads tun device capture packets sent legacy applications writes send back replies 
ocala proxy configuration gui consist approximately source lines code sloc sloc java 
software currently works linux windows xp available athttp www net 
implemented oc modules ron source code available project websites 
hip oc module independently implemented researcher hip irtf group 
oc module class implementing api oc base class compiled shared object file linux dll dynamic link library windows 
oc modules dynamically loaded plugged proxy user configuration 
simplest form oc module little translating oc api calls overlay specific functions 
experience implementing oc module simple task requiring lines code 
count code interface oc oc code implement overlay specific functionality 
users control proxy express preferences example ssh traffic go ron implementation may modify protocol stack higher efficiency mac os port near completion internet relay chat set xml configuration files 
implemented graphical user interface enables users set preferences manually editing xml files 
gui modular design enables developers plug components expose overlay specific configuration options users 
current implementation requires administrative privileges tun device forces users machine share configuration 
limitations avoided dynamic library implementation 
remainder section describe implementation control plane data plane gateway operations detail 
control plane state maintenance control plane setup begins oc layer intercepts dns request previously unseen destination 
oc layer initializes state path descriptors communicates peer oc layer set path requested application 
application desires local scope address negotiated points 
security enabled protocol authenticates nodes path establishes bit symmetric keys tunnel 
protocols piggybacked top path setup order reduce latency 
setup completion oc layer sends dns reply containing local scope address application 
local scope addresses allocated unused address range 
prevent caching time live ttl dns reply set zero 
state associated path times removed data packets sent received path 
large timeout period chosen deal applications internet explorer cache dns replies specified ttl 
path alive periodic keep alive messages exchanged sender receiver order quickly detect repair breaks path 
data plane packet forwarding packets sent application addressed addresses returned oc layer path setup 
oc layer intercepts packets sent local scope addresses 
data packets applications wishing standard ip completely bypass ocala 
depending user preference oc layer may compress encrypt packet dispatching oc layer 
headers added oc oc layers may lead packet fragmentation 
avoided application performs mtu discovery 
receiving oc layer rewrites source destination ip addresses delivering pack ets application 
rewriting addresses occurs local scope address negotiation points failed path setup 
legacy gateways implementation includes packet rewriting support applications snmp 
legacy server gateway support icmp information icmp packet port numbers permit multiplexing single ip address multiple hosts 
implementation similar legacy client connect name form foo net order communicate webserver foo 
evaluation purpose evaluation demonstrate overheads packet capturing tunneling implementation large 
real benefit architecture implementation evaluated applications enables eventually user acceptance gains 
micro benchmark data control paths proxy local area wide area experiments 
micro benchmarks micro benchmarks conducted ghz pentium iv pc mb ram running linux house tool sends packets specified rate played role legacy client 
proxy tool instrumented record timestamps relevant checkpoints 
timing statistic reported median runs 
data path overhead 
comparison legacy application running host ip stack proxy adds memory copies kernel user space back sending receiving packets 
table reports send receive times single packet size bytes ron total send receive times split phases time move packet application proxy tun overhead oc layer overhead oc layer 
expected processing time oc layer independent ron 
percentage time spent oc layer large send receive enabling oc features encryption overhead rises 
due space constraints benchmark windows version proxy 
packet size order avoid fragmentation due addition headers 
benchmark hip implemented external research group 
send receive ron ron oc oc tun table split packet overhead send receive 
remainder overhead equally split oc processing transferring packet application proxy 
ron oc modules function differently processing times associated similar 
dynamic library implementation reduce overhead packet transfer application proxy avoiding extra packet copying 
total processing time indicates proxy sustain throughput packets second byte packets 
control path overhead 
path setup triggered dns request application captured 
path requested name previously set proxy immediately answers dns query small processing overhead performs additional operations set path takes longer respond application 
lan experiments order study effect proxy overhead behavior measured table latency tcp throughput clients communicating shortcut ron normal ip lan 
lan environment overhead proxy localized wide area artifacts affecting measurements 
shortcut ron ip latency ms throughput kbps table lan experiments latency throughput 
latencies shortcut ron microseconds larger ip latency 
lan latencies small single intermediate server data path causes significant relative increase latency 
throughput results average measurements indicate performance hit due proxy overlay overheads 
throughput latency ron better ip simple experimental setup ron ip packets traverse lan 
servers located lan relaying packets cause significant throughput degradation 
shortcut optimization eliminates inefficiency relaying packets intermediate servers latency ms throughput kbps ip shortcut ron ron shortcut shortcut ron ip shortcut ron ron shortcut shortcut ron wide area experiments latency throughput 
wide area experiments measured ocala performance shortcut ron plain ip wide area 
measured performance traffic traversed ron ip ron ip gateways 
difficulty obtaining root permissions required run proxy limited experiments just machines berkeley stanford boston referred respectively 
latency measured 
throughput measured ttcp 
ron networks deployed planetlab 
oc module closest server host joined ron network ron oc module 
consider latency throughput results single network scenario 
shows latencies shortcut ip nearly equal 
surprising cases packets follow direct ip path points 
configured ron choose latency optimized paths observed significant improvements latency compared direct ip path 
due limited size experiment path best latency direct ip path 
plain incurs larger latency packets forwarded intermediate server 
experiments ip incurred higher latency ron 
attribute udp packets getting preferential treatment icmp ping packets note packets encapsulated udp ron 
confirmed measuring latencies udp echo protocol permitted firewalls 
throughput measurements indicate performs worse direct ip path 
throughput ron vary direct ip throughput 
attribute performance degradation extra headers added packet proxy processing overheads 
suspect tcp packets getting preferential treatment udp wide area 
ron bridge 
measured throughput latency pair machines machines pair connected connected ron 
second machine berkeley acted ron gateway 
shown increase latency bridged path direct ip path small 
presence ron gateway path resulted lower throughput 
adverse effect bridging dominant nodes close 
example throughput berkeley stanford nodes bridging approximately third direct ip path distant nodes berkeley boston stanford boston throughput drop 
legacy server proxy 
ran ip ron ip legacy server proxies machine proxies configured relay connections mozilla mirrors www mozilla org server proxies hop ron 
server proxies connect mozilla mirror behalf measure throughput downloaded different files different mozilla mirrors 
average throughput ip ron ip gateways throughput obtained directly downloading set files 
main reasons reduced throughput wide area lan experiments overheads due extra headers relaying intermediate hops bridging 
inherent limitations tunneling 
currently optimizing aspects implementation order decrease throughput drop 
discussion section summarize experiences ocala deployment 
groups various versions proxy march 
time interval ocala proxy attracted interest overlay developers users 
developers various routing overlays network architectures delay tolerant networks host identity protocol overqos computing qos middleware project expressed interest leveraging ocala proxy overlays 
proxy supporting variety applications including ssh ftp web browsing virtual network computing vnc applications 
users typically proxy accessing home machines get nat boxes dynamic ip address allocation isps 
experience feedback users developers learned lessons obvious retrospect 
lessons emphasize arguably main benefit ocala ability open overlays real users real applications 
feedback received users invaluable improving ocala design cases overlay design 
efficiency matters 
legacy applications users expect applications perform way matter run directly top ip top overlay 
particular users unwilling trade performance functionality 
feedback lead proxy optimizations overlay optimizations 
example developers added shortcuts improve latency added ability share private trigger multiple tunnels decrease setup cost 
security matters 
security part original design agenda 
users expected level security oc name resolution mechanism get today dns impersonation possible trivial 
area mobility users developers argued stronger security guarantees authentication encryption 
feedback led security order goal design 
usage unexpected 
initially expected mobility popular application 
case 
users interested ocala mundane tasks accessing home machines nats firewalls getting various connectivity constraints 
instance users leveraged fact proxy communicates udp browse web access point configured block tcp web traffic 
unexpected usage lead provide better support applications nats 
particular implemented oc handle negotiation mechanism preserves addresses ip headers 
allows support applications nats ftp 
overlay networks focus research years due promise introducing new functionality changing internet infrastructure 
surprisingly little attention devoted achieving desirable property host provide access new network architectures changes legacy software operating systems network applications applications 
preliminary step direction aims improve inter operability legacy applications new network architectures different network architectures 
currently process extending oc sub layer support overlay networks 
ultimately plan enlarge user base gather feedback improve proxy 
experience showed users find unexpected uses system push design new directions 
andersen balakrishnan kaashoek morris :10.1.1.161.2760
resilient overlay networks 
proc 
sosp 
cheriton 
loose source routing mechanism traffic policies 
proc 

cheriton 
triad new generation internet architecture mar 
www dsg stanford edu triad 
crowcroft hand roscoe warfield 
argument network pluralism 
proc 

deering 
multicast routing internetworks extended lans 
proc 
sigcomm 
fall 
delay tolerant network architecture challenged internets 
proc 
sigcomm 
ford 
unmanaged internet protocol taming edge network management crisis 
sigcomm comput 
commun 
rev 
francis gummadi 
nat extended internet architecture 
proc 
sigcomm 
freedman mazieres :10.1.1.11.605
content publication coral 
proc 
nsdi 
freier kocher 
ssl protocol version 
internet draft november 
wp netscape com eng ssl 

transition mechanisms ipv hosts routers 
rfc 
gupta reddy 
client oriented ip level redirection 
proc 
ieee info com 
henderson 
hip experiment report 
www ietf org internet drafts draft irtf hip experiment txt 
internet protocol space 
www 
iana org assignments 
karp ratnasamy rhea shenker 
adoption dhts public dht service 
proc 
iptps 
kubiatowicz bindel chen eaton geels gummadi rhea weatherspoon weimer wells zhao :10.1.1.115.4299
oceanstore architecture global scale persistent storage 
proc 
asplos 
moskowitz henderson 
host identity protocol 
www hip inter net documentation drafts draft moskowitz hip html 
nahrstedt xu li 
qos aware middleware ubiquitous heterogeneous environments 
ieee communications magazine 
peterson 
divert mechanism service overlays 
technical report tr cs dept princeton feb 
ng stoica zhang 
waypoint service approach connect heterogeneous internet address spaces 
proc 
usenix 
global environment networking investigations geni 
www nsf gov cise geni 
paxson :10.1.1.116.8880
bro system detecting network intruders real time 
computer networks 
perkins 
ip mobility support 
rfc 
planet lab 
www planet lab org 
postel 
echo protocol 
rfc 
rodriguez mukherjee rangarajan 
session level techniques improving web browsing performance wireless links 
proc 
th international conference world wide web pages 
savage anderson aggarwal becker cardwell collins hoffman snell vahdat voelker zahorjan 
detour case informed internet routing transport 
technical report tr 
seth keshav 
generalized architecture computing disconnected networks 
net 
stoica zhuang shenker surana 
internet indirection infrastructure 
sig comm 
su 
move mobility persistent network connections 
phd thesis columbia university oct 
su 
mobile communication virtual network address translation 
technical report cucs columbia university feb 
subramanian stoica balakrishnan katz 
overqos overlay architecture enhancing internet qos 
proc 
nsdi 
tokoro 
network architecture providing host migration transparency 
proc 
acm sigcomm 
virtual private network consortium 
www 
org 
virtual tunnel 
sourceforge 
net 
stribling krohn balakrishnan morris shenker 
middleboxes longer considered harmful 
proc 
osdi 
muller linux networking architecture design implementation networking linux kernel 
prentice hall 
wilcox hearn 
names decentralized secure human meaningful choose 

com html 
wroclawski 
white 
workshop research directions generation internet 
garg dahlin alvisi vin 
transparent mobility minimal infrastructure 
technical report tr ut austin june 
zhuang lai stoica katz shenker 
host mobility internet indirection infrastructure 
proc 
mobisys 
