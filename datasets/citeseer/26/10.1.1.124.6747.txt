caitlin musical program auralisation tool assist novice programmers debugging paul vickers school computing mathematical sciences liverpool john university liverpool uk vickers ac uk field auditory display relatively little focused sound aid program debugging 
describes caitlin pre processor turbo pascal programs musically programs view assisting novice programmers locating errors code 
discussion follows experiment showed programmers musical feedback visualise describe program structure 
discussion 
keywords auralisation auditory display 


term software visualisation suggests idea investigation visual sense 
aim software visualisation simply improve understanding software 
sense sound possesses properties facilitate software comprehension 
previous research shows sound useful tool presentation information users 
examples include edwards sound enhanced word processor blind gaver auditory icons blattner earcons gaver graphical user interface 
sonification mapping data sound demonstrates large data sets represented sound 
direct conversion data sound analyse large sets seismic data difficult visualise graphics 

program auralisation field auditory display research program auralisation attract interest 
auralisation representation program data including execution state sound 
majority efforts concerned auralisation specific algorithms 
brown hershberger music enhance complement animation bubble sort algorithm 
shown sound primary medium visualising state parallel algorithms 
case music aid debugging supported felt visual presentation needed provide context framework audio sound track 
program state captured set trace data subsequently animated 
ways certain aspects parallel programs www cms ac uk www homepage caitlin caitlin htm james research centre department computer studies university uk ac uk suggested jackson auralisation post mortem nature 
auralisation projects note include system jameson system bock auditory domain specification language adsl mathur listen system 
stark omission existing literature empirical evidence program auralisation useful 
preliminary experimentation showed music visualise algorithm state 
experiment reaction tasks required interpretation musical output gauged 
task showed subjects fairly accurate estimating difference semitones musical pitches 
second task required subjects sketch perceived shape short musical sequences 
subjects generally able pick basic shape 
experiment musical sequences generated bubble sort results indicate music aid visualisation algorithm state 

caitlin project need experimentation determine possible practicable program auralisation 
caitlin project aims determine musical feedback help novices debug programs 
music assist visually impaired programmers 
pre processor constructed novices pascal programs 
experimentation undertaken elicit evidence support hope claim musical feedback useful enhancing debugging process 
deliberately musical techniques 
music extremely powerful medium delivery large amounts data parallel techniques counterpoint polyphony 
separate musical ideas delivered parallel confusion part listener certain syntactic semantic rules followed 
sense investigate music usefully employed program 
reasons music program considered earlier arguments music 
enduring criticisms quantitative information conveyed sound music 
novice source code auralisation preferences source pas musical output source code music setup argument whilst individuals tell note increases decreases pitch trained musicians able determine exact intervals accuracy 
quantitative information meaningfully described terms magnitude needing know exact discrete values 
instance just unmarked thermometer allows visual judgement relative magnitudes various temperatures musical pitch enables aural gauging relative values different data 
interestingly nature provides acoustic thermometer form striped ground cricket 
listening cricket chirps predict ambient temperature example chirps second equates temperature fahrenheit 

caitlin pre processor stage project construction caitlin system 
caitlin non invasive pre processor allows novice programmer program written turbo pascal 
shows basic architecture system terms functional units linkages 
musical output midi multi timbral synthesiser 
system implemented relatively modest platform comprising personal computer sound card general midi compatible instrument set 
caitlin non invasive leaves source program unchanged 
effected adding library routine calls copy program 
enhanced copy source program compiled produce executable image see 
caitlin designed assist debugging executable programs help compile code accept source program free syntax errors 
running caitlin user screen similar concept layout turbo pascal integrated development environment ide 
menu option allows user load source program memory parsed stored tokens memory 
loading user opt menu compile run program 
token list parser pc midi device setup options caitlin architecture executable image compiler source source formatter source par formatted code auralisation done construct level 
loop way repeat case constructs 
user may select construct nature auralisation applied 
presently fairly simple minded allowing selection musical scale major minor default note length eighth note midi channel instrument 
speed music heard controlled tempo variable 
options saved configuration file 
construct auralisation comprises basic parts musical signature tune denote commencement construct musical structure representing execution construct signature signal exit construct 
contents musical structure construct depend construct characteristics 
different constructs different features represented various ways 
introduced notion point interest poi 
point interest feature construct details interest programmer execution 
example construct 
entry construct 
evaluation conditional expression 
execution selected statement 
exit construct 
construct type denote entry exit construct respectively 
enable listener distinguish poi repeat loops defined short signature tune construct type 
program tune associated statements inserted prior loop 
construct poi playing complement signature tune playing reverse 
defining program terms points interest build understanding element program sound 
example know loop heard sequence playing signature tune followed repetition music denoting iterated statement execution followed playing modified signature tune 
illustrated 
code window shows listing simple program employing loops 
auralisation employed example straightforward 
code inserted caitlin iteration outer loop generates pitch ascending scale scale type selected user 
inner loop plays descending scale loop counter case decremental 
stressed user access original source code see expanded source 

experimentation preliminary experimentation caitlin carried 
subjects faculty members types auralisation listening examples example accompanied narrative description program question source code available request 
sample auralisation repeated times required 
session subjects 
auralisation asked describe structure program represented 
noted audio cues available output programs shown 
facility provided changing system parameters instrument 
entire process took minutes 
results suggest subjects able visualise program structure auralisation see 
subjects specified exactly program structure represented 
subjects give exact description describe essence structure scored nearly correct specifying loop downto loop 
answer bore correspondence actual score idea 
worth noting subject scored ideas nearly corrects www cms ac uk www homepage caitlin tutorial htm provides access examples test experiment 
caitlin main screen claimed lack familiarity western music 
thorough experimentation determine really simply lack familiarity caitlin blame 
programs scored fewest correct responses contained combinations constructs 
poor scoring examples interesting neglected contrary previously stated guidelines provide auralisation construct final poi 
impossible determine cases statement terminates 
program involved nested statements 
deduce required listener spot inner selection played octave higher outer example nested selections session 
caitlin fails signal path exists selection conditional expression yields true 

general programmers understood caitlin doing follow execution simple programs 
ambiguity surrounding statement shows important exit construct entry 
auralisation helped subjects differentiate nested sequential program struc responses test program number correct nearly preliminary experimental results idea tures 
background provided execution repeat loops assisted 
instrument selection seen important 
subjects commented easy mind timbres various constructs markedly different 
careful attention paid signature tune construction 
subject unable distinguish entry exit signatures loop 
subject gave correct responses complex examples cause confusion especially loops nested 
signature tune repeat loop intricate signatures appear confuse subjects 
proportion non correct responses appear caused subjects incorrectly remembering auralisation represented 
subject identified auralisation repeat loop loop consecutive test programs 
described uncertainty caused remembering tune 
longer session may improved score 
feedback preliminary experiments develop version caitlin novice programmers 
experimentation determine novice programmer help debug programs 

music computer human communication people computers diaper winder eds 
cambridge cambridge university press 
blattner greenberg earcons icons structure common design principles human computer interaction pp 

bly communicating sound proc 
chi new york acm press addison wesley pp 
boardman mathur preliminary report design rationale syntax semantics lsl specification language program auralization lafayette dept computer sciences purdue university sept 
bock auditory software fault diagnosis sound domain specification language ph thesis syracuse university syracuse 
brown hershberger color sound algorithm animation computer pp 

baecker program auralization sound enhancements programming environment proc 
graphics interface pp 
domingue price eisenstadt framework describing implementing software visualization systems proc 
graphics interface pp 
edwards soundtrack auditory interface blind users human computer interaction pp 

rover visual aural representations performance scalable application program proc 
high performance computing conference pp 
gaver auditory icons sound computer interfaces human computer interaction pp 

gaver interface uses auditory icons human computer interaction pp 

hayward listening earth sing auditory display vol 
xviii santa fe institute studies sciences complexity proceedings kramer ed 
reading ma addison wesley pp 

jackson aural signatures parallel programs proc 
fifth hawaii international conference system sciences pp 
jackson synchronization visual aural parallel program performance data auditory display vol 
xviii santa fe institute studies sciences complexity proceedings kramer ed 
reading ma addison wesley pp 

jameson audio enhanced monitoring debugging auditory display vol 
xviii santa fe institute studies sciences complexity proceedings kramer ed 
reading ma addison wesley pp 

kramer preface auditory display vol 
xviii santa fe institute studies sciences complexity proceedings kramer ed 
reading ma addison wesley pp 
xxiii 
dynamic representation multivariate time series data journal american statistical association pp 

pierce songs insects harvard university press 
sound synthesis algorithms auditory data representation auditory display vol 
xviii santa fe institute studies sciences complexity proceedings kramer ed 
reading ma addison wesley pp 

craig sound extract meaning complex data extracting meaning complex data processing display interaction vol 
ed 
san jose california spie pp 

gopinath haberman iii myers audio aid program comprehension proc 
third hawaii international conference system sciences ieee computer society press pp 

