sasi enforcement security policies retrospective fred schneider department computer science cornell university ithaca new york april revised july sasi enforces security policies modifying object code tar get system system executed 
approach prototyped different machine architectures intel java jvml 
details prototypes generalizations sasi approach discussed 
monitor observes execution target system halts system violate security policy concern 
security mechanisms hardware system software typically directly appears proceedings new security paradigms workshop 
supported part arpa radc afosr defense advanced research projects agency darpa air force research laboratory air force material command usaf agreement number national science foundation intel 
views contained authors interpreted necessarily representing official policies endorsements expressed implied organizations government 
government authorized reproduce distribute reprints government purposes notwithstanding copyright annotation thereon 
implement monitors intended facilitate implementation monitors 
example operating system mediate access files abstractions supports implementing monitor policies concerning objects 
example context switch trap caused system call instruction executed forces transfer control facilitating invocation monitor system call executed 
job monitor protected subversion target systems monitors 
memory protection hardware ensures execution program corrupt instructions data commonly purpose 
placing monitor target systems separate address spaces performance cost expressiveness cost 
performance cost results overhead due context switches associated transferring control monitor target system 
monitor receive control target system participates event relevant security policy enforced 
expressiveness cost comes means target system events cause monitor invoked restricts vocabulary events involved security policies 
security policies govern operating system calls example feasible traps accompany systems calls 
increasingly security policies today defined terms application level abstractions operations 
instance web browser need enforce security policy governing helper applications web browser resources 
system calls operations traps available transferring control monitor means invoking monitor 
alternative placing monitor target systems separate address spaces modify target system code effectively merging monitor line 
basis software fault isolation sfi enforces security policy prevents reads writes branches memory locations outside certain predefined memory regions associated target system :10.1.1.142.4909
theory monitor security policy merged target application provided target prevented circumventing merged code 
prototype systems reduce theory practice subject 
prototypes merge security policy enforcement code object code target system 
chose level object code part minimize size trusted computing base tcb working object code level available rich vocabulary lowlevel events machine language instructions security policy presumably crafted 
prototypes transforms assembly language output gcc compiler prototype transforms java virtual machine language jvml 
security policies specified security automata specification notation proved expressive define security policy enforceable execution monitoring 
proceed follows 
security automata specifying security policies discussed 
general approach merging enforcement code target system subject 
prototype realizations approach discussed 
prototype discuss integrity enforcement code protected give results performance experiments 
contrast related 
critiques approach offering conceptual basis second generation security enforcement toolset constructing 
security automata informally security automaton involves necessarily finite set states necessarily finite input alphabet transition relation transition relation defines state automaton current state input symbol 
convenient define transition relation order predicates transition predicate true current state input symbol state iff security automaton state input symbol read automaton state changes state 
transition current automaton state input symbol read security automaton rejects input 
security automata regarded defining monitors 
input alphabet corresponds events monitor particular working object code high level language processors part tcb 
software performs object code analysis object code modification added tcb 
software relatively modest size described 
precise definition security automata 
summary section suffice understanding current 
messages sent reading file 
see 
transition relation encodes security policy automaton rejects sequences inputs corresponding target system executions security policy violated 
example depicts security automaton security policy prohibits message sends file reads 
automaton states represented nodes labeled start 
automaton state start initial state security automaton 
predicates read send characterize target system instructions cause files read messages sent respectively 
security automaton rejects input corresponding target system attempt execute send instruction state file read 
merging security automaton security automata sfi implementation sasi generalizes sfi security policy specified security automaton 
sfi new code added target system immediately preceding instruction accesses memory read write branch subroutine call subroutine return new code ensures reads writes memory access addresses target data region ii branches calls returns transfer control instruction target program iii functionality additions circumvented target system 
sasi new code added target system immediately preceding instruction 
added code simulates security automaton 
specifically new variables accessible code added sasi represent current state security automaton new code circumvented simulates automaton state transition 
new code causes target system halt automaton rejects input current automaton state allow transition addition sfi instruction modified way preserves semantics 
push returning 
target instruction 
automaton simulation equivalent inserting monitor line target system 
analysis target system allows simplification code simulating security automaton 
inserted copy automaton simulation candidate simplification context code appears 
partial evaluation transition predicates automaton structure irrelevant tests updates security automaton state removed 
depicts merging security automaton specification instruction routine squares value 
security policy restricts execution pushing exactly value stack returning 
merge involves phases insert security automata 
inserts copy security automaton target instruction 
evaluate transitions 
evaluates transition predicates target instruction follows copy automaton 
simplify automata 
deletes transitions labeled transition predicates evaluated false 
compile automata 
translates remaining security automata code added locations simulates operation security automaton 
fail invoked added code automaton simulated reject input 
sasi evaluates simplifies security automata local information global analysis show inserted code redundant 
example ret instruction reached straight line execution state necessarily false ret executed 
code appearing ret instruction needed 
partial evaluator sasi doesn attempt global analysis feared increasing size complexity tcb 
simplification inserted code 
prototype sasi implementations security policies sasi prototypes represented sal security automaton language 
sal specification consists finite list states state having list transitions states 
macros defined start sal specification expanded fully bottom may recursive 
sal supports deterministic automata real restriction nondeterminism easily removed security automata 
sal transition predicates expressions constructed constants variables style arithmetic logical operators calls functions platform specific functions sasi prototype platform specific functions evaluate opcode operands target instruction defining sets addresses corresponding data values read written defining addresses instructions target system branch call return destinations 
jvml sasi prototype platform specific functions allow access class name method name method type signature jvml opcode instruction operands jvm state target instruction executed 
illustration contains sal jvml sasi specification security policy prohibiting message sends file reads 
macros methodcall name op invokevirtual param name methodcall java io read send methodcall java net write security automaton start start send sal specification messages sent reading file :10.1.1.117.6702
associated sasi prototype rewriter merges security automaton simulation object code target system 
rewriter operates outlined 
inserts code security automaton simulation immediately target instruction 
construct code platform specific sal functions transition predicates instantiated actual values known code compute values runtime 
generic partial evaluator run simplify resulting automaton 
object code simplified security automaton generated inserted target code 
integrity monitor merged sasi object code target system depends preventing corruption security automaton simulation 
entails preventing target system modifying variables security automaton transition predicates variables encode state security automaton preventing target system circumventing code implements transitions security automaton preventing target system modifying code causing code executed dynamic linking operating systems support measures just described preserving security automaton integrity 
discharge obligations platform dependent general approaches verification object code establish security automaton sfi memory protection behavior impossible modification object code rule behavior 
employed prototypes 
prototype sasi prototype works assembly language output gnu gcc compiler 
object code produced gcc observes certain conventions self modifying guaranteed satisfy assumptions program behavior insensitive adding stutter steps nop 
variables branch targets restricted set labels identified gcc compilation 
restrictions considerably simplify task preventing security automaton simulation corrupted target system 
particular suffices apply sasi simple memory protection policy order obtain target system object code subvert merged security automaton simulation sasi prototype prepends sal description security policy sal input describing security policy enforced 
effectively merges target system security automaton simulation circumvented corrupted security automaton simulation enforces security policy recursive sasi works transition predicates defined entirely terms sal platform specific functions policy deals difficulties arise valid instructions exist non instruction boundaries target system bit pattern instruction encompass bit pattern 
limiting branch destination valid labels jumping middle instruction prevented 
ebx dirty eax ebx andl ebx orl ebx movl edx ebx popl ebx ebx dirty eax ebx andl ebx ebx jne fail popl ebx movl edx dirty eax misfit sasi sfi sasi output movl edx dirty eax virtue constructed information provided gcc accurately characterize target program 
informal proof transformation suffices proceeds contradiction lines 
branch call return write instructions subvert security automaton simulation 
instruction accomplishes subversion 
branch call return write instruction code check instruction operand added sasi policy 
checking code immediately precede instruction assumption instruction accomplishes subversion checking code precedes reached executed 
transition predicates construction accurate checking code precedes prevent instruction executing 
assumption able execute subvert security automaton simulation contradicted 
code generated gcc indirect stack register ebp ebp guaranteed gcc point valid location stack 
sasi prototype exploits fact avoid run time checks indirect ebp employing implementation exploits assumptions gcc ebp 
indirect ebp constitute significant fraction indirect memory executables produced gcc performance improvement avoiding checks significant 
exploiting assumptions code generated gcc order reduce cost enforcement mechanism expand tcb questionable trade 
sasi action memory protection policy security automata security policy implemented misfit special purpose sfi benchmark misfit sasi sfi page eviction hotlist logical log structured disk md message digest relative performance misfit sasi sfi transformation tool intel operating system extensions 
misfit constitutes benchmark performance sasi measured consequently set target systems run sasi additional sal input policy enforced misfit run misfit 
modifications misfit sasi target system different 
shows linux assembly output target operand right generated misfit sasi movl instruction transfers contents register edx integer array dirty position specified contents register eax 
code inserted sasi typeset slanted font original target system code typeset upright font 
notice misfit replaces original movl sasi prepends additional instructions 
ebx register usable saving contents stack efficiency sasi uses load time generated platform specific function determine processor flags saved instruction platform specific function constructed conservative data flow analysis sasi rewriter 
gives running times target systems processed misfit sasi prototype 
running times relative execution unmodified target system numbers shown averages standard deviation parentheses runs mhz pentium ii running linux 
page eviction hotlist benchmark memory intensive application surprisingly high overhead implementations checking code ex fact chose sasi assumption ebp compare performance sasi misfit assumption 
misfit sasi require stack space available saving ebx register 
ensured load time 
experts observe code misfit contains subtle bug 
array dirty overlaps stack value register ebx overwritten resides stack 
intel architecture contains processor flags implicitly changed instructions rare cases saved stack ebx register 
indirect memory access 
shows sasi misfit produce target systems having comparable performance 
target systems misfit performs considerably better 
regard discouraging misfit specialized tool customized enforce specific policy misfit optimizes code adds 
believe adding additional analysis optimization capabilities sasi rewriter improve relative performance sasi 
importantly flexibility able enforce policy sasi attractive enforcement tool performance cost 
jvml prototype type safe languages jvml provide guarantees execution programs including guarantees imply simple policy violated 
program satisfy simple memory protection policy type safe 
jvml sasi prototype exploits type safety jvml programs prevent security automaton simulation corrupted target system resides 
particular variables jvml sasi adds jvml object program part security automaton simulation compromised program 
variables inaccessible program virtue names types 
code jvml sasi adds security automaton simulation circumvented jvml type safety prevents jumps unlabeled instructions security automaton simulation code segments constructed contain labels type safety jvml empowers jvml sasi user formulating security policy concerns application abstractions 
jvml instructions contain information classes objects methods threads types 
information available platform specific functions sal author security policy 
security policies jvml sasi define permissible computations terms application abstractions 
contrast code contain virtually information program represents author security policy sasi may forced synthesize application level events sequences object code instructions 
jvml sasi security policies rule indirect ways compromising variables circumventing code added policy enforcement 
example jvml dynamic class loading program reflection disallowed 
ldc state number state change state invokevirtual java io read read file state get current state number ifeq succeed start state goto succeed invokestatic fail violation succeed invokevirtual java net write send msg 
sasi jvml enforcement messages sent reading file jvml sasi action shows code produced jvml sasi prototype enforcing security policy defined corresponding security automaton prohibits sends file reads 
code inserted jvml sasi prototype typeset slanted font original target system code typeset upright font 
target system instruction invoke read method satisfies security automaton read predicate instruction prefixed security automaton simulation code code causes automaton transition state target system instruction invoke write method satisfies send predicate prefixed security automaton simulation code code halts application start current state security automaton 
gain understanding performance overhead policy enforcement jvml sasi prototype implement functionality sun java sm 
enforcement security automaton specifies checks performed exactly points java system libraries sun sm performs runtime security checks 
sal specification security automaton roughly pages long covers java lang java io java util 
ensure behavioral equivalence implementation sun calls java check functions sm 
implementation flexible sun sm check functions new check points added simply modifying security automaton 
modifying sm sun implementation requires new release java just subclassing sm places sm invoked fixed sun implementation 
jvml sasi implementation java turns quite efficient 
microbenchmarks compare security overhead implementation sm show statistical difference overhead 
approach possibility significantly cheaper sm 
sun sm invoked predefined points check succeed 
settings access checks known succeed say component trusted preexisting access control rights jvml sasi prototype add checking code rewriter simplify security automaton inserted 
data blast tar benchmarks suggest fourfold performance improvement expected checking code eliminated arguably realistic applications 
related sasi tool object code modification way enforcing security policies directed enforcing user defined security policies 
object code modification security policy enforcement system monitoring starting sds time sharing system berkeley 
directed enforcing various memory safety properties important maintaining integrity extensible systems extensions base system share single address space :10.1.1.142.4909
directed enforcing richer classes security policies java programs 
modifies method call instructions redirecting wrapper method ariel grimm bershad insert monitor code target system instructions 
object code modification overhead enforcement lowered object code target system constructed way obviates run time checks 
overhead lowered analysis object code identify redundant checks suppressed 
spin uses type safety avoid run time enforcement checks just sasi exploits structure gcc code jvml sasi exploits type safety guarantees provided jvml :10.1.1.117.6702
problem relying assumptions form object code impact tcb 
tools perform object code construction analysis enforcement depends part tcb flaw tool security vulnerability 
sasi prototypes depends compiler sal rewriter analysis object code 
software components written java part tcb sasi large complex 
sal lexer parser roughly lines partial evaluator adds lines 
sasi sal compiler approximately lines rewriter lines includes analyzer necessary constructing platform specific predicates 
jvml sasi sal compiler approximately lines jvml assembler lines disassembler lines complete picture components exist tcb jvm implementation 
note compiler produces jvml javac part tcb jvml sasi 
required type safety established checking jvml relatively simple analysis 
inexpensive analysis techniques object code active area research programming languages community potential payoff reducing overhead security policy enforcement 
efficient code certification ecc provides analysis method checking safety memory jump stack operations typed assembly language tal provides flexible typesafe assembly language prevents abstractions violated proof carrying code pcc generalizes type safety allow verification proofs expressive classes properties 
methods provide foundation realizations sasi suitably constructed high level language compiler variety platforms 
supporting user defined classes security policies expressiveness policy specification language crucial 
ariel grimm bershad security policies formulated language part processed java compiler 
doubt attractive java programmers security policies specified learning new language 
relying java compiler security policies compiler part tcb 
ability java formulating security policies allow systems employ additional state purposes policy enforcement considerably enlarging set security policies specified 
ariel grimm bershad insert checks jvml method constructor calls inserts checks java invocations 
restricts set enforceable security policies instructions target system halted 
instance tools enforce policies prohibit division zero restrict value directly accessible variable global flag implement stack access policy 
sasi enforce policies 
sasi retrospect developing sasi prototypes instructive feel sasi jvml sasi practical tool sal proven awkward language writing real security policies sal forces relevant execution history target system summarized single unstructured current state security automata 
values target system instances applicationlevel abstractions encoded order play role subsequent enforcement decisions 
awkward example write sal policy specifying character string sequence operations sal directly store strings automaton states 
changing sal enforcement state contain typed variables types may application level abstractions strings believe difficulty eliminated 
second difficulty sasi prototypes concerns events defining security policies 
monitor checks machine language instruction initially powerful basis defining application specific security policies 
practice power proved difficult harness 
object code example explicit application level abstractions manipulated code 
explicit notion function assembly language function calls searching code sequences resembling target system calling convention 
author security policy finds necessary embed disassembler event synthesizer sal security policy description 
awkward error prone 
solution build sasi modified high level language programs object code 
security automata merged program say target system merged object code produced compiler 
unattractive sasi modifies programs adds compiler tcb 
approach taken jvml sasi promising way demos tools available www 
access sasi cs cornell edu demo prototype sasi processor access sasi cs cornell edu prototype jvml sasi processor 
handle security policies involving application level abstractions 
advocate relying annotations object code easily checked expose application level abstractions 
current building second generation sasi tools concentrating jvml reason 
approach limited jvml code type safe high level languages 
object code include necessary annotations ecc tal approaches mentioned 
pleasantly surprised observe object code modifications affect program correctness 
high level languages programmer assembly language help prevent program correctness depending certain properties programs data placement relative offsets labels 
distance gives sasi latitude add enforcement code 
acknowledgments benefited lengthy discussions greg morrisett robbert van renesse members tacoma group cornell university 
discussions david evans helped sharpen arguments 
dexter kozen andrew myers david walker michal cierniak program committee provided helpful comments draft 
bershad savage pardyak sirer fiuczynski becker eggers chambers :10.1.1.117.6702
extensibility safety performance spin operating system 
proc 
symposium operating system principles sosp pages 
acm press december 
deutsch 
flexible measurement tool software systems 
information processing proc 
ifip congress pages 
acharya 
history access control mobile code 
proc 
th conf 
computer communications security may 
evans 
policy directed code safety 
proc 
ieee symposium security privacy may 
grimm bershad 
providing policy neutral transparent access control extensible systems 
jensen vitek editor secure internet programming security issues mobile distributed objects volume lecture notes computer science pages 
springer verlag 
jones gomard sestoft 
partial evaluation automatic program generation 
prentice hall 
kozen 
efficient code certification 
technical report tr cornell university january 
morrisett walker crary glew 
system typed assembly language extended version 
proc 
principles programming languages popl pages january 
necula 
proof carrying code 
proc 
principles programming languages popl pages january 
pandey 
providing fine grained access control mobile programs binary editing 
technical report tr university california davis august 
schneider 
enforceable security policies 
technical report tr cornell university january 
small 
tool constructing safe extensible systems 
proc 
rd conference object oriented technologies systems june 
small seltzer 
comparison os extension technologies 
proc 
usenix technical conference pages january 
wahbe lucco anderson graham 
efficient software fault isolation 
operating system review 

