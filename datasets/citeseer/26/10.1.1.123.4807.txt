commerce market formulations controlling resource allocation computational grid rich wolski james plank todd bryan computer science department university tennessee investigate commerce computational economies controlling resource allocation computational grid settings 
define hypothetical resource consumers representing users grid aware applications resource producers representing resource owners sell resources grid 
measure efficiency resource allocation different market conditions commodities markets auctions 
compare market strategies terms price stability market equilibrium consumer efficiency producer efficiency 
results indicate commodities markets better choice controlling grid resources previously defined auction strategies 

new computing paradigm known computational grid articulates vision distributed computing applications plug power grid computational resources execute dynamically drawing need global supply 
great deal research concerning software mechanisms necessary bring computational grids underway little focused resource control policies succeed 
grid resource allocation scheduling research paradigms centralized omnipotent resource control localized application control :10.1.1.102.2733:10.1.1.15.9060
certainly scalable solution second clearly lead unstable resource assignments grid aware applications adapt compete resources 
investigate commerce method dynamic grid resource allocation built notion supported part nsf eia eia aci 
john mathematics computer science department college holy cross market economy 
framing resource allocation problem economic terms attractive reasons 
resource usage free 
second dynamics grid performance response difficult model 
resource load fluctuates applications adjust resource usage machine speeds forming feedback control loop potentially non linear response 
formulating grid resource usage market terms able draw large body analytical research field economics apply understanding emergent grid behavior 
resource owners convinced federate resources grid able account relative costs benefits doing 
focus broad categories commerce formulations commodities markets auctions 
modeling grid commodities market natural grid strives allow applications treat disparate resources interchangeable commodities 
hand auctions require little way global price information easy implement distributed setting 
types economies studied strategies distributed resource brokering :10.1.1.1.7950
goal enhance deeper understanding economies fare resource brokering mechanisms computational grids 
evaluate commodities markets auctions respect criteria grid wide price stability market equilibrium application efficiency resource efficiency 
price stability critical ensure scheduling stability 
price fluctuates wildly application resource schedulers base decisions state economy follow suit leading poor performance ineffectiveness grid computational infrastructure 
equilibrium measures degree prices fair 
market brought equilibrium relative expense worth particular transaction trusted grid doing job 
application efficiency measures effective grid computational platform resource efficiency measures grid manages resources 
poor ap plication resource efficiency mean grid succeeding computational infrastructure 
remainder organized follows 
section discuss specific market formulations study 
section describes simulation methodology results obtain different hypothetical market parameterizations 
section conclude point 

commerce market economies grid formulating computational economy grid assume premise true relative worth resource determined supply demand 
assumption important rules pricing schemes arbitrarily decided priorities 
plausible scenarios policies appropriate users funded specific machine part individual research projects perspective grid resource allocation problem conditions solved 
assume relative worth price determined supply demand 
supply demand functions price relative worth determined optimization function space prices 
example consider price representative relative worth price point equalizes supply demand market equilibrium 
conversely non equilibrium price point supply equal demand price relative worth 
important aspect approach restrict definition currency rules governing supply 
users applications currency outside system expect inflationary price behavior market remain intact 
possible segregate computational consumers producers 
true market producers expected spend profits economy eventually 
believe results remain valid restricted case model producers consumers disjoint entities 
pragmatically simulate computational economy ultimately hypothesize supply demand functions simulated producers consumers respectively 
individual supply demand functions difficult measure best particularly existing computational grid economies 
admittedly satisfactory approach define supply demand functions represent simulated producer consumer self interest indi vidual consumer buys purchase deal consumer 
analogously producers sell sale best interest 
believe resource decisions self interest inescapable federated resource system 

producer models simulate different commodity producers study cpu disk storage 
set simulated producers compare commodity auction market settings 
results generalize include variety commodities networks special problem 
moment ignore networks allow cpu disk requests serviced provider regardless network connectivity 
study cpu represents computational engine fixed speed 
cpu producer agrees sell grid number fixed slots cpu controls 
number slots depends speed producer cpu faster cpu provide slots slower fraction cpu producer wishes supply grid 
job occupies cpu guaranteed get percentage cpu provide dedicated speed 
cpu producer differs total number slots willing sell grid 
determine supply price point cpu calculates total amount grid currency referred pronounced grid incrementing clock total number process slots cpu owner willing support 
value average time unit slot cpu selling grid 
study cpu producers sell current price cpu slot exceeds value sell sell unoccupied slots 
cpu sell available slots turn profit slot respect average profit time 
model disk producer similar cpu producer disks sell number fixed sized files applications may storage 
calculation disk files total number files disk producer willing sell grid 
current price file greater disk producer sell available files 
note resolution cpu slots file sizes variable 
markets transact business com level hypothesize real implementation grid need larger scale aggregations resources reasons efficiency 
simulations described section choose values aggregations believe reflect market formulation currently implementable 

consumers jobs consumers express needs market form jobs 
job specifies size occupancy duration resource consumed 
consumer sports budget pay resources needed jobs 
consumers initial budget periodic allowance allowed hold period 
method budget refresh inspired allocation policies currently nsf partnerships advanced computational infrastructure allocations 
consumer wishes purchase resources job declares size request commodity duration 
time producer agrees sell consumer price fixed charged consumer simulated time unit job completes 
consider example consumer wishing buy cpu slot simulated minutes disk file simulated minutes service particular job 
consumer wishes buy particular price declares market demand cpu slot disk slot reveal minute durations 
cpu producer wishing sell cpu price agrees accept job job completes consumer budget goes zero disk producer disk job 
sales consumer budget decremented agreed price simulated minute producer revenue account incremented amount 
job completes cpu producer accrued times cpu price disk producer accrued times disk price consumer budget decremented sum times cpu price times disk price 
defining method conducting resource transactions assumptions 
assume actual grid setting resource producers suppliers commit fraction resource grid fraction slowly changing 
committed fraction belongs grid producers concerned occupancy 
assuming consumers producers malicious honor commitments 
practice requirement satisfied secure authentication methods libraries 
consumer demand function somewhat com plex cpu disk supply functions 
consumers purchase cpu disk resource job wish run 
afford request type express demand 
demand functions cpu disks strongly correlated supply functions 
relationship supply demand functions constitutes difficult market conditions 
market systems weaker assumptions difference correlation 
addressing difficult case believe closely resembles realized practice 
determine demand price consumer calculates average rate spent jobs run far charged current price 
computes spend simulated time unit budget refresh 
computes total amount performed far commodity current price commodity amount left spend budget refresh budget refresh time current time 
greater equal consumer express demand 
note demand function consider past price performance 
consumers act opportunistically amount money left spend budget refresh 
consumers simulations generate function time 
arbitrarily fix simulated period simulated day day consumer generates random number jobs 
doing hope model diurnal user behavior typical large scale computational settings 
addition consumer generate single new job time step pre determined probability 
consumers maintain queue jobs waiting service accepted producers 
calculating demand compute demand jobs queue afford 
summarize commerce simulations entities market maker act individually respective self interests producers consider long term profit past performance deciding sell consumers periodic budget spend opportunistically consumers introduce loads bulk simulated day randomly day 
believe combination characteristics captures producer consumer traits real grid settings 

commodities markets dynamic pricing implement market economy require pricing methodology produces system price adjustments bring market equilibrium equalizes supply demand 
theoretical standpoint market economy system involving producers consumers commodities supply demand functions commodity determined set market prices various commodities 
unique equilibrium price guaranteed exist framework theorem debreu chapter proof non constructive involves topological methods 
smale produced means proving existence equilibrium entails scheme price adjustments reach 
commodity prices represented price vector stands price commodity define excess demand commodity demand minus supply 
defined may positive negative negative excess demand interpreted simply excess supply 
assume markets commodities may interrelated function prices vector smale theorem says market consisting interrelated commodities price vector associated excess demand vector equilibrium point exists 
value form matrix partial derivatives value sign determinant obtain economic equilibrium obeying differential equation observe applying euler discretization positive integer values reduces process newton raphson method solving reason smale refers process global newton obtaining partial derivatives necessary carry smale process actual economy impossible framework simulated economy able get approximations partials price vector polling producers consumers 
refer conveniently somewhat inaccurately price adjustment scheme smale method 
obvious drawback scheme relies polling aggregate supply demand repeatedly obtain partial derivatives excess demand functions 
practice wish assume polling information available 
theoretically attractive way circumvent difficulty approximate excess demand function polynomial fits price excess demand vectors partial derivatives polynomials equation 
simulations method general produce prices approach equilibrium 
bank price adjustment scheme practicable gives results scheme involves prices get close equilibrium sense excess demands sufficiently small absolute value polynomial method fine tuning bank approximates smale method implementable real world grid settings hypothesizes excess demand functions need poll market 
experience fairly high degree polynomials required capture excess demand behavior sharp discontinuities described 
simulations described section degree polynomial 

auctions auctions extensively studied resource allocation strategies distributed computing systems 
typical auction system resource producers typically cpu producers auction centralized auctioneer sealed bid second price auctions :10.1.1.1.7950
auction variants described 
consumers simply desire commodity example cpus popcorn auctions provide convenient straightforward mechanism clearing marketplace 
application consumer grid computing scenario desires multiple commodities place simultaneous bids multiple auctions may successful 
happens expend currency resources obtained waits obtain 
commodities market presents application resource worth terms price allowing application meaningful scheduling decisions auction unreliable terms pricing ability obtain resource may result poor scheduling decisions inefficiency consumers 
gain better understanding auctions fare comparison commodities markets implement simulation auction resource allocation mechanism computational grids 
time step cpu disk producers submit unused cpu file slots cpu disk auctioneer 
accompanied minimum selling price average profit slot detailed section 
consumers demand function described section define bid prices long money bid job job bid bid commodity needed oldest job 
auctioneers received bids time step cycle commodities random order performing second price auction commodity 
auction highest bidding consumer gets commodity bid price greater commodity minimum price 
second highest bidder price commodity average commodity minimum selling price consumer bid price 
auctions manner commodity process repeated time step 
note structuring auctions requires consumer job currently bidding 
obtains resources job immediately starts bidding job 
time step expires auctions time step completed may consumers jobs resources allocated unallocated result failed bidding 
consumers pay allocated resources wait start bidding time step 
auctions determine transaction prices individual bids supply demand functions producers consumers set ask bid prices functions commodities market formulations 
compare market behavior individual producer consumer behavior auction commodity market settings 

simulations results compare commodities markets auctions producers consumers described section market settings 
term demand producers average capable supporting demand service jobs consumers afford 
recall markets include resale components 
consumers money 
periodically way machine time allocations 
similarly producers spend money 
gathered 
demand case corresponds working cpus disks cpu slots cpu 
disk files disk 
cpu job length 
time units disk job length 
time units simulated day time units allowance period 
days jobs submitted day break 
new job probability allowance bank polynomial degree factor table 
invariant simulation parameters study grid economy allocations correctly match available resources 
rate allocated consumers roughly matches rate introduce grid 
demand case consumers wish buy resource available 
generate fast keep producers completely busy creating back log 
table completely describes invariant simulation parameters chose cases 
demand simulation defined consumers cpus disks consumer submitted random number jobs day break chance submitting new job time unit 
demand simulation specified consumers parameters held constant 
simulated markets wish investigate questions respect commodities markets auctions theoretical results smale apply plausible grid simulations 
approximate smale method practically implementable 
auctions commodities markets better choice grid computational economies 
smale results apply dictate equilibrium price point exist commodity market formulation provide methodology finding prices price point 
assuming smale results apply wish explore methodologies achieve smale results implementable real grid settings 
lastly grid economies previous computational economic settings centered auctions appropriate market formulation :10.1.1.42.8707:10.1.1.102.2733
wish determine commodities markets better alternative auctions 

market conditions shows cpu disk prices smale method simulated grid economy time units 
diurnal nature consumer job submission price time 
smale prices case 
solid line cpu price dotted line disk price evident price fluctuations 
minutes consumer generates new jobs causing demand prices spike 
smale method able find equilibrium price commodities quickly evidenced 
notice ex excess demand time 
smale cpu excess demand demand case 
units cpu slots 
cess demand spikes conjunction diurnal load quickly brought zero pricing shown hovers cycle 
disk excess demand similar omitted brevity 
market equilibrium quickly achieved despite cyclic non smooth aggregate supply demand functions implemented producers consumers 
show pricing determined engineering approximation smale method bank see section details 
bank price time 
bank prices case 
solid line cpu price dotted line disk price ing closely approximates theoretically achievable results generated smale method simulated environment 
shows cpu excess demand measures generated bank pricing simulated period 
excess demands commodities tightly controlled smale method bank keeps prices near equilibrium 
pricing determined auctions quite different depicted show cpu price disk price identical 
show average price paid consumers cpu auction round 
average price auctions representative global market price 
price smoothed average consumers pay pay time step shows considerably variance commodity market set prices 
spikes workload reflected price variance increase price stable time 
furthermore disk pricing shown virtually identical 
disk resources plentiful simulations disk prices excess demand time 
bank cpu excess demand demand case 
units cpu slots 
lower healthy economy 
auction fails capture relationship commodities market theoretically practically correctly determines higher price scarce resource 
excess demand auction difficult measure prices negotiated individual buyers sellers 
approximation consider sum unsatisfied bids number auctions sale measure market equilibrium 
absolute value measure fulfills notion absolute excess demand auction 
terms absolute excess demand auctions set prices satisfy market 
space reasons results viewed full 
graphs conclude smale method appropriate modeling hypothetical grid market bank reasonable implementable approximation method 
results somewhat surprising discrete sharply changing supply demand functions producers consumers 
smale proofs assume continuous functions readily available partial derivatives 
note attractive implementation standpoint produce stable pricing market equilibrium 
grid resource allocation decisions auctions share instability lack fairness 
conversely commodities market formulation simulation performs better standpoint grid 
results agree reported indicate auctions locally advantageous may exhibit volatile emergent behavior system wide 
demanded market case increased price time min auctions cpu 
auction prices case average cpu price number consumers leaving parameters fixed 
results similar prompting omit bulk full results available 
current purposes assert case smale method provided price stability tight control excess demand bank closely approximated smale method 
auctions generated unstable price series provided poor control excess demand 

efficiency commodities markets smale method price determination appear offer better theoretical simulated economic properties equilibrium price stability auctions wish consider effect pricing schemes producer consumer efficiency 
report average percentage time resource occupied utilization metric suppliers average number jobs minute consumer able complete consumer metric 
table summarizes values demand cases 
terms efficiency smale method best bank achieves results 
significantly better auction metrics disk utilization demanded case 
general smale method bank approximation outperform auction simulated grid setting 
efficiency metric demand smale consumer jobs min consumer jobs min auction consumer jobs min smale cpu utilization cpu utilization auction cpu utilization smale disk utilization disk utilization auction disk utilization table 
consumer producer efficiencies 
investigate market strategies setting prices computational economy commodities markets auctions 
commodities markets natural choice fundamental tenets grid 
auctions simple implement widely studied 
interested methodology appropriate grid settings 
investigate question examine price stability market equilibrium producer efficiency consumer efficiency achieved methods simulation 
results show smale results hold simulated grid environment despite badly behaved excess demand functions bank achieves results slightly desirable 
cases auctions inferior choice 
abramson giddy foster 
high performance parametric modeling nimrod killer application global grid proceedings intl 
parallel distributed processing symposium may 
freisleben 
scheduling parallel applications networks mixed uniprocessor multiprocessor workstations 
proceedings isca th conference parallel distributed computing september 
berman chien cooper dongarra foster dennis gannon kennedy kesselman reed torczon wolski 
grads project software support high level grid application development 
technical report rice rice university february 
berman wolski schopf shao 
application level scheduling distributed heterogeneous networks 
proceedings supercomputing 
kotz rus 
market resource control mobile agents 
second intl 
conf 
autonomous agents pages 
acm press may 
kotz rus 
utility driven mobile agent scheduling 
technical report pcs tr dartmouth college computer science hanover nh october 
casanova dongarra 
netsolve network server solving computational science problems 
intl 
supercomputer applications high performance computing 
casanova berman wolski 
apples parameter sweep template user level middleware grid 
proceedings sc november 
cheng wellman 
walras algorithm convergent distributed implementation general equilibrium outcomes 
computational economics 
chun culler 
market proportional resource sharing clusters 
millenium project research report www cs berkeley edu bnc papers market pdf sep 
debreu 
theory value 
yale university press 
foster kesselman 
globus metacomputing infrastructure toolkit 
intl 
journal supercomputer applications 
foster kesselman 
grid blueprint new computing infrastructure 
morgan kaufmann publishers 
foster roy winkler 
quality service architecture combines resource reservation application adaptation 
proceedings networking conference 
appear 

mars framework minimizing job execution time metacomputing environment 
proceedings general computer systems 
grimshaw wulf french weaver reynolds 
legion logical step nationwide virtual computer 
technical report cs university virginia 
nisan london regev 
globally distributed computation internet popcorn project 
intl 
conf 
distributed computing systems 
rajkumar 
home page www org projects xml html 
smale 
dynamics general equilibrium theory 
american economic review may 
smale 
convergent process price adjustment global newton methods 
contributions economic analysis 
tannenbaum litzkow 
condor distributed processing system 
dr journal february 
waldspurger hogg huberman kephart stornetta 
spawn distributed computational economy 
ieee trans 
software engineering february 
walras 
elements pure economics theory social wealth 
allen unwin 
wolski plank bryan 
commerce market formulations controlling resource allocation computational grid 
technical report ut cs university tennessee october 
