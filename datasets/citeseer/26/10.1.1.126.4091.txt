legion avaki persistence vision andrew grimshaw anand marty humphrey michael lewis anh nguyen john mark morgan adam ferrari grids academic projects commercial ventures 
avaki leading commercial vendor grids roots legion grid project university virginia begun 
chapter fundamental challenges requirements grid architectures believe universal architectural philosophy addressing requirements overview legion production systems synopsis legion architecture implementation 
describe history transformation legion academic research project avaki commercially supported marketed product 
design principles vision underlying legion continued employed avaki 
product sold customers avaki robust easily manageable easier configure legion expense eliminating features tools immediate customers 
place legion context standards effort underway global grid forum 
partially supported darpa navy contract doe de fg er doe contract sandia ld dod pet program doe darpa ga sc nsf ngs eia nsf npaci asc nasa ipg 
grids outlined vision wide area distributed computing years science fiction writers featuring worldwide networks interconnected computers behave single entity 
science fiction just 
technological changes occurring may expand computational power way invention desk top calculators personal computers 
near computationally demanding applications longer executed primarily supercomputers single workstations local data sources 
enterprise wide systems someday nationwide systems consist workstations vector supercomputers parallel supercomputers connected local wide area networks 
users illusion single powerful computer collection disparate machines 
system schedule application components processors manage data transfer provide communication synchronization manner dramatically improve application performance 
boundaries computers invisible location data failure processors 
decade research development grid community see grids called deployed world academic settings production commercial 
chapter describes major grid projects decade legion roots academic grid project current status commercial complete grid offering avaki marketed cambridge massachusetts called avaki 
discussion fundamental requirements grid architecture 
fundamental requirements continue guide evolution grid software 
principles philosophy underlying design legion 
briefly legion grid looks administrators users 
introduce architectural features legion delve slightly deeper implementation order give intuitive understanding grids legion 
detailed technical descriptions abound literature 
brief history legion avaki order place preceding discussion context 
conclude look legion avaki fit emerging standards 
grid architecture requirements grid 
required grid 
answer questions step back define grid essential attributes 
definition popular definition grid system collection distributed resources connected network 
grid system called grid gathers resources desktop hand held hosts devices embedded processing resources digital cameras phones tera scale supercomputers accessible users applications order reduce overhead accelerate projects 
grid application defined application operates grid environment grid system 
grid system software middleware software facilitates writing grid applications manages underlying grid infrastructure 
resources grid typically share characteristics numerous 
owned managed different potentially mutually organizations individuals 
potentially faulty 
different security requirements policies 
heterogeneous different cpu architectures running different operating systems different amounts memory disk 
connected heterogeneous multilevel networks 
different resource management policies 
geographically separated campus enterprise continent 
grid enables users collaborate securely sharing processing applications data systems characteristics order facilitate collaboration faster application execution easier access data 
concretely means able find share data 
users need access data systems networks simply able access data system 
system boundaries useful invisible users granted legitimate access information 
find share applications 
leading edge development engineering research efforts consists custom applications permanent experimental new legacy public domain proprietary 
application requirements 
application users jump get applications data sets needed analysis 
share computing resources 
sounds simple group computing cycles colleagues group need 
group able access computing power compromising rest network 
grid computing ways novel way construct applications 
received significant amount press attention wave computing 
guises peer peer systems distributed systems grid computing requirements tools meet requirements development decades 
grid computing requirements address issues frequently confront developer trying construct applications grid 
novelty grids requirements addressed grid infrastructure order reduce burden application developer 
requirements security 
security covers gamut issues including authentication data integrity authorization access control auditing 
grids accepted corporate government departments wide range security concerns addressed 
security mechanisms integral applications capable supporting diverse policies 
furthermore believe security firmly built 
trying patch security afterthought systems attempting today fundamentally flawed approach 
believe single security policy perfect users organizations 
grid system mechanisms allow users resource owners select policies fit particular security performance needs meet local administrative requirements 
global name space 
lack global name space accessing data resources significant obstacles wide area distributed parallel processing 
current multitude disjoint name spaces greatly impedes developing applications span sites 
grid objects able access subject security constraints grid object transparently regard location replication 
fault tolerance 
failure large scale grid systems fact life 
hosts networks disks applications frequently fail restart disappear behave unexpectedly 
forcing programmer predict handle failures significantly increases difficulty writing reliable applications 
faulttolerant computing known difficult problem 
addressed businesses researchers data grid computing 
accommodating heterogeneity 
grid system support interoperability heterogeneous hardware software platforms 
ideally running application able migrate platform platform necessary 
bare minimum components running different platforms able communicate transparently 
binary management 
underlying system keep track executables libraries knowing ones current ones persistent states installed upgrades installed 
tasks reduce burden programmer 
multi language support 
joke don know language ll year ll called fortran fortran lasted years 
diverse languages legacy applications need support 
scalability 
computers world today network attached devices including computers 
scalability clearly critical necessity 
architecture relying centralized resources doomed failure 
successful grid architecture strictly adhere distributed systems principle service demanded component independent number components system 
words service load component increase number components increases 
persistence 
ability read write persistent data critical order communicate applications save data 
current files file libraries paradigm supported familiar programmers 
extensibility 
grid systems flexible satisfy current user demands unanticipated needs 
feel mechanism policy realized replaceable extensible components including especially core system components 
model facilitates development improved implementations provide value added services site specific policies enabling system adapt time changing hardware user environment 
site autonomy 
grid systems composed resources owned organizations desire retain control resources 
resource owner able limit deny particular users specify sites able choose rewrite implementation legion component best suits needs 
site may trust security mechanisms particular implementation freely able implementation 
complexity management 
importantly complexity management biggest challenges large scale grid systems 
absence system support application programmer faced confusing array decisions 
complexity exists multiple dimensions heterogeneity policies resource usage security range different failure modes different availability requirements disjoint namespaces identity spaces sheer number components 
example professionals experts remember details different file systems directory hierarchies mention multiple user names passwords order access files regular basis 
providing programmer system administrator clean abstractions critical reducing cognitive burden 
solving requirements task grid infrastructure 
architecture grid thought principles required order address requirements 
section discuss principles underlying design grid system legion 
legion principles philosophy legion grid architecture operational infrastructure development university virginia 
architecture addresses requirements previous section builds lessons learned earlier systems 
defer discussion history legion transition commercial product named avaki section 
focus design principles philosophy legion encapsulated rules provide single system view 
today operating systems maintain illusion local area network single computing resource 
move local network cluster geographically dispersed group sites consisting different types platforms illusion breaks 
researchers engineers product development specialists want experts computer technology request access appropriate manage multiple passwords remember multiple protocols interaction keep track located aware specific platform dependent limitations file big copy transfer system application runs certain type computer 
re creating illusion single computing resource heterogeneous distributed resources reduces complexity system provides single namespace 
provide transparency means hiding detail 
grid systems support traditional distributed system transparencies access location heterogeneity failure migration replication scaling concurrency behavior 
example users programmers know object located order access location migration transparency need know component country failed want system recover automatically complete desired task failure transparency 
traditional way mask various aspects underlying system 
transparency addresses fault tolerance complexity 
provide flexible semantics 
objective grid architecture suitable users purposes possible 
rigid system design policies limited trade decisions pre selected semantics predetermined hard coded achieve goal 
dictated single system wide solution technical objectives outlined preclude large classes potential users uses 
legion allows users programmers flexibility possible applications semantics resisting temptation dictate solutions 
possible users select kind level functionality choose trade offs function cost 
philosophy manifested system architecture 
legion object model specifies functionality implementation system core objects core system consists extensible replaceable components 
legion provides default implementations core objects users obligated 
encourage users select construct object implementations answer specific needs 
default user think 
general classes users grids users applications applications developers system administrators managers trying accomplish mission available resources 
believe users want focus jobs applications underlying grid plumbing infrastructure 
example run application user may type legion run application data command shell 
grid take care messy details finding appropriate host execute application moving data executables course user may optionally aware specify override certain behaviors example specify architecture run job name specific machine set machines replace default scheduler 
reduce activation energy 
typical problems technology adoption getting users 
difficult shift new technology users tend take effort try need immediate extremely compelling 
problem unique grids human nature 
important goals technology easy 
analogy chemistry keep activation energy adoption low possible 
users easily readily realize benefit grids get reaction going creating self sustaining spread grid usage organization 
principle manifests features recompilation applications ported grid support mapping grid local operating system file system 
variant concept play pay 
basic idea need feature encrypted data streams fault resilient files strong access control pay overhead 
change host operating systems 
organizations permit machines operating systems replaced 
experience mentat indicates building grid top host operating systems viable approach 
change network interfaces 
just accommodate existing operating systems assume change network resources protocols 
require grids run privileged mode 
protect objects resources grid users sites require grid software run lowest possible privileges 
focus primarily technical issues chapter recognize important political sociological economic challenges developing deploying grids developing scheme encourage participation resource rich sites discouraging free riding 
politics overwhelm technical issues 
legion day day operations legion comprehensive grid software enables efficient effective secure sharing data applications computing power 
addresses technical administrative challenges faced organizations research development engineering groups computing resources disparate locations heterogeneous platforms multiple administrative jurisdictions 
legion enables diverse distributed resources treated single virtual operating environment single file structure drastically reduces overhead sharing data executing applications utilizing available computing power regardless location platform 
central feature legion single global name space 
legion name hosts files directories groups security schedulers applications name regardless name regardless named object resides point time 
sections term legion mean academic project university virginia commercial product avaki distributed avaki legion helps organizations create compute grid allowing processing power shared data grid virtual single set files accessed regard location platform 
fundamentally compute grid data grid product distinction solely purposes exposition 
legion unique approach maintains security network resources reducing disruption current operations 
increasing sharing reducing overhead implementing low disruption legion delivers important efficiencies translate reduced cost 
start somewhat typical scenario appear user 
suppose small grid shown sites different departments partner site vendor site 
sites load management systems partner platform computing load sharing facility lsf software department sun grid engine sge 
assume mix hardware grid linux hosts solaris hosts aix hosts windows tru unix 
data interest different sites 
user sits terminal authenticates legion logs runs command legion run application data legion default determine binaries available find select host execute application manage secure transport credentials interact local operating environment selected host sge tm queue create accounting records check see current version application installed install move data necessary return results user 
user need know application resides execution occurs file data physically located myriad details takes execute application 
course user may choose aware specify override certain behaviors example specify architecture run job name specific machine set machines replace default scheduler 
example user exploits key features global name space 
specifies terms global name space names processors applications queues data files directories 
name regardless location user name location named entity 
wide area access data 
named entities including files mapped local file system directory structure workstation making access grid transparent 
access distributed heterogeneous computing resources 
legion keeps track binary availability current version 
single sign 
user need keep track multiple accounts different sites 
legion supports policies require local account site access data execute applications policies require local accounts 
policy administration resource base 
administration important application execution 
accounting resource usage information auditing purposes 
legion monitors maintains rdbms accounting information application host starting 
fine grained security protects resources 
failure detection recovery 
legion grid capabilities global namespace wide area data access distributed processing policy administration resource accounting fine grained security automatic failure detection recovery lsf queue users wide area access data processing application resources single uniform operating environment secure easy administer applications application server data desktop cluster application partner department sge queue department vendor creating administering legion grid legion enables organizations collect resources applications computing power data single virtual operating environment 
set shared resources called legion grid 
legion grid represent resources homogeneous platforms single site single department resources multiple sites heterogeneous platforms separate administrative domains 
legion ensures secure access resources grid 
files participating computers part grid shared explicitly available grid 
shared legion fine grained access control prevent unauthorized access 
subset resources shared example processing power certain files directories 
resources shared visible grid users 
token user individual computer network participates grid automatically grid user automatically access grid files 
users explicitly granted access take advantage shared resources 
local administrators may retain control computers time day load conditions 
local resource owners control access resources 
grid created users think computer directory structure batch processing protocol 
need know individual files located physically platform type security domain 
legion grid administered different ways depending needs organization 

single administrative domain 
resources grid owned controlled single department division convenient administer centrally 
administrator controls resources available grid access resources 
case may separate administrators different sites responsible routine maintenance local systems 

federation multiple administrative domains 
resources part multiple administrative domains case multiple divisions companies cooperating project control left administrators local networks 
define resources available grid access 
case team responsible collaboration provide necessary information system administrators responsible initial establishment grid 
legion little intrinsic need central administration grid 
resource owners administrators resources define access 
initially administrators cooperate order create grid simple matter management controls organization wants put place 
addition legion provides features specifically convenience administrators want track queues processing grid 
legion monitor local remote load information systems cpu idle time load average factors machine grid 
add resources queues remove system interruption dynamically configure resources policies schedules 
log warnings error messages filter severity 
collect resource usage information user file application project level enabling grid wide accounting 
create scripts legion commands automate common administrative tasks 
legion data grid data access critical application organization 
legion data grid greatly simplifies process interacting resources multiple locations multiple platforms multiple administrative domains 
users access files name typically pathname legion virtual directory 
need know physical location files 
basic concepts understand legion data grid data accessed data included grid 
data access data access mechanisms legion aware nfs server called data access point dap set command line utilities legion libraries mimic stdio libraries 
dap access dap provides standards mechanism access legion data grid 
commonly mechanism access data data grid 
dap server responds nfs protocols interacts legion system 
nfs client host mounts dap effectively maps legion global name space local host file system providing completely transparent access data grid installing legion software 
dap typical nfs server 
actual disk file system interacts set resources may distributed owned multiple organizations firewalls second dap supports legion security mechanisms access control signed credentials interactions data grid encrypted 
third dap caches data aggressively configurable local memory disk caches avoid wide area network access 
dap modified exploit semantic data carried meta data file object cacheable cacheable coherence window size 
effect dap provides highly secure wide area nfs 
avoid obvious hot spot single dap site legion encourages deploying dap site 
extremes dap site dap host 
obvious tradeoff scalability shared cache effects extremes added security benefit having dap host 
nfs traffic client dap typically unencrypted restricted host 
dap configured accept requests local host eliminating classic nfs security attacks network spoofing 
command line access legion data grid accessed set command line tools mimic unix file system commands ls cat legion analogues legion ls legion cat unix syntax intended mask complexity remote data access presenting familiar semantics users 
libraries legion provides set libraries mimic stdio libraries 
functions open fread analogues open fread 
libraries applications need stricter coherence semantics offered nfs access 
library functions operate directly relevant file directory object operating dap caches 
data inclusion data inclusion mechanisms copy mechanism copy file grid container mechanism copy file container grid share mechanism data continues reside original machine accessed grid 
needless say inclusion mechanisms completely orthogonal access mechanisms discussed earlier 
copy inclusion common way including data legion data grid copying grid legion cp command 
command creates grid object service enables access data stored copy original file 
copy data may reside grid may migrate grid 
container inclusion data may copied grid container service 
mechanism contents original file copied container object service enables access 
container mechanism reduces overhead associated having service file 
data may migrate grid 
share inclusion primary means including data legion data grid legion export dir command 
command starts daemon maps file rooted directory unix windows nt data grid 
example legion export dir data home grimshaw share data maps directory data windows machine data grid home grimshaw share data 
subsequently files subdirectories data accessed directly peer peer fashion data grid subject access control going sort central repository 
legion share independent implementation underlying file system direct attached disk unix nt nfs mounted file system file system hierarchical storage management system 
combining shares effectively federates multiple directory structures file system shown 
note may needed scalability reasons 
linux linux local data legion data grid nt nt legion dap data mapped legion grid share local data solaris solaris provides secure multi lan wan access nfs semantics exploiting data integrity transactional semantics underlying file systems local data distributed processing research engineering product development depend intensive data analysis large simulations 
environments requires computation intensive data analysis executing specific applications may complex specific input data files may large numerous create result files may large numerous 
successful job execution data application available sufficient processing power disk storage available application requirements specific operating environment met 
typical network environment user know file application resources sufficient complete 
order achieve acceptable performance user administrator move data files applications physical location 
legion users need concerned issues cases 
users single point access entire grid 
users log define application parameters submit program run available resources may spread distributed sites multiple organizations 
input data read securely distributed sources necessarily copied local disk 
application complete computational resources cleared application output written physical storage resources available grid 
legion distributed processing support includes features listed 
automated resource matching file staging legion grid user executes application referencing file application name 
order ensure secure access implement necessary administrative controls predefined policies govern applications may executed applications run data files 
avaki matches applications queues computing resources different ways access controls 
example user application may may access specific queue specific host computer 
matching application requirements host characteristics 
example application may need run specific operating system require particular library installed require particular amount memory 
prioritization 
example policies load conditions 
legion performs routine tasks needed execute application 
example legion move stage data files move application binaries find processing power needed long resources included grid policies allow 
data file application migrated order execute job legion automatically user need move files know job executed 
users need worry finding machine application run finding available disk space copying files machine collecting results job done 
support legacy applications modification necessary applications legion grid written language need specific api run grid source code modification recompilation 
applications run grid regard location platform long resources available match application needs 
critical commercial world sources third party applications simply available 
batch processing queues scheduling legion users execute applications interactively submit queue 
queues grid group resources order take advantage shared processing power sequence jobs business priority processing power run immediately distribute jobs available resources 
queues permit allocation resources groups users 
queues help insulate users having know jobs physically run 
users check status job grid having know processed 
administrator tasks simplified legion grid managed single system 
administrators monitor usage network 
preempt jobs re prioritize re queue jobs take resources grid maintenance add resources grid interrupting progress 
establish policies time windows load conditions job limits 
policies time windows hosts available processing certain groups outside business hours outside peak load times 
policies number jobs currently running current processing load affect load balancing offloading jobs machines 
unifying processing multiple heterogeneous networks legion grid created individual computers local area networks clusters enabled software lsf sge 
queuing systems load management systems scheduling systems place legion interoperate create virtual queues allowing resources shared clusters 
approach permits unified access disparate heterogeneous clusters yielding grid enables increased level sharing allows computation scale required support growing demands 
security security designed legion architecture implementation 
legion robust security result separate capabilities authentication authorization data integrity implement enforce security policy 
grid resources goal legion security approach eliminate need software security controls substantially reducing overhead sharing resources 
legion security place users need know sign protocol grid pathname files located 
accesses resources mediated access controls set resources 
ll describe security implementation detail 
details legion security model available literature 
automatic failure detection recovery service routine maintenance common large system 
times resources may unavailable 
legion grid robust fault tolerant 
computer goes legion migrate applications computers predefined deployment policies long resources available match application requirements 
cases migration automatic unobtrusive 
legion capable advantage resources grid helps organizations optimize system utilization reduce administrative overhead fulfill service level agreements 
legion provides fast transparent recovery outages 
event outage processing data requests rerouted locations ensuring continuous operation 
hosts jobs queues automatically back current state enabling restart minimal loss information power outage system interruption occurs 
systems reconfigured dynamically 
computing resource taken offline routine maintenance processing continues resources 
resources added grid access changed interrupting operations 
legion migrates jobs files needed 
job execution host unavailable restarted job automatically migrated host restarted 
host taken grid reason administrators migrate files host affecting pathnames users 
requests file rerouted new location automatically 
legion grid architecture covers legion object system comprised independent objects disjoint logical address space communicate method invocation method calls non blocking may accepted order called object 
method signature describes parameters return values 
complete set signatures object describes object interface determined class 
legion class interfaces described interface description language idl currently supported legion corba idl mpl bfs object fortran interface language 
communication supported parallel applications legion implementation mpi libraries 
legion mpi supports cross platform cross site mpi applications 
things interest system example files applications application instances users groups objects 
legion objects name state may may persist meta data name tuples associated state interface heart legion level global naming scheme security built core 
top level names human names 
commonly path names home grimshaw sequences seq 
path names people see 
path names map location independent identifiers called 
extensible self describing data structures include part name rsa public key private key part object state 
consequently objects may authenticate communicate securely need trusted third party 
map object addresses contain location specific current addresses communication protocols 
object address may change time allowing objects migrate system 
legion object belongs class class legion object 
objects export common set object mandatory member functions deactivate ping necessary implementing core legion services 
class objects export additional set member functions enable manage instances 
legion object model power comes role legion classes sizeable amount usually considered system level responsibility delegated user level class objects 
example classes responsible creating locating instances selecting appropriate security object placement policies 
legion core objects provide mechanisms allow user level classes fact legion object preclude non object oriented languages non object oriented implementations objects 
fact legion supports objects written traditional procedural languages fortran object oriented languages java mentat programming language mpl dialect extensions support parallel distributed computing 
note similarity ogsa model resource name state interface 
long history languages true 
interpreted languages form directly perl python shell scripts compiled form byte code executed virtual machine interpreter ucsd pascal java 
implement chosen policies algorithms 
encapsulate system level policy extensible replaceable class objects supported set primitive operations exported legion core objects 
effectively eliminates danger imposing inappropriate policy decisions opens wider range possibilities application developer 
naming context paths object addresses distributed systems years access location migration failure replication transparencies implemented legion naming binding scheme 
legion level naming scheme 
top level consists human readable name spaces 
currently context space attribute space 
context directory object provides mappings user chosen string legion object identifier called loid 
loid refer context object file object host object type legion object 
direct object object communication loid bound low level object address oa meaningful transport protocol communication 
process mapped oas called legion binding process 
contexts contexts organized classic directory structure called context space 
contexts support operations lookup single string return mappings add mapping delete mapping 
typical context space known root context turn points contexts forming directed graph 
graph cycles recommended 
built set tools working manipulating context space example legion ls legion rm legion mkdir legion cat 
modeled corresponding unix tools 
addition libraries mimic stdio libraries doing sort operations contexts files creat unlink 
legion object identifiers legion object assigned unique immutable loid creation 
loid identifies object various services method invocation 
basic loid data structure consists sequence variable length binary string fields 
currently fields reserved system 
play important role loid object address binding mechanism field domain identifier dynamic connection separate legion systems second class identifier bit string uniquely identifying object class domain third instance number distinguishes object instances class 
instance number field length zero defined refer class objects 
fourth final field reserved security purposes 
specifically field contains rsa public key authentication encrypted communication named object 
new loid types constructed contain additional security information location hints information additional available fields 
object addresses legion uses standard network protocols communication facilities host operating systems support inter object communication 
perform communication legion converts location independent communication system level oas legion binding process 
oa consists list object address elements address semantic field describes list 
oa element contains parts bit address type field indicating type address contained oa address size format depend type 
address semantic field intended express various forms multicast replicated communication 
current implementation defines oa types consisting single oa element containing bit ip address bit port number bit unique id distinguish multiple sessions reuse single ip port pair 
oa udp data delivery layer 
similar uses tcp 
associations oas called bindings implemented tuples 
binding consists loid oa field specifies time binding invalid including 
bindings class entities passed system cached objects 
metadata legion attributes provide general mechanism allow objects describe rest system form metadata 
attribute tuple containing tag list values tag character string values contain data varies tag 
attributes stored part state object describe dynamically retrieved modified invoking object mandatory functions 
general programmers define arbitrary set attribute tags objects certain types objects expected support certain standard sets attributes 
example host objects expected maintain attributes describing architecture configuration state machine represent 
attributes collected meta data databases called collections 
collection object collects attributes set objects queried find objects meet specification 
collections organized directed acyclic graphs trees collection data flows aggregated large scale collections 
collections extensively resource discovery forms scheduling retrieve hosts minute load threshold 
security security important requirement grid infrastructures clients grids 
definitions security vary depending resource accessed level security desired 
general legion provides mechanisms security letting grid administrators configure policies mechanisms 
legion provides mechanisms authentication authorization data integrity confidentiality 
mechanisms flexible accommodate policies desired administrators 
legion explicitly accepts supports grids may comprise multiple organizations different policies wish maintain independent control resources trust single global administrator 
addition legion operates existing network security infrastructures network address translators nats firewalls 
firewall software legion requires port forwarding set 
set legion traffic sent single bi directional udp port opened firewall 
udp traffic sent firewall transmitted data protection modes described section 
addition legion provides sandboxing mechanism different legion users mapped different local unix windows users machine isolated grid system machine 
sandboxing solution permits generic ids legion users accounts machine continue access resources machine generic accounts 
recall contain rsa public key part structure 
naming identity combined legion 
public keys part object names objects legion communicate securely authenticate need trusted third party 
object generate sign credential 
grid components files users directories applications machines schedulers objects security policies just person component requesting action 
authentication users authenticate legion grid login paradigm 
logging requires specifying user name password 
user name corresponds authentication object user proxy grid 
authentication object holds user private key encrypted password user profile information part persistent state 
password supplied login compared password state authentication object order permit deny subsequent access grid 
state authentication object stored disk protected local operating system 
words legion depends local operating system protect identities 
consequently requires careful configuration place authentication objects reliable machines 
typical configuration authentication objects administrative domain restricted small number trusted hosts 
legion system neutral authentication mechanism 
past implementations possession valid kerberos credential evidence identity opposed password model 
principle authentication mechanism example nis ldap kerberos rsa legion 
authentication authentication object generates signs encrypted non credential passed back caller 
credential stored temporary directory similar approach kerberos stored part internal state dap 
case credential protected security underlying operating system 
login commonly method users authenticate grid method 
legion data access dap enables accessing data grid nfs protocol 
dap maintains mapping form local unix id loid authentication object 
dap communicates directly authentication objects obtain credentials unix users 
subsequently dap uses credentials access data user behalf 
access method users may unaware legion security system access remote data 
clients dap typically require installing legion software 
credentials subsequent access grid resources 
user initiates action credentials securely propagated chain resources accessed course action mechanism called implicit parameters 
implicit parameters grid equivalent environment variables tuples form name value convey arbitrary information objects 
authorization authorization addresses issue operations objects 
legion policy neutral respect authorization large range policies possible 
legion avaki ships access control list acl policy familiar mechanism implementing authorization 
action function object read write file object exists allow list deny list 
list contain names objects typically restricted authentication objects users jose 
list may contain directory turn contains list objects 
directory contains authentication objects functions group 
selecting authentication objects listed directories form arbitrary groups 
allow list action object identifies set objects authentication objects proxies humans allowed perform action 
likewise deny list identifies set objects allowed perform action 
object allow list deny list choose restrictive option object denied permission 
access control list manipulated ways way provided legion chmod command maps intuitive options appropriate allow deny lists sets actions 
access control lists manipulated permit disallow arbitrary sharing policies 
mimic usual read write execute semantics unix extended include wider variety objects just files directories 
complex authorizations possible 
example mutually companies wish collaborate manner provides application provides data third provides processing power setting appropriate acls manner permits exactly actions desired 
addition flexibility creating groups benefit collaboration 
users submit requests create groups system administrators create groups linking existing users directory set permissions groups objects 
data integrity data confidentiality data integrity assurance data changed maliciously inadvertently storage transmission proper authorization 
data confidentiality privacy refers inability unauthorized party view read understand particular piece data transit storage 
wire protection protection transmission legion follows lead contemporary security systems cryptography 
legion transmits data modes private protected 
legion uses openssl libraries encryption 
private mode data fully encrypted 
protected mode sender computes checksum md actual message 
third mode data transmitted clear credentials 
mode useful applications want pay performance penalty encryption checksum calculations 
desired integrity mode carried implicit parameter propagated call chain 
user sets mode private subsequent communication user behalf user fully encrypted 
different users may different modes encryption different communications object may different encryption modes 
objects call chain example dap may override mode deemed appropriate 
host data protection integrity confidentiality storage machine legion relies largely underlying operating system 
persistent data stored local disks appropriate permissions appropriate users access 
core legion objects section delve deeper legion implementation grid 
particular discuss core objects comprise grid 
intention section emphasize clean architectural design encourages creation varied services grid 
case legion services implemented naturally objects 
intend section catalogue legion objects reasons space considerations prevent extensive catalogue design principle legion extensibility turn means complete catalogue intentionally impossible 
section object level 
objects turn common communication substrate order perform tasks 
communication dataflow graphs graph encapsulating complex reflection remote method invocation 
turn method invocation involves flow controlled message passing protocol 
topics interesting refer reader literature legion systems regarding topics 
class objects class objects manage particular instances 
example class object may manage running instances application 
managing instances involves creating demand destroying required managing state keeping track 
legion object defined managed class object 
class objects managers policy makers system responsibility creating new instances activating deactivating providing bindings clients 
legion encourages users define build class objects 
features class object management class instances applications programmers ability construct new classes provide flexibility determining application behaves support legion philosophy enabling flexibility kind level functionality 
class objects ideal exploiting special characteristics instances 
expect vast majority programmers served adequately existing metaclasses 
metaclass objects class objects instances class objects 
just normal class object maintains implementation objects instances metaclass object 
metaclass object implementation objects built export class mandatory interface exhibit particular class functionality interface 
programmer simply requests create appropriate metaclass object configures resulting class object implementation objects application question 
new class object supports creation migration activation location application objects manner defined metaclass object 
example consider application requires user valid software license order create new object video demand application new video server object created request 
support application developer create new metaclass object video server classes implementation add license check object creation method 
hosts legion host objects processing resources legion 
may represent single processor multiprocessor sparc cray aggregate multiple hosts 
host object machine representative legion responsible executing objects machine protecting machine legion users protecting user objects objects reporting object exceptions 
host object ultimately responsible deciding objects run machine represents 
host objects important points security policy encapsulation 
aside implementing host mandatory interface host object implementations built adapt different execution environments suit different site policies underlying resource management interfaces 
example host object implementation interactive workstation uses different process creation mechanisms implementations parallel computers managed batch queuing systems 
fact standard host object extended submit jobs queuing system 
extension host object create container objects permit execution type object machine 
implementation address performance problems threads processes 
design improves performance object activation reduces cost method invocation objects host allowing shared address space communication 
host objects uniform interface different resource environments importantly provide means resource providers enforce security resource management policies legion system 
example host object implementation customized allow restricted set users access resource 
alternatively host objects restrict access code characteristics accepting object implementations contain code demonstrating certain security properties rejecting implementations containing certain restricted system calls 
implemented spectrum host object choices trade risk system security performance application security 
important aspect legion site autonomy freedom site select existing host object implementation best suits needs extend existing implementations suit local requirements implement new host object starting interface 
selecting configuring host objects site control resources legion objects 
vault objects responsible managing legion objects persistent representations 
way hosts manage active objects direct access processors manage inert objects persistent storage 
vault direct access storage device devices manages stored 
vault managed storage may include portion unix file system set databases hierarchical storage management system 
vault supports creation new objects controls access existing supports migration storage device 
manager objects manage assignment instances object created vault chosen object manager 
selected vault creates new empty opr object supplies object state 
object migrates manager selects new target vault opr 
implementation objects implementation objects encapsulate legion object executables 
executable treated unix file array bytes implementation object interface naturally similar unix file interface 
implementation objects write read objects updates permitted executable initially stored 
implementation objects typically contain executable code single platform may general contain information necessary instantiate object particular host 
example implementations contain java byte code perl scripts highlevel source code requires compilation host 
legion objects implementation objects describe maintaining set attributes 
attributes implementation objects specify execution requirements characteristics may exploited scheduling process 
example implementation object may record type executable contains minimum target machine requirements performance characteristics code class objects maintain complete list possibly different acceptable implementation objects appropriate instances 
class scheduling agent selects host implementation object activation selects attributes host instance activated implementation object 
implementation objects allow classes large degree flexibility customizing behavior individual instances 
example class maintain implementations different time space trade offs select depending currently available resources 
provide users ability select cost performance trade offs class maintain slower low cost implementation faster higher cost implementation 
approach similar concrete types emerald 
implementation caches implementation caches avoid storage communication costs storing implementations reuse 
multiple host objects share access common storage device may share single cache reduce copying storage costs 
host objects invoke methods implementation caches order download implementations 
cache object finds cached copy implementation downloads caches new copy 
case cache object returns executable path host 
terms performance cached binary results object activation slightly expensive running program local file system 
implementation model invalidation cached binaries trivial problem 
class objects specify loid implementation activation request class need change list binaries replace old implementation loid new 
new version specified activation requests old implementation simply longer time discarded caches 
transformation legion avaki legion began late observation dramatic changes wide area network bandwidth horizon 
addition expected vast increases bandwidth changes faster processors available memory disk space expected follow usual way predicted moore law 
dramatic changes bandwidth expected natural question bandwidth 
just bandwidth change generalized question expected changes physical infrastructure sorts applications people want system software infrastructure needed support applications legion project born determination build test deploy ultimately transfer industry robust scalable grid computing software infrastructure 
followed classic design paradigm determining requirements completely designing system architecture numerous design meetings year design coding 
decision write scratch extend modify existing system mentat prototype 
felt starting scratch ensure adherence architectural principles 
funding obtained early line legion code written june 
basic architecture driven principles requirements described rich literature distributed systems 
resulting architecture reflective object facilitate encapsulation extensible essence operating system grids 
felt strongly having common accepted underlying architecture set services assumed critical success grids 
sense legion architecture anticipated drive web services 
legion architecture similar 
november ready deployment 
deployed legion uva sdsc ncsa uc berkeley large scale test demonstration supercomputing 
early months keeping mtbf hours continuous challenge 
learned valuable lessons 
example learned world fail 
intellectually knew really brought home unusual failure modes various hosts system 
november solved failure problems mtbf excess month heading months 
demonstrated legion called npaci net 
npaci net consisted hosts uva caltech uc berkeley iu ncsa university michigan georgia tech tokyo institute technology vrije universiteit amsterdam 
time dozens applications ported legion areas diverse materials science ocean modeling sequence comparison molecular modeling astronomy 
npaci net continues today additional sites university minnesota suny binghamton psc 
supported platforms include windows compaq ipaq ibm sp solaris irix linux true unix 
project technology transfer phase envisioned technology moved academia industry 
felt strongly grid software move mainstream business computing software help lines customer support services deployment teams 
applied metacomputing founded carry technology transition 
applied metacomputing raised venture capital changed name avaki 
acquired legal rights legion university virginia renamed legion avaki 
avaki released commercially september 
avaki extremely hardened trimmed focused commercial requirements version legion 
name changed core architecture principles operates remain 
avaki today question answer looking avaki grids technological challenges faced companies today viewed variants requirements grid infrastructures 
today science commerce increasingly global enterprise people collaborating single research project engineering project product development effort may located distances spanning country world 
components project product data applications processing power users may distinct locations 
scenario particularly true life sciences large amounts data generated different organizations public private world 
attractive model accessing resources local runs immediate challenges 
administrative controls set organizations prevent unauthorized accesses resources hinder authorized accesses 
differences platforms operating systems tools mechanisms running jobs data organizations impose heavy cognitive burden users 
changes resource usage policies security policies affect day day actions users 
large distances act barriers quick communication necessary collaboration 
consequently users spend time procedures accessing resource little time resource 
challenges lower productivity hinder collaboration 
grids offer promise solve challenges facing collaboration providing mechanisms easy secure access resources 
academic grid infrastructures legion construct longrunning grids accessing distributed heterogeneous potentially faulty resources secure manner 
clear benefits making grids available audience wider academia government 
clients industry demands traditionally addressed academic projects 
example industry clients typically demand product supported existence assured reasonably long period 
product supported professional services team understands deploy configure product 
clients demand training extensive documentation available support staff product roadmap includes suggestions regarding product 
clients necessarily view open source free software requisites willing pay products services improve productivity users 
successful technology transition smoothly comfort confines academia demanding commercial environment 
academic projects testament benefits transitions transition benefits just user community quality product 
believe grid infrastructures ready transition 
legion tested environments onwards time opportunity test basic model scalability security features tools development environment rigorously 
improvement required input demanding community vested interest technology benefit 
decision grids form avaki product inevitable 
grid requirements relevant commercial product 
despite changes technology enforced push commercialization basic technology avaki remains legion 
principles architectural features discussed earlier continue form basis commercial product 
result commercial product continues meet requirements outlined 
requirements follow naturally challenges faced commercial clients attempt access distributed heterogeneous resources secure manner 
consider everyday scenario typical life sciences case 
may formed merger separate companies offices located different cities 
original companies purchased infrastructure machines operating systems file systems tools independent 
sets users companies overlap small extent 
merger companies may connected vpn virtual private network software traffic goes public network 
users expect resources merged shortly merger 
may expect public databases databases managed partner companies 
scenario common companies life sciences finance engineering design natural sciences 
solution attempts solve scenario satisfy grid requirements 
example different infrastructures lead requirement heterogeneity 
desire access resources located remotely different access policies leads complexity 
resources accessed public network fault tolerance expected 
resources increased mean time failure infrastructure increases surprisingly rapidly individual resources highly reliable 
users merged expect merged infrastructure secure external threats addition may desire security trust built users companies 
accessing remote computing resources leads binary management support applications written language 
inclusion private public databases accesses demands scalable system grow numbers sizes databases increase 
managers databases expect continue controlling resources available managers resources system administrators 
users expect access resources simple manner possible specifying just name ideal specifying location method behavior cumbersome 
users expect reuse solutions 
words infrastructure continue exist time sessions 
software solution addresses requirements grid infrastructure 
retained removed reinforced 
avaki retains vision philosophy principles underlying architecture legion 
eliminates esoteric features functions legion 
reinforces robustness infrastructure adding stringent error checking recommending safer configurations 
increases usability product providing extensive documentation configuration guidelines additional tools 
avaki necessarily balanced retaining features functions product addressed immediate revenue retaining possible features legion 
example legion created new kind file object called file partly support applications access large matrices partly demonstrate ability create custom services legion 
demand files low commercial environment avaki support object code base includes 
likewise clients request avaki heterogeneous mpi tools support feature limited 
legion vision single system view grid components compelling expect releases avaki products avaki 
addition expect philosophical aspects object model naming designed security continue 
underlying principles privileged user requirement popular users expect continue 
underlying architecture may change especially influence web services emerging technologies 
likewise implementation product may change change irrelevant detail grid customers 
commercial product reinforces strengths legion 
example commercial product installation grid creation easier actions require total commands 
commands simplified retaining unix syntax 
configuring grid myriad ways possible simplified 
underlying communication protocol tools services robust 
error messaging improved services reliable 
support strengths legion transparent data access legacy application management queuing interfaces rd party queuing mpi systems parameter space studies improved 
meeting grid requirements legion legion continues meet technical grid requirements outlined section 
addition meets commercial requirements grids 
section discuss legion avaki meet technical grid requirements revisiting requirement identified section security 
described literature security core aspect legion architecture legion implementation 
legion addresses authentication authorization data integrity firewalls flexible manner separates policy mechanism cleanly 
global name space global namespace fundamental model realized context space 
fault tolerance 
fault tolerance remains significant challenges grid systems 
began belief size fits solution fault tolerance problem grids 
legion addresses fault tolerance limited classes applications 
specifically stateless application components jobs high throughput computing simple copy objects resilient host failures mpi applications modified legion save state functions 
remains great deal done area fault tolerance grids 
thrust ibm efforts autonomic computing 
accommodating heterogeneity 
operating system architecture heterogeneity easier problems solve problem solutions available decades 
general basic challenges overcome data format conversions heterogeneous architectures arise cross architecture rpc reading binary data written architecture executable format differences including different instruction sets executable platforms 
data format conversions traditionally done ways 
technique exemplified xdr data converted native format standard format sent converted back native format received 
second technique called receiver right 
data sent native format metadata tag indicates format data 
receipt receiver checks tag 
data native format conversion necessary 
data different format data converted fly 
legion uses second technique 
typed data packed buffers 
data unpacked check metadata tag associated buffer convert data needed 
defined including pair wise permutations intel bit sun sgi bit hp dec alpha bit ibm rs cray 
binary management 
legion run time ensures appropriate binaries exist available host needed 
class object maintains list implementations available class implementation legion object methods read implementation data 
run time schedulers ensure hosts binaries available selected 
host selected appropriate implementation chosen class object asks host instantiate object instance 
host asks implementation cache path executable cache loads implementation necessary 
user level code involved process 
multi language support 
avaki completely agnostic programming language 
applications written fortran snobol perl java shell scripting languages 
scalability 
truly scalable system keep growing performance degradation 
order scalable system hotspots 
system components overloaded system scales millions hosts billions objects 
means number users hosts increases number servers provide basic services increase requiring super linear increase amount traffic 
examine hot spots occur 
obvious place root class structure binding structure 
second point near top context space tree root top level directories 
globally shared frequently accessed data structures 
achieve scalability legion aspects architecture hierarchical binding agents distribution naming binding multiple class objects contexts replication cloning classes objects 
single binding agent scalable single class object 
provide multitude binding agents typically host arranged tree behave software combining tree highperformance shared memory architectures 
effect reduce maximum lookup rate 
case loid oa mapping legion detects stale bindings allowing safe aggressive caching discussed distributing ultimate binding authority class objects 
different class object type system program order prevent frequently classes hotspots legion supports class cloning object replication 
class cloned new class object instantiated 
new class different loid implementations 
new instance created clones selected typically round robin perform instantiation manage instance 
persistence 
persistence legion realized section far users concerned legion data grid described 
extensibility 
matter carefully system designed crafted meet needs users 
reason different users applications organizations different requirements needs applications require coherent distributed file system weaker semantic requirements 
organizations require kerberos credentials 
bottom line restrictive system unable meet current requirements 
legion designed customized tailored different application organizational requirements 
customizations take place context closed system total system change affects objects context local change affects subset objects affect interoperability modified objects objects system 
broadly places customization occur modification core daemon objects definition new metaclasses change meta behaviors class objects protocols changes legion run time libraries change legion implemented inside object protocols 
core daemons viz hosts classes contexts implementation objects schedulers modified extended system administrators ride default behaviors 
legion class objects manage instances determine instances instantiated 
example default vanilla class object behavior instantiates instances instance address space class object gives actual object address binding agents 
similarly state instances stored copy state 
legion meta object protocols interactions selectively modified class class basis 
done overriding class object behaviors new implementation 
result new meta class object 
final way modify extend system modifying legion run time libraries changing configuration event handlers 
legion reflective system internal representation legion objects exposed programmers 
modifications representation change behavior 
designed changed event stack modified 
date primarily modifications security layer build performance optimized implementations mpi implementation 
site autonomy 
site autonomy critical grid systems 
believe individuals enterprises agree participate large scale grid system requires giving control resources control local policy decisions resources 
site autonomy legion guaranteed mechanisms protecting physical resources setting security policies objects local users 
host vault objects represent site physical resources 
protected respective access control lists 
discussed earlier access control policy defining new new host vault class 
result change local policy 
general hosts vault policies set needed enterprise 
complexity management 
complexity addressed legion providing complete set high level services capabilities mask underlying infrastructure user default user think 
level programming grid legion takes classic approach object paradigm encapsulate complexity objects interfaces define behavior implementation 
emerging standards global grid forum open grid services architecture ogsa proposed ibm globus pis 
proposed architecture similarities avaki architecture 
example congruence objects called grid resources ogsa name interface way discover interface meta data state created factories analogous avaki class objects 
primary differences core architecture lie rpc model naming scheme security model 
rpc model differences implementation substance 
difference avaki intends address web services compliant supporting xml soap wsdl 
naming model offer low level name schemes immutable location independent name gsh ogsa loid avaki lower level address wsdl gsr ogsa oa avaki 
differences significant 
ogsa names security information requiring alternative mechanism bind name identity 
believe critical grids wide spread consist thousands diverse organizations 
second binding resolvers ogsa currently location protocol specific severely reducing flexibility name resolving process 
address issues avaki proposed secure grid naming protocol ggf open standard naming grids 
fits quite ogsa actively working ibm ggf working group process find best solution naming 
interesting note similarity legion 
architectures core notion named entities interact method calls 
multilayer naming schemes reflective interface discovery defer user defined objects names bound providing wide variety implementations semantics 
similarity surprise draw distributed systems literature 
security juncture security model ogsa 
shortcoming certainly expect remedied soon far authentication data integrity 
globus group long history area 
avaki security model designed flexible identity included names 
avaki model notion access control replaceable modules called implement access control 
default policy access control lists 
non architectural differences avaki ogsa avaki complete implemented system wealth services 
ogsa core architectural proposal complete system 
expect higher level interfaces components added basic ogsa substrate time ggf 
avaki fully committed moving forward 
feel strongly foundation standards accelerate development grid market benefit everybody community users producers grid software 
summary legion project begun late construct deploy large scale scientific computing design goal general purpose meta operating system 
metacomputing grid computing concept grid computing begun move mainstream 
argued grid systems designed engineered large scale software system examining requirements designing architecture meet requirements building deploying testing resulting software 
legion born 
today decade basic design principles architectural features stood test time production operational grid system demonstrated utility academia industry robust software hard return investment requirements 
believe fundamental architectural requirements grids design philosophy building legion 
glimpse legion field basic aspects legion architecture 
concluded discussion transformation legion avaki see avaki fitting context 
presentation necessity brief 
encourage interested reader follow embedded text complete descriptions 
grimshaw harris humphrey nguyen secure grid naming protocol draft specification review comment sourceforge net projects 
butler foster kesselman tuecke welch national scale authentication infrastructure ieee computer 
chapin grimshaw resource management legion journal generation computing systems vol 
pp 

chapin wang wulf grimshaw new model security journal generation computing systems vol 
pp 

ferrari humphrey chapin grimshaw flexible security system metacomputing environments th international conference high performance computing networking europe april amsterdam 
ferrari grimshaw basic fortran support legion technical report cs department computer science university virginia march 
foster kesselman globus metacomputing infrastructure toolkit international journal supercomputing applications 
foster kesselman nick tuecke physiology grid open grid services architecture distributed systems integration www org drafts wg ogsa draft pdf grimshaw enterprise wide computing science aug 
grimshaw wulf legion vision worldwide virtual computer communications acm jan 
grimshaw weissman strayer portable run time support dynamic object oriented parallel processing acm transactions computer systems may 
grimshaw architectural support extensibility autonomy wide area distributed object systems department computer science technical report cs university virginia june 
nguyen grimshaw reflection incorporating fault tolerance techniques distributed applications parallel processing letters vol 

grimshaw ferrari humphrey wide area computing resource sharing large scale ieee computer may 
grimshaw ferrari lindahl communications acm nov 
grimshaw ferrari humphrey wide area computing resource sharing large scale ieee computer may 
grimshaw lewis ferrari architectural support extensibility autonomy wide area distributed object systems technical report cs department computer science university virginia june 
humphrey ferrari grimshaw accountability control process creation proceedings network distributed systems security conference ndss san diego ca february 
jin grimshaw metacomputing processing proceedings ieee international conference cluster computing cluster germany december 
mullender ed distributed systems acm press humphrey grimshaw capacity capability computing legion proceedings international conference computational science san francisco ca may 
fox humphrey grimshaw crowley wilkins protein folding grid experiences charmm legion npaci resources th international symposium high performance distributed computing hpdc san francisco california august 
nguyen exploiting data flow fault tolerance wide area parallel system proceedings th international symposium reliable distributed systems srds pp 

nguyen chapin grimshaw viles reflection flexibility extensibility metacomputing environment technical report university virginia dept computer science november 
catlett metacomputing communications acm 
june 
white walker humphrey grimshaw secure scalable file system supporting cross domain high performance applications proceedings supercomputing denver www sc org papers pap pap pdf viles enabling flexibility legion run time library international conference parallel distributed processing techniques pdpta las vegas nv 

