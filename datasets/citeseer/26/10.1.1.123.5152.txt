bounds frequency estimation packet streams bose carleton university canada kranakis carleton university canada morin carleton university canada tang carleton university canada consider problem approximating frequency frequently occurring elements stream length memory size models process gathering statistics internet packet streaming memory small relative number classes ip addresses packets 
show data item occurs times stream length frequent algorithm demaine approximate frequency error give lower bound accuracy deterministic packet counting algorithm implies frequent algorithm nearly optimal 
show randomized algorithms significantly accurate lower bound expected accuracy randomized packet counting algorithm 
consider problem processing data stream xn packet classes pass 
models process gathering statistics internet packet streams memory small relative number classes categories packets 
partly funded nserc natural sciences engineering research council canada mathematics information technology complex systems 
proceedings informatics formally consider packet counting algorithms process stream xn item time 
packet counting algorithm memory access integer counters labelled packet class 
counter labelled packet class say counter monitoring processing item algorithm may modify memory perform equality tests packet classes increment decrement counters change labels counters 
comparing packet classes storing counter labels algorithm may computations storage packet classes 
algorithm completes counter value packet class value counter monitoring counter monitoring counter value defined zero 
problem accurately maintaining frequency statistics data stream applications internet routers gateways handle continuous streams data large store postprocess 
example implement fairness policies ensure user ip address router gateway uses total available bandwidth 
keeping track individual usage statistics require counter user may tens thousands users 
results imply counters identify set users available bandwidth contains user bandwidth 
accuracy required counters threshold values respectively 
related motivated mainly applications described growing body literature algorithms processing data streams :10.1.1.107.847:10.1.1.131.3373:10.1.1.19.8594
early particularly relevant current fischer salzberg showed counter making pass data stream possible determine class element occurs times demaine showed fischer salzberg algorithm generalizes algorithm call frequent 
algorithm independently discovered karp 
frequent algorithm uses counters determines set candidates contain elements occur times 
output frequent list elements including heavy users possibly light users false positives 
determine heavy users karp point better keeping counter user results memory number different users 
case internet packet stream number users ip addresses substantially larger algorithm needs space size output 
difficulty determining bose bounds frequency estimation packet streams heavy users point time users may nearly equal number occurrences equal chances heavy user algorithm remember exact count user 
applications network traffic measurement accounting important identify large flows estimate frequencies large flows 
manku proposed algorithms computing frequencies large flows user specified threshold 
sticky sampling algorithm probabilistic probability algorithm identifies items true frequency exceeds user specified threshold log expected number counters maximum error output 
algorithm called lossy counting deterministic sense outputs flows threshold 
regardless threshold achieves accuracy log counters 
particular problem estimating frequencies packet streams includes fang propose heuristics compute values certain threshold 
charikar give algorithms computing top candidates zipf distribution 
estan varghese attempt identify set packet classes contain frequently occurring packet classes give probabilistic estimates expected count value terms user selected threshold 
results concerned accuracy packet counting algorithms 
say packet counting algorithm accurate class appears na times algorithm terminates counter value ca satisfies ca na ca 
sticky sampling lossy counting algorithms 
show frequent algorithm accurate 
general counters algorithm better accurate classes occurs times classes counter value algorithm terminates 
argument breaks consider case particular packet class occurs na times 
case may possible algorithm report number occurrences elements accurately 
explore relationship accuracy 
results outlined paragraph 
section show frequent algorithm demaine accurate number times frequently occurring packet class appears stream 
section give lower bound accuracy deterministic packet counting algorithm lower bound accuracy randomized packet proceedings informatics counting algorithm 
result solves open problem posed randomized packet counting algorithms accurate deterministic ones 
section summarize conclude open problems 
frequent algorithm frequent algorithm demaine uses counters 
processing stream item xi rules applied order 
counter monitoring class xi increment counter 
counter equal set counter monitor class xi 
decrement counters 
nice way visualize algorithm imagine set buckets hold colored balls 
new ball arrives place bucket contains balls color case place empty bucket case discard ball bucket new ball case 
analyze accuracy algorithm provide rough upperbound accuracy upper bound bootstrap better analysis 
total number times case algorithm occurs 
counter case case increments exactly counter 
total sum counters algorithm terminates follows immediately class occurs na times counter monitoring value ca na na suppose na 
repeat argument just shown 
bose bounds frequency estimation packet streams value ca satisfies ca general repeat argument times show ca 
particular obtain ca ca clearly greater na ca na ca output ca accurate 
observe analysis gives upper bound gives upper bound accuracy counter value upper bound gives upper bound accuracy counter just counter implies result 
theorem stream element occurs times frequent algorithm accurate 
lower bounds accuracy section give lower bounds accuracy deterministic randomized packet counting algorithms 
deterministic lower bound give lower bound deterministic packet counting algorithms adversary argument 
adversary builds distinct streams algorithm distinguish 
adversary uses packet classes builds streams parts see 
part streams length consists packet classes occurring number times class occurs times 
point streams diverge 
stream adversary adds occurrences unique packet class classes monitored algorithm processing part stream 
second stream adversary adds occurrences unique packet class appear part stream 
proceedings informatics abcd abcd abcd abcd abcd adversary streams 
observe stored algorithm counters processing part stream information algorithm obtains reading element stream monitored 
algorithm deterministic counter value ca stream equal counter value cz second stream 
stream occurs na times second stream occurs nz times 
order accurate refer algorithm terminate counter value ca cz nz 
case algorithm better accurate stream 
theorem deterministic algorithm exists stream symbol occurs na times algorithm reports value ca ca na ca na 
randomized lower bound give lower bound randomized algorithms 
providing probability distribution input streams expected accuracy deterministic algorithm distribution cn randomized algorithm just probability distribution deterministic algorithms lower bound holds randomized algorithms 
distribution probabilistic version deterministic construction 
distribution uses constants specified 
stream distribution part data stream packet classes 
part streams identical 
length consists packet classes occurring equal number times class occurs times 
second part sequence select packet class uniformly random classes class occur times 
packet class chosen second part sequence 
immediately part sequence processed algorithm cases consider 
algorithm counter monitoring algorithm technically application yao principle 
bose bounds frequency estimation packet streams counters happens probability number occurrences 
algorithm counter monitoring comes packet classes 
happens probability number occurrences 
class come packet classes algorithm monitoring 
happens probability number occurrences ca value output algorithm class proving lower bound assume case algorithm answers perfect accuracy ca algorithm monitoring class cases distinguish cases 
algorithm deterministic output counter value ca cases 
expected error algorithm ca na ca ca ca ca xa xa xa xa xa ca setting simplifying obtain ca na xa xa proceedings informatics theorem randomized algorithm exists stream symbol occurs na times algorithm counter value ca na ca observe proof theorem extends slightly powerful model packet counting algorithm allowed periodically output class value pairs form ca meaning occurred ca times counter value considered value output 
similar model demaine study probabilistic packet streams 
see lower bound carries observe pair ca output second part stream begins 
case argument shows na ca 
case algorithm outputs value ca having seen final occurrences argument similar shows case packet class na ca 
studied problem approximating frequency items data stream fixed number counters 
shown data item occurs times stream length frequent algorithm demaine accurate 
nearly optimal deterministic algorithm shown deterministic algorithm better accurate 
shown randomized algorithms significantly accurate randomized algorithm expected accuracy 
main open problem left research determining constant factor accuracy frequent algorithm improved introducing randomization 
may case running fre quent random sample original input stream foil adversary improve accuracy 
alon matias szegedy 
space complexity approximating frequency moments 
proceedings th acm symposium theory computing pages 
charikar chen farach colton 
finding frequent items data streams 
proceedings th international colloquium automata languages programming pages 
bose bounds frequency estimation packet streams datar gionis indyk motwani 
maintaining stream statistics sliding windows 
proceedings th annual acm siam symposium discrete algorithms soda pages 
demaine pez ortiz munro 
frequency estimation internet packet streams limited space 
proceedings th annual european symposium algorithms esa pages 
estan varghese 
new directions traffic measurement accounting 
proceedings acm sigcomm internet measurement workshop 
fang shivakumar garcia molina motwani ullman 
computing iceberg queries efficiently 
proceedings th international conference large databases pages 
fischer salzberg 
finding majority votes solution problem journal algorithms june 
journal algorithms 
gupta mckeown 
packet classification multiple fields 
proceedings acm sigcomm pages 
haas naughton stokes 
samples estimation number distinct values attribute 
proceedings st international conference large databases vldb pages 
indyk 
stable distributions pseudorandom generators embeddings data stream computations 
proceedings st annual ieee symposium foundations computer science focs pages 
indyk guha muthukrishnan strauss 
histogramming data streams fast item processing 
proceedings th international colloquium automata languages programming pages 
karp papadimitriou shenker 
simple algorithm finding frequent elements streams bags 
unpublished manuscript 
manku motwani 
approximate frequency counts data streams 
proceedings th international conference large data bases 
proceedings informatics yao 
probabilistic computations unified measure complexity 
proceedings th annual symposium foundations computer science focs pages 
bose school computing science carleton university ottawa canada 
mail jit scs carleton ca evangelos kranakis school computing science carleton university ottawa canada 
mail kranakis scs carleton ca pat morin school computing science carleton university ottawa canada 
mail morin scs carleton ca tang school computing science carleton university ottawa canada 
mail tang scs carleton ca 
