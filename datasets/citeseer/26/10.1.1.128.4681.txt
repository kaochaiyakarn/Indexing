programmable router architecture supporting control plane extensibility jun gao peter steenkiste eduardo takahashi allan fisher march cmu cs school computer science carnegie mellon university pittsburgh pa report expanded version programmable router architecture supporting control plane extensibility ieee communications magazine march 
research sponsored defense advanced research projects agency monitored division san diego ca contract afrl rome ny contract 
views contained document authors interpreted representing official policies expressed implied defense advanced research projects agency government 
keywords programmable networks active networks control plane extensibility mobile code internet evolving infrastructure provides basic communication services sophisticated infrastructure supports wide range electronic services virtual reality games rich multimedia retrieval services 
evolution happening slowly part communication infrastructure rigid 
report programmable router architecture control plane functionality router extended dynamically delegates 
delegates control behavior router defined router control interface allowing service providers third party software vendors implement customized traffic control policies protocols 
describe darwin system implements architecture 
emphasize runtime environment system provides delegate execution programming interface system exports support delegates 
demonstrate advantages system presenting delegate examples 
internet evolved basic pipe sophisticated infrastructure supports electronic services 
services today fairly primitive typically related collecting information web 
richer services high quality videoconferencing virtual reality games distributed simulation promised 
progress slow part infrastructure inflexible 
routers closed boxes execute restricted set vendor software 
compute storage servers typically dedicated support type service 
alternate architecture open infrastructure specific services installed instantiated demand pc today 
advantages approach allows larger community people develop services innovation 
examples motivate approach 
class examples addresses customization traffic control management 
today range traffic management options fairly limited 
switches routers increasingly support classification scheduling capabilities simple ways filter certain types traffic simple prioritization flows implement standardized qos mechanisms differentiated services 
envision users employ mechanisms handle traffic specific ways 
example service provider implement gold silver bronze service differentiation proprietary way service provider implements communication services stronger guarantees 
similarly envision deploying virtual private network vpn service different traffic control policies control protocols 
second class examples consists value added services services require communication data processing access storage 
examples include videoconferencing video transcoding mixing support customized web searching services application specific multicast 
possible deliver services set dedicated servers efficient services deployed dynamically servers leased needed basis 
allow service adapt demands locations customers 
value added services benefit customized traffic management support 
example virtual reality game service provider may want handle control audio video traffic flows different ways 
may require customized traffic control policies router 
long routers closed boxes shipped set standard protocols examples realized 
examples best supported programmable network infrastructure 
network allow computing storage communication resources allocated programmed deliver specific service 
standards odbc posix exist storage servers web file systems databases compute servers 
routers servers programmable today 
report router architecture control plane functionality router extended delegates code segments implement customized traffic control policies protocols 
delegates affect router treats packets belonging specific user router control interface rci 
architecture broader community third party software vendors service providers develop applications routers 
remainder report organized follows 
define network architecture section network functions qos selectively customized meet special needs users 
section describe darwin specific instance architecture 
focus runtime environment delegates code segments customize network control management 
section examples delegates applied address variety resource management traffic control problems discuss security issues raised delegates section 
related section conclude report section 
programmable network architecture characterize network programmability requirements introduce concept delegate 
programmable network architecture support delegates 
network programmability distinguish types operations data flows inside network 
class involves manipulation data packets video transcoding compression encryption 
routers significant general purpose processing power type processing typically take place compute servers workstation clusters inside network infrastructure 
tasks performed routers specifically built perform data processing usual routing functions 
second class operations data flows changes data forwarded typically require processing looking body packets 
examples include tunneling rerouting selective packet dropping changing bandwidth allocation flow 
nature operations best executed routers switches 
call code segments perform tasks delegates represent owner data flows inside network 
data delegates perform data processing operations execute compute servers specially designed routers 
control delegates execute routers involved control data flows 
simple classification delegates somewhat artificial delegates may fall classes 
example delegate concerned control may need look packet body decide handle packets 
similarly control delegate may rare occasions modify packet 
distinction useful classes delegates impose different requirements system run 
control delegates require environment provides rich set mechanisms control data flows data delegates run platform substantial computational power 
argue data delegates compute servers data processing need control delegates obvious 
imagine routers fixed functionality similar today routers users control traffic flows handled passing parameters routers signalling protocol 
examples discussed section provide reasons directly executing code control delegates routers may effective way customize traffic control management 
reason control delegates respond quickly changes traffic conditions take entity edge network round trip times observe respond change network 
second impractical identify possible user requirements priori addressed default router software architecture delegates flexible extensible 
supporting customization extending router functionality may natural errorprone solution 
example service provider wants routing protocol optimized traffic doing edges network unnecessarily complicated 
local resource manager rci classifier routing signalling signalling entities scheduler node architecture 
router architecture presents node architecture delegates added router 
architecture shows control plane top part executes control protocols routing signalling data plane bottom part responsible packet forwarding 
control delegates execute special runtime environment part control plane 
design motivated intended control delegates control management traffic flows practical design considerations want add unnecessary complexity data forwarding path speed simplicity critical 
routers may possible insert data delegates data forwarding plane 
control delegates change traffic handled data forwarding plane rci 
rci provides set operations flows sequences packets semantic relationship defined applications service providers 
flows defined router flow spec list constraints fields packet header match packet belong flow 
classifier uses flow specs determine flow incoming packets belong 
classification take place early data forwarding path packets handled appropriately 
flow specific actions tunneling rerouting best executed input interface 
actions output interface generally associated qos related parameters classification scheduler schedule packets belong class accordingly meet qos requirements 
view rci instruction set operates flows basic data type 
critical design decision architecture definition interface functions exported delegates 
rci broad support value added services network management applications 
rci control delegates routers efficiency security issues taken account 
elaborate specific implementation rci 
components proposed router architecture architectures designed support quality service qos internet 
example packet classification scheduling modules internet engineering task force ietf integrated services model differentiated services model 
difference lies architecture providing programmability control plane delegates rci programming interface rci 
darwin delegates give brief overview darwin system describe darwin rci delegate runtime environment 
darwin delegate design darwin project developed set customizable resource management mechanisms 
allows applications service providers tailor resource management service quality fit needs 
darwin includes mechanisms operate different timescales 
resource broker called selects resources meet application needs metrics optimize resource utilization 
delegates support customizable runtime resource management described 
darwin uses hierarchical packet scheduler supports wide range policies integrates flow qos link sharing single framework 
activities mechanisms coordinated signalling protocol called beagle 
darwin delegates architecture outlined previous section architecture extended ways 
darwin classifier identifies flows uses standard fields ip transport headers ip addresses port numbers protocol identifier optional application identifier 
allows services define flows semantics 
example layered video different layers tagged different application identifier 
current implementation application identifier stored packet ip option 
formats ipv flow id possible 
packet normally classified soon arrives router 
darwin implementation convenience classification engines input port output port 
extra classification adds negligible overhead system 
provider seminar video serv org web link mbps mbps mbps mbps mbps mbps mbps serv seminar audio org service best serv provider example resource tree 
second darwin resources hierarchical fashion 
means resource distribution link represented resource tree root representing link leaf nodes actual data flows interior nodes organizations services applications control flow flow aggregate corresponding children 
resource allocation policies specified leaf interior nodes flow qos link sharing supported framework 
viewed divide conquer approach resource management 
bandwidth link root node divided set organizations children root manage bandwidth share constructing appropriate subtree 
darwin uses hierarchical fair service curve scheduler excellent isolation properties changes structure policies subtree affect way traffic controlled subtrees handled 
control delegates link org app flow org pairing customization control data plane 
combination delegates control plane hierarchical resource management data plane provides excellent framework customization traffic control management 
emphasized earlier delegates customize specific set flows handled 
achieved associating delegate specific node flow hierarchy delegate operates flows associated node subtree affect flows 
words hierarchical scheduler provides isolation network resources data plane matching hierarchical delegates provide isolation traffic management control control plane 
note delegates may operate network delegates logically associated root 
router control interface describe classes functions necessary rci support broad spectrum delegates 
flow manipulation methods rci presents delegates flow programming model 
class methods allows delegates define manage flows updating classifier data structures 
example flow defined flow spec list header fields added classifier add flow call 
handle corresponding flow returned 
subsequent treatment flow specifying qos parameters traffic redirecting parameters performed handle 
methods available various flow manipulation 
add flow interface name flow spec creates flow flow spec interface returns flow id caller delete flow interface name flow id removes flow flow id specified interface modify flow interface name flow id new flow spec changes flow spec flow flow id new flow spec returns new flow id retrieve flow spec interface name flow id returns flow spec flow flow id resource management methods delegates change resources allocated distributed flows modifying states scheduler rci 
scheduler relies hierarchical resource tree schedule packets meet flow qos requirement 
node resource tree identified node id may correspond multiple flows 
resource tree node assigned set qos parameters specify service flows belonging node receive 
precise nature class functions depends scheduler functions listed implementation representative hierarchical schedulers 
create node interface name parent node id creates child node node parent node id returns node id default root node corresponds total resource interface created system start time delete node interface name node id deletes node node id resource tree reserve service interface name node id service parameters tries reserve services specified service parameters node node id call subject resource admission control returns successfully flows belonging node receive service reserved 
modify service interface name node id service parameters tries change services node node id service parameters specified service parameters 
call subject resource admission control returns successfully flows belonging node receive service defined service parameters add flow node interface name node id flow id adds flow flow id set flows belong node node id basically flow service node del flow node interface name node id flow id removes flow flow id set flows belong node node id calling method flow service revoked retrieve tree interface name node id returns resource tree hierarchy rooted node node id retrieve flows interface name node id returns list flow id associated node node id flow redirecting methods opposed class methods local meaning rci methods class global meaning may affect traffic distribution network 
delegates associate action method bind certain actions flows flow redirecting purposes 
example delegate reroute flow packets route default avoid hot spots network 
resource management rci calls typically control router output port functionalities flow redirection actions typically take place input port 
associate action name flow id action data associates proper action data required flow flow id currently actions supported tunneling action data tunneling encapsulation ip addresses src addr dst addr 
packets belonging flow prepended extra header src addr dst addr source destination addresses 
associating action flow delegate redirect flow packets selected destination rerouting action data rerouting hop addr hop address flow packets forwarded 
enable data plane router skip usual routing table look forward packets interface corresponds hop addr dropping drops flow packets input port 
method retrieve action interface name flow id returns action data associates flow flow id methods direct operation router routing table delegates superuser privileges 
methods operate flow basis 
get route dst addr retrieves hop address routing table dst addr change route dst addr hop addr updates hop address routing table entry dst addr hop addr requires superuser privilege 
network status monitoring methods class methods allows delegates probe certain network states queue occupancy kernel statistics counters error flags involve posting requests notification kernel set specific events crossing queue occupancy threshold occurrence failure condition 
monitoring network status methods delegate intelligently take proper actions timely fashion observed 
example delegate may set threshold particular flow queue set method periodically query queue length calling probe method 
done setting asynchronous notification kernel request method 
way kernel signal delegate queue length long 
example delegate turn monitor mode kernel monitor method retrieve packet counters kernel retrieve data method compute average bandwidth usage particular flow 
support delegate communication delegates set communication channels coordinate activities peers routers interact application endpoints 
messaging allows delegates gather global information proper global actions may taken rerouting load balancing 
interaction applications points increases flexibility system adaptation network events typically involves sources 
inter delegate communication application specific 
built communication channels delegates top standard communication methods 
methods classes functions appropriate routers 
individual routers may additional functionality data forwarding path may allow delegates control functions 
example router supports random early detection red delegates may able change thresholds trigger early packet drops 
diffserv edge router delegates may need access control parameters shapers meters 
routers may algorithms identify non conformant flows may allow delegates get access information give example functionality section 
clearly interface standard management information base mib definitions network management extensible new calls added technology evolves 
delegate implementation darwin delegates java jdk java virtual machine jvm sun microsystems 
environment gives acceptable performance portability safety features inherited language 
delegates executed java threads inside virtual machine sandbox 
delegate characterized qos requirement amount cpu memory resources needed runtime environment needed 
experiments measure overhead rci calls delegate runtime environment showed minimal difference calls java delegates calls equivalent programs 
reasonable result rci calls implemented native methods 
overhead delegates calls unloaded system measured microseconds machines testbed see section 
system load increases packet forwarding system call latency highly variable unpredictable operating systems offer real time guarantees 
delegates installed darwin signalling protocol beagle multi step process 
application service provider submits delegate java bytecode delegate resource runtime requirements list flow specs beagle 
second beagle transports information beagle daemons running relevant routers 
third beagle daemon performs local admission control flows necessary delegates 
delegates includes verifying delegate runtime environment required libraries support delegate 
point beagle verify router sufficient cpu memory resources accommodate delegate environment pc routers explicitly manage resources step implemented 
admission control succeeds beagle sets flows making appropriate calls classifier scheduler passes bytecode delegate runtime environment start delegate passes delegate set handles identifying flows responsible 
interface beagle start delegates described detail 
delegates written supported system restrictive way 
data delegates run compute servers set similar fashion 
delegates focused application active networking installed asynchronously rest data traffic separate signalling protocol application service basis delegate operate flows associated 
case active networking general delegates raise significant safety security concerns 
section discuss safety security issues related delegates details 
examples darwin system implemented freebsd netbsd pc routers 
performed test system local testbed shown 
routers shown boxes pentium ii mhz pcs running darwin kernel built top freebsd 
systems digital alpha mhz workstations running digital unix 
links full duplex point point ethernet links configurable mbps mbps 
specified links configured mbps 
section delegate examples show experimental results obtained testbed 
examples demonstrate application specific services added network delegates improve quality execution applications 
examples show delegates dynamically customize traffic control management network 
link mbps flow flow flow darwin ip testbed topology 
shared reservation sel 
drop sel 
drop fra rat fp 
video quality scenarios 
selective packet dropping mpeg video streams mpeg video streams sensitive random packet loss dependencies different frame types frames self contained frames predictive previous frame motion compensation depend previous frame frames bidirectional predictive depend previous subsequent frames 
inter frame dependencies losing frames transmission extremely damaging frames critical 
congestion received video quality degraded due packet loss quality enhanced frames dropped congested link random frames including crucial frames dropped 
delegates perform selective packet dropping congested routers 
delegates injected routers may potentially congested delegates associated mpeg flows data plane 
resource hierarchy flow set correspond mpeg application sub flows differing application identifier field flow spec added differentiate different frame types 
packets belonging different frame types marked specific application identifiers classified different sub flows 
delegates monitor queue length mpeg flow congestion detected queue length exceeds preset threshold delegates instruct data plane drop packets belonging frame sub flow protecting frames dropped due queue overflow 
result receiver observe gracefully degraded quality 
experiments performed testbed demonstrate effectiveness selective packet discarding delegates 
streams sent maui link bottleneck link testbed mpeg video streams unconstrained udp stream 
udp stream causes congestion link 
video sources send rate frames second performance metric rate correctly received frames 
compares performance scenarios 
scenario video udp data packets treated equally random packet losses result low frame rate expected 
second case video streams share bandwidth reservation equals sum average video bandwidths 
improves performance video streams bursty random packet loss peak transfers results third frames received correctly 
third scenario place delegate 
described earlier delegate monitors length queue video streams drops frames congestion observed 
packet dropping switched queue size drops lower threshold 
shows quite effective frame rate roughly doubles 
delegates provide elegant way selectively dropping frames effect achieved associating different priorities different frame types 
scenario delegate implement sophisticated customized drop policy 
scenario frames dropped 
dropping frames subset video streams achieve finer grain congestion control 
advantage having delegate control selective packet dropping choice applications degraded customized 
scenario shows results simple time sharing policy seconds delegate switches stream frames dropped 
improves performance 
policies differentiate flows similarly implemented 
dynamic control video encoding alternative approach selective frame dropping video applications deal congestion video transcoder compress change level compression video stream depending available bandwidth 
control data delegates example illustrate delegates control compression levels video quality optimization flow monitoring flow redirecting inter delegate communication 
control delegate set router bottleneck link route video application 
control delegate alters original route video stream take redirecting flow data delegate resides compute server router 
data delegate functions transcoder takes raw video generates frames different compression levels 
frames fed back bottleneck router forwarded originally intended receiver control delegate monitors bottleneck link congestion status 
facing congestion control delegate directs data delegate higher compression level bandwidth usage 
times control delegate sees abundant bandwidth bottleneck link prompt data delegate deploy lower compression level better video quality 
allows video flow opportunistically take advantage available bandwidth 
experiment application consisting video streams bursty data streams compete network bandwidth users modeled unconstrained udp stream 
flows directed mbps maui link 
application bandwidth video data remaining bandwidth link competing users 
application data streams belong distributed fast fourier transform fft computation 
data traffic bursty fft alternates compute phases network usage communication phases nodes exchange large data sets 
important property hierarchical link sharing scheduler video flows priority bandwidth fft flows 
means video quality improved significantly compute phases fft video additional bandwidth 
control delegate placed router data delegate installed server 
video traffic received forwarded data processing generated frames sent back 
sends frames maui link 
shows screen shot bandwidth video flows light grey fft dark grey 
fft bursts bandwidth limited link video quality low fft bursts video link resulting increased video quality 
shows histogram received frame quality 
see majority frames received maximum quality received fft computation phase minimum quality fft communication phase 
frames received quality settings reflect ramp ramp behavior performed control delegate tracks available bandwidth 
bandwidth sharing video fft streams 
load sensitive flow rerouting routing decisions internet today load insensitive application independent 
results simple stable routing protocols cause inefficient network resources 
discovering lightly loaded route reroute application flow may significantly improve application performance 
similarly client server scenario times server overloaded servers idle 
case sense mechanism inside network redirect requests lightly loaded servers achieve better performance 
rci delegates reroute flow packets redirect flow different destination 
simple example illustrate flow rerouting done multiple delegates improve application network throughput 
example application tcp flows shown jpeg compression quality parameter number received frames distribution received jpeg quality 
flow respectively 
application reserves bandwidth link 
delegates installed router monitor optimize throughput flows 
default route flow flow passes routers maui shortest path 
alternative route routers shown dotted line 
delegate uses algorithm reroute flow necessary periodically delegate retrieves bandwidth usage flow data plane queries delegate get available bandwidth application link 
available bandwidth path consisting link higher bandwidth active flow flow delegate reroute flow packets link avoid competition flow 
default route higher available bandwidth delegate resume default forwarding behavior 
experiment flows turned different times shows throughput flows 
initially flow active uses link throughput mbps 
flow turned flow throughput drops dramatically due sharing 
delegate changes route flow 
flow throughput recovers back mbps 
flow turned flow throughput drops half competition link 
flow ends available bandwidth link mbps higher flow current throughput mbps 
flow routed default route uses link 
seen throughput flow goe back mbps 
flow receives full reservation link throughput improved mbps 
summary rerouting delegates help application flows adapt route larger available bandwidth timely fashion 
selective dropping non adaptive flows applications appropriate congestion control increasing problem internet 
applications back congestion back aggressively users correct tcp implementations result get unfair share network bandwidth 
refer flows non conformant 
response problem researchers developed variety mechanisms try protect conformant flows non conformant flows 
include fair queueing scheduling strategies try time sec thr bps flow flow flow 
flow starts 
flow starts 
flow ends load sensitive rerouting results 
distribute bandwidth equally algorithms red fred case congestion try selectively drop packets non conformant flows 
deployed mechanisms improve fairness bandwidth distribution bottleneck link address part problem designed locally 
problem non conformant flows consume probably waste bandwidth upstream congested link 
upstream routers may respond non conformant flow example support detecting non conformant flows flow detected aggregation core router flow appears conformant cause congestion 
problem addressed having routers propagate information non conformant flows upstream path flows 
approach deal denial service attacks servers server report attack router attached network track selectively drop flow potentially way source 
implemented simple version solution delegates 
delegate locally monitors congestion status tries identify non conformant flows flows responsible 
implementation flow considered non conformant queue overflowing extended period time sophisticated mechanisms needed production version system 
bad flow identified delegate enables selective packet dropping flow sends flow descriptor peer delegate upstream router 
delegate receives report bad flow verifies flow high bandwidth consumption enables selective packet dropping possible forwards message upstream router 
clearly alternative policies implemented example certain percentage packets dropped reduce bandwidth dropping packets implementation 
conducted experiments show effectiveness delegates 
experiment tcp streams compete non conformant udp stream 
bottleneck link maui 
throughputs tcp flows different conditions shown 
case udp stream switched tcp flows share link bandwidth evenly 
experiment udp flow background tcp flows performance greatly reduced udp flow 
experiment delegates running routers 
udp flow cause congestion link maui delegate react 
congestion maui link correctly identifies udp flow non conformant 
informs delegate delegate communication channel 
routers drop udp flow packets result tcp flows recover throughputs level experiment 
tcp versus udp fft versus udp conformant tcp fft competing non conformant udp 
second experiment bursty conformant tcp distributed fft computation competes non conformant udp stream 
fft uses endpoints udp stream uses nodes 
show fft communication time affected udp flow different conditions 
results fft data sizes 
base case experiment udp flow idle 
experiment udp flow active result fft communication times dramatically increased 
experiment deploy delegates correctly identify udp flow drop packets 
reduces communication times fft compared experiment 
virtual private network service virtual private network vpn overlay network created existing physical network 
virtual separate physical infrastructure network multiple virtual networks run simultaneously network 
private data traffic belongs virtual network observed virtual networks sharing infrastructure 
related project darwin basis development vpn service allows vpn customization control protocols qos support 
basic prototype running october 
vpn relies delegates hierarchical resource management 
specifically hierarchical resource management possible isolate resources traffic different realize vpn qos having vpn define subtree resource hierarchy 
delegates hand allow control plane protocols specific vpn deployed dynamically 
invoke vpn service users specify topology vpn virtual links routers bandwidth information client networks served vpn specify control plane protocols 
vpn service uses information determine resources needs network formulates request beagle set vpn links control plane protocols delegates 
difficult problems raised application best deal routing different different routing protocols 
simply different table vpn current implementation 
vpn routing table maintained routing daemon implements rip 
routing daemon currently coded viewed special routing delegate 
vpn established user notified start sending data 
data packets originated users belonging vpn identified edge routers classifier 
edge router inserts vpn id packet header inside network core routers flow classification vpn id identify vpn packet belongs 
data forwarding plane handle packet appropriately terms routing qos 
ipsec privacy 
delegate security programmable nature active network brings legitimate safety security concerns 
safety issues brought routers delegates include general code safety concerns various types denial services attacks privacy security concerns 
example malicious delegate pose various threats router ranging router state corruption machine crash 
problem addressed research groups solutions variety runtime mechanisms java sandboxing compile time mechanisms proof carrying code 
section focus security issues related traffic management control 
examples threats include unauthorized bandwidth allocated flows redirecting dropping traffic belonging users 
explain problems examining classes increasingly powerful delegates 
class delegates control local resource allocation modify classifier scheduler states 
primary risks delegate manipulates traffic flows responsible delegate changes scheduler parameters resources belonging users 
solution associating delegates specific flows nodes resource tree shown 
beagle sets flows delegates provides node operating system os information flows resources delegate control 
node os stores information form access control list 
runtime rci call invoked manipulate flows access resources node os checks call permitted delegate consulting access control list 
simple access control mechanism sufficient examples considered far probably useful finer grained access control range actions delegate take 
resource management operations subdivided levels monitoring traffic modifying qos parameters changing structure subtree adding deleting nodes 
similar unix file system access control 
second class delegates affect flow forwarding changing states forwarding engine 
mentioned concerns delegates manipulate flows theirs change parameters associated flows 
solution access control mechanisms prevent delegate manipulating flows 
new set problems comes picture delegate operates flows charge flows pose potential threats routers hosts network 
example delegate launch denial service attack redirecting flows tunneling victim server delegate reroute flow critical links cause congestion ip spoofing occur delegate allowed add arbitrary tunnel headers flows 
key insight address new problems constrain delegate actions virtual network corresponds service deployed 
virtual network consists links routers service 
beagle reserves link resources installs delegates routers 
beagle global view list output routers client networks virtual network service 
sure delegates actions virtual network setup time beagle passes global view node os individual routers 
information node os able verify actions taken delegates conform global view 
far assumed delegates installed beagle beagle trusted provide appropriate access control information 
richer delegate model delegates create delegates certain conditions 
possible example deploy signalling protocol create delegates delegate 
allow vpn service create hierarchies 
similar simpler example delegate allowed transfer authority delegate 
supporting model require richer specification delegate authorities earlier models 
related active programmable network functionality network extended fly active packets carry code handle packet dynamically installing extensions routers 
darwin delegate facility active extensions performance efficiency reasons want pay penalty invoking customer code packet large number packets 
delegates execute band relative data flow executed asynchronously response specific events 
examples report show routing functions suited style invocation 
drawback approach higher cost associated installing active code signalling protocol required active packets 
suggests darwin delegates may efficient example code groups ants short lived datagram applications 
number overviews active programmable networking research available literature 
defense advanced research projects agency darpa sponsored active net node os working group defined active node architecture 
architecture supports execution environment ee execute active applications aa active packets extensions 
delegate runtime environment viewed ee executing control plane router 
handles control packets regular data packets follow cut channel bypass ee 
darwin delegates follow architecture difference 
focused router programming interface rci explicitly general architecture 
active reservation protocol arp project developing framework fast implementation dynamic deployment complex network control functions active network approach 
framework new modified services dynamically installed 
similar programming interface called protocol programming interface ppi defined control plane protocols control data forwarding path 
far arp focused managing versions traditional control protocols routing signaling support control protocols customized specific users 
protocols arp actions restricted specific sets flows 
project provides platform support network programmability 
supports number active networking models including emphasized darwin control plane programmability 
differences darwin calls imply stronger coupling data control plane 
example achieves frame dropping having control plane identify packets dropped darwin relies classifier data plane identify packets 
darwin interface slightly richer appears reason additional calls incorporated 
lot part tina efforts define service oriented architecture telecommunication networks 
efforts similar goals darwin differences 
services envisioned tina telecommunications oriented darwin delegates target broader set services 
second focus tina developing open service framework focus darwin developing mechanisms resource management customized meet service specific needs 
part result efforts standardization effort started define industry standard interface programmable networks 
done context ieee working group 
clearly effort similar darwin rci hope results feed standardization effort 
darwin looking broader question structure build system uses interface effectively 
related standards effort control interface router gsmp narrow scope 
report programmable network architecture control plane functionality router extended delegates code segments implement customized traffic control policies protocols 
delegates affect routers treat packets belonging specific user defined programming interface router control interface rci 
open architecture offers opportunities develop routers community including third party software vendors value added service providers 
node architecture implemented cmu darwin system describe number delegate examples executed testbed demonstrate range applications receive benefits system 
applications include congestion control video streaming load balancing client server applications 
examples tracking non conformant traffic sources dynamically deploying vpn services gave flavor specific network control policies created programmable infrastructure 
examples necessarily provide optimal complete solution problems illustrate rich set traffic control management services easily deployed system built 
plan exten directions generalization architecture performance evaluation wide area networks dealing delegate security issues 
biswas lazar lim pau suzuki wang weinstein 
ieee standards initiative programmable network interfaces 
ieee communications magazine october 
blake black carlson davies wang weiss 
architecture differentiated service december 
ietf rfc 
bob braden 
active reservation protocol arp december 
url www isi edu div arp 
braden clark shenker 
integrated services internet architecture overview june 
internet rfc 
braden zhang berson herzog jamin 
resource reservation protocol rsvp version functional specification september 
ietf rfc 
architectural framework active networks august 
available net url www cc gatech edu projects arch arch ps 
andrew campbell herman de meer michael john daniel 
survey programmable networks 
computer communications review april 
chandra allan fisher eugene ng peter steenkiste eduardo takahashi hui zhang 
darwin customizable resource management value added network services 
sixth international conference network protocols austin october 
ieee computer society 
chandra allan fisher peter steenkiste 
network support application oriented quality service 
proceedings sixth ieee ifip international workshop quality service pages napa may 
ieee 
chandra allan fisher peter steenkiste 
beagle resource allocation protocol application aware internet 
technical report cmu cs carnegie mellon university august 
nilsson inoue 
tina consortium networking telecommunications information services 
ieee communications magazine november 
ferguson 
vpn 
workshop open signalling atm internet mobile networks workshop toronto october 
ferrari verma 
scheme real time channel establishment wide area networks 
ieee journal selected areas communications april 
sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking august 
platform flexible toolkit programming networks commodity operating system october 
unpublished draft 
source java tm 
www javasoft com 
lazar seng lim 
realizing foundation programmability atm networks binding architecture 
ieee journal selected areas communication september 
keng lim 
design implementation customizable vpn service qos 
master thesis information networking institute carnegie mellon university january 
keng lim jun gao eugene ng peter steenkiste hui zhang 
implementing quality service virtual network service vns 
carnegie mellon university progress 
dong lin robert morris 
dynamics random early detection 
proceedings sigcomm symposium communications architectures protocols pages cannes august 
acm 
george necula peter lee 
safe kernel extensions run time checking 
proceedings nd symposium operating systems design implementation osdi pages 
usenix october 
newman edwards hoffman ching lyon 
general switch management protocol specification version march 
rfc 
nichols jacobson zhang 
bit differentiated services architecture internet july 
ietf rfc 
ion stoica hui zhang eugene ng 
hierarchical fair service curve algorithm link sharing real time priority service 
proceedings sigcomm symposium communications architectures protocols pages cannes september 
acm 
david tennenhouse jonathan smith david david wetherall gary 
survey active networking research 
ieee communications magazine january 
david tennenhouse david wetherall 
active network architecture 
computer communication review april 
tina consortium 
www com 
project bind 
comet ctr columbia edu 

