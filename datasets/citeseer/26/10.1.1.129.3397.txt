applying ontologies large scale digital libraries duncan spencer nigel shadbolt school electronics computer science southampton bj uk nrs ecs soton ac uk 
large scale digital libraries available complete mention numerous clear need services draw perform inference calculations metadata produced 
traditional relational database management system rdbms model efficiently constructed optimised business structures necessarily cope issues concurrent data updates retrieval scale hundreds thousands papers 
time growth rdf increasing interest semantic web technologies begins viable alternative scalable practical level 
considers specific application large scale metadata analysis conducts scalability tests real world data 
concludes rdf technologies scalable performance realistic alternative traditional rdbms approaches 
shows relationship queries large scale metadata stores rdf technologies significantly perform traditional rdbms approaches allowing retrieval updating data timely manner 
emergence large scale online digital libraries feature largely welcomed academic scientific community 
systems citeseer google scholar crawl web searching papers increasingly online institutional repositories created exposing papers metadata standard format 
systems sufficiently successful raised expectations user community case people expect academic papers downloadable fully indexed searchable google style citations documents rendered hyperlinks metadata searchable services summarising author institution journal conference available 
various digital libraries attempt meet expectations remains case number papers indexed stored libraries order hundreds thousands increase move open archiving continues metadata available 
producing services run libraries multiple libraries challenge considering issues search speed query complexity 
time growth semantic web technologies may provide answer questions raised 
push intelligent computer readable websites brought fore ontologies means data manipulation integration rdf format data storage transfer 
semantic web research focuses development storage techniques store jena inference language standards owl clear rdf query language sparql allow different approach taken data storage searching provided traditional rdbms models 
details theory practice applying rdf technique large scale digital libraries shows complex queries demanded raised expectations services described data storage rdf querying standard rdf query language sparql provides level performance useful standard sql approaches fast flexible provide real option online digital library services 
motivation relational database model queried sql standard model data storage years 
optimisation indexing techniques boosted efficiency model remains case queries multi table databases remain complex easily expressible plain language 
example simple database schema large metadata repository valid queries distinct authors system papers cite papers author titles articles author written 
sql respectively expressed 
select count authors 
select distinct bibliographies bibliographies bibliographies inner join author bibliographies author author 
select distinct articles title articles articles inner join authors articles authors authors articles year queries relatively simple second third involve inner joins third potentially large table articles raising query complexity potentially increasing time taken produce result depending indexing techniques 
contrast queries expressed relatively simply sparql suitable ontology case standard academic papers people ontology created akt 

select distinct akt author citeseer ecs soton ac uk akt cites publication 
select distinct akt author citeseer ecs soton ac uk akt title akt date support year filter queries may appear similar terms number lines actual logic involved far simpler sparql queries shown response times greatly reduced 
wrong suggest sparql simply better sql query far better sql sparql 
select distinct akt author despite relative simplicity statement major problems query 
firstly query doesn answer question sparql contain equivalent sql count operation user program making call summation calculation separately 
secondly importantly sparql statement query entire knowledge base finding instances author predicate creating distinct list subjects triples 
extremely inefficient way simply count instances authors nature rdf means need count instances relationship order discover identity uris concerned defined authors subjects triples predicate author 
data storage models purpose essential difference rdbms ontology data models respective purposes 
section discusses design rationales approaches essential differences lie 
relational databases typically deal questions identity including identity involves calculations tables 
rdbmss optimised allow efficient querying data data tables columns identity 
means practice queries retrieving total number authors straightforward simply summation number distinct rows authors table 
queries relationships data complex relational model queries possible large scale databases complex tables containing rows time consuming perform required join operations 
overcome problem rdbmss typically offer users opportunity perform indexing operations data 
user chosen indices allow storing sorted columns column combinations meaning vast reduction search time particularly performing complex relational operations 
side increase time taken perform inserts updates system indices associated updated 
additionally large multiple indexed tables index files grow extent bigger actual database files indexing 
systems trade amount indexing need keep system open additions changes efficient querying described systems larger trade offs harder 
contrast identity model traditional rdbms databases ontologybased data designed deal primarily questions relationships predicates focus query 
emergence rdf standard format data description coupled development scalable triplestore solutions store case allowed creation searchable knowledge bases relationship queries easily framed provided ontology concerned sufficiently engineered allow queries 
practice queries retrieving titles documents particular author written straightforward system just needs look predicate subject combinations author predicate followed particular uri representing author filter results 
essentially searching relationship set answers table ontology model suited allow search information 
side note important remember underneath usually database description store built top relational database mysql optimised indexing 
various experiments described section compare relative efficiencies sql sparql approaches important note sql database store experiments mysql installation computer tests focusing relative performances databases differences data models 
practical usage semantic web services initial motivation storing large scale document repository metadata rdf format came desire produce usable efficiently searchable services metadata computer science centric repositories citeseer acm digital library 
straightforward searching browsing facilities fully implemented respective websites repositories desire provide depth services data relationships influence scores papers authors institutions purely citation counting 
raw metadata essentially dublin core plus citations taken sources put different databases identical schemas shown 
schema containing number tables optimised give simplest possible view data smallest number tables possible adhering basic relational database model 
main tables articles authors bibliographies fourth introduced help speed certain author queries means duplication author data 
note experiments attempt merge datasets considered useful see similar results completely distinct similarly sized datasets 
initially questions indexing answered attempting find sensible trade need indexing need flexibility terms particularly adding data 
quickly apparent indexing allowed quick searches indexed column table difficult update new amended data live environment updates stored scheduled low usage period 
indices slower updates tables optimised non essential features foreign key constraints cascade functions removed database handled application level 
small subset citeseer data containing roughly papers compromise model possible containing degree indexing allowing changes database 
full datasets containing metadata author bibliography information half papers compromise possible unique columns tables indexed effectively preventing regular updating indexed dramatically slowing search time 
eventually models chosen system closed system heavily indexed tables updateable live setting open system minimal indexing updates expense search time 
fig 

database schema mysql sources citeseer acm datasets 
note short cut index table storing pre calculated information authors speed query times 
models metadata depth results exposed number web services utilised separate client systems 
set web pages available local server alongside mirror existing citeseer system provided penn state university 
pages utilised web services provide coherent set results users able search browse 
initially implemented citeseer data subset papers held compromise index model described shown fig 
system expanded full dataset closed model described open system led time outs actual results displayed 
closed system sufficiently quick respond queries useful demonstration purposes clear practice system effectively frozen useful short term 
remainder terms open closed sql databases refer databases produced minimal heavy indexing respectively 
fig 

screenshot showing semantic web services client pages running sub set citeseer data 
point direction switched see rdf ontology model provide answers 
theoretically described clear sparql set queries triplestore provide different set response times results unknown increase efficiency open sql model prove sufficient able offer services wanted reasonable timescale 
similarly unclear sparql able provide answers examples section showed clear advantage sql identity queries combination sparql sql better 
client set web pages parallel local citeseer mirror re written utilise re written sparql web services 
metadata populating akt ontology citeseer data augmented automated disambiguation tool services able query data asserted store running number kbs server running numerous web applications including citeseer mirror 
results encouraging majority searches translated sparql searches completed suitable time web services 
slow matched sql queries proved capable responding reasonable open database 
success sparql semantic web service querying model combined small number sql queries open database allowed development stage process creation viewer application 
application uses described combination sparql sql queries calculating influence scores papers authors fly producing summary data selected author search interface browsing neighbouring papers authors citations papers authors authors influence scores shown 
prototype application shown fig 
written java calls variety sparql queries equivalent sql queries directly mysql querying open closed database 
purpose application conjunction web services described allow browsing calculating influence scores various levels granularity papers authors institutions disciplines 
theory results discussed provides platform comparing sql sparql approaches 
contains equivalent queries languages application designed practical interface large scale metadata stores proved ideal test ground compare equivalent sql sparql queries data stores dealing papers 
fig 

screenshot application showing search acm dataset revealing impact scores jon kleinberg relative closeness impact authorship community 
results purpose experiments see purpose ask key questions useful replace open sql queries sparql queries particularly sql slow realistic hope produce system works real time remaining open new data added 
results table show response times set queries performed full acm metadata set papers tests conducted methods data storage retrieval described open database queried sql closed heavily indexed database queried sql store knowledge base queried sparql 
thirteen tests conducted queries web services application need ask point execution 
table 
results experiments performed acm dataset sql sparql test test closed sql open sql sparql search incomplete 
title string search author incomplete name string keller 
search author incomplete name string johnson 
get details title year id get details title year authors id get details title year authors incomplete search string title 
times 
get top times relative impact mins scores cite count author typically ity combination id 
get details author author id get papers id particular author author id get papers id title year particular author author id get impacts papers previous test individual calculate author query impact author total times papers mins done query 
get impacts papers previous test individual calculate author query impact author total times papers 
get closest authors calculate relative impact author id 
tested various author ids 
typically 
complex author 
mins done query 
times mins typical author 
maximum observed complex author 
noticeable results general speed advantage closed database significantly performs open database sparql triplestore queries cases 
realistically important purposes fairness mysql show advantages heavy indexing comparison results needs open sql system kb 
types results reported section sql open database substantially faster sparql tests open sql sparql roughly usable tests sparql substantially faster open sql tests open sql sparql quick useful test 
consider type result turn 
open sql faster sparql queries dealing questions identity single table information gathering string matching particular field sql heavily optimised multiple indexing 
sparql conversely contain function relies searching records subjects triples predicate title full name filtering regular expression time consuming process 
substring queries typically searches clear sql superior practical real world system 
note test produced marginally quicker result open sql sparql due optimised rdbms searching just single table identity information author id sparql query search triples get required information 
open sql sparql similar tended simple queries open sql look single table sparql find small number predicate subject combinations 
practice query type may queries equally results may expected 
sparql faster open sql nature application means largest group results calculating impacts authorship communities requires intense study relationships data 
sparql ideal optimised searching object predicate predicate subject combinations 
open sql relational database model allows joins tables queries quickly complex see examples section tables containing rows joins particularly time consuming multiple indexes closed system applied 
tests show performing numerous individual queries single complex join operation time efficient result identical 
programmatically complex requires tailored scripts generated sparql queries generally quicker particularly test shows authors written larger volume papers 
sparql sql quick single complex test involved issues lead struggle sparql incomplete string querying open sql multi table joins large tables 
closed sql system struggled multiple indexing help query extent queries 
practice application breaks query stages perform search get id best performed open sql get details authors best performed sparql 
important note queries exist constructing applications large scale metadata stores solution break complex queries perform sequentially suitable approach 
analysis important point experiments performed single server particular instance mysql store built 
differences put superior hardware database performance design differences rdbms rdf models data representation 
argued multiple indexing closed database provide better results sql queries leaves complex sql statements performing join operations large tables inherent problem performing updates needs live frequently updated system 
results show practice realistic way viewer application open sql sparql queries 
typical semantic web applications web services client pages described require sql sparql queries order perform effectively remain open having regular data updates 
partly due design sparql certain features sql included sparql count function facility sparql partly due nature sparql sql suggested sql better identity queries sparql superior relationship queries 
metadata papers triples practical approach creating live updateable applications open sql initial searching sparql getting depth data author including information needed influence analysis 
statistics produced application interesting main drawn rdf sparql approach scalable triplestore solution presents viable alternative sql large scale metadata stores particularly queries relationship identity 
shown examples working application sparql performs open sql theoretical empirical level examples sql performing sparql 
shown simpler queries performed approaches approach handle reasonable time frame cases simplifying queries provides solution 
addition shown systems require frequent updates closed heavily indexed preferable requires data source sql database database rdf kb shown large scale metadata stores requiring frequent updating closed system impractical 
reasonable conclude dealing large scale datasets featuring complex relationships queries rdf sparql provide dramatically improved performance conventional rdbms sql approach certain queries 
planned area includes looking drawing data sources rdbms rdf approaches example joining acm citeseer datasets currently held distinct kbs merging different eprints archives 
useful theoretically simple rdf just put resources knowledge base raises ongoing semantic web issue coreference resolution duplicate records question rdbms rdf types solution necessary solve problem 
supported advanced knowledge technologies akt interdisciplinary research collaboration irc sponsored uk engineering physical sciences research council number gr 
professor lee giles isaac penn state university provision citeseer ongoing helpful comments 

lawrence bollacker giles digital libraries autonomous citation indexing ieee computer 


scholar google com 
lagoze van de open archives initiative building low barrier interoperability framework 
proceedings acm ieee joint conference digital libraries va usa 


harris gibbins store efficient bulk rdf storage 
proceedings st international workshop practical scalable semantic web systems sanibel island florida usa 

mc jena implementing rdf model syntax specification proceedings second international workshop semantic web 

akt ontology 
www org publications ontology 

dublin core simple content description format electronic resources 
newsletter 


spencer shadbolt author author citation graph approach name disambiguation proceedings th acm ieee joint conference digital libraries pp 


spencer shadbolt producing compositional view influence preprint 

