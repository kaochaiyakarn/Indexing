expression language architecture exploration compiler simulator retargetability 
ashok peter vijay ganesh khare ics uci edu ics uci edu ganesh ics uci edu ics uci edu describe expression language supporting architectural design space exploration embedded systems chip soc automatic generation retargetable compiler simulator toolkit 
key features language driven design methodology include mixed behavioral structural representation supporting natural specification architecture explicit specification memory subsystem allowing novel memory organizations hierarchies clean syntax ease modification supporting architectural exploration single specification supporting consistency completeness checking architecture efficient specification architectural resource constraints allowing extraction detailed reservation tables compiler scheduling 
illustrate key features expression simple examples demonstrate efficacy supporting exploration automatic software toolkit generation embedded soc codesign flow 
advent system chip soc technology resulted paradigm shift design process embedded systems employing programmable processors custom hardware 
modern system level design libraries frequently consist intellectual property ip blocks processor cores span spectrum architectural styles ranging traditional dsps superscalar risc hybrid asips 
furthermore soc technologies permit incorporation novel chip memory organizations including chip dram frame buffers streaming buffers partitioned register files allowing wide range memory organizations hierarchies explored customized specific embedded application 
embedded soc designer faced dual tasks rapidly exploring evaluating different architectural memory configurations cycle accurate simulator retargetable optimizing compiler adapt application architecture goal meeting system level partially supported nsf mip onr 
dutt alex nicolau dutt ics uci edu nicolau ics uci edu department information computer science university california irvine ca usa performance power cost objectives 
furthermore shrinking time market cycles create urgent need perform traditionally sequential tasks hardware software design parallel 
effective embedded soc codesign flow support automatic software toolkit generation loss optimizing efficiency 
resulted paradigm shift language design methodology embedded soc optimization exploration 
consequently tremendous interest architectural description languages adls drive design space exploration automatic compiler simulator toolkit generation 
hdl asic design flow benefits accrue language design methodology embedded soc exploration including ability perform formal verification consistency checking modify easily target architecture memory organization design space exploration drive automatically backend toolkit generation single specification 
describe expression adl effectively supports dual goals soc exploration automatic generation high quality software toolkit embedded soc 
section describes goals approach 
section describe related adls compare expression 
sections brief overview expression example architecture 
section describes expres sion support detailed scheduling resource constraint specification 
section illustrates ease modification expression support design space exploration section concludes 
goals approach soc designers spend lot time effort exploring candidate processor architectures 
availability variety processor core ip libraries including dsp vliw ss risc asip presents system designer large exploration space choice base processor architecture 
tool kits allow designer perform rapid exploration various processor alternatives necessary 
tool kits provide designer quantitative performance measurements order perform intelligent tradeoffs 
furthermore stringent performance power code density cost constraints mandated modern embedded systems necessitate development high quality software tool kit including minimum cycle accurate simulator optimizing instruction level parallelism ilp compiler exploit novel memory organizations 
asip verification processor libraries dsp vliw memory libraries cache prefetch buffer sram frame buffer chip sdram expression descr 
feedback toolkit generator exploration phase refinement phase toolkit generator feedback exploration simulator exploration compiler retargetable compiler retargetable simulator 
expression design flow profiler profiler application system designer requires ability customize base processor changing parameters processor core number functional units operation latencies 
memory intensive nature embedded applications multimedia network exacerbates traditionally critical memory bottleneck 
requires ability explore optimize novel chip chip memory organizations hierarchies improve memory bandwidth examples include chip dram frame buffers queues novel cache hierarchies 
important aspect exploration taken account approaches ability customize compiler concurrently processor best fit obtained 
shows language design methodology expression 
expression description embedded soc architecture modes 
exploration phase system designer explores evaluates different base processor candidates selected processor libraries different memory organizations hierarchies components selected memory libraries 
exploration phase toolkit generator produce exploration simulator exploration compiler 
goal support rapid design space exploration dse fast possibly functional simulation compiler estimation mode comparative evaluation candidate base processors memory organizations 
refinement phase expression description generate cycle accurate simulator optimizing ilp compiler allows system designer tune base processor characteristics tune memory subsystem hierarchy 
expression designed provide natural specify mechanism capturing information needed support adl design space exploration software toolkit generation methodology 
shown ex pression facilitates automatic generation ing compiler simulator 
retargetable compiler exploits parallelism pipelining available simulator provides accurate timing utilization information 
furthermore description complex processors cumbersome error prone expression provides ability perform consistency checking verification input specification 
related traditionally adls classified categories depending primarily capture instruction set structure processor 
nml isdl examples adls 
nml processor described attributed grammar derivations reflecting set legal instructions 
nml retargetable code generation environment chess describe dsp asip processors 
nml directly support multi cycle multi word instructions 
isdl describes processor terms goal deriving code generator assembler simulator 
isdl constraints parallelism explicitly specified illegal operation groupings 
tedious complex architectures dsps permit operation parallelism motorola vliw machines distributed register files ti 
retargetable compiler system produces code risc architectures starting instruction set processor description application described 
language extension supporting explicit exact bit width integer type declarations targeting embedded software 
processor description represents instruction set appear capture resource conflicts timing information pipelining 
mimola example adl primarily captures structure processor net list target processor described hdl language 
advantage approach description processor synthesis code generation 
target processor micro code architecture 
net list description extract instruction set produce code generator 
extracting instruction set structure may difficult complicated instructions may lead poor quality code 
mimola descriptions generally low level laborious write 
clear generate simulator mimola description 
languages capture structure behavior processor detailed pipeline information typically specified reservation tables proposed 
lisa adl main characteristic operation level description pipeline 
lisa designed primarily retargeting simulators 
support specification detailed constraint information needed compiler instruction scheduling 
extension lisa approach focuses explicit support detailed pipeline behavior enable generation production quality cycle phase accurate simulators 
mixed level structural behavioral representation 
contains code generator insulin simulator asips 
simulator uses vhdl model generic parameterizable machine 
application translated user defined target instruction set instruction set generic machine 
clear resource conflicts parallel pipelined instructions needed scheduling captured 
furthermore explicit specification memory subsystem appear possible 
language system closest goals approach 
mixed level adl intended dse 
information broken sections format resource usage latency operation register high level classification information represented 
constructs preprocessing enable concise descriptions 
allows restricted simulator hpl pd processor family 
permits description memory system limited traditional hierarchy register files caches 
approach target general memory organizations hierarchies including chip dram frame buffers partitioned memory address spaces captures constraints operations explicit reservation tables hierarchical description compactness 
hierarchical specification allows instruction set structure information specified level hierarchy usage latency operation local changes architecture exploration propagate hierarchy require global changes specification making cumbersome error prone 
expression follow mixed level approach behavioral structural facilitate dse 
furthermore provide support specification novel memory subsystems 
avoid explicit representation reservation tables extracting structural description algorithm outlined section approach eliminates redundancy net list information drive compiler simulator 
expression overview expression captures information retarget cycle accurate structural simulator optimizing ilp compiler 
system described terms instruction set behavior specification structure shown 
section illustrates aid example 
shows interaction expression specification retargetable compiler simulator 
dark shaded boxes represent generators read appropriate sections expression specification generate information required compiler simulator components 
structural simulator retargeted changing datapath netlist execution semantics architectural components 
ilp compiler retargeted changing machine dependent parameters instruction selection resource allocation ilp scheduling memory optimization techniques 
key feature required adl supporting aggressive accurate compiler scheduling ability capture detailed resource constraint information typically form reservation tables 
previous approaches required user specify reservation tables operation basis 
specification reservation tables cumbersome architectures containing lot instruction types instructions varied accessing modes 
furthermore vliw architectures dsp style features may hierarchical composition rules simplify specification reservation tables 
expres sion solve problem concise specification resource constraints level detailed reservation tables automatically generated operation basis 
component information extraction behavior specification operations specification instruction description operation mappings simulator simulator engine library reusable components library target specific components tree pattern generation expression binding info 
extraction compiler connectivity information extraction arch 
components spec 
pipeline data transfer paths reservation table gen instr 
set information fu rf binding scheduling information analysis optimization library connectivity information structure specification memory subsystem 
interaction expression retargetable compiler simulator toolkit 
expression allows user specify rt level datapath netlist netlist control signals processor level 
rt level architectural component specified 
pipeline paths valid paths specified 
information netlist simulator reservation tables compiler generated 
resource constraint specification scheme reduces complexity specification allows consistency completeness checking specification 
sram unit unit rf unit rf cache main memory frame buffer dma 
example memory subsystem key feature expression ability specify novel memory subsystems 
soc technology permits customization processor cores different memory architectures requires exploration novel memory organizations hierarchies 
shows example memory system memory address space divided subsequently netlist refer rt level datapath netlist sram main memory dram 
main memory accessed data cache frame buffer 
expres sion storage specification retarget compiler optimizations exploit memory organization 
expression organization expression employs simple lisp syntax ease specification enhance readability 
detailed description expression 
illustrate salient features expression example 
example architecture cross box mem mem rfa rfb rfx rfy alu mult 
example architecture bus bus shows simplified version motorola dsp processor additional multiplier unit added 
dsp bus architecture execute alu operation upto additional parallel moves cycle 
address generation units agu agu shown generate addresses required parallel moves 
sections expression shown expression description composed main sections behavior structure sub divided subsections operations instruction operation mappings components pipeline data transfer paths memory subsystem respectively 
subsection illustrated examples 
refer operations specification subsection describes processor 
operation processor described terms opcode operands 
types possible destinations operand specified 
specifying parallel move operations op group ops opcode operands src dst var groups src dst defined 
var groups src mem mem dst rfa rfb rfx rfy instruction description subsection captures parallelism available architecture 
instruction viewed containing operations executed parallel 
instruction contains list slots filled operations slot corresponding functional unit 
contain explicit opcodes model parallel moves purposes illustration denote moves opcodes 
instr slots alu mult parallel moves instr slots unit alu unit mult unit agu unit agu operation mappings subsection user specifies information needed instruction selection architecture specific optimizations compiler 
mapping compiler operation target specific op 
op mapping generic iadd src src dst target add src src dst multiply replaced add generic mult src dst target add src src dst components specification subsection describes rt level component architecture 
components pipeline units functional units storage elements ports connections buses 
multi pipelined units timing behavior specified 
alu opcodes alu ops instantiate alu 
alu ops defined operations section 
pipeline data transfer paths description subsection describes netlist processor 
pipeline description provides mechanism specify units comprise pipeline stages data transfer paths description provides mechanism specifying valid data transfers 
information retarget simulator generate reservation tables needed scheduler shown section pipeline fetch decode ex stage pipeline ex parallel alu mult agu agu describe datapath transfers 
type uni bi directional 
source sink components activated transfer type bi rfa bus rfb bus rfx bus rfy bus mem bus mem bus bus bus memory subsystem subsection describes types attributes various storage components register files drams caches 
note netlist contains connectivity information memory subsystem 
storage parameters cache type cache size line associativity address range access times reservation table generation mentioned compiler scheduler needs reservation tables test resource conflicts operations execution cycles overlap 
requiring user laboriously specify reservation tables operation basis structural information expression automatically generate 
key idea reservation table generation approach expression operation proceeds pipeline path accesses storage units data transfer paths 
effect possible trace execution operation pipeline data transfer segments generate accurate reservation tables 
frees user burden having specify reservation tables operation additionally possible check consistency completeness specification 
outline reservation table generation scheme operation structural description 
illustrate generation reservation table parallel move operation opcode functional unit agu 
steps needed reservation table generation 
input operation op output reservation table rt operation op 

find pipeline path contains op 
generate partial rt pipeline path 

data transfer initiated op determine source sink components 
find transfer segments implement 
data transfer 
add objects segment rt 
output completed reservation table example illustrate reservation table generation 
input agu mem rfb output reservation table operation cyc stands cycle pipeline path fetch decode agu partial rt cyc fetch cyc decode cyc agu source mem sink rfb bus cross box bus rt cyc 
cyc agu mem bus cross box bus rfb 
steps reservation table generation illustrated example refer 
shown expression designed support rapid dse exploration phase requiring fast turnaround time high quality code generation simulation refinement phase 
different phases design flow computation speed requirement shifts total exploration time compilation simulation time 
account conflicting goals reservation tables generated fly compilation generated stored database 
exploration phase computing reservation tables onthe fly beneficial 
architecture fixed quality tool kit needed reservation tables computed apriori reduce compilation time 
support design space exploration dse allows system designer perform tradeoffs various competing goals cost performance power 
objective dse evaluate numerous processor memory configurations targeted applications 
adl dse capture structural behavioral aspects system 
expression follows mixed level approach enable changes structure memory subsystem 
furthermore adl able easily reflect changes system 
example designer may vary processor parameters number functional units register files buses example varying adding deleting operations changing operand types changes behavior fairly easy expression adls behavior centric isdl employ mixed level approach 
hand structural changes expression quite simple structural changes adls isdl complicated cases novel memory organization hierarchies feasible 
evaluated expression see easy local changes architecture add delete operations compared equivalent changes 
illustrate example architecture shown 
example initial specification required approximately lines expression required approximately lines 
specification appears fairly concise comes large cost modifications architecture may necessitate change sections 
increases possibility errors specification 
expression changes architecture usually involve making changes certain sections 
furthermore automatically generate detailed reservation table information expression structural description requires operation change affected reservation tables 
additionally consistency completeness checking mechanism alerts designer errors expression specification 
evaluate effect splitting register file rfx register files rfx rfx 
useful instance reduce cost expensive build register files ports 
modified architecture shown 
cross box mem mem rfa rfb rfx rfx rfy alu mult bus bus 
modified example rfx split rfx rfx connection deleted added change architecture impacts resource constraints specification expression 
shown additions specifications expression order incorporate changes example architecture 
changes section rfx rfx section resource rfx rfx ru time gg section resource rfx unit rfx bus rfx unit rfx bus section table reg transfer rfx unit rfx unit section reservation rt ru agu rfa unit ru rfx rt ru agu rfx unit ru rfx section scheduling due space limitations complete expression omitted 
viewed www ics uci edu express adl main html deletions remove original register file slightly extensive expression 
case alt resv rt gg section case op alt alt gg changes expression regfile rfx connection type bi rfx bus rfx bus local architectural change required modifications sections hierarchy lines added expression changes localized requiring modifications sections lines added 
complex changes architecture adding buses connection units memories require drastic changes simple expression 
seen example expression better suited language rapid dse 
summary expression new adl rapid dse retargeting high quality compiler simulator toolkit 
support fast iteration design cycles complex systems chip fast retargeting compiler simulator necessary 
expression language retarget optimizing compiler cycle accurate simulator set toolkit generation algorithms 
compiler exploits parallelism pipelining available architecture simulator provides accurate profiling feedback designer allow system level trade offs 
attributes nml lisa isdl mimola expression compiler supp cycle acc sim pipeline supp mult cyc supp net list info instr set info tables memory hier 
table 
comparison different adls propose new mechanism concisely specify resource information required generate reservation tables scheduling parallel pipeline multi cycle operations structural description architecture 
eliminates redundancy reducing amount description needed user process error prone 
memory intensive nature multimedia applications requires exploration different memory organizations order meet cost performance power goals 
ex pression able capture memory organizations memory aware compiler optimizations 
table summarizes comparison expression adls 
rows represent characteristics adls 
respects language similar approach 
cycle accurate simulation provides limited retargeting hpl pd processor family employ approach similar lisa providing control modeled architecture 
differ lisa extensive support optimizing compiler algorithms 
extract reservation tables netlist 
adls expression able capture novel memory subsystems 
expression employ mixed level specification combining behavioral structural information efficiently support dse retargetability automatic compiler simulator toolkit generation 
expression descriptions range architectures including vliw ti dsp motorola implemented 
expression currently drive projects irvine including memory estimation exploration environment express optimizing retargetable compiler exploration environment embedded systems chip 
going targets strengthening coupling compiler architecture inserting architecture dependent optimizations providing architecture self adapting compiler flow 
chess retargetable code generation embedded dsp processors 
code generation embedded processors 
kluwer 
isdl instruction set description language retargetability 
proc 
dac 
programming language processor embedded systems 
proc 

gyllenhaal optimization machine descriptions efficient 
proc 
th annual international symposium microarchitecture 
paulin flexible firmware development environment embedded systems 
proc 
dagstuhl code generation workshop 
leupers retargetable generation code selectors hdl processor models 
proc 

lisa machine description language generic hw sw design 
ieee workshop vlsi signal processing 

nml machine description formalism 
technical report tr sm imp dist tu berlin cs dept 
dutt 
memory size estimation multimedia applications 
proc 
codes cache 
khare ganesh dutt nicolau 
expression adl system level design exploration 
technical report tr university california irvine 
gyllenhaal 
machine description language compilation 
master thesis dept ee uiuc il 
devadas 
instruction selection resource allocation scheduling aviv retargetable code generator 
proc 
dac 
leupers marwedel 
retargetable code generation structural processor descriptions 
design automation embedded systems 
motorola dsp bit digital signal processor family manual 
panda dutt nicolau 
architectural exploration optimization local memory embedded systems 
proc 
isss 

processor description language supporting retargetable multi pipeline dsp program development tools 
proc 
isss december 
texas instruments 
tms cpu instruction set guide 
release www org 
user manual 
