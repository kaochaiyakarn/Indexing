new foundation control dependence slicing modern program structures venkatesh prasad torben anindya banerjee matthew dwyer john hatcliff department computing information sciences kansas state university department computer science engineering university nebraska lincoln 
notion control dependence underlies program analysis transformation techniques 
despite wide applications existing definitions approaches calculating control dependence difficult apply seamlessly modern program structures 
program structures substantial exception processing increasingly support reactive systems designed run indefinitely 
revisits foundational issues surrounding control dependence slicing 
develops definitions algorithms computing control dependence directly applied modern program structures 
variety properties show new definitions conservatively extend classic definitions 
context slicing reactive systems proposes notion slicing correctness weak bisimulation proves definition control dependence generates slices conform notion correctness 
new definitions algorithms control dependence form basis publicly available program slicer implemented full java 
notion control dependence underlies program analysis transformation techniques numerous applications including program slicing applied program understanding debugging partial evaluation compiler optimizations global scheduling loop fusion code motion intuitively program statement control dependent statement typically conditional statement controls executed bypassed execution program 
existing definitions approaches calculating control dependence slicing widely applied current form years aspects definitions prevent applied supported part army research office daad darpa program afrl contract nsf ccr ccr ccr itr ccr lockheed martin intel 
manhattan ks usa 
ab hatcliff cis ksu edu lincoln ne usa 
dwyer cse unl edu smoothly modern program structures rely significantly exception processing increasingly support reactive systems designed run indefinitely 
classic definitions control dependence stated terms program controlflow graphs cfgs cfg unique node apply directly program cfgs multiple nodes node 
restriction means existing definitions applied directly programs methods multiple exit points restriction violated method raises exceptions includes multiple returns 
restriction means existing definitions applied directly reactive programs system models control loops designed run indefinitely 
restriction usually addressed performing pre processing step transforms cfg multiple nodes cfg single node adding new designated node cfg inserting arcs original exit states new node :10.1.1.43.1614
restriction addressed similar fashion selecting single node cfg represent node 
case problematic pre processing restriction criteria selecting nodes lead desired control dependence relation program nodes unclear 
particularly true threads event handlers explicit shut methods shut killing thread thread control flow indicate exit point 
ii 
deeper problem existing definitions slicing correctness apply programs terminating execution traces fail state slicing transformation preserves termination behavior program sliced 
definitions applied reactive programs designed execute indefinitely 
programs numerous modern applications event processing modules gui systems web services distributed real time systems autonomous components data sensors despite difficulties appears researchers practitioners continue apply slicing transformations programs fail satisfy restrictions 
reality pre processing transformations related issue introduce extra overhead entire transformation pipeline clutter program transformation visualization facilities necessitate maintenance mappings transformed cfgs back original cfgs introduce extraneous structure ad hoc justifications stream tools transformations interpret build consistent manner 
regarding issue ii infeasible continue ignore issues termination slicing increasingly applied high assurance applications reducing models verification reasoning security issues crucial liveness non termination properties preserved :10.1.1.43.3170
working larger project slicing concurrent java programs necessary revisit basic issues surrounding control dependence sought develop definitions directly applied modern program structures reactive systems 
propose justify usefulness correctness simple definitions control dependence overcome problematic aspects classic definitions described 
specific contributions follows 
propose new definitions control dependence simple state easy calculate directly control flow graphs may nodes non unique nodes avoiding troublesome pre processing cfg transformations section 
prove definitions applied reducible cfgs yield slices correct generalized notions slicing correctness form weak bisimulation appropriate programs infinite execution traces section 
clarify relationship new definitions classic definitions showing new definitions represent form conservative extension classic definitions new definitions applied cfgs conform restriction single node definitions correspond classic definitions introduce additional dependences omit dependences section 
discuss intuitions algorithms computing control dependence new definitions justify control dependence computable polynomial time section 
expanded discussions definitions full proofs appear companion technical report :10.1.1.43.1614:10.1.1.126.3689
proposed notions control dependence described implemented indus publicly available open source eclipse java slicer works full java applied code bases lines java application code bytecodes excluding library code 
application stand program visualization debugging code transformation tool slicer generation bandera tool set modelchecking concurrent java systems basic definitions control flow graphs sequel follow tradition represent program control flow graph definition adapt ball horwitz :10.1.1.29.3872
definition control flow graphs 
control flow graph labeled directed graph set nodes represent commands program set partitioned subsets statement nodes ns having successor predicate nodes np having successors contains nodes successors contains nodes set labeled edges represent control flow graph nodes np outgoing edges labeled respectively ns outgoing edge labeled representing taken start node incoming edges nodes reachable 
display labels cfg edges necessary current exposition 
stated earlier existing presentations slicing require cfg satisfies unique node property exactly element ne ne reachable nodes definition require property cfgs consider cfgs unique node property comparisons previous 
relate cfg program represents function code map cfg node code program statement corresponds node 
specifically ns code ns yields code assignment statement np code np code test conditional statement labels edges np allow determine nodes true false branches conditional 
function def maps node set variables defined assigned node singleton empty set ref maps node set variables referenced node 
cfg path ni nk sequence nodes ni ni nk consecutive pair nodes nj path edge 
path nodes ni nk denoted ni nk 
meaning clear context denote set nodes contained write occurs sequence 
path non trivial contains nodes 
path maximal infinite terminates node 
definitions describe relationships graph nodes distinguished start nodes :10.1.1.50.4405
node dominates node written dom path start node passes note dominates relation reflexive 
node post dominates node written post dom path node node passes node strictly postdominates node post dom node immediate postdominator node post dominator path node note domination relations defined post domination relationships defined graphs unique node property 
node strongly post dominates node post dominates integer path node length passes 
difference strong post domination simple definition node occurs path post dominates may case loop cfg admits infinite path encounters strong rules possibility loops sensitive possibility non termination paths cfg form reducible partitioned disjoint sets forward edge set eb back edge set forms dag node reached entry node edges eb target dominates source structured programs including java programs give rise reducible control flow graphs 
definitions correctness results apply irreducible cfgs correctness result slicing bisimulation holds reducible graphs bisimulation requires ordering properties guaranteed reducible graphs see example section preceding theorem 
program execution execution semantics program cfgs phrased terms transitions program states cfg node store mapping corresponding program variables values 
series transitions gives execution trace statement level control flow graph 
state ni code ni executed transition ni successor state ni 
execution begins start node execution node possibly updates store transfers control appropriate successor node 
execution node ne produces final state halt control point indicated special label halt indicates normal termination program execution 
presentation slicing section involves arbitrary finite infinite non empty sequences states written 
set variables write 
notions dependence slicing program slice consists parts program potentially affect variable values referenced program points interest program points traditionally called slicing criterion 
slicing criterion program non empty set nodes nk ni node cfg 
definitions classic ones basic notions dependence appear slicing sequential programs data dependence control dependence 
data dependence captures notion variable dependent variable definition reaches 
definition data dependence 
node data dependent written dd arrow pointing direction data flow variable exists non trivial path cfg node def def ref 
control dependence information identifies conditionals may affect execution node slice 
intuitively node control dependent predicate node directly determines executed bypassed 
definition control dependence 
node control dependent program written cd exists non trivial path cfg node post dominated strictly node control dependent predicate paths connect unique node contains 
slightly different notions control dependence appearing literature consider variants relations rest 
simply note definition standard widely see :10.1.1.50.4405
write dd cd algorithm constructing program slice proceeds finding set cfg nodes sc called slice set back ward static slice nodes reachable 
term backward signifies algorithm starts criterion nodes looks backward program control flow graph find program statements influence execution criterion nodes 
definitions control dependence applied computing forward slices 
definition slice set 
slicing criterion program slice set sc respect defined follows sc 
consider slicing correctness requirements greater detail section 
note commonly slicing literature desired correspondence source program slice formalized emphasis applications foundations leads subtle differences presentations 
notion correct slice stated notion projection 
informally arbitrary trace analogous trace ps ps correct slice projecting nodes criterion variables referenced nodes yields identical state sequences 
assessment existing definitions variations existing control dependence definitions definition control dependence widely number subtle variations appearing literature 
admissibility indirect control dependences 
example definition con trol dependence definition fig 
conclude cd cd cd hold post dominate fact indirectly related play role determining executed bypassed captured definition control dependence transitive closure slice set construction definition 
definitions control dependence incorporate notion transitivity directly definition illustrate 
sensitivity non termination 
consider fig 
node represents post test controls potentially infinite loop 
definition cd holds cd hold post dominates may determine executes gets execute due infinite loop forever 
definition non termination insensitive 
illustrate variations recalling definitions strong weak control dependence podgurski clarke number works study control dependence bilardi pingali 
definition podgurski clarke control dependence 
strongly control dependent pc scd path contain immediate post dominator 
weakly control dependent pc strongly post dominates successor strongly post dominate successor 
definition captures direct control dependence strong control dependence defined captures indirect control dependence 
example fig 
contrast definition pc scd path afg contain immediate post dominator show context definition computes transitive closure dependences definitions give rise slices 
weak control dependence subsumes notion strong control dependence pc scd pc implies captures weaker dependences nodes induced non termination non termination sensitive 
fig 
pc strongly post dominate presence loop controlled guarantees exists path node length passes impact variations slicing 
note slicing definition strong control dependence transform non terminating program terminating non termination preserved slice 
fig 
assume loop controlled infinite loop 
slice criterion include assume data dependence slicing strong control dependence 
sliced program able observe execution observation possible original program execution diverges reached 
contrast difference direct indirect statements control dependence largely technical stylistic decision definitions stated 
works consider non termination sensitive notion weak control dependence 
conjecture reasons 
weak control dependence larger relation relating nodes include nodes slice 
second applications slicing focus debugging program visualization understanding applications having slices preserve non termination important having smaller slices 
slicing increasingly security applications model reduction technique software model checking 
applications important consider variants control dependence preserve non termination properties failure allow inferences compromise security policies instance invalidate checks liveness properties :10.1.1.43.3170
unique node restriction cfgs definitions control dependences aware require cfgs satisfy unique node requirement software systems fail satisfy property 
augmented fig 

simple cfg 
illustrates cfg unique exit node reachable nodes augmented unique exit node reachable nodes 
cfg multiple control sinks different sorts 
existing works simply require cfgs property suggest cfgs augmented achieve property steps insert new node cfg add edge exit node pick arbitrary node non terminating loop add edge experience augmentations complicate system analyzed ways 
augmentation non destructive new cfg generated costs time memory 
augmentation destructive may clash requirements clients cfg necessitating reversal augmentation subsequent analyses proceed 
augmentation reversed graph algorithms analyses algorithms intelligent operate actual cfg embedded augmented cfg 
systems threads main control loop exit loop exited simply killing thread 
example xt library applications create widgets register callbacks call enter infinite loop manages dispatching events widgets application 
palmos applications designed start receiving start code execute loop terminate receiving code 
application may choose ignore code starts terminate explicitly killed 
cases node loop picked loop exit node purpose augmenting cfg 
disrupt control dependence calculations 
fig 
intuitively expect control dependent cfg 
pc pc augmented cfg 
trivial prune dependences involving new dependences pc exist cfg 
suggestion delete dependence may cfg fails exists node successor predecessor pc exists cfg augmented cfg obvious recover information 
address issues head considering alternate definitions impose unique node description 
new dependence definitions previous definitions control dependence ni specified considering paths ni unique cfg node essentially ni node delimit path segments considered 
aim definitions apply cfgs node node aim specify control dependent ni focusing paths ni specifically focus path segments delimited ni ends intuitively corresponding situation reactive program reaching node program behavior begins repeat returning ni 
high level intuition remains definition executing branch ni leads executing branch ni cause bypassed 
additional constraints added occurs occurrence ni limits region seen bypassed segments leading occurrence ni ensuring ni controlling definition considers maximal paths includes infinite paths sensitive non termination 
definition ni 
cfg directly non termination sensitive control dependent node ni ni successors nk nl maximal paths nk occurs ni occurs occurrence ni exists maximal path nl occur strictly preceded ni 
supplement traditional presentation dependence definitions definitions formulae computation tree logic ctl :10.1.1.37.2306
ctl logic describing structure sets paths graph making natural language expressing control dependences 
informally ctl includes path quantifiers define path node structure exists paths node structure 
structure path defined modal operators refer node satisfying node states successor node node states existence node states path consists entirely nodes states existence node path leading node consists nodes operator variation relaxes requirement node exist 
ctl formula path quantifiers modal operators occur pairs af says paths node node occurs 
ctl formula captures definition control dependence 
ni ni ex ex jw ni ni expresses fact ctl formula checked graph node ni 
conjuncts essentially direct transliteration conditions definition 
formulated definition apply execution traces cfg paths 
setting needs bound relevant segments ni discussed 
working cfg paths definition conditions simplified read follows maximal paths nk occurs exists maximal path nl occur 
ctl formula simplified definition ni ni ex af ex 
see proof simplified definition definition equivalent cfgs :10.1.1.43.1614:10.1.1.126.3689
illustrating non termination sensitivity definition note fig 
exists maximal path infinite loop occurs 
fig 
note infinite path cycle occur 
turn constructing non termination insensitive version control dependence 
definition considered paths leading conditional 
need limit reasoning finite paths reach terminal region graph 
handle context cfgs unique node property generalize concept node control sink set nodes node set reachable node set path leading set 
precisely control sink set cfg nodes form strongly connected component successor 
trivial see node forms control sink loop exit edges graph forms control sink 
example control sinks fig 
control sinks fig 

set sink bounded paths nk denoted nk contain paths nk node ns ns belongs control sink 
definition ni 
cfg directly non termination control dependent ni ni successors nk nl paths nk exists path nl leads control sink 
ctl ni ni ex ex ju sink sink represent quantification sink bounded paths sink 
evaluates true current node belongs control sink sink returns sink set associated current node 
illustrating non termination insensitivity definition note fig 
paths control sink contain fig 
exists path control sink path sink contain path control sink contain interestingly fig 
definition concludes trivial path control sink belongs control sink 
definition inherently captures form fairness back edge guarantees executed infinite number times way avoid executing branch cycle 
consequently may control structures inside control sink give rise control dependences 
applications desires detect dependences apply definition control sinks isolation back edges removed 
properties dependence relations showing new definitions control dependence conservatively extend classic definitions consider definitions original setting cfgs unique nodes definitions coincide classic definitions 
addition direct non termination insensitive control dependence definition implies transitive closure direct non termination sensitive control dependence 
theorem coincidence properties 
cfgs unique node prop erty nodes ni nj ni cd implies ni ni implies ni cd ni pc iff ni cfgs nodes ni nj ni implies ni part theorem illustrated follows fig 
holds 
holds hold 
bisimulation correctness proof section shall need results slice sets members termed observable 
main intuition nodes slicing criteria represent observations making cfg consideration 
specifically observe executed observe values variables referenced crucial property observable node path lemmas encountered sooner paths 
letting set nodes lemma 
assume closed 
assume path 
maximal paths contain 
notion closed ni ni 
lemma 
assume closed 
assume path 
sink bounded paths contain 
consequence result giving conditions preclude existence infinite un observable paths lemma 
assume path starting contains node 
closed sink bounded paths starting reach 
closed maximal paths starting reach 
ready section main result node unique observable 
need cfg reducible seen counterexample edges cycle 
theorem 
assume paths paths nodes belong 
closed cfg reducible 
slicing describe slice reducible cfg wrt 
slice set sc smallest set containing closed data dependence dd closed result slicing program cfg original code map code replaced code 
code code sc sc statement node code statement skip predicate node code semantics non deterministically chooses successors 
definition conceptually simple facilitate correctness proofs 
course want post processing eliminating skip commands eliminating commands successor nodes equal shall address issue transformations trivially meaning preserving 
correctness properties slicing criterion execution nodes correspond silent moves non observable actions 
slicing transformation preserve behavior program respect observations parts program irrelevant respect computing observations sliced away 
slice set sc built definition represents nodes relevant maintaining observations prove correctness slicing establish stronger result sc observations wrt 
original code map code wrt 
sliced code map code imply observations 
discussion suggests appropriate notions correctness slicing reactive programs derived notion weak bisimulation concurrency theory transition may include number moves 
setting shall consider transitions steps arriving node slice set 
definition 
wrt 
code map codei denotes program state rewrites step denotes exists sk sk nk sc sc definition 
binary relation program states bisimulation exists exists node define set relevant variables stipulating exists node nk sc path nk refs nk defs nodes occurring nk 
defined matter code code easy see value influenced content nodes sc set closed dd 
closedness properties sc affected code code 
arrived correctness theorem theorem 
relation iff 
reducible sc closed bisimulation 
non termination sensitive control dependence algorithm control dependences calculated symbolic data flow analysis 
outgoing edge predicate node represented token 
node summary set maintained predicate node tokens injected summary sets successors predicate node 
tokens propagated rules occur 
non predicate node tokens summary sets copied corresponding summary sets records maximal paths containing contain tokens corresponding predicate node arrived node tokens summary sets copied corresponding summary sets records maximal paths containing contain termination indicates maximal paths starting contain observation tn definition inferred directly control dependent hand tn definition inferred directly control dependent algorithm worst case asymptotic complexity sum outdegree predicate nodes cfg 
linear time algorithms calculate control dependence augmented cfgs proposed literature 
practical cost augmentation varies specific algorithm nature control dependence calculated 
experience implementation algorithm program slicer full java suggests despite complexity bound elegantly scales programs tens thousands lines code 
suspect due part elimination processing overhead involved dealing augmented cfgs 
complete description algorithm correctness complexity analysis :10.1.1.43.1614:10.1.1.126.3689
non termination sensitive control dependence control flow graph 
matrix sets represents sn sequence integers denotes tn cd sequence sets 
set nodes 
initialize succs sn tn calculate path reachability flag false remove sn tn sn sn sn sn sn flag true flag succs successor sn sn sn sn sn flag succs sn tn calculate non termination sensitive control dependence sn sn tn cd cd return cd fig 

algorithm calculate non termination sensitive control dependence 
related fifteen years ago control dependence rigorously explored podgurski clarke 
variety related calculation application control dependence setting cfgs satisfy unique node property 
realm calculating control dependence bilardi proposed new concepts related control dependence algorithms concepts efficiently calculate weak control dependence 
johnson proposed algorithm calculate control dependence time linear number edges 
comparison sketch feasible algorithm general setting 
context slicing horwitz reps binkley standard approach inter procedural slicing dependence graphs 
allen horwitz extended previous slicing handle inter procedural control flow 
handle cfg nodes normal return exceptional return unclear affects control dependence captured dependence graph 
comparison shown program slicing feasible cfgs 
relevant slicing correctness horwitz semantics multilayered approach reason correctness slicing realm data dependence :10.1.1.20.9646
ball program point specific history approach prove correctness slicing arbitrary control flow 
extend consider arbitrary control flow unique node restriction 
correctness property weaker property bisimulation require ordering maintained observable nodes dependence nodes holds irreducible cfgs 
definitions apply irreducible graphs need reducible graphs achieve stronger correctness property 
currently investigating establish correctness property control dependence definitions irreducible graphs 
hatcliff notions dependence concurrent cfgs propose notion bisimulation correctness property :10.1.1.43.1614
teitelbaum study static slicing promela model description language model checker spin application model checking simulation protocol understanding 
reuse existing notions slicing discuss issues related preservation non termination liveness properties formalize notion correct slice applications 
krinke considers static slicing multi threaded programs shared variables focuses issues associated inter thread data dependence consider non termination sensitive control dependence 
notion control dependence myriad applications researchers tool builders increasingly seek apply modern software systems applications control flow structure semantic behavior systems mesh requirements existing control dependence definitions 
proposed conceptually simple definitions control dependence applied directly structure modern software avoiding preprocessing transformations introduce overhead conceptual complexity dubious semantic interpretations provide solid semantic foundation applying control dependence reactive systems program executions may non terminating 
rigorously justified definitions providing detailed proofs correctness see companion technical report expressing temporal logic provides unambiguous definition allows mechanically checked debugged examples automated verification tools showing relationship existing definitions implementing experimenting publicly available slicer full java :10.1.1.43.1614:10.1.1.126.3689
addition provided algorithms computing new control dependence relations argued additional cost computing relations negligible considers cost preprocessing steps required previous definitions 
believe benefits widely applying definitions static analysis tools 
ongoing continue explore foundations statically dynamically calculating dependences concurrent java programs slicing program verification security applications 
particular exploring relationship dependences extracted execution traces dependences extracted control flow graphs effort systematically justify comprehensive set dependence notions rich features concurrent java programs 
effort yield direct semantic connection notions dependence execution traces working indirectly syntactic oriented cfg definitions 
translated temporal logic dependence definitions investigating certain temporal properties version program preserved sliced version 

corbett dwyer hatcliff laubach robby zheng bandera extracting finite state models java source code 
nd international conference software engineering icse 


podgurski clarke formal model program dependences implications software testing debugging maintenance 
ieee trans 
soft 
engg 


rugaber relationship slicing debugging program understanding 
seventh ieee international workshop program comprehension iwpc 


anderson program analysis specialization programming languages 
phd thesis diku university copenhagen 

ferrante ottenstein warren program dependence graph optimization 
acm toplas 

hatcliff corbett dwyer sokolowski zheng formal study slicing multi threaded programs jvm concurrency primitives 
international static analysis symposium sas 

hatcliff dwyer zheng slicing software model construction 
journal higher order symbolic computation 

banerjee dwyer hatcliff new foundation control dependence slicing modern program structures 
technical report santos lab kansas state university 
available projects cis ksu edu admin index php docid group id 

santos laboratory kansas state university indus toolkit customize adapt java programs 
available indus projects cis ksu edu 

ball horwitz slicing programs arbitrary control flow 
international workshop automated algorithmic debugging 
volume lecture notes computer science springer verlag 

muchnick advanced compiler design implementation 
morgan kaufmann publishers 
san francisco california usa 

tip survey program slicing techniques 
journal programming languages 

weiser program slicing 
ieee trans 
soft 
engg 


bilardi pingali framework generalized control dependences 
pldi 

clarke grumberg peled model checking 
mit press 

milner communication concurrency 
prentice hall 

jayaraman hatcliff delivering indus java program slicer eclipse 
fundamental approaches software engineering fase 
appear 

johnson pingali dependence program analysis 
pldi 

horwitz reps binkley interprocedural slicing dependence graphs 
acm toplas 

allen horwitz slicing java programs throw catch exceptions 
pepm 

horwitz pfeiffer reps dependence analysis pointer variables 
pldi 

teitelbaum slicing promela applications model checking simulation protocol understanding 
fourth international spin workshop 

krinke static slicing threaded programs 
workshop program analysis software tools engineering paste 

