tracking moving object binary sensor network aslam butler george cybenko daniela rus examine role simple noisy sensors tracking problem 
propose binary sensor model sensor value converted reliably bit information object moving sensor away sensor 
show network binary sensors geometric properties develop solution tracking binary sensors resulting algorithms simulation experiments 
develop particle filtering style algorithm target tracking minimalist sensors 
analysis fundamental tracking limitation sensor model show limitation overcome single bit proximity information sensor node 
extensive simulations show low error decreases sensor density 

sensor networks systems small simple devices deployed area attempt sense monitor events interest track people objects move area 
general sensors sensor associated computing simple cost remains low 
different sensing modalities including temperature sound light seismic vibrations may system depending targets interest 
sensing modalities sensor may college computer information science northeastern university 
partially supported nsf career award ccr 
portions completed author faculty department computer science dartmouth college 
department computer science dartmouth college department computer science california state university los angeles 
part developed author service dartmouth college 
thayer school engineering dartmouth college permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
generate little bit information point time 
example sensors obtaining sound levels absolute sound level may cause confusion loud near objects close objects sensor may simply report sound getting louder 
similarly seismic sensor increase decrease intensity 
systems single bit information allows inexpensive sensing minimal communication 
minimalist approach extracting information sensor networks leads binary model sensor networks 
investigate computational power sensor networks context tracking application minimalist approach focused binary sensors 
binary model assumption sensor network node sensors detect bit information broadcast bit base station 
examine scenario sensor bit object approaching moving away 
analyze minimalist binary sensor network context tracking application show possible derive analytical constraints movement object derive tracking algorithm 
show binary sensor network sensors bit information object sense approaching moving away give accurate predictions direction motion object information content identify exact object location 
applications predicting directional information example tracking flock birds school fish vehicle convoy 
possible pin exact location adding second binary sensor node net 
include proximity sensor allows node report detecting object immediate neighborhood determine direction location moving target 
minimalist approach sensor networks gives insight information content tracking application important resources solving task 
studying minimalist sensor networks learn binary sensor network model bit gives reliable direction information tracking additional bit provided proximity sensor necessary pin exactly object location 
minimalist approaches understanding information structure tasks previously example context robotics tasks 
tracking algorithms flavor particle filter ing assumptions :10.1.1.117.1144
sensors region sense target approaching moving away 
range sensors defines size region active computation sensor network takes place sensor network may extend larger area 
second assumption bit information sensor available centralized repository processing 
assumption addressed simple broadcast protocol nodes sensing target send id data bit base station processing 
data single bit complex image taken camera sending information base station feasible 
proposed approach practical applications target velocity slower data flow network bit predictions 
accuracy trajectory computation depends number data points predictions affected velocity target relative speed communication 
third assumption additional sensor supplies proximity information single bit available 
sensor may implemented ir sensor thresholding depends desired proximity range derived basic sensing element provides original direction bit information 

related target tracking concerned approximating trajectory moving objects partial information usually provided sensors 
target tracking necessary various domains computer vision sensor networks tactical battlefield surveillance air traffic control perimeter security response emergencies typical example problem finding trajectory vehicle bearings measurement technique radars 
robotics considered tracking targets moving platforms 
methods tracking proposed 
includes kalman filter approaches discretization approaches configuration space 
method shows great promise particle filtering technique introduced field monte carlo simulations 
main idea particle filtering discretize probability distribution object position maintaining entire feasible position space 
achieved keeping multiple copies called particles object associated weight 
action usually sensor reading new set particles created current weights updated 
function object obtained weighted sum function values particle 
seminal domain states basic algorithm properties 
papers addressed topic important variance reduction scheme auxiliary particle filter 
survey theoretical results concerning convergence particle filter methods 
probabilistic methods robotics simultaneous localization mapping slam robot attempts track sensed position landmarks 
example particle filter techniques localization traditional kalman filter technique failed 
algorithms typically assume range bearing information landmarks tracked vehicle simple sensors considered 
sensor networks face kinds major problems 
efficient networking energy saving techniques required 
sensors communicate base transmit readings results local computation 
increasingly complex activation schemes considered attempt substantially improve network energy little loss tracking quality 
second efficient processing information gathered sensors 
brooks ramanathan propose location centric approach dynamically dividing sensor set geographic cells run manager 
case multiple measurements compare data fusion combine data take single decision versus decision fusion take local decisions combine approaches 
distributed protocol target tracking sensor networks developed 
algorithm organizes sensors clusters uses sensors cluster target headed sense target 
target location predicted actual locations target 
sensor model requires sending bit information central computer issues shown capital importance 
focus geometric properties sensors configuration algorithm solving tracking problem 
inspired previous particle filtering approach context binary sensor model 

binary sensor network model binary sensor network model sensor node consists sensors supply bit information 
section assume sensor nodes binary sensor detect object approaching call sensor plus sensor moving away call sensor minus sensor 
assume sensor range multiple sensors detect information forward bit base station 
call active region sensor network 
data simple consists bit assumption met protocol active sensors forward id data bit 
sensor may noisy thresholding hysteresis detect movement compute direction bit 
active region sensor network may change time assume active sensors report data computations done relative sensors 
assume base station knows location sensor 
loss generality assume sensors sense object movement space 
section characterize geometry plus sensors minus sensors instantaneously time history information 
relate characterization constraints trajectory object sense lead tracking algorithm developed section 
tracking problem formulated follows 
suppose set binary sensors 
sm deployed bounded area 
assume object moving inside area curve parametric representations 
sensors sample environment regular intervals time producing sequence binary vectors meaning approaching going away sensor time tj 
provide estimate trajectory placement sensors 
instantaneous sensor network geometry consider single sample data produced time determine sufficient necessary conditions location target direction movement key result reported theorem shows location tracked object outside convex hull plus sensors outside convex hull minus sensors 
show important property plus minus sensors relative instantaneous velocity position object 
lemma 
arbitrary sensors located positions si sj providing opposite information time loss generality object decreasing distance sensor increasing distance sensor 
case sj si denotes scalar product proof 
consider situation depicted fig 

going away sensor sj 
analogously approaching sensor si 
conditions translate sj dl si dl integral form sj dl strictly decreasing si dl strictly increasing 
replacing dl conditions sj strictly decreasing si strictly increasing 
amounts saying si sj claim follows 
immediate corollary lemma condition feasibility pair max sj sj min si si 
dl si sj necessary sufficient conditions velocity constraint derive useful sensor detection separation result result object trajectory constraints 
shows intuition constraints computed sensor geometry 
current position object convex hull plus sensors convex hull minus sensors object heading convex hull plus sensors 
history information accumulated time identify direction position object region 
theoretical results limiting feasible object sensors configurations 
theorem provides coarse approximation location tracked object outside minus sensors plus sensors convex hulls 
theorem 
sample sensor values time si si sj sj convex hulls 
furthermore 
proof 
assume contradiction part claim false 

implies exists sensor position su falls inside 
su convex combination vertices aj su jaj 
su lemma aj jaj hand jaj min ai ai contradictory 
show second part claim assume 
expressed convex combination vertices jaj lemma min aj substituting convex combination jaj min aj contradictory 
approximation theorem refined result 
theorem states plus minus convex hulls separated normal object velocity 
theorem 
sample sensors values certain time si si si si respective convex hulls 
normal velocity separates points 
proof 
suppose modulo translation plane current location object 
slope velocity assume loss generality 
equation normal arbitrary plus sensor arbitrary minus sensor 
show opposite plus minus sensors lie different half planes respect sensors report translated respectively 
multiplying relations get factoring parenthesis claim follows 
remaining part claim note points plus convex hull sensors read 
model assumes sensors influenced noise correct sensor reports respect constraints theorem theorem 
linear programming perspective section showed instantaneous analytical properties trajectories tracked binary sensors 
proofs section intuitive constructive 
section show tracking problem formulated constructively equivalent fashion linear programming 
wish determine current position tracked object denoted slope normal velocity denoted locations plus minus sensors 
classification theory wish characterize entire feasible region just line separating hyperplane region 
know line slope passing normal velocity separates convex hulls plus sj xj yj si xi yi shows intuition natural constraints velocity tracked object grounded convex hull separation result 
minus sensors 
velocity points plus convex hull 
si xi yi sj xj yj respectively sensors information 
constraints tracking problem written yi xi yj xj max yi min yj yi xi yj xj max xj min xi inequalities translated linear inequalities introducing new variable 
slope cases reduced case rotation angle tan 
case convenient simplicity 
domain interval boundaries bounded area convex hulls 
incorporating history extend instantaneous characterization tracked object time history 
consider 
intuitively positions object lie inside circles center located plus sensor outside circles center located minus sensor radius associated sensor previous object location denote distance points 
observation formalized follows 
proposition 
certain time sensors report respectively times 
geometry object position current sensor values 
object position inside shaded area 
proof 
prove claim minus sensor 
inequality follows duality 
reports time means nondecreasing 
follows 

tracking binary sensor network section gives constraints movement targeted object 
assuming object trajectory lies inside convex hull sensors tracking algorithm developed 
subsections describe algorithm limitations 
tracking algorithm derive solution tracking binary sensors constraints section obtain algorithm flavor particle filtering 
key idea particle filtering method represent location density function set random points particles updated sensor readings compute estimation true location samples weights 
algorithm variant basic particle filter algorithm 
keeping equally weighted sample set proposes idea particle weight 
algorithm keeps step set particles possible positions weights updated probability going location time denoted location time denoted 
probability approximated yk 
particle set created drawing independent particles outside convex hulls plus minus sensors time sensor reading 
sensor reading new set particles created follows 
previous position chosen old weights 
possible successor chosen position 
successor respects acceptance criterion problem specific described subsection add set new particles compute weight 
sequence steps repeated new particles generated 
step normalize weights sum 
algorithm particle filter algorithm initialization set particles 
yk sensor readings sensors active repeat choose 

take fk yk respects goodness criterion accept new particle new particles generated yk normalize vector 
implementation section describe implementation details algorithm 
sensor readings aggregated bit vector reported sensors time denoted yk 
object movement approximated new particle inside area constraints lie outside minus plus convex hulls theorem lie inside circle center radius distance proposition plus sensor sampling times lie outside circle center radius distance tion minus sensor sampling times probability movement yk yk yk approx ratio possible slopes new posi tion number quantifies relative location sensors old new posi tions 
formally ns si normalization constant ns number sensors si si si si respect threshold si si si si xk threshold si si xk acceptance criterion algorithm threshold 
small value threshold increases estimation error large value threshold close increases number tries finding new particle running time 
typical value threshold simulation 
experiments evaluate approach implemented algorithm matlab performed extensive simulations implementation 
trajectories taken inside square error measurements relative square 
types trajectories considered linear trajectories trajectories random turns trajectories mild turns sensor readings direction tracked object vary previous 
trajectories piecewise linear distance traveled object sensor readings constant 
typical simulation example linear trajectory denoted triangles seen fig 

distance traveled sensor readings drawn normal distribution mean standard deviation 
describe accuracy tracking algorithm 
plots show root mean square error rmse different layouts sensor networks trajectories 
lines plot represent different error calculations experiments particles weighted error calculation filtering algorithm 
experiments sensors placed grid plot 
sensors randomly 
sensors 
trajectories random walks plots mild turns linear plot 
plots distance traveled object 
simulation example seen fig 
experiments described second plots run times random trajectories generated run 
third experiment run times different linear trajectories 
experiments particles sampled sensor reading 
data shows decreasing trend estimation error number sensors increases especially third case trajectories linear 
error arbitrarily small large number sensors 
reason effect explained graphically fig 
parallel trajectories shown consistent obtained sensor readings 
theorem shows certain sets trajectories including rmse rmse rmse number sensors sensor network grid 
trajectory random number sensors sensor network random 
trajectory random number sensors sensor network random 
trajectory linear root mean square error rmse tracking different sensor network layouts number sensors 
rmse error particles time 
squares plot denote error weighting particles equally error calculation circles denote error particles weighted error calculation probabilities 
trajectories parallel lines respect conditions theorem discerned binary sensor regardless placement 
fig 
real trajectory denoted triangles trajectories parallel denoted stars 
snapshots taken time sensor reading corresponding point trajectory 
plus sensors squares minus sensors circles 
dots represent cloud particles step 
second example illustrates major limitation model binary sensors give information movement direction object position shown section 
example actual trajectory starts ends point right 
direction estimated trajectory gets approaches actual movement direction estimated location far actual location 
model limitation simulation results suggest natural limitation binary sensor model 
information provided binary sensor network obtain reliable information motion direction tracked object 
results section show certain pairs trajectories indistinguishable binary sensor 
describe pairs trajectories presenting constructive method producing 
particular show trajectories parallel velocities obeying constraint constant distance apart differentiated binary sensor model 
suppose points moving indistinguishable possible binary sensors plane binary sensor model 
lemma shows velocity vectors parallel perpendicular real trajectory possible trajectories sensor reading minus sensors plus sensors real trajectory trajectory particles real trajectory estimated trajectory sensor readings minus sensors plus sensors actual trajectory simulation examples algorithm 
plus sensors denoted squares minus sensors denoted circles 
plus minus convex hulls figured 
example trajectories figured possible trajectories consistent sensor readings 
second example estimated trajectory figured 
difference vector 
lemma 
times dx dt scalar function 
times proof 
consider 
half spaces determined line going orthogonal partition sensors groups half space points contains sensors detect approaching half space sensors detect moving away 
consider half spaces partitioned point time 
half spaces coincide region depicted fig 
contain sensors detect moving away approaching time vice versa 
half spaces coincide dx dt scalar function 
assertion clearly follows 
lemma corollary lemma shows constant distance times 

lemma 
constant 
proof 
definition differentiate sides respect get dropping time dependence vectors simplicity dt fact lemma get dt dt times constant 
theorem puts results precedent lemmas shows necessary indistinguishability conditions sufficient 
theorem 
trajectories indistinguishable possible binary sensors plane conditions hold scalar function proof 
indistinguishable possible binary sensors lemma lemma show conditions hold 
suppose conditions hold 
arbitrary sensor plane 
reports sgn sgn 

times get sgn sgn shows indistinguishable sensor arbitrarily chosen get trajectories indistinguishable sensor 
theorem implies points moving path determined radius circle times circle radius change time long larger infinite illustration indistinguishability properties sensor model 
part shows velocities parallel perpendicular 
sensors shaded region give different reports 
part shows example piecewise linear circular trajectories indistinguishable binary sensor 
degenerate case moving parallel lines 
fig 
shows transition straight parallel trajectory arc circle 
transitions happen smoothly points come rest point transition start 
result shows mild conditions parametric curve easily identify curve arbitrary distance indistinguishable sensor model 
engaging proof need recall basic facts differential geometry plane curves 
definition 
twice differentiable parameterized plane regular curve 
signed curvature theorem 
parameterized plane regular curve twice differentiable 
exists parameterized plane curve indistinguishable 
exist indistinguishable curves 
proof 
ll prove existence plane curve constructing 
regular curve defined immediately observe verifies 
show scalar function equivalently 


fact condition tell lie parallel directions condition ensure velocity vectors 
dropping dependence convenience notation write show validity condition orthogonality 

know 
get 

verify validity condition depends constraint curvature 
expanding obtain see assumed prove curve constructed twice differentiable curve constant distance indistinguishable 
plane curve constant distance indistinguishable sensor model 
theorem get 
denote unit normal vector time nx 
definition nx get nx 
means directions vectors nx equivalently exists scalar function nx 
assumed 
get nx nx nx 
twice differentiable get constant equal absolute value 
conclude proof observation different curves 
exactly curves holds 
ray curvature definition 
may observe 
curve parameterized arc length unit vector orthogonal requiring basis oriented canonical basis give sign curvature defining 
sign provides information curve turning normal vector away 
need careful interpretation constraint verified 
fact means arbitrary distance lies positive direction normal vector away direction turn 
words constraint curvature says distance curves lower largest rays curvature 

tracking proximity bit theorem shows exist pairs trajectories distinguished binary sensor 
conclude additional information needed disambiguate different trajectories identify exact location object 
realized adding second binary sensor capable providing proximity information ir sensor sensor node network 
object detected set range proximity sensor node broadcasts message base station 
range proximity sensor may different smaller range movement direction sensor 
useful set proximity range sensors non overlapping done appropriate thresholding necessary 
base station approximate location object region covered sensors reporting object detection 
simplicity presentation assume rest session detection range calibrated sensor detects object time 
algorithm implementation algorithm describes solution tracking uses motion direction bit proximity bit sensor node 
algorithm extends algorithm proximity information 
sensor node detects object ancestors particle inside range shifted far time object spotted proportional amounts 
note algorithm reduces algorithm proximity sensor triggered necessary proximity sensors cover entire region 
experiments assume sensors ability report presence object proximity metric performance algorithms relative error object spotted 
expect trajectories winding area covered sensor network ask efficient proximity sensing detecting object 
specifically formulated time steps object spotted sensor layout 
simulation results shown fig 
show trajectories randomly generated trajectories entered algorithm algorithm binary sensors range algorithm basis 
sensor sees object accepted particles inside range new particle intersection range semi line 
pk ancestors time object spotted 
pi pi sensor range steps goes 
total number trajectories subplot top left top right left right 
graph remaining trajectories spotted spotted readings 
average length trajectory 
trajectories generated follows distance traveled sensor readings changes direction mild direction change sensor readings 
results sensors 
starting position randomly chosen 
fig 
right shows results small range value ranges cover area 
fig 
left shows results large range value ranges cover area 
graphs suggest distribution amount time passes object spotted exponential 
simulation examples algorithm shown fig 

example object gets proximity range sensor readings time particles seen reset close true object position reading near top plot 
second example object gets proximity range sensor reading time near center plot 
real trajectory denoted triangles estimated trajectory marked thick dashed line 
snapshot taken time sensor reading corresponding point trajectory 
plus sensors squares minus sensors circles 
dots represent particles shifting step algorithm 
repeated simulation example trajectories computed node sensor networks runs total 
trajectory approximated sensor network root mean square error ranging node sensor network node sensor network 
believe field tracking applications involving animals people cars practical approximations 
tracking performance proximity bit added model shown picture right 
simulation conditions similar ones picture left considering sensors placed grid randomly random linear trajectories 
error models considered explained 
suppose actual position object pi th particle generated algorithm wi number trajectories range grid sensors number turns object spotted number turns object spotted number trajectories range grid sensors number turns object spotted range grid sensors range grid sensors number trajectories number trajectories number turns object spotted graphs show axis number readings object gets time sensor range axis number trajectories number readings elapsed 
weight reading time reading times 
error model root mean square error rmse denoted squares calculates time step distance particle cloud centroid regarded estimator actual position actual position object 
precisely rmse calculates ek 
error model call average error calculates time step average distance par cloud true position 
words average error equal wi pi second error model gives bigger error showing significant variance particle cloud 
second error model relevant think particle particle cloud centroid estimator true position object 
extreme cases particles circle true position rmse error provides better interpretation tracking performance 
data shows decreasing trend estimation error bit model error lower faster decreasing rate 

studied computational power binary sensor networks respect tracking application 
take minimalist stance ask simple binary sensor compute different types sensed data 
assume nodes network sensors give bit information 
derive geometric characterization tracking problem sensor network random 
trajectory network random 
trajectory random error error average error weighted average number sensors sensor network grid 
trajectory random average error weighted average number sensors error error average error weighted average number sensors sensor network grid 
trajectory linear average error weighted average number sensors tracking error various network layouts number sensors systems proximity bit sensor node 
squares represent rmse error particles separately circles represent average error calculated weighted average particles 
sensor nodes provide bit information object object approaching moving away sensor 
show problem setup leads tracking algorithm gives information direction movement object additional information needed provide exact location object 
proximity sensor bit provide information tracking algorithm extended information 
resulting error trajectory prediction low 
broadcasting single bits network feasible simulation examples algorithm 
run object gets sensor range sampling times position position 
second run object gets sensor range sampling time position 
plus sensors denoted squares minus sensors denoted circles 
actual trajectory denoted triangles thin line estimated trajectory stars thick dashed line 
runs sensor readings shown taken step sensors boundary minus plus convex hulls shown 
computation performed base station response sensor values fast conclude binary sensor model practical solution certain tracking applications 
important aspects binary model sensor model remain open plan consider 
real world sensors influenced noise 
incorporate noise model adding gaussian variable signal strength gradient si sensor si dt quantize 
report certain time means sensor signal strength gradient certain threshold reliable regarded temporarily shutdown sensor 
gaussian variable zero mean variance determined real data reflecting sensors characteristics 
way dealing noise ignore information untrustworthy sensors 
decide sensors reliable certain time approximating sensor reading sensors geometry 
possible approach consider snapshot sensors time set plus sensors visible minus convex hull set minus sensors visible plus convex hull 
respectively centroids 
take respectively points line enters plus minus convex hulls 
middle point segment 
take rough approximation object location line approximation object direction 
write measure plus sensor reliability cos mg euclidean distance minus sensor measure cos mg 
measure approximates sensor dependent part scalar product written cos observation sensor angle mg rarely greater 
close minus convex hull possible directions object movement limited 
presence noise want discard sensors anyway 
measure uses frontier sensors ones visible convex hull 
non frontier sensors matter frontier sensor reports accurate 
interior sensor example minus convex hull report plus minus convex hulls longer disjoint contradicting theorem 
considering non frontier sensors change centroid position adding extra information 
measure symmetric plus minus sensors 
ignore trust sensor measure certain threshold 
open question effectiveness tracking relative amount data available 
start bit model add second bit proximity 
naturally concerned adding extra bits influences tracking accuracy 
bits available interesting problem find best way allocate bits respect direction proximity 
sensor density high proximity sampled direction inferred velocity proximity independent variables 
suggests compressing scheme send information network 
get new optimization problem having parameters number bits sensor density bits allocation scheme 
possible drawback method centralized computational structure 
approach decentralized solution sensor run local particle filter subset information read sensors 
basic idea time step sensor requests information bits sensors flip local information 
assumes object moved direction traveled distance times times predicted position time line positions time requests information sensors flip trajectory 
addition information sensor requests information fixed number sensors randomly chosen 
useful order control trajectories close linear 
remaining sensors assumed remain unchanged 
sensor readings available sensor respect necessary conditions theorem sensor updates information requesting data sensors 
sensor assigned different area possible starting location object 
time steps sensor gets readings sensors starting information accurate 
near investigate implement algorithm mote network testbed extend algorithms support multiple target tracking 

gordon clapp tutorial particle filters line nonlinear non gaussian bayesian tracking ieee transactions signal processing vol :10.1.1.117.1144
february 
brooks ramanathan distributed target tracking classification sensor networks proceedings ieee september krishnamachari energy quality tradeoffs target tracking wireless sensor networks ipsn 
yang protocol tracking mobile targets sensor networks proceedings ieee workshop sensor network protocols applications 
doucet 
survey convergence results particle filtering practitioners 
bruce donald james jennings daniela rus 
information invariants distributed manipulation 
international journal robotics research 
grimson stauffer romano lee 
adaptive tracking classify monitor activities site 
proc 
ieee int conf 
computer vision pattern recognition 
clifford carpenter 
improved particle filter non linear problems 
iee proceedings radar sonar navigation 
salmond gordon smith 
novel approach nonlinear non gaussian bayesian state estimation 
iee proc radar signal processing april 
eduardo masson jose hugh durrant whyte 
robust simultaneous localization mapping large outdoor environments 
experimental robotics viii 
springer 
lynne parker 
cooperative motion control multi target observation 
proc 
ieee international conf 
intelligent robots systems pages grenoble sept 
michael pitt neil shephard 
filtering simulation auxiliary particle filters 
journal american statistical association 
zhao shin reich 
information driven dynamic sensor collaboration tracking applications 
ieee signal processing magazine march 
acknowledgments reviewers insightful comments early drafts especially gaurav sukhatme assistance improving comments 
support provided nsf awards eia iis iis onr award nsf career award ccr darpa task program 
grateful 
