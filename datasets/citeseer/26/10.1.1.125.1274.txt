publish subscribe rdf networks paul alexandru manolis koubarakis wolfgang nejdl university hannover deutscher expo plaza hannover germany nejdl de intelligent systems laboratory department electronic computer engineering technical university crete crete greece manolis intelligence gr 
publish subscribe systems alternative query systems cases information asked clients want get updated answers query period time 
publish subscribe systems diet introduced paradigm context 
built experience gained diet edutella infrastructure implementation publish subscribe system supporting metadata query language rdf 
define formally basic concepts system detailed protocols operation 
utilizes latest ideas query processing rdf data indexing routing research 
consider peer peer network manages metadata publications user network bob interested new publications specific authors koubarakis nejdl 
conventional peer peer file sharing networks gnutella kazaa really difficult sending queries include koubarakis nejdl search string return publications authors bob filter new publications time 
rdf peer peer network bit easier bob formulate query includes disjunction attribute dc creator dc creator includes nejdl dc creator includes koubarakis constraint date attribute dc date includes necessary constraints query return answers containing publications 
quite bob wants uses query get publications time 
bob really needs peer peer file sharing network publish subscribe capabilities 
advertising peers sends information content publish example hannover peer announces available publications including publications nejdl crete peer announces koubarakis group 

subscribing peers send subscriptions network defining kind documents want retrieve 
bob profile express subscription nejdl koubarakis papers 
network store subscriptions near peers provide resources case near hannover crete peer 

notifying peers notify network new resources available 
resources forwarded peers subscription profiles match bob receive new publications nejdl koubarakis 
describe provide publish subscribe capabilities rdf peer peer system manages arbitrary digital resources identified url described set rdf metadata 
current application scenarios distributed educational content repositories context eu ist project elena participants include learning training companies learning technology providers universities research institutes www org second application scenario digital library environments 
section specifies formal framework rdf pub sub systems including query language express subscriptions network 
section discusses important design aspects optimizations necessary handle large numbers subscriptions notifications building super peer architecture hypercup protocol implemented edutella system index optimizations explored rdf context diet 
section includes short discussion important features system section includes survey related 
formalism pub sub systems rdf section formalize basic concepts pub sub systems rdf advertisements subscriptions publications 
need typed order language equivalent subset query exchange language qel slightly different syntax presentation formal 
qel datalog inspired rdf query language edutella network 
logical symbols include parentheses countably infinite set variables denoted capital letters equality symbol standard sentential connectives 
parameter non logical symbols include types constants predicates 
types rdf resource identifiers uri rdf literals strings rdf literals integers ul union rdf resource identifiers rdf literals strings integers 
predicates language type type type ul 
predicate compare integers predicate read contains compare strings read triple represent rdf triples 
rdf jargon expression called subject predicate object triple 
formed formulas atomic complex defined usual 
define semantics usual way 
due space considerations omit technical details 
definitions give syntax subscription language 
definition 
atomic constraint formula forms variable constant type variable type constant type binary operators variable constant type constraint disjunction conjunctions atomic constraints dnf form 
define notion satisfiable constraint standard 
definition 
query subscription formula form 
xn pm om variable type 
pm constants type 
om distinct variables type ul 
xn 
om constraint involving subset variables 
om 
definition denotes class single resource multi predicate queries qel 
class queries implemented efficiently show section contains interesting queries file sharing systems rdf 
easy see join allowed class queries subject common triples appearing subscription 
standard rdf literature triple notation utilizes qualified names avoid having write long formulas 
contains prefix assigned namespace uri followed colon local name 
prefixes prefix dc purl org dc elements prefix rdf www org rdf syntax ns prefix isl www intelligence gr publications example 
subscription am interested articles authored nejdl koubarakis expressed subscription rdf type dc article dc creator dc date nejdl koubarakis queries subscriptions evaluated sets rdf triples 
set rdf triples ans denote answer set evaluated concept formally defined relational queries constraints 
define concept subscription subsumption heavily exploited architecture section 
definition 
subscriptions 
say subsumes iff sets rdf triples ans ans 
abuse definition write constant oi place variable oi avoid extra equality oi oi 
define concept publication meta data clients send super peers available new content 
publications subscriptions matched super peers appropriate subscribers notified 
definition 
publication pair set ground variables atomic formulas form constant set rdf triples subject client identifier 
publication matches subscription ans 
notice assumed unique subscriptions publications obey definitions publication matching architecture section takes place locally super peer 
example 
publication isl pdf rdf type dc article isl pdf dc creator koubarakis isl pdf dc date matches subscription example 
define progressively comprehensive kinds advertisement 
advertisements formalize notion clients super peers send nodes network describe content high level intentional manner 
super peers match client subscriptions advertisements determine routes subscriptions follow architecture section 
formalized notion covers 
definition 
schema advertisement pair set schemas constants type super peer id expression schemas denote schema advertisement covers subscription schemas schemas 
example 
schema advertisement dc lom sp covers subscription example 
definition 
property advertisement pair set properties constants type super peer identifier 
expression properties denote property advertisement covers subscription properties properties 
example 
property advertisement dc subject lom context sp covers subscription example 
definition 
property value advertisement pair 
pk vk 
pk distinct properties constants type 
vk sets values 
pk constants type ul super peer identifier 
definition 
subscription form definition property value advertisement form definition 

yk variables objects 
om triples correspond properties 
pk say covers subscription exist values 
vk vk constraint 
yk vk resulting substituting variables 
yk constants 
vk satisfiable 
example 
property value advertisement dc creator nejdl dc title algorithms data structures dc year sp covers subscription example 
architecture section advertisement sent rdf file appendix 
processing advertisements subscriptions notifications efficiently processing advertisements subscriptions notifications crucial publish subscribe services 
discussing basic peer peer topology super peer architecture described describe optimizations necessary processing advertisements subscriptions notifications efficient manner 
basic network topology super peers hypercup publish subscribe algorithm designed working super peer networks peer peer networks peers connected super peers responsible peer aggregation routing mediation 
super peer infrastructures usually phase routing architecture routes queries subscriptions super peer backbone distributes peers connected super peers 
super peer routing different kinds indexing routing tables discussed 
sections indexing routing mechanisms appropriate publish subscribe services 
levels indices storing information route super peer backbone handling communication super peer peers connected 
indices draw previous query routing discussed extensions modifications necessary publish subscribe services 
super peers arranged hypercup topology solution adapted edutella infrastructure special characteristics regarding broadcasts network partitioning 
hypercup algorithm described capable organizing super peers network recursive graph structure called hypercube stems family cayley graphs 
superpeers join network asking integrated super peers carries super peer integration protocol 
central maintenance necessary 
hypercup enables efficient non redundant query broadcasts 
broadcasts node seen root specific spanning tree network shown 
topology allows log path length log number neighbors total number nodes network number fig 

hypercup topology spanning tree example super peers case 
peers connect super peers star fashion providing content content metadata 
alternatives topology possible provided guarantee spanning tree characteristic super peer backbone exploit maintaining index structures 
processing advertisements step publish subscribe scenario done client sends advertisement access point ap announcing kind resources offer 
access points advertisements construct advertisement routing indices utilized processing subscriptions see section 
advertisements selectively broadcast ap reach access points network 
advertisement indices updated advertisement arrival levels separate indices schema level property attribute level property value level 
table shows examples indices 
schema index 
assume different peers support different rdf schemas schemas uniquely identified uri 
routing index contains schema identifier peers supporting schema 
subscriptions forwarded peers support schemas subscription 
property index 
peers choose part schemas certain properties attributes describe content 
unusual conventional database systems data stores semi structured data common rdf systems 
index super peers properties uniquely identified name space schema id plus property name sets properties describe peers 
sets properties useful characterize subscriptions 
property value index 
properties advantageous create value index reduce network traffic 
case identical classical database index schema dc lom sp property dc subject lom context sp dc language sp property set values dc creator nejdl sp dc title algorithms data structures sp dc year sp dc year sp table 
advertisement routing indices example schema index property index property value index exception index entries refer resource super peer peer providing 
kinds indices super peer super peer indices handling communication super peer backbone super peer peer indices handling communication super peer peers connected 
functionality employ indices data structures update process update advertisement indices 
index updates triggered new peer registers peer leaves system permanently migrates access point metadata information registered peer changes 
peers connecting super peer register metadata information super peer providing necessary schema information constructing sp sp sp advertisement indices 
registration xml registration message encapsulates metadata description peer properties 
peer assigned schema dc lom element set set properties possibly additional information information specific property values 
peer leaves super peer peer removed sp indices respective super peer 
applies peer fails re register periodically 
case peer joining network re registering respective metadata schema information matched sp entries respective super peer 
sp advertisement indices contain peers metadata peer stored 
respective metadata peer added indices 
algorithm formalizes procedure define set schema elements si 
super peer spx stores set sx schema elements sp indices 
sp indices super peer spx considered mapping si pj 
new peer py registers super peer spx set sy schema elements 

sy sx add py list peers si sy 
sy sx sn sm update sp indices adding new rows sn py sm py 
generally receiving advertisement access point call spa initiate selective broadcasting process 
advertisement received super peer say spi matched advertisement indices updated algorithm described 
operation result modification advertisement indices broadcasting necessary 
example peer publishes physics advertisement indices sending subscriptions topic partition network need update indices indices spanning tree super peer network pointing spa 
processing subscriptions client posts subscription access point sp describes resources interested sp introduces local subscription poset decides forward network 
subscription poset hierarchical structure subscriptions captures notion subscription subsumption defined section 
shows example poset 
subscription posets pub sub systems originally proposed siena 
siena system utilizes subscription poset minimize network traffic super peers forward subscriptions subsumed previous subscriptions 
fig 

poset example shown example super peer add local subscription poset information subscription came peers connected super peer 
addition super peer information poset reduces network traffic important 
super peer decided send subscription initiate selective broadcast procedure hypercup protocol 
subscription super peer advertisement routing indices order decide send neighboring super peers spanning tree 
criteria need checked 
indices contain super peer supports targeted schema properties information values covers route subscription respective super peer hypercup 

information values covers check values consistent constraints subscription 
route subscription forward don give formal description routing process algorithm 
algorithm 
routing subscriptions 
subscription 
form tm sm pm am ap apf si possibly different schemas pi possibly different attributes ai constants variables ai variables additional constraints subscription 
denote schema index si property index pi property value index 
consider subscription came dimension hypercup spanning tree 
false false si pi si pi true si pi true break targets ti si dimension ti sj sj si break ti tuples matched exit targets ti si dimension ti sj pj sj si sj pj break ti exit hypercup algorithm uses dimensions avoid sending message twice peer super peer 
broadcast message sent higher dimensions dimension received 
see details 
targets ti dimension ti sj pj aj sj pj aj break sj pj sj pj si break ti processing notifications new notification arrives super peer matched root subscriptions local subscription poset see 
case match subscription stored root node notification matched children contain subscriptions refining subscription match notification sent group peers super peers subscription came backwards exact path subscription 
complete algorithm depicted lines 
algorithm 
notification processing 
poset notification 
function match pe notification pe targets ti pe ti children ci pe match ci function roots ri match ri handling dynamicity pub sub network peers dynamically join leave network may offline new resources arrive 
lost special precautions taken 
discuss measures necessary enable peers receive notifications arrive line periods peers 
offline notifications rendezvous super peers client disconnects network access point ap keeps client identification information subscriptions specified period time indices reflect left network 
means notifications arrive ap store deliver reconnects 
fig 

line notification rendezvous migration example client may request resource time receives notification saved notification local notifications directory 
consider case client requests resource resource owner client line 
client requests address ap access point 
case client may request rendezvous resource ap message contains identifier identifier address ap location client reconnects ap informs upload resource ap rendezvous file client uploads ap checks line ap forwards stored rendezvous directory ap reconnects receives rendezvous notification ap 
features line notifications rendezvous take place clients migrate different access points 
example assume client migrated ap 
client program understands connected different access point ap requests ap rendezvous line notifications informs ap connected different access point 
receives rendezvous line notifications updates variable previous access point address ap 
ap updates sp sp sp indices 
sends ap subscriptions ap updates sp sp sp indices 
complete example shown 
peer authentication typically authentication peers peer peer network crucial peers connecting network identify just ip 
pub sub environment connect peers subscriptions want send notifications relevant leads problems ip addresses peers may change 
network able deliver notifications stored peer absence reconnects ip address 
furthermore subscriptions stored network peer lose relationship peer 
malicious peers masquerade peers ip address peer currently offline 
get notifications peer lost original peer 
change original peer subscriptions maliciously 
suitable cryptography algorithms provide unique identifiers peers network see discussion 
new client wants register network generates pair keys ex dx ex public key encryption key dx private key decryption key 
assume client ip address public key super peers secure means secure web site 
securely identifies super peer succeeds sends encrypted message secure identification encryption explained 
message contains public key ip address port superpeer decrypts message creates private unique identifier public unique identifier applying cryptographically secure hash function sha concatenated values current date time ip address current ip address large random number 
properties cryptographically secure hash function guarantee highly peer exactly identifiers enter network 
sends identifiers encrypted message 
private identifier included messages access point way super peer knows sends message 
private identifier client included messages clients receive public identifier 
clarify reason need public private identifiers give example 
client receives notification contains public identifier resource owner 
ready download resource communicates access point uses public identifier request address 
client peer knows private identifier authenticate knows public identifier request address set rendezvous resource owned messages client peer sends super peer contain private identifier encrypted 
way client read message acquire private identifier secure identification peers carried 
peer securely identify peer generating random number send eb peer sends reply message contains number db eb 
peer checks db eb case peer correctly identified 
example system super peers securely identify client peers described delivering notification 
case super peer starts communication session sure client peer listens specific ip address 
client disconnects access point erase public key identifiers erases private identifier active client list 
client reconnects identify private identifier send access point new ip address 
case client migrates different access point notify previous erases information client 
client securely identifies new access point sends message contains public key public private identifiers new ip address client 
messages encrypted contain private identifier client 
analysis publish subscribe systems section review related research pub sub systems areas distributed systems networks databases 
pub sub database literature origins franklin zdonik coined term selective dissemination information 
influential done context sift publications documents free text form queries conjunctions keywords 
sift system emphasize query indexing means achieve scalable filtering pub sub systems 
concentrated query indexing data models attribute value pairs query languages attributes comparison operators 
notable effort works goes conjunctive queries standard class queries considered systems 
concentrated publications xml documents queries subsets xpath xquery xtrie 
area distributed systems networks various pub sub systems data models channels topics attribute value pairs exactly models database papers discussed developed years 
systems attribute value pairs usually called content data models flexible express content messages various applications 
area concentrated filtering algorithms database papers surveyed distributed pub sub architectures 
siena probably known example system developed area 
siena uses data model language attribute value pairs demonstrates express notifications subscriptions advertisements language 
point view important contribution siena adoption peerto peer model interaction servers super peers terminology exploitation traditional network algorithms shortest paths minimum weight spanning trees routing messages 
siena servers additionally utilize partially ordered sets encoding subscription advertisement subsumption minimize network traffic 
core ideas siena pub sub systems dias diet www intelligence 
gr 
dias diet offer data models inspired information retrieval contrast siena emphasized sophisticated subscription indexing server facilitate efficient forwarding notifications 
summary approach dias diet puts best ideas database distributed systems tradition single unifying framework 
important contribution diet demonstrates support similar protocols traditional time query scenarios standard super peer systems pub sub features siena 
advent distributed hash tables dhts chord pastry new wave pub sub systems dhts appeared 
scribe topic publish subscribe system pastry 
hermes similar scribe uses underlying dht pastry allows expressive subscriptions supporting notion event type attributes 
event type hermes managed event broker rendezvous node subscriptions publications related event 
notable pub sub system implemented top dht infrastructure 
important contribution takes account peer heterogeneity extends consistent hashing simple load balancing techniques appropriate assignment peer identifiers network nodes 
publish subscribe capabilities necessary extension usual query answering capabilities peer peer networks enable efficiently handle retrieval answer long standing queries period time peers connect disconnect network period 
discussed incorporate publish subscribe capabilities rdf network specified formal framework integration including appropriate subscription language described optimize processing subscriptions notifications handling network 
include full integration capabilities existing prototypes edutella diet investigations extending query language expressive relational algebra ir operators maintaining efficient subscription notification processing 
manolis koubarakis supported project funded european commission th framework programme ist fet contract 

chaki clarke jha veith 
filtering publish subscribe systems binary decision diagrams 
proc 
rd international conference software engineering toronto ontario canada 

carzaniga 
rosenblum wolf 
design evaluation wide area event notification service 
acm transactions computer systems august 


chan felber garofalakis rastogi 
efficient filtering xml documents xpath expressions 
proceedings th international conference data engineering pages february 

crespo garcia molina 
routing indices peer peer systems 
proceedings th international conference distributed computing systems 

franklin zdonik 
data face push technology perspective 
proceedings acm sigmod international conference management data 

liu 
decentralized self configuring peer peer information monitoring system 
proceedings rd ieee international conference distributed computer systems may 

hauswirth datta aberer 
handling identity peer peer systems 
technical report lsir epfl 

koubarakis 
information alert distributed digital libraries models languages architecture dias 
proceedings th european conference research advanced technology digital libraries 

koubarakis 
selective information dissemination networks problems solutions 
acm sigmod record special issue peer peer data management aberer editor september 

nejdl wolpers siberski schmitz schlosser loser 
super peer routing clustering strategies rdf peer peer networks 
proceedings th international world wide web conference 

wolfgang nejdl boris wolf qu stefan decker michael sintek naeve mikael nilsson matthias palmer tore risch 
edutella networking infrastructure rdf 
proceedings th international world wide web conference 

bacon 
hermes distributed event middleware architecture 
proceedings st international workshop distributed event systems debs july 

rivest shamir adleman 
method obtaining digital signatures public key cryptosystems 
cacm february 

rowstron 
kermarrec castro druschel 
scribe design largescale event notification infrastructure 
crowcroft hofmann editors rd international cost workshop 

mario schlosser michael sintek stefan decker wolfgang nejdl 
hypercup hypercubes ontologies efficient search peer peer networks 
proceedings st workshop agents computing bologna 

bernd simon wolfgang nejdl michael sintek 
smart space learning mediation infrastructure learning services 
proceedings twelfth international conference world wide web budapest hungary may 

yan garcia molina 
index structures selective dissemination information boolean model 
acm transactions database systems 

yan garcia molina 
sift information dissemination system 
acm transactions database systems 

yang garcia molina 
designing super peer network 
proceedings th international conference data engineering icde march 

