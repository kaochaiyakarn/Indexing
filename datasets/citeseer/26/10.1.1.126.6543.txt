kluwer academic publishers boston 
manufactured netherlands 
modular visual specification hybrid systems radu grosu grosu cs sunysb edu department computer science state university new york stony brook stony brook ny usa thomas tum de institut informatik technische universit nchen nchen germany editor clarke 
visual description techniques particularly important design hybrid systems specifications systems usually discussed engineers number different disciplines 
modularity vital hybrid systems allows handle large systems permits think terms components familiar engineers 
different interpretations hierarchic graphs clear hybrid computation model develop 
consist modular visual formalisms specification architecture specification behavior hybrid systems 
operators hierarchic graphs enable give surprisingly simple denotational semantics concepts known statechart formalisms 
due general composition operator easily composed description techniques engineering disciplines 
heterogeneous system specifications particularly appropriate hybrid systems interdisciplinary character 
keywords hybrid systems formal specification statecharts supported funds deutsche forschungsgemeinschaft number br priority program design design methodology embedded systems 
october am 
hybrid systems active area research past years number specification techniques developed systems 
suited closed systems search hybrid description techniques open systems relatively new 
open systems large system modularity essential 
means decomposing specification manageable small parts prerequisite reasoning parts individually having consider interior parts 
greatly facilitates design process help push limits verification tools model checkers 
collection operators hierarchic graphs tool set follow ideas define simple powerful computation model hybrid systems 
model introduce consist different relational interpretations hierarchic graphs 
interpretation graphs called called 
visual representation hybrid hierarchic state transition diagrams 
hy visual representation hybrid data flow graphs architecture graphs allow designer compose hybrid components modular way 
behavior components described technique system theory semantics terms dense input output relations 
includes differential equations 
relational semantics main advantages 
corresponds visual notation software engineers 
second shown comes equipped set graph equations algebra allowing visually transform components semantics preserving way :10.1.1.49.2730
consequence algebra may engineers optimizations check equivalence different components 
third similarly comes equipped simple notion refinement associated refinement rules 
essential prerequisite proving successively modified implementation meets original specification 
keeping motivation mind note intent introduce equations refinement rules 
october am done way similar papers cited blow space required 
want relational infrastructure visual textual notation 
allow hierarchic specification analysis hybrid systems 
completes details earlier published 

example example illustrates kinds systems target 
demonstrate 
example electronic height control system ehc purpose system originally proposed bmw control chassis level automobile suspension 
model system considers wheel 
basically works follows chassis level certain lower bound compressor increase 
level high air blown opening escape valve 
chassis level measured sensors filtered eliminate noise 
filtered value read periodically controller operates compressor escape valve resets filter necessary 
sensor tells controller car going curve 
diagram left depicts architecture ehc interconnection environment 
environment shaded grey regarded 
concentrate open system consisting filter controller delay element ensures feed back defined 
escape valve compressor modeled controller 
diagrams left called 
component chart defined hyschart compatible formalism 
components interact clearly defined interfaces channels results modular specification technique 
behavior component characterized intuitively shown right periods values channels change smoothly time october am ehc filter env control reset 
ehc architecture typical evolution 
instances discontinuities 
approach smooth periods result analog parts components 
discontinuities caused discrete parts 
call discrete parts combinational parts emphasize contain memory regarded combinational circuits 
specify behavior discrete analog part component single hyschart hybrid hierarchic state transition diagram nodes marked activities transitions marked actions 
transitions define discontinuities instantaneous actions performed discrete part 
activities define smooth periods time consuming behavior analog part discrete part idle 
example shows hyschart ehc control component 
consists hierarchic levels 
left depicts highest level substates 
control car going curve 
hierarchic state refined substates depicted top right 
control resides long chassis level tolerance interval 
chassis level outside interval substates entered 
bottom right shows refinement 
activities written italics october am time control const 
ehc control component 
const reset reset dec reset figures refer predicates describe continuous evolution component variables control respective state 
activity const states instance refers predicate specifying variable remains constant 
model expresses compressor escape valve turned 
ehc system actively modify chassis level states activity 
explain states transitions activities greater detail section 

related basic motivation experiences obtained modeling ehc case study outlined hybrid automata 
basic result case study lack modularity hybrid automata complicates specification analysis 
concept input output variables hybrid automata invariants automaton parallel composition may prevent transitions parallel automata 
behavior hybrid automaton october am parallel composition studied independently 
furthermore lack hierarchic states turned inconvenient specification 
develop formal modular description technique hybrid systems associated visual formalism incorporates advanced state machine features hierarchic states preemption 
contrast hybrid automata fully modular suitable open systems 
new hybrid modules alur henzinger modular utility suffers fact obvious model feedback loops 
parallel composition modules possible cyclic dependencies variables 
sight prohibit feedback loops 
loops possible cyclic dependency broken time step 
theoretical reasons loops pose problem approach 
solve explicitly allowing feedback loops long introduce delay 
demanding delay unrealistic signals transmitted infinite speed 
may seen special case solution hybrid modules 
making explicit users notation guided modeling loops correctly 
modular model hybrid automata 
promising theoretical point view address issues relevant application practice graphical representation 
respect hybrid automata hybrid modules mentioned complementary 
strongly emphasize aspects relating practical utility formalism 
approach hybrid version statecharts 
operational semantics allow inter level transitions hierarchic specification continuous activities 
approach fully support hierarchy permit 
models mentioned kind trace semantics continuous trajectories pasted discrete time instances 
instances preceding trajectory succeeding trajectory possibly intermediate discrete actions determine values variables model 
point preceding trajectory values determined intermediate discrete actions start point succeeding october am trajectory need equal get situations variable assigned sequence values physical time instant 
means trace isomorphic function time 
opinion complicates combining models models continuous systems evolved engineering disciplines models inputs outputs system components usually functions time 
decision determines value variable visible components interface physical time instant find mapping traces functions 
hybrid automata instance intermediate values sequence discrete actions cause actions parallel components 
decision hardly possible 
simpler form traces 
variable exactly value time instant variable evaluation function time 
note transition traces functions impedes computational induction 
section see computational induction employed components specified 
commercial products design embedded systems stateflow take different approach specifying hybrid systems 
approach system needs partitioned purely discrete purely continuous components specification 
method may appropriate systems think enforces early partitioning hardware software components highly inconvenient specifying components hybrid environment models example contain phase transitions 
formal model uses specification approach similar stateflow 
interestingly parallels hybrid machine model section model 
logic petri net approaches formal specification hybrid systems refer reader 
apart formal techniques plenty simulation packages hybrid systems see overview 
packages offer convenient graphical description techniques usually formal semantics defined 
simulation tools strong formal background 
put emphasis visual specification 
october am journey literature want mention graphical notation resembles description techniques software engineering method real time object oriented systems room 
particular closely correspond hierarchic automata room extend continuous activities 

overview rest organized follows 
section interpretations hierarchic graphs 
interpretations provide infrastructure defining surprisingly simple denotational semantics key concepts statecharts offered hierarchy preemption 
foundation denotational semantics hybrid computation model introduced section 
ideas developed model defined sections multiplicative additive interpretation hierarchic graphs respectively 
diagram kinds introduced intuitive way example 
section briefly discuss techniques component specification integrated approach relate timed automata 
furthermore discuss specification filter component example system importance hybrid modeling 
section summarize results 

hierarchic graphs section introduces operators algebra hierarchic graphs section 
relational models additive multiplicative model algebra 
additive model interprets operators way results control flow graphs section multiplicative model interprets way yields data flow graphs section 
models provide formal foundation hybrid computation model 
october am 
syntax hierarchic graph consists set nodes connected set arcs 
node name leaf node associated graph 
node incoming outgoing arcs define node interface type 
input output interfaces node corresponding textual notation fig 

interpret sets types may regarded mapping elements elements note interpretations define syntax 
interpretations hierarchic graph syntax sections define details 

operators nodes 
order obtain graphs put nodes connect operators relations sequential composition visual attachment feedback 
respective visual representation 
sequential composition 
composition operators 
visual attachment feedback october am sequential composition 
basic way connect nodes sequential composition shown left connecting output node input node type 
textually denote operator semicolon 
define type regarding nodes computation units left says output produced directed input 
connection units internal 
words define connection relation containment relation 
visual attachment 
visual attachment mean nodes corresponding arcs put near shown middle 
obtain textual representation visual attachment need attachment operator arcs nodes 
denote operator 
arcs visual attachment expressed nodes visual attachment expressed 
visual attachment defines containment relation 
say contained 
show convenient arc denoting absence information 
arc neutral attachment feedback 
sequential composition allows connect output node input 
particular connect inputs outputs node connect nodes bidirectional communication 
introduce feedback operator shown right 
allows connect rightmost output node rightmost input define similar sequential composition visual attachment feedback introduces containment relationship 
say feedback arc contained october am nodes arcs built nodes arcs operators called primitive 

connectors 
operators nodes need operators arcs predefined nodes call connectors 
consider connectors identity identification ramification transposition 
representation 
visual identity identification ramification transposition 
connectors 
identity 
identity connector ia simply copies input output 
type identification 
identification connector joins inputs 
type ak stands fold attachment define neutral arc binary case depicted 
ramification 
ramification connector outputs 
type ak shows binary case 
nullary case allows express hiding 
copies input information transposition 
transposition connector axb exchanges inputs 
type precise formalization intuitive understanding graphs operators connectors satisfy set laws intuitively express visual understanding graphs 
laws correspond strict symmetric monoidal categories feedback objects see 
october am shows additive multiplicative interpretations operators connectors particularly relevant computer science 

example 
example hierarchic graph corresponding textual representation consider graph left 
basic 
symmetric feedback 
operators connectors defines derived composition operator symmetric feedback 
type 
simplified visual representation right 
textual representation corresponds visual representation left ia ib ib 
additive model additive model model hierarchic control flow graphs 
intuition graphs follows 
moment time control resides exactly node 
node receives control entry points gives control back exit points 
entry exit point disjoint control received 
arcs graph forward control nodes graph 
intended disjointness nodes entry exit points branches connectors obtained interpreting visual attachment additively disjoint sum see defining operators connectors consistently interpretation 
october am 
arcs 
control understood data state consequence consider set state space 
arc flowgraph interpreted carrying values set 
visual attachment arcs interpreted carrying values fold disjoint sum disjoint sum abbreviated called program state space 
elements consist data state control state indicates stems th summand fold sum graphical analogy control received th visually attached arcs 
take empty set interpretation neutral arc disjoint sum program state spaces defined equation graph corresponds visual attachment visually attached arcs visually attached arcs 
left right summands canonical functions sum called left injection right injection 
inject elements summands sum recover original source 
definition follows easy see sum associative neutral element inthe merely refer program state state 

nodes operators 
control flow graph interpreted relation current input control control 
receiving current state determines state depending current input 
addition consider external input sequential machines defined relations allowed communicate environment 
may receive inputs produce outputs 
output space simply projection data state space 
write denote input space 
definition operators ensures october am nodes receive input 
convention arc drawn denote external input node 
note order simplify notation name node syntactic entity associated relation semantic entity 
denote arbitrary program state spaces mai mbi mc data state space ai bi node operators additive sequential composition 
additive sequential composition nodes yields new node defined expected 
example additive sequential composition analogy think nodes states automata diagram arcs transitions additive sequential composition nodes expresses outgoing transitions lead entered 
additive visual attachment 
additive visual attachment nodes yields statecharts new node control resides 
note interface sum reflects fact 
call additive visual attachment nodes disjoint sum 
visual notation 
meaning intuitively understood follows 
receiving tuple sum uses control information select corresponding relation october am 
additive interpretation 
relation applied obtain state control information added output obtained 
analogy automata diagrams additive visual attachment expresses distinct states coupled transitions grouped hierarchic state 
entering hierarchic state means exactly substates entered specified control information additive feedback 
additive feedback tricky allows construction loops 
programming feedback care order ensure termination 
relation define relation follows control received directly arbitrary number rounds loops formally nl nl nr denotes arbitrary finite iteration relation mi wherem 
relations ni defined ni october am definition injections corresponding input output 
analogy automata diagrams additive feedback expresses rightmost outgoing transition state leading back 
state transition times left transition 
connectors additive identity 
additive identity ia defined expected ia ia simply passes control modification 
extend analogy automata diagrams hierarchic automata diagrams statecharts additive identity may occur transition split parts boundary hierarchic state 
second part transition associated identity connector forwards control 
additive identification 
additive identification forgets entry point gets control ka ka analogy automata diagrams additive identification corresponds called junction connectors statecharts 
instance join transitions transitions common destination 
additive ramification 
additive ramification gives control exit points ka october am automata diagram analogy additive ramification similar called condition connectors statecharts 
typically employed transitions emerging state triggered event 
note ramification models branching control flow 
contain conditions non deterministic 
instance join transitions transitions common destination 
additive transposition 
additive transposition commutes entry point information means control passed right exit point received 
analogy automata diagrams additive transposition occurs cases transition diagram intersect 

multiplicative model multiplicative model model hierarchic data flow graphs 
intuition graphs follows 
moment time nodes graph active computing output data input data 
node receives input data tuple input channels sends computed data tuple output channels 
arcs graph channels forward data nodes graph 
intended parallelism nodes input output channels branches connectors obtained interpreting visual attachment multiplicatively associative cartesian product defining operators connectors consistently interpretation 

arcs 
assume set channel types di defining set messages allowed flow channel 
input october am output interface type component respectively flat product channel types ai defined follows xn xn arbitrary interface types am extend product definition follows bn 
xm xm am xm xm bn empty interface neutral arc right projections am bn am am bn am am bn bn am bn bn uniquely define pairing function fm gn holds fm gn 
definition product associative neutral element unique existence projections characteristic data flow graphs 
data flow graphs main concern data flow 
define analyze flow need observe information exchanged channel time 
hybrid system flow may continuous think analog devices assume time increases continuously dense take non negative real numbers time axis 
case data exchanged channel type time defines mapping ar motivated hybrid computation model section impose restrictions mapping section 
call restricted mapping dense communication history corresponding type dense communication history type 
ones interpret primitive arcs data flow graphs 
october am reasonable assumption leads model nice properties data flows time synchronous time flows way channel component 
case history associated prefix ordering component interface am equal product ar histories channels 

nodes operators 
behavior component completely described input output relation relation histories input channels histories output channels 
relation total input histories 
assume relations defined data occurring histories output channels time depends input history received including formally denote restriction time interval 
call relations time guarded 
interpret nodes data flow graphs 
informally time expresses component anticipate inputs 
clearly realizable component component implemented behaves way 
simplify notation name symbol node operator associated relation relational operator 
note names symbols syntactic entities relations relational operators semantic entities 
node operators multiplicative sequential composition 
multiplicative interpretation sequential composition usual sequential composition relations 
allows passing data component component linear way 
relations define multiplicative sequential composition follows october am 
multiplicative visual attachment 
multiplicative visual attachment components yields new component constituents active simultaneously constituent control described example control flow graph 
similar parallel composition statecharts refer multiplicative visual attachment parallel composition 
interface product reflect fact 
relations define product follows visual notation 

multiplicative interpretation 
multiplicative interpretation multiplicative feedback 
multiplicative feedback allows passing output component back input 
section construct add memory components 
relation october am define new relation ar 
time guarded guaranteed total input channel histories ar time guarded output channel time completely determined input time input channel input input channels time 
output reacts delay input channel say strongly time guarded feedback channel connectors multiplicative identity 
interpret identity connector ia identity relation ia simply copies input output ia ia multiplicative identification 
identification connectors ak interpreted multiplicative identification relations allow identify copies elements ar ak ak note time synchronous setting 
multiplicative ramification 
ramification connectors ak interpreted multiplicative ramification relations allow copies input ar multiplicative transposition 
transposition connectors axb interpreted multiplicative transposition relations axb allow commute position elements input tuple 
october am 
hybrid computation model start section explaining informally hybrid computation model works 
model constituents introduced formally 

general idea model hybrid system network autonomous components communicate time synchronous way 
time synchrony achieved letting time flow uniformly components 
component modeled hybrid machine shown left 
machine consists parts discrete combinational part com analog continuous part ana feedback loop infinitesimal delay projection 
feedback models state machine 
com ana act 
ana 
hybrid machine computation model 
allows component remember moment time input received output produced just october am time discrete part concerned control analog part memory 
instantaneously nondeterministically maps current input fed back state state 
state analog part select activity set activities execution modes starting state activity 
discrete part passes fed back state modification say idle 
discrete part select new state different fed back state distinct points time 
intervals time instances idle selection corresponding activity stable interval provided input change discretely interval 
analog part describes input output behavior component discrete part idle 
adds component temporal dimension 
may select new activity discrete change input receives environment discrete part 
example right shows exemplary behavior component 
shaded boxes indicate time periods discrete part node time discrete move environment triggers discrete move discrete part 
new state received discrete part analog part selects new activity 
activity start value time determined discrete part 
time discrete move environment discrete part remains idle 
analog part chooses new trajectory variables start value analog part output just receives discrete part time 
output higher order discontinuity 
time environment perform discrete move discrete part threshold reached 
analog part selects new activity begins start value determined discrete part 
intervals discrete part idle 
feedback state 
input received output produced may change abruptly time shown right consider state component moment limit outputs october am produced analog part approaches words feedback loop reproduces analog part output infinitesimal inertia 
output latched 
infinitesimal inertia realized part hybrid machine fig 
left 
definition def initial state hybrid machine 
data state machine consists mapping latched controlled variable names values corresponding type 
denote set controlled variable names associated domains 
set possible data states set controlled variable names split disjoint sets set private variable names set output interface variable names 
write sp clearly sp 
latched inputs subset input mapping input variable names values corresponding type 
denote set input variable names associated domains 
set possible inputs 
discrete part discrete part relation current inputs latched state state formally com program state space see section 
number leaf nodes hierarchic graph defines com see section 
computation com takes time 
important property relation defining discrete part defined states inputs total 
emphasize totality wrote functional style 
furthermore want discrete part passes state analog part combination part proceed 
october am ifs com state com new state computed starting input idle set inputs states com idle topologically closed 
preceding property guarantees extension com time discrete moves distinct points time 
fact needed ensure semantics hybrid machine defined 

analog part discrete part analog part performs activity 
describe activity relation act type act rc rc set stands set functions non negative real numbers lipschitz continuous piecewise smooth 
say function piecewise smooth iff finite interval non negative real line partitioned finitely left closed right open intervals interval infinitely differentiable form constant infinite differentiability required convenience 
allows assume differentials defined 
tuple functions infinitely smooth iff components 
call rc set flows model analog behavior behaved way activities total time guarded 
furthermore demand activities depend absolute time measured system start may started anytime 
relational notation act formally means time intervals histories rc rc act 
act right shift stream def 
complete behavior analog part described relation ana type october am ana program state space type com denotes set piecewise smooth functions input output analog part necessarily continuous 
finitely discrete moves discrete part environment finite interval allowed 
see demands discrete part realizable 
call set dense communication histories 
relation ana obtained pasting flows activities associated nodes discrete part com 
pasting realized shown middle extending sum operation activities 
set activities act sum defined def left closed right open interval extension constant function tuple consists control state flow gives moment time node discrete part see right data state flow gives moment time data state passed discrete part 
tuple consists control state flow data state flow computed sum 
interval discrete part sum uses control information demultiplex input appropriate activity multiplex output 
section show ana constructed activities hyschart operator 
construction results flat structure need injections definition directly summands numbers fold disjoint sum note type ana assures partitioned pieces simultaneously piecewise smooth 
output histories piecewise smooth definition ana 
demand activity total time guarded analog part total time guarded 
furthermore analog part demand october am resolvable means fixed point state input stream irc rc ana analog part needed prove semantics hybrid machine defined see 

component initial state behavior hybrid machine relation cmp input output communication histories 
writing graph middle relational expression multiplicative operators results denotational semantics cmp cmp cmp com ana trivially extends discrete relation time def 
selects output variables state stream 
definition cmp time guarded relation com ana time guarded 
show cmp total outline proof existence fixed point definition arbitrary starting state input 
composed relation feedback operator introduce delay existence fixed point guaranteed priori 
consequence properties com ana 
proof existence fixed point prove time passes discrete moves discrete part environment 
demanded set com idle topologically closed 
closed respect induced subspace topology range 
suppose output com current input latched state time see 
restrictions imposed com know october am 
computing minimal delay 
idle current input com remain idle long inputs environment feedback loop determine reached 
input stream piecewise infinitely smooth time evolves continuously 
due analog part fixed point input starting state fixed point continuous function 
constructing inverse image fixed point ana input stream yields set closed dom input analog part output continuous functions 
ast set set closed get discrete move performed min min 
min exists bounded closed 
interval fixed point ana fixed point cmp com identity 
applying argument inductively get fixed point cmp interval initial state 
diverges proper fixed point cmp 
execution discrete part performs infinitely discrete moves finite interval 
realizable 
sufficient condition realizability lower bound inputs initial states 
analog part resolvable discrete part realizable respect analog part component delivers reasonable infinite piecewise smooth output reasonable inputs 
words component total 
principal idea call total component receptive 
october am 
note semantics important characteristic semantic model uniform relational framework 
activities component total time guarded relations 
agrees slogan processes relations extended time 
discrete part relation relation time memory 
uniformity important consequences 
considerably simplifies semantic definition 
second allows apply operators hierarchic graphs introduced preceding section compose relations 
shall see operators correspond hierarchic system architecture specifications components hierarchic state specifications discrete part 
time extension additive operators leads activity specifications analog part 
dense piecewise smooth communication histories basis component specification allows integrate hybrid machines components specified formalisms 
particular includes established description techniques control theory component usually function inputs outputs continuity restrictions case 

system architecture specification system architecture specification determines interconnection system components 
graphical syntax 
architecture specification hierarchic graph called hybrid architecture chart nodes labeled component names arcs labeled channel names 
node may subnodes 
node names channel names serve 
graphical representation analogous structure specifications room 
semantics 
hierarchic graph constructed operators section 
writing graph equivalent relational formula october am multiplicative model interpret operators directly gives semantics 
interpreted product operation sets model visual attachment corresponds parallel composition 
node graph component acting parallel components arc graph channel describing data flow source component destination component explained section 
component names graph refer input output behaviors specified formalisms sections 
channel names input output variable names specification components 
variables types specified separately 
return example system left develop semantics 
example ehc left boolean valued channel signals controller car curve 
real valued channel carries chassis level measured sensors 
real valued channel carries filtered chassis level 
real valued channel carries chassis level proposed actuators compressor escape valve environmental disturbances 
boolean valued channels reset delayed reset transfer boolean reset signal filter 
delay component df ensures feedback defined see section 
types filter control component delay component follow channels types filter rr control df br br semantics system ehc defined 
relational algebra term corresponding left 
ehc rr ehc filter control df october am note user draw define types channels 

component specification hybrid statechart defines discrete analog part hybrid machine 
input output behavior resulting component follows parts explained section 
graphical syntax 
hyschart hierarchic graph node form depicted left 
node may sub nodes 
labeled node name serves activity name possibly symbols indicate existence entry exit action executed node entered left 
outgoing edges node labeled action names 
action names stand predicates input latched state state 
structured guard body 
activity names refer systems ordinary differential equations 
specification actions activities semantics explained detail 
transitions composed nodes express preemption 
activities look similar room charts 
semantics 
semantics hyschart divided discrete analog part 
discrete part follows directly diagram 
analog part constructed chart little effort 
explain discrete part derived hyschart analog part covered 
show actions continuous activities specified 

discrete part hyschart hierarchic graph constructed operators section 
mentioned section interpreting graph additive model leads close correspondence automata diagrams 
october am may view graph network autonomous computation units nodes communicate directed control paths arcs 
due additive model time point control resides primitive computation unit section 
order derive discrete part hyschart give semantics nodes computation units 
semantics hierarchy actions follows 
node activity action action enm enm en wt en wt wt entry entry entry entry 
syntax semantics computation unit 
semantics primitive node sub nodes 
nk action wait action exit exit exit exit ex wt exn ex exn wt wt semantics hierarchic node computation units 
primitive node hyschart represents graph fig 
top right 
formally corresponds relational expression def entry exit wait additive operators intuitive meaning 
computation unit gets control entry points eni gives control back exit points 
getting control regular entry point entry point different wait wt computation unit executes entry action entry specified 
october am evaluates set action guards 
guards true corresponding action said enabled body executed 
finishing execution computation unit executes exit action exit 
control computation unit exit point corresponding executed action 
guard true computation unit nondeterministically chooses 
guard wait diagram stands negation disjunction guards actions 
guards true discrete computation completed control leaves discrete part designated wait exit point wt 
section shows analog part takes advantage information exit point determine activity executed gives control back corresponding wait entry point 
hierarchy 
node hyschart stands graph bottom right 
principal difference primitive nodes entry points identified connected corresponding entry points sub nodes 
similarly exit points sub nodes connected corresponding exit points enclosing hierarchic node 
furthermore hierarchic node wait entry wait exit point wait entry exit point sub nodes 
receives control directly passed wait entry point corresponding sub node 
wait entry point identifies sub node 
hierarchic node left wait exit point sub node left corresponding wait exit point 
actions 
action relation current input latched data state data state actions specified characteristic predicate 
conjunction precondition action guard latched data state current input postcondition action body determines data state 
precondition implies postcondition satisfiable action enabled iff precondition true 
left quoted variables october am denote current input right quoted variables denote data state plain variables denote latched data state 
mention changed variables assume necessary equalities stating variables change 
simplify notation associate variable channel example action resetting filter ehc example defined follows toggled reset 
mentioned section discrete part may perform discrete state changes topologically closed subset condition satisfied hyschart defining discrete part precondition action chart identifies topologically closed subset note conjunction hierarchy action guards chosen care order guarantee discrete part specified hyschart total 
events 
latched variables allow model different communication styles 
particularly interesting example events model toggling boolean variables 
occurrence event detected testing current input value variable different latched value variable occurrence event write 
abbreviation 
second part conjunction updates latched value 
similarly sending event expression abbreviated 
notation filter reset action rewritten 

message passing modeled equally easily 
preemption 
preemptive group transition transition may taken substates hierarchic state 
transitions originating hierarchic node subnodes express preemption 
actions associated transitions called preemptive actions 
discussed define preemptive action higher priority action inside hierarchic node strong preemption lower priority action inside node weak preemption 
weak october am preemption simpler better suited refinement nodes 
allows actions inside hierarchic node overwrite preemptive action 
corresponding graph node preemption obtained follows 
re placing hierarchic node preemptive actions pa pa fig 
top left corresponding graph bottom right yields diagram form top right 
obtain semantics original node preemptive transitions diagram turn replaced graph bottom 
hierarchic node activity pa pah en enm wt wt action en enm wt wt semantics hierarchic node 
semantics preemption 
ex wt wt en enm wt semantics hierarchic node pa pah ex ex pa exit ex wt pex pah exit graph basically expresses subnode left wait exit point wt preemption actions enabled executed followed exit action exit enclosing hierarchic node 
hierarchic node left exit point pex corresponding executed preemptive action 
preemptive actions enabled wait negation disjunction october am wait wait wt ex exn wt wt guards pai actions hierarchic node left wait exit point corresponds wt subnode 
example left action preemption action composed computation unit 
additive interpretation graphs provides infrastructure easily model history variables concepts known statecharts formalisms 
semantics 
node hyschart replaced corresponding graph right right obtain hierarchic graph nodes merely relations 
writing graph corresponding relational expression additive operators gives denotational semantics hyschart discrete part discrete part hybrid machine 
highest level hierarchy hierarchic graph resulting hyschart wait entry exit point pair primitive leaf node chart 
semantic level exactly summand fold sum discrete part type entry exit point pair 
analog part uses entry exit point information encoded disjoint sum select right activity node hyschart section 
outline utility approach hybrid systems return hyschart controller 
example ehc control component describe states transitions top manner 
activities written italics explained section 
computation unit control 
top level component control computation units 
controller senses car curve computation unit entered 
left controller senses car longer curve 
sensing curve event driven 
boolean variable bend purpose 
actions identical simple bend 
computation unit 
computation unit refined shown top right 
control long october am filtered chassis level certain tolerance interval 
compressor escape valve 
outside interval sampling point sub nodes entered 
sub nodes left inside desired tolerance filter reset 
actions originating defined follows ts lb ub lb ub interesting aspect specification composed action started timeout semantically corresponds ramification operator hierarchic graphs 
course separate transitions 
case visual representation failed highlight common enabling condition leaving computation unit exit point reset causes execution reset action 
action enabled defined reset reset 
note name action associated event 
transition originates composed node sub states 
expresses weak preemption transition taken sub node long overwritten 
computation unit 
shown bottom right computation unit consists computation units 
filtered chassis level low sampling point node entered compressor 
level high entered escape valve open 
control remains nodes inside desired tolerance actions 
actions cause left exit point reset actions originating similar lb lb ub ub ub lb ub lb ramification chart highlight common enabling condition actions 
indicated symbol nodes entry action 
defined entry resets action october am activity models sampling nodes transitions directly originating nodes taken sampling interval 
semantics 
discrete part follows directly hyschart replacing nodes corresponding graphs right right 
wait entry exit point pair highest level resulting graph corresponds summand type discrete part get discrete part type com note user draw hyschart give definitions actions 
corresponding discrete part constructed automatically 

analog part second part hyschart semantics analog part defines 
explain analog part derived chart 
activities 
activity name hyschart refers system ordinary differential equations variables component 
demand tuple initial values sand continuous infinitely smooth input stream irc resulting initial value problem solvable 
example activities control example activity names written italics stand differential equations cp cp const dec ev ev cp cp ev 
pace physical time 
variable increases rate cp cp activity decreases dec remains constant const note user provide specify analog part 
october am activity act rc rc node derived differential equations way input stream state stream take initial value system differential equations 
activity set output streams consists solutions resulting initial value problem input stream controlled variables evolution determined initial value problem activity output equal component state stream activity received 
remains unmodified 
composition activities 
reflect hierarchy hyschart activities specified nodes composed appropriately 
extend sequential composition operator disjoint sums activities act act 
act act hyschart seen tree primitive nodes leaves 
example node control root nodes leaves 
starting tree root derive composed activity defined hyschart follows write primitive activity node composed activity node 
def primitive node sub nodes mn composed activities mi stands sequential composition primitive activities def mi analog part composed activity hyschart root node ana 
example explain definition 
example analog part control hyschart analog part ana const const dec october am wt wt wt const const wt 
control component analog part 
wt wt wt dec wt applied associativity 
activity names refer semantics activity 
note expression equivalent const const dec identity connector neutral element sequential composition 
depicts analog part graph 
entry exit point symbols highlight analog part path graph primitive node hyschart 
construct discrete part hyschart get wait entry wait exit point highest level hierarchy primitive node 
allows sequentially compose discrete part analog part semantics hybrid machine section 
distinct wait points allow discrete part analog part know node hyschart currently control behave accordingly 
section demanded analog part resolvable 
activities defined solutions solvable initial value problems automatically ensured 
example section contains hyschart ehc filter component 
october am 
relation formalisms 
heterogeneous component specification multiplicative interpretation allows compose components specified additive interpretation enables compose arbitrary components type set input output channels respectively 
means formalism component specification defines component total time guarded relation piecewise smooth inputs outputs 
particular allows description techniques engineering disciplines block diagrams widely control theory 
example delay element delay element ehc reproduces input delay 
specified directly relation follows df df false 
timed automata interesting side effect simulate non urgent transitions timed automata transitions taken soon enabled :10.1.1.43.9418
explain left shows state timed automaton left time intervals ai bi equivalent node hyschart right 
actions andg activities acti bi ai 
means non deterministically choosing time instant ai bi non deterministically choose time scale 
bi ai skewed clock equals limit transitions taken 
activity bi get transition taken bi bi october am 
translating timed automata 
act act reading translation way round get class allows guards activities form translated timed automata 
class decidable reachability problem 
result comparable decidability simple multi rate timed systems defined 

typical hybrid component shows hyschart filter ehc example 
action name set stands 
activity name follow denotes filter time constant measure inertia 

hyschart filter 
filter follow discrete analog part filter easy component interesting hybrid point view close interaction discrete dynamics set action continuous dynamics differential equation hardly possible decompose filter purely discrete purely continuous part exhibit discontinuities 
filter underlines need hybrid specification techniques 
october am set 
clear hybrid computation model able show ideas smoothly carried hybrid systems yield modular visual description techniques systems 
resulting techniques specification hybrid system architecture hybrid component behavior respectively 
example demonstrated features 
apart features known statecharts formalisms particular includes ability compose components specified formalisms 
opinion heterogeneous specifications key property designing hybrid systems allows integrate description techniques different engineering disciplines 
methodically conceive hyschart precise mathematical model hybrid system 
knowing exactly behavior analog part system differential equations allows develop concrete models easily implemented discrete computers 
models essential choose discretization preserves main properties description 
mainly aims hybrid systems appearing context disciplines electrical mechanical engineering think continuous activities suited specifying multi media systems video demand systems 
basically appropriate mixed analog digital system continuous time natural discrete time model 
intend develop tool support requirement specification language 
verification believe techniques known linear hybrid automata easily adapted 
acknowledgments kr ger olaf ller jan anonymous referees constructive criticism reading draft versions 
october am notes 
see material dense input output relations 

note periodical sampling avoided hybrid model 
bmw implementation allows expose various features formalism entry exit actions timeouts 

large grey arrows part notation indicate connection hierarchic levels 

details see 

fact associativity motivation explicitly giving definition cartesian product 
definitions literature instance definition associative isomorphism 

note control theory stronger requirement demanding output time depends input received excluding see 

continuity restrictions enforce section ensure limit left defined 

technically output com element disjoint sum structure summands due associativity disjoint sum abbreviate 
topology topology induced discrete topologies variable domains different variable domains equal 

convenience relational notation act 

action consists guard body 

interior node omitted clarity 
exactly graph bottom right 

adaption application specific syntax activities suited multi media streams feasible 

totality requirement similar requirement hybrid reactive modules 
assures environment block passing time input histories infinite component block passing time 
infinite output communication history 
allows safely apply assume guarantee rule proving composed implementation component refines implements composed specification component 
october am 
remember 
shorthand 
alur courcoubetis halbwachs henzinger 
ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science 

alur dill 
theory timed automata 
theoretical computer science 

alur henzinger 
modularity timed hybrid systems 
concur concurrency theory lncs 
springer verlag 


modelling simulation analysis sim 
journal special issue 

broy 
refinement time 
arts lncs 
springer verlag 

zhou ravn hansen 
extended duration calculus hybrid real time systems 
hybrid systems lncs 
springer verlag 


general topology volume sigma series pure mathematics 
verlag berlin 

hoffmann 
modular hierarchical models hybrid systems 
proc 
th ieee conference decision control cdc pages kobe 

bi van beek 
integration discrete continu ous behaviour hybrid chi simulator 
european simulation multiconference manchester pages 

grosu broy selic 
calculus uml rt specifi cations 
th oopsla workshop behavioral semantics oo business system specifications technical report tum 
technische universit nchen 

grosu broy selic 
uml rt 
behavioral specifications businesses systems 
kluwer academic publishers 

grosu 
visual description hybrid systems 
workshop real time programming 
elsevier science 

grosu broy 
modular visual model hybrid systems 
proc 
formal techniques real time fault tolerant systems lncs 
springer verlag 
october am 
grosu gh 
broy 
visual formalisms revisited 
proc 
int 
conf 
application concurrency system design csd 
ieee 

harel 
statecharts visual formalism complex systems 
science computer pro gramming 

kesten pnueli 
timed hybrid statecharts textual representation 
proc 
formal techniques real time fault tolerant systems nd international symposium lncs 
springer verlag 

friesen simons 
smile simulation environment energy systems 
proc 
th international imacs symposium systems analysis simulation sas systems analysis modelling simulation volume pages 
gordon breach publishers 

leslie lamport 
hybrid systems tla 
grossman nerode ravn rischel editors hybrid systems volume lecture notes computer science 
springer verlag 

lynch segala vaandrager weinberg 
hybrid automata 
hybrid systems iii lncs 
springer verlag 


overview hybrid simulation phenomena support sim ulation packages 
hybrid systems computation control lncs 
springer verlag 

ller 
modelling verification linear hybrid automata case study 
mathematical computer modelling dynamical systems 

pnueli 
development hybrid systems 
proc 
lncs 
springer verlag 

selic ward 
real time object oriented modeling 
john wiley sons chichester 

sontag 
mathematical control theory 
springer verlag 

ller fuchs 
hytech verify automotive control system 
proc 
hybrid real time systems hart lncs 
springer verlag 

gh 

algebra 
technical report tum technische univer sit nchen 

mathworks stateflow 
www mathworks com products stateflow 
october am 

hybrid high level nets 
proceedings winter simulation confer ence california usa charnes pages 

fritz schulz 
batch process simulation dynamically reconfigured process dynamics 
proc 
escape supplement comp 
chem 
engineering 
october am 
