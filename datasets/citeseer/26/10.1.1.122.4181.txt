schema matching simplify heterogeneous data translation tova milo zohar milo math tau ac il math tau ac il broad spectrum data available web distinct heterogeneous sources stored different formats 
num ber systems utilize heterogeneous data grows importance data translation conversion mechanisms increases greatly 
new translation system schema matching aimed simplifying intricate task data conver sion 
observe cases schema data source system similar target system 
cases translation done automatically schemas sim ilarity 
saves lot effort user limiting amount programming needed 
define common schema data mod els schemas data resp 
common models represented 
ing rule method source schema compared target component source schema matched corresponding component tar get schema 
matching achieved data instances source schema translated instances target schema 
show schema translation system allows convenient specifi cation customization data conversions easily combined tradi tional data translation languages 
computer science dept tel aviv university permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference new york usa data integration translation problem facing organizations wish utilize web data 
broad spectrum data available web dis heterogeneous sources stored different mats specific database vendor format sgml la tex documents dx formats scientific data step cad cam data integration ac tive field research see instance small sample 
key ob application programs organizations handle data specific mat 
web browsers netscape expect files html format relational databases expect re lations 
enable specific tool manipulate data coming various sources relational system data stored web html format translation phase take place data source format needs mapped format ex pected application 
naive way translate data format writing specific program transla tion task 
examples latex html trans html text translators 
writing program typically non trivial task complicated numerous technical aspects spe cific data sources really relevant translation process html sgml parsing specific database access protocol 
works consider general framework enables flexible translation various models 
solution common data model source target data mapped ing common translation language enables specification customization translation task 
new translations easier requires considerable programming effort new translation defined 
goal design mechanism simplifying specification translations 
base observation frequently structure source data similar tar get translated data structure mod performed translation process standard result various differences schemas source target sys tems 
general term schema de note way data model chooses model data 
example databases schemas model database instances structured documents obey grammar document type definition dtd sgml html models definition may partial semi structured data 
observation translations schema target system closely related source system schemas aim represent data 
implies large part translation process done automatically relying standard relationship reducing programming effort involving user specification non standard parts translation 
built data translation system called implements idea 
schemas source target data system examines schemas tries find similarities differences 
done rule method rule defines possible com mon matching schema components provides means translating instance instance second 
system set built rules handles common cases extended adjusted overridden user translation process 
system uses rules tries find component source schema unique best matching component target schema determine component represented target 
called matching process 
process succeeds data translation performed automatically translation facilities matching rules 
cases process may fail compo nent source schema matched target current set rules matching process derive component just ignored ii component source schema matches components target schema system automatically determine best match 
user add rules system handle special component describe trans lation applied 
ii user asked determine best match 
user input matching process completed translation enabled 
note purpose schema data translation method propose replace programming languages data translation pro posed complement 
idea having write transla tion program data translation specification done automatically system schema matching programmer need supply minimal additional code handle data components covered sys tem 
programming effort greatly simplified 
focus system architecture modular schema match translate rules specific language define rules 
fact provide generic interface rules presentation independent spe cific language specify 
implemen tation reasons prototype java rule definition language desired user declarative rule languages style enabling logic inference properties correctness rules 
scope 
handling data schemas different models requires common framework different schema data formats 
defined middleware schema data models matching process data translation performed 
schema model consists graphs data model consists labeled forests similar introduced oem tree models lo 
difference oem model allow nodes ordered 
crucial modeling data ordered structured documents 
data source exposed web community expected provide mapping middleware format 
shall see representation source inside middleware close structure data schema source implementation mapping fairly easy 
organized follows 
start general overview system section 
sec tion presents middleware data schema mod els 
section describe match translate rules determine matching schema components data translation derived 
explain user interaction system means customizing translations 
system architecture implementation section 
conclude section con related 
system overview typical scenario system follows 
receives input schemas data source target 
schemas im ported system common schema model 
step matching 
system tries find component source schema corresponding component target schema determine component repre sented target rule process mentioned 
matching completed user assistance data translation possible 
perform translation data instance source schema imported common data model typed el ement data attached corresponding schema element type 
system uses match schema components achieved pre vious step translate data recall rule system com ponents defines possible common matching components schemas second provides means translating instance instance second 
element source data translated translation func tion rule matched type type component target schema instance target type 
resulting elements glued form valid instance target schema 
translated data exported target application 
demonstrate process exam ple 
assume basic knowledge sgml oodb consider translation data formats 
example sim version example described 
full example handled similarly tion space reasons 
ignore representation formats middleware models considered section concentrate matching translation steps 
consider sgml dtd sgml document oodb schema fig ure 
translate sgml docu ment instance mentioned dtd instance oodb schema 
note dtd schema quite similar 
describe possible matches components determined automatic rule system 
match detail difference tween structure components suggest possible translation function mapping instances instances second 
article element sgml dtd basically ordered tuple 
similar element schema article class 
components name capital letters similar components explained structure components match 
difference tuple attributes oodbs ordered 
translation function case simple article instance oodb built input instance simply omitting information 
order doctype article element article element authors element sections element title element author element section element section element section element element picture element element wag title authors sections author section pcdata pcdata section section title body picture 
paw pcdata pcdata pcdata sgml dtd article title structured documents 
title authors author christophides author author abiteboul author author cluet author authors sections section section title title body structured documents 
body section section section title sgml preliminaries body section 
order define 
body section section section section picture bitmap dtd document section article sgml document class article public type tuple title string author list author sections set section class author string class section public type tuple section tuple title string body set string section tuple string string tag string oodb schema section element dtd describes union type 
schema similar el ement section class class describes ary tuple sec ond attributes similar name structure second alternatives resp sgml section union type third attribute tag 
knowing odmg sup port union types construct implemented having tuple containing alternatives plus tag attribute indi alternatives conclude structures form match 
translation function case maps sgml section tuple oodb filling relevant attribute ac cording section type assigning default value filling tag attribute relevant type indication 
authors element dtd authors list oodb represent collection matching elements author author resp 
translation function produce oodb list authors sgml element individual translated author elements grouping list ordered order occurrence file 
consider picture elements sgml dtd 
discussion conclude section elements schemas potentially match picture matched elements oodb schema hebrew terms picture resp 
assuming com puter contain hebrew dictionary decide matched components 
note structure attributes deter mine best match exactly class article author author author section section section oid vc sa sc sec sec value structured authors list vc sa sc sections set sec sec sec christophides abiteboul cluet tuple section tuple title body set section tuple tag tuple section tuple title sgml preliminaries body set sect order section tuple tag tuple section tuple title body set section tuple bitmap dtd tag section oodb instance structure 
user asked determine best match 
assume system contains oth ers generic matching rules cover cases rule matching ordered unordered tuple structures attached translation function described rule handles case attributes omitted added rule matching union types tagged tuples attached translation function rule matching collections matched components translation function 
user input added system additional spe cial rule indicating match picture elements trans lation function identity function elements label 
matching translation process extended set rules completed get instance oodb schema natural translation source document 
example relatively simple 
cate things bit 
assume article element doc ument defined element article title author section tags authors authors sections sections omitted sgml document 
case sgml article longer includes clear separation components sequence el ements starting title element followed author elements section ele ments 
looking schema fairly easy see sequence logically separated parts author subsequence matches tribute article class section sub sequence matches sections attribute 
translation mechanism split sequence logical sub components proceed mapping described 
similarly definition section element shortened element section title picture 
section body elements longer explicitly appear data tags omitted complicate map ping image data considered 
logical structure data reflected schema translation process split file logical components 
example assume author class oodb containing sim ple string defined class author tuple name string name string email string just looking sgml schema dtd system determine break sgml author string relevant components 
user needs provide specific translation program element string se mantics data analysis 
programming needed effort limited small portion data rest translation derived automatically 
assume user wants move figures article omit specific figures 
user override rule rule matching translating collections matched components particular collection translation function reorders translated components required omits specified elements 
programming needed define new translation function spe cific case limited user needs specify reordering collec tion actual translation collection components automatically system 
cases differences schema structure require complex matching analysis source schema includes nested collections nested tuple structures common model structured doc uments target schema target system relational database source schema includes links typical oodbs hypertext target schema relational database simple non hyperlinked textual document 
ex shows cases common mappings standard 
continuing examples nested tuples represented flat models simply flattening nesting ing flat tuple containing leaf attributes additionally adding name origin component prefix attribute name 
nested sets common representations flat models simple unnesting giving nested set identifier auxiliary relation records relationship identifiers corresponding set elements 
similarly represented relational system docu ment keys identify referred element 
common alternative documents actual copy referred element link 
cases simple define match ing rules possible alternatives corresponding translation function 
system contains large set predefined rules covering cases common cases encountered experiments literature data translation 
working system user add needed additional rules cover cases currently handled system define arbitrary new translations dis able modify override existing rules adjust sys tem needs 
system graphical inter face display point schemas set matches determined system rules problems encountered matching process 
starting user add disable modify override rules obtain de matching translation 
rest describe components system 
start middleware data schema models con match translate rules 
data schema models handling data schemas different models re quires common framework different schema data formats 
defined middleware schema data models matching process data translation performed 
data source wishes system expected provide mapping data schema middleware format 
shall see models fairly simple representation source inside middleware close structure data schema source implementation mapping fairly easy 
furthermore system includes import export programs common data mod els relational html sgml data sources 
data model data model similar oem tree models lo 
data represented forest labeled nodes 
particularity allow order defined children nodes 
order inherent component data structures ordered tuples lists 
similarly textual data described sequence characters words higher level certain parse tree cases order data elements important 
supporting order part data model enables natural representation data coming sources 
lo labels vertices represent schematic information data values 
represent cyclic structures leaves values ids vertices forest case leaf basically describes pointer vertex 
main reason popularity kind model simplicity fact easily map graph tree 
illustrate data different sources naturally represented middleware model consider representation sgml document oodb discussed previous section 
formal definition model additional examples representation data various sources 
sgml document basically represented parse tree document described tree 
variant discussed previous section article section elements defined article title author section element section title picture 
represented tree 
observe tree flatter reflecting fact logical tags missing data 
trees nodes ordered reflect order elements file 
data graph oodb omitted lack space 
represen tation natural ordered node authors node ob jects described leafs having objects vertex id value 
schema model schemas modeled labeled graphs nodes may ordered 
chose graph forest data model case sim description recursive types 
significant issue similar forest rep resentation defined having leaves pointing vertices done data forest case 
vertex schema graph represents schema element type children represent possible components 
labeling vertex de name element element properties information relationship tween element components 
includes information root type roots data forest assigned type possible labels data vertices type leaf vertices determine possible domain data values data vertex type referenced vertices vertex id value leaf node forest allowed number range children data vertex type children data vertex type ordered component types optional useful describing union types optional attributes th sub tree rooted node type allowed arbitrary structure useful describe semi structured data vertices type appear data graph just virtual 
understand point consider second sgml definition article element element article title author section explained previous section translation purposes convenient explicit schema article composed logical components title part author part section part 
note data tree sgml document really con tain author section nodes 
item labeling reflect fact 
illustrate things exam ples 
formal definition schema model additional examples representation various schemas due lack space omitted 
schema graph oodb database schema graph sgml document pre article structured dot sgml pn order sgml file middleware data representation christo abiteboul cluet structured order dot preliminaries second sgml file middleware data representation ti bitmap dtd section oodb schema middleware schema representation article sgml schema middleware schema representation sented empty circles represent virtual elements elements appear data full circles represent real elements 
la vertex includes element name real elements additional information listed square brackets 
data instances element element name label base type name int string data element labeled value corresponding main 
keyword ref denote leaf data vertices point vertices pointed vertex id label 
element square brackets indicates number range children vertex type 
indicates node ordered 
ex ample authors vertex means data vertex type zero children 
possible type children determined children vertex schema graph 
sign denotes optionality 
example 
vertex means data vertex type optional may data instances appears 
similarly children section vertex graph fact section vertex declared single child reflects fact union type choice possible types children 
schema graph defines set data instances conform 
intuitively data forest conforms schema sgml document basically virtual elements regular 
data trees sgml files ordered vertices schema graph files ordered 
schema graph vertices assigned type vertex satisfies requirements described labeling 
note virtual types appear explicitly schema corresponding vertices data 
translation purpose useful full structure explicit data 
looking data forest look explicit version definition explicit version data forest data forest nodes marked virtual obtained identifying virtual vertices parents preserving order outgoing edges 
example sgml tree authors section section body vertices marked virtual labels omitted ex plicit version tree 
refine notion conformity de scribed say data forest conforms schema graph explicit version type assignment mapping vertices ver types vertex satisfies requirements assigned type described labeling particular virtual iff 
formal definition see explicit version data forest type assignment determine data translation explained section 
continue example tree conforms schema due explicit version structure natural type assignment 
match translate rules schema matching process matching vertices source schema graph vertices target schema graph 
matching achieved translating instances schema instances second 
rules 
rule components charge matching translation 
matching part consists basic functions match function vertices vr input schema graph target schema graph examines labeling vertices determines possibly match 
match conditional matching components vertices descendents schema graph determined second function function 
pair vi input output schema vertices function returns sets descendents vi resp 
possibly set constraints need matched way satisfies constraints order wl match 
translation part consists translation function charge translation instances matched types rule 
match resp 
translation denote match function resp 
translation rule say schema vertices match exists rule match vl true 
simple example consider rule section match ordered unordered tuple structures 
match function rule simply compares names elements built dictionary detect synonyms number children 
function returns sets direct children vertices 
constraint allowed matchings descendents depends close want structures example want consider cases input attributes represented output require matching descendents total 
allow attributes omitted may allow partial matchings possibly constrain minimal number specific attributes match 
translation function simply constructs data vertex representing target tuple label indicated target schema attaches translated descendents children 
distinguish types rules local rules direct children matched schema vertices rule discussed semi local rules non direct children nested tuple mapped flat translation takes leaf attributes nested input tuple form flat tuple global rules translation function handles subtree rooted vertex performs global translation recursive previous cases case function returns empty set 
shall see global rules useful customizing translation user add system global rules defining special treatment specific subtrees data rest data handled standard manner predefined rules system 
rules distinct priorities vertices matched rules interested highest priority rule 
matching process attach vertices input schema vertex output schema highest priority rule supporting matching vertices 
note case input vertex non direct output vertex direct 
exam ple descendents non direct nested tuple mapped nested tuple having different structure matching leaf attributes definition set rules say schema graphs 
match possi ble define partial mapping li vertices pairs vertices rules roots mapped roots ev ery vertex vl holds 

best possible matching rule match vl holds rule priority match vl holds 

descendents properly non ously matched 
mapping restricted vl maps descendents vi members satisfy ing constraints exist allowed matchings vi vl vh vertex rule priority match vi vy holds 
conversely vertex vy rule prior ity match vy holds 
schema graphs roots require non ambiguity mapping roots 
user interaction cases matching may fail component source schema matched target current set rules matching process derive com ponent just ignored ii component source schema matches components target schema system automatically determine best match 
example case vertex matched vertex single rule requires total matching descendents matched descendents rules 
example second case descendent matched rule distinct descendents higher priority rule break tie 
fact exactly case considered section element matched elements system automatically determine best match 
system graphical interface dis play point schemas set matches determined system rules 
matching fails system displays user maximal partial matching satisfying con ditions highlights schema components matching failed 
starting user add disable modify override rules obtain de matching translation 
solve problem user add rules system handle special component describe translation applied 
ii system asks user determine best match 
user input added system new rule higher priority rule causing am 
matching process restarted reaches problematic node matched new rule highest priority possible rule unique target node specified rule resolving ambiguity 
system maintains set rules list priority rule reflected relative position list 
adding new rules user disable modify override existing rules 
consider exam ple sgml oodb translation discussed sec tion assume want override rule rule matching translating collections matched components specific collections special treatment example translating list sections may want move figures 
override rule insert new rule higher priority match criteria covers subset cases handled translation function appropriate subset 
matching process chooses highest rel priority rule new rule override old specified elements 
translation system determines matching source target schema graphs user assistance translation instances schema instances second enabled 
perform translation data instance source schema imported common data model typed data vertex corresponding schema vertex type 
re call facilitate translation want full logical structure data 
transform input explicit version consider type assignment explicit data forest 
system uses matching input target schema vertices computed previous step translate data forest applying recursively top bottom translation func tions rules attached types vertices 
resulting forest instance target schema 
obtain real forest virtual nodes glued parents definition 
resulting data instance exported target appli cation 
conclude section remarks combining schema data transla tion works propose specialized pro gramming languages targeted specifying data translations 
schema approach aimed replacing languages complementing 
idea having write translation program data translation specification done automatically system schema matching programmer need supply minimal additional code handle data components covered system 
terms system means adding new rules translation function programmed languages 
typing translation process constructs output data forest 
exporting data target application system checks forest conforms output schema 
note test spared individual rules guaranteed correct sense rule transla tion function guaranteed generate legal instance output type legal instance put type correct translation 
system contains large set built rules correctness sense veri fied 
new rules added existing rules modified user declare correct sense correctness checked proved type checking enabled run time test translated data exported 
architecture implementation system composed main compo nents rule base consisting large set predefined rules covering cases common cases encountered experiments literature data translation 
full list available rules 
matching module charge matching input output schemas current set rules 
matching algorithm works top fashion starting root nodes going conditions definition time polynomial size schemas rules 
typing module data forest schema graph tests data conforms schema constructing explicit version data forest type assignment vertices 
possible show worst case process take time exponential size input problem np com plete large class schemas covering common data models polynomial algo rithm exists 
graphical user interface display schemas set matches det system rules problems tered matching process assists user adding disabling modifying overriding rules obtain desired matching trans lation 
interface display put target data forests typing computed nodes 
extendible library import export programs connecting external sources import ing exporting data schemas system 
system part larger project aims developing tools utilization digital libraries available web 
system translate data web formats expected appli cations part 
system written java version cur rently fully operational 
interac tive mode api includes features discussed import export pro grams sgml html database relational data 
currently working ing user interface plan add additional im port export modules performance optimization issues 
related conclude considering related 
works data translation focus translation specific formats 
examples latex html translators html text translators mappings structured documents ob ject oriented databases 
works approach consider mappings various data models 
rely data schema 
input data converted middleware model transformed integrated tar get models 
done translation language 
language powerful ca variety translations may quite complex 
example uses datalog style rules 
model general allows representation schemas translation program written manually transla tion language intricate 
closest approach demonstrated wol language 
considers schema data transla tions 
approach translation program depends specific characteristics input schema specific labels typing schema schemas assigned mappings manually 
system translation rules sense generic 
system con tains large set predefined generic rules common properties schemas middleware model characteristics specific input schema 
user add spe cific rules customizing matching translation 
example languages men tioned 
related subject schema transformation 
works area mainly concentrated restructuring source schemas target ones con version data instances schemas 
see survey schema merging translation techniques 
works ll consider aspects ing schemas source databases 
consider translation schemas model 
target schema created series manip source schema 
example intro duces meta schema model schemas 
schema meta model rule method source schema restructured schema target model 
put mapped external real world format 
works address problem ion capacity determin ing possible represent instances source schema instances target schema unique way vice versa 
proves schema transformations preserve information capacity 
note context user may times need export data specific target schema preserve information capacity 
works area consider underlying data 
schema transformed need translate underlying data 
hand concentrates data transla tion 
deal schema transformation assumes source target schemas input suggests partly automated data translation matching tween schemas 
combining system works schema transformation cial plan study issue 
acknowledgments supported israeli ministry science academy arts sciences 
abiteboul 
querying semi structured data 
proc 
icdt pages 
pi pi ahmed de du kent litwin shan 
pegasus heterogeneous multidatabase system 
ieee computer 
batini lenzerini navathe 
comparative analysis methodologies database schema integration 
acm computing surverys dec 
pi pi buneman davidson hillebrand suciu 
query language optimization techniques unstructured data 
proc 
acm sigmod conf 
management data san diego 
buneman davidson anthony 
theoretical aspects schema merging 
proc 
extending database technology 
abiteboul cluet milo 
database interface files update 
proc 
acm sigmod conf 
management data san jose california 
abiteboul cluet milo 
correspondence translation heterogeneous data 
proc 
icdt pages 
abu cordy martin 
schema translation structural transformation 
cascon ibm centre advanced studies conference pages november 
atzeni torlone 
schema translation heterogeneous data models lattice framework 
sixth ifip tc working confer ence data semantics ds atlanta gia 
beeri elber milo sagiv tishby 
tool suite harnessing web data 
appear webdb 
beeri milo 
schemas semi structured data 
technical report 
carey heterogeneous multimedia information systems garlic approach 
technical report rj ibm almaden research center 

chang hull 
witness generators support bi directional update object databases 
proc 
acm sig mod sigact conf 
print 
database syst 
pods san jose california may 
wi po wi pi pi wiederhold 
forward intelligent integration information 
journal intelligent information systems may 
pi chawathe garcia molina hammer ireland papakonstantinou ullman widom 
tsimmis project integration heterogeneous information sources 
proceedings ipsj conference pages tokyo japan october 
christophides abiteboul cluet scholl 
structured documents novel query facilities 
proc 
acm sigmod conf 
management data minneapolis 
min cluet delobel simeon 
mediators need data conversion 
sig mod appear 
susan davidson peter buneman anthony 
semantics database transformations 
technical report ms cis university pennsylvania 
susan davidson anthony 
wol language database transformations constrains 
proc 
th int 
conf data engineering pages april 
goldfarb 
sgml handbook 
press oxford 
levy rajaraman ordille 
querying heterogeneous information sources source descriptions 
vldb 
miller ioannidis nan 
information capacity schema integration translation 
vldb 
miller ioannidis nan 
schema equivalence heterogeneous sys tems bridging theory practice 
information systems 
papakonstantinou garcia molina ullman 
mediation system declarative specifications 
available anonymous ftp db 
ord 
edu file pub pap ps 
papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
int 
conference data engineering 
zohar 
schema data translation 
sc thesis tel aviv university 
zohar 
system 
www math tau ac il 
