analysis internet content delivery systems stefan saroiu krishna gummadi richard dunn steven gribble henry levy department computer science engineering university washington gummadi gribble levy cs washington edu span years internet experienced astronomical increase specialized content delivery systems content delivery networks peer peer file sharing systems 
understanding content delivery internet requires detailed understanding systems practice 
examines content delivery point view content delivery systems web traffic akamai content delivery network kazaa gnutella peer peer file sharing traffic 
collected trace incoming outgoing network traffic university washington large university students faculty staff 
trace isolated characterized traffic belonging delivery classes 
results quantify rapidly increasing importance new content delivery systems particularly peerto peer networks characterize behavior systems perspectives clients objects servers derive implications caching systems 
things compare growth internet decade growth years 
key challenge internet infrastructure delivering increasingly complex data growing user population 
need scale led development node clusters global scale content delivery networks self managing peer peer structures 
content delivery mechanisms rapidly changing nature internet content delivery traffic understanding modern internet requires detailed understanding new mechanisms data serve 
examines content delivery focusing content delivery systems web traffic akamai content delivery network kazaa gnutella peer peer file sharing systems 
perform study traced incoming outgoing internet traffic uni versity washington large university students faculty staff 
analyze day trace saw transactions terabytes data 
data provide detailed characterization comparison content delivery systems particular latest peer peer workloads 
results quantify extent peer peer traffic overwhelmed web traffic leading consumer internet bandwidth dramatic differences characteristics objects transferred result impact way nature peer peer communication ways peer peer systems scaling despite explicitly scalable design 
example measurements show average peer kazaa peer peer network consumes times bandwidth average web client environment 
important implications large organizations service providers network infrastructure general content delivery 
organized follows 
section presents overview content delivery systems examined related 
section describes measurement methodology collect process data 
section give high level overview workload traced university washington 
section provides detailed analysis trace perspective objects clients servers focusing particular comparison peer peer web traffic 
section evaluates potential caching content delivery networks peer peer networks section concludes summarizes results 
overview content delivery systems dominant content delivery systems exist today client server oriented world wide web content delivery networks peer peer file sharing systems 
high level systems serve role distributing content users 
architectures systems differ significantly differences affect performance workloads role caching play 
section architectures systems describe previous studies behavior 
world wide web www basic architecture web simple protocol web clients running users machines request objects web servers 
previous studies examined aspects web including web workloads characterizing web objects modeling hyperlink structure web :10.1.1.12.2253
studies suggest web objects small kb distribution object sizes heavy tailed large objects exist 
web objects accessed zipf popularity distribution web servers 
number web objects enormous billions rapidly growing web objects static increasing number generated dynamically 
protocol includes provisions consistency management 
headers include caching pragmas affect object may cached long 
web caching helps alleviate load servers backbone links serve decrease object access latencies 
research focused web proxy caching coordinating state multiple cooperating proxy caches proposals aim create global caching structures 
results studies generally indicate cache hit rates achievable hit rate increases logarithmically client population constrained increasing amount dynamically generated uncacheable content 
content delivery networks cdns content delivery networks dedicated collections servers located strategically wide area internet 
content providers web sites streaming video sources contract commercial cdns host distribute content 
cdns compelling content providers responsibility hosting content offloaded cdn infrastructure 
cdn content replicated wide area highly available 
cdns servers isp points presence clients access topologically nearby replicas low latency 
largest cdns thousands servers dispersed internet capable sustaining large workloads traffic hot spots 
cdns tightly integrated existing web architecture relying dns interposition url rewriting origin servers redirect requests nearest cdn replica 
web unit transfer cdn object objects named urls 
web content providers need manage web servers clients requests redirected replicas hosted cdn 
practice cdns typically host static content images advertisements media clips content providers manage dynamic content dynamically generated web pages contain embedded objects served cdn 
previous research investigated effectiveness content delivery networks proprietary closed nature systems tends impede investigation 
studies confirm cdns reduce average download response times dns redirection techniques add noticeable overhead dns latencies 
study authors argue true benefit cdns help clients avoid worst case badly performing replicas routing clients truly optimal replica 
best knowledge study compared workloads cdns content delivery architectures 
peer peer systems peer peer file sharing systems popularity years 
system peers collaborate form distributed system purpose exchanging content 
peers connect system typically behave servers clients file peer downloads available upload peers 
participation purely voluntary study shown content serving hosts run users suffer low availability relatively low capacity network connections modem cable modems dsl routers 
users interact system ways attempt locate objects interest issuing search queries relevant objects located users issue download requests content 
web cdn systems primary mode usage systems non interactive batch style download content 
systems differ provide search capabilities clients 
systems napster large logically centralized indexes maintained single peers automatically upload lists available files central index queries answered index 
systems gnutella freenet broadcast search requests overlay network connecting peers :10.1.1.10.4919
systems including kazaa hybrid architecture peers elected supernodes order index content available peers nearby neighborhood 
systems differ downloads proceed object interest located 
systems transfer content direct connection object provider peer issued download request 
optimization systems download multiple object fragments parallel multiple replicas 
study peer peer traffic small isp highly repetitive showing great potential caching 
methodology passive network monitoring collect traces traffic flowing university washington uw rest internet 
uw connects isps border routers router handles outbound traffic inbound traffic 
routers fully connected switches campus backbones 
switch monitoring port send copies incoming outgoing packets monitoring host 
tracing infrastructure software developed wolman voelker previous studies 
added new components identify capture analyze kazaa gnutella peer peer traffic akamai cdn traffic 
tracing analysis software approximately lines code 
monitoring host dual processor dell precision workstation ghz pentium iii xeon cpus gigabit ethernet sk network card running freebsd 
software installs kernel packet filter deliver tcp packets user level process 
process reconstructs tcp flows identifies requests flows properly handling persistent connections extracts headers metadata flows 
kazaa gnutella exchange files infrastructure able capture downloads www akamai traffic 
anonymize sensitive information ip addresses urls log extracted data disk compressed binary representation 
distinguishing traffic types trace captures types traffic traffic broken www akamai kazaa gnutella transfers non tcp traffic including kazaa gnutella search traffic 
request directed port ssl classify request associated response www traffic 
similarly ports identify gnutella traffic port identify kazaa traffic 
small part captured traffic remains believe traffic attributed popular peer peer systems napster compromised hosts turned irc web servers ports 
non traffic gnutella kazaa ports identify search traffic 
www traffic served akamai content delivery network 
akamai deployed servers networks world 
identify akamai traffic traffic served akamai server 
obtain list akamai servers collected list unique authoritative name servers sent recursive dns query server name akamai managed domain 
net 
akamai redirects dns queries nearby akamai servers able collect list unique akamai servers different networks 
remainder definitions classifying traffic akamai traffic port served akamai server 
www traffic port served akamai server analysis www traffic include akamai traffic 
gnutella traffic sent ports includes file transfers excludes search control traffic 
kazaa traffic sent port includes file transfers excludes search control traffic 
union gnutella kazaa 
non tcp traffic tcp traffic including protocols nntp smtp traffic ports listed traffic systems control search traffic gnutella kazaa 
traceability traffic gnutella overlay network search requests flooded 
peers issuing search requests receive list peers matching content 
list peer issued request initiates direct connection matching peers download content 
gnutella overlay structured efficient respect physical network topology downloads initiated uw peers connect external hosts captured traces 
details kazaa architecture proprietary elements known 
kazaa network level overlay connected peers serving supernodes build indexes content stored nearby regular peers 
find content regular peers issue search requests supernodes 
supernodes appear communicate satisfy queries returning locations matching objects requesting peer 
kazaa appears direct peers nearby objects details done successful system doing known 
download object peer initiates connections peers replicas object 
downloading peer may transfer entire object connection single peer may choose download multiple fragments parallel multiple peers 
www akamai kazaa gnutella inbound outbound inbound outbound inbound outbound inbound outbound transactions unique objects clients servers bytes transferred tb tb gb tb tb gb gb median object size mb mb mb mb mean object size mb mb mb mb table 
trace summary statistics trace statistics broken content delivery system inbound refers transfers internet servers uw clients outbound refers transfers uw servers internet clients 
trace collected day period tuesday may th thursday june th 
mbps wed non tcp www thu fri sat sun mon tue non tcp www wed akamai 
tcp bandwidth total tcp bandwidth consumed transfers different content delivery systems 
band cumulative means noon wednesday akamai consumed approximately mbps www consumed approximately mbps consumed approximately mbps non tcp consumed approximately mbps total mbps 
ability kazaa peer download object fragments complicates trace 
download requests external peers seen trace fragments entire objects 
high level data characteristics section presents high level characterization trace data 
table shows summary statistics object transfers 
table separates statistics content delivery systems separates inbound data data requested uw clients outside servers outbound data data requested external clients uw servers 
despite large client population university net provider consumer data exporting tb importing tb 
peer peer systems kazaa particular account large percentage bytes exported total bytes transferred despite smaller internal external client populations 
attributable large difference average object sizes www systems 
number clients servers table shows extent participation systems 
web thu uw clients accessed internet web servers kazaa uw clients accessed external internet servers 
akamai uw clients download akamai hosted content provided different akamai servers 
reverse direction internet clients accessed uw web content clients accessed uw hosted kazaa content 
shows total tcp bandwidth consumed directions trace period 
shaded areas show traffic broken content delivery system kazaa gnutella traffic grouped label systems show typical diurnal cycle 
smallest bandwidth consumer akamai currently constitutes observed tcp traffic 
gnutella consumes www traffic largest consuming tcp traffic 
kazaa currently largest contributor consuming tcp bytes 
content delivery systems account total tcp traffic leaving tcp network protocols streaming media news mail 
tcp traffic represents network traffic uw 
closely matches published data internet usage 
mbps www bandwidth consumed uw clients gnutella akamai wed thu fri sat sun mon tue wed thu fri kazaa mbps kazaa bandwidth consumed uw servers gnutella www wed thu fri sat sun mon tue wed thu fri 
uw client server tcp bandwidth bandwidth time accountable web downloads uw clients accountable web uploads uw servers 
figures show inbound outbound data bandwidths respectively 
see www kazaa diurnal cycles cycles offset time www peaking middle day kazaa peaking late night 
uw initiated requests www kazaa peak bandwidths order magnitude requests external clients uw servers peak kazaa bandwidth dominates www factor 
note axis scales graphs different www peak bandwidth approximately directions external kazaa clients consume times bandwidth uw kazaa clients 
show top content types requested uw clients ordered bytes downloaded number downloads 
gif jpeg images account requests account bytes transferred 
hand avi mpg videos account bytes transferred constitute requests 
html significant accounting bytes requests 
bytes labelled hashed kazaa transfers identified non hashed kazaa traffic identified avi mpg account bytes bytes mp 
interesting compare figures corresponding measurements study population 
looking bytes transferred percent total traffic html traffic decreased gif jpg decreased 
time avi mpg quicktime traffic increased nearly mp traffic increased nearly 
percentages numbers include estimate appropriate portion hashed bytes contributing content types 
summary high level characterization reveals substantial changes content delivery systems usage internet seen vantage point uw 
balance traffic changed dramatically years traffic overtaking www traffic largest contributor bytes transferred 
second uw large publisher web documents content types ordered size video text plain mp app octet stream gif jpg hashed mpg html avi bytes content types ordered number downloads xml text css app compress text plain javascript app octet stream jpg html type gif responses 
content types downloaded uw clients histogram top content types downloaded uw clients systems ordered size number downloads 
traffic university larger data 
mixture object types downloaded uw clients changed video audio accounting substantially larger fraction traffic years ago despite small number requests involving data types 
detailed content delivery characteristics changes internet workload observed raise questions including properties new objects delivered clients new content delivery mechanisms servers new delivery services differ web 
attempt answer questions subsections 
objects data section suggests substantial difference typical object size www traffic 
illustrates dramatic detail 
surprisingly akamai www object sizes track fairly closely 
median www object approximately kb matches previous measurement studies 
kazaa gnutella curves strikingly different www median object size systems objects akamai object size distributions www kazaa gnutella object size kb 
object size distributions cumulative distributions cdfs object sizes 
bytes gnutella akamai top bandwidth consuming objects kazaa www number objects 
top bandwidth consuming objects cdf bytes fetched uw clients top bandwidth consuming objects 
approximately mb fold increase average web document size 
worse see kazaa objects mb 
difference potential enormous impact internet performance systems grow 
shows cumulative distribution bytes fetched uw clients highest bandwidth consuming objects cdns 
akamai curve rises steeply top objects accounting akamai bytes transferred akamai traffic clearly skewed popular documents 
kazaa see relatively small number objects account large portion transferred bytes 
top kazaa objects objects accessed responsible bytes transferred 
web curve flatter top objects account bytes transferred 
understand better examined highest bandwidth consuming objects www akamai kazaa responsible traffic system respectively 
details shown table 
www see top objects mix extremely popular small objects objects relatively unpopular large objects object 
worst object small object accessed times 
akamai top bytes text images audio video byte breakdown content delivery system www akamai gnutella kazaa 
downloaded bytes object type number bytes downloaded system broken content type 
objects large unpopular top worst offenders small popular 
kazaa inbound traffic hand completely consistent worst offenders extremely large objects order mb accessed times 
comparing kazaa inbound outbound traffic table shows differences 
objects contribute bandwidth consumption direction similarly sized uw tends export large objects imports 
small number uw clients access large objects small number external servers nearly times external clients access objects handful uw servers leading approximately times bandwidth consumption 
suggests reverse cache absorbs outbound traffic benefit university forward cache absorbs inbound traffic 
previous section showed breakdown traffic content type uw client initiated traffic 
shows similar breakdown bytes individual cdn 
surprisingly highest component www traffic text followed closely images akamai dominated images bytes gif jpeg 
contrast kazaa completely dominated video followed audio gnutella evenly split video audio 
clients previous subsection considered characteristics transferred object view consider responsible client view 
www akamai indistinguishable uw client perspective section presents workloads combined 
shows cumulative distribution bytes downloaded top bandwidth consuming uw clients cdn 
surprising www akamai curve lower graph shows small fraction www akamai clients nearly quarter kazaa clients 
cases small number clients account large portion traffic 
case www top clients object size mb www inbound akamai kazaa inbound kazaa outbound gb consumed requests object size mb gb consumed requests object size mb gb consumed clients servers object size mb gb consumed clients servers table 
top bandwidth consuming objects size bytes consumed number requests including partial unsuccessful ones top bandwidth consuming objects system 
kazaa requests show number clients servers participated possibly partial transfers object 
bytes gnutella top bandwidth consuming uw clients fraction system kazaa www akamai number uw clients bytes top bandwidth consuming uw clients fraction total gnutella kazaa www akamai number uw clients 
top uw bandwidth consuming clients cdf bytes downloaded top bandwidth consuming uw clients fraction system fraction total traffic 
population account www traffic kazaa top clients population account kazaa traffic 
kazaa clients account traffic 
clearly small number kazaa clients huge bandwidth impact 
see impact globally curves show fraction total bytes downloaded bandwidth consuming clients cdn curves cumulative 
allows quantify impact particular cdn clients total traffic 
gnutella clients impact consumers bandwidth 
contrast kazaa users worst offenders top kazaa clients responsible total bytes downloaded 
comparison top www akamai clients responsible total bytes 
top kazaa www clients responsible total traffic respectively 
bandwidth consumed web peer topeer delivery systems interesting examine request rates creating bandwidth 
figures show inbound outbound request rates www akamai kazaa respectively notice nearly order magnitude difference axis scales 
kazaa outbound request rate peaks requests second dominating inbound request rate requests second 
contrast www akamai inbound request rate peaks requests second dominating www outbound request rate just requests second 
high level kazaa request rate orders magnitude lower web median object size orders magnitude higher web 
result kazaa consumes bandwidth 
similarly www outbound bandwidth exceeds inbound bandwidth despite opposite trend request rate results difference transfer size directions 
inbound web documents largely html images outbound dominated application octet streams possibly uw supplied software binary data video streams tv station web broadcast technical talks 
surprising understandable result disparity www akamai kazaa object sizes request rates shown graphs number concurrent transactions active time systems 
despite order magnitude akamai data outbound direction 
concurrent flows www requests second www akamai request rates inbound outbound wed thu fri sat sun mon tue wed thu fri kazaa requests second inbound kazaa request rates outbound wed thu fri sat sun mon tue wed thu fri 
request rates time inbound outbound transaction rates www akamai kazaa 
concurrent transactions www akamai kazaa wed thu fri sat sun mon tue wed thu fri 
concurrent transactions concurrent transactions uw clients 
request rate advantage www kazaa number simultaneous open kazaa connections twice number simultaneous open www akamai connections 
kazaa generates requests second responsible open requests time due long transfers 
compared web requests median duration ms median duration kazaa requests seconds fold increase tracks object size 
fact important implications network infrastructure maintain connections 
servers section examines servers suppliers objects bytes 
shows cdf bytes transferred uw internal servers external clients 
gnutella smallest number content serving hosts bytes served servers 
www curve quite steep case campus major servers provide documents web www traffic supplied internal servers identified 
kazaa curve rises slowly kazaa bytes served top kazaa peers serving data 
expect kazaa curve flatter explicit goal peerto peer structures kazaa spread load uniformly peers 
ll look issue detail external kazaa servers 
shows fraction total bytes transferred cumulative top uw servers cdns 
global impact small number internal kazaa peers clearly seen graph 
small number www servers www small part total outgoing traffic www servers provide bytes output curve rises slowly 
kazaa curve see kazaa peers responsible bytes transferred top kazaa peers creating outgoing traffic 
opposite direction uw external servers figures show cumulative fractional distributions incoming bytes transferred respectively top external servers uw clients 
cumulative distribution shows www kazaa curves rising slowly 
www curve rises steeply popular servers levels external servers supplying total www bytes uw clients closely matches previous findings 
kazaa curve shows external kazaa peers supply kazaa bytes internal peers result somewhat unexpected 
web clients request data specific servers specifying url 
small number web servers highly popular popularity curve large tail zipf unpopular servers 
peer peer systems different design 
clients request documents name server 
documents may hopefully exist peers 
goal peer peer overlay structure broadly distribute scalability availability 
kazaa large files downloaded transferring different fragments file different peers spread load multiple peers 
expect server load kazaa widely distributed peers www 
appear case 
fraction total bytes received uw bytes www top bandwidth consuming uw servers fraction system gnutella kazaa number uw servers bytes top bandwidth consuming uw servers fraction total kazaa gnutella www number uw servers 
top uw internal bandwidth producing servers cdf bytes produced top bandwidth producing servers fraction system fraction total traffic 
bytes akamai top bandwidth consuming external servers fraction system gnutella www kazaa number external servers bytes top bandwidth consuming external servers fraction total akamai www kazaa gnutella number external servers 
top uw external bandwidth producing servers cdf bytes produced top bandwidth producing servers fraction system fraction total traffic 
clients shows top external kazaa peers supply bytes uw top www servers supply bytes 
gnutella akamai serve insignificant percentage bytes delivered 
participation system voluntary result servers system provisioned web cdn 
show response codes returned external servers content delivery system 
shows akamai www approximately requests result successful transaction 
systems requests result successful transaction 
requests met service unavailable response suggesting servers saturated 
shows nearly bytes transferred www akamai systems useful content 
requests rejected overhead rejected requests small compared amount useful data transferred downloading content 
scalability peer peer systems data raises serious questions systems kazaa scale environments university 
web clients servers separate entities peer system consumes bandwidth directions 
new client added immediate server entire structure 
addition see average kazaa object huge small number peers consume enormous amount total network bandwidth directions 
period trace average web client consumed mb bandwidth contrast average kazaa peer consumed gb bandwidth 
bandwidth cost kazaa peer approximately times web client 
implies environment adding kazaa peers equivalent doubling entire campus web client population 
questionable organization providing bandwidth large client population long run support service characteristics 
summary section examined workload respect objects clients servers 
data find important observations responses fraction requests server status codes akamai www kazaa gnutella error xx success xx bytes fraction bytes server status codes akamai www kazaa gnutella 
server status codes response codes returned external servers shows fraction requests broken response code shows fraction bytes broken response code 

peer peer traffic accounts quarters traffic environment characterized objects median sizes orders magnitude larger web objects 
object size widespread usage accounts large fraction bytes transferred due traffic 

small number users consuming disproportionately high fraction bandwidth 
top kazaa clients responsible kazaa bytes downloaded nearly bytes received uw 

request rate quite low transfers long orders magnitude longer www transfers resulting simultaneous connections 
despite order magnitude difference www request rates number simultaneous open connections twice number simultaneous open www connections 

design overlay structures focuses spreading workload scalability measurements show small number servers majority burden 
measurements uw external kazaa peers saw provided bytes received uw clients 
results implications web scalability peer peer systems potentials caching environment 
focus issue section 
potential role caching cdns systems caching web understood caches shown absorb bandwidth reduce access latency 
section explore caching context akamai cdn kazaa object hit rate cache object hit rate vs population population akamai ideal akamai practical www ideal www practical 
www akamai object hit rates vs population object hit rates function population size 
ideal cache treats documents cacheable 
practical cache accounts caching directives 
simulations infinite capacity proxy cache 
systems 
akamai ask performance advantage akamai cdn relative local proxy cache kazaa initial study effectiveness caching environment 
cdn caching content delivery networks akamai provide number benefits user performance including load balancing data availability reduction server load 
interesting question provide performance advantage relative local proxy cache environment 
answer question simulated behavior uw local proxy cache traced www akamai workloads 
shows performance infinite capacity proxy cache transactions trace sent akamai www servers 
systems simulated ideal hit rate assuming documents cacheable hit rate practical cache 
practical cache accounts cache control headers cookies object names suffixes naming dynamic objects cache pragmas uncacheable methods response codes 
www ideal practical object hit rate curves look similar ones study byte hit rate ideal byte hit rate inbound kazaa traffic wed thu fri sat sun mon tue wed thu fri byte hit rate ideal byte hit rate outbound kazaa traffic wed thu fri sat sun mon tue wed thu fri 
ideal kazaa cache byte hit rate cache byte hit rate time inbound traffic requests uw clients outbound traffic requests external clients 
population 
contrast akamai requests achieve ideal hit rate practical hit rate noticeably higher www requests respectively 
analysis shows akamai requests skewed popular documents www requests heavy tailed zipf parameter vs www 
ideal hit rate akamai traffic extremely high 
akamai objects marked uncacheable reflected low hit rate cache respecting caching directives know bytes fetched akamai images videos implies akamai content fact static cached 
analysis indicates local web proxy cache achieve nearly hit rate akamai replica presumably hit rate considering particular misses proxy primarily cold cache effects 
expect proxy caches significantly reduce need separate content delivery network respect local performance assuming immutable objects marked cacheable long time live values ttls 
caching traffic volume observed potential impact caching systems may exceed benefits seen web 
section initial exploration caching 
goal solve identify complexities caching full caching study outside scope gain insight important role caching may play 
explore question built ideal infinite capacity expiration cache simulator kazaa traffic 
average object orders magnitude larger average web object evaluate benefits cache respect byte hit rate object hit rate 
kazaa peers transfer partial fragments entire objects cache stores items granularity kb blocks 
kazaa transfer identified cached complete kb aligned blocks 
requests object may partially satisfied cached blocks 
single kazaa transfer may involve multiple cache block hits misses 
figures show byte hit rate time inbound outbound kazaa traffic respectively 
outbound hit rate increases cache stabilizing approximately 
remarkably high hit rate double reported web traffic 
reverse cache deployed university isp result peak bandwidth savings megabits second 
inbound hit rate grows slowly time reaching trace 
clear simulated inbound cache fully days worth traffic 
accordingly comment outbound traffic remainder section 
investigated source high outbound hit rate examining top bandwidth consuming objects 
objects average size mb total size gb 
requests objects consumed approximately tb traffic trace total bytes consumed kazaa outbound traffic 
conservative estimate suggests cache serving objects see byte hit rate entire trace 
small number large objects largest contributors outbound cache byte hit rate 
show cache byte hit rate function population size outbound traffic 
population clients sees hit rate hit rate climbs slowly population clients sees hit rate 
indicates cache effective small population effective large populations 
currently organizations filtering traffic control bandwidth consumption 
preliminary investigation section believe caching large effect wide scale byte hit rate kazaa cache byte hit rate vs population population 
kazaa cache byte hit rate vs population byte hit rate function population size outbound traffic 
system potentially reducing wide area bandwidth demands dramatically 
examined internet content delivery systems perspective traffic flowing university washington 
gathered trace incoming outgoing traffic period days separating traffic components due standard web traffic akamai supplied content gnutella file transfers kazaa file transfers 
results confirm dramatic shift internet traffic usage occurred years 
specifically environment peer peer traffic accounts majority bytes transferred exceeding traffic due www accesses nearly factor 
fraction tcp traffic kazaa accounts bytes transferred compared web documents 
documents orders magnitude larger web objects leading fold increase transfer time 
result number concurrent flows university approximately twice number flows web population despite extremely low request rate small population systems 
small number extremely large objects account enormous fraction observed traffic 
kazaa transfers university top objects total size gb responsible tb traffic half total outbound kazaa bandwidth 
small number clients servers responsible majority traffic saw systems 
top uw kazaa clients accounted downloaded kazaa bytes 
surprisingly uw external peers servers provided bytes transferred university 
client creates significant bandwidth load directions uploads exceeding downloads kazaa users 
kazaa peers provided tb data external peers requesting tb data peers 
bandwidth requirement single kazaa peer fold single web client 
points indicate despite design bandwidth demands peer peer systems kazaa prevent scaling university environments 
initial analysis shows organizational proxy cache potential significantly reduce bandwidth requirements 
intend examine caching depth 
brian helped immensely traces reality 
david richardson art dong members computing communications organization uw support 
grateful guidance david culler shepherd anonymous reviewers 
alec wolman geoffrey voelker help tracing infrastructure 
research supported part nsf ccr itr iis 
akamai 
www akamai com 
almeida almeida yates 
measuring behavior world wide web server 
technical report boston university oct 
breslau cao fan phillips shenker 
web caching zipf distributions evidence implications 
proc 
ieee infocom march 
caceres douglis feldmann glass rabinovich 
web proxy caching devil details 
workshop internet server performance june 
cao zhang beach 
active cache caching dynamic contents web 
proc 
ifip int 
conf 
distributed systems platforms open distributed processing sep 
chakrabarti dom kumar raghavan rajagopalan tomkins gibson kleinberg 
mining web link structure 
computer 
chankhunthod danzig neerdaels schwartz worrell 
hierarchical internet object cache 
proc 
usenix annual technical conf jan 
wolman voelker levy 
measurement analysis streaming media workload 
proc 
usenix symp 
internet technologies systems march 
clarke sandberg wiley hong :10.1.1.10.4919
freenet distributed anonymous information storage retrieval system 
proc 
icsi workshop design issues anonymity unobservability 
clip 
gnutella protocol specification march 
www clip com pdf 
douglis feldmann krishnamurthy mogul 
rate change metrics live study world wide web 
proc 
usenix symp 
internet technologies systems dec 
feeley 
measured access characteristics world wide web client proxy caches 
proc 
st usenix symp 
internet technologies systems dec 
fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol 
proc 
acm sigcomm aug 
gadde chase rabinovich 
web caching content distribution view interior 
proc 
th international web caching content delivery workshop may 
gribble brewer 
system design issues internet middleware services deductions large client trace 
proc 
usenix symp 
internet technologies systems dec 
internet engineering task force 
hypertext transfer protocol 
rfc march 
internet 
netflow internet edu weekly 
johnson carr day frans kaashoek 
measured performance content distribution networks 
computer communications 
ross roberts 
performance evaluation redirection schemes content distribution networks 
computer communications 
kazaa 
www kazaa com 
kleinberg kumar raghavan rajagopalan tomkins 
web graph measurements models methods 
asano imai lee nakano editors proc 
th annual int 
conf 
computing combinatorics number 
springer verlag 
voelker 
medusa proxy tool exploring user perceived web performance 
proc 
sixth int 
workshop web caching content distribution june 
krishnamurthy wills zhang 
performance content distribution networks 
proc 
sigcomm nov 
bergman ben shaul shavit 
file swapping networks cacheable 
characterizing traffic 
proc 
th int 
www caching workshop august 
maggs 
global internet content delivery 
talk delivered internet distributed systems seminar stanford university 
www stanford edu class cs abstracts shtml bruce 
mccanne jacobson 
bsd packet filter new architecture user level packet capture 
proc 
usenix technical conf winter 

banatre 
new protocol efficient transversal web caching 
proc 
th int 
symp 
distributed computing sep 
napster 
www napster com 
padmanabhan qiu 
content access dynamics busy web site findings implications 
proc 
acm sigcomm august 
rabinovich chase gadde 
hits created equal cooperative proxy caching wide area network 
proc 
rd int 
www caching workshop june 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proc 
multimedia computing networking jan 
shaikh tewari agrawal 
effectiveness dns server selection 
proc 
ieee infocom anchorage ak usa 
tewari dahlin vin kay 
design considerations distributed caching internet 
th ieee int 
conf 
distributed computing systems may 
wessels claffy 
braun 
nlanr prototype web caching system 
ircache nlanr net 
wolman voelker sharma cardwell brown karlin levy 
analysis web object sharing caching 
proc 
nd usenix conf 
internet technologies systems oct 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
proc 
th acm symp 
operating systems principles dec 
yang garcia molina 
efficient search peer topeer networks 
proc 
nd int 
conf 
distributed computing systems july 
