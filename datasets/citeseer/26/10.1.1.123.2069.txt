oil water 
high performance garbage collection java mmtk stephen blackburn department computer science australian national university canberra act australia steve blackburn cs anu edu au increasingly popular languages java require efficient garbage collection 
presents design implementation evaluation mmtk memory management toolkit java 
mmtk efficient composable extensible portable framework building garbage collectors 
mmtk uses design patterns compiler cooperation combine modularity efficiency 
resulting system robust easier maintain fewer defects monolithic collectors 
experimental comparisons monolithic java implementations reveal mmtk significant performance advantages 
performance critical system software typically uses monolithic expense flexibility 
results refute common wisdom approach attains efficiency suggest performance critical software embrace modular design high level languages 
tension flexibility performance pervades systems development 
flexibility assists rapidly realizing new ideas base performance gives realizations credibility 
case study systems research context shows flexibility improve degrade performance 
programmers increasingly choosing object oriented languages automatic memory management garbage collection software engineering benefits 
researchers studied garbage collection long time reliance growing locality effects garbage collection research high priority academia industry :10.1.1.10.2911
collector implementations monolithic share reused components 
performance comparisons range approaches problematic rare 
supported nsf itr ccr nsf ccr nsf eia darpa ibm 
opinions findings recommendations expressed material authors necessarily reflect sponsors 
perry cheng ibm watson research center box yorktown heights ny usa ibm com kathryn mckinley department computer sciences university texas austin austin tx usa mckinley cs utexas edu presents design implementation evaluation mmtk memory management toolkit java java 
mmtk supports wide range collectors copying mark sweep counting copying generational hybrid generational new ones :10.1.1.10.2911
show mmtk combines software engineering design excellent performance comparing mmtk code execution times jikes rvm java java virtual machine monolithic java collector implementations 
mmtk succinct higher performing 
benefit software engineering substantially robust system months mmtk stable exhibited lower defect rate year old monolithic counterparts 
mmtk addresses tension flexibility performance combination design features java systems language chosen design patterns clean interface virtual machine mmtk composition policies mechanisms define collectors 
correctness extend java type system implement memory addresses operations 
design patterns efficiently implement succinct composition policies correctness face concurrency 
mmtk includes narrow portable interface runtime memory manager abstracts vm specific object program representations 
comparing mmtk original highly tuned monolithic collectors jikes rvm reveals trade flexibility performance 
source code metrics show mmtk substantially simpler modular design originals implements wider range number collectors 
spec benchmarks mmtk improves total performance average monolithic collectors due dynamic heap partitioning 
micro benchmarks mmtk performs worse allocation tracing speed 
results demonstrate total perfomance better optimized modular components theory com mmtk publicly available part jikes rvm www ibm com developerworks oss jikesrvm 
ponent faster monolithic system 
implementation micro benchmark gnu allocator improves mmtk java comparison jikes rvm applies aggressive compiler inlining reduced impedance java java implementation enables mmtk outperforms allocator 
results suggest slightly augmented java competitive systems language 
background section outlines key mechanisms policies readers unfamiliar garbage collection 
section compares mmtk explicit automatic memory management toolkits combine diversity implementation performance mmtk :10.1.1.10.2911
section discusses mmtk design followed results 
key contribution describe clean flexible design implementation performance critical component memory manager java practices software engineering 
surprising result design approach attains performance benefits 
background section describes memory management terms algorithms mmtk organizes heap implement 
thorough treatment see jones lins 
literature execution time consists mutator program periodic garbage collection 
memory management activities object allocation mixed mutator 
collection run concurrently mutation simplicity discussion assumes separate collection phase 
mmtk groups regions memory spaces implements garbage collection algorithms policy couples space allocation collection mechanism 
heap collectors policy objects 
generational collectors divide heap age cohorts policies 
generational incremental algorithms write barrier remembers pointers independently collected spaces 
pointer store compiler inserts write barrier code 
execution time write barrier conditionally records pointers independently collected spaces 
mmtk implements standard allocation collection mechanisms 
bump pointer allocator appends new objects contiguous space incrementing bump pointer size new object 
free list allocator organizes memory free list divides memory blocks size new objects allocated free cell block size just accommodate object 
tracing collector identifies live objects computing transitive closure roots include stacks registers remembered pointers 
reclaims space copying live data space freeing untraced objects 
counting collector counts number incoming object reclaims objects 
mmtk forms policies mechanisms 
copy space bump pointer allocation tracing collection copies live objects space 
marksweep space free list allocation tracing collection returns dead objects free list 
refcount space free list allocation counting collection returns dead objects free list 
immortal space bump pointer allocation collection 
large object space coarse grained free list pages treadmill collection 
policies combine form collectors 
semispace semispace uses copy spaces 
allocates 
full copies live objects swaps 
marksweep marksweep uses mark sweep space 
traces marks live objects lazily finds free slots allocation 
refcount deferred counting collector uses free list allocator 
mutation buffers counts 
collector periodically processes counts introduces temporary increments deferred objects roots deletes objects zero count 
gencopy classic copying generational collector allocates young nursery copy space promotes survivors old semispace 
write barrier records pointers old nursery objects 
collects nursery full reduces nursery size size survivors 
old space full collects entire heap 
genms hybrid generational collector gen copy uses marksweep old space 
genrc hybrid generational collector uses counting combine copying nursery refcount mature space 
related section compares mmtk previous garbage collection toolkits explicit memory management toolkits :10.1.1.10.2911
umass language independent gc toolkit garbage collection toolkit tease apart language collector interface order build portable garbage collectors 
systems smalltalk modula cecil java umass gc toolkit 
provides generational copying collectors manages memory fixed size blocks 
manages large object directly list associated generation 
include free lists support mark sweep counting collectors 
design general include copying collectors older beltway 
general garbage collection toolkit java addressed shortcomings 
knowledge garbage collection toolkit implemented java 
framework provides single shared implementation key functions scanning remembered sets record write barrier entries 
implements copying age collectors separating collection increment heap position include free list allocation mix match policies intended portable 
mmtk overcomes limitations 
mmtk uses composable design mix match policies mechanisms 
free list memory managers large object space composition disparate policies supports 
creates portable language compiler interface researchers porting rotor runtime open vm java runtime haskell runtime 
marmot system ahead time compiler runtime system java written provides semispace copying generational collectors 
produces efficient allocation write barrier sequences compiler cooperative inlining 
mmtk generalizes pattern applies broadly 
mmtk includes wider range collectors policies marmot modular extensible works just time time settings 
researchers built memory management toolkits explicit memory management programs 
heap layers general high performance frameworks 
provides multiple composable heaps 
achieves performance existing custom general purpose allocators flexible reusable framework 
attains combination mixins 
framework probably benefit mixins statically express multiple possible class hierarchies investigated 
explicit memory managers narrow interface interacts program malloc free 
mmtk complex interface interacts managed runtime system mechanisms including scheduling write barriers object models root identification 
limit memory management policies free lists objects move 
customizable memory management cmm framework focuses automatically collecting heaps uses virtual method calls ing performance 
frameworks need general mmtk 
yeates analyzed tracing collectors identified design patterns new domain specific patterns 
include counting collector toolkits multiple instances pattern occur 
design mmtk highest level design goals flexibility performance 
flexibility assists rapidly realizing new research ideas performance gives realizations credibility 
common wisdom holds goals incompatible 
result prior memory management systems focus high performance monolithic inflexible assembly implementations curtail creative research 
entire design process subsequent evolution mmtk focused goals 
thin abstractions target optimizations carefully avoid making prematurely hold preexisting highly tuned monolithic implementations benchmark performance 
remainder section discusses design mmtk reaches goals java systems implementation language 
begins issues java java implementations extensions java type system compiler pragmas problem collector executing heap collecting 
describe design patterns attain correctness performance portable interface mmtk virtual machine 
section outlines mmtk reusable memory management mechanisms policies compose yield new systems 
measure reuse components compare mmtk collectors original monolithic implementations 
results demonstrate benefits modularity aggressive software reuse 
java systems language mmtk grew jikes rvm jikes rvm implemented java 
implementing language runtime presents known problems 
address key issues extensions manipulating memory directly exploiting vm compiler pragmas safely implementing collector executes heap collects eating dog food 
new types unsafe operations mmtk uses modest extension java defined developed jikes rvm 
order access modify memory require unsafe operations 
mmtk requires vm defines special types vm address vm offset vm word 
vm address corresponds hardware specific notion memory address 
vm offset expresses distance addresses word corresponds value returned dereferencing address 
unboxed types operations result allocation provide methods pointer arithmetic pointer comparison casts memory reads writes including atomic operations 
memory manager implements lowest level operations allocation 
source code transformation ports idioms gcc java front targets ovm rotor 
compiler pragmas jikes rvm pragmas controlling inlining 
jikes rvm pragmas scoped classes methods implements throws idioms suitably named interfaces exceptions 
example method qualifier throws directs compiler inline method 
inlining scoped respect individual methods 
specific pragma scopes method override broader scopes class allowing interruptible methods exist classes 
control inlining helps improve efficiency system level code written objectoriented style see section section 
specifying program interrupted provides support exact garbage collection depends maps identify pointers stored stack 
executing heap mmtk faces problem code state reside heap collecting jikes rvm code threads stacks exist heap objects due java java implementation 
collector scavenge 
copying collectors pre copy gc related instances execute respect state order avoid referencing date snapshot collector state snapshot lead catastrophic time warp 
address issues allocating certain objects immortal space providing generic feature pre copies crucial state copying collector relieving new algorithms burden identifying acting crucial instances 
design patterns reused mmtk mmtk uses design patterns efficiency reuse 
patterns include identified prior adapter facade iterator proxy additional patterns exploiting behavior heavily executed code efficiency minimizing contention synchronization efficiency exploiting collection phases simplify correct collector construction delegating collector actions specific policies 
hot cold paths appropriate mmtk applies pattern uses efficient lightweight unsynchronized mechanisms frequently executed code hot path periodically uses heavyweight mechanisms cold path marking hot path cold path 
mmtk uses pattern extensively reduce synchronization frequency allow complex heuristics 
example copying nursery performs allocation unsynchronized bump pointer periodically kb allocator takes slow path 
slow path synchronously acquires kb chunk memory multiple threads contend pool chunks polls collection subsystem giving opportunity invoke collection necessary 
mmtk reuses pattern write barriers internal dynamic data structures queues buffers 
local global scopes correctness performance multi threaded memory manager depends scalable division local global context exposure synchronization 
mmtk scope overt classes 
example mmtk associates instance thread uses class reflect global state 
threads truly concurrent 
jikes rvm maps program memory management vm threads kernel threads reflect number physical cpus 
instance methods operate data synchronization access shared state synchronized global class methods 
model assumes single global state 
generally global instances may exist threads operate concurrently 
case mmtk provides local global variants class instances global class instances local class mapped global instance 
mmtk synchronizes accesses global state 
mmtk uses pattern build load balancing shared data structures queues sequential store buffers build multi threading mechanisms operate free lists bump pointers mark sweep collection counting functions 
prepare release phases mmtk uses simple high level algorithm implement world non concurrent collectors 
algorithm phases prepare process release 
mmtk splits phases global local steps performs order 
method common collectors consists transitively processing collection queue primed prepare phase 
new collector need implements prepare release phases 
instance simple copying collector establishes roots collection prepare phase reclaims space release phase 
local global divisions ensure correct efficient synchronization phases 
multiplexed delegation mmtk builds collectors composition policies mechanisms 
plans discussed detail section perform composition 
example memory manager allocates traces object invokes corresponding method plan delegates responsibility appropriate policy depending object 
call pattern multiplexing delegation 
pattern reused plan number different tasks object allocation object tracing testing object liveness 
shows method generational class delegates tracing range policies depending space object resides 
analyze cyclomatic complexity plans section find pattern captures plans complexity 
public static vm address vm address obj obj iszero return obj vm address addr vm interface obj byte space addr space nursery space return obj return obj switch space case los space return obj case immortal space return obj case boot space return obj case meta space return obj default return plan space obj addr 
multiplexed delegation pattern method generational collectors 
virtual machine interface mmtk goals portable interface rest virtual machine clear thin possible compromising design flexibility 
interface bidirectional vm virtual machine mm memory manager side contains requirements features 
interface class implements requirements mm terms vm feature set mm interface implements requirements vm terms mm feature set 
key requirements mm include identifying sources pointers providing access object gc state 
addition mm requires housekeeping functionality low level memory operations mmap memcpy hardware timers atomic memory operations error handling option processing 
vm interface implements requirements terms vm feature set 
garbage collection typically begins root set global variables local variables threads stacks registers 
vm enumerates roots objects mmtk queue data structures 
mmtk enumerates pointers objects performs transitive closure 
collectors maintain state object basis object header example 
vm interface provides abstractly giving portability vms languages object models 
side vm requires mm provide allocation finalization soft weak phantom write barrier implementations basic statistics heap size gc count 
mmtk provides mm interface class 
composition mechanisms policies plans heart mmtk software engineering benefits composition 
benefits include reuse quick development new collectors robustness fair comparisons algorithms holding underlying mechanisms constant opportunity performance tuning 
section shows mmtk obtains benefits excellent performance 
outline key compositional elements mmtk mechanisms policies plans 
mechanisms mmtk implements rich set collector neutral mechanisms shares collectors including bump pointer allocation free list allocation large object allocation finalization soft weak phantom parallel load balancing data structures command line parsing trial deletion cyclic garbage collection generic free list thread safe gc safe routines classes 
policies mmtk currently implements policies immortal allocation copying collection mark sweep collection counting collection treadmill collection 
policies expressed succinctly terms mechanisms 
mmtk maps policies spaces contiguous regions virtual memory managed single policy 
policy manage multiple spaces address space 
example gencopy collector copying collection policy manages multiple spaces correspond generations 
policy follows local global pattern section implemented terms space local pair policy example 
instance policy space maps single virtual memory space associated instances local class collector way parallel 
key spatial temporal elements memory management policy overtly captured design 
plans new memory management algorithms compositions small set understood policies section 
example counting composes counting copying collection 
plan mmtk highest level composition defining rules policies composed 
key set policies plan allocation policy object collection policy object 
plan policies manifest space declared plan binds space region virtual memory 
virtual physical memory resources associated spaces multiplex pattern section ensures allocation tracing appropriate policy depending space 
mmtk implements growing number plans include semispace marksweep refcount gen copy genms genrc implements published counting collector 
researchers currently adding published collectors beltway mark copy 
bc bc lcom watson semispace marksweep gencopy genms total watson semispace marksweep gencopy genms total mmtk semispace marksweep gencopy genms generational total table 
methods non comment source statements bytecodes bc total cyclomatic complexity lack cohesion methods lcom garbage collectors systems illustrates composition mechanism discussed section uml class diagram multiplicity association information 
bold box thread instance memory related requests serviced 
central spine shows inheritance relationship plans clusters instances side represent different memory regions 
example cluster emanating corresponds immortal memory region holds objects immortal lifetime marksweep cluster coming plan distinguishing feature genms collector 
cluster see hot cold pattern illustrated annotated paths local global pattern shown multiplicity annotation 
way multiplexing composition handled plan hierarchy 
exploiting java features mmtk section evaluates mmtk attains software engineering goals reuse inheritance 
table compares implementation classic copying generational collector gencopy hybrid copying mark sweep generational collector genms mmtk written java object oriented style releases watson collectors written java monolithic style 
watson public release watson collectors jikes rvm watson reflected major clean refactoring public release 
table reports number methods lines code number bytecodes total cyclomatic complexity lcom lack cohesion methods systems 
mmtk uses common superclass generational implement functionality generational collectors 
command line parameters select multiple nursery sizing polices fixed bounded flexible collectors 
watson collectors implement fixed nursery policy watson code base included distinct collector lines code implemented variable nursery generational collector 
addition enormous reduction complexity object oriented style mmtk attains average method cyclomatic complexity substantially lower watson implementations 
cyclomatic complexity measures complexity branching looping 
approach reflects faith capacity jikes rvm aggressive optimizing compiler produce high quality code strongly objected oriented source 
methodology section briefly describes jikes rvm experimental platform key characteristics benchmarks 
mmtk jikes rvm version known jalape 
jikes rvm high performance vm written java aggressive optimizing compiler 
cold path resource exhausted 
virtual range allocation gc hot path generational virtual range allocation hot path virtual range allocation gc hot path configurations possible including key libraries optimizing compiler fast build time configuration turn assertion checking 
micro benchmarks highest level optimization run benchmark multiple times exclude compiler activity 
experiments adaptive compiler samples select hot methods optimizes 
adaptive compilation introduces variations load garbage collector program behavior due statistical choices 
different collectors compound variation adaptive compilation different write barriers part runtime system program 
perform experiments ghz intel xeon byte cache line size kb way set associative data cache instruction trace cache kb unified way set associative chip cache gb main memory running linux 
run benchmark particular parameter setting times fastest 
variation runs low believe number disturbed system factors adaptive compiler variability 
table shows benchmarks characteristics fast adaptive compilation spec jvm benchmarks pseudojbb variant spec jbb executes fixed number transactions hold constant garbage collection load 
alloc column indicates total number megabytes allocated 
second column lists ratio total allocation minimum heap size genms collector mmtk quantify garbage collection load 
watson collector users statically partition heap parts immortal large small objects see section additional discussion 
experiments watson collectors mb immortal space 
determined experimentally minimum size small resource exhausted 
virtual range allocation hot path resource exhausted 

composition genms 
cold path cold path resource exhausted 
watson alloc mb alloc min small large jess javac jack raytrace mtrt compress pseudojbb db mpegaudio table 
benchmark characteristics large object spaces show ratio third column 
configure watson collectors allocate mb immortal space remaining space small large spaces ratio column heap size 
results compare mmtk semispace marksweep original highly tuned jikes rvm watson collectors micro benchmarks larger benchmarks 
mmtk abstractions cost compared watson collectors raw speed mechanisms 
compare mmtk java micro benchmark standard malloc implementation micro benchmark written reveal java suitable systems language 
mmtk attains better performance due jikes rvm compiler inlining java java feature advantage performs mmtk 
standard benchmarks mmtk attains significantly better total performance watson collectors largely collectors reuse dynamic heap partitioning algorithm watson collectors static partitioning 
broadly mmtk performance advantage direct result component design reuses collectors coupled fast fastest mecha cold path allocation tracing rate mb rate mb watson semispace mmtk semispace watson marksweep mmtk marksweep table 
allocation tracing rates inlining inlining mmtk semispace mmtk marksweep malloc calloc table 
allocation rates mmtk nisms 
building identical faster monolithic collector certainly possible mmtk high performance implementations 
raw speed comparisons measure throughput raw speed allocation tracing reveal runtime cost abstractions 
java micro benchmark constructs binary tree nodes fields children data fields 
compute allocation rate allocating mb unconnected binary nodes tracing rate tracing mb balanced binary tree 
table compares watson mmtk semispace marksweep collectors 
mmtk collectors slower allocation speed semispace marksweep respectively 
tracing rates slowdown allocation difference semispace comes directly reuse abstraction semispace allocation code contains extra load instruction retrieve bump pointer object corresponding fields watson collectors manually inserted unrelated class optimization 
serious discrepancy marksweep tracing rate comes algorithmic differences mmtk watson discussed 
compare mmtk java micro benchmark gnu library malloc ptmalloc version version lea allocator single threaded mode version microbenchmark 
version malloc uses function call comparison inlining mmtk 
flip side java returns zeroed memory calloc malloc 
table shows inlining gives significant advantage zeroing memory significant cost 
closest comparison mmtk marksweep versus calloc shows slight advantage 
mmtk versus watson collectors compares mmtk watson benchmarks table geometric mean garbage collec normalized mutator time normalized time normalized gc time heap size mb watson semispace semispace watson marksweep marksweep heap size relative minimum heap size gc time heap size mb watson semispace semispace watson marksweep marksweep heap size relative minimum heap size mutator time heap size mb watson semispace semispace watson marksweep marksweep heap size relative minimum heap size total time 
mmtk versus watson tion mutator total time 
mutator time includes allocation adaptive compilation application time 
results vary heap size minimum collector executes times minimum different points normalize best result 
mmtk watson collectors similar spirit key differences 
mmtk stores collector meta data heap watson collectors enjoying small space advantage 
families directly manage objects larger kb large object space los trace los collection 
watson los fit algorithm page alignment 
gc time sec mutator time sec time sec maintain free list 
satisfy request sequentially scans los memory finds sufficient contiguous free pages 
mmtk uses free list 
watson collectors statically divide heap areas small large immortal objects command line parameters 
experimentally determined smallest parameter small large immortal spaces 
ratio large small constant immortal setting give watson collectors best possible command line parameters heap size 
mmtk command line parameter sets total heap size mmtk dynamically checks sum spaces exceed specified heap size 
mmtk enjoys space advantage periods program maximum large immortal space 
advantage accounts differences garbage collection times semispace marksweep collectors 
mmtk semispace runs smaller heaps watson semispace reason 
result reflected collection time fraction total time 
course watson collectors implement dynamic heap partitioning mmtk modular design provides feature collector additional implementation effort 
mmtk watson semispace close algorithmically shows performance advantage mutator time mmtk 
advantage mmtk semispace strongly correlated smaller heap sizes suggests collection induced locality cause collection occurs frequently smaller heap sizes compacting space improving locality 
watson uses standard breadth copying order experiments show results confirm superiority depth ordering mmtk 
algorithmically marksweep collector similar watson uses different size classes 
uses powers additional ones 
results worst case internal fragmentation 
objects small worst case 
size classes obtain perfect fit objects bytes worst case fragmentation 
watson marksweep word header enjoys runtime advantage average benchmarks word header mmtk 
plan implement optimization 
variety implementation presents total execution time application jess collectors currently available mmtk leaves detailed performance analysis comparisons 
shows marksweep semispace classic generational gencopy genms counting refcount generational counting genrc collectors 
generational collectors uniformly enjoy performance advantage full heap collectors 
normalized time heap size mb semispace marksweep refcount gencopy genms genrc heap size relative minimum heap size 
mmtk collectors jess mmtk case study mixing performance flexibility systems research critical 
renewed interest garbage collection highlights need memory management toolkit ideas rapidly realized compared sacrificing performance 
factors point mmtk flexibility wide range collector implementations new collector implementations code metrics demonstrate simple modular design 
careful cooperation aggressive optimizing compiler couples design high performance 
micro benchmarks mmtk slower monolithic java implementation faster standard non inlined calloc mmtk consistently improves total performance real benchmarks monolithic implementations clean design results better memory management algorithms mechanisms broad application 
furthermore cleaner design yields substantially robust system easier maintain fewer defects 
success refutes common wisdom performance critical software java suggests approach widely embraced 
ongoing mmtk fully evaluate portability 
addition preliminary evidence shows scalability parallel collection mmtk noticeably worse watson collectors 
mmtk relatively immature tuning including addition object models needed 
alpern jalape virtual machine 
ibm systems journal february 
appel 
simple generational garbage collection fast allocation 
software practice experience 
time sec arnold fink grove hind sweeney 
adaptive optimization jalape jvm 
acm conference object oriented programming systems languages applications pages minneapolis mn october 
attanasio bacon cocchi smith 
comparative evaluation parallel garbage collectors 
languages compilers parallel computing lecture notes computer science 
springer verlag 
attardi 
customizable memory management framework 
proceedings usenix conference cambridge massachussetts 
attardi 
customizable memory management framework 
software practice experience 
petrank 
integrating generations advanced counting garbage collectors 
international conference compiler construction warsaw poland apr 
bacon attanasio lee rajan smith 
java coffee breaks nonintrusive multiprocessor garbage collector 
acm sigplan conference programming languages design implementation pages snowbird ut june 
bacon cheng rajan 
real time garbage collector low overhead consistent utilization 
acm symposium principles programming languages pages new orleans la jan 
bacon rajan 
concurrent cycle collection counted systems 
knudsen editor proc 
th ecoop volume lecture notes computer science pages 
springer verlag 
berger zorn mckinley 
composing highperformance memory allocators 
acm sigplan conference programming languages design implementation pages salt lake city ut june 
blackburn cheng mckinley 
myths realities performance impact garbage collection 
sigmetrics ny ny june 
blackburn jones mckinley moss 
beltway getting garbage collection 
proc 
sigplan conference pldi pages berlin germany june 
blackburn mckinley 

putting write barriers place 
acm international symposium memory management pages berlin germany june 
blackburn mckinley 
counting fast garbage collection long wait 
acm conference object oriented programming systems languages applications pages anaheim ca oct 
bracha cook 
mixin inheritance 
acm proceedings european conference object oriented programming object oriented programming systems languages applications pages ottawa canada 
cheng blelloch 
parallel real time garbage collector 
acm sigplan conference programming languages design implementation pages snowbird ut june 
dean defouw grove chambers 
vortex optimizing compiler object oriented languages 
acm conference object oriented programming systems languages applications pages san jose ca oct 
deutsch bobrow 
efficient incremental automatic garbage collector 
communications acm september 
dijkstra lamport martin scholten 
fly garbage collection exercise cooperation 
communications acm september 
fitzgerald tarditi 
case profile directed selection garbage collectors 
acm international symposium memory management pages minneapolis mn oct 
henderson sellers 
object oriented metrics measures complexity 
prentice hall new jersey 
hudson moss diwan weight 
languageindependent garbage collector toolkit 
technical report tr dept computer science university massachusetts amherst sept 
ingalls maloney wallace kay 
back story squeak practical smalltalk written 
acm conference object oriented programming systems languages applications pages atlanta ga oct 
jones lins 
garbage collection algorithms automatic dynamic memory management 
wiley july 
levanoni petrank 
fly counting garbage collector java 
acm conference object oriented programming systems languages applications pages tampa fl oct 
lieberman hewitt 
real time garbage collector lifetimes objects 
communications acm 
mccabe 
complexity measure 
ieee transactions software engineering dec 
baker yamauchi vitek 
engineering customizable intermediate representation 
acm sigplan workshop interpreters virtual machines emulators san diego ca june 
moss 
mark copy fast copying gc space overhead 
acm conference object oriented programming systems languages applications pages ca oct 
hertz blackburn mckinley moss 
older garbage collection practice evaluation java virtual machine 
memory system performance pages june 
mckinley moss 
age garbage collection 
acm conference object oriented programming systems languages applications pages denver nov 
stutz shilling 
shared source cli essentials 
reilly 
ungar 
generation scavenging non disruptive high performance storage reclamation algorithm 
acm sigsoft sigplan software engineering symposium practical software development environments pages april 

vo 
general efficient memory allocator 
software practice experience 
wilson lam moher 
effective static graph reorganization improve locality garbage collected systems 
acm sigplan conference programming languages design implementation pages toronto canada june 
yeates de 
design garbage collector design patterns 
duke meyer editors proceedings fifth conference tools pacific pages melbourne 
