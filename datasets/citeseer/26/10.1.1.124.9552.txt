ieee acm transactions networking vol 
october informed content delivery adaptive overlay networks john byers jeffrey considine michael mitzenmacher member ieee rost overlay networks emerged powerful highly flexible method delivering content 
study optimize throughput large transfers richly connected adaptive overlay networks focusing potential collaborative transfers peers supplement ongoing downloads 
case erasure resilient encoding content 
digital fountain encoding approach hosts efficiently reconstruct original content size subset symbols drawn large universe encoding symbols 
approach affords reliability substantial degree application level flexibility seamlessly accommodates connection migration parallel transfers providing resilience packet loss 
sets encoding symbols acquired peers downloads may overlap substantially care taken enable collaborate effectively 
main contribution collection useful algorithmic tools efficient summarization approximate reconciliation sets symbols pairs collaborating peers keep message complexity computation minimum 
simulations experiments prototype implementation demonstrate performance benefits informed content delivery mechanisms complement existing overlay network architectures 
index terms bloom filter content delivery digital fountain erasure code min wise sketch overlay peer peer reconciliation 
consider problem distributing large new file content delivery network geographically distributed machines 
transferring file individual point point connections single source incurs performance limitations wasted bandwidth transfer rates limited characteristics paths 
problem excessive bandwidth consumption solved reliable multicast 
example elegant scalable solution digital fountain approach content encoded erasure resilient encoding transmitted clients 
addition providing resilience packet loss approach accommodates manuscript received may approved ieee acm transactions networking editor seshan 
supported part national science foundation ani ani ccr ccr ccr part alfred sloan research fellowship 
byers considine boston university boston ma usa mail byers cs bu edu cs bu edu 
mitzenmacher harvard university cambridge ma usa mail eecs harvard edu 
rost massachusetts institute technology cambridge ma usa mail csail mit edu 
digital object identifier ieee asynchronous client arrivals layered multicast employed heterogeneous client transfer rates 
unfortunately ip multicast suffers limited deployment led development system approaches wide variety related schemes relevant peer peer content delivery architectures :10.1.1.12.7544
architectures overcome deployment hurdle faced ip multicast constructing overlay topologies comprise collections unicast connections systems edge connection overlay mapped path underlying physical network ip routing 
system multicast differs ip multicast number fundamental aspects 
overlay approaches multicast tree may map multiple virtual connections network links 
second ip multicast trees overlay topologies may flexibly adapt changing network conditions 
example applications overlay networks may reroute congested unstable areas internet :10.1.1.38.9273:10.1.1.161.2760
systems explicitly required collaborate 
point crucial forms essence motivation 
systems required collaborate overlays necessarily follow operate routers simply forward packets 
argue case systems overlays opportunity improve performance provided able actively collaborate informed manner 
return second limitation mentioned transfer rate client tree topology limited available bandwidth bottleneck link path server 
contrast overlay networks overcome limitation 
systems ample bandwidth transfer rates overlay networks substantially benefit additional cross connections systems systems collaborate appropriately 
assuming pair systems received exactly content extra bandwidth fill reconcile differences received content reducing total transfer time 
approach addressing limitations illustrated content delivery scenario fig 

initial scenario depicted fig 
source nodes tree nodes represent systems downloading large file system multicast 
node working set packets subset packets received simplicity assume content encoded example 
overlay management system multicast architecture ensured best possible embedding virtual graph network graph appropriate definition best considerable room improvement 
improvement ieee acm transactions networking vol 
october fig 

possibilities content delivery 
shaded content node topology represents working set node 
connections supplement connections supplement 
source peer content entirety 
different overlapping halves full content 
content 
panel depicts portions content beneficially exchanged pairwise transfers 
initial delivery tree 
parallel downloads 
collaborative transfer 
obtained harnessing power parallel downloads establishing concurrent connections multiple servers peers complete copies file fig :10.1.1.21.9363

generally additional significant performance benefits may obtained advantage perpendicular connections nodes working sets complementary shown fig 

benefits establishing concurrent connections multiple peers demonstrated popular peer peer file sharing systems kazaa morpheus 
improvements transfer rates programs obtain provide preliminary evidence availability bandwidth opportunistic downloads collaborating peers 
discussed earlier tree directed acyclic graph topologies fig 
impede full flow content downstream receivers rate flow monotonically decreases system hop paths away source 
contrast opportunistic connections graph fig 
allow higher transfer rates simultaneously demand careful orchestration systems achieve rates 
particular pair systems peer peer relationship able determine transfer packets lie set difference working sets 
working sets limited small groups contiguous blocks sequentially indexed packets reconciliation simple block succinctly specified index size 
restricting working sets simple patterns greatly limits flexibility frequent changes arise adaptive overlay networks argue section ii 
added flexibility provided encoded content reconciliation difficult problem 
address challenge sections iii vi provide set tools estimating summarizing approximately reconciling working sets connected clients keep message complexity computation minimum 
section vii demonstrate simulations experiments prototype implementation tools coupled encoding approach form highly effective delivery method substantially reduce transfer times existing methods 
outline ongoing research directions draw sections viii ix 
ii 
content delivery overlay networks motivate approach sketching fundamental challenges addressed content delivery architec ture outlining set opportunities overlay approach affords 
argue pros cons encoded content small amount added complexity greatly improved flexibility scalability 
challenges opportunities fluid internet environment poses number challenges content delivery infrastructure cope including 
asynchrony receivers may open close connections leave rejoin infrastructure arbitrary times 
heterogeneity connections vary speed loss rates 
transience routers links systems may fail performance may fluctuate time 
scalability service scale large receiver populations large content 
example robust overlay network ability adaptively detect avoid congested temporarily unstable areas network :10.1.1.38.9273:10.1.1.161.2760
able dynamically establish paths desirable characteristics 
reactive behavior virtual topology may frequently induce nodes reconnect better suited peers 
adaptive behavior exacerbates problems enumerated 
consequence fluidity environment content disseminated nonuniformly peers 
example discrepancies working sets may arise due uncorrelated losses bandwidth differences asynchronous joins topology reconfigurations 
specifically receivers higher transfer rates receivers initiate download earlier simply content peers 
want take advantage significant opportunity overlay networks discussed ability download content multiple connections parallel 
generally wish beneficial available connection adaptive overlay including ephemeral connections may short lived may preempted performance may fluctuate time 
opportunity raises challenge delivering content useful useful connections employed parallel doing minimum setup overhead message complexity 
byers informed content delivery adaptive overlay networks limitations stateful solutions issues connection migration heterogeneity asynchrony tractable solutions problem generally require significant connection state 
retained state approaches highly unscalable 
bulky connection state significant impact performance state maintained face reconfiguration reconnection 
parallel downloading stateful approaches problematic discussed :10.1.1.21.9363
natural approach divides missing packets disjoint sets downloaded different sources 
network heterogeneity transience necessitate frequent renegotiation packets obtain source 
natural bottleneck arises need obtain packets :10.1.1.21.9363
problems alleviated encoded content describe 
argue parallel downloading unencoded content impossible example see encoding facilitates simpler effective parallel downloading 
complication framework beneficial partially downloaded content distributed unevenly participating systems considerable discrepancy working sets 
noted earlier discrepancies working sets arise naturally 
stateful approaches systems attempt download contiguous blocks unencoded packets goal systems effectively strive reduce discrepancies packets obtain 
schemes encoded content problem consideration 
benefits encoded content alternative stateful solutions digital fountain paradigm running unreliable transport protocol 
digital fountain approach originally designed point multipoint transmission large files lossy channels 
resilience packet loss achieved erasure correcting code produce unbounded stream encoding symbols derived source file 
encoding stream guarantee receiver certain able recover original source file subset distinct symbols encoding stream equal size original file 
practice strong decoding guarantee relaxed order provide efficient encoding decoding times 
current implementations capable efficiently reconstructing file having received percent number symbols original file 
digital fountain approach provides number important benefits useful variety content delivery scenarios 
continuous encoding senders complete copy file may continuously produce fresh encoding symbols 
time invariance new encoding symbols produced independently symbols produced past 
tolerance digital fountain streams useful receivers regardless times connections disconnections rates sampling stream 
additivity fountain flows generated senders different sources randomness uncorrelated parallel downloads multiple servers complete copies content require orchestration 
full benefits encoded content described apply primarily source copy entire file benefits achieved systems partial content re encoding content described section flexibility provided encoding frees receiver receiving set distinct symbols enables fully stateless connection migrations 
allows nodes overlay topology connect senders necessary obtain distinct encoding symbols provided senders possession entire file 
significant disadvantage encoded content aside small overhead associated encoding decoding operations 
scenario encoding symbols drawn large universe systems hold part content take care arrange transmission useful information 
digital fountain approach handles problem case system decoded entire content file 
happens system generate fresh encoded content 
collaborating systems portion content reconciliation methods needed avoid redundant transmissions 
iii 
reconciliation informed delivery preceding sections established expectations informed collaboration 
solutions away issues optimizing layout overlay time distributed naming indexing system supplements solutions employed address issues :10.1.1.12.7544:10.1.1.161.2760
approaches reconciliation propose local scope typically involve pair small number systems 
setting wide area content delivery pairs systems may desire transfer content informed manner 
simplicity consider pair independently point potential techniques perform complex nonlocal orchestration 
goal provide cost effective reconciliation mechanisms measuring cost computation message complexity 
subsequent sections propose approaches 
coarse grained reconciliation employs sketches peer working set 
random sampling min wise sketches coarse grained reconciliation allows quick estimates fraction symbols common working sets peers :10.1.1.121.8215
speculative transfers involve sender performing educated guesses symbols generate transfer 
number symbols common working sets increases fewer useful symbols sender generate cheaply sender strike balance increased computation probability utility 
process fine tuned results coarse grained reconciliation 
ieee acm transactions networking vol 
october fine grained reconciliation employs compact searchable working set summaries bloom filters arts introduced section vi :10.1.1.20.2080:10.1.1.20.2080
fine grained approaches resource intensive allow peer determine symbols working set peer quantifiable degree certainty 
techniques describe provide range options useful different scenarios primarily depending resources available systems correlation working sets systems requirements precision 
sketches thought system calling card provide useful high level information extremely lightweight computed efficiently incrementally updated system fit single kb packet 
generating searchable summaries requires bit effort 
computed efficiently incrementally updated require space gigabyte content typically require summary order mb size 
speculative transfers tune content sent peer peer connection information conveyed sketches 
iv 
coarse grained reconciliation start simple quick methods coarse grained reconciliation estimate resemblance working sets pairs nodes prior establishing connections 
knowledge resemblance allows receiver determine extent prospective peer offer useful content 
methods designed give accurate answers single kb packet data transferred peers 
establish framework notation 
peers working sets containing symbols encoding file 
definition containment resemblance containment quantity resemblance quantity definitions due broder applied determine similarity documents search engines :10.1.1.24.779:10.1.1.24.779
containment represents fraction elements useless known quantity close zero containment small rates useful source information point containment symmetric resemblance estimate easily calculate estimate 
suppose element working set identified integer key sending element entails sending key 
think keys unique may 
example elements determined hash function seeded key keys may generate element small probability 
may introduce small errors estimating containment generally care approximate magnitude containment significant impact 
bit keys kb packet hold roughly keys enables reasonable estimates techniques describe 
assume integer keys distributed key space uniformly random fig 

example min wise summarization estimation resemblance key universe size example permutation functions shown 
key space transformed applying pseudo random hash function 
approach consider straightforward random sampling 
simply select elements working set random replacement transport peer 
may send size working set essential 
suppose sends random sample probability element unbiased estimate containment 
random samples incrementally updated acquisition new elements reservoir sampling 
random sampling suffers drawback search element list searches implemented quickly standard data structures interpolation search take average time element require extra updating overhead 
remedy suggested sample elements keys modulo appropriately chosen yielding samples :10.1.1.24.779
specifically assume keys random 
case unbiased estimate containment computations done directly small samples full working sets 
technique generates samples variable size awkward especially size working sets varies dramatically peers 
concern random sampling methods easily allow peer check resemblance prospective peers 
example peer attempting establish connections peers helpful know resemblance working sets clever sampling technique avoids drawbacks approaches :10.1.1.24.779
approach employ calculates working set resemblance min wise sketches method depicted fig :10.1.1.121.8215:10.1.1.24.779

represent random permutation key universe set working sets containing symbols file wehave minimum byers informed content delivery adaptive overlay networks element permuting sets matches inverse element lies sets 
case random permutation element equally minimum element conclude probability note probability resemblance estimate resemblance peer computes fixed number permutations similarly peers agree permutations advance assume fixed universally offline 
estimate sends vector containing minima compares counts number positions equal divides total number permutations depicted fig 

result unbiased estimate resemblance position equal probability practice truly random permutations storage requirements impractical 
may simple permutations randomly chosen prime affecting performance significantly :10.1.1.121.8215
sending values values hashed fewer bits allowing store sketch elements packet 
introduces possibility false positives subsequently accounted estimating resemblance 
omit details lack space 
min wise sketches allow similarity comparisons sketches peers 
sketches combined natural ways 
example sketch union easily coordinate wise minimum estimating resemblance third peer working set combined working set done min wise sketches incrementally updated acquisition new content constant overhead receipt new element 
speculative reconciliation recall speculative transfers involve sender performing educated guesses symbols generate transfer 
example exchanging min wise sketches peers may know abundance useful symbols transfer know ones useful 
case peer wishes send symbols probably useful attempting minimize computation communication costs 
cases containment low speculative reconciliation trivial symbols useful containment high simple strategy inefficient 
example consider peers estimate containment 
fine grained reconciliation probability symbol sends known useless 
hand randomly chooses encoding symbols sends bitwise xor probability encoding symbols known intuition recoding 
sparse parity check codes key ingredient recoding methods sparse parity check codes 
content sent encoder sequence symbols called input symbol 
encoder produces sequence encoding symbols set input symbols 
codes encoding symbol simply bitwise xor specific subset input symbols 
decoder attempts recover original content encoding symbols 
symbol refer number input symbols produce symbol degree degree 
methods described time produce encoding symbol proportional degree encoding symbol decoding takes time proportional total degree symbols sequence 
encoding decoding times function average degree average degree constant say code sparse 
designed sparse parity check codes typically require recovery percent symbols minimum needed decoding 
decoding overhead code defined encoding symbols needed average recover original content 
small amount overhead space needed packet identify input symbols combined typically represented bit random seed 
provably degree distributions sparse parity check codes developed analyzed 
codes fixed rate meaning predetermined number encoding symbols generated typically small constant 
applications lead inefficiencies servers forced retransmit symbols :10.1.1.21.9363
similarly application fixed rates result reduced diversity working sets peers 
newer codes called codes avoid pitfall allow unbounded numbers encoding symbols generated demand 
examples codes discussion merits may 
codes strong probabilistic decoding guarantees low decoding overheads average degrees 
recoding methods describe recoding speculative reconciliation 
setting peers working sets encoding symbols 
peer may attempt send useful information peer recoding symbols 
recoding symbol simply bitwise xor set encoding symbols 
regular encoding symbol recoding symbol accompanied specification encoding symbols blended create 
regular encoding symbol recoding symbol explicitly list random seeds encoding symbols produced 
important side effect imposing fixed degree limit recoding symbols 
encoding decoding recoding symbols performed fashion analogous substitution rule 
example peer encoding symbols generate recoding symbols ieee acm transactions networking vol 
october peer receives immediately recover substituting peer recover similarly recover encoding symbols recovered normal decoding process proceeds 
normal sparse parity check codes irregular degree distributions recoding 
generate degree distribution recoding modified degree distribution generation process 
key modifications impose upper bound symbol degree generate encoding case set input symbols recovered decoder decoder need recover input symbols 
provide brief intuition methods consider probability recoding symbol immediately useful 
suppose peer knows exact value containment probability recoding symbol degree immediately yields new encoding symbol maximized target degree note recoding symbols received containment naturally increases target degree increases accordingly 
formula maximizes probability immediate benefit optimal recoding symbol degree runs large risk duplicate 
theoretical foundation design ideal degree distributions sparse parity check codes 
vi 
fine grained reconciliation shown section iv single packet allow peers estimate resemblance working sets 
difference sufficiently large allow useful exchange data peers may methods section determine exchange 
level summarization may coarse effective describe methods fine grained reconciliation overhead handful packets 
fine grained reconciliation set difference problem 
suppose peer working set peer working set sets drawn universe peer sends peer message goal peer determining elements set possible 
generally known exactly 
set difference problem widely studied communication complexity 
focus generally determining exact difference encoded content peer generally need acquire symbols difference 
example peers may symbols symbols common symbols necessary reconstruct file 
case symbols need transferred 
contributions insight approximate reconciliation set differences sufficient application 
consider performance criteria discussion approaches reconciliation 
number communication rounds 
message size number bits sent construction time construction time time compute messages construction time time produce representation reconciliation time time compute approximation message appropriate representation accuracy probability element correctly identified optimization evaluation metrics especially important reconciliation large data sets 
application sets encoding symbols gb files may sizes order millions hundreds thousands differences overlay peers 
desirable separate costs preprocessing reconciliation incurred real time 
important peer topeer setting peer reconciling multiple peers may wish amortize cost preprocessing pair wise communications 
account costs emphasize real time costs reconciliation 
note minimizing communication complexity may important long cost reconciliation messages small relative size transfer 
factors mind approximate solutions highly desirable faster compact 
best exact reconciliation protocols date terms communication complexity characteristic polynomials 
technical description scope main idea involves peer evaluating characteristic polynomial set points information compute ratio characteristic polynomials set differences 
requirement protocols upper bound number set differences determine points evaluate 
points updated time new element added set 
case upper bound known guess security parameter chosen 
coefficients sent probabilistic check discover probability attractive small numbers differences method computationally expensive cubic large numbers differences construction time reconciliation time 
variant faster requires rounds communication suited application 
leads consider approximate methods offer lower computational complexities 
focused reconciling large number differences information theoretic communication complexity exact reconciliation common case larger approximate methods reconcile constant fraction set differences message size table gives high level comparison various approaches discuss 
byers informed content delivery adaptive overlay networks table comparison various fine grained reconciliation methods constant accuracy enumeration approaches contrast polynomial methods simplest expensive approach computing differences peer enumerate send entire working set requires bits transmitted 
natural alternative hashing 
suppose set elements hashed random hash function universe peer hashes element sends set hashes actual working set bits transmitted 
strictly speaking process may yield exact difference 
probability element hash value element case peer mistakenly believe probability inversely polynomial setting case bits sent 
hash tables compare lists elements hash values sent exact reconciliation subject hash collisions done time high probability 
compact enumeration method approximate reconciliation bloom filter :10.1.1.20.2080
solution surprisingly effective particularly number differences large fraction set size 
bloom filter represent set elements universe size consists array bits initially set 
bloom filter uses independent random hash functions range element bits set check element check set 
clearly member set assume wrong probability 
bloom filter may yield false positive reports element fact probability false positive depends number bits item number hash functions follows 
note highly accurate approximation treat equality henceforth 
false positive rate minimized picking results approximate reconciliation solution peer sends bloom filter peer simply checks element false positive occurs element peer incorrectly assume peer element peer fails identify element bloom filter causes peer mistakenly find element 
bloom filters message size kept small achieving high accuracy 
example just bits element message length hash functions yields accuracy bits element hash functions yields accuracy 
improvements introduced compressed bloom filter reduces number bits transmitted peers cost bits store bloom filter systems requiring compression decompression peers :10.1.1.21.7565
constant number hash functions making standard assumption hashes array accesses constant time operations construction time set bloom filter reconciliation time find set difference 
construction time precompute hashes set elements shift reconciliation time construction time 
requirement construction time message size may excessive large possibilities scaling approach larger set sizes 
example large peer create bloom filter elements equal modulo appropriate peer filter determine elements equal modulo relatively large set elements 
bloom filter approach pipelined incrementally providing additional filters differing values needed 
pipelining approach similarly schemes 
unavoidable drawback bloom filters large reconciliation time 
set difference small element tested filter described minimizing reconciliation time crucial applications reconciliation performed real time 
approximate reconciliation tree data structure described section vi avoids problem 
search approaches contrast enumeration approaches search approaches efficient finding small numbers differences identifying sets differences 
search approaches set reconciliation generally leverage patricia tries merkle trees :10.1.1.35.5754
patricia tries provide structured searching comparable subsets merkle trees solve problem testing equivalence large subsets constant time 
abstractly trie complete binary tree represents subset universe stored root th child depth corresponds set definition element nested subsets path root ieee acm transactions networking vol 
october fig 

components approximate reconciliation tree art data structure universe size atr 
leaf representing singleton set sets represented trie form element set difference located identifying root leaf path nodes path correspond distinct subsets stored nodes path basic method identifying single discrepancy involves performing comparisons identify path length leaf 
inefficiencies approach described far 
trie nodes depth unsuitable universe large 
nodes trie correspond sets 
fact nontrivial nodes corresponding distinct subsets 
trie collapsed removing edges nodes correspond set leaving nodes result patricia trie 
example collapsed patricia trie depicted fig 

second inefficiency subsets compared may arbitrarily large 
difficult construct patricia tries subsets size merkle trees provide convenient probabilistic answer challenge 
provide method signing comparing large databases allowing fast updates identifying differences 
application form merkle tree top trie concisely representing node subset single value 
leaves merkle tree value obtained applying hash function singleton set stored leaf trie 
values internal nodes merkle tree obtained applying hash function values children 
construction hash value stored node function elements subtree 
example merkle hashing applied patricia trie depicted fig 
hash function fig 

merkle hashing idea conjunction tries search method described applies difference hash values sets compared 
affords constant time comparisons introduces risk false positive matches due hash collisions level tree 
interactive algorithm approach appeared 
round algorithm additional level tree traversed nodes detecting differences 
unfortunately requires logarithmic number rounds randomization balancing 
hybrid protocol combining ideas polynomial approach uses fewer rounds logarithmic number 
relevant asymptotic performance measures approaches provided table approximate reconciliation trees bloom filters preferred data structures working sets peers small resemblance 
bloom filters efficient resemblance large case search approach appropriate computationally 
propose new data structure approximate reconciliation trees arts combining compact representation bloom filters speed search approach 
arts build merkle tree methods section vi 
peer builds patricia trie set associated merkle tree values 
message sends bloom filter values merkle tree 
identifies element set difference simple path traversal algorithm described earlier patricia trie comparing nodes collapsed trie bloom filter representation checks value node performing lookup bloom filter provided tests node value 
bloom filters summarize merkle tree values depicted fig 
advantages 
fast search times associated search paradigm preserved 
complications associated collapsed patricia tries avoided explicit bookkeeping data transmitted 
hash collisions merkle tree virtually eliminated size hashes local tree affect message size 
main disadvantage comparisons nodes tries correspond bloom filter lookups accurate direct comparisons merkle tree values 
analyze approach 
sending bloom filter node values large number bits values avoid collisions bits suffices high probability bits covers practical situations 
ignore collisions henceforth analysis 
obtain false positive element depth art false positive node values path root leaf representing bloom filter 
false positive rate bloom filter sent probability identifies member byers informed content delivery adaptive overlay networks achieve constant expected accuracy elements 
individual elements depth tree high probability mentioned earlier false positive rate bloom filter means bits element bloom filter 
additionally number hash functions minimize false positive rate 
constant number hash functions requires number bits element implementation expects small fixed number hash functions universally chosen ahead time 
improvements arts described far combine better properties bloom filters merkle trees quicker searches small numbers differences complications managing tree structures 
unfortunately inherit common weakness tree search strategies incorrect pruning false positives potentially result large numbers differences overlooked 
example false positive checking root art differences sets reported identical 
addressing problem requires increasing number bits element running times nonconstant factors 
section discuss series improvements basic arts remedy problems 
hashing basic search method operates patricia trie running time proportional depth worst case depth patricia trie may avoid issue high probability hash element initially inserting virtual tree 
range hash function avoid collisions 
analysis assumption hash functions truly random 
obtain random patricia trie properties studied random search tree literature particular 
specifically average depth leaf binary patricia trie random leaf values interval variance depth leaf constant 
maximum depth high probability 
distribution leaf depths closely concentrated increased branching factor improvement simple increase maximum branching factor trees 
reduces number internal nodes improving false positive probability allowing bits node 
decreases height tree reducing number bloom filter tests constant factor 
cost potential increase running time searches elements children internal node checked match occur 
improvement change asymptotic results constant factors 
larger branching factors important part real implementation 
branching factors power say especially desirable trie operations performed fixed stride length bits 
correction levels improvement inherent redundancy merkle tree structure 
event match internal nodes tree identical subsets caused false positive case children match revealing discrepancy certainty 
double check match internal merkle tree node verifying children match 
sided error bloom filters ensures method applies filtered representation merkle tree 
demonstrate experimentally significantly improve accuracy expense running time 
generally change search procedure stops searching path differences match node immediate ancestors new parameter call correction level exactly basic reconciliation procedure 
traversal pruned consecutive matches traversal pruned consecutive matches 
branching factor slows traversal factor improved bit allocation implicit assumption basic art construction nodes equal worth number bits node 
noted earlier false positives near root tree lead differences missed effect partially mitigated correction levels 
merely adding bits root close descendants significantly alleviate 
opposite tree false positives leaves impossible correct 
accuracy arts best accurate bloom filter tests leaves regardless done internal nodes 
implies accuracy art better bloom filter size 
suggests schemes reduce number bits represent internal node compromising accuracy desirable 
fact prove reasonable approach separate bloom filter level tree bits represent node height tree 
leveraging random tree structure problem noted previously bloom filter represent nodes may difficulties determining correspondences peers arts 
hand bloom filter increases probability individual false positive 
possible desirable higher accuracy merkle tree complications reconstructing tree structure 
enable hybrid observation random patricia trie nodes levels complete high probability 
top levels complete values levels may simply enumerated fixed order 
setup access nodes levels directly yielding lower false positive rate bloom filters switches testing nodes lower levels tree bloom filter 
better special values top tree adopt idea varying numbers bits elements large hashes bits significantly affecting number bits available ieee acm transactions networking vol 
october leaves lower levels 
specifically hybrid approach uses bits manages avoid false positives upper levels high probability 
analysis various improvements section vi incorporating pieces analysis improvements prove theorem 
theorem exists round protocol message size construction time construction time reconciliation time high probability constant accuracy 
proof constructs art components 
values top complete levels explicitly sent bits value 
values remaining internal nodes sent bloom filter bits constant number hash functions similarly leaf nodes sent separate bloom filter bits constant number hash functions 
loss generality may assume leaf bloom filter satisfy theorem 
top levels tree explicit hash values probability hash collision union bound probability hash collision appears path top levels occurs probability searching levels takes time 
remaining levels uses correction level sufficient guarantee constant probability false positive path levels tree depth encompasses constant fraction leaf nodes ensuring constant accuracy 
cost correction level slowdown fixed branching factor searching remaining levels takes time 
combining bounds proves theorem 
vii 
experimental results investigate effectiveness collaboration methods 
section vii compare performance accuracy approximate reconciliation methods 
collaborative experiments collaborative experiments demonstrate benefits costs reconciliation peer peer transfers parallel downloads 
simple scenarios designed illustrative highlight primary benefits methods performance improvements demonstrate extrapolated complex scenarios 
simulation parameters collaborative experiments consider transfers mb file 
assume origin server divides file input symbols bytes fit ethernet packet headers subsequently encodes file large set encoding symbols 
associate encoding symbol bit identifier representing set input symbols produce 
irregular degree distribution codes generated heuristics discussion section described 
degree distribution average degree encoding symbols average decoding overhead 
experiments simplifying assumption constant decoding overhead 
recoding precomputed degree distributions fashion input parameters rounded increments maximum degree 
min wise sketches permutations yielding entries bits total bytes summary 
bloom filters hash functions bits total kb filter 
separate results arts omitted section overhead visually indistinguishable bloom filters 
bloom filters arts differ primarily terms accuracy speed focus section vii 
collaboration methods compare methods orchestrating collaboration experiments described increasing order complexity performance 
methods may combined ways scenarios exhibit basic tradeoffs 
uninformed collaboration sending peer picks symbol send random 
strategy 
speculative collaboration sending peer uses min wise sketch receiving peer estimate containment heuristically tune degree distribution recoded symbols encodes sends 
containment estimated min wise sketch number symbols requested pick distribution tuned described earlier 
fractions picking distributions rounded multiples desired fraction zero 
reconciled collaboration sending peer uses bloom filter art receiving peer filter duplicate symbols sends random permutation differences 
random permutations transmitted encoding symbols minimize likelihood distinct sending peers send identical sequences encoding symbols receiving peer 
scenarios evaluation varying experimental factors set connections overlay formed sources peers distribution content collaborating peers slack scenario defined follows 
definition slack slack associated set peers working set peer total number input symbols 
definition scenario slack distinct encoding symbols working sets peers clearly slack set peers unable recover file exact reconciliation algorithm decoding overhead slack larger peers reconciliation algorithm accuracy expect able retrieve file methods provide significant benefits naive methods small amount slack noted earlier approximate reconciliation especially difficult slack large 
slack values comparison compact scenarios little available redundancy looser scenarios 
byers informed content delivery adaptive overlay networks fig 

overhead peer peer reconciliation 
simplicity assume connection amount available bandwidth methods apply irrespective assumption 
receiving peer measure overhead starts encoding symbols server 
encoding symbols known sending peers determined slack scenario containment defined section iv 
technique measure average overhead set trials average overhead means symbols need received average recover file input symbols 
case server sending encoded content aid peers partial content overhead merely decoding overhead scenarios may additional reception overhead arising receiving duplicate encoded symbols recoding overhead receiving useless recoded symbols 
axis plot range containment sending peers receiving peer 
data point average simulations 
peer peer reconciliation simplest scenario depicted fig 
consists peers partial content peer sends symbols 
scenario demonstrates feasibility approach worst case servers original file longer available reconciliation barely possible 
receiving peer sending peer file consisting input symbols slack definition containment equations uniquely determine functions slack containment 
need constrain scenarios cases recover file initially 
gives upper bound feasible values slack explains variation values axes plots 
fig 
shows results experiments scenario 
experiment uninformed collaboration performs poorly degrades significantly containment increases 
intuition rate useless symbols transmitted increases number symbols shared peers increases 
shared symbols increase containment increases transfer progresses 
analyzed exactly variant known coupon collector problem 
speculative collaboration efficient overhead increases slowly containment 
contrast overhead reconciled collaboration virtually indistinguishable overhead encoding increase fig 

overhead peer augmented downloads 
fig 

overhead collaborating multiple peers parallel 
containment 
extra overhead reconciliation purely cost transmitting bloom filter art percent sending bits symbol bytes 
peer augmented downloads scenario considers download server complete content supplemented concurrent transfer peer illustrated fig 

overhead uninformed collaboration considerably lower scenarios fig 
primarily larger fraction content sent directly fresh symbols server 
methods speculative collaboration performs similarly uninformed collaboration scenario recoding methods highly optimized 
cases reconciled collaboration overhead slightly higher receiving symbols directly server transfer time substantially reduced due concurrent downloads 
scenario natural consider speedup obtained augmenting download additional connection ratio transfer rate augmented method transfer rate single sender incurring decoding overhead 
augmenting download connection equal available bandwidth reconciled transfer having overhead achieves speedup augmenting download uninformed transfer having overhead achieves modest speedup 
collaborating multiple peers parallel consider parallel download scenario similar :10.1.1.21.9363
peer collaborating concurrently peers partial content pictured fig 

scenario demonstrates appropriate reconciliation algorithms leverage bandwidth peers partial content slight increase overhead 
encoding symbols allocated multiple peers slack containment longer uniquely determine initial distribution symbols 
allocate symbols follows 
ieee acm transactions networking vol 
october fig 

reconciliation performance 
bits element 
accuracy basic approach 
branching factor differences 
accuracy hybrid approach 
branching factor differences 
speed various approaches varying numbers differences 
receiver initially allocated symbols 
symbols sending peer independently probability remaining symbols sending peer probability symbols peer discarded replaced 
peer symbols expected experiment 
results scenario shown fig 

expect uninformed collaboration performs extremely poorly 
low values containment speculative collaboration performs uninformed collaboration dramatically improves containment increases 
contrast previous experiments reconciled collaboration higher overhead 
arises correlation multiple peers 
sending peers may identify shared symbol respectively send receiving peer symbol received multiple times directly contributes overhead 
similar reasons performance speculative collaboration degraded recoding algorithm optimized transfers pairs peers 
lack space omit results higher slack values note scenarios inherently easier greater similarities :10.1.1.21.9363
poor performance reconciled collaboration sharing sending peers consider effects periodically updating summaries 
previous experiments performed coarse grained reconciliation initially 
fig 
shows results experiment peers periodically exchange summaries receiving new set symbols 
speculative collaboration updates min wise summary reconciled collaboration updates bloom filters show dramatic improvements 
reconciliation experiments compare bloom filters arts 
experiments focus settings speed reconciliation primary concern achievable accuracy secondary importance 
experiments deal sets random bit elements 
set experiments number differences fixed number differences varies orders magnitude 
total message size bits element hashes bits resolution 
experiments data point shown average sample runs 
accuracy experiments accuracy experiments order find parameter settings investigate basic tradeoffs 
fig 
shows results basic implementation binary trie bloom filters internal nodes leaves 
fig 
demonstrates results increasing branching factor combined hybrid approach complete levels merkle tree sent explicitly 
experiments setup 
axis vary number bits allocated leaf bloom filters remaining bits available devoted internal nodes 
axis plot accuracy obtained particular setting selected 
uppermost curve plot accuracy obtained brute force searching leaf bloom filters foregoing speed advantage tree structure minimizing incidence false positives 
remaining curves illustrate accuracy obtained various correction levels 
cases increasing correction level brings accuracy closer leaf bloom filter 
time correction level increases optimal distribution bits allocates bits leaves correction reduces internal false positive rate 
basic binary implementation note correction delivers poor accuracy boosting correction level moderately delivers accuracy comparable bloom filters 
full implementation achieves dramatic increase accuracy settings 
observation optimal allocation bits internal node leaf bloom filters shifted favor leaf bloom filter 
optimizations works reduce internal false positive rate 
speed experiments turn question speed running experiments ghz pentium mb ram 
earlier results arts hybrid approach branching factor bloom filters leaf nodes internal nodes 
case consider correction levels zero choose distribution bits bloom filters maximize accuracy 
cases compare performance vanilla bloom filters 
depicted fig 
vary number differences orders magnitude compare reconciliation times vary byers informed content delivery adaptive overlay networks orders magnitude 
depict wide variability plot log log scale 
small numbers differences vanilla bloom filters take significantly longer reconcile 
reconciliation time taken bloom filters roughly constant number differences varies drops slightly number differences increases 
bloom filter positive queries require evaluating hash functions negative queries may terminate hash function reveals element set 
reconciliation time arts grows roughly linearly number differences initially small 
bloom filters drop time reconcile nearly elements different 
correction level arts faster number differences fewer correction faster number differences fewer cost significantly decreased accuracy 
viii 
context preliminary version appeared conference form considerable complementary directly relating findings :10.1.1.21.9363
particular bullet implements ideas adds explicit mechanisms promoting diversity working sets 
includes full implementation extensive experiments internet simulation reinforcing findings showing factor improvement throughput informed content delivery variety situations 
lt codes online codes improve best published erasure codes having stated intent improving collaboration methods 
methods codes produce encodings overhead independent size source file 
provides ideas reconciliation include sequential labeling packets encoding streams exchanging sequence number ranges reconcile 
argued earlier complexity reconciliation subranges received packets grows transience network conditions topology perform poorly enumeration approach worst case 
proposal relies order packet delivery reliable connections 
splitstream leverages distributed hash table topology maintain multiple system multicast trees rooted origin server 
tree receives distinct stream encoded content 
additionally trees property peer internal node exactly system multicast tree 
system ideal environment techniques overlay richly connected content peers diversified multiple paths route content peer 
prm system multicast protocol motivation similar 
focuses handling packet loss providing high delivery rates packet session 
authors augment system multicast tree small number random edges nodes 
architecture duplicate received packet forwarded random edge 
scheme performs localized reconciliation small sliding window content 
suitable applications reliable delivery large files erasure resilient encodings representative example content delivery scenarios benefit approaches proposed 
generally content delivery application satisfies conditions may stand benefit 
architecture employs rich overlay topology potentially involving multiple connections peer 
peers may portion content potentially complex correlations working sets 
working sets peers drawn large universe possible symbols 
example application satisfies criteria video demand involves reliable delivery large file additional complications due timeliness constraints buffering issues methods naturally conjunction existing approaches video demand move pure client server model overlay model 
methods advocate erasure resilient codes informed content delivery video demand apply codes 
similar approach near real time delivery live streams 
application reliability necessarily essential collaboration may improve best effort performance 
approach may peer peer applications running shared virtual environment distributed interactive simulation networked multiplayer games 
peers may interested reconstructing small region large scale environment 
ix 
overlay networks offer powerful alternative traditional mechanisms content delivery especially terms flexibility scalability deployability 
order derive full benefits approach care needed provide methods representing transmitting content manner flexible scalable underlying capabilities delivery model 
argue straightforward approaches appear effective ultimately suffer similar scaling coordination problems undermined multipoint service models content delivery 
contrast argue digital fountain approach encoding content affords great deal flexibility systems performing large transfers 
main drawback approach large space possible symbols system means coordination systems needed case filter useful content redundant content 
main contributions furnish efficient concise representations sketch relevant state system handful packets provide appropriate algorithmic tools perform circumstances 
methods hand informed effective collaboration systems achieved benefits encoded content representation 
ieee acm transactions networking vol 
october andersen balakrishnan kaashoek morris resilient overlay networks proc :10.1.1.161.2760
acm sosp banff ab canada oct pp 

banerjee lee bhattacharjee srinivasan resilient multicast overlays proc 
acm sigmetrics june pp 

bloom space time trade offs hash coding allowable errors commun :10.1.1.20.2080
acm vol 
pp 
july 
broder resemblance containment documents proc :10.1.1.24.779
compression complexity sequences italy june pp 

broder charikar frieze mitzenmacher independent permutations comput :10.1.1.121.8215
syst 
sci vol 
pp 

byers considine mitzenmacher fast approximate reconciliation set differences boston univ boston ma tech 
rep bucs tr july 
byers considine mitzenmacher rost informed content delivery adaptive overlay networks proc :10.1.1.21.9363
acm sig comm pittsburgh pa aug pp 

byers luby mitzenmacher accessing multiple mirror sites parallel tornado codes speed downloads proc :10.1.1.21.9363
ieee infocom mar pp 

digital fountain approach asynchronous reliable multicast ieee select 
areas commun vol 
pp 
oct 
castro druschel 
kermarrec nandi rowstron singh splitstream high bandwidth multicast cooperative environment proc 
acm sosp lake bolton ny oct pp 


chu rao seshan zhang case system multicast ieee select 
areas commun vol 
pp 
oct 
considine generating degree distributions sparse parity check codes oracles boston univ boston ma tech 
rep bucs tr oct 
devroye note probabilistic analysis patricia tries random structures algorithms vol 
pp 

jannotti gifford johnson kaashoek toole overcast reliable multicasting overlay network proc :10.1.1.12.7544
usenix symp 
operating systems design implementation san diego ca oct pp 

szpankowski limit laws heights generalized tries patricia tries proc 
latin pp 

knuth art computer programming volume sorting searching :10.1.1.35.5754
reading ma addison wesley 
rodriguez albrecht vahdat bullet high bandwidth data dissemination overlay mesh proc 
acm sosp pp 

luby lt codes proc 
rd symp 
foundations computer science vancouver bc canada nov pp 

luby mitzenmacher shokrollahi spielman efficient erasure correcting codes ieee trans 
inform 
theory vol 
pp 
feb 
eager vernon sundaram scalable demand media streaming packet loss recovery ieee acm trans 
networking vol 
pp 
feb 
maymounkov mazieres codes big downloads proc 
nd int 
workshop peer peer systems feb pp 

merkle digital signature conventional encryption function proc 
crypto santa barbara ca aug pp 

minsky efficient reconciliation unordered databases cornell univ ithaca ny tech 
rep tr 
scalable set reconciliation proc 
th annu 
allerton conf 
communication control computing oct pp 

minsky set reconciliation nearly optimal communication complexity ieee trans 
inform 
theory vol 
pp 
sept 
mitzenmacher compressed bloom filters ieee acm trans :10.1.1.21.7565
networking vol 
oct pp 

rubin random questions necessary identify distinct objects combinatorial theory ser 
pp 

rabin efficient dispersal information security load balancing fault tolerance acm vol 
pp 

rodriguez biersack dynamic parallel access replicated content internet ieee acm trans 
networking vol 
pp 
aug 
savage collins hoffman snell anderson effects internet path selection proc :10.1.1.38.9273
acm sigcomm aug pp 


online www org projects vitter random sampling reservoir acm trans 
math 
software vol 
pp 

john byers received ph degree computer science university california berkeley 
currently assistant professor computer science boston university bu boston ma affiliated scientist digital fountain prior joining bu postdoctoral researcher international computer science institute berkeley ca 
research interests include algorithmic aspects networking internet content delivery network measurement 
serves program committees numerous conferences including acm sigcomm acm sigmetrics ieee infocom 
dr byers received national science foundation career award 
currently editorial board ieee acm transactions networking member acm 
jeffrey considine received degrees computer science boston university boston ma currently working ph degree computer science performs research randomized data structures overlay networking 
michael mitzenmacher received ph degree university california berkeley 
research scientist digital systems research center palo alto ca 
joined harvard university cambridge ma associate professor 
inventor issued patents written conference journal publications 
research interests include design analysis algorithms dynamic processes load balancing web algorithms compression error correcting codes computer science education 
dr mitzenmacher received nsf career award alfred sloan research fellowship 
shared ieee information theory society best award error correcting codes 
rost received degrees computer science department boston university boston ma 
currently working ph degree computer science massachusetts institute technology cambridge research routing content delivery distributed computing power constrained wireless networks 
