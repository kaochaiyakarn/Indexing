software configuration management roadmap jack estublier key research pointers author functionality efficiency 
basic core functions scm systems versioning data management workspace support weak lack usability adaptability 
pdm scm 
serious industrial product includes significant amount software 
need tools covering consistently homogeneously development evolution products containing software kind components 
process support 
tools include process support scm 
need ot heterogeneous process fragments interoperate minimum cover consistently complete process spectrum 
web support 
web opens new possibilities remote concepts managing remote concurrent engineering missing 
hand managing evolution web pages web artifact raise new issues challenges 
interoperability architecture 
advanced scm service tailored solutions proposed 
scm core part kernel tools cooperate interoperate 
part architecture interoperability kernel 
jacky estublier research director french national research center cnrs grenoble france 
leads software engineering research group grenoble university research laboratory created jointly dassault syst grenoble 
leading adele project 
holds phd operating systems 
research interest primarily software configuration management 
started adele project building versions adele configuration manager 
early adele version sold airspace industry development airbus embedded software 
time adele team explored domains software configuration management delivered versions different 
today adele system daily industrial production 
adele rights sold dassault syst mes common research laboratory created 
domain interest process support software architecture concurrent 
software configuration management roadmap chapter summarizes state art scm showing evolution years 
chapter shows current issues current research way area 
chapter challenges scm take scm research discussed 
keywords software configuration management version control process support concurrent engineering federation interoperability architecture 

current definition say scm control evolution complex systems 
pragmatically discipline enable keep evolving software products control contributes satisfying quality delay constraints 
scm emerged discipline soon called software crisis identified programming cover software engineering se issues hampering se development architecture building evolution 
scm emerged late early attempt address issues clear boundary scm topic coverage 
early scm focussed programming large versioning rebuilding composition programming process support concurrent engineering late programming wide web remote engineering 
currently typical scm system tries provide services areas managing repository components 
need storing different components software product versions safely 
topic includes version management product modeling complex object management 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice lull citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sofware engineering limerick ireland copyright acm jacky estublier dassault lsr grenoble university bat bp grenoble france jacky estublier imag fr help engineers usual activities 
se involves applying tools objects files 
scm products try provide engineers right objects fight location 
referred workspace control 
compilation derived object control major issue 
process control support 
clear major issue related people 
traditionally change control integral part scm product currently tendency extend process capability aspects 
short history systems built house focussed closely file control 
built set unix scripts rcs simple version control tool derived object control 
period mention dsee serious product introduced system model concept architecture description language ancestor nse introduced workspace cooperative control adele introduced specialized product model automatic configuration building de camp true software introduced change set see 
real scm products appeared early 
systems better 
relational database rely file control provide workspace support built process support 
generation included clear case dsee successor introduced virtual file system introduced adele explicit process support 
clear case currently market leaders 
second half process support added products matured 
period saw scm mature reliable essential technology successful software development scm market sales 
observers consider scm software engineering successes 
component repository scm products tiny core concepts mechanisms 
summary concepts 
versioning early version control system appeared 
idea simple time file changed revision created 
file evolves succession revisions usually referred successive numbers foo foo 
revision new line change created leading revision tree 
line called branch branch issued foo called foo foo 
time services provided history delta multi user management bit merging facilities 
history simply records created revision comment 
deltas provided successive revisions similar similar average 
idea store differences different 
course vastly reduces amount required 
multi user management consists preventing concurrent changes overlapping 
user wants change file creates copy sets lock file check user create new revision file check 
despite fact years old base vast majority today scm systems 
product model focus file control 
surprise see today data model proposed vendors resemble file system plus attributes predefined 
archaic contrasts today data modeling 
composition configuration defined set files constitute valid software product 
question twofold real nature configuration build prove properties 
surprisingly systems configuration object special 
consequence weak data model complex objects explicit relationships available 
traditional way build configuration changing existing 
correctness criteria available 
change set approach change involves files receives logical name 
configuration produced set change sets add remove base configuration ci base configuration new 
adele system configuration built interpreting semantic description looks que system charge finding needed components attributes dependencies 
approaches available vast majority today systems 
engineers support practitioners rejected early systems helping configuration manager bothering everybody 
major move acceptance consider software programmer major target customer helping usual se activity basic service 
building rebuilding aim rebuilding reduce compilation time change recompile automatically needed 
ancestor large family systems knowledge dependencies files modification date 
proved extremely successful versatile difficult inadequate respects 
attempts substantially better far failed 
systems generate makefiles 
workspace support workspace simply part file system files interest task debug develop located 
workspace acts sphere programmer isolated outside world task duration 
scm system responsible providing right files ation right file system users independently save changes automatically job done 
service really convinced practitioners scm help 
cooperative support workspace support ent engineering concurrent workspaces may contain change objects files 
need objects controlling concurrent 
far means merging source files 
mergers today tools simply compare line line basis files merge file historically common ancestor 
line file common ancestor added kept line ancestor file removed removed 
changes occurred different places merger able decide automatically merged file 
algorithm simply heuristic provides output set lines absolutely correctness 
mergers proved fine useful unavoidable 
see survey 
controlling concurrent means defining perform change attribute object 
topics process support currently tool really provides 
process support process support means formal definition performed process model mechanisms help force reality conform model 
state transition diagram std describes product type legal succession states optionally actions produce transition describes legal way evolve entities type 
scm aims control software product evolution surprise process models 
product centered modeling 
experience shows complex fine grained process models define way 
unfortunately experience shows provide global view process large processes difficult define 
alternative way model processes called activity centered modeling activity plays central role models express data control flow activities 
kind modeling preferred global view required large process structured products main concern 
approach lacks precision product control 
experience demonstrated needed integration easy tools intended propose independent modeling 
high level process models mixing currently available commercial products experimented 
current state practice seen practitioners 
scm september toulouse france attendees asked write answer questions experience useful features worse aspects critical missing feature 
interesting note answers pretty consistent coming persons different countries different companies different tools 
answers useful appreciated features 
clearly number change control activity control support 
comes differing order global view traceability worse aspect missing feature 
clearly number better flexible process support concurrent distributed engineering support 
comes scalability efficiency incrementality cross platform capability pdm compatibility interoperability interesting see appreciated criticized feature concern process support 
comments concerned basic aspects scm versioning merging 
practitioners think tools stable lack efficiency scalability interoperability se tools 
near distinctive features tools functionally strength process support technically capability grow needs inter operate tools support concurrent distributed remote engineering 
current research consider scm reached level maturity sufficient practitioners feel tool really helps 
progress needed major research activity substantially changed 
assessment current research activity 
performed scm far avoids dependent programming languages semantic aspect software product 
strength scm comes attitude strong general tools built relying trivial things files suffixes lines code 
weaknesses scm come little knowledge software product 
challenges increase scm power increase knowledge product having pay complexity efficiency generality knowledge specific syntax programming languages semantics 
component repository versioning long major research topic scm 
longer case 
major issues solved including change set approaches unified versioning entities including configurations typed versioned way 
shown classic versioning called change oriented versioning unified complementary 
scm tools propose 
current trend clear separation mechanisms tree branches revisions example meaning versions goal hide low level mechanisms branches revisions 
strong points change set approach user insight way versions stored knows logical changes 
similarly adele kinds versioning defined historical logical cooperative different characteristics methods behavior implemented invisible branches revisions 
deep understanding versioning missing 
objects versions 
share differ way 
current answer share number lines 
better answer questions prerequisite version management 
data model product model weakest aspect current scm tools data model attributed file system 
number works proposed interesting data models including entity relationship versioning 
unfortunately major commercial database fit needs building specific dbms reasonable efficiency scalability reliability requirements 
building advanced data model top relational flexible efficient easy simple possible 
issues consideration versioning located data model part data model top data model 
course commercial dbms imposes third choice 
solution 
weak data model major problem hampers aspects notably process support reach satisfactory level 
knowledge system managed model advanced scm possible 
interaction database community scm sufficient produce convenient dbmss serious dbms tailored scm purposes near 
composition system models despite done shown feasibility advanced configuration construction configuration description languages advanced system model current tools features 
important area research produce systems ideas put practice 
system model describes high abstraction level software product terms components relationships 
system model looks architecture description language adl configurable distributed system cds formalism 
analogy analyzed led composition behavior adl scm cds consistency building versioning selection table roughly assess capabilities different streams related modeling software systems 
basic concepts typical adl components connectors configurations 
adls try define behavior consistency constraints 
adls static view software dynamic view system evolves reconfigures execution 
concentrate description components dynamically instantiated connected 
category system proposes software description formalisms number dots indicates extent formalism proposed convenient description aspect 
scm systems essentially building versioning adl focuses composition consistency cds dynamic composition 
interesting see kind system focuses different aspects covers needs 
different languages describing thing substantial overlapping waste energy highly error prone 
fundamental needed define single language define complementary coordinated formalisms controlling clear way different aspects system 
essential research task spans major research areas se 
engineer help building goal rebuilding system minimize number recompilations change second propose formalism describing compilation dependencies easy maintain 
respects far ideal 
done propose better system 
currently different flavors proposed including 
original propositions 
language dependent systems proposed smart recompilation knowing change real dependencies allows reduce number files recompile 
unfortunately time required source code analysis larger time saved avoiding files recompiled 
limit done syntactic semantic knowledge reached source code analysis expensive respect expected advantage issue reduce rebuild time 
current solution generate makefiles information scm tool 
solves issue related formalism efficiency 
clear need better serious challenge 
workspace support current view workspace simplistic set files directories 
practitioners require want version complex object configuration available tools location 
se tool requires objects specific format 
se tools know files editor compilers require files specific names directories formats development environments require objects dbms schema 
required objects containing literals object objects represented required format required location computer 
current implementations workspaces managed central db limits scalability impedes heterogeneity severely reduces efficiency availability 
need truly distributed heterogeneous efficient workspaces means workspace autonomous rely local store centralized scm system 
cooperative remote support se engineering domain reduction product life cycle months releases increase product complexity team size dramatically increased pressure concurrent concurrent poorly supported 
traditional locking schema replaced file merging available 
need able define high level cooperation strategies organization coordination procedures somebody point time able see object change attributes resynchronize somebody somebody 
fundamentally concurrent engineering relies capability merge pieces done concurrent way object 
merging objects central issue objects contain attributes merging objects means merging attributes 
attributes exact merge composition approximate source code 
currently file merging source code trivial line heuristic technique available 
unfortunately syntactic semantic mergers available long time early slow programs 
may web applications develop xml html mergers 
anyway current mergers deal source code object attributes object mergers 
object mergers available long time adele soon reality 
models mechanisms able model control development strategies open source virtual enterprise remote teams house critical software 
technically cope distributed remote site efficiency availability confidentiality 
challenge 
process support scm place software process technology proved applicable successful 
example change control process tools cooperative engineering specific process 
domain considerable room improvement 
triggers clearly tiny part answer 
activity approaches sufficient 
integration different approaches needed 
challenge high level model concurrent activity versioning issues efficient process engine execution 
need define high level specific formalisms different aspects scm processes modeled executed tailored measured enhanced 
today solutions partial low level inadequate 
major research needed area 
scm challenges presentation scm research major flaw 
considers scm isolation scm tools monolithic capability inter operate limited 
years things dramatically changed scm tools growing number tools challenged number dimensions 
functional challenges challenge address issues raised find put production advanced concepts mechanisms data model complex objects explicit relationships files versioning homogeneous type objects relationship configuration control automatic selection consistency criteria rebuilding multi platform efficient high level formalism spaces distributed scalable heterogeneous autonomous concurrent engineering high level models scalable solutions process control multiple views hybrid approaches high level models 
efficiency scalability availability 
issues challenging critical importance understand 
major limitation today related efficiency 
checking configuration labeling takes minutes hours rebuilding takes hours days dynamic selection controlling concurrent engineering slows substantially 
computing time important overhead software development practitioners accept slowed 
real challenge find novel powerful elegant solutions highly efficient available reliable 
bullets characteristics top priority 
data management large number tools environments manage local data repository versioned 
usual examples include programming environment gl tools 
difficulty find way repositories inter operable order avoid duplication inconsistency 
real challenge compatible different definitions formats versioning approaches 
known long time tough issue 
process management growing number tools include process explicit formalism called process sensitive systems ss 
today large number industry planners mail systems groupware workflow project managers business tools 
data concepts scm system operate roughly task time resource data 
change control marketing strategies processes forming continuum large overlap processes managed different 
companies require cover complete process spectrum minimum redundancy overhead sill specialized tools 
scm 
fundamental inter operate clear clean way 
pdm vs scm definition scm says control evolution complex systems 
covers engineering disciplines software engineering 
type engineering electrical mechanical design developed tools leaders 
call tools product data management pdm tools 
domains look similar fundamental differences 
pdm clear distinction design bicycle design product bicycle 
software design program product software product derived cost 
second pdm product physical existence confers spatial mechanical properties constraints 
reason pdm main structure part structure bicycle wheels frame 
software obvious real structure parts arbitrary abstractions loose relationships 
reasons product models dpm advanced scm unification fields needed software constitutes growing part industrial product 
unfortunately vendors headed direction deep underlying difficulties efficiency usability reasons 
web support web effects scm local distributed remote development similar see workspace scalability discussion 
distributed space control involve creating infrastructure management multiple copies objects distinctive feature different values different formats 
kind service required application dealing concurrent engineering deserves standard service net instance corba service 
extensions webdav going direction 
hand web produced new kind artifact web pages 
web pages released evolving products containing essential pieces information highly related pages 
clearly require configuration control 
web page source file differences easy notice number pages times larger number files time changes times shorter number contributors times larger computer specialists 
solutions software 
new ideas techniques invented new tools built 
market solutions urgently required 
observers estimate market larger software development increases faster sales expected marry lynch 
products coming communities document managers entering promising market 
scm vendors experience unclear take huge market 
growing number features scm tools facing problem big 
tendency include services try address domains 
years distributed development integrated remote development change ol process support web support 
dimensions architecture languages dynamic reconfiguring systems deployment candidates integration inside scm 
indication success worrying 
challenge find new architecture scm allowing break systems independent pieces compose scm system features currently required 
having low cost ability evolve extend scale major challenge tool currently meets 
challenge addressed changing deeply architecture philosophy scm systems 
despite limitations expected improvements discussed scm proved successful software engineering technologies 
market sales excellent perspectives mainframes workstations development pcs today scm system 
forecasts billions sales billions 
may appear scm research performed tool improvement expected 
support view tried identify areas research usual scm core topics 
new ideas proposed serious experiments performed years think done find new concepts better implementations 
unfortunately requires heavy developments experimentation currently academic researchers 
scm research tools unclear 
basic services understood mature stable standardized 
fall public domain basic services expect platform instance versioning rebuilding basic space support 
vendors lose control low level services 
vendor added value come ability build level scm system providing core topic advanced services targeted specific client specific data model versioning capability specific concurrent engineering facilities 
major change second layer considered basic se platform kernel stand product 
issue standardize scm systems way allowing build easily tailored highly efficient solutions 
kernel plugged number specific tools dedicated facet se process support concurrent engineering control project support dedicated specific application domain web support pdm control deployment electrical mechanical tools 
scm research vendors ale currently starting address issues limited scope necessarily requisite expertise 
layer tool unclear take lead necessarily scm vendors 
way tools cooperate build fledged efficient se environment active research topic mega programming cots federations 
issue interoperability control area scm research tools contribute quoted researchers believe configuration management environments real process centered environments 
near provided number core topic issues solved efficiency scalability usability issues evolutions seriously addressed scm vendors 
scm tools grow propose proprietary solutions consider scm isolated domain 
scm research take opportunity scm challenges currently se domains foster synergy research domains scm bringing experience know strength scm showing path useful successful tools software engineering needs 
comprehensive configuration management solution product structure manager advanced product configurator technology mw 

version control object oriented architecture 
won kim frederick 
editors 
objects oriented concepts databases application 
chapter pages wesley 


unified class evolution object oriented views 
proc th conf relationship approach 
lncs springer verlag oct 

syntactic software 
scm seattle june pp 
springer verlag lncs 
wright 
configuration management mechanism methodology cm systems 
proc 
th int 
workshop conf 
man scm 
baltimore 
springer verlag lncs pp 
product overview 
technical report software lnc 

versioning extensions webdav 
rational software 
may 
www ietf org internet drafts draft versioning txt 
system 
scm seattle june pp 
springer verlag lncs 
conradi westfechtel 
configuring versioned software product 
scm workshop 
pp 

springer lncs 
march 
conradi westfechtel 
uniform model software configuration management 
scm workshop pages 
springer lncs 
may 
estublier 
graphical executable formalism process modeling 
automated software engineering journal january 
dart 
concepts configuration management systems 
proc 
rd 
intl 
workshop software configuration management 
trondheim norway june 
dart 
content change management problems web systems 
proc scm toulouse france september 
ppl 
springer verlag lncs 
edl overview technology mw pages 
estublier 
configuration manager adele database programs 
proceedings workshop software environments programming large 
pages 
massachussets june 
estublier 
experience data base programs 
proc 
acm sigsoft conf 
practical software development environments pp 
palo alto dec 
estublier 
adele software configuration manager 
configuration management edited tichy wiley sons 

trends software 
estublier 
dimensional versioning 
scm scm workshops 
estublier editor september 
springer lncs pp 
estublier 
workspace management software engineering environments 
scm workshop 
springer lncs 
berlin germany march 
estublier 
high level process modeling scm systems 
scm lncs 
pages may boston usa estublier favre 
pdm scm integration 
proc scm bruxelles belgium july 
springer verlag lncs pp 
estublier 
distributed objects concurrent engineering 
proc scm toulouse france september 
pp 
springer verlag lncs pp 
feiler 
configuration management models commercial environments 
technical report cmu sei tr 
sei 
feldman 
program maintaining computer programs 
software practice experience april 
garland 
software architecture roadmap 
issue 
gulla carlson yeh 
change oriented version description epos 
software engineering journal nov 

gulla gorman 
experience configuration language 
scm workshop berlin germany march 
springer verlag lncs pp 
fuggetta 
software process roadmap 
issue 
hunt vo tichy 
delta algorithms empirical evaluation 
acm transactions software engineering methodology 
april 
katz 
unified framework version modeling engineering databases 
acm computing surveys 


mclean 
configuration management large scale software development efforts 
proceedings workshop software environments programming large 
pages 
massachussets 

cm challenge configuration management works 
configuration management edited tichy wiley sons 

trends software 

managing software development process 
scm lncs 
pages may boston usa 
system activity configuration management 
scm workshop berlin germany march 
springer verlag pp 

source code control system 
ieee trans 
soft 
eng 
vol se pp dec sun microsystem 
nse 
network software environment manual 
sun 
part march 
ovum 
configuration management 

gulla conradi 
modelling systems variability proteus configuration language 
scm lncs 
pp 
seattle 
may 
walter tichy 
design implementation evaluation revision control system 
proc th int 
conf 
software eng tokyo september 
walter tichy 
tools software configuration management 
proc 
int 
workshop software version configuration control pp 
january van der hoek heimbigner wolf 
versioned software architecture 
nov pages 
water 
automated software management structural models 
software practice experience 

weber 
change sets versus change packages comparing implementation change scm 
scm boston may springer verlag lncs pp 

constructing large product jam 
scm boston may springer verlag lncs pp 
went 
source control tools stable system 
proc 
fourth computer software application system development 
march 
jim whitehead 
goals configuration management network protocol scm lncs pages toulouse september 
webdav 
distributed authoring 
rfc 
andrew andrew cmu edu rfc rfc htm 
february 

