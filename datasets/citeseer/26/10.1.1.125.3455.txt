diamond rough finding hierarchical heavy hitters multi dimensional data graham cormode rutgers university graham dimacs rutgers edu muthukrishnan rutgers university cs rutgers edu data items archived data warehouses arrive online streams typically attributes take values multiple hierarchies time geographic location source destination ip addresses 
providing aggregate view data important summarize visualize analyze 
develop aggregate view certain hierarchically organized sets large valued regions heavy hitters 
hierarchical heavy hitters hhhs previously introduced crucial aggregation technique dimension 
order analyze wider range data warehousing applications realistic ip data streams generalize problem multiple dimensions 
identify study variants hhhs multi dimensional data overlap split cases depending aggregate computed child node multi dimensional hierarchy propagated parent element 
data warehousing applications offline algorithms take multiple passes data produce exact hhhs 
data stream applications online algorithms find approximate hhhs pass proven accuracy guarantees 
show experimentally real synthetic data proposed online algorithms yield outputs similar virtually identical cases offline counterparts 
lattice property product hierarchical dimensions diamond crucially exploited online algorithms track approximate hhhs small fixed number statistics candidate node regardless number dimensions 

data warehouses frequently consist data items attributes take values hierarchies 
example data warehouses accu supported nsf itr nsf eia 
supported nsf eia nsf itr nsf eia 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmod june paris france 
copyright acm 

flip korn labs research flip research att com divesh srivastava labs research divesh research att com data time item sales time attribute recorded 
view hierarchical attributes time various levels detail transactions time dimension view totals hour day week 
attributes geographic location organizational unit naturally hierarchical 
example sales different locations view totals store city state country 
emerging applications data streamed typically multiple hierarchical attributes 
example data streams ip traffic data 
consider streams packets ip network defines tuple source address source port destination address destination port packet size 
ip addresses naturally arranged hierarchies individual addresses arranged subnets networks ip address space 
example address represented full detail generalized bits generalized bits 
ports grouped hierarchies nature service traditional unix services known filesharing port coarser way authors propose hierarchy points hierarchy ports low ports high ports greater individual ports 
port individual port low ports ports 
focus aggregating summarizing data 
standard approach capture value distribution highest detail succinct way 
example may frequent items heavy hitters histograms represent data distribution series piece wise constant functions 
call flat methods focus typically highest level detail 
flat methods suitable describing hierarchical distribution values 
example item certain level detail bits source ip address aggregating small frequency items may heavy hitter item individual constituents full bit addresses 
contrast needs hierarchy aware notion heavy hitters 
simply determining heavy hitters level detail effective nodes heavy hitter ancestors 
example bit ip address heavy hitter prefixes 
definition proposed heavy hitters potentially level detail order provide maximum information summary size hierarchical heavy hitters hhh discounted descendants hhhs 
practice data warehousing applications ip traffic data streams hierarchical dimensions 
ip traffic data example source destination ip addresses port numbers time attribute yield dimensions typically source destination ip addresses popular hierarchical attributes 
practice needs summarization methods multiple hierarchical dimensions 
calls generalizing hhhs multiple dimensions 
typical database problems generalizing dimension dimensions presents challenges 
multidimensional hhhs powerful construct summarizing hierarchical data 
effective practice hhhs truly multidimensional 
heuristics materializing hhhs dimensions suitable applications 
example described aggregating traffic ip address identify set popular domains aggregating traffic port identify popular application types identify popular combinations domains kinds applications run requires aggregating fields simultaneously 
major challenge conceptual sophisticated ways product hierarchies dimensions interact precisely define hhhs context obvious 
previous example note traffic generated particular application running particular server counted total traffic generated port total traffic generated server 
implicit overlap 
alternatively may wish count traffic generalizations traffic low ports generalized total port traffic traffic high ports generalized total server traffic 
case traffic split ancestors resulting aggregates disjoint sets 
choice count depends semantics desired analysis 
suitable definition multidimensional hhhs typically computationally difficult exactly calculate 
straightforward generalization flat methods summarization dimension proves expensive 
histograms dimensions hierarchical attributes polynomial time algorithms obtained dynamic programming running times high methods approximate computationally expensive 
calculating flat summaries combination detail prohibitive 
large data sets data warehouses random access expensive look methods linear passes data 
address challenge developing computing hhhs multiple dimensions contributions follows 
generalize hhhs multiple dimensions illustrate different variants multidimensional hhhs overlap split cases giving formal definitions 
conceptually depend aggregate computed child node multi dimensional hierarchy propagated parent element 
lattice structure product hierarchies dimension gives different ways contribute parents 

sets algorithms calculating hhhs multiple dimensions 
data warehousing applications offline algorithms take multiple sorting passes considered binary split 
shall see section fractional split combinations possible 
data produce exact hhhs 
data stream applications online algorithms find approximate hhhs pass accuracy guarantees 
small amount space updated fast data stream 
algorithms keep upper lower bounds counts items 
items exist various nodes lattice keep additional information avoid counting presence multiple parents descendants 
lattice property product hierarchical dimensions diamond crucially exploited online algorithms track approximate hhhs small fixed number statistics candidate node regardless number dimensions 
going dimensions entails increasing number statistics need maintain candidates surprisingly statistics needed irrespective number dimensions 

extensive experiments dimensional data real ip applications show proposed online algorithms yield outputs similar virtually identical cases offline counterparts 

previous multidimensional aggregation rich history database research 
discuss research directions relevant 
number flat methods summarizing multidimensional data unaware hierarchy defines attributes 
example histograms summarize data piecewise constant regions 
representations wavelets cosine transforms attempt get skew data hierarchical transforms synchronized hierarchy attributes avoid outputting hierarchical prefixes potentially form heavy hitters 
years great deal finding heavy hitters hhs network data finding individual addresses source destination pairs responsible large fraction total network traffic 
flat methods heavy hitters form effective hierarchical summarization mechanism 
generalizing hhs multiple dimensions thought iceberg cube finding points data cube satisfy clause having count researchers looked hierarchy aware summarization methods 
minimum description length mdl approach data summarization uses hierarchically derived regions cover significant areas 
approach useful covering say heavy hitters particular detail higher level aggregate regions applicable finding hierarchically significant regions region contains subregions significant region significant 
notion heavy hitters generalized single hierarchy authors defined hierarchical heavy hitters hhhs 
case finding heavy hitters multiple hierarchies advanced authors provide variety heuristics computing multidimensional hhhs offline 
closest spirit 
studies hhhs multiple dimensions greater depth identifying fundamental variations approach providing known online algorithms small space give provable accuracy guarantees 
lattice induced element 
problem definitions notation formally model data dimensional tuples 
attribute tuple drawn hierarchy 
maximum depth th dimension concreteness shall give examples consisting pairs bit ip addresses hierarchy induced considering octet bits define level hierarchy 
illustrative examples methods algorithms apply arbitrary hierarchy 
generalization element attribute means element rolled level hierarchy attribute generalization ip address pair second attribute 
denote parent element formed generalizing th dimension element fully general attribute generalized denoted pair fully general attribute second 
conversely element fully specified attribute generalization element attribute 
operation generalization defined set hierarchies generates lattice structure product hierarchies 
elements form lattice nodes edges lattice link elements parents 
node lattice corresponding generalization elements attributes denote count example lattice induced element shown 
modeling structure lattice standard computing data cubes iceberg cubes 
worth noting lattices induced elements partially overlap lattice 
example generalizations part lattice induced element order facilitate referring specific points lattice notationally label element lattice vector length th entry non negative integer indicating level generalization element 
pair generalization level lattice ip address pairs 
parents element elements attribute generalized dimension parents elements items parent attribute fully general 
elements comparable label equal attribute items comparable ones comparable 
define th level lattice set labels sum values vector may overload terminology refer element member set meaning item label member set 
pair elements distinct labels comparable formally form anti chain lattice 
levels lattice range total number levels lattice lastly define sublattice element set elements related closure parent relation 
instance overload notation define sublattice set elements hierarchical heavy hitters general problem finding multi dimensional hierarchical heavy hitters hhhs find items lattice count exceeds fraction total count items discounting appropriate descendants hhhs 
needs refinement immediately clear compute count items various nodes lattice 
previous considering just single hierarchy semantics count single element rolled clear simply add count rolled element unique parent 
general multi dimensional case item multiple parents 
problem vary significantly depending count element allocated parents 
consider fundamental variations sections 
variations differ allocate count lattice node hierarchical heavy hitter rolled parents 
overlap rule says full count item parents counted multiple times nodes overlap 
overlap rule implicit prior network data analysis 
different summarization semantics may call different counting schemes 
consider split rule count item divided parents way 
case gives useful property weight items conserved rolled may intuitive overlap rule applications 
simplicity brevity describe case input data consists elements fully specified attribute leaf elements lattice 
methods naturally obviously extend case input arrive heterogeneous mix partially fully specified items discuss case detail 
presentation omit proofs brevity 
overlap rule analogy semantics computing iceberg cubes overlap case says count item parents item rolled 
hhhs overlap case elements count total count items item identified hhh count passed parents 
meaningful extension case count item rolled allocated parent item hhh 
intuitive subtleties approach need handled algorithm compute hhhs rule 
suppose kept lists elements level generalization hierarchy updated roll items 
item count write denote count rolled count 
rolling common grandparent give count 
additional information needed avoid overcounting errors similar problems grow worse number attributes increases 
formally define problem introduce notion overlap count item show compute exactly 
definition 
hierarchical heavy hitters overlap rule input consist set elements respective counts hierarchical heavy hitters defined inductively threshold contains heavy hitters overlap count element lat tice set defined set hierarchical heavy hitters overlap rule set set proposition 
denote length longest antichain lattice 
dimension dimen sions higher dimensions size set hhhs overlap rule gives evidence informativeness set hhhs conciseness 
contrast propagated counts item ancestor heavy hitters level hhhs low dimensions times larger data stream model computation data element stream examined possible keep exact counts data element large amount space 
small space paradigm approximation adopted formalized definition 
definition 
online hhh problem overlap case multi dimensional hierarchical heavy hitters problem overlap rule input threshold output set items lattice approximate counts satisfy properties 
accuracy 
coverage items lattice note accuracy ask accurate sublattice count output item count discounted removing hhhs 
useful quantity estimate high accuracy 
know ways accurately approximate discounted count 
goodness approximate solution measured close size exact solution 
problem exact solution smallest satisfying correctness smaller approximate answer size preferred 
multi dimensional problem examples approximate output smaller exact 
practice expect situations borne experiments 
split rule simpler alternative overlap rule count item rolled split parents 
meaningful extension case count item rolled parent 
example give equal fraction count parent parent chosen randomly rule 
encompass variations th parent node count shall consider specific examples split functions including split 
parents non general dimen sions dimensions non general dimensions 
smooth split 
split function tendency fa vor nodes closer center lattice 
smooth split counteracts arranging nodes level get equal contribution input item 
split weights assigned lattice nodes proportion numbers pascal triangle 
random allocate 
non general dimen sion chosen random priori 
definition 
hierarchical heavy hitters split rule input consist set elements respective counts hierarchical heavy hitters defined inductively threshold contains split count item lattice set set defined hierarchical heavy hitters split rule set set proposition 
hhhs split case 
definition 
online hhh problem split case multi dimensional hierarchical heavy hitters problem split rule input threshold output set items lattice approximate counts satisfy properties 
accuracy 
coverage items lattice included output defined solutions output satisfies accuracy coverage prefer output closer size exact solution 

offline algorithms give offline algorithms multiple passes input compute hierarchical heavy hitters overlap rule definition 
operators 
takes item label returns item generalized particular label 
example gen returns 
takes items determines generalization second 
example true comparison true pairs 
offline algorithm overlap rule overlap forall forall forall print offline algorithm overlap case proposition 
algorithm computes set hierarchical heavy hitters defined definition 
solves hierarchical heavy hitters problem defined definition computational cost 
offline algorithm set representation 
implemented keeping set sequence updates appended sorting aggregating searching hhhs 
element input list corresponds item sort list length time complexity implementation time sort lists length space needed proportional size input distinct labels lattice total split print domain split function offline algorithm split case offline algorithm split rule proposition 
algorithm computes set hierarchical heavy hitters defined definition 
solves hierarchical heavy hitters problem defined definition computational cost 
offline split algorithm implemented follows node lattice keep list initially empty 
time update list lines algorithm simply append item additional count list 
having processed sort list aggregate counts 
observe node receives contributions nodes implementation sorted aggregated list items unsorted list items 
follows observing 
item input represented item list sorting aggregating list items input 
merging lists length children generate list length nodes lattice cost algorithm dominated time sort lists length space requirement depends efficient implementation required implementation describe uses space length longest anti chain lattice 
dimensions note overlap rule split rules case single attribute consider behave identically rule 

online algorithms develop hierarchy aware solutions multi dimensional hhh problem insert model data streams known cash register model data stream elements deleted 
data stream model propose deterministic algorithms maintain sample summary structures deterministic worst case error guarantees finding hhhs 
user supplies error parameter advance supply threshold runtime output approximate hhhs threshold 
introduce naive algorithm compare experimentally show results quantitatively better 
high level naive algorithm keeps information label lattice keeps independent data structures 
returns approximate heavy hitters point lattice 
superset hierarchical heavy hitters satisfy accuracy coverage requirements method costly terms space usage 
evaluate output metric size output number items output expect naive algorithm badly measure 
propose algorithms keep data structure summarize lattice show better terms space output size analytically empirically 
exposition discuss algorithm split case overlap case involved 
online algorithms split section consider split case count item rolled split parents note split counts fractions 
algorithms maintain summary structure consisting set tuples correspond samples input stream initially empty 
tuple consists element lattice corresponding collections elements data stream 
associated element bounded amount auxiliary information determining lower upper bounds total frequencies data stream elements sub lattice rooted algorithms insertion compression output conservative extensions strategy proposed case 
element maintain auxiliary information lower bound potentially fractional total split count rolled directly indirectly difference upper bound total split count rolled lower bound descendants rolled input stream conceptually divided buckets width denote current bucket number alternating phases algorithm insertion compression 
intuitively element inserted summary structure count updated exists 
element re created values suitably estimated preserving semantics closest ancestors summary structure compression space reduced merging auxiliary values deleting elements 
algorithm scans tuples fringe summary structure tuples descendants summary structure deletes elements upper bound total count larger current bucket number auxiliary values parent elements suitably updated 
doing previously non fringe elements fringe elements considered iteratively 
point extract output hhhs user supplied threshold presents online algorithms arbitrary dimensional case 
proposition 
algorithm computes hhhs accurately space algorithm bounded insert exists domain insert create domain compress fringe domain split function children add fringe delete output print fringe domain children add fringe online algorithm split case online algorithms overlap section consider overlap case count item rolled parents 
discussed section subtleties approach need addressed online algorithm 
straightforward rolling element count parent elements iteratively levels lattice split case result overcounting errors worsened number hierarchical attributes increases 
effectively address situation algorithms additionally maintain dimensional case compensating count element summary structure 
compensating count name suggests compensate overcounting results straightforward rolling counts exploiting diamond property count propagation lattice structure 
diamond region lattice corresponds inclusion exclusion principle prevent overcounting 
illustrated count node obtained inclusion exclusion adding count nodes subtracting count 
specifically algorithms overlap case maintain summary structure consisting set tuples correspond samples input stream 
tuple consists element lattice bounded amount auxiliary information 
algorithms insertion lpar lpar lpar 
diamond property item common grandparent lattice 
sion output non trivial extensions strategy proposed case carefully account problem overcounting 
element dimensional case maintain auxiliary information lower bound total count rolled directly indirectly difference upper bound total count straightforwardly rolled lower bound upper bound total compensating count counts rolled grandchildren descendants rolled online algorithms dimensional case enable better understanding subtleties approach 
dimensional case notation evokes structure diamond 
algorithm split case input stream conceptually divided buckets width current bucket number denoted insertion phase similar split case see 
compression algorithm scans tuples fringe summary structure deletes elements upper bound total count larger current bucket number 
auxiliary values parent elements suitably updated 
account possibility overcounting count grandparent shared parents updated count 
strategy guarantees lower bound total count rolled compensating overcounting 
non fringe elements summary structure compensating count speculative taken account estimating upper bound total count fringe elements summary structure longer speculative tighter upper bound obtained tighter upper bound determine fringe elements compress 
split case compression phase previously non fringe elements fringe elements considered iteratively 
point extract output hhhs threshold output function needs sensitive diamond property fact counts hhh element considered determining hhh ness parent elements 
observe elements share insert insert insert exists domain domain create domain domain compress fringe domain children add fringe domain children add fringe domain delete output print fringe domain domain domain children add fringe domain domain domain children add fringe domain online algorithm overlap case parent hhhs compensating count parent element doing result 
general compensating count element may inaccurate sublattice left recursive element right recursive child element determined hhhs 
purpose 
elements encountered compensating counts ignored prevent underestimating discounted counts satisfy coverage constraint correctness 
proposition 
algorithm computes hhhs accurately space algorithm bounded higher dimensions extensions dimensional case straightforward naturally build diamond property dimensional case correspond generalized inclusion exclusion principle 
maintaining single compensating count higher dimensions algorithm maintains negative compensating count akin dimensions positive compensating count dimensions 
element compressed ancestors alternating levels lattice structure obtain negative speculative counts obtain positive speculative counts correspond negative positive terms inclusion exclusion formula respectively 
dimensions counts element get results similar ones proposed details journal version 
counterpart 
experiments section investigate goodness proposed online algorithms overlap split problem variants 
evaluated metrics size output generated algorithm amount memory execution 
yardstick consider size exact output offline algorithm 
comparison purposes naive algorithm mentioned section find heavy hitters set multi dimensional prefixes stream items 
algorithm uses auxiliary variables minimum frequency difference maximum minimum frequencies proposed algorithm uses storage ratio data structures due overhead storing item identifiers 
gaps algorithms large justify extra space tuple shall see 
plots terms number tuples 
real synthetic data sets experiments 
real data consists dimensional ip addresses source destination network flow measurements flow packet traces packet 
ip address space viewed experiments bit level 
overlap case example prefix compression employed proposed data structure 
ran proposed online algorithm overlap problem naive algorithm comparison variety parameter values depth hierarchies 
plots output sizes algorithms function timestep hierarchies induced considering bit prefix ip addresses 
difference sizes quite significant proposed algorithm yielding factor times smaller size factor 
compared exact answer computed offline algorithm timestep naive algorithm times larger respectively cases output proposed algorithm slightly twice exact 
visualization purposes plot outputs timestep algorithms prefix dimension mapped range axes represent source destination addresses respectively 
figures exact algorithm online algorithm indicate narrower distribution source destination addresses consistent fact flows outbound 
long horizontal rectangles naive algorithm misleading indicate opposite 
qualitatively see outputs offline online algorithms similar online output slightly larger superset offline output contrast output naive algorithm cluttered 
believe plots enable network managers visualize important features ip traffic 
differences algorithms packet data parameter values greater shown 
observed similar results parameter value combinations data sets tried omit brevity 
proposed algorithm gave better answers naive memory 
plots data structure sizes function timestep parameter values 
cases proposed algorithm average roughly half memory naive 
differences greater packet data shown 
drawn rectangle plane 
split case considered different instances split problem hash function 
implemented split smooth split random allocate functions see section descriptions 
presents plots output size data structure size function timestep smooth split function 
presents plots output size data structure size function timestep random allocate function 
experiments carried flow byte level prefixes 
significant feature experiments split output size methods exact algorithm items output identical exact algorithm 
naive algorithm factor space data structures gave times output algorithm split case smooth split function 
random allocate function observed factor difference size output data structure times big 
higher dimensions understand proposed online algorithm performs relative naive higher dimensions overlap prob space items timestep naive prop exact space items timestep comparison output sizes online algorithms overlap case exact answer size flow bit level hierarchies 
exact naive proposed visualizations sample outputs flow bit level prefixes timestep exact offline naive online proposed online algorithms 
lem ran similar set experiments flow time hierarchical hour minute second ms third attribute incoming stream elements arrive ordered attribute 
shows output size data structure size byte level prefixes 
relative output sizes compared exact answer increased online algorithms significantly naive algorithm 
proposed algorithm gave times items exact algorithm flow attributes ratio 
absolute numbers difference sizes went 
contrast naive algorithm output times items exact algorithm ratio dimensions 
absolute numbers difference went 
addition proportional gap sizes respective data structures widened factor 
superiority proposed algorithm compared naive appears grow increasing dimension 

extensions previous finding hhhs dimension considered model input consists deletions insertions data items 
typically applications referred section deletions occur consider streams warehouses representing sequences insertions 
discuss generalize results allow deletions known turnstile model 
deletions relative number naive prop exact tions simply modifying online algorithms subtract counts simulate deletions results reasonably accurate 
insertions deletions error approximate counts terms close desired error small deletions frequent able prove counts adequately approximated need different approach 
sketches handle case deletions compact randomized data structures give probabilistic guarantees approximate counts items presence insertions deletions 
similar approach apply keep sketches items starting descend lattice looking potential hhhs backtrack adjust counts necessary 
major disadvantage approach maintain sketch node lattice update sketch item insertion deletion 
space cost scales product depths hierarchies may costly applications 
motivating applications data warehouses data streams explicit deletion transactions common discuss extension 
extensions finding hhhs time window done employing methods framework 
straightforward adapt methods take selection predicates front similar bottom searching approaches 
space items timestep naive prop exact space items timestep comparison output sizes online algorithms overlap case exact answer size packet bit level hierarchies 
space items timestep naive prop space items timestep comparison data structure sizes online algorithms overlap case flow bit level hierarchies 
challenging allow specified data seen 

finding truly multidimensional hierarchical summarization data great importance traditional data warehousing environments emerging data stream applications 
formalized notion hierarchical heavy hitters hhhs variations studied depth 
particular proposed online algorithms approximately determining hhhs proven accuracy pass small space regardless number dimensions detailed experimental study algorithms shown remarkably accurate estimating hhhs 

arasu manku 
approximate counts quantiles sliding windows 
proceedings acm principles database systems 
beyer ramakrishnan 
bottom computation sparse iceberg cube 
proceedings acm sigmod naive prop exact naive prop international conference management data pages 
cormode korn muthukrishnan srivastava 
finding hierarchical heavy hitters data streams 
international conference large databases pages 
cormode muthukrishnan 
hot tracking frequent items dynamically 
proceedings acm principles database systems pages 
estan savage varghese 
automatically inferring patterns resource consumption network traffic 
proceedings acm sigcomm 
guha koudas shim 
data streams histograms 
proceedings symposium theory computing pages 
karp papadimitriou shenker 
simple algorithm finding frequent elements sets bags 
acm transactions database systems 
lakshmanan ng wang zhou johnson 
generalized mdl approach space items timestep naive prop space items timestep comparison data structure sizes online algorithms overlap case packet bit level hierarchies 
space items naive prop exact space items timestep timestep output size data structure size comparison output data structure sizes online algorithms smooth split case flow byte level prefixes summarization 
proceedings th international vitter wang iyer 
data cube approximation conference large data bases pages 
histograms wavelets 
proceedings th acm lee kim chung 
multidimensional selectivity international conferences information knowledge estimation compressed histogram information 
management pages 
proceedings acm sigmod international conference management data pages 
manku motwani 
approximate frequency counts data streams 
proceedings th international conference large data bases pages 
muthukrishnan 
data streams algorithms applications 
acm siam symposium discrete algorithms stream ps rutgers edu 
muthukrishnan poosala suel 
rectangular partitionings dimensions algorithms complexity applications 
proceedings icdt pages 
indyk guha koudas 
dynamic multidimensional histograms 
proceedings acm sigmod international conference management data pages 
naive prop naive prop space items naive prop exact space items timestep timestep output size data structure size comparison output data structure sizes online algorithms split case flow prefixes space items naive prop exact space items timestep timestep output size data structure size comparison output data structure sizes online algorithms overlap problem hierarchical dimensions flow byte level prefixes naive prop naive prop 
