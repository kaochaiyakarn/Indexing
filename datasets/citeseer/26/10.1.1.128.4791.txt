appeared proceedings th annual meeting psychology programmers interest group blackwell eds 
italy april pp 

influence psychology programming language design project status report john pane brad myers computer science department human computer interaction institute carnegie mellon university pane ppig cs cmu edu keywords pop barriers programming pop ii novice programmers pop iii cognitive dimensions pop iii new language 
research psychology programming pop related fields past years identified important usability issues programming languages tools 
new programming languages designed findings impact popular modern languages continue exhibit old problems 
reviews progress ongoing project elevate influence pop design new programming language 
context designing new programming language children cataloged interpreted prior performed new studies questions remained unanswered focused usability design 
addition producing system easier learn existing systems hope exemplify process adopted language designers improve usability systems 
research recognition capability program customize behavior computers generally useful skill benefit diverse people 
people trained programmers capability 
programming known difficult activity especially beginners 
difficulty intrinsic programming part relieved careful attention usability design programming languages tools 
goal research combine specific knowledge learned psychology programming pop general techniques principles human computer interaction hci guide design new programming systems 
summarizes date building new programming system children focus usability 
begins review prominent issues reported prior research beginner programmers describes open questions led conduct pair new studies examine children non programmers naturally express problem solutions 
studies exposed ways current programming languages force people express solutions 
informed results sketch preliminary system design addresses issues 
note features design elevate importance query specification known area difficulty beginners 
describe third study characterized problems users boolean expressions tested alternatives query specification 
new tabular query design performed significantly better boolean expressions incorporated programming system 
language design implementing continue perform additional studies children test usability 
historical emphasis programming language research early mid observed programming language research funding emphasized technical aspects domain neglected psychological aspects millions compilers hardly penny understanding human programming language 
programming languages obviously symmetrical computer side programmer 
appropriate science computer languages expect half effort computer side understanding translate languages executable form half human side understanding design languages easy productive 
enumeration psychological functions programming languages serve user 
course lots programming language design comes computer scientists 
technical papers languages contain appeals ease learning patently contain psychological evidence appeal psychological science human computer parts programming languages developed radical asymmetry newell card 
time substantial gains pop field related areas progress somewhat isolated technical research 
new languages usually spawned technical demands innovations gain critical mass adoption technical community 
pop research going influence designs new languages visible technical community form readily applied 
historically criteria guided design decisions technical objectives 
example designers may articulate goals build programming languages scalable efficient reusable provably correct mathematical elegance confronted design decisions fixed criteria designer select features similar existing languages different prior languages judged unsatisfactory particular point 
times designer may intuition guide design decisions 
suggest pop hci criteria techniques routinely included pool guidelines strategies drive language design 
new criteria weighted appropriate objectives particular design 
new language children take extreme position elevating usability criteria objectives 
designs place foremost emphasis certain technical requirements benefit consideration usability criteria 
recommendations prior research review prior research beginners yielded wealth information 
research consider scope expanded beginners 
challenging task gather literature diverse sources organize form applied disciplined way language design 
great contribution pop community publish definitive handbook collecting organizing state knowledge field 
collection research applicable beginners appears technical report pane myers 
intend take account points design language detail 
worthwhile highlight influential research themes prevalent 
field hci general principles heuristics apply programming system design consistent keep simple speak user language prevent errors help user get started 
nielsen 
cognitive dimensions framework provides excellent set specific guidelines assessing programming systems closeness mapping viscosity hidden dependencies imposed guess ahead visibility 
green petre 
difficult optimize dimensions independent 
improving system measure may result reduced performance 
guide making tradeoffs useful review studies target audience identify problems common 
review studies beginners prominent problems fall cognitive dimensions hci principles visibility 
memory overload problem programmers particularly troublesome beginners developed strategies relieve memory load anderson jeffries davies 
programming system information visible readily accessible time relevant 
closeness mapping 
programming process translating mental plan compatible computer hoc nguyen xuan 
language minimize difficulty translation providing high level primitives match operators plan including may specific domain programmer addressing program 
language provide high level operators programmers forced compose low level primitives achieve high level goals 
synthesis called greatest cognitive barriers programming lewis olson 
speak user language 
language avoid words symbols unfamiliar users conflicting meanings domains 
users sure attempt transfer knowledge domains familiar including natural language mathematics hoc nguyen xuan 
result errors confusion semantics programming language compatible semantics domains 
addition researchers noted von neumann computational model stumbling block beginners familiar real world counterpart du boulay du boulay shea monk 
usability improved selecting different model computation concrete real world system familiar audience mayer smith cypher spohrer 
permits users infer programming system consulting existing knowledge expectations modeled system 
language constructs features identified especially troublesome 
example looping control structures studied extensively difficult 
researchers identified ways improve performance redesigning structures closely match mental plans users soloway ehrlich wu anderson 
notable languages require users perform iteration situations aggregate operations accomplish task easily miller 
notoriously difficult task accurate specification boolean expressions 
studied extensively important areas programming database retrieval tasks 
researchers observed common uses words natural language lead errors words name boolean operators queries greene devlin gomez intended scope operator ambiguous eastman 
somewhat controversial topic textual visual language 
people argue programming difficult requires precise textual language system eliminates language inherently easier smith 
numerous researchers demonstrated situations textual languages outperform visual languages green petre 
visual languages better small tasks break large tasks 
news difficult learn program textual language 
fact successful user programming system spreadsheet text nardi 
studying language structure non programmers prior offers guidance things avoid programming language design fewer prescriptions ways implement necessary features 
failure provide closeness mapping explain certain aspects programming difficult set study problem solving non programmers 
objective identify properties solutions illuminate language designed better match beginners mental plans 
designed pair studies investigate language structure non programmers solutions programming problems similar studies conducted miller 
enumerated list essential concepts necessary programming variables boolean logic arithmetic iteration selected set tasks evoke concepts kinds programs arcade game program transforms calculates tabular data 
wanted capture natural responses participants took care bias language responses 
accomplish displayed graphical depictions tasks terse captions 
participants fifth graders local public school mixed race gender academic ability 
examining results saw interesting trends solutions 
ensure just finding looking developed rating form allow unbiased experts characterize solutions various dimensions 
done providing rating form independent analysts experienced programmers 
results analysts ratings 
study prevalent style programming suggested solutions rule event style pacman loses lives game 
participants tended perform operations aggregate iteration monsters turn blue run away 
natural language style arithmetic add score users mathematical expressions accurate 
objects normally moving remembered state pacman hits wall stops 
operations consistent list data structures arrays 
participants construct complex data structures traverse performed queries obtain necessary information needed 
boolean expressions avoided cases 
raters identified ways participants expressed necessary logic mutually exclusive set rules general case followed exception 
observed frequently disjunction intended treated lower precedence boolean operators contrary precedence programming languages 
pane myers describes full details studies 
implications design prior results studies began develop design new programming system children 
details design currently refined tested section sketches general idea 
chosen meeting concrete model computation 
scenario program represented group independent agents seated table 
agents represent encapsulated pieces program may cooperative adversarial roles accomplish tasks 
agents programmed programmer may represent libraries functionality provided system 
program data represented cards unique names include unlimited number slots containing attribute value pairs 
cards held hand particular agent private agent invisible agents 
cards placed table public visible modifiable agents 
features provide mechanisms data hiding sharing 
special area center table designated board represents runtime screen program seen user 
cards placed board displayed special way runtime contents appearance slot visible 
chosen textual representation program help ensure proposed language scale gracefully user builds larger complex applications 
agent textual agenda thought bubble head representing program 
agenda consists set event handlers actions perform event occurs 
system dispatches events placing event cards table 
agent sees event handler action handler invoked 
part action visible card viewed changed new cards created drawing blank cards new card pile filling slots existing cards deleted moving discard pile 
agent delete event card invoked action preventing agents seeing 
agents event handler event opportunity run system cleans removing event 
choices available determine agent goes multiple candidates issue decided 
language support queries accessing data 
result query group zero cards operated directly operators language 
programmer required write separate cases handle situations zero objects note words components system chosen audience 
working exact terminology final system 
returned object returned multiple objects returned 
features reflect observations users access data performing queries traversing data structures operate groups objects aggregate 
system supply agents provide high level functionality programmer 
example animation agent may provide automatic animation objects board values slots position velocity collision agent may monitor motions objects board report collisions placing collision events table 
timer agent may provide services related periodic time notification elapse time creating event cards visible agents 
mechanism encapsulating high level behavior agents available programmer enabling creation new abstractions easily shared programs 
contains sample event handler simplified implementation pacman 
event handler run system collision agent detected collision generated collision event 
event handler responds inspecting event see objects collided 
collision pacman wall velocity slot card representing pacman set zero causing animation agent moving pacman forward 
collision pacman system queried monsters returns list monster cards 
handler sets color slots blue monsters aggregate operator earlier set single slot 
time collision event appears collision event contains pacman collision event contains wall set pacman velocity cards match monster calling set color blue example event handler responds collisions pacman wall 
textual language verbose uses natural language style similar goodman taken care avoid consistency problems language thimbleby cockburn jones 
programming environment offer structure editing features popup menus command completion help users build syntactically correct programs reduce typing 
white space significant environment try indent code appropriately 
small set throw away words ignored needed code readable 
statements terminated punctuation semicolons control structures contain multiple statements delimiters 
delimiters repeat name control structure provide extra cues readability fitter green 
single conditional control structure offers features statements case statements unified way 
query results named temporarily identifier calling clause suggested miller pronoun rejected easy editing change binding variable accidentally 
design attempts provide essential features programming system way responds research beginner programmers 
meeting model offers concrete familiar metaphor computation von neumann model 
cards provide visibility concreteness variables data objects represented invisible way languages 
model supports event style programming observed common non programmers problem solving 
system encapsulates state objects system provided agents provide autonomy objects encapsulate code support inheritance features inappropriate beginners 
boolean queries revisited queries aggregate operations featured proposed system elevate importance usable query language 
prior offer ready solution conducted study investigate alternative designs query mechanism 
included alternative formulations observed earlier studies general case followed exception see accurate traditional boolean expressions 
addition prior research suggests non textual query languages may effective textual syntaxes young shneiderman study compared textual alternatives proposed new query language uses tabular forms integrate easily textual language 
new programming language represent data cards containing attribute value pairs designed query form card metaphor 
purposes study simplified forms leaving attribute names limiting number terms 
called match forms see 
criteria placed slots term slot 
terms single form implicitly form conjunction 
negation specified term operator 
disjunction specified including additional match form adjacent 

match forms expressing query blue square circle green dimensional layout similar grid tiles described anick 
dimension implements intersection implements union 
match forms provide cues help users remember operator uses dimension text form heading visual grouping 
addition scope operator explicit confining single term 
proposed query language express arbitrarily complex queries queries formulated concise way pure boolean expressions allow 
relieve somewhat forms proposed language allow entire form negated objects match feature study 
participants series problems tested ability interpret queries provided ability generate queries achieve desired result 
interpretation tasks shown query grid colored shapes instructed checkmark shapes selected query 
generation task grid shapes instructed write query result desired selection 
order avoid confounding results presentation order various problems counterbalanced query generation tasks completed query interpretation tasks 
thirteen children adults participated study 
significant differences children adults results reported group 
summary alternative textual formulations queries significantly better boolean expressions 
observe significant trends way various queries interpreted illustrate confusions people boolean expressions 
interpretation varied context interpreted select objects match blue circle boolean conjunction interpreted select objects match blue objects match circle boolean conjunction 
query interpreted query disjunction 
interesting reversal precedence attributed operator 
expression select objects match red square interpreted high precedence expression parenthesized red square interpreted low precedence 
expression select objects match triangle green interpreted high precedence interpreted low precedence 
supplied parenthesis try override tendency expression select objects match circle blue participants ignored parenthesis gave lower precedence gave high precedence 
results tabular query forms encouraging 
participants performed equally query forms boolean expressions interpreting queries performed significantly better generating queries match forms correct boolean expressions correct 
study word avoided programming languages misinterpreted 
dangerous rely implicit operator precedence rules parenthesis expression grouping unreliable 
tabular query forms offer promise improving accuracy queries new system 
full details study reported pane myers 
current currently refining details new computational model testing users understand know order accomplish goals 
system implementing include complete interactive programming environment features structure editing word completion facilitate program entry integrated debugging tools test final product comparison programming systems children hope demonstrate system easier learn 
addition producing new system children contains new model computation features suggested pop hci research plan apply process developing new systems audiences domains 
hopefully inspire language designers give prominent role pop hci research design process 
research funded part national science foundation 
iri 
opinions findings recommendations expressed material authors necessarily reflect national science foundation 
anderson jeffries 

novice lisp errors undetected losses information working memory 
human computer interaction 
anick brennan flynn alvey robbins 

direct manipulation interface boolean information retrieval natural language query proceedings thirteenth annual international acm sigir conference research development information retrieval pp 

brussels belgium 
davies 

information coding activities effects expertise environment task 
cook scholtz spohrer eds empirical studies programmers fifth workshop pp 

palo alto ca ablex publishing 
du boulay 

difficulties learning program 
soloway spohrer eds studying novice programmer pp 

hillsdale nj lawrence erlbaum associates 
du boulay shea monk 

black box inside glass box presenting computing concepts novices 
soloway spohrer eds studying novice programmer pp 

hillsdale nj lawrence erlbaum associates 
fitter green 

diagrams computer languages 
international journal man machine studies 
goodman 

complete hypercard handbook 
new york bantam books 
green petre 

visual programs harder read textual programs 
van der veer tauber eds human computer interaction tasks organisation proceedings ecce th european conference cognitive ergonomics rome 
green petre 

usability analysis visual programming environments cognitive dimensions framework 
journal visual languages computing 
greene devlin gomez 

ifs ands ors study database querying 
international journal man machine studies 
hoc nguyen xuan 

language semantics mental models analogy 

hoc green ay gilmore eds psychology programming pp 

london academic press 
lewis olson 

principles cognition lower barriers programming 
olson sheppard soloway eds empirical studies programmers second workshop pp 

norwood nj ablex 
mayer 

psychology novices learn computer programming 
soloway spohrer eds studying novice programmer pp 

hillsdale nj lawrence erlbaum associates 
eastman 

ambiguity negation natural language queries proceedings eighteenth annual international acm sigir conference research development information retrieval pp 

miller 

programming non programmers 
international journal man machine studies 
miller 

natural language programming styles strategies contrasts 
ibm systems journal 
nardi 

small matter programming perspectives user computing 
cambridge ma mit press 
newell card 

prospects psychological science human computer interaction 
human computer interaction 
nielsen 

heuristic evaluation 
nielsen mack eds usability inspection methods pp 

new york john wiley sons 
pane myers 

usability issues design novice programming systems school computer science technical report cmu cs 
pittsburgh pa carnegie mellon university 
pane myers 

tabular textual methods selecting objects group 
submitted publication www cs cmu edu pane study html 
pane myers 

studying language structure non programmers solutions programming problems 
international journal human computer studies appear 
smith cypher spohrer 

programming agents programming language 
communications acm 
soloway ehrlich 

cognitive strategies looping constructs empirical study 
soloway spohrer eds studying novice programmer pp 

hillsdale nj lawrence erlbaum associates 
thimbleby cockburn jones 

hypercard object oriented disappointment 
gray took eds building interactive systems architectures tools pp 

new york springer verlag 
wu anderson 

strategy selection change pascal programming 
koenemann moher robertson eds empirical studies programming fourth workshop pp 

new brunswick nj ablex publishing 
young shneiderman 

graphical filter flow representation boolean queries prototype implementation evaluation 
journal american society information science 

