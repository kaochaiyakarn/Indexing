dynamic points sets comparison static analyses potential applications program understanding optimization markus mock das craig chambers susan eggers department computer science engineering university washington box seattle mock eggers chambers cs washington edu compare behavior pointers programs approximated static pointer analysis algorithms actual behavior pointers programs run 
order perform comparison implemented known pointer analysis algorithms built instrumentation infrastructure tracking pointer values program execution 
experiments show number programs spec spec benchmark suites pointer information produced existing scalable static pointer analyses far worse actual behavior observed run time 
results implications 
tool supplement static program understanding tools situations static pointer information coarse usable 
second compiler profile data pointer values improve program performance ignoring aliases arise run time inserting appropriate run time checks ensure safety 
example able obtain factor speedup frequently executed routine ksim 
keywords points analysis alias analysis dynamic analysis program understanding program optimization program instrumentation 

programming languages today allow pointers 
pointers extensively programs simulate call semantics procedure calls emulate object oriented dispatch function pointers avoid expensive copying large objects implement list tree permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
paste june snowbird utah usa 
copyright acm 
microsoft research redmond wa microsoft com complex data structures objects allocated dynamically heap 
pointers useful powerful feature programs hard understand prevent optimizing compiler making code improving transformations 
attempt compensate negative effects pointer analysis algorithms devised past decade :10.1.1.25.6013:10.1.1.11.3368:10.1.1.22.4648
algorithms produce conservative approximation possible sets variables data structures functions particular pointer point specific program point referred points sets 
sets instance optimizing compiler determine expressions aliased refer object 
kinds pointer analysis algorithms designed 
flow context sensitive algorithms potentially produce precise results generally scale limits applicability relatively small programs lines code 
addition suggests typical programs spec benchmarks flow produce insignificant improvements das fast level flow algorithm shown scale lines code 
generally precise scalable algorithms points sets order tens hundreds objects 
clearly points sets large useful program understanding tool user know objects pointer store modify 
designing pointer analysis algorithm wanted find statically computed points sets agree actual program behavior different objects referenced particular pointer dereference compared number objects points set computed scalable pointer analysis algorithm 
dynamic points sets may tell close actual algorithms theoretical optimum may improve program understanding tools enable dynamic optimizations take alias relationships account 
example presenting user hundreds potential candidate targets pointer dereference program understanding tool dynamically observed targets user addition static dynamic sets agree inform user static information fact optimal just conservative approximation 
find precise expensive algorithm beneficial 
situations potentially unsound dynamic sets useful program understanding optimal points sets user interested pointer pointed particular program run instance debugging program desirable dynamically observed targets potential targets possible executions 
order obtain dynamic points information study slightly modified version instrumentation tool observe dynamic points sets set programs taken spec spec benchmark suites 
static average points set sizes ranged best scalable static pointer analysis algorithms dynamic points set sizes average geometric mean factor smaller 
additionally large majority dereferences dynamic points sets singletons 
means time tool similar integrated program understanding tool able tell user exact target dereference particular input data set 
higher fraction possible static analysis executed dereferences demonstrating considerable potential benefit program understanding systems 
furthermore dynamic optimizers take advantage fact dereference accesses object run time 
having smaller dynamic points sets may cause fewer expressions aliased program may allow optimizer better job section shows example exploiting dynamic alias information ensuing performance benefits 
contributions tool observe points information run time show large gap sizes dynamic points sets static points sets produced scalable static analyses produce sets general order magnitude larger show dynamic points sets time size average size close dereferences executed run time outline results improve program understanding tools dynamic program optimizers 
rest organized follows section example illustrating optimization potential dynamic pointer information 
describe instrumentation methodology section 
section discusses experimental results 
section discusses related section 
dynamic points set sizes may distinct different inputs potentially unsound smaller optimal sound solution general computable pointer analysis shown undecidable 
programs exercising large fraction execution paths spec benchmarks expect dynamic sets smaller optimal solution 

optimization example example illustrates potential benefits exploiting dynamic pointer information void align uint low uint high uint result uint diff result diff diff result low low low high high example shows simplified version routine ksim spec benchmark 
routine called number places code static alias analyses looked able determine run time arguments low high result aliased 
code optimizer assume store result overwrite value low preventing register allocation low 
similarly high result allocated registers reloaded memory time 
dynamic points sets available indicate low high result aliased feedback directed optimizer allocate memory targets registers inserting run time check ensure arguments fact aliased 
aliasing check fails slower code version memory targets reloaded executed 
resulting code look follows void align opt uint low uint high uint result uint diff aliased low high result slow version reloading result diff diff result low low low high high fast register allocated version register uint low high diff diff result low high dynamic points information required ensure transformation beneficial execution time penalty incurred run time check assures soundness faster code version selected sufficiently run time generally unknown absence profile information 
hand simulated register allocation example loading memory targets arguments local variables storing back procedure return 
transformation sound inserted check routine test arguments aliased 
speedup unoptimized version factor routine ksim executed compaq true unix workstation alpha processor running mhz 
versions compiled vendor compiler optimization flags 
speedups show potential benefits dynamic pointer information 

instrumentation instrumentation tool instrument applications 
system instrumenter obtain value profile variables data structures program 
variable data structure accessed pointer instrumenter inserts call runtime library function compares pointer value addresses potential target data structures variables pointer dereference potential target objects identified static alias analysis run instrumenter 
actual target object identified object value profile updated 
study changed instrumenter simply count potential target object pointer dereference accessed program run 
load store instruction instrumenter inserts array counter variables distinct array variable created dereference point size equal size static points set particular dereference 
load store instrumenter inserts call library routine matches pointer address addresses potential target objects dereference 
runtime matching routine returns integer identifies object matched corresponding counter incremented 
example pointer store val changed temp match object object addrs counter temp val object addrs data structure created updated code inserted instrumenter contain addresses variables data structures refer point 
example static points set size object addrs contain object addrs counter specific particular program point 
able match data structures heap calls memory allocation routines malloc instrumented 
run time list address malloc site pairs maintained address corresponding heap allocated data structure matched corresponding malloc site 
malloc site program point memory allocating function malloc called 
particular malloc call may executed multiple times run time multiple heap objects may represented malloc site 
consequently dynamic points set size represents malloc site may correspond multiple heap data structures run time 
similar static points analyses typically represent malloc site symbol represent heap data structures just representative heap symbol 
instrumented program finished contents counter variables written disk 
map file maps particular counter variable corresponding static points set dynamic points set computed set objects non zero counter value 
instance values counter array example know variable accessed accessed times variable times dereference 
dynamic points set dynamic points set size 
counters tell particular dereference executed example times execution frequencies compute weighted average dereferences executed program 
instance dereference program executed times dynamic points set size unweighted points average weighted average 
measure gives importance heavily executed dereferences weighted average may significant context points set size execution frequency relevant instance dynamic optimizations 

experiments compare static dynamic points sets ran alias analysis application 
fast scalable algorithms developed steensgaard das extension steensgaard algorithm proposed shapiro horwitz feasible time points algorithms instrumentation tool implemented machine suif infrastructure :10.1.1.11.3368
algorithm measure points set sizes executed dereference point program load store instruction suif intermediate representation compute average dereference points addition compute average weighted execution frequency dereference 
workload workload consists spec ksim perl spec benchmarks shown table 
benchmark list short description benchmark number lines code thousands static average dereference size pointer analysis algorithm 
looked programs todd austin pointer intensive benchmark suite study 
addition relatively small showed dynamic points sets results benchmarks study 
static points sets results table shows average points set sizes alias analysis algorithms implemented 
average static points sets sizes produced level flow algorithm ranged shapiro horwitz algorithm parameterized number symbol categories number runs 
randomly assigned symbols categories ran algorithm times intersection resulting points sets final result 
table 
description workload 
average dereference sizes shown arithmetic means dereference points program shown results level flow steensgaard shapiro horwitz algorithms 
empty entries indicate implementation ran memory finishing 
program description kloc equake seismic wave propagations simulation art image recognition neural networks equake mesa 
steensgaard algorithm fares worse points sets factor larger ksim produced algorithm 
largest application run implementation shapiro horwitz algorithm gzip larger applications ran memory 
points set sizes report steensgaard das algorithm slightly different ones reported 
differences come number sources different intermediate representation programs 
particular structure field access typically creates pointer dereference representation das 
treat constant strings differently read typically enforced compilers ignored targets stores 
das numbers ignore completely results include representative string constants 
include pointers functions points sets dereference points 
benchmarks points set sizes significantly different procedure targets included vortex gap simulate object oriented dispatching function pointers 
dynamic points sets results obtain dynamic points sets instrumented applications described section executed instrumented applications spec provided test inputs 
chose test inputs inputs take longer run 
instrumentation slows applications orders magnitude running average dereference size steensgaard shapiro horwitz mcf combinatorial optimization bzip compression gzip compression parser word processing vpr fpga circuit placement routing ksim motorola instruction set simulator perl perl interpreter gap group theory interpreter mesa graphics library inputs generally finish day 
expect results largely unchanged larger inputs tend run program parts confirm intuition ran gzip parser perl mesa inputs results 
tuning profiling infrastructure speed allow run larger inputs reasonable time day takes inputs 
table compare average sizes dynamically observed points sets application average sizes corresponding static sets 
table static pointsto set sizes include dereference points table dereference points included executed 
allows comparison dynamic points sets determinable executed dereferences 
show simple average points sets sizes weighted average points set size weighted execution frequency dereference 
average dynamic points set sizes close ranging maximum averages produced static analyses higher 
generally precise analysis study level flow algorithm sizes times larger 
equake art bzip algorithms able produce result dynamic points sets common programs pass pointers just data structure context insensitivity appear introduce imprecision 
table 
dynamic versus static points set size average simple weighted averages shown 
average dynamic average static size executed dereferences program dereference size level flow steensgaard shapiro horwitz simple weighted simple weighted simple weighted simple weighted equake art mcf bzip gzip parser vpr ksim perl gap mesa applications steensgaard algorithm fared worse ratios static dynamic sizes ranging 
general version shapiro horwitz algorithm produced points sets larger algorithm smaller sets produced steensgaard 
table includes numbers benchmarks able run algorithm completion running memory 
striking results experiments shown table shows number points sets singletons size 
dynamic points sets singletons average 
result surprising single program run routines called multiple times different places different arguments addresses different locals 
result implies cases program understanding tool uses dynamic information user single target pointer dereference 
number singleton sets produced static analysis generally smaller 
algorithm exception equake bzip number dynamic static singleton sets identical number singleton sets factor smaller 
consequently average geometric mean executed dereferences dynamic singleton sets static singleton sets 
remaining dereferences program understanding tool optimizer executed dereference points represented mesa equake dereferences program 
purely static information deal uncertainty sets size larger dynamic information pinpoint exactly pointer target particular input data set 
summary static points sets factor larger static counterparts geometric mean 
comparing weighted average points sets sizes improves ratios programs art mcf parser get worse stay 
table 
number dereferences singleton dynamic points sets percentage total dereferences program number static singleton sets number dynamic singleton sets percentage dynamic singleton sets weighted equake art mcf bzip gzip parser vpr ksim perl gap mesa computed lower bound number cases static pointer information optimal counting number static points sets identical dynamic sets 
exception bzip equake dereferences optimal percentages ranged art perl optimal static points sets 
consequently dereferences tool able establish optimality statically computed information instance direct expensive precise static analyses optimality established 
similarly program understanding system information assign confidence rating pointer targets focusing user attention definitely feasible pointer targets 
furthermore runtime optimization techniques redundant load elimination shown example section optimize code cases purely static optimizations impeded conservative static information 

related far know represents application program instrumentation observe points sets run time compare static equivalents 
previous dynamic memory disambiguation bernstein attempted improve execution time numeric programs array accesses 
compile time heuristics select inner loops benefit optimization assuming aliasing 
loops duplicated run time aliasing check selects appropriate code version 
avoid slowdowns heuristic conservative consequently approach achieved speedups 
dynamic aliasing data expose optimization opportunities purely static heuristic 
diwan binary instrumentation measure effectiveness redundant load elimination memory disambiguation alias analysis 
compared number simple algorithms strongly typed object oriented languages java modula measuring remaining percentage redundant loads eliminating loads identified redundant particular alias analysis algorithm 
languages benchmarks study able show best static algorithm close optimal 
suggests static alias analysis successful strongly typed languages weakly typed language examined 
mentioned dynamic sets may smaller optimal sets unsound 
static points sets equal dynamic counterpart definitely represent optimal information 
proposed hardware extension processors support register allocation variables may possibly aliased 
hardware table compiler support loads stores register allocated aliased variables forwarded register allocated 
simulation reduction loads stores 
scheme requires change processor hardware scheme sketched section requires hardware modifications 
das looked lower upper bounds number possibly aliased data procedures 
procedure memory occurring procedure form pairs memory 
pairs static points sets compute pairs aliased compared alias relationships lower bound pair considered aliased consisted identical 

able show existing static scalable analyses number reported aliased close lower bound 
remaining pairs cases actual points set size matters debugging dynamic points sets useful 

comparison pointer analysis information produced static analyses actual dynamically occurring behavior 
slightly modified instrumentation tool developed context system observed dynamically occurring points sets 
static points sets order tens hundreds objects dereference best scalable algorithm actual dynamically occurring sets smaller sets singletons average sizes close 
suggests tool supplement program understanding tools significantly enhance usefulness improving purely static information 
furthermore profile data pointer values exploited feedback directed optimization potentially high performance benefits 
assess potential improvement program understanding tools obtain dynamic points information currently integrating dynamic points sets information program slicer plan compare slices static points information slices dynamic points information quantify potential advantages smaller dynamic sets 

acknowledgments mike smith glenn holloway machine suif technical help 

anderson 
program analysis specialization programming language 
ph thesis diku university copenhagen may 
diku report 
austin breach sohi 
efficient detection pointer array access errors 
sigplan conference programming language design implementation pages june 
bernstein cohen maydan 
dynamic memory disambiguation array 
proceedings th international symposium microarchitecture pages november 
choi burke carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
th annual acm sigact sigplan symposium principles programming languages pages january 
das 
unification pointer analysis directional assignments 
sigplan conference programming language design implementation pages june 
das hndrich rehof 
estimating impact scalable pointer analysis optimization 
microsoft research technical report 
january 
appear proceedings th international static analysis symposium july 
diwan mckinley moss 
type alias analysis 
sigplan conference programming language design implementation pages june 
emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
sigplan conference programming language design implementation pages june 
ghiya hendren 
connection analysis practical interprocedural heap analysis international journal parallel programming december 
holloway young 
flow analysis libraries machine suif 
proceedings nd suif compiler workshop august 
hind 
pointer analysis 
acm sigsoft international symposium software testing analysis issta pages august 
landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
sigplan conference programming language design implementation pages june 
liang harrold 
efficient points analysis program analysis 
proceedings th european software engineering conference acm sigsoft foundations software engineering pages september 
mock chambers eggers 
tool automating dynamic compilation 
nd workshop feedback directed optimization november 
mock chambers eggers tool automating selective dynamic compilation 
proceedings rd annual symposium microarchitecture pages december 
greene mudge 
store load address table speculative register promotion 
proceedings rd annual symposium microarchitecture pages december 
ramalingam 
undecidability aliasing 
acm transactions programming languages systems september 
shapiro horwitz 
fast accurate flow insensitive points analysis 
conference record popl symposium principles programming languages january 
smith 
extending suif machine dependent optimizations 
proceedings suif compiler workshop pages january 
steensgaard :10.1.1.11.3368
points analysis linear time 
symposium principles programming languages pages january 
wilson lam 
efficient context sensitive pointer analysis program 
sigplan conference programming language design implementation pages june 
yong horwitz reps pointer analysis programs structures casting 
sigplan conference programming language design implementation pages may 
