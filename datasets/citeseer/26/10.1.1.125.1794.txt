linear suffix array construction juha rkk inen university helsinki helsinki finland peter sanders university karlsruhe karlsruhe germany stefan burkhardt google zurich switzerland 
suffix trees suffix arrays widely largely interchangeable index structures strings sequences 
practitioners prefer suffix arrays due simplicity space efficiency theoreticians suffix trees due linear time construction algorithms explicit structure 
narrow gap theory practice simple linear time construction algorithm suffix arrays 
simplicity demonstrated implementation effective lines code 
algorithm called dc stems central underlying concept difference cover 
view leads generalized algorithm dc allows space efficient implementation supports choice space time tradeoff 
runs vn time space addition input string suffix array 
variants algorithm parallel hierarchical memory models computation 
algorithms bsp erew pram models asymptotically faster previous suffix tree array construction algorithms 
categories subject descriptors data structures arrays computation devices modes computation parallelism concurrency analysis algorithms problem complexity algorithms problems sorting searching information storage retrieval content analysis indexing indexing methods preliminary version article appeared proceedings th international conference automata languages programming 
lecture notes computer science vol 

springer verlag berlin heidelberg germany pp 

rkk inen supported academy finland 
authors addresses rkk inen department computer science box min fi university helsinki helsinki finland mail juha cs helsinki fi sanders universit karlsruhe karlsruhe germany mail sanders ira uka 
de burkhardt google 
zurich switzerland mail burkhardt google 
com 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm penn plaza suite new york ny usa fax permissions acm org 
acm journal acm vol 
november pp 

linear suffix array construction general terms algorithms theory additional key words phrases difference cover external memory algorithms suffix array 
suffix tree weiner string compact trie suffixes 
powerful data structure numerous applications computational biology gusfield grossi italiano 
constructed linear time length string weiner mccreight ukkonen farach farach colton 
suffix array gonnet manber myers lexicographically sorted array suffixes string 
contains information suffix tree implicit form simpler compact data structure applications gonnet manber myers burrows wheeler 
lineartime construction algorithm lexicographic traversal suffix tree 
due explicit structure direct linear time construction algorithms theoreticians tend prefer suffix trees suffix arrays 
evident example textbooks including ones crochemore rytter smyth 
practitioners hand suffix arrays space efficient simpler implement 
difference theoretical practical approaches appears single navarro baeza yates 
address gap theory practice describing direct linear time suffix array construction algorithm elevating suffix arrays equals suffix trees sense 
independently simultaneously result originally appeared rkk inen sanders different linear time algorithms introduced kim ko 
article introduce extensions generalizations algorithm including space efficient parallel external memory variants 

linear time algorithm 
linear time suffix tree construction algorithms truly linear time constant alphabet size alphabet constant weiner mccreight ukkonen 
farach introduced algorithm overcome restriction works linear time integer alphabet characters integers linear sized range 
significant improvement string alphabet transformed string sorting characters replacing ranks 
preserves structure suffix tree order suffixes 
consequently complexity constructing suffix tree string complexity sorting characters string farach colton 
algorithms requiring constant alphabet incremental adding suffix character time tree farach algorithm takes half recursive divide conquer approach construct suffix tree suffixes starting odd positions 
done reduction suffix tree construction string half length solved recursively 
construct suffix tree remaining suffixes result step 
rkk inen 
merge suffix trees 
crux algorithm merging step intricate complicated procedure 
structure appears parallel external memory suffix tree construction algorithms farach muthukrishnan farach farach colton direct linear time suffix array construction algorithm kim 
cases merge complicated procedure 
linear time suffix array construction algorithm ko uses divide conquer approach sorting subset sample suffixes recursion 
choice sample rest algorithm quite different 
introduce linear time suffix array construction algorithm structure farach algorithm recursion half recursion construct suffix array suffixes starting positions mod 
done reduction suffix array construction string thirds length solved recursively 
construct suffix array remaining suffixes result step 
merge suffix arrays 
surprisingly thirds half suffixes step step trivial simple comparison merging sufficient 
example compare suffixes starting mod mod compare initial characters compare suffixes starting relative order known step 

space efficient algorithms 
suffix array construction algorithms require pointers integers extra space addition characters input pointers integers suffix array 
true algorithms running log time 
called lightweight algorithms significantly extra space manzini ferragina worst case time complexity 
manzini ferragina raised question possible achieve log runtime sublinear extra space 
question answered positively burkhardt rkk inen algorithm running log time log extra space 
gave generalization running log nv time extra space 
article combining ideas burkhardt rkk inen linear time algorithm improve result nv time extra space leading log time extra space algorithm 
achieve result generalize linear time algorithm sample suffixes sorted step chosen family called difference cover samples includes arbitrarily sparse samples 
family introduced burkhardt rkk inen name comes characterization concept difference cover 
difference covers vlsi design kilian distributed mutual exclusion luk wong ling quantum computing 
linear suffix array construction table suffix array construction algorithms model computation complexity alphabet source ram log time general external memory vitter shriver disks block size fast memory size cache oblivious cache blocks size bsp valiant processors relation time gh db log db log time integer log os log log internal os log internal log log log log integer integer log cache faults general cache faults general manber myers larsson burkhardt rkk inen farach kim ko article ferragina farach colton article ferragina farach colton article gn log log log time general farach log time gn log log general article processors log gn time integer article erew pram log time log general farach log time log general article arbitrary crcw pram log time rand 
constant farach muthukrishnan priority crcw pram log time rand 
constant article algorithms farach muthukrishnan farach farach farach colton indirect construct suffix tree transformed suffix array 
space efficient approach construct compressed indexes lam hon na 
algorithms runs linear time integer alphabets fact recursion algorithm na 

advanced models computation 
algorithm constructed studied building blocks integer sorting merging simple direct suffix array construction algorithms models computation corollary 
table summarizes results 
win factor log previously best direct external memory algorithm 
bsp erew pram models obtain improvement previous results including linear bsp algorithm 
rkk inen 
overview 
article organized follows 
section explains basic linear time algorithm dc 
concept difference cover introduced section describe generalized algorithm called dc section leads space efficient algorithm section 
section explains implementations dc algorithm advanced models computation 
results open issues discussed section 
notation shorthands ranges integers extend substrings seen 
input suffix array construction algorithm string tn alphabet sequence integers range 
convenience assume assume multiple constant square avoid proliferation trivial case distinctions operations 
implementation spell case distinctions pad sub problems appropriate number zero characters 
restriction alphabet serious 
string alphabet sort characters remove duplicates assign rank character construct new string alphabet renaming characters ranks 
renaming order preserving order suffixes change 
si denote suffix tn 
extend notation sets sc si 
goal sort set suffixes comparison substrings tuples assumes lexicographic order article 
output suffix array sa permutation satisfying ssa ssa ssa 

linear time algorithm detailed description simple linear time algorithm call dc difference cover modulo see section 
complete implementation appendix execution algorithm illustrated example looking suffix array step construct sample define sa 
bk mod 
set sample positions sc set sample suffixes 
example 

linear suffix array construction step sort sample suffixes construct strings rk tk tk tk tk tmax bk tmax bk characters triples ti 
note character rk unique tmax bk 
concatenation 
nonempty suffixes correspond set sc sample suffixes ti ti ti ti corresponds si 
correspondence order preserving sorting suffixes get order sample suffixes sc 
example 
abb ada bba bba dab bad 
sort suffixes radix sort characters rename ranks obtain string characters different order characters gives directly order suffixes 
sort suffixes algorithm dc 
example 
sar 
sample suffixes sorted assign rank suffix 
rank si denote rank si sample set sc 
additionally define rank sn rank sn 
rank si undefined 
rank si 
example 
step sort suffixes represent suffix si sb pair ti rank si 
note rank si defined 
clearly si ti rank si rank 
pairs ti rank si radix sorted 
example 

step merge sorted sets suffixes merged standard comparison merging 
compare suffix si sc sb distinguish cases si ti rank si rank si ti ti rank si rank note ranks defined cases 
example 

time complexity established theorem 
theorem 
time complexity algorithm dc 
proof 
excluding recursive call clearly done linear time 
recursion string length 
time recurrence solution 
rkk inen 
difference cover sample sample suffixes dc special case difference cover sample 
section describe difference cover samples section give general algorithm difference cover samples 
sample algorithms satisfy sample conditions sample sorted efficiently 
certain special cases known satisfy condition see rkk inen ukkonen andersson clifford sergot ko examples 
example random sample reason 
difference cover samples sorted efficiently periodic small period 
steps general algorithm modified sorting periodic sample size period length vm time 
sorted sample helps sorting set suffixes 
set difference cover sample positions property small sample positions 
see steps section property utilized algorithm 
difference cover sample difference covers kilian ling 
definition 
set cover modulo mod 
definition 
periodic sample period mod difference cover sample difference cover modulo periodic difference cover sample satisfies sample conditions 
satisfies second condition shown lemma lemma 
difference cover modulo integers exists mod mod 
proof 
definition difference cover exists mod 
mod mod mod note lookup table size maps mod value computed constant time 
size difference cover key parameter space efficient algorithm sections 
clearly lower bound 
best general upper bound aware achieved simple algorithm due ling lemma ling 
difference cover modulo size computed time 
sizes smallest known difference covers period lengths shown table ii 
linear suffix array construction table ii 
known difference cover modulo period lengths va difference covers obtained luk wong burkhardt rkk inen computed algorithm ling 
sizes known optimal 

general algorithm algorithm dc sorts suffixes starting positions difference cover sample modulo uses sort suffixes 
section generalized algorithm dc difference cover modulo step construct sample define bk mod 
set sample positions bk 
step sort sample suffixes construct strings rk tk tk vtk tk tmax bk tmax bk 
rk denotes concatenation 
nonempty suffixes correspond sample suffixes sorted recursively period length ensure convergence recursion 
rank si defined dc additionally define rank sn rank sn rank sn 
rank si undefined step sort suffixes sort separately 
mod sort represent suffix si tuples ti ti ti rank si 
note rank defined 
tuples radix sorted 
straightforward generalization dc merge sets way merging time comparisons giving nv log time complexity 
take slightly different approach 
step sort characters separate sample suffixes sc sets keeping set ordered 
sets sorted sequences 
concatenate sequences sort result stably characters 
set suffixes starting bk algorithm separated suffixes sets bk correctly sorted 
sets grouped groups sorted 
rkk inen situation look aaa aaa aaa aab aab aab step merge merge sets bk set completes sorting 
merging done comparison way merging 
mod mod suffixes si compared comparing rank si rank 
gives correct order si belong set ti jtj 
aac theorem 
time complexity algorithm dc vn 

lightweight algorithm explain implement algorithm dc space addition input output 
reuse space output array intermediate storage 
step construct sample sample represented starting positions 
step sort sample suffixes sort sample suffixes non inplace radix sort tuples start sample positions 
easy arrays size storing starting positions samples counters character stored output array 
analogous arrays sa appendix renaming tuples ranks needs space recursive subproblem 
space bound applies suffix array sample space needed recursive call 
step sort suffixes sorting suffixes particular class amounts radix sorting tuples integers range 
similar step need space describing tuples 
arrange sorted tuples output array available counters step 
solve problem viewing character range 
step sort characters scan suffix array sample store sample suffixes maintaining order sample class computation step output array stores desired concatenation sorted sets sort suffixes stably characters 
counter array size passes total time vn additional space applying inplace distribution sorting algorithm theorem appendix 
note 
linear suffix array construction table iii 
overview adaptations advanced models computation model computation complexity alphabet external memory vitter shriver disks block size fast memory size cache oblivious bsp valiant processors relation time gh db log log log log log os internal integer cache faults general gn log time log general processors log gn time integer erew pram log time log general priority crcw pram step merge log time randomized constant suppose stored 
array consists consecutive possibly empty subarrays represent respectively 
merge bk additional space inplace merging routine see theorem appendix 
note 
theorem 
algorithm dc implemented run time vn additional space 
upper bound increased comparison algorithm burkhardt rkk inen 

advanced models section adapt dc algorithm advanced models computation 
explain main ideas bundle results theorem 
adaptation memory hierarchies easy operations described terms scanning sorting permuting sequences tuples standard techniques 
scanning trivial permuting equivalent sorting really need external sorting algorithm 
proof concentrates bounding internal associated integer sorting 
parallelization slightly complicated scanning needed find ranks elements looks sequential process glance 
technique overcome standard consider sorted array 
define ifc 
prefix sums give rank 
computing prefix sums parallel studied problem 
theorem 
dc algorithm implemented achieve performance guarantees shown table iii advanced models computation 
rkk inen proof external memory 
step dc algorithm begins scanning input producing tuples kt 
tuples sorted lexicographic order character triples 
results scanned producing rank position pairs 
constructing recursive problem instance amounts sorting lexicographic order comparing positions form similarly assigning ranks sample suffix position suffix array sample amounts sorting pairs form 
step sorts triples form ti rank si 
step represents rank rank rank rank 
way information needed comparisons available 
representations produced additional sorting scanning passes 
detailed description analysis external dc 
turns total volume equivalent amount needed sorting words memory plus needed scanning words 
complexity external suffix array construction governed effort sorting objects consisting constant number machine words 
keys integers range pairs triples integers 
optimal deterministic parallel disk sorting algorithms known nodine vitter 
remarks regarding internal 
achieve optimal internal values radix sort significant digit log bits remaining digits log bits 
sorting starts logm data distribution phases need linear implemented db os strategy nodine vitter 
remains stably sort elements log significant bits 
done multiple phases distribution sorting similar nodine vitter afford count key appears information produce splitters perfectly balance bucket sizes may large buckets identical keys problem sorting required 
mapping keys buckets lookup tables size 
cache oblivious algorithms similar external algorithms single disk allowed explicit block size internal memory size serious restriction cache oblivious integer sorting logm cache faults log known 
go comparison alphabet model 
result immediate corollary optimal comparison sorting algorithm 
erew pram 
cole merge sort cole parallel sorting merging 
input size processors cole algorithm takes time log log 
ith level recursion input size takes time io log log 
log levels recursion simpler randomized algorithms favorable constant factors available sanders 
linear suffix array construction problem size reduced far remaining subproblem solved time log single processor 
get execution time log log 
bsp 
case processors proceed erew pram algorithm optimal comparison sorting algorithm goodrich log takes time log gn log 
case processors linear sorting algorithm radix sort chan dehne linear merging algorithm 
integer sorting algorithm remains applicable log log levels recursion dc algorithm 
afford switch comparison algorithm increasing amount internal 
crcw pram 
employ stable integer sorting algorithm rajasekaran reif works log time linear keys log log bits 
algorithm log log log iterations constant input alphabets 
afford switch algorithm hagerup raman works keys log bits price inefficient factor log log 
comparison merging implemented linear log time hagerup 
resulting algorithms simple may complicated subroutines sorting obtain theoretically optimal results 
usually simpler implementations sorting practice may sacrifice determinism optimality certain combinations parameters 

main result article dc simple direct linear time algorithm suffix sorting integer alphabets 
algorithm easy implement example advanced string algorithms undergraduate level algorithms courses 
simplicity ideal candidate implementation advanced models computation 
experiments external memory implementation parallel implementation mpi sanders show excellent performance scalability 
concept difference covers possible generalize dc algorithm 
generalized dc algorithm allows space efficient implementation 
obvious remaining question adapt dc advanced models computation space efficient way 
external memory model possible know approach needs volume nv 
space efficient algorithm adapted sort arbitrary set suffixes simply excluding suffixes want sort steps 
sorting set suffixes implemented run vm time additional space 
previously alternatives string sorting mn worst case time sorting suffixes additional space 
space efficient burrows wheeler transform rkk inen relies space efficient sorting subsets suffixes 
rkk inen applications manber myers rkk inen suffix array needs augmented longest common prefix array lcp stores length longest common prefix sai sai lcp 
lcp information known easy infer advanced search data structures suffix trees string trees ferragina grossi 
simple linear time algorithms computing lcp array suffix array manzini appear suitable parallel external computation 
farach algorithm farach half recursive algorithms compute lcp array level recursion needed merging 
similar technique dc algorithm modified compute lcp array byproduct sa sa find sample 
lcp computed locally 
lcp lcp sk 
lcp sk approximated additive term lcp information recursive string range minima queries 
operations implemented parallel memory hierarchies standard techniques 
appendix source code file contains complete linear time implementation suffix array construction 
main purpose code prove algorithm simple natural language description hiding complications 
noted faster complicated implementations algorithm 
driver program athttp www mpi sb mpg de sanders programs suffix 
inline bool leq int int int int lexicographic order return pairs inline bool leq int int int int int int return leq triples stably sort keys static void int int int int int count occurrences int new int counter array int reset counters int count occurrences int sum exclusive prefix sums int sum sum int sort delete find suffix array sa require void int int sa int int linear suffix array construction int int new int int sa new int sa sa sa int new int int sa new int step construct sample generate positions mod mod suffixes adds dummy mod suffix int step sort sample suffixes lsb radix sort mod mod triples sa sa sa find lexicographic names triples write correct places int name int sa sa sa name sa sa sa sa sa name write sa name write recurse names unique name sa name store unique names suffix array int sa generate suffix array directly int sa step sort suffixes stably sort mod suffixes sa character int sa sa sa step merge merge sorted sa suffixes sorted sa suffixes int define sa sa sa int pos current offset suffix int sa pos current offset suffix sa different compares mod mod suffixes leq sa rkk inen leq sa suffix sa smaller sa done sa suffixes left sa sa suffix sa smaller sa done sa suffixes left sa delete delete sa delete sa delete inplace stable sorting merging lightweight implementation dc algorithm need subroutines combinations known ideas 
outline keep article self contained 
idea inplace instable distribution sorting mcilroy algorithm works similar routine appendix reuses input array allocate output buckets 
character moved destination bucket array entry taken element distributed 
process continued element encountered moved 
order moving elements decomposes permutation implied sorting constituent cycles 
termination condition easy check cycle ends get back element started cycle 
unfortunately order moving elements destroy preexisting order keys identical value instable 
second idea avoids instability reinterpretation input sequence blocks 
example inplace multiway merging files standard technique external memory processing witten section 
synthesis ideas leads file stable implementation distribution sorting multiway merging followed inplace permutation block level converts file representation back array representation 
details proofs theorems 
gives example 
theorem 
array containing elements keys range stably sorted time kn additional space 
proof 
key denote th bucket sequence elements key sorting means permute way bi bi 
counting phase computes bucket sizes 
reinterpret sequence blocks size 
time buckets represented sequences blocks 
key create initially empty bucket implemented array pointers blocks 
bi mod elements block linear suffix array construction fig 

example distribution algorithm 
states shown distribution blocks distributed blocks distributed final sorted arrays 
numbers give order block moves final permutation 
example additional blocks needed temporary storage 
left empty distribution process 
way elements immediately moved correct position mod buckets additional blocks free list needed 
block bucket block bucket 
way partially filled block remains block bk stored preallocated block outside free list initially equipped empty blocks 
distribution process scans input sequence appends element key bucket element input block consumed block added free list 
point time partially filled blocks input sequence start bucket bucket free list runs available blocks 
distribution phase blocks permuted way sorted array 
blocks viewed nodes directed graph nonempty block edge leading block stored sorted order 
nodes graph maximum degree degree graph collection paths cycles 
paths empty blocks structure exploited permutation algorithm outermost loop scan blocks encounter nonempty block moved destination position 
block moved temporary space repeatedly swap block content moved reach path cycle 
blocks moved final destination additionally allocated blocks moved final position directly 
includes partially filled block bk 
total space overhead kb nk additional blocks nk representing buckets nk pointers tell block wants go 
theorem 
array consisting sorted subarrays sorted time log kn additional space 
rkk inen proof 
algorithm similar distribution algorithm theorem outline differences 
reinterpret subarrays sequences blocks partially filled block start 
blocks completely belong subarray handed free list 
smallest elements sequence kept priority queue 
merging repeatedly removes smallest element appends output sequence represented sequence blocks free list 
merging process remains permute blocks obtain sorted array 
space priority queue space overhead distribution sorting 
kurtz ohlebusch 
replacing suffix trees enhanced suffix arrays 
disc 


ohlebusch kurtz 
optimal exact string matching suffix arrays 
proceedings th international symposium string processing information retrieval 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
andersson larsson swanson 
suffix trees words 
algorithmica 

golomb rulers difference sets succinct quantum automata 
int 

comput 
sci 

burkhardt rkk inen 
fast lightweight suffix array construction checking 
proceedings th annual symposium combinatorial pattern matching 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
burrows wheeler 
block sorting lossless data compression algorithm 
tech 
rep src digital palo alto 
chan dehne 
note coarse grained parallel integer sorting 
parall 
proc 
lett 

clifford sergot 
distributed paged suffix trees large genetic databases 
proceedings th annual symposium combinatorial pattern matching 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
ling 
quorums difference covers 
inf 
process 
lett 
july 
cole 
parallel merge sort 
siam comput 

ferragina 
theoretical experimental study construction suffix arrays external memory 
algorithmica 
crochemore rytter 

world scientific singapore 
rkk inen sanders 
better external memory suffix array construction 
acm journal experimental algorithmics 
appear 
earlier version 
sanders 
asynchronous parallel disk sorting 
proceedings th annual symposium parallelism algorithms architectures 
acm new york 
farach 
optimal suffix tree construction large alphabets 
proceedings th annual symposium foundations computer science 
ieee computer society los alamitos ca 
farach ferragina muthukrishnan 
overcoming memory bottleneck suffix tree construction 
proceedings th annual symposium foundations computer science 
ieee computer society los alamitos ca 
farach muthukrishnan 
optimal logarithmic time randomized suffix tree construction 
proceedings th international conference automata languages programming 
lecture notes computer science vol 

springer verlag london uk 
farach colton ferragina muthukrishnan 
sorting complexity suffix tree construction 
acm 
ferragina grossi 
string tree new data structure string search external memory applications 
acm 
linear suffix array construction leiserson ramachandran 
cache oblivious algorithms 
proceedings th annual symposium foundations computer science 
ieee computer society los alamitos ca 

merging bsp model 
paral 
comput 

gonnet baeza yates snider 
new indices text pat trees pat arrays 
information retrieval data structures algorithms frakes baeza yates eds 
prentice hall englewood cliffs nj 
goodrich 
communication efficient parallel sorting 
siam comput 

grossi italiano 
suffix trees applications string algorithms 
di ricerca cs universit ca di venezia italy 
gusfield 
algorithms strings trees sequences computer science computational biology 
cambridge university press cambridge uk 
hagerup raman 
waste tight bounds loose parallel sorting 
proceedings rd annual symposium foundations computer science 
ieee computer society los alamitos ca 
hagerup 
optimal merging sorting erew pram 
inf 
proc 
lett 

hon lam sung 

constructing compressed suffix arrays large alphabets 
proceedings th international symposium algorithms computation 
lecture notes computer science vol 

springer berlin heidelberg germany 
hon sung 

breaking time space barrier constructing full text indices 
proceedings th annual symposium foundations computer science 
ieee computer society los alamitos ca 

parallel algorithms 
addison wesley reading ma 
rkk inen 
suffix cactus cross suffix tree suffix array 
proceedings th annual symposium combinatorial pattern matching 
lecture notes computer science vol 

springer verlag berlin heidelberg uk 
rkk inen 
fast small space blockwise suffix sorting 
theor 
comput 
sci 
appear 
rkk inen sanders 
simple linear suffix array construction 
proceedings th international conference automata languages programming 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
rkk inen ukkonen 
sparse suffix trees 
proceedings nd annual international conference computing combinatorics 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
lee arikawa park 
linear time longest computation suffix arrays applications 
proceedings th annual symposium combinatorial pattern matching 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
kilian leiserson 
organization permutation architectures interconnections 
ieee trans 
comput 
nov 
kim sim park park 
constructing suffix arrays linear time 
disc 

june 
ko 
space efficient linear time construction suffix arrays 
disc 

june 
sanders 
scalable parallel suffix array construction 
proceedings th european pvm mpi user group meeting 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
lam sung 

space time efficient algorithm constructing compressed suffix arrays 
proceedings th annual conference computing combinatorics 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
larsson 
faster suffix sorting 
tech 
rep lu cs tr dept computer science lund university sweden 
rkk inen luk wong 

new quorum algorithms distributed mutual exclusion 
proceedings th international conference distributed computing systems 
ieee computer society los alamitos ca 
manber myers 
suffix arrays new method line string searches 
siam comput 
oct 
manzini 
space saving tricks linear time lcp array computation 
proceedings th scandinavian workshop algorithm theory 
lecture notes computer science vol 

springer verlag berlin heidelberg germany 
manzini ferragina 
engineering lightweight suffix array construction algorithm 
algorithmica june 
mccreight 
space economic suffix tree construction algorithm 
acm 
mcilroy bostic mcilroy 
engineering radix sort 
comput 
syst 

na 
linear time construction compressed suffix arrays log bit working space large alphabets 
proceedings th annual symposium combinatorial pattern matching 
springer verlag berlin heidelberg germany 
navarro baeza yates 
hybrid indexing method approximate string matching 
disc 


special issue matching patterns 


algorithm 
dr dobb feb 
nodine vitter 
deterministic distribution sort shared distributed memory multiprocessors 
proceedings th annual symposium parallel algorithms architectures 
acm new york 
nodine vitter 
greed sort optimal sorting algorithm multiple disks 
acm 
smyth 
performance linear time suffix sorting algorithms 
proceedings data compression conference 
ieee computer society los alamitos ca 
rajasekaran reif 
optimal time randomized parallel sorting algorithms 
siam comput 

smyth 
computing patterns strings 
pearson addison wesley harlow england 
ukkonen 
line construction suffix trees 
algorithmica 
valiant 
bridging model parallel computation 
commun 
acm aug 
vitter shriver 
algorithms parallel memory level memories 
algorithmica 
weiner 
linear pattern matching algorithm 
proceedings th symposium switching automata theory 
ieee computer society los alamitos ca 
witten moffat bell 
managing gigabytes compressing indexing documents images 
morgan kaufmann san francisco ca 
received july revised april accepted june journal acm vol 
november 
