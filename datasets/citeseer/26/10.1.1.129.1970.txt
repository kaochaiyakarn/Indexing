placement web server replicas lili qiu venkata padmanabhan geoffrey voelker cornell university microsoft research san diego increasing deployment content distribution networks cdns offer hosting services web content providers 
cdns deploy set servers distributed internet replicate provider content servers better performance availability centralized provider servers 
existing cdns primarily focused techniques efficiently redirecting user requests appropriate cdn servers reduce request latency balance load 
little attention development placement strategies web server replicas improve cdn performance 
explore problem web server replica placement detail 
develop placement algorithms workload information client latency request rates informed placement decisions 
evaluate placement algorithms synthetic real network topologies web server traces show placement web replicas crucial cdn performance 
address number practical issues algorithms sensitivity imperfect knowledge client workload network topology stability input data methods obtaining input 
keywords world wide web replication replica placement algorithm content distribution network cdn 
explosive growth world wide web popular web sites receive enormous share internet traffic 
sites competitive motivation offer better service clients lower cost 
address need increasing trend outsourcing content distribution commercial hosting services akamai exodus digital island existing cdns primarily focused techniques efficiently redirecting user requests appropriate cdn servers reduce request latency balance load 
little attention development placement strategies web server replicas improve cdn performance 
placement strategies important appropriate placement server replicas benefits content providers reducing latency clients benefits isps reducing bandwidth consumption 
propose algorithms automate server placement decision 
specifically consider scenario 
popular web site aims improve performance reducing clients perceived latency pushing content hosting services 
problem choose replicas hosting services potential sites objective function optimized traffic pattern 
objective function minimizing clients latency total bandwidth consumption cost function link associated cost 
study assume client uses single replica course multiple clients replica 
words client gets content replica 
analysis replica placement focuses traffic load generated clients ignoring content downloaded clients 
assumption entirely re example cdn akamai general partial replicas direct clients different replicas depending content accessed enables project falling storage costs feasible replica complete replica 
setting client may directed single replica accesses 
evaluate performance various placement algorithms simulating behavior synthetic real network topologies access traces large commercial government web servers 
far know experimental study subject 
address number practical issues algorithms online content distribution network study sensitivity placement algorithms imperfect information client workload characteristics 
results conclude greedy algorithm solving web server replica placement problem provide content distribution networks performance close optimal 
greedy algorithm depends estimates client distance load predictions find relatively insensitive errors estimates viable algorithm general internet environment workload information imperfect 
rest organized follows 
section ii survey previous 
describe graph theoretic formulations replica placement problem section iii number placement algorithms section iv 
section section vi describe simulation methodology performance results 
section vii discuss number practical issues algorithms 
conclude section viii 
ii 
previous considerable amount research web performance ranging web workload characterization developing techniques enhance web performance 
primary techniques enhancing web performance caching replication 
previous studied aspects caching replication object routing object distribution object selection inter replica inter proxy communication policy management 
attention placement web proxies web replicas 
prior placement problem know li approached proxy placement problem assumption underlying network topologies trees modeled dynamic programming problem 
interesting step approach number limitations 
internet topology tree evaluate dynamic program ming algorithm tree topologies works internet topologies 
evaluation real traces topologies section vi shows assumption tree topology possible obtain optimal solution placement problem constraints satisfied topology tree clients direct requests proxies path web server sibling proxies general setting perform heuristics general graph topologies 
high computational complexity choosing proxies potential sites prevents practical topologies thousands nodes 
jamin examined placement problem internet instrumentation 
investigated graph theoretic methods heuristics instrumenting internet obtain distance maps 
showed internet distance map service placement techniques including placement heuristics require full topological knowledge offer useful hints server selection clients 
iii 
graph theoretic approaches section review graph theoretic approaches help determine number placement web replicas network topology users demands 
terms facilities centers replicas synonymously 
study variants center placement problem facility location problem minimum median problem 
problems np hard 
constant factor approximation algorithms metric variants problems metric variants require distance function non negative symmetric satisfies triangle inequality 
facility location problem facility location problem defined follows 
set locations facilities may built building facility location incurs cost fi 
client assigned facility incurring cost dj denotes demand node cij denotes distance objective find solution number facilities locations facilities minimum total cost 
number approximation algorithms developed np hard problem metric space 
approximation algorithm polynomial time algorithm finds feasible solution objective function value factor optimal 
best approximation algorithm known today developed charikar guha gave approximation algorithm 
minimum median problem minimum median problem stated follows 
points select centers facilities assign input point selected center closest 
location assigned center incur cost 
goal select centers minimize sum assignment costs 
main difference median facility location problems median costs opening centers 
number specified input upper bound number centers opened 
charikar guha gave approximation algorithm problem metric space 
capacitated versions formulations facility location problem minimum median problem constrain amount service provided center 
capacitated variants constrain service capacity centers requiring facility serve requests capacity defined location 
worst case performance bound capacitated variants considerably worse non capacitated versions 
depending different constraints cost functions optimized replica placement formulated uncapacitated capacitated facility location problem uncapacitated capacitated minimum median problem 
summary rest consider formulation uncapacitated minimum median problem 
restrict maximum number replicas restrict number requests served replica 
believe reasonable formulation increasing number replica sites significantly difficult increasing capacity site 
maximum number replicas usually priori cost administrative reasons capacity constraint replica overcome adding machines 
ignore cost placing replicas reasons 
objective function minimize network bandwidth consumption ignore replication traffic traffic associated managing replicas distributing content replicas typically orders magnitude smaller traffic generated users requests 
furthermore content distribution networks akamai replicate content private high speed networks bandwidth consumption incurred replication usually major concern 
hand objective function optimize performance metric users perceived latency unclear incorporate replication cost unit network bandwidth objective function different unit time case client latency 
fix origin server replica sites 
including excluding original server fundamental choice little impact results 
iv 
placement algorithms section number algorithms solving minimum median problem 
objective minimize total cost requests 
define cost request node node distance nodes capacity replicas needs taken account capacitated minimum median problem formulation algorithms described apply 
distance reflect performance metric want optimize latency hop counts economic cost path nodes assuming cost associated links path 
algorithms regardless metric 
tree algorithm li proposed placement algorithm assumption underlying topologies trees modeled dynamic programming problem 
algorithm originally designed web proxy cache placement applicable web replica placement 
high level divide tree small trees ti show best way placing proxies tree place proxies best way small tree ti algorithm shown find optimal placement underlying topologies trees clients request proxy path web server clients request sibling proxy 
assumptions prune possibly better placement choices 
shown section vi optimal solutions assumptions usually solutions greedy hot spot heuristics assumptions described section 
greedy algorithm basic idea greedy algorithm follows 
suppose need choose replicas potential sites 
choose replica time 
iteration evaluate potential sites individually determine suitability hosting replica 
compute cost associated site assumption accesses clients converge site pick site yields lowest cost 
second iteration search second replica site conjunction site picked yields lowest cost 
general computing cost assume clients direct accesses nearest replica reached lowest cost 
iterate chosen replicas 
random random algorithm oblivious client workload randomly chooses replicas potential sites uniform distribution 
improve performance execute algorithm times simulations execute times pick random assignment yields lowest cost 
hot spot hot spot algorithm attempts place replicas near clients generating greatest load 
sorts potential sites amount traffic generated vicinity 
places replicas top sites generate largest amount traffic 
define vicinity circle centered radius 
simulations vary radius maximum distance pair nodes graph report best performance radii tested 
super optimal algorithm mentioned earlier minimum median problem np hard 
computing exact optimal solution computationally intensive useful practice 
evaluate algorithms described perform compute fairly tight lower bound cost feasible solution minimization problem 
super optimal algorithm lagrangian relaxation subgradient optimization 
name suggests solution produced algorithm may better optimal may feasible 
serves useful data point comparison 
specifically median problem stated integer program variable yi indicates location selected center variable xij indicates location assigned center minimize subject xij xij yi yi xij yi 
set constraints ensures location assigned center set constraints ensures location assigned center center opened ensures centers open 
apply lagrangian relaxation integer programming problem constraints weighted multipliers placed objective function follows ui xij subgradient method held compute super optimal bound 
iterative procedure begins specified multiplier value generates sequence multiplier values iteration lagrangian problem solved multipliers new value determined lagrangian solution rule 
iteration upper bound optimal value available 
order obtain lower bound minimization problem subgradient method simulations iterations nodes topologies iterations topologies 
get tighter bound specific instance problem random values initialize multiplier obtain super optimal bound value maximum lower bound 
summary table lists computational time various algorithms selecting replicas potential sites 
handful potential hosting sites available cost computationally complex algorithms may significant 
analysis consider clusters defined address prefixes explained section potential tree greedy random hot spot nm min nm table comparison computational time various algorithms replica sites 
case order number address prefixes internet clearly computational complexity replica placement algorithm significant 
reduce computational cost consider top terms requests generated hundreds thousands clusters 
top clusters generate traffic shown section ignoring requests unpopular clusters little effect results 
sections compare algorithms super optimal algorithm real web traces network topologies 
simulation methodology evaluate performance various algorithms simulate behavior algorithms variety network topologies web workloads 
section discuss network topologies web workloads evaluations 
describe performance metric basis comparing algorithms 
network topology simulations randomly generated network topologies real internet topologies derived bgp routing tables 
generate types random network topologies random trees random graphs 
primary reason studying performance tree structure determine optimal tree algorithm compares algorithms 
generate random trees wrote simple program takes parameters total number nodes maximum distance nodes maximum degree tree node 
starting root node recursively create random children total number nodes specified reached 
simulations node node trees set maximum distance maximum node degree 
parameter setting generate different trees 
generate random graphs gt itm internetwork topology generator 
particular network models pure random waxman transit stub 
pure random model vertices distributed random locations plane edge added pair vertices probability waxman model probability edge parameters model euclidean distance maximum distance nodes 
transit stub model generates hierarchical graphs composing interconnected transit stub domains see details 
wide range parameters network model 
parameter setting generate different topologies 
claim network models parame trace id web site period duration msnbc am noon msnbc day msnbc day day nasa day table ii access logs ters representative internet topology 
goal generated topologies rich possible multiple models wide range parameters 
show section vi performance placement algorithms similar different network models parameters 
construct simplified model actual internet topology bgp routing data set geographically dispersed bgp peers 
bgp routing table entry specifies path asn destination address prefix block corresponds bgp peer asn corresponds destination address prefix block 
construct level topology graph network paths 
path asn yields edges adjacent nodes path 
map individual clients address prefix blocks corresponding nodes topology graph assign distance nodes hop counts nodes 
detailed level topology partially reflects true topology internet 
furthermore study shown hop count path decent indicator path proximity reliability stability 
web workload evaluate algorithms realistic traffic patterns access logs collected msnbc server site periods shown table ii 
msnbc large popular commercial news site category cnn consistently ranked busiest sites web 
diversity traces collected nasa kennedy space center florida 
table ii shows detailed trace information 
workload day hours august traces parameterize simulation setup 
access logs way 
approach proposed krishnamurthy cluster web clients topologically close 
method information available bgp routing table snapshots show significantly outperforms heuristic assumes fixed length bit network prefix 
method clustering clients obtained complete bgp routing tables geographically topologically diverse isps 
client ip address access logs find best matching prefix union routing tables 
clients ip addresses best prefix match belong cluster 
plots number requests generated cluster 
see msnbc trace top clusters account requests respectively 
server traces similar re sults nasa traces little concentrated top clusters account requests respectively 
requests generated msnbc msnbc nasa clusters fig 

cdf number requests generated web clusters defined address prefixes 
network topology specific size say nodes choose top clusters traces map randomly nodes graph 
assigning cluster ci node pi graph means weight node pi equal number requests generated cluster ci 
network topology access log different random assignments clusters nodes graphs 
performance metric compare performance algorithms various network topologies access logs relative performance algorithms metric 
define relative performance ratio cost feasible solution algorithm cost determined super optimal algorithm 
relative performance appropriate metric reflects cost want minimize 
normalization step show far away super optimal alter metric minimized 
smaller value relative performance better algorithm performs 
relative performance implies algorithm finds optimal solution optimal solution need necessarily relative performance solution may achievable 
vi 
simulation results section evaluate performance various placement algorithms variety synthetic realistic network topologies web server traces 
random tree topologies evaluate performance placement algorithms tree topologies 
specifically run placement algorithm hundreds simulation runs examine performance algorithm simulation runs 
simulation run parameterized web server trace ii network topology iii mapping clusters nodes simulation topology iv number replicas pick 
evaluate algorithms node node trees web traces listed table ii 
different random assignments clusters defined address prefix nodes trees 
vary number replicas place node trees node trees 
shows cumulative distribution cdf relative performance algorithms tree topologies 
see greedy algorithm tree algorithm perform best greedy algorithm slightly better 
hot spot algorithm performance random algorithm clearly worst performance 
quantify differences relative performance algorithms set graphs 
shows minimum best case maximum worst case median values relative performance algorithms simulation runs tree greedy random hot spot algorithms numbered algorithm respectively 
average greedy treebased algorithms worse super optimal algorithm node trees worse super optimal algorithm node trees 
hot spot algorithm relative performance worse super optimal algorithm 
random algorithm performs considerably worse 
evident cdf curve shown gradual slope 
graph sizes simulation runs random algorithm relative performance 
note relative ranking algorithms consistent tree topologies web traces tested 
reason tree topologies tree algorithm best performer assumes clients direct requests replicas path web server 
assumption eliminates potentially better placement choices 
random graph topologies evaluate performance placement algorithms random graphs generated gt itm topology generator 
tree topologies run algorithm hundreds simulation runs examine performance algorithms simulation runs 
vary number replicas place node graphs node graphs node graphs 
graph size network models different parameters described section 
plot cdf relative performance different placement algorithms simulation runs 
show minimum maximum median relative performance simulation runs algorithms numbered 
describing results graphs observations 
tree algorithm requires underlying topology tree 
evaluation treebased algorithm general graphs generate random spanning trees graph spanning trees rooted original server node 
run algorithm trees 
adjacent algorithm id correspond performance obtained different spanning trees 
second report performance tree algorithm node node topologies takes long run topologies nodes 
example takes hours place replicas potential sites relative performance cdf cdf cdf nodes tree trace tree algorithm greedy algorithm random hot spot relative performance nodes tree trace tree algorithm greedy algorithm random hot spot relative performance nodes tree subset trace tree algorithm greedy algorithm random hot spot relative performance fig 

cdf relative performance simulation runs placement algorithms tree topologies 
nodes tree trace algorithm id relative performance relative performance nodes tree subset trace algorithm id nodes tree trace algorithm id fig 

summary performance placement algorithms tree topologies 
lower upper bounds mark correspond minimum maximum median respectively relative performance corresponding algorithm 
tree greedy random hot spot algorithms respectively numbered graph 
ultrasparc machine mhz cpu gb memory 
result conclude tree algorithm practical making real time placement decisions network size grows thousands nodes 
comparison scenario greedy hot spot random algorithms take minute run 
compared super optimal algorithm greedy algorithm performs factor median cases factor maximum cases 
results significantly better algorithms including tree algorithm 
interesting observation hot spot algorithm better tree algorithm general graphs 
random algorithm performs worst median performance maximum relative performance high 
internet topology evaluate performance placement algorithms model internet topology derived bgp routing tables 
case hop counts distance metric connected nodes 
shown ranking various algorithms stays randomly generated graphs 
best worst order greedy hot spot tree random algorithms 
performance difference algorithms smaller randomly generated graphs 
number hops nodes widely distributed distance generated topologies 
number hops varies top terms number requests generated msnbc web server periods study top contrast distance nodes generated topologies different orders magnitude 
effects imperfect knowledge input data simulation results assumption perfect knowledge underlying topologies number requests generated node 
practice perfect knowledge inputs rough estimates 
section examine imperfect knowledge input data affects placement decision 
particular want find placement decision inaccurate information useful far performance deviates obtained perfect knowledge 
approach salt input data random noise uniform distribution vary amount noise added input data 
done ways perturb volume requests client factor true number requests perturbed value ranges perturb distance cij nodes factor corrupted distance ranges cij cij 
feed inputs placement algorithms compute cost applying placement decision actual input data 
relative performance metric defined ratio cost feasible solution algorithms cdf cdf cdf cdf cdf nodes graph trace tree algorithm tree tree algorithm tree tree algorithm tree greedy algorithm random hot spot relative performance nodes graph trace tree algorithm tree tree algorithm tree tree algorithm tree greedy algorithm random hot spot relative performance nodes graph subset trace tree algorithm tree tree algorithm tree tree algorithm tree greedy algorithm random hot spot relative performance nodes graph subset trace greedy algorithm random hot spot relative performance nodes graph subset trace greedy algorithm random hot spot relative performance fig 

cdf relative performance simulation runs placement algorithms general graphs 
relative performance relative performance nodes graph trace algorithm id nodes graph subset trace algorithm id relative performance relative performance relative performance algorithm id nodes graph trace algorithm id nodes graph subset trace nodes graph subset trace algorithm id fig 

summary performance placement algorithms graph topologies 
lower upper bounds mark correspond minimum maximum median respectively relative performance corresponding algorithm 
tree greedy random hot spot algorithms respectively numbered graph 
cdf cdf real internet topologies nodes trace tree algorithm tree tree algorithm tree tree algorithm tree greedy algorithm random hot spot relative performance real internet topologies nodes trace greedy algorithm random hot spot relative performance fig 

cdf relative performance simulation runs placement algorithms model real internet topology derived bgp routing tables 
relative performance relative performance real topologies nodes trace algorithm id relative performance real internet topologies nodes tree trace algorithm id fig 

summary relative performance placement algorithms model real internet topology 
lower upper bounds mark correspond minimum maximum median respectively relative performance corresponding algorithm 
tree greedy random hot spot algorithms respectively numbered graph 
inputs cost determined super optimal algorithm actual inputs 
shows minimum maximum median relative performance values error rates distance load 
see performance deviation small 
particular error high factor cost greedy algorithm cases factor super optimal algorithm perfect knowledge 
evident plots relative performance greedy algorithm versus errors input 
see error increases performance degrades slightly 
nodes graph subset trace algorithm id relative performance nodes graph subset trace algorithm id fig 

relative performance placement algorithms graph topologies load distance information random noise 
relative performance real internet topologies nodes trace error load info 
error distance info 
fig 

relative performance greedy algorithm input random noise 
perturbation technique topology useful performance metric propagation delay economic cost paths 
performance metric hop count infer distance nodes bgp routing tables illustrated section 
number bgp peers providing routing information limited may accurate level topology map example see links 
study effect overlooking network links placement algorithms randomly remove edges level internet topology derived bgp routing tables perturbed topology information placement algorithm 
shows performance results greedy algorithm normalized performance algorithm perfect topology information msnbc server trace 
see performance greedy algorithm hardly changes edges removed 
particular edge removal probability high relative performance greedy algorithm stays 
insensitivity greedy algorithm edge removal partly comes fact topology information greedy algorithm algorithms tree algorithm requires distance matrix 
testing distance matrix detail find distance matrix sensitive edge removal 
particular removing edges graph change distance matrix experiments 
relative performance real internet topologies nodes trace edge removal probability fig 

summary relative performance greedy algorithm edge removal 
lower upper bounds mark correspond minimum maximum median respectively relative performance greedy algorithm 
stability input data section studies effect imperfect knowledge placement decision 
major reasons perfect knowledge input data input data changing time 
making placement decision hours ideally give placement algorithms load network information hours 
practice past information predict load network information 
prediction significantly affect performance placement algorithm 
section investigate issue detail 
evaluation done parts 
part assume topology information accurate load information prediction 
particular consider scenario want placement decision workload previous days 
predict load generated cluster averaging load previous days varies 
perform evaluation trace listed table ii contains access logs consecutive working days monday friday 
pick top clusters 
top clusters overlap 
randomly assign clusters nodes randomly generated topologies various network models parameters 
topology cluster assignment simulate placement algorithms actual workload predicted workloads workload ii averages iii averages iv averages 
shows cdf greedy algorithm performance simulation runs 
normalize performance greedy algorithm predicted load performance actual workload 
lower normalized performance better prediction normalized performance means performance exactly obtained actual workload 
see performance predicted workload closely matches performance actual workload cases 
note cases performance predictions slightly better actual workload 
greedy algorithm give optimal performance input data completely accurate 
cdf performance normalized actual workload fig 

cdf greedy algorithm performance predicted workload normalized performance actual workload simulation runs 
second part evaluation strategy salt topology information random noise described section vi 
shows performance results perturb distance nodes factor 
see performance deviation accurate load network information small perturbation distance factor deviation respectively 
performance results similar prediction windows tested 
observed significant variation weekday workloads weekend workloads consecutive time 
surprising suggests past weekday workload information predict weekday workloads likewise past weekend workload data predict weekend workloads 
vii 
practical considerations section discuss ways obtain input data placement algorithms 
mentioned earlier input placement algorithms graph weighted nodes edges 
node weight represents amount traffic initiated node edge weight represents latency link cost hop count order apply placement algorithms practice need able obtain traffic pattern network topology information real time 
obtaining node weights relatively straightforward 
re provisioning web server communicates active replicas replicas serve requests opposed cdf cdf performance normalized actual workload perturbation factor performance normalized actual workload perturbation factor fig 

cdf greedy algorithm performance predicted workload normalized performance actual workload perturb distance nodes 
potential replica sites number requests generated popular clusters clusters identified approach proposed 
method obtaining edge weights depends performance metric want optimize 
replication placement relatively long term provision believe desirable performance metrics stable order hours propagation delay hop count economic cost path nodes 
approximate distance pair nodes bgp routing tables infer hop counts pair nodes described section interesting question bgp peers need routing information order construct fairly accurate level topology map 
answer clearly depends richness connectivity average degree nodes topology graph 
greater degree greater number bgp peers need routing information 
worst case completely connected graph far reality 
show section vi performance greedy algorithm sensitive overlooking network links relative performance stays super optimal algorithm edge removal probability high 
separate question knowing topology sufficient solving placement problem 
general need notion internet weather network performance points say client location potential replica site 
research efforts idmaps focusing problem constructing internet weather map 
desired straightforward manner substitute cost metrics derived internet weather map place derived topology information algorithms 
service widely available web sites periodically ping traceroute representative client identified popular cluster 
number popular clusters large usually case msnbc web site probing affordable especially provisioning timescale order hours longer 
viii 
study online problem placing web server replicas content distribution networks cdns minimize cost clients access data replicated servers 
approach placement problem formulating minimum median graph theoretic problem 
various algorithms solving minimum median problem evaluate performance algorithms simulating behavior synthetic real network topologies web traces 
address number practical issues algorithms online content distribution network 
far know experimental study subject 
main results placement algorithms incorporate client workload information client distance request rate placement decisions 
algorithms consistently perform factor better workload oblivious random algorithm 
greedy algorithm places replicas distance metric request load performs best median performance factor optimal 
hot spot algorithm request load performs nearly median performance factor optimal 
tree algorithm developed proxy cache hierarchies performs better random placement algorithms general graph topologies 
placement algorithms sensitive noise estimates distance load inputs algorithms 
rough estimates client distance request load random noise algorithms perform nearly perfect knowledge 
example error high factor greedy algorithm stays factor super optimal cases 
deployed placement algorithms predict request load past information 
show algorithms simple moving window average predicting load negligible impact performance 
relative performance placement algorithms consistent network topologies tree random graph hopcount topology parameters number nodes inter node distance trace workloads noise inputs 
results conclude greedy algorithm web server replica placement provide content distribution networks performance close optimal 
greedy algorithm depends estimates client distance load predictions find relatively insensitive errors estimates viable practical algorithm general internet environment workload information imperfect 
interested exploring incremental versions placement algorithms take account cost changing set replica sites 
ideally placement strategies similar performance prefer incurs amount perturbation system 
example site hosting web service prefer replace replica site performance degradation continuing significant 
interested studying distributed versions placement algorithms improve scalability system 
possible distributed algorithm algorithm hierarchical 
ix 
craig labovitz providing complete bgp routing tables different isps 
yin zhang ravi kumar helpful discussions 
abc news 
www com 
akamai 
www akamai com 
arlitt williamson 
internet web servers workload characterization performance implications 
ieee transactions networking vol 
october 
breslau cao fan phillips shenker 
web caching zipf distributions evidence implications 
calvert zegura 
gt internetwork topology models gt itm 
www cc gatech edu fac ellen zegura gt itm 
charikar guha 
improved combinatorial algorithms facility location median problems 
proc 
th annual ieee conference foundations computer science 
charikar guha tardos shmoys 
constant factor approximation algorithm median problem 
proceedings st annual acm symposium theory computing 
shmoys 
improved approximation algorithms capacitated facility location problem 
proc 
th annual acm siam symposium discrete algorithms 
cable news network 
www cnn com 
server traces 
ita ee lbl gov html contrib html 
digital island 
www com 
exodus 
www exodus com 
project 
www merit edu 
jamin jin jin raz shavitt zhang 
placement internet instrumentation 
proc 
infocom march 
krishnamurthy wang 
network aware clustering web clients 
proc 
sigcomm august september 
li golin deng 
optimal placement web proxies internet 
proc 
infocom march 

passive system server selection mirrored resource environments path length heuristics 
proximate com proximate study html 

www com 
msnbc 
www msnbc com 
nasa kennedy space center server traces 
ita ee lbl gov html contrib nasa html 
fisher nemhauser 
location bank accounts optimize float analytic study exact approximate algorithms 
management sciences vol 
pp 

compendium np optimization problems 
www nada kth se compendium html 
padmanabhan qiu 
content access dynamics busy web site findings implications 
proc 
sigcomm august september 
touch 
web caching replication research issues 
internet draft ietf res text 
www org drafts draft ietf txt 
wolfe crowder 
validation subgradient optimization 
math programming 
vol 
pp 

zegura calvert bhattacharjee 
model internetwork 
infocom 
