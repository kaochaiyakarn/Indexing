university trento department information communication technology povo trento italy sommarive www dit unitn modeling security requirements ownership permission delegation paolo giorgini fabio massacci john mylopoulos nicola zannone july technical report dit modeling security requirements ownership permission delegation paolo giorgini university trento giorgini dit unitn fabio massacci university trento massacci dit unitn nicola zannone university trento zannone dit unitn john mylopoulos university toronto jm cs toronto edu security requirements engineering emerging branch software engineering spurred realization security dealt early requirements phase 
methodologies field challenging take account subtle notions trust lack thereof delegation permission model entire organizations systems 
previous introduced secure tropos formal framework modeling analyzing security requirements 
secure tropos founded main notions ownership trust delegation 
refine secure tropos introducing notions delegation trust execution delegation trust permission 
propose monitoring security design pattern intended overcome problem lack trust actors 
presents semantics notions describes implemented formal reasoning tool datalog 
years seen proposals incorporate security software engineering process 
spectrum proposals ensure coding practices 
extreme emphasis securing organization software system functions 
case modeling analysis security requirements key challenge software engineering subject :10.1.1.23.1303:10.1.1.18.3723
proposals security requirements engineering classified classes 
approaches modeling analysis framework uml kaos tropos model framework security requirements 
approaches features framework formally analyze security requirements guide implementation 
approaches adopt requirements engineering framework enhance novel constructs specific security :10.1.1.12.6554:10.1.1.3.5409
approaches formal analysis techniques implementation guidelines need revised extended accommodate new concepts 
proposals literature focus protection aspects security explicitly deal series security services integrity availability related protection mechanisms passwords cryptographic techniques 
shift perspective early requirements proposed authors extended tropos modeling framework define secure tropos :10.1.1.2.2813
proposal introduces concepts ownership trust delegation requirements modeling framework shows security trust requirements derived analyzed 
baseline contributions 
large case study compliance iso security policy italian privacy legislation concluded concepts offered secure tropos right ones coarse grained capture important security facets 
specifically framework provides pragmatic reasons case services permissions delegated actors trusted 
system considered secure way hold delegations accountable monitoring wrong 
second observation trust actors lack thereof comes different flavors may trust actor deliver services require account skills commitment honor granted permissions 
trust management authorization settings finds delegations permission authorization :10.1.1.11.3049
requirements availability equally important captured modeling delegation execution actor delegates responsibility execute service 
key contribution refined framework modeling analyzing security requirements proposed :10.1.1.2.2813
refinement includes distinction notions delegation execution delegation delegation permission delegation distinction notions trust execution trust trust permission trust 
propose monitoring security pattern design solution intended overcome problem lack trust actors 
constructs formalized formally analyzed tool supported process 
done frameworks deal trust security datalog underlying semantic framework :10.1.1.133.3395
approaches propose deontic logic model notions obligation empowering permission 
approaches distinguish direct indirect capabilities responsibilities 
fundamental distinction modeling organizations 
fact actor delegate execution permission service actor directly able 
remainder introduce running example discuss framework formal semantics useful formal properties exploited verification purposes 
conclude brief discussion related summary contributions 
running example example abstracted substantial case study compliance italian public administrations universities local governments health care authorities italian security privacy legislation 
summary law requires administrations set sophisticated security privacy policies quite close complexity iso standard security management 
dealing privacy introduces additional complications data ownership trust consent 
details case study university 
readability introduce personae alice administrative officer example teaching evaluation office bob bert bill students sam manager student system paul peter professors 
tropos secure tropos tropos methodology developing agent oriented software 
methodology supports different development phases early requirements detailed design 
methodology founded models concepts actor goal task resource social dependency defining obligations actors actors 
goal represents strategic interests actor 
task specifies particular course actions produces desired effect executed order satisfy goal 
resource represents physical informational entity 
dependency actors indicates actor depends accomplish goal execute task deliver resource 
tropos suited modeling organization systems operating 
argued tropos framework lacks ability capture important aspects security new proposal 
secure tropos proposed formal extension tropos intended modeling analysis functional security requirements :10.1.1.2.2813
simplify terminology notion service framework refer goal task resource new relationships introduced ownership actor service represents fact actor legitimate owner service trust actors service marks social relationship indicates belief actor actor misuse service granted 
delegation actors service marks formal passage permission 
example law bob owner personal data 
data stored servers managed sam turn gives access alice paul 
scenario sam seek consent permission bob data processing concerning personal data 
impersonation closer reality may think law requires assignment responsibility sub system person 
feature proposal distinction permission delegation 
example letter university rector assigns cio responsibility enacting privacy protection measures example delegation 
digital trust management systems matched issuance delegation certificate 
basic consequence delegation having permission holders 
contrast notions trust simply marks social relationship formalized contract digital credential letter 
cases happy social protection mechanisms impractical costly 
cases formal delegation essential 
refining delegation trust introduce conceptual refinement delegation trust relationships allow capture model important security facets example alice interested gathering data student performance depends sam 
bob owns personal data academic record 
bob delegates permission provide information academic record sam condition privacy protected identity revealed 
scenario fig 
difference relationships alice sam bob sam 
due difference type delegation 
example bob delegates permission sam provide relevant information 
hand alice wants student data delegates execution goal sam 
alice sam fulfill goal wants 
interested bob trusts sam simply wants information 
bob hand worries authorization uses personal authorized 
want check requirements consistent security requirements actor met essential distinguish notions delegation 
delegation delegator wants delegatee fulfill service 
delegation permission delegatee thinks permission fulfill service need delegation means wants delegatee perform service 
delegation execution 
delegatee thinks get service fulfilled get started 
graphical representation fig 
represent relationship edges respectively labeled want separate concepts trust delegation need model systems actors delegate permission execution actors don trust 
case convenient suitable distinction trust managing permission trust managing execution 
meaning trust actor truster trusts actor trustee fulfill service 
meaning trust actor truster trusts actor trustee fulfill service 
alice provide personal information delegation carol sam ppi alice bob provide personal information sam provide personal information provide personal information alice monitor mp sam ppi provide personal information provide personal information mp monitor bob provide personal information sam delegation monitoring bob provide personal information example trust applies permissions bob trusts sam bob personal information certain bounds 
trust applies executions alice believes sam accomplish desired task possibly 
actor dependencies tropos represent delegation combined implicitly trust 
delegation proposed giorgini blurs distinction delegation trust 
development system designer able guarantee implement trust delegation relationships captured social setting requirements analysis phase 
analysis done methodology advocated 
specific situations may impose services delegated actors trust relationship 
example situation may arise services outsourced outside providers trust relationship remains developed 
providers may offer services range cleaning security erp clock cycles network backbones 
propose situations framework adopt monitoring design pattern lack trust 
section focuses monitoring design pattern 
sam monitoring services need delegated absence trust monitoring offers surrogate trust 
gans existence distrust tolerated additional overhead monitoring untrustworthy delegatee 
refine gans intuition integrate framework 
goal actor playing role monitor check violation trust act monitoring done delegator delegated actor 
monitors distinguished ones 
consider situation fig 

example suppose trust bob sam goal maintain privacy bob delegate permission 
case depends monitoring sam permissions 
shown fig 
monitor monitor permission mp relationship sam 
example alice confident sam provide updated information may delegate secretary carol task checking sure new information students entered system 
shown fig 
monitor monitor execution relationship carol sam 
important distinction emerges monitor related type service goal task resource monitoring required 
assume service fig 
task specific sequence actions 
monitor check sam executes actions associated task 
example achieve goal delegated example sam issues letter head student secretariat office student marks entered system days date final exams 
happens sam delegates task subtasks actors 
possible solution problem extend monitoring paths delegation actor actual execution takes place 
solution monitor relationship monitor intermediate actors involved execution part task 
example reach objective entering marks days secretariat offices require professors submit marks period 
step delegation execution 
monitor delegation actor responsible office may assign task reminding professors return mark lists time 
notice monitoring primitive construct framework 
pattern realized terms constructs 
cases service delegated design process trusted actor monitoring evaluation fulfillment service assigned trusted actor 
general predicates delegate type actor actor service type actor actor service trust type actor actor service trustchain type actor actor service monitoring type actor actor service confident type actor service specific execution requests actor service provides actor service actor service satisfy actor service specific permission owns actor service actor service goal refinement goal service subgoal service service subgoal service service subgoal service service decomp service service service table predicates delegated untrusted case delegatee monitored trusted actor 
formal model monitoring formalized terms additional axioms ensure actor confident service executed permission abused existing trust relations offer support 
see monitoring simple design solution essentially security pattern treat monitoring goals goals refined delegated 
trust relationships linked monitoring captured existing constructs 
example monitoring requires having permission access monitored data personnel 
may create problems permission authorization modeled framework 
formalization done datalog formalize new concepts introduced order automatically verify correctness consistency functional security requirements :10.1.1.2.2813:10.1.1.133.3395
datalog program set rules form ln called head rule positive literal ln literals called body rule 
intuitively rule states ln true true 
datalog negation treated negation failure possible infer atom true inferred false 
predicates formalization 
table extends pred introducing new ones execution permission monitoring new predicates generic possible argument predicate type parameter :10.1.1.2.2813
delegate monitoring type exec perm trust trustchain types exec perm mon confident types satisfy exec owner 
reason predicates take arguments generic services goals tasks resources formal model execution predicate requests holds actor wants service fulfilled provides holds actor capability fulfill service predicate delegate exec holds actor delegates execution service actor actor called delegator actor called delegatee 
predicate trust exec holds actor trusts actor fulfills service actor called trustor actor called trustee 
predicate trust mon holds actor trusts actor monitors service satisfied 
predicate monitoring exec holds actor monitors actor satisfy service predicates define properties formal analysis 
predicates exec trustchain exec hold delegation trust chain respectively actor actor predicate identify actors directly fulfill service 
predicate satisfy holds actor satisfy service predicate confident satisfy holds actor confident service satisfied 
predicates goal task refinement resource decomposition 
semantics axiomatization straight forward 
axiomatization predicates execution shown table 
batch axioms deals delegation trust build delegation chain execution build trust chain execution monitoring builds chains monitoring steps 
chains propagate service parts 
trust execution flows top respect service decomposition 
likewise axiom monitoring states trustchain flows top respect service decomposition 
states actor monitored service delegates service monitoring transferred delegatee monitoring transferred delegations ensure service fulfilled 
remaining axioms define global properties model 
state actor execute service provides service actor delegates service aims service 
state actor aims service fulfill service provides delegated fulfill 
service decompositions accounted axioms 
actor satisfy sub goals tasks goal task satisfy root goal task 
dual axiom holds decompositions 
monitoring treated defined predicate 
resources subgoal relation needs replaced part relation 
sake simplicity deal question depth 
see li account delegation depth :10.1.1.11.3049
emerged case studies depth important qualifications members office 
delegation exec delegate exec trust exec delegate exec exec trustchain exec trust exec trustchain exec trust exec trustchain exec trustchain exec trustchain mon monitoring exec trustchain exec subgoal trustchain exec trustchain mon trust mon trustchain mon trust mon trustchain mon trustchain mon trustchain exec trustchain mon trustchain mon subgoal trustchain mon monitoring exec monitoring exec monitoring exec subgoal exec provides requests provides satisfy satisfy satisfy delegate exec satisfy satisfy subgoal satisfy satisfy decomp satisfy satisfy confident satisfy confident satisfy exec confident satisfy trustchain exec confident satisfy confident satisfy subgoal confident satisfy decomp confident satisfy confident satisfy confident satisfy table axioms execution notion confidence captured axioms 
actor aims service confident fulfilled knows delegations done trusted monitored actors actors necessary permission 
axioms specify confidence propagated upwards service decomposition hierarchy 
formal model permission table include predicates modeling permission 
set predicates corresponds relations requirements engineer 
predicate owns holds actor owns service owner service full authority concerning access usage services delegate authority actors 
intuition delegate perm holds actor delegates actor permission fulfill service predicate trust perm holds actor trusts actor permission fulfill service predicate monitoring perm dual execution counterpart 
delegation perm delegate perm trust perm delegate perm perm trustchain perm trust perm trustchain perm trust perm trustchain perm trustchain perm trustchain mon monitoring perm trustchain perm subgoal trustchain perm trustchain mon trustchain perm trustchain mon monitoring perm monitoring perm monitoring perm subgoal permission owns perm subgoal owner confident give service trusted actors confident owner owns perm perm trustchain perm subgoal table axioms permission predicates define interesting properties formal analysis 
predicates perm trustchain perm hold delegation resp 
trust chain permission actor actor basic idea sums possible ways actor secure permission service directly delegation 
point view owner confidence means owner confident permission delegated misused 
alternatively owner confident delegated permission trusted monitored agents 
means untrusted delegation owner uneasy misuse permissions 
owner confident misuse permission 
seen intrinsic double negation statement 
try model predicate 
point delegation permission delegating agent delegation done agent trusted monitored delegatee 
way confident owner holds owner confident give permission service trusted actors 
table presents axioms permission 
build delegation chain permission build trust chain permission builds trust chains monitoring steps 
chain propagate subgoals 
actor trusts set actions required fulfill part service trust set actions required fulfill service 
essentially trust permission flows bottom respect goal refinements 
build trust chain monitor 
states actor monitoring see service fulfilled execute ax execute ax execute exec execute ax ax execute subgoal execute decomp execute execute execute confident see service fulfilled confident execute ax ax confident exec exec confident exec trustchain exec confident exec ax ax confident exec subgoal confident exec decomp confident exec confident exec confident exec need know ax ax need perm delegate perm need perm need perm ax delegate perm need perm table axioms involving permission execution delegates service monitor watch delegatee monitor follows delegation 
owner service full authority concerning access disposition 
states actor owns service 
states delegatee service 
notion confidence sketched captured axioms 
combining execution permission checking complex properties requires reasoning execution permission 
table notions point view requester point view owner 
predicate execute holds actor see service fulfilled 
predicate confident exec holds actor confident service fulfilled 
case actor knows delegations done trusted monitored actors actors ultimately execute service permission 
done axioms ax ax 
goal refinements taken care axioms ax ax straight forward way 
owners may wish delegate permissions providers need permission 
part table defines predicates necessary analyze need know properties 
result absence owner confident permission misused 
permission reached actors need 
owner want ensure unwanted delegation permission 
achieved identifying actors need know need permission 
set axioms captures possibility having alternate paths permission delegations 
case formal analysis yield model multiple models path delegation labeled need property 
owner provider requester delegation permission delegation execution trust permission trust execution need know multiple permissions paths provider requester requesters viewpoint owner design execution permission owners viewpoint example alice carol received consent permission bob personal data 
turn delegate faculty secretariat permission provide data paul university tutor responsible providing personal counseling bob 
case alice carol needs permission 
analysis verification dlv system verify security properties respect secure tropos model 
table 
mean check time holds desirable holds 
datalog represented constraint set features consistent simultaneously satisfied system inconsistent secure 
technique allows check proposed axioms consistent 
pro states delegation chain trusts delegatee monitor delegator trust monitor 
pro states requester satisfy goals pro states requester wants confident satisfy service 
www dbai tuwien ac proj dlv execution pro exec 
trustchain exec pro requests satisfy pro requests confident satisfy pro exec permission pro perm 
trustchain perm pro owns 
confident owner pro owns 
perm execution permission pro requests execute pro requests confident exec pro owns need perm pro owns need perm confident owner table desirable properties design example bob bert need counseling 
receive formal relation satisfy delegate execution paul peter bill receive advice needs requested alice able provide counseling faculty matters 
bob confident receive counseling needs delegates execution paul peter trusts bert confident delegates paul trust 
pro states actor provides service actor delegates service requests service execute service delegation 
pro states delegation chain delegator trusts delegatee monitor 
pro states owner service confident give service trusted actors pro states service delegated back owner 
example bob bert need provide personal data order get effective counseling 
bob confident personal data delegates permissions paul peter trusts data counseling 
hand bert confident data delegates paul trust keep information confidential 
similar previous example misplaced delegation example 
difference lies possible poor bert 
case afraid receive bad advice delegation execution personal information may misused 
part table shows properties verify model model time 
pro states requester see service fulfilled 
pro states requester confident see service fulfilled 
owner provider requester owner vs requester example bob bert delegate permission sam 
bob delegates permission parents 
paul needs get student information provide accurate counseling directly ask 
delegates task getting permission data sam 
paul ask permission bob data bob parents 
paul suppose provides personal information students 
hand peter delegates execution task provide students personal information carol permission manage 
carol forward information peter 
paul delegates execution task available personal information students student information system 
trust system goal confident get personal information 
related liu uses goal oriented tropos re methodology introduce goals security privacy proposes dependency analysis check system secure 
general taxonomies privacy proposed standard goal oriented analysis 
early re example presents requirements process model reuse templates security policies organization 
side approaches explicitly intended security proposed extension low level security mechanisms uml methodology modeling risk vulnerability 
spirit propose uml modeling language secureuml :10.1.1.12.6554
approach focused modeling access control policies integrating model driven software development process 
major limitations proposals treat security terms support modeling analysis security requirements organizational level 
words targeted model computer system policies access control mechanisms supports 
contrast understand problem security engineering need model organization social relationships actors involved system 
approaches propose model behavior :10.1.1.3.5409
mcdermott fox adapt cases capture analyze security requirements call adaption abuse case model 
abuse case interaction system actors results interaction harmful system st tool stakeholders system 
define misuse cases inverse uml cases describe functions system allow 
moving early requirements role abuse cases played anti goals proposed van lamsweerde :10.1.1.3.5409
extended previous providing comprehensive modeling framework security requirements :10.1.1.2.2813
particular framework offers notions delegation trust execution delegation trust permission respectively form delegation trust monitoring design solution pattern overcome problem lack trust actors comprehensive semantic model datalog ease translations requirements security policies trust management systems semantics stated 
framework new features supported st tool 
st tool graphical tool implemented java support design secure tropos models 
tool allows system designers draw secure tropos diagrams selecting menu desired secure tropos elements verify correctness specification corresponding element 
supports automatic transformation secure tropos graphical models formal specifications specifically datalog specification formal tropos specification 
tropos element possible specify properties creation properties invar properties fulfill properties available web dit unitn 
respect syntax formal tropos resulting specification automatically displayed 
datalog specification generated displayed similar lines 
addition tool provides user friendly interface dlv system permits designer select properties model specify additional security policies 
resulting datalog specifications automatically verified dlv system 
plans include refining proposed framework point derive security services mechanisms comparable standards iso iso 
acknowledgments partially funded ist programme eu commission fet ist wasp project programme astro project projects funded provincial authority 
abiteboul hull vianu 
foundations databases 
addison wesley 
anderson 
security engineering guide building dependable distributed systems 
wiley computer publishing 
ant reese 
analyzing website privacy requirements privacy goal taxonomy 
proc 
re pages 
ieee press 
aura 
structure delegation networks 
proc 
csfw pages 
ieee press 
giorgini giunchiglia mylopoulos 
tropos agent oriented software development methodology 

crook lin nuseibeh 
security requirements engineering hit fan 
proc 
re pages 
ieee press 
detreville 
binder logic security language 
proc 
ieee symp 
sec 
privacy pages 
ieee press 
devanbu stubblebine 
software engineering security roadmap 
proc 
icse pages 
st len 
framework model risk management process 
proc 
lncs pages 
pistore mylopoulos traverso 
model checking early requirements specifications tropos 
proc 
re pages 
ieee press 
gans jarke lakemeyer 
modeling impact trust distrust agent networks 
proc 
pages 
giorgini massacci mylopoulos 
requirement engineering meets security case study modelling secure electronic transactions visa mastercard 
proc 
er lncs pages 
springer verlag 
giorgini massacci mylopoulos zannone 
filling gap requirements engineering public key trust management infrastructures 
proc 
lncs pages 
springer verlag 
giorgini massacci mylopoulos zannone 
requirements engineering meets trust management model methodology reasoning 
proc 
lncs pages 
springer verlag 
jones sergot 
formal characterisation institutionalised power 
interest group pure appl 
log 

secure systems development uml 
springer verlag 
li grosof feigenbaum :10.1.1.11.3049
delegation logic logic approach distributed authorization 

li mitchell winsborough 
design role trust management framework 
proc 
ieee symp 
sec 
privacy pages 
ieee press 
liu yu mylopoulos 
security privacy requirements analysis social setting 
proc 
re pages 
ieee press 
basin :10.1.1.12.6554
secureuml uml modeling language model driven security 
proc 
uml lncs pages 
springer verlag 
massacci zannone 
security requirements engineering methodology practice compliance italian data protection legislation 
comp 
standards interfaces 
extended version available technical report dit eprints biblio unitn 
mcdermott fox 
abuse case models security requirements analysis 
proc 
acsac pages 
ieee press 
samarati di vimercati 
access control policies models mechanisms 
ii lncs pages 
springer verlag 

eliciting security requirements misuse cases 
proc 
tools pacific pages 
ieee press 

legal requirements reuse critical success factor requirements quality personal data protection 
proc 
re pages 
ieee press 
van lamsweerde de janssens :10.1.1.3.5409
system goals intruder anti goals attack generation resolution security requirements engineering 
proc 
pages 
mcgraw 
building secure software 
addison wesley 
