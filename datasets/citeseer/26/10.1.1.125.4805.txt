making forward chaining relevant fahiem bacchus dept computer science university waterloo waterloo ontario canada logos uwaterloo ca planning forward chaining world space long dismissed obviously infeasible 
approach planning advantages 
importantly forward chaining planners maintain complete descriptions intermediate states arise course plan execution 
states utilized provide highly effective search control 
advantage planners support richer planning representations model resources resource consumption 
forward chaining planners plagued traditional weaknesses lack goal direction fact search totally ordered action sequences 
address issue goal direction 
algorithms provide forward chaining planner information goal allow avoid certain types irrelevant state information actions 
ways improving efficiency forward chaining planner 
planners search space worlds generated applying possible totally ordered action sequences initial state 
mechanisms correspond ways making planners goal directed allowing ignore actions irrelevant goal 
method utilizes static analysis domain actions 
runs polynomial time performed individual planning problems prior plan search 
analysis allows planner ignore domain actions planning retaining completeness 
second method dynamic control mechanism operates search 
prunes search space action sequences containing actions irrelevant actions sequence 
effect pruning search space certain redundant copyright american association artificial intelligence www aaai org 
rights reserved 
range terminology refer planners 
weld wel calls kind planner progressive world state planner mcdermott mcd calls searching space plan prefixes russell norvig rn call progressive totally ordered situation space planner 
term forward chaining succinct long history 
yee teh dept computer science university toronto toronto ontario canada logos uwaterloo ca paths 
mechanisms achieve greater improvements 
point reader may wonder interested forward chaining planners approach planning long dismissed planning community favor sophisticated approaches 
opinion approaches ai planning developed including innovations graphplan bf satplan ks forward chaining promise 
controversial opinion hope accumulate evidence support know opinion reader share 
offer brief defense forward chaining development approach planning worthwhile 
forward chaining planners particularly useful properties 
maintain complete information intermediate states generated potential plan 
information utilized provide highly effective search control domain independent heuristic control mcd effective domain dependent control 
example domain specific information blocks world domain tlplan system bac developed bk generate solutions problems involving blocks seconds fastest domain independent planners graphplan satplan take seconds solve problems involving blocks 
furthermore tlplan solve problems range domains orders magnitude faster planning system intermediate states ensure plan satisfies range temporally extended conditions maintenance safety conditions just simple instances bk 
second advantage forward chaining planners support rich planning languages 
tlplan system example supports full adl language including functions numeric calculations 
numbers functions essential modeling features real planning domains particularly resources resource consumption 
forward chaining planners number known deficiencies root dismissal planning community 
serious deficiencies planners goal directed pursuing action sequences irrelevant current goal 
especially serious problem consider scaling planners 
useful intelligent agents probably deal range different problems disposal range different actions 
small subset actions relevant particular task 
forward chaining planner explore possible actions irrespective goal ultimately doomed failure 
algorithms develop address problem doing demonstrate particular argument forward chaining planners countered 
course arguments forward chaining planners remain 
importantly issue totally vs partially ordered action sequences 
fact forward chaining planners explore totally ordered action sequences remains area difficulty planners 
address issue currently exploring mechanisms dealing problem 
aim pursuing try improve baseline performance forward chaining planners 
search control remains essential component making planners perform effectively effective control information especially domain specific information quite expensive acquire 
improving baseline performance hope require control information information effective 
sequel methods developed adding goal direction forward chaining planners give empirical results showing effects 
static relevance algorithm describe operates prior searching plan 
call static relevance 
example 
say actions domain 


actions specified strips representation set preconditions set effects positive literals adds negative literals deletes 
initial state actions executed 
goal easy see reason execute action yield goal literal yield precondition ultimately produce goal literal 
action hand produces action produce goal literal 
literal produces facilitate execution relevant actions 
sum initial state goal action irrelevant literal produced action fact effective search control essential success planning architecture 
inputs initial state goal state specified collection ground literals set ground action instances specified strips representation 
output set literals actions potentially relevant planning problem transforming procedure 


changed step 
changed step goto step 
exists return failure 
changed step 
changed step goto step 
table static relevance algorithm static relevance algorithm designed detect kinds irrelevance explain simplify planning problem provide forward chaining degree goal direction 
algorithm computing set statically relevant actions literals specific planning problem table 
algorithm takes input fully ground set actions 
set computed set parameterized operators instantiating operators possible ways constants contained initial state algorithm performs forward pass detect set potentially reachable literals actions 
literal reachable initial state effect reachable action 
action reachable literals preconditions reachable 
note marking literal action reachable mean reachable initial state 
particular action may preconditions marked reachable conjunction preconditions fact reachable 
loop steps computes reachable sets algorithm performs backwards pass detect set potentially relevant literals actions 
literal relevant reachable appears goal precondition relevant action 
action relevant reachable produces relevant literal 
loop step computes relevant sets algorithm terms ground actions implementation fact works directly parameterized operators 
generates ground actions needed basis 

remove irrelevant literals form new initial state 
remove irrelevant actions form new set actions 
modify action removing literals irrelevant 
table reduced planning space algorithm number points algorithm 
algorithm operates literals positive negative atomic facts 
actions negative literals preconditions algorithm continues function properly 
caveat standard closed world assumption planners contains implicit negative facts 
algorithm place negative facts set fact reachable literals algorithm place negative facts produced actions 
test negative literal membership steps implementation tests see literal implicitly result final set contains relevant literals positive negative 
second specified loops recomputing sets scratch difficult see computations performed incrementally 
implementation computation incrementally 
practice efficient initial backwards pass marking predicate action names potentially relevant 
particular initial pass ignores arguments actions literals 
names marked restrict forward pass consider literals actions names marked potentially relevant 
utilizing static relevance set relevant literals actions generated algorithm construct smaller planning space 
smaller space viewed quotient space states original planning space reduced smaller set equivalent classes 
search plan conducted smaller space 
particular original planning space specified initial state goal set actions algorithm table constructs reduced space algorithm specified generating set ground actions 
implementation explicitly store set 
original set parameterized operators check ground actions effects generated plan time ensure relevant 
reduced planning space preserves completeness 
theorem exists sequence actions solve planning problem transforming run time seconds log scale tlplan ucpop static relevance plan time static relevance preprocessing number irrelevant actions decreased branching factor static relevance state satisfying iff exists sequence actions solve planning problem transforming state satisfying hard compute 
theorem complexity computing reduced planning space number domain objects mentioned initial state constant equal maximum arity domain operators predicates 
complexity polynomial size precisely number distinct operators parameterized operators ground actions generated number domain predicates 
constants 
complexity bounded reduced planning space offers advantages forward chaining planners 
obvious advantage removing irrelevant actions reduce branching factor search space explore 
second advantage bit subtle 
search engine profitably employ cycle checking 
breadth search offers opportunity cycle checking utilizing depth search search engine check state cycles current path explored 
removing irrelevant effects actions initial state reduced planning space states equivalent equivalent original space cycle checking play greater role 
empirical results test static relevance conducted tests 
designed show claimed properties static relevance irrelevant actions ignored reduces branching factor eliminating irrelevant literals facilitates greater cycle detection 
test run simple blocks world problem blocks initial world state blocks goal state 
test consisted adding new actions action set initial state contain extra actions executable goal contain fact irrelevant 
standard forward chaining planner tlplan system tests bac increasingly higher branching factor increases static relevance detect actions irrelevant affected presence 
shows results 
ran tlplan breadth search 
test ran ucpop 
ucpop uses goal regression unaffected extra actions 
results show static relevance tlplan ucpop able achieve runtime unaffected complexity climbs rapidly 
test designed show static relevance facilitates cycle detection 
block world domain time multiple copies operators 
particular copies operators pickup putdown stack unstack 
th copy pickup unstack add effects extra extra putdown stack add effects extra extra predicates extra extra appear goal irrelevant 
static relevance tlplan unable utilize cycle checking properly cycle standard blocks world component world various changes extra literals extra extra world different time 
static relevance see extended domain reduces original blocks domain copies operator 
test consisted running random blocks problems convert random initial state random goal state 
irrelevant literals tlplan took seconds total run time execute tests run time rose seconds 
static relevance dropped back seconds 
final test designed address classical criticism forward chaining planners scale face increasing numbers available actions 
test blocks world problem containing blocks takes tlplan seconds solve breadth search exploring worlds 
added number additional domains running tlplan union domain actions initial state contained literals domains additional actions executable 
domains added standard test domains monkey bananas rocket logistics tires domains artificial domain containing actions 
adding extra difference original run time arises extra time required run static relevance algorithm plan time overhead required implementation 
overhead reduced sophisticated implementation 
main tlplan unable solve original problem searching worlds 
static relevance runtime returned previous seconds approximately stayed kept increasing number additional domains 
cases static relevance algorithm took approximately seconds execute run time remained constant increased number extra domains 
due initial backwards pass mentioned briefly text marks action predicate names prior forward reachability pass 
test initial backwards pass able eliminate actions extra domains processing 
planner run time increase static relevance algorithm able remove domains operators list operators prior planning instance operators appears set relevant actions planner need consider 
related way understanding static relevance view mechanism allows forward chaining planner realize benefits partial order planners particular planners snlp algorithm 
planners add actions partial plans searching consider actions achieve open conditions 
conditions generated plan goal preconditions action added achieve prior open condition 
hard see static relevance essentially computing set actions potentially achieve open condition plan 
key difference takes account action bindings reachable initial state 
gerevini schubert gs developed algorithm computing action bindings reachable initial state 
information planner ucpop pw help avoid exploring actions relevant reachable 
algorithm closely related 
key difference algorithm compute reachability information compute relevance information 
sets bindings fully ground literals actions 
fully ground literals provide stronger information sets binding relevance sets computed smaller hardly computational time penalty working sets bindings 
deal negative literals 
deal adl actions gerevini schubert algorithm handle clauses adl actions 
difficult extend algorithm handle case 
cases operator may relevant instances irrelevant instances 
planner works operators actions operator instances consider operator instances generated plan time determine relevant 
adds constant time overhead plan time 
instance relevant eliminate overhead removing operator entirely 
static relevance algorithm somewhat related planning graph construction graphplan viewed type reachability analysis 
difference compute exclusivity sets 
graphplan planning graph grow length plan 
interesting question exclusivity information gained allow reduction relevance sets paying plan length factor 
nebel point size graphplan planning graph serious issue performance developed collection heuristics detect irrelevant literals 
heuristics able detect algorithm detect 
doing lose completeness heuristics remove relevant information rendering planning problem unsolvable 
may possible utilize techniques extend approach 
dynamic relevance static relevance useful idea relatively weak 
particularly problematic testing standard suite planning test domains 
invariably test domains designed generate plans particular purpose actions domain statically relevant planning problem hand effects 
section describe algorithm keeps track relevance dynamically 
motivate idea example 
consider standard blocks world operators pickup putdown stack unstack 
say initial world ontable ontable ontable ontable consider action sequence pickup stack pickup stack unstack putdown clear need move block shorter action sequence pickup stack achieved final state 
unfortunately doing blind breadth search guarantee planner seen remembered shorter plan visited longer sequence 
dynamic relevance designed prune sequences search space 
avoid having search descendants pruned sequence means pruning potentially yield exponential savings search 
dynamic relevance checking see action sequence necessarily contiguous subsequence actions irrelevant 
consider action sequence split sequence subsequences question actions ir relevant probably different answers question obvious definition subsequence action sequence irrelevant 
complement executable sequence initial state 
executed yields final state entire action sequence 
intuitively definition says complement equivalent entire sequence irrelevant 
clear completeness preserved prune actions sequences containing irrelevant subsequences forward chaining search space 
clear definition covers example 
particular subsequence pickup stack unstack putdown irrelevant 
definition cover intuitively irrelevant cases 
consider sequence actions pickup stack pickup stack unstack stack shorter sequence pickup stack pickup stack achieved final state 
sequence contains irrelevant subsequences 
detect cases need mechanism realize actions stack unstack removed remaining actions reordered pickup comes just prior stack may able find additional cases detected efficiently 
possible give syntactic tests sequence subsequence test subsequence irrelevant 
developed syntactic versions semantic definition 
forward chaining planner efficient implement test directly simply executing complement determine fact executable yields identical final state 
definition provides fairly efficient test particular subsequence irrelevant 
sequence contains exponential number subsequences 
detecting irrelevant hard suspect np hard 
question test action sequences relatively efficiently detect useful number ones contain irrelevant subsequences 
address problem developed greedy algorithm complexity linear length action sequence 
imposes depth node overhead node expanded search space 
domains tested algorithm able prune away sufficient nodes search space overhead 
intend analyze tradeoff algorithm overhead reduction search space yields detail 
algorithm examines sequence actions tries greedily construct relevant subsequence possibly detecting sequence irrelevant subsequence complement greedily constructed relevant subsequence 
action sequence places previous actions subsequence subsequence subsequent action greedily tries place checking see executable current contents subsequence actions omitted action omitted actions depended condition inputs action sequence new ground action world generated executing sequence initial state list alternate worlds alternate world associated action stores world generated greedy subsequence omitted action world produced know detected subsequence effects contains irrelevant subsequence 
assumed executable output fail detect generates irrelevant subsequence extended action sequence new final world new list alternate worlds action extended sequence 
procedure 

executable greedily add subsequence omitted action return fail detected subsequence complement irrelevant 
return 

table dynamic relevance algorithm produced checks see complement irrelevant checking see actions yield final state entire sequence 
efficient incremental implementation table 
algorithm called try grow action sequence adding new action returns incremented action sequence rejects illegal extension sequence determined generates irrelevant subsequence 
noted algorithm current plan empty loop step executed 
example say planner examines action sequence pickup stack pickup stack unstack putdown 
examines greedy subsequence starting pickup place stack pickup stack pickup unstack putdown detect stack yields final state entire sequence 
indicated greedy algorithm detect irrelevant subsets 
simple example action se quence hold initial state 
adds adds adds deletes subsequence irrelevant 
algorithm detect 
example roots irrelevant sub sequence algorithm detect singly rooted irrelevant subsequences 
ideas formal ized algorithm extended detect rooted irrelevant subsequences 
length action sequence irrelevant subsequences detected 
unfortunately complexity algorithm grows exponentially irrelevance detection take place search doubt versions practical importance 
empirical results demonstrate greedy algorithm works practice 
way viewing dynamic relevance compare partial order planners 
particular snlp style planners ensure causal link violated 
means action plan explored produce useful 
part dynamic relevance detects action effects superseded prior action form irrelevant subset 
dynamic relevance goes ability detect certain subsets actions considered redundant 
combining dynamic static relevance static relevance algorithm dynamic relevance depend syntactic form actions equally strips adl actions 
furthermore domains static relevance apply types relevance detection 
particular apply dynamic relevance pruning searching reduced space produced static relevance 
experiments section demonstrate considerable benefit gained combination 
empirical results experiment considered russell flat tire domain general task change flat tire actions inflating new tire removing old tire initial state flat tire hub new tire required tools trunk 
standard fix flat tire goal domain problem ucpop distribution contains literals 
experiment initial state generated random planning problems size setting goal randomly selected size subset standard goal literals 
choose random goals size sampling replacement values distinct candidate goals computed average run time 
ran tlplan dynamic relevance detection ucpop distributed search control mechanisms performs better default best search 
ucpop performance dependent input order goal literals testing ucpop particular problem ran random permutations goal average running ucpop times value 
tlplan hand independent goal ordering test required problem 
results shown 
problems proved hard tlplan ucpop search bounds 
dynamic relevance detection tlplan run time seconds tlplan ucpop dynamic relevance number subgoals performance flat tire domain 
able solve problems tested sizes 
domain dynamic relevance able capture natural effective control information help tlplan 
example actions executed remove flat tire hub actions putting back hub allowed undermine effects previous actions 
example tools put back trunk 
problems generated standard goal 
tlplan dynamic relevance detection took seconds solve problem ucpop able solve problems search bounds solved different random permutations goal 
second experiment conducted simplified version logistics domain 
logistics domain difficult domain totally ordered planners planners take advantage fact movements various packages vehicles independent 
dynamic static relevance detection issue total orderings 
tlplan runs slowly domain relevance detection 
result simplified version domain cities required send packages city 
problems experiment contained initial state packages located city goal send packages city 
ran tlplan dynamic static relevance detection depth search 
results shown 
tlplan relevance detection solve problem package 
tlplan dynamic relevance similar difficulties unable solve problems 
static relevance things improved tlplan able solve package problem 
types relevance detec run time seconds log scale static relevance dynamic static relevance number packages goal performance simplified logistics domain 
tion able boost performance significantly tlplan managed solve package problem search limit reached 
distinct ways irrelevance occurs domain 
packages appear goal 
actions move packages greatly needlessly increase branching factor search space 
second actions undo effects earlier action example unload package truck load package truck 
action sequences contain irrelevant subsequences 
clear static relevance exactly needed detect type irrelevance dynamic relevance exactly required detect second type irrelevance 
serve tlplan inefficient solving problems dynamic relevance static relevance detection 
dynamic static relevance detection employed tlplan considerable performance boost 
results demonstrate considerable gains achieved adding notions relevance forward chaining 
traditional argument forward chaining scale large number actions real agent execute 
actions irrelevant particular task expect results show fairly simple notions irrelevance utilized ignore 
shows particular argument forward chaining invalid 
equally clear experiments forward chaining planners ready prime time augmented notions relevance 
discussed feel forward chaining considerable potential reason pursuing aimed improving base line forward chaining planners 
want enhance performance planners prior applying domain independent domain dependent heuristic control 
experiments shown thing needs addressed inefficiencies produced total orderings 
currently working approaches problem 
acknowledgments supported part canadian government nserc iris programs 
reviewers number useful comments 
bac fahiem bacchus 
tlplan version user manual 
available url ftp logos uwaterloo ca pub bacchus ps 
bf blum furst 
fast planning planning graph analysis 
artificial intelligence 
bk bacchus kabanza 
planning temporally extended goals 
proceedings aaai national conference 
bk bacchus kabanza 
temporal logic control search forward chaining planner 
ghallab editors new directions ai planning pages 
iso press amsterdam 
gs gerevini schubert 
accelerating partial order planners techniques effective search control pruning 
journal artificial intelligence research 
ks kautz bart pushing envelope planning propositional logic stochastic search 
proceedings aaai national conference pages 
mcd mcdermott 
heuristic estimator analysis planning 
proceedings third international conference planning systems 
mcallister rosenblitt 
systematic nonlinear planning 
proceedings aaai national conference pages 
nebel dimopoulos koehler 
ignoring irrelevant facts operators plan generation 
proceedings th european conference planning 
springer verlag 
pw penberthy weld 
ucpop sound complete partial order planner adl 
proceedings international conference principles knowledge representation reasoning pages 
rn russell norvig 
artificial intelligence modern approach 
prentice hall 
wel weld 
commitment planning 
ai magazine 
