generalized quantifiers nen department mathematics university helsinki helsinki finland review field generalized quantifiers finite models 
give idea methods available area 
main emphasis definability issues logic ptime properties unordered finite models 
ordinary quantifiers sufficient expressing basic mathematical concepts 
led mostowski introduce generalized quantifiers infinitely uncountably 
similar quantifiers intensively studied logicians 
decade generalized quantifiers re emerged framework finite structures 
researchers descriptive complexity theory natural language semantics looking ways formalize expressions half number 
turned concept generalized quantifier introduced mostowski extended right answer 
goal descriptive complexity theory classify problems resources need solved means turing appeared bulletin european association theoretical computer science 
reprinted generalized quantifiers computation lecture notes computer science vol 
springer 
machine powerful logical languages necessary describing problems 
quick example consider graph problems say problem graph triangle free 
graph pair set binary predicate representing edge relation 
think triangle freeness may ask difficult express fact graph 
check symmetric anti reflexive 
axioms easily expressed logical language follows follows variables elements domain stands assertion edge relation 
standard logical notation means means implies means means sentence expresses fact graph 
likewise sentence 
expresses triangle freeness graph 
point view descriptive complexity theory may say express triangle freeness graph need logical language variables elements permits 
smallest language called order logic fo 
logical language fo extremely successful tool logic century 
success solely due expressing completeness properties infinite structures number bigger number distinct numbers number problems arising computer science usually involve structures universal completeness properties structures databases computations finite 
respectively usual methods theoretical study fo systematically fail finite context see 
order logic handy expressing interesting properties finite structures 
take path problem example 
programming point view natural express existence path graph formula conn conn conn 
sentence features exists definable terms operations fo 
interestingly order get formula conn solve equivalence conn occurs sides 
solutions called fixed points 
general may different fixed points simple way guaranteeing unique fixed point exists 
existence unique fixed point characteristically follows fact right hand side predicate conn occurs positively 
smallest logic extending order logic fixed points expressed called fixed point logic fp 
introduced aho ullman 
proved fixed point equivalence order definable 
fixed point logic definitely different order logic 
expressions order logic written piece write expression conn try changing variables avoid confusion result look conn 
sentence 
expressions fixed point logic sentences ordinary sense word kind self referential recursive generalized sentences 
despite difficulty fixed point queries sentences fixed point logic clear computational content 
graph fixed point expression immediate check graph satisfies expression done polynomial time size graph 
tempting conjecture fixed point query polynomial time conversely polynomial time graph property expressible fixed point query 
immerman vardi showed true special case graph endowed linear ordering vertices 
case possible tuples vertices build model turing machine inside graph imitate polynomial time property suitable fixed point sentence 
presence ordering fixed point approach powerful 
ordering vertices graph 
relatively easy see day game theoretic techniques polynomial time query number vertices expressible fixed point logic unordered graphs 
true non trivial counting queries 
observation led problem natural extension fixed point logic expresses exactly polynomial time queries unordered graphs 
raised chandra harel 
case np natural extension exist existential second order logic defined 
observe order logic fo sense framework general just graphs 
customary logic consider structures general type ordered structures directed graphs hypergraphs groups fields common structures domain relations functions treated relations constants domain 
codd defined finite structures called relation algebra kind minimal database query language 
relation algebra essentially thing fo 
exactly structure consists set sequence relations sequence distinguished constants relation subset cartesian product number called arity relation 
order logic structures name relation constant structure 
symbol object name confusion arises 
names relations constant structure called vocabulary structure 
example graph subset form new structure relation arity relation arity 
say order logic contains neighbors elements union connected components 
interpreted 
existential second order logic form expressions 
called second order quantifier binds relation variable element variable 
note says path equivalent conn 
shows express things order definable 
knows closed negation framework finite models 
infinite models infinity concept 
complement finiteness follows easily called compactness theorem infinite model theory 
fagin proved query np expressible symbols np 
role guessing inherent non deterministic computations played existential second order quantifiers 
fagin result holds structures ordered order guess ordering continue ordering 
recall ordering simulate turing machine inside structure 
possible express fixed point query 
np extension fp expresses exactly polynomial time queries graphs structures 
message able answer question negative proved np 
point generalized quantifiers defined provide general coherent mathematically exact approach extending fo fp 
proof techniques developed provide possible road analyzing question open questions descriptive complexity theory 
generalized quantifiers definition pointed fixed point expression order expression say number vertices graph 
say fp fo degree vertex half vertices degree vertices degree endless list examples simple properties captured fp 
motivates idea extend fo fp allowing new operation 

interpretation 

number 


expression says graph vertex degree 
adding new operation 

half elements satisfy 
say things half vertices graph degree 
operations half examples generalized quantifiers 
extension fo denoted fo extension half denoted fo half 
easy verify queries expressed fo fo half polynomial time computable polynomial time computable query expressible fo fo half 
element arbitrariness definition half 
gets feeling needed just thrown ad hoc 
point generalized quantifiers provide way extending language minimal way 
extension fo say way predicate satisfied number elements satisfies natural regularity properties contains fo 
consider graph example 
probability randomly chosen finite graph hamiltonian tends size graph increases 
logics fo fp zero law holds sentence logic consider probability randomly chosen finite structure satisfies sentence tends size graph increases see informal discussion 
expressed fo fp question raised extension logics expressed zero law 
dawar gr del proved extension fo obtained adding generalized quantifier 


graph edge relation 


hamiltonian zero law 
extension fo capable expressing zero law 

models unary predicate definition suppose vocabulary 
collection structures vocabulary closed isomorphisms called generalized quantifier vocabulary concept generalized quantifier extremely general appear ordinary quantifiers 
discuss generality 
important part definition closure isomorphisms 
see means limits generality suppose consists predicate symbol unary arity 
isomorphism just non isomorphic structures size structure 
universe 
interpretation picture structures pyramid see 
vertical rows size model constant 
rows parallel left side pyramid size predicate constant 
rows parallel right side size complement constant 
generalized quantifier vocabulary essentially just subset pyramid 
pretty picture kind generalized quantifiers vocabulary 
general vocabularies picture clear 
relation generalized quantifiers ordinary quantifiers evident actual generalized quantifiers 
suppose definition 
simplicity assume consists relation symbol binary arity unary arity 
quantifier talk pairs elements satisfying condition 


elements satisfying condition expression 

says structure universe structure universe 


holds holds set framework ordinary quantifier defined generalized quantifier vocabulary unary follows 


holds structure similarly 

holds 

denote fo extension order logic generalized quantifier special difficulty adding generalized quantifier fp attention paid details 
technically speaking speak called inflationary fixed point logic called monotone quantifier disregard detail 
denote result fp 
generalized quantifiers lead solution question 
answer shall see 
interesting note structures ptime fp result kolaitis 
means representation ptime queries terms fp holds randomly chosen finite structure probability tends size structure increases 
weak representation possible fo fp 
hierarchy generalized quantifiers evaluate merits concept generalized quantifier look results gives rise 
example hierarchy results general rare complexity theory strong methods exist proving hierarchy results generalized quantifiers 
hierarchies generalized quantifiers counting variables formulas quantifier binds 
example quantifier binds variable formula 
say type 
quantifier 


binds variables formulas variable formula 
say type 
ham binds variables formula say type 
general type finite sequence 
tk positive integers 
tk 
vocabulary type ti ary predicate symbol ri 
generalized quantifier type vocabulary type 
type vocabulary determines models isomorphism vocabulary size domain 
type unary 
tk non isomorphic models vocabulary size vocabulary non unary max 
tk number non isomorphic models vocabulary size harder compute asymptotically 
nt formulas give immediately idea number quantifiers type 
number se infinite get finite number considering restrictions quantifier fixed finite domain cardinality unary type 
tk number restrictions quantifiers vocabulary course non unary number 
nt point calculating numbers give simple counting method invented proving results generalized quantifiers 
suppose want construct generalized quantifier type definable fo generalized quantifier type 
list 
possible sentences fo give rise definition take care size quantifier defined differently says 
roughly speaking possibilities possibilities sheer counting shows constructed 
elaborating idea possible prove hierarchy theorem demonstrates existence genuinely new quantifiers level type hierarchy see 

tk 
types precedes lexicographic order ti ti ti 





order type ordering infinite ordinal number theorem hierarchy theorem type 
tk generalized quantifier type definable fo type 
graphs loose terms get genuinely new level types 
result permits refinements variations 
important says chosen logspace 
tk 
various constraints imposed essential feature result pure existence result reminiscent cantor diagonalization method 
may force object satisfy nice properties put finger games quantifiers hierarchy theorem previous section establishes richness family generalized quantifiers 
study properties individual quantifiers refined methods needed 
introducing main technical tool study generalized quantifiers method games discuss general problem separating models logical means 
suppose models vocabulary 
may assume graphs may assume databases similar type 
picture shows simple example case graphs 
graph connected graphs isomorphic 
simplest way describing difference 
certainly difference described fo sentence 

raises new question sentence larger cycles 
hand sentence recall sentence true false see sentence true choose left hand cycle right hand cycle left hand cycle 
note works regardless sizes long consists cycles 
looks logical method describe difference unsatisfactory uses second order quantifier ptime algorithm known checking truth sentences involving fixed point formula conn sense infinitary unsatisfactory 
course take generalized quantifier type 


graph edge 


connected 
fo conn trivial way describe difference concept generalized quantifier provides possible framework asking questions fo conn really simplest logic difference picture expressed 
simpler fo conn 
replace conn quantifier simpler type 
types simpler unary types 
proposition generalized quantifier unary type express connectivity graphs 
main idea proof bijective game 
game bgk played models players called ii 
player ii starts choosing bijection domain domain 
player ii loses 
player chooses element player ii chooses bijection player chooses element game continues moves 
correspondence ak fk ak 
player ii winner able play moves produced correspondence partial isomorphism preserves structure 
example graphs means edge ai aj edge fi ai fj aj ai aj fi ai fj aj 
winning strategy player ii bg graphs picture described follows 
choice arbitrary single element looks models edge left edge right 
player chosen player ii chooses maps element distance element distance preserving orientation 
quite arbitrary long bijection 
player chooses player ii chooses maps immediate neighbors immediate neighbors preserving orientation 
player chosen easy see mapping ai fi ai preserves edge relation 
family unary generalized quantifiers fo extension fo quantifiers 
theorem sufficient condition property finite models fo numbers models property ii property iii player ii winning strategy game bgk 
theorem reduces logical question property expressible terms propositional connectives quantifiers general albeit unary nature purely mathematical question certain models certain combinatorial properties exist 
example graphs picture theorem provide proof proposition 
proof theorem lengthy particularly difficult 
sufficiency condition idea assume model satisfies sentence qx 
supposedly defining generalized quantifier type 
general defining sentence need start 
furthermore suppose player ii winning strategy bgk sufficiently large 
actual choice inspection formula 

strategy advises player ii choose bijection 
qx 

true structure domain set elements satisfy 

domain set elements satisfy condition 

comes fundamental idea game bgk 
claim 
suppose prove suppose satisfies condition 

player choose game bgk 
player ii playing winning strategy know satisfies basic relations satisfies formulating induction hypothesis appropriately know satisfies definable relations satisfies definable means definability restricted sense includes relation 

know satisfies condition 

conclude satisfies condition 

particular desired 
know may draw means definition sentence qx 

true qx 

define property theorem successfully show various graph properties planarity expressible terms unary quantifiers 
results seen formalizations vague intuition properties binary relations reduced properties cardinalities definable sets 
really remarkable theorem generalizes non unary quantifiers extensions fixed point logic generalized quantifiers 
call type 
tk ary max 
tk vocabulary generalized quantifier called ary type ary 
word binary generally ary 
game bg ary version bgk defined bgk player moves chooses tuple 
single element ai 
moves correspondence 
fk 
player ii wins partial isomorphism 
game immensely difficult win player ii bgk preserve tuples 
graphs means player ii move losing isomorphic 
denote family ary generalized quantifiers fo corresponding extension fo 
theorem theorem holds ary generalized quantifiers replaced bgk bg 
means criterion possible show type ram 

large 
definable fo 
large reasonable log size model 
denoted tuple 
xr bold face means set tuples distinct elements ramsey quantifier known ptime general 
natural instances np complete 
explicit ary quantifiers fp definable fo 
example transitive closure quantifier tuples see 
interesting theorem fixed point logic fp represented extension fo finitely generalized quantifiers 
arities finitely quantifiers common upper bound representation contradict existence fp queries definable fo 
strong manifestation inherent finitely generalized quantifiers express recursion 
combining recursion generalized quantifiers 
remarked generalized quantifier added fixed point logic fp 
fp denote extension fp ary quantifiers 
replace logic fo logic fp theorem simultaneously replace game bgk new game bp called bijective pebble game define 
game bg potentially infinitely long sense play moves size 
harder player ii bg 
counterbalance length special mechanism limit size final correspondence cf 

pebbles 
bg player chooses tuple game bp puts pebbles elements tuple 
difference 
eventually runs pebbles 
take back pebbles reuse 
point player decides game lasted long 
look correspondence generated elements pebble final position 
form mapping 
ajk ik jk ik fi fik ajk ik sequence elements pebble 
partial isomorphism player ii won 
challenge bp presents player ii find strategy works matter long game going matter long go 
example picture player ii wins bp 
theorem theorem holds fixed point logic ary generalized quantifier fo replaced fp bgk bp 
criterion possible prove certain properties ary relations expressible terms ary generalized quantifiers fixed points formulas allowed 
result direction due cai immerman exhibited logspace property graphs expressible fp 
demonstrates powerful way impossibility solving question means fixed points quantifiers merely count sizes definable sets 
result showed logspace properties finite models expressible fp 
theorem unordered finite models ptime extension fixed point logic finitely generalized quantifiers 
shows want answer affirmatively look fixed point logic finite collections generalized quantifiers 
difference hierarchy theorem theorem results section counting method hierarchy theorem simply gives existence quantifier certain properties concern quantifier intuitive meaning 
elaborate game theoretic methods section possible take concrete meaningful quantifier ramsey quantifier prove reduced simpler quantifiers 
quantifier schemata pointed ptime expressed logical formalism fixed point logic provided restrict ordered models 
pointed extension fixed point logic single generalized quantifier captures ptime unordered finite models 
concluded framework unordered finite models extension fixed point logic finitely generalized quantifiers give ptime 
capture ptime adding infinite number generalized quantifiers fixed point logic 
trivial answer 
take new quantifier ptime query add resulting infinitely quantifiers fo 
surely get ptime gained 
sense look infinite collections quantifiers arising effective process ask get ptime 
ways single generalized quantifier give rise infinite sequence quantifiers 
recall ramsey quantifier ram defined 
think arising simpler quantifier 


size model 
quantifier say choosing things vertices green neighbor denote ram ram qf large defined denotes size model 
ram qf called ramsey lift qf 
sentence say ram qf vertices neighbors choice quantifier qf type gives rise infinite sequence quantifiers ram qf higher higher type 
turns non trivial quantifier ram qf defined terms quantifiers smaller type fixed points 
get ptime added possible ramsey lifts quantifiers type 
lifts nature ramsey lift considered especially study natural language semantics formalize expressions boys class girls class dated 
interesting lift point view descriptive complexity theory resumption vectorization lift 
words vectorization quantifier says tuples says elements 
second vectorization says number pairs 


general quantifier type 
tk 
th vectorization quantifier type mt 

arity quantifier increases factor quantifier type class models vocabulary consists ti ary relation symbol ri 

define res vector notation denote sequence 
zm variables 
language consist mti ary relation symbol 

class models 
vocabulary structure 
rk ri 

am 
ti am ti 

am 
ti 
example suppose type quantifier consists structures graph clique size set model domain expression 

says 

graph clique elements res type 

says model 

graph clique elements sequences note ptime res vectorization lift computationally simpler ramsey lift 
denote fo extension fo res important concrete example consider transitive closure quantifier type graph path graph theorem nlogspace fo ordered models 
interesting note result known nlogspace closed complements 
open problem natural logic nlogspace fo holds unordered models 
alternating transitive closure quantifier atc consists models graph neighbor neighbor neighbor neighbor neighbor come element immerman proved ptime fo ordered finite models 
result interesting version models ordered unordered theorem fp fo 
finite sequence generalized quantifiers capture fp unordered models theorem infinite sequence capable job 
generalized quantifiers able express recursive definitions soon sufficient arities sufficiently long tuples available 
remains open problem ptime fo unordered models 
dawar proved interesting result shows approach generalized quantifiers theorem question positive answer exact sense generalized quantifier ptime fo finite models 
methods available moment study generalized quantifiers effectively study definability questions concerning individual quantifiers families quantifiers bound arities 
unfortunately methods extremely hard applied quantifier schemata 
aho ullman universality data retrieval languages sixth acm symposium principles programming languages 
cai immerman optimal lower bound number variables graph identification combinatorica 
chandra harel 
structure complexity relational queries 
journal computer system sciences 
codd relational completeness database sublanguages database systems ed prentice hall 
dahlhaus skolem normal forms concerning fixpoint computation theory logic rger ed lecture notes comput 
sci springer berlin new york 
dawar generalized quantifiers logical journal logic computation 
dawar gr del generalized quantifiers laws proc 
th ieee symp 
logic computer science 
fagin number finite relational structures discrete mathematics 
fagin generalized order spectra polynomial time recognizable sets complexity computation karp ed 
siam ams proc 

double arity hierarchy theorem transitive closure logic archive mathematical logic 
gurevich 
logic tailored computational complexity 
richter editor computation proof theory lecture notes mathematics pages 
springer verlag 
gurevich 
logic challenge computer science 
rger editor current trends theoretical computer science pages 
computer science press 
gurevich zero laws column eatcs bulletin 
logical hierarchies ptime information computation 
partially ordered connectives finite graphs quantifiers logics models computation mostowski eds vol ii kluwer academic publishers 
ph 
kolaitis equivalence logics finite model theory bulletin symbolic logic 
nen hierarchy theorem generalized quantifiers 
symbolic logic 
nen ahl definability polyadic lifts generalized quantifiers appear journal logic language information 
immerman relational queries computable polynomial time information control 
immerman languages capture complexity classes siam comput 

order predicate logic generalized quantifiers theoria 
mostowski generalization quantifiers 
fundamenta mathematicae 
winning strategies unary quantifiers journal logic computation 
vardi complexity relational query languages th acm stoc symposium 

