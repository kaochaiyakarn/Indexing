full abstraction hopla nygaard glynn winskel brics university aarhus computer laboratory university cambridge 
fully denotational semantics higher order process language hopla 
characterises contextual logical equivalence linking simulation 
semantics clean domain theoretic description processes downwards closed sets computation paths operations hopla arise syntactic encodings canonical constructions sets full abstraction direct consequence expressiveness respect computation paths simple proofs soundness adequacy shows correspondence denotational operational semantics 
hopla higher order process language expressive language order nondeterministic processes 
straightforward operational semantics supporting standard bisimulation congruence directly ccs higher order ccs mobile ambients public names 
language came linear domain theory concurrency ona categorical model linear logic associated comonads comonad hopla exponential linear logic denotational semantics interpreted processes presheaves 
consider path semantics hopla allows charac operationally distinguishing power notion computation path underlying presheaf semantics contrast distinguishing power ofthe presheaf structure 
path semantics similar trace semantics processes denote downwards closed sets computation paths notion process equivalence called path equivalence equality sets computation paths may structure traces 
characterise contextual equivalence hopla path equivalence show coincides logical equivalence frag ment hennessy milner logic characteristic simulation equivalence case image finite processes increase expressiveness hopla example include type ccs late value passing ensuring language canonical semantics decompose type sigma ff aff sum type sigma ff anonymous action basic research computer science www brics dk funded danish national research foundation 
prefix type sum type product associated injection tag ging projection term constructors fit fi prefix associated constructions prefixing prefix match subsuming original terms fi fi fi sect 
domain theory path sets sect 
give fully denotational semantics hopla 
section presents opera tional semantics hopla essentially relates denotational operational semantics simple proofs soundness ade 
section concludes discussion related 
domain theory path sets path semantics processes intuitively represented collections paths 
paths elements preorders 
called path function process types describing set possible paths processes type sub path ordering 
process typep represented downwards closed subset called path set path sets ordered inclusion form elements poset bp whichwe ll think domain meanings processes type poset bp interesting properties 
joins union 
sense hennessy plotkin bp nondeterministic domain joins interpret nondeterministic processes 
accordingly family xi elements bp sigma xi join 
typical finite join written xk empty join empty path set inactive process written 
second important property bp bp join certain prime elements bp prime algebraic complete lattice 
primes closures individual elements process may perform computation path map yp reflects preserves order iff yp embeds 
clearly pp iff prime algebraicity bp amounts bp union elements sp 
bp characterised abstractly free join completion meaning join complete ii join complete poset monotone map unique join preserving map bp left commutes 
yp iiii iii bpf sp 
call extension yp 
uniqueness follows 
notice may instantiate poset form bq drawing join preserving maps bp bq 
freeness property maps bp bq bijective correspondence monotone bq 
element bq represented characteristic func tion monotone map fy opposite order fy bq 
uncurrying chain bq pop op pop 
order pop provides function space type 
ll investigate type structure hand 
linear continuous categories write lin category path orders 
objects join pre serving maps bp bq arrows 
turns lin structure categorical model girard linear logic 
accordingly ll call arrows lin linear maps 
linear maps represented elements pop downwards closed subsets order op relational presentation exposes involution central understanding lin categorical model classical 
involution linear logic yielding 
object pop clearly downwards closed subsets pop correspond downwards closed subsets op op pop showing maps correspond maps 
lin 
tensor product preorders singleton order unit tensor 
linear obtained op products disjoint juxtaposition preorders 
element pair bp bq provides projections ss ss lin 
general just binary products pi projections ssj defined similarly 
property products collection maps fi pi form unique map pi ssj ffi fj empty product terminal object associated unique maps constantly path order told lin autonomous category symmetric monoidal closed category object required seely definition model linear logic 
fact lin coproducts objects coinciding products 
injection maps lin derive obvious injections sum preorders 
empty coproduct empty order zero object 
collapse products coproducts highlights lin arbitrary 
isomorphism lin pop lin seen commutative monoid neutral element map written sum union written composition lin bilinear wehave ffi ffi ffi ffi ffi 
objects ff ff fi diagram pfi sigma ff ffi pfi ffi inff ff fi sigma ff inff ffi sigma ff 
processes type sigma ff may intuitively perform computation paths ofthe component path orders ff see lin rich structure 
linear maps restrictive 
join preserving particular preserve empty join 
prefixing linear maps send inactive process 
looking broader notion maps nondeterministic domains follow linear logic consider non linear maps maps domain exponential 
choice suitable exponential lin preorder obtained free finite join completion concretely defined finite subsets elements defined arbitrary subsets follows def 
equivalence induced preorder obtain free finite join completion obvious inclusion completion bp get map ip bp sending 
pn join 
finite sums primes finite isolated compact elements bp 
map ip assumes role yp 
bp ipp iff join finite elements sp px ipp 
bp free directed join completion known 
means monotone map forsome directed join complete poset unique directed join preserving scott continuous map bp diagram commutes 
ip jjj bpf sp px 
uniqueness called extension ip follows 
replace nondeterministic domain bq freeness properties bijective correspondence linear maps continuous maps bp bq 
define category cts path orders 
objects maps bp bq arrows 
arrows allow process operations including prefixing expressed 
structure cts induced adjunction categories 
adjunction linear maps continuous cts lin sub category objects 
saw bijection lin cts 
fact natural adjunction inclusion lin 
right adjoint 
map extends map jp cts 
conversely ip bp extends map lin 
maps unit counit respectively adjunction sp px pp px sp ipp left adjoint functor cts lin arrows jq ffi ffi ip bijection maps ffi jp cts inverse maps cts ffi lin 
call transpose respectively ofcourse transposing twice yields back original map 
lin sub cts counit map cts 
ffi jp jp ffi objects right adjoints preserve products cts products lin cts symmetric monoidal category lin fact adjunction symmetric monoidal 
detail isomorphisms path orders mp mp mapping pair union written form 
isomorphisms induce isomorphisms names lin natural 
associativity symmetry unit maps lin cts suchas making symmetric monoidal 
follows inclusion lin 
cts symmetric monoidal aswell unit counit monoidal transformations 
maps np cts natural corresponding maps np extension map ipp 
diagrams commute counit satisfies similar properties 
jp jq mm jp jo iiii iii mp diagram left written str ffi jq jp str strength viewed monad cts natural transformation jp mp 
recall category lin symmetric monoidal closed thatthe functor right adjoint object natural isomorphism provides right adjoint defined functor cts chain cts lin lin lin cts cts natural demonstrates cts cartesian closed wellknown 
adjunction lin cts satisfies conditions benton categorical model intuitionistic linear logic strengthening seely see survey models 
denotational semantics hopla directly suggested structure cts 
language types grammar sigma ff uj 
symbol drawn set type variables defining recur sive types closed type expressions interpreted path orders 
vector notation uj abbreviates 
tk 
tk interpreted component solution defining equations 
tk tk expressions 
tk may contain tj 
shall write abbreviation tuple component uj confuse closed expression path order path order 
simultaneous recursive equations path orders solved 
convenient give concrete inductive characterisation language paths 
fip abs 
ranges finite sets paths 

notation pairs inthe function space op language complemented formation rules judgements meaning belongs displayed top defining ordering judgements 
recall means 


pfi fi fip sigma ff pn 
pn tj abs uj 

pfi fip sigma ff fip tj abs uj abs information systems yields representation tagging abs recursive types done help proof adequacy sect 

straight equality unfolding get isomorphism abs tj uj inverse call rep example consider type ccs processes path order satisfying sigma ff set ccs actions 
elements ofp form abs fip fi finite set paths intuitively ccs process perform path perform action fi able perform path raw syntax hopla terms rec sigma ti fit abs rep 
variables terms rec binding oc scope shall take granted understanding free variables substitution raw terms 

pk closed type expressions assume variables 
xk distinct 
syntactic judgement 
xk pk map 
xk pk qk pk cts 
ll write gamma lambda environment list 
xk pk abbreviate denotation pk 
gamma 
jtk suppressing 
environment list empty corresponding product empty path order term formation rules displayed alongside interpretations constructors maps cts maps denoted premises denoted cf 

assume variables environment list appears distinct 
structural rules 
rules handling environment lists follows 
gamma gamma gamma 
gamma 

gamma lambda gamma lambda gamma lambda 
gamma lambda gamma lambda 
gamma gamma gamma 
gamma gamma delta 
gamma 
formation rule contraction variable fresh map delta usual diagonal pi 
recursive definition 
bp complete lattice admits fixed points continuous maps 
bp bp continuous fixed point fix bp obtained sn 

fix fixpoint cts gamma gamma continuous operation mapping gamma cts compo sition tk ffi gamma ffi delta gamma gamma gamma rec gamma 
gamma fix 
nondeterministic sum 
path order associated join operation sigma cts tuple join sigma ti bp 
ll write 
tk finite sums 
gamma tj gamma sigma iti gamma tj 
gamma 
sigma 
function space 
noted sect 
category cts function space correspondence curry maps maps 
cts inverse 
obtain application app uncurry 
gamma gamma gamma 
gamma curry 
gamma lambda gamma lambda gamma 
lambda 
gamma lambda 
app 
sum type 
category cts coproducts build type lin 
properties obviously satisfied cts construction universal linear maps composition generally bilinear cts 
ll write pk empty finite sum types 
product pairing projection terms fst snd encoded respectively type terms ss ss 
gamma pfi fi gamma fit sigma ff gamma 
pfi fi gamma 
pfi 
sigma ff gamma sigma ff fi gamma pfi gamma 
sigma ff fi gamma 
sigma ff 
pfi prefixing 
adjunction lin cts provides type constructor unit jp counit may interpret respectively 
behaviour jp maps cts fits anonymous prefix operation 
ll say type prefixed process type intuitively process 
able perform action call continuing gamma gamma gamma 
gamma 
jp 
universal property jp type free variable type interpreted map cts transpose ffi isthe unique map lin ffi jp 
type tu 
intuitively construction tests matches pattern passes results successful matches prefixing term type matching yields tu 
linearity possibly multiple results matches nondeterministically summed denotations sigma iui sigma ui identical clearly generalises case open term free variables need strength map gamma lambda gamma lambda gamma 
lambda 
gamma lambda gamma 
gamma str gamma 
gamma 
recursive types 
folding unfolding recursive types accompanied abs rep gamma tj gamma abs uj gamma 
tj gamma 
tj abs 
uj gamma uj gamma rep tj gamma 
uj gamma 
uj rep 
tj useful equivalences provide technical results path semantics inthe proof soundness proposition 
proofs :10.1.1.10.2078
lemma substitution 
suppose gamma lambda gamma lambda disjoint 
gamma lambda denotation tk ffi gamma 
corollary 
gamma gamma rec tk rec recursion amounts unfolding 
corollary 
application amounts substitution 
situation sub lemma uk jt proposition 
properties linearity tions projections get fit fit ff fij sigma ff aff jtk fi sigma ti sigma kj sigma iti sigma proposition 
prefix match satisfies jt kj sigma ui sigma ui full abstraction define program closed term type gamma program context term holes term gamma may put form denotational semantics gives rise type preorder definition 
suppose gamma gamma say contextual preorder written iff gamma program contexts jc jc 
contextually equivalent 
contextual equivalence coincides path equivalence theorem full abstraction 
terms gamma gamma jt 
proof 
suppose jt jt gamma program context jc 
jt jc monotonicity wanted suppose 
define closed terms tp type program contexts cp respectively realise consume path induction structure ll need consumers finite sets paths tp tq tp tabs abs tp cp cq cp cp cp rep pn tp tpn pn cp cpn 
note 


syntax depends permutation elements semantics obtained 
fresh variable tpk ipp cp yp 
yp 
suppose closed 
jt jcp get jcp jt 
follows jt jt open terms suppose gamma 
xk pk 
writing term 
xk likewise get jt jt 
proof complete 
ut rec 
rec 
tj 
sigma iti 




pfi 
sigma ff fit fia 
sigma ff fia 
pfi 




tj 
uj abs abs 
uj abs 
tj rep 
fig 

operational rules operational semantics hopla operational semantics actions defined 
fia abs 
assign types actions judgement form 
intuitively performing action turns process type process type 

pfi fi sigma ff fia tj uj abs notice type unique fig 
define relation 
induction shows proposition 


accordingly ll write 


soundness adequacy action define linear map process type representation possible successors action order distinguish say successor successors embeds type 
successors action processes 
respectively jp 
jp 

convenient treat syntactic operation define term ja tk jtk 
ffi app ffi fia ffi abs ffi rep 
fia abs rep explicit types operational rules missing rules 
needed ensure types agree transitions 
role reduce action prefix action 
formally captured lemma proved structural induction lemma 



note reduction done uniformly types con texts application projection unfolding 
explains somewhat mysterious function space actions 
similar labels carry appears 
soundness says operational notion successor included notion 
proof rule induction transition rules see :10.1.1.10.2078:10.1.1.10.2078
proposition soundness 

jp jt jtk 
obtain corresponding adequacy result logical relations ep tween subsets closed terms type intuitively ep paths operationally realised relations defined structural induction type employ trick essentially due martin see ch 
define auxiliary relations paths closed terms oftype induction structure ep def 
def 
ep fip ffl sigma ff def ffl def 

ep abs def rep main lemma proved structural induction terms see :10.1.1.10.2078
lemma 
suppose jtk ep proposition adequacy 
suppose 
jtk 


proof 
direction follows soundness 
assume jtk 
jtk downwards closed subset element wemust jtk 
ffl lemma implies existence term 

lemma 

ut full abstraction operational semantics adequacy allows operational formulation contextual equivalence 
program write 
exists 

iff jtk adequacy 
terms gamma gamma related contextual preorder iff gamma program contexts 
full abstraction formulated terms operational preorder 
inclusion jt jt holds iff gamma implication 

simulation path semantics capture branching behaviour pro cesses characterise bisimilarity presheaf semantics needed see 
example processes 

deno tation clearly bisimilar 
hennessy milner logic link path equivalence simulation 
detail consider fragment milner logic possibility finite conjunctions characteristic simulation equivalence case image finite processes 
ranging actions formulae oe vi oei 
empty conjunction written 
type formulae judgements oe idea processes type described oe oe oei nv oei notion satisfaction written ffl oe defined ffl 

ffl oe ffl vi oei ffl oei 
note ffl definition 
closed terms type related written iff formulae oe ffl oe ffl oe say 
formula oe construct program context coe coe 
ffl oe 
define chu ch ioe coe rep cv oei coe coen 
corollary 
closed terms type 
proof 
direction follows remarks sect 

forthe converse observe program contexts cp full sect 
subsumed contexts 
jt full abstraction 
ut related matthew hennessy fully semantics higher order ccs seen generalisation translation higher order ccs hopla see presheaf semantics originally hopla refined version path semantics 
path set bp seen give answer question path realised process cf 
representation sect 
path sets monotone maps op 
presheaf functor pop set category sets functions gives set saying path may realised 
extra information obtain refined versions proofs sound ness adequacy giving hope extending full abstraction result characterisation bisimilarity possibly terms open maps replacing exponential lifting comonad yields model aff linear logic affine version hopla fully path semantics :10.1.1.10.2078
tensor operation aff understood composition event structures 
affine language holds promise extending approach independence models petri nets structures computation paths partial orders events 
progress provide operational semantics language similar obtained 
higher order process language hopla allows process passing express certain forms mobility particular ambient calculus public names 
kind mobility mobility com munication links arises name generation ss calculus 
hopla francesco gw defined higher order process language name generation allowing encodings full ambient ss calculus 
bisimulation properties semantic underpinnings 

benton 
mixed linear non linear logic proofs terms models extended 
proc 
csl lncs 

br 
axiomatic approach adequacy 
ph dissertation university aarhus 
brics dissertation series ds 

cardelli gordon 
anytime modal logics mobile ambients 
proc 
popl 

cattani winskel 
profunctors open maps bisimulation 
manuscript 


girard 
linear logic 
theoretical computer science 

gordon 
bisimilarity theory functional programming 
proc 
mfps entcs 
hennessy plotkin 
full abstraction simple parallel programming language 
proc 
mfcs lncs 

hennessy milner 
algebraic laws nondeterminism concurrency 
journal acm 

hennessy 
fully denotational model higher order processes 
information computation 

hoare 
model communicating sequential processes 
technical monograph prg university oxford computing laboratory 

joyal nielsen winskel 
bisimulation open maps 
information computation 

larsen winskel 
information systems solve recursive domain equations effectively 
proc 
semantics data types lncs 


melli es 
categorical models linear logic revisited 
submitted theoretical computer science 

milner parrow walker 
calculus mobile processes parts ii 
information computation 

morris 
lambda calculus models programming languages 
phd thesis mit 

nielsen plotkin winskel 
petri nets event structures domains part theoretical computer science 

nygaard 
operational understanding presheaf models 
progress report university aarhus 

nygaard winskel 
linearity process languages 
proc 
lics 

nygaard winskel 
hopla higher order process language 
proc 
concur lncs 

nygaard winskel 
domain theory concurrency 
submitted theoretical computer science 

scott 
domains denotational semantics 
proc 
icalp lncs 

seely 
linear logic autonomous categories cofree coalgebras 
proc 
categories computer science logic 

winskel 
formal semantics programming languages 
mit press 

winskel 
presheaf semantics value passing processes 
proc 
concur lncs 

winskel 
manuscript 
