published proc 
symposium operating systems design implementation usenix association november lottery scheduling flexible proportional share resource management presents lottery scheduling novel randomized resource allocation mechanism 
lottery scheduling provides efficient responsive control relative execution rates computations 
control capabilities conventional schedulers desirable systems service requests varying importance databases media applications networks 
lottery scheduling supports modular resource management enabling concurrent modules insulate resource allocation policies 
currency abstraction introduced flexibly name share protect resource rights 
show lottery scheduling generalized manage diverse resources bandwidth memory access locks 
implemented prototype lottery scheduler mach microkernel provides flexible responsive control relative execution rates wide range applications 
overhead imposed unoptimized prototype comparable standard mach timesharing policy 
scheduling computations multithreaded systems complex challenging problem 
scarce resources multiplexed service requests varying importance policy chosen manage multiplexing enormous impact throughput response time 
accurate control quality service provided users applications requires support specifying relative computation rates 
control desirable wide spectrum systems 
long running computations scientific applications simulations consumption computing resources shared users applications varying importance regulated hel 
interactive computations databases applications programmers users need ability mail lcs mit edu 
world wide web www psg lcs mit edu 
author supported part fellowship mit consortium 
prof weihl currently supported dec sabbatical dec src 
research supported arpa contract ibm equipment dec views contained document authors interpreted representing official policies expressed implied government 
carl waldspurger william weihl mit laboratory computer science cambridge ma usa rapidly focus available resources tasks currently important dui 
general purpose schemes come close supporting flexible responsive control service rates 
exist generally rely simple notion priority provide encapsulation modularity properties required engineering large software systems 
fact exception hard real time systems observed assignment priorities dynamic priority adjustment schemes ad hoc dei 
popular priority schemes cpu allocation decay usage scheduling poorly understood despite fact employed numerous operating systems including unix hel 
existing fair share schedulers hen kay microeconomic schedulers fer wal successfully address problems absolute priority schemes 
assumptions overheads associated systems limit relatively coarse control long running computations 
interactive systems require rapid dynamic control scheduling time scale milliseconds seconds 
developed lottery scheduling novel randomized mechanism provides responsive control relative execution rates computations 
lottery scheduling efficiently implements proportional share resource management resource consumption rates active computations proportional relative shares allocated 
lottery scheduling provides excellent support modular resource management 
developed prototype lottery scheduler mach microkernel provides efficient flexible control relative execution rates compute bound tasks video applications client server interactions 
level control possible current operating systems adjusting scheduling parameters achieve specific results best black art 
lottery scheduling generalized manage diverse resources bandwidth memory access locks 
developed prototype mutex implementation provides flexible control mutex acquisition rates 
variant lottery scheduling efficiently manage space shared resources memory 
section describe basic lottery scheduling mechanism 
section discusses techniques modular resource management lottery scheduling 
implementation issues description prototype section 
section discusses results quantitative experiments 
generalizations lottery scheduling approach explored section 
section examine related 
summarize section 
lottery scheduling lottery scheduling randomized resource allocation mechanism 
resource rights represented lottery tickets 
allocation determined holding lottery resource granted client winning ticket 
effectively allocates resources competing clients proportion number tickets hold 
resource rights lottery tickets encapsulate resource rights relative uniform 
quantify resource rights independently machine details 
lottery tickets relative fraction resource represent varies dynamically proportion contention resource 
client obtain lightly contended resource highly contended worst case receive share proportional share tickets system 
tickets uniform rights heterogeneous resources homogeneously represented tickets 
properties lottery tickets similar money computational economies wal 
lotteries scheduling lottery probabilistically fair 
expected allocation resources clients proportional number tickets hold 
scheduling algorithm randomized actual allocated proportions guaranteed match expected proportions exactly 
disparity decreases number allocations increases 
number lotteries won client binomial distribution 
probability client holding tickets win lottery total tickets simply identical lotteries expected number wins np variance np 
coefficient variation observed proportion wins np 
client throughput proportional ticket allocation accuracy improves single physical ticket may represent number logical tickets 
similar monetary notes may issued different denominations 
number lotteries required client win geometric distribution 
expected number lotteries client wait win variance client average response time inversely proportional ticket allocation 
properties binomial geometric distributions understood tri 
scheduling quantum milliseconds lotteries second reasonable fairness achieved time intervals 
computation speeds continue increase shorter time quanta improve accuracy maintaining fixed proportion scheduler overhead 
client non zero number tickets eventually win lottery conventional problem starvation exist 
lottery mechanism operates fairly number clients tickets varies dynamically 
allocation client fair chance winning proportional share total number tickets 
changes relative ticket allocations immediately reflected allocation decision lottery scheduling extremely responsive 
modular resource management explicit representation resource rights lottery tickets provides convenient substrate modular resource management 
tickets insulate resource management policies independent modules ticket probabilistically guarantees owner right worst case resource consumption rate 
lottery tickets abstractly encapsulate resource rights treated class objects may transferred messages 
section presents basic techniques implementing resource management policies lottery tickets 
detailed examples section 
ticket transfers ticket transfers explicit transfers tickets client 
ticket transfers situation client blocks due dependency 
example client needs block pending reply rpc temporarily transfer tickets server waiting 
idea conveniently solves conventional priority inversion problem manner similar priority inheritance sha 
clients ability divide ticket transfers multiple servers may waiting 
ticket inflation ticket inflation alternative explicit ticket transfers client resource rights creating lottery tickets 
general inflation disallowed violates desirable modularity load insulation properties 
example single client easily resource creating large number lottery tickets 
ticket inflation useful mutually trusting clients inflation deflation adjust resource allocations explicit communication 
ticket currencies general resource management abstraction barriers desirable logical trust boundaries 
lottery scheduling easily extended express resource rights units local group mutually trusting clients 
unique currency tickets trust boundary 
currency backed funded tickets primitive currencies 
currency relationships may form arbitrary acyclic graph hierarchy currencies 
effects inflation locally contained maintaining exchange rate local currency base currency conserved 
currency abstraction useful flexibly naming sharing protecting resource rights 
example access control list associated currency specify principals permission inflate creating new tickets 
compensation tickets client consumes fraction allocated resource quantum granted compensation ticket inflates value client starts quantum 
ensures client resource consumption equal times lottery win probability adjusted match allocated share compensation tickets client consume entire allocated quantum receive entitled share processor 
implementation implemented prototype lottery scheduler modifying mach microkernel mk acc loe mhz mips decstation 
full support provided ticket transfers ticket inflation ticket currencies compensation tickets 
scheduling quantum platform milliseconds 
random numbers efficient lottery scheduler requires fast way generate uniformly distributed random numbers 
implemented pseudo random number generator lottery scheduler implementation developed prelude wei runtime system lacked support ticket transfers currencies 
total random 



example lottery 
clients compete list lottery total tickets 
fifteenth ticket randomly selected client list searched winner 
running ticket sum accumulated winning ticket value reached 
example third client winner 
park miller algorithm par car executes approximately risc instructions 
assembly language implementation listed appendix lotteries straightforward way implement centralized lottery scheduler randomly select winning ticket search list clients locate client holding ticket 
requires random number generation operations traverse client list length accumulating running ticket sum reaches winning value 
example list lottery 
various optimizations reduce average number clients examined 
example distribution tickets clients uneven ordering clients decreasing ticket counts substantially reduce average search length 
clients largest number tickets selected frequently simple move front heuristic effective 
large efficient implementation tree partial ticket sums clients leaves 
locate client holding winning ticket tree traversed starting root node winning client leaf node requiring lg operations 
tree implementation basis distributed lottery scheduler 
mach kernel interface kernel representation tickets currencies depicted 
minimal lottery scheduling interface exported microkernel 
consists operations create destroy tickets currencies operations fund currency adding removing ticket list backing tickets operations compute current value tickets currencies base units 
lottery scheduling policy exists standard timesharing fixed priority policies 
high priority threads ethernet driver created unix server ux remain original fixed priorities 
base ticket amount currency 
alice 
currency list backing tickets unique name active amount list issued tickets kernel objects 
ticket object contains amount currency 
currency object contains name list tickets back currency list tickets issued currency active amount sum issued tickets 
ticket currencies prototype uses simple scheme convert ticket amounts base units 
currency maintains active amount sum issued tickets 
ticket active thread compete lottery 
thread removed run queue tickets deactivated reactivated thread rejoins run queue 
ticket deactivation changes currency active amount zero deactivation propagates backing tickets 
similarly ticket activation changes currency active amount zero activation propagates backing tickets 
currency value computed summing value backing tickets 
ticket value computed multiplying value currency share active amount issued currency 
value ticket base currency defined face value amount 
example currency graph base value conversions 
currency conversions accelerated caching values exchange rates implemented prototype 
scheduler uses simple list lottery move front heuristic described earlier section 
handle multiple currencies winning ticket value selected generating random number zero total number active tickets base currency 
run queue traversed described earlier running ticket sum accumulates value thread currency base units winning value reached 
blocked thread may transfer tickets thread actively 
example thread blocked pending reply rpc transfers tickets server thread waiting 
thread alice task task base alice alice task base task task base thread thread bob bob task task thread example currency graph 
users compete computing resources 
alice executing tasks task currently inactive task runnable threads 
bob executing single threaded task task 
current values base units runnable threads thread thread thread 
general currencies groups users applications currency relationships may form acyclic graph strict hierarchy 
compensation tickets discussed section thread consumes fraction allocated time quantum automatically granted compensation ticket inflates value thread starts quantum 
consistent proportional sharing permits bound tasks processor cycles start quickly 
example suppose threads hold tickets valued base units 
thread consumes entire millisecond time quantum thread uses milliseconds yielding processor 
equal funding equally win lottery compete processor 
thread uses allocated time allowing thread consume times cpu violation allocation ratio 
remedy situation thread granted compensation ticket valued base units yields processor 
competes processor total funding base units 
average win processor lottery times time consuming quantum achieving desired allocation ratio 
ticket transfers mach msg system call modified temporarily transfer tickets client server synchronous rpcs 
automatically redirects resource rights blocked client server computing behalf 
transfer implemented creating new ticket client currency fund server currency 
server thread waiting mach msg performs synchronous call immediately funded transfer ticket 
server thread waiting transfer ticket placed list checked server thread attempts receive call message 
reply transfer ticket simply destroyed 
user interface currencies tickets manipulated command line interface 
user level commands exist create destroy tickets currencies fund currencies fund obtain information execute shell command specified funding 
mach microkernel concept user modify unix server commands setuid root 
complete lottery scheduling system protect currencies access control lists unix style permissions user group membership 
experiments order evaluate prototype lottery scheduler conducted experiments designed quantify ability flexibly efficiently control relative execution rates computations 
applications experiments include compute bound dhrystone benchmark monte carlo numerical integration program multithreaded client server application searching text competing mpeg video viewers 
fairness experiment measured accuracy lottery scheduler control relative execution rates computations 
point plotted indicates relative execution rate observed tasks executing dhrystone benchmark wei seconds relative ticket allocation 
runs executed integral ratio 
case preferable fund threads capable receiving message 
example server task fewer threads incoming messages directly funded 
accelerate server threads decreasing delay available service waiting message 
command executes root initialize task currency funding 
performs setuid back original user invoking exec 
observed iteration ratio allocated ratio relative rate accuracy 
allocated ratio observed ratio plotted second runs 
gray line indicates ideal ratios identical 
exception run allocation resulted average ratio observed ratios close corresponding allocations 
expected variance greater larger ratios 
large ratios converge allocated values longer time intervals 
example observed ratio averaged minute period allocation 
results indicate scheduler successfully control computation rates examine behavior shorter time intervals 
plots average iteration counts series second time windows single second execution allocation 
clearly variation tasks remain close allocated ratios experiment 
note scheduling quantum milliseconds millisecond mach quantum degree fairness observed series time windows 
flexible control interesting lottery scheduling involves dynamically controlled ticket inflation 
practical application benefits control monte carlo algorithm pre 
monte carlo probabilistic algorithm widely physical sciences computing average properties systems 
errors computed average proportional number trials accurate results require large number trials 
scientists frequently execute separate monte carlo experiments explore various hypotheses 
desirable obtain approximate results quickly new experiment started allowing older experiments continue reducing error slower rate hog 
average iterations sec time sec fairness time 
tasks executing dhrystone benchmark ticket allocation 
averaged entire run tasks executed iterations sec actual ratio 
goal impossible conventional schedulers easily achieved system dynamically adjusting experiment ticket value function current relative error 
allows new experiment high error quickly catch older experiments executing rate starts high tapers relative error approaches older counterparts 
plots total number trials computed staggered monte carlo tasks 
task sample code pre allocated share time proportional square relative error 
new task started initially receives large share processor 
share diminishes task reduces error value closer executing tasks 
similar form dynamic control may useful graphics intensive programs 
example rendering operation granted large share processing resources displayed crude outline wire frame smaller share resources compute polished image 
client server computation mentioned section mach ipc primitive mach msg modified temporarily transfer tickets client server synchronous remote procedure calls 
client automatically redirects resource rights server computing behalf 
multithreaded servers process requests different clients rates defined respective ticket allocations 
monotonically increasing function relative error cause convergence 
linear function cause tasks converge slowly cubic function result rapid convergence 
cumulative trials millions time sec monte carlo execution rates 
identical monte carlo integrations started minutes apart 
task periodically sets ticket value proportional square relative error resulting convergent behavior 
bumps curves mirror decreasing slopes new tasks quickly reduce error 
developed simple multithreaded client server application shares properties real databases information retrieval systems 
server initially loads mbyte text file database containing complete text william shakespeare plays 
forks worker threads process incoming queries clients 
query operation supported server case insensitive substring search entire database returns count matches 
presents results executing database clients ticket allocation 
server tickets relies completely tickets transferred clients 
client repeatedly sends requests server count occurrences search string 
high priority client issues total queries terminates 
clients continue issue queries duration entire experiment 
ticket allocations affect response time throughput 
high priority client completed requests clients completed total requests matching allocation 
entire experiment clients ticket allocation respectively complete queries closely matches allocation despite transient competition high priority client 
high priority client active average response times seen clients seconds yielding relative speeds 
high priority client terminates disk database lotteries schedule disk bandwidth implemented prototype 
string experiment lottery incidentally occurs total times shakespeare plays 
queries processed time sec query processing rates 
clients ticket allocation compete service multithreaded database server 
observed throughput response time ratios closely match allocation 
response times seconds ratio 
average response times standard deviation average 
similar form control employed database transaction processing applications manage response times seen competing clients transactions 
useful providing different levels service clients transactions varying importance real monetary funding 
multimedia applications media applications domain benefit lottery scheduling 
compton tennenhouse described need control quality service video viewers displayed level control offered current operating systems com 
attempted mixed success control video display rates application level group mutually trusting viewers 
cooperating viewers employed feedback mechanisms adjust relative frame rates 
inadequate unstable metrics system load necessitated substantial tuning part number active viewers 
unexpected positive feedback loops developed leading significant divergence intended allocations 
lottery scheduling enables desired control operating system level eliminating need mutually trusting behaved applications 
depicts execution mpeg play video viewers displaying music video 
tickets initially allocated achieve relative display rates changed indicated arrow 
observed second frame rates initially ratio ratio change 
cumulative frames time sec controlling video rates 
mpeg viewers initial allocation changed time indicated arrow 
total number frames displayed plotted viewer 
actual frame rate ratios respectively due distortions caused server 
unfortunately results distorted roundrobin processing client requests single threaded server 
run display option frame rates ratio typical 
load insulation support multiple ticket currencies facilitates modular resource management 
currency defines resource management abstraction barrier locally contains fluctuations inflation 
currency abstraction flexibly isolate group users tasks threads 
plots progress tasks executing dhrystone benchmark 
amount currency denote ticket allocation amount currency 
currencies identical funding 
tasks allocations respectively 
tasks allocations respectively 
halfway experiment new task started allocation inflates total number tickets currency effect tasks currency aggregate iteration ratio tasks tasks started started 
slopes individual tasks indicate affected task slowed approximately half original rates corresponding factor inflation caused 
cumulative iterations cumulative iterations time sec currencies insulate loads 
currencies identically funded 
tasks respectively allocated tickets worth tasks respectively allocated tickets worth halfway experiment task started allocation resulting inflation locally contained currency affects progress tasks currency aggregate progress ratio 
system overhead core lottery scheduling mechanism extremely lightweight tree lottery need generate random number perform lg additions comparisons select winner clients 
low overhead lottery scheduling possible systems scheduling granularity small risc instructions 
prototype scheduler includes full support currencies optimized 
assess system overhead executables workloads kernel unmodified mach kernel separate runs performed experiment 
overhead imposed prototype lottery scheduler comparable standard mach timesharing policy 
numerous optimizations list lottery simple currency conversion scheme untuned aspects implementation efficient lottery scheduling pose challenging problems 
experiment consisted dhrystone benchmark tasks running concurrently seconds 
compared unmodified mach fewer iterations ex lottery scheduling 
experiment tasks lottery scheduling observed slower 
standard deviations individual runs unmodified mach comparable absolute differences observed kernels 
measured differences significant 
ran performance test multithreaded database server described section 
client tasks performed queries time start query completion query measured 
application executed faster lottery scheduling 
unmodified mach average run time seconds lottery scheduling average time seconds 
standard deviations runs experiment averages indicating small measured differences significant 
managing diverse resources lotteries manage diverse resources processor time bandwidth access locks 
lottery scheduling appears promising scheduling communication resources access network ports 
example atm switches schedule virtual circuits determine buffered cell forwarded 
lottery scheduling provide different levels service virtual circuits competing congested channels 
general lottery allocate resources queueing necessary resource access 
synchronization resources contention due synchronization substantially affect computation rates 
lottery scheduling control relative waiting times threads competing lock access 
extended mach library support lottery scheduled mutex type addition standard mutex implementation 
lottery scheduled mutex associated mutex currency inheritance ticket issued currency 
threads blocked waiting acquire mutex perform ticket transfers fund mutex currency 
mutex transfers inheritance ticket thread currently holds mutex 
net effect transfers thread acquires mutex executes funding plus funding waiting threads depicted 
solves priority inversion problem sha mutex owner little funding execute slowly due competition threads unmodified mach threads equal priority run roundrobin lottery scheduling possible thread win lotteries row 
believe ordering difference may affect locality resulting slightly improved cache tlb behavior application lottery scheduling 
waiting threads blocked lock 
lock lock lock currency lock owner lock funding 
threads waiting acquire lottery scheduled lock transferred funding lock currency 
thread currently holds lock inherits aggregate waiter funding backing ticket lock currency 
showing backing tickets associated thread shading indicate relative funding levels 
processor highly funded thread remains blocked mutex 
thread releases lottery scheduled mutex holds lottery waiting threads determine mutex owner 
thread moves mutex inheritance ticket winner yields processor 
thread execute may selected waiter thread need mutex normal processor lottery choose fairly relative funding 
experimented mutex implementation synthetic multithreaded application threads compete mutex 
thread repeatedly acquires mutex holds milliseconds releases mutex computes milliseconds 
provides frequency histograms typical experiment 
threads divided groups threads ticket allocation 
entire experiment group threads acquired mutex total times group threads completed acquisitions relative throughput ratio 
group threads mean waiting time milliseconds group threads mean waiting time milliseconds relative waiting time mutex acquisitions mutex acquisitions group group waiting time sec mutex waiting times 
threads compete acquire lottery scheduled mutex 
threads divided groups threads ticket allocation 
histogram solid line indicates mean dashed lines indicate standard deviation mean 
ratio average waiting times mutex acquisition ratio 
ratio 
throughput response time closely tracked specified ticket allocation 
space shared resources lotteries useful allocating indivisible time shared resources entire processor 
variant lottery scheduling efficiently provide type probabilistic proportional share guarantees finely divisible space shared resources memory 
basic idea inverse lottery loser chosen relinquish unit resource holds 
conducting inverse lottery similar holding normal lottery inverse probabilities 
probability client holding tickets selected inverse lottery total clients tickets 
tickets client avoid having unit resource revoked 
example consider problem allocating physical page service virtual memory page fault factor normalization term ensures client probabilities sum unity 
physical pages 
proportional share policy inverse lotteries choose client select victim page probability proportional fraction physical memory client 
multiple resources rights numerous resources uniformly represented lottery tickets clients quantitative comparisons decisions involving tradeoffs different resources 
raises interesting questions regarding application funding policies environments multiple resources 
example sense shift funding resource 
frequently funding allocations reconsidered 
way evaluation resource management options associate separate manager thread application 
manager thread allocated small fixed percentage application funding causing periodically scheduled limiting resource consumption 
inverse lotteries may appropriate allow losing client execute short manager code fragment order adjust funding levels 
system supply default managers applications sophisticated applications define management strategies 
plan explore preliminary ideas alternatives complex environments multiple resources 
related conventional operating systems commonly employ simple notion priority scheduling tasks 
task higher priority absolute precedence task lower priority 
priorities may static may allowed vary dynamically 
sophisticated priority schemes somewhat arbitrary priorities rarely meaningfully assigned dei 
ability express priorities provides absolute extremely crude control scheduling resource rights vary smoothly priorities 
conventional priority mechanisms inadequate insulating resource allocation policies separate modules 
priorities absolute difficult compose inter module priority relationships 
fair share schedulers allocate resources users get fair machine shares long periods time hen kay 
schedulers monitor cpu usage dynamically adjust conventional priorities push actual usage closer entitled shares 
algorithms systems complex requiring periodic usage updates complicated dynamic priority adjustments administrative parameter setting ensure fairness time scale minutes 
technique exists achieving service rate objectives systems employ decay usage scheduling manipulating base priorities various scheduler parameters hel 
technique avoids addition feedback loops introduced fair share schedulers assumes fixed workload consisting long running compute bound processes ensure steady state fairness time scale minutes 
microeconomic schedulers dre fer wal auctions allocate resources clients bid monetary funds 
funds encapsulate resource rights serve form priority 
algorithm proposed uniprocessor scheduling dre distributed spawn system wal wal rely auctions bidders increase bids linearly time 
spawn system successfully allocated resources proportional client funding network heterogeneous workstations 
experience spawn revealed auction dynamics unexpectedly volatile 
overhead bidding limits applicability auctions relatively coarse grain tasks 
market approach memory allocation developed allow memory intensive applications optimize memory consumption decentralized manner har 
scheme charges applications memory leases capacity allowing application specific tradeoffs 
true market prices permitted vary demand ancillary parameters introduced restrict resource consumption che 
statistical matching technique fair switching network exploits randomness support frequent changes bandwidth allocation 
similar proposed application lottery scheduling communication channels 
lottery scheduling novel mechanism provides efficient responsive control relative execution rates computations 
lottery scheduling facilitates modular resource management generalized manage diverse resources 
lottery scheduling conceptually simple easily implemented added existing operating systems provide greatly improved control resource consumption rates 
currently exploring various applications lottery scheduling interactive systems including graphical user interface elements 
examining lotteries managing memory virtual circuit bandwidth multiple resources 
bala eric brewer dawson engler wilson hsieh bob gruber anthony joseph frans kaashoek paige parsons patrick sobalvarro wallach comments assistance 
special invaluable help mach anthony patient critiques drafts 
jim anonymous reviewers helpful suggestions 
acc accetta baron golub rashid tevanian young 
mach new kernel foundation unix development proceedings summer usenix conference june 
anderson owicki saxe thacker 
high speed switch scheduling local area networks acm transactions computer systems november 
car 
fast implementations minimal standard random number generator communications acm january 
che cheriton 
market approach operating system memory allocation working computer science department stanford university june 
com compton tennenhouse 
collaborative load shedding media applications proceedings international conference multimedia computing systems may 
dei 
operating systems addison wesley 
dre drexler miller 
incentive engineering computational resource management ecology computation huberman ed north holland 
dui johnson 
improving user interface responsiveness despite performance limitations proceedings fifth ieee computer society international conference compcon march 
fer ferguson yemini nikolaou 
microeconomic algorithms load balancing distributed computer systems international conference distributed computer systems 
har cheriton 
application controlled physical memory external page cache management fifth international conference architectural support programming languages operating systems october 
hel hellerstein 
achieving service rate objectives decay usage scheduling ieee transactions software engineering august 
hen henry 
fair share scheduler bell laboratories technical journal october 
hog hogg 
private communication spawn system development 
kan kane 
mips risc architecture prentice hall 
kay kay 
fair share scheduler communications acm january 
loe 
mach kernel principles 
open software foundation carnegie mellon university 
par park miller 
random number generators ones hard find communications acm october 
pre press flannery teukolsky vetterling 
numerical recipes art scientific computing 
cambridge university press cambridge 
sha sha rajkumar lehoczky 
priority inheritance protocols approach real time synchronization ieee transactions computers september 
tri trivedi 
probability statistics reliability queuing computer science applications 
prentice hall 
wal waldspurger 
distributed computational economy utilizing idle resources master thesis mit may 
wal waldspurger hogg huberman kephart stornetta 
spawn distributed computational economy ieee transactions software engineering february 
wei 
dhrystone synthetic systems programming benchmark communications acm october 
wei weihl brewer dellarocas hsieh joseph waldspurger wang 
prelude system portable parallel software technical report mit lcs tr mit lab computer science october 
random number generator mips assembly language code kan fast implementation park miller pseudo random number generator par car 
uses multiplicative linear congruential generator mod 
generator ansi prototype unsigned int unsigned int 
move arg passed li constant hi lo bits srl bits addu overflow handle overflow rare return result overflow sll zero bit srl increment return result 
