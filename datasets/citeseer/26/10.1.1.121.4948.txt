may page empirical study robustness windows nt applications random testing report third series studies reliability application programs face random input 
studied reliability unix application programs command line window gui 
study apply testing techniques applications running windows nt operating system 
testing simple black box random input testing measure crude technique effective locating bugs real programs 
tested gui applications subjecting kinds random input streams valid keyboard mouse events streams random win messages 
built tool helps automate testing windows nt applications 
simple parameters application tested 
random testing techniques previous studies showed crash wide variety command line window applications unix platforms 
test results similar nt applications 
subjected random valid input produced mouse keyboard crashed applications tested hung additional applications 
subjected raw random win messages crashed hung applications tested 
report applications failed tests provide analysis failures 
report third series studies reliability application programs face random input 
studied reliability unix command line window gui application programs 
study apply techniques applications running windows nt operating system 
testing called fuzz testing uses simple black box random input knowledge application generating random input 
study evaluated reliability standard unix command line utilities 
showed applications crashed hung reading random input 
study evaluated larger collection justin forrester barton miller bart cs wisc edu computer sciences department university wisconsin madison wi applications study including common window applications 
newer study failure rates similar original study 
specifically standard command line unix utilities crashed hung random input window applications tested failed deal random input 
current study find similar results applications running windows nt 
measure reliability primitive simple 
program passes test responds input able exit normally fails crashes terminated abnormally hangs stops responding input reasonable length time 
application respond sensibly formal specification 
criterion crude offers mechanism easy apply application cause crash hang ignored program 
simple fuzz testing replace extensive formal testing procedures 
curiously simple testing technique find bugs techniques 
study window applications provided direction current study 
test window applications interposed testing program application client window display server 
allowed full control input application program 
able send completely random messages application send random streams valid keyboard mouse events 
current windows nt study able accomplish level input control application windows nt event mechanisms described section 
subjecting application streams random valid keyboard mouse events tests application conditions definitely tolerate occur normal software 
subjecting application completely random invalid input messages test general strength error checking 
considered evaluation software engineering discipline respect error handling producing application 
appears th usenix windows system symposium august seattle may page years passed study time windows applications clearly come dominate desktop environment 
windows nt windows offers full power modern operating system including virtual memory processes file protection networking 
felt time comparable study reliability applications environment 
current study produced main results applications tested nt crashed random valid keyboard mouse events 
test results applications run nt windows similar 
additional applications tested hung random valid keyboard mouse events 
tests results applications run nt windows similar 
applications tested failed crashed hung completely random input streams consisting random win messages 
noted result completely random input testing application running windows platforms vulnerable random input streams generated application running system 
appears flaw win message interface 
analysis applications source code shows appears common careless programming idiom receiving win message pointer handle contained message 
results study significant reasons 
reliability foundation security results offer informal measure reliability commonly software 
second expose bugs examined rigorous testing debugging techniques potentially enhancing software producers ability ship bug free software 
third expose vulnerability applications windows interfaces 
results form quantitative starting point judge relative improvement software robustness 
studies access source code large percentage programs tested including applications running vendors platforms gnu linux applications 
result addition causing programs hang crash able debug applications find cause crash 
causes categorized reported 
results passed software vendors authors form specific bug reports 
windows environment limited access far source code applications 
result able perform analysis applications emacs public source code open source version netscape communicator mozilla 
section describes details perform random testing windows nt systems 
section discusses experimental method section presents results experiments 
section offers analysis results presents associated commentary 
related discussed section 
random testing windows nt platform goal random testing stress application program 
testing required simulate user input windows nt environment 
describe components kernel application involved processing user input 
describe application programs tested environment 
study window applications random user input delivered applications inserting random input regular communication stream window server application 
types random input random data streams random streams valid keyboard mouse events 
testing random data streams sent completely random data necessarily conforming window system protocol application 
kind input normal operating conditions provided insight level testing robustness application 
crucial properly constructed program check values obtained system calls library routines 
random valid keyboard mouse event tests essentially testing application monkey keyboard mouse 
user generate input failure circumstances represents bug encountered normal application 
basic principles categories windows nt environment architecture slightly different 
provides simplified view components support user input windows nt environment 
example explain role component 
consider case user clicks link web browser 
action sets motion windows nt user input architecture 
appears th usenix windows system symposium august seattle may page win message system event device driver system keyboard mouse windows nt architectural components user input mouse click generates processor interrupt 
interrupt handled system base windows nt kernel 
system hands mouse interrupt mouse device driver 
device driver computes parameters mouse click mouse button clicked adds event system event queue event queue window manager calling mouse event function 
point device driver complete interrupt successfully handled 
placed system event queue mouse event awaits processing kernel raw input thread rit 
rit converts raw system event win message 
win message generic message structure provide applications input 
rit delivers newly created win message event queue associated window 
case mouse click rit create win message wm identifier current mouse coordinates determine target window message web browser 
rit determined web browser window receive message call function 
function place new win message message queue belonging application thread created browser window 
application thread thread message queue application program raw input thread rit system event queue window manager win user windows nt kernel mode point application receive process message 
win application program interface api provides function applications retrieve messages posted message queues 
application threads create windows generally enter message loop 
loop usually retrieves message preliminary processing dispatches message registered callback function called window procedure defined process input specific window 
case web browser example win message concerning mouse click retrieved application call dispatched window procedure web browser window 
window procedure examine parameters message determine user clicked left mouse button set coordinates window click occurred web link 
architecture possible test applications random events random win messages 
testing random events entails inserting random system events system event queue 
random system events simulate actual keystroke mouse events 
added system mechanism related device driver uses appears th usenix windows system symposium august seattle may page random win messages completely random messages random system events random valid keyboard mouse events win message system event device driver system keyboard mouse mouse event event functions 
second random testing mechanism involves sending random win messages application 
random win messages combine random valid message types completely random contents parameters 
delivering messages possible win api function 
function delivers win message message queue corresponding selected window returns 
note similar function delivers win message waits message processed fully returning 
win messages fixed size format 
messages fields message id field integer parameters 
testing produced random values fields constraining field message id range valid message id shows random testing mechanism fits windows nt user input architecture 
notice testing conditions target application unable distinguish messages sent testing mechanisms sent system 
distinction essential create authentic test environment 
application thread raw input thread rit insertion random input thread message queue application program system event queue window manager win user windows nt kernel mode experimental method describe applications tested test environment new testing tool called fuzz tests performed 
discuss data collected analyzed 
applications platform selected group application programs 
tried select applications representative variety computing tasks selection influenced software commonly computer sciences department university wisconsin 
software includes word processors web browsers presentation graphics editors network utilities spread sheets software development environments 
addition functional variety test applications variety vendors including commercial free software 
operating system ran tested applications windows nt build service pack 
insure results timely tested subset applications new windows system version 
applications re tested windows obtained similar results tested nt 
hard appears th usenix windows system symposium august seattle may page ware platform testing collection standard intel pentium ii pcs 
fuzz testing tool mechanism testing applications new tool called fuzz built applications running windows nt platform 
fuzz produces repeatable sequences random input delivers input running applications mechanisms described section 
basic operation follows 
obtain process id application tested launching application explicit command line parameter 

determine main window target application desktop placement coordinates 

sendmessage event mouse event deliver random input running application 
fuzz invoked command line gui interactions tool interfere testing applications 
version windows nt fuzz tool gui interface gui testing tool interfered testing applications 
result changed fuzz operate command line 
fuzz command format fuzz ws wp pid msgs seed appl cmd line ws random win messages send message wp random win messages message random valid mouse keyboard events 
options specified 
option start testing application specified process id anda tells fuzz launch application 
option controls maximum number messages sent application allows seed random number generator set 
options provide finer control sendmessage tests tests report 
null parameters included tests wm command messages control activation messages button clicks included 
tests tests divided categories different input techniques described section 
application underwent battery random tests included random win messages sent sendmessage api call random win messages sent api call random system events introduced mouse event event api calls 
cases completely random input third case uses streams valid keyboard mouse events 
quantity messages send determined preliminary testing 
testing appeared application going fail number messages events 
tests detailed performed distinct sequences random input different random seeds test trials application random sequence total runs application 
random input streams application 
results describe basic success failure results observed tests 
provide analysis cause failures applications source code 
quantitative results outcome test classified categories application crashed completely application hung stopped responding application processed input able close application normal application mechanisms 
categories simple able categorize success failure application simple inspection 
addition quantitative results report diagnosis causes crashes applications source code 
summarizes results experiments windows nt results subset applications tested windows 
application failed runs particular category column result listed table 
application crashed hung passed tests mark corresponding column 
results tests show large number applications failed deal reasonably random input 
failure rates win message tests greater random valid keyboard mouse event tests 
expected win message types include pointers parameters applications appears th usenix windows system symposium august seattle may page application vendor sendmessage de blindly 
nt tests sendmessage api function produced crash rate applications hung scant successfully dealt random input 
tests api function produced slightly higher crash rate hang rate 
application able successfully withstand test 
random valid keyboard mouse event results somewhat improved random win message test produced significant number appears th usenix windows system symposium august seattle random valid events access microsoft access microsoft acrobat reader adobe systems calculator microsoft cd player microsoft pro command antivirus command software systems pro qualcomm excel microsoft excel microsoft framemaker adobe systems microsoft ghostscript aladdin enterprises software pty gnu emacs free software foundation internet explorer microsoft internet explorer microsoft java workshop sun microsystems netscape communicator netscape communications notepad microsoft paint microsoft paint shop pro software powerpoint microsoft powerpoint microsoft secure crt van dyke technologies solitaire microsoft telnet windows mit kerberos group visual microsoft winamp word microsoft word microsoft microsoft ws ftp le percent crashed percent hung total percent failed summary windows nt test results crash hang 
note application crashed hung crash reported 
may page application vendor sendmessage crashes 
fully applications crashed hung leaving applications able successfully deal random events 
result especially troublesome random events introduced user windows nt system mouse keyboard 
windows tests similar results performed nt 
expected see significant difference platforms results confirm expectation 
causes crashes source code available applications access source code applications gnu emacs text editor open source version netscape communicator mozilla 
able examine applications determine cause crashes occurred testing 
emacs crash analysis examined emacs application crashed random win messages 
cause crash simple casting parameter win message pointer structure trying dereference pointer access field structure 
file fns message handler wnd proc standard win callback function 
callback function tries de third parameter note error checking exception handling protect de 
callback wnd proc msg 
point pos pos point 
flags pos pos null 
pointer random value produced fuzz invalid de caused access violation 
uncommon find failures caused unsafe pointer previous studies cases cases documented literature 
inspection crashes machine code appears problem cause random win message crashes 
appears th usenix windows system symposium august seattle random valid events access microsoft access microsoft pro excel microsoft excel microsoft internet explorer microsoft netscape communicator netscape communications paint shop pro software powerpoint microsoft powerpoint microsoft secure crt van dyke technologies visual microsoft word microsoft word microsoft percent crashed percent hung total percent failed summary windows test results crash hang 
note application crashed hung crash reported 
may page mozilla crash analysis examined open source version netscape communicator called mozilla crashed random win messages 
cause crash similar emacs crash 
crash occurred file cpp function process message 
function designed respond win messages posted application windows 
fashion similar gnu emacs example parameter function case assumed valid window handle 
control control control hdc 
value passed argument function access application specific information associated particular window 
case parameter random value produced fuzz function retrieving value associated random window 
application casts return value pointer attempts de causing application crash 
analysis goal study provide look general reliability variety application programs running windows nt 
hope study inspires production robust code 
discuss results previous section provide editorial discussion 
tests random valid keyboard mouse events provide best sense relative reliability application programs 
tests simulated random keystrokes mouse movements mouse button clicks 
events caused user immediate concern 
results tests show commonly desktop applications reliable hope 
tests produced greatest failure rates random win message tests 
normal course events messages produced kernel sent application program 
impossible kernel send messages invalid values 
tests interesting reasons 
demonstrate vulnerability interface 
application program send messages application program 
win interface provides type protection 
modern operation systems provide durable firewalls 
second results point need discipline software design 
major interfaces application software components application operating system contain thorough checks return values result parameters 
inspection crashes diagnosis source code shows blind de referencing pointer dangerous 
simple action protecting de exception handler windows nt structured exception handling facility example qualitative improvement reliability 
side note applications detect error provide user reasonable pleasant choices 
applications follow opportunity save pending changes current document open files 
doing save current new copy user file give user hope recovering lost 
applications tested saved user seeing dialog pertaining cause crash contained memory address instruction caused fault hexadecimal memory dump 
average application user dialog cryptic mysterious serves confuse 
final piece analysis concerns operating system crashes 
occasionally unix study tests resulted os crashes 
windows nt study operating system remained solid crash result testing 
note early version fuzz tool windows nt result occasional os crashes 
tool contained bug generated mouse events top left corner screen 
reason events occasionally crash windows nt repeatable fashion 
results inspire comments course 
knows applications important validate anecdotal intuitions 
results provide concrete basis comparing applications tracking hope improvements 
results lead observations current software testing methodology 
random testing far elegant bring surface application errors evidenced numerous crashes encountered study 
bugs produced crashes may low priority software makers due extreme situations appears th usenix windows system symposium august seattle may page occur simple approach help find bugs certainly overlooked 
lack general access application source code prevented making detailed report causes program failures 
gnu emacs mozilla applications able diagnose 
limited diagnosis useful exposes trend poor handling pointers event records 
studies reasonable access application source code unix vendors 
result provided bug fixes addition bug reports 
today software market access application source code difficult 
extreme cases database systems tested study act reporting bugs performance data forbidden licence agreements vendors aggressively pursue restriction 
vendors defend practices believe works counter producing reliable systems 
results difference 
bugs unix study 
study applications open source better reliability commercial vendors 
study noted subsequent improvement software reliability measure 
long vendors importantly value features reliability hope reliable applications remains muted 
opportunity analysis remains project 
goals include 
full testing applications windows goal hard achieve anticipate having full results shortly 

explanation random win message results surprised sendmessage results differed 
difference may caused synchronous vs asynchronous nature sendmessage priority difference types messages reasons identified 
currently exploring reasons difference 

explanation windows nt vs windows results test identical versions applications windows nt windows initial guess results identical 
differences due reasons including timing size screen system dependent dlls 
currently exploring reasons difference 
related random testing years 
ways looked primitive testing community 
book software testing meyers says randomly generated input test cases best inefficient ad hoc approach testing 
type testing may ad hoc able find bugs real programs 
view random testing tool easy larger software testing toolkit 
early random testing published duran ntafos 
study test inputs chosen random predefined set test cases 
authors random testing fared compared standard partition testing practice 
able track subtle bugs easily hard discover traditional techniques 
random testing cost effective testing strategy programs identified random testing mechanism obtain reliability estimates 
technique primitive easier type random testing duran ntafos programmer knowledge direct tests require construction test cases 
papers published ghosh random black box testing applications running windows nt 
studies extensions earlier fuzz studies 
nt studies authors tested standard command line utilities 
windows nt utilities fared better unix counterparts scoring failure rate 
study interesting tested applications attrib comp expand fc find help label replace commonly windows applications graphic interfaces felt need extensive testing 
random testing test unix system call interface 
utility effectively exercises interface actively linux kernel developments 
source code source binary code fuzz tools windows nt available web page ftp cs wisc edu fuzz 
acknowledgments susan help running initial fuzz tests windows nt john gardner jr helping initial evaluation fuzz nt appears th usenix windows system symposium august seattle may page tool 
philip roth careful reading drafts 
microsoft helped study providing pre release version windows 
referees especially jim gray provided great feedback review process 
supported part department energy de fg er nsf cda eia darpa contract 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
carey dewitt naughton benchmark acm sigmod international conference management data may washington pp 

random input testing people delphi com html 
duran ntafos evaluation random testing ieee transactions software engineering se july pp 

garfinkel spafford practical unix internet security reilly associates 
ghosh shah schmid testing robustness windows nt software international symposium software reliability engineering paderborn germany november 
ghosh shah schmid approach analyzing robustness windows nt software st national information systems security conference crystal city va october 
meyers art software testing wiley publishing new york 
miller koski lee murthy natarajan fuzz revisited re examination reliability unix utilities services university wisconsin madison 
appears german translation zur von unix utilities ix september 
ftp cs wisc edu technical papers fuzz ps 
miller empirical study reliability unix utilities communications acm december pp 

appears german translation eine zur von unix utilities ix march 
ftp cs wisc edu technical papers fuzz ps 
programming windows th ed microsoft press redmond wa 
richter advanced windows rd ed microsoft press redmond wa 
solomon inside windows nt nd ed microsoft press redmond wa 
whittaker jorgensen software fails technical report florida institute technology se fit edu papers pdf 
appears th usenix windows system symposium august seattle 
