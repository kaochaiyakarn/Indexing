little languages programming environments john clements paul graunke shriram krishnamurthi matthias felleisen department computer science rice university houston tx contact sk cs brown edu march summary computer science department brown university providence ri programmers constantly design implement program little languages 
different approaches implementation little languages evolved 
emphasizes design little languages scratch conventional technology implement interpreters compilers 
advances idea extending general purpose host language little language shares host language features variables data loops functions possible interpreters compilers type soundness theorem 
second approach called language embedding 
directs attention little language designers badly neglected area programming environments little languages 
argue embedded little language inherit host language syntactic semantic structure programming environment 
illustrate idea drscheme programming environment xml little transformation language xml trees 
drscheme provides host tools scheme syntax analysis tool static debugger algebraic stepper portable plugin system interactive evaluator 
xml supports definition xml languages simple form schemas convenient creation xml data definition xml transformations 
xml embedding consists parts library functions set syntactic extensions 
elaboration syntactic extension core scheme preserves information necessary report results analysis program evaluation source level 
result drscheme tools naturally extended embedded language 
process embedding xml language scheme directly creates full fledged xml environment 
believe method language implementation may generalized languages environments represents substantial improvement current practice 
reusing language technology programmers constantly design little programming languages 
languages die quick death disappear layers software network protocols gui layout declarations scripting tools examples 
evolve survive fill niche awk perl tcl come mind 
programmer understands problem best solved designing new little language implementation choice 
possibility build little language scratch 
option involves tasks specifying typically formal syntax semiformal system context sensitive constraints informal semantics implementing required software lexer parser type checker code generator evaluator 
option extend existing general purpose language just constructs task requires 
case little language shares host language syntax variables data loops functions possible interpreters compilers type soundness theorem 
kind extension called language embedding 
table summarizes salient differences strategy implementing language scratch language strategy embedding little language language designing little language scratch embedding little language variables loops designed explicitly variables loops safety type soundness may exist safety type soundness lexer implemented lexer extension parser implemented parser extension validity checker implemented validity checker interpreter implemented interpreter succinctly put implement scratch strategy uses technologies embedding shares truly reuses technology construction little language 
illustrates language embedding reuse host technology just evaluator 
specifically argue programming environment host language properly constructed designed embedding technology mere act constructing embedding creates full fledged programming environment little languages 
support argument construct embedded little language called xml derive environment drscheme scheme programming environment 
xml permits programmers create manipulate xml data 
precisely set constructs specify xml trees natural manner define tree transformations data easy pattern matching construct 
drscheme provides host tools scheme syntax analysis tool includes variable binding display variable renaming mechanism static debugger algebraic stepper portable library system evaluator correlates run time exceptions program source 
xml programming environment inherits 
xml embedding consists language extensions 
defined functions 
implementation exploits drscheme syntax definition mechanism turn scheme macro technology 
drscheme syntax extensions completely transparent drscheme tools 
time elaboration syntactic extension core scheme preserves necessary information report results analysis article header title article title author john clements author header text newspaper article 
article text 
text article header article text chars title author chars chars correspondence concrete syntaxes program evaluation source level 
adding small extensions undo elaboration certain strategic places ensure drscheme syntax checker checks syntax context sensitive properties xml transformations static debugger turns xml validity checker stepper shows transformations rewrite xml trees level xml data constructors interpreter prints xml results reports errors terms xml transformations 
short process embedding xml language scheme directly creates full fledged xml environment 
section introduces xml xml third section discusses xml embedding scheme 
fourth fifth section drscheme little language environment created embedding 
underlying technology explained sixth section 
seventh section relates relevant areas 
section summarizes ideas suggest topics extensions 
running example xml illustrate ideas develop little language accompanying programming environment operating xml documents 
xml xml extensible markup language proposed standard family languages 
designed provide middle ground universally accepted inconsistent semantically rigid html language extensible overly complex sgml family languages 
approximation xml element may character data tag pair annotated optional attribute association list enclosing list zero xml elements 
regard html xml similar 
deeper level xml consists related parts concrete syntax syntax 
shows example concrete syntax corresponding syntax tree 
specific languages xml domain specified schemas 
schema defines set valid tags possible attributes constraints xml elements appearing pair tags 
schema newspaper article language appears schema element name header sequence element ref name title element ref name author sequence element element name body mixed pcdata mixed element element name article sequence element ref name header element ref name body sequence element schema simple schema newspaper articles 
schema specifies things header field contain title author 
ability specify xml languages explicitly schemas clearly separates xml html 
xml documents data order data programmers write programs accept manipulate 
walsh member xml design team states 
ought take weeks competent computer science graduate student build program process xml documents 
implication processing xml data tedious time consuming process involving design implementation project specific package routines 
surface syntax xml expressions purely trees 
node character data tagged node containing set attributes set subtrees 
program processes xml data tree processing program 
complexity defined syntax sense away concrete syntax purely tree paradigm 
parsing concrete syntax moved programmer domain processing xml trees manageable task 
xml programs consist small set tree transformations data xml language 
instance newspaper web site designed transform article stored xml structured database shown web page shown reader 
html document produced transformation shown 
xml simple specialized nature xml transformations ideal candidate embedded language solution 
language include special forms creating settled schema standard 
schema shown written simple illustrative schema language designed read easily 
trivial schemas author title omitted 
html head title article title head body center article john clements center spacer type vertical size newspaper article 
article text body html result simple xml transformation ing xml elements mechanism expressing tree transformations easily 
hand language xml processing preclude production complex programs 
allow programmers full power general purpose host language choose 
call language xml 
uses expressions match tree structure xml elements 
provides xml lmx forms creating xml elements embedding computation xml match form state pattern transformations elements language schemas express language restrictions 
explain constructs 
xml little language provide language forms constructing xml elements conveniently program transforms xml data needs construct xml elements 
words choose concrete syntax elements embedded language 
take simple example html footer contain horizontal line page number 
ana approach directly embed xml concrete syntax scheme strings center page number em em center obvious shortcoming string representation lack structure procedure operates data parse string 
wasteful time consuming 
better way specify data structured form 
language provide straightforward way create parsed structures independent representation data 
ideally program text creates xml element closely resemble xml text tag 
xml language datum represented program text xml center page number em form xml nested subexpression taken describe xml element 
just double quotes languages denote literal data xml denote xml literals 
xml elements may contain attributes 
xml form permits addition attributes elements 
attributes appear optional parenthesized list immediately tag name 
html body tag bgcolor attribute written define format article xml article xml match xml article title string author string body text keywords article header title title string author author string pattern text body text xml html head title title string result body center title string author string spacer type vertical size body text 
page pattern error format page badly formatted xml article result xml body bgcolor blue lmx simple transformer xml construct programmers conveniently specify large xml constants 
programmers may wish tree constructions certain parameters 
example programmer may wish specify footer page relative page number 
allow escape parent language xml includes lmx construct lmx expression lmx expression may occur sub expression xml expression 
evaluates subexpression result spliced xml tree place lmx expression 
combination lmx xml forms programmer easily define function produces page footer define footer page number xml center page number em lmx page number xml match programmer tools needed build elements desired xml language 
needs mechanism manipulate elements simple way 
convenient method pattern matching xml language provides xml match form perform patternmatching tree processing xml elements 
evaluate xml match expression pattern matched input 
match result expression evaluated bindings introduced pattern match 
shows definition html producing transformer illustrated earlier 
note input output patterns specified way xml elements 
schema schema element name header sequence element ref name title element ref name author element name body mixed pcdata element name article sequence element ref name header element ref name body xml schema article language important features xml ability define restrict xml languages formal specifications 
standards proposed xml uses version schemas 
schema describes set valid xml elements specific xml language 
schema xml element may described xml conventions 
shows xml representation schema shown 
comparison xml specification schema reveals similarity 
building little language hand functionality little language may established building library functions constants 
fact tasks domain specific library serves complete solution embedding problem 
hand language forms implemented ordinary functions 
shortcuts creating structured data xml lmx language forms introduce variable bindings xml match language forms affect flow control non standard ways xml match 
new language forms may added macros 
macros tree rewriting rules applied syntax trees compilation 
elaborate language forms little language forms host language 
case host language scheme 
scheme macros notion syntactic abstraction new 
nearly general purpose programming language facility declaring invoking macros 
vast majority deeply flawed 
macro systems gained deserved reputation dangerous inelegant 
ill considered leads problems novices experts alike 
embedding little language macros difficult best 
fortunately languages scheme offer controlled useful macro mechanisms 
systems operate expressions tokens defined semantics tree transformations 
simple example consider form scheme 
form binds values variable names 
languages type operation built language 
scheme need 
scheme may implement macro elaborates form application procedure 
rewriting rule var exp body lambda var body exp 
ellipses notational shorthand integral part macro language described revised report scheme 
left hand side macro indicate prior pattern occur zero times bnf grammar 
input pattern matched input ellipses occur bindings lists created 
right hand side pattern uses ellipses generate sequences output patterns drawn bindings 
components matched patterns may split illustrated macro shown 
building xml xml implemented embedding scheme 
embedding comprising forms enumerated section constructed combination small functional library set macros 
xml form implemented single macro 
macro transforms uses xml form expressions construct scheme data 
form permits omission empty attribute fields kind syntactic shorthand gives little language true advantages unmodified general purpose language 
action xml macro shown example xml form translated scheme code creates structure xml center text lmx get text center list list text get text schema form elaborates structure declaration type declaration 
example macro translation shown schema element name elt sequence element ref name define struct elt attrs elements define type elt cons null note adopting richer schema language simply matter modifying single macro code needs change 
xml match form implemented macro conjunction library function 
macro delays evaluation patterns matching expressions 
provides bindings pattern variables occur expressions 
function accepts value pattern expression pairs evaluates expression pattern matches input value 
drscheme uses type inference system called mrspidey described detail section 
transformer takes centered text italicized text elaborated xml match xml center text xml center text xml italic text xml match fn xml center list text list list center text lambda text xml italic text xml match fn procedure part xml runtime library 
addition forms scheme xml little language ideal constructing manipulating xml data full gamut scheme values 
variables functions inherited scheme 
result semester undergraduates program xml matter days weeks supposedly required 
drscheme building xml evaluator macros functions 
lesson programmers learned course implementing languages little large 
fact scratch little language implementation execution framework small fraction total required language usable 
language productively programmers need host related tools editors checkers syntax semantic debuggers libraries 
demonstrate ideas drscheme programming environment 
drscheme programming environment scheme language 
graphical environment developing programs 
includes syntax sensitive editor read loop syntax checker stepper static type checker 
challenge reuse tools design execution embedded language 
scheme programs composed entirely expressions drscheme editor takes advantage ways 
provides set expression directed movement editing functions 
supports dynamic parenthesis matching static highlighting expressions adjacent cursor 
drscheme automatically lines unmatched parentheses highlighted red 
tools drscheme provides syntax checker 
tool performs number tasks 
identifies highlights syntax errors 
highlights unbound identifiers 
draws arrows bound identifiers binding occurrences 
permits alpha renaming occurrences identifier declaration scope may renamed consistently 
syntax checker useful beginners helps understand syntax source language 
checker useful experienced programmers generally syntactic mistakes admit 
drscheme features symbolic algebraic stepper display program execution algebraic calculation standard reduction semantics scheme 
stepper shows step execution rewriting step expressions displayed difference highlighted 
stepper useful debugging understanding details language semantics 
drscheme provides static type checking mrspidey :10.1.1.22.2542
mrspidey performs type inference set analysis associate set values program location 
mrspidey guarantee application primitive cause error flags location primitive application 
furthermore mrspidey provides useful information user form graphical inference chains 
inappropriate argument reach primitive mrspidey visually depicts execution path argument arrives erroneous application 
mrspidey explicit assertion mechanism form expression type 
form user may force mrspidey check expression guaranteed evaluate type 
instance assertion str fails result evaluating number string 
drscheme supports plugins called historical reasons 
drscheme program may evaluated plugins enabled 
plugins encapsulated drscheme unit system guarantees intended plugin functions exposed plugin meaning affected user code 
building little language environment order deliver useful programming environment programmer drscheme tools seamlessly new forms xml 
sections examine drscheme tools behavior change accommodate embedded language 
editing little language consists entirely tree structured expressions editor features inherited immediately editing programs little language convenient editing scheme 
modification required programming environment addition xml match keyword list specially indented keywords drscheme preference panel 
check syntax check syntax tool designed transparently macros 
modification whatsoever required extend syntax checker embedded language 
syntax checker particularly useful embedded languages language syntax described informally 
instance experienced programmer surprised embedded language discover certain identifiers unbound bound locations expected 
example see example xml language 
particular example shows definition simple web page xml lmx forms 
bind check syntax works macros ing arrows show home link home link text bound red highlighting color indicate identifier unbound case simple typo 
rename xml transformation 
stepper programmer embeds little language scheme stepper transparent respect macros libraries introduced embedded language 
words step manner corresponds reductions embedded language host language 
xml embeds forms scheme natural reduction sequence 
xml form simply transparent xml values displayed computation terms lmx form properly embedded 
schema form trivial contains runtime computation 
xml match form shows steps corresponding location proper pattern corresponding pattern 
shows step evaluation simple html construction 
stepper highlights reducible subexpression green resulting subexpression purple 
call footer replaced body procedure value argument substituted bound location body 
grayscale printer appear gray 
validity checking stepper works macros mrspidey provides assertion mechanism enable programmers check statically certain variables may bound values type 
natural extension assertion ability xml language assertion operator validity checking 
xml schema expands mrspidey type definition 
type definition may implement xml validity checking shown 
body simply string 
illegal schema appears 
mrspidey highlights offending assertion red 
path string xml form indicated series arrows 
plugins drscheme plugin system proves useful xml language embedding 
instance simple cgi plugin permits users build test cgi scripts 
plugin programmers write programs interact directly web browser simple question answer interface sending complete html form 
xml language provides needed forms easily construct html forms 
simple cgi interact user directly 
note mrspidey catches validity errors case may stepper trace execution script 
works extension drscheme programming tools xml largely automatic 
key technologies required source correlation 
drscheme source elaboration macros performed 
transforms source file character stream syntax tree 
term tree position source file 
preserved subsequent macro elaboration term fully elaborated program direct source location 
elaborated program goes evaluator execution 
consequence static tools including syntax checker mrspidey operate transparently respect macros 
tools draw elaborated program display results source correlation indirection 
require modification whatsoever accommodate embedded language 
interpreter stepper draw heavily source correlation 
tools static display runtime values expressions embedded language 
drscheme employs perform back translations 
types plugins test cgi scripts value expression 
little language enriches value set host language include way display values user 
value perform translation 
little language introduces new language forms creation data programming tools display resulting values forms programmer employed create data 
xml interaction illustrates xml center page number em lmx xml center page number em displaying value internal format printer uses concrete syntax associated little language 
value deal exclusively runtime values need source correlation 
value provides mapping values displayed information 
second category comprises expression 
arise operation stepper reconstruct step host language evaluator step embedded language 
cases elaborated forms may partially evaluated 
instance evaluation xml match form may proceed reductions 
value currently implemented stepper read eval print loop 
displayed xml match term 
expression heavy source correlation information reconstruct source terms history macro elaboration imposed source 
xml language constructed explicitly 
includes generating automatically macros libraries language embedding 
related relates distinct areas research 
descending order relevance construction programming environments embedding little languages host languages problem debugging optimized code transformation languages xml 
emacs far prominent effort produce extensible customizable programming environment 
lines emacs code programmer create emacs mode assists syntactic problems indentation syntax coloring read loop source correlation run time environment 
emacs extensions produced manually connected derived little language embedding 
construction programming environments focuses creation tools language specifications 
example teitelbaum reps created cornell synthesizer generator permits programmers attribute grammar technology define syntax directed editors 
asf sdf research effort similar comprehensive goals 
programmer specifies algebraic denotational semantics little language create interesting tools framework 
contrast concentrates pragmatic problem creating prototyping language tools rapidly 
particular accommodate existing implementation modifications 
implementations derived formally greater potential applied environments 
second interesting technical problem concerns relationship execution elaborated code source text 
glance suggests commonality debugging optimized object code 
specifically code optimizations problematic debuggers algebraic stepper 
need cope code transformations interrupt execution program 
hennessy adl tabatabai gross cooper kennedy torczon describe solutions problem debugging optimized code 
believe communities apply different techniques backwards translations due radically different levels languages 
currently studying techniques carry debugging stepping problem adaptation techniques advantages 
third techniques language embeddings heavily draws ideas area 
history language embeddings starts lisp mcilroy introduced notion macro transformations :10.1.1.49.7238
past decade scheme programming language introduced important innovations macro systems 
kohlbecker showed render macro expanders hygienic compatible lexical structure host language 
second kohlbecker wand introduced macros example specification method 
dybvig hieb bruggeman implemented source correlating macro system powerful program elaborator 
language communities rediscovered idea embedding languages reuse 
fairbairn hudak wallace runciman haskell infix operators higher order functions embed little languages including little language xml kamin harrison working similar lines sml 
oleg worked embed xml scheme 
efforts focus embedding techniques paid attention programming environments little languages 
fourth wallace runciman thiemann address problem transforming xml elements 
solution solves problem approaches suffer 
specifically xml programmers specify xml trees generic manner get benefits xml validity checking 
learn re levels language technology construction little languages 
potential benefits enormous 
shivers reports version awk powerful original tenth original size :10.1.1.7.2089
small implementation easy manage change 
embedded language easier extend stand language 
improvement host language generally improves embedded language immediately 
language plays host embedded languages programs easily exchange structured forms data lists trees arrays 
contrast standalone implementations employ operating system tool box means little language programmers write parsers 
wish contribute argument language embeddings hope direct attention researchers programming environments little languages 
centrally illustrate embedding creates powerful programming environment little languages 
construction hinges properties host language environment 
host language mechanism defining new language constructs 
user little language immediately know host language 
second mechanism translate instances new constructs manner tools report results terms surface syntax 
tools contain hard wired assumptions source language 
example add small functions environment tools translating scheme values back xml syntax reconstructing xml construct multi step algebraic reduction semantics 
experience conjecture effort automated plan tackle problem 
adl tabatabai 
gross 
source level debugging scalar optimized code 
programming language design implementation may 
efforts higher order functions express little language programs chosen host languages provide facilities defining new language constructs declare variables 
detailed discussion distinction irrelevant topic 
aiken set constraint program analysis 
science computer programming 
bray paoli sperberg mcqueen 
extensible markup language xml 
technical report world wide web consortium feburary 
version 
cooper kennedy torczon 
editing compiling programs 
software engineering symposium practical software development environments december 
dybvig hieb bruggeman 
syntactic abstraction scheme 
lisp symbolic computation december 
fairbairn making form follow function exercise functional programming style 
software practice experience june 
findler flanagan flatt krishnamurthi felleisen 
drscheme pedagogic programming environment scheme 
international symposium programming languages implementations logics programs number lecture notes computer science pages 
flanagan flatt krishnamurthi weirich felleisen :10.1.1.22.2542
catching bugs web program invariants 
acm sigplan conference programming language design implementation pages may 
flatt felleisen 
cool modules hot languages 
acm sigplan conference programming language design implementation 
heintze set program analysis 
phd thesis carnegie mellon university october 
hennessy symbolic debugging optimized code 
transactions programming languages systems 
hudak modular domain specific languages tools 
international conference software reuse 
kamin 
special purpose language picture drawing 
usenix conference domain specific languages 
kelsey clinger rees 
revised report algorithmic language scheme 
acm sigplan notices october 
scheme xml 
unpublished manuscript 
available web com oleg ftp scheme xml html 
klint meta environment generating programming environments 
acm transactions software engineering methodology 
kohlbecker friedman felleisen duba 
hygienic macro expansion 
acm symposium lisp functional programming pages 
kohlbecker wand 
macros example deriving syntactic transformations specifications 
acm sigplan sigact symposium principles programming languages pages 
krishnamurthi felleisen duba 
macros reusable generative programming 
international symposium generative component software engineering september 
appear springer verlag lecture notes computer science 
mcilroy macro instruction extensions compiler languages 
communications acm 
reps teitelbaum 
synthesizer generator 
springer verlag 
shivers universal scripting framework lambda ultimate little language 
jaffar yap editors concurrency parallelism programming networking security pages 
springer verlag 
lncs 
stallman emacs extensible customizable self documenting display editor 
symposium text manipulation pages 
steele jr gabriel :10.1.1.49.7238
evolution lisp 
jr gibson jr editors history programming languages ii pages 
thiemann modeling html haskell 
practical applications declarative languages january 
wallace runciman 
haskell xml generic document processing combinators vs type translation 
acm sigplan international conference functional programming september 
walsh technical xml 
world wide web journal winter 

