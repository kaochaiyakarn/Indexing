specifying querying database repairs logic programs exceptions marcelo arenas bertossi jan chomicki universidad de chile departamento de ciencia de santiago chile ing puc cl university dept computer science west long branch nj chomicki edu databases may inconsistent respect set integrity constraints 
data may consistent 
show specify consistent data query relational database way consistent data retrieved 
specification queries disjunctive extended logic programs positive negative exceptions generalize previously introduced kowalski sadri 
information repositories today built top multiple heterogenous data sources 
fact spurred rethinking classical database problems query evaluation optimization integrity constraints :10.1.1.127.3070
data coming multiple autonomous sources satisfy integrity constraints source separately may satisfy 
consider person address name may different different data sources 
autonomy different data sources infeasible correct global integrity violations 
constraints describe important semantic properties data cast aside 
propose augment query answering process 
approach databases provide regular query answers computed account integrity constraints addition query answers consistent constraints 
example presents basic intuitions notion consistent query answer 
example 
consider database subject ic databases instance fp order structure violates constraint 
query asks true returned answer consistent integrity constraint 
repair true consistent answer 
intuitively query answer consistent stable regardless integrity violation fixed remains answer 
hand query answer inconsistent may due transient error data reliable 
information answer consistency serves important indication data quality reliability 
formalized notion consistent query answer answer true minimal repair :10.1.1.12.3324
introduce modal operator meaning kff true relational database instance ff true minimal repairs show evaluate order queries operator occurs call queries short 
basic insight minimal repairs instance correspond answer sets logic program exceptions pi purpose introduce disjunctive extended logic programs exceptions generalize introduced 
programs contain strong procedural negation disjunctive heads negative positive exceptions positive negative defaults resp 
programs transformed disjunctive extended logic programs :10.1.1.49.9332
consequence evaluation method logic programs exceptions ad hoc evaluator transforming disjunctive extended logic programs evaluating combined standard evaluation method order queries translating relational algebra sql yield method evaluating queries :10.1.1.49.9332
computational implementations evaluating extended logic programs exist 
proposed different method obtaining consistent query answers transforming queries techniques semantic query optimization :10.1.1.12.3324
unfortunately scope method quite limited queries contain quantifiers disjunction classes integrity constraints allowed severely restricted 
method limitations handles arbitrary order queries operator arbitrary universally quantified integrity constraints existential cases 
hand requires powerful evaluation mechanism approach relies standard evaluation mechanism relational queries implemented top relational dbms :10.1.1.12.3324
plan follows 
section define basic notions approach including database repair consistent query answer 
section summarize framework logic programs exceptions 
section show examples correspondence database repairs answer sets logic programs exceptions 
section general methodology derive repair programs sets universally quantified constraints 
introduce disjunctive extended logic programs exceptions semantics answer sets 
section consider consistent query evaluation 
section consider possible extensions specification formalism alternatives 
section briefly summarize related 
conclude outlining section 
implemented xsb evaluator disjunctive extended logic programs exceptions :10.1.1.48.4048
consistent query answers assume fixed set ic integrity constraints associated fixed relational database schema 
fixed possibly infinite database domain database instance structure consisting collection finite extensions predicates database schema 
built predicates may infinite fixed extension database instance 
database instance consistent satisfies ic ffl ic 
say inconsistent 
assume ic consistent sense database instance satisfies ic 
inconsistent repairs database instances respect schema domain satisfy ic differ minimal set wrt set inclusion inserted deleted tuples 
example 
consider functional dependency inconsistent database instance table instance possible repairs tables respectively 
syntax order queries termed basic queries defined grammar atom syntax queries similarly defined kb say ground query kff true instance wrt ic symbols ffl kff query ff true repair wrt ic symbols ffl ff 
semantics remaining constructs standard semantics firstorder logic 
tuple answer query ffl kq 
tuple consistent answer basic query wrt ic ffl kq 
example 
example continued query zp consistent answer kq 
hand query zp consistent answers ffl zp 
seen consistent answers order queries special case answers queries 
method compute automatically applicable computing 
logic programs exceptions kowalski sadri introduced logic programs exceptions lpe 
programs syntax extended logic program elp may find rules logical strong negation procedural negation :10.1.1.49.9332
programs rules positive literal head represent sort general defaults rules logically negated head represent exceptions 
general defaults exceptions may contradict semantics changed order capture intuition exceptions higher priority defaults 
solves contradictions semantical level 
order capture new semantics procedural level lpe transformed new elp usual semantics :10.1.1.13.7065
indicated shown extended logic program transformed equivalent normal logic program logical negation stable model semantics :10.1.1.24.6050:10.1.1.49.9332
give brief account logic programs exceptions 
lpe consists clauses form gamma lk lk ln li literal atom logically negated atom rules defaults clauses positive head 
exceptions clauses negative head 
example 
logic program exceptions fly gamma bird fly gamma emu see fact bird emu assign program appropriate semantics evaluate proper way obtain contradiction 
semantics sanction exception default rule 
semantics lpe obtained semantics adding extra condition assigns higher priority exceptions 
review definition semantics lpe 
lit set ground literals pi program consisting ground clauses form 
answer set pi denoted pi smallest subset lit clause gamma lk lk 
contains pair complementary literals lit 
case pi said contradictory 
consider ground lpe pi clauses 
subset lit 
define new program pi obtained pi follows 
delete clause containing condition 
delete remaining clauses condition 
delete clause having positive resulting program pi ground elp consequence pi defined 
say set ground literals answer set pi original lpe pi 
shown answer sets correspondence answer sets extended logic programs :10.1.1.13.7065
established transforming original lpe elp answer set semantics 
transformation rules positive default rule form gamma negative exception clause form gamma transformed clause gamma mgu 
way obtain elp original exceptions remain ordinary clauses new elp longer exceptions sense generated extra conditions bodies corresponding rules 
way contradictions avoided 
resulting extended logic program pi evaluated extended logic program :10.1.1.13.7065
specifying database repairs approach consists direct specification database repairs logic programming formalism 
expect database repairs correspond intended models program 
general predicate table database instance participates ics introduce new predicate repaired version predicate contains tuples corresponding repair original database 
example 
consider functional dependency fd inconsistent database instance fp introduce new predicate 
default contains contained generates default rule gamma fd logically equivalent 
obtain exception gamma clauses facts clauses equality treated exceptions defeasible constitute logic program exceptions pi specifies repaired predicate 
notice may contradictions clauses treated usual 
running answer sets generator checker program obtain answer sets fp considering atoms answer sets obtain fp fp corresponding expected database repairs fp fp resp 
example 
consider inclusion dependency id inconsistent database instance fp previous example order specify database repairs introduce new predicates default rules expressing contain exactly contain resp 
id generates clauses 
rule second exception 
clauses plus fact constitute repair logic program exceptions pi case gives answer sets fp corresponding expected repairs empty set fp cases integrity constraint fully captured logic programs exceptions 
reason generate exception clause 
constraints may interest practice position accommodate natural way making ics generate positive exceptions rules negative heads 
illustrated example 
example 
consider ic forces hold 
case exception clause generated 
logic program facts consists definition equality plus clauses gamma gamma gamma third rule corresponds closed world assumption 
treat defaults exception easy check program fp ag answer set corresponding expected repair ag answer set correspond database repair 
reason corresponding ground program ic removed 
pointed possible extend logic programs exceptions way include positive exceptions case negative default rule case :10.1.1.13.7065
change transformation rule 
section check answer sets follows 
delete clause having negative fp ag answer set ag 
see usually need treat positive exception 
ics form generate knowledge specific values discarded problematic non interesting :10.1.1.12.3324
general approach far particular examples ics 
shown negative exceptions needed occasions positive exceptions needed 
considered single ics 
natural way dealing multiple integrity constraints consists repeating construction repair logic program constraint separately union results 
unfortunately general 
additional assumption constraints closed resolution approach 
addition see example techniques far give account simple examples ics 
example 
consider set integrity constraints ic database instance fp set ics equivalent formula 
form ic treated techniques previous examples original version information hidden 
case expected repair empty database instance natural candidate repair program contains persistence defaults plus positive negative exceptions block negative positive defaults resp 
derived ic 
example constraint exceptions 
case obtain fp answer corresponds repair 
reason persistence defaults facts apply exceptions getting empty set primed literals minimal model 
way connecting persistence defaults exceptions missing 
purpose introduce triggering exceptions 
section general framework generating repair programs exceptions handle multiple constraints called standard format see 
resulting programs negative positive exceptions strong procedural negations disjunctions literals heads clauses disjunctive extended logic programs exceptions :10.1.1.49.9332
consider set integrity constraints ic written standard format wn pi xi wm qi yi formula containing built predicates implicit universal quantification front :10.1.1.12.3324
order specify repairs database means logic program exceptions pi introduce new predicate database predicate replace 
persistence defaults base predicate introduce persistence defaults gamma gamma rules type subject negative exceptions rules type subject positive exceptions 
stabilizing exceptions ic generate negative literal qi negative exception clause yi gamma vn xi yi formula logically equivalent logical negation 
similarly positive literal pi generate positive exception clause xi gamma vi xi vm yi exceptions may override persistence stated defaults 
role ics satisfied new predicates 
exceptions position ensure changes original predicates subject order restore consistency propagated new predicates 
need special exceptions trigger changes pis js stabilizing transactions propagate required changes 
triggering exceptions produce disjunctive exception clause wn xi wm yi gamma vn pi xi vm qi yi add facts corresponding original database rules built ins necessary 
call program pi constructed shown disjunctive extended repair logic program exceptions database instance 
difficult extend semantics transformation results repair programs 
need realize positive defaults blocked negative negative defaults positive 
notice clauses exceptions need worry way disjunctive obtained blocked exceptions 
example rule 
answer set semantics section changed 
delete positive default having positive negative default having negative way obtain extended answer semantics having applied pruning rules 
section left ground disjunctive logic program candidate set minimal models program say answer set :10.1.1.49.9332:10.1.1.49.9332
respect transformation obtain extended disjunctive logic program exceptions need change wrt suggested qualify negative defaults follows gamma 
proved answer sets disjunctive extended repair program exceptions correspond positive primed predicates repairs notice non primed parts answer sets terms original predicates coincide original database 
rule repair program modify original predicates 
example 
example continued new treatment resulting repair program stabilizing exceptions triggering exception default rules 
original instance facts answer sets fp correspond expected database repairs 
example 
example continued apart defaults exceptions introduced necessary introduce disjunctive triggering exceptions 
example constraints ic 

case answer set fp corresponds database repair 
theorem 
set domain independent binary integrity constraints ic form database instance correspondence answers sets repair program pi repairs domain independent constraint understand constraint checked wrt satisfaction looking finite active domain plus possibly constants mentioned ics 
allow non domain independent ics repairs obtained answer sets may happen answer set program minimal satisfying ic repair sense assigns infinite extension database predicates 
case ic database empty tables infinite domain 
definition repair repair fq answer set obtained program true elements repair extension infinite 
problems avoided assuming domain independence set ic 
binary integrity constraint mean ic literals li appear extra built ins allowed 
covers cases interesting ics 
evaluating queries results section provide underpinning general method evaluating queries 
assume database instance set integrity constraints ic 
show evaluate queries form fi kff ff basic query 
ff obtain stratified logic program standard construction terms new primed predicates 
predicate symbols qff designated query predicate extension answer ff second determine answers sets sk logic program exceptions pi third compute intersection rfi si qff si qff extension qff si 
set tuples rfi set answers fi obtain query answers general queries method needs combined method evaluating order queries 
example safe range order queries translated relational algebra 
approach queries subqueries form kff replaced new relation symbols 
resulting relational algebra query evaluated need arises materialize new relations method accomplish goal 
extensions alternatives approach proposed section works classes ternary ics transitivity constraint 
artificial examples ternary ics repair program provide repairs proved methodology sound repairs missed 
example 
consider db instance fp set integrity constraints ic case repair program obtained applying methodology introduced section contains usual persistence defaults plus triggering exceptions gamma stabilizing exceptions gamma gamma case obtain stable models repair empty instance missed 
methodology extended cover general ics standard format ternary constraints 
order simplify presentation decided section 
reason proceeding way efficiency 
order arbitrary number literals ics add stabilizing constraints new clauses disjunctive heads combination literals head combination literals head unfortunately length program grow exponentially 
example 
example continued keep rules appearing example 
add new stabilizing exceptions gamma case obtain answer set empty instance repair 
alternative way specifying database repairs means disjunctive logic programs exceptions 
detailed analysis left 
just show means example 
example 
example continued persistence triggering rules example stabilizing exceptions changed introducing procedural negation bodies obtaining gamma gamma resp 
case obtain answer set repair empty instance 
obtain right result comparison example program shorter program example length program linear size set integrity constraints plus database 
methodology section applied ics standard format 
interesting case corresponds referential ic 
example 
consider referential constraint ric gamma inconsistent database instance fp things properly need assume underlying database domain fa bg 
repair program persistence default rules 
addition stabilizing exceptions gamma aux null aux gamma null gamma aux triggering exception null aux aux 
variables program range take value null 
reason literal clause 
literal clause necessary insert null value needed clause relies fact variables range 
instantiating variables answer sets expected ones delete insert null 
related semantics underlying notion consistent query answers comes area belief revision 
precisely answers answers obtained relational database revised integrity constraints 
notion minimal change equivalent satoh 
important differences past belief revision 
typically belief revision considers revising propositional theory propositional formula 
case revise single order structure database instance order formula restricted kind functional dependencies 
program pi may viewed representation revised database 
revised database explicitly constructed 
program pi answer queries revised database 
bry knowledge author consider notion consistent query answer inconsistent databases 
defined consistent query answers provability minimal logic 
proposed inference method nonmonotonic fails capture minimal change 
bry approach entirely proof theoretic provide computational mechanism obtain consistent query answers propositional case 
widely recognized database integration integrated data may inconsistent integrity constraints 
typical theoretical solution augment data model represent disjunctive information 
:10.1.1.3.3631
important differences approaches 
rely construction single disjunctive instance deletion conflicting tuples 
second usually handle severely restricted classes integrity constraints queries 
gertz describes techniques algorithms computing repairs single constraint violations 
issue query answering presence inconsistency addressed 
simple way enforce object level introduce predicate clauses force variables take values excluding null value 
logic programming formalisms allow forms reasoning presence inconsistency principle task reasoning database repairs 
example symmetric logic programs introduced 
allow monotonic negation semantics modification stable model semantics 
programs operator representing assumptions qualify literals body clause 
know logic programs exceptions specify database repairs eventually lead disjunctive logic programs stable model semantics 
interesting examine detailed manner kind programs eventually obtain depending kind integrity constraints fact repair programs follow fixed format particular information original database instance fact express closed world assumption database predicate 
depending peculiarities resulting program specialized computation methods 
particular interesting investigate repair programs eventually transformed non disjunctive normal programs 
cases achieved investigated 
idea push turn disjuncts head clause body preceded procedural negation studied reduction possible 
example treated way transforming disjunctive clause clauses disjunctive heads needed 
currently exploring possibilities existing implementations stable model semantics normal logic programs combination database management systems compute consistent answers 
repair program transformed disjunctive extended program stable model semantics benefit implementations dlv 
successfully ran examples dlv 
efficient real database applications necessary possibilities handling non ground queries computing consistent core database intersection repairs stable models 
described take advantage core computations obtain consistent answers aggregate queries inconsistent databases :10.1.1.12.3324
treatment existential constraints referential integrity constraints see example requires analysis implementation 
dlv useful treating referential constraints 
possible suitable representation ics impose preferences example disjunctive logic program fpg stable model transformed program fpg stable model 
possible repairs example alternative repairing database introducing null values blocked considered undesirable desirable cascade elimination tuples 
experiments implementations dlv left 
acknowledgment supported nsf int 
authors grateful bob kowalski jorge lobo illuminating discussions georg gottlob nicola leone useful information disjunctive logic programs 
grateful francisco orchard support dlv 

abiteboul hull vianu 
foundations databases 
addisonwesley 

agarwal keller wiederhold saraswat 
flexible relation approach integrating data multiple possibly inconsistent databases 
ieee international conference data engineering 

arenas bertossi chomicki 
scalar aggregation fd inconsistent databases 
submitted icdt 

arenas bertossi chomicki 
consistent query answers inconsistent databases 
proc 
acm symposium principles database systems acm pods philadelphia pages 

baral kraus minker subrahmanian 
combining knowledge bases consisting order theories 
computational intelligence 

ben eliyahu dechter 
propositional semantics disjunctive logic programs 
annals mathematics artificial intelligence 

bry 
query answering information systems integrity constraints 
ifip wg working conference integrity control information systems 
chapman hall 

bertossi 
querying inconsistent databases algorithms implementation 
submitted 

chen warren 
computation models integration logical query processing 
ieee transactions data engineering 

phan minh dung 
integrating data possibly inconsistent databases 
international conference cooperative information systems brussels belgium 

duschka genesereth levy 
recursive query plans data integration 
journal logic programming 

eiter gottlob 
complexity propositional knowledge base revision updates counterfactuals 
artificial intelligence 

eiter gottlob mannila 
disjunctive datalog 
acm database systems 

eiter leone pfeifer scarcello 
knowledge representation system progress report comparisons benchmarks 
proceedings international conference principles knowledge representation reasoning kr trento italy june 
morgan kaufman 

faber leone pfeifer 
pushing goal derivation dlp computations 
proceedings rd logic programming non monotonic reasoning conference lpnmr 
lnai springer verlag el paso texas december 

gelfond lifschitz 
stable model semantics logic programs 
proc 
fifth international conference symposium logic programming volume pages 
mit press 

gelfond lifschitz 
logic programs classical negation 
proc 
seventh international logic programming conference pages 
mit press 

gelfond lifschitz 
classical negation logic programs disjunctive databases 
new generation computing 

gertz 
diagnosis repair constraint violations database systems 
phd thesis universit hannover 

katsuno mendelzon 
unified view propositional knowledge base updates 
international joint conference artificial intelligence 

kowalski sadri 
logic programs exceptions 
new generation computing 

kowalski sadri toni 
role abduction logic programming 
logic artificial intelligence logic programming vol 
pages 
oxford university press 

leone scarcello 
disjunctive stable models unfounded sets fixpoint semantics computation 
information computation 

lin mendelzon 
merging databases constraints 
international journal cooperative information systems 

lloyd 
foundations logic programming 
springer verlag nd edition 

niemela simons 
smodels implementation stable founded semantics normal logic programs 
proc 
th conference logic programming nonmonotonic reasoning pages 
springer 
lecture notes artificial intelligence 


belief revision paraconsistency logic programming framework 
proc 
conf 
logic programming nonmonotonic reasoning pages 

sagonas swift warren 
xsb efficient deductive database engine 
proc 
acm sigmod 

satoh 
nonmonotonic reasoning minimal belief revision 
international conference fifth generation computer systems pages 

ullman 
principles database knowledge base systems vol 
computer science press 

ullman 
information integration logical views 
international conference database theory 
springer verlag 
