explicit substitutions abadi cardelli 
curien 
vy september calculus refinement calculus substitutions manipulated explicitly 
calculus provides setting studying theory substitutions pleasant mathematical properties 
useful bridge classical calculus concrete implementations 
digital equipment systems research center 
ecole normale sup rieure part completed digital equipment systems research center 
inria rocquencourt part completed digital equipment systems research center paris research laboratory 
substitution calculus 
classical rule uses substitution crucially informally 
denote terms represents term free occurrences replaced substitution belong calculus proper informal meta level 
similar situations arise dealing binding constructs universal quantifiers type abstractions 
naive reading rule suggests substitution happen rule applied 
implementations substitutions invariably happen controlled way 
due practical considerations relevant implementation logics programming languages 
term may contain copies instance xxxx sophisticated structure sharing mechanisms performing substitutions immediately causes size explosion 
practice substitutions delayed explicitly recorded application substitutions independent coupled rule 
correspondence theory implementations highly nontrivial correctness implementations compromised 
study calculus refinement calculus substitutions manipulated explicitly 
substitutions syntactic representations term substitution term represents substitution express rule delayed substitution called beta beta id id syntax substitution replaces affects variable represents extension id identity substitution 
course additional rules needed distribute substitution 
calculus suitable setting studying theory substitutions express prove desirable mathematical properties 
example calculus church rosser conservative extension calculus 
calculus strongly connected categorical understanding calculus substitution interpreted composition 
propose calculus step closing gap classical calculus concrete implementations 
calculus vehicle designing understanding verifying comparing implementations calculus interpreters machines 
applications analysis typechecking algorithms higher order languages potentially mechanization logical systems 
considers weak reduction strategies treatment substitutions remain quite simple approach may overly general 
weak reduction strategies compute scope arise nested substitutions substitutions scope substitutions top level simple environments 
ancestor calculus calculus suffices setting 
strong reduction strategies useful general logics typechecking higher order programming languages 
fact strong reduction strategies useful situations symbolic matching conducted scope binders 
general treatment substitutions required substitutions may occur top level deep inside terms 
respects calculus resembles calculi combinators including categorical combinators 
calculus combinator calculi give full formal accounts process computation suffering unpleasant complications informal handling variables 
easy derive machines calculus show correctness machines 
perspective advantage calculus combinator calculi remains closer original calculus 
versions calculus substitutions 
start discussing untyped calculus 
main value untyped calculus studying evaluation methods 
give reduction rules extend classical calculus investigate confluence 
concentrate presentation relies de bruijn numbering variables briefly discuss presentations traditional variable names 
proceed consider typed calculi substitutions de bruijn notation 
discuss typing rules order system higherorder system prove central properties 
typing rules meant serve designing typechecking algorithms 
particular study help soundness efficiency design quest typechecking algorithm 
postpone discussion untyped calculi section typed calculi sections 
proceed general technical overview 
overview technical details calculus quite intricate gentle informal order 
start brief review de bruijn notation calculi rely 
preview untyped order second order calculi substitutions 
de bruijn notation de bruijn notation variable occurrences replaced positive integers called de bruijn indices binding occurrences variables unnecessary 
positive integer refers variable bound th surrounding binder example xy order typed systems binder types preserved example xy second order systems type variables replaced de bruijn indices de bruijn notation unreadable leads simple formal systems 
indices inference rules variable names examples 
classical reduction substitution adapted de bruijn notation 
order reduce suffice substitute appropriate places 
occurrences binders surrounding removed 
remaining free indices decremented desired effect obtained infinite substitution 
pushing substitution inside may come term 
case careful avoid replacing occurrences occurrences correspond bound variable substitution affect 
shift substitution 
may try 

correct additional surrounding binder prevent capture free indices suppose contains index example 
want capture index 
lift indices 

informal de bruijn notation suffice give flavor things come 
untyped calculus shall study simple set algebraic operators perform index manipulations treat infinite substitutions replace indexes 
represents infinite substitution write substitution term form called closure 
change emphasizes substitution longer meta level operation 
syntax untyped calculus terms ab substitutions id syntax corresponds index manipulations described previous section follows id identity substitution may write 
shift substitution example 
need index syntax terms de bruijn sn coded composition shifts 
write id value de bruijn index substitution informally written viewed function 
cons substitution example id 

id composition substitution example id id point shown algebraic properties substitution operations 
addition composition associative distributes cons 
example indicates rest component new notation write beta rule beta id complement rule write rules evaluate instance rules push substitution inwards instance cd particular derive intriguing law distribution substitution previous discussion definition definition definition rule uses operators id suggests choice operators natural inevitable 
fact possible variations shall discuss 
explicit substitutions complicate structure bindings somewhat 
example consider term id id may tempted think bound standard de bruijn reading 
substitution id intercepts index giving value 
crossing index renamed receives value keep complications mind examining formulas example deciding formula closed usual sense 
precise definition bindings follows 
associate statically reduction length substitution 
length pair integers 
substitution form 
am number consed terms number full definition length id order find variable bound expression go root expression parse tree 
initialize counter decrement cross 
wanted binder 
reach closure ms ns compare ms ms variable bound continue upwards setting counter ms ns 
order calculus move typed calculus introduce types terms substitutions 
typed order calculus syntax types environments nil terms ab substitutions id environments type inference rules commonly done record types free variables terms 
naturally setting environments indexed de bruijn indices 
environment 
nil associates type ai index example typing axiom typing rule abstraction calculus environments function serve types substitutions 
write say substitution environment example typing rule cons main new notion typing closures 
provides context understood approach compute environment type environment instance rule nil id nil nil nil id second order calculus move second order system new subtleties appear substitutions may contain types environments may contain placeholders types example bool ty id ty nil typing rules complex types may contain type variables looked appropriate environments 
problem arises full generality dependent types readers may find helpful think calculi substitutions dependent types 
particular typing axiom shown rule ty extra shift required understood environment hypothesis understood 
alternative heavy solution separate index sets ordinary term variables type variables manipulate separate term type environments 
instance phenomenon rule abstraction seen notice previously proved type environment understood assumption 
understood 
means indices rule application takes account substitution applied indices id id part reminiscent rule calculi dependent types correct technique version calculi explicit substitutions 
deal dependent types contain index substituted substitution necessary shift indices main difficulty second order calculus arises typing closures 
approach described order viable sufficient 
example usual negation bool certainly want able type term bool id familiar notation bool interpret substitution 
strategy order calculus type substitution obtaining environment ty id type term environment 
unfortunately type term suffice know type know bool 
solve difficulty secondorder system rules push substitution inside term type result 
calculi dependent types tasks deriving types applying substitutions inseparable 
discussed surprises arise writing precise rules example rule typing modified 
form judgement reconsidered 
higher order systems possibly dependent constructions theoretical practical importance 
discuss formally believe main complications arise second order 
untyped calculus section untyped calculus 
propose basic set equational axioms calculus de bruijn notation 
equations induce rewriting system rewriting system suffices purposes computation 
show rewriting system confluent provides convenient theoretical basis deterministic implementations calculus 
consider variants axiom system 
restrictions bring closer implementations evaluation deterministic 
extension system suggested knuth bendix computations 
discuss calculus variable names 
classical calculus actual implementations resort particular rewriting strategies 
discuss normal order strategy evaluation 
focus specialized reduction system normal order provides suitable basis machines 
describe machine extends krivine weak reduction machine strong reduction 
study categorical combinators hardin proposed systems similar 
particular hardin system beta homomorphic image basic system 
rely techniques prove results surprisingly find confluence properties similar equivalent 
come back point 
main difference approaches hardin unique sort terms substitutions 
distinction terms substitutions central 
distinction important simple understanding confluence properties practicality calculus 
simultaneously field developed system identical basic system claimed results 
share starting point 
field investigation optimality properties reduction schemes example field went consider labelled calculus 
contrast concerned questions confluence typechecking issues 
basic rewriting system syntax untyped calculus informal overview terms ab substitutions id notice included metavariables sorts terms substitutions consider closed terms suffices purposes 
de bruijn notation variables constants metavariables 
notation define equational theory calculus proposing set equations axioms 
oriented left right equations rewrite rules give rise rewriting system 
equations fall subsets singleton beta equivalent classical rule rules manipulating substitutions call collectively 
beta id varid id app ab abs clos idl id id map ass usual equational theory follows axioms inference rules replacing equals equals 
choice presentation guided structure terms substitutions 
beta rule eliminates creates substitutions function rules eliminate substitutions 
rules deal evaluation 
deal pushing substitutions inwards 
remaining express substitution computations 
prove substitution rules produce unique normal forms denote normal form 
classical rule directly included simulated argue 
precise definition reduction style de bruijn follows 
meta level substitution 
defined inductively rules 





ab 

ai 





sequence consecutive integers point useful case meta level substitution 

corresponds closely explicit substitution proposition exist am 

provable formal system 
am proof argument induction length proof 

strengthen claim argue intermediate terms proof satisfy hypothesis 
omit easy application case 
case 
am 
am hypothesis case 

induction ai choosing get induction ai allows apply induction 
hand desired reduces showing holds 
am 
am 
am simulation rule consists applying beta normal form reached 
usual want confluence theorem calculus 
theorem guarantee rewrite sequences yield identical results strategies different implementations equivalent theorem beta confluent 
proof rely standard rewriting techniques beta pass knuth bendix test 
come back subtle point 
proof relies termination confluence confluence classical calculus hardin interpretation technique 
show noetherian reductions terminate confluent 
proposition noetherian confluent 
proof indirect proof follows 
calculus translates categorical combinators merging sorts terms substitutions collapsing operations 
translation step rewriting mapped step rewriting system subst categorical rewriting rules exact translation largest variant considered 
hardin established termination subst 
simplifies proof confluence 
known lemma local confluence suffices checked examining critical pairs knuth bendix test 
example critical pair id id id local confluence ensured idl rule 
noetherian examine form normal forms 
substitution normal form necessarily form am id composition 

term normal form entirely free substitutions subterms codes de bruijn index 
term normal form classical calculus term modulo equivalence 
summary syntax normal forms terms ab substitutions id remarks apply hardin interpretation technique show full system confluent 
review hardin method 
set equipped relations suppose noetherian confluent denote normal form sr relation included set normal forms 
easy diagram chase yields sr confluent case take relation induced rules holds reduces rules 
take sr classical conversion sr holds obtained replacing subterm form id 
proof confluence reduces lemmas lemma confluent normal forms 
proof notice terms reduction original reduction proposition 
substitutions normal forms involved reductions independent reductions components substitutions 
lemma 
beta 

beta 
proof proceed induction structure 
application beta redex result follows easily induction hypothesis 
proceed likewise abstraction 
beta redex id definition id case terms 
induction hypothesis reduces problem familiar substitution lemma 
de bruijn proved substitution lemma 

ai ai ai ai 

ai ai 
proposition lemma reads notation suppose normal form 


lemma settles case 
cases reductions substitutions analogous terms 
case identical 
case similar 
suffices consider normal forms reducing problem substitution lemma 
variants subsystems reasonable steps deterministic evaluation algorithms 
restrict different ways 
rule clos removed 
inference rule removed inference rule closure operator restricted restrictions cumulated prevent obtaining normal forms confluence 
general result enables derive confluence subsystems lemma subrelation noetherian confluent relation normal forms normal forms confluent 
smallest equivalence relations containing coincide 
proof normal form normal form normal form coincides identical argument establishes second claim 
take relations induced restriction respectively 
easily obtain restricted substitution rules noetherian confluent apply interpretation technique exactly steps 
fact lemmas proved apply directly modification 
confluence properties suggest second kind variant 
beta confluent view standard rewriting system order terms locally confluent 
subtle point proved confluence closed terms terms exclusively constructed operators calculus 
contrast checking critical pairs involves considering open terms signature metavariables variables ranging terms substitutions different de bruijn indexes 
consider example critical pair id local confluence want equation id equation theorem 
similar critical pair considerations suggest addition new rules id id idr id id scons additional rules justified theoretical point view 
confluence closed terms established computationally significant 
admissible closed instance provable 
precisely id idr admissible scons admissible 
particularly draw attention rule scons 
expresses substitution equal element appended front rest 
rule reminiscent surjective pairing rule deserved attention classical calculus 
klop shown surjective pairing destroys confluence calculus 
similarly conjecture system id idr scons confluent metavariables terms substitutions locally confluent 
term inspired klop counterexample counterexample confluence id id fixpoint combinator term metavariable substitution metavariable 
done check details 
just recall informal argument 
call term 
reduces cb id cb id 
get common reduct terms need apply scons stage requires finding common reduct terms 
klop uses standardization turn informal circularity argument reductio ad starting minimal length standard reduction common reduct 
reader may wonder techniques subsection 
point lemma reduction classical substitution lemma depended crucially syntax substitutions normal form simple 
syntax allows particular expressions form id suggested counterexample 
go half way adding metavariables 
add term metavariables syntax substitution normal forms unchanged 
protects claimed counterexample 
additional cases term normal forms cases metavariables terms ab believe confluence proved case interpretation technique 
confluence normal forms obtained encoding normal forms calculus extended constants known confluent constant constant applied elements 
hardin results confluence bear similarity 
hardin shown various systems confluent set closed terms includes representation usual expressions problems confluence non closed terms 
difficulties differ somewhat particular counterexamples confluence differ 
hardin vy succeeded obtaining confluence metavariables terms substitutions slightly changing syntax set equations 
results reported 
calculus names discuss traditional formulation calculus variable names 
small digression 
ways viable 
approach consider syntax terms ab substitutions id corresponding theory includes equations beta id var var var id app ab abs occurs rules correspond closely basic ones de bruijn notation 
abs rule require shift operator involves condition variable occurrences 
side condition weakened occurring occurring free precise technical sense define 
consideration critical pairs generated previous rules immediately suggests new rules occur occur comm alpha id occur unpleasant set rules 
comm rule destroys existence substitution normal forms alpha rule expresses renaming bound variables 
intuitively may take hint calculus names really enjoy nice confluence features 
respect calculus de bruijn notation preferable 
alternative solution shift operator 
syntax terms ab substitutions id notation intuitively refers binder 
equations ones calculus de bruijn notation beta id var var var id abs framework may useful showing differences dynamic lexical scopes programming languages 
rules correspond lexical binding dynamic binding obtained erasing shift operator rule abs 
normal order strategy usual want complete rewriting strategy deterministic method finding normal form exists 
study strategies leftmost outermost redex chosen step 
completeness established completeness normal order strategy calculus 
normal order algorithm naturally decomposes parts routine obtaining weak head normal forms recursive calls routine 
setting weak head normal forms defined follows definition weak head normal form whnf short term form na am 
starting point take classical definition step weak normal order reduction calculus id ab possibilities implementing recursive calls order obtain full normal forms simplest consists adding rules ai aj normal form na ai am na am include rules focus weak head normal forms routine extend results normal forms 
analogous reduction mechanism calculus id ab id ab id id clearly closely related proposition identical 
reduction terminates weak head normal form iff reduction terminates 
proof part underlying redex redex obviously 
underlying redex beta redex form derive 
second part notice reduction stops exactly weak head normal form reached 
part claim suffices check reduction terminates 
define reflexive closure 
reduction sequence 
ak 
ak reduction sequence infinitely consecutive reflexive steps reflexive steps correspond reductions 
conversely suppose weak head normal form weak head normal form 
corollary complete strategy 
proof follows completeness strategy 
see proof classical notation 
approach define system wn incorporates slight optimizations machine 
wn rule wn replaces rules id new rule optimization justified idr reduction steps id id allowed 
wn weak sense reduce addition wn weak sense substitutions pushed respect wn models environment machines closer combinator reduction machines 
exactly obtain weak head normal forms particular wn reduce id 
motivates syntactic restriction entails loss generality start closures form restriction start write id expected nonterminating behavior 
correctness wn respect normal order weak head normal form reduction calculus proved proposition 
proposition wn identical 
wn reduction terminates term form na am iff reduction terminates 
proof proof goes exactly proposition 
slight difficulty establishing wn reduction terminates exactly terms form indicated statement 
invariant wn reduction useful term wn reduction sequence starting 
term restricted syntax subexpressions contexts closures 
node spine leftmost branch tree representation application closure right arguments application nodes closures 
prove invariant 
show properties stated hold wn hold notice properties proved 
node mentioned claim wn reduction terminated 
closure proof goes cases structure cases structure detail crucial cases part claim 
form root immediate context form induction hypothesis 
form replaced closure 
restriction syntax crucial 
derive claim wn normal forms 
suppose statement invariant reducible wn 
easy checking rules allows exclude possibility application closure 
wn reducible cons forces form abstraction 
implementation refinement implementation adapt wn manipulate expressions forms substitution corresponds global environment substitutions deeper correspond local declarations defining machine take view linear representation read sequence machine instructions acting graph representation approach original rules longer acceptable yield expressions desired forms 
example reduct app rule closure 
order reduce ab reduce weak head normal form 
machine discussed stack storing 
reducer whnf embodies modifications wn 
reducer takes pair arguments term substitution closure returns pair form na am id 
compute whnf axioms rules applied order listing 
proceed cases structure cases structure composition cases structure whnf whnf whnf ab whnf whnf id abstraction whnf ab id whnf id id whnf id whnf whnf whnf whnf whnf whnf whnf id whnf whnf whnf whnf whnf whnf whnf whnf whnf whnf whnf simple extension rules yields full normal forms whnf nf nf whnf 
am sm id nf nf 
nf am sm precise soundness property whnf proposition equation whnf provable weak head normal form 
proof routine check correctness whnf respect wn 
specifically whnf provable iff wn normal form whnf provable iff wn normal form cases whnf provable iff wn normal form 
step consider derivation transition machine rules whnf 
basic idea implement recursive call evaluation ab stack store argument 
stack contains closures 
table represents extension krivine machine 
column represents current state second represents state line read transition triplet subst term stack triplet nature 
evaluate program global environment machine started state empty stack 
machine repeatedly uses applicable rule 
machine stops transition applicable 
termination states forms id am represent na am respectively 
subst term stack subst term stack id ab id machine restarted stops full normal form reducer 
specifically machine terminates triplet restart initial state machine terminates triplet id 
sn restart copies machine states 
sn 
correctness machine stated follows omit simple proof 
proposition starting state machine terminates id 
am iff whnf na am id terminates iff whnf 
far away wildly nondeterministic basic rewriting system section 
derivations managed keep understanding successive refinements guarantee correctness 
possible calculus concrete calculus easier starting point 
order theories previous section seen derive machine sensible implementation untyped calculus turn untyped calculus 
different implementation issues arise typed systems 
typed calculi need just execution machine typechecker 
apparent discuss second order systems explicit substitutions help deriving 
want typechecker calculus 
order typechecker difficulty 
addition usual rules classical system handle typechecking substitutions 
inspection rules shows done easily rules deterministic 
section describe order typed calculus 
prove preserves types reductions sound respect calculus 
move second order calculus section 
start recalling syntax type rules order calculus de bruijn notation 
types environments nil terms ab definition theory var varn lambda app ba include rule focus typechecking evaluation 
order calculus syntax types environments nil terms ab substitutions id type rules come groups giving types terms giving environments substitutions 
groups interact rule closures 
definition theory var lambda app clos ba id id shift cons comp include beta axiom axioms 
clearly typechecking decidable 
furthermore fact separate typing terms typing substitutions quite pleasant seen property extend second order 
proceed show sound 
preliminary prove lemmas 
lemma relies notion normal form defined previous section 
modified version rules order deal typed terms rules change 
abs map typed version enjoys properties untyped version 
term normal form typeable iff typeable lemma theory normal forms normal form 
iff proof argument easy induction length proofs 
delicate case deals rules varn clos 
assume show induction hypothesis trivial case rule proof clos fact shift comp yield clos yields desired result 
converse assume order show trivial case 
analysis shows form proof theorem shorter proof induction hypothesis follows denote step reduction rules reductions preserve typings 
lemma subject reduction similarly proof inspect rules abbreviate 
var suppose clos 
furthermore cons 
var implies app ba 
suppose ba clos ba clos abs 
suppose clos lambda apply shift comp obtain 
var cons gives 
clos yields lambda 
clos 
suppose comp tells clos 
idl id suppose id id comp id suppose comp 
cons says 
shift ass 
solve case simply comp twice 
map 
suppose comp 
cons 
comp clos 
cons 
idr id case similar case idl 
id id suppose id id clos 
id implies id suppose cons var yields shift yields id id id scons case similar previous 
lemmas immediately give soundness proposition soundness may wonder completeness result holds converse soundness result 
unfortunately answer 
instance gives type give type id gives type id gives types give type id 
conversely give type id give types observations suggest reformulation soundness completeness claim 
informally show give type term iff give type normal forms term subterms normalization discards 
second order theories type rules needed second order calculi 
unfortunately situation complex order types include binding constructs quantifiers 
interact substitutions subtle ways interacts substitutions 
equivalent reduction reappears higher order typed systems 
implementing typechecker second higher orders face concerns efficient handling substitution correctness implementation pushed untyped calculus untyped calculus 
important concerns typechecking quest programs example 
nice discover apply concept explicit substitutions tackle typechecking problems 
order carry plan obtain second order system explicit substitutions incurs difficulties 
refine system obtain actual typechecking algorithm 
long enterprise steps interesting sake keep mind goal deriving algorithm correct close sensible implementation virtue handling substitutions explicitly 
second order theories considerably complex untyped order theories number rules subtlety 
complication apparent de bruijn formulation ordinary second order calculus 
complication second order calculus unexpected difficulties 
mentioned informal overview 
description define prove sound respect 
new system deterministic 
define second order typechecking algorithm alg prove sound respect 
syntax second order calculus types environments nil ty terms ab ab system consists type rules second order calculus definition theory nil nil env ext ext tvar tfun tgen var varn env ty env env ty env env ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty varn lambda lambda app app ty ty id ty ty id move system syntax types environments nil ty terms ab ab substitutions id ty previous section seen formulate order calculus adding closure rule group substitution rules order calculus 
unfortunately approach fails second order systems provide satisfactory treatment definitional equality 
simply define construct terms abstraction application substitution def accept definition define construct giving names types substitution def adequate define abbreviation abstraction application 
instance recall example informal overview bool typed interpreted bool 
body typechecked knowing bool suffice ty 
interpret substitution 
unfortunately strategy carry 
define meta level substitution point deal explicit substitutions 
second define explicit substitution obtain example def ty id bool def bool ty id type body independently pushing substitution 
better shape encoding 
suffice deal terms substitutions separately clos rule previous section 
task deriving types separated task applying substitutions 
rules described structured way substitutions automatically pushed inside terms typechecking typing occur expected example 
unfortunate side effect small explosion number rules 
include analogue clos fact conjecture admissible 
having settled general approach discuss form judgments 
theory formulated equivalence judgments example judgments form judgment means environment terms type equivalent 
recover standard judgments definitions def equivalence judgments needed possible prove directly term equivalent example 
formally order prove prove symmetry transitivity 
similarly possible prove directly may prove type equivalent need seen section typing axiom modified 
similar considerations show rule cons needs modified suggest tentative rule ty note hypothesis require type reason formed furthermore require equivalent substitutions type truth type irrelevant 
suggests new approach deal judgments form substp records length 
precise relation environment lengths substitutions sizes defined section obeys invariant substp 
fact hardly keep track lengths substitutions 
example illustrates type substitution determined satisfactorily 
tentative rule nil bool ty id true bool 
obtain nil true true bool ty nil naturally expect type bool ty nil 
information bool environment substitution check bool 
type substitution intrinsically defined 
explanations mind reader able approach rules theory may find preferable understand alg time 
definition theory see appendix 
prove soundness respect 
proposition soundness 


ty ty 

env env 

substp exist 
gm 
gq ty ty gq proof proof induction rules 
omit checking numeric invariant part claim 
cases rules trivial 
symmetric character claim settles cases symm trans rules 
easy cases rules express typing rewriting sides underlying rewrite rule appears premise 
concerns variants 
briefly examine remaining cases induction hypothesis tvar 
induction hypothesis tfun observation 
variants similar 
induction hypothesis 
exploit induction hypothesis premise 
cases 
coincide identical second premise 
form get contradiction induction hypothesis second premise 
ty follows induction hypothesis premise 
similar noting 
similar second premise forces form cases coincide property holds vacuously 
induction hypothesis noting 
exploit induction hypothesis premise 
coincide argument case 
follows immediately assumption speculate soundness claim strengthened converse completeness result holds 
provide typechecking algorithm alg second order calculus 
algorithm formulated set inference rules easy comparison 
see rule alg admissible rule shows soundness alg 
terms closures alg operate identically 
interesting cases actual implementation manipulate closures subsection 
order typecheck term basic strategy analyze simpler simpler components accumulating complex substitutions reach index extract relevant information substitution environment 
informally algorithmic flow control rule start parts recursively assumptions top require accumulate results produce unknown parts 
example want type environment select inference rule alg inspecting shape 
move assumptions rule recursively solve typing problems collect results produce type original term rules involve tests type equivalence auxiliary reduction judgments substp ty judgments sort weak head normal form composition closure form 
definition algorithm alg see appendix 
show alg really defines algorithm notice rule applied bottom situation 
judgments ty ty test applicability cases cases cases reduction proceed cases cases cases reduction substp proceed cases cases substp proceed cases cases cases reduction ty handled cases reductions invariants show algorithm considers cases may arise input terms typed substp id ty ty algorithm shown terminate success failure rule reduces size terms moves terms normal form 
algorithm alg sound respect proposition 
alg ty ty 

alg 
alg substp substp 

alg substp substp 

alg ty ty 

alg ty ty 

alg env env 
proof proof simple case analysis extensive symm trans rules 
conjecture algorithm complete sense conjecture 
ty alg ty 

alg alg ty 
substp alg substp 

env alg env 
unfortunately simply prove conjecture induction proofs example presence second part statement gives rise complications 
usual presentations calculus play handling substitutions 
helps developing meta theory calculus suitable level abstraction 
hope demonstrated benefits explicit treatment substitutions untyped systems typed systems 
theory manipulation explicit substitutions delicate useful correct efficient implementations 
benefited discussions cr gut hardin muller os su rez hibbard editorial help 
benefited discussions cr gut hardin muller os su rez hibbard editorial help 
appendix theory type equivalence ty ty ty ty ty env ty ty ty ty ty ty ty ty env id ty ty ty ty ty ty ty ty ty ty ty ty ty term equivalence ty substp ty ty substp ty ty ty ty ty ty ty ty ty ty ty env ty ty ty ty id ty ty id id ty ty ty ty substp substp ty ty ty env include beta rules beta beta substitution equivalence id id ty ty ty id ty id substp substp substp substp substp env id id subst ty subst env ty subst substp ty substp ty substp ty ty substp substp id substp substp id substp substp substp substp ty ty substp substp substp substp substp ty substp ty ty substp substp substp substp env substp environment equivalence env env nil nil env env env env env ty env env ty ty env appendix algorithm alg inference types tyvar typi typi env ty ty ty ty ty ty ty ty ty id substp ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty substp ty substp ty ty inference terms var abs abs app app ty ty ty ty ty ty ty ty ty ty ty ty id ty ty id id substp ty ty ty ty substp substp ty ty ty id ty ty id inference substitutions id shift env id subst ty subst shift cons cons env ty subst substp ty substp ty substp ty substp substp id substp substp substp substitution reduction redshift redshift substp substp ty substp ty substp substp substp env id id subst ty subst env ty subst ty ty substp substp ty substp ty ty substp substp id substp id substp substp substp substp substp substp substp ty substp substp substp substp substp ty substp ty ty substp substp substp type reductions env ty ty ty ty ty ty ty ty ty id substp ty ty substp ty ty type equivalence ty substp ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty ty inference environments nil nil env ext ext ty ty ty ty ty ty ty ty env ty env env ty env barendregt lambda calculus syntax semantics north holland 
de bruijn lambda calculus notation nameless dummies tool automatic formula manipulation 
mat 
pp 

cardelli typeful programming src report digital equipment 
curry feys combinatory logic vol 
north holland 

curien calculi framework closures unpublished preliminary version printed liens report 

curien categorical combinators sequential algorithms functional programming pitman 
field laziness optimality lambda interpreters tools specification analysis conference record seventeenth annual acm symposium principles programming languages pp 
san francisco january 
hardin confluence results pure strong categorical combinatory logic ccl calculi subsystems ccl theoretical computer science pp 

hardin proof termination rewriting system subst ccl theoretical computer science pp 

hardin 
vy confluent calculus substitutions france japan artificial intelligence computer science symposium december 
huet oppen equations rewrite rules survey formal languages theory perspectives open problems book editor pp 
academic press 
klop combinatory reduction systems mathematical center tracts amsterdam 

krivine unpublished 
martin intuitionistic type theory notes sambin series lectures padova bibliopolis 
wadsworth semantics pragmatics lambda calculus dissertation oxford university 

