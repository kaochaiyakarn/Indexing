type classes functional dependencies mark jones department computer science engineering oregon graduate institute science technology beaverton oregon usa mpj cse ogi edu 
type classes haskell allow programmers define functions set different types potentially different implementation case 
example type classes support equality numeric types monadic programming 
commonly requested extension support multiple parameters allows general interpretation classes relations types potentially useful applications 
unfortunately examples practice leading ambiguities inaccuracies inferred types delaying detection type errors 
illustrates kind problems occur multiple parameter type classes explains resolved allowing programmers specify explicit dependencies parameters 
particular novelty application ideas theory relational databases design type systems 
type classes haskell allow programmers define functions set different types potentially different implementation case 
class represents set types associated particular set member functions 
example type class eq represents set equality types precisely set types operator 
similarly type class num represents set numeric types including int float complex rational numbers standard arithmetic operations 
classes defined standard haskell prelude libraries 
language allows programmers define new classes extend existing classes include new user defined datatypes 
type classes play important role haskell programs directly uses member functions associated particular class indirectly various language constructs including special syntax monadic programming notation 
research reported supported usaf air materiel command contract 
smolka ed esop etaps lncs pp 

springer verlag berlin heidelberg type classes functional dependencies type classes reflected allowing types include predicates 
example type equality operator written eq bool type variable represents arbitrary type bound implicit universal quantifier predicate eq restricts possible choices types eq 
generally functions haskell types form list predicates monotype 
empty usually abbreviate 
implementations presence predicate function type indicates implicit parameter added pass appropriate evidence predicate run time 
example implementation equality values type evidence predicate form eq details implementation scheme may :10.1.1.47.1059
predicate eq refer eq class name class parameter 
restricted character set constraints written form eq reflecting intuition eq represents set types expected member 
haskell syntax looks curried function application suggests possible allow classes parameter 
example predicate form parameters provided 
obvious answer interpret place relation types read assertion related natural generalization parameter case sets just place relations 
generally interpret parameter class place relation types 
potential application multiple parameter type classes suggested pursued wadler blott type classes described :10.1.1.47.1059
essence example parameter class coerce describe subtyping relation associated coercion operator coerce coerce decade published applications multiple parameter type classes discovered see sections current :10.1.1.48.5674
technical foundations multiple parameter classes worked time support multiple parameter type classes included currently available haskell implementations 
surprising support multiple parameter type classes included haskell standard revision 
explanation proposed applications worked particularly practice 
problems occur relations types specify simple extensions haskell general practical applications 
particular fail capture important dependencies parameters 
concretely multiple parameter classes result ambiguities inaccuracies inferred types delayed detection type errors 
jones show problems avoided giving programmers opportunity specify desired relations types precisely 
key idea allow definitions type classes annotated functional dependencies idea originates theory relational databases 
section describe key features haskell type classes needed understand contributions 
section design simple library collection types illustrate problems occur multiple parameter classes motivate functional dependencies 
examples provided section 
basic elements theory functional dependencies section explain role type inference section 
section describe opportunities dependency information conclude pointers section 
preliminaries type classes haskell section describes class declarations introduce new single parameter type classes haskell instance declarations populate 
readers familiar aspects haskell probably skip ahead section 
requiring brief overview refer haskell report various tutorials listed haskell website haskell org 
class declarations class declaration specifies name class lists member functions type class expected support 
actual types class normally referred instances class described separate declarations described 
example eq class representing set equality types introduced declaration class eq bool type variable appears lines represents arbitrary instance class 
intended reading declaration particular instance eq operator type bool compare values type qualified types indicated restriction equality operator reflected type assigned eq bool types restricted predicate referred qualified types 
types assigned function direct type classes functional dependencies indirect member functions class unspecified type 
example functions member xs xs subset xs ys member ys xs assigned types member eq bool subset eq bool 
superclasses classes may arranged hierarchy may multiple member functions 
example illustrates declaration ord class contains types elements ordered strict non strict comparison operators class eq ord bool particular context symbol read implication fact reverse implication accurate reading intention instance ord instance eq 
plays role superclass ord 
mechanism allows programmer specify expected relationship classes compiler responsibility ensure property satisfied produce error diagnostic 
instance declarations instances class described collection instance declarations 
example declarations show define equality booleans pairs instance eq bool instance eq eq eq line second instance declaration tells equality values types needed provide equality pairs type 
preconditions need definition equality booleans 
just declarations specified equality operation infinite family types constructed bool repeated uses pairing 
additional declarations may distributed modules extend class include datatypes 
example building library collection types commonly suggested applications multiple parameter type classes provide uniform interfaces wide range collection types :10.1.1.144.1863
jones types expected offer ways construct empty collections insert values test membership 
declaration greatly simplified purposes presentation introduces parameter class collects starting point project class collects ce empty ce insert ce ce member ce bool type variable represents element type ce type collection 
framework want define instances class lists characteristic functions represent collections equality type bit sets represent collections characters hash tables represent collection elements hash function 
omitting standard implementation details lead declarations instance eq collects instance eq collects bool instance collects char instance collects ce collects array int ce 
looks quite promising class range interesting implementations 
unfortunately serious problems class declaration 
empty function ambiguous type empty collects ce ce 
ambiguous mean type variable appears left symbol right 
problem theoretical foundations haskell overloading guarantee welldefined semantics term ambiguous type 
reason haskell system reject attempt define terms 
sidestep specific problem removing empty member class declaration 
remaining members insert member ambiguous types run problems try 
example consider functions coll insert insert coll coll true coll hugs infers types collects collects collects bool collects char notice type allows parameters assigned different types attempts insert values type classes functional dependencies collection coll 
hope model collections contain type value clearly inaccurate type 
worse definition accepted causing type error 
error code detected point definition point module 
obviously prefer avoid problems eliminating ambiguities inferring accurate types providing earlier detection type errors 
attempt constructor classes faced problems described haskell programmers tempted version class declaration class collects empty ce insert ce ce member ce bool fact precisely approach taken okasaki peyton jones realistic attempts build kind library :10.1.1.144.1863
key difference type constructor form collection type ce collection type represented ce original class declaration 
collects example constructor class second parameter unary type constructor replacing nullary type parameter ce original definition 
change avoids immediate problems mentioned empty operator type collects ce ambiguous appear right symbol 
function assigned accurate type collects ce ce 
function rejected required type error type allow arguments different types 
example multiple parameter class quite practice ambiguity problems 
reason works intuitively parameters essentially independent fit interpretation collects relatively unconstrained relation types type constructors unfortunately version collects class general original class 
instances listed section version collects instance lists collection type written form ce type constructor element type remaining instances jones fit constructor class framework introducing dummy type value constructors example newtype bool instance eq collects 
approach particularly attractive 
programs artificial type constructor uses value constructor convert distinct equivalent representations characteristic functions 
workaround limited general deal cases example element type fixed variable 
parametric type classes alternative parametric type classes ptc predicates form ce collects meaning ce member class collects intuitively type class collects choice parameter 
definition parametric collects class looks original class ce collects empty ce insert ce ce member ce bool instances declarations gave original collects class section adapted syntax ptc introducing artificial type constructors 
different parameter class section implied assumption element type uniquely determined collection type ce 
compiler supports ptc ensure declared instances collects violate property 
return information avoid ambiguity infer accurate types 
example type empty ce ce collects ce need treat ambiguous unknown element type uniquely determined ce 
ptc provides exactly tools need define library collection classes 
opinion original ptc received attention deserves 
part may seen incorrectly alternative constructor classes accurately orthogonal extension 
addition prototype implementation potential users experiment 
functional dependencies describe generalization parametric type classes allows programmers declare explicit functional dependencies parameters predicate 
example achieve effects ptc type classes functional dependencies changes notation annotating original class definition dependency ce read ce uniquely determines class collects ce ce empty ce insert ce ce member ce bool generally allow class declarations annotated zero dependencies form xn ym xn ym type variables dependency interpreted assertion parameters uniquely determined parameters 
dependencies appear class declarations part language syntax instance declarations class constraints types completely unchanged 
convenience allow parentheses list type variables dependency omitted single variable 
approach strictly general ptc allows express larger class dependencies including mutual dependencies 
easier integrate existing syntax haskell require changes syntax predicates 
including dependency information programmers specify multiple parameter classes precisely 
illustrate consider examples class class dab class 
declaration tell binary relation 
dependency second declaration tells just relation partial function 
dependencies declaration see represents partial mapping 
compiler responsible ensuring instances scope point consistent declared dependencies example declarations appear violate dependency acceptable instance bool int instance bool char 
note declaration allowed instance 
problem instance allow particular choice associated choice contradicts dependency specified definition generally means practical reasons slightly different syntax dependencies current prototype implementation details included distribution 
superclass declarations handled similar way leaving compiler ensure instance class instance superclasses 
jones declaration form instance particular types variables appear ones appear type known uniquely determined 
examples section presents additional examples show functional dependencies allow give accurate specifications practical multiple parameter type classes 
arithmetic operations haskell prelude treats arithmetic functions addition multiplication functions type num means result type arguments 
flexible approach allow different argument types add int values get int result add int float get float result 
flexible approach coded follows class add class mul instance mul int int int instance mul int float float instance mul float int float instance mul float float float 
separate linear algebra package extend classes arithmetic operations vectors matrices instance mul mul vec vec instance mul mul mat mat instance mul mul mat mat mat 
dependency information quickly run problems ambiguity 
example simple expressions ambiguous types mul int int mul int dependencies determine int int deduce expression type int 
example shows useful allow multiple types left hand side dependency 
finite maps finite map indexed collection elements provides operations lookup value associated particular index add new binding 
described class class fm fm fm lookup fm extend fm fm type classes functional dependencies fm finite map type uniquely determines index type element type association lists functions arrays fit naturally framework 
bit set indexed collection booleans instance eq instance eq instance ix array instance int bool 
variation treatment collection types section dependency omitted quickly run similar kinds problem 
included example show useful allow multiple types right hand side dependency 
relations functional dependencies section provide brief primer theory relations functional dependencies summary notation 
ideas originally developed foundation relational database design 
established detailed presentations theory useful algorithms working practical settings standard textbooks theory databases 
novelty current applying design type system 
relations standard terminology relation indexed family sets di just set tuples indexed family values ti ti di formally just subset di tuple di function maps index value value ti di called ith component special case reduces familiar special case tuples values tn dn 
ifx write tx pronounced restriction tuple intuitively tx just picks values indices appearing discards remaining components 
functional dependencies context index set dependency term form read determines subsets ifa relation satisfies functional dependency values tuple uniquely determined values tuple example relations satisfying just partial functions relations satisfying partial injective functions 
jones set functional dependencies set indices closure respect written smallest set example 
intuitively closure set indices uniquely determined directly indirectly indices dependencies closures easy compute simple fixed point iteration 
typing functional dependencies section explains extend implementation haskell deal functional dependencies 
fact tools need obtained special case improvement qualified types 
describe briefly space restrictions prevent detailed overview 
simplify presentation assume set indices parameter names written ic corresponding set functional dependencies written fc class name assume predicates written form tuple types indexed ic allows away order components written particular implementation 
type system haskell described judgements form 
judgement represents assertion expression assigned type assumptions type free variables providing predicates satisfied 
say set predicates satisfied mean implied class instance declarations scope corresponding point program 
goal type inference find general choices 
successful infer principal type forming qualified type looking predicates quantifying variables appear main results theory improvement apply improving substitutions predicate set point type inference compromising useful notion principal types 
intuitively improving substitution just substitution applied particular set predicates changing satisfiability properties 
precise write set satisfiable instances defined sp substitution predicates sp satisfied 
setting say improving sp variables involved appear new fresh type variables 
practical perspective simply means change set environments set types value 
restriction new variables necessary avoid conflicts type variables 
type classes functional dependencies improvement play useful role standard haskell type system language restrict choice instances type class improving obtain equivalent identity substitution 
functional dependencies restrict set instances defined leads opportunities 
example prohibiting definition instances form collects know improving substitution map predicate form collects 
ensuring dependencies valid task ensure declared instances class consistent functional dependencies fc example suppose instance declaration form instance 
fc ensure tv ty tv tx elements ty uniquely determined elements tx 
notation tv refers set type variables appearing free object restriction needed ensure pairwise compatibility instance declarations example second instance instance dependency fc ensure ty sy tx sx fact assumption instances normally contain type variables instantiated specific types need check kind preserving substitutions stx sty easy see test reduced checking tx sx general unifier guarantee declared dependencies satisfied 
example instance declarations section consistent dependency ce improving inferred types ways dependency fc class help infer accurate types predicates tx sx ty equal 
sy suppose inferred predicate ct instance instance ct 
tx st substitution calculated way matching ty st equal 
cases unification ensure equalities satisfied calculate suitable improving substitution 
unification fails detected type error 
note general need iterate process opportunities improvement 
jones detecting ambiguity mentioned section guarantee defined semantics function ambiguous type 
standard definition type form ambiguous tv tv indicating quantified variables ai appears tv tv 
intuition ai body type way determine bound type instantiated 
presence functional dependencies way find required instantiation ai 
need insist tv mentioned explicitly long uniquely determined variables tv 
step formalizing idea note set predicates induces set functional dependencies fp type variables tv fp tv tx tv ty fc 
fairly straightforward reading variables tx known components known components type variables determine type ambiguous calculate set dependencies fp take closure tv respect fp obtain set variables determined 
type ambiguous variables ai included closure 
concisely type ambiguous tv tv fp related point note current implementations haskell required check declaration form instance variables appearing ensure tv tv 
light observations section relax require tv tv fp contain variables explicitly mentioned provided determined variables generalizing inferred types standard hindley milner type system principal types computed process generalization 
inferred unquantified type normally just calculate set type variables tv want quantify set variables tv fixed current assumptions quantify variables difference presence functional dependencies little careful variable appears may need treated fixed variable determined account quantify variables fp type classes functional dependencies putting name functional dependencies approach described provides way programmers indicate dependencies parameters type class stops short giving dependencies name 
illustrate point consider pair class declarations class uab class uab 
declaration know dependency parameters dependency parameters inherited superclass dependency added changing second declaration class uab tells part story 
example predicates uab rules section allow infer return dependency give name writing function maps determines 
explicit syntax language changing declaration read class uab 
change declaration indicate inherits dependency class uab 
predicates infer ua expected 
clear useful particular feature better leave type checker infer inherited dependencies automatically requiring programmer provide names 
current prototype includes experimental implementation idea making dependency names explicit interactions language features particularly overlapping instances fully understood 
careful exploration issues topic 
example show opportunities exploit dependency information go ideas described section 
ideas described implemented latest version hugs interpreter practice 
early users new applications extension allowing overcome problems previously unable fix 
provided feedback enabled discover places dependency information described section 
jones constructing system ideas theory relational databases 
interesting area see ideas developed exploited design programming language type systems 
users functional languages course accustomed working parameterized datatypes 
functional dependencies provide way express similar relationships types quite specific 
example similar ideas conjunction existential types capture dependencies types identities hidden 
acknowledgments colleagues ogi interest 
particular go jeff lewis insight patches lois delcambre explaining role functional dependencies play database theory 
armstrong 
dependency structures data base relationships 
ifip cong geneva switzerland 
blott 
approach overloading polymorphism 
phd thesis department computing science university glasgow september 
chen hudak odersky 
parametric type classes extended 
acm conference lisp functional programming san francisco ca june 
jones 
qualified types theory practice 
phd thesis programming research group oxford university computing laboratory july 
published cambridge university press november 
jones 
simplifying improving qualified types 
international conference functional programming languages computer architecture pages june 
jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming january 
jones peterson 
hugs user manual september 
maier 
theory relational databases 
computer science press 
okasaki 
edison user guide may 
peyton jones :10.1.1.144.1863
bulk types class 
proceedings second haskell workshop amsterdam june 
peyton jones hughes editors 
report programming language haskell non strict purely functional language february 
peyton jones hughes editors 
standard libraries haskell programming language february 
peyton jones jones meijer :10.1.1.48.5674
type classes exploring design space 
proceedings second haskell workshop amsterdam june 
wadler blott :10.1.1.47.1059
ad hoc polymorphism ad hoc 
proceedings th acm symposium principles programming languages pages jan 
