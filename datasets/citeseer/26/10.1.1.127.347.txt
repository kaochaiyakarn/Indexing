amplifying collision resistance complexity theoretic treatment ran canetti madhu sudan luca trevisan wee ibm research canetti ibm com mit csail rivest madhu mit edu uc berkeley luca cs berkeley edu harvard university eecs harvard edu 
initiate complexity theoretic treatment hardness amplification collision resistant hash functions transformation weakly collision resistant hash functions strongly collision resistant ones standard model computation 
measure level collision resistance maximum probability choice key efficient adversary find collision 
goal obtain constructions short output short keys small loss adversarial complexity tolerated trade compression ratio computational complexity 
provide analysis simple constructions show parameters achieved constructions optimal sense 
keywords collision resistance hash functions hardness amplification combiners 
constructing collision resistant hash functions central problem cryptography foundational practical points view 
goal construct length decreasing functions infeasible find distinct inputs output 
problem received attention past decades 
coming constructions efficient practice time enjoy rigorous security guarantees say hardness studied problem turned elusive 
unable construct collision resistant functions potentially simpler primitives 
supported nsf cff 
supported nsf ccf 
supported nsf cns ccf onr 
done visiting ibm research ipam columbia university supported nsf ccf ccf 
menezes ed crypto lncs pp 

international association research amplifying collision resistance complexity theoretic treatment problem highlighted repeated attacks popular md md sha hash functions refer 
state affairs natural ask bootstrap collision resistance constructing full fledged collision resistant hash functions weak ones 
general mechanisms transforming hash functions somewhat easy completely trivial find collisions infeasible find collisions 
addition providing rigorous ways improve collision resistance hash functions mechanisms suggest methodologies constructing hash functions scratch 
works propose design principles hash functions 
mechanisms regarded hardness amplification mechanisms collision resistant hash functions 
exception concentrates increasing domain size hash function analyses provided mechanisms idealized models computation modeling underlying building blocks random functions 
consequently currently constructions guaranteed provide level collision resistance standard model computation sole assumption underlying building blocks weaker collision resistance properties 
closely related problem constructing combiners hash functions studied standard model discuss problem detail 
state art contrasted sister problem constructing way functions 
established theory hardness amplification see 
concrete notions strength way functions constructions guaranteed provide strong way functions sole assumption underlying building block weak way function 
lower bounds black box hardness amplification known 
note collision resistance exhibits different properties 
constructing collision resistant hash functions calls different design principles proposed expander way function bad collision resistant function 
furthermore practice theory indicate collision resistance considerably harder achieve wayness 
specific points highlighted show possible translate analysis study amplification wayness setting collision resistance 
initiate study amplification collision resistance standard reductionist complexity theoretic framework 
provide measure level collision resistance hash functions 
consider constructions quantitatively analyze amount amplify collision resistance number efficiency parameters discussed 
model hash functions 
model hash functions family functions function family specified key 
security analyzed canetti case key chosen random space keys public 
point advantages approach 
refer detailed discussion 
allows natural modeling adversary algorithm circuit takes input key identifying function family tries output collision 
modeling possible single functions length reducing function exists adversary outputs collision function constant time 
second approach supports simple natural quantitative measure level collision resistance level collision resistance maximum probability choice key efficient adversary find collision 
third current constructions hash functions naturally regarded keyed function families 
instance may interpret initialization vector iv sha sha key 
collision finding attacks depend specific values properties key keys 
specific examples include attack md time memory trade attacks attacks gibson hash function 
particular may possible broken functions significant fraction keys attacks successful 
hand may sufficient simply view iv key iv may incorporated computation sufficiently strong way see discussion 
parameters 
consider parameters hash functions hardness amplification 
foremost level collision resistance 
goal hardness amplification reduce maximum probability efficient adversary find collisions typically 
salient parameter output length 
parameters include key size number applications underlying hash function running time complexity adversaries considered compression ratio ratio input length output length 
compression ratio interesting may apply transformation due merkle damg ard increase compression ratio arbitrarily increases number applications underlying function maintains key size output length 
goal construct hash functions high level collision resistance maintaining short outputs short keys trade compression ratio number operations 
constructions 
analyze construction hardness amplification 
simple concatenation possibly folklore second uses error correcting codes suggested knudsen preneel 
analyze additional constructions reducing key size output length respectively 
amplification concatenation 
construction simple concatenation hash input independently chosen functions concatenate hash values 
formally family hash functions parameter define family independently chosen keys family analysis essentially classic hardness amplification way functions 
underlying intuition finding collisions hard long finding amplifying collision resistance complexity theoretic treatment collisions hard 
initial maximal probability finding collisions maximal probability finding collisions new hash family means improvement level collision resistance exponential output length linear amplification codes 
second construction encode input error correcting code codeword length large alphabet 
hash encoded input independently chosen functions symbols codeword concatenate hash values 
order find collision construction find collisions underlying hash functions opposed functions previous construction 
construction previously analyzed idealized setting 
analysis relies idea finding collisions new hash function hard long finding collisions functions hard opposed finding collision just single function 
initial maximal probability finding collisions expect hard find collisions functions 
exploit code minimum distance codes may achieve rate 
consequently construction allows hash input longer factor compared construction invocations hash functions family 
compared amplifying domain size merkle damg ard transformation applying construction second construction offers factor improvement number hashing operations 
price pay improvement fixed levels collision resistance underlying target hash functions choice second construction constant multiplicative factor larger construction 
analysis yields hardness amplification way functions logarithmic factor improvement security reduction 
reducing key size 
demonstrate modify constructions key size increases additive logarithmic term price increasing output length constant multiplicative factor 
done choosing keys randomness efficient sampling expander graphs 
sampler require concatenation construction fairly standard randomness efficient samplers exploited similar manner coding theoretic construction requires modified analysis previous sampler 
reducing output length 
starting family hash functions output length parameter constructions yield family output length 
show may fact reduce output length 
generally show transform family output length output length negligible loss level collision resistance 
complexity computing function increases multiplicative factor construction useful logarithmic values 
limitations 
point limitations constructions try justify 
limitation guarantee resilience canetti adversaries size guarantee resilience new hash family adversaries smaller size 
similar limitation shared existing hardness amplification results way functions 
may expected constructions existing constructions hardness amplification way functions black box 
evidence limitation may inherent black box constructions chapter ex 
addition constructions increase complexity hashing output length 
explain blow parameters provide lower bounds number hashing operations output length establish matching lower bound multiplicative constants number hashing operations constructions 
bound holds black box constructions input keys underlying hash functions 
particular number hashing operations inverse dependency initial maximal probability finding collisions 
bound derived hardness amplification way functions 
assuming addition natural restrictions reduction proof security show output length new hash function 
constructions achieve output length log 
guarantees provided constructions may weak real practical significance unfortunately state art general constructions 
providing better guarantees remains fascinating open problem 
combiners 
results pertaining output length fourth construction lower bounds thereof build black box combiners collision resistance 
briefly recall notion results explain connection hardness amplification 
black box combiners collision resistance 
black box combiner collision resistance procedure functions output length computes single function property efficient transformation collision outputs collision guarantees finding collisions hard long finding collisions hard 
concatenating outputs input yields combiner output length 
boneh boyen showed trivial combiner essentially optimal giving log lower bound deterministic black box combiners 
black box combiners collision resistance arise naturally context 
hardness amplification construction may viewed choosing random applying trivial deterministic combiner 
addition deal families functions single functions sense model consider randomized combiners single functions 
incorporate randomness combiner key new hash family 
natural questions arise beat bound randomized combiners 
alternatively bound improved removing additive logarithmic factor 
amplifying collision resistance complexity theoretic treatment answer questions negatively 
extend lower bound derive log lower bound output length randomized black box combiners 
lower bound output length hardness amplification builds lower bound 
construct randomized black box combiner output length log 
result interesting non trivial combiner beats concatenation 
furthermore combiner underlies fourth construction mentioned reduces output length hash functions 
putting results deduce optimal randomized black box combiner output length log 
combiners families hash functions 
far discussed relationship combiners single functions hardness amplification function families 
addition may directly study combiners families functions families hash functions output length construct single family hash functions collision resistant long families collision resistant 
note possible construct combiner having output length log randomized black box combiner 
concurrent fischlin lehmann studies similar problem albeit idealized model admits generic attacks hash functions 
extensions 
positive results hardness amplification collision resistance may extended variants collision resistance 
details extensions deferred final version 
resistance correlations 
noted previous collision resistance regarded special case resistance finding correlations ary relation say family functions resistant hard random find xk xk holds 
terminology collision resistance simply req resistance req iff 
amplified relations 
collision resistance derived imply resistance relations 
interesting questions 
small step direction consider amplification near collision relation iff hamming distance small see sec 
observe encoding hash value error correcting code may transform standard collision resistant hash family near collision resistant hash family 
conversely near collision resistant hash family construct standard collision resistant hash family shorter output decoding hash value nearest codeword covering code 
yields amplification theorem resistance near collisions corollary amplification theorems collision resistance 
target collision resistance 
results extend related notion target collision resistance universal way hash functions 
may constructions collision resistance replace merkle damg ard domain expansion shoup analysis goes 
stress extension taken granted canetti techniques collision resistance extend readily target collision resistance domain expansion example 
discussion 
discuss additional aspects analysis 
address collision resistance desired properties cryptographic hash functions 
fact address properties resistance finding additional collisions collision 
concentrating plain collision resistance allows clearer understanding 
fact constructing hash functions achieving specific property challenging evidenced attacks md sha 
point worth highlighting analysis viewed demonstration benefits having families hash functions assurance finding collisions function family render functions family completely insecure 
may suggest methodology constructing practical collision resistant functions design functions keyed functions key intimately incorporated evaluation function 
give hope finding collisions value key help finding collisions values key 
apply generic amplification mechanism ones studied guarantee strong collision resistance significant fraction keys result weak functions 
stress order value key incorporated computation function strong way 
fact exemplified negative md sha line functions functions modeled families functions keyed iv actual constructions incorporate iv computation strong way 
attacks functions equally values iv 
similarly suspect related methods creating hash function family fixed hash function treating portion input key 
stress asymptotic notation results readable provide concrete bounds parameters achieved 
provide uniform reductions proofs security positive results stated nonuniform adversaries easy derive analogue results uniform adversaries 
organization 
reviewing quantitative definitions collision resistance section 
constructions hardness amplification key size reduction output length reduction section lower bounds section 
randomized black box combiners recurring tool define section construction section matching lower bound section 
preliminaries quantitative definitions collision resistance family hash functions collection polynomial time computable functions hn key security amplifying collision resistance complexity theoretic treatment parameter satisfying 
refer key input length output length key size hash function 
denote function hn associated key key call pair satisfying collision 
say hn collision resistant hash function nonuniform size pr key outputs collision quantity refer level collision resistance 
notational simplicity omit context clear key 
refer asymptotic notions 
way functions want consider entire class nonuniform polynomial time adversaries provide uniform reductions proofs security 
formally say strong polynomial sufficiently large 
similarly say weak exists constant polynomial sufficiently large nc 
standard cryptographic applications hash functions require strong strength qualified refer strong 
public coin vs secret coin hash functions 
noted distinction needs public coin secret coin hash functions 
public coin hash function key corresponds uniformly generated random string key generation algorithm computes identity function 
secret coin hash function distribution key may distribution 
simplicity clarity definition exposition refer public coin hash functions 
easy see constructions constructions apart reduction key size randomness efficient sampling extend secret coin hash functions 
black box combiners collision resistance generalize notion black box combiners allow randomized constructions 
definition 
say randomized black box combiner collision resistance deterministic poly time oracle tms exists negligible function construction 
ch computes function hr reduction 
probability collision hr outputs pairs xt xt values xi xi collision hi canetti intuitively guarantee hard find collisions functions overwhelming probability hard find collisions hr 
definition generalizes provide additional randomness interpreted key 
specifically previous definitions computes single function definition computes family functions hr 
construction deterministic lower bound previous extends randomized reductions constructions goal hardness amplification deduce existence strong weak 
fix security parameter parameters new different starting weuse key denote parameters start key denote parameters construct 
typical values parameters poly neg 
outlined basic constructions hardness amplification sections show reduce key size section output length section 
summary parameters fig 
domain expansion 
compensate loss compression ratio constructions applying merkle damg ard domain expansion noting domain expansion collision resistance preserves hardness parameter 
proposition 
fix security parameter suppose exists hn key computable time construction yields key parameters key key hash calls security reduction amplification concatenation description analysis basic concatenation construction 
analysis provide similar hardness amplification way functions direct product 
presentations somewhat simpler 
small modification analysis facilitates analysis construction discussed section 
construction basic 
pick ln independent keys 
input output input hash functions keys ensure collision key collision underlying hash function keys 
amplifying collision resistance complexity theoretic treatment proposition construction 
fix security parameter suppose exists hn key construction yields key parameters hash calls log security reduction log key key log log log proof 
suppose finds collisions probability consider algorithm finding collisions hn input 
chooses random random sets 

runs obtain outputs 
analyze success probability keys density intuitively represents set keys hard find collision 
pr outputs collision lies hand pr outputs collision pr outputs collision pr pr outputs collision max pr outputs collision implies set density max pr outputs collision pr pr outputs collision running total log log log times find collisions hn fraction keys probability means find collisions hn random key probability 
canetti amplification codes note basic construction loses factor compression ratio repeat input keys 
suggested 
encode input error correcting code obtain symbols hash blocks independently chosen hash functions output concatenation 
note adversary may receiving keys produce collisions codewords disagree easy keys 
analysis go argue fraction keys just key hard 
pick code relative distance guaranteed fraction positions codewords disagree corresponding keys hard 
construction coding theoretic 
pick ln independent keys 
error correcting code minimum relative distance reed solomon code 
input output 
proposition construction 
fix security parameter suppose exists hn key construction yields key parameters log hash calls log security reduction log log key key log proof 
suppose finds collisions probability consider algorithm finding collisions hn input 
chooses random random sets 

runs obtain outputs analyze success probability keys density chernoff bound multiplicative variant pr outputs collision fraction lies fraction wehave occurs fraction fraction 
conditioned event occurs pr outputs collision hand amplifying collision resistance complexity theoretic treatment pr outputs collision pr pr outputs collision max pr outputs collision implies set density max pr outputs collision pr pr outputs collision running total log times find collisions hn probability 
reducing key size theoretical point view useful hash functions short descriptions short keys 
short keys may interest practical point view common application collision resistant hash functions digital signatures key standardized distributed 
starting bit key transformations yield key longer 
fortunately inherent cause blow may reduce key size constructions randomness efficient sampling want sample keys key bits randomness key 
accomplish randomness efficient hitter appendix slightly different analysis showing parameters interested construction satisfies stronger sampler property 
weaker hitter guarantee sufficient reduce key size construction stronger sampler property necessary construction 
application require hitter satisfy certain property previously 
security reduction generate challenges adversary breaking key stress specific concrete parameters may different choices hitters samplers ease implementation optimality specific parameters 
lemma 
exists constant efficient randomized procedure key properties sampler subset key density probability strings output lie complexity randomness complexity key log sample complexity log 
canetti exists efficient algorithm input outputs uniformly random element set 
proof sketch 
construction proceeds stages construct hitter generates samples key key random bits property subset key density probability sample lies may obtain hitter ramanujan graphs degree vertex set key pick random vertex samples indices neighbors 
construct sampler generates log samples key key random bits property subset key density probability samples lie may obtain sampler random walk length constant degree expander vertex set key 
compose sampler hitter follows consider random walk length expander vertices path random coins hitter 
run hitter times generate total samples total key random bits 
yields desired query randomness complexity 
sampler guarantee follows fairly readily 
fix density 
lets set random coins hitter sample lies sos density know probability random walk generate samples turn yields samples lie check components construction follows combined construction 
expander hitter means need compute vertex th neighbor labeled expander sampler need sample start vertex path th vertex path labeled properties readily satisfied standard explicit constructions constant degree expanders 
construction obtained construction replacing independent sampling keys randomness efficient sampling code slightly different parameters construction reduced key size 
run obtain keys key error correcting code minimum relative distance reed solomon code 
input output 
straight forward verify analogue proposition holds construction public coin essentially parameters key size reduced key log randomness complexity 
state main result hardness amplification collision resistance essentially restatement proposition independent sampling randomness efficient sampling amplifying collision resistance complexity theoretic treatment parameters construction construction construction construction input length log output length log hash calls log log log log key size key key log key log public coin key key log key log fig 

summary parameters constructions 
order compare constructions inputs length apply merkle damg ard transformation case offers log factor improvement number hashing operations 
key size second line refers achieved construction public coin hash functions 
theorem 
fix security parameter suppose exists hn key exists key parameters log hash calls log security reduction log log key key log public coin may reduce key key log 
reducing output length show possible reduce output size additive factor negligible loss probability finding collisions price exponential multiplicative increase complexity function similar decrease size adversaries tolerated 
imposes limitation log reasonable settings 
proposition 
suppose exists log 
exists poly log complexity new increases 
result follows randomized black box combiner theorem setting 
theorem 
randomized black box combiner achieving parameters log positive 
running times polynomial randomness complexity 
may fact combiner trivial combiner hardness amplification constructions 
optimize output length canetti hardness amplification constant multiplicative factors sense try cut additive terms 
overview combiner 
case suppose highly regular partition sets size property contains unique string prefix define bit suffix 
easy see collision yields collision arrive general construction randomness plays replace string relatively popular sense occurs fraction images identified evaluating random inputs 
bring randomness complexity choose inputs boolean sampler approximating mean additive error probability 
replace fixed partitioning random partitioning induced family wise independent functions log 
gives partition sets size 
overwhelming probability exists prefix set lexicographically string property 
construction analysis 
formally state construction simplicity construction independent samples ui defer randomness efficient version full version 
construction 
log family independent hash functions computable time poly 
achieved univariate polynomials degree 
input log randomness compute hr follows 
parse um wherem 

lexicographically string occurs fraction times prefix um 
compute order find string prefix choose lexicographically string output string exists 
output bit suffix 
may simply apply construction ht concatenate output clear analysis may randomness functions 
theorem follows readily establish technical claim 
claim 
probability um statements hold simultaneously amplifying collision resistance complexity theoretic treatment construction prefix wehave suppose collision hr conditions technical claim hold poly time compute hr hr 
implies collision proof claim 
chernoff bound bit prefix ifw occurs pw fraction outputs prefix probability ui occur pw fraction times prefix ui union bound prefixes see probability prefix satisfy pz assume rest proof case 
log log 
applying tail bound wise independence obtain pr union bound log wehave pr log tail bound wise independence union bound pr limitations presenting class constructions prove lower bounds definition 
say black box amplifier collision resistance pair deterministic oracle tms pair randomized oracle tms pairs tms run time 
addition key construction 
compute key poly follows key string obtain set ch hash 
reduction 
exists constant tm outputs collision probability subset key density exists pr coll outputs collision canetti note black box amplifier provide efficient reduction converts adversary finds collisions probability adversary finds collisions probability 
definition guarantees fraction keys ra outputs collision probability running total log yields desired reduction 
reduction restrictive arbitrary black box reduction due structural restrictions place construction reduction result weaker 
construction 
allow constructions input key underlying family hash functions 
enforce constraint having key generation algorithm select members underlying family new key restrict actual computation query 
refer query complexity construction query functions having generate extraneous keys 
reduction 
restriction reduction states reduction requires single collision break noticeable probability 
true reductions constructions known reductions hardness amplification way functions reductions generate multiple challenges adversary adversary successfully answers challenges reduction succeeds high probability 
lower bounds query complexity construction output length theorem 
suppose black box amplifier collision resistance log log log log lower bound follows closely lower bound arguing compute randomness efficient hitting sampler omitted due lack space 
obtain lower bound observation connection black box hardness amplification randomized black box combiners 
intuitively comprise functions hard find collisions just 
case black box amplifier acts randomized black box combiner 
derive lower bound probabilistic argument 
note probabilistic argument sufficient obtain lower bounds deterministic black box combiners simplifying lower bounds eliminating additional randomization argument 
proof 
set power interval 
functions ft identify key ft 
consider procedure finding collisions ft oracle access functions amplifying collision resistance complexity theoretic treatment key random sample random output ft coll 
note ft function maps standard lower bound collision probability simple application cauchy schwartz pr pr collision consider procedure outputs collisions repeatedly choosing random finds collision 
choice subset key density fori reduction guarantees coll outputs collision fi fact statement true restrict output collisions lying subset key density 
probabilistic argument implies subset key density exists pr coll outputs collision call 
fraction 
union bound exists fraction ft outputs collisions ft pr note preceding inequality holds functions ft holds random functions ft hand birthday paradox independence functions know probability random functions outputs collisions ft poly query complexity comparing bounds solving yields desired bound 
argument yields lower bound output length combiners 
idea find collisions random functions ft observe probability bounded establishes optimality construction theorem constant factors log term theorem 
suppose randomized black box combiner 
upper bound query complexity ct logq acknowledgments 
krzysztof helpful discussions combiners 
canetti 
anderson classification hash functions 
cryptography coding 
boneh boyen impossibility efficiently combining collision resistant hash functions 
dwork 
ed 
crypto 
lncs vol 
springer heidelberg 
dodis merkle damg ard revisited construct hash function 
dwork 
ed 
crypto 
lncs vol 
springer heidelberg 
damg ard design principle hash functions 
brassard 
ed 
crypto 
lncs vol 
springer heidelberg 
de santis di randomness optimal characterization np proof systems 

eds 
random 
lncs vol 
springer heidelberg 
cryptanalysis md 
fast software encryption 
fischlin lehmann security amplifying combiners collision resistant hash functions 
proceedings 
gibson discrete logarithm hash function collision free way 
iee proceedings 
goldreich sample samplers computational perspective sampling 
eccc tr 
goldreich candidate way functions expander graphs 
cryptology eprint archive report 
goldreich foundations cryptography basic tools 
cambridge university press cambridge 
herzberg tolerant combiners resilient cryptographic design 
cryptology eprint archive report 
hsiao finding collisions public road secure hash functions need secret coins 
franklin 
ed 
crypto 
lncs vol 
springer heidelberg 
knudsen preneel construction secure fast hash functions nonbinary error correcting codes 
ieee transactions information theory 
lin trevisan wee hardness amplification way functions 
kilian 
ed 
tcc 
lncs vol 
springer heidelberg 
menezes van oorschot vanstone handbook applied cryptography 
crc press boca raton usa 
merkle way hash functions des 
brassard 
ed 
crypto 
lncs vol 
springer heidelberg 
naor yung universal way hash functions cryptographic applications 
proc 
th stoc 
non trivial black box combiners collision resistant hash functions don exist 
proc 
eurocrypt cryptology eprint archive report 
preneel hash functions state art 
conference hash functions 
rogaway formalizing human ignorance collision resistant hashing keys 
nguyen 
ed 

lncs vol 
springer heidelberg 
schmidt siegel srinivasan chernoff hoeffding bounds applications limited independence 
siam discrete math amplifying collision resistance complexity theoretic treatment 
proving strong direct product theorems 
computational complexity 
shoup composition theorem universal way hash functions 
preneel 
ed 
eurocrypt 
lncs vol 
springer heidelberg 
simon finding collisions way street secure hash functions general assumptions 
nyberg 
ed 
eurocrypt 
lncs vol 
springer heidelberg 
wang yin yu finding collisions full sha 
shoup 
ed 
crypto 
lncs vol 
springer heidelberg 
yao theory applications trapdoor functions 
proc 
rd focs 
