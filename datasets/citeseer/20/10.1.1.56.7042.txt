ground reducibility automata disequality constraints hubert comon laboratoire de recherche en informatique 
cnrs ura univ paris sud bat 
orsay cedex 
france automata constraints give algorithm decision ground reducibility term rewriting system complexity algorithm doubly exponential maximum depths cardinal ground reducibility term term rewriting system property ground instances instances variables reducible property known quasi reducibility inductive reducibility authors proving properties algebraic specifications sufficient completeness inductive theorem proving see 
ground reducibility shown decidable arbitrary rewrite system plaisted 
decidability proofs kapur narendran zhang kounalis 
proofs test set method show bound instances obtained substituting ground terms depth smaller reducible ground reducible 
kapur give explicit bound times exponential depth aforementioned decidability proofs rely pumping property ground term irreducible large smaller irreducible ground term 
suggests formulation problem formal language theory 
authors thesis introducing ground normal form grammars 
satisfactory emptiness test grammars multiply exponential worst case contrast methods bound needs reached term ground reducible 
dauchet come elegant proof show order theory decidable 
precisely consider unary predicates hold instance subterm technique la buchi decidability order theories see surveys techniques 
define tree automata tuples test equalities disequalities subterms 
class automata desired closure properties 
decidability theory reduces emptiness decision corresponding language shown pumping property 
turns ground reducibility expressible order theory left hand sides rewrite system ground reducible iff formula holds 

give decidability proof ground reducibility 
consider subclass automata large express language irreducible ground instances term 
deciding ground reducibility amounts decide emptiness class tree automata 
emptiness decision proof differs ones 
complexity ground reducibility decision reduced double exponential depth cardinality rewrite system 
pumping properties stated follows automaton associated bound ground term recognized minimal founded ordering smaller depth 
emptiness decision done ff ff 
suffices check recognizability ground terms depth smaller 
proofs standard finite bottom tree automata class founded ordering transitive closure pumping reduction consists replacing subterm proper subterms 
generalize notion pumping considering combinations inverse different subterms 
new transformation allows derive smaller bound jaj ln jaj size maximal size constraints 
show compute automaton ar class recognizes set irreducible ground instances automaton size jar ff max ar max theta card 
constructed time ff max 
altogether prove ground reducibility decided time ff ff max result optimal example rewrite system rn card smallest irreducible ground instance depth larger magnitude ar 
claim bound behaves practice ffl constraint corresponds left linear rewrite systems bound linear number states automaton 
known pumping property recognizable tree languages 
ffl disequality constraints performed brother positions bound polynomial number states rules maximal number disequality constraints performed automaton transition 
corresponds bound deterministic automata disequality constraints brothers defined 
organized follows section give basic definitions tree automata constraints 
section comes main result simply exponential bound emptiness decision class constraints automata 
sketch proof explain trick allows reduce complexity section give construction ar ground reducibility test complexity derived 
section discuss details complexity issues relationship works 
notations definitions concerning rewrite systems mainly definitions 
recall position term string natural numbers empty string delta denotes concatenation strings pref prefix ordering strings note pref pref jpj length position string jj 
relation pairs positions defined delta os set positions term symbol position 
depth term maximal length equality constraints show proof details space limitations 
reader interested get full version anonymous ftp lri lri fr directory lri articles comon file pumping dvi positions os 
depth rewriting system maximal depth left members 
os subterm position denoted tj term obtained replacing tj denoted alphabet function symbols arity fixed 
assumed contain symbol arity 
subset constant symbols 
non ground term may contain variable symbols set start definition constrained bottom tree automata 
definition ca constrained automaton ca short consists tuple ffl finite set state symbols 
ffl set final states 
ffl ground constrained rewrite system rule form gamma 
trivial constraint boolean combination negation unary predicates definition constraints resp 
os resp 
os tj tj resp 
tj tj 
note subclass ca constraints rules class standard bottom tree automata 
target rule gamma 
state symbol ca rule gamma 
position tj tj run ca ground term sequence reductions normal forms write run ground term successful final second case say recognized definition language recognized denoted set ground terms recognized ca deterministic run ground term 
completely defined runs successful 
successful run represented labeled tree set positions labels rules position os labeled ae reduction ae applied position left linear rewriting system linear term standard bottom tree automaton ar fulfills properties announced 
longer true non left linear systems 
consider example fx ground term automaton ar recognizing irreducible ground instances check ar check 
known standard finite tree automata able perform tests 
constrained automata 
example consider mg constant unary ternary 
fq qg fqg 
automaton defined set constrained rules ae ae ae gamma gamma gamma gamma gamma gamma gamma gamma gamma 
ae ae ae gamma gamma gamma gamma gamma gamma gamma gamma gamma 
ae ae gamma gamma gamma gamma gamma gamma gamma gamma gamma 
ae gamma gamma gamma gamma gamma gamma gamma gamma gamma 
non deterministic automaton recognizes set ground terms reducible rewrite system left hand sides fs instance term recognized run ae ae ae ae ae ae ae ae 
run fits definition example targets respectively ae tj tj tj tj tj contrary recognized constraint ae satisfied 
pumping properties subclasses ca subclass standard bottom tree automata closed complete specification 
corresponding class languages closed boolean operation emptiness problem automaton empty 
decidable 
see details 
class langage corresponding ca closed boolean operations 
emptiness longer decidable equality tests see undecidability proof 
impose additional restrictions automata 
show restrictions emptiness decidable class general expressing ground reducibility problem 
investigate section automata involve equality constraints section automata allowing furthermore restricted kind equality constraints 
stated looking minimal terms recognized automaton 
notion minimality subterm relation 
ordering ground terms defined mul iff multiset lengths leaves positions os gg multiset extension ordering natural numbers 
notion minimality define general notion pumping key reducing complexity 
automata disequality constraints adc assume section ca equality constraints 
call kind automata adc short 
adc longer closed complement 
closure properties adc studied details appendix sake simplicity assume section disjunction constraints rules recall main goal want compute mul assume term final run idea try classical pumping lemma called lifting order avoid confusions 
definition lifting lifting pair os pref target states identical 
lifting position 
delta fi delta delta fi delta fi close equality obviously jqj lifting os term sj term obtained lifting 
clear sj mul necessary final run constraints rules applied longer satisfied 
illustrate problem example example fq qg fqg 
rules ae ae ae gamma gamma 
consider term run ae ae ae ae ae ae 
run sj sj lifting delta subterms associated rules run results accepted automaton case say lifting creates equality subterms 
works ground reducibility distinguish kinds equalities created lifting see figures ffl equalities disturb run automaton ffl close equalities falsify disequality test close lifting position formally means position fi os strings fi pref pref fi delta delta pref fi delta rule fi checks disequality sj fi delta sj delta sj fi delta sj delta sj fi delta situation depicted 
instance consider example seen lifting delta creates equality subterms positions prevents applying rule ae root 
root close case say lifting creates close equality root distinction formulated way works believe underlying method 
explain precise meaning close fi fi delta fi delta remote equality ffl remote equalities falsify remote disequality test 
formally fi os fi delta pref rule fi checks disequality sj fi delta sj fi deltafi sj fi delta sj fi delta situation depicted 
instance 
lifting creates remote equality root 
lifting create close remote equality resulting term belongs 
goal find sufficiently lifting positions path able choose requirements 
close equalities difficult see deal close equalities 
close means equality created lifting falsifying constraint automaton involves subterm close lifting position distance depends automaton 
bound maximal length position involved constraint maximal number close equalities created fixed lifting depends illustrate situation significant example 
example assume ternary constrained rule ae delta delta gamma gamma gamma gamma gamma gamma gamma 
automaton consider term see run assigning ae positions rule target target ae positions 

lifting creates close equality lifting create equality delta delta 
liftings create equality 
assume example equality delta created omega omega omega omega omega omega omega omega omega omega omega omega omega omega close equalities created liftings example times 
extract subsequence liftings create close equality corresponding equality delta 
know automaton accepts close equality created liftings 
extract sequence lifting create close equality hand hand 
implies lemma shows situation described example worse 
characteristics independent maximal number conjunctions constrained rule maximal length position predicate constraint rule 
suppose constraint 
number pairs paths ffi ffi cross position fi ground term run constraint 
means definition crossing ground term run fi os 
ffi ffi pair strings natural numbers 
ffi ffi crosses fi exist strings fi ffi fi fi delta ffi disequation ffi delta ffi ffi constraint fi ffi pref ffi depicted 
definition motivated expressing maximal number close equalities created lifting 
fact definition close equalities pair fi crosses lifting position definition course finite jffi jffi bounded fi fi fi delta ffi fi delta ffi delta ffi fi delta ffi ffi ffi crosses fi 
lemma close equalities path length larger equal theta 
theta theta theta jqj theta liftings create close equality pref pref pref pn pref jp gamma jp proof assume 
find positions pref pref pn pref targets identical jp gamma jp pigeon hole principle jqj theta theta 
theta theta process contradiction 
assume gamma positions lifting create close equality 
call hypothesis 
set pairs positions ffi ffi crossing ffl ffi os tj ffl tj tj maximal number elements 
far know definition 
show induction theta theta empty lifting pn create close equality means assume 
gamma positions lifting creates close equality 
pigeon hole principle means pair positions ffi ffi gammak je thetak indices tj tj tj je denominator allows fix pair ensures close equality created liftings involves subterm tj ffi keeping notations definition 
define sequence sets pn maximal number elements smaller equal gamma 
induction hypothesis applies gamma theta gamma 
theta gamma 
gammak gamma theta theta gamma 
theta theta gamma simplifies desired inequality theta theta theta hand contradicts inequality hold liftings create close equality 
remarks ffl note disequality test tests brother positions 
leads bound theta jqj case bound theta jqj theta case 
ffl bound lemma optimal sense automaton term path length bk jqj theta rule applied path lifting path creates close equality 
construction automaton term sketched example see section 
ffl course sum bounded basis exponential 
ffl slightly different proof may replace theta 
kd 
may smaller depending values remote equalities differ significantly methods treatment remote equalities 
contrast techniques considering remote equalities increases complexity linear factor 
show problem remote equalities 
example consider automaton states fq function symbols constant unary binary ternary rules ae ae ae ae gamma gamma 
ae gamma gamma gamma gamma gamma gamma 
consider term see 
run automaton ae ae ae ae ae ae 
lifting creates remote equality root position 
idea proceed close equalities consider longer path find sufficiently liftings 
create remote equality consideration 
consider term see 
liftings creates remote equality 
long path 
upper bound guarantees lifting create remote equality upper term remote equality may occur arbitrarily far liftings 
illustrate example 
consider term 
know liftings leftmost branch delta delta aa delta delta delta delta delta delta delta delta phi phi phi remote equality transformations example 
creates remote equality position second creates remote equality root 
algorithms consider length lifting positions order bound number possible remote equalities created 
leads complex algorithms 
explain trick avoids combinatorial explosion 
remote equality created lifting means branch tree tree lifting path 
idea branch 
example lifting creates remote equality delta delta 
means may put positions delta delta different terms obtained liftings 
unfortunately possibilities create equalities 
means choosing delta delta replace positions possibly identical subterms obtained operations twice 
get recognized term smaller mul suggests inductively define new reductions generalize liftings definition transformation transformation term constructed ways ffl lifting jp gamma jpj tj ffl hand incomparable pref positions fl fl os gamma jfl jj target fl independant hand transformations sj fl fl delta delta delta fl example back example terms transformations see 
intuitively transformation obtained copying sj fl positions fl fl apply liftings transformations copies 
inductive definition associate transformation transformation fl delta delta delta fl corresponds fl delta delta delta fl definition close resp 
remote equalities created lifting carry non lifting transformations delta delta delta delta delta delta phi phi phi delta delta delta delta delta delta phi phi phi transformations example ffl close equalities falsify disequality tests close positions fl fl position fi os strings fi pref fl pref fi delta fl delta pref rule fi checks disequality means sj fi delta sj fi delta sj fi delta ffl remote equalities falsify remote disequality test fl formally fl fi os fi delta pref fl rule fi checks disequality means sj fi delta sj fi delta fi delta sj fi delta position fi disequality constraint falsified called head close remote equality 
goal inductively construct transformation create close remote equality 
construction step upward propagation lemma 
uses classification remote equalities created transformation parts os ffl remote equalities verify pref fi pref fi delta pref fl fl ffl remote equalities crossing fi pref pref fi delta pref fl ffl remote equalities fi delta pref 
pref fl situations illustrated figures 
lemma propagation assume kd maximal length path assume exists os pref pref distinct transformations sj transformation creates close equality transformation creates remote equality transformation creates remote equality crossing os mul position pref distinct transformations sj satisfying properties 
fi fi delta fi delta fl remote equality fi fi delta fi delta fl remote equality crossing fi fi delta fi delta fl remote equality propagation read follow transformations create problem find transformations create problem pref 
proof find transformation creates close equality transformation creates remote equality transformation creates remote equality crossing os mul transformations create remote equalities rea set heads remote equalities created transformations rea conclude 
choose maximal element rea respect prefix ordering pref pref 
constraint 
suppose modulo renaming pairs delta delta symmetry may assume delta pref created remote equality means delta pref positions pairwise incomparable prefix ordering 
assume instance pref delta delta delta delta delta delta delta delta delta fl fl fl definition fl proof lemma delta delta delta delta delta delta delta pref delta delta delta contradicts 
fl delta delta delta fl see 
positions fl positions delta delta pairwise incomparable 
term obtained replacing sj fl sj fl transformations sj fl mk fl ng uj transformation sj definition 
construction implies implies imply 
focus checking 
means create close equality remote equality remote equality crossing choose tightly transformations sj put positions fl fl order get 
sj fl fl ng definition pending 
assume accepted uj fi delta uj fi delta equality created transformation constraint checked fi 
cases depicted depending kind equality created relative positions equality transformation position fl pref fi pref fl pref fi delta fi delta fl 
close equality fi fi fi fi fi fi fi delta fi delta fi delta fi delta fi delta fi delta fi delta fi delta fi delta fi delta fi delta fi delta fl fl fl fl fl fl fl fl fl definition proof lemma pref fi pref fi delta pref fl fi delta fl 
remote equality fi pref pref fi delta pref fl fi delta fl 
remote equality crossing pref fi pref fl pref fi delta fi delta fl 
close equality pref fi pref fi delta pref fl fi delta fl 
remote equality fi pref pref fi delta pref fl fi delta fl 
remote equality crossing course gamma occurs equality created hold 
show extract induction ffl arbitrary ffl induction assume determined cases occurs arbitrary choice 
occurs arbitrary choice 
order choose count number transformations create equalities listed 
array list possible positions fi lead cases 
interval fi positions associate corresponding maximal number notations kind equality may created cases 
fi interval nb 
pos 
cases justification fi pref kd pref fi delta pref fi pref delta kd delta pref fi pref fl kd fl pref fi possibility array corresponds fixed kd forbidden leaves possibility choose kd 
hypotheses definition arbitrary inducing 
result conclude 
iterate operation root remote equality created 
base case induction lifting precisely right number kd liftings satisfies properties 
initial transformation proof lemma lemma initialisation assume os kd liftings pn create close equality satisfy pref pref pref pn pref os maximal length path jp gamma jp gamma 
exists pref transformations sj ffl transformation recognized smaller ae mul ffl satisfy hypotheses lemma 
idea proof simple close equalities liftings create close equalities 
order satisfy condition lemma need bit 
liftings create remote equality done positions perform liftings 
case combine lifting position number lifting proof 
proof see proof lemma rea set heads remote equalities created lifting head remote equality created lifting defined way transformations 
rea sj sj pn transformations sj 
strictly reduces length maximal path os prefix 
transformation smaller ae mul recognized pref maximal element rea prefix ordering fl fl fl defined proof lemma 
definition sj un sj pn transformations sj hypothesis follow lemma 
result proof lemma say exist ng transformations sj sj sj fl fl fl satisfy hypotheses lemma 
see hypothesis satisfy 
lemmas state main result theorem language recognized empty contains tree depth strictly smaller kd 
proof suppose language recognized empty contains terms depth greater kd 
consider 
lemma find position os kd liftings pn create close equality satisfy pref pref pref pn pref os maximal length path jp gamma jp apply lemma cases ffl case recognized transformations liftings smaller ae mul ffl case apply lemma root induction depth order find kd transformations recognized hypothesis transformations smaller ae mul cases choose transformation verifying ae mul recognized hypothesis greater kd 
repeating operations get infinite chain ae mul ae mul contradiction ordering ae mul founded announced remote equalities introduce significant overhead 
bound lemma enhanced way bound theorem enhanced accordingly 
automata equality constraints class adc longer sufficient catch automata ar generalize little bit order capture non linearities term want recognize ground instances 
consider small proper subclass order keep decision property bound magnitude theorem 
definition semi adc semi ac ac form fq fq ff cc gamma gamma gamma 
adc may call adc sub automaton rule gamma 
conjunction predicates form 
rule cc gamma gamma gamma 
distinct constraints identical resp 
identical resp 
class semi adc contains adc 
particular lemmas section class caution 
properties guaranty rule semi adc containing equality constraints applied root term succesful run automaton 
reducing state rule means computation occur left member production rules 
condition section 
study determinism semi adc property 
semi adc non deterministic adc sub automaton deterministic 
lemma shows kind non determinism increase complexity emptiness decision algorithm lemma determinism fq fq ff cc gamma gamma gamma 
semi adc deterministic 
ground term 
final run proof due fact final state remarks 
show emptiness decidable semi adc fortunately general purpose 
results section provided construct transformations recognized terms disturb rule involved computation containing equality constraints 
write new bound class 
depends characteristics semi adc say characteristics adc parts maximal number equality predicates constrained rule maximal length path involved equality predicate constrained rule equality constraint 
theorem pumping fq fq ff cc gamma gamma gamma 
semi adc deterministic 
language recognized empty contains tree depth strictly smaller max kd kd 
proof short note 
proceed contradiction theorem suppose contains terms depth strictly greater 
assume successful run os maximal depth path pref clear sj recognized maximum length path subterm length greater 
apply lemma lemma lemma necessary second case lemma 
get transformations sj recognized smaller sj ae mul going show construct term smaller recognized ensure preservation equality constraints 
precisely define transformations satisfy equality constraints 
relation defined os equality constraint checked case say equality positions 
smallest equivalence relation os contains 
cases ffl equality position prefix ffl position prefix pref ng equivalence class 
delta delta condition definition cases 
determinacy state targets delta independant positions delta pairwise incomparable 
transformations definition 
satisfy equality constraints 
choose create close remote equality 
proof lemma write created equalities jfi delta jfi delta count number possibility fi fi interval nb 
pos 
justification fi pref delta kd pref delta pref fi construction delta fi theta kd transformations may create equality 
hand definition remains transformation say ae mul 
hypothesis iterate transformation get infinite chain ae mul ae mul contradicts foundedness ae mul proof inspired concepts introduced 
idea simple apply results section subterms transformation subterms positions checked equal get term recognized 
handling disjunctions automaton term run automaton fi ae rule constraint conjunction disjunctions disequality satisfied disjunct 
automaton behaves ae replaced rule disjunction choosing carefully disequality tests kept 
means apply results sections 
formally semi adc disjunctions constraints semi adc kind disjunctions 
characteristics bounded characteristics results sections empty empty theorem contains term depth smaller 
decision ground reducibility section show emptiness decidability semi adc decision ground reducibility 
compute complexity resulting procedure 
construction ar assume section rewriting system alphabet term want check ground reducibility briefly describe construction semi adc ar recognizes expected language 
improvements lines applied practical issues 
case complexity worst case remain unchanged 
construction far efficient implemented 
omega gamma new constant represent hole term 
set terms omega ffl max ffl os uj omega jpj max 
words set terms truncated depth max pending branches replaced omega gamma cardinal bounded ff max ff theta jf maximal arity function symbol 
set reduced rule left hand side linear 
intuitively set terms reduced state set terms match irreducible linear part order precise definition term matches term obtained replacing occurrence omega term 
occurrences omega need replaced term 
construct set rules um gamma 
ffl um um match respectively ffl conjunction non linear left hand sides matched um disjunction distinct occurrences variable constraint construction lemma language accepted adc set irreducible ground terms 
proof irreducible ground term say show recognized induction structure constant left side rule rule ground terms 
induction hypothesis accepted successful runs respectively unique deterministic 
un respective targets 
term omega constructed way paths pm os jp jp gamma delta os ag maximal arity function symbol omega gamma omega gamma pm easily see un match respectively rule form um gamma 
constraint described satisfied irreducibility 
conclude recognized 
ground term recognized 
show 
induction number rules applied successful run 
rule constant ensures 
cases assume ae um gamma 
rule run 
accepted smaller number rules states final 
induction hypothesis 
reduction necessary takes place root 
implies left side matching 
linear construction constraints 
contradiction construction ar fq fq set constrained rules form um cc gamma gamma 
ffl um gamma 
ffl um matches omega term variables replaced omega gammat ffl conjunction constraints distinct occurrences non linear variable construction ar semi adc recognizes irreducible ground instances proving result give example construction example consider signature ff arities 
rewriting system left hand sides ff construct ar fq fq fq omega gamma omega gamma omega gamma omega omega gamma omega omega gamma target target target omega gamma omega gamma omega gamma omega gamma target omega gamma omega gamma omega gamma omega gamma omega gamma omega gamma omega gamma omega gamma omega gamma omega gamma gamma gamma 
omega gamma omega gamma target omega omega gamma omega omega gamma omega gamma omega gamma omega gamma omega gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega gamma omega gamma omega omega gamma omega omega gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega gamma omega gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega omega gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma delta delta delta delta delta delta delta delta omega gamma omega gamma omega gamma omega gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega gamma omega gamma omega omega gamma omega omega gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega gamma omega gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega omega gamma omega omega gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
omega omega gamma omega omega gamma delta delta 
proposition expresses ar gives bound characteristic constructed semi adc occ maximal number occurrences variable characteristics rewriting system addition ffl number non linear left hand sides ffl maximal depth occurrence non linear variable 
suppose variable linear 
proposition rewrite system term semi adc ar follows hypothesis theorem recognizes set irreducible ground instances ar effectively computed satisfies ffl jpj jp ff max ffl jqj ff max ffl ffl ffl theta gamma ffl theta ff ffl ffl occ proof lemma lemma adc characteristics gamma 
proof adc ground term successful run 
assume fi os crossed pair fi fi pref fi jfij gamma jfi easy verify min gammai pairs fi gamma fi ffi string ffi crossing fi maximal arity function symbol shows min gammai gamma gamma proof proposition construct ar fq fq instructions 
difficult tedious check satisfies conditions section deterministic 
show ar set irreducible ground instances assume irreducible ground instance recognized final run rule left member side identical left member say um cc gamma gamma 
notations 
ground instance recognized ar conversely recognized ar final run replace rule rule obtain run irreducible 
easy check applies instance show inequalities stated second part proposition ffl follow immediately construction 
ffl occ 
ffl theta jv ar theta ff ar set variables occurring term 
ffl theta gamma follows lemma 
ffl jqj bounded cardinal ff max ffl states un un match respectively depth conditions omega gamma function symbols jf symbols 
bounded ff theta jqj ff max complexity algorithm give complexity algorithm 
rough bound size input give tighter rough 
bound precise characteristics see discussions section 
clarity note max 
recall ff jf theta jf fg 
construction rough upper bounds get lemma computing ar proposition takes nd ff steps 
proof construction ar sequential complexity size automaton number characters write 
linearly bounded ffl number states jqj ff max times maximal size state ff max ffl number rules jpj jp ff max times maximal size state times maximal size constraint plus disequality equality predicates just kd theta theta ff theta 
note respectively max 
hypothesis ff 
proposition shown inequations gamma occ jqj ff occ ff size ar bounded ff ff ff ff nd ff ff ff nd ff nd ff ff ff ff ff nd ff pumping bound lemma ar constructed max kd kd 
ar nd ff nd 
course compute tighter bounds expression complex 
proof recall ar theta 
theta theta theta jqj theta inequality proof lemma max nh occ nd gamma nd max nd ff theta nd nd ff depth bound nd theta nd nd ff ff nd ff nd nd ff nd nd ff nd ff ff nd ff nd nd ff nd nd ff nd gives announced bound 
ground reducibility decision put results theorem complexity 
arbitrary rewrite system term computing irreducible instance verifying done time ff nd ff nd 
deciding ground reducibility done time bounded general case 
proof worst case looking ground instance smaller ar recognized ar done time ff thetab ar ar non deterministic lemma 
remarks ffl double exponential due fact theorem gives bound depth minimal term language 
exponentially terms depth bounded ffl conversely note bound refers depth size exponentially larger 
bound smaller 
ffl complexity decision ground reducibility magnitude emptiness decision class adc magnitude bound close equalities lemma 
remarks section bound lemma optimal sense 
optimality discussed section discussion related works 
ffl generalization order sorted rewrite system straightforward corresponds constrain variables rewrite system belong recognizable tree language 
hand recognizable tree languages adc class closed intersection 
complexity issues comparison related works order evaluate algorithm idea optimality distinguish problems problem decide ground reducible problem decide ground reducible case negative answer explicitely give irreducible ground instance kapur gave lower bounds problems problem solved ln time linear 
problem solved ln time linear 
problems size 
imposed restrictions linearity concerning upper bounds known refer problem solved time ln linear rewrite systems 
problem solved general case 
consider problem problem sub problem 
arbitrary rewrite system known method problem solve problem shown theorem problem solved time nd general case maximum depths cardinal course better bounds completely meets lower bound ln 
emphasized depth size 
obvious relation summarize result results give inequalities complexity problem general case max ln max ln nd result shows particular ln rewrite system 
anyway chapter describes construction linear rewrite system size smallest irreducible ground term depth ln size ln believe possible modify construction get example showing algorithm optimal problem 
include construction improvement tiny going ln nd construction quite involved 
coming back problem restrict attention linear rewrite system linear automaton construct section classical bottom tree automaton decided linear time size automaton 
shows case linear rewrite system linear problem solved time better bound meet lower bound problem 
open precise complexity problem general case inequalities ln nd lower bound assumes linearity rewrite system term exact complexity problem doubly nexptime 
tison 
automata equality tests 
technical report laboratoire informatique de lille lille france feb 
tison 
equality disequality constraints brother terms tree automata 
finkel editor proc 
th symp 
theoretical aspects computer science paris 
springer verlag 

computing ground inductively complete positions 
universitaet tubingen oct 
possible exception cleaning approach described 
complexity analysis available 

comon 
dauchet 
pumping cleaning symbolic constraints solving 
proc 
int 
conference algorithms languages programming jerusalem july 
appear 


dauchet 
properties automata constraints 
kirchner editor proc 
th 
int 
conf 
rewriting techniques applications lecture notes computer science vol 
montreal canada 
springerverlag 
comon 
unification th eorie applications 
th ese de doctorat institut national polytechnique de grenoble france 
dershowitz 
jouannaud 
notations rewriting 
eatcs bulletin 

tree automata 
budapest 

jouannaud kounalis 
automatic proofs induction theories constructors 
information computation july 
kapur narendran rosenkrantz zhang 
sufficient completeness ground reducibility complexity 
acta inf 
kapur narendran zhang 
sufficient completeness related properties term rewriting systems 
acta inf 
kounalis 
completeness data type specifications 
proc 
linz lncs pages 
springer verlag apr 
kounalis 
testing ground reducibility term rewriting systems 
theoretical comput 
sci 
nipkow weikum 
decidability result sufficient completeness axiomatically specified data types 
proc 
th gi conf 
springer verlag 
plaisted 
semantic confluence tests completion methods 
information control 
rabin 
decidable theories 
barwise editor handbook mathematical logic pages 
north holland 
thomas 
automata infinite objects 
van leeuwen editor handbook theoretical computer science pages 
elsevier 
properties adc class investigate closure non closure properties class adc 
proposition class adc closed intersection union 
proof classical bottom tree automata 
proposition class adc closed complete specification 
means language recognized adc possible find completely specified automaton accepting language 
proof basically language ground terms considering adc recognizes construct new set rules way ffl choose new state ffl arity fq left member rule add unconstrained rule ffl constrained rule gamma 
add easy verify non deterministic completely specified adc fq recognizes proposition class adc closed determinization 
know completely specified deterministic adc recognized build adc recognize complement set grounds terms 
sufficient exchange final non final states 
method classically order prove closure complement 
shown property show adc closed complement property deduce property starting deterministic adc may loose construction proposition 
property directly proof ff ag constant unary binary 
consider nondeterministic adc states fq fq set rules ff gamma gamma 
qg language recognized clearly ff fh ff 
suppose deterministic adc language 
denote fa set rules fh gamma 
ff gamma 
ff gamma 
set rules root left hand side 
denote th left comb term course uniquely determined run finiteness set rules fr gg monotonic sequence integers independent gamma gamma 
rule states left hand deterministic 
constrained consider disjunction member conjunction disjunction fix da da maximal size position constraint rule exists pk qk necessary jp jq jjp gamma jq jj da satisfies pk qk recognized determinacy know unique rule find position run term know target final state 
determinacy 
contradiction form term belongs language recognized proposition class adc closed complement 
proof ff bg respective arities language ff fa bg clearly language recognized adc set rules ff gamma gamma 
final state 
adc 
suppose complement ff adc 
adc recognizes 
note th left comb 
finite set rules successful run target final state 
course gj jp set rules get monotonic sequence sets independent fix choose da 
rule gamma 
constrained disjunction member conjunction disjunction exists pk qk see satisfies pk qk satisfies generally constraints rule jr successful runs image accepted leads contradiction 
fixpoint properties need equality predicate constraint rules recognize complement 
