non monotonic learning michael bain stephen muggleton turing institute north hanover st glasgow ad uk 
addresses methods specialising order theories context incremental learning systems 
demonstrate shortcomings existing order incremental learning systems regard specialisation mechanisms 
prove shortcomings fundamental classical logic 
particular minimal correcting specialisations obtainable framework 
propose adoption specialisation scheme existing non monotonic logic formalism 
approach overcomes problems arise incremental learning systems employ classical logic 
side effect formal proofs developed define function called deriv turns improvement existing explanation generalisation ebg algorithm 
prolog code description relationship deriv previous ebg algorithm described appendix 
motivation generalisation learning 
new experience require specialisation general beliefs 
example imagine believed birds fly 
write flies bird told emu bird fly specialise deal exception 
discuss various ways done 
assume incremental learning algorithm receives new examples time belief set revised example 
belief set generalised cover new example 
hand specialised contradicted new example 
machine learning related notions generalisation specialisation 
treatment topic specialisation context non incremental learning algorithms id aq induce version space algorithms 
investigate explored topic incremental specialisation 
logic notation similar chang lee clearly incremental learning algorithm described changes coverage beliefs non monotonically title 
section show developers logic machine learning algorithms date avoided non monotonic logic representations 
leads various problems 
section prove possible general preserve correct information incrementally specialising classical logic framework 
section demonstrate impasse easily avoided learning algorithms employ non monotonic knowledge representation 
muggleton buntine described algorithm called cigol learns unrestricted order horn clause theories basis unit clause examples time 
cigol described incremental sense description 
generalises positive examples specialise encounters negative examples contradict theory 
practice led difficulties 
reported generalising cigol managed performances humans propositional learning algorithms incrementally learning chess concept randomly selected examples :10.1.1.52.9566
having reached performance level cigol able produce performance specialise concept definition 
lay theoretical foundations incremental specialisation techniques describe implementation new version cigol 
generalisation specialisation niblett shown concept generality expressed framework logic 
formed formulae 
general say equivalently generalisation specialisation note formed formulae atomic formulae clauses conjunctions clauses 
previous incremental specialisation techniques shapiro describes incremental program debugging system pds recognises different types bug horn clause logic programs 
horn clause program ground unit goal intended interpretation set ground atoms said incomplete incorrect non terminating leads non terminating sld resolution proof purposes interested case pds finds incorrect 
general case pds finds incorrect respect searches clause covers removes resulting program note clause removal specialisation technique removing somewhat drastic method specialising logic program may incomplete respect goal previously covered bird example section superset eagle bird eagle bird emu flies bird bird eagle bird emu flies emu pds delete clause lies bird leaving bird eagle bird emu incomplete respect flies eagle pds generalise flies eagle bird eagle bird emu goal flies sparrow proved sparrow proved sparrow investigating drastic specialisation techniques clause removal 
wrobel describes program called modeler incrementally learns theories clausal logic formalism function symbols 
modeler knowledge revision module applies heuristic approach deal shapiro incorrectness problem 
modeler saves exceptions rule form support set 
having sufficiently large set exceptions modeler introduces new unary predicate describe exceptions 
clauses reformulated terms new predicate 
approach modeler similarities described section 
modeler pds non monotonic logic representation tends specialise counter examples 
bird example modeler produce flies bird concept concept eagle concept emu bird eagle bird emu flies sparrow proved sparrow proved sparrow approaches taken machine learning programs typical attempts date design algorithms produce incremental specialisation 
techniques applied cigol chess problem section performance drop drastically strong performance correct weak random performance correct 
reason pds modeler specialise 
avoid specialising section define investigate properties general specialisation order clausal theory promising approach demonstrate contain indefinitely large set clauses 
section show problem avoided non monotonic formalism 
non monotonic formalisms section briefly describe background 
approach leads new problems defining notions generality redundancy formalism 
non monotonic formalisms common approaches non monotonic reasoning closed world assumption cwa inference rule 
cwa ground atom logical consequence theory infer 
cwa implemented different ways 
adding additional completion axioms theory applying standard theorem proving techniques 
approach exemplified predicate completion circumscription 
second employing negation failure nf modified theorem prover infers attempt prove ground atom finitely fails 
second approach logic programming language prolog nf shown equivalent predicate completion 
general correct specialisation section define general correct specialisation incorrect clausal theory prove various theorems leading method constructing 
lengthy proof theorem section placed appendix improve readability 
course proving theorem define function called deriv turns improvement kedar mccarty explanation algorithm 
prolog code description relationship deriv algorithm described appendix define correctness order formulae weaker way shapiro definition section 
definitions theorems term intended interpretation mean model unknown formula 
implementation expect know truth ground atoms intended interpretation formula 
definition correctness formed order formula intended interpretation say correct respect simply correct model said incorrect 
implementation definition allow correction formula respect known facts 
lemma correct conjunction conjunction formed formulae intended interpretation correct respect correct respect proof 
follows trivially fact model model definition correct specialisation sets order clauses intended interpretation said correct respect definition sets order clauses intended interpretation incorrect respect correct specialisation set clauses said correct specialisation clause set correct specialisation definition assumes existence unique clausal theories 
proof theorem provides resolution method constructing guarantees existence 
stating theorem need prove intermediate results 
lemma subsumption refutation formed order formulae 

proof 
deduction theorem 
qed assume familiarity robinson results resolution theorem proving 
robinson defines set clauses follows gamma fc gamma resolvent addition define resolution closure set clauses follows 
definition resolution closure set clauses 
resolution closure 
resolution closure contain clauses entailed theorem describes relationship clauses entailed clauses resolution closure theorem clause entailment resolution set clauses non tautological clause 
exists substitution proof 
see appendix lemma theory entailment sets clauses clause proof 
represented conjunction 
lemma 
lemma 
true clause qed lemma theory entailment resolution sets clauses 
clause exists clause substitution proof 
follows trivially lemma theorem 
definition similar plotkin definition subsumption statement main theorem theorem 
definition subsumption say clause subsumes clause exists substitution similarly write theorem resolution construction set clauses intended interpretation fc correct wrt mg correct part fe clause correct wrt exists gamma incorrect wrt mg specialisation incorrect part 
proof 
definition correct specialisation clause set correct specialisation definition correct specialisation correct respect lemma correct respect construction clause correct respect theorem entails clause correct specialisation prove clause set assume exists correct specialisation applying lemma case clause exists clause say exists clause clause correct specialisation applying lemma clause clause gamma alternative contradicts assumption letting assume second alternative definition easily shown correct clause clause gamma clause incorrect respect correct wrt letting contradicts assumption completes proof 
qed theorem provide basis algorithm enumerate elements incorrect theory lead difficulties example shows 
example continue bird example section 
set clauses flies bird bird eagle bird emu true ground atoms intended interpretation superset eagle bird eagle bird emu flies emu true incorrect respect clause flies bird incorrect emu 
constructing sets theorem get bird eagle bird emu flies eagle eagle bird eagle flies bird bird eagle note clauses shown redundant entailed imagine true fly false fly clause flies bird element assume may contain predicate contain indefinitely large number predicates combination produce indefinitely large number additional clauses section show assuming existence additional predicates non monotonic representation solve problem specialisation incorrect theories 
closed world specialisation stated section logic programming language prolog uses negation failure 
classical logic ground literal provable theory prolog ground goal provable atom section represent clauses notation edinburgh prolog 
example clause written prolog 
note prolog clause 
states provable provable provable 
literal left called head clause set literals right called body clause 
prolog proofs carried sldnf resolution 
algorithm closed world specialisation technique 
closed world specialisation algorithm input set clauses ground atom incorrect clause resolved sldnf resolution proof substitution variables produced sldnf resolution proof body contains literal fb fv domain predicate symbol hd head bd body gamma fcg bd fb output example show algorithm operates bird example 
example set clauses bird bird eagle bird emu true ground atoms intended interpretation superset eagle bird eagle bird emu flies emu true incorrect respect clause flies bird incorrect substitution fx 
body contain literal 
fxg domain 

flies bird bird eagle bird emu emu methods section flies sparrow proved sparrow 
implementation prolog closed world specialisation algorithm completed 
version algorithm forms part cigol system 
far implementation tested works expected 
discussion stated section non monotonic logic explored topic non monotonic representations developed date applied machine learning 
practical experience gained cigol learning system necessary specialisation mechanism order produce monotonic performance increase :10.1.1.52.9566
shown minimal specialisations necessary achieve monotonic performance increase achieved classical logic representation section 
achieved nonmonotonic representation section 
reader note closed world specialisation technique described section produce specialisation defined section resultant theory entailed initial theory due new introduced predicate symbols 
hope able address issue noise closed world specialisation scheme 
clearly important hasty constructing new exception predicates dealing noisy data 

supported partly esprit project serc post graduate fellowship held stephen muggleton 
proof theorem appendix contains lengthy proof theorem section 
related result known subsumption theorem proved lee 
purposes proof various definitions theory resolution theorem proving 
define derivation expression de follows de non empty clause de expression delta de de derivation expressions literals clauses de de respectively 
resolvent derivation expression defined recursively follows 
resolvent de de de clause resolution de delta resolved resolvent de resolvent de complementary pair undefined dot delta operator represents binary resolution commutative nonassociative non distributive 
dotted derivation expressions extension notation introduced 
clearly element exists derivation expression clauses elements resolvent say derivation expression re refutation expression resolvent re 
follows definition refutation expression re dotted expression simply clause 
define partial recursive function deriv set unit clauses theta derivation expression 
derivation expression 
function transfers elements set unit clauses refutation expression clause root new derivation expression 
deriv de de de clause de deriv de de hfl delta fl deriv de de delta hfl fl deriv de delta de delta deriv de undefined note deriv de undefined de clause de re refutation expression set unit clauses sub expression deriv re undefined 
refutation expression derivation expression definition empty clause 
definition deriv noted recursion deriv de de element tautology 
clearly correspondence sub expressions result deriv re subset sub expressions re 
theorem clause entailment resolution set clauses non tautological clause 
exists substitution proof 
part trivial prove part constructively 

lemma unsatisfiable 
variables note write gamma deterministic rewrite due nature 
transformation refutation tree derivation tree deriv convention introduced resolution refutations derivations drawn binary trees 
correspondence derivation expressions derivation trees 
represents transformation refutation tree derivation tree deriv 
refutation tree derivation tree represent general cases 
diagonal ellipses 
merely indicate path formed number resolution steps 
capital letter prime subscript stands clause 
lower case letter prime subscript stands literal clause theory lower case greek letter prime subscript represents substitution 
note sub trees labelled represent trees maximum depth depth tree defined terms corresponding derivation expression follows depth de de clause max depth de depth de de delta note nodes derivation tree correspond nodes refutation tree 
purposes proof necessary show exists general unifier mgu resolution step derivation tree exists substitution prove induction exists substitution oe oe corresponding base case maximum depth sub trees involved derivation tree equal 
sub tree letting oe clearly oe substitution applied corresponding node refutation tree 
proves base case 
inductive hypothesis exists oe oe corresponding 
show exists oe oe corresponding inductive hypothesis know oe oe know refutation tree mgu call derivation tree mgu call inductive hypothesis unifier oe oe definition mgu mgu substitution oe oe oe oe oe oe oe oe inductive hypothesis 
oe share variables oe oe oe oe oe oe oe oe proves inductive step 
mgu resolution step derivation 
show follows ground literals 
complementary pair refutation tree mgu fl substitution ground substitution domain set variables fl ground fl fl follows proved oe oe doe skolem constants unbound conflict doe gamma gamma doe gamma letting oe gamma complete proof gives qed deriv explanation generalisation technique deriv function appendix turns entirely isomorphic ebg algorithm prolog ebg described 
main differences deriv prolog ebg follows 
firstly deriv acts general clauses prolog ebg restricted horn clauses 
secondly prolog ebg depends user defined criterion 
criterion necessary deriv 
thirdly ebg supposed find generalisation training example sufficient concept definition target concept satisfies criterion aware rigorous definition proofs concerning aims 
hand proved deriv refutation resolvent derivation expression returned deriv general clause subsumes entailed condition places useful bound complexity smaller subsumes bound exists size clause returned prolog ebg 
fact ran prolog ebg exponential function coded prolog peano arithmetic multiplication addition number literals returned clause exponentially related value exponent example 
indicate prolog ebg helping speed searches intractable domains game playing deriv 
coded version deriv called drv runs horn clause examples 
prolog code 
drv finds general clause entailed background theory theta subsumes bodies expected terminated atom true 
drv functor functor drv true 
drv goal units adapted prolog interpreter proves goal program clauses set unit clauses 
head body formed carrying resolution steps involving units 
atomic formula true passed placed 
drv true true 
drv drv drv 
drv clause copy term gs drv gs 
drv goal goal 
terms binds variables terms skolem constants range 
np np 
tm tm 
tms tms 
goal units unifies goal member units possible 
fails 


run suicide example 
background knowledge kill hate possess weapon 
hate depressed 
possess buy 
weapon gun 
goal drv kill john john depressed john buy john gun gun gun day tuesday true instantiated kill depressed buy gun true 
case drv produces result prolog ebg 
standard recursive definition list membership goal drv member true instantiates member true 
problem prolog ebg merely produces standard recursive clause member member useful generalisation 
chang lee 
symbolic logic mechanical theorem proving 
academic press london 
clocksin mellish 
programming prolog 
springer verlag berlin 
kedar mccarty 
explanation generalization resolution theorem proving 
langley editor proceedings fourth international workshop machine learning pages san mateo ca 
morgan kaufmann 
lee 
completeness theorem computer program finding theorems derivable axioms 
phd thesis university california berkeley 
lloyd 
foundations logic programming 
springer verlag berlin 
michalski larson 
selection representative training examples incremental generation vl hypotheses underlying methodology description programs aq 
computer science department univ illinois urbanachampaign 
michalski 
theory methodology inductive learning 
michalski mitchell editors machine learning artificial intelligence approach pages 
tioga palo alto ca 
mitchell 
generalisation search 
artificial intelligence 
genesereth nilsson 
logical foundations artificial intelligence 
morgan kaufmann san mateo ca 
muggleton bain hayes michie michie :10.1.1.52.9566
experimental comparison human machine learning formalisms 
proceedings sixth international workshop machine learning san mateo ca 
morgan kaufmann 
muggleton buntine 
machine invention order predicates inverting resolution 
proceedings fifth international conference machine learning pages 
kaufmann 
niblett 
study generalisation logic programs 
ewsl london 
pitman 
plotkin 
automatic methods inductive inference 
phd thesis edinburgh university august 
quinlan 
learning efficient classification procedures application chess games 
michalski mitchell editors machine learning artificial intelligence approach 
tioga palo alto ca 
robinson 
automatic deduction hyper resolution 
international computer mathematics 
robinson 
machine oriented logic resolution principle 
jacm january 
shapiro 
algorithmic program debugging 
mit press 
wrobel 
automatic representation adjustment observational discovery system 
ewsl pages london 
pitman 
