analysis arithmetic coding data compression paul howard jeffrey scott vitter brown university department computer science technical report 
cs revised version april technical report 
cs appears information processing management volume number november pages 
shortened version appears proceedings ieee computer society nasa data compression conference snowbird utah april pages 
analysis arithmetic coding data compression paul howard jeffrey scott vitter department computer science brown university providence arithmetic coding conjunction suitable probabilistic model provide nearly optimal data compression 
article analyze effect model particular implementation arithmetic coding code length obtained 
periodic scaling arithmetic coding implementations reduce time storage requirements introduces recency effect affect compression 
main contribution introducing concept weighted entropy characterize elegant way effect periodic scaling code length 
explain scaling increases code length files homogeneous distribution symbols characterize reduction code length due scaling files exhibiting locality 
give rigorous proof coding effects rounding scaled weights integer arithmetic encoding file negligible 
index terms data compression arithmetic coding analysis algorithms adaptive modeling 
similar version appears information processing management november 
shortened version appears proceedings ieee computer society nasa data compression conference snowbird utah april 
support provided part nasa graduate student researchers program ngt nsf presidential young investigators award matching funds ibm 
additional support provided universities space research association appointment 
support provided part national science foundation presidential young investigator award matching funds ibm nsf ccr army research office daal office naval research defense advanced research projects agency contract arpa order 
additional support provided universities space research association associate membership 
analyze amount compression possible arithmetic coding text compression conjunction various input models 
arithmetic coding technique statistical lossless encoding 
thought generalization huffman coding probabilities constrained integral powers code lengths need integers 
basic algorithm encoding arithmetic coding works follows 
current interval initialized 

symbol file steps subdivide current interval subintervals possible alphabet symbol 
size symbol subinterval proportional estimated probability symbol symbol file input model 
select subinterval corresponding symbol occurs file new current interval 

transmit bits distinguish final current interval possible final intervals 
length final subinterval clearly equal product probabilities individual symbols probability particular sequence symbols file 
final step uses exactly gamma lg bits distinguish file possible files 
detailed descriptions arithmetic coding see especially 
notation article length file bytes number symbols input alphabet number different alphabet symbols occur file number occurrences ith alphabet symbol file lg log delta delta delta gamma rising factorial function results typical file refer file 
code lengths expressed bits 
assume bit bytes 
modeling effects coder arithmetic coding system conjunction model produces probability information describing file sequence decisions decision point estimates probability possible choice 
coder uses set probabilities encode actual decision 
ensure model may information known encoder decoder 
restrictions model particular change file encoded 
subsection describe typical models context independent text compression 
length encoded file depends model 
models text compression involve estimating probability symbol weight symbol total weight symbols encode gamma lg bits exact arithmetic coding 
probability estimation done adaptively dynamically estimating probability symbol symbols precede semi adaptively preliminary pass input file gather statistics non adaptively fixed probabilities files 
non adaptive models interesting effectiveness depends probabilities happen match statistics file encoded bell cleary witten show match arbitrarily bad 
static decrementing semi adaptive codes 
semi adaptive codes conceptually simple useful real time operation required main drawback require knowledge file statistics prior encoding 
statistics collected pass normally static code probabilities encode file remain entire encoding 
possible obtain better compression decrementing code dynamically adjusting probabilities reflect statistics just part file coded 
assuming encoding uses exact arithmetic computational artifacts file statistics form static probabilistic model 
including cost transmitting model code length ss static semi adaptive code ss gamma lg lg gamma lg information content file 
dividing file length gives self entropy file forms basis claims arithmetic coding encodes asymptotically close entropy 
claims really mean arithmetic coding encode close entropy probabilistic model symbol probabilities modeling effects file computational effects discussed section insignificant 
know file exact statistics ahead time get improved compression decrementing code 
modify symbol weights dynamically decrementing symbol weight time encoded reflect symbol frequencies just part file encoded symbol best available estimates symbol probabilities 
sense misnomer call semi adaptive model model adapts second pass apply term symbol probability estimates primarily pass 
decrementing count idea appears analysis enumerative codes cleary witten 
resulting code length semi adaptive decrementing code sd gamma lg oe 
straightforward show input files code length decrementing code semi adaptive static code equality holding file consists repeated occurrences single letter 
contradict shannon theorem discusses best static code 
static semi adaptive codes widely conjunction huffman coding appropriate changing weights requires changing structure coding tree 
encoding model 
assume symbol distributions equally file length cost transmitting exact model statistics lm lg number possible distributions lg gamma gamma lg similar result appears 
typical file lm bits bytes 
assumption equally distributions text files practice reduce cost encoding model percent encoding counts suitable encoding integers fibonacci coding 
strictly speaking encode file length encoding model cost insignificant lg lg bits appropriate encoding integers 
adaptive codes 
adaptive codes continually changing model frequency symbol point file estimate probability point 
encode symbol arithmetic coding probability nonzero adaptive code way estimating probability symbol occurred time 
zero frequency problem discussed length 
large files small alphabets simple models solutions problem give roughly compression 
section adopt solution simply assigning initial weight alphabet symbols 
code length adaptive code la gamma lg oe combining equations noting gamma gamma show input files adaptive code initial weights gives code length semi adaptive decrementing code input model encoded assumption symbol distributions equally 
words la sd lm result rissanen 
cleary witten bell cleary witten similar result general setting showing approximate equality enumerative codes similar arithmetic codes adaptive codes 
intuitively reason equality adaptive code cost learning model avoided merely spread entire file 
organization article 
section contains main result precisely provably characterizes code length file dynamically coded periodic count scaling 
express code length terms weighted entropies model entropies implied model scaling times 
result shows advantage gained scaling locality effect excess code length incurred overhead scaling process 
example scaling negative effect alphabet symbols distributed homogeneously file result shows explicitly small amount scaling cause code length increase 
distribution alphabet symbols varies case files displaying locality result characterizes precisely benefits scaling code length 
section extend analysis higher order models partial string matching algorithm cleary witten 
years practical adjustments arithmetic coding allow integer rational floating point arithmetic transmit output bits real time 
section prove loss coding efficiency caused practical coding requirements negligible demonstrating rigorously empirical claims 
scaling scaling process periodically reduce weights symbols 
allows lower precision arithmetic expense making model approximate hurt compression distribution symbols file fairly homogeneous 
scaling introduces locality recency effect improves compression distribution symbols variable 
section give precise characterization effect scaling code length produced adaptive model 
express code length terms weighted entropies model 
weighted entropy shannon entropy computed probabilities weighted scaling process term weighted entropy notational convenience 
characterization explains scaling hurt help compression 
text files find occurrences words clustered part file 
take advantage locality assigning weight occurrences symbol dynamic model 
practice ways ffl periodically restarting model 
discards information effective cormack horspool find gives results growing large dynamic markov models 
ffl sliding window text 
requires excessive computational resources 
ffl recency rank coding 
computationally simple corresponds coarse model recency 
ffl exponential aging giving exponentially increasing weights successive symbols 
moderately difficult implement changing weight increments 
ffl periodic scaling 
simple implement fast effective operation amenable analysis 
computationally desirable property keeping symbol weights small 
effect scaling practical version exponential aging 
method analyze 
discussion scaling assume file divided blocks length model assumes block weights symbols multiplied scaling factor usually 
block update symbol weights adding occurrence 
example illustrate adaptive code scaling encoding symbol file 
example start counts set scaling threshold scale just symbol scaling file 
retain integer weights allowing weight fall round fractional weights obtained scaling higher integer 
symbol current interval start scaling final interval binary 
theoretical code length gamma lg bits 
actual code length bits final subinterval determined output 
section assume adaptive model exact rational arithmetic 
introduce additional notation analysis scaling ith alphabet symbol occurs block weight symbol start block number occurrences symbol block total weight start block size block total weight block scaling factor probability symbol start block probability symbol block number blocks resulting scaling minimum weight allowed symbol usually scale halving weights symbols typical implementation 
coding theorem scaling coding theorem scaling scaling model symbol counts multiplied scaling takes place 
scaling effect giving weight symbols 
denote number occurrences symbol block weight symbol blocks fw gamma fc gamma gamma weighted probability symbol block define weighted entropy terms weighted probabilities definition weighted entropy file mth block denoted hm entropy implied probability distribution time computed scaling model 
hm gammap lg equation 
find average code length symbol block related starting weighted entropy hm gamma weighted entropy hm particularly simple way gamma hm gamma gamma hm gamma hm gamma hm gamma hm gamma letting obtain hm gamma hm gamma multiply block length sum blocks obtain precise elegant characterization code length terms weighted entropies theorem code length file compressed arithmetic coding adaptive model scaling 
hm gamma gamma hm gamma lg min scaling lg entropy initial model hm weighted entropy implied scaling model probability distribution block min smallest number different symbols occur block 
theorem enables compute code length file coded periodic scaling 
calculation need know symbol counts scaling block equations definition 
occurrence entropy terms code length expected main contribution theorem show precise simple form entropy expressions take 
proof upper bound prove upper bound theorem showing code length block depends weights block counts symbols order symbols block 
show order symbol certain equalities inequalities hold compute value upper bound code length occurrences single symbol block 
sum symbols obtain worst case code length block blocks obtain code length file 
proof lower bound similar 
lemma enables choose convenient symbol order block 
lemma code length block depends weights block counts symbols order symbols block 
proof exact code length block gamma lg oe dependence order symbols 
symbol adaptive model ensures numerators set probabilities coding symbol block form sequence hs gamma block denominators form sequence ha gamma 
lemma prove obvious fact order symbols occurrences symbol roughly evenly distributed block 
order enable smoothly varying function estimate probabilities coding occurrences 
definition block length containing occurrences symbols respectively evenly distributed ed property symbol symbol occurs mth time position mb coding theorem scaling lemma distribution symbol counts order ed property 
proof number occurrences symbol required jth position ed order 
order exists find gamma integer 
holds ed order exists 
define number related sums integrals approximating code length occurrences symbol block 
symbol probability block divide block subblocks length pb pe give probability dynamic model give kth occurrence symbol occurred precisely kth subblock respectively 
pb qa pe qa expressions sl su lower upper bounds symbol code length occurrences early late possible subblocks 
sl gamma gamma lg pb su gamma gamma lg pe integrals approximate sl su gamma lg pb dx gamma lg pe dx define delta gamma considerable amount algebra get delta gamma gamma lg gamma gamma lg gamma gamma lg fc gamma fc lg fc expressions delta delta bound error approximating su sl respectively 
delta lg qa gamma lg pa gamma gamma delta lg pa gamma lg qa need simple lemma integral calculus 
scaling lemma monotone increasing gamma dx monotone decreasing gamma dx gamma proof increasing case obvious 
decreasing case integral unit interval greater value right interval dx 
obtain lemma adding gamma sides summing lemma code length occurrences single symbol block ed order delta delta proof show su delta delta delta su represents code length symbol occurrences symbol come late possible ed order su gamma gamma lg pe monotone increasing lemma su gamma gamma lg pe monotone decreasing lemma su lg pe gamma lg pe delta gamma su cases su delta definition delta delta relate entropy probability distributions 
write differentiate values evaluated different symbols define entropies associated probability distributions hr hq respectively gamma lg gamma lg lemma lh gammaf gamma gammaf lh 
proof appropriate substitutions gamma gammar lg gamma gamma gammaq lg gamma gamma coding theorem scaling sum probability distributions 
lemma follows definition delta 
bound block error 
lemma compressed length block gamma gamma gamma lg proof lemmas lh delta delta 
scaling factor implies asymptotics condition give delta delta gamma gamma lg gamma sum delta delta maximized symbols possible large small sum largest possible value exceed value symbols case delta delta lg km km 
obtain result setting summing symbols 
proof upper bound theorem follows lemma summing blocks noting 
neglecting special effects longer block shorter block 
cancellation block 
proof lower bound proof lower bound theorem similar upper bound 
proof lower bound append prime label definition lemma show correspondence definition lemmas proof upper bound 
definition block length containing occurrences symbols respectively reverse ed property symbol symbol occurs mth time position gamma lemma distribution symbol counts order reverse ed property 
proof lemma order ed property 
order reversed reverse ed property 
scaling lemma monotone decreasing gamma dx monotone increasing gamma dx gamma proof similar lemma 
lemma code length occurrences single symbol block reverse ed order greater gamma delta proof show sl gamma delta represents code length symbol occurrences symbol come early possible reverse ed order sl gamma lg pb monotone decreasing lemma sl gamma lg pb monotone increasing lemma sl lg pb gamma lg pb gamma delta sl cases sl gamma delta lemma compressed length block gamma gamma gamma gamma proof lemmas lh gamma delta 
asymptotics give delta gamma maximum value sum proof lower bound theorem follows lemma summing blocks noting non scaling corollary letting lemmas obtain code length scaling corollary scale code length lns satisfies th final final gamma gamma lns th final final gamma lg get important insights contrasting upper bounds corollary theorem 
scaling bring shorter encoding tracking block entropies matching single entropy entire file forgo scaling overhead proportional lg scaling worst homogeneously distributed file overhead increase code length lg bits input symbol bit symbol typical file 
conclude benefits scaling usually outweigh minor inefficiencies introduces 
application higher order models application higher order models extend results higher order models 
cleary witten practical adaptive method called prediction partial matching ppm maintain models various orders :10.1.1.14.4305
point highest order model symbol occurred current context special escape symbol indicate need drop lower order 
contexts occur times different symbols assigning initial weight alphabet symbol section unsatisfactory solution zero frequency problem higher order models 
doing give weight symbols occur 
see detailed description ppm method 
witten cleary moffat bell proposed methods estimating probability escape symbol give :10.1.1.14.4305
methods give approximately compression readily analyzed :10.1.1.14.4305
context escape event treated separate symbol weight probability occurrence ordinary symbol counted occurrences coded escapes 
treating escape event normal symbol apply results section adjustments occurrences symbol code length independent order symbols 
block symbol occurs time take occurrences evenly distributed sense definition symbol weights numerators running occurrence positions denominators running coded normal way code length bounded lemmas 
mechanism excludes numerators gamma denominators code length approximation adjusted adding adjustment adjustment actual gamma estimated lg gamma lg gamma lg lg gamma gamma lg gamma gamma lg gamma adjust entropy actual value initial probability actual value final probability gamma 
convenience denote entropy term gammaf gamma gammaf define compute adjustment adjustment actual gamma estimated coding effects lg gamma lg gamma lg lg lg gamma code length actual actual adjustment gamma adjustment small terms actual gamma lg gamma gamma lg gamma lg gamma lg gamma lg gamma gamma lg gamma small terms net adjustment negative 
neglect effect time scaling context 
extend theorem model scaling subscripts natural way restrict quantities context theorem scaling code length bounded contexts hx hx gamma hx kx lg proof proof follows discussion 
theorem readily estimate code length file direct way 
show code length file coded high order markov model scaling expressed weighted entropy formulation introduced section 
particular code length context expressed directly terms weighted entropies context 
coding effects section prove analytically coding effects distinguished modeling effects insignificant assumption exact coding appropriate 
empirical evidence coding effects negligible appears 
rounding counts integers section analyzed modeling effect periodic scaling analyze coding effect 
witten neal cleary scale counts avoid register overflow prevent count falling round fractional counts higher integer 
gives weight symbols count happens odd scaling occurs 
integer arithmetic theorem rounding counts higher integer increases code length file bits input symbol 
proof symbol weight rounded causes denominators probabilities block large 
number symbols subject denominators computing coding interval approximately adding bit code length block block code length bits longer 
effect entire file blocks rt bits bits input symbol 
effect typically bit input symbol 
integer arithmetic witten neal cleary integers large fixed range typically exact rational arithmetic transmit encoded bits soon know waiting entire string encoded scaling range represent half original range identity transmitted 
result nearly compression efficiency exact rational arithmetic 
apparent description coding section cleary algorithm scaling range approximate 
select subrange current interval low high length low high proportional new integer values low low obtained truncating results exact calculation 

repeat steps times possible new subrange entirely lower middle upper half full range values return 
new subrange lower upper half output respectively plus bits left previous symbols 
subrange entirely middle half keep track fact output 
scale subrange shift subrange ignore part full range subrange known lie 
ii 
double low high add high 
algorithm roundoff error selecting subrange propagate entire scaling process 
worst case symbol count result subrange length subrange size just 
effect assign symbol probability half coding effects correct value resulting code length bit long 
practice code length error symbol seldom near large errors sign approximately symmetrical distribution mean average error usually small 
witten neal cleary empirically estimate gamma bit input symbol 
order get rigorous bound compression loss analyze new algorithm maintains full precision scaling range 
adding high step add low independently add high choice case fractional bits exact results initial subrange selection 
resulting code length may longer exact arithmetic coding tiny amount shown theorem theorem high precision algorithm scaling subrange code length exceed ideal code length gamma lg ln bits input symbol 
proof scaling process smallest possible subinterval size 
result rounding scaling low high high low subinterval short 
long 
interval short short factor gamma corresponds code length increase gamma lg gamma ln 
loss ln bits input symbol negligible gamma bit symbol typical parameters 
practice high precision algorithm gives exactly compression algorithm witten neal cleary compression loss provably small 
encoding file file explicitly indicated arithmetic coding 
extra code length required typically small ignored completeness provide brief analysis file effect 
witten neal cleary introduce special low weight symbol addition normal alphabet symbols encoded file 
theorem bound cost identifying file method theorem special file symbol results additional code length ln lg bits 
proof cost components ffl lg bits encode file symbol probability large smallest possible probability ffl fewer ln bits wasted code space allow file point probability reduced factor gamma gamma resulting loss gamma lg gamma ln gamma lg gamma ln bits symbol ffl disambiguating bits file symbol ffl bits fill byte 
alternative transmitting length original file encoding reduces cost lg lg bits appropriate encoding integers requires file length known encoding 
file cost methods negligible typical file bit input symbol 
notion weighted entropy precisely characterized tradeoff overhead associated scaling saving realize exploiting locality 
largest code length savings come sophisticated higher order models scaling analysis extends accordingly 
proven computational effects code length practical arithmetic coding implementations small treat practical arithmetic coders exact coders 
important consideration making arithmetic coding practical address article speed current interval updated 
basic algorithm outlined section witten neal cleary multiplications division needed symbol encoded 
rissanen langdon ibm eliminates division altogether focuses approximating multiplication combinations additions shifts 
alternative approach approximate arithmetic coder finite state automaton small number states 
arithmetic computations effectively stored state tables coding proceed quickly table lookups 

wish prof martin cohn helping uncover small mistake analysis effect integer arithmetic 
langdon rissanen method adaptively initializing source model symbol encoding ibm technical disclosure bulletin may 
bell cleary witten text compression prentice hall englewood cliffs nj 
bell witten cleary modeling text compression comput 
surveys dec 
bentley sleator tarjan wei locally adaptive data compression scheme comm 
acm apr 
high efficiency multiplication free approximation arithmetic coding proc 
data compression conference storer reif eds snowbird utah apr 
cleary witten data compression adaptive coding partial string matching ieee trans :10.1.1.14.4305
comm com apr 
cleary witten comparison enumerative adaptive codes ieee trans 
inform 
theory mar 
cormack horspool data compression dynamic markov modelling computer journal dec 
cormack horspool algorithms adaptive huffman codes inform 
process 
lett 
mar 
elias interval recency rank source coding line adaptive variable length schemes ieee trans 
inform 
theory jan 
elias universal codeword sets representations integers ieee trans 
inform 
theory mar 
fraenkel klein robust universal complete codes alternatives huffman codes dept applied mathematics weizmann institute science technical report rehovot israel 
howard vitter practical implementations arithmetic coding image text compression storer ed kluwer academic publishers norwell ma 
huffman method construction minimum redundancy codes proceedings institute radio engineers 
knuth dynamic huffman coding algorithms june 
langdon probabilistic coder algorithms binary source adaptation proc 
data compression conference storer reif eds snowbird utah apr 
langdon arithmetic coding ibm res 
develop 
mar 
langdon rissanen compression black white images arithmetic coding ieee trans 
comm com 
moffat implementing ppm data compression scheme ieee trans 
comm com nov 
rissanen wax adaptive model nonstationary sources ibm technical disclosure bulletin apr 
source coding algorithms fast data compression stanford univ ph thesis 
pennebaker mitchell langdon overview basic principles coder adaptive binary arithmetic coder ibm res 
develop 
nov 
rissanen stochastic complexity modeling ann 
statist 

rissanen stochastic complexity roy 
statist 
soc 
ser 

rissanen universal coding information prediction estimation ieee trans 
inform 
theory july 
rissanen generalized kraft inequality arithmetic coding ibm res 
develop 
may 
rissanen multiplication free arithmetic code ieee trans 
comm 
feb 
rubin arithmetic stream coding fixed precision registers ieee trans 
inform 
theory nov 
ryabko data compression means book stack 
shannon mathematical theory communication bell syst 
tech 
july 
stone encoding commas strings comm 
acm may 
wang asymptotically optimal flag encoding integers ieee trans 
inform 
theory mar 
witten bell zero frequency problem estimating probabilities novel events adaptive text compression ieee trans 
inform 
theory july 
witten neal cleary arithmetic coding data compression comm 
acm june 
