category theory category theory monads relationship functional programming jonathan hill keith clarke department computer science queen mary westfield college university london incorporating imperative features purely functional language active area research functional programming community :10.1.1.100.9674
techniques gaining widespread acceptance model imperative functional programming monads :10.1.1.33.5381
purpose technical report give category theoretic monads explore relationship functional programmers term monad 
keywords monads category theory kleisli triple imperative functional programming 
motivation stems desire understanding moggi computational calculus monads 
presentation owes papers wadler basic texts category theory :10.1.1.33.5381
basic category theory monads category theory concerned observation properties algebra simplified presentation terms diagrams containing arrows 
category comprises collection objects collection morphisms called arrows 
morphism domain domain morphism written collection morphisms category domain domain called hom set written 
composition morphisms obey associative law morphism ffi ffi ffi ffi hold 
requirement category object category written obj exists identity morphism id hom set morphism ffi id id ffi requirements category provide pair commuting diagrams provide pictorial representation relationships objects morphisms single category 
diagrams express identity associative laws morphisms category email hill dcs qmw ac uk basic category theory monads category category ffi ffi gamma gamma gamma gamma gamma gamma gamma gamma gamma psi id id category theory potentially important application data parallel programming 
associativity morphism composition building blocks category morphisms higher order arguments parallel fold scan 
functors mapping categories categories functor mapping categories consists object mapping morphism mapping 
object mapping obj defines relationship object category objects category written obj obj obj 
convention object obj corresponding object category morphism mapping analogous relationship morphisms categories 
morphism hom set morphism mapping mor defines relationship morphisms hom set obj obj written fmor obj obj 
functor required preserve structure compositions morphisms identity morphism id morphisms category equations hold fmor id id obj fmor ffi fmor ffi fmor category theorists enjoy omitting unnecessary syntactic baggage notation 
convention subscripts obj mor dropped functor clear context object morphism mapping described 
commuting diagram left defines associativity composition morphisms category commuting diagram right defines corresponding relationship morphisms category category category gamma gamma gamma gamma gamma ffi gamma gamma gamma gamma gamma ffi morphisms functors composed functors composition ffi functor maps objects morphisms category corresponding elements convention object category corresponding element category written gf favour obvious 
basic category theory monads natural transformations sliding categories functors form mappings categories natural transformation structure preserving translation functor 
natural transformation thought way sliding picture defining functor left commuting diagram category sliding commuting diagram right category category category ffi gamma gamma gamma gamma gamma psi ffi gamma gamma gamma gamma gamma psi ffi gamma gamma gamma gamma gamma psi xz xz xz concentrating single morphism natural transformation written defined assigning object obj morphism morphism hom set diagram commutes category category morphisms diagram called components natural transformation common pictorial representation natural transformation diagram form read functors natural transformation provides translation 
composing natural transformations natural transformations composed vertically horizontally 
natural transformations oe diagram shows vertical composition basic category theory monads oe object category definition natural transformation previous section commuting diagram category drawn remember oe morphisms components natural transformation category category oe oe ffi oe ffi oe commuting diagram right basis new category functors objects natural transformations morphisms functor category 
prior commuting diagram written commuting diagram category oe oe ffi natural transformations oe composition ffi oe forms natural transformation functor written oe ffi consider horizontal composition oe expressed natural transformation diagram oe object category consider corresponding objects category definition functor natural transformation object category basic category theory monads corresponding objects category hf composition functors top line natural transformation diagram object category hg 
morphism describes relationship objects morphism component natural transformation select morphism mapping functor interesting morphism diagram objects hg kg category applying functor object category gives object category object select component natural transformation oe describes morphism oe hg kg 
applying similar techniques remaining paths natural transformation diagram gives commuting diagram category category fk hf hg kg oe oe similar vein treatment horizontal compositions new category defined functors objects natural transformations morphisms 
id identity functor category id id identity natural transformation functor composition natural transformations ffi ffi utterly part functor convenient symbol represent identity natural transformation identity natural transformations appropriate functors commuting diagram induces new natural transformations hf hg oeg hg kg fk hk oef hf fk 
category fk hf hg kg oef oeg commutativity diagram equivalence compositions morphisms natural transformations hold oe ffi ffi ffi ffi ffi oe ffi 
todo ffl 
monads category theory principle underlying moggi monads computational lambda calculus distinction simple data valued functions functions perform computations 
data valued function value returned function determined solely values arguments 
contrast function performs computation encompass ideas basic category theory monads side effects non determinism implicitly produce results consequence application function result explicitly returned 
category theory monad category triple endofunctor natural transformations 
mentioned convention writing composition functors ffi tt simplified exponentiation notation abbreviation natural transformations monad defined id id moggi monads views endofunctor mapping objects obj category viewed set values type corresponding set objects obj interpreted set computations type natural transformation thought operator includes values computation natural transformation flattens computation computations single computation 
termed monad laws called associative law monad left right identity laws hold 
giving laws attempting justify laws step step manner considering various compositions monads components 
consider associative law investigating characteristics flattening natural transformation 
object category consider corresponding elements category applying combination morphism mappings endofunctors components natural transformation 
diagram left defines left combination endofunctor natural transformation 
definition functor natural transformation object category corresponding objects category composition functors top line natural transformation diagram object category tt 
morphism describes relationship objects object object mapping functor select component natural transformation 
diagram right shows relationship pictorially category tt similar technique right wards combination endofunctor natural transformation category tt tt define new category functors objects natural transformations morphisms commuting diagram left combines morphisms prior diagrams basis diagram right morphism right identity natural transformation endofunctor inside functor functor mapping category 
basic category theory monads category ffi ffi category commutativity diagram ffi ffi ffi ffi termed associative law monad 
consider left right identity laws investigating characteristics injective operator similar manner treatment 
object category consider corresponding elements category applying endofunctor leftwards manner id category id tt similar technique applied right wards combination endofunctor natural transformation id category id tt define new category functors objects natural transformations morphisms commuting diagram left combines morphisms prior diagrams basis diagram right morphism right identity natural transformation endofunctor id id tj oe jt gamma gamma gamma gamma gamma gamma psi category category id id gamma gamma gamma gamma gamma gamma psi commutativity diagram ffi ffi ffi ffi termed left right unit laws monad 
kleisli star monad category consider morphism new morphism extension operator lifts domain morphism computation 
context moggi computations basic category theory monads function values computations function computations computations 
expression ffi interpreted applying value produce computation computation evaluated produce value applied produce computation result 
monad extension operator create commuting diagrams category category ffi ffi gamma gamma gamma gamma gamma gamma gamma gamma gamma psi gamma gamma gamma gamma psi ja oe ja ae ae ae ae ae ae ae ae ae 
ja ae ae ae ae ae ae ae ae id ja kleisli triple obj constructed monad obj restriction endofunctor objects ffi commutativity diagram left 
kleisli triples thought different syntactic presentation monad correspondence kleisli triple monad see page proof 
similar vein monad laws laws constructed commuting diagrams left unit ffi ja right unit ffi id ffi id associativity ffi ffi ffi ffi ffi ffi assoc 
ffi eliding monads functional programming wadler adapted moggi ideas monads structure semantics computations tool structuring functional programs 
monad functor natural transformations modelled functional programming language type constructor function map parameterised type constructor see map way polymorphic functions 
functor morphism set objects category corresponding elements category objects morphisms 
object mapping part functor represented functional language type constructor 
example object type ff object type ff type constructor represents computation 
morphism mapping functor modelled function analogous map map ff fi 
ff fi type constructor lists normally written ff ff 
historical aside corresponding morphism category modelled functional language curried function application map natural transformation thought family arrows object category components natural transformation objects category 
natural transformation similar polymorphic function consequence written polymorphic functions unit join type unit ff ff join ff ff summary category theory monad functional programming monad represented quadruple map unit join obey monad laws section re expressed left unit join ffi unit id right unit join ffi map unit id associativity join ffi map join join ffi join people really monads functional programming wadler papers onset application monads method incorporating imperative features purely functional language current monads bears closer resemblance kleisli triples :10.1.1.100.9674
triple unit forms monad laws hold left unit unit 
right unit 
unit associativity 



monads previous section type constructor expression type ff thought computation delivering object type ff result 
unit inclusion function monad type ff ff converts value type ff computation deliver value result 
expression ffi kleisli triple type ff 
ff fi fi 
historical aside monads typically equated single threadedness technique incorporating imperative features purely functional language 
category theory monads little single threadedness sequencing imposed composition ensures single threadedness 
wadler monad consequence bundling kleisli star flipped compose bind operator 
new connection 
peter landin algol functional composition model semi colon 
semi colon thought state transforming operator threads state machine program 
peyton jones wadler turned full circle back landin earlier moggi sequencing monad enables real side effects incorporated monad operations print :10.1.1.100.9674
similar landin implementation sharing machine function side effect store sharing machine sequencing imposed functional composition 
landin defined imperatives treated null list producing functions imperative subtly different enables algol compound statements handled 
function takes store location value argument performs assignment store sharing machine returning value assigned result function 
landin assumed applicative order reduction landin syntactic representation empty list unit 
return imperative evaluated side effect unused argument 
statements formed wrapping imperative lambda expression takes argument 
consecutive algol assignments encoded lambda calculus algol lambda calculus ffi gamma lambda parameter thought state world threaded program functional composition 
sight objects functional programmers term monad theorists term monad bear little resemblance 
hopefully technical report help monads bridge gap 
andrea asperti giuseppe longo 
categories types structures 
mit press 
barr wells 
toposes triples theories 
number comprehensive studies mathematics 
springer verlag 
chen hudak odersky 
parametric type classes 
lisp functional programming 
enables things map overloaded vectors lists 
cohn 
universal algebra 
harper row 
landin 
correspondence algol church lambda notation 
communications acm february 
part cacm vol pages 
saunders mac lane 
categories working mathematician 
springer verlag 
john launchbury 
lazy imperative programming 
proc acm sigplan workshop state programming languages pages june 
moggi 
computational lambda calculus monads 
ieee symposium logic computer science 
university edinburgh lfcs technical report ecs lfcs extended version 
eugenio moggi 
view programming languages 
technical report ecs lfcs laboratory foundations computer science university edinburgh april 
peyton jones wadler :10.1.1.100.9674
imperative functional programming 
acm symposium principles programming languages 
benjamin pierce 
basic category theory computer scientists 
mit press 
jean pierre talpin 
aspects th de inf erence de type 
phd thesis ecole nationale sup erieure des mines de paris may 
thesis english 
philip wadler 
comprehending monads 
acm conference lisp functional programming acm conferences pages 
acm june 
philip wadler 
essence functional programming 
acm symposium principles programming languages january 
