application program slicing regression testing david binkley college maryland software maintainers faced task regression testing retesting program modification 
goal regression testing ensure bug fixes new functionality adversely affect correct functionality inherited original program 
regression testing involves running large program large number test cases expensive terms human machine time 
approaches reducing cost regression testing proposed 
program slicing surveyed 
keywords program slicing incremental regression testing test case selection test data adequacy criteria dependence graphs reviews research application program slicing problem regression testing 
regression testing part larger problem program testing application program slicing general problem considered 
white provides survey software testing methods 
testing important part software engineering consumes half labor expended produce working program 
simply put primary goal program testing catch bugs 
testing techniques divided functional testing techniques transaction flow testing syntax testing domain testing logic computer science department college maryland north charles street baltimore maryland 
binkley cs edu 
supported part national science foundation ccr 
copyright fl david binkley 
rights reserved 
testing state testing structural testing techniques control flow graph path testing dataflow testing 
functional black box testing techniques inspect code generate tests requirements design information 
contrast structural white box testing techniques internals code 
program slicing internals code obviously applied structural testing techniques 
example common error maintenance engineers modify definition incorrect check uses definition 
forward slice modified definition identifies uses need tested 
obvious impact program slicing functional testing 
example functional test executable slice captures functionality tested easier expensive test complete program 
remainder section discusses incremental regression testing cost reduction describes test data adequacy criteria testing software 
section surveys collection published techniques slicing reduce cost regression testing 
section contains brief summary 
assumes reader familiar program slicing including static dynamic forward backward slicing computation slices data flow equations dependence graphs pass hrb algorithm horwitz 
incremental regression testing today software development testing dominated design new software rework maintenance existing software 
software maintenance activities may account thirds cost software production 
study probability introducing error making change percent 
increased testing change reduce percentage 
particular automation testing process beneficial typical testing process human intensive activity generally costly time consuming error prone inadequately done 
testing maintenance phase program life dominated regression testing defined repetition tests usually software data change intended show software behavior unchanged insofar required change software data 
regression testing attempts validate modified parts software ensuring new errors introduced previously tested code 
performed provide confidence modified code behaves intended modifications inadvertently disturbed behavior unmodified code 
terminology previously tested version program referred certified 
program obtained modifying certified referred modified 
test suite set test cases test program 
test suite test suite test certified test suite test suite test modified 
regression testing involves creating test set validate modified running modified practice test suite typically contains plus new tests designed test modified new functionality 
running modified tests usually expensive 
regression testing differs initial testing test cases results execution certified available tester 
incremental regression testing attempts exploit information ways 
new component tested existing test case costly construction new test case avoided 
reason techniques attempt maximize reuse tests second may asserted subset modified produce output certified potentially costly execution modified subset avoided 
occurs example changed program components executed test 
incremental regression testing attempts exploit coverage observations line program basic blocks functions files tests basic blocks executed test average test executed basic blocks 
furthermore tests executed functions average test executed functions 
small change tests need rerun 
relationships program semantics syntax useful incremental regression testing 
begins observation statements text semantics input value produce result 
programs single syntactic difference difference executed behavior 
second intraprocedural slices syntactically identical semantics programs share slice share computation 
relationship extends interprocedural slices 
incremental regression testing steps identify set affected program components modified 
identify subset tests affected components 
slicing techniques focus step 
identify untested components modified covered new tests 
create new tests uncovered components 
run modified union tests produced steps 
comments process order 
step performed running modified tests step marking components executed 
unmarked components identified step 
techniques attempt minimize size 
revalidate functionality inherited certified ensure errors introduced modified test new functionality subset 
test data adequacy criteria defined adequate certified similarly adequate modified 
perform step techniques require mapping components certified modified 
compute go require input 
test case selection algorithm worthwhile cover costs 
cost selecting tests running cost simply rerunning tests 
algorithms discussed section divide cost selecting tests kinds processing critical processing offline preliminary processing 
critical processing begins regression testing dominant activity product release limiting activity 
critical processing modification complete tester desires perform regression testing 
contrast line processing performed modification planned implemented line processing free respects way reduce cost regression testing move processing possible line processing 
important assumption implicitly explicitly research involving program slicing regression testing 
controlled regression testing assumption deals environment programs tested modified tested hold factors influence output modified code modified constant respect states tested certified 
assumption may violated practice program ported machine different processor different amount memory 
furthermore may violated single machine location program loaded affects program behavior 
algorithms section relate formal semantics certified modified slices 
relationships extend formal semantics runtime behavior deterministic computational model time program executed input produces output 
model requires controlled regression testing assumption violated 
test data adequacy criteria techniques discussed section test data adequacy criteria 
test data adequacy criterion minimum standard test suite program satisfy 
adequacy criterion specified defining set program components means component exercised 
example statements criterion requires statements program executed test case test suite 
statements program components statement exercised test executed program run test 
satisfying adequacy criterion provides confidence test suite reasonable job testing program 
test data adequacy criteria divided groups control flow criteria example statements data flow criteria example uses program dependence graph pdg criteria example flow edges 
examples defined follows definition 
statements criterion satisfied test suite statement test case exercises statement exercised test case executed program run input definition 
uses criterion satisfied test suite computational predicate statement variable path control flow graph definition reaches test case exercises definition path 
path exercised test case statements path exercised program run input control flow criteria pdg criteria data flow criteria subsumption relation equivalence relation edge key uses uses uses uses uses defs statements loops branches uses flow edges vertices paths uses control edges criteria relationships definition 
flow edges criterion satisfied test suite flow edge test case exercises flow edge definition vertex vertex exercised exercised definition lies control flow graph path taken exercised exercised 
vertex exercised corresponding statement exercised 
program dependence graph includes control data dependences provide single unifying framework define adequacy criteria control data flow 
note flow dependence edge captures information definition pair du pair 
shows relationship criteria types 
techniques section surveys papers literature apply program slicing problem reducing cost regression testing 
divided groups 
group uses dynamic slicing 
second group represents programs program dependence graphs third group weiser data flow definition slicing 
techniques limited program slicing included completeness 
common example section illustrate techniques 
reads side lengths triangle assumed descending order classifies triangle scalene isosceles right equilateral computes area formula class outputs area class 
read class scalene class isosceles class right class equilateral case class right area equilateral area sqrt area sqrt case write area class test suite test program :10.1.1.25.6155:10.1.1.39.1532
test input output equilateral isosceles right scalene scalene dynamic slicing techniques agrawal algorithms 
straw men designed motivate third 
algorithm attempts select minimal subset test modified inherited functionality 
consider finding new test cases cover new functionality 
algorithms observations statement executed test case affect program output test case 
statements program executed test cases 
statement executed test case doesn necessarily affect program output 
statement necessarily affect part program output 
strategies attempt relegate bulk processing line processing involves computing various slices 
strategy overestimates number tests rerun second underestimates unsafe 
final strategy provides better safe approximation 
strategy observation test case control reaches changed statement certified execution reach modified execution 
modified need rerun tests cases execute changed statement 
statements treated changed reached new definition caused addition new assignment statement change left hand side existing assignment control nesting changes addition deletion control predicate 
strategy conservative statement executed may affect output program consider sequential assignments variable 
strategy conservative safe selects tests may produce different output 
second strategy errs direction unsafe 
line processing dynamic slice respect certified output test case test suite computed 
modified run test cases dynamic slice includes modified statement 
approach unsafe modification may change statements contained dynamic slice 
final strategy replaces dynamic slice second strategy relevant slice 
test cases relevant slices contain modified statement selected 
informally relevant slice extends dynamic slice certain elements static slice includes necessary control statements including statements control 
includes program set executed statements program dynamic slice 
definition relevant slice notion potentially dependent definition 
variable location execution history potentially dependent earlier occurrence predicate execution history defined exists path defined changing evaluation may cause path traversed 
note change allows change changing evaluation predicate necessary potentially dependent relevant slice extends dynamic slice include predicates statements slice potentially dependent data potential dependences predicates 
include control dependences include unwanted predicates 
example 
example considers modifications example program 
modification dynamic slicing technique fail select test second execution trace technique select relevant slice technique correctly select case 
modification erroneously replaces line 
test lines executed 
dynamic slice includes lines 
execution trace technique selects modified line line executed 
dynamic slice technique select line dynamic slice 
test produces different output change selected 
case relevant slice includes exactly executed statements relevant slicing technique selects see need relevant slicing assume lines certified class equilateral test case predicate line true predicate line false 
changing true causes line execute changing false cause line execute class line potentially dependent 
relevant slice includes line line 
modified line changed execution trace technique select line executed 
relevant slice technique line relevant slice 
pi drawback relevant slice strategy requires static data dependence information 
static information expensive compute necessarily inaccurate due pointers arrays dynamic memory allocation 
agrawal suggest approximation simpler conservative 
approximation adds predicates executed slice constructed transitive data dependences 
initial presentation strategies assumes single change change change control flow graph left hand side assignment statement 
assumptions relaxed pragmatic issues ignored 
example changes control flow graph bring matching problem correspondence statements certified modified 
relaxing single change assumption adversely affect strategies may require study 
reduce overhead cost instrumenting original program dynamic slicing performing test case selection expense running tests agrawal suggest techniques applied basic block function module level statement level 
dependence graph techniques section includes techniques program dependence graphs pdgs 
assumes familiarity pdgs compute program slices :10.1.1.50.4405
techniques heavy slicing introduce new kinds slices 
second pdg underlying representation limited program slicing 
included completeness 
heavy techniques bates horwitz introduced dependence graph test data adequacy criterion 
proposed techniques identify safe approximation set components affected modification tests guaranteed exercise affected components 
guarantees 
bates horwitz introduce pdg test data adequacy criteria vertices control edges flow edges 
criterion technique identifies affected components partitions affected components certified execution behavior selects tests partitions 
requires defining behavior component 
vertices criterion execution behavior component sequence values computed component 
example predicate statement computes sequence boolean values 
section considers vertices criterion example 
components vertices pdg 
vertices correspond statements control predicates program vertices criterion equivalent statements criterion 
affected vertices identified identifying set directly affected points 
vertex dap new pdg modified different incoming edges pdgs certified modified 
requires priori correspondence vertices modified certified 
vertices criterion set affected contains vertices forward slice respect 
set super set truly affected vertices 
safe affected include truly affected components 
general includes components fact behavior precisely computing affected components undecidable 
identify tests exercise components affected vertices affected certified partitioned equivalence classes equivalent execution patterns definition 
vertices equivalent execution patterns iff exercised number times input 
vertex exercised corresponding statement executed 
definition assumes programs terminate normally 
extension handle cases involving programs terminating normally straightforward 
precise determination equivalent execution patterns undecidable 
new kind slice called control slice bates horwitz provide safe approximation definition 
control slice respect vertex pdg traditional backward slice pdg taken respect contains vertices plus new unlabeled vertex contains edges plus new control edges control predecessors control slice captures conditions executes values 
alternative definition control slice backwards slice respect set control predecessors 
step partitions vertices affected certified control slice isomorphism 
bates horwitz prove vertices certified modified partitioned equivalence classes control slice isomorphism vertices class equivalent execution patterns 
vertices partition exercised tests 
bates horwitz define control slices control edges flow edges criterion prove similar results 
resulting set tests rerun collected partitions contain affected vertices vertex affected equivalence class vertex certified add tests exercised may affected vertices exist equivalence class vertices certified 
technique safely determine test exercises vertices 
example consider predicate change algorithm safely determine test case execute true branch note test 
approaches point bates horwitz run selected tests mark actual vertices exercised 
new test cases required unmarked vertices 
example 
line example program replaced line class modified vertices representing lines affected 
affected vertices equivalence class corresponding vertex certified 
example equivalence class includes vertices lines certified modified 
furthermore vertices lines equivalence class tests test line test line change new tests need created 
consider separate change replaces line giving line case affected includes line modified 
equivalence class containing line includes vertices certified 
test causing line true need 
pi bates horwitz considers single procedure programs 
binkley presents complementary algorithms reducing cost regression testing operate programs procedures procedure calls 
algorithm reduce complexity program test cases rerun certified modified produces smaller program differences captures behavior modified different behavior certified 
second algorithm interprocedural extension bates horwitz 
algorithms operate system dependence graph sdg 
testing large program modified large number test cases replaced running smaller program differences smaller number test cases 
algorithm produces program captures semantic differences modified certified 
computed identifying potentially affected components modified producing subgraph modified sdg referred delta modified certified captures computation affected components 
subgraph produce program differences 
meaning program component defined bates horwitz sequence values produced component 
sequence sufficient absence procedures presence procedures procedure calls provides coarse definition 
consider example program independent calls procedure increment 
intuitively programs semantically equivalent calls increment independent 
sequences values produced program components increment depend order calls increment consequently different 
presence procedures meaning component extended set sequences values 
element set produced distinct call procedure 
set affected contains safe approximation set vertices may different meaning 
bates horwitz computed forward slice respect directly affected points 
correctly capture computations represented vertices necessary partition affected strongly affected points weakly affected points 
affected point potentially exhibits changed behavior calls procedure strongly affected point potentially exhibits changed behavior calls procedure 
strongly affected points procedure caused changes procedures called procedures call set safely approximated pass hrb forward slice respect directly affected points 
weakly affected point affected point strongly affected 
weakly affected points procedure caused changes procedures call changes procedures calls 
set safely approximated removing affected points strongly affected points 
operator delta applied modified certified produces subgraph modified sdg contains components necessary capture behavior affected points 
operator defined parts interprocedural backward slice respect strongly affected points second pass hrb backward slice respect weakly affected points 
step producing differences delta modified certified feasible 
infeasible sdg sdg program 
feasible delta modified certified program differences delta modified certified sdg 
general differences tends include small single thought programs smaller percentages larger programs 
example 
consider changing line computation area equilateral triangle example program 
differences omits area computations 
executed tests kinds triangles ensure mistakenly categorized equilateral time wasted unwanted computation area 
pi binkley second algorithm performs test case selection vertices flow edges criteria 
section considers vertices criterion example 
test case selection algorithm outputs subset rerun subset modified vertices algorithm guarantee executed test algorithm combined program differences reduce number test cases rerun size program run 
algorithm partitions vertices common execution patterns 
common execution patterns extend equivalent execution patterns programs contain procedures procedure calls 
equivalent execution patterns safe prove coarse presence procedures procedure calls 
definition 
components procedure procedure common execution patterns exist calling contexts cc cc equivalent execution patterns 
calling context represents sequence active procedure calls 
identifying vertices common execution patterns undecidable practice safe approximation necessary 
approximation uses calling context slices calling context slice contains program interprocedural slice program intraprocedural slice definition 
calling context slice taken respect vertex calling context cc includes statements necessary capture computation calling context cc calling contexts 
common execution patterns depend number times vertex exercised calling context 
number times vertex exercised determined behavior vertices control dependent 
calling context slices respect vertices identify vertices common execution patterns 
bates horwitz affected vertices modified sdg vertices certified sdg partitioned equivalence classes calling context slice isomorphism 
test case selection includes test cases exercise vertex certified partition affected vertex 
tests exercise affected vertex test cases need rerun 
reductions possible 
includes tests execute dap 
second reduces number tests selected maintaining affected vertex set cause affected 
set weed test cases exercise affect test cases produce results modified certified 
intraprocedural case considered bates horwitz reductions equivalent 
interprocedural case 
fact second quite difficult 
reductions require additional bookkeeping information may cost effective 
example 
example program test case selection algorithm performs steps bates horwitz algorithm example program contains procedures 
consider effect moving computation class procedure 
modified contains new inde pendent call vertices associated procedure common execution patterns corresponding vertices certified 
tests tested certified continue test modified original call site 
pi limited techniques final dependence graphs techniques limited program slicing 
rothermel harrold algorithms select tests affected du pairs determine du pairs may produce different behavior 
intraprocedural interprocedural versions 
algorithms operate sdgs certified modified 
algorithms safe select test may produce different output modified 
contrast test case selection algorithms bates horwitz binkley safe rothermel harrold sense treatment deleted components 
deleted component affects components certified exist modified components affected tests selected 
deleted component affect components certified tests selected included rothermel harrold definition safe 
algorithm called outputs subset may produce different results run certified modified 
operates performing side side walk program control dependence sub graphs looking nodes different texts 
control successors predicate region node region nodes summarize control dependence conditions necessary reach statements region certified modified correspond correspond contain predicate output control transfer statements reached changed definition tests exercise included affected node control dependent defines variable reached definition tests exercise definition selected 
second algorithm called outputs set affected du pairs modified 
note du pair captures information flow dependence edge 
forward slicing 
walks dependence graph modified collecting flow dependence edges points differ certified 
encounters node modified corresponding node certified forward slice respect taken 
flow dependence edge completely ends contained slice included direct program slicing algorithms contain slice control constructs control dependence successor 
words algorithms written perspective labeling nodes certain kinds labels algorithm proceeds node node 
turning possible slicing gather nodes particular label 
example 
change line example program selects tests line nesting level executed time program run 
selecting tests dynamic slicing approach section indicative static information rothermel harrold approach 
static approaches similar behavior 
change line includes du pairs traversed forward slice respect new line 
slice includes statements line du pairs involving area involving definition class line selected needing covered 
lines replaced class equilateral change line cause include tests equal tests execute line appears better presence deeper control nesting 
change selects du pairs forward slice respect line effect change line line control dependent forward slice respect line 
pi final dependence graph system taos testing analysis oracle support 
taos build support testing debugging maintenance processes program dependence analysis 
goal automate certain activities testing program typical testing process human intensive activity usually unproductive error prone inadequately done 
uses oracles determine success test 
regression testing existing tests results execution oracle compare results testing modified 
taos system represents procedures internally program dependence graphs compute forward backward static dynamic intraprocedural slices 
focus development initial testing program 
little detail techniques regression testing 
richardson notes common error maintenance engineers modify definition incorrect check uses definition 
forward slice modified definition identifies uses definition pairs need tested 
dependences retested modification ensure change adverse affect rest program 
model discussed second technique section avoids situation obviates need regression testing 
includes plans develop proactive regression testing process uses program dependences determine retested tests cases suites available reuse automatically initiates regression testing triggered modification 
interesting see process compares techniques 
data flow techniques final pair techniques weiser original data flow model computing program slices 
gupta describe slicing approach regression testing explicitly detects affected program change :10.1.1.25.6155
approach self described slicing directly slicing operators slicing algorithms introduced weiser 
identifies du pairs need retesting modification 
uses du triples include variable induced du pair 
consistency section uses du pairs 
motivating observation approach test case executes modified statement executes code affected modified statement particular execution program 
technique concentrates du pairs affected change 
approach built algorithms determine tests rerun certain kinds modifications 
require input mapping statements certified modified 
algorithm backwardwalk finds definitions set variables reach point program 
second algorithm forwardwalk identifies uses variables directly indirectly affected change value variable point program change predicate :10.1.1.25.6155
returns du pair value directly indirectly affected change 
du pair directly affected represents modified definition 
du pair indirectly affected ways transitive closure changed definition definition control dependent changed affected predicate :10.1.1.25.6155
set set du pairs definition forward slice respect change 
backwardwalk forwardwalk building blocks find affected du pairs kind low level edit produce change 
low level edits inserting variable assignment statement deleting variable assignment statement inserting definition variable deleting definition variable changing operator assignment statement changing operator conditional inserting edge deleting edge 
claims higher level edits composed low level edits 
example deleting variable assignment statement requires retesting du pairs forwardwalk inserting variable assignment statement requires testing union sets 
assume edit statement 
part union new associations cause addition contains du pairs backwardwalk 
second part union includes affected associations returned forwardwalk 
high level edit du pairs retested identified 
done running algorithm sequence low level edits high level edit 
low level edits processed set possible du pairs may require retesting known 
note lowlevel edits may invalidate previous pairs retested cleanup required 
testing performed high level edit 
algorithm concentrates identifying du pairs need tested 
existing test suites select tests cover du pairs test case generator employed 
represents tradeoff expensive space cost storing test suite expensive time cost generating test cases 
example 
consider adding line example program 
set du pairs retested union sets 
definitions backwardwalk :10.1.1.39.1532
definition line 
line assigns value area second part includes affected associations returned forwardwalk area :10.1.1.39.1532
encountered line 
second example assume line certified 
correction introduces line consequently backwardwalk identifies new du pair definition line 
change predicate affects assignment class indirectly statements case statement 
forwardwalk identifies du pairs class area pi states approach extends interprocedural testing weiser algorithm 
experience shown interprocedural extension transitive closure algorithms straightforward imprecise 
final data flow technique alternative novel method reducing cost regression testing gallagher lyle limiting software modification side effects :10.1.1.39.1532
gallagher lyle introduce notion decomposition slicing new software maintenance process model eliminates need regression testing :10.1.1.39.1532
model decomposes program executable parts decomposition slice complement 
decomposition slice may modified 
modification merged complement 
key model complement semantically unchanged merge regression testing necessary empirical verification help acceptance model 
focusing decomposition slice maintainer able modify existing code cleanly sense changes assured completely contained modules consideration unseen linkages modules exist :10.1.1.39.1532
step algorithm decompose program decomposition slices 
decomposition slice captures relevant computations involving variable 
variable decomposition slice defined union slices output statement output slice program 
decomposition slice union slices slice 
choice definition decomposition slice pivotal remainder approach 
fact program contains independent uses variable including single decomposition slice may undesirable 
alternative example forward slice key program point identify statements interest 
decomposition slice backward slice taken respect set statements 
example relates decomposition slicing delta operator binkley 
program modified decomposed parts maximal decomposition slice modified complement modified 
terms define parts program decomposition slice dependent iff share common statement 
decomposition slice strongly dependent decomposition slice sub slice maximal decomposition slice strongly dependent decomposition slice 
statements exactly decomposition slice called independent statements 
maximal decomposition slice program complement computed removing independent statements 
gallagher lyle provide collection rules maintainer follow modifying decomposition slice 
rules easily enforced editor 
example independent statements may deleted decomposition slice new control statements surround control dependent statements allowed may cause complement change 
purpose rules ensure complement remains unchanged 
gallagher lyle discuss rules claim complete set rules necessary sufficient 
changes maximal decomposition slice tested merged complement 
merge simple places statements place appeared modification performed original program decomposition slice 
better understand model consider program definition uses du pairs 
assume determined receiving incorrect value consequently replaced test du pairs new program tested 
gallagher approach existing definition protected change 
forces new variable program 
example say assignment statement requires value 
replacing retesting du pairs new statement added immediately occurrences replaced avoids need retest du pairs 
example 
assume line example program lines output area class respectively 
decomposition slice class includes lines 
decomposition slice area includes program line 
add class small decomposition slice respect class computed 
independent statement final output statement changes variable class allowed 
effect change statement output class deleted independent statements deleted added line 
class small class class output class pi summary program slicing useful tool working incremental regression testing problem 
older approaches identify directly affected components du pairs slicing identify indirectly affected stream components 
slicing determine components execution behavior 
incremental regression testing attempts find approximate solutions unsolvable problems determining set affected components determining set tests exercise components 
consensus exactly ideal undecidable solutions problems 
example lack consistency set affected components consider change line example program 
uses line affected definitions section 
techniques bates horwitz binkley rothermel harrold select du pairs line uses needing retested technique gupta 
data flow involving uses changed control condition executed 
retested appears open question 
lack consistency finding improving comparing algorithms determining components affected difficult 
example lack consistency answers second question consider largest smallest set tests exercise components selected 
approaches bates horwitz binkley example tests equivalence class possible provide alternative 
selecting smallest set test sufficient provide adequate coverage 
selecting largest set tests equivalence class improve coverage may help uncover faults caused violations controlled regression testing assumption 
necessary determine additional testing produces added benefit 
dealing approximation undecidable problem possible desirable produce precise approximation 
example rothermel harrold provide example technique bates horwitz select tests possibly traverse new modified code 
correctly handling example algorithm precise example cost high improvement may desirable 
techniques section attempt produce approximate answers questions 
techniques alternative approaches 
gallagher lyle technique isolates affects change decomposition slice removes need regression testing 
second binkley technique uses differences place modified reduces cost running selected test case 
empirical evidence necessary determine techniques useful practice 
rothermel harrold comparison test case selection techniques compares techniques section 
define framework includes inclusiveness precision efficiency generality 
note definitions inclusiveness precision 
reducing cost regression testing simplified standardized terminology 
successful transfer industry incremental regression testing techniques need tried real programs 
convincing experimental evidence production environments necessary 
demonstrate able detect bugs popular retest strategy lower cost 
presently promising route successful transfer dynamic slicing 
algorithms dynamic slicing agrawal easier scale full programming languages static slicing static slicing requires solving difficult data flow problems 
accomplish general transfer require agreement standardization goals testing regression testing incremental regression testing 
agrawal demillo 
dynamic slicing presence unconstrained pointers 
proceedings acm symposium testing verification october 
agrawal horgan 
dynamic program slicing 
proceedings acm sigplan conference programming language design implementation pages new york june 
agrawal horgan london 
incremental regression testing 
proceedings conference software maintenance pages 
bates horwitz 
incremental program testing program dependence graphs 
conference record twentieth acm symposium principles programming languages 
acm 
beizer 
software testing techniques 
van nostrand reinhold second edition 
binkley 
multi procedure program integration 
phd thesis computer sciences department university wisconsin madison wi august 
binkley 
semantics guided regression test cost reduction 
ieee transactions software engineering august 
binkley horwitz reps program integration languages procedure calls 
acm transactions software engineering methodology january 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
gallagher lyle :10.1.1.39.1532
program slicing software maintenance 
ieee transactions software engineering august 
gupta harrold soffa :10.1.1.25.6155
approach regression testing slicing 
proceedings ieee conference software maintenance pages 
horwitz prins reps integrating non interfering versions programs 
acm transactions programming languages systems july 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
korel laski 
dynamic program slicing 
information processing letters october 
ostrand weyuker 
data flow analysis regression testing 
proceedings sixth annual pacific northwest software quality conference 
reps yang 
semantics program slicing 
technical report university wisconsin madison june 
richardson 
taos testing analysis oracle support 
proceedings acm international symposium software testing analysis issta august 
harrold 
analyzing regression test selection techniques 
ieee transactions software engineering 
rothermel harrold 
safe efficient regression test set selection technique 
acm transactions software engineering methodology april 
rothermel harrold 
selecting tests identifying test coverage requirements modified software 
proceedings acm sigsoft international symposium software testing analysis pages august 
weiser 
program slicing 
proceeding fifth international conference software engineering pages may 
weyuker 
complexity data flow criteria test data selection 
information processing letters 
white 
software testing verification 
advances computers volume pages 
academic press 
