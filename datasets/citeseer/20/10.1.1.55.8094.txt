slice metrics estimating cohesion linda ott jeffrey dept computer science technology michigan technological university washington st houghton mi denver previous shown relationship exists cohesion slice profile program 
explore metrics slice profiles give quantitative estimate level cohesion module 
example modules analyze behavior metric values modules modified cohesion changed 
sensitivity metrics various types changes discussed 
high module cohesion defined constantine yourdon suggested desirable property program modularity 
cohesion originally defined subjective measure subjective nature definition cohesion difficult practice 
researchers attempted concept tangible 
include suggested decision tree proposed page jones relating cohesiveness module program dependence graph earlier attempts find quantitative cohesion metrics 
build earlier particularly 
investigated slice metrics originally proposed weiser appear related cohesion 
encountered problems solutions 
section provide background cohesion slicing 
section describe metrics studied 
section define new type slice called metric slice basis measurement eliminates inappropriate sensitivity metrics size position processing elements 
section presents validation metrics estimators cohesion metric slices basis measurements 
conclude discussion continuing efforts area plans related research 
cohesion constantine yourdon proposed cohesion subjective measure functional relatedness software module 
module viewed collection processing elements act compute outputs module 
processing element formally defined intuitively thought roughly equivalent subtask module 
modules low cohesion consist independent processing elements 
high cohesion modules consist single processing element collection highly related processing elements 
constantine yourdon defined levels cohesion 
purposes study informally refer cohesion module ranging low high 
low cohesion modules exhibit coincidental temporal cohesion constantine yourdon original classification 
high cohesion modules exhibiting sequential functional cohesion 
program slicing slicing method program reduction introduced weiser 
slice module statement respect variable set statements predicates affect value slices proposed potential debugging tools program understanding aids 
broader class applications debugging parallel programs maintenance testing 
weiser algorithm computing slices data flow analysis 
suggested program dependence graph representation compute slices efficiently precisely 
algorithm computing slices program dependence graph representation horwitz reps binkley :10.1.1.50.4405
slice obtained walking backwards program dependence graph obtain nodes effect value variable interest 
similarly forward slice obtained walking forward program dependence graph obtain nodes affected value variable 
algorithm program dependence graph restricted weiser sense compute slice variable statement defined statement intraprocedural slices interprocedural slices computed 
intraprocedural slices restricted single procedure interprocedural slices cross boundaries procedural calls 
slice profiles slice profiles developed study module cohesion aid visualizing relationships slices generated module :10.1.1.53.3830
example slice profile 
column variable name heading slice profile corresponds slice variable 
rows profile marked vertical bar statements included slice particular variable row blank 
statement column contains source statement 
example column heading sumx corresponds slice sumx 
slice consists statements containing vertical bar column sumx 
slice metrics original slicing weiser proposes metrics calls tightness overlap coverage parallelism clustering 
directly relate cohesion hypothesize related concepts identified related cohesion 
instance indicated coverage low value may indicative module distinct conceptual purposes 
pursue idea 
investigated tightness overlap coverage indicators cohesion 
relationship cohesion metrics exist reported difficulties 
study examine metrics investigated metric weiser original set new metrics 
defining metrics discuss issues raised study resolutions issues 
original study weiser slice metrics computes slices variable output statements 
results substantial number slices program 
clusters slices grouping differ set amount 
generates slices variables module reduced number generated creating slice variable 
slice computed module 
form slice called slice 
reduced number slices considered eliminating length length module combining slices identical lengths 
arbitrary measure eliminating combining slices chose compute slices output variables modules 
output variables include parameters globals modified variables written module return value function 
assumes purpose executing module generate outputs intuitively appealing 
choose slices 
second difficulty encountered result weiser original definition slices executable programs 
insists strictly observing definition slices necessary account consider noise computation metrics 
noise form declarations statements grouping operators 
counts statements values metrics significantly affected attributes module programming style formatting declarations clearly related cohesion module 
eliminate consideration statements restricting slices executable statements expressions variable 
statements called variable referent executable statements vres 
shows example slice profile vres 
computing metrics assumption simple statement assignment statement counted statement executable expression conditional expression statement counted statement 
define metrics 
notational convenience vm set variables module vo subset vm containing output variables sl corresponds slice obtained vo assuming vres assigned unique statement number sl considered set statements correspond statements included slice sl int intersection sl sl int sl length module denoted length number vres variable referent executable statements metric coverage comparison length slices length module 
coverage defined average slice length divided module length coverage jv jsl length overlap number statements common slices 
overlap originally defined weiser average ratio non unique unique statements slice 
overlap undefined unique statements slice redefines overlap terms total number statements slice 
similarly define overlap average ratio number statements intersection slices size slice sumx statement procedure sum integer var sumx integer var integer sumx sumx sumx slice profile sum 
statements included slice sumx indicated column sumx 
slice indicated similarly column 
sumx statement procedure sum integer var var sumx integer var integer sumx sumx sumx slice profile sum 
statements included slices profile restricted variable referent executable statements vres 
overlap jv jsl int jsl tightness number statements included slice 
tightness expressed ratio number statements intersection slices module length jsl int length parallelism indicates number slices little common slices 
parallelism expressed number slices having pairwise overlap slices equal threshold parallelism jsl sl parallelism indicates number slices totally independent slices module 
ratio length shortest slice module module length 
length min jsl ratio length longest slice module module length 
length max jsl values coverage overlap tightness range 
values parallelism range higher values indicate module contains multiple unrelated slightly related tasks depending value values metrics example programs figures shown table 
metric slices applied metrics slices defined weiser discovered sensitivity metrics size position processing elements module 
situations caused relatively low metric values modules having fairly high cohesion 
section define metric slices reduce metric sensitivity size position processing elements module think better captures concept trying measure 
position size processing elements understand problem consider slice profiles code segments shown 
code segments exhibit input sided output sided communicational data flows 
see detailed explanation concept 
modules contain processing elements computing variables approximately degree relationship processing elements code segments 
input sided segment computes values relationship processing elements fact elements dependent variable processing elements affect value computed processing element computes dependent output sided code segment similar relationships processing elements 
processing element computes required processing elements compute unrelated 
metrics code segments reflect approximately level data cohesion relationships elements similar 
case shown table 
note considerable differences overlap tightness metric values 
similar problem occur code segments sequential data flow 
small large code segments exhibit level sequential cohesion 
segment contains processing elements computing variables small large code segment consists small elements statement computing variables third processing element statements considerably larger 
large small code segment situation reversed 
case processing element large statements computing considerably smaller statement 
code segments intuitively exhibit degree cohesion processing elements subjectively classified having high cohesion 
significant difference relative sizes processing elements 
metric slices modules ones previous section realized debugging examining slices order estimate cohesion interested statements affect value variable interest statements affected variable interest 
concerned uses data relationships 
get types relationships combining horwitz backward forward slices 
define metric slices union statements backward slice statements forward slices slice variable 
backward slice computed table metrics sample programs 
computing parallelism value assumed module coverage overlap tightness parallelism sum sum input sided output sided statement statement slice profiles code segments input sided output sided communicational data flow 
table slice metrics communicational sequential profiles figures 
module coverage overlap tightness parallelism input sided output sided small large large small small large large small statement statement typical slice profile modules sequential data flow uneven processing element size 
module forward slices computed definitions slice variable encountered computing backward slices 
shows profile metric slices modules 
note metric slices slice profiles symmetric 
modules contain metric slice patterns 
computes metric slices modules metric slices span entire length module 
metrics shown table metric slices obtained examples 
values identical example pairs communicational sequential code segments 
note metric values exception parallelism sequential code segments maximal parallelism segments indicating highest level cohesion 
validating metrics section report results initial efforts examine metrics measures cohesion 
concerned measuring attribute software currently determined subjectively feasible correlate metrics large amounts data obtained real world software 
real world software generally cohesion classification attached module 
approach validation examine quantitative behavior metrics specific situations determine metrics preserve ordering desired modify modules involved 
see discussion metric validation 
slice profiles including code examples 
effects software changes behavior metrics examined analytically 
constructed modules experiment modules specifically constructed investigate metrics respond varying degree data dependencies module functionality remained constant 
example consists versions program called combined functional components sorting algorithm binary search algorithm algorithm computing mean set numbers 
version performs functions different arrays 
performs sort search array computes average second array 
performs functions array 
exhibits sequential cohesion consider high cohesion exhibit low level cohesion coincidental 
table contains metrics decompositions 
coverage metrics increase data dependencies modules increase 
overlap tightness increase considerably sort node described search version indicate difference versions 
constantine yourdon original definition cohesion defines module lowest level cohesion exhibits exhibits level 
argue desire differentiate modules intuitively somewhat cohesive 
table indicates overlap tightness match original definition cohesion coverage detect improvement go values parallelism respectively 
parallelism detects improvement 
second example investigates effect combining code segments control structure similarity 
customer module computes number transactions customer customer current balance average customer deposits prints list customer transactions 
customer performs task separate loop 
customer customer customer obtained combining task main loop single loop structure perform tasks customer version 
table contains metrics obtained versions customer 
metric values vary slightly versions customer 
similarly parallelism modules 
metrics indicate significant change cohesion level 
desired data dependencies gained combining elements common loop structure 
decomposition experiments problems section test metric sensitivity module decomposition 
intent decompose module cohesive modules 
experiments metrics computed original module compared metrics computed modules resulting improved modularization 
example tests metric sensitivity removing common functionality separate procedure 
module lista reads list student college names generates listing sorted student name listing sorted college name 
code perform sorting duplicated lista module 
decomposition consists modules sort 
sort designed sorting report list printed 
performs functions calls sort twice obtain sorted lists 
table contains metrics computed lista sort 
metrics respond appropriately decompositions involving sort significant increase metric values modules resulting decomposition compared values computed lista 
input sided output sided statement statement metric slice profiles code segments 
table slice metrics communicational sequential modules figures 
module coverage overlap tightness parallelism input sided output sided small large large small table metric values decompositions 
module coverage overlap tightness parallelism table metric values various versions customer 
module coverage overlap tightness parallelism customer customer customer customer parallelism modules 
decrease anomaly occurs original program lista decomposition statements included longest slice 
total number statements lista percentage statements included longest slice 
metrics expressed percentages program length phenomenon occur 
compare programs length 
analysis necessary determine ordinal scale programs length 
see complete discussion measurement scales 
example details illustrates decomposition communicational module functional modules 
version details imports account number exports customer name loan status 
obtaining name requires search array loan status computed summing array 
tasks distinct computing loan status requires index determining name module communicational 
details decomposed modules 
resulting modules details represent highly functional decomposition details 
details simply calls determine position customer account table calls compute desired result customer account 
metrics computed details decompositions shown table 
note metrics obtained indicate decomposition completely functional metric values shown value equal 
parallelism indicated parallelism modules decomposition parallelism details 
decomposition example shows example decomposing module functionality 
module add performs distinct tasks searching position student data array inserting new entries array search fails 
decomposition tasks split modules add 
module add calls determine student data array 
table contains metric values decomposition 
seen table metrics clearly indicate improvement 
summary introduced new type slice called metric slice computing slice metrics 
slice metrics new previously defined examined potential indicators cohesion modules specifically constructed show changes cohesion 
approach current need subjectively determine cohesion infeasible study large numbers arbitrarily chosen modules 
metrics generally behaved desired 
metrics expressed percentage module length anomalies occur comparing modules different lengths 
metric parallelism inherent deficiency 
summary modules parallelism metric values equal highly cohesive 
similarly modules metric values parallelism equal low cohesion 
metric values appear indicators level cohesion 
absence precise technique metrics may prove quite useful 
particular generate table metric values modules system 
modules low values metric areas examined hand determine example redesign appropriate 
directions continuing directions 
attempt better understand useful metrics examining real software 
guidelines established table metric values list decompositions 
module coverage overlap tightness parallelism lista sort table metric values details decompositions 
module coverage overlap tightness parallelism details details table metric values add decompositions 
module coverage overlap tightness parallelism add add metrics indicating thresholds modules problematic 
attempting determine metrics correlate attributes software reliability 
studying usefulness metrics slice profiles tools maintenance environments 
path investigation pursued analytical evaluation relationship metrics cohesion attributes 
analysis necessary demonstrate metrics impose ordering modules systems match intuitive understanding cohesion 
need understand fully properties metrics insure perform valid statistical analyses metric data 
authors department computer science colorado state university providing dr ott facilities environment resulted productive sabbatical year including 
addition jim bieman colorado state leads insights helped clarify ideas referees earlier versions comments improved quality presentation 
baker bieman fenton melton 
philosophy software measurement 
journal systems software july 

choi miller netzer 
techniques debugging parallel programs 
technical report univ wisconsin madison 
constantine yourdon 
structured design 
prentice hall 
emerson 
discriminant metric module cohesion 
proc 
th international conference software engineering pages 
fenton 
software metrics rigorous approach 
chapman hall london 
keith brian gallagher james lyle 
program slicing software maintenance 
ieee trans 
software engineering 
matthew hecht 
flow analysis computer programs 
north holland 
horwitz prins reps integrating non interfering versions programs 
acm trans 
programming languages systems 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm trans 
programming languages systems 
korel laski 
dynamic program slicing 
information processing letters 
korel laski 
stad testing debugging user perspective 
proc 
nd workshop software testing verification analysis 
arun lakhotia 
insights relationships slices 
technical report cacs tr university southwestern louisiana september 
arun lakhotia 
computing module cohesion 
technical report cacs tr university southwestern louisiana november 

slice program metrics 
master thesis michigan technological university 
ottenstein ott smith 
relationship program complexity slice complexity debugging tasks 
proc 
ieee compsac pages 
linda ott 
slice profiles metrics software maintenance 
proc 
th annual software reliability symposium pages 
linda ott james bieman 
effects software changes module cohesion 
proceedings ieee conference software maintenance 
linda ott jeffrey 
relationship slices module cohesion 
proc 
th international conference software engineering pages 
linda ott jeffrey 
slice profiles metrics tools production reliable software 
technical report cs dept computer science michigan technological univ april 
published technical report cs dept computer science colorado state univ ottenstein ottenstein ott 
program dependence graph software development environment 
proc 
acm sigsoft sigplan software eng 
symp 
practical software development environments 
see sigplan notices 
page jones 
practical guide structured systems design 
yourdon press new york 
reps yang 
semantics program slicing program integration 
proc 
current issues programming languages pages 
lecture notes computer science vol 
springer verlag new york ny 
jeffrey 
investigation slice cohesion metrics 
master thesis michigan technological university 
weiser 
program slicing 
proceedings th international conference software engineering pages 
weiser 
programmers slices debugging 
communications acm 
weiser 
program slicing 
ieee trans 
software engineering 
zuse 
software complexity measures methods 
de gruyter berlin 
