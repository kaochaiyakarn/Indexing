diophantine equations presburger arithmetic finite automata alexandre hubert comon lri cnrs ura bat universit paris sud centre orsay orsay cedex france 
show finite automata provides decision procedure presburger arithmetic optimal worst case complexity 
solving linear equations inequations integer coefficients set non negative integer plays important role areas computer science associative commutative unification constraint logic programming compiler optimization 
order theory addition known presburger arithmetic shown decidable early 
special case linear diophantine equations studied earlier 
devoted improve effectiveness known methods designing new efficient algorithms 
example 
tomas 
study old methods elliot mac improving algorithms extending able solve complex systems including inequations disequations 
follow similar approach revisit buchi technique 
context diophantine equations systems extension presburger arithmetic 
famous result buchi decidability sequential calculus second order monadic logic successor 
scope recall background result need full generality 
just recall case weak order monadic logic ws set variables range finite sets buchi result restated subset free monoid fa ang recognizable finite state automaton definable ws 
result relevant presburger arithmetic see proceed follows 
natural numbers seen finite words alphabet sufficient consider binary representation write right left 
representation unique may add zeros right 
example number thirteen represented 
generally tuples natural numbers represented binary notation words research supported part hcm network sol 
alphabet simply stacking equal length number 
example pair thirteen represented 
finite automaton accepts natural numbers state automaton final state carry state carry sufficient 
buchi theorem set words definable ws 
may arbitrary logical connectives quantifications finite sets turn correspond quantification natural numbers stay ws decidable presburger arithmetic embedded ws 
observation finite automata give possible device solving linear diophantine problems 
efficient method practical relevance problems solve questions aim answering 
compare previous methods emphasize weaknesses strengths automata approach algorithm extremely simple implemented hours 
adding disequations disjunctions inequations straightforward increase complexity 
easy add quantifiers price increased complexity 
similarly possible add recognizable predicate natural number example predicate power keeping decidability 
weaknesses usually linear diophantine equation solving outcome basis set solutions parametric representation 
outcome technique finite state automaton recognizes set solutions emptiness known 
extracting basis solutions automaton complex step 
approach associative commutative unification requires particular representation set solutions 
major issue efficiency 
theoretical side contribution show decision technique algorithm near optimal 
precisely show algorithm runs exponential time existential fragment presburger arithmetic known npcomplete 
runs exponential time presburger arithmetic known complete double exponential space 
practical side carried experiments prototype implementation show methode competitive decision problem 
organized follows 
section general method single equation explain possible derive naive decision procedure presburger arithmetic 
section 
consider existential fragment address implementation issues complexity 
section 
report computation times compared methods meaningless computation times show method efficient algorithms general dedicated decision problems 
consider full presburger arithmetic show complexity algorithm 
diophantine equations finite automata recognizability solutions linear diophantine equation show encode tuples naturals words alphabet way set solutions linear diophantine equation recognized finite state automaton 
showing formally construction sketch develop example 
clear example compute automaton general case consider linear diophantine equation gamma equation satisfied modulo solution respective reminders solution modulo case 
set solutions modulo 
triple gamma gamma gamma gamma gamma gamma divided quotients respectively satisfy new equation gamma gamma gamma split equivalent disjunction new equations quotients express step formal languages 
coding non negative integer word words consider binary representation written right left possibly completed zeros right 
tuple nonnegative integers ambiguously encoded stacking representations length 
example triple coded way non negative integers seen word alphabet sigma set words language solutions decomposition shows delta developed example gamma delta gamma delta gamma delta gamma delta gamma derive similar equations new equations appear right member example gamma delta gamma delta gamma delta gamma delta gamma gamma assuming proved process terminates get system left linear equations sigma solution regular language final outcome get automaton 
gamma gamma gamma gamma gamma gamma gamma fig 

automaton recognizes solutions gamma initial state final state gamma word set solution followed eventually sequence generally constructed follows start set states containing equation junk state 
transition rules contain initially transition 
letter alphabet sigma saturate rules delta delta delta anxn ff 
bn sigma gamma delta delta delta delta delta delta anxn ff gamma 
delta delta delta anxn gamma delta delta delta nan added delta delta delta anxn gamma delta delta delta nan added gamma delta delta delta odd delta delta delta anxn ff gamma 
added initial state final state delta delta delta anxn 
left show set states equations reached initial state equation delta delta delta anxn finite 
jkj sigma ja letter ff delta delta delta jkj gamma delta delta delta nan equation form delta delta delta anxn number states automaton bounded jkj sigma ja proposition 
linear diophantine equation delta delta delta anxn set solutions recognized finite complete deterministic automaton jkj sigma ja states transitions state 
size sum jej lengths written binary plus number variables automaton built time jej necessarily minimal instance state unsatisfiable state identified 
states path leading accepting state different identified minimal deterministic automaton 
form delta delta delta anxn delta delta delta anxn differ constant right hand side sets solutions 
automaton just consists case identifying states accepting state inaccessible 
note operation performed linear time wrt size introduce convenient notation remainder 
notation 
oe formula presburger arithmetic variables xn ff 
bn denote oe omega ff formula 
xn 
xn ng 
state reached state labeled formula oe reading ff labeled formula equivalent oe omega ff 
decidability presburger arithmetic buchi early sixties proved result subset recognizable iff definable ws weak second order monadic logic successor 
want recall background sequential calculus 
refer details 
simply describe resulting algorithm presburger arithmetic decision called automaton algorithm assume atomic formula oe automaton oe accepts solutions oe 
formula automaton accepting inductively defined follows oe oe oe oe automaton accepting intersection language 
computed quadratic time standard means 
oe oe oe oe automaton accepting union language 
computed linear time standard means 
oe automaton accepting complement language accepted oe computation may require determinization yield exponential blowup worst case 
oe computed projection standard operation see requiring linear time 
oe oe translation quite expensive principle resulting automaton doubly exponential original 
hard see step simply exponential worst case wants decide validity sentence oe sufficient compute oe check contains accessible final state 
unquantified formulae show compute directly deterministic automaton accepts solutions disequations inequations 
show compute efficiently deterministic automaton conjunctions systems atomic formulae 
don hand 
anyway play role 
disequations inequations disequations turning automaton recognizing solutions equation recognizing solutions disequation straightforward complete deterministic just say accepting state longer accepting states accepting 
inequations language solutions equation recognizable automata theory gives straightforward solution inequations 
solutions inequation formula xs directly build automaton recognizing solutions inequation 
state automaton labeled formula inequation language recognized starting state encodes language solutions inequation write inequation form delta delta delta anxn case inequation solutions negative positive 
case automaton trivial non accepting state 
equations word ff ffl encodes solution encodes solution omega ff 
transitions scheme similar equations sides inequation need parity 
consider inequation state gamma 
letter read meaning odd remainder word encode solution inequation gamma gamma equivalent gamma gamma inequation solutions gamma 
transition schemata inequations deltac denotes integer part rational number transition delta delta delta anxn ff gamma 
delta delta delta anxn gamma delta delta delta ff delta delta delta fail delta delta delta anxn ff gamma 

termination argument dis equation case 
accepting states labeled inequation encoded ffl solution states delta delta delta anxn 
automaton computed transition schemes deterministic complete minimal consider inequation gamma 
solutions minimal automaton recognizing solutions states reader check method generate larger automaton 
remember performed polynomial time 
unquantified formulae automata theory straightforward procedure 
automaton recognizing solutions conjunction atomic formulae oe delta delta delta oe product automata recognizing solutions oe oe respectively 
case equations seen state reading letter ff state different 
reached omega ff left hand right hand sides parity 
case equation delta delta delta xn odd coefficient exactly gamma transitions state state different gamma state 
take advantage fact conjunction equations letters transition coincide general 
computing automaton single equation conjunction compute product automata directly compute automaton conjunction 
consider system equations delta delta delta xn delta delta delta xn 
am am delta delta delta km compute automaton accepting solutions alphabet states automaton labeled conjunctions equations form im sigma ij letter delta delta delta read state remainder word encode solution im sigma ij equivalently im sigma ij gamma sigma ij formula obviously unsatisfiable sigma ij parity 
hand sigma ij parity formula equivalent im sigma ij gamma sigma ij new state reached automaton 
state obtained previous adding vector integers vector constants right hand sides dividing 
call increment letter delta delta delta integers incr ff sigma sigma define parity vector state im sigma ij bits mod km mod compute advance possible parity vectors letters transition state corresponding increment 
ease computation closure initial state states reached transition schemata transition im sigma ij ff gamma 
im sigma ij gamma sigma ij ff delta delta delta gamma sigma ij 
fail im sigma ij ff gamma 
ff delta delta delta gamma sigma ij odd example 
consider system equations problem ape gamma gamma gamma gamma gamma show transition scheme transition efficiently implemented 
states automaton labeled conjunctions equations form gamma automaton equations transitions letter state 
half lead state different parity letter ff incr ff state parity letter ff incr ff state fig 

schematic transition table problem gamma 
initial state parity vector 
denote state gamma 
state accessed letter ff corresponding parity vector table incr ff instance initial state transition 
closure initial state transition scheme contains states including problem satisfiable 
computed lisp half minute 
gives compact representation transition scheme problem 
transitions lead state 
possible parity vector 
complexity proposition 
oe equation delta delta delta anxn oe sum sizes ja ja jkj written binary oe number variables oe joej oe oe 
minimal deterministic complete automaton recognizing solutions oe constructed time joej 
number states bounded oe number transitions state oe proof 
number transitions state complete automaton cardinal alphabet case oe seen section reading letter ff delta delta delta oe state delta delta delta anxn new state labeled equation delta delta delta anxn gamma sigma oe soon jkj sigma oe jkj gamma sigma oe number states different 
bounded jkj sigma oe ja exactly oe method computes directly deterministic complete automaton 
seen linear time result result holds disequations accepting non accepting states permuted inequations bound valid constant right hand side label new state integer part gamma sigma oe 
deciding arbitrary unquantified formulae done complexity disjunctions introduce non determinism 
proposition 
oe unquantified formula presburger arithmetic built equations disequations inequations connectives oe number connectives oe joej oe joe delta delta delta joe oe oe atomic subformulae oe joe defined previous proposition 
complete non deterministic automaton recognizing solutions oe constructed time joej 
size jaj number states plus number transitions 
language recognized decided time jaj 
proof 
induction number connectives 
presburger arithmetic recalled decidability presburger arithmetic follows buchi theorem 
principle derived decision procedure require non elementary time buchi theorem eliminating existential quantifiers done linear time simply removing corresponding component transition rules 
universal quantifier may require determinization step universal quantifier elimination yield exponential blowup automaton 
problem regular expressions see 
context automata just automata bound number states minimal deterministic automaton accepting formula lemma 
oe formula presburger arithmetic unquantified formula variables xn ym deterministic complete automaton recognizing solutions oe joej states 
proof 
states labeled formulae 
formulae form state automaton accepting solutions computed previous section delta delta boolean combination involving connectives initial state oe 
quantifiers range naturals rules trivially correct bit oe 
xg 
bit oe 
xg 
ff read state remainder word satisfy formula fy 

ym bm fy 
ym 
ym bm ff delta delta delta apply rule bit bit qn successively obtain formula delta delta delta omega fi delta delta delta quantifier prefix changed boolean combination atomic formulas form omega fi fi state automaton accepting 
maximal number states number propositional formulae alphabet omega fi omega fi states automaton accepting solutions 
proposition states propositional formulae states 
gives desired bound 
final states automaton formulae psi delta delta delta psi note need effectively compute final states proof constructive 
existence lemma gives upper bound intermediate automata computed standard buchi technique applied problem theorem 
automaton algorithm section decides presburger arithmetic triple exponential time 
proof 
algorithm section minimizing automaton quantifier elimination intermediate automaton smaller deterministic automaton accepting language previous lemma triple exponential size 
time required computation polynomial maximal size 

herv 
efficient algorithm solving systems diophantine equations 
information computation august 

elliot 
linear homogeneous diophantine equations 
pure maths 


algebraic approach unification associativity commutativity 
proc 
rewriting techniques applications lncs 
springer verlag may 


combinatory analysis volume chapter ii theory pages 
reprinted chelsea 

presburger 
uber die einer systems der zahlen die addition als operation 
comptes rendus du premier congr es des math des pays slaves 

stockmeyer meyer 
word problems requiring exponential time 
proc 
th acm symp 
theory computing pages 

thomas 
automata infinite objects 
van leeuwen editor handbook theoretical computer science pages 
elsevier 
article processed macro package llncs style 
