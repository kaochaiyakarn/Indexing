review state practice requirements modeling mitch eds research austin lab austin tx colin potts georgia inst 
technology college computing atlanta ga charlie richter objective system solutions austin tx conducted field study organizations find currently define interpret analyze requirements software systems products 
field study refer series depth structured interviews practitioners various kinds 
summarize findings field study explain implications improving practice organizational methodological interventions introducing new technology 
little known organizations handle product requirements 
anecdotes abound problems arise projects customer requirements fully understood 
boehm reported percent project cost percent project duration spent requirements phase costs times repair errors coding requirements phase costs times maintenance 
development customer organizations save lot time money detect correct fraction errors 
easy specific recommendations improve requirements practices little hard evidence exactly analysts developers marketing people 
known study software engineering practice real organizations conducted curtis krasner 
examined organizations 
addition requirements methods studied project management implementation maintenance facets software development 
significant addressed requirements problems accurate problem domain knowledge critical success project requirements volatility causes major difficulties development 
significant certainly confirm people intuitions experiences requirements large complex systems sufficiently precise lead recommendations improvement 
aim study address requirements issues identify practices yield better understood easily changed requirements practices lead undesirable consequences 
section describes field study method types informants interviewed contacted types projects worked questions asked 
section presents findings 
section summarizes results draws general discusses implications findings 
method source information summary sources data appears 
sample comprised corporations 
talked developers projects groups 
refer intra groups projects really groups working closely related projects systems single business area specific project single customer 
gathered information total projects groups case means face face interviews project members 
interviews held informants 
spoke developers 
organization worked liaison employee organization 
asked identify suitable informants substantial experience working requirements new evolving systems 
asked balance possible people write elaborate requirements designers consumed understand requirements part design process 
sought balance people tell system software requirements issues 
attempted keep interview procedure uniform possible demands informants schedules meant interviews followed course involved number types informants 
authors took part interview 
interviews involving informant attempt attribute comments specific individuals 
cases liaison sat interview sufficiently familiar project participate directly 
tell informants heard projects 
interview questions asked questions listed 
intend questions questionnaire 
cases informants launched lengthy informative topics touched questions directly elicited 
cases pursued lines questioning promising informants comments obvious experience 
analysis procedure analysis follows organization fairly closely modified somewhat reflect way interviews went 
attempt summarize findings statistically qualitative nature data arbitrariness categorization scheme able follow uniform interviewing procedure interviews 
analyze results terms projects defined previous section 
held interviews members project collated records 
spoke members projects kept projects separate 
sample size number projects spoke number companies number interviews number informants 
summarize significant findings areas requirements definition behalf customer interpretation customer wants ii specification requirements system project iii validation project developing system customer really wants requirements specification number senses iv system evolution including changes customer requirements evolution generalization systems time interaction requirements definition project management planning 
sources data study organizations projects informants groups study curtis curtis general describe 
projects working done requirements origination system requirements come 
form 
interprets 
decisions permitted requirements customer 
requirements elicitation validation customer organization interact 
check understand requirements document requirements 
types questions ask 
perform walkthroughs requirements modeling specify system behavior 
responsibilities states modes 
effects actions 
triggering conditions 
timing 
statistical performance requirements 
specify system data 
objects data 
relationships attributes 
evolution requirements change 
radically formal change process 
implementation constraints impinge requirements customer specified platform 
pre existing system proposed system modification 
systems integration interoperability 
desired components rd party reuse 
knowledge 
system delivered 
big bang increments 
prototype 

assess feasibility 
methodology experience methods esp oo 
results 
tool 
results 
connection requirements analysis project planning 
interview questions applications customers projects represent diverse selection applications developed wide range customers 
summarizes applications 
projects internal development projects developing products marketplace 
remaining developed specific customers 
developing custom systems goal developing family similar systems different customers 
projects developing single system single external customer 
purpose exposition divide projects categories customer specific projects projects single customer market driven systems actual potential customer 
categories correlated identical distinction government commercial projects 
customer specific projects national government agency customer market driven project government customers 

results requirements definition expression requirements market driven projects tend vaguely stated requirements informal mode expression delivery customers customer specific projects may express requirements fully formally 
encountered cases customer generated requirements documents hundreds pages long 
verbosity imply clarity understanding informants complained requirements left unstated related requirements specified different parts document inconsistently 
market driven projects deal requirements expressed documents authoritative monolithic 
development organization staff usually separate marketing group may obtain sketchy statements requirements users existing competing systems obtain definitive requirements outside organization 
produce requirements 
doing projects tend techniques product marketing manufacturing software engineering 
example told uses focus groups quality function deployment 
keeping marketing emphasis resulting product specification may take form marketing presentation mere bullet items slides contrast pages requirements documentation customer specific projects 
interpretation requirements customer specific projects differ market driven projects way requirements interpreted 
cases vital understand problem domain kinds project tend adopt different techniques avoid misunderstandings 
customer specific projects developers domain expertise 
encountered cases curtis 
dubbed super designers customer specific projects 
typically domain experts developers second 
addition intellectual expertise typically show intense conviction view system live system command great respect colleagues 
example principal developers meteorology oceanography system studied phd meteorology 
says system hundreds times head dreams night 
customer specific projects employ domain specialists addition super designers 
typical navy project studied employs project type system customer avionics aircraft manufacturer portable computing market line help system users ground radar defense agencies avionics display mgt internal railroad signaling railroad companies 
system faa avionics aircraft mission planning navy airborne radar military financial financial institutions 

weather forecasting navy mission analysis nasa cim air force strategic defense 

system internal customer service telephone companies computer operations market automated test emergency services telephony telephone companies design automation market communications 
types project navy personnel 
navy career trained tested users predecessor system 
surprised hear major problems caused misunderstandings customer requirements domain specific assumptions 
contrasts findings curtis domain experts met heard frequently understood domain better customer 
interpret requirements correct customer 
absence domain related problems indicates projects possessed high level domain expertise customers trusted 
requirements misunderstandings occur market driven projects 
readily identifiable customer developers experience application domain 
encountered super designers informants complained appeared big picture 
contrast customer specific projects remarkable market driven projects greatest need development organization take initiative develop coherent compelling vision product 
market driven projects rely consultants advise desirable product features 
try build consensus system vision creating task force team key analysts designers meet intense series meetings usually held site 
heard task force met months separate office building 
effort devoted ascertaining exactly producing customer 
team members exercise success complained see going team decisions affect 
interaction customer user organizations surprisingly difficult answer question customer 
case customer specific systems requirements document written external organization government agency directly represent interests users 
informant put users users 
knowing listen skill 
example engineering industries aerospace customer organizations tend concentrate engineering aspects requirements neglect user view 
told group working avionics pilots told different original specification stated 
informants felt understood requirements best interacted directly users 
said general customer contact 
unfortunately easy initiate direct interaction users 
customer specific project software development organization subcontractor automatically step removed real users start 
market driven projects informants went complained form mental image customer 
person went far say system working users 
informants told stories conflicts different customers parts customer organization claimed customer 
project gathered requirements regional organization bank 
prototype system delivered region organization refused take delivery claiming system meet needs 
moral appears know exactly resolution procedure followed case disagreement exactly holds purse strings 
projects emphasized project management establish team atmosphere customers developers come think partners joint effort 
project reported working sense everybody group involved developing requirements 
software engineers group involved developing requirements marketing people times contractor sitting staff 
informant reported hint irony think program love kisses years program 
interestingly heard tales woe poor interaction developers marketing market driven projects heard accounts non adversarial customers developers customer specific projects 
developers may able treat marketing representatives real users 
effective way interact directly users involved training especially earlier version system 
trainers familiar system problems continually observe users attempting system testing simulated conditions 
effective technique adopted project hold frequent meetings customer ensure minutes signed anybody leaves 
way agrees decided 
general informants felt responsive customer needs interact customer 
informants reported successes customer developer teams claimed experience typical 
assigning priorities requirements requirement requirement system meet requirements accepted customer 
market driven systems requirements acknowledged essential 
division developing family related products reported example committed efforts 
deadlines approach developers features contribute product commercial success 
important release product certain date certain features 
prioritization requirements topic came repeatedly market driven projects 
companies really knew assign modify priorities communicate priorities effectively project members 
negotiating requirements just possible unimportant requirements possible customers ask features unreasonable meet real needs 
projects difficulties customers required feature desirable 
example system required display lot quantitative data 
data noisy users experts customer wanted data editable 
developers domain experts believed graphical presentation editing necessary customer fixed idea display numerical 
users saw preferred graphical interface prototype customer change requirement 
project negotiate requirement system raise audible alarm data corrupted discard bad data 
fact application users tolerating noisy data 
situations errors reported frequently user alarms 
relaxed requirement stated bad data normally interpolated discarded alarm sounded noise exceeded threshold 
change take effect engineering change request document inches thick approved 
took months 
recording assumptions making faulty assumption lead lengthy expensive redesign 
example comes financial project developed product manage securities fixed interest rates 
database schema assumption interest rates fixed 
customer satisfied initially asked enhancement manage securities interest rates securities variable interest rates 
easy simulate securities interest rates giving interest rate zero 
informants know accommodate variable interest rates 
informants explained value keeping record assumptions embedded systems system feasibility depend accuracy estimated parameters 
parameters obtained simulations considering similar systems 
informant designers systems failed record rationale assumptions said difficulties caused inspired set example follow 
opinion divided decisions assumptions recorded 
customer specific projects expressed opinion felt benefit worth effort 
market driven projects amenable idea rationale decisions assumptions recorded 
projects reported importance managing information assumptions decision making rationale doing specific 
requirements specification documentation distinction customer specific projects largely disappears considers specification practices 
projects customers tend adopt standards mandated customer standard sector industry 
projects developing products potential market tend document requirements detail seldom follow standards internal corporate division wide guidelines 
property requirement specifications common size exceeding pages 
defense industry dod standard documentation 
comes criticism document organization stipulates may appropriate systems 
insist top presentation 
distinction appreciated contracting officers expect hierarchical descriptions 
time consuming analyze system way document inconsistencies easily creep 
project object oriented analysis developers concerned customer representatives understand prepared navigate specification unfamiliar organization 
concrete requirements easier understand ones suggest design options 
narrow choices customer insists treating specification binding 
unfortunate irony specification permit flexibility may difficult understand concrete understand may easy change 
user interface details provide obvious example dilemma specification contains illustrations screen formats customer may hold development organization precise formats 
extreme projects produce specifications detail 
projects market driven produced specification 
case informants told time tell organization write requirements documents get signed customer customers won read understand 
time specification written project clear vision system functional architecture principal components 
organizations try minimize number unnecessary implementation constraints creep specification told occasions futile artificial distinction requirements design 
criticisms requirements methods heard address turn people vision system detailed specification create vision 
important factors determine success specification activity great deal subject matter expertise followed disciplined thorough way working 
asked write specifications process follow 
seldom understood 
informants kept returning format specification process adopted produce 
organizations software engineering methods standardize diagramming documentation process deriving specification greatly influenced method 
exceptions came projects adopting object oriented analysis methods time 
method specific representations projects standard requirements methods 
standard representations committing single method 
modeling information projects reported extensive entity relationship models object models specifications 
projects study investigating objectoriented methods wholly committed single method general principles help 
told entity relationship object model employ terms customer understands expects find method suggests 
object oriented information modeling methods encourage analyst avoid descriptive redundancy techniques normalization 
tends distribute model properties behaviors domain experts usually cluster 
model results may difficult non specialist understand 
example mission planning project name kind plan appears text requirements document 
obviously important concept object oriented methods treat derived object excluded object model 
developers project members external reviewers shown model immediate question plan 
plan object reinstated object model longer elegant 
inheritance lead similar difficulties 
general informants worried difficult find information object oriented specification 
general interest satisfaction object oriented methods distributed evenly customer specific market driven projects 
skepticism objectoriented methods restricted customer specific projects defense 
appears caused part entrenched commitment real time structured analysis methods projects partly concerns applicability object oriented methods time critical systems partly government procurement process 
transition structured method objectoriented method difficult differences terminology concepts 
supporters object oriented analysis exhibited healthy level skepticism object oriented methodology 
object oriented methods popular customers 
interestingly defense projects visited customer provided impetus change object oriented methods 
developers worried changes forced quickly 
specifying behavior contrast modeling static system properties variability ways system behavior described level formality employed 
projects data flow diagrams realtime emphasize control flow show terms state transition diagrams system flow charts express behavior terms pairings 
differences notations methods deep rooted familiarity methods means universal 
embedded systems organizations version real time structured analysis version method 
users satisfied method 
simple structured analysis successful especially important describe scenarios 
reviewer structured analysis specification complained extremely hard read 
impossible sense 
zero errors 
cases structured analysis half management commitment train staff 
companies money easier come buying case tools training staff methods tools support 
outside embedded systems community structured specifications difficult customers understand object oriented specifications 
specifying performance performance hard real time requirements generally specified text tabular form 
difficult associate parts dataflow control flow specification timing requirements generally refer sequence processing entire user interaction execution single action process 
performance requirements come number sources rationale obvious 
performance requirements interact functional requirements 
projects regard timing issues architectural issue defer consideration design process 
sufficient processing resources believe need specify performance requirements detail 
expect software developers understand hardware system software platform system run able understand meet time memory budgets detailed specifications parameters necessary 
cases embedded system development quantitative requirements precisely specified systems level budgets parameter time memory flows components lower level system 
documentation static modeling tools projects experience tools textual documentation structured diagrams 
general purpose tools obvious documentation tools word processing packages 
organizations producing requirements documentation form machine readable 
universal 
projects text processing tools customized requirements documents 
project commercial tool extract shall clauses requirements documents 
doing thing commercial word processor user defined macros 
cases manual intervention necessary 
projects combining commercial text processing tools database systems requirements traceability 
home grown integrations require lot manual intervention strict configuration management policies enforced 
special purpose tools minority projects commercial upper case tools 
ratio third held whichever way looked projects 
difference ratio market driven projects case tools respectively refutes initial intuition customer specific projects greatest commitment case tool usage largely concentration defense sector support structured analysis necessary 
fact projects case tool defense projects exactly predict case tool usage military commercial nature project 
embedded characteristic software case tool usage 
systems involved interaction devices systems orthodox computing equipment 
projects developing systems third case tools 
informants unable provide lines code estimates systems basis comments systems number people working case tools larger systems 
experience commercial upper case tools best 
projects complained case tools support details methods chosen 
complained certain case tools closed different parts organization share models easily integrate case tools tools 
tools handle large specifications 
help developers switch high low levels abstraction 
case tools heard discussed run engineering workstations 
case pc installation case repository system 
validation projects adopt wide variety validation procedures ranging informal unstructured meetings substantial prototyping efforts count development projects right 

organizational approaches validation brainstorming approach formulating validating system requirements 
project reported brainstorming formal sense projects reported having open ended meetings system objectives discussed 
requirements specification produced organizations choose required hold formal reviews 
usually meetings couple projects conduct electronic mail 
reviews customers appear interested threads scenarios 
projects hold meetings intended cover significant scenarios 
informant interesting observation models system behavior stimulus response couplings significant advantage representations engage customer interest relate system description customer knowledge application domain 
technical approaches validation projects reported user interface prototypes kind case tools static modeling 
tools included microsoft windows help compiler hypercard presentation tools house ui prototype construction tools 
danger mock ups simulate user interface users believe mock capable may criticize system doing things planned system capable conversely assume saying system able things planned implied interface 
simulations prototypes constructed assess feasibility algorithms system performance serve early usable versions system 
simulation done requirements early design phase performance modeling done developing stand models formally derived requirements model design 
cases told performance validation done group altogether ties development organization 
cautioned people dangers executable models demonstrations 
prototypes lack clear purpose 
relying evolutionary development lead hacking mentality informants informants complained year go past having dog show 

system evolution requirements changes types frequency informants complained requirements change frequently 
companies distinguished changes requirements changes way expressed 
changes requirements requested customer customer system objectives reviews specification evaluates prototype 
requirements change response changes environment 
change result commercial opportunities threats customer aware need integrate proposed system existing system 
market driven projects competing products market windows affect priorities assigned requirements 
aspect system prone changes user interface 
changes expression requirements usually requested developers detect ambiguity 
surprisingly told changes frequent requirements stabilize 
early phase requirements formulation may dynamic cases changes batched engineering change requests administered formally 
changes required time reported situation changes ceased design phase begun 
requirements changes process changes requirements system widespread effects rest system 
necessary control manage requirements changes 
told times small change requirements may cause large change design 
subjects relied different methods locate effects requirements change design 
companies explicitly track requirements design code test plans place requirements documents configuration control starting development 
companies adopt second formal strategy assume team members experience identify parts system affected change 
formal meetings printed change requests slow change process increase overhead expenses 
organizations trying responsive electronic mail conference calls 
customer specific projects customer ultimately determines changes 
market driven projects contrast decision go ahead change economic grounds 

product families integration reuse ments 
organizations reviewing domain modeling techniques means help kind evolution object oriented analysis design reason 
component reuse system integration constitute third form evolution came 
tailoring copy edit usual paradigm adopted reuse 
legacy code hardware kind evolution difficult 
projects iterative development process support evolution 
cases find coherent relationship requirements analysis project planning 
people interviewed intimately involved requirements issues know project managers estimated costs scheduled milestones 
general organizational solutions preferred technology strikingly obvious problems faced projects interviewed organizational non technical 
projects tend adopt organizational solutions problems technical non technical 
example avoid misunderstanding customer problem customer specific projects super designer driving force establishing system vision 
course official role informants point single individual officially chief technical visionary project 
similarly customer specific projects projects employed domain experts capacity 
projects especially market driven projects engaged domain specialists consultants 
organizational interventions level group interaction case projects formed task forces discuss new product flexible approaches adopted organizations 
principal success factors reported development atmosphere partnership rapport customer representatives users 
artificial tactics cement preserve relationship allowing anybody leave customer development meetings everybody agreed signatures decided observing participating training sessions new users giving customer representatives office development organization premises 
organizations formal interaction procedures brainstorming ibis conklin burgess delphi turoff common 
requirements validation technical organizational problem technique universal organizational nature review meeting 
organizations reported holding meetings face face conference room aid technology laptop computer recording minutes 
general purpose technology preferred case cases general purpose technology solve specific problem 
technologies developed solve general problems requirements analysis software engineering 
include spreadsheets database management systems word processors macro processing hypercard presentation tools electronic mail 
spreadsheets adequate engineers purposes doing quick performance budgeting calculations 
database management systems spreadsheets requirements traceability 
hypercard presentation tools prototype user interfaces demonstrate ideas usually preference specific user interface design tools 
electronic mail coordinate review meetings actions alert developers changes 
big problem integrate technologies example change reported database management system causes email system notify developers change 
limits achievable 
example difficult integrate tracking system prototyping tool prototypes derived formally specifications 
capitalization requirements activities specific technological solutions problem hand logical organizations opt organizational general technological solutions 
cases organizations visited specific technologies effectively 
software professionals notoriously capitalized relative professionals engineering manufacturing fields 
case tools third projects 
dissatisfaction expressed current generation upper case tools support exact details projects preferred methods support group effectively address transition informal text formal structured diagrams people talked method project 
cases case tools bought left shelf management insufficient commitment new technology developers trained 
understandable reluctance retrain developers method 
result organizations especially defense contractors equate requirements analysis structured analysis 
organizations seriously evaluating methodological technological options available 
increasing importance segment market driven software development differs customer specific development important ways 
software engineering research literature methodological literature practitioners case industry assumption software development customer specific 
market driven projects example easily identifiable customers requirements invented elicited prioritized significant requirements met earliest product releases 
market driven projects break new ground organizations easy tap domain expertise organization 
organizations previously developed systems specific customers software development strategy matter economic urgency 
organizations having adapt quickly changes outlined 
implications data previous sections implications 
current practice improved short term problems report ameliorated methodological technological interventions 
longer term difficulties experienced informants addressed focused problem oriented research development methodological innovations 
implications documentation support pervasive significant sets problems informants faced management documentation documentation includes just customer produced requirements documents developer produced specifications informal documents minutes review meetings notes results feasibility studies market surveys 
projects manage documentation problems better access technology capabilities capacity large volumes documentation interconnection multiple related documents internal external document navigation representation multiple levels formality authoritativeness traceability change management various levels formality configuration management composite documents coexistence uninterpreted text pictures language editing analysis 
probably system today addresses concerns project select support technology judiciously depending aspects significant 
hypertext technology form documentation support rapidly maturing address concerns 
implications domain knowledge kinds intervention increase project domain knowledge reduce risk developers misunderstanding domain specific concepts 
availability domain expertise addressed organizational measures preparation 
second model development practices depends application current research development domain modeling domain specific software architectures 
new technology major impact industrial practice years 
implications usability user interfaces need validated early system development lifecycle 
user interface possibilities documented requirements specifications definite commitments 
user interface requirements volatile developers avoid freezing user interface requirements artificially describing detail requirements document committed 
validate user interfaces really necessary presentation tools user interface construction toolkits skeletal connective code surface 
implications development process requirements methods really kind 
methods modeling conceptual architectures systems informally stated requirements useful defining requirements 
true requirements methods exist seldom recognized specific software systems engineering 
techniques include brainstorming consensus building practices delphi issue identification techniques ibis 
general problem solving techniques fair success informants require specialization software requirements 
specialization major technical risk organizations base techniques 
minority 
implications technical methodology requirements seldom absolute 
negotiated traded factors project schedule organizations believe important assign priorities requirements decisions requirements rational quantitative criteria 
software engineering research community neglected techniques help prioritization decision making example suggestions total quality management 
inter disciplinary requirements discovery techniques mentioned previous paragraph techniques adopted customized software little risk user organizations 
illustrations provided deutsch willis 
development project uncertain key features project problem advisable keep track assumptions 
records usually find way formal case representations 
example projects enhance practices major techno logical commitments risk 
conditions right formal technique ibis may 
project culture everybody annotates documents way example colored post notes step forward 
aerospace companies find major commitment functional methods 
companies growing interest experimenting object oriented methods kinds projects progress introducing object oriented methods market driven sector 
object oriented methods infancy 
industry benefit knowledge strengths weaknesses object oriented methods appropriate constituent techniques various object oriented techniques familiar functional structured techniques combined 
implications case technology requirements analysis design drawing diagrams methods modern case tools support notations consistency checks tools implement 
example generation prototype code viewing model multiple filters simulation model features requested 
commercial tools provide functions today users resorted separate tools tools presentation programs spreadsheets usually considered case tools support functionality 
informants state notations behavior complained scenarios informative way conveying information 
induction process fully automated 
case tools provide support scenarios currently 
boehm software engineering economics prenticehall 
conklin burgess process oriented approach design rationale human computer interaction 
curtis krasner field study software design process large systems comm 
acm 
deutsch willis software quality engineering total technical management approach prentice hall 
principles software engineering management addison wesley 
strategies real time system specification house 
turoff eds delphi method techniques applications addison wesley 
