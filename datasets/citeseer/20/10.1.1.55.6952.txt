originally published proceedings fifth usenix unix security symposium salt lake city utah june 
information usenix association contact 
phone 
fax 
email office usenix org 
www url www usenix org time passwords opie experiences building stronger authentication daniel mcdonald randall atkinson naval research laboratory washington craig metz sciences alexandria virginia time passwords opie experiences building stronger authentication daniel mcdonald randall atkinson naval research laboratory washington itd nrl navy mil atkinson itd nrl navy mil craig metz sciences alexandria virginia itd nrl navy mil naval research laboratory opie passwords software distribution enhancement bellcore key tm package 
opie improves key areas including ftp service time passwords stronger algorithm generating time passwords 
opie diverges key select design decisions behavior certain programs 
total security solution opie important part 
opie evolutionary predecessors year parts nrl 
taught authors lessons implementation usability deployment directions improvement 
past decade computer networks grown explosive rate lot 
wide range environments networks tool 
organizations building networks larger scales connecting networks global internet 
trend come explosion computer networks means gaining illicit access computer systems 
past intruders flaws network software older versions bsd sendmail program gain entry remote computer systems rey 
vendors sites fix known flaws network software looking weaknesses exploit 
particularly widespread attack passively capture replay passwords commonly authenticate users cer 
protocols send passwords cleartext encryption sort done password sent network read network traffic gain access protected cleartext passwords ha 
unix tm machines pcs allow network hardware read packet transmitted attached network 
exploit ability sniff packets discover cleartext passwords gaining unauthorized access systems cleartext reusable passwords 
solution problem encode password way encoded password generate encoded password 
encoded password called time password usable exactly time 
attacker captures password stream data sent network gain access target system condition performing new coding second condition 
practice second condition guaranteed computational impossibility take attacker inordinately long time discern useful data intercepted time password 
encoding devised lamport lam time passwords gained popularity development key hal bellcore 
design key system specific particular platform implementation released public bellcore key distribution specific bsd unix systems 
proved valuable tool gained wide environments left room improvement 
response widespread passive attacks internet reported early cer started local unix machines bellcore key 
subsequent additions key evolved nrl opie time passwords 
certainly derived key distribution opie version software distribution noticeably enhances ancestor 
development testing opie raised issues old new 
classic issues security vs ease circles trust mundane portability headaches combined problems questioning sent clear subsystems guarded time passwords 
nrl form time password originally bellcore key followed transient steps nrl opie year 
experience gained nrl helped shape better system 
opie opie defends specific type attack passively listening passwords 
opie provide single login set machines authenticate services 
alternatives kerberos sns authenticate just user identity single machine 
opie secure certain kinds active attack dictionary attacks 
opie specified rigorous formal methods 
current opie implementation formally verified developed software engineering methods 
opie combination protective measures maximum effectiveness 
operating system needs secure legitimate users improperly gaining privileges improper access privileged parts system 
tcp wrapper software provide coarse grained access controls nrl opie version colloquially called nrl key 
kerberos domains allow entry non kerberos systems time passwords techniques protect incoming logins originating non kerberos systems 
internet services provided computer systems ven 
routers administrative domain configured filter source routed obviously forged ip packets cer 
stronger authentication distributed services provided kerberos commercial products sun nis tm important risk reduction 
encryption ip packets telnet ftp rlogin sessions desirable environments confidentiality considered worth consequent performance loss 
specific improvements fundamental concepts key changed opie 
challenge contains sequence number public seed 
reply computed locally computed reply sent clear 
remote machine store keys 
details key opie fundamentals left haller key released rfc key hal 
functional improvements improvements function key authentication system early development process 
obvious replacement default cryptographic checksum key md riv md riv 
md believed cryptographically stronger definitely slower md 
properties decrease feasibility reverse engineering defeating way function 
increases assurance system running opie compromised brute force cryptanalysis 
functional improvement restructuring opie challenge 
opie challenge looks opie md wi entire challenge string surrounded square brackets 
serve indicator local terminal emulator resident challenge detector ms dos tsr opie password expected 
string inside brackets opie md indicates time passwords required algorithm 
complete string challenge detectors select correct algorithm 
correct command line syntax invoke time password calculator 
strings familiar key sequence number public seed 
course local machine generate time passwords 
issue discussed 
source password disclosure overlooked original key distribution ftp sessions 
address opie introduces ftp daemon direct modification bsd net release ftpd program 
chose popular ftp daemon additional features consequent code complexity harder determine unknown cer cer cer 
current implementation merely adds square bracketed challenge normal ftp password response pr 
current implementation accepts reply standard pass command 
existing ftp clients change 
user interface improvements improvements function opie sports improvements way users interact opie software 
simple merely bring opie binaries level unix packages 
instance program related opie software distribution starts opie clearly distinguish programs 
program command line flags show software version number quick usage summary free software foundation suite tools 
default configuration opie key calculator unix asks user secret password help prevent typing errors 
compromise people older calculators just stand typing thing twice user just press return prompted password 
provides added protection adding significant burden 
double password prompt removed compile time option 
original key password initialization program undergone 
name change brings line unix counterpart passwd programs easier remember users 
program modified operate default mode password change done time password local calculator cleartext passwords opposite old default 
new default chosen reduce risk disclosing secret password network 
generates default sequence number seed prompting user 
prevent confusion result re seed giving novice user thing think 
experienced users specify seed starting sequence number command line allowing flexibility 
shell script behaves key included transition aid 
command employs simple checks examining display environment variable try reduce likelihood accidental misuse command plaintext mode remote system 
difficult prevent forms deliberate misuse 
original bellcore key software supplied key enhanced permitted su time password scheme 
unwise environments means eavesdrop net root get system legitimate user authorised root privileges 
opie user switching program asks time password 
annoyance users truly console 
difficulty determining particular tty pty trustworthy security prevailed convenience 
practice inconvenience great users windowing system cut paste window window key generator executed 
mentioned previously opie challenge form complete command trustworthy command line environment 
example demonstrated 
trusted conditions logging opie differs logging cleartext passwords inserting copies typing secret password 
improvements serious deployment problems key software 
widespread installation difficult heterogeneous computing environments 
bsd system dependencies isolated protected suitable 
dependencies involved ioctl calls easily replaced highly portable posix compliant calls 
dependencies logging schemes rewritten portable manner 
behaviors features unique particular dialects unix isolated compile time op opie challenge command 
tions 
software works dialects unix operating system 
software implements fully supports vendor extensions system programs replaced opie counterparts 
furthermore opie source package complete source licenses needed platforms include source 
unfortunately software longer supports older bsd systems posix conformant 
believe right tradeoff permit systems protected time passwords 
programmers add support opie authentication programs easily 
opie routines available client programs isolated library start prefix opie prevent namespace conflicts 
information limits size secret password explicitly provided useful constants header file preprocessor symbol starts prefix opie prevent namespace conflicts 
design decisions transition key opie design issues surfaced 
issues received treatment opie key 
addition new features new design issues came 
opie approach design decisions err side increased security cost usability 
direct replacement bin login opie design requires replacement login program 
approach implementing time passwords login time involves directly replacing bin login 
approach second level authentication introduced invoking second level authenticator login shell normal login disclosing cleartext passwords succeeds 
second level authenticator invokes normal user login sequence user passes 
schemes time passwords usually occur second level authenticator 
advantage having replace system dependent bin login obvious sites implemented level authentication scheme 
hand pieces code potential piece code 
practice disclose user passwords considered increase security risk compared time passwords 
furthermore simpler user perform task replacement bin login 
believe replacing bin login better approach 
security vs ease direct replacement original bin login opie login program opie tends impede users name greater security 
mentioned improvements section opie binaries default paranoid behavior 
command accept time passwords difficulty determining trustworthiness tty 
login command forces user time password executed saved uid root hostname flag specifically dev console 
restrictions eliminate potential risk login switch user identities cleartext passwords general solution 
key host equivalence file lists trusted remote machines log machine ordinary disclosing unix passwords key time passwords 
compile time option 
default configuration nrl opie distribution enable capability believe generally unacceptable security risk 
user communities choose policy balance security convenience direction convenience different threat environment want entirely remove capability 
command defaults mode operation entered new opie password actual english word response 
default operation safe network assumes user secure time password calculator 
user sitting secure terminal console flag override default behavior 
internals opie contains deliberate effort avoid internal coding practices may programs vulnerable 
internet worm rey exploited string bounds overrun bug caused gets fingerd 
opie generally uses numerically bounded string manipulations strcmp strcpy reduce risk subtle security problems 
adding opie authentication services clients time passwords contrived 
philosophy hosts want foil password sniffing attacks 
section discusses add opie authentication programs allow access servers programs take advantage access clients 
functions needed opie authentication opie library offers families functions 
functions authenticating users 
functions generating time passwords transmitting time passwords readable form 
int struct opie mp char name char parameter storage stateful opie server side structure contains current opie login information user specified name 
initializes storage referenced mp 
third parameter point memory store opie challenge string form opie alg 
number seed writes 
returned lookup name successful 
return value indicates problem opening opie password file 
returned lookup unsuccessful 
returned random challenge issued potential cracker confused 
int char hostname looks host equivalence file enabled sees host name file 
returns returns 
hostname points empty string returned 
function returns support host equivalence disabled default 
int struct opie mp char response returns successfully response issued server verifies response information opie server side structure 
return values successful non authentication errors occurs authentication fails 
data inside opie server side structure rendered invalid call regardless return value 
invalidating server side structure contents forces call call indicates opie response file updated 
int unsigned algorithm char result char seed char passwd int char unsigned algorithm time password schemes implemented opie described hal compute cryptographic checksum secret password public seed 
secret password seed algorithm identifier fourth third parameters respectively 
results folded byte result stored second parameter 
result passed function cryptographic checksum computed result referred stored location 
lamport way function implements 
algorithm parameter functions isolates algorithm dependencies new algorithms added simply modifying functions 
char char bytes char server accepts opie response english words 
routine performs conversion byte quantity internally 
client computes time passwords internally needs take result convert english words 
byte quantity referenced bytes storing result returning pointer result 
example server code assuming server modularized way issuing opie challenge relatively painless insert code add opie authentication service 
places server need modified 
place user identification 
server call optionally 
determined user name 
cookie name challenge access file allowed hostname allow cleartext password 
challenge actual random 
know allow cleartext passwords 
second place password opie response issued 
valid user name response user 
cookie response allow entry cleartext allowed cleartext allow entry deny entry example client code possible programs interact authentication granting services compute opie responses program 
programs send back response server hiding details user 
gained having consult outof way calculator save time reduce frustration 
unfortunately adding opie calculation client program cause problem opie tries foil 
opie generating telnet client run local machine problem 
intelligent telnet client parses opie challenge user types secret password local telnet client sends response remote bin login program 
intelligent telnet client running remote machine remote telnet detects opie challenge asks user secret password 
telnet running remote machine secret password sent clear 
client program adds built password generation allow time password entered user possible check program running locally 
safety tips apply opie calculators 
try develop higher assurance methods determining executable telnet client running xterm local remote improve ease increasing risk disclosing secret password 
modifications opie aware clients need place immediately challenge issued opie guarded server 
server issued password request containing opie challenge 
may support someday 
parse string 
determine algorithm sequence seed opie algorithm sequence seed 
printf time password requested 
input stream printf please calculate locally enter opie reply obtain words user 
algorithm result seed passwd sequence result algorithm result words send words 
deployment machine time passwords machine broken networkbased passive attack 
machine run time password software 
obstacles hinder large scale deployment small uses opie significantly reduce risk penetration passive attacks 
example deployment small cluster consider small cluster machines allow central machine privileged access rsh purpose triggering backups 
central machine sinclair allow privileged access machine tape drive machine writes 
notwithstanding forms attack machines protected time passwords machines compromised trust allowed tape backup scheme 
helps illustrate circle trust circle secure weakest machine 
machines opie installed 
compromised quick scan hosts equiv file reveal equivalence sinclair 
rsh intruder access sinclair equivalence file contains machines 
machines network compromised intruder 
phenomenon restricted machine having opie form time passwords 
machine circle trust missing security precaution vulnerability exploited shown 
solution problem allow trust means backup scheme lost ensure machines circle take identical security precautions 
example deployment firewall popular place deploy time passwords firewall gateway 
packages ar include time password software purpose 
shows time password installed firewall gateway machine 
users outside protected domain log firewall time passwords normal cleartext passwords firewall reach machines inside domain 
theory approach internal machines passwords usable firewall prevent unauthorized access 
firewall compromised passwords useful intruder starts play machine compromised 
sinclair sinclair machine safe 
bold outline indicates compromised machine sinclair breaking circle trust small cluster 
gatekeeper cleartext passwords protected domain protected opie firewall gateway time passwords 
domain 
known cases corporate firewalls havoc subsequently internal systems 
part sites place trust security provided firewall 
defense depth implementing appropriate security precautions internal machines strategy 
barriers deployment experience shown main issues widespread opie deployment 
hinted earlier introducing users level complexity simple login 
security opie life somewhat convenient users 
issue compounded client programs impossible obtain opie challenge give opie response large characters 
client programs prevent opie working users change client program painful exercise 
second problem scaling 
currently opie method securely sharing file challenges cluster machines 
implies machine individual password initialization 
small cluster machines problem 
system workstations individual password initialization intractable 
combination kerberos campus machines opie access outside campus machines choice situations 
alternately nis des authentication share opie challenges 
third problem opie requires users local computer system available generate time passwords planned ahead generated printed time passwords carry 
issue technical problem economic 
straightforward build hand held battery powered key compatible time password generators 
immediately clear business case building product 
issues useful application generates time passwords mere calculator intelligent client determination trustworthy environment entering secret password 
low level determination tty trustworthiness potential holes applications cer environments may reveal secret password keystrokes 
problem extends scope opie time password systems solution increase effective opie 
improvement bellcore key opie improved 
difficulties mentioned earlier better addressed 
integration opie password schemes programs terminal emulators ftp clients needs done 
proposed telnet ftp options hide details time passwords easier client programs opie conventional unix passwords 
scaling problem resolved opie deployed greater ease large campuses 
noted earlier common opie key file shared securely sun network information service nis tis firewall toolkit authentication server 
possible approach keep key file central fileserver secure rpc protocols avoid tampering 
area potential improvement method calculating keys 
currently users choices md md checksums public seed secret password followed continued md md checksums number iterations 
marcus suggested method initial checksum modified secret password random file des add randomly decrypted file 
subsequent iterations 
approach defeats dictionary brute force attacks requires file stored time password calculator 
approach enabled compile time option opie 
new stronger way functions strengthen opie 
support nist secure hash algorithm sha added release opie 
summary time passwords rule machines wish defeat password sniffing attacks 
nrl opie distribution improved earlier time passwords bringing platforms 
experience software pointed better ways doing things needs done 
opie complete security solution precludes widely class attacks networked computer systems 
nrl opie version available directory ftp ftp nrl navy mil pub security nrl opie 
nrl opie version available directory soon 
acknowledgments mike harrison tim information security program office space naval warfare systems command sponsoring 
neil haller strong influence efforts bellcore key derived ongoing discussions open issues possible approaches directions key compatible time password systems 
particularly helpful marcus improve resistance dictionary attacks marshall rose showing putting basic support time password generation client software difficult 
ar frederick marcus 
network perimeter secure external access 
proceedings symposium network distributed systems security 
internet society february 
cer ftpd vulnerability 
computer emergency response team april 
ca 
cer xterm logging vulnerability 
computer emergency response team april 
ca 
cer ftpd vulnerabilities 
computer emergency response team april 
ca 
cer ongoing network monitoring attacks 
computer emergency response team february 
ca 
cer ftpd trojan horse 
computer emergency response team april 
ca 
cer ip spoofing attacks hijacked terminal connections 
computer emergency response team january 
ca 
ha neil haller randall atkinson 
internet authentication october 
rfc 
hal neil haller 
key time password system 
proceedings symposium network distributed systems security san diego ca february 
internet society 
hal neil haller 
key time password system february 
rfc 
lam leslie lamport 
password authentication insecure communication 
communications acm november 
lot mark 
internet growth january 
rfc 
pr jon postel joyce reynolds 
file transfer protocol october 
rfc 
rey joyce reynolds 
internet december 
rfc 
riv ronald rivest 
md algorithm april 
rfc 
riv ronald rivest 
md algorithm april 
rfc 
sns jennifer steiner clifford neuman jeffrey schiller 
kerberos authentication service open network systems 
proceedings winter usenix conference dallas tx 
usenix association 
ven venema 
tcp wrapper network monitoring access control traps 
proceedings third usenix unix security symposium 
usenix association september 
