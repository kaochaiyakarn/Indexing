proc 
int 
conf 
computing information multi dimensional logic programming mehmet orgun du department computing department math computer science macquarie university university new brunswick sydney nsw australia saint john canada mail mehmet mq edu au mail ca introduces extension logic programming multi dimensional logics 
multi dimensional logic values elements vary depending dimension time space 
resulting logic programming language suitable modelling objects involve implicit explicit temporal spatial dependencies 
execution programs language resolution type proof procedure called msld resolution 
axioms rules inference underlying multidimensional logic 
example programs including conway game life 
spreadsheet interface multi dimensional logic programming outlined powerful display tool advantage non determinism inherent logic programming 
non classical logics temporal modal logic successfully formalism areas including program specification verification temporal reasoning knowledge representation 
suggested temporal modal logics directly programming language applications involving notion dynamic change 
number proposed temporal modal logic programming languages programs systematically transformed sequence state descriptions interval satisfies original program temporal prolog temporal extensions logic programming 
uses modal inference rules resolution type proof procedure 
interval logic execution mechanism mixture transformation resolution 
attempts developing declarative operational semantics languages 
known order temporal modal logic incomplete important show fragments temporal modal logic operational semantics declarative operational semantics languages coincide 
showed declarative operational semantics programs coincide 
orgun wadge provided analogous results programs 
gabbay defined resolution procedure temporal prolog proved soundness 
provided tree semantics certain instances 
results suggest temporal modal logic programming feasible 
details extensions logic programming refer reader literature orgun ma provide extensive survey 
introduce multi dimensional logic programming mlp 
mlp countably infinite number dimensions modeled set integers context mlp point contextual operators defined dimension say initial refers origin dimension point prior refers previous point current point dimension rest refers point current point dimension 
mlp allows capture dynamic aspects certain problems simulation dataflow computation mesh oriented computation spreadsheets 
mlp programs dynamic relationships data formalized contextual operators 
program adapted defines predicate pascal 
program clauses interpreted assertions true points contexts 
contextual operators indexed dimension indicators natural numbers 
initial initial pascal 
initial pascal initial rest pascal 
initial pascal initial prior pascal 
pascal rest pascal prior pascal definition pascal involves contextual operators dimensions value pascal varies dimensions 
resulting program said mlp dimensional logic programming 
axioms pascal predicate pascal triangle constructed south east quadrant dimensional space apex pascal true clause 
shows approximate dimensional graphic representation pascal triangle specified pascal predicate 
triangle observed rotating degrees clock wise direction 
multi dimensional logic programs finite number dimensions translated ordinary logic programs adding extra contextual parameters predicate number dimensions effects contextual operators simulated explicitly manipulating extra parameters 
general case translation possible require addition countably infinite number extra parameters predicate predicates vary small number dimensions 
practice number dimensions program finitely program clauses finite translation possible really practical 
programs predicates different dimensionality extra parameters dimension added pascal pascal pascal pascal pascal dimension dimension pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal pascal triangle south east quadrant predicates regardless dimensionality 
translated programs executed standard prolog interpreter interpreter know specific nature parameters hopelessly inefficient interpreter inherent knowledge way contextual operators interact 
discuss underlying logic mlp 
outline syntax semantics multi dimensional logic programs summarize features proof procedure mlp call msld resolution 
forms basis implementations mlp 
give examples multi dimensional logic programming including conway game life 
outline spreadsheet interface mlp powerful tool spreadsheet computations advantage non determinism inherent logic programming 
multi dimensional logic multi dimensional logic form modal logic 
set possible contexts possible worlds modeled cartesian product theta theta theta delta delta delta 
context write hx coordinate value th dimension 
dimension contextual operators initial prior rest dimension indicator 
syntax multi dimensional logic extends order logic formation rules formula initial prior rest 
note contextual operators applied formulas terms language 
write prior rest successive applications prior rest case prior rest empty string 
write ml 
multi dimensional logic countably infinite dimensions 
mlp interested multi dimensional logics finite number dimensions instance ml logic dimensions 
semantics formulas semantics formulas ml provided multi dimensional interpretations 
multi dimensional interpretation assigns meanings possible contexts basic elements language function predicate symbols variables 
interpretations extended upward elements language satisfaction relation 
meaning formula context dependent 
restrict discussion interpretations values variables function symbols rigid 
value rigid term invariant contexts 
assume standard definition satisfaction relation terms multidimensional interpretations 
fact formula true context multi dimensional interpretation denoted formal semantics contextual operators ml follows 
interpretation ml hx formula ml 
ffl initial just 
ffl prior just gamma 
ffl rest just 
formula true multi dimensional interpretation possible contexts say true model denote fact formula true multi dimensional interpretation denote fact regard primitives assume usual definitions terms primitives 
axioms rules inference notation denote fact theorem ml 
theorem interpreted true statement possible contexts 
notion deducibility characterized terms theoremhood gamma means formula deducible set gamma formulas ml 
axioms state important theorems properties ml 
dimension indicator contextual operator contextual operator th dimension 
cancellation axioms axiom says initial truths dimension persist 
axioms capture fact prior rest complete inverses dimension 
initial initial 
prior rest 
rest prior distribution axioms axioms say contextual operators commute boolean operators 
axioms state conditions contextual operators commute 






fl fl fl contextual operator dimension variables axiom stipulates values individual variables range extensions data values intensions context varying values 
rules inference addition substitution modus ponens contextual operator rules 

initial 
prior 
rest read rules inference theorem infer initial prior rest theorems 
presentation axiomatic system ml begs question complete respect semantics scheme ml 
attempt answer question 
include theorem showing correctness soundness axioms rules inference 
lemma axioms rules inference valid respect semantics scheme ml 
multi dimensional logic programs basic building blocks multi dimensional logic program contextual units formulas form gamma atomic formula contextual operators 
program clauses goal clauses contextual units defined follows ffl program clause universal closure clause form gamma contextual units 
ffl goal clause universal closure clause form gamma contextual unit 
dimensional logic program consists conjunction set program clauses regarded axioms true contexts 
convenience standard prolog syntax 
programs mlp executed resolution type proof procedure called msld resolution multi dimensional sld resolution 
msld resolution applied set canonical instances program clauses queries 
practical purposes focus mlp finite number dimensions 

multi dimensional logic ml canonical instances formula dimension obtained systematic applications rules inference follows ffl initial ffl initial prior ffl initial rest ffl initial prior prior ffl initial rest rest ffl 
repeat process dimension turns resulting formulas dimensions exhausted 
resulting set formulas called set canonical instances assume canonical instances formula superfluous applications contextual operators eliminated cancellation distribution axioms 
ml canonical instances contain countably infinite number initial operators applied 
notion canonical instance apply formulas ml 
lemma says value formula multi dimensional interpretation ml expressed values canonical instances 
lemma formula ml multi dimensional interpretation ml 
canonical instances multi dimensional logic program canonical instances program clauses queries naturally obtained rules inference axioms 
lemmas canonical instance program clause short carry proofs canonical instances clauses results justified lemmas 
goal clauses assumed canonical 
restriction lifted goal clauses open ended 
open ended goal clauses initiate non terminating computations see section 
program ml goal msld derivation fgg consists sequence goal clauses sequence variants renaming canonical instances program clauses sequence substitutions 
step msld derivation contextual unit current goal selected unified head canonical instance program clause renaming variables canonical instance 
new goal produced replacing selected contextual unit goal premise body canonical instance substitution mgu obtained unification applied new goal 
give example msld derivation 
consider pascal program ml earlier goal initial initial rest prior pascal 
goal clause canonical ml reordering contextual operators goal respect axioms 
assume contextual units derivation canonical reordering contextual operators 
contextual unit goal selected matched head canonical instance fourth program clause unification renaming variable clause 
initial initial rest prior pascal 
initial initial rest prior pascal initial initial rest pascal initial initial prior pascal initial initial rest prior 
fourth program clause rules inference axioms fx new goal produced replacing selected contextual unit body substitution applied new goal 
select contextual unit step derivation 
contextual unit initial initial rest pascal matched canonical instance third program clause program 
initial initial rest pascal initial initial prior pascal initial initial rest prior initial initial rest pascal initial initial pascal 
third program clause rules inference axioms fy rest derivation proceed manner arrive empty goal say reach empty goal say derivation successful 
successful msld derivation called msld refutation 
composition mgu regarded computed answer substitution original goal 
answer original goal substituted 
follows initial initial rest prior pascal logical consequence pascal program 
note msld resolution complete proof procedure languages ml degenerates ordinary sld resolution 
examples programming sieve known prime number generation technique 
operates putting natural numbers onwards sieve 
perform steps ad infinitum remove smallest number sieve 
prime number remove multiples number sieve 
step naturally corresponds moment time 
notion time modeled ml positive fragment dimension 
program adapted mitchell page initial ints 
rest ints ints 
initial sieve ints 
rest sieve initial sieve smallest mod 
initial smallest 
smallest prior rest sieve sieve 
rest 
prime initial sieve 
sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve sieve dimension dimension sieve relation dimensions moment time sieve predicate represents natural numbers left sieve dimension 
prime predicate just picks smallest number sieve moment time 
shown sieve predicate represents sequence prime numbers time dimension point dimension 
sieve predicate varies dimensions prime predicate varies dimension definition involves initial open ended goal prime question produce canonical instances goal 
notion point ml direction computation important 
general rule generating canonical instances predefined order data dependencies program 
prime predicate varies dimension interested canonical instances goal form initial initial prime initial initial rest prime initial initial rest prime 
course variable assumed different canonical instance 
words goal spawns infinite sequence independent canonical instances goals models non terminating computation produce sequence prime numbers 
answers original goal answers canonical instances obtained 
goal sieve apriori ordering imposed way canonical instances produced predicate sieve varies dimensions 
user guide implementation producing canonical instances goal 
direction computation vital instance example computation negative direction produce results 
programming conway game life best examples include relative neighbors point space different moments time 
game involves possibly infinite plane divided grids 
inside grid cell resides organism may alive dead depending status immediate neighbors surrounding cells plane 
game starts initial configuration plane organisms alive 
ml plane modeled dimensions say dimensions time modeled positive fragment dimension 
supposing initial configuration game defined program describes relationships state changes game adapted program 
rest organism alive neighbors count alive 
rest organism alive organism alive neighbors count alive 
rest organism dead neighbors lonely 
rest organism dead neighbors 
rest organism dead organism dead neighbors count alive 
neighbors prior rest organism rest organism rest rest organism rest organism rest prior organism prior organism prior prior organism prior organism 
lonely count alive 
count alive 
count alive 
count alive alive count alive 
count alive dead count alive 
clause says organism alive moment point dimension exactly neighbors alive current moment 
clause covers case birth organism occur moment dead exactly neighbors alive current moment 
second clause says alive organism continue live moment exactly neighbors alive current moment 
clauses state organism dead moment lonely surrounding area 
fifth clause says organism stay dead dead exactly alive neighbors 
rest clauses define auxiliary predicates 
program possible context exactly units organism alive organism dead true 
problem produce canonical instances goal organism 
fact interested canonical instances goal difficult impose ordering way canonical instances produced 
section gives elegant solution problem 
spreadsheet interface multi dimensional logic programming visual interface enhance appreciation results computations provide aid writing programs 
dimensional programming spreadsheet interface natural choice 
consider pascal program earlier value pascal context theta corresponds value displayed cell spreadsheet 
shows result computation initiated goal pascal 
displayed theta spreadsheet 
dimensions displayed 
pascal predicate designated spreadsheet predicate predicate values going displayed spreadsheet 
origin refers left cell top row gives coordinate possible context chosen displayed position 
cells contexts pascal fails left blank 
canonical instances goal produced cells chosen spreadsheet 
example canonical instance produced cell initial initial prior rest pascal 
possible spreadsheet interface programs ml arbitrary 
allow user view multi dimensional object different angles points view 
general dimensionality spreadsheet predicate restricted 
consider program game life ml 
dimensions chosen spreadsheet display assumed time origin dimensions goal pascal pascal triangle dimensional spreadsheet dimension dimension orthogonal spreadsheet plane 
possible initial configuration game displayed 
supposing organisms dead cells outside boundaries spreadsheet second stage game displayed 
dimensions refers remaining dimensions case dimension 
canonical instances goal organism produced information provided origin dimensions 
complicated goals example goal organism rest organism 
says display values organism true values consecutive moments time 
result goal cell gamma left blank spreadsheet display origin dimensions 
goal involves variable choice variable display specific user 
origin dimensions goal organism dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead alive alive alive alive alive alive alive alive alive alive alive dead origin goal organism dead dead dead dead dead dead dead dead dead dead dead dead dead dead dead alive alive alive alive alive alive alive dead alive alive alive alive dead dead dead dead alive alive alive alive alive alive alive dead alive dimensions stages game life possible user enter specific goals individual cells overriding global goal organism 
possible exploit inherent nondeterminism logic programming 
multiple valued predicate spreadsheet predicate simply request value individual cell 
possible traditional spreadsheets 
mlp closely related intense provides sound theoretical basis language proposes novel spreadsheet interface 
proof procedure intense formalized time 
completeness result msld resolution ml idea equivalence program set canonical instances program clauses implementations mlp rely msld resolution correctness 
efficiency combine features logic programming prolog implementations features dataflow implementations associative memory tagging lucid 
mitchell reports implementation intense extension warren machine wam associative memory contexts tags atoms 
outlined evaluation mechanism logic programming implement contextual extensions mlp 
contextual extensions logic programming offer extra form parallelism call context addition standard parallelism 
believe context parallelism effectively exploited parallel implementation 
research continues direction 
du supported part nserc canada research 
due anonymous referees helpful comments 
abadi 
power temporal proofs 
theoretical computer science 
abadi manna 
temporal logic programming 
journal symbolic computation 
fujita oka 
temporal logic programming language 
wada editor logic programming volume lncs pages 
springer verlag 
ashcroft 
eduction model parallel computation programming language lucid 
proc 
phoenix conference computers communications pages 
ieee computer society press 
philippe luis nas del cerro andreas 
declarative semantics modal logic programs 
proceedings international conference fifth generation computer systems pages 
icot 

temporal logic programming complete expressive 
conference record sixteenth acm symposium principles programming languages pages austin texas january 
association computing machinery 
chellas 
modal logic 
cambridge university press 
luis nas del cerro 
system extends prolog modal logic 
new generation computing 
gabbay 
modal temporal logic programming 
galton editor temporal logics applications pages 
academic press 
hale 
temporal logic programming 
galton editor temporal logics applications pages 
academic press 
mitchell 
intensional horn clause logic programming language implementation 
master thesis department computer science engineering arizona state university tempe arizona 
mitchell 
intensional logic language intense 
proceedings international symposium lucid intensional programming arizona state university may 
moszkowski 
executing temporal logic programs 
cambridge university press 
orgun ma 
overview temporal modal logic programming 
appear proc 
ictl international conference temporal logic institut bonn germany july 
springer verlag 
orgun wadge 
theory practice temporal logic programming 
nas del cerro editors intensional logics programming pages 
oxford university press 
orgun wadge 
unified theory intensional logic programming 
journal logic programming august 
orgun wadge 
admits complete proof procedure 
proceedings sixth international symposium lucid intensional programming pages universit laval qu ebec city qu ebec canada april 

parallel logic programming intensional model computation 
phd thesis department computer science engineering arizona state university tempe arizona 
