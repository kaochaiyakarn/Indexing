techniques process model evolution epos maria letizia dipartimento di automatica informatica politecnico di torino torino italy conradi dept computer systems telematics norwegian institute technology nth trondheim norway may categorizes aspects software process evolution customization describes handled epos pm system 
comparisons pm systems 
process model epos consists schema classes meta classes model entities relationships 
underlying software engineering database offering uniform versioning model parts context nested cooperating transactions 
reflective object oriented process specification language top 
policies model creation composition change instantiation refinement enaction explicitly represented set pm automatic tools 
main tools planner instantiate tasks execution manager enact pm manager define analyze customize evolve process schema 
contents process model life cycle pm meta process evolution epos layered epos architecture spell language process tools execution manager planner change oriented versioning model epos project context methodologies change epos example problem comparisons related ff ff ae ffl software process support attracted increasing attention years 
software process total set software engineering activities needed transform user requirements operative software evolve 
composed main components software production process carry software production activities software meta process improve evolve software process 
process model description software processes composed production process model meta process model metamodel part model called model fragment 
software process modeling pm discipline describing process models 

term process model denote internal computer representation external process 
term process model denotes process description schema concrete description external process elements supported 
external process elements constitute real world production environment totally represented computerized form human behavior 
authors term process model process schema templates classes rules 
process schema provides template description group process elements software production activities products artifacts tools human roles projects organizations interconnections 
schema may consist related sub schemas describing activities process support environment consists process modeling language pml possibly library schemas expressed pml various process tools support definition instantiation evolution enactment process models 
similarly divided production process support meta process support 
underlying pml reflective schema defines production process model meta process model 
software processes typically life cycle activities requirement analysis design coding testing installation maintenance 
activities things state flux 
software prefix may omitted 
atomic majority compositions concrete activities 
activities may communicate operate input products produce output products share products 
activities may carried human role tool 
software products consist product artifacts usually documents produced software life cycle requirements design specifications source codes released programs libraries test packages bug reports documentation 
artifact may exist versions 
tool executable software program consisting set cooperating sub tools tool set 
tools invoked activities communicate 
typical production tools requirements specification tracing prototyping reuse modeling program generation compilation maintenance support documentation generation 
user applies production tools assisted enforced process support 
different kinds users programmers designers quality engineers project managers 
project context software processes occur encompasses users tools products plus process model governing 
process support environment pse system intended serve interacting computerized tools humans 
ideally serve intelligent cooperative assistant daily chores project workers 
users tend modify improve process carrying 
due better understanding creativity objectives 
may find process faulty ineffective longer valid respect requirements supporting technology 
process model continuously maintained life time 
software process model evolution act changing existing models controlled way 
includes software process customization reusing existing process model fragments adapting different contexts 
structured follows section defines process model life cycle elaborates process evolution customization 
section presents epos support process model evolution 
section discusses related tries compare epos features offered existing systems 
section indications 
process model life cycle process models produced engineering process 
engineering creating changing consists set phases called pm constitute meta process 
meta process producing process models clearly resembles software process creating normal executable software products 
pm pm analysis design pm customization pm pm pm gives feedback receives feedback receives gives feedback pm enaction gives input output specific pm pm instantiation template template generic pm instantiated enacting pm pm pm pm performance external pse provide pse general meta process 
pm meta process fig 
shows meta activities depicted boxes respective inputs outputs depicted ovals 
bold arrows denote input output relationships dashed arrows denote feedbacks meta activity ones 
initial meta activity pm provide pse 
pse offers pml precise syntax semantics libraries reusable process models pm methodology various process tools process model creation composition refinement customization instantiation enaction evolution 
second meta activity pm analysis design phase generic template process model schema 
generic schema process model waterfall spiral model projects 
third meta activity pm customization step reuses generic schema obtain specific schema accommodate project information adaptation refinement 
forth instantiation meta activity pm produces instantiated software process model concrete descriptions activities connected input output products attached roles actors tools 
model gradually enacting fifth enactment meta activity pm executes monitors 
comes sixth meta activity continuous assessment external process performance pm 
goes parallel pm enactment 
assumption executed strict water fall fashion components process model 
pse allows distinction formalization meta activities 
evolution process models created customized different project contexts 
means process models contain certain number parameters facilitate reuse customization 
customization instantiation sufficient 
fact enaction external software process assessed correctness performance 
evaluation produces feedbacks earlier meta activities 
may result changes instantiated template process models generic specific pse 
changes driven feedbacks produced enaction level anticipated model designer 
may regarded process model maintenance performed meta process 
solving problem process model evolution requires answer questions process model fragments changed 
analyze guide change 
fig 
answers question model fragments change 
depicts different categories process fragments 
lowest level instantiated enacting model fragments 
lines denote data flows product fragments circles activity model fragments rectangles 
level shows generic specific schema 
consists sub schemas relationships constraints 
top level meta model including meta schema encoded rules procedures process model definition manipulation 
software product tools human roles activity bla policies model creation composition refinement customization instantiation enaction evolution instantiated enacting process model meta model schema generic specific schema process model fragments candidates change 
model fragment fig 
may prove inadequate need changed 
instantiated enacting process model starting bottom level fig 
product model fragments changeable evolution products main aim external software production environment 
additions changes activities difficult may impact existing 
changes tools human allocation considered 
changes result feedback respective changes process schemas temporary changes patches instantiated enacting model 
generic specific schema changes generic specific process schemas consist changes descriptions single items constraints interactions 
items level describe items instantiated enacting process model level change item may impact items level items lower level instantiated enacting process model 
meta model schema meta model may inadequate due feedbacks lower levels 
changes delicate impact way items manipulated lower levels meta model level change procedure regulating meta model changes 
traditionally configuration management cm needs pm control activities related change control change propagation consistency maintenance auditing re building 
hand entire process model constitutes versioned composite object cm control 
additional problems evolving enacting process models 
fig 
gives cm perspective pm change 
terms revision variant branch classical cm semantics 
process model may modified sequential revisions alternative parallel variants evolve independently 
revision variant commonly termed version 
horizontal dimension pm created revision pm 
vertical dimension pm pm obtained alternative refinements pm 
technology facilitate change model fragments varies available different categories fragments 
underlying pml decisive 
reflective pml pse architecture generally advantageous handle model changes 
process relevant information explicitly uniformly manipulable lisp metamodel explicitly represented reasoned enacted evolved controlled way 
proper access control course needed general database operations 
define skeleton meta process process model changes submit request model change assess validate simulate request reject accept possibly adjusted change request carry accepted change propagate subset affected internal fragments possibly external process elements reestablish internal external consistency 
policies model creation composition change instantiation refinement enaction software product tools human roles activity bla instantiated enacting processes policies model creation composition change instantiation refinement enaction software product human roles activity bla instantiated enacting processes software product tools human roles activity bla instantiated enacting processes policies model creation composition change instantiation refinement enaction software product tools human roles activity bla instantiated enacting processes policies model creation composition change instantiation refinement enaction software product tools human roles activity bla instantiated enacting processes pm pm revisions pm pm pm revisions variants variants meta model schema meta model schema meta model schema meta model schema generic specific schema generic specific schema generic specific schema generic specific schema generic specific schema policies model creation composition change instantiation refinement enaction meta model schema changing process models 
meta process encode aspects change methodology guide process model evolution 
methodology independent actual pml process tools 
change propagation may eager changes propagated immediately opportunistic changes propagated convenient time lazy fragment checked consistency access 
facilitate precise forward analysis propagation similar backward traceability need explicitly represent external process elements dependencies internal process model 
epos epos process support environment offers pml called spell software process evolutionary language initial process schema set process tools 
epos internal process model network activity descriptions tasks linked descriptions tasks products tools roles 
activities interact tools humans 
process model schema represented set entity relation classes constitutes template fragments 
meta model part process schema represented set meta classes 
instantiated enacting process models consist instances representing external process elements 
epos model fragments meta classes classes instances entity relation 
main process tools operating models pm manager execution manager process engine ai planner versioned object oriented database 
layered epos architecture rely object oriented database adele pml layer underlying database 
epos extends having layers database 
epos layers client server change oriented versioning context long nested cooperating transactions 
offers structurally object oriented data model ddl define entity binary relation classes entities objects unique immutable identity oid 
entity root class 
entities relationships scalar attributes inheritance 
entities attributes describe external files 
data model close object relation model suggested 
free standing prolog dml offered 
entities relationships classes meta classes class descriptor instances stored database uniformly 
epos expert system program norwegian og system development 
epos literature called types adhere omg terminology 
reflective object oriented pml spell unifies extends underlying ddl dml offers class level attributes instance class level procedures 
active procedures triggers may defined 
meta classes smalltalk store information 
epos layer supports meta activities analysis design pm customization pm evolution pm manager 
tasking framework concurrent enaction process models 
done execution manager interprets special class level attributes defined predefined task entity class definition shown fig 

execution manager cooperates closely planner incrementally re instantiates task networks external tools 
epos layer supports meta activities pm enaction partially pm instantiation application specific process models domainspecific include schemas task templates instances production tools 
instances constitute network tasks products connected production tools human resources 
relationships describe dataflow tasks products commonly 
fig 
shows meta activities fig 
implemented epos process tools 
spell language spell persistent object oriented language reflective architecture 
classes model structuring fig 
displays system defined predefined classes showing layering section 
spell supports levels abstraction composition model external process elements 
supports definition classes class level part enabling specific general information naturally represented 
class level relations explicitly modeled model subclassing internal relations encode formals dataflow task decomposition 
relation class instances pm manager planner execution manager generic pm specific pm pm pm pm analysis design pm customization pm pm pm provide pm environment pm gives feedback receives feedback receives gives feedback pm instantiation pm enaction gives input output pm tools spell generic classes pm manager specific classes pm manager planner execution manager pse pm pm performance external actual meta process epos 
entity class descriptor data descriptor task descriptor task entity data entity pm entity develop design compile source code design doc relation database types oo extensions tasking framework general project classes formal inputs formal outputs decomposition formal inputs formal outputs decomposition decomposition project epos classes 
formal inputs defined task descriptor data descriptor may instantiated task entity data entity subclasses 
inheritance protection single inheritance provided properties attributes procedures 
subclass may redefine attributes instance class level procedures 
kinds inheritance available class level properties procedures redefine append concatenate 
redefine means overwriting default append applies class level attributes means logic conjunction predicates fig 

concatenate inspired simula inner mechanism 
means code superclass defined step code subclass defined step inner step concatenated subclass code step step step 
redefined procedures subclass may inherited redefine concatenate 
attributes procedures declared private public 
spell interpreter dynamic binding access binding procedures attributes instance class level dynamic smalltalk 
implemented spell interpreter consists prolog predicate caller called 
predefined dml procedures read write read relation write relation procedure parameters accessing instance class level attributes caller called read attributevalue 
related entities may accessed caller called 
task entity class simplified definition basic task class fig 

generally task actual input output parameters facilitate dataflow chaining 
classes product parameters specification prolog procedures parameters prefixed mandatory input parameters gamma output parameters 
constrained formals class attribute 
likewise decomposition class attribute describes classes possible subtasks 
static dynamic pre postconditions code script defined 
meaning class level attributes explained subsections 
task subclasses empty decomposition model low level activations atomic tools 
classes serve tool envelopes 
task subclasses nonempty decomposition model high level activities main delegated generated subtasks 
class entity created 
start restart 
true inheritance append true inheritance append code inner inheritance concatenate true inheritance append true inheritance append formals 
decomposition repertoire executor nil role nil 
classid 
task entity class 
process tools execution manager planner described 
versioning model introduced 
pm manager described 
execution manager tasking realized execution manager utilizes class level attributes ffl pre dynamic specifying condition enact instance task class 
condition combined local task information task state goal directed vs opportunistic execution 
ffl code sequential program perform intended job task class 
enaction task means interpretation code 
atomic task class compile code contains relevant actions 
composite high level task class develop middle part code empty causing planner invoked instantiate subtasks 
ffl post dynamic treat errors 
execution manager maintains attribute task state line fig 
value domain created planner instantiation waiting pre dynamic condition active code enaction waiting children denoting expanded planned composite task waiting children terminate forked denoting atomic task waiting associated operating system task terminated 
attribute executor refers logical name tool execute task role refers role responsibility description generic human actor software developer 
planner ai planner technically procedure pm 
implicitly incrementally invoked execution manager detail composite task time 
planner automatically generate new subtask network composite task 
epos planner uses domainindependent non linear ai planning algorithm tweak 
dynamic incremental instantiation achieved collaboration planner execution manager 
planner starts composite task desired output goal 
applies backward chaining hierarchical decomposition combined domain specific knowledge build proper subtask network plan ai terms 
planning process schema knowledge base representation model product structure world state description 
planner consists layers core layer domain independent planner outer layer domain specific pm 
planner transforms class level attributes pre post static formals decomposition task class ai pre postconditions nodes core layer 
transformation considers product structure 
planner utilizes class level attributes ffl pre static post static express necessary conditions hold respectively enaction task 
ffl formals specifies legal product classes actual parameter instances inputs outputs task class 
ffl decomposition specifies pool candidate task classes subtasks composite task 
class level attributes specify legality constraints structure task network 
clearly changes schema attributes product structure imply replanning 
incremental algorithm replanning 
change oriented versioning model describe transactions versioning 
transactions offers long nested transactions checked workspaces 
transactions may survive application sessions represented special transaction objects database connected project tasks 
transactions may started committed aborted interactively 
database operations performed transaction context 
transaction selects current version visible sub database 
specifies scope local changes 
local changes visible parent transaction children commit possible conflicts resolved 
change oriented versioning implements change oriented versioning cov 
cov considers set physical changes set related fragments logical functional change 
changes may result sequence update jobs transaction mechanism 
cov largely independent data model enables uniform versioning entities relationships including schema level information 
cov controls version space granularity data 
cov normal checkout workspaces long transaction context 
checked configurations bound product space product model entities relationships 
logical change described boolean global option 
logical changes freely combined possibly constrained stored version rules predicates cov generalizes conditional compilation entire database 
traditional versioning models changes deltas computed differences versions atomic data objects 
cov version explicit object evaluated combination selected changes deltas 
applies granularity atomic objects subsystems configurations entire databases 
traditional versioning models version tree graph versioned object creating version group similar objects 
making version selections combine merge changes done different parts branches version tree automatic 
cov changes history principle freely combined 
version tree flat version history low level recorded version rules regulate valid version combinations see 
version selection cov specify option binding true false values relevant options 
binding called version choice select visible version entire database 
selection product space done 
inverse binding sequence cm systems adele intermixed product version binding sequence 
transaction give filter reading database 
give possibly partial option binding called ambition writing back database 
ambition specifies scope changes done transaction 
versions may affected local changes 
changes automatically propagated merged sub databases 
ambition lock part version space concurrent updates 
ongoing transactions overlapping ambitions sub products encourage sibling transactions cooperate avoid merges loss information write rollback 
spite similarities cov traditional versioning main difference lies intentional flexible version selection logical changes explicit representation version space locking versioning orthogonal stored data granularity 
epos project context infrastructure epos process support tasks follows long transaction associated project task 
start transaction defines database version entire process model local project governing started 
may require negotiation delegation parent project incoming change request 
local project task planner generate infrastructure subtasks 
pm manager refine adapt process schema inherited parent project specific 
results appropriate class descriptions local activities products production tools roles 
facilities impact analysis changes may modeled procedures special task classes 
schema evolution done incrementally 
cooperation protocols negotiation propagation rules patterns possible overlapping neighbor projects transactions may established 
relevant workspace files checked database 
subtasks gradually re planned re enacted respectively meta activities pm pm 
process depends actual production activities product structure changes class changes 
local project task check modified workspace files database close committing database transaction 
project manager parent project notified 
methodologies change epos process model stands local project context 
meta process changing fragments model occurs context 
changes useful may propagated projects 
define process model inconsistent meta classes classes instances may lead unpredictable behavior pm tools 
task class pre dynamic condition execution manager able enact corresponding tasks 
changing instantiated enacting models instantiated enacting models consist objects representing products activities tools human roles 
epos relies cm facilities offered update product configurations 
tasks may manipulated may created started suspended restarted killed 
tool descriptions may changed new switches may added executable files may substituted 
hard soft schema changes distinguished 
hard changes imply changes structure instance level attributes subclasses 
soft schema changes process specific ones modify behavioral part class 
hard changes prohibited 
may create new subclass actual class explicitly convert subset instances new subclass definition 
changes instance may affect instances related may leave system inconsistent state 
relation instance connecting task parent task deleted child task execution may lead unpredictable results 
updates prohibited responsibility privileged user performing changes reinstate system consistency 
distinction different kinds users relative access right mechanisms design 
changing process schemas schema change request actual schema class change distinguished 
fig 
depicts evaluating impact schema change request optionally performing change class definition 
feasibility requested class change evaluated possible impact process model 
class change may affect extent class instances modified class related classes modified class extents 
related classes class subclasses entity classes related class level relations formals 
schema change request issued pm manager checks possibly affected related classes connected class relationships 
change request class impacts analysis extent change automatic subclasses instances conversion create subclass sc leaf class 
duplicate inheritance tree sc convert instances user decides start dialog meta process process schema change 
related classes instances possible effects requested change 
requested change impact pm manager free perform requested change 
existing instances subclasses automatically converted new definition 
requested change impact actions needed reinstate consistency possible consequences displayed user dialog started 
user may decide create new subclass refining class subset extent old class affected 
existing instances may converted new subclass definition possibly adding initializing new attributes 
modified class leaf node inheritance tree subclasses inheritance tree duplicated new created class 
course disadvantage refining subclassing versus modifying 
hand advantage old class retained conversion existing instances new definition may occur selective controlled way 
user wants modify class despite suggested impact interacts system selectively perform suggested actions 
interactive dialog user performed dialog window composed bottoms menu displayed fig 

changes allowed violate class invariants ffl class name unique projects 
ffl class super class single inheritance ffl class super classes instance visible actual project 
ffl likewise version visibility related entities relationship 
ffl likewise related classes mentioned decomposition formals exist 
task classes distinguish soft class changes ffl changed code assumes task instance currently enacting affected tasks passive 
affects execution manager 
ffl changed pre dynamic post dynamic technically done soon task instance evaluating 
affects execution manager 
ffl changed formals decomposition pre static post static forces planner reexamine affected tasks task network check constraints possibly rebuild parts network feasible 
ffl changed procedure assumes task executing 
changing meta schema knowledge create subclass class change class create instances convert instances new behavior defined meta class defined meta schema 
happens time create class want bother reuse maintain 
redefine class create class change instance convert inherited superclass 
class useful class level procedures telling change reuse class may added 
pm manager implementation pm manager charge defining refining modifying classes 
main procedures implementing pm manager class create class change instance convert restart 
procedure class create procedure class create defined root entity class possibly redefined subclasses implements meta activity pm pm concerning schema 
corresponds definition compilation 
pm manager invokes class create superclass subclass data parameters ffl name new subclass ffl definition new instance level attributes ffl definition new instance level procedures redefinition existing ones ffl redefinition values pre defined class level attributes ffl definition new class level procedures redefinition existing ones 
definition new subclass course affect definitions existing classes 
procedure class change procedure class change attempts update procedures class level attributes class parameters class create 
instances old class implicitly converted instances modified class 
procedure class change change pm entity subclass tries preserve consistency system state 
class change may affect related classes modified class instances modified class including instances related classes 
procedure class change operates single change pm entity subclass 
planner execution manager relies class level attributes manage process model instantiation enaction changes may lead inconsistent situations 
procedure class change charge evaluating impact proposed change find actions necessary put system consistent state 
proposed actions may deep impact dialog started user may choose carry proposed actions cancel change request 
fig 
shows template model fragment procedure class change implements modification dynamic pre conditions 
lines specify instance class state read 
task state waiting created instance affected 
means pre condition evaluated true pre condition re evaluated line 
evaluation leads true means task affected task restarted 
procedure restart procedures restart heavily pm manager stopping converting restarting instances evolving classes 
instance level procedure restart suspends done task instance put state initiated 
procedure rollback actions done task tasks operate data produced 
performing possible rollback actions means reset output data state task started kill possible forked operating denote instance class procedure invoked 
sender instanceof read member waiting created 
sender notify task state affected member active forked terminated 
eval 
sender notify task state affected restart sender notify task state restarted fail write sender notify done 
class change procedure dynamic precondition 
restart sender read member created waiting 
true active 
reset fail true 
subtasks restart fail reset fail true forked 
read pid pid reset fail true terminated 
reset fail true write waiting 
procedure restart 
system jobs eliminate side effects associated code enaction 
conditions planner perform automatic instantiation hold 
possible determine automatically effects code enaction 
assume instance level procedure fail specifies actions undo results code part 
implementation procedure restart fig 

procedure restart task state possibly backtracks actions performed task 
procedure restart inspects state line 
state created initiated action taken procedure fail invoked 
procedure fail may alternatively implemented interaction user 
instance wise cancel effects performed long transaction tasks 
example problem give epos solution problem software process model change proposed th international software process workshop 
suppose process schema includes coding task class stating possible coding design approved 
suppose decided tighten schema requirements detailing coding design approved coding begins 
furthermore assume schema change affects currently instantiated enacting process model fragment task object 
example explore possibilities discussed instance affected project class coding subclasses 
epos means dynamic pre condition coding class modified 
requested change violate consistency constraints class coding may changed modification 
show problem solved epos class change overwrite class create subclassing fig 
depict scenario parallel pmc exist pma 
class coding originally defined context project pma 
set classes created project pma available pmc 
process schema change performed subclassing class create pmc overwrite class change 
entity data entity coding coding des doc coding coding instances classes pma pmc instances instances task entity entity task entity data entity coding classes sub coding entity task entity data entity classes des doc des doc des doc des doc refinement variant new subclass changed class coding des doc coding scenario subclassing versioning 
knowledge process model database pma customized creating subclass sub coding retaining classes defined 
pmc class definition changed 
lastly subclass sub coding created class coding existing instance implicitly converted instance new subclass 
hand class coding updated pmc existing instance automatically converted instance modified class 
cases task may restarted 
fig 
shows change dialog window displayed case dynamic pre condition class coding requested changed coding instance existing subtasks class edit class compile 
displayed fig 
suggested actions updating static pre conditions class coding restart edit compile testing instance reset edit compile output 
user may may choose suggested actions 
concerning re setting products chosen delete file attributes produced automatic tools reset state objects 
done automatically destroyed responsible user notified inconsistencies may introduced 
input output subtask done cancel write static pre restart restart develop design coding testing review edit compile restart reset reset epos task network change dialog window 
comparisons related prototyped documented years experiments realistic external production environments reported process weaver 
addition large examples run development teams assist maintaining adele marvel 
main characteristics epos system compared offered systems 
comparison process take parameters general process evolution issues specific epos solutions 
general issues reflection meta process change assessment simulation validation process evolution may happen items change taken consideration 
specific epos choices object orientation database support versioning automatic incremental instantiation planning considered 
reflection meta process epos explicitly represented meta classes 
strongly influenced meta class mechanism smalltalk 
clos offers reflective features pre defines procedures change class definitions convert affected instances 
similarly self provides rules control evolution 
offers reflection marvel fixed meta process expressed non reflective language 
spade offers task level reflection 
laws control evolution product rules may defined darwin 
reflection manage process model evolution new epos exploits integrated object oriented architecture managing class changes 
change assessment simulation validation relationships control propagate impacts change 
moment epos provide facilities simulation changes weak mechanisms formal verification changes 
marvel merlin offer formal verification support perform simulations 
process evolution may happen process model changes fall main categories refinement customization enaction process weaver correction enaction marvel spade epos 
implement correction enaction late dynamic binding rebuild mechanisms needed 
generally second category includes 
items change enables define metarules changing enaction state 
done epos 
arcadia add triggers turn predicates runtime epos offer possibility imposing global constraints predicates 
adding new production tools easy systems corresponds tool installation subsequent addition tool envelope 
tool envelope corresponds task class epos 
change tool interface remove harder may lead loss functionality 
explicit representation team structure merlin allows change 
integrate external project management tool perform actions process weaver 
epos offer initial functionalities integrated project management tool 
process model schema fragments items change epos spade prism enables change enacting models schemas 
prism offers dependency structure describing change items change structure describing change related data 
structure epos instances classes meta classes connected relations resembles prism dependency structure epos manage change related data maintenance reports history changes 
prism epos provides way incrementally defining refining class level procedures implement changes 
object orientation exploiting object orientation closest epos ps algol partly marvel 
adele hybrid object oriented model run time binding delegation product project contexts customization 
epos derived dynamic binding smalltalk gain flexibility 
database support versioning partially proprietary object management systems marvel arcadia chiron 
existing ps algol pcte alf spade ldl 
adele epos systems rely fully versioned oms integrating cm pm 
exploit triggers nested transactions 
adele apply versioning schema product descriptions adele schema bound substitutable project contexts classes order objects 
planning epos planner uses domain independent non linear planning incrementally re construct task networks 
mentioned inspired tweak 
goal oriented ai techniques grapple similar purpose epos 
spade uses reflection incrementally construct task network 
facilities incrementally rebuilding replanning network product class changes 
epos template process model consists process schema classes meta classes instances describing external process entities relationships 
instantiated enacting process model represented task instances linked product tool role instances 
originality epos approach process model evolution lies parts uniformly versioned database store entire process model offering nested cooperative transactions pm control reflective fully object oriented data model accessible spell flexibly define evolve process schema instances planner incrementally dynamically re generate task networks 
clientserver protocols sun rpc 
server implemented lines client lines 
offers prolog interface 
pm tools including planner implemented swi prolog lines 
user interface uses pce prolog graphical package 
epos demonstrated set examples covering software systems dozens modules including parts example 
starting apply epos prototyping external applications domains norwegian software companies 
facilities process model evolution judged crucial test examples 
epos system demonstrated open ended versus platforms application domains lacks distribution federation aspects 
cov promising unproven technology 
epos pm portable top object oriented different versioning model 
specific drawbacks epos process model evolution support mention poor support assessment simulation validation changes 
addition exploitation cm techniques process evolution improved 
try rectify drawbacks particular emphasis change assessment simulation validation 
high level pml supported small case tool pm design extension pm manager 
relation processes meta processes better elaborated conceptual technical level 
riddle fundamental software process concepts pp 

process cycle software engineering journal vol 
pp 
sept 
conradi fuggetta framework process concepts 
ed proc 
sept trondheim norway springer verlag lncs pp 
sept 
feiler humphrey software process development enactment concepts definitions jan 
pages second version 
lehman belady program evolution processes software change 
academic press 
environment evolution prism model changes ieee trans 
software engineering vol 
se pp 
may 
feiler configuration management models commercial environments tech 
rep carnegie mellon university software engineering institute pittsburgh pennsylvania mar 
pp 
conradi liu initial software process management epos software engineering journal special issue software process support vol 
pp 
sept 
conradi nguyen design implementation spell language software process modeling evolution 
ed proc 
sept trondheim norway springer verlag lncs pp 
sept 
shu acquiring experiences modelling implementation project life cycle process software engineering journal special issue software process support vol 
pp 
sept 
estublier melo software process model space control adele system leon osterweil ed proc 
nd int conference software process march berlin 
ieee press pp 

lie conradi 
karlsson change oriented versioning software engineering database walter tichy ed proc 
nd international workshop software configuration management princeton usa oct acm sigsoft software engineering notes pp 
nov 
gulla 
karlsson yeh version descriptions epos software engineering journal vol 
pp 
nov 
object management group object services data model request information sept 
rumbaugh relations semantics constructs object oriented language proc 
acm sigplan conference object oriented programming systems languages applications oopsla florida pp 
oct 
acm sigplan notices dec 
goldberg robson smalltalk language implementation 
addison wesley 

dahl nygaard simula information common base language tech 
rep norwegian computing center oslo 
liu software process planning execution coupling vs integration proc 
caise rd international conference advanced information systems trondheim norway may andersen jr lvberg eds pp 
lncs springer verlag 
chapman planning conjunctive goals artificial intelligence vol 
pp 

steel integrating planning execution monitoring proc 
aaai pp 

liu conradi automatic replanning task networks process model evolution epos ian sommerville ed proc 
th european software engineering conference esec frg 
forthcoming springer lncs 
sept 
kellner feiler finkelstein katayama osterweil rombach software process modeling problem aug 
process weaver adding process support unix leon osterweil ed proc 
nd int conference software process berlin 
ieee cs press pp 
mar 
example process change 
ed proc 
sept trondheim norway springer verlag lncs pp 
sept 
kaiser scaling rule development environments international journal software engineering knowledge engineering world scientific vol 
pp 
mar 
keene object oriented programming common lisp 
addison wesley 
ungar smith self power simplicity proc 
acm sigplan conference object oriented programming systems languages applications oopsla florida pp 
oct 
acm sigplan notices dec 
fuggetta computational reflection software process modeling slang approach proc 
icse baltimore usa ieee cs press forthcoming may 
minsky law governed systems software engineering journal vol 
pp 
sept 
emmerich schafer wolf merlin knowledgebased process modeling pp 

software process management environment pp 

katayama hierarchical functional software process description enaction proc 
th int acm sigsoft ieeecs conference software engineering pittsburgh pa pp 

jr heimbigner osterweil language constructs managing change process centered environments proc 
th acm sigsoft symposium software development environments irvine california 
acm sigplan notices dec pp 
dec 
stein delegation inheritance proc 
acm sigplan conference object oriented programming systems languages applications oopsla florida pp 
oct 
acm sigplan notices dec 
meta case environment software process centred case environments proc 
int conf 
advanced information systems engineering caise manchester uk 
springer verlag lncs pp 
may 
ciancarini software process enactment proceedings th acm sigsoft symposium software development environments irvine california pp 

huff lesser plan intelligent assistant supports software development process proc 
rd acm symposium software development environments boston massachusetts pp 
nov 
fuggetta conradi eds proceedings european workshop process modeling milano italy may italian society computer science press 
epos papers tse main tex may 
