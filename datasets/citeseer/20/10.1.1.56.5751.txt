independently extensible systems software engineering potential challenges clemens szyperski school computing science queensland university technology brisbane australia szyperski qut edu au component software open systems document user interfaces areas traditionally addressed software engineer 
claim traditional software engineering methods life cycle models programming languages system architectures insufficient facing new trends 
main points criticism state unavoidable facts life extensible systems principle modular final form final integration phase subjected final total analysis exhaustively tested allow mutual independence extension providers 
hint possible solutions part problem set 
particular investigate problem dependence global analysis effects cartesian products design space resulting design constraints programming languages exemplary important tool software engineer 
relevance observations underlined examples drawn contemporary programming languages methods got wrong 
keywords independent extensibility cartesian products global analysis 
wave new software technology take component software executing open systems 
promise exciting grounds general document paradigm users see services provided directly represented document parts 
document parts turn supported software components need user components support document parts needed 
proceedings th australasian computer science conference melbourne australia january february 
hand documents form basis information interchange document system expect user document contain parts require support additional components 
components need retrieved integrated running system need compensated case unavailability 
traditional systems catered needs extensibility admitting addition new applications 
currently observe strong trend industry move extensibility finer level granularity 
adding applications desire add small components replace notion isolated applications 
leading examples microsoft ole object linking embedding component integration laboratory 
underlying component models microsoft com compound object model ibm som system object model 
expected trend continue grow strength time replace traditional application technology 
happen fastest client computers running theshelf code intensive graphical user interfaces 
followed customised client software server software 
natural evolution correlates policy industrial organisations consider client software far long lived stable server software server data bases particular 
trend software component industry advantages 
component manufacturers concentrate efforts local strengths users expect richer software space 
component integration configuration spawn entire industry replacing today shelf monster packages shelf standard configurations open fine tuning demanding user 
case expected times longer point constructing single component 
reduction feature space really needed individual user reduce training costs improve productivity 
handle requirements making systems truly extensible required fulfill promise component software 
remainder organised follows 
section essential ingredients extensible systems investigated 
turns object oriented programming ideal support extensible programming outlined section sufficient leading definition specific notion object oriented section 
particularly important generic problems global analysis cartesian products introduced sections respectively 
section covers wide range established approaches problems conjunction extensibility 
section presents particular solutions hints open problems 
essential ingredients system allows components plugged running system needed called extensible 
technical definition general ground definition provided 
try challenge definition extensibility really mean 
assembly programs extensible sense better 
extending operating system loading application quite old achievement 
hand arbitrary code manipulations allowed arbitrary extensions easy 
hand extensions limited single level fixed interface os extended applications restricted model extension interaction applications operate files managed user things easy understood 
precise definition extensibility take interaction mutually independent extensions account 
call system independently extensible cope late addition extensions requiring global integrity check 
consider independent extensibility 
easy see useful definition 
consider case base system gets extended different vendors 
course client expects cases individually purchased extensions go 
naturally independent extensions may exclude example providing alternative solutions problem 
conflict need choice obvious client 
oldest extensible systems operating systems 
loading new application extends functionality system need check combination concurrently loaded applications operating system 
course real world problems terms complex installation configuration procedures 
extending systems adding new application operating system works 
points noted looking operating system achieves extensibility system ffl units extension 
ffl presence extension preclude affect availability extension 
ffl polymorphic base 
ffl late linking mechanism 
ffl centralised automatic management resources 
ffl interface operating system services 
case modern operating systems extended applications points hold 
applications units extension applications 
operating systems provide simple polymorphic base means untyped file systems untyped process identifiers applications share common base despite varying nature 
late linking extensions performed loader operating system uses mechanisms cleanup process termination provide centralised automatic management resources 
points quite general claim form minimal basis essential ingredients extensible system 
oop gets close dream software component industry old far largely remained dream 
object oriented programming promises foundation technology component industry 
pure object oriented programming 
recall byte cover title object oriented computing failed 
component software succeeding 
claim object oriented computing failed point 
fundamental problem mistaken emphasis software reuse 
effective reuse source code class hierarchy increase productivity controlled carefully 
source code reuse small project groups productive reuse organisations fatal 
current technology allows describe interfaces interface definition language idl intricate self recursion patterns injected code inheriting class 
result inherited code complete documentation 
current technology impossible fully document classes inherit code 
admitted class library vendors routinely passing clients source libraries 
class implementation complete documentation decoupling clients providers clearly defined interface failed 
particular evolution class libraries easily leads disaster 
programming contract designed lift interfaces signatures adding pre post conditions help fully cover self recursion patterns 
current technology case 
point useful step back second look idea component software compare established component industries engineering disciplines 
code inheritance class libraries similar copy paste applied blueprints 
way component industries 
component providers rely reuse blueprints internally rarely sell designs 
sell components 
words objects classes get sold 
components different vendors interact nicely needs standards 
standards state general interfaces specific components comply 
standard type class 
code inheritance object oriented programming introduces dynamic polymorphism inclusion polymorphism subtyping capability typed variable objects type subtype thereof 
important concepts important object oriented languages 
note languages smalltalk explicit types 
smalltalk fully polymorphic variable hold possible objects 
traditional coding practice copes variants explicit case analysis 
obviously object oriented programming relies code inheritance delegation build new objects old ones close required new ones 
discussion irrelevant code inheritance delegation 
see section brief explanation self recursion 
extensible 
adding new variants requires upgrading points system analyse cases 
dynamic polymorphism simply required solve problem reasonable way 
polymorphic program specific substituted general 
turn extensions plugged general behaviour expected 
clearly notion subtyping manifest todays object oriented languages weak 
concept substitutability supported explicitly programmer encouraged limit subtyping cases truly allow substitution special general required behavioural compatibility usually enforceable 
research tries close gap liskov wing 
aspect granularity extensions 
extension comprises single object 
usually extension adds subsystem 
proper language support modules subsystems helpful resolve configuration problems 
important aspects isolation encapsulation entire subunit interference units vendors controlled statically inspecting actual merger 
traditional languages fail support dynamic polymorphism objectoriented languages fail support static encapsulation units comprise classes objects 
classes units extension languages fail provide semantical guarantee coherence actual units extension need gathered extra lingual means 
subtle extensibility base fine grained components leads interaction components level individual objects 
extensible system way individual component know object released 
way extensible system needs support garbage collection language support explicit deallocation objects belonging foreign component better fully rely garbage collection 
com extend som counting control programmer get approach safe simple mistakes lead known problems dangling memory leaks 
additional problem counting cope cyclic components mutually referring mutually keep counts zero component referring 
resolving cyclic conflicts fully left programmer 
extensible object orientation global analysis problem definition object oriented wegner prevent enforce construction extensible systems extensibility separate design dimension needs considered carefully leading term extensible object orientation short szyperski 
added requirement system obvious system needs extensible multiple dimensions extensions interfering 
requirement difficult reduce hard technical definition 
surprisingly simple necessary sufficient condition enable design implementation languages separately compilable principle 
preclude global analysis run time compilation improve performance 
require language provide units separate compilation check system increments 
key requirement checked unmodified unit shall circumstance invalidated merely adding unit system 
extensible system complete 
methods require inspection parts system global analysis applied independently extensible systems 
section presents series examples methods requiring global analysis 
extensible system interfaces gain dominant role 
traditional systems interface hides implementation separates clients implementation provider 
interface implementation usually correspond system 
extensible system interface may implemented number providers implementations may available system running 
interfaces units extension extensible system fully distinct interface provider interface client 
interfaces exist right fully reconstructed inspecting particular provider 
consequence interfaces strong barrier analysis aiming system correctness 
princi wegner definition essentially requires notions objects classes objects sharing common implementation inheritance relations classes traditional code inheritance objects delegation 
multi lingual environment languages need considered cross individual components 
precisely parts falling certain category types 
ple system perform certain global analyses run time binding client provider established 
relying late global analysis verify correctness properties equivalent dynamic type checking detection errors occur late 
final integration components extensible system left customer errors caused assumptions global properties statically enforced occur product component delivery 
noted particular implementation strategy may perform late global analysis improve performance resource utilisation 
extensible systems face design implementation problem limited scopes analysis 
possible solution section 
look second major problem 
cartesian product problem despite general setting key problem designer extensible system face avoidance cartesian products individually extensible aspects system surprising hunting single phenomenon turns catch technical obstacles preventing independent extensibility 
example consider text editor extended installing different text models different implementations text abstraction 
assume text abstraction merely consists operations ffl new text ffl append text theta text text ffl write text theta character text ffl read text theta position character eot nullary operation new creates new empty text 
append operation takes texts returns modified second appended 
write operation writes character text 
read returns character text position special text symbol 
obviously problem implementation texts 
soon system enables installation text implementations coexist problems occur 
cartesian product sets set tuples representing possible combinations elements sets 
cartesian depicted discrete dimensional space points 
assume indexing scheme details relevance 
new operation needs know implementation creating new text 
append poses tricky problem 
text fragment extracted text appended implementation may vary fact list possible text implementations open 
new problem solved providing configuration mechanism allows clients indirectly call implementation specific new operations 
typical approach factory directory objects szyperski 
append problem remains 
separately extensible argument types append span cartesian product 
depicted complete implementation append need consider entire matrix pairs text objects possibly separate implementation 
reasonable assume extensions know base type extensions support homogeneous operation cases marked theta 
reasonable extension knows extensions corresponding heterogeneous non base cases marked 
generally pairs fall category 
cartesian product created independent extensions 
shows combinations types need considered implementing binary operation objects extensible type 
independent extensions common base type note number extensions may exist 
cartesian product problem expected provide implementation binary operation specifically caters heterogeneous cases marked 
closed system number ways approach cartesian products 
authors cardelli distinguish closed sealed systems closed system extended explicit declaration sealed system extended anymore 
distinction closed systems considered non extensible 
simplest explicitly programmed nested case analysis 
avoid maintenance problems advanced approaches operator overloading ada multiple dispatch methods generic functions clos demichiel gabriel 
approaches rely inspecting entire space combinations cartesian product deciding deal individual case 
case extensible system unbounded number potential alternatives feasible 
similar lines traditional approaches break considering extensible systems cf section 
extensible system unavoidable face problem bridging gap incompatibility independent mutually unaware extensions 
section examine series approaches danger colliding global analysis problem cartesian product problem 
note cartesian product problem seen special case global analysis problem 
cartesian products common phenomenon separate treatment appropriate 
endangered species goal extensibility pitfall cartesian products mind examine wide range established approaches different areas software engineering 
simple life cycle models 
idea starting specification product 
extensible system fully specified challenge quite opposite leave open possible 
known problems design frameworks indicate traditional engineering models fail tedious revisions required extract useful common ground framework unrelated necessarily incomplete 
set cases 
currently emerging design little code little test little approach follows direction 
major drawback emphasising design large 
mentioned life cycle phases integration testing need re thought final integration takes place delivery late allow testing excluding traditional integration testing individual components 
type systems 
general valuable tools software engineer crafted type systems endangered species 
type systems capture important parts specification way enables automatic checking 
advanced approaches type systems fail support extensible systems 
problematic approaches detailed 
existential quantification capture types promising cf section 
non local type inferencing 
closed program possible certain conditions practically useful perform global analysis reconstruct type information reject program reconstruction fails 
extensible system type inferencing extension interfaces necessarily exist implementations full set different implementations interface available 
relying type inferencing establish aspects global correctness particular composition components extensible systems 
particular needs applied system integration time run time report errors user developer 
covariant subtyping system level type checking 
particular approach called systemlevel type checking lines system wide type inferencing fix language eiffel meyer 
original specification language express type unsafe programs cook 
problem quite simple explain assume operation defined append 
eiffel allows operation expressed method text text typed parameter receiver method 
additionally second text typed parameter argument method declared type current 
called covariant subtyping receiver method arguments 
investigate problem covariant subtyping consider class forms subtype class argument method forced subtype defined argument covariantly 
type unsafe 
see consider client knows relies definition client call object class interface defined subtype client passes argument type specified method argument subtype required code method break 
known ways problem forbid covariant subtyping arguments case oo languages construction type unsafe type checking establishes assertion certain variable certain type assertion turns wrong certain execution runs 
compiler run time essentially rely type assertion failure lead severe arbitrary program malfunctioning 
apply system level type checking 
idea system level type checking conservative check final system integration time sure type unsafe actual program reach state problem pops 
obvious system level type checking incompatible extensibility global analysis final system 
incremental program validation 
proposed incremental program validation deal extensions wills 
obviously right way go 
unfortunately proposal presents way vertical extensions called capsules extension allowed modify part extended system 
neatly captures standard approach smalltalk development ignores problem recombining separately extended systems 
multi methods 
cartesian product problem quite common 
probably oldest example arithmetic expressions wide range algebraic structures various defined homomorphisms 
times algol dealt various forms operator overloading multiplication integers expressed operator symbol multiplication reals integer real languages treat abstractions classes entities objects involved 
demichiel gabriel introduced multi methods address problem 
cecil chambers applies multi methods object oriented programming 
multi method gets dispatched multiple arguments actual type argument inspected select method implementation supposed handle specific argument combination hand 
course just elegant sugar explicit coding cartesian product 
parts systems rely multi methods extensible 
solutions existentially quantified types notion extensibility strongly related ideas types subtypes 
interface requires extensions handle types possible subtypes time cartesian product problem occurs 
described mitchell plotkin types modelled accurately existential quantification 
interesting consequence approach interfaces requiring operations types form type implemented 
explanation relation programming languages see cardelli 
solving problems cartesian products interfaces existentially quantified types helps prevent place design interfaces subject problem 
units analysis modules 
simplest approach attack global analysis problem static subdivision programs atomic units analysis extension units providing confined context analysis enclosed program parts 
particularly useful language feature means new modules 
unfortunately modules got mixed classes result missing current objectoriented languages cf szyperski 
module natural unit separate compilation sense static checking contain parts system interrelated way prevents separate checking parts 
modules form minimal units extension system 
course quite modules clustered higher order building blocks subsystems 
remain atoms replacement extension 
aside modules possibly subsystems help tidy name spaces important aspect considering extensibility 
modula modules wirth ada packages serve purpose 
oberon reiser wirth restricts module system simple flat module space 
clearly lines providing atoms nested structures partially static interconnections case nested modules modula nested packages ada 
ada adds module hierarchies form parent child packages child package public private parent package textually nested 
simple design guide line put things module need coupling mutually known interfaces 
strong coupling usually takes form partial implementations encapsulated module embodying enforcing semantics possibly stated typed interface 
approach followed successfully construct extensible object oriented operating system szyperski commercial framework oberon 
clearly needed provide detailed guide lines fully explore potential module constructs building extensible systems 
resolving modules 
initial design cecil design extensible systems quite impossible multi methods convention restricted single dispatch traditional oo methods 
problem acknowledged enhancement cecil introduced notion resolving modules chambers leavens 
resolving module essentially top group code units provide definition multi method 
unit outside static scope resolving module contribute multi methods combinatorial space cartesian product closed number combinations gets bounded 
cecil system statically verify multi method resolving module exists combinations cartesian product handled combined definition respective multi method 
closed subsystems 
adding resolving module subsystem closes subsystem respect multi method 
words subsystem extensible respect closed multi method parts system rely multi methods remain open extensible 
particular addition new subsystem new fully enclosed multi methods remains possible 
bottleneck interfaces cartesian product problem essentially states reasonable provider specific operations combinations independent extensions 
adaptors unavoidable typical examples separately emerging coexisting industry standards force clients special cross standard adaptors 
strictly limited small number coexisting standards works creates new industry selling adaptors 
number alternatives large alternatives far apart approach breaks common result technology islands 
extensible systems cartesian product problem omnipresent needs dealt explicitly 
standard approach construction bottleneck interface szyperski 
trying handle combination individually cases reduced separate mappings provided extensions 
text example section mappings called take form ffl ext ffl ext ext stands text type identical subtype base type texts 
illustrates common bottleneck interface mapping operate fully independent extensions example appending texts independently extended type 
operation append takes arbitrary texts conforming minimal interface texts type returns text modified appending second 
texts assumed mutually incompatible types respectively subtypes 
bottleneck mappings applied reduce problem homogeneous append theta 
aside required covariant typing return value append safe 
intermediate text resulting mapping type likewise mapping denoted append append commonly accepted mappings interconnect arbitrary independent extensions 
uses example operation append texts independently extended type mapping texts common base type type text 
result homogeneous append operation dealing type text 
recall definitions text section simply repeated application read increasing indices simply repeated application write 
example need add new operations 
available possible implement append fully generically knowing possible implementations texts 
course provider new text implementation may take advantage known implementations specialising append cases 
note need multi methods approach necessarily intertwined single fully accessible implementation usual updating operations objects passed operation primed distinguish modified objects returned operation 
new extension 
traditional method interface append implementation append explicitly check hopefully special cases 
generic bottleneck interface cope refined attributes added extensions thought designing bottleneck interface 
text example font attributes attached runs characters 
generic append drop attributes target text attributes provide default setting 
general problem unavoidable 
special case cooperating known extension specialisation improve situation 
outlined specialised append preserve font attributes source target text type possibly text known support font attributes known attributes converted local representation 
noted bottleneck interfaces extensions formed recursively extensions form basis extensions 
care taken confuse bottleneck interfaces corresponding different levels extension chosing wrong operation lead primitive base type information may destroyed 
open problems unrestricted code inheritance problem wide open current oo technology proper handling self recursions defined classes code inherits 
self recursion fundamental object oriented programming refers invocation methods current object self part implementation methods 
inheriting code class calls methods inherited 
code resulting combination inherited code overridden methods super calls tends rely self recursion patterns order self recursive calls methods object occur 
self recursion caused self class object 
essential part object oriented programming paradigm 
problematic self recursion crosses boundaries classes case delegation boundaries objects parent child relation 
inheriting code knows interface definition base class relying information specified interface def language idl inheriting code rely self recursion injected base class base class longer evolved replaced alternative implementation risking break client code 
object oriented programming statebased side effects object due different orders self recursive calls observable 
programmer class observe implementation class interface fact extensive debugging get things right depend 
current technology current idls allow mechanical enforcement client relying base class implementation 
strictly avoiding code inheritance possible approach followed example com 
approach admitting strong coupling caused code inheritance carefully separating forming subtypes code inheritance 
sather szyperski omohundro taken point subtyping fully classes implementation inheritance defined equivalent textual inclusion source code 
admits code inheritance low level concept essentially reduces compiler performed editing operations 
summarise code inheritance implement extensions base system resulting coupling extension base goes far base system interface 
unfortunate state art deliver class libraries source form basically admitting documentation interfaces sufficient 
granularity extensions noted requirements independently extensible systems leave proven methods methods place area extensible systems 
extensible system composed smallest components atoms extensible developed traditional approaches 
atoms closed subsystems extensible system 
usefulness traditional methods development atoms depends directly size complexity atoms 
size atoms turn affects degree extensibility system 
guiding theory choice right atom size remains difficult engineering problem 
software engineering process software engineering process extensible systems considered unsolved problem 
methods processes development object oriented software better 
suffer fundamental problem assumed analysis design succeed enumerating requirements working details 
extensible systems questionable 
acknowledged frameworks developed standard process spiral model required takes feedback actual framework account 
object oriented frameworks important technology building extensible systems requirement independent extensibility adds problems increases burden engineering process 
market software components traditional processes able support development individual components integrated delivery 
unknown extend true approach understood engineering small requirement component extend base system proper way needs formalised 
emergence true software component industry promising 
unavoidable mine field independent extensibility tackled 
informal treatment principles challenges extensible systems 
inspection established software engineering methods techniques actual programming languages concluded major revisions approaches tools trade required 
time noted established methods validity constructing individual extensions supposed extensible 
main contribution point emerging important problem showing easy way traditionally approaches need 
proposed solutions mere remains done 
formal theory independently extensible systems requirements precise potential missing 
acknowledgments anonymous reviewers provided helpful hints helped improve 
particular reviewers pointed relevance existentially quantified types interface typing systems 
reviewer hinted ada child package construct 
wolfgang carefully read earlier version suggested improvements 
suggestion earlier title extensible systems changed indepen dently extensible systems clarifying focus 

inside ole 
microsoft press 
luca cardelli 
typeful programming 
technical report digital systems research center palo alto ca may 
craig chambers 
object oriented multimethods cecil 
proceedings sixth european conference object oriented programming ecoop utrecht netherlands volume lncs lecture notes computing science pages 
springer verlag june 
craig chambers gerry leavens 
typechecking modules multi methods 
proceedings ninth conference object oriented programming systems languages applications oopsla pages october 
william cook 
proposal making eiffel type safe 
proceedings third european conference object oriented programming ecoop nottingham england pages 
cambridge university press july 
demichiel richard gabriel 
common lisp object system overview 
proceedings european conference object oriented programming ecoop volume lncs lecture notes computing science 
springer verlag june 
barbara liskov jeannette wing 
behavioral notion subtyping 
acm transactions programming languages systems volume number november 
bertrand meyer 
eiffel language 
prentice hall edition 
mitchell plotkin 
types existential type 
proceedings th symposium principles programming languages popl 
department defence 
manual ada programming language 
united states dod washington november 
pfister clemens szyperski 
oberon framework tutorial 
oberon microsystems basel switzerland 
martin reiser niklaus wirth 
programming oberon steps pascal modula 
addison wesley 
clemens szyperski 
extensible 
proceedings st workshop object oriented programming languages generation oopsla vancouver canada october 
clemens szyperski 
import inheritance 
need modules classes 
proceedings th european conference object oriented programming ecoop utrecht netherlands volume lncs lecture notes computing science pages 
springer verlag june 
clemens szyperski 
insight object orientation operating systems volume informatik eth zurich 
verlag der zurich switzerland 
clemens szyperski stephen omohundro stephan 
engineering programming language type class system sather 
proceedings intl conf programming languages system architectures number springer lncs zurich switzerland march 
jon 

byte volume number pages may 
peter wegner 
dimensions object language design 
proceedings second conference object oriented programming systems languages applications oopsla pages october 
alan wills 
capsules types program verification smalltalk 
proceedings th european conference object oriented programming ecoop geneva switzerland volume lncs lecture notes computing science pages 
springer verlag june 
niklaus wirth 
programming modula 
texts monographs computer science 
springer verlag edition 
