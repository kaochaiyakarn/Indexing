appear international conf 
compiler construction edinburgh uk april reducing cost data flow analysis congruence partitioning evelyn duesterwald rajiv gupta mary lou soffa department computer science university pittsburgh pittsburgh pa 
data flow analysis expresses solution information gathering problem fixed point system monotone equations 
presents technique improve performance data flow analysis systematically reducing size equation system monotone data flow problem 
reductions result partitioning equations system congruence relations 
fast log partitioning algorithm size program exploits known algebraic properties equation systems 
resulting partition reduced equation system constructed minimized respect computed congruence relation providing data flow solution program points 
growing importance static data flow analysis current optimizing parallelizing compilers comes increased concern high time space requirements solving data flow problems 
experimental studies show performing sophisticated analyses small medium sized programs take hours lan 
phrased traditional data flow framework ku solution data flow problem greatest fixed point system monotone equations 
equation expresses solution program point terms solutions immediately preceding succeeding points 
formulation may result overly large equation systems limiting time space efficiency fastest fixed point evaluation algorithm 
closer inspection equation systems reveals sizes unnecessarily enlarged due inherent inclusion redundant equations 
structure data flow equation systems requires propagation intermediate results program including propagation program points results relevance 
consequence multiple equations system carry identical information 
equations duplicate information expressed equations redundant repeated evaluation fixed point iteration clearly undesirable 
equivalent smaller equation partially supported national science foundation presidential young investigator award ccr ccr university pittsburgh 
systems redundancies constructed fixed point computations faster independent evaluation algorithm 
systematic approach minimize data flow equation systems discovering congruence relationships equations 
equations congruent fixed points equal 
congruent equations redundant eliminated 
congruence relation equivalent reduced equation system constructed including single equation class congruent equations 
approach general applicable monotone data flow analysis problems 
previous approaches avoid unnecessary evaluations data flow equations include methods static single assignment form wz sparse evaluation graphs ccf dependence flow graphs jp 
idea approaches pass unnecessary equation evaluations manipulating underlying graphical program representation 
show viewing problem algebraic problem congruence relations approach allows conceptually simple algorithms general powerful previous graph oriented methods 
results summarized follows 
define congruence relation data flow equations exploiting known idempotence property meet operator system 
assumptions sequence intermediate values equation may take fixed point iteration 
sequences intermediate values highly dependent particular iteration strategy compute fixed point notion congruence valid relation strategy 
fast partitioning algorithm compute idempotence congruence relation log time space size program 
computed congruence relation reduced equation system constructed contains single equation congruence class 
definition congruence sufficient compute fixed point reduced system standard evaluation strategies 
approach reducing equation systems computing congruence relations easily extended include notions congruence 
congruence relations discussed dst common subexpressions 
alpern fast log algorithm due hopcroft minimizing finite automata compute congruences common subexpression program optimization 
show hopcroft algorithm equally applied common subexpression data flow equations systems order enable reductions 
asymptotic performance congruence partitioning reduce data flow equation system depends size equation system 
complexity data flow problem cost evaluating equations impact performance partitioning algorithm 
complexity data flow problems varies dramatically ranging simple problems live variable analysis implemented efficiently bit vectors sophisticated time space intensive analyses alias analysis 
naturally benefits congruence partitioning increase complexity data flow problem 
pertinent background data flow analysis section 
section introduces congruence relations data flow equations 
idempotence congruence relation fast partitioning algorithm section 
section discusses congruence computations common subexpressions 
compare congruence partitioning previous discuss related section 
section 
data flow equation systems data flow analysis defined graphical representation program usually control flow graph 
nodes represent basic blocks asu program unique entry node edges represent transfer control basic blocks 
assume jej jn 
node pred succ denotes set immediate predecessors successors node data flow analyses modeled data flow framework semi lattice set partial order element 
bottom greatest element 
top meet operator idempotence commutativity associativity 
ff 
lg space monotone flow functions control flow graph 
mapping program nodes functions function mapped node denoted models data flow execution passes node holds entry node fn holds exit node data flow framework induces system data flow equations parameterized nodes control flow graph fn 
fn pred solution data flow framework greatest fixed point assignment gfp 
equation system initial value 
monotonicity ensures greatest fixed point gfp equation exists unique 
node gfp describes data flow solution holds exit node framework models forward backward analyses assuming backward analysis transposed control flow graph 

ii fig 

translation equations graphs 
equation system represented labeled directed graph 
vertices represent equation variables operations right hand side equations 
edge describes expression represented vertex depends input represented vertex refer graph equation graph 
equation fn pred translated graph shown fig 

corresponding function symbol vertex label single successor vertex label vertex labeled successors predecessor node function fn identity function equation reduces pred 
case vertex function symbol created vertex vertex labeled shown fig 
ii 
partition vertex set set vertices labeled meet vertices set vertices label denoting function symbol function vertices 
due direct correspondence graphical textual representations equation system explicitly distinguish 
discussing equation systems assume graphs transformed graphs vertices indegree outdegree 
transformation analogous transforming textual representation equation system form address code 
associativity meet operator ensures graph transformed form adding additional vertices vertex indegree outdegree greater 
constant number vertices added edge process number vertices remains dst jn number nodes control flow graph 
running example consider alias analysis performed procedure insert shown 
alias analysis computes pairs aliased variables 
simplify representation consider simple alias analysis assumes variable aliased variable variable points aliased variable points 
lattice elements collections alias relations 
collection simply set alias pairs alternatively partition variables sets aliased variables 
omit showing control flow graph procedure insert 
relevant program points data flow information computed numbered curly braces procedure insert 
procedure insert val insert value val binary tree val val repeat val key left right null new key val left null right null val key left right equation system expresses analysis procedure insert shown fig equation graph fig 
ii 
equation refers alias information holds program point marked procedure insert 
meet operator represents union collections alias relations single collection 
data flow equations function kill takes argument collection alias relations eliminates alias relations variable details analysis refer reader cc 
respect congruence partitioning meet functions kill merely uninterpreted symbols 
congruence relations equation system objective minimize size system evaluating equation 
unfortunately restricted version minimization problem np complete gj set expressions constructed uninterpreted constants single commutative associative operator determine minimum number operations needed evaluate expressions 
general expect efficient algorithm able eliminate redundancies show possible minimize respect certain defined classes redundancies fast algorithm 
redundancies eliminated discovering congruence relationships equations 
consider relationships final fixed point values equations equations system called congruent gfp gfp 
congruence equivalence relation symmetric reflexive transitive induces partition equations congruence classes 
equations contained congruence class identical fixed point 
reduce original equation system eliminating equation congruence class 
definition congruence resulting reduced system guaranteed provide fixed point solution original system independent particular evaluation strategy 
init kill kill init kill kill ii fig 

data flow equation system simple alias analysis procedure insert graphical representation ii 
needed solution reduced system expanded solution original equations computed partition 
sections discuss congruence relationships equations discovered exploiting properties equation graph 
partitioning algorithm discovers congruence idempotence property meet operator 
show algorithm due hopcroft minimizing finite automata adapted discover additional congruences result common subexpressions 
fig 
shows reductions equation system alias analysis procedure insert achieved congruence partitioning explained sections 
congruence idempotence section describe detection congruences data flow equations result idempotence meet operator recall data flow equation form pred trivial congruences result special case equations function fn identity function node single predecessor init init init kill kill kill kill kill kill ii iii fig 

original equation system alias analysis procedure insert reduced system partitioning idempotence ii reduced system combined partitioning common subexpression idempotence iii 
case equation reduces simple copy equation 
clearly fixed points identical congruent 
congruence relation copies easily computed single pass equation system 
initially assume equation separate congruence class 
copy equation encountered congruence class merged class creating single class 
reduced equation system copies constructed including congruence class single representative equation 
operand occurs included equation replaced representative congruence class 
idempotence congruence extends trivial notion copy congruences covering hidden copies 
hidden copy equation form congruent 
idempotence meet operator congruence implies gfp gfp reduces gfp equation essentially copy 
determined variables congruent 
equation graph obtain definition respect idempotent meet operation definition congruence idempotence 
equation graph 
relation called idempotence congruence relation implies conditions vertices identical vertices say labeled implies verify congruence relation ensure base case recursive rule application rule yield congruent pairs vertices 
base case rule declares sole destination edges leaving case represents copy equation congruent 
destinations edges leaving congruent vertex reduces idempotence congruent application rule 
recursive definition idempotence congruence relation unique contains cycles 
consider equations partition fc fx fx gg corresponding system describes idempotence congruence relation 
partition fc fx gg describes idempotence congruence relation provides reduced system interested maximal idempotence congruence relation fewest number congruence classes equation graph 
remainder symbol refer maximal idempotence congruence relation definition 
relation provides coarsest partition vertices equation graph vertices partition congruent definition 
fast partitioning algorithm compute starts initial partition places possibly congruent pairs equations class 
partition iteratively refined stable partition reached consistent definition partition construct equation system minimized respect idempotence congruence way previously described 
congruence class representative equation included 
resulting equation system contains copy equations hidden copies due idempotence 
partitioning algorithm computing partition iterative refinement requires determining appropriate initial partition 
vertices initially placed different congruence classes discovered congruent 
initial partition overestimate congruence relation partition overestimates implies vertices placed congruence class 
order enable partitioning algorithm converge quickly interested finding finest initial partition overestimates standard graph partitioning algorithms ahu initial partition vertices label 
unfortunately follow approach computing function vertices different label congruent idempotence meet vertices may congruent function ver note congruence holds respect greatest fixed point defined initial value equation 
kill kill init fig 

reverse partition 
equation graph fig 
ii 
tex new partitioning algorithm show overestimating initial partition vertices constructed canonical way 
congruence classes partition represented reverse trees vertices equation graph reverse tree tree edges directed children parent vertices 
collection disjoint reverse trees tree subgraph equation graph refer reverse trees partition simply trees notation partition forest 
root vertex tree denoted root 
vertex tree parent unique predecessor contained construct initial partition vertices equation graph single reverse depth traversal depth traversal transposed graph resulting partition contains tree congruence class function vertex tree function vertex constructed traversing reachable edge reverse direction reverse depth spanning tree rooted include function vertex 
resulting forest reverse called reverse partition 
reverse partition equation graph fig 
ii shown fig 

reverse partition equation graph unique selections multiple candidates visit arbitrarily 
show lemma reverse partition safely overestimates lemma reverse partition graph vertices tree 
proof 
vertex tree notation level denote length path root 
distinct trees show vertex root induction level 
basis clearly root root distinct function vertices congruent idempotence 
ind hypothesis root level assume root level rule def 
parent root contradicts hypothesis level parent consider vertices distinct trees root vertex tree 
follows rule def 
parent vertices say obtain parent repeatedly applying argument eventually derive root vertex trees congruent vertex tree shown possible 
ut algorithm partition operates initial reverse partition subsequently refining current partition consistent definition resulting partition vertices left tree algorithm partition shown maintains lists vertices worklist 
worklist list current partition trees examined 
tree worklist examined line determine contains interior vertex successor case vertices parent congruent idempotence 
ensure vertices remain tree vertex placed 
inner loop tree vertex split disconnecting subtree rooted split resulting subtrees placed worklist ensure vertices may trigger subsequent split examined 
partition terminates worklist exhausted final partition algorithm partition performs operation partition trees split disconnects returns subtree rooted tree containing vertex algorithm partition partitioning idempotence input equation graph vf output partition 
tk method 
create initial reverse partition 
vertices 
worklist ft 

worklist 
select remove tree worklist 
fv successor successor 
root vertex 
tree containing vertex 
add split new tree 
worklist add worklist 
add smaller worklist 
endfor 
endwhile apply partition initial reverse partition fig 

initial partition corresponding fig 
final partition algorithm partition terminates shown congruence classes displayed columns 
original complete equation system shown fig 

final partition describes congruences system result copy equations hidden copy equation 
specifically equations column fixed point equation 
reduced equation systems redundant hidden copy equations eliminated shown fig 
ii 
analysis show algorithm partition computes congruence relation output partition coarsest partition vertices contained tree proceed proof showing lemma consistent definition coarse 
show lemma algorithm partition optimal coarsest consistent partition 
lemma consistency 
partition consistent definition vertex tree root vertex successors proof 
assume vertex tree root vertex successor parent assume contrary claim successor initial partition vertex tree trees initially placed worklist 
construction line implies split iteration separated vertex parent contradicting assumptions 
consider point algorithm vertex separated vertices parent vertices placed different trees containing containing parent 
separation worklist implies vertex separated parent new contents worklist exhausted contradicts assumptions 
successors ut lemma optimality 
partition coarse possible tree partition proof 
show induction number split operations performed algorithm partition vertices distinct trees 
basis claims holds initial partition lemma 
ind partition resulting gamma split operations 
th split operation splits edge tree successor different tree induction hypothesis root rule definition root subtree rooted remaining portion disconnecting root vertices trees root congruent analogous induction argument proof lemma shows vertex congruent vertex vertices different trees new partition congruent ut corollary 
algorithm partition correctly computes idempotence congruence relation lemmas 
theorem complexity 
algorithm partition implemented log time space number vertices equation graph proof 
constructing initial partition takes time 
calculate total time spent loop consider number times tree vertex placed worklist 
time current tree vertex added worklist tree size half size previous tree containing vertex tree log times worklist 
constructed scan vertices tree removed worklist total number vertices scanned log 
operation split executed times partitions 
call split implemented time maintaining vertex pointer position partition forest 
find smaller subtrees split time proportional smaller tree total time log vertices trees counted alternating trees vertex 
algorithm requires pointer vertex current partition tree updated split vertices smaller resulting tree 
summary total time spent executing algorithm partition log 
size auxiliary data structure space store partition 
ut equation graph constructed described section size graph linear size program 
data flow problems product lattice constant propagation equation program point vector 
xv 
constant propagation component program variables 
general beneficial break vector equation set components equations 
order expose additional congruences 
granularity size equation graph increases theta congruence common subexpression additional reductions equation system achieved extending definition congruence capture redundancies result sources idempotence 
dst congruence relations defined common subexpressions 
example fig 
ii term common subexpression equations 
congruence relation common subexpression defined observing commutativity meet operator 
definition congruence common subexpression 
equation graph 
relation called common subexpression congruence relation vertices successors 

implies label label ae permutation 
kg label partitioning graph common subexpression known problem fast log algorithm due hopcroft algorithm minimizing finite automata hop 
applications hopcroft algorithm eliminate common subexpression program optimization 
different application employing algorithm reduce data flow equation systems 
hopcroft algorithm starts initial partition vertices identical label placed congruence class 
algorithm iterates congruence classes subsequently refine current partition consistent definition 
algorithm terminates coarsest partition equations class congruent adaptation hopcroft partitioning algorithm partition equation graphs shown 
algorithm adaptation hopcroft partitioning algorithm input equation graph vf output partition 
ck collection vertices 
create initial partition 
vertices label 
worklist fc 

worklist 
select remove worklist 

fv vf th succ 

fv exactly succ 



create new tree collection 
move 
worklist add worklist 
add smaller worklist 
endfor endfor 
endwhile hopcroft algorithm applied equation graph alias analysis procedure insert equations fig 
discovered congruent 
discovery congruences due common subexpressions may enable detection additional congruences idempotence 
example know equations congruent turn determined equation hidden copy fact equations congruent 
enable second order effects incorporate results common subexpression partitioning initial partition idempotence partitioning 
achieved applying algorithm partition equation graph results vertices congruent merged single vertex 
reductions equation system fig 
enabled process shown fig 
iii 
additional improvements equations system results partitioning idempotence fig 
ii due discovery congruence equations 
unfortunately applying partitioning algorithm may provide optimal results 
general congruences idempotence may enable discovery additional common subexpressions vice versa 
find maximal number congruences requires computing transitive closure union congruence relations 
closure computed iterating partitioning algorithms congruence discovered 
time new iteration started size equation graph reduced resulting bound log 
practice number common subexpressions equation graph may small case may sufficient compute congruence partitioning 
may sacrifice optimality equation system reduction remains fast 
experimentation needed determine benefits computing iterated congruence closure 
related number previous methods focused suppressing unnecessary equation evaluations manipulating underlying graphical program representation 
sparse evaluation graph seg approach ccf achieves reductions data flow equation systems indirectly specializing program control flow graph respect analysis problem smaller equation systems generated 
seg obtained control flow graph eliminating nodes identity flow function 
construction seg requires time dominance frontiers ccf theta ff time complicated algorithm cf number edges program control flow graph number nodes seg approach compares directly idempotence congruence partitioning algorithm removal control flow graph nodes identity flow functions results elimination redundant hid den copy equations 
important problems seg approach fails eliminate hidden copies algorithm partition construct strictly smaller equation systems 
constant propagation example problem 
constant propagation flow graph nodes identity flow function case seg identical original flow graph graph 
flow graph nodes non identity flow function generate copy hidden copy equations program variables assigned new value node 
partitioning approach operates level individual equation operations redundancies exposed eliminated 
addition congruence partitioning seg approach extensible discover redundancies due common subexpressions enabling reductions equation system 
methods improve data flow analysis building specialized program graphs applicable certain data flow problems 
partitioned variable technique constructs variable simplified flow graph enables fast evaluation solution 
method restricted partitionable data flow problems permit analysis variable partition isolation 
global value graph rl rt static single assignment form ssa ss dependence flow graphs jp graphical representations provide connections definitions uses program variables 
ssa form constructed time dominance frontiers cfr theta ff time algorithm cf 
benefits ssa data flow analysis limited problems definition connections constant propagation wz 
problem available expressions benefit ssa 
limitation applies related dependence flow graphs constructed theta time number program variables 
computing congruence relations common subexpressions known problem efficient algorithms developed dst hop 
hopcroft partitioning algorithm minimizing finite automata program optimization detect equalities variables common subexpressions extended ssa form program 
authors describe strategy manipulate ssa representation order combine congruent equal variables values different branches structured statement 
treatment viewed handling special case detecting idempotence congruences 
methods eliminate redundant program computations include value numbering cs global value numbering ssa form methods global value graph rt 
new efficient approach improve performance monotone data flow analysis reducing size data flow equation systems congruence partitioning 
partitioning algorithms discover congruences data flow equations exploiting algebraic properties idempotence commutativity meet operator 
remaining property meet discussed associativity 
unfortunately discovering congruences due associativity harder problem 
difficulty discovering congruences associativity results fact exponential number different sequences meet operations yield congruent values associativity 
problem associative operators arises program optimizations techniques heuristic discover certain equalities associativity cm 
currently considering suitable approach enable reductions data flow equation systems 
approach congruence partitioning demonstrates feasibility applying principles program optimization analysis common subexpression elimination optimize analyzers 
expect investigate issue part 
ahu aho hopcroft ullman 
design analysis computer algorithms 
addison wesley 
asu aho sethi ullman 
compilers principles techniques tools 
addison wesley publishing massachusetts 
alpern wegman zadeck 
detecting equality values programs 
proc 
th annual acm symp 
principles programming languages pages san diego california january 
cc cousot cousot 
static determination dynamic properties generalized type unions 
proc 
acm conf 
language design reliable software pages raleigh north carolina march 
ccf choi cytron ferrante 
automatic construction sparse data flow evaluation graphs 
conf 
rec 
th annual acm symp 
principles programming languages pages orlando florida january 
cf cytron ferrante 
efficiently computing oe nodes fly 
proc 
workshop languages compilers parallelism 
cfr cytron ferrante rosen wegman zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems october 
cytron lowry zadeck 
code motion control structures high level languages 
conf 
rec 
th annual acm symp 
principles programming languages pages st petersburg beach florida january 
cm cocke markstein 
measurement program improvement algorithms 
proc 
information processing 
north holland publishing 
cs cocke schwartz 
programming languages compilers preliminary notes 
courant institute mathematical sciences new york university april 
dst downey sethi tarjan 
variations common subexpression problem 
journal acm october 
gj garey johnson 
computers intractability 
freeman new york 
hop hopcroft 
log algorithm minimizing states finite automata 
theory machines computations 
academic press new york 
jp johnson pingali 
dependence program analysis 
proc 
acm sigplan conf 
programming language design implementation pages albuquerque new mexico june 
ku kam ullman 
monotone data flow analysis frameworks 
acta informatica july 
lan landi 
interprocedural aliasing presence pointers 
phd thesis rutgers university new brunswick new jersey 
nelson oppen 
fast decision procedures congruence closures 
journal acm april 
rl reif lewis 
symbolic evaluation global value graph 
conf 
rec 
th annual acm symp 
principles programming languages pages january 
rt reif tarjan 
symbolic program analysis linear time 
siam journal computing february 
rosen wegman zadeck 
global value numbers redundant computations 
conf 
rec 
th annual acm symp 
principles programming languages pages san diego california january 
ss shapiro saint 
representation algorithms 
technical report ca massachusetts computer associates 
wz wegman zadeck 
constant propagation conditional branches 
conf 
rec 
th annual acm symp 
principles programming languages pages new orleans louisiana january 
zadeck 
incremental data flow analysis structured program editor 
proc 
acm sigplan symp 
compiler construction pages june 
article processed macro package llncs style 
