model checking generic container implementations matthew dwyer corina pasareanu kansas state university department computing information sciences manhattan ks usa cis ksu edu 
model checking techniques successfully applied verification correctness properties complex hardware systems communication protocols 
success fueled application techniques software systems 
date efforts targeted concurrent software complexity lies primarily large number possible execution orderings asynchronously executing program actions 
apply existing model checking techniques parameterizable implementations container data structures 
contrast concurrent systems studied model checking literature complexity implementations lies data structures algorithms 
report experiences model checking specifications correctness properties queue stack priority queue data structures implemented ada 
keywords model checking temporal logic assume guarantee reasoning generic containers past decades seen development large number formal methods specifying intended computational results software component system 
clearly practical utility formal method assessed respect ability describe support reasoning correctness realistic software systems number efforts area 
short case studies basic test formal method ability address certain standard examples class standard examples container data types stacks queues sets 
past decade number formal methods researchers focused class specification formalisms automated specification checking techniques referred finite state verification fsv approaches 
focusing specification correct results computation supported part nsf ccr ccr nsf darpa ccr nasa nag 
fsv methods specify correctness properties related internal system behaviors 
behaviors include example correctness component coordination safety data access guarantee progress performing computation 
techniques particular model checking enjoyed success finding defects verifying properties real hardware systems 
attempts capitalize success model checking applying selected software domains communication protocols control systems 
control software typically manipulate small amounts data influence system behavior 
general software systems may manipulate large amounts data data control system behavior 
remains seen fsv approaches generally effective data intensive software 
assess representative fsv approaches linear temporal logic ltl model checking spin terms ability support reasoning standard container implementations formal methods judged 
model checking technique sound complete reasoning finite state transition systems 
enable model checking software completeness sacrificed tractability software systems general finite state 
methodology uses correctness preserving abstractions system components render model checking sound 
believe model checking complements traditional formal methods testing software quality assurance technique 
testing model checking automated technique 
traditional formal methods require user interaction model checking applied practitioners little knowledge proof construction strategies 
traditional formal methods sound model checking successful provides guarantee system satisfies property checked testing unable guarantee absence errors respect property 
failed test sure indication defect system provides guidance help locate cause defect 
contrast proof methods model checking produce counter example traces example system execution violates property interest 
analysis counter examples leads directly cause erroneous system behavior 
qualitative differences model checking methods goal compare classes software validation approaches assess extent model checking applied validate detect defects existing container implementations 
tools automate process translating program written ada safe finite state model rendered input format spin 
reason selected implementations generic queue stack priority queue data types written ada 
specified variety correctness properties abstractions ltl checked spin 
results encouraging suggest model checking tools effectively applied detect defects implementations 
report results describe process followed carry study 
section discuss relevant background material 
construction finite state models container implementations outlined section 
section describes container implementations section describes correctness properties analyze 
section results study 
section describes study limitations suggests directions study section concludes 
background related section give brief overview temporal logic model checking 
focus differences approach system specification verification traditional formal methods 
traditional formal methods traditionally formal methods designed support precise description intended results computation 
specification written conforming implementation guaranteed produce correct result specification defines sufficient condition correctness 
wealth formal methods including model algebraic larch trace methods 
methods differ formal underpinnings expressive describe computations unbounded data domains naturals 
capable specifying container data structures 
fact specifications stacks queues examples illustrate method 
trace specifications particularly relevant described 
specifications observable interface behavior software component 
trace specification defines legal sequences calls operations component interface computational effects sequences 
hoffman snodgrass distinguish different components trace specification legality equality value 
specifications describe section state necessary conditions trace components concentrating primarily legality sequence calls 
stack queue specifications stack queue specifications nearly identical differing names operations element ordering 
note specifications model invocation return procedure independent atomic actions traces model single action 
enable specification properties concurrent systems multiple calls single procedure may execute 
temporal logic model checking specifications written propositional temporal logic 
logics expressive formalisms traditional formal methods express properties unbounded value sets 
reason model checking focuses specifications necessary conditions correctness complete specification system computational effects 
linear temporal logic supports unit level model checking filter analysis supported robust tool spin 
ltl pattern states defined characterizes possible behaviors finite state system 
describe ltl operators spin ascii notation 
ltl propositional logic standard connectives 
includes temporal operators says holds point says holds points binary operator says holds points point holds 
example ltl specification response property calls procedure followed return 

model checking software model checking describes software finite state transition system specifies properties temporal logic formula checks exhaustively sequences transition system states satisfy formula 
principle model checking applied finite state system 
software render finite state system exactly models software behavior general software finite state 
finite state software size precise finite state model general exponential number independent components variables threads control 
reasons abstracted finite state system models reflect execution behavior software precisely possible enabling tractable analysis 
existing model checkers spin accept ada source code 
fact semantic gap ada model checker input language spin promela significant 
bridge gap achieve tractable model checking perform compilation ada source code target program promela 
compilation guided ltl formula checked result target program sound respect model checking formula 
setting positive model checks results specification imply conformance original ada implementation specification 
failed model check result trace target program violates specified property called counter example 
analysis counter example indicates situations implementation defective respect specified property ii abstractions compilation promela program imprecise checking specified property 
second case counter example provides guidance abstractions strengthened enable successful model check detection defect 
compilation process discussed detail section 
filter analysis common software validation verification reason parts implementation isolation unit testing 
unit level software model source ada system ai partial evaluator abstraction library ai variable bindings configuration information ada inca proposition definitions ltl property specifications true counter example spin specifications ctl property ada ada promela trans smv fig 

model construction process checking adopt assume guarantee paradigm system description consists parts model guaranteed behavior software unit model assumed behavior environment unit execute 
described define ada driver program approximates behavior possible contexts software unit may invoked discuss driver programs section 
model checking properties software unit combined driver sound respect usage unit 
software components assumptions context called routine eventually return 
assumptions incorporated ltl model checking spin follows property filters fn encode assumptions environment model check combined formula fn refer individual filters combined formula filter formula 
concern method users may invalid assumptions 
address ways 
check assumptions inconsistent checking exists execution satisfies filters spin done attempting falsify claim conjoined filters 
second user wishes fact software component satisfies analysis larger system model check fn sub systems component verifies context satisfies assumptions 
model construction section describe process compiling programs descriptions suitable model checking 
apply methodology described supported toolset illustrated 
incompletely defined ada source code fed component constructs driver program complete definition 
completed program systematically abstracted simplified interpretation partial evaluation techniques 
resulting program converted input language called inca procedure driver choice integer type object type loop case choice 
insert type 
type remove 
null 
exit case loop stub fig 

driver source code toolset :10.1.1.41.863
inca accepts definitions states events form propositions specifications embeds propositions model checker input 
tutorial toolset available 
completing partial systems complete ada program constructed defining driver program stub routines referenced components external partial ada program 
similar unit testing approach stubs driver capable calling component public operations possible sequence simulates possible usage scenario may arise component 
stubs driver component analysis form complete ada application 
simplify discussion assume partial system encapsulated package public procedures called outside package interested behavior partial system environment driver program generated execute possible sequences public procedure calls 
driver program defines local variables hold parameter values 
illustrates driver partial system insert procedure remove function 
note choice type variables subsequently abstracted choice abstracted model nondeterministic choice case statement alternatives 
stub routines defined similar way 
ultimately order generate finite state model source code layering container implementations removed calls insert remove driver inlined 
inca tools perform inlining non recursive procedure calls tools able perform generic instantiations examples done hand 
limitation current approach treat recursive procedures 
incorporating abstractions methodology proceeds binding interpretations selected program variables 
variety sound interpretations defined different data types 
currently set heuristics applied select variables abstracted specific interpretations variable 
machinery partial evaluation propagate variable definitions program definition 
way state space finite state transition system constructed program safely reduced size enables efficient model checking 
container implementations studied variables defined discrete ranges sub range types array indices booleans variables abstractions applied 
container implementations parameterized type contained data elements 
properties check implementations described section specify behavior terms data element values refer identity data elements 
properties related ordering data elements 
construct safe model supports reasoning properties ordered data abstraction 
defines data elements terms identity elements named distinguished named ot 
example object type replaced enumerated type ot implements abstraction 
container implementations assign data elements compare identity ordered abstraction allows treat containers data independent systems prove order related specifications assumption input container 
proofs generalize pair user defined data elements 
specializing source code partial evaluation produce specialized version software system supplied information user 
systems dynamically sized data structures case specialization required place upper bound number dynamic objects allow finite state model constructed 
reduces generality property proven model practice preserves effectiveness model checking defect detection 
container implementations consider study accept single constructor parameter pre allocates storage holding data 
constructed drivers invoked constructor small size values checked properties resulting models 
containers generic data structure suite publicly available collection ada packages implement number variations list queue stack heap priority queue binary ary tree data structures algorithms structures 
selected specific data structure implementations version collection subject study queue pt pt stack pt pt priority queue lpt lpt queue stack implemented support packages provide list iterator implementations 
priority queue implemented underlying heap iterator implementations 
stack queue priority queue implementations generic packages requiring type parameter data stored container 
priority queue requires type priority contained data item ordering operation priority type 
queue stack implementations allocate fixed size array appropriate object type storage data 
priority queue implemented top array heap implementation levels generic package instantiation required reveal structure concrete implementation 
queue stack container types associated iterator packages support iteration container order top iteration reverse container order bottom iteration 
iterators require user defined call back routine process invoked datum stored container 
denote different models stack queue priority queue packages isolation 
queue forward backward iterators required different models qt qb respectively 
stack iterator required single model si 
models scaled fixed maximum number contained elements stack elements 
properties discussed section hope specify complete behavior container abstractions ltl 
focus crucial correctness properties abstractions 
group areas containment order observation 
containment properties related container implementation knowledge data items put taken 
order properties related order data items removed observed container priority ordering observed 
observation properties related ability operators distinguish relevant features state container container empty 
wrote specifications categories container implementations 
writing specifications select level abstraction describe system behavior 
study chose package interfaces containers 
specifically ltl specifications define propositions describe calls container operations specific input parameter values returns container operations specific output parameters 
illustrate syntax names propositions way example 
naming scheme indicates type contained data instantiated container private pt limited private lpt 
procedure declaration procedure boolean boolean number propositions including call representing call return representing return call true false representing call true false call false representing call false return false representing return false function return values considered output parameter 
propositions state calling true parameters return true call true true 
return return true states call true parameters followed return value true return intervene designated call return 
writing specifications ltl greatly simplified specification patterns system specification instance global constrained response pattern 
illustrates sampling specifications checked study space limitations prohibit showing specifications 
basic properties specified 
properties slightly different intended semantics depending container checked property names indicate queue stack priority queue versions respectively 
containment specifications vary depending forward backward iteration performed name container insert remove operation enqueue push dequeue pop fq bs 
observation specifications names insert remove operations vary 
ordering specifications modifications complex 
order returned data queue stack reversed shown 
order dequeued data priority queue depends priority value datum specify return sequence regardless insertion order shown 
assumption data items important reasoning order related properties assumption discussed section total ltl specifications variations basic properties 
analysis results selection specifications checked section 
model checks performed spin version sun ultra mhz ultrasparc iii meg ram machine sun enterprise mhz ultrasparc ii meg ram machine 
gives data model checking runs transition system model run report elapsed time running detailed description transition systems published case study www cis ksu edu santos fq datum enqueued dequeued forward iteration invoke iterator call back datum iteration terminated 
call enqueue return dequeue call top 
call top call process jj return process false bs datum pushed popped forward iteration invoke iterator call back datum iteration terminated 
call push return pop call bottom 
call bottom call process jj return process false enqueue subsequent dequeue followed call empty returning false 
call enqueue return dequeue call empty 
call empty return empty false enqueue datum call empty returning true dequeue returning datum 
call enqueue 
return empty true 
return empty true return dequeue fq pair data enqueued dequeued forward iteration invoke iterator call back datum second iteration terminated 
call enqueue return dequeue call enqueue return dequeue return dequeue call top 
call top call process call process jj return process false pair data pushed popped reverse order popped 
call push return pop call push 
return pop return pop jj return pop pair data enqueued reverse priority order dequeued priority order priority priority 
call enqueue return dequeue call enqueue 
return dequeue return dequeue jj return dequeue fig 

ltl specifications spin convert ltl spin input format compile promela model checker execute model checker 
model construction tools run alphastation meg ram 
longest time taken convert completed ada model priority queue size took seconds 
generating promela vary due differences predicate definitions required different properties 
longest time taken step model queue size took seconds 
property time result model machine fq false qt fq true qt bq false qb bq true qb fs false si fs true si bs false si bs true si true true true true true true fq false qt fq true qt bq false qb bq true qb fs false si fs true si bs false si bs true si false true false true true true fig 

performance data container models assumptions way container operations invoked number times order invocation 
iterator call back process assumed data independent 
boost precision checking certain properties code assumptions required behavior driver stub filter model checked filter formulae denoted table 
example analysis counter example provided spin specification fq showed result false possible stub process return 
enforcing reasonable assumption iterator call back returns yields filter formula fq 


false filter properties type 
filters properties type required ordered data ai incorporated model guaranteed safe assumption single insertion data item container 
example filter formula 



results consistent previous filter analysis 
filters required relatively simple 
part ignoring spin compile times study shows total time required model check properties container implementations order minutes 
discuss compile time issue section 
discussion believe results indicate potential model checking effective quality assurance technique broad class software systems number clear limitations study 
scaling containers believe results previous section bode model checking techniques reasoning software systems remain significant questions ability scale large systems 
containers size bulk model checks 
smallest sizes consider reasoning order properties 
increased container size priority queue model generation check times increased factor 
stack queue containers size model generation tools ran hours stopped 
expect rapid growth size state space container size increases 
model generation tools expand parts state space require significant amounts memory 
believe memory limitations cause significant slowdown generation time increasing size 
experiments large memory machines help address question 
model generation tools inca designed reasoning synchronization properties concurrent systems 
systems typically little data control pattern inter process synchronization 
requirements reasonable design decision encode data local single process control flow process 
unfortunately data intensive systems containers causes enormous expansion program control flow 
promela compile times large nearly hours fq 
important understand artifact model construction process inherent limitation spin 
illustrate checked queue properties type model hand translated ada promela converting ada variables promela variables 
effect dramatic fq promela compiletime seconds model check time dropped seconds 
versions model generation tools need define mappings performance issues mind 
variety different model checking techniques developed 
data intensive nature container implementations wondered different model checking technique better 
particular smv obdd encodings transition systems effective compactly representing data state space container models 
inca generates efficient input models smv 
re ran priority queue property model checks smv machine 
model generation time seconds properties model check time seconds 
appears smv may effective spin checking properties kind system 
unfortunately smv specification language easily incorporate filter formula significant limitation assumption validation partial software systems 
dynamism implementations container implementations pre allocate storage contents dynamically allocate storage needed 
check properties implementations need incorporate safe abstraction allocation reclamation heap storage 
investigating scalable bounded heap abstraction allows allocation deallocation data tracks state heap 
cost size finite state system model consequent model check time prohibitive subject empirical study 
defect detection model checking capable verifying properties software main benefit may fault detection technique 
fortunately systems faults exhibited small system sizes application model checking cost effective 
illustrate seeded fault priority queue implementation 
insert procedure heap package deleted test loop 
re ran model checker detected defect essentially time reported 
spin produced counter example gives changes values propositions path system property hold 
simulation output generated spin counter example boolean variables predicates appear property specification 
easy see counter example data dequeued priority order priority priority 
procedure insert heap heap type object object type parent natural heap size child natural heap size heap size heap max size raise heap overflow heap size heap size initialize heap data heap size parent heap data parent object loop swap heap data parent heap data child child parent parent parent loop swap object heap data child insert fig 

insert procedure proc driver task line pan state proc driver task line pan state proc driver task line pan state proc driver task line pan state proc driver task line pan state fig 

reduced spin counter example faulty result indicates defect implementation imprecision finite state model 
data abstraction ordered data abstraction safe assumption input container 
counter example enqueued assumption violated 
having eliminated possibility imprecise abstraction implementation defect 
research issues study revealed interesting research issues intend explore 
properties considered study necessary partial specifications system behavior 
admittedly incomplete useful 
seeding subsequent detection faults container implementations illustrates utility 
thorough study kinds faults revealed specifications provide better understanding breadth applicability model checking fault detection 
interpretations behavior container implementations checking properties systems containers 
ais finite state possible encode ltl formula check property container implementations 
essentially lift model checking results containers model checking applications provide practical illustration reuse verification results 
applied existing model checking tools validation correctness common container data structure implementations 
doing illustrated crucial correctness properties systems encoded ltl 
applied methodology incorporates techniques interpretation partial evaluation construct finite state models source code container implementations 
believe study demonstrates potential model checking practical means detecting faults general purpose software components 
raises number research issues study may expand breadth applicability model checking common types software systems 
authors james corbett george avrunin making inca toolset available enhancing predicate definition capabilities valuable discussions model generation 


abrial borger langmaack 
formal methods industrial applications specifying programming steam boiler control 
lecture notes computer science 
springer verlag oct 

avrunin buy corbett dillon wileden 
automated analysis concurrent systems constrained expression toolset 
ieee transactions software engineering nov 


generic data structure suite 
academic 
edu faculty ada default html 

clarke grumberg jha long mcmillan ness 
verification bus cache coherence protocol 
formal methods system design 

corbett 
evaluating deadlock detection methods concurrent software 
ieee transactions software engineering mar 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
conference record fourth annual acm symposium principles programming languages pages 

craigen gerhart ralston 
international survey industrial applications formal methods 
technical report national institute standards technology mar 

davies woodcock 
specification refinement proof 
prentice hall 

dill drexler hu yang 
protocol hardware design aid 
proceedings ieee international conference computer vlsi computers processors pages july 

dwyer avrunin corbett 
patterns property specifications finite state verification 
proceedings st international conference software engineering may 
appear 

dwyer schmidt 
limiting state explosion filter refinement 
proceedings st international workshop verification interpretation model checking oct 

dwyer pasareanu 
filter model checking partial systems 
proceedings sixth acm sigsoft symposium foundations software engineering nov 

dwyer pasareanu corbett 
translating ada programs model checking tutorial 
technical report kansas state university department computing information sciences 

hatcliff dwyer laubach 
staging static analysis program specialization 
lncs 
principles declarative programming th international symposium plilp sept 

hoffman snodgrass 
trace specifications methodology models 
ieee transactions software engineering sept 

holzmann 
model checker spin 
ieee transactions software engineering may 

lewerentz lindner 
formal development reactive systems case study production cell 
lecture notes computer science 
springer verlag jan 

liskov guttag 
abstraction specification program development 
mit electrical engineering computer science series 
mit press cambridge ma 

manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag 

mcmillan 
symbolic model checking 
kluwer academic publishers 

clarke osterweil 
verification communication protocols data flow analysis 
proceedings fourth acm sigsoft symposium foundations software engineering oct 

pnueli 
transition global modular temporal reasoning programs 
apt editor logics models concurrent systems pages 
springer verlag 

wolper 
specifying interesting properties programs propositional temporal logics 
proceedings th acm symposium principles programming languages pages st petersburg fla jan 
