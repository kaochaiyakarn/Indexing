workflow management systems state art nikolaou december commercial systems benefits derived workflow automation technology coordinating execution complex units consisting interdependent activity steps drawn considerable interest product developers research community 
section major commercial workflow management products reviewed lotus notes ibm flowmark 
lotus notes lotus notes groupware system support collaborative ad hoc workflow applications 
system provides basic infrastructure coordinate track manage business processes sharing data distributed client server environment integrating messaging database technology 
notes client provide single desktop user interface variety applications 
document oriented data model supported compound multimedia objects support user receiving tasks represented documents 
documents stored lotus notes databases 
system automate certain steps perform routing steps 
lotus notes workflow application consists documents views forms 
documents lotus notes databases serve application data store 
lotus notes databases replicated 
views list documents forms interface documents edited 
forms contain formulae macros agents 
agents provide notification certain events trigger execution specific tasks 
macros formulae written interpreted language supports event driven specification control flow 
agents routing workflow possibly step implementation 
system ole compliant integrated applications 
ibm flowmark flowmark workflow management supports structured production workflow applications 
system provides meta model business processes enables developers define department computer science university crete institute computer science forth po box gr heraklion greece 
mail ics forth gr process models fdl specification language graphical user front 
process models defined build time client stored workflow server maintains persistent state active process instances 
users take part workflow run time client interacts workflow server maintain user worklists route results 
workflow server provide status monitoring audit log tracking fdl defines process models terms directed acyclic graph activities 
nodes graph correspond activities run time coupled resources 
resources application programs humans 
activity input container represents context activity 
actual context instance activity set values formal parameters defined activity instance 
output container encapsulates results produced executing activity 
arcs process model graph define flow control data 
actual flow realized run time account context dependent conditions 
control connectors describe potential flow control data connectors link activity output container input containers activities describe flow data workflow progresses 
transition conditions defined boolean expressions control connectors actual flow control context dependent 
exit condition defined activity 
exit condition evaluates true activity terminates success 
synchronization conditions defined handle sequencing control data multiple control connectors leave certain activity 
research systems section survey important results current research activities related distributed workflow management systems 
ibm flowmark exotica project flowmark execution complex processes involving steps different platforms controlled single server maintains process definitions state information currently active process instances persistent storage 
order remove central point architecture adapted support coordination distributed fashion 
exotica prototype implements distributed coordination relying persistent messages persistent storage 
persistent messaging systems provides host machine local queues applications place messages retrieved applications 
messaging system takes care low level details delivering message appropriate queue remote machine 
type communication service connectionless accessible api calls 
applications transport protocol independent communicate queue abstraction 
queues persistent messages survive system failures 
enables asynchronous communication applications run different points time 
commercial middleware products support persistent messaging process underway message oriented middleware association 
examples products include ibm mqseries dec transarc 
design exotica layered top persistent queue system supports transactional semantics queue access api calls 
process model compiled process definition node definition divided parts 
part distributed appropriate node information users associated nodes roles associated activities specified process model definition 
receiving part process model node stores information starts process thread handle execution instances process 
process thread creates persistent queue communication nodes examines queue incoming messages 
activity ready execution activity thread started execute activity step 
manner node executes part process synchronizes nodes communication network queues 
node maintains information needed performing part workflow 
messaging system provides persistent storage required maintaining process instance related information 
failures result blocking execution activities executed failed node single failures prevent nodes continuing different parts process parts processes 
dartflow dartflow research prototype workflow management system supports semistructured processes workflows human intervention critical decision points required 
process instance handled transportable agent carries process specific code data follows steps order predetermined process 
migrating site site appropriate 
implementation dartflow agent tcl extension tcl interpreted language supports mobile code form transportable agents 
transportable agent thought encapsulation state logic 
state consists representation sequence steps carried words routing information required scheduling execution process instance 
logic interpreted site execute prescribed steps evaluate transition conditions determine precisely stage execution process instance 
routing steps dynamic depending run time conditions external events may alter predefined schedule 
dartflow supports dynamic modification process instance 
agent retrieving list tasks carried registers tracking server providing tuple form agent gamma id process gamma type task gamma list 
change occurs definition process tracking server notified 
information executing agents tracking server determines agents affected change notifies worklist server maintains worklists users 
agent completes execution step workflow represented element task list notify worklist server worklist user involved workflow updated 
interaction agent worklist server essential tracking server maintain current location agent 
time worklist server notify agent changes sequence steps carrying context assigned process instance 
describes prototype supports flexible transaction model allows global transactions execute heterogeneous database systems 
global transactions specified parallel language ipl subtransactions control data flow dependencies 
automatically executes subtransactions parallel possible violating dependencies 
meteor presents workflow specification language model process flow task specification language tsl provide interface heterogeneous autonomous distributed systems mainly multidatabases separating workflow design details interacting applications 
allows declarative rule description control data flow 
important point detailed task dependency model allows management atomicity consistency workflows capturing behavior transactional non transactional tasks 
meteor meteor project developed prototypes orbwork corba purely web technologies support distributed scheduling workflow 
workflow specification stored format called workflow intermediate language wil includes predecessor successor dependencies tasks definitions data objects passed tasks task invocation information 
code generator produces task management components wrappers human automated tasks 
wrapper includes hard wired specification immediate predecessors successors task manages code evaluating task activation condition invoking task handling error recovery 
components installed manually site users instantiate processes 
centralized monitor provides limited support tracking monitoring 
meteor provides extensive recovery facilities 
execution task meteor begins task manager determines task activation condition evaluating tree dependencies 
evaluation incremental task signals successors dependency graph workflow completed execution 
activated task wrapper code gets task input unpacking data objects passed predecessors tasks invokes task code assigned processing entity completion determines final state task packs output data objects signals successors tasks 
wide presents wide distributed architecture workflow management database management system active rule support 
rules provide reactive behaviour cope workflow events may related data time workflow states external sources 
workflow management infrastructure structured hierarchy workflow engines associated domain 
architecture offers layer transaction model 
global transactions executed sagas local transactions follow nested transaction model 
workflow engine maintains event database includes scheduler component matches events rules 
selected rules recorded execute list polled rule interpreter component 
interpreter evaluates condition rule satisfied execute action 
event detection condition evaluation execute separate local transactions 
wide provides specification language aims cover organization information process aspects workflow model 
organization specification defines attributes agents relationships 
agents model include staff teams automated tools 
information specification defines data process operations performed data form definitions 
forms means group share data 
definition includes presentation details 
process specification captures control flow exception handling rules data flow parameter passing forms 
workflow specified hierarchy activities 
activity defined stating precondition post condition actions exception handlers role constraint controls assignment activity agent execution 
presents model workflow execution concept information carriers carried interactions encapsulate activities processing stations assumed autonomous may partially automated 
locus computation migrates inca includes relevant execution context workflow processing station 
inca contains private data activity define context shared activity steps log actions parameters executed far set rules defining control data flow activity steps 
depending activity support provided processing station action requested inca may execute transaction unprotected action may performed manually human worker 
processing station receiving inca performs service requested routes inca destination 
rules encode control data flow failure atomicity requirements 
possible processing station modify add delete rules data inca 
basis supporting workflows dynamically evolving environments 
project concerned theories reasoning concurrent composition agents methods tools implementing sessions web 
agent defined terms state interfaces operations concurrent composition agents 
infosphere collection agents 
describes java system supports peer peer communication distributed agents 
focus identifying specifying software components composed create distributed applications layered top standard network technologies www 
infosleuth infosleuth supports mediated interoperation services retrieving processing information dynamic network information resources query results sensitive available resources 
agents services process requests making inferences local knowledge routing request appropriate agent decomposing request set sub requests routing appropriate agents integrating results 
routing decisions infosleuth ontology metadata describes capabilities relationships agents 
query decomposition domain ontology selected client describes knowledge data relationships stored information resources 
agents communicate means kqml kif 
internally represent queries specified domain ontology 
integration system framework integration enterprise information resources 
events capturing exchanging information systems information resources 
information brokers mediate delivery events hiding distribution event producers consumers 
agents embody business processes 
subscribe particular types events apply business rules result publish events 
adapters enable event exchange systems 
discusses issues related unreliable execution environment provided www 
presents design architecture supports automated execution business business transactions web applications electronic commerce 
outlines solutions problems network server failures efficiency issues 
coyote network centric applications stretch traditional transaction processing concepts directions mainly due fact transactions involve multiple autonomous service providers 
argues environment main integrity requirement parties involved interaction respects pairwise legal agreements presents service transactions model capture requirements network centric applications 
model service actions implement activity steps persistent conversations built actions scheduling rules determine action response events compensation paradigm maintain integrity 
outlines design monitor environment supporting applications type 
service combinators issue automating transactions web started receive attention 
presents simple language allows expression common strategies handling failure slow communication fetching content web 
context service accessible content provider wrapped error detection handling code 
language provides service combinators operators composing services account output failures 
semantics language defined terms effects operators state services 
metadata syntax implemented xml defines programmatic interfaces web content services enable automated structured access client programs 
definitions include location url service input parameters submitted get post methods output parameters returned service regions returned documents 
possible specify conditions successful completion service error indications returned clients 
conditions enable chaining services client issue requests incorporate multiple services 
domain specific languages handle interactions presents approach domain specific markup languages handle interactions peer peer system 
languages understood agents humans interact 
objective dynamically integrate tools distributed collaborative applications 
sgml metagrammar system specifying markup languages 
clf describes environment supports distributed multi server coordination standard www servers resource managers providing coordination clients 
coordination language facility clf provides extended object model assumes objects viewed resource managers supporting basic operations insertion removal specified resources 
resources directly visible outside world accessed associatively properties defined interface object 
client server interactions specified clf rule scripting language rule sets define coordination agents implement client behavior 
clf rules transactional units guaranteed removal resources left hand side rules insertion resources right hand side rules performed atomically 
clf interaction protocol includes support negotiation client ask server notification service offers 
clf basis framework electronic commerce 
framework clf coordination commercial actors customers providers bankers brokers form negotiation transaction notification 
negotiation occurs customer multiple providers specify options set items interest provider banker determine mode payment customer delegates task banker 
transaction occurs fully specified order form processed banker 
notification keep customer informed evolution shipment delivery process 
intend regularly update survey 
latest version available url www ics forth gr aurora 
lotus notes overview 
available url www lotus com 
infosleuth semantic integration information open dynamic environments 
proceedings acm sigmod conference management data 
allen 
automating web 
world wide web journal 
available url www com technology html 
alonso agrawal el abbadi mohan kamath 
exotica persistent message architecture distributed workflow management 
proc 
ifip working conference information systems development decentralized organizations 
andreoli freeman pareschi 
coordination language facility coordination distributed objects 
theory practice object systems 
andreoli pareschi 
framework electronic commerce 
ieee internet computing 
parr 
coyote approach network centric service applications conversational service transactions monitor application style 
proc 
high performance transaction processing workshop 
barbara mehrotra rusinkiewicz 
managing dynamic workflows distributed environment 
journal database management 
special issue multidatabases 

xml java web 
world wide web journal 
available url www org xml 

integrating corporate computing environment 
available url www com 
chen elmagarmid liu mullen 
multidatabase prototype system 
proceedings acm sigmod conference management data 
cai nog 
dartflow workflow management system web transportable agents 
technical report pcs tr dartmouth college 
available url www cs dartmouth edu agent 
cardelli davies 
service combinators web computing 
proc 
usenix conference domain specific languages 
ceri grefen sanchez 
wide distributed architecture workflow management 
proc 
th int workshop research issues data engineering 
chan sanchez grefen apers 
specification language wide workflow model 
proc 
int conf 
advanced information systems engineering caise 
chandy 
caltech project overview information infrastructures task forces november 
available url www caltech edu 
chandy dimitrov le richardson rifkin tanaka 
world wide distributed system java internet 
proc 
th ieee int symposium high performance distributed computing 
das kochut miller sheth 
orbwork reliable distributed corba workflow enactment system meteor 
technical report uga cs tr university georgia 
fuchs 
talk extending web support collaboration 
proc 
th workshops enabling technologies infrastructure collaborative enterprises 
fuchs 
domain specific languages ad hoc distributed applications 
proc 
usenix conference domain specific languages 
garcia molina salem 
sagas 
proceedings acm sigmod conference management data 
grasso meunier pareschi 
distributed coordination workflow world wide web 
computer supported cooperative 
kamath ramamritham gehani 
system building global transactional workflows 
proc 
th int workshop high performance transaction systems 
krishnakumar sheth 
managing heterogeneous multi system tasks support enterprise wide operations 
distributed parallel databases april 
leymann roller 
business process management flowmark 
proc 
th ieee computer society int conf 
compcon 
miller sheth kochut singh 
meteor web workflow management system 
technical report uga cstr university georgia 
moss 
nested transactions approach reliable distributed computing 
mit press 
neches fikes finin gruber patil senator 
enabling technology knowledge sharing 
ai magazine 
sheth kochut miller das lin lynch 
supporting state wide immunization tracking multi paradigm workflow technology 
proc 
vldb conference 
