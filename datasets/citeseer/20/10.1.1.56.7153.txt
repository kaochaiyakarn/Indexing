disk scheduling multimedia data streams steve intelligent network technical analysis group bellcore nvc newman springs road red bank nj cc bellcore com jay department electrical computer engineering carnegie mellon university forbes avenue pittsburgh pa usa ece cmu edu presents framework reasoning timing correctness multimedia data streams supported shared serially reusable server 
real time scheduling approach guarantee timing requirements multimedia applications video demand multimedia presentations 
framework incorporates scheduling models defined abstractions reason timing correctness physical resources 
scheduling models applied multimedia systems periodic tasks retrieve data disk 
multimedia system designer reason priori throughput capacity schedulability system 
models enable real time system architect quickly explore system design space establish maintain firm performance baseline optimize system configuration parameters explore impact new technologies 
example application framework new disk policy called scan developed 
algorithm applied multimedia task set analytical results 
performance various disk policies compared reported framework 

motivation increasing interest field multimedia led integration various media common storage transmission devices 
digital data hi fi audio voice full motion video graphics ordinary text stored servers concurrently multimedia applications 
multimedia mm applications include video demand multimedia teleconferencing interactive video multimedia presentations 
means storing integrated data computer industry hard fixed disk 
multimedia systems place unique real time demands disks 
continuous rate multimedia cm systems data retrieved disk played back specific deadline 
deadline met user notices skips gaps playback 
continuous media files require guaranteed bandwidth high throughput 
example cd quality audio requires kbyte second color digital video needs mbps 
uses considerable bandwidth cm affords systems engineer luxury predictability 
predictable behavior continuous media data requests developing real time scheduling models disks 
scheduling models defined abstractions reason timing correctness physical resources 
capture motion disk arm scheduling burdens associated motion 
scheduling models specific number mix cm data channels guaranteed supported gaps playback channel time 
multimedia systems engineer provided means design implement multimedia server 
go example framework develop new disk scheduling policy called transformation scan scan outperformed disk scheduling algorithms modeled 
real time scheduling models compare performance various disk scheduling policies 
additionally demonstrate models allow investigate engineering tradeoffs encountered developing cm server 
approach characteristics historical disk scheduling real time disk scheduling workload aperiodic periodic design optimized average case guaranteed timing individual tasks technique queuing theory rt scheduling theory applications airlines banking retail cm servers multimedia table 
possible approaches disk scheduling related contention real time rt scheduling theory appropriate guaranteeing performance disks supporting cm 
previous research dealing disk scheduling policies concerned general purpose computing 
statistical analysis aggregate characteristics approaches optimize average case behavior guarantee performance individual data channels table 
contrast cm channels specific individual deadlines 
connection general purpose computing techniques scheduling cm data 
research sufficiency bounds admission protocols put forth previous research done cm file systems anderson real time liu layland sufficiency bounds 
rangan looked idea media mixing cm server point view admission control mm server design 
confirms supports findings closely resembles regarding scan algorithm 
research cm servers nichols performed measurements response time throughput classify homogeneous mm data discuss heterogeneous data 
likewise yu performed numerical analysis homogeneous servers scan round robin algorithm developed called grouped sweeping scheme analyze heterogeneous data 
research concerned cm rt disk scheduling done 
compared efficiency various rt disk policies aperiodic disk requests 
research concentrate providing framework system design level priori reasoning disk scheduling stored multimedia data 
remainder organized follows 
section provides background real time disk scheduling models 
analysis comparison different disk scheduling algorithms section 
section different ways improve performance cm servers evaluated 
performance results numerical analysis development new scan algorithm section 
appear section 
developing disk scheduling models section continuous media server model defined 
server part larger multimedia system residential video demand server collection networked multimedia workstations 
principal entities mm system composed network clients cm server 
network ties clients server composed hard disk buffer controller shown 
server repository cm data provides multiple concurrent cm data channels clients 
channel data stream single type cd audio ntsc video hdtv video composed data requests 
periodic requests issued clients kept service queue 
requests may may sorted queue depending policy 
dispatched disk requests incur various scheduling burdens associated arm movement 
read disk data transmitted network playback client 
client may issue request receipt data 
controller disk service queues buffer pacing chunking buffer buffer period transformation scan buffer buffer buffer clients data requests tasks network cm server data head head head 
continuous media server model continuous media server support data channels homogeneous heterogeneous environments 
homogeneous server stored data playback rates server stores compact disk audio data homogeneous 
timing requirements channel 
hand heterogeneous server supports multiple data types 
example heterogeneous server store cd quality audio data full motion video data disk 
heterogeneous systems interesting differing playback rates introduce complex channel timing requirements 
point nomenclature 
scheme task interchangeable request data 
term task real time scheduling theory describe scheduling entity term request disk scheduling single request data disk 
requests data received clients 
hand term disk request denote request data issued controller disk 
illustrates difference terms request disk request 
real time scheduling theory scheduling theory provides method priori determination timing correctness real time systems 
proposed set consistent scheduling models accurately reflect timing concurrency mechanical behavior disk systems 
scheduling models extend existing scheduling theory order answer question cm channels multimedia server support 
question answered simply considering disk transfer rate divided aggregate bandwidth channels 
issues involving overhead limited addressed 
summary terms introduced discussion table 
notation definition request data client task 
period request task priority task time transfer data disk buffer task run time seek max worst case seek time seek min worst case track seek time head switch worst case time needed hard disk switch reading disk head latency worst case rotational latency intra task overhead occurs task execution intra task head switch seek min chunk time read chunk data time read track data time read cylinder data worst case number cylinder boundaries disk arm cross fulfill request worst case number times disk heads switched order fulfill request queue set queues holds task scan scheduling period tasks queue scan scheduling overhead task specific system overhead overhead sys task independent system overhead shared overhead blocking delay due lower priority requests bandwidth bits needed client maintain cm channel startup latency experienced client table 
notation order determine channels server support concepts derived real time scheduling theory 
seminal scheduling theory liu layland 
set utilization scheduling equations preemptive priority systems 
equations provide sufficient necessary sufficient conditions determining schedulability idealized tasks fixed dynamic algorithms respectively 
task set schedulable task deadlines met 
words tasks schedulable task set timing requirements tasks guaranteed met individual basis 
lehoczky sha ding developed necessary sufficient scheduling equations fixed priority scheduling periodic tasks min previous works constrained assumptions requests tasks periodic worst case known processing times tasks ready period 
task complete request occurs task deadlines task period 
tasks independent synchronize block suspend 
cost scheduling preemption including interrupt handling arbitration context swapping assumed zero 
research done releasing assumptions little including overhead costs assumption 
research extending scheduling theory address blocking performance costs little treatment performance penalties incurred non preemptive resources disks 
concept scheduling models scheduling model abstraction allows reason timing correctness set activities executed particular shared resource 
generic scheduling model developed scheduling theory discussed subsection 
order consider set activities tasks executing shared resource 
tasks represent decreasing frequency order 
periodic task characterized period priority deadline phase run time task priority mechanism discriminating tasks different timing requirements 
assume system supports number priorities 
tasks priorities priority task higher task generic scheduling model shown equation extension equation lehoczky sha ding necessary sufficient conditions incorporate implementation realities 
capture burden effects physical resources 
formulation successfully model buses networks real time operating systems 
min overhead overhead sys blocking disks systems degrade necessary sufficient bounds equation tight sufficiency bounds 
equation overhead system time directly bound specific task 
overhead sys similar overhead system overhead time bound single task 
blocking component time elapsed higher priority task prevented running due lower priority task 
formulation remainder 
degree schedulable saturation max having provided summary real time theory model behavior disk scheduling policies section quantitative evaluation criterion comparing policy performance 
fundamental merit fom real time computing schedulability 
task set schedulable different disk policies schedulability inadequate measure 
need non binary fom led development degree schedulable saturation max compare disk algorithm performance 
max defined follows max max defined min overhead overhead sys blocking max measure schedulable load system lower max better 
task called limiting task max max unity new tasks priority greater equal limiting task scheduled 
case system fully saturated 
max monotonically non decreasing demands task increase number tasks scheduled increases 
max increases system overhead blocking increases 
max greater unity system 

engineering multimedia servers scheduling models section describes process identifying minimizing overhead blocking components encountered scheduling mm data 
behavior disk policies modeled real time scheduling theory compared fom developed section 
process hope demonstrate applicability methodology systems engineering 
goal maximizing useful performed server realizing disk scheduler support channels possible 
task set composed video audio voice channel compare performance 
heterogeneous systems evaluated exclusively 
done homogenous servers 
results analysis scheduling models server capacity incrementally increased 
systematically reducing overhead blocking new disk scheduling algorithm scan result 
notwithstanding presentation new algorithm emphasis framework facilitates engineering multimedia servers 
mm system order client establish channel specify cm data needs server 
server maintains set channels fulfilling periodic requests clients 
application level viewpoint client channel characterized bandwidth playback rate channel 
latency requirement amount propagation delay experienced client 
conceptually latency pipeline startup time partitioned resources mm system including disk network bus operating system 
latency appear scheduling models places upper bound buffer size tight latency require small buffer size 
client receives data latency longer concern 
example determine period runtime request bandwidth channel consider server receives request cd quality audio channel 
assume sampling rate khz bits sample 
order provide stereo sound provided right left speaker channel capacity needed twice single khz bit channel mbps small bits capital bytes 
request characterized bandwidth mbps 
run time amount time takes disk fill buffer determined transfer rate buffer capacity 
assuming example mbps disk transfer rate kbyte kbit buffer channel task run time kbit mbps ms similarly period time needed channel empty buffer determined bandwidth buffer capacity 
order maintain mbps bandwidth kbit buffer emptied mbps kbit times second 
period task inverse ms manner request task set specified bandwidth channel run time period depend capacity buffer time necessary fill buffer time needed empty 
bandwidth buffer independent fully described client knowledge size buffer server 
investigate optimizations selecting buffer size 
example server providing audio channels concurrent channel homogeneous cd server need receive buffer example kb data ms server supported voice channels cd audio channels heterogeneous system voice tasks need kb data ms cd channels need kb ms reason difference voice channels kbps need times bandwidth cd channels kbps table 
requests types data kept queue fcfs regard bandwidth requirements voice requests impede audio requests audio requests arriving ratio voice requests 
media type sampling rate playback rate original playback rate compressed voice khz bit kbps kbps cd audio khz bit ch mbps kbps ntsc monochrome mhz bits sample mbps mbps ntsc color mhz bit mbps mbps hdtv frames second mbps mbps table 
examples continuous media data types disk scheduling models table summarizes disk scheduling models fcfs scan fcfs scan disk policies 
fcfs policy simply come served multiple queues queue cm data type priority 
priorities assigned task period shortest period task gets priority shortest gets priority assuming queues priority assigned queue fcfs policy applied requests 
higher priority queues emptied lower higher priority queue preempt lower priority 
scan policy similar fcfs priority queue scanned 
applying generic real time scheduling model equation disk scheduling conditions table result 
guide notation tables table 
proof scheduling model appendix proofs thesis 
models developed account physical movements disk arm worst case performance disk periodic nature task set 
table summarizes run times periods task set investigate disk policy performance 
disk parameters table 
framework supports arbitrary disk parameters analysis assume non preemptive non faulty hard disk linear seek times 
disk operations read data placed contiguously disk 
disk arm moves track track read rotational latency occurs 
buffer server model assumed filled request channels double buffered reading writing buffer 
policy overhead system overhead blocking fcfs latency intra task seek max latency intra task seek max scan latency intra task seek max latency intra task fcfs latency intra task seek max latency intra task seek max max scan latency intra task seek max latency intra task seek max max table 
scheduling conditions common disk scheduling algorithms channel characteristics cm data type number tasks bandwidth voice kbps cd audio kbps video mbps original task set continuous media data type ms ms priority voice low cd audio med video high table 
task set analytical results parameter value transfer rate mbps seek max ms seek min ms head switch ms latency ms table 
disk parameters examples smax buffer size mbyte ideal scan fcfs scan fcfs 
performance common disk scheduling policies pacing fcfs max performance smax buffer size mbyte ideal blocking overhead fcfs full scan max performance smax buffer size mbyte ideal blocking overhead scan full fcfs max performance smax buffer size mbyte ideal blocking overhead fcfs full scan max performance smax buffer size mbyte ideal blocking overhead scan full 
overhead blocking components policy scheduling task set table comparison performance policies task set specified table shown 
schedulable saturation max axis total buffer size entire concurrent task set axis 
total buffer size computed double buffering assumption channels formula total buffer size buffer channel seen priority policies fcfs scan outperform fcfs scan significant margin 
non priority policies completely saturated due overhead blocking buffer sizes smaller mbytes 
plot marked ideal performance expect removing blocking overhead ideal voice audio video disk rate kbps kbps ideal plot constant respect increasing buffer size amount useful done unit time change regardless buffer size 
concept intuitive period run times tasks change buffer size increases number channels supported server 
period run times scaled buffer size order find best engineering point design space efficiency cost tradeoffs 
figures size request received clients size disk request sent disk 
buffer size increases disk request sizes increase 
method dispatching buffer sized requests disk called pacing 
drawback pacing blocking component intimately related size request client usually large 
investigating different methods reducing blocking topic section 
reducing blocking component figures schedulable saturation broken constituent parts 
section reduction effects blocking analyzed 
blocking reduced priority queues chunking transforming heterogeneous task set homogeneous 
technique examined section scan 
techniques analyzed section 
priority disk algorithms figures max components shown individually 
overhead blocking schedulable saturation attributable overhead blocking respectively 
curve labeled full includes effects taken policy 
notice blocking component buffer size 
blocking largely due run time blocking task 
refer table blocking conditions 
order generate data figures increase period task commensurate increase run time buffer size grows 
useful unit time task constant duration task block higher priority task 
notice algorithms fcfs scan blocking components relatively high schedulable saturation 
composed sums overhead execution time lower priority tasks queue 
contrast blocking priority algorithms fcfs scan includes overhead run time task 
reduce blocking component priority queues store tasks priority 
shows graphically priorities reduces blocking 
exhibit queue level preemption say fcfs scan new task simply placed single queue 
worst case delayed tasks set complete dispatched 
contrast exhibit task level preemption currently executing task may prevent newly arrived task greater priority executing 
achieved keeping multiple priority queues higher priority task arrives just lower priority task begins execution higher dispatched immediately lower completes 
fashion lower priority queue preempted higher priority queue 
new task arrival chunk level preemption task level preemption queue level preemption duration newly arrived task blocked 
request buffer data 

comparison levels preemption non priority algorithms priority algorithms video priority audio priority voice priority head head head head queue queue queue queue 
comparison pba queues 
keep queue request keep queue priority 
chunking second way reduce effects blocking chunking 
define chunking method segment ing request received client entire buffer worth data smaller disk requests sequentially dispatched disk 
pacing chunking amount time higher priority task blocked longer tied task size chunk size 
policy overhead system overhead blocking fcfs chunking latency intra task seek max latency intra task seek max chunk scan chunking latency intra task seek max latency intra task seek max chunk table 
scheduling models chunking algorithms order contrast chunking pacing consider periodic request shown section request period dependent buffer size server playback rate channel 
example assume request buffer data say kbytes arrives ms kb arriving second generates mbps channel 
bandwidth maintained chunking dispatching consecutive kb disk requests kb request disk 
addition maintaining chunking reduces blocking allows incoming high priority request interrupt kb requests smaller kb disk requests 
disk transfer rate mbps chunking blocking component tied chunk ms ms chunking affords chunk level preemption dispatching disk requests smaller actual request 
illustrates concept 
networks exhibit additional overhead slicing data streams packets buses incur overhead associated tenure time disks chunking generate additional overhead solely due segmenting requests smaller parts packetization overhead 
hand queue preempted additional overhead incurred rotational latency returning preempting task 
chunking provides large reduction blocking return slightly higher fixed overhead 
shows chunking performed task set table chunk sizes tracks 
data fcfs scan chunking copied 
factors interact track best chunk size 
chunks smaller track shown result drastically increased overhead chunks larger track amount overhead constant latency 
time sizes larger track result additional blocking 
minimal amount saturation task set associated chunk size track 
performance fcfs scan chunking superimposed results 
chunking algorithms outperform increasingly large margin buffer sizes increase mb asymptotically approaching ideal case far right axis 
note performance curve scan chunking similar performance curve policy overhead compare 
chunking reduces blocking component point saturation larger buffer sizes dominated overhead 
reducing overhead component overhead involved moving mechanical arm disk hampers performance resulting schedulable saturation reduces number concurrent channels 
extent overhead impacts efficiency especially smaller buffer sizes evident figures 
overhead dominated disk arm movement 
section investigate reducing overhead component scanning algorithms 
scanning algorithms disk policies order requests service scan disk amortize cost scan entire task set 
seek max bound tasks queue overhead sys example table shows fcfs algorithm incurs latency intra task maximum seek penalty task queue 
hand scan maximum seek penalty overhead 
maximum seek time incurred entire queue request queue 
notice fcfs scan plots close saturation scan outperforms fcfs 
performance advantage evident figures separated performance fcfs scan policies schedulable saturation components 
fully loaded full performance fcfs scan includes blocking overhead taken directly shown comparison 
figures show high contribution overhead increases smaller buffer sizes 
reason seek times order run times arm movement burdens effect additional channels 
chunk pacing chunking original task time transfer buffer data original original 
pacing chunking fcfs policy exhibiting blocking task arrivals task active max seek intra task rotational latency task blocked task blocked request data client fcfs chunking reduce blocking task active max seek intra task rotational latency task arrivals task blocked task additional fixed cost overhead due chunk size size disk request sent disk size original request client 
comparison blocking fcfs smax buffer size mbyte fcfs chunking fcfs fcfs fcfs fcfs fcfs scan smax buffer size mbyte scan chunking scan scan scan scan scan 
performance fcfs scan chunking different chunk sizes compared scan chunking smax buffer size mbyte ideal scan chunk fcfs chunk scan fcfs scan fcfs 
performance priority policies chunking fcfs chunking smax buffer size mbyte ideal blocking overhead fcfs chunk scan chunking smax buffer size mbyte ideal blocking overhead scan chunk 
overhead blocking components fcfs scan chunking 
fcfs scan overlap completely 
results exactly task set priority queue includes task 
task queue scan significantly outperform fcfs 
task set includes tasks priority level 
provides queue level scans queue 
task queue scan spends entire seek task results performance identical fcfs 
far systematically attempted support multimedia channels heterogeneous cm server reducing overhead blocking relative throughput 
previous sections shown pacing results high overhead high blocking components schedulable saturation 
overhead reduced scanning algorithms 
decrease blocking priority schemes chunking period transformation 
method investigated section 
scan previous sections engineering tradeoffs involved increasing performance scheduling cm data investigated 
scanning algorithms exchanged complex disk policy return reduced overhead 
priority queues introduced complexity order reduce blocking 
chunking reduced blocking trading fixed additional overhead decreased blocking 
priority queues chunking reduce blocking way eliminating blocking transform periods task set common period 
period transformation blocking definition increased overhead things equal 
additional overhead arises extra movement disk arm 
policy incorporates advantages scanning algorithms period transformation reducing overhead eliminating blocking time 
period transformation convert periods task set anchor period 
duration anchor period 
cost memory buffer latency requirement channel usually limit buffer size length period 
cm data task run times altered proportionality constant derived ratio anchor period disk transfer rate rb quite similar vin rangan quality proportional multi client servicing algorithm 
anchor period determined period transformation performed follows 
consider task set table 
relationship period run time task related follows 
order maintain client bandwidth disk transfer rate anchor period disk transfer rate rb ms disk transfer rate mbps voice kbps cd kbps video mbps voice ms buffer voice kb cd ms buffer cd kb video ms buffer video kb period transformation run time task different buffer sizes 
total buffer size channels supported server computed tasks formula total buffer size buffer size buffer size buffer size disk transfer rate data table reflect fact period task table transformed shortest period 
changing periods shortest period task set called anchor high anchor period longest anchor low 
anchor high table run times change periods 
note concept priority scan case periods identical 
continuous media data type scan ms scan ms priority voice cd audio video table 
task set period transformation scan integrates methods reducing max scanning period transformation 
transforming different periodic rates task fixed sized buffer fixed period task set differing buffer requirements eliminate blocking whatsoever 
simply performing scan algorithm requests arrive having period served scan disk 
head track track disk arm time full seek direction motion 
sorted scan queue 
task period 
original task set anchor high period transformation video priority audio priority voice priority anchor low period transformation 
comparison different anchor periods policy overhead system overhead blocking scan latency intra task seek max table 
scheduling models scan algorithm smax buffer size mbyte ideal scan scan chunking fcfs chunking scan fcfs scan fcfs 
performance scan compared policies illustrates superior performance scan scheduling task set table 
scan enables support multiple channels lower buffer size regions kbytes 
table shows aggregate overhead incurred task set included single scan queue latency intra task task set seek max entire task set 
compared tables table demonstrates scheduling conditions scan involve smallest amount overhead course blocking 
findings consistent vin result scan providing superior performance 
disk arrays methodology scheduling models capture behavior disks extended technologies incorporate multiple disks 
disk arrays recognized effective means increasing server performance 
redundant array inexpensive disk raid systems array systems subject research 
bandwidth necessary multimedia applications high striped disk arrays provide easily realizable means cm servers implemented 
extend framework include disk array environment number disks array 
assume data striped disks 
run time task task set reduced increasing throughput server run times tasks reduced capacity server increased 
manner disk arrays decrease contribution schedulable saturation due overhead blocking useful done unit time 

framework reasoning timing correctness multimedia data streams supported shared serially reusable cm server 
disk scheduling models capture implementation realities bridge gap real time scheduling theory application multimedia 
showed examples scheduling models engineering decisions process introduced new disk scheduling analyzed performance 
buffer concurrency tradeoffs overhead blocking tradeoffs investigated 
plans increasing scope include incorporating non linear seek model better fidelity disk scheduling models 
plan investigate overhead blocking tradeoffs double buffering assumption order assert realistic numbers cost building cm server 
new scheduling models incorporate writing disk 
may include releasing contiguous data assumption order determine performance limitations imposed non contiguous data 
appendix priority fcfs fcfs policy provides multiple priority queues data type fcfs schedule requests queue 
overhead involved task non priority fcfs overhead tasks higher priority worst case full seek 
blocking involved task duration elapses waiting current task complete 
worst case occurs current task incurs full seek involves largest transfer time largest intra task time 
assume sufficient queues priorities 
lemma worst case overhead fixed priority task heterogeneous task set scheduled fcfs policy latency seek max intra task proof assume task arrives time 
tasks non preemptive task arrives wait completion currently executing task pending subsequent higher priority tasks completed 
additionally fcfs scheduling queue means worst case exists tasks ahead task dispatched overhead incurred sum overhead latencies suffered server order serve overhead includes latency intra task definition 
worst case placement data retrieved causes additional wait seek max total overhead task latency seek max intra task lower priority task interrupt cause overhead 
additionally higher priority task arriving task initiates execution preempt 
tasks contribute overhead task worst case overhead bound task latency seek max intra task lemma worst case blocking time due task arrivals equal lower priority set heterogeneous tasks fixed priority task interval scheduled policy latency seek max intra task max proof assume task placed priority queue come served basis 
lower priority task preempt task initiated task arrive infinitesimally lower priority task dispatched service 
costs due task definition lemma seek max latency intra task worst case run time spent behalf lower priority task largest possible lower priority tasks max total worst case blocking cost latency seek max intra task max theorem task set consisting heterogeneous periodic tasks schedulable fcfs policy conditions hold min latency seek max intra task latency seek max intra task max proof result lehoczky sha ding conditions schedulability equation showed worstcase response time calculate schedulability fixed priority task set 
lemma worst case overhead incurred task scheduled fcfs policy adds latency seek max intra task execution time task addition lemma shows worst case blocking incurred task adds latency seek max intra task max task set schedulable utilization 
theorem follows 

rangan vin ramanathan communication architectures algorithms media mixing multimedia conferences ieee acm transactions networking vol 
pp 
feb 

shepherd design implementation continuous media storage server proceedings rd international workshop network operating system support digital video audio nov 

geist daniel continuum disk scheduling algorithms acm transactions computer systems vol 
pp 
feb 

geist reynolds disk scheduling system communications acm vol 
pp 


disk scheduling fcfs vs sstf revisited communications acm vol 
pp 
nov 

seltzer chen ousterhout disk scheduling revisited proceedings usenix pp 
winter 

properties disk scheduling policies multiprogrammed computer systems proceedings afips fall joint computer conference pp 


pinkerton comparative analysis disk scheduling policies communications acm vol 
pp 
mar 

anderson osawa govindan real time disk storage retrieval digital audio video data report 
ucb csd computer science division eecs university california berkeley aug 

anderson 
wahbe govindan andrews support continuous media dash system report 
ucb csd computer science division eecs university oct 

design implementation highbandwidth file service continuous media master thesis massachusetts institute technology sep 

rangan vin ramanathan designing demand multimedia service ieee communications magazine jul 

vin rangan admission control algorithms multimedia demand servers proceedings rd international workshop network operating system support digital video audio nov 

nichols performance studies digital video client server environment proceedings rd international workshop network operating system support digital video audio nov 

yu chen kandlur design analysis grouped sweeping scheme multimedia storage management proceedings rd international workshop network operating system support digital video audio nov 

abbott garcia molina scheduling requests deadlines performance evaluation proceedings real time systems symposium lake pp 
vista florida dec 

abbott garcia molina scheduling real time transactions disk resident data technical report cs tr dept computer science princeton university feb 

carey livny priority dbms resource scheduling proceedings fifteenth international conference large data bases pp 


chen stankovic kurose towsley performance evaluation new disk scheduling algorithms real time systems journal realtime systems vol 
pp 

liu layland scheduling algorithms multiprogramming hard real time environment journal acm vol 
pp 


lehoczky sha ding rate monotonic scheduling algorithm exact characterization average case behavior ieee real time systems symposium 

sha rajkumar lehoczky priority inheritance protocols approach real time synchronization ieee transactions computers vol 
pp 
sep 

conventional early token release scheduling models ieee token ring technical report cmu cds carnegie mellon university sep 

scheduling real time traffic networks ph 
thesis carnegie mellon university june 

engineering analysis realtime systems submitted proceedings ieee jan 

sha systematic approach designing distributed real time systems ieee computer sep 

katcher engineering analysis fixed priority schedulers submitted ieee transactions software engineering 

snow technical report carnegie mellon university jan 

harbour klein lehoczky timing analysis fixed priority scheduling hard real time systems proceedings real time systems symposium dec 

katcher fixed priority scheduling limited priority levels preparation submission journal real time systems 

disk scheduling continuous media data streams master thesis carnegie mellon university dec 

sha lehoczky rajkumar solutions practical problems prioritized preemptive scheduling ieee real time systems symposium 
