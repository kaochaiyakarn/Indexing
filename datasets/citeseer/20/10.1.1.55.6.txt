likeit intelligent string comparison facility peter yianilos kirk nec research institute technical report may highly efficient ansi facility described intelligently comparing query string series database strings 
bipartite weighted matching approach taken tolerates ordering violations problematic simple automaton string edit distance methods common practice 
method character polygraph require words properly formed query 
database characters processed rate approximately second mhz pentium pro processor 
subroutine level api described simple executable utility supporting command line web interfaces 
optimized web interface reported consisting daemon multiple databases corresponding cgi stub 
daemon may initiated manually inetd 
keywords string comparison similarity text database search retrieval bipartite matching assignment edit distance 
authors nec research institute independence way princeton nj 
email research nj nec com 
decade ago databases applications relatively small number users highly structured corporate data processing environments 
databases central application mainstream computing 
occurred large part decade striking advances connectivity 
mid eighties emphasis local area networks replaced world internet 
time community users accessing databases grown somewhat homogeneous geographically localized collection highly diverse group spanning globe speaking languages 
describes likeit software facility addresses central problem emerged result changes robust semistructured text retrieval small medium size databases 
semistructured text lies fully structured databases unconstrained text streams 
fully structured database example represent person name fields name parts 
semistructured approach represent name formal way single text field 
examples semistructured text fields institution names addresses directory businesses item names descriptions online catalog author names book titles bibliographic database 
related fields combined illustrates bibliographic record implicitly containing author title journal volume year fields 
considerable variation possible description item semistructured record 
person name listed 
middle name excluded abbreviated 
ordering complex name parts determined 
information may missing record extra information may 
principle policies established try regularize representations practice policies rapidly complex confusing 
unforeseen exceptional cases variations errors database commonly user query easily defeat search retrieval operations predicated enforced regularity 
world wide web places enormous amount information disposal ordinary user equipped pc modem internet connection 
information unstructured level simple paragraphs list items timely ephemeral nature information unreasonable expect 
furthermore query record andersson optimal bounds dictionary problem lncs words query misspelled occur wrong order space separating 
desired record identified likeit facility listing descriptions field theoretical computer science 
author name title related information combined single database text field 
information directly human generated errors relatively abundant data certainly clean corporate database 
address problems variation error semistructured data increasing sophistication software compare queries semistructured records 
heart likeit facility function compares text strings returns numerical indication similarity 
typically strings user query record database 
function fast possible compare query thousands hundreds thousands database records delivering acceptable response time 
included high speed heap data structure track best matches encountered search 
important benefit likeit approach queries simple free form expressions user looking 
query language comparison function robust respect typical errors missing extra information ordering see database 
likeit facility includes natural language specific considerations 
operates byte strings may languages applications language dna sequence comparison 
contribution likeit particularly simple time implementation intelligent string comparison bipartite matching 
mhz pentium pro processor processing byte database information typically requires roughly records characters processed seconds 
likeit sense fourth generation implementation general approach 
algorithms general type likeit introduced commercial spelling correctors proximity technology franklin electronic publishers 
linguistic software components developed companies license word processing programs hundreds publishers tens millions hand held spelling devices 

pf vlsi chip special purpose pipelined processor implemented algorithm 
today software matches exceeds performance device comparison entirely fair pf clocked mhz 
design implemented today result order magnitude hardware advantage 

friendly finder software utility introduced proximity technology implemented algorithm software accelerations special treatment bigrams 
result small database searched early personal computers pf chip 
computational heart friendly finder available license named 

transition bipartite matching viewpoint took place algorithms improved cases simplified 
result entirely new algorithms family 
likeit facility implementation new developments 
algorithms lead linear time algorithms large class graph cost functions including simple linear costs likeit 
linear time matching algorithms particularly simple special case 
likeit approach effect friendly finder build optimal weighted matching letters multigraphs query database record 
words receive special treatment 
sense related document retrieval approach 
alternative approach string comparison computes edit distance minimum cost transformation string set elementary operations 
commonly weighted insertion deletion substitution operations edit distance computation straightforward dynamic program 
edit distance suffers problems led approach 
dynamic program runs delta time string lengths likeit runs time 
second edit distance approach highly sensitive global permutation changing word order 
humans frequently likeit deals issue 
automaton approach fast string matching introduced deals exact matches 
natural generalization relaxes requirement exact equality allows bounded practice small number errors 
error typically restricted insertion deletion substitution transposition adjacent symbols 
query string possible build automaton detect match error bounds second string 
demonstrates text scanned high speeds framework comparison 
likeit framework hand satisfy queries fall practical capabilities automaton approach different desired database record 
likeit facility searches brute force 
compares query database record 
today cpus limits applications tens thousands hundreds thousands records 
see likeit related approaches important effective tools medium size textual databases small scan entirety query 
organizing database record needs considered represents interesting area 
techniques vantage point trees purpose similarity value computed likeit strictly mathematical metric 
section describes ansi subroutine level interface api likeit facility 
reader interested quickly applying likeit problem may read section skip directly appendix describes file standard distribution explains 
user level utility programs described section provide command line web interfaces facility 
way simple line oriented databases may accessed likeit programming requirement 
simple utilities read entire database disk time invoked 
sophisticated web solution described section 
daemon databases contacted cgi stub program resolve queries 
daemon may invoked manually inetd includes facility returning html links corresponding matching records 
section gives details internal design likeit advanced user may customize certain aspects behavior interface described section 
user view facility primary interface consists single function int likeit unsigned char query unsigned char int void expert int int matches double scores processing begins translating null terminated query string character character internal alphabet 
default operation collapses ascii considerably mapping non alphanumeric values space uppercase letters lower case equivalents 
front translation may customized described section 
translation process certain behavioral characteristics specified expert parameter 
convenience null value parameter selects default operation query compared sequence database strings likeit accesses calling user supplied slave function 
single integer argument supplied select element sequence pointer element returned 
function return null argument greater support random access sequence 
default expert value null length queries database strings limited 
result comparison numerical indication similarity likeit keeps track num matches similar database strings encountered 
indices written user allocated integer vector matches 
corresponding double similarity values written user allocated scores vector 
nonnegative graph matching costs lower values correspond increased similarity 
likeit function returns actual number values written vectors value equal num matches 
default operation selected specifying constant lkt default expert user supplied preprocessing experience simple preprocessing queries database strings passed likeit improves results 
leading trailing white space deleted repeated white space collapsed single space character single leading trailing space character inserted 
combining steps default translation described example optimal dictionary optimal dictionary repeated spaces final result arise translation process 
combined processing effective general purpose solution performed utilities described section 
preprocessing schemes translation mappings may suitable particular applications 
ideally preprocessing performed advance database string operate simply returning address edited string 
facility self test difficult ensure intelligent functions likeit operating correctly 
reason facility includes self test operation int int test type selecting little big test respectively 
return boolean value indicating success 
little test takes little time performed internally automatically time likeit called 
big test takes time may run calling function argument running likeit utility program described section command line flag 
tests generate random queries database records fixed size alphabet 
ascii default translation apply 
hash information returned likeit checked recorded value 
test characteristics user level utility programs provided leading trailing single spaces added database records search time resulting small time penalty 
query queries db record records alphabet length length size little big utilities section describes simple multipurpose application program uses likeit facility provide command line search services common gateway interface cgi web environments 
single executable serves purposes filename selects mode 
filename likeit provides command line operation likeit cgi causes program enter cgi mode 
modes utility read simple line oriented database 
vertical bars may separate fields record separators effect comparisons likeit affect appearance output cgi mode see 
line database treated single string information field match 
database read array structures whitespace preprocessing described section performed 
simple implemented delivers records indexing structure 
command line usage likeit 
database 
query 
optional argument requests display specific number matches 
default maximum 
database 
argument names database file described 
final argument query provides search query enclosed single double quotes contains whitespace 
facility self test big may run special usage likeit 
example sample database provided likeit distribution illustrates command line mode likeit rochester lst andersson optimal bounds dictionary fact mapped space characters non 
problem lncs li probst optimal vlsi dictionary machines compress instructions numeric value line score returned likeit 
important note include amounts large positive bias arising technical details implementation 
directly proportional similarity distance 
cgi executable named likeit cgi reads html form parameters database query self explanatory 
horizontal rule separates records html output 
field separators database field record appears separate line 
likeit cgi may useful demonstration purposes small applications far optimal database reread query 
cases performance problem reduced operating system file system caching 
sophisticated implementation described involving search daemon small cgi stub connects resolve queries 
likeit daemon likeit cgi program described previous section useful demonstration purposes time queries small applications 
section describe solution suitable general 
daemon invoked databases 
html queries communicated small cgi stub program cgi 
daemon responds list matching records stub formats html returns client 
preloaded records fully preprocessed daemon including addition leading trailing space characters 
result search times slightly faster reported 
arguments database query 
value zero integer selecting preloaded databases 
meaning clear 
communication stub daemon line oriented 
connection established simple handshake verifies versions programs agree 
integral database identifier requested number matches query length query communicated daemon separate line 
daemon responds series lines 
preamble contains integral database type indicator 
currently types line line url supported 
correspond indicators respectively 
selects database format identical described earlier 
vertical bar symbols mark line breaks html output 
second format url provided separate line database record 
html output displays record link url 
blank url allowed 
daemon responds number matches returned may differ number requested 
matching records returned 
begins score 
stub ignores implementation 
matching record returned followed url line url database 
html performed stub appearance returned document may altered editing source code 
daemon may invoked manually inetd 
executable name differs cases respectively 
cases daemon accepts single argument naming configuration file 
line file specifies database consists white space delimited fields 
line line url selects type 
second gives filename 
internals likeit facility reads database records outputs regards similar matches query provided 
weighted bipartite graph matching approach taken problem quantifying similarity 
query string imagined positioned database string matching problem correspond features edges minimum total weight 
simplest case features consist single letters weight edge distance units string position occurrences top bottom string 
sense string similarity fairly clearly depends higher level features digraphs ultimately entire words 
likeit facility captures effect efficiently constructing match ing problems single letters letter pairs digraphs sense similarity composite solutions 
particular alignment query database string clearly affects cost matching 
reason likeit treats alignment variable attempts minimize total matching cost 
query imagined slide left right position resulting minimum total matching cost 
result complicated process despite emphasis efficiency time consuming 
reason likeit facility implemented stage filter computation final stage designated 
earlier stages approximate similarity judgment far time 
stage crudely approximates optimization query alignment described section 
stage approximates matching process counting matching account position 
stages acts filter outputting fewer records input 
number records output filter denoted number delivered denoted likeit facility sets greater delta 
effect tapered filter approach final output practice full algorithm applied database record 
records output filter stage maintained binary heap 
implementation simple fast 
result heap operations represent negligible portion cpu time 
front automaton filter stages operate query database strings series various lengths single letters 
matching edges exist occur query database string consideration 
data record may disregarded 
approach build finite state machine fsm query detects fixed length database record occur query 
machine changes state database record character 
states correspond longest trailing polygraph query 

yx 
likeit process consists stages filter input database records desired number maximally similar output records 
stage computes increasingly effective increasingly cpu intensive notion similarity 
stage outputs records ae ae size stage output interpolates machine construction straightforward involved described distribution file fsm doc 
considered processing database machine saving result 
far fewer records considered machine fast compared re process records filter stage 
matching matching filters operate identified fsm 
default operation limits attention lengths filter lengths 
filters form normalization required matching scores comparable presence variable length queries database strings 
normalization may regarded padding query database string large length default case 
cases effect padding matching score easily computed padding performed 
filter counts matching 
initialization identifies query requested range default 
count polygraph query recorded 
fsm processes database string characters identified tallies matches limit imposed polygraph multiplicity query 
example ing occurs times query occurrences database string contribute match tally 
database string occur query unmatched definition 
unmatched include counted exceeded query multiplicity limit 
filter takes account relative position matching 
assigns constant cost matching cost pair match 
thought relaxation matching stages trivial constant cost functions 
position irrelevant mutual alignment query database record issue 
final scores computed combine scores polygraph length weight linearly polygraph lengths delta delta delta receive weights delta delta delta respectively 
stage begins left aligned query decomposes matching problem subproblems level defined 
level consists polygraph occurrences alternate query database string 
number occurrences matching uniquely defined 
odd likeit approximates optimal matching omitting occurrence 
entire process implemented recording matching edges costs propagated online database characters processed 
investing little additional time yields optimal matching online fashion implemented likeit 
having produced matching single approximate realignment step performed 
accomplished keeping track average edge length processing mathematically repositioning query average length near possible zero 
important note matching unchanged edges simply expanded contracted account realignment 
reason refer free realignment 
final filter begins realignment new matching solution constructed 
realignment step performed times score fails improve 
mean length approach realignment taken likeit easily implemented proper computation focuses median length 
detailed interface operation likeit customized expert parameter likeit function 
argument type struct likeit expert filling structure customization effected struct int int character mapping function int max record len int number filters sequence filters struct filters header file likeit expert included applications perform customization 
passing null lkt default expert expert selects default operation 
front character mapping specified char map 
function maps input character codes values range likeit 
common uses fold case ignore punctuation correspond foreign symbols english letters 
sample implementation folds upper lower case reduces non alphanumeric characters space int int return return char map set lkt default char map default character mapping function adds functionality mapping accented iso latin characters lower case form 
max record len value set value larger longest string expects encounter 
value lkt default max record len defined assigned default structure 
result processing strings longer max record length specified 
filter structure likeit may customized num filters filters structure elements 
num filters set lkt default filters default filter configuration described earlier selected filters need specified 
num filters set positive integer entries vector filters 
default structure specifies corresponding 
vector entry struct likeit filter struct int type filter type int min polygraph length int gmax max polygraph length int hmax max records filter output heap structure element type set default character mapping function implemented table lookup 
enum corresponding filter types described section 
gmax values set limit considered 
default configuration sets gmax filter stages second 
entry hmax determines size corresponding filter output heap 
typically final stage configured output exactly number matches requested user output size stage predecessor 
addition supporting customization filter types included distribution architecture anticipates creation new types 
timings measure facility time performance applying likeit program database 
database listing papers theoretical computer science 
line gives authors title journal conference date 
reordered fields match description added 
resulting file bytes 
timings intel pentium pro mhz processor cache linux version 
distribution compiled gcc version 
focus time required process single character database text statistic enables application designers quickly compute response time 
time constant primary variables affecting query length number best matches requested 
experiments verify practice sensitivity query particular value database specific content 
report results table queries increasing length requests best matches 
example ns database character required query applied test database best matches requested 
response time query ns theta seconds 
convenient compute processing rate ns characters second 
table gives times filter stages likeit process described section 
patterns evident table consistent algorithm design qualitative nature timings 
notice time essentially constant query varies little 
expect role amounts counting database records little dependency query 
filter time depends strongly query length similar processing takes place character database query strings 
fixed query essentially constant requested matches increased considerably 
explained choice set number matches output greater times number requested matches 
requested matches outputs candidates consideration 
requesting matches forces output candidates increasing linearly time required 
fixed query expect time increase number candidates output 
table values filter outputs records respectively determined 
analysis time complicated variable number realignment steps performed 
expect fewer steps necessary query length approaches length database string 
table times consistent observations 
summary query time varies roughly number requested matches ranges 
variation somewhat columns 
corner corner variation just 
excluding matches column variation smaller 
suggest application designers approximate performance estimation purposes simply assuming database character requires ns process corresponding rate mb second 
having said assumption breaks extreme cases databases consisting short records 
overhead dominates 
matches returned query filter total total total optimal optimal dictionary problem andersson optimal bounds dictionary problem table processing time nanoseconds character database text queries increasing length requests best matches 
total time times filter stage shown 
measurement error approximately sigma ns filter 
similarity values computed likeit arise graph matching computation possible visualize system judgment 
edges shown matching letters highlighted 
view important aspect intelligent user interfaces user better understands machine judgment believe better equipped employ 
intend modify exactly solve subsidiary matching problem median realignment described 
interesting areas theoretical evident 
additional filter stage added prune search examining record 
second online forms matching approach suggest system similar likeit searching text databases 
progress goal described 
likeit system described effectively databases simply introducing record divisions periodically appropriate locations sentence paragraph boundaries 
buss yianilos linear log time matching algorithms quasi convex tours proceedings th annual acm siam symposium discrete algorithms pp 

appear siam journal computing 
bipartite matching approach approximate string comparison search tech 
rep nec research independence way princeton nj 
damashek gauging similarity grams languageindependent categorization text science pp 

hall dowling approximate string matching computing surveys pp 

huffman damashek acquaintance novel vector space gram technique document categorization proceedings text re trieval conference trec washington nist pp 

karp 
li special cases assignment problem discrete mathematics pp 

knuth morris pratt fast pattern matching strings siam journal computing pp 

manber wu glimpse tool search entire file systems proceedings winter usenix conference pp 

miller look friendly program doesn need exact match find database search objects info world 
proximity technology friendly finder 
commercial software ibm pc 
rosenthal pf coprocessor string comparison byte magazine 
sankoff kruskal macromolecules theory practice sequence comparison addison wesley 
large bibliography theory foundations computer science 
ftp ftp cs rochester edu 
wu manber fast test searching allowing errors communications acm pp 

yianilos definition computation application symbol string similarity functions master thesis emory university department mathematics 
dedicated comparator matches symbol strings fast intelligently electronics magazine mcgraw hill december 
data structures algorithms nearest neighbor search general metric spaces proceedings th acm siam symposium discrete algorithms soda pp 

distributed software unpacking distribution need sure parameters set properly makefile cc os type timeout value 
see associated explanatory comments makefile 
parameters critical plan run likeit daemon cgi stub 
makefile configured linux 
solaris users need edit definitions top makefile 
type 
targets likeit likeit cgi cgi 
library derived distributed files likeit top level module implementing likeit routine likeit sys private top level header file fsm search query automaton fsm private header file associated fsm inverted table query polygraph occurrences private header file associated heap fast binary heap heap private header file associated heap polygraph counting filter quasi convex filters default character mapping function array multi dimensional arrays fsm array private header file associated array common private header file containing common definitions mem storage allocation routines timer timer routine utils miscellaneous utilities users include likeit contains likeit function prototype likeit expert definitions expert configuration likeit likeit cgi programs derived cgi top level cgi search code data database management routines display match display routines likeit prog main program module likeit prog top level header file state routines modifying program state cgi programs derived svr main main daemon program module svr data database management routines cli main main stub program module common definitions daemon stub os type dependent definitions ipc socket communication routines ipc socket communication header file communications utilities error error reporting routines error error reporting header file try web demonstration software install likeit cgi typical fashion copy cgi bin directory local server 
ll need edit html absolute pathnames files rochester lst catalog lst correct system likeit cgi properly pointed 
sample databases rochester lst catalog lst provided 
install daemon cgi stub programs copy cgi cgi bin directory local server 
html form html invoke stub need edit points stub program correctly 
note option values corresponding database selections integers pathnames 
integers correspond order databases listed daemon configuration file config 
sure pathnames databases correct absolute pathnames configuration file 
wish start daemon manually type path config path absolute pathname configuration file 
daemon controlling terminal execution terminated kill 
sure daemon running host specified makefile parameter 
wish inetd internet start likeit daemon system administrator modify systems files 
line similar added file services likeit tcp likeit daemon place number port number decided parameter makefile 
port likeit daemon listen 
line similar added file conf likeit stream tcp wait user 
path path config likeit daemon run user paths correct executable daemon configuration file config 
absolute pathnames 
inetd start likeit daemon attempt stub program connect 
daemon read databases specified configuration file accept queries 
error messages generated stub daemon written files tmp console tmp console respectively 
file likeit ps contains postscript license gives noncommercial license distribution 
file fsm doc provides details regarding finite state machines detect likeit filters 
simple readme file directs reader 
