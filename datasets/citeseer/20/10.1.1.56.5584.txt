lynn andrea stein challenging computational metaphor challenging computational metaphor implications think lynn andrea stein massachusetts institute technology institute radcliffe college explores role traditional computational metaphor thinking computer scientists influence epistemological styles implications understanding cognition 
proposes replace conventional metaphor sequence steps notion community interacting entities examines ramifications shift various ways think 
computation central metaphor endeavor undertake rely set implicit explicit principles guide understanding shape course action 
computer science idea call computational metaphor 
computational metaphor image computing works computing serves foundation understanding things computational 
computation plays central role modern culture computational metaphor extends computer science plays role disciplines everyday understanding world 
addresses need fundamental shift computational metaphor 
shift motivated changes nature computation practiced traditional computational metaphor describing current practice 
standing cusp thomas kuhn called paradigm shift foundations field 
profound implications aspects understanding computational science central role modern thought broader understanding 
computational metaphor 
think goes computation function inputs output 
sequence functional steps produce result goal 
taught trained computer scientist 
model computer scientists large take granted 
members field share 
refer turing von neumann model men influential elucidating particular way thinking computation 
turing machine von neumann concrete outlined lynn andrea stein challenging computational metaphor mechanism execution strikingly centralized sequential result oriented turing von neumann 
depicts image computation highlighting major features 
computation composed steps 
steps combined temporal sequencing 
computational process evaluated looking result extent resource utilization 
approximation computation result characterizes computation 
shall refer calculation model computation 
computational metaphor image understand field 
common model encodes computer scientists see think 
computer scientists frequently model talking systems strictly speaking sequential 
traditional computational metaphor purposes single thread control programmer owns 
programmer problem happens 
metaphor encourages ignore fact computers built analog components 
obscures fact component fallible 
hides ways computer physically coupled world largely ignores systems social mechanical computation embedded 
seen metaphor computation sort calculation 
computer view extremely sophisticated symbol processing abacus 
historically entirely appropriate 
people assigned perform mathematical calculations mechanical computers machines simulated mathematical processing human calculators 
early computers actual physically coupled control systems frequently provide data human decision makers 
calculation model computation goes hand hand idea black box procedural abstraction 
equation computation functional result computes input 
black box abstraction powerful technique permits reasoning systems fairly high level combining functional pieces considering details implementations 
black box abstraction difficult imagine history modern software development possible 
course exaggeration 
resource utilization side effects play significant role evaluation computation 
functional behavior computation generally taken salient identifying characteristic 
suitably broad reading term result subsuming resource utilization side effects materially affect point wish 
forward thinking book carriero gelernter explicitly equate programming problem solving write parallel programs 
spite fact book discusses techniques authors believe suited interactive distributed endpoint computation 
lynn andrea stein challenging computational metaphor corollary approach modular 
computation defined terms functional result computes input piece calculation identified associated function 
modular method constructing systems problem decomposed constituent functions solution constructed sequencing calculations associated constituent functions 
structural decomposition program identical functional decomposition problem solves 
context computation calculation modular tautological 
see alternate view computation modular possible approach 
approach consonant turing machine step time processing von neumann architecture manipulating memory data 
hendriks jansen observed turing worked time quite possibly influenced advent assembly line manufacturing 
von neumann maintained clean separation instruction data placing squarely machine memory 
notions pure thought process operating memory data stands stark contrast messy intertwining typical cybernetics early control systems 
power paradigm tremendous simplifications afforded traditional computational metaphor historically crucial 
digital abstraction procedural abstraction high level languages program design conceptual vocabulary computer science today facilitated computational metaphor 
consequence computer technology revolutionized world 
certainly computational metaphor enabled computer science focus organization sequences steps larger functional units worrying transient voltage levels multiple simultaneous transitions hardware 
way thinking computation ignore occasional power fault mechanical delays operator feedback human activities 
hiding details hardware actual behavior digital abstraction tremendous advances computational science possible 
directly manage variations voltage individual component computer motherboard hard pressed write small programs 
digital abstraction looking voltages stable configurations regarding ones zeros allows treat computer discrete logical artifact 
von neuman machine architecture turn higher level programming languages subsequent advances removed actual analog machine 
memory mapping technique allows access complex peripheral devices containing processors simple storage cells 
lynn andrea stein challenging computational metaphor consider parallel programming 
parallel processors today benchmarked emulate ideal sequential machines improving performance 
particularly extreme example approach automatic program parallelization 
attempt multiple processors look programmer single sequential machine sort computational metaphor prescribes 
way enable programmer harness power multiple processors knowing things going 
structures contributed turing von neumann machines tremendously empowering computation half century just computer science 
computational metaphor plays major role shaping students colleagues disciplines see computation 
today advanced technology computation significant model system interpreting complex phenomena 
influences see world 
filter view cognition economics ecology 
impute explicit computation phenomena conceptualize computational terms 
certain disciplines cognitive sciences fields disparate organizational science molecular biology computation central metaphor organizing field 
dictates questions ask answers able imagine 
variety disciplines computational metaphor equally striking impact 
example molecular biology keller points analogy biology called central dogma call computational metaphor 
central dogma crick refers idea dna blueprint rna turn produces proteins unidirectional process 
argues central dogma modeled theory information computation biology notion nuclear regulation cell owes computational notions 
traditional organizational science notions centralized hierarchical control similar 
way thinking computational metaphor serious implications students learn think 
programmers historically taught decompose problems logically sequences steps 
primary school mathematics instruction emulates programming including teaching algorithmic thinking elementary schools 
goal directed endpoint driven planning seen preferable fluidly serendipitous exploration lawler papert 
approach privileges certain epistemological styles leads successful students fluency particular set techniques discouraging 
traditional computational metaphor affects models thinking 
old fashioned artificial intelligence gofai single minded result oriented model 
newell simon physical symbol system hypothesis gave see hillis competing view 
lynn andrea stein challenging computational metaphor credence idea brain appropriately modeled computer specifically symbolic calculator 
emphasis early days ai problem solving game playing forms puzzle mode intelligence 
early ai systems concerned defined problem domains task ostensibly intelligent system deduce correct answer problem cognition computation calculation 
nearly cognitive science followed adopting computational model prototype human cognition 
extreme form view revolves notion thinking separately modularized system communicating perceptual motor peripherals 
dennett refer approach somewhat cartesian theater place comes 
cognitive analog computer central processing unit distinct von neumann memory module 
computation crisis computational metaphor tremendously valuable half century computation history fostering emulation wide range fields 
empowering arguably essential early progress field completely true 
initially extremely useful way making sense constituents dynamically interacting community hardware 
focusing activity cpu insisting purity digital abstraction ignoring erratic hardware components devices able progress electrical engineering discipline discrete controllable algorithmic computation 
innovations timesharing possible multiple users operate assumptions central metaphor fact virtual machines users worked artifacts established complex underlying program 
overt exceptions central metaphor hardware interrupts networking eventually parallelism hidden user 
increasingly traditional computational metaphor limits empowers today 
prevents confronting working effectively computation occurs 
true computer science metaphor disciplines dissatisfaction computational metaphor cases caused anti 
advent turn timesharing systems smart peripherals increasingly networked computers computational boxes containing central processing unit single minded myopia traditional metaphor viable 
increasingly difficult argue things outside program don matter 
activity user timesharing system impact computation virtual machine model went great lengths minimize interaction sustain traditional metaphor decades 
rigid adherence computational metaphor lynn andrea stein challenging computational metaphor impede progress software engineering 
computations involve multiple virtually simultaneous activities 
today computations involve coordinated concurrent activity poorly explained terms traditional computational metaphor 
computations necessarily take place multiple computers world wide web visible examples 
construe computation sequence steps designed produce result world wide web calculates 
constituent functions 
questions clear mismatch behavior worldwide web hardly appropriate virtual reality autopilot system computation interest today 
word processing involves logically concurrent execution formatting layout spelling grammar checking coming soon pc near bibliographic suggestions agent assistance 
concrete example limitations calculation metaphor provided senior developer major software 
able hire best computer science graduates produced complained difficulty finding students write programs things happening simultaneously 
originally assumed meant new hires difficulty finer points synchronization concurrency control 
corrected impression explaining problem programmers didn know think concurrently 
students learning decompose solve problems way problematic today software market 
today line hardware software blurred recognition 
construct computation silicon software choose needs particular application 
custom silicon program realizable hardware 
field programmable gate arrays promise software flexibility hardware 
suggested dynamically reconfigurable silicon 
von neumann architecture longer clear choice report demise surely exaggeration 
new metaphor computation give equal precedence hardware software implementations traditional architectures novel ones 
hardware software line fading line computer environment rapidly 
transactions increasingly replacing people computers 
computers answer telephones supply cash pay bills sell merchandise 
computers control cars appliances 
cooperate collaborate world 
traditional metaphor happens mentality leaves little room users environmental partners computation 
new theory computing accommodate fluidity computer user physical environment 
bob atkinson personal communication 
lynn andrea stein challenging computational metaphor traditional computational metaphor problematic guiding epistemology 
classrooms certain styles thinking understanding discouraged deviating computational metaphor 
papert studied programming rigidly linear sequential logical process 
students identifies way decomposing problems uncomfortable 
students prefer experiment partial programs piecing build larger structures comfortable interact 
frustrated black boxing modular functional linear design abandoned computer science 
remain succeeded suppressing hiding epistemological style 
notes style disproportionately observed female students giving rise possible explanation differential representation women field 
componential may precisely needed today toolkit library rich programming environment 
early historical attempts capture computation computation processes exclusively exclusively digital 
fields cybernetics contemporaneous early days computation part computer science legacy 
see weiner ashby 
cybernetics took seriously idea computation embedded coupled environment 
precisely issues suppressed approaches 
intellectual mid century cybernetics failed provide necessary empowerment emerging science computation lost dominated computational metaphor 
nascent field computational science set steady path connections world weakened 
disembodied information processing approach gained prominence computer science model neighboring disciplines 
research cognitive science today defined opposition 
influence declining 
perspectives artificial intelligence cognitive science accepted gofai puzzle mode intelligence probably central form intelligent behavior 
increasingly communal contextual interactive approach cognitive science coming particularly research informed neuroscience 
new school cognitive scientists reject traditional metaphor centralized architecture cases rejecting result 
scientists smithers port van gelder beer begun rediscover reinvent 
argue dynamical systems provide promising route understanding building intelligent systems 
new theory intelligence provide infrastructure reconcile advances traditionally computational theories intelligence 
clear articulation argument see agre brooks clark 
lynn andrea stein challenging computational metaphor molecular biologists accept equivalent computational metaphor crick central dogma dna rna protein approximation 
fact examples feedback path 
keller argues early recognition feedback mcclintock transposition involving influence production rna relatively inaccessible molecular biologists long insisted rigid adherence central dogma 
describes dogmatic assumption centralized nuclear control obscured existing evidence protein synthesis hippocampal learning 
keller argues biology reliance sequential information processing metaphor limited disciplinary vision 
argue computation central dogma similarly blinds truths modern computer science 
changing metaphor today computations embedded physical virtual environments 
interact people hardware networks software 
computations necessarily ends results evaluate ends 
called agents servers processors entities 
evocative example consider robot 
robot stopping failure 
robot evaluated final result produces judged ongoing behavior 
robots interactive ongoing partners environments 
observation limited obviously animate computations robot 
consider video game spreadsheet automobile cruise control system cellular telephone network 
robots computations interactive 
care ongoing behavior 
wait hypothetical endpoint decide done right thing past tense 
expect automobile toaster oven 
sit computer may goals 
expect computer fulfill goal independently compute result cooperate collaborate tasks 
traditional computational metaphor depicted computation calculation argue call computation interaction 
illustrated 
time runs vertically illustration additional spatial dimension added 
bars intended spread space arrows representing communication entity 
schematic illustration highlighting main features model 
pieces model persistent entities coupled ongoing interactive behavior 
behavior system constitutes grounds evaluation system 
special cases ignored 
focus interactions entities 
computation said reside entities result lynn andrea stein challenging computational metaphor interactions 
calculation model inputs come outputs produced 
interactive model inputs things monitor outputs things 
computational system open may influence influenced things outside system depicted 
today computations interactive need way think build systems corresponds traditional story encompasses richer metaphor 
metaphor starting point thinking wide range disciplines 
wish suggest appropriate metaphor community interacting entities 
computation entity ongoing interactive behavior providing ongoing services 
entity may entities interacting produce behavior 
problem programming problem designing community members 
interact 
goes inside 
computational systems incorporate aspects decomposition 
examples include robots user interfaces embedded systems video games web browsers control systems information access utilities operating systems 
research communities entities called servers agents behaviors actors 
chosen entities relatively neutral term baggage 
community computation restricted software 
hardware physical artifacts human beings participants computational community 
picture computation think best characterizes today computational system 
mean include spreadsheets video games control systems automobiles nuclear power plants 
fact model characterizes wide range systems including apparent computers involved 
note entity terminology object sense objectoriented programming 
objects autonomous self animating 
customary explicitly distinguish animate objects means labels research concurrent objects 
see yonezawa tokoro agha 
second entity terminology need explicit data plus invocable methods structural interface generally associated objectoriented methodology animate entities need objects 
agha hewitt agha actors concurrent object approaches representative examples mean entities brooks augmented finite state behaviors 
entities capitalize hide inherent concurrency 
just entities objects am advocating shift object oriented thinking bears resemblance kay claims originally intended term 
current practice object oriented programming largely traditional metaphor 
phrase concurrent objects redundant necessary specification 
object oriented programming encapsulates data function function generally sequential largely contextually oblivious 
objects generally seen passive act kinds creatures part traditional metaphor mainstream 
lynn andrea stein challenging computational metaphor changing computational metaphor moving computation calculation computation interaction far reaching fundamental effects way think 
mean senses changes computer scientists view computer science 
particular implications teach 
changes approach problem solving software design domains draw models solutions 
implications kinds epistemological styles consider acceptable result kinds answers generations produce 
changes scientists especially exclusively cognitive scientists computation model 
affects understanding thinking 
argument computation interaction important motivating metaphor wish remainder 
think remainder explores ramifications shift computational metaphor traditional computation calculation today computation 
journey single motivating example navigation mobile robot 
developed basic community interacting entities suitable classroom presentation complex artifact gives insight biological systems think 
way detours explore related issues 
example personally motivating reflects route issues 
unifies issues wish highlight including urgency feasibility changing approaches introductory pedagogy epistemological styles necessitated alternate computational paradigm ways shift reflects reflected newest approaches cognitive science 
research cognitive architectures led directly significant training computer scientist problems cognitive science 
described centralized disembodied nature traditional metaphor corollary inappropriate artifacts robots worked 
empirical robotics pushed explore alternate approaches cognitive architectures time realized problems saw cognitive robotics mirrored architectural difficulties research group having threads history converge 
ongoing investigation cognitive architectures intelligent systems put 
stein second thread investigation semantics sharing object oriented systems including tradeoff flexibility behavioral guarantees 
stein stein stein zdonik final thread involves simple inexpensive robots enhance classroom experience undergraduates computer science hendler stein stein 
lynn andrea stein challenging computational metaphor different arenas software agents coen information retrieval karger stein 
problems turn sounded colleagues computer science increasingly described importance interface inevitability implicit explicit concurrency valuation behavior ongoing invariants products 
cognitive robotics embedded embodied situated applied equally colleagues doing 
terms server agent building communities interacting entities 
systems mine described computation central dogma 
world cognitive robotics resides world interactive systems 
domain includes real time systems user interfaces computational hardware distributed systems software agents servers largely outside traditional computational paradigm 
world time rules modular construction apparent combine functions produce desired behavior principled way 
noticed software systems 
see workshop interactive foundations computation washington university st louis wegner article communications acm component architectures 
new approaches computation needed levels theoretical foundations design methodologies 
sections idea navigation mobile robot talk kinds thinking conclude previous section 
look content conceptualizations problems rightful domain computational thinking 
robot evocative community conceptualizations believe provide today answer question 
second turn ways approach phenomena questions ask problems techniques bring bear 
third ask alternate conceptualization says cognitive architectures mechanisms thinking accomplished 
implication thinking computer scientist introductory computer science education place community articulate principles underlie field 
course lay foundations computation teach students think computational terms 
traditional computational metaphor literally central part course 
computation today appropriately construed community rethink story tell community newest members 
robots common introductory programming curriculum prove effective vehicle illustrating important principles actual classroom practice 
see resnick martin stein hendler 
section begins simple example interactive approach lynn andrea stein challenging computational metaphor robot wanders bumping walls 
particular example common reactive robotics derives braitenberg experiences simple robots undergraduate education stein 
constituting community problem problem interactive computation specified terms ongoing behavior 
robot depicted distance sensors angled right forward left 
motors controlling left rear wheel right 
driving wheels forward robot moves straight line driving wheel robot turns 
job robot control program keep moving running obstacles 
traditional mathematical program robot behavior amenable recursive decomposition breaking parts 
traditional functional decomposition constituent pieces steps sequenced 
interactive environment programmer question identify entities ongoing interactions constitute behavior robot 
programmer questions entities 
interact 
constituent entities turn implemented 
approximation decomposition sufficient pedagogic purposes involves entity control motor monitor sensor 
sensor monitoring entities tasked reporting danger motor obstacle looms near 
motor monitoring responsible driving motor reverse warned 
situation depicted 
result obstacle visible ahead left left sensor monitoring entity reports right motor monitor turn stops motion right motor 
causes robot turn right away obstacle left 
robot moves far obstacle clears left sensor monitor ceases report right motor monitor resumes forward motion robot 
constrain robot behavior relating latency notification response robot speed turning radius 
ways implement variety increasingly sophisticated navigation behaviors 
example intervening entities effector monitors allowing complex decision making process 
alternately processing single sensor accomplished entity community 
overkill simple distance sensor consider processing camera image 
course variants implementing increasingly sophisticated behaviors 
revisit example section 
description certain issues necessary relationship sensitivity sensor turning radius robot sake clarity conciseness exposition 
lynn andrea stein challenging computational metaphor described example complicated 
significantly simplest behavior satisfying specification quite straightforward 
purpose example illustrate complexities reactive robotics show computations sort interactive embedded ongoing largely straightforward accessible student 
time example highlights ways questions new paradigm differ traditional questions result oriented step sequencing programming 
robots interactive programming curriculum robotic example described serves great motivator introductory students 
robots hands 
internal state manifest misbehaving ways readily apparent 
encourage experimentation observation 
interesting issues arise complexity operating system example concurrent system traditional undergraduate curriculum 
course idea interactive systems introductory classroom depend robots 
stein describe new curriculum introductory programming course students prior programming experience 
course differs traditional questions asked territory covered consequence 
program students encounter class inherently concurrent embedded context 
functionality implemented specified terms interactions ongoing behavior 
single semester course students progress simple expressions statements client server chat programs networked video games 
sounds extremely advanced material topics proceed naturally straightforwardly interactive computational metaphor 
programmer questions concern relationships components topics push vs pull event driven vs message passing local vs networked communication integral aspects course 
curriculum exploits shift fundamental story programming restructure basic advanced curricular material 
words course go deeper curriculum traditional introductory course stands traditional curriculum 
introductory course metaphors explicit lay computation 
recasting course terms new metaphor computation able teach students ideas traditionally considered complex inaccessible level 
changes subsequent course changing course sequence 
teach students takes new meaning 
example approach easier traditionally hard fit topics user interfaces 
computation role user possibly play 
computation designing coordinated activity community user simply member community lynn andrea stein challenging computational metaphor software system embedded 
rethinking computational metaphor turns discipline side giving new ways understand wide range phenomena 
shifting vocabulary simple robotic example section behaviors system constituent entities described terms ongoing contracts promises 
individual routines executed entity trivial sensor reports object inform opposite motor monitor example 
entity performs navigation robot emergent property coupled interactions constituent entities members community interactions computational community surrounding world embedded 
kinds questions example lends typify issues modern software design 
reliable communication entities need 
case signal need reach motor monitor lossy communication generally adequate 
responsibility transmission signal push pull 
example allocated task sensor monitor signal push 
kinds latencies tolerated 
depends mechanical properties robot environment 
circumstances robot reasonably expected perform correctly 
questions difficult ask traditional paradigm 
recasting problem coordination community interacting entities brings fore 
traditional metaphor dictates questions asymptotic complexity 
computation interaction asks throughput latency 
tradition dictates procedural abstraction 
interaction calls component architectures 
tradition suggests pre post conditions 
interaction demands protocol design analyses terms system dynamics 
need new kinds architectural tools readily apparent 
attempts address need provide new languages describing coupling interactive systems include catalogue approaches gamma design patterns shaw garlan software architectures metalinguistic strategies dellarocas coordination protocols kiczales aspect oriented programming new formalisms lynch io automata component architectures corba com 
pieces difficult motivate result oriented sequential approach programming inspirations come desire integrate interaction distributed concurrent service providing systems 
interaction computation demands computer science invent new ways think 
lynn andrea stein challenging computational metaphor implication epistemology software engineering previous section explored ways paradigm shift calculation computation interaction changes material introductory course tools languages describe 
section look shift plays terms relationships expectations computation se 
thinking concurrently profound implications metaphoric shift bring finely intuition developed course everyday life bear computational problems 
year old knows need distract parent cookie 
organize fellows carry group activities time 
traditional view computation go great lengths hide fact thing happening time 
programmers know processor issuing multiple instructions simultaneously pipelines stalled unrolled necessary 
software engineers think idea multiple processors single socalled computer 
access storage remote machines carefully local memory systems program developer detriment waldo 
course picture exaggeration straw man kernel true 
robot kind beast 
left hand wait right conclude computation group massive coordinated activity viable option 
order successfully program robot learn think terms coordination frameworks protocols interfaces 
stuff software engineering 
brief experience programming robot software lifecycle afternoon 
interesting things physical robots world provides sufficiently dynamic environment precise behavior non repeatable 
lighting conditions change initial positions vary wheel slippage unpredictable 
things change robot executing 
robot wait world complete computation acting robot operates concurrently interactively world embedded 
result running real robot unconstrained real world invariably provides new challenges new test conditions way entirely lacking current computer science classrooms 
interacting computation consider example happens robot previous section approaches corner 
sensors fire 
sensor monitoring entity signals reverse opposite motor monitor 
motor monitoring entity warned stops moving 
lynn andrea stein challenging computational metaphor robot stops 
sensor continues fire 
sensor monitor continues issue warning 
driver continues 
forever 
interaction may unanticipated students unanticipated instructor 
fact laboratory assignments designed create just circumstances 
students go laboratory required design programs predict behavior result 
laboratory build code run experiments 
testing programs students expected report observations including ways observations match predictions 
laboratory portion complete students write change observed behavior programs 
expect resolve issue expect develop intuitions anticipating behavior range options addressing 
process mimics real world experience software lifecycle 
know vast majority software development takes place initial program officially complete 
just passes test regimen design doesn mean won need significant modification testing shifting requirements 
students observational experimental approach learn anticipate aspects program cause particular behavior existing programs modify 
software engineering trying teach decades classroom technique steps outside run format common introductory programming laboratories today 
validating new ways thinking example highlights importance experimentation engineering technique 
common technique scientific laboratories crucially important building programmer intuition 
essential tool testing kinds interactive concurrent service computations typify style software system 
benefit reaches natural epistemological styles may accord purely hierarchical functional black box approaches common traditional paradigm 
interact code performing exactly sort experimental papert report style traditional approaches computer programming 
style experimentation part traditional means goal oriented problem solving representative sequential metaphor 
experimental style precisely needed understand programs communities interacting entities 
necessitates new generation software engineering design tools gelernter concurrent workspace visualization tools linda brooks software visualization discrete software signals lling blue allows students interact individual objects prior embedding larger systems 
lynn andrea stein challenging computational metaphor coincidence metaphor computation brings computation line real world experiences treats computational entities artifacts interacted adapts scientist laboratory style gives voice 
observational techniques commonly play far smaller role computational training computational practice underlying metaphor dictates 
nature computation changes need find rediscover different styles thinking 
implication cognitive science mechanisms thinking final exploratory section look implications shift calculation interaction field traditionally indebted computational metaphor cognitive science 
cognitive science attempts explain thinking 
historically done relying heavily computational metaphor especially articulated marr 
cognitive problems described functions cognitive circuitry simply particular implementation calculational processes 
earlier described artificial intelligence constituent field cognitive sciences began focus puzzle mode problem solving 
cognitive psychologists 
fodor pylyshyn linguists especially chomsky followers heavy similar information processing metaphor 
construction robots physically interactive albeit computationally systems calculation model prevailed fikes nilsson 
cognitive scientists expressed frustration computational metaphor 
idea brain computer 
form argument resorts artificial neural networks alternate implementation rumelhart mcclelland 
turned embedded connected world embodied physically realized nature natural cognition alternative basis understanding replicating mental phenomena 
doing cognitive scientists rediscovered 
see example varela port van gelder steels brooks 
argument extreme transition away traditional computational metaphor clear cut field robotics 
articulated brooks idea physical control robot best achieved horizontal decomposition entity behavior bridges sensors actuators 
resulting communities interacting entities produced significant advances state art robotics led radically new ways robots solve range physical problems 
ironic apt 
artificial neural networks invariably implemented traditional digital computers forcing sequential calculation model 
plausibly implemented analog massively parallel architectures making community calculation 
lynn andrea stein challenging computational metaphor navigation community robot described preceding sections concerned physical tasks 
section describe similar robot extension cognitive domain 
process hope illustrate traditional computational metaphor fails 
robot describe begins give insight cognitive functionality bootstrapped physically interactive behavior means accomplished difficult describe traditional modular functional terms 
mataric describes variation robot seen 
classroom robot mataric toto uses community approach wander avoiding obstacles 
additional community members add biases wall primitive sort experiential memory 
example toto sensor entities keep wandering hall corridor classificatory entity activated sustained perception left right side obstacles walls memory entity records certain salient aspects experience 
means crude button interface person direct toto return previously experienced landmark 
various entities constitute robot uses spreading activation algorithm return appropriately salient place 
robot difficult describe von neumann terms 
cognitive architecture community interacting communities 
central portions code behavior comes 
decision locally basis particular patterns input robot moves away wall may close landmark detector creates consistent sensory readings exceed threshold random wandering biased direction goal location goal location pulls strongly competition 
constituent ongoing interactive entity continually senses acts 
collective behavior community goal directed navigation particular entity performs task 
toto single central self 
interactive approach typical new cognitive science 
cognition non modular research domain cognitive robotics yanco stein brooks stein stein 
cognitive robotics attempt scale community approaches popular robotics traditional domains artificial intelligence reasoning problem solving 
new computational metaphor behavior emerges interactions composition independent constituents crucial role play 
robot distinguishes single wall corridor environmental categories uses compass determine significant rotations example navigating corner may produce consecutive distinct left wall landmarks 
contrast traditional artificial intelligence gofai approaches maintain distinction physical processes purely symbolic cognitive ones 
lynn andrea stein challenging computational metaphor early extended mataric include module allowed robot read maps 
mataric robot previously go places previously accumulated experience 
way understanding notion place visited 
stein describes extended system allows robot build kind representation unvisited space visited space 
robot floor plan explores plan creating experiential memory subsequently allows navigate explored physical environment 
imagine new system built distinct components sequenced entirely conventional way 
floor plan processing module study map create representation 
subsequently mataric robot representation navigate desired location 
certainly traditional gofai approach 
cognitive robotics story simple 
exploited robot existing interactive properties 
independent map processing component robot interacts map virtual sensory environment imagining inside environment 
separate map internal representation functional module 
mataric existing robot cum community coupled embedded virtual environment consisting simple piece code keeps track heading coordinates floor plan 
interactive map entity processes move requests generated mataric original code updating internal coordinates returning simulated sensory readings robot standing corresponding point physical space entire extent code added mataric 
approaches cognitive architectures cognitive system ability read maps act information emergent property interactions simple spatial calculation floor plan complex system choosing actions including archiving acting remembered experience 
reporting results technical literature traditional computational metaphor provide adequate vocabulary terms explain robot 
system fundamentally constituted steps achieve goal concurrent collection interacting behavior modules 
replacing model community interacting entities suddenly strikingly empowered give adequate system 
mataric robot achieves behavior means continual interaction environment 
system achieves alternate behavior temporarily replacing sensory readings consisted ray projections robot position giving extremely rough approximations robot actual sonar 
robot approximated point 
sonar reality highly non linear approximated linear non 
plus simple mode switch allow robot move imagine mode physical real world interactions 
lynn andrea stein challenging computational metaphor physical environment virtual represented floor plan 
community constitutes mataric robot internal controllers interacts simulated world floor plan way equivalent interactions occur real physical world 
equivalence partial simulation incredibly simplistic unrealistic 
respect interactional invariances observed mataric system environments equivalent 
story describes particular example cognitive behavior achieved bootstrapping directly physical interaction 
significant evidence idea building cognitive constituents reusing systems interaction 
example kosslyn long argued mental imagery tasks critically engage human visual cortex 
damasio contends rational decision making crucially dependent limbic emotional system 
clark reviews inseparability body manipulations cognitive strategies employed artificial natural organisms 
cases cognitive physical sub functions sequential result oriented computation 
interactions constitute cognitive aspects computation 
emphasis social cognition adds fuel fire 
thinking single brain interactive distributed intelligence community 
hutchins goes far suggest cognition case naval navigation team guiding necessarily distributed just single brain community people instruments culture 
computation traditionally construed calculational metaphor provides little leverage new theories thinking 
shifting computational metaphor opens possibility computation cognition 
electronic computer human brain community interacting entities 
represents fundamental change understanding think 
summary live time transition 
computer science undergoing revolution 
traditional foundations field shifting making way alternate conceptualization better explains phenomena see 
previous metaphor computation calculation sequencing steps produce result crucially empowering computation early history 
today metaphor creates puzzles solves 
explain field best known artifact world wide web traditional terms 
changing ways computer scientists think computation 
computer science language describing computation interaction 
artificial intelligence attention embodiment agents behaviors indicative shift 
computer systems community uses terms server transaction thread 
research communities rely similar notions names study networking lynn andrea stein challenging computational metaphor distributed systems information management human computer interaction computer supported collaboration web computing embedded systems 
research communities terminology describing interactive community metaphor impeding opportunities cross field discourse collaborative problem solving 
recasting computational science terms interactive community shifts center field 
efforts multiple cpus look single processor automatic program parallelization peripheral 
research user interfaces component architectures corba com take new centrality focus coupling subsystems 
heart current computational thinking agents servers distributed systems protocols 
way approaching computation profound implications kinds thinking 
students means harness native intuition survive inherently concurrent asynchronous world 
put calculational 
students professionals alike encouraged interact computational artifacts experiment tinker 
longer silence students problem solving skills derive experiential mathematical logical approaches 
disciplines find new metaphors appropriate bi directional cross disciplinary communication 
just computation model understanding cognitive biological science learn robustness biological systems inspires construction survivable computational systems forrest programmable cells abelson 
natural artificial computations produce behavior virtue interactions community 
disciplines study systems interaction 
historically claimed distinct role computation 
computational science shifts embrace interaction field surrounding disciplines 
cognitive sciences looks natural intelligence works 
organizational science analyzes ways corporations large administrative entities function 
engineering provides vocabularies techniques coordinating complex systems 
fields potential contribute benefit computational science interaction 
changing fundamental metaphor underlying computation shifts questions discipline ask 
affects appropriate matter course research project 
ramifications styles techniques 
bears understanding cognitive processes affect people stylized disciplinary culture 
current computational revolution profound implications think 
lynn andrea stein challenging computational metaphor began ross ashby address international federation systems research european meeting cybernetics systems research vienna april 
am grateful robert trappl erich prem paulo petta hospitality 
addition transcribing version 
research turned supported national science foundation young investigator iri office naval research science scholars program mary institute radcliffe college spent year sabbatical leave mit 
scope far people fit confines journal article 
mentioned name take faith depths appreciation 
various members ap lab mit fellows staff participants wustl symposium colleagues mit shaped innumerable ways 
special go hal abelson john chapin philip resnik david stein read commented earlier drafts 
abelson hal tom knight gerry sussman 

amorphous computing 
white 
agha gul 

actors model concurrent computation distributed systems 
cambridge massachusetts mit press 
agha gul 

concurrent object oriented programming 
communications acm 
agha gul carl hewitt 

actors conceptual foundation concurrent object oriented programming 
bruce shriver peter wegner editors 
research directions object oriented programming 
cambridge massachusetts mit press pp 

agre philip 
dynamic structure everyday life 
ph thesis department electrical engineering computer science massachusetts institute technology 
agre philip stanley rosenschein editors 

computational theories interaction agency 
cambridge massachusetts mit press 
ashby ross 

design brain 
london chapman hall 
ashby ross 

cybernetics 
london chapman hall 
lynn andrea stein challenging computational metaphor beer 
dynamical systems perspective agent environment interaction 
artificial intelligence 
braitenberg 

vehicles experiments synthetic psychology mit press 
cambridge ma 
brooks rodney 
robust layered control system mobile robot 
ieee journal robotics automation 
brooks rodney 
behavior language user guide 
memo 
massachusetts institute technology artificial intelligence laboratory 
cambridge massachusetts 
brooks rodney 
intelligence reason 
proceedings twelfth international joint conference artificial intelligence sydney australia pp 

brooks rodney lynn andrea stein 
building brains bodies autonomous robotics 
carriero gelernter 

write parallel programs course 
cambridge massachusetts mit press 
chomsky noam 

rules representation 
columbia university press new york 
chomsky noam 

language thought 
moyer bell wakefield rhode island 
clark andy 

putting brain body world 
cambridge massachusetts mit press 
coen michael 
software agent environment construction system sc thesis department electrical engineering computer science massachusetts institute technology 
coen michael 
building brains rooms designing distributed software agents 
proceedings ninth conference innovative applications artificial intelligence 
providence rhode island 
cypher ho messina 

architectural requirements parallel scientific applications explicit communication 
ieee proceedings th international symposium computer architecture 
san diego california pp 
damasio antonio 
descartes error emotion reason human brain 
new york putnam sons 
dellarocas 
coordination perspective software architecture design handbook integrating software components 
ph thesis department electrical engineering computer science lynn andrea stein challenging computational metaphor massachusetts institute technology 
center coordination science working 
dennett daniel marcel 

time observer consciousness brain 
brain behavioral sciences 
dourish paul graham button 

paradoxes possibilities 
proceedings acm conference human factors computing systems chi vancouver canada 
new york acm press 
fikes nilsson 

strips new approach application theorem proving problem solving 
artificial intelligence 
fodor 
modularity mind 
cambridge massachusetts mit press 
gamma erich richard helm ralph johnson john vlissides 

design patterns elements reusable object oriented software 
reading massachusetts addison wesley 
hendriks jansen horst 

catching act 
cambridge massachusetts mit press 
hillis daniel 

connection machine 
cambridge massachusetts mit press 
hutchins edwin 

cognition wild 
cambridge massachusetts mit press 
karger david lynn andrea stein 

haystack user information environments 
white 
kay alan 

computer revolution hasn happened 
keynote address acm sigplan conference object oriented programming systems languages applications 
keller evelyn fox 

feeling organism life barbara mcclintock 
san francisco freeman 
keller evelyn fox 

life 
new york columbia university press 
lling michael 
blue programming environment manual version 
technical report 
school computer science software engineering monash university melbourne 
kosslyn stephen 
image mind 
cambridge massachusetts harvard university press 
kosslyn stephen 
ghosts mind machine 
new york norton 
lynn andrea stein challenging computational metaphor kosslyn stephen 
image brain resolution imagery debate 
cambridge massachusetts mit press 
kuhn thomas structure scientific revolutions 
university chicago press 
lawler robert 
computer experience cognitive development child learning computer 
john wiley sons 
lynch nancy roberto segala vaandrager weinberg 

hybrid automata 
alur henzinger sontag editors hybrid systems iii verification control dimacs workshop verification control hybrid systems new brunswick new jersey october volume lecture notes computer science pages 
springer verlag 
martin fred 

circuits control learning engineering designing lego robots 
ph dissertation 
media laboratory 
massachusetts institute technology 
cambridge massachusetts 
marr david 

vision 
freeman san francisco california 
mataric maja 

integration representation goal driven behavior robots 
ieee transactions robotics automation 
david 
datum feedback control computing 
ph thesis 
program science technology society 
massachusetts institute technology 
cambridge massachusetts 
minsky marvin 

society mind 
new york simon schuster 
newell simon 

gps program simulates human thought 
feigenbaum feldman editors computers thought pp 

newell simon 

human problem solving englewood cliffs new jersey prentice hall 
papert seymour 

children computers powerful ideas 
basic books 
port robert timothy van gelder 

mind motion explorations dynamics cognition 
cambridge massachusetts mit press 
pylyshyn 

computation cognition 
cambridge massachusetts mit press 
resnick mitchel 

study children concurrent programming 
sc thesis 
department electrical engineering computer science 
massachusetts institute technology 
cambridge massachusetts 
lynn andrea stein challenging computational metaphor resnick mitchel 

traffic jams explorations massively parallel 
cambridge massachusetts mit press 
rumelhart mcclelland editors 

parallel distributed processing 
cambridge massachusetts mit press 
erin 

invited presentation learning memory 
tenth annual symposium frontiers science 
shaw mary david garlan 

software architecture perspectives emerging discipline 
prentice hall 
smith brian 

origin objects 
cambridge massachusetts mit press 
smithers tim 

dynamics adaptive behavior cognition look agent environment interaction systems 
practice autonomous agents 
monte switzerland pp 

steels luc rodney brooks editors 

artificial life route artificial intelligence building embodied situated agents 
hillsdale new jersey lawrence erlbaum associates stein lynn andrea 

delegation inheritance 
proceedings acm sigplan conference object oriented programming systems languages applications orlando florida pp 

stein lynn andrea 

imagination situated cognition 
journal experimental theoretical artificial intelligence 
stein lynn andrea 

interactive programming introductory computer science 
computing surveys 
stein lynn andrea 

systems architectural principles cognitive robotics 
cybernetics systems 
stein lynn andrea 

swept rug radically rethinking cs 
computer science education 
stein lynn andrea 
forthcoming 
interactive programming 
san francisco california morgan kaufmann publishers stein lynn andrea 
rethinking cs robots revolutionize introductory computer programming 
accepted publication computer science education 
stein lynn andrea james hendler 
robotics undergraduate computer programming courses 
lynn andrea stein challenging computational metaphor stein lynn andrea henry lieberman david ungar 

shared view sharing treaty orlando 
won kim fred lochovsky editors object oriented concepts databases applications acm press pp 

stein lynn andrea stanley zdonik 

dynamic behavior types instances 
international journal computer science information management 
turing alan 
computable numbers application entscheidungsproblem 
proceedings london mathematical society 
sherry 

second self computers human spirit 
new york simon schuster 
sherry seymour papert 

epistemological pluralism styles voices computer culture 
signs journal women culture society 
varela francisco paul editors 

practice autonomous systems proceedings european conference artificial life 
cambridge massachusetts mit press 
von neumann draft report 
contract 
ord 
philadelphia pennsylvania moore school electrical engineering university pennsylvania june 
elliot michael taylor vivek sarkar walter lee victor lee jang kim matthew frank peter finch rajeev barua jonathan babb saman amarasinghe anant agarwal 

software raw machine 
mit lcs technical report tr 
waldo jim geoff ann wollrath sam kendall 

note distributed computing 
technical report tr 
sun microsystems laboratories wegner peter 

interaction powerful algorithms communications acm 
weiner norbert 

cybernetics 
new york john wiley sons 
yonezawa akinori mario tokoro 

object oriented concurrent programming 
cambridge massachusetts mit press 
lynn andrea stein challenging computational metaphor 
sequential computation input execute sequence steps terminates producing result 

computation interaction persistent entities communicate coordinate time 
lynn andrea stein challenging computational metaphor motors sensors 
simple robot task navigate running obstacles 
lynn andrea stein challenging computational metaphor 

robot behavior results emergent interactions community 
