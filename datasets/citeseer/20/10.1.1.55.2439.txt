patterns intelligent mobile agents elizabeth kendall murali krishna pathak suresh computer systems engineering royal melbourne institute technology city campus gpo box melbourne vic australia email kendall rmit edu au 
agent systems strong foundation approach successfully applied kinds software patterns 
presents collection patterns agents 

motivation agent development date home grown done scratch independently development team 
led problems lack agreed definition agents built different teams different capabilities 
duplication effort little reuse agent architectures designs components 
inability satisfy industrial strength requirements agents integrate existing software computer infrastructure 
address security scaling concerns 
agents complex ambitious software systems critical applications 
agent systems engineered valid software engineering principles constructed ad hoc fashion 
agent systems strong foundation software patterns 
software patterns arose alexander architecture urban planning 
urban plans architectures ill 
overly ambitious agent systems built ad hoc fashion risk fate 
may built due fragile nature may built abandoned 
software pattern recurring problem solution may address conceptual architectural design problems 
pattern described set format ease dissemination 
format states problem addressed pattern forces acting 
context pattern valid statement solution known uses 
sections summarize key patterns agent systems brevity patterns abbreviated form 
known uses listed individual pattern means pattern arisen activity 
patterns represent progress pattern language living methodology intelligent mobile agents 

context agent autonomous acts human intervention ii social collaborates agents structured messages iii reactive responds environmental changes iv pro active acts achieve goals 
combination behaviors distinguishes agent objects actors robots 
agents review models world select capability plan address situation 
invoked plan executes thread may execute concurrently 
agents negotiate agent collaboration disciplines may require semantics exchanged 

layered agent pattern problem agent behavior best organized structured software 
software architecture best supports behavior agents forces agent system complex spans levels abstraction 
dependencies neighboring levels way information flow 
software architecture encompass aspects agency 
architecture able address simple sophisticated agent behavior 
solution agents decomposed layers higher level sophisticated behavior depends lower level capabilities ii layers depend neighbors iii way information flow neighboring layers 
layers identified model agent real world fig 
structures agent layers 
exact number layers may vary 
proceeding bottom agent beliefs sensory input 
problem agent reasons determine 
agent decides action carry directly action involves agents requires collaboration 
approach collaboration determined actual message formulated translation delivered distant societies mobility 
mobility translation collaboration actions reasoning beliefs sensory brings messages layered agent architectural pattern top distant messages arrive mobility 
incoming message translated agent semantics 
collaboration layer determines agent process message 
message processed passed actions 
action selected processing passed reasoning layer necessary 
plan placed actions layer require services lower layers utilize higher ones 
variations layered agent general architecture addresses simple sophisticated agents 
agents layers 
static agent isn mobile layer agents 
translation layer needed multidisciplinary agent societies presently rare agent societies collaboration layer agents share 
agent beliefs simple change agent doesn need sensors mobility collaboration may combined agent society dispersed platforms 
aspects layered agent pattern may conceptual architectural due performance issues direct connections nonadjacent layers required 
known uses layered agent architectures early ones require mobility translation 
grate features domain cooperation control layers equivalent sensory beliefs reasoning action collaboration 
touringmachines consist perception action control 
layers cooperation plan behaviour world interface 

sensory beliefs reasoning context overview sensory beliefs layers maintain agent models environment 
models agent determines reasoning 
conceptual patterns evolved lowest levels agent capabilities patterns differ presence absence factors symbolic model knowledge prescriptive solution interaction human user 
table summarizes patterns problem symbolic prescribed human int 
solution pattern agent simply react stimulus request utilize stimulus response type behavior 
reactive agent agent select plan achieve goal agent reasons symbolic model select capability 
deliberative agent agent address problems solution known represent problem constraints agent opportunistically solve problem 
opportunistic agent agent adapt needs human user provide agent parametric user models sensors monitor user 
interface agent table sensory beliefs reasoning patterns reactive agent problem agent react environmental stimulus request agent symbolic representation known solution forces agent needs able respond stimulus request 
may symbolic representation application 
application may knowledge prescriptive solution 
solution reactive agent internal symbolic models environment acts stimulus response type behavior 
gathers sensory input belief reasoning layers reduced set situated action rules 
single reactive agent proactive society agents exhibit behavior 
reactive agent known weak agent 
known uses reactive theory originated brooks agre chapman reactive agents widely 
simulate behavior ant societies utilize societies search optimization 
deliberative agent problem agent select capability proactively achieve goal problem context forces agent capable intelligent behavior selecting plan achieve goal 
applications symbolic representation model environment specified 
problems knowledge solution identified experts 
solution deliberative agent possesses internal symbolic reasoning model environment beliefs reasoning layers 
select plan capability achieve goal context situation 
deliberative agent strong agent sample involves society agents knowledge particular business processes 
known uses deliberative agents originated cohen georgeff widely jennings 
opportunistic agent problem agent opportunistically address problems identifying approach known forces problem symbolic representation knowledge prescriptive solution 
applications constraints may known indicate done 
agent needs able avoid known constraints move solution 
solution opportunistic agent attempt prescriptive plans address problem 
beliefs consist constraints problem reasoning capabilities accomplish constraint propagation satisfaction 
problems symbolic representation known prescriptive solution solved way 
known uses fox pioneered approach successfully distributed scheduling resource allocation problems typically knowledge approach 
interface agent problem agent adapt needs human user forces agents directly human user assisting application finding information services 
needs human users variable certain categories users established patterns user behavior 
solution interface agent collaborates human computer user 
typically agent full agent society may 
kind agent observes user adapts needs identifying kind user patterns computer 
interface agent beliefs typically parametric user models sensors monitor user actions 
known uses maes led development interface agents called personal assistants 

action layer context overview action layer carries selected plan 
need layer able schedule prioritize 
patterns summarized table 
intention problem agent commit performing reactive proactive behavior forces behavior executes beliefs agent behavior initiated 
agent may activities plans executing concurrently 
agent plan impacts environment effectors calls collaboration needs involve agents 
problem solution pattern agent commit behavior instantiated plan intention executes thread control 
intention plan request encapsulated object implement plan interface high level operation different subclasses 
plan command different plans intentions provide interface creating families related objects plan requests instantiated runtime specifying concrete classes 
subclasses determine class instantiate 
intention factory manage different threads control agent actions migrations 
decouple method execution method invocation simplify synchronized access shared resource methods invoked different threads control 
adaptable active object priority handling forms behavior added intention dynamically decorate add behavior run method intention thread plan executes 
messages agents passed agent reasoning capability decouple reasoning execution invocation simplify synchronized access agent shared reasoning resource 
message forwarder table patterns action layer solution intention represents commitment agent state believes perform set actions 
instantiated plan intention executes thread control executes completion suspended awaiting reply 
plan goals stated invocation conditions additional criteria environmental situations stimuli context conditions 
conditions plans reside reasoning layer 
conditions satisfied plan instantiated executed intention actions layer 
variables expressions plan evaluated agent beliefs time instantiation agent commits performing plan 
intention specialized figures 
intention created require services lower layers collaboration involve higher layers 
known uses intentions introduced georgeff lansky part belief desires intentions agent architecture 
intentions provide proactive reactive behavior strong weak agent systems including 
problem priority handling forms behavior added intention dynamically forces main intention subclasses reaction collaboration 
additional refinement needed especially priority handling 
result duplication reaction collaboration intentions feature priority handling 
priority handling attached object class type known run time 
solution additional responsibilities attached intention dynamically decorators 
pattern decorate run method action plans executed 
additional priority handling added dynamically decorator object 
adaptable active object problem manage different threads control agent actions agent actions conform different environments forces agent intentions act concurrently different threads control 
collaboration actions reasoning collaboration intention reaction intention effectors thread thread plan plan condition condition items indicated objects patterns intentions action layer plans conditions reasoning layer object environment may need affected impacted agent sequential manner 
agents may act various environments different effectors 
active object pattern uses practical represent method separate class instantiate runtime variability effectors 
solution active object pattern decouples method method invocation order simplify synchronised access shared resource 
scheduler form active object pattern method object new method object classes necessary method environment 
solution problem provided adapter pattern class 
user provide method call method invoked method object dispatched 

collaboration layer context overview collaboration layer agent determines approach cooperating working agents 
conceptual architectural design patterns utilized messaging conversation centralization facilitator decentralization agent proxy social policies protocol emergent society summarized table conversation problem structured messaging agents occur sequences isolated acts forces successive messages agents may related 
endless loops messages need avoided 
solution conversation sequence messages agents place period time 
termination conditions occurrence conversations may give rise conversations 
agent societies messages agents may occur context conversations isolated messages supported 
known uses agentalk supports conversations agents kaos 
centralized collaboration facilitator problem agent able freely collaborate agents direct knowledge existence 
forces agent may knowledge agent proliferating interconnections dependencies increase complexity complicate maintenance reduce reusability solution mediator associated multitude colleagues objects rely communication 
facilitator mediator provides gateway clearinghouse agent collaboration 
facilitator agents direct knowledge agents society share single collaboration layer 
known uses archon pact agent applications utilized facilitators refering approach federated agent architecture 
decentralized collaboration proxy problem agents collaborate directly 
forces agent may facilitator represent 
agent communicate directly agents support different interfaces maintain collaboration knowledge 
agents collaborate structured messages agent dialects 
bottlenecks encountered centralized architecture need avoided 
agent able recover conversations involved 
problem solution pattern messaging agents occur sequences agent messaging occur context established previous messages 
conversation agents collaborate direct knowledge encapsulate agent interaction facilitator coordinates agents society 
facilitator agents collaborate directly provide proxy control access agent provide distinct interfaces 
store retrieve conversations 
agent proxy agent collaboration prescribed establish conversation policies explicitly characterize communication sequences 
protocol agents cooperate achieve goals established protocol stimulus response behavior agent stimulate neighbors 
complex patterns behavior emerge viewed globally 
emergent society table patterns collaboration layer solution proxy controls access real subject provide distinct interface 
agent proxy class subscribe certain interface 
agent able determine behavior state conversation involved 
agent may engaged conversations simultaneously requiring context switching 
memento pattern object state state restored 
agent proxies support conversations store recover state delegating memento 
protocol problem agent collaborative behavior prescribed follow certain policies forces agents need able follow certain conventions policies collaboration 
solution conversation policies protocols encode regularities characterize communication sequences users language 
agent protocols explicitly define sequences messages permissible set participating agents 
known uses kaos agentalk stipulate protocols conversation policies including contract net inform offer request 
emergent society problem agents collaborate known protocols reactive agents collaborate forces may known agent protocols application 
reactive agents need able collaborate carry proactive behavior 
reactive agents simply react stimuli capable knowledge behavior 
solution individual agent reactive agent actions provide stimulus neighboring agent 
individual agent reacts stimuli provided neighbors net result emergent society 
complex patterns behavior emerge interactions agent society viewed globally 
model exists behavior economic game theory applied successfully 
reactive agents agents emergent societies reduced collaboration layers merely provide stimuli neighboring agents 
known uses reactive agent systems rely emergent society collaboration 

mobility layer context overview mobility layer support real virtual migration 
consists region shared agents agent societies region belongs individual agent 
architectural conceptual design patterns table 
clone problem agent relocate resident distant societies forces agent able bring capabilities facilities state new society 
agent able travel remote location interact negotiate exchange information new society 
solution copy clone original agent place new agent distant society 
clone capabilities facilities original agent state information 
known uses original agent self replication cooperating mobile wave agents 
approaches utilize cloning include ibm aglets agent transfer protocol atp 
java object move host internet 
problem solution pattern agent resident distant society replicate agent providing sensors effectors new environment 
clone agent cloned distant society define operations cloning destination society changing agent class 
separate construction agent representation 
remote configurator agent able gain access resources agents outside society transparently location transparency provided broker 
proxies employed client server able respond interface broker 
broker agent migrate virtually reality dynamically provide thread manager handler creator allow subclasses virtual actual migration address thread instantiation 
migration thread factory table patterns mobility layer moves takes program code state data 
bradshaw refers agent cloning teleportation 
remote configurator problem agent appropriately configured various destination societies forces actual migration agent cloned destination society 
configuration details needed cloning plan library beliefs 
configuration details format depend society requirements 
agent support various kinds configuration access operations 
need represent configuration accessing functions separately agent structure agent support distinct unrelated operations object structure 
agent similar object structure created framework solution visitor pattern utilized design 
handler transfers visitor distant society migrating agent 
mobility layer instantiates visitor object passed corresponding layers 
structure layers fixed visitor gather configuration information public interface methods 
need define separate methods transferring configuration details society 
services added adding new visitor subclasses change agent structure 
broker problem agent able gain access resources agents outside society migrating forces agents able access resources platforms societies having migrate 
making agent responsible access security interactions society complex 
solution broker pattern provides location transparency objects wish clients servers 
agent agent proxy virtual member open societies managed brokers 
bridges societies supported 
agents wish clients servers employ broker responsible locating server client requested services 
client server register broker 
broker pattern provides virtual agent migration 
known uses bradshaw refers broker matchmaker 

configuration integration context overview process creating configuring agent consists creating various layers integrating 
design creating object structure individual layers integrating uses patterns agent builder layer linker 
agent builder problem construction agent separated representation construction process create different representations 
forces agent fundamentally structure 
creation process isolated process different structures 
solution collects user configuration details passes creator object 
builder pattern creator director 
instantiates creator configurator objects configurator objects builder objects create object structure individual layer 
layer linker problem various individual layers agent integrated forces necessary provide interface layer decouple layers possible 
solution configurator creates facade object objects form structure configured agent application developer 
facade pattern provides simple interface decoupling layers 
facade object implements unified interface layer promoting layer independence portability 
configurator registers configuration repository object 
repositories get facade object integration phase executed creator object integrate 

various patterns agent systems 
design implement document system rmit 
additional patterns particular pertaining security mobility layer consideration 
aimed providing strong software engineering foundation agent systems 

agre chapman pengi implementation theory activity proceedings th national conference artificial intelligence 
alexander timeless way building new york oxford university press 
integration heterogeneous databases wave cooperative agents proceedings international conference practical application multi agent systems london 
bradshaw benoit kaos industrial strength open distributed agent architecture bradshaw ed software agents aaai mit press 
brooks robust layered control system mobile robot ieee journal robotics automation 
ra 
buschmann meunier rohnert stal pattern oriented software architecture system patterns 
wiley sons 
cohen levesque intention choice commitment artificial intelligence 
ferber simulating reactive agents agent simulation artificial life hillebrand editors amsterdam ios press pp 

ferguson architecture adaptive rational mobile agents proceedings third european workshop modelling autonomous agents multi agent worlds maamaw 
gamma helm johnson vlissides design patterns elements reusable objectoriented software 
addison wesley 
georgeff lansky reactive reasoning planning proceedings sixth national conference artificial intelligence seattle wa 
ibm aglets programming mobile agents java www trl ibm jp aglets 
ibm agent transfer protocol www trl ibm jp aglets atp atp html 
jennings faratin johnson brien wiegand intelligent agents manage business processes international conference practical application intelligent agents multiagent technology london 
kendall jiang methodology developing agent systems enterprise integration ei ifip tc sig working conference models methodologies enterprise integration island australia 
schmidt active object object behavioral pattern concurrent programming pattern languages programming illinois 
maes agents reduce information overload communications acm vol 
pp 

muller thiel modelling interacting agents dynamic environments proceedings eleventh european conference artificial intelligence ecai amsterdam 
nwana lee jennings coordination multi agent systems software agents soft computing enhancing machine intelligence nwana editors springer 
nwana ndumu agent technology software agents soft computing enhancing machine intelligence nwana editors springer 
fox constraint directed negotiation resource allocations distributed artificial intelligence gasser huhns editors morgan kaufmann 
tenenbaum weber gruber enterprise integration lessons shade pact enterprise integration modeling proceedings international conference petrie editor 
mit press 
wooldridge jennings agent theories architectures languages ecai workshop agent theories architectures languages amsterdam ed 
carbonell siekmann springer verlag 
