appear proceedings sixteenth acm sigact sigmod sigart conference principles database systems pods tucson az may 
answering recursive queries views oliver duschka duschka cs stanford edu department computer science stanford university michael genesereth genesereth cs stanford edu department computer science stanford university consider problem answering datalog queries materialized views 
ability answer queries views crucial context information integration 
previous answering queries views restricted queries conjunctive 
extend general recursive queries datalog program set views possible find datalog program equivalent uses views edb predicates 
show problem datalog program rewritten equivalent program uses views undecidable 
hand prove datalog program effectively rewritten program uses views contained contains programs views contained consequence exists program equivalent uses views construction guaranteed yield program equivalent consider problem answer datalog programs materialized views available edb predicates 
situation appears commonly information integration information sources considered store materialized views global database schema see ull excellent overview 
consider datalog program gamma edge edge black gamma edge black edge black edb predicates 
predicate edge represents edges graph predicate black indicates nodes colored black program computes endpoints paths length black internal nodes 
views gamma edge black gamma edge black available 
view stores edges black starting nodes view stores edges black nodes 
copyright fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org case possible rewrite datalog program equivalent datalog program uses views edb predicates gamma gamma equivalence easily seen expanding view definitions view view available wouldn equivalent datalog program path start black node respectively 
question ask datalog program materialized views vn equivalent datalog program uses vn edb predicates 
show problem undecidable views conjunctive datalog program views contain built predicates 
surprisingly able give procedure construct datalog program best possible rewriting 
formally datalog program materialized conjunctive views vn show construct datalog program pv properties edb predicates views vn 
ii contained 
iii datalog program satisfies conditions ii contained consequence prove construction guaranteed yield equivalent datalog program uses views edb predicates exists program 
applied context information integration construction yields query plans data available information sources possible guaranteeing computed answers satisfy user queries 
example assume want integrate databases provide flight information 
database stores pairs cities southwest airlines nonstop flights 
second database stores cities reached tucson non flights airlines offering flights 
third database provides information cities connected united airlines flights 
want integrate databases users ask arbitrary datalog queries edb predicate light carrier 
intended meaning light tus san wn example southwest airlines wn offers non flight tucson tus san diego san 
databases want integrate seen views predicate light gamma light wn gamma light tus gamma light ua light ua assume user interested names cities reached plane tucson changing airlines 
corresponding user query gamma light gamma light gamma tus query defines predicate san sfo ua example means flight united airlines ua possibly overs san diego san francisco sfo 
databases available impossible find cities reached plane tucson changing airlines 
best find cities reached tucson flying southwest airlines flying united airlines cities reached plane tucson non 
construction yields datalog program fact computes exactly cities 
possibility effectively constructing maximally contained datalog programs contradicts previous undecidability result 
contradiction 
constructed datalog program equivalent query datalog program way determine fact case testing containment undecidable 
preliminaries datalog horn rule expression form gamma pn xn pn predicate names xn tuples variables constants function terms 
head rule body pn xn 
subgoal rule 
variable head rule occur body rule 
logic program set horn rules datalog program set function free horn rules 
predicate intensional database predicate idb predicate program appears head rule predicates appearing head extensional database predicates edb predicates assume program idb predicate called query predicate represents result program define dependency graph nodes predicate names appearing rules 
edge node predicate node predicate appears body rule head predicate program recursive cycle dependency graph 
conjunctive query single nonrecursive function free horn rule 
example consider datalog program gamma edge edge black gamma edge black 
predicates edge black edb predicates predicate idb predicate 
program recursive dependency graph predicate containment input datalog program consists database storing instances edb predicates database output denoted instance query predicate determined example naive evaluation ull 
datalog program contained datalog program databases contained 
datalog programs equivalent contained 
problem determining datalog program contained datalog program general undecidable shm 
problem decidable non recursive 
decision procedure containment 
replace variables non recursive datalog program distinct constants 
consider database dc contains exactly tuples corresponding subgoals frozen bodies rules dc called canonical database evaluate canonical database 
contained frozen heads rules contained dc 
example determine non recursive datalog program gamma edge edge black black gamma edge edge edge black black contained datalog program example replace variables rules distinct constants gamma edge edge black black gamma edge edge edge black black yields canonical database edge hc hc hc hc hc black hc hc hc hc output datalog program canonical database hc hc hc hc 
output contains hc hc contained retrievable programs datalog program retrievable contain edb predicates view literals vn abbreviate cases views vn clear context 
expansion exp retrievable datalog program obtained replacing view literals definitions 
existentially quantified variables views replaced new variables expansion 
example view gamma edge edge datalog program gamma gamma retrievable edp predicate view literal expansion retrievable datalog program datalog program gamma edge edge edge edge gamma edge edge retrievable datalog program pv contained datalog program exp contained retrievable program contained retrievable program exp contained exp retrievable datalog program maximally contained datalog program contained retrievable datalog program contained contained pv note notions maximal containment relative fixed set views 
undecidability result section show limits reasoning answering recursive queries views 
prove question existence equivalent retrievable datalog program undecidable 
comparison problem np queries restricted conjunctive lmss 
undecidability proof uses reduction containment problem datalog programs known undecidable shm 
theorem datalog program edb predicates en conjunctive views vm predicates en undecidable retrievable datalog program equivalent proof 
arbitrary datalog programs 
show decision procedure problem allow decide contained containment problem datalog programs undecidable proves claim 
loss generality assume idb predicates name answer predicates named respectively arity datalog program consisting rules rules xm gamma xm xm gamma xm new zero ary edb predicate 
edb predicate xk define view xk gamma xk 
show contained retrievable datalog program equivalent assume contained equivalent program pv consisting rules replaced corresponding additional rule xm gamma xm 
assume retrievable datalog program equivalent instantiation edb predicates yield result especially instantiations empty relation contains empty tuple 
empty relation produces exactly tuples produced likewise 
contains empty tuple produces union tuples produced produces union 
contain produce set tuples regardless instantiation follows equivalent union contained construction maximally contained programs show possible construct maximally contained retrievable datalog programs 
quite surprising case exists equivalent retrievable datalog program maximal containment implies equivalence 
contradiction undecidability result previous section 
able construct equivalent retrievable datalog program possible tell equivalent original datalog program fact determining contained undecidable 
construction consists steps 
step construct program contain function symbols 
result step retrievable logic program necessarily datalog program 
function symbols introduced controlled fashion second step transform logic program datalog program 
show resulting retrievable datalog program maximally contained query datalog program 
need notation transformations 
inverse gamma view definition set rules having view literal xm body predicates body turn heads 
variables xm head remain unchanged 
variable appears body head consistently replaced term xm function symbol chosen anew existentially quantified variable 
inverse gamma set view definitions union inverses gamma view definitions example inverse view definitions gamma edge edge edge gamma edge set rules edge gamma edge gamma edge gamma edge gamma datalog program set conjunctive views construction retrievable logic program quite simple 
delete rules contain edb predicates appear view definitions 
resulting program denoted gamma add rules gamma call program obtained gamma gamma 
notice edb predicates remaining rules idb predicates gamma gamma appear heads rules gamma naming idb predicates arbitrary rename idb predicates gamma gamma names differ names corresponding edb predicates ease exposition 
example consider datalog program gamma edge gamma edge determines transitive closure predicate edge 
assume materialized view available gamma edge edge view stores endpoints paths length 
just view way determine transitive closure predicate edge 
best hope achieve compute endpoints paths lengths 
predicate edge edb predicate appears definition gamma gamma just rules gamma added gamma gamma gamma edge gamma edge edge gamma edge gamma gamma gamma yields endpoints paths length result 
example assume instance edb predicate edge represents graph gamma gamma introduces new constants named 
idb predicate edge gamma represents graph gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma computes transitive closure notice pairs transitive closure contain new constants exactly endpoints paths length original graph bottom evaluation logic programs guaranteed terminate general 
possible generate terms arbitrary function symbols 
example bottom evaluation logic program gamma gamma contains infinite number terms answer edb predicate contains constant contrast construction produces logic programs bottom evaluation guaranteed terminate 
key observation function symbols introduced inverse rules 
inverse rules recursive terms nested function symbols generated 
theorem datalog program set conjunctive views finite instances views logic program gamma gamma unique finite minimal fixpoint 
furthermore naive semi naive evaluation guaranteed terminate produce unique fixpoint 
proof 
sketch gamma recursive introduce function symbols 
hand gamma introduces function symbols recursive 
bottomup evaluation gamma gamma necessarily progress stages 
stage instances idb predicates gamma determined 
second stage standard datalog evaluation gamma datalog programs unique finite minimal fixpoints proves claim 
instances edb predicates logic program produce tuples containing function symbols result 
instances edb predicates contain function symbols datalog program produces tuples result containing function symbols 
motivates definition filter gets rid extraneous tuples 
database containing instances edb predicates logic program set tuples contain function symbols 
program database computes 
theorem shows simple construction adding rules inverses view definitions yields logic program uses views best possible way 
discarding tuples containing function symbols result gamma gamma contained result retrievable datalog program contained contained gamma gamma 
theorem datalog program set conjunctive views gamma gamma maximally contained gamma gamma constructed time polynomial size proof 
prove gamma gamma contained en instances edb predicates em determine instances views turn edb predicates gamma gamma 
assume gamma gamma produces tuple contain function symbols 
consider derivation tree gamma gamma 
leaves view literals view literals edb predicates gamma gamma 
removing leaves tree produces tree original edb predicates new leaves 
instances views derived en constants en consistently replacing function terms constants yields derivation tree gamma gamma contained arbitrary retrievable datalog program contained prove contained gamma gamma 
cv arbitrary conjunctive query generated prove exp contained gamma gamma pv contained gamma gamma proves claim 
dc canonical database exp exp contained exp dc contained output applied dc conjunctive query generated produces exp dc 
predicates query exp predicates exp appear view definition generated gamma exp contained containment mapping exp cm 
variable exp appear cv existentially quantified view xm cv mapping maps variable corresponding term xm gamma gamma derive gamma derive specialized conjunctive query 
rules gamma derivation gamma extended derivation conjunctive query contains view literals 
identity mapping containment mapping cv proves pv contained gamma gamma 
gamma gamma constructed time polynomial size subgoal view definition corresponds exactly inverse rule gamma eliminating function symbols section demonstrated efficient procedure answer query datalog program possible materialized views desirable transform constructed logic program datalog program represents answer 
means looking datalog program equivalent gamma gamma 
seen difficult 
key observation finitely function symbols gamma gamma 
nested function expressions generated bottom evaluation possible little bit bureaucracy keep track function terms produced gamma gamma generating tuples containing function terms 
transformation proceeds bottom fashion 
function terms xk idb predicates gamma eliminated replacing list variables xk occur 
idb predicate names need annotated indicate xk belonged function term xk 
instance example rule edge gamma replaced rule edge gamma annotation represents fact argument edge identical argument edge second third argument edge combine function term function symbol second argument edge 
bottom evaluation gamma gamma yield function term argument idb predicate gamma new rule added correspondingly expanded annotated predicates 
example shows transformation 
example logic program example transformed datalog program 
lines indicate stages generation datalog rules 
edge gamma edge hf gamma gamma edge hf gamma edge hf gamma edge hf hf gamma edge hf hf gamma edge hf gamma edge hf generated datalog programs show explicitly arguments original logic program able produce function terms 
tuples function symbols able contribute answer function symbols 
exact bookkeeping function symbols able eliminate derivations useless tuples 
going optimizations 
define predicate relevant path dependency graph query predicate predicate relevant derivation tuple answer requires rules irrelevant predicates dropped losing answers 
example dependency graph datalog program example paths predicates hf predicates irrelevant 
rules defining irrelevant predicates dropped 
datalog program optimization step edge gamma edge hf gamma hf gamma edge hf hf gamma edge hf gamma edge hf second optimization doesn reduce number derivations easy way save copying data evaluation datalog 
predicate datalog program rule body rule subgoal predicate eliminated program 
rule having subgoals unify subgoal head rule replace subgoal corresponding body rule example predicates edge edge hf example rule subgoal bodies rules eliminated 
resulting datalog program hf gamma hf gamma gamma hf denote resulting datalog program gamma gamma datalog clearly correspondence bottom evaluations gamma gamma gamma gamma datalog keep track function symbols gamma gamma datalog know resulting instance query predicate exactly subset result gamma gamma contain function symbols 
theorem datalog program set conjunctive views program gamma gamma equivalent gamma gamma datalog assume datalog program set conjunctive views exists retrievable datalog program equivalent theorems know retrievable datalog program gamma gamma datalog maximally contained implies contained gamma gamma datalog gamma gamma datalog equivalent corollary datalog program set conjunctive views edb predicates retrievable datalog program gamma gamma datalog exists retrievable datalog program equivalent gamma gamma datalog equivalent related question answering queries views attracted lot interest application information integration ull dg query optimization yl 
far restricted case conjunctive queries 
levy lmss showed question determining conjunctive query rewritten equivalent conjunctive query uses views np complete 
rajaraman extended include binding patterns view definitions 
binding patterns express restricted query capabilities information sources 
order model information sources complex query capabilities levy lru considered answer queries infinite number conjunctive views 
proposed pseudo equivalent rewritings case equivalent rewritings exist 
ideas qia give algorithm rewriting conjunctive queries materialized views 
extends answering queries views recursive queries 
comparison algorithms going compare construction algorithms answering queries views bucket algorithm unification join algorithm qia 
algorithms handle recursive queries illustrate differences construction algorithms non recursive example query 
example variation example assume databases available described views gamma light wn gamma light ua gamma light light second database store pairs cities southwest airlines wn united airlines ua respectively offer direct flights 
third database stores pairs cities connected flights airlines offer flights 
example query assume user wants know airlines fly tucson san francisco gamma light tus sfo ff gamma light tus light sfo fi construction section logic program obtained polynomial time light wn gamma light ua gamma light gamma light gamma gamma light tus sfo gamma light tus light sfo transformation section remove rules marked add rule gamma bucket algorithm bucket algorithm algorithm query planning information manifold system 
subgoal user query bucket created 
view containing predicate unifiable oe inserted oe general unifier variables conjunctive user query separately bucket algorithm constructs retrievable conjunctive queries head possible combinations view literals taken buckets corresponding subgoals bodies 
retrievable queries algorithm checks add constraint body expansion resulting query contained retrievable conjunctive queries pass containment test evaluated find answer user query 
example applied query example bucket algorithm creates buckets subgoals light tus sfo light tus light sfo respectively 
buckets filled follows tus sfo tus sfo tus sfo tus sfo tus tus sfo sfo retrievable queries gamma tus sfo gamma tus sfo gamma tus gamma sfo algorithm checks adding constraints expansion contained conjunctive user query ff 
sixteen retrievable queries checked see adding constraints expansion contained conjunctive user query fi gamma tus sfo gamma tus sfo gamma tus gamma tus sfo gamma tus sfo gamma tus sfo gamma tus gamma tus sfo gamma tus sfo gamma tus sfo gamma tus gamma tus sfo gamma sfo gamma sfo gamma gamma sfo numbered retrievable query constraint added body passes containment test 
example constraint needs added query wn constraint needs added query sfo example shows bucket algorithm perform lot containment tests 
quite expensive especially testing containment conjunctive queries npcomplete 
unification join algorithm step unification join algorithm step construction generation inverse rules 
construction transforms original query inverse rules retrievable datalog program unification join algorithm constructs set retrievable conjunctive queries called unification join central step 
subgoal user query label created 
gamma inverse rules unifiable pair oe voe inserted provided oe contain function terms 
oe general unifier oe oe restriction oe variables variables query predicate respectively 
unification join labels denoted defined follows 
contains pair oe contains pair oe contains pair oe oe oe oe oe oe general substitution oe oe oe oe oe oe provided substitution oe provided oe oe oe oe oe contain function terms 
oe unification join labels corresponding subgoals conjunctive user queries user query head retrievable query head hoe body part result 
example applied query example unification join algorithm generates labels corresponding subgoals light tus sfo light tus light sfo respectively fc tus sfo fc tus sfo fc tus fc tus fz tus tus fc sfo fc tus fz sfo sfo unification join fc tus sfo fc tus sfo fz tus sfo tus sfo 
labels corresponding conjunctive queries ff fi respectively 
retrievable conjunctive queries constructed wn gamma tus sfo ua gamma tus sfo wn gamma tus sfo ua gamma tus sfo gamma tus sfo unification join algorithm doesn require containment tests 
generate exponential number conjunctive queries cases algorithm generates small datalog program 
example assume views form gamma user query xn gamma xn gamma xn constructed maximally contained datalog program gamma 
gamma vk xn gamma xn gamma xn evaluating datalog program requires gamma unions gamma joins 
hand unification join algorithm yields retrievable conjunctive queries xn gamma xn gamma xn jn kg 
evaluating conjunctive queries requires gamma unions gamma joins 
considered problem answering datalog queries materialized views available edb predicates 
showed recursive queries conjunctive views undecidable exists equivalent retrievable datalog program 
practical purposes important problem construct retrievable programs available views best possible manner construct maximally contained programs 
showed simple polynomial time construction yields maximally contained logic programs 
demonstrated translate logic programs pure datalog programs 
interesting investigate classes datalog programs problem finding equivalent datalog program uses views decidable 
construction section extended take functional dependencies restrictions binding patterns account 
possible incorporate built order predicates 
views restricted conjunctive queries 
working generalizing ideas views disjunctions description 
open question view definitions recursive 
acknowledgments whitney helpful comments improved 
surajit chaudhuri ravi krishnamurthy potamianos shim 
optimizing queries materialized views 
proceedings eleventh international conference data engineering ieee comput 
soc 
press pages los alamitos ca 
cm ashok chandra philip merlin 
optimal implementation conjunctive queries relational data bases 
proceedings ninth annual acm symposium theory computing pages 
dg oliver duschka michael genesereth 
query planning infomaster 
proceedings acm symposium applied computing san jose ca 
nam quan 
aggressive views extract information 
technical report tr department computer science stanford university 
thomas kirk alon levy yehoshua sagiv divesh srivastava 
information manifold 
proceedings aaai spring symposium information gathering distributed heterogeneous environments stanford ca 
lmss alon levy alberto mendelzon divesh srivastava yehoshua sagiv 
answering queries views 
proceedings th acm sigact sigmod sigart symposium principles database systems san jose ca 
alon levy anand rajaraman ordille 
query answering algorithms information agents 
proceedings thirteenth national conference artificial intelligence aaai portland 
alon levy anand rajaraman ordille 
querying heterogeneous information sources source descriptions 
proceedings nd international conference large databases bombay india 
lru alon levy anand rajaraman jeffrey ullman 
answering queries limited external processors 
proceedings th acm sigact sigmod sigart symposium principles database systems montreal canada 
qia qian 
query folding 
proceedings th international conference data engineering pages new orleans la 
anand rajaraman yehoshua sagiv jeffrey ullman 
answering queries templates binding patterns 
proceedings th acm sigact sigmod sigart symposium principles database systems 
raghu ramakrishnan yehoshua sagiv jeffrey ullman moshe vardi 
proof tree transformation theorems applications 
proceedings eighth acm sigart symposium database systems pages philadelphia pa 
shm oded shmueli 
decidability expressiveness aspects logic queries 
proceedings sixth acm symposium principles database systems pages 
ull jeffrey ullman 
principles database knowledgebase systems volume 
computer science press 
ull jeffrey ullman 
information integration logical views 
proceedings sixth international conference database theory 
yl yang larson 
query transformation psj queries 
proceedings thirteenth international conference large data bases pages los altos ca 
