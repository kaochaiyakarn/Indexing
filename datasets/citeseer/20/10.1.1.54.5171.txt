quantifier elimination parametric polymorphism programming languages harry mairson department computer science brandeis university waltham massachusetts february simple easy understand explanation ml type inference parametric polymorphism framework type monomorphism order typed lambda calculus 
prove equivalence system standard interpretation type polymorphism extend equivalence include polymorphic fixpoints 
monomorphic interpretation gives purely combinatorial understanding type inference problem classic instance quantifier elimination example cut elimination framework curry howard propositions types analogy 
supported nsf ccr texas instruments tyson foundation 
influential theory type polymorphism programming robin milner proposed extension order typed calculus known core ml programming language mil hmt 
extension augmented monomorphic type language order typed calculus known type schemes allowing limited form quantification type variables 
expression language similarly expanded introducing construct typing polytype free occurances typed differently polymorphically varied instantiations quantified variables polytype 
added expressiveness type language allowed typable calculus equivalent classic example facility ii typable ml ii order typable 
type polymorphism incorporated variety functional programming languages hw tur 
virtues static typing typing done compile time guarantee typechecked programs go wrong run time parametric polymorphism polymorphically typed code reused data types decidable type inference compiler automatically infer general type information called principal type expression typing expression substitution instance principal type 
extent milner proposal type polymorphism necessary achieve degree parametric polymorphism 
surprisingly type language order typed calculus sufficient support ml style parametric polymorphism long inference rule typing expressions gamma gamma gamma ml program free variables typable standard milner damas inference system dm typable classical curry inference system cf augmented rule 
parametric polymorphism realized ml may achieved framework type monomorphism 
observe inference rule realizes parametric polymorphism code reuse explicitly expression free gets replaced separate copy program example typing ii instance reduced typing may typed differently 
effect considering expression marked redex ii theory labelled reductions bar 
monomorphic realization ml parametric polymorphism new 
survey type systems programming mit attributes observation albert meyer 
earlier appearance idea dissertation luis damas dam fact question postgraduate examination computing edinburgh university edi 
simple easy understand explanation ml type inference framework type monomorphism prove equivalence standard interpretation type polymorphism 
addition analyze extension ml inference system proposed alan mycroft myc allowing fixpoints variable appearing recursion equation may polymorphic type 
type inference system computable ktu show inference system purely monomorphic interpretation 
believe monomorphic interpretation important gives purely combinatorial understanding significant fragment girard reynolds second order polymorphic typed calculus gir rey 
provides classic example quantifier elimination context curry howard propositions types analogy serves sort gentzen style cut elimination 
simple combinatorics monomorphic interpretation reduces problem type inference order unification rob played central role complete analysis computational complexity ml type inference km mai kmm providing insight significant lower bounds type inference higher order typed calculi hm 
preliminaries expressions consider ml expressions defined grammar ee fixx ranges set expression variables 
excluding expressions form fixx language considered known core ml see example mh 
syntax core ml just calculus augmented polymorphic construct 
write fv denote free variables allow ff renaming fi reduction calculus reduction expressions rule gamma 
details concerning reductions calculus ml see bar hs hmt 
types syntax types grammar ranges set type variables 
refer monotypes oe called type schemes 
define partial order iff exists substitution sigma gamma 
sigma denotes syntactic equivalence overloaded expressions 
interpret sets monotypes interpretation hffi fffg ff monotype ffi ffi ff denotes substitution free occurances ff 
interpretation sets monotypes allows definition partial order write oe oe iff hoe hoe easy see instance ff ff polytype ff monotype note minimal element ti define equivalence relation oe oe iff hoe hoe write oe denote equivalence class fff ff oeg 
equivalence class definition wish argue names order bound variables polytype significant 
oe polytype write oe denote monotype derived removing quantifiers oe monotype write denote polytype derived quantifying subset type variables inference rules expressions associated types fixed set inference rules 
describe systems rules standard damas milner dm call polytype system second variant called monotype system 
name suggests monotype system associates expressions monotypes 
major point show simply limitation truly restriction 
inference rules manipulate expression called type judgement written gamma oe oe gamma fv gamma 
type judgement read environment context gamma expression type oe 
calculus environments associate values free variables expression case environment associate types free variables 
give inference rules polytype monotype systems 
polytype system due dm monotype system essentially due cf augmented rule 
observe rule types quantifiers binding requiring rules gen inst quantifier elimination 
details type inference rules recommend car han mil wan 
core ml inference rules polytype system var gamma fx oeg oe gen gamma oe fv gamma gamma oe inst gamma oe gamma oe abs gamma fx gamma app gamma gamma gamma mn gamma oe gamma fx oeg gamma core ml inference rules monotype system var gamma fx app gamma gamma gamma mn abs gamma fx gamma letm gamma gamma gamma equivalence polytype monotype systems mean say monotype system equivalent polytype system 
guess expression monotype context gamma gamma iff gamma gamma contains valid context monotype judgement 
unfortunately try gamma iff gamma gamma monotype bindings gamma statement true consider fi tg ii iff ii monotype judgement clearly false 
second guess insist closed term 
proof lines proceed double induction structure maximum number reductions needed reduce normal form see appendix kmm 
proof overly tedious technical requires understanding minimal complete developments calculus hs bar 
contradicts overwhelming sentiment equivalence want simple easy prove 
equivalent fi tg ii monotype system 
note ii closed 
propose monotype equivalent ii ii closed term course thinking case justifies specification equivalence 
kind shorthand spirit code reuse gentzen cut 
identifying expression variable polytype implicit assumption piece code exists type done example simply insert code place variable representative 
generalizing example propose reasonable definition equivalence definition gamma fw ff ff wm ff mg context monotype bindings gamma fy fi fi fi context polytype bindings 
ff set terms fi principal type specifically insist gamma fy fi fi gamma fi gamma fi gamma delta delta delta gamma gamma fi fi fi quantifiers removed 
framework precise meant equivalence 
term monotype gamma gamma gamma delta delta delta clear natural equivalent monotype judgement contingent explicit substitution code represented type level 
case closed term empty contexts iff kmm 
inspired example tait strong normalization theorem order typed calculus tai facilitated proof strengthening induction hypothesis syntax directed induction continuing proof introduce standard structural lemma allowing normalize derivations polytype system syntax directed proof 
lemma pi gamma gamma context monotype denotes possibly empty list quantified variables 
variable exists proof pi gamma rule pi var abs app 
proof 
observe pi gamma syntax directed proof gen inst 
lemma states final uses gen inst removed 
proof proceeds induction number uses basis case clearly inductive step consider cases case proof pi ends rule gen gen gamma gamma simply remove step proof remove quantifier type apply inductive hypothesis 
case proof pi ends rule inst inst gamma gamma ff ff monotype 
observe rules appearing proof series uses gen inst adds quantifier removes quantifier 
act stack 
identify point proof universally quantified gen gamma gamma proceed follows 
subproof rooted replace free occurences ff 
deductions proof remove binding replacing newly free occurences ff 
remove final inference 
proof fewer uses gen inst apply inductive hypothesis 
lemma stated assumptions gamma gamma prove statement definition structural induction proceeding case analysis 
assume renaming variable bound quantified 
case necessarily ff gamma gamma ff delta delta delta result immediate 
case forward direction assume gamma gamma gamma gamma fi principal typing know fi know exists substitution sigma delta delta delta delta delta delta gamma gamma pi gamma delta delta delta gamma gamma fi know gamma delta delta delta gamma gamma applying sigma types appearing proof pi 
reverse direction suppose gamma delta delta delta gamma gamma know gamma gamma fi derive gamma gamma instantiating bound variables fi sigma 
case gh prove gamma gamma gh gamma gamma gamma gamma monotype lemma 
induction know gamma delta delta delta gamma delta delta delta result follows app 
note implications reversible lemma needed 
case prove gamma gamma lemma know gamma fx gamma induction larger monotype context binding added gamma fx delta delta delta abs gamma delta delta delta implications reversible 
case gamma gamma lemma gamma gamma oe principal polytype oe gamma gamma fy oeg inst gamma gamma oe induction proof pi gamma delta delta delta oe induction polytype context fy fi fi fi oeg associated code ff gg gamma delta delta delta rewrite gamma delta delta delta delta delta delta proof pi letm proof gamma delta delta delta delta delta delta syntactically identical gamma delta delta delta argument reversible 
definition equivalence theorem polytype monotype inference systems core ml equivalent 
corollary closed term monotype 
parametric polymorphism cut elimination proof theory known curry howard propositions types analogy read oe expression type oe expression proof proposition oe 
case function types read logical implication 
environment gamma serves set labelled assumptions type judgement gamma oe elaborates classical sequent gamma oe 
proofs sequent calculus type derivations written form trees leaves form propositional hypotheses 
logical formalism cancelling hypotheses reflected removing type assumptions introducing abstraction 
detailed elementary discussion see 
process fi reduction simply typed calculus interpreted transformation proof trees pi gamma pi gamma modus ponens get pi mn gamma case know gamma pi gamma fx replace assumption appearing leaf proof tree pi subtree proof pi interpreted proof theory level transformation example called gentzen gen cut elimination represents proof proved shortcut may require proofs parametric polymorphism core ml introduced construct viewed powerful form cut elimination 
cut elimination fi reduction allows proof free proposition times cut reduction allows proof proposition times provided monomorphic free 
prove fff ff fi fi ff fi 
ff fi example construct proof instantiate appropriately 
propositions general unifier proposition related observation monomorphic inference rules core ml show principal type property proved mil straightforward consequence existence general unifiers order domain 
similar fi reduction reduction viewed proof transformation 
expression may polytype assigned instantiate quantifiers differently 
proof recycled generate structurally similar propositions 
characterization polymorphic recursion monotypes inference rules described far typing ml programs include rule typing fixpoints allow recursion 
ml fixpoints constrained monomorphic polytype system usually extended fix ml gamma fx gamma fixx difficult show rule added polytype system gamma fixx iff gamma eq eq usual definition eq principal type consequence adding monomorphic fixpoint type inference particularly complex 
alan mycroft myc proposed powerful variant rule fix bound variables occur polymorphically fix gamma fx oeg oe gamma fixx oe rule oe polytype 
shown kfoury tiuryn urzyczyn type inference presence polymorphic fixpoint undecidable ktu 
section show polymorphic fixpoint described type monomorphism 
polymorphic inference system augmented rule fix add rules monotype system gamma fixx fix gamma gamma gamma fixx term free variable define fixx delta delta delta henceforth refer polytype system augmented rule fix monotype inference systems augmented rules fix 
observe properly speaking fix rule schema syntax varies integer noted inference rules schemas 
monomorphic rules typing polymorphic fixpoint simple explanation 
initial approximation fixpoint principal types repeatedly computed better approximate fixpoint possible convergence 
carry approach show term principal type approximating fixpoint known type fixpoint oe fixx polytype system follows principal type satisfies oe 
renaming bound variables finite number types oe satisfying oe oe know pigeonhole argument sequence converge 
show types form complete partial order convergence sequence assured prefer proceed combinatorial approach 
indicating polytype inferences derived monotype inferences proposition gamma gamma defined definition 
gamma delta delta delta principal typing fk fix free gamma gamma fixx 
proof 
theorem know gamma gamma gamma gamma fx rule fix gamma gamma fixx observe proposition principal type required proof theorem 
prove converse monotype inferences derived polytype inferences bit detail required 
simple observation proposition gamma gamma fixx oe gamma gamma oe principal type environment gamma gamma satisfies oe 
proof 
induction case trivial 
recall fix gamma gamma fx oeg oe 
show judgement holds observe gamma gamma oe gamma gamma fx oe oe inductive hypothesis take oe oe 
fixx typable typable 
principal type oe 
goal show successive principal type 
proposition types oe oe ff ff oeg finite set 
proof 
define length monotype jtj ff oe hffi oe hffi 
fij jfij substitution decrease length know jffj joej loss generality number quantifiers preceding ff ff bounded jffj 
proposition gamma principal typing fix free 
proof 
induction basis case inductive step assume inductive hypothesis gamma fx take proof gamma fx note instantiation monotype carried gamma clear gamma gamma know lemma fix free 
gamma fx oeg oe exists type oe oe gamma oe gamma oe proof 
proposition proves direction 
recall oe ff ff oeg 
proposition oe oe oe finite proposition exists pigeonhole principle js oe 
proposition take oe state equivalence theorem polytype monotype inference systems polymorphic fixpoint theorem gamma gamma definition 
gamma gamma oe gamma delta delta delta oe proof 
augment induction proof theorem case fixx loss generality assume oe principal typing 
gamma gamma fixx oe argument lemma gamma gamma fx oeg oe 
fix free previous theorem exist oe oe gamma gamma oe fk 
fix free theorem gamma delta delta delta oe delta delta delta gamma oe fk fix gamma fixx oe note fixx delta delta delta fixx case fix free observe inductive hypothesis claims fix free expressions hold stipulation 
repeat argument 
final remarks obvious polytype monotype inference systems equivalent expressive power 
expression defined having polytype instantiate quantified type variables accordance type context 
code type code differently instance 
ml module system identifiers bound types code type inference take place obvious facility incremental compilation 
course module give code practice type shorter 
examples type larger code pathological examples provide foundation lower bounds type inference km mai kmm 
short general specifications types considerably longer programs implementing specifications specification language rich 
equivalence proofs fairly straightforward structural induction 
contribution part give precise definition equivalence 
lesson simple type polymorphism needed reuse code separate copies code 
equivalence proofs explain theory type monomorphism programming clear type polymorphism ml languages admits straightforward quantifier elimination procedures 

gerd hillebrand paris kanellakis lincoln wallen stimulating helpful discussions 
addition acknowledge generous hospitality computer science department uc santa barbara music academy west cate school stay santa barbara summer began 
bar barendregt 
lambda calculus syntax semantics 
northholland 
car cardelli 
basic polymorphic type checking 
science computer programming pp 

cf curry feys 
combinatory logic north holland 
van 
logic structure 
springer verlag 
dam damas 
type assignment programming languages 
ph 
dissertation cst computer science department edinburgh university 
dm damas milner 
principal type schemes functional programs 
th acm symposium principles programming languages pp 
january 
edi edinburgh university 
postgraduate examination questions computation theory ed 
donald sannella 
laboratory foundations computer science report ecs lfcs 
gen gentzen 
collected papers gerhard gentzen ed 
szabo 
northholland 
gir 
girard 
interpr etation fonctionelle elimination des coupures de ordre 
th ese de doctorat etat universit de paris vii 
han hancock 
polymorphic type checking 
implementation functional programming languages simon peyton jones 
prentice hall 
hmt harper milner tofte 
definition standard ml 
mit press 
hm henglein mairson 
complexity type inference higher order typed lambda calculi 
proceedings th acm symposium principles programming languages january pp 

hs hindley seldin 
combinators lambda calculus 
cambridge university press 
hw hudak wadler editors 
report functional programming language haskell 
yale university technical report yaleu dcs rr 
km kanellakis mitchell 
polymorphic unification ml typing 
brown university technical report cs august 
proceedings th acm symposium principles programming languages pp 
january 
kmm kanellakis mairson mitchell 
unification ml type reconstruction 
computational logic essays honor alan robinson ed 

lassez plotkin 
mit press 
ktu kfoury tiuryn urzyczyn 
undecidability semi unification problem 
proceedings nd acm symposium theory computing may 
see boston university technical report october 
mai mairson 
deciding ml typability complete deterministic exponential time 
proceedings th acm symposium principles programming languages pp 
january 
mil milner 
theory type polymorphism programming 
journal computer system sciences pp 

mit mitchell 
type systems programming languages 
appear chapter handbook theoretical computer science van leeuwen eds 
north holland 
mh mitchell harper 
essence ml 
proceedings th acm symposium principles programming languages pages january 
myc mycroft 
polymorphic types schemes recursive definitions 
proceedings international symposium programming paul robinet eds lecture notes computer science springer verlag pages 
rey reynolds 
theory type structure 
proceedings paris colloquium programming lecture notes computer science springer verlag pp 

rob robinson 
machine oriented logic resolution principle 
journal acm 
tai tait 
interpretation functionals finite type symbolic logic pp 

tur turner 
miranda non strict functional language polymorphic types 
ifip international conference functional programming computer architecture nancy lecture notes computer science pp 
springerverlag 
wan wand 
simple algorithm proof type inference 
fundamenta informaticae 
