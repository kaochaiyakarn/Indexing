finding similar time series gautam das dimitrios gunopulos heikki mannila univ memphis memphis tn memphis edu 
research done author visiting univ helsinki 
ibm almaden rc harry rd san jose ca usa almaden ibm com 
research done author visiting univ helsinki 
univ helsinki dept computer science fin helsinki finland heikki mannila cs helsinki fi 

similarity objects crucial concepts applications including data mining 
complex objects similarity nontrivial define 
intuitive model measuring similarity time series 
model takes account outliers different scaling functions variable sampling rates 
methods computational geometry show notion similarity computed polynomial time 
statistical approximation techniques algorithms speeded considerably 
give preliminary experimental results show naturalness notion 
able measure similarity dissimilarity objects crucial point data retrieval data mining applications see general discussion similarity queries 
complex objects defining similarity means trivial 
consider problem defining similarity time series 
time series important class complex data objects 
arise financial scientific applications examples include stock price indices volume product sales telecommunications data dimensional medical signals audio data environmental measurement sequences 
cases necessary search time series database series similar query sequence 
primitive needed example prediction clustering purposes 
statistical literature time series vast studied similarity notions appropriate data mining applications 
intuitively consider sequences similar exhibit similar behavior large subset length 
assume sequences compared outliers values measurement errors omitted comparing sequence different scaling factors baselines sequences measurements done different devices scaling baseline values different 
goal obtain measure similarity resistant respect see pages discussion resistance robustness statistical procedures 
changes 
sequence modify sequence introducing outliers scaling translation adding removing observations sequences considered reasonably similar 
give definition similarity fulfills conditions study algorithms compute similarity sequences 
discuss generalizations specializations similarity concept 
detail organized follows 
section similarity model 
sections give exact algorithm finds similarity time sequences similarity defined 
section give faster approximation algorithm 
algorithm implemented section experimental results 
section short 
results represent preliminary demonstrate validity approach 
rigorous comparison different methods follow 
extended proofs lemmas theorems appear appendix 
similarity model time series finite sequence integers xn 
cal cal fig 

telecommunication sequences sequence represents number connections physical line time 
fix set transformation functions mapping integers integers 
set consist say linear functions 
ax scaling functions 
ax quadratic functions monotone functions just identity function 
intuitively say sequences xn similar function long subsequence approximately mapped long subsequence important note consist consecutive points respectively 
points appear relative order 
means matched subsequences allow number holes outliers original sequences 
clearly similar number outliers small approximate length 
definition 
time series xn yn numbers fl sequences fl similar exist function subsequences fln fln fln gamma fln jk jk parameter fl fl control length subsequence mapped parameter controls close want sequences match 
jk satisfy condition say close 
definition 
similarity fmax fl fl ffl number numbers closer signifying greater similarity 
consider collection functions lin consisting linear functions lin fx 
ax set functions reasonably simple allows find similarities sequences different scaling factors base values 
call lin fl similarity simply fl similarity 
briefly mention related lack space section strongly abbreviated 
problem searching similar sequences brought database community papers :10.1.1.45.9405
idea longest common subsequence measuring similarity sequences objects proposed 
similarity model account different scaling factors different baseline values 
similar model proposed agrawal 
main difference model allow outliers windows specified length linear function vary slightly length matched common subsequence 
see collection material sequence comparisons 
longest common subsequences know function determining fl similarity easy form sequence applying element locate longest common subsequence numbers considered equal ffl close 
longest common subsequence simple dynamic programming time theorem appendix time hn obtained length longest common subsequence gamma theorem appendix gives sketch algorithm 
refer algorithm algorithm subroutine sections 
algorithm able solve simple fashion seemingly complex problem determining elements complex objects correspond maximal pairing objects 
note sequence aspect crucial finding maximal pairing sets np complete 
polynomial algorithm fl similarity section correct algorithm pair sequences finds linear transformation maximizes length longest common subsequence 
algorithm methods computational geometry 
main idea algorithm locate fundamentally different linear transformations check 
linear transformations specified pairs say equivalent denoted lin maps close maps close lemma 
equivalence classes lin algorithm find sequences fl similar 

equivalence classes lin find representative 

pair run algorithm sequences ax test length longest common subsequence fln 
theorem corollary algorithm lemma 
theorem 
time series xn yn numbers fl compute fl similar time 
consider smaller family scaling functions sc fx 
ax obtain result 
theorem 
time series xn yn fl compute sc fl similar time 
approximate algorithm algorithm previous section shows problem deciding similarity solvable polynomial time practical 
section show obtain faster approximation algorithm 
main idea reduce number candidate pairs 
statistical arguments compute bounds possible values matched subsequences length fln 
ax summing obtain ae xmin ymin subsequences length fln minimize average xmax ymax subsequences maximize average 
subsequences easily value fl sorting points input sequences 
compute xmax xmin ymin ymax bound values inequality 
obtain inequalities 
gammae max ymin 
gammae min ymax inequalities define infinite wedge space see 
get finite convex area need inequality 
order deviation sequences 
deviation sequence xn jx gamma note 
lemma 
matched subsequences length fln 
jd gamma ax fl je dmin dmin subsequences length fln minimize deviation subsequences maximize deviation 
previous inequality 
dmin gamma fl ymax 
dmin fl ymax inequalities ones define bounded quadrilateral space 
inequalities find subsequences minimize maximize deviation 
lemma 
sequence xn fl assume subsequence length fln minimizes deviation xmin fln 
min min fln max max fln xmin min max previous lemma shows log running time algorithm computes subsequence length fln minimizes deviation 
fig 

lines represent inequalities obtained specific pair sequences subsequences minimized maximized average 
algorithm find subsequence minimizes deviation 

sort points 

slide window size fln compute deviation subsequence inside window 
deviation new sequences computed incrementally step algorithm performed linear time 
find subsequence maximizes deviation similar argument 
case slide window length gamma fl points outside window points subsequence 
give outline approximation algorithm 
algorithm find sequences fl similar 

compute bounds define convex area space 

grid sample area defined bounds 

grid point apply linear transformation ax run algorithm running time algorithm gamma fl number sampling points 
trying find longest common subsequence length fln running time algorithm gamma fl 
accuracy algorithm depends size sampling grid 
experiments sampling interval ffl constant value cal junk cal junk fig 

shows sequences shown 
linear transformation maximizes length longest common subsequence sequences 
experimental results approximate algorithm implemented implementation find similar sequences set telecommunication sequences 
sequence represented number telephone connections went physical telephone line time 
measurements obtained sampling line minutes 
sequences represented number connections established time represented number connections established earlier 
sequence points long days 
set sequences ran algorithm pair 
large values ffl observed little variation final results different values ffl 
pair minus length longest common subsequence distance sequences 
obtained theta distance matrix fed sas clustering software package 
results clustering compared results visual classification sequences 
different kinds sequences different clusters 
office phone lines distinct pattern clustered 
pairs sequences appeared similar human observer clustered 
addition similarities didn notice mainly due different scale brought forward 
example shows best match sequences 
gives example matchings obtained 
cal cal cal cal fig 

sequences shown clustered pairs different clusters ffl discussion intuitive model capture similarity time series practical approximate algorithm measure similarity model 
algorithm implemented applied set telecommunication data encouraging results 
results represent preliminary 
experimental done properly evaluate behavior model compare approach existing different ones 
model modified ways 
interesting possible changes bounded offset restriction means element may mapped element sequence ji gamma jj constant 
restriction role forbidding large timing differences sequences quite reasonable application domains 
bounded offset model complexities algorithms typically factor lower general model longest common subsequence computation speeded 
approximation techniques section sharpened noting linear transformations preserve distributional properties sequences 
example repeated values sequence order fl similar approximately gamma fln values factor 
important research direction consider database problem set time series query sequence find ones similar query 
order avoid comparing query sequence sequence database approximation fingerprint scheme reduces dimension sequences wavelet transformation deviation subsequences 
compute fingerprints small dimension agrawal discrete fourier transform shatkay feature extraction methods suggested see general discussions fingerprinting 

agrawal faloutsos swami 
efficient similarity search sequence databases 
proceedings th international conference foundations data organization algorithms fodo chicago 

agrawal 
lin sawhney shim 
fast similarity search presence noise scaling translation time series databases 
proceedings st international conference large data bases vldb pages zurich 

aho 
algorithms finding patterns strings 
van leeuwen editor handbook theoretical computer science volume algorithms complexity pages 
elsevier science publishers north holland amsterdam 

berndt clifford 
finding patterns time series dynamic programming approach 
fayyad piatetsky shapiro smyth uthurusamy editors advances knowledge discovery data mining pages 
aaai press menlo park ca 

bollob das gunopulos mannila 
time series similarity problems separated geometric sets 
acm computational geometry conference 

faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
sigmod may 

goldin kanellakis 
similarity queries time series data constraint specification implementations 
int 
conf 
principles practice constraint programming pages 

mosteller tukey editors 
understanding robust exploratory data analysis 
wiley 

jagadish mendelzon milo 
similarity queries 
proceedings fourteenth acm sigact sigmod sigart symposium principles database systems pods pages 

sankoff kruskal 
time warps string edits macromolecules theory practice sequence comparison 
addison wesley 

shatkay zdonik 
approximate queries representations large data sequences 
icde 

white jain 
algorithms strategies similarity retrieval 
technical report vcl visual computing laboratory university california san diego gilman drive mail code la jolla ca july 

ozsoyoglu 
sequence matching images 
proceedings th international conference scientific statistical database management stockholm pages 
proofs theorem 
time series xn yn ffl compute longest subsequences ab ab ffl ffl time 
proof dynamic programming algorithm 
length longest common subsequence sequences 
length longest common subsequence easy see jx gamma ffl max gamma gamma 
max gamma gamma gamma gamma 
proof lemma assume pair points longest common subsequence fact mapped 
transformation ax applied inequality hold xs xs xsi ys fig 

lines intersect number line segments belong equivalence class 
consider plane mapped horizontal axis vertical 
refer plane 
represents point plane 
linear transformation ax represents line ax notice mapped linear function ax applied result line intersect line segment 
conversely line plane corresponds linear transformation line intersects line segment matched longest common subsequence sequences total line segments pair different lines intersect set line segments longest common subsequences obtained corresponding linear functions linear functions indistinguishable 
consider line ax set line segments intersects 
pass line segment endpoints slide vertically endpoint encountered rotate endpoint touches second endpoint 
new line 
intersects line segments additional 
procedure reduce line equivalent line passes endpoints consider lines pass endpoints 
endpoints define lines 
proof theorem lemma shows find lines represent equivalence classes lin simply pairing line segment endpoints 
lines significant 
line intersects fln line segments resulting longest common subsequence length fln 
enumerate lines intersect fln line segments endpoint sort points counter clock wise order sweep line point 
new endpoint update number line segments crossed line constant time operation new endpoint number increases decreases 
number fln run algorithm linear transformation 
running time log 
proof lemma assume 
jd gamma ax jy gamma gamma jax gamma ae gamma jy gamma gamma jax gamma ae gamma bj jy gamma ax gamma bj jy je gamma ae gamma bj 
cases jy gamma gamma jax gamma ae jy gamma gamma jax gamma ae gamma bj fl proof lemma assume min max assume xmin case symmetric 
replacing xmin subsequence xmin get new subsequence length fln 
min xmin gamma min fln 
smaller xmin smaller 
deviation compared xmin decreases gammax min fln gamma fln replacement xmin maximum increase deviation fln gamma gamma min fln 
occurs average larger points average larger largest point replacement new average moves away fln gamma points closer point 
smaller deviation xmin contradiction 
article processed macro package llncs style 
