purely functional random access lists chris okasaki school computer science carnegie mellon university forbes avenue pittsburgh pennsylvania usa mail cs cmu edu new data structure called random access list supports array lookup update operations log time simultaneously providing time list operations cons head tail 
closer analysis array operations improves bound log ng worst case log expected case index desired element 
empirical evidence suggests data structure quite efficient practice 
lists primary data structure functional programmer toolbox 
simple convenient usually quite efficient 
main drawback lists accessing ith element requires time 
situations functional programmers find efficient random access arrays 
unfortunately arrays quite awkward implement functional setting previous versions array available update 
arrays important data structure tremendous effort invested integrating arrays purely functional languages 
years effort focused analyses language restrictions destructive array updates safe 
crucial efforts assumption arrays typically single threaded manner update old array garbage may safely modified place yield new array 
happens assumption violated 
wish describe arrays user level purely functional language opposed implementation level destructive updates available 
new data structure called random access list supports non single threaded array lookups updates log time 
data structure purely functional quite simple implement virtually functional language 
novel aspect data structure provides random access simultaneously supporting normal logarithms base 
list primitives time 
random access lists may substituted standard lists application loss efficiency small constant factor 
describing random access functional arrays represented complete binary trees collections trees 
show add remove single element front collection time providing basis efficient list operations 
describe variations random access lists random access queues deques show support min queries random access structure penalty 
discuss related experimental comparisons data structure purely functional data structures 
conclude brief remarks 
code fragments written standard ml easily adaptable functional language 
source code available anonymous ftp ftp cs cmu edu directory afs cs project fox file tar gz 
complete binary trees preorder focusing issue random access 
wish implement purely functional arrays supporting operations ffl lookup return ith element valid index raise subscript exception 
ffl update return new array identical ith element changed valid index raise subscript exception 
ignore question arrays created 
data structure represented 
obvious approach balanced binary trees 
balanced binary tree representation avl trees red black trees adopt extreme position representing arrays complete binary trees 
recall complete binary trees totally balanced internal node children exactly size depth 
unfortunately complete binary trees available sizes form gamma deal problem shortly 
shape tree determined decide order store elements tree 
typical balanced search trees avl trees trees store elements symmetric order order left right inorder traversal 
reject choice grounds element stored leftmost node requires log time delta delta delta array represented complete binary tree preorder 
access 
eventually want access element time support efficient list operations choose store elements preorder order left right preorder traversal see 
scheme element element stored root 
elements 
bn stored left subtree elements dn 
gamma right subtree 
organization quite simple write lookup update functions shown 
note function takes size tree extra parameter 
height complete binary tree logarithmic size tree running time function clearly log 
collections trees noted previous section complete trees come sizes form gamma represent array arbitrary size 
unsatisfying approach simply smallest complete tree sufficiently large 
half elements wasted scheme 
alternative approach adopted represent array arbitrary size collection complete trees sum appropriate size see 
clearly possible collection trees size 
show fact represent arbitrary array logarithmic number trees 
definitions 
skew binary term integer form gamma 
note skew binary term larger term 
skew binary decomposition integer multiset skew binary terms ft 
tmg delta delta delta tm call decomposition greedy largest term large possible remainder decomposition greedy 
formally decomposition greedy subset terms sums larger term max call subset sum restriction 
greedy skew binary decompositions useful properties including braun trees store element root alternate remaining elements left right subtrees 
delta delta delta delta delta delta delta delta delta array represented collection complete binary trees 
property integer unique greedy decomposition denoted 
proof give constructive proof 
clearly fg unique 
assume consider largest skew binary term include set smaller terms may sum remainder sum gamma obey subset sum restriction 
just gamma 
note subset ftg gamma may sum term larger largest term ftg gamma 
clearly algorithm deterministic terminates 
property skew binary decomposition greedy term decomposition unique smallest may 
words 
tm sorted terms skew binary decomposition greedy delta delta delta tm proof suppose greedy decomposition existed terms form gamma term lesser size 
terms violate restriction sum gamma 
induction collection terms smallest repeated possibly sum larger term 
decomposition greedy 
property jg dlog proof inspection 
suppose contains dlog terms 
property contain term large gamma combined remaining terms strictly exceeds represent array size simply choose tree sizes greedy decomposition property guarantees lookups updates collection trees require log time log find right tree collection log find right element tree 
code functions 
random access lists point ignored issue array creation 
typically size array specified time creation changed 
situations datatype tree leaf node tree tree exception subscript fun size leaf size leaf raise subscript size node size node val size size div size size size size fun size leaf leaf size leaf raise subscript size node node size node val size size div size node size node size size lookup update operations complete binary trees 
type int tree list fun lookup raise subscript lookup size rest size size lookup rest size fun update raise subscript update size rest size size size rest size update rest size lookup update operations collections trees 
tree paired size 
desired size known ahead time making arrays awkward 
dijkstra proposed system flexible arrays initially empty grow shrink element time 
call flexible array grows shrinks front array indexed element random access list 
wish provide standard list operations cons head tail empty random access list empty predicate isempty 
operations complete binary trees greedy decompositions prove worth 
property demonstrates changing sigma affects smallest terms greedy decomposition suggesting cons tail implemented time opposed log time required virtually tree representation arrays 
property contains repeated terms contains repeated term gamma gamma gamma gamma gamma proof contains repeated terms may contain repeated terms terms unique 
property greedy decomposition 
property gamma gamma gamma composed entirely unique terms larger gamma 
gamma may contain repeated gamma terms terms unique 
gamma greedy decomposition 
property suggests implementation list operations cons new element random access list check smallest trees existing list size 
add new element singleton tree 
join trees new larger tree new element root 
provided trees maintained increasing order size accomplished time 
take tail list simply remove leading singleton tree exists 
remove root smallest tree add subtrees collection 
requires time 
operations illustrated pictorially 
remaining list operations head empty isempty trivial implement time 
contains code list operations 
fact list primitives implemented time remarkable implies application standard lists rewritten lists loss efficiency constant factor application takes advantage random access 
practice slowdowns list intensive applications random access factor 
course applications take advantage random access observe arbitrary speedups 
analysis recall lookups updates require time standard lists 
small values better log 
step collection tree decreases accurate bound worst case running time lookups updates random access lists log ng showing lists efficient standard lists 
bound tight consider array represented single tree 
competing data structures notably braun trees finger search trees improve worstcase bounds lookups updates slightly log 
show random access lists match bound albeit expected case worst case 
consider random access list containing exactly tree size blog gamma 
notice kth tree depth element contained approximately log th tree 
element accessed log time log find right tree collection log find right element tree 
fact bound holds gaps collection trees consecutive sizes missing constant kosaraju calls gap property 
intuition log expected bound large gaps randomly chosen dlog notice gamma tree size gamma collection element occurs collection tree 
element occurs earlier tree certainly requires log time access 
requires time gamma size tree size gamma collection 
randomly chosen probability 
probability general probability expected running time access delta delta delta delta delta delta series converges log 
variations arrays extensible rear front convenient 
may wish extend array front shifting existing indices 
variations quite simple simulate random access lists associating total size starting index list 
alternatively may wish extend array rear remove elements front yielding queue 
implemented substituting random access lists standard lists purely functional queues hood melville 
similarly arrays grow shrink random access deques implemented substituting random access lists standard lists purely functional deques hood chuang goldberg 
note purely functional queues deques okasaki suitable modification depend lazy lists lists spine strict 
min list list data structure supports additional operation min returns minimum element 
note operation delete min supported 
min queues min deques defined similarly 
data structures numerous applications including vlsi river routing pairs shortest path algorithms computing external farthest neighbors simple polygons 
show implement random access min lists bounds random access lists 
just random access min queues min deques may built jt jt delta delta delta delta delta delta delta delta delta delta cons tail delta delta delta delta delta delta delta delta delta delta jt jt delta delta delta delta delta delta delta delta cons tail gamma gamma gamma delta delta delta delta delta delta delta delta cases cons tail random access lists 
type int tree list exception empty val empty fun isempty true isempty size rest false fun cons xs size size rest size size size size node rest leaf xs cons xs leaf xs fun head raise empty head size leaf rest head size node rest fun tail raise empty tail size leaf rest rest tail size node rest val size size div size size rest operations random access lists 
delta delta delta delta delta delta delta delta delta random access min list 
tags nodes written node 
additional tags roots written node 
lists 
tarjan described efficient min deques supporting random access 
simple associate global minimum list 
minimum element removed updated wish search entire list new minimum 
tag tree node minimum element subtree rooted node root collection trees minimum element subsequent trees see 
minimum tag root 
maintaining tags updates difficult tag recomputed time strictly local information 
tags tree nodes depend value node tags children 
tags roots collection depend tag current root tag root collection 
tags need recomputed update nodes reconstructed update anyway penalty maintaining information 
related series array accesses lookups updates called single threaded operation refers version array previous version 
singlethreaded array accesses may safely implemented destructively requiring time 
vast majority research functional arrays focused detecting enforcing single threadedness techniques static analysis linear types monads 
array supports non singled threaded access called fully persistent 
number data structures proposed represent fully persistent arrays 
technique known version arrays shallow binding maintains cache elements trees differential nodes indicating differences cache 
technique yields performance single threaded accesses may degrade updates non single threaded accesses 
chuang uses randomization improve expected performance non single threaded accesses 
unfortunately version arrays rely destructive operations internally implemented purely functional language may provided primitives language 
furthermore version arrays limited fixed size chuang randomized method adapted flexible arrays 
dietz exploits fact indices fixed size arrays bounded integers provide implementation requiring log log expected amortized time operation 
various balanced binary tree schemes implement fully persistent arrays purely functionally including avl trees braun trees 
trees easily support log lookups updates log case braun trees require log time add remove element 
finger search trees similar binary search trees 
searches root finger search trees searches leftmost leaf searching upward find ancestor desired node searching downward normal fashion 
lookups updates require log time adding removing leaf leftmost position accomplished time 
finger search trees fully persistent internally destructive techniques driscoll clear implemented purely functionally suffering degradation performance 
kaplan tarjan introduced algorithmic notion recursive slowdown design new purely functional implementation double ended queues 
pleasant accidental property data structure supports random access log time distance desired element nearest queue 
different technique introduced myers implement random access stacks 
augments standard singly linked list auxiliary pointers allowing skip arbitrarily far ahead list 
number elements skipped auxiliary pointer controlled digits canonical skew binary number virtually identical greedy skew binary decompositions described 
scheme allows list operations log lookups requires time updates 
difficulty updates scheme contains redundant pointers 
removing redundant pointers yields structure isomorphic random access lists described see 
random access lists may viewed improvement myers representation support efficient updates 
random access lists share similarities binomial heaps 
rigidly structured trees certain fixed sizes binomial heaps gamma random access lists 
represent aggregates collections trees 
build bigger trees joining trees identical size 
adding single element structure highly reminiscent binary arithmetic 
difference binomial heaps binary arithmetic carries may arbitrarily far random access lists skew binary arithmetic carries may single position 
measurements determine effectiveness data structure compared running times purely functional data structures variety problems problem sizes 
addition random access lists measured performance standard lists myers random access stacks avl trees braun trees kaplan tarjan lists 
avl trees kaplan tarjan lists optimized implementations support insertions deletions front 
minor tuning performed replacing division bitwise shift operation 
benchmark problems ffl sum construct list containing integers theta delta theta delta theta delta theta delta theta delta theta delta theta delta theta delta theta delta theta delta delta delta delta delta delta delta myers random access stacks redundant pointers sum elements ffl lookup sequentially lookup element existing list size ffl update sequentially update element existing list size ffl quicksort sort list random integers quicksort algorithm lists ffl histogram count occurrences integer list integers chosen randomly 
gamma benchmarks run problem sizes benchmarks problem sizes 
sum quicksort benchmarks measure effectiveness data structure list 
lookup update histogram benchmarks measure effectiveness data structure array 
results experiments shown 
experiment give ratio average running time fastest data structure problem problem size 
examining ratios see surprisingly standard lists outperform data structures lists totally impractical arrays 
myers random access stacks perform quite lists lack efficient updates arrays 
hand avl trees braun trees excel array applications poorly list applications 
kaplan tarjan lists yield mediocre results experiment recall designed random access mind 
data structures random access lists competitive task 
nearly efficient standard lists list applications nearly efficient binary trees array applications 
fact factor fastest data structure problem 
random access lists data structure choice applications featuring patterns usage particularly array accesses non singlethreaded erratic performance braun trees deserves comment 
braun trees perform arrays array small access random 
perform surprisingly poorly sequential access large arrays 
closer examination reveals inordinate amount time spent collecting garbage 
braun trees exhibit poor locality near root elements close array ordering stored distant segments tree 
interacts poorly generational garbage collectors depend locality performance 
discussion implementation random access lists supports log array operations list operations 
randomly chosen bound array operations improved log expected time 
data structure simple code efficient practical alternative standard lists random access required 
log bounds disappointing compared bounds imperative arrays galil shown optimal linked structure bounded width nodes allowing destructive updates 
improving bounds require substructures unbounded width supporting random access 
order maintain bounds list operations substructures need time 
sense replacement standard lists random access lists pattern matching 
maintain necessary structure random access lists need provided data type data types known clash pattern matching 
pattern matching extremely convenient way writing functions involving lists data structures requires knowledge data structure representation 
mechanisms pattern matching data types pro standard list myers stack random access list problem user time gc time total time ratio user time gc time total time ratio user time gc time total time ratio sum lookup update quicksort histogram avl tree braun tree kaplan tarjan list problem user time gc time total time ratio user time gc time total time ratio user time gc time total time ratio sum lookup update quicksort histogram average running time seconds combination data structure problem problem size 
times broken user time garbage collection time 
dashes indicate tests slow measure 
experiment give ratio total running time fastest data structure problem problem size 
note random access lists competitive task 
measurements taken decstation mb ram running mach sml nj 
posed incorporated major functional language 
note limited proposal aitken reppy robust cope random access lists 
note techniques shao reducing space requirements standard lists storing multiple values node apply equally random access lists 
research sponsored defense advanced research projects agency title fox project advanced development systems software arpa order issued esd avs contract 

annika aasa holmstrom christina nilsson 
efficiency comparison representations purely functional arrays 
bit 
pankaj agarwal boris aronov rao kosaraju schieber subhash suri 
computing external farthest neighbors simple polygon 
discrete applied mathematics april 
william aitken john reppy 
value constructors 
acm sigplan workshop ml applications pages 
henry baker 
shallow binding lisp 
communications acm july 
henry baker 
shallow binding functional arrays fast 
sigplan notices august 
amir ben zvi galil 
pointers versus addresses 
journal acm july 
bloss 
update analysis efficient implementation functional aggregates 
proceedings conference functional programming languages computer architecture london pages 
warren burton robert cameron 
pattern matching data types 
journal functional programming april 
chuang 
randomized implementation multiple functional arrays 
proceedings acm conference lisp functional programming pages 
chuang benjamin goldberg 
real time deques turing machines purely functional programming 
proceedings conference functional programming languages computer architecture copenhagen pages 
richard cole alan siegel 
river routing way loose 
proceedings th annual ieee symposium foundations computer science pages 
paul dietz 
fully persistent arrays 
proceedings workshop algorithms data structures volume lncs pages 
springerverlag 
edsger 
discipline programming 
prentice hall englewood cliffs new jersey 
james driscoll neil daniel sleator robert tarjan 
making data structures persistent 
journal computer system sciences february 
greg frederickson 
planar graph decomposition pairs shortest paths 
journal acm january 
robert tarjan 
deques heap order 
information processing letters april 
robert hood 
efficient implementation level programming language constructs 
phd thesis department computer science cornell university 
robert hood robert melville 
real time queue operations pure lisp 
information processing letters november 
rob 
logarithmic implementation flexible arrays 
proceedings second international conference mathematics program construction oxford volume lncs pages 
springer verlag 
haim kaplan robert tarjan 
persistent lists catenation recursive slow 
proceedings th annual acm symposium theory computing pages 
rao kosaraju 
localized search sorted lists 
th annual acm symposium theory computing pages 
henry lieberman carl hewitt 
real time garbage collector lifetimes objects 
communications acm june 
robin milner mads tofte robert harper 
definition standard ml 
mit press cambridge massachusetts 
eugene myers 
applicative random access stack 
information processing letters december 
eugene myers 
efficient applicative data types 
conference record eleventh annual acm symposium principles programming languages pages 
martin odersky 
destructive updates destructive 
th annual acm symposium principles programming languages pages 
chris okasaki 
simple efficient purely functional queues deques 
journal functional programming october 
appear 
laurence paulson 
ml working programmer 
cambridge university press cambridge 
simon peyton jones philip wadler 
imperative functional programming 
th annual acm symposium principles programming languages pages 
sastry william clinger ariola 
order evaluation analysis destructive updates strict functional languages flat aggregates 
proceedings conference functional programming languages computer architecture copenhagen pages 
david schmidt 
detecting global variables denotational specifications 
acm transactions programming languages systems april 
zhong shao john reppy andrew appel 
unrolling lists 
proceedings acm conference lisp functional programming pages 

avl trees localized search 
information control october 
jean vuillemin 
data structure manipulating priority queues 
communications acm april 
philip wadler 
views way pattern matching cohabit data abstraction 
conference record th annual acm symposium principles programming languages pages 
philip wadler 
linear types change world 
proceedings ifip tc working conference programming concepts methods pages 
