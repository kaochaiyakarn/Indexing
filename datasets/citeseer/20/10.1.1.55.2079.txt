adaptive wait free algorithms lattice agreement renaming extended attiya arie department computer science technion haifa israel considers wait free algorithms complexity constant absence contention grows gradually number active processes increases 
algorithm fast complexity depends maximal number active processes total number processes system algorithm adaptive complexity depends actual number active processes unknown advance may change different executions algorithm 
shown important decision problems lattice agreement renaming linear name space adaptive solutions read write operations 
log adaptive algorithm lattice agreement log adaptive algorithm gamma renaming 
algorithms constructed interesting right log fast algorithm gamma renaming 
algorithm gamma renaming size initial name space 
algorithm lattice agreement uses dynamic single reader single writer registers 
algorithm yields implementation atomic snapshots dynamic multi reader single writer registers 
full version available www cs technion ac il 
real multiprocessor systems time small subset processes participate algorithm 
algorithm fast step complexity depends maximal number active processes total number processes cf 
moir anderson 
fast algorithms provide performance cases advantage quite restricted general situations 
main shortcoming fast algorithms rely priori knowledge maximal number active processes 
difficult determine execution complexity fast algorithms optimal actual contention lower upper bound 
algorithm adaptive complexity depends actual number active processes need fixed advance may change different executions algorithm 
complexity adaptive algorithms constant absence contention grows gradually number active processes increases 
presents adaptive wait free algorithms solving renaming lattice agreement asynchronous shared memory systems read write operations 
time renaming problem process starts name range gamma required choose distinct name smaller range gamma 
solution renaming problem improve performance algorithms complexity depends size name space containing identifiers participating processes 
lattice agreement problem process starts element partially ordered lattice processes required decide nontrivial manner elements comparable lattice 
lattice agreement problem closely related problem implementing atomic snapshot objects wait free lattice agreement algorithm turned wait free implementation atomic snapshots additional read write operations 
presents algorithms adaptive log algorithm lattice agreement 
adaptive log algorithm time gamma renaming 
fast log algorithm time gamma renaming 
step complexity best existing fast algorithm gamma renaming 
size name space provided fast renaming algorithm optimal wait free renaming possible reads writes gamma 
size name space provided adaptive renaming algorithm optimal gamma linear number participating processes 
intermediate step time gamma renaming algorithm uses dynamic single writer registers 
result interesting best existing algorithm reduces size name space gamma step complexity nk 
linear renaming algorithm modified linear lattice agreement algorithm uses dynamic single reader single writer registers 
transformation gives implementation atomic snapshot dynamic multi reader single writer registers 
best previously known algorithms atomic snapshot log implementation multi reader registers implementation multi reader multi writer registers 
relations algorithms shown 
papers considered fast adaptive algorithms different decision problems shared objects 
moir anderson introduced notion fast solution renaming problem 
moir garay fast algorithm time renaming read write operations 
combining fast renaming algorithm gamma renaming algorithm algorithm gamma renaming gamma renaming algorithm log gamma renaming algorithm log algorithm la log union la log renaming log algorithm gamma renaming roadmap algorithms 
burns paterson moir garay obtain fast algorithm time gamma renaming 
singh adaptive solutions mutual exclusion problem read write operations 
algorithms adaptive respect amortized step complexity worst case step complexity algorithms may depend addition algorithms wait free 
afek introduced universal methods implementing adaptive long lived objects step complexity depends linearly actual number processes access object concurrently 
algorithms require strong load linked store conditional operations 
preliminaries assume standard asynchronous shared memory model atomic read write registers system consists processes distinct names range gamma 
process active execution ff takes steps ff 
consider executions processes active unknown advance may different different executions 
denote upper bound number active processes executions fixed known execution 
lattice agreement problem defined follows 
definition equivalent definition 
process starts fp required decide subset active processes called view 
numbering blocks grid numbering appears brackets 
conditions hold comparability self containment renaming problem defined follows 
processes initially unique name range gamma 
processes required chose distinct names range gamma adaptive log lattice agreement adaptive lattice agreement algorithm works follows 
processes reduce name space size depends adaptive renaming algorithm 
process estimates number participants new name rounded closest integral power process performs copy fast lattice agreement algorithm designed number participants copy denoted designed active processes 
views obtained copy merged union procedure 
describe component adaptive lattice agreement algorithm 
adaptive renaming algorithm uses grid splitters suggested moir anderson 
moir anderson number blocks rows left right hand number blocks diagonals see 
process starts algorithm executing splitter upper left corner grid 
result obtained splitter process moves right grid continues execution stops current splitter acquires name associated 
grid spreads processes process stops distinct splitter active processes process stops splitter gamma steps away top left corner grid 
numbers assign splitters distance gamma top left corner range gamma 
theorem theorem adaptive time renaming algorithm complexity 
procedure union proposed inoue chen 
procedure takes parameters view integer side returns view 
set processes call union parameter side say enter union entrance lemma states main property union lemma input parameters processes comparable views returned union comparable 
shown procedure union adaptive complexity js 
modification linear lattice agreement algorithm inoue chen 
assumed processes names range gamma execute algorithm 
adapt algorithm works correctly executed processes names range gamma 
note different copies initial name spaces different size 
complexity jk number active processes need known advance 
adaptive lattice agreement algorithm built components adaptive renaming blog copies union denoted union union 
blog copies denoted 
process starts acquiring new name adaptive renaming algorithm determines copy lattice agreement algorithm participate 
executing appropriate copy obtains view 
adaptive renaming union union union union 
adaptive lattice agreement algorithm 
algorithm adaptive lattice agreement 
procedure 
temp name adaptive renaming 
blog temp name 
temp name gamma 
union 
gamma union 
decide enters union entrance input parameter 
exit union connected entrance union gamma performs union gamma union entering entrance decides view obtained union presents scheme pseudocode appears algorithm 
active processes process obtains unique temp name range performs blog temp name th copy 
processes perform log kc 
accessed processes temporary name temporary names distinct accessed processes distinct names 
set views obtained processes completing satisfy properties lattice agreement problem log kc 
repeated application lemma prove properties lattice agreement hold union executed 
compute total step complexity algorithm 
line process performs adaptive renaming operations 
line process executes log kc requires kj log operations 
lines process performs log kc copies union copy requiring operations 
total step complexity algorithm log theorem theorem algorithm solves lattice agreement adaptive step complexity log 
algorithm gamma renaming algorithm network simple building blocks called reflectors 
reflector similar splitter entrances direction movement process defined information obtained reflector entrance process accesses reflector 
processes move network executing reflectors associated nodes pass 
reflector entrances lower exits upper exits process entering reflector entrance leaves reflector exits see top left corner 
informally process enters reflector entrance process leaves reflector lower exit 
algorithm uses network columns column contains gamma reflectors see 
process initial name name enters network upper reflector column name process descends reflectors column sees process reflector reaches lowest reflector column 
process moves column gamma 
column column process executes exactly reflector 
network leaves reflector upper exit column executes reflector 
leaves reflector trough lower exit column executes reflector gamma 
shall see process leaves network different row row numbers provide distinct names range size gamma 
simple implementation reflector associates bit registers entrances respectively 
initially false 
process entering reflector entrance writes true register reads register gammai false process goes goes 
clearly complexity reflector 
pseudocode appears algorithm 
splitter reflector identified identified splitter 
network reflectors gamma renaming 
suppose enters reflector input process enters reflector input gammai process writes gammai reads false gammai leaves reflector lower exit lemma lemma single process accesses reflector leaves lower exit 
similar type arguments prove lemma lemma single process enters reflector single process enters reflector process leaves reflector lower exit 
gamma set processes start columns process row value local variable row accesses reflector column 
algorithm gamma renaming 
procedure net name gamma initially col name row name 
descend column name 
exit reflector row col 
exit col 
exit 
row gamma gamma 
row col reached lowest reflector 
col move column gamma 
exit reflector row col 
exit col row 
col row gamma gamma exit 
decide row procedure reflector entrance 
write true 
gammai false exit 
exit 
return exit lemma column gamma pair processes row row proof proof induction column base case lemma trivially holds process may access reflector column 
induction step suppose lemma true column show lemma holds column 
process starts column algorithm reflector column accessed entrance lemma process leaves column exit algorithm row row gamma lemma follows inductive hypothesis 
suppose process name starts column 
reflector accessed column 
means leaves reflectors column exit access reflectors gamma gamma gamma 
lemma process enters column row higher exits column interaction processes column 
algorithm row row lemma process enters column row gamma lower exits column consequently row row gamma gamma consider process algorithm may leave column exit lowest reflector column gamma exit reflector gamma 
leaves reflector gamma algorithm row gamma gamma gamma process accesses gamma lemma leaves gamma exit row gamma leaves reflector gamma algorithm row lemma process executes row 
algorithm row ae gamma leaves inductive hypothesis equations imply pair processes row row 
register reflector written process entering reflector entrance reflector column entrance accessed unique process starts column entrance accessed process lemma 
implement network dynamic single reader single writer registers 
lemma shows column network processes leave column lowest js gamma rows 
proof similar proof previous lemma 
lemma gamma process gamma row gamma js gamma lemma gamma implies names acquired processes distinct 
lemma gamma implies process leaving network gamman row gamma gamman js gamma gamma js gamma names chosen line range gamma 
process accesses delta name reflectors column name exactly reflector column name gamma 
reflector executed constant number operations step complexity algorithm 
theorem algorithm solves time gamma renaming read write operations dynamic single reader single writer registers 
network consists reflectors reflector implemented dynamic multi writer registers size bit algorithm requires bits 
fast log algorithm gamma renaming fast log algorithm gamma renaming works stages stage processes acquire new names range gamma adaptive renaming algorithm described section 
second stage processes reduce size name space gamma recursively algorithm gamma renaming algorithm 
renaming net net net net net net net fast gamma renaming algorithm 
processes start algorithm gamma renaming immediately acquiring new names gamma step complexity algorithm 
achieve step complexity log gradually reduce size name space performing logk iterations 
algorithm uses complete binary tree height dlog gamma 
vertex tree associate distinct copy algorithm denoted net 
copy designed initial name space size gamma network net gamma columns 
note maximal number active processes known advance 
vertices tree numbered recursively follows root numbered vertex numbered left son numbered right son numbered 
process starts acquiring temporary name performing gamma renaming 
temporary name determines leaf tree starts climb root 
vertex path leaf root performs net 
see 
number column starts net determined temporary name obtained previous vertex left subtree starts gamma columns network starts gamma columns 
output algorithm temporary name obtained root 
pseudocode appears algorithm 
full version prove induction height vertex lemma vertex processes executing net acquire distinct temporary names gamma 
lemma processes complete net algorithm fast gamma renaming 
procedure 
temp name adaptive renaming 
name height tree 
side temp name mod 
temp name 

temp name net temp name side delta gamma 
side mod 
bv 
decide temp name root acquire distinct names gamma 
process performs procedure net dlog vertices tree 
construction network vertex gamma columns 
theorem lemma theorem algorithm solves gamma renaming fast step complexity log multi writer registers 
adaptive log algorithm renaming linear name space section combine adaptive lattice agreement algorithm algorithm fast gamma renaming algorithm algorithm obtain adaptive renaming name space size gamma 
processes obtain comparable views adaptive lattice agreement 
processes partitioned disjoint sets size views belongs set size view gamma 
partition guarantees dlog ne js number active processes dlog ke js 
algorithm uses dlog ne copies fast gamma renaming algorithm algorithm denoted dlog ne copy designed executed processes capacity hard coded algorithm 
processes belong perform acquire new names name space size js gamma 
name spaces dlog ne overlap size final name space active processes linear see 
js gamma fast gamma renaming 
adaptive lattice agreement adaptive gamma renaming 
algorithm adaptive gamma renaming 


dlog 
temp name 
decide temp name 
decide temp name pseudocode appears algorithm 
renaming algorithm similar adaptive lattice agreement described section important differences 
adaptive lattice agreement algorithm algorithm active processes partitioned subsets names obtained renaming 
adaptive renaming algorithm processes partitioned sizes local views execution lattice agreement 
gives tighter lower bound number processes access copy fast algorithm copy accessed number active processes half procedure capacity term complexity expression substituted theta 
second lattice agreement algorithm adaptive unifying procedure union merge partial solutions subset form correct solution respect set processes 
unfortunately able find adaptive analog union gamma renaming problem 
choose non overlapping name spaces instances form name space size gamma 
lemma views processes set satisfy comparability self containment properties lattice agreement maximal size view jsj properties lattice agreement lemma algorithm lemma lemma active processes js dlog ke js dlog ke 
lemma number processes access exceed capacity theorem process accessing acquires temp name range delta gamma 
algorithm decides temp name gamma 
namespace set names obtained processes performing lemma lemma dlog ne namespace namespace 
dlog ne namespace delta gamma 
lemma theorem lemma lemma active processes decide distinct names range dlog ke gamma 
theorem follows lemma lemma 
theorem algorithm solves gamma renaming adaptive complexity log 
upper bound size name space gamma tight algorithm 
assume processes executing lattice agreement obtain maximal view size access dlog ke processes leave range dlog ke gamma unused determine previous copies empty decide names dlog ke dlog ke gamma 
integral power size final name space log gamma gamma 
size name space log gamma gamma 
research leaves avenues research 
adaptive algorithm renaming linear name space composed sequence algorithms lattice agreement renaming larger names space 
interesting find direct algorithm simplifying possibly improving constant factors 
room reducing complexities algorithms number steps number size registers 
interesting direction research find adaptive algorithms going problems example long lived renaming 
case better find adaptive algorithms dynamically adapt number processes currently active algorithm 
algorithms afek singh property operations stronger reads writes wait free 
possible directions may lead creation adaptive algorithms going problems development procedure dynamic estimation number active processes 
procedure processes partitioned dynamic sets fixed maximal size 
subset processes perform existing fast going algorithms example fast long lived renaming 
possibility develop adaptive analog fast long lived splitter moir garay 
adaptive long lived splitter immediately lead adaptive algorithms long lived collect renaming constructions similar 
afek attiya dolev gafni merritt shavit 
atomic snapshots shared memory 
acm sept 
afek 
wait free fast 
proceedings th annual symposium theory computing pages 
attiya bar noy dolev peleg reischuk 
renaming asynchronous environment 
acm july 
attiya 
adaptive wait free algorithms lattice agreement renaming 
technical report cs computer science dept technion apr 
attiya herlihy 
atomic snapshots lattice agreement 
distributed computing 
attiya 
atomic snapshots log operations 
th annual acm symposium principles distributed computing pages 
burns peterson 
ambiguity choosing 
proceedings th annual symposium principles distributed computing pages 
singh 
adaptive solutions mutual exclusion problem 
proceedings twelth annual acm symposium principles distributed computing pages 
herlihy 
wait free synchronization 
acm transactions programming languages systems jan 
herlihy shavit 
asynchronous computability theorem resilient tasks 
proceedings fifth annual acm symposium theory computing pages san diego california may 
inoue chen 
linear time snapshot multi reader registers 
international workshop distributed algorithms springer verlag 
moir anderson 
wait free algorithms fast long lived renaming 
science computer programming oct 
moir garay 
fast long lived renaming improved simplified 
proceedings th annual acm symposium principles distributed computing pages 
linear atomic snapshot dynamic single reader single writer registers outline linear algorithm lattice agreement dynamic single reader single writer registers 
applying transformation get implementation atomic snapshot object dynamic multi reader single writer registers 
algorithm reflector linear lattice agreement 
procedure reflector view entrance 
write 
gammai exit 

gammai 
exit 
return hv algorithm fast adaptive simple modification algorithm shows interesting connection renaming lattice agreement 
algorithm uses network reflectors algorithm shown 
modified algorithm reflectors additional function direct processes movements help collect views 
guaranteed views processes leaving network satisfy properties lattice agreement 
new implementation reflector uses bit registers intended contain views 
previously registers contained true false 
initially register contains empty view 
process entering reflector entrance writes local view register reads register gammai local view process change process goes process joins view written gammai local view goes 
pseudocode modified reflector appears algorithm 
algorithm controls processes movements network remains exactly algorithm 
processes leaving network decide local views row numbers renaming algorithm 
lemma modification lemma 
difference related value local view execution reflector 
algorithm local view process reads gammai change 
lemma single process enters reflector leaves reflector lower exit 
proof lemma similar proof lemma 
additions related local views follow immediately algorithm 
lemma single process enters reflector single process enters reflector processes leaves reflector lower exit fp goes fp goes 
lemma shows local views processes exiting column comparable 
recall set processes start execution columns proof similar proof lemma 
lemma column gamma pair processes row row 
lemma gamma implies local views processes leave network comparable 
fp initially local view decreases self containment property 
step complexity algorithm calculated theorem 
network contains reflectors reflector uses bounded dynamic single reader single writer registers 
proves theorem theorem algorithm solves lattice agreement problem step complexity dynamic single reader single writer registers length initial name space gamma complexity algorithm 
applying transformation requires additional operations multi reader single writer registers get result theorem implementation atomic snapshot object operation object requires read write operations dynamic multi reader single writer registers 
implementation uses registers length 
