object calculus asynchronous communication kohei honda mario tokoro department computer science keio university ku yokohama japan presents formal system notion objects asynchronous communication 
built milner calculus communication primitive formal system purely asynchronous unique various concurrency formalisms 
computationally results consistent reduction milner calculus retaining expressive power 
seen semantically asynchronous communication induces surprisingly different framework bisimulation strictly general synchronous counterpart 
shows basic construction formal system illustrative examples 
formal system introduced intended accomplish purposes 
provides simple rigorous formalism encapsulates essential features concurrent object orientation 
successful programming methodology dynamic concurrent computing theoretical contents far understood leaving theorists practitioners core theory reason develop ideas 
second offers possible foundation concurrency theory quite different usual sense formalism purely asynchronous communication computationally semantically 
usual observation equivalence theory processes asynchronous bisimulation objects asynchronous experiments induces somewhat general semantic framework 
appeared proc 
fifth european conference object oriented programming lncs july springer verlag 
revised august 
sony computer science laboratory ku tokyo japan important works appeared context including 
formalism series studies port passing process calculus called calculus initiated nielsen engberg reformulated milner colleagues developed crucial way milner 
especially essential construction due separation structural rules transition rules distinction computational transition semantic transition 
interesting thing capability generate pass communication ports turns essential object orientation obvious control causality chains face pure asynchrony 
reminds studies actor model computation hewitt colleagues 
readers may refer authors conceptual framework open distributed computing environments understand general orientation different context 
provides basic concepts definitions formal system illustrative examples leaving full presentation theoretical results coming exposition 
section defines basic syntax constructs formal system 
section introduces reduction relation defines basic computational mechanism combination structural rules 
section provides important primitive constructs system shows encode fragment calculus superset formalism 
section reviews general semantic framework asynchronous bisimulation giving basic definitions examples 
object orientation semantic framework discussed 
section concludes 
syntax bindings section briefly summarizes basic idea formalism provides definitions syntax bindings 
basic framework formalism notions objects communication captured way 
ffl object collection receptors pending messages 
receptor handle input port carrier formal parameter head consumes message receive value carrier carries value body 
body generates zero receptors zero messages 
original receptor just disappears 
notationally expressed ax handle carrier body 
receptors object may operate concurrently asynchronously 
ffl message simple data structure carries piece information target 
target value supposed port name value considered names ports 
notation message av target value 
generated messages may go output messages may consumed receptors causing internal configuration change may just pending object 
computational implication framework message consumed receptor target handle receptor av consumed ax bx existence multiple receptors object implies object may multiple input ports possibly duplicate names 
port names values considered sent messages consumed receptors 
configuration generate new port names extends domain computation 
syntax syntactically formal system reduces extends constructs process calculi incorporate asynchronous communication 
key idea express asynchronous messages output processes subsequent behaviour 
av process outputs port reduced av message target value 
section see reduction result loss expressive power 
syntactic definitions port names messages receptors including recursively defined ones general configurations called term expressions 
term variables necessary recursively defined receptors 
right hand side definition give formal designation syntactic constructs 
definition sets port names sequences port names term variables term expressions syntax 
port names sequences names term variables nn message nn receptor fv nn cg recursively defined receptor term variable parameters scope restriction concurrent composition null term important conventions obey 
conventions conventions notation designation 
non capital alphabets range set port names 
call port names simply names 
assume different alphabets denote different port names specified 
ii range 
iii range 
iv 

range called configurations 
specifically ranges subsort form nn 
denote incomplete expressions 
vi assume constructor weakest association precedence 
vii av call target value 
ax call portion ax head body 
body expression guarded head part 
head called handle descriptively input port carrier 
fv yz cg called parameter parts preceding sections main parts 
say parameter conventions explain constructors intuitive meaning follows 
examples meaning constructors 
av message target value 
note port names 
ii ax ax receptor handle consumes message creates dies 
note occurrence binds second 
iii fx xy xy receptor handle consumes message creates 
note occurrence instantiated binds occurrences 
iv ax av receptors message 
left receptor may consume message 
ax jvj cv av occurrences third denote different port names declared private restricted third scope 
restricted names meant different values outside scope syntactically 
free bound names substitution gives definitions bound free names substitutions 
definition free bound names substitution 
ax free bound free occurrences bound carrier av free 
bound free occurrences bound jvj 
fx cg names free names binds occurrences 
ii similarly fx cg define free occurrences say occurrences bound top 
deal cases term variables occur free top configuration 
assume length sequence parameter bound term variable correspond parameter term variable binds 
iii set names fn resp 
bn set free resp 
bound names hn denotes set names handles receptors subexpressions 
iv assume expression fx cg fn ae xg pair names pairwise distinct 
denotes result inductively substituting free occurrences standard convention name collision cf 

vi inductively define ff convertibility terms starting ax ff convertible ay free similarly ff convertible jyj condition 
assume stronger constructor def jxj 
give examples substitutions 
examples examples substitutions 
xv av 
ii jvj xv jwj vw 
perform ff conversion substitution 
remember restricted port names denote values different outside scope 
ready define syntactic equivalence relation called structural equivalence reduction computation rule formal system 
structural equivalence reduction structural equivalence port passing calculi transition rules quite complicated intricate interaction port passing concept scoping rules 
milner congruence relation syntactic terms modulo transition rules defined results surprisingly compact tractable formulation 
idea incorporate structural rules tacit basic semantics various constructors freeing transition rules expressing static features laboriously concentrate truly significant aspects computational semantic properties target system 
formulation structural rules generally somewhat weakened computational aspects explicit 
notable facts equation applied guarded expressions body receptors congruence relation relation induced ii iii vi ix finite term 
definition structural equivalence denoted smallest equivalence relation terms defined inspired chemical machine 
likened separation structural rules natural deduction treatment ff conversion 
ff convertible ii iii iv jxj vi jxj fn vii viii fx pg fx pg ix viii fx pg denotes syntactic substitution term variables recursive structure note rule ii soundly write parentheses 
similarly write rule iii 
examples application structural equivalence helpful understanding 
examples examples structural equivalence 
please note multiple equations step transitivity 
definition def fx xy xy appears iii examples rule viii ay ay ii message freely move change place concurrent composition due rule vii 
ax av ax av av ax iii abstractly states restricted name functions globally distinct name 
ax xv jvj av ax xv jzj az jzj ax xv az reduction define reduction computation terms 
intuitive idea communication event occurs message receptor target corresponding handle meet way computation configuration proceed far consider interaction outside 
condition stated definition iv problem name collision occurs 
definition reduction terms denoted gamma smallest relation terms inferred com av ax gamma 
par gamma gamma 
res gamma gamma struct jp gamma jp gamma reduction rules structural rules state basic mechanism computation formal system 
give descriptive examples reduction terms 
examples examples reductions 
simple reduction 
ax cx cy av av ax cx cy gamma 
cv cy gamma 
ii defined iii examples av av ax ax gamma 
av gamma 
av gamma 

functions 
iii vi examples jvj av ax xv jzj az ax xv gamma 
jzj zv shows scope opening ff conversion induces computation face restriction name collision 
regard functionality structural equivalence relationship reduction relation structural equivalence somewhat weak comparison structural congruence induce reduction relation 
denote stronger equivalence delta formulated corresponding reduction rule delta gamma delta gamma 
gamma 
delta gamma 
means reflexive transitive closure relation 
omit rules iv get result 
detailed study formulation structural rules combination reduction transition rules required 
expressing causality section introduces important concepts constructing causal chains purely asynchronous formal system 
sequentialization selection 
way various primitive constructs general computation expressed formal system 
sequentialization formal system characterized lack sequential constructors inevitable value passing resulting term generation 
see realized chain communication events sequentialization value passing case 
definition notations sequentialization 
suppose term expression 
define sequential connectives delta type theta type theta theta follows 
ax delta def ax deltav def ax xv ax delta ax def axy def ax xy ax connectives define expressions 
definition notations communication series names 
define follows 
suppose free respectively 
def jcj ac cx delta def az jrj zr examples sequentialization communication 
condition fn fv jcj ac cx deltav az jrj gamma 
cx deltav cry gamma 
rv cx deltav ry cry gamma 
cx deltav cry gamma 
rv ry gamma 
values passed respectively preserving order 
communication place solely private ports interference third party possible reduction 
sense functioning private communication channels length easy verify 
gamma 
example uses sequentialization features nontrivially showing mapping formal system superset calculus 
examples encoding extended calculus 
replace expressions av fx cg av respectively assume structural rule reduction rule av gamma 
mapping expressions extended system reduced system written delta follows 
av jcj vc ax xy jcj fx fn jxj key idea coding receiver message send activation message reply sender subsequent behaviour sender coded receptor active 
verify correctness mapping done saying reduction world superset expressions corresponding reduction exist coding term coding reduces reduction corresponds reduction domain superset 
selections advanced way constructing causal chain achieved selections 
especially important formal system summation 
deal binary selection extended ease 
constraint essential little change definition results capability coping cases lengths different new port generation 
definition notations selection 
suppose term expressions 
define connectives selection type theta type theta follows 
delta def def idea selectively send message generate term second send options wait activation 
safely connectives rely new port name generation 
encoding natural numbers successor function 
examples natural numbers successor function 
def fx delta def jpj fx xz delta xz np def nc jzj fx xn delta xp cz note natural number expressed object knows predecessor contrast expression natural number function calculus 
defined recursively necessary handle passed users 
successor stands customer target reply 
predecessor judgment zero decode data structures formal parameter necessary omit 
examples predecessor judge zero functions 
def nc jy def nc jy true false expressed respectively 
example shows advanced branching structures 
examples parallel 
def bp jy def js combination conditional expressions easily construct sequential omit 
parallel uses method similar nierstrasz synchronizer invoke action multiple candidates 
method directly usable realize parallel case construct 
primitives selection method invocation usual object orientation 
proved construct computable functions natural numbers combination constructs encoded recursively defined receptors 
show simple stateful entity called cell 
primitive possesses typical properties concurrent objects know 
option read option write 
contains port name state 
gets option representing decodes take action accordingly 
value write option read just neglected 
note change state option 
examples cell 
lv def fx xy jy xy xw lv small concurrent object concludes section proceed see bit semantic framework formalism 
semantics section gives basic definitions semantic framework asynchronous interaction discusses notable theoretical properties informally 
asynchronous interaction semantic framework notion observation asynchronous experiments 
means experimenter just sends asynchronous messages concerned system possibly continuing send messages wait output messages configuration 
matter message experimenter sends consumed receptors configuration 
notion asynchronous interaction formal representation labeled transition system 
shows set labels labeled transition system 
definition labels 
sets labels interaction series syntax 
nn nn labels intuitive meanings 
denotes internal computation unseen outside thing reduction definition 
av means configuration asynchronously gets message av outside 
seen differently rule tells experimenter sends message configuration 
av means configuration asynchronously emits message experimenter receives message 
means sending value name restricted inside configuration corresponding scope opening structural rules definition vi 
experimenter means acquires piece new information 
conventions notation 
range ii denote fn set port names case fn fag 
similarly bn oe bn fvg 
union 
definitions conventions define interaction relation follows 
triple written gamma 
definition interaction terms denoted gamma smallest relation inferred av gamma 
av av av gamma 
com av ax gamma 
par gamma gamma 
bn fn res gamma gamma open ax gamma gamma struct jp gamma jp gamma intuitively rules define behaviour configuration terms interaction outside asynchronous exchange messages 
regard essential rule directly related asynchronous character semantics rule 
rule differentiates semantic definition milner results surprisingly different semantic properties 
purpose comparison stipulate synchronous counterpart semantics reformulated version milner 
definition synchronous interaction terms denoted gamma 
smallest relation inferred rules definition gamma 
replaced gamma 
rule reformulated ax av gamma 
remarks definition due 
rule clearly shows gamma 
gamma 
note symmetry rules definition 
destroyed rule 
note corresponding forms calculus enjoy symmetry 
implies naturalness synchronous semantics calculus asynchronous system 
interesting aspect interaction rules lies open rule denotes configuration emits private label outside regarded free public 
reminds agha notion adding communication outside context actor model 
may extraordinary rule definition message come configuration regardless forms inner receptors 
perfectly consistent intuitive notion asynchronous experiments 
experimenter synchronously interacting configuration means corresponding input output port names may send message likes 
result difficulties proving various semantic properties far know 
asynchronous bisimulation noted experimenter point view rule states experimenter sends message concerned configuration rule states receives message configuration 
milner notion experiments cf 
setting asynchronous communication 
define weak bisimulation observation equivalence semantic representation new notion experiments 
simulation preorder regarded somewhat fundamental equivalence elementary exposition confine bisimulation 
definition asynchronous bisimulation 
define gamma 
gamma 
gamma 
gamma 
asynchronously bisimilar denoted gamma 

ii symmetric 
comparison define synchronous counterpart 
definition synchronous bisimulation 
define gamma 
gamma 
gamma 
gamma 
synchronously bisimilar denoted gamma 

ii symmetric 
note definition simpler corresponding needs additional condition equivalence substitution names 
may come formulation rule shown 
ax ax gamma 
rule means received name free names discuss point pointing reduction interaction allowed formal system corresponding form calculus 
hope provide argument formulation rule 
av ax xc vy gamma 
vc vy examples helpful understand asynchronous bisimulation works 
examples asynchronous bisimulation 
replication 
assume new notation cf 
examples 
def jcj fx fn holds 
verify take relation arbitrary term expressions 
example hold 
ii successor function 
notation examples zc jxj cx check just compute 
see hold 
iii permutation input 
follows 
def ax def ax obviously holds differentiated av gamma 
av ax gamma 
av gamma 
av ax av ax av gamma 
ax please note difference comes message comes just goes possible get consumed transition examples show difference bisimulations 
order sending messages generally matter asynchronous communication example may promising 
def jlj lz lz av jmj mz mz bw def jlj lz lz bw jmj mz mz av expected providing interesting comparison expressions calculus example distinguish holds 
case differentiate equivalence theories 
example shows case exist 
examples asynchronous bisimulation 
remember expression section example iii example ii 
special agent holds verify relation zero messages bound names 
firstly av gamma 
av clearly av gamma 
av av av similarly verify case av gamma 
shows transition relation formulated definition lacks notion locality 
ii gamma 
possibility av av gamma 
av obviously case holds 
symmetric case holds trivially gamma bisimulation just def argument holds 
example notable respects 
ae proof difficult example shows inclusion strict 
fact congruence relation system proofs long 
example shows term term bisimilar added deleted configuration arbitrarily changing meaning 
fact method construct adding appropriate configurations 
suggests exact range difference difference important suggests asynchronous interaction relation gamma synchronous gamma 
sense care order consecutive inputs consecutive outputs 
deal collections exact multisets messages sequences 
gives rise elegant mathematical treatment asynchronous interaction semantics property directly reflected equivalence theory add certain locality notion 
ax ax cf 
example iii 
leave details subsequent exposition published near 
seen far formal system notion pure asynchronous communication constructed full expressive power important semantic properties 
investigation concurrency formalism asynchronous communication just begun problems solved 
study asynchronous interaction semantics relationship objects notion important points pointed 
study construction reduction performed exposition applied ccs process calculi formalisms 
especially study results obtain higher order process calculi passes processes 
important possibility formal construction pragmatic context may exist sound formulation notion types concurrent objectbased computing 
interesting direction nierstrasz 
hope study asynchronous semantics provide suggestions typed programming concurrent objects 
authors carl hewitt stayed keio university autumn summer beneficial discussions professor joseph goguen suggestions vasco discussions comments discussions concurrency yoshida stimulating mails members kind assistance 
agha actors model concurrent computation distributed systems 
mit press 
lambda calculus syntax semantics 
north holland 
berry boudol chemical machine 
proc 
annual symposium principles programming languages 
boudol lambda calculus concurrent communicating systems 
proc 
tapsoft lncs springer verlag 
clinger foundations actor semantics 
ai tr mit artificial intelligence laboratory 
goguen sheaf semantics concurrent interacting objects 
appear proc 
rex school foundations object oriented programming netherlands may june 
hewitt viewing control structures patterns passing messages 
artificial intelligence 
hewitt bishop steiger universal modular actor formalism artificial intelligence 
proc 
rd international joint conference artificial intelligence august 
hoare sequential processes 
prentice hall 
honda tokoro object calculus asynchronous communication proc 
european conference object oriented programming lncs springer verlag july 
honda tokoro asynchronous communication semantics object concurrent computing ed 
tokoro lncs springer verlag 
meseguer conditional rewriting logic unified model concurrency 
sri csl computer science laboratory sri international 
appear theoretical computer science 
milner calculus communicating systems 
lncs springer verlag 
milner calculi synchrony asynchrony 
theoretical computer science 
milner parrow walker calculus mobile processes 
part ii 
ecs lfcs edinburgh university milner communication concurrency 
prentice hall 
milner functions processes 
automata language programming lncs 
extended version title de recherche inria sophia antipolis february 
nielson engberg calculus communicating systems label passing 
research report daimi pb computer science department university aarhus 
nierstrasz type theory active objects 

nierstrasz guide specifying concurrent behaviour abacus 

thomsen calculus higher order communicating systems 
proc 
annual symposium principles programming languages 
tokoro computational field model new computing model methodology open distributed environment 
proc 
nd ieee workshop trends distributed computing systems cairo 
tokoro honda computational field model open distributed environment 
appear yonezawa mccoll ito ed concurrency theory language architecture lncs springer verlag 
tokoro computing systems 
lncs springer verlag 
title filled tsichritzis 
ed 
object management 
centre universitaire informatique universite de july 
yonezawa tokoro ed 
object oriented concurrent programming 
mit press 
