agent pattern design pattern dynamic distributed applications alberto silva jos delgado alberto silva jose delgado inesc pt inesc ist technical university lisbon rua alves lisboa portugal presents agent pattern design pattern useful develop dynamic distributed applications 
agent pattern provides clean easy way develop agent applications mainly open large scale distributed environments internet application areas electronic commerce 
agent pattern encapsulates business specific class specialization agent class user identification specific security policy providing distribution security persistence transparency 
furthermore presents detailed application pattern agentspace framework brief application telescript aglets workbench 
intent define autonomous active objects easily build dynamic distributed applications 
active objects called agents autonomous execute specific tasks behalf users 
scope motivation understandable agent definition due wooldridge jennings wj discussed agents basic notions weak strong :10.1.1.119.2204
strong notion involves artificial intelligent techniques models characterize agents notions knowledge beliefs intentions obligations emotional attributes 
tentative agent definition discussed agent pattern focuses weak notion autonomy sociability reactivity mobility important characteristics 
additionally important state focus proposed agent pattern architectural oriented application oriented 
means focus low level issues synchronization thread management communication security handling persistence 
hand focus approaches ai field knowledge representation cooperation collaboration definition models agent communication heterogeneous high level scale aspect clarified relationship agent support systems object request brokers orb corba implementations rmi dcom 
systems similarities intend support distributed applications 
provide framework develop applications mainly agent paradigm orbs object oriented paradigm 
agent scale active object 
opinion main difference types systems better discussed basic vectors flexibility specificity 
designed implemented support specifically restricted number application families 
hand orbs flexible application family independent consequently low level support 
expect development generation developed top kind orb contrary true 
motivation consider electronic commerce application vast open environment internet basic entities buyer salesman broker 
agentbased approach users interact agents delegate specific tasks 
agents interact order perform respective tasks 
shows scheme interaction agents agents users 
book buyer agent human machine interactions agent interactions agent broker agent buyer salesman broker manager global view agent application 
example user buy book interact agent order give specific information 
instance book related information title author names maximum supported price initial minimum price start eventual negotiation address public broker 
subsequent actions accessing interacting broker obtaining addresses relevant agents accessing eventually negotiating agent deciding buy buying book executed indirectly respective agent 
eventually users monitor current execution state agents 
shows uml rat scenario diagram corresponding described operation 
buyer user buyer agent broker agent agent bs element bs buying operation agent application scenario diagram 
suggested example agents may viewed new interface paradigm help enduser accessing new class internet applications including electronic commerce applications 
world users change way interact computer direct manipulation word processors web browsers indirect management web information search 
agents users delegate set tasks done agents 
new paradigm especially attractive help users complex tedious repetitive tasks open dynamic vast unstructured information sources internet 
define agent application aba short dynamic potentially large scale distributed application open heterogeneous context internet 
basic conceptual unit designing building agent defined 
notion aba quite novel 
aba typical application owned managed person organization 
aba best understood web agents owned managed number entities different possibly conflicting goals attitudes hosted different computing platforms workstations mobile phones 
number characteristics requirements dealt independently past 
interaction poses problems 
autonomous heterogeneous open dynamic robust secure 
characteristics potentially difficult implement 
believe agent support systems particular agentspace see section help developers build manage 
applicability agent pattern wants define autonomous active objects supported framework 
clients able ignore low level details distribution security aspects instance obtain agents interact agents transparently 
develop manage dynamic distributed applications easy way 
structure participants shows agent pattern represented uml rat collaboration diagram main participants involved collaborations 
agent client user owner view security view agent agent place generic structure agent pattern collaboration diagram 
shows generic static structure corresponding previous depicted collaboration diagram 
agent agent component client user user owner security view place view generic structure agent pattern class diagram 
main participants pattern client manipulates agents 
clients agents objects instance java applets 
adaptation proxy ghjv remote proxy bm patterns 
pattern suitable support transparent secure access different types objects 
aim provide transparent access agents 
access done indirectly proxies order protect hide transparently current localization important due mobility characteristic 
additionally avoids need create manage remote virtual classes stubs skeletons rmi corba implementations 
examples operations provided protected agent proxies sendmessage start moveto user user identified unique identity contains name public key set certificates organization country belongs mail 
spite attributes name unique mandatory field requirement obviously application specific 
user different identifiers depending context belongs 
specific identity managed agent server context represented user class contains addition fields mentioned authentication attributes login password 
agent owner necessarily associated user identity represented user instance 
different users corresponding instance see access agent 
depending agent security manager access allowed see 
agent agent class visible extensible part agent pattern 
basically programmers derive agent class order build concrete classes 
agent class main groups methods public final callbacks helper methods depicted 
agent helper methods client final methods callbacks final methods agent component final methods callbacks agent main groups methods 
final methods pre defined operations provided agent classes changed programmer 
examples final methods moveto save die clone sendmessage hand callbacks methods customized specific agent classes usually invoked transparently result event 
events action started agent related entity agent user applet time service callback mechanism provides desired extensibility agent pattern 
examples callbacks run agent classes helper methods generally private protected access modifiers order support specific functions class object 
methods internally callback methods 
examples agent instance provides transparently services persistence communication mobility naming access control 
additionally agent instance keep related information current native place identities security policy object concrete agent identity owner identity involved security manager group threads involved 
concrete agent classes agent subclasses 
basically define helper methods specialized callbacks implements agent specific functionality 
class specifies agent access security policy 
agent instance controls operations available agent component instance 
class specifies agent computational environment corresponds place created currently resident 
class offers specific functions provided involved agent support system 
shows example uml object diagram agent pattern run time 
just agent component corresponding ca object client components objects interacting 
shows involved agent client objects associated different users respectively owner 
additionally locality component relevant aspect handled transparently class course involved ass 
client av agent ca sm av user owner user client place client component client component agent component application example agent pattern object diagram 
collaborations clients call standard agent operations instance 
depending agent security policy involved user operation executed related agent instance 
final methods basically executed agent instance 
hand callbacks resulting execution final methods moveto die sendmessage executed concrete agent instance 
lastly helper methods may invoked execution callbacks 
shows uml collaboration scenario agent pattern 
av agent agent sm access client generic interaction agent pattern scenario diagram 
consequences agent pattern introduces benefits designing building agent applications mainly open dynamic distributed contexts internet 
time adoption raises challenges difficulties 
benefits easy development dynamic distributed applications programmers don manipulate remote accesses objects classes stubs skeletons sun rmi virtual objects objectspace voyager 
just need know query dynamically agent identity agent class interface set messages public methods 
simple integration definition management users user management handled implicitly system agent place necessarily identified owner users access interact agent directly specific applet indirectly agent 
flexible definition agent security policy agent security policy agent owner definition statically coupled agent class definition 
association just performed dynamically agent creation time 
fact implies instances agent class different security policies different owners 
problems challenges users indirect human machine interaction delegation paradigm 
security privacy open distributed contexts 
requires applications novel business models 
requires existence agent support system framework 
requires existence generic clients monitor manage current execution state agents 
implementation architectural issues agent pattern requires agent support system involves architectural issues identifiers identify related resources agent support system places agents agent programming languages languages programmers develop agent classes agent communication languages languages agents communicate open independent standard languages kqml idl xml edi application structures specifications security access control open distributed environments mobile agents issue important low level distribution support mechanism low level mechanism provided agents communicate move place place persistence order provide persistence agents recover failures survive periods agent server may currently hosted mobility agents navigate static dynamic set places order communicate locally agents services meet defined public place 
technical issues raised due mobility state maintenance security data code closure mobility communication handle communication mobile agents agent communicate doesn know current place partner 
agentspace agent framework agentspace implementation generation java mobile agent system developed 
agentspace version ready programmers 
applications agentspace implement generic agent manager tool graphical awt user interface prototypical electronic payment system set rm 
near agentspace cosmos project cos build framework negotiate contracts internet 
available internet downloading berlin inesc pt 
agentspace conceived support develop manage 
shows main components agentspace 
jvm jvm client web browser server api network agent applet applet applet management support development client voyager server voyager agentspace main components 
agentspace server server java multithreaded process agents executed 
server provides services agent place creation agent execution access control agent persistency agent mobility generation unique identities support agent communication optionally simple interface manage monitor 
agentspace client client manages monitors depending corresponding user access level agents related resources 
client set java applets stored server machine order provide adequate integration web offering internet users possibility easily manage agents remotely 
client able access servers providing convenient trade integration independence components 
agentspace application programming interface api package java interfaces classes defines rules build agents 
particular api supports programmer building agent classes instances agents created stored server database client applets stored server file system server data base order provide user interface remote agents 
server client components run top voyager obj java virtual machine jvm execute different machines 
agents run server context 
hand interact user specific generic applets running web browser context 
shows uml class diagram relationships related objects supported developed managed agentspace contexts places agents users groups users permissions acls access control lists security managers tickets messages identities 
server represented context important critical object server 
context contains major data structures code support server lists places users groups users meta agent classes access control lists 
context number places 
execution place simply place mainly objectives 
provide conceptual programming agents executed meet agents 
second provide consistent way define control access levels control computational resources 
agent basic element system 
agents identified unique global identity 
agents active objects execute server conceptual perspective currently place 
agents navigate local remote place permission 
just user owns agent 
users agents users interact allowed agent security policy 
context place agent group users user access control owner owner groups natives visitors places users acl metaclasses describes class diagram agentspace main concepts 
server maintains lists users groups users acl implement permission access control mechanism 
user belong groups 
groups hierarchically organized simplify permission management 
means users specialized group implicitly permissions inherit general groups 
default server defines groups users establishes convenient security access policy anonymous group users group place owners group administrators group 
agent pattern agentspace shows structure agent pattern specific agentspace framework 
due fact agentspace developed top voyager infrastructure persistence distributed details agent pattern transparently supported internal class visible programmer perspective called 
scope describe design internal structure related classes 
important note suitable support dynamic distributed applications process creating agents places 
firstly explicit network enable classes 
secondly agents created factory method method transparent clean easy way 
thirdly agentspace provides extensible elegant way handle security policies strategies related access interactions agents users agents 
basically security policy strategy security manager class attached agent object creation 
agentspace class classes derived 
default agent class 
classes agent security policies defined system class loading reflection mechanisms java 
agent client owner view security view agent agent place place specific structure agentspace agent pattern collaboration diagram 
novel aspect agentspace integrated association users agents places 
mechanism intrinsic default agentspace provides easy clean way develop manage class applications 
agent pattern aglets workbench shows structure agent pattern adapted aglets workbench ibm 
minor differences proposed pattern related name particularities 
agent 
aglets agent executed computational environment addressed context 
agent client user owner view security view agent context place currently supported specific structure aglets agent pattern collaboration diagram 
important note user aglets agent 
ibm introduce integrated way information 
agent pattern telescript shows structure agent pattern adapted telescript system whi whi 
semantic differences proposed pattern similarities evident 
important difference concerns way agents accessed managed telescript client objects usually access agents directly meet place connections defined run time socket objects 
basic difference telescript agentspace concerns notion place 
telescript place active object defined behavior interface stationary agent 
hand agentspace place just static object providing capabilities interface computational environment agentspace context 
agent client connection permit owner view security view agent agent place place mapped relatively agent pattern specific structure telescript agent pattern collaboration diagram 
sample code due space limitations sample code java classes agentspace framework 
just visible classes involved agent pattern agent types 
agent mentioned class 
public class agent serializable transient private null protected agent public final methods public final return public final object clone throws return clone 
public final void moveto ticket string cb throws moveto pid callback public final void moveto pid ticket throws moveto pid 
callback methods public void object init public void run public void throws 
just interface implemented class visible programmer perspective 
public interface public string throws public class throws public throws public object clone throws public void moveto pid ticket throws public void moveto pid ticket string callback throws 
just subclass agent class 
consider example agent classes interacting master slave model 
sake readability purposely removed exception handling code 
example shows clean easy process create agents interact objects 
instance creates dynamically agent instance class 
operation creates new agent instance default security policy user creator 
agentspace handles associations implicitly transparently 
code public class extends inesc agentspace agent public void run place create slave agent av place av start sleep try thread sleep catch sleep av sendmessage new message tostring public void message system println ll keep alive system println 
code public class extends inesc agentspace agent public void run system println alive public void message system println receive msg cv av cv av sendmessage new message tostring reply system println 
known uses pattern described seen agentspace aglets telescript frameworks 
expect probably eventually minor differences emerging mobile agent systems mainly java virtual machine 
aglets workbench instance simplified implementation pattern 
doesn provide dynamic flexible association agent classes users agents security managers provided agentspace 
provides functionalities instance 
hand telescript connections permits behavior semantic equivalent proposed agent pattern 
related patterns frameworks agent pattern uses adapted versions known design patterns 
class presents similarities proxy ghjv remote proxy bm patterns 
class subclass hierarchy developed agentspace inspired strategy ghjv pattern 
dynamic creation factory method ghjv pattern 
agent class may viewed adaptation active object pattern ls 
right design application different patterns important support dynamicity agent applications referred 
kendall developed interesting preliminary agent patterns km ken 
discussed proposed set known patterns active object mediator proxy adapter negotiator support basically strong agent vision wj agent viewed artificial intelligent community dm rie :10.1.1.119.2204
shows relationships different classes frameworks involved support development dynamic distributed agent applications 
ai agent framework strong agent approach agent ass framework orb framework genericity easy develop agent applications weak agent approach oo approach interrelated frameworks support agent applications 
basically identify interrelated classes frameworks importing features provided previous 
orb frameworks exist bottom level 
provide powerful generic features object oriented approach persistence name service communication location transparency mobility examples class frameworks iona ion visibroker inp sun rmi sun objectspace voyager obj 
middle level services provided orbs agent frameworks defined 
frameworks general equivalent orbs provide integrated set components order facilitate development agent applications basically weak agent vision wj :10.1.1.119.2204
main issues handled frameworks referred section 
examples class frameworks mentioned section agentspace aglets telescript gra odyssey gm grasshopper 
lastly top previous frameworks exist call agent frameworks 
kinds framework provide specific application components agent specializations 
possible approach frameworks may artificial intelligent frameworks knowledge representation highlevel communication protocols languages agent models bdi model rg rmit ken examples kind frameworks 
agent pattern proposed mainly focused architectural aspects related agent frameworks middle level referred 
conviction top low level application independent agent pattern developed particular patterns described kendall ken adapter negotiator mediator reasoner patterns 
acknowledgments shepherd doug lea help improve pattern mainly content structure 
bm buschmann meunier rohnert stal 
pattern oriented software architecture system patterns 
john wiley sons 

cos hamburg university inesc music publishing oracle uk sia 
cosmos common open service market smes 
esprit research project proposal 

starting june 
dm demazeau muller 
decentralized artificial intelligence 
decentralized artificial intelligence demazeau muller elsevier 
ghjv gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley longman 

gm general magic odyssey product information 

www com agents odyssey html gra gray 
transportable agent system 
proceedings cikm workshop intelligent information agents cikm 
ibm ibm tokyo research laboratory 
aglets workbench programming mobile agents java 
gmbh 
intelligent mobile agent platform written pure java 
www de products inp visibroker distributed object connectivity software 

www com visibroker ion iona technologies 
internet orb 

www iona com products internet ken kendall layered agent pattern language 
proceedings conference pattern languages programs plop 
km kendall 
layered agent patterns 
proceedings conference pattern languages programs plop 

infrastructure mobile agents 
www journal fourth international www conference 
ls schmidt 
active object object behavior pattern concurrent proceedings conference programming 
patterns languages programming 
obj objectspace 
objectspace voyager core package technical overview 

approach making mobile agents intelligent 
ieee internet computing 
rat rational software uml unified modeling language version 

rg rao georgeff 
bdi agents theory practice 
proceedings international conference multi agent systems 
rie editor 
special issue intelligent agents 
communications acm 
rm rom mira da silva 
agent secure internet payment system mobile computing 
proceedings international conference electronic commerce hamburg germany 
silva mira da silva delgado 
motivation requirements agentspace framework developing agent programming systems 
proceedings fourth international conference intelligence services networks italy 
silva mira da silva delgado 
agentspace implementation mobile agent system 
mobile agents stuttgart germany 
published 
sun sun microsystems javasoft 
java remote method invocation rmi 

www javasoft com products jdk rmi whi white 
telescript technology foundation electronic marketplace 
general magic 

whi white 
general magic mobile agents white 

wj wooldridge jennings :10.1.1.119.2204
intelligent agents theory practice 
knowledge engineering review 

cambridge university press 
