hygienic macros explicit renaming william clinger describes alternative low level macro facility described revised report algorithmic language scheme 
facility described explicit renaming identifiers developed implementation hygienic macro expansion algorithm described 
low level macro facility designed compatibility high level hygienic macro system remains easiest understand 
low level macro facility described revised report renames identifiers automatically hygienic macros obtained default facility described requires identifiers renamed explicitly order maintain hygiene 
difference originally implemented described way define certain hygienic macros define hygienic macros 
problem transformation procedure defined macro may need compare pieces argument denotation identifier way defining macro pass denotation defined macro part code defined macro 
problem solved introducing syntax expressions revised report 
syntax quote denotation identifier quoted syntax preserved part quoted value 
low level macro facility syntactic closures explicit renaming facility adds new production speci 
transformer expanded syntactic environment transformer expression expanded expression evaluated standard transformer environment yield transformation procedure 
transformation procedure takes expression arguments returns transformed expression 
example transformation procedure call macro call proc arg 
expands proc arg 
written lambda exp rename compare cdr exp expressions represented lists traditional manner identifiers may represented objects symbols 
transformation procedures may predicate identifier 
determine object representation identifier 
second argument transformation procedure renaming procedure takes representation identifier argument returns representation fresh identifier occurs program 
example transformation procedure simplified version macro written lambda exp rename compare vars map car cadr exp inits map cadr cadr exp body exp lambda vars body inits hygienic 
hygienic macro rename identifier lambda protect captured local binding 
renaming effectively creates fresh alias lambda captured subsequent binding lambda exp rename compare vars map car cadr exp inits map cadr cadr exp body exp rename lambda vars body inits expression returned transformation procedure expanded syntactic environment obtained syntactic environment macro application binding fresh identifiers generated renaming procedure denotations original identifiers syntactic environment macro defined 
means renamed identifier denote thing original identifier transformation procedure renamed identifier placed occurrence binding position 
renaming procedure acts mathematical function sense identifiers obtained calls argument sense eqv 
error renaming procedure called transformation procedure returned 
third argument transformation procedure comparison predicate takes representations identifiers arguments returns true denote thing syntactic environment expand transformed macro application 
example transformation procedure simplified version cond macro written lambda exp rename compare clauses cdr exp null 
clauses rename quote unspecified car clauses rest cdr clauses test car cond identifier 
test compare test rename rename cdr rename test rename cdr cond rest example identifier renamed passed comparison predicate comparison true test expression identifier denotes thing syntactic environment expression transformed denotes syntactic environment cond macro defined 
renamed passed comparison predicate match local variable happened named macro hygienic 
macros non hygienic design 
example defines loop macro implicitly binds exit escape procedure 
binding exit intended capture free exit body loop exit renamed 
define syntax loop transformer lambda body cdr call current continuation lambda exit body suppose macro implemented loop intent exit may escape loop 
macro written define syntax syntax rules test body 
loop test exit body exit inserted macro intended captured binding exit inserted loop macro 
words macro hygienic 
loop written transformer syntax define syntax transformer lambda test cadr body loop test exit body william clinger jonathan rees editors 
revised report algorithmic language scheme 
appear previous issue lisp pointers 
william clinger jonathan rees 
macros 
acm conference principles programming languages 
chris hanson 
syntactic closures macro facility 
appear issue lisp pointers 
