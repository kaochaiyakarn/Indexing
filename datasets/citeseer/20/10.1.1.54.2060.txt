technische universit chemnitz ulrich graph partitioning survey sfb simulation numerische simulation auf preprint sfb dec contents contents notation iii problem 
graph partitioning 
examples 
partial dioeerential equations 
sparse matrix vector multiplication 
applications 
time vs quality 
miscellaneous algorithms 
recursive bisection 
partitioning geometric information 
coordinate bisection 
inertial bisection 
geometric partitioning 
partitioning geometric information 
graph growing greedy algorithms 
algorithm 
spectral bisection 
spectral bisection weighted graphs 
spectral 
multilevel spectral bisection 
algebraic multilevel 
multilevel partitioning 
coarsening graph 
contents partitioning smallest graph 
projecting re ning partition 
methods 
bibliography ii notation list symbols text brief explanation meaning 
undirected graph vertices edges fe edge set edges 
fv ng set vertices 
fw weights edges fw vg weights vertices deg fi fi fv je fi fi degree vertex 
number adjacent vertices laplacian matrix graph 
ij gamma deg adjacency matrix graph 
ij gamma empty set 
set jx number elements iii notation vector jxj norm kxk jx norm 
exists jg delta landau symbol 
disjoint union 
dot just emphasizes sets disjoint 
identity matrix size size obvious context 
oe spectrum diag diagonal matrix components vector diagonal 
iv problem performance classical von neumann computers grown tremendously demand current technology deliver 
moment possible put transistors chip number increases year certain physical barriers loom horizon simply put electron data path information travel certain distance cycle surpassed technology known today 
certainly important pursue new methods technologies push barriers bit break done get bigger performance 
mankind teamwork achieve things single human incapable hunting group building pyramids 
idea computers parallel computing 
invented revived years ago parallel computers achieve performances impossible expensive achieve single processor machines 
parallel computers architecture increasingly popular scienti technical community 
just working team eoeciently people dig post hole times fast creates new problems occur working coordinate peasants working pyramid obstacles unknown single processor programmers occur working parallel machine 
parts problem parallelized executed serially 
limits total possible speedup law problem constant size 
quite sequential part tends independent size input bigger problem adequate sharing processors higher speedup possible 
problems kind called scalable 
second amount done distributed evenly pro problem cessors 
necessary course computation data exchanged process synchronized 
case processors wait nish 
load balancing easy problems quite complicated 
amount processor vary course computation example critical point needs examined closer 
perfect balance step mean balance 
easily avoided moving underutilized processor 
means communication dioeerent processors 
communication alas time consuming 
brings third obstacle 
problems processors regularly need information continue 

mentioned exchanges entail synchronization points making necessary processors wait 
course communication takes time 
depending architecture exchanging bit information processors times slower accessing bit processor 
high startup time exchanging hundreds bytes takes amount time exchanging byte 
possible exchanges disjoint pairs processors takes place time 
highly machine dependent evident desirable partition problem data way distributed evenly time communication minimized 
see certain problems lead problem partitioning graph 
simplest form means divide vertices graph equal sized parts number edges connecting parts minimal 
graph partitioning notations cf 
graph consists number vertices fv ng connected edges fe edge names vertices include nodes grid points mesh points 
order avoid excessive subscripts equate danger confusion subset ae vertices induced subgraph contains edges ae join vertices vertices edges weights associated 
graph partitioning fw weights edges fw vg weights vertices 
weights non negative integers 
allows eoecient analysis implementation algorithms 
example sorting list integers restricted size done bucket sort algorithm performance 
restriction big 
example positive rational weights easily mapped scaling smallest common multiple denominators 
weights weights considered 
simplest form graph partitioning unweighted graph bisection graph consisting vertices edges divide vertices sets equal size number edges parts minimized 
formally graph jvj number elements 
find partition 
disjoint union ist expressed jv jv gj minimized possible partitions equal size 
general formulation involves weighted edges weighted vertices disjoint subsets sum weights vertices subsets equal sum edges subsets minimized 
formally graph weights divisible 
find equal pg vp vq minimized possible partitions problem referred cut size implying picture takes graph edges left subgraphs induced subsets vertices 
names include cost partition 
described looking small subset edges taken away separates graph disjoint subsets 
called nding edge separator 
edges look subset vertices called vertex separator separates graph graph nd disjoint subsets ffl ffl jv small ffl jv jv ffl edge joins depending application edge separator vertex separator needed 
fortunately easy convert kinds separators 
example assume edge separator need vertex separator 
consider graph consisting separating edges endpoints 
vertex cover set vertices include endpoint edge vertex separator graph 
bipartite compute smallest vertex cover eoeciently bipartite matching 
examples examples assume parallel computer distributed memory processor memory 
needs access data processors memory communication necessary 
parallel computers today kind 
partial dioeerential equations lot methods solving partial dioeerential equations pdes grid oriented data de ned discrete grid points nite elements nite volumes calculation consists applying certain operations data associated points elements volumes grid 
calculations usually involve data neighboring elements 
examples gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma bad partition partition partitions phi phi phi phi phi phi gamma gamma gamma gamma gamma gamma gamma gamma hd gamma gamma gamma gamma gamma jc pi pi pi pi pi pi pi gamma gamma gamma gamma gamma delta delta delta phi phi phi phi phi phi xxxxx theta theta theta theta theta nite element mesh corresponding dependency graph distributing problem parallel processors done partitioning grid solving associated subproblems dioeerent processors 
elements need access data processors communication necessary 
reasonable assumption amount communication neighbors constant minimize number neighbors dioeerent partitions 
cf 
formulate problem graph partitioning problem look called dependency graph grid cf 

grid point nite element corresponding vertex graph 
weight vertex proportional amount computational done grid point 
quite weights vertices equal 
pair neighboring dependent grid points corresponding vertices connected edge 
weight edge proportional amount communication grid points 
quite weights edges equal 
problem nite element meshes mesh graph embedded usually threedimensional space coordinates vertices known unweighted dependency graph equal dual graph mesh 
optimal grid partitioning simply solving graph partitioning problem dependency graph distributing nite element th processor corresponding vertex th partition graph 
sparse matrix vector multiplication sparse matrix matrix containing zero entries savings space computational achieved consideration algorithm 
fundamental operation matrix related algorithms multiplication matrix vector example iterative methods solution linear system cg qmr gmres amount spend operation dominate total amount done 
want distribute matrix parallel computer processors 
ways sparse matrix distributed row wise row matrix distributed processor 
th row kept processor th element vector rows distributed processors workload balanced necessary communication minimized 
consider workload calculate th element vector ax need calculate ij sparse calculate ij ij amount calculate proportional amount non zero elements th row see need values th row ij 
values stored processor luck 
communicate processor values stored 
examples ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl distribution matrix rows processors minimize communication try store values consequently associated rows processor 
want minimize occurrence th row stored processor ij th row stored processor 
shows bad left side right distribution matrix rows processors 
matrix rst rows distributed processor second 
elements cause communication shown ffl 
note ffl left matrix 
note right matrix just left matrix permuted rows columns dioeerent row processor assignment 
permuting rows columns matching processor distribution change amount communication necessary 
just easier see rows belonging rows 
lesser number ffl right matrix demonstrates communication saved proper distribution 
problem reformulated graph partitioning problem 
order simplify example look structurally symmetric matrix ij ji 
graph matrix thetan de ned follows consists vertices edge ij 
degree vertex number direct neighbors 
purpose de ne weight vertex degree vertex plus 
weight equal number non zero elements th row matrix proportional amount calculate edges unit weight 
edge symbolizes data dependency row row corresponding vector element possible communication 
problem rf rf bf rf rf bf bf bf rf rf rf rf bf bf bf bf partitioned graphs matrices gure 
partitioning weighted graph parts minimal amount edges cut allows nd distribution sparse matrix parallel processors 
th store th row matrix processor weight vertices proportional partitions equal weight perfect load balance achieved 
cut edge stands necessary communication processors minimized cut size means communication minimized 
show partitioned graphs matrices 
numbers vertices correspond line column number matrix 
cut edge corresponds ffl 
easy see matrices essentially just permuted rows columns leading dioeerent assignment 
applications detailed examples stem area parallelizing mathematical algorithms graph partitioning applicable quite dioeerent problems areas 
rst algorithm algorithm developed assign components electronic circuits circuit boards number connections boards minimized 
algorithm modi cations discussed detail section 
applications include vlsi large scale integration design cad computer aided design decomposition envelope reduction sparse matrices hypertext browsing geographic information services physical mapping dna de time vs quality acid basic constituent gene see 
time vs quality sections talked cut certain conditions 
structured small graphs real minimization infeasible take time 
finding optimal solution graph partitioning problem non trivial cases known np complete 
simply put means known algorithm faster trying possible combinations little hope 
little exact ignoring fundamentals np theory means graph bisection falls huge class problems transformed known algorithms solve problem polynomial time size input 
graph special properties jvj jej suspected exists algorithm solving graph bisection problem runs time nding optimal solution resort heuristics 
try algorithms may deliver optimal solution time give solution time 
see execution time quality solution 
algorithms run quite fast nd solution medium quality take long time deliver excellent solutions tuned extremes 
choice time vs quality depends intended application 
network layout acceptable wait long time slightly better solution save real money 
hand context sparse matrix vector multiplication interested total time 
execution time graph partitioning time saved faster matrix vector multiplication 
certain matrix fast algorithm delivering partitions faster slower algorithm better quality partitions 
matrix dioeerent matrices graph slower algorithm preferable 
fact factors consider 
wanted dioeerent partitions weight 
see section advantage accept partitions slightly dioeerent size order achieve better problem cut size 
demonstrate single best algorithm situations dioeerent algorithms described chapters applications 
miscellaneous algorithms dioeerent approaches graph bisection 
depend geometrical properties mesh applicable problems need graph additional information 
take local view graph try improve partition treat problem globally 
strictly deterministic giving result quite lot random decisions 
apply graph theoretic methods just treat problem special instance problem nonlinear optimization 
chapter survey algorithms 
selection algorithms chapter somewhat arbitrary tried include commonly ones certain historical interest 
summaries algorithms see 
interest simplicity algorithms unweighted graphs generalization weighted graphs easy 
tend ignore technicalities dealing unconnected graphs considered real implementations algorithms 
recursive bisection see algorithms originally designed bisection 
general formulation graph partitioning problem involves nding 
turns applications power example parallel computers processors 
natural idea recursively 
partition graph partitions partition see 
nd perfect bisection give partition nearly cut size proper partition 
simon teng shown answer section recapitulate results re miscellaneous algorithms recursive bisection 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma example graph way partition bad recursive bisection 
cursive bisection deliver nearly arbitrarily bad cut sizes compared 
bad sounds 
important classes graphs recursive bisection works quite 
insist partitions exactly equal size possible recursive bisection nd partitions nearly ones partitioning 
bad news demonstrate example give graph vertices constant cut size way partition recursive bisection produces cut size size 
consider graph sketched 
subgraphs cliques totally connected graphs having vertices having gamma vertices properties 
gamma ffi gamma ffi ffi xed recursive bisection parts cut size parts cut size real life counterexample recursive bisection 


sigma 
possible combination gamma 
optimal way partition decomposes graph 
total cut size obviously 
contrast recursive bisection rst decomposes graph recursion level cut 
condition ensures possible combine proper size 
cliques cutting vertex increase cut size sigma number vertices resp 

cost partition ffin 
example easily adjusted general 
shows problem occur contrived examples 
partitioning theta grid parts perfect recursive bisection lead cut size optimal partition cut size 
note cuts parts optimal 
news 
common graphs proved recursive bisection worse real partitioning 
section miscellaneous algorithms assume bisection deliver optimal solution heuristics 
planar graph graph drawn piece edges cross 
discretizations dimensional structures planar 
nite element method domain problem subdivided mesh polyhedral elements 
common choice element dimensional simplex triangle dimensions 
classical nite element methods usually requirement numerical accuracy triangulation uniformly regular simplices 
common shape criteria upper bound aspect ratio simplices 
term de nitions roughly equivalent 
theorem aspect ratio simplex radius smallest sphere containing divided radius largest sphere inscribed planar graphs shown theorem solution recursive bisection cut size worst case times bigger jvj 
factor gamma statement holds shaped meshes dimensions 
happens insist partitions exactly size allow imbalance 
way partition allow little bigger jvj jv jvj theorem states things cut size optimal nd partition cut size size log recursive partitioning 
theoretical result execution time may exponential theorem shows algorithm recursive partitioning runs polynomial time nd partition cut size size log log shows allowing little imbalance partition size continue recursive bisection paying penalty cut size compared real partitioning 
partitioning geometric information additional information available may help solve problem 
example cases solution pdes cf 
section graph derived structure dimensional space geometric coordinates attached vertices graph known 
case graph called mesh 
partitioning geometric information problems coordinate bisection 
algorithms described section implicitly assume vertices close physically close mesh connected short path 
fact information edges 
limits applicability problems geometric information available meaningful 
implies algorithms easily extended graphs weighted edges 
problems geometrical partitioning techniques cheap methods produce acceptable partitions 
methods nding structure divides underlying space parts way part contains half points weighted vertices half weight 
points lie structure tie breaking mechanism 
structure hyperplane plane dimensions line dimensions structure sphere 
coordinate bisection coordinate bisection simplest coordinate method 
simply consists nding hyperplane orthogonal chosen coordinate axis axis divides points equal parts 
done looking coordinates nding value half points value half points value bigger separating structure case hyperplane orthogonal axis containing point resp 

recursive application technique done ways 
choosing axis lead thin strips usually undesirable leads long boundaries probably high cut size see 
miscellaneous algorithms dr inertial bisection 
better way alternately bisect coordinates 
leads better aspect ratio hopefully lower cut size see 
problems coordinate bisection coordinate dependent 
coordinate system structure may partitioned quite see 
called inertial bisection described section tries remedy problem choosing coordinate system 
inertial bisection basic idea inertial bisection choosing hyperplane orthogonal xed coordinate axis chooses axis runs ithe points 
mathematically choose line way sum squares distance mesh points line minimized 
physical interpretation line axis minimal rotational inertia 
domain nearly convex axis align shape mesh mesh small spatial extend directions orthogonal axis 
hopefully minimizes footprint domain hyperplane cut size 
state algorithm dimensions 
generalization dimensions weighted vertices easy 
position points 
line point direction kuk ffu ff rg see 
partitioning geometric information supposed line minimizes sum squares distance mesh points line easy see point minimizes sum squares distance mesh points single point lies simply choose remains choose quantity minimized gamma gamma gamma gamma gamma gamma delta gamma gamma gamma gamma vw gamma gamma gamma xx gamma yy xy xx yy xy yy xy xy xx mu yy yy xy summations previous line 
symmetric choose normalized eigenvector corresponding smallest eigenvalue order minimize expression follows theorem 
geometric partitioning complicated method partition meshes introduced 
original form certain graphs nd vertex separator high probability size divides graph way sizes partitions dioeerent 
definition ply neighborhood system dimensions set fd closed disks point strictly interior disks 
miscellaneous algorithms ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe ae oe gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma regular mesh overlap graph 
bisecting dim 
cube 
definition ff overlap graph graph de ned terms ply neighborhood system fd constant ff 
vertex disk vertices connected edge expanding radius smaller factor ff causes disks overlap phi fi fi ffd ffd psi overlap graphs models computational meshes shaped mesh dimensions planar graph contained ff overlap graph suitable ff 
example regular mesh overlap graph see 
theorem theorem ff overlap graph dimensions nodes 
vertex separator properties 
vertices 
ffk gamma vertices 
easy see regular meshes simple geometric shapes balls squares cubes cf 
separator size theorem 
partitioning geometric information mesh 
scaled points 
geometric bisection proof theorem long involved leads randomized algorithm running linear time nd high probability separator size theorem 
separator de ned dimensional sphere 
algorithm randomly chooses separating circle distribution constructed separator satisfy theorem high probability 
describe algorithm introduce terminology projection mapping points unit sphere centered origin point embedded setting coordinate 
projected surface sphere line passing 
centerpoint set points property hyperplane centerpoint divides set subsets sizes ratio note centerpoint original points 
de nitions algorithm follows see fig 
algorithm geometric bisection project project vertices unit sphere miscellaneous algorithms projected centerpoint 
mapped points great circle 
geometric bisection ii find centerpoint projected points 
conformal map conformally map points sphere centerpoint lies origin 
done way rotate sphere origin centerpoint coordinates second points new centerpoint lies origin 
done projecting rotated points back plane inverse projection scaling points factor gamma projecting points back sphere 
find great circle intersecting sphere random dimensional hyperplane origin 
great circle circle inverting dilation rotation projection 
find separator vertex separator choosing vertices corresponding disk cf 
def 
magni ed factor ff intersects implementing algorithm simpli cations suggested 
nding vertex separator easier nd edge separator choosing edges cut circle advantage know neighborhood system graph 
partitioning geometric information separating circle projected back plane 
edge separator induced separating circle 
geometric bisection iii theorem guarantees ratio partitions bisection want partitions size possibly dioeerence vertex 
achieve hyperplane moved normal vector divides points evenly 
separator circle great circle unit sphere projection plane circle possibly line 
centerpoint linear programming done polynomial time slow process 
real centerpoint heuristic nd approximate centerpoint 
done linear time randomized algorithm 
speed computation randomly chosen subset points compute centerpoint 
random great circle possibility induce partition 
experiments showed worthwhile generate dioeerent circles choose delivers best result 
improve algorithm modifying selection normal vector randomly generated great circles biased direction moment inertia points see section inertial bisection 
miscellaneous algorithms partitioning geometric information methods mentioned quite meshes couple disadvantages 
assume connected vertices sense geometrically adjacent 
certainly case applications hold general 
secondly methods require geometric information mesh points 
cases rst condition satis ed layout mesh may available 
consequently methods geometric information consider connectivity information graph applicable wider range problems 
graph growing greedy algorithms thinking partitioning algorithms obvious idea choose starting vertex way add vertices partition big 
algorithms classi ed growing type algorithms 
greedy algorithms vertex added sense increases cut size amount graph growing algorithms vertices added way resulting subgraph grows certain way breadth rst 
graph growing algorithms may example start starting vertices time grow subgraphs parallel may preference grow certain direction 
describes family algorithms describe examples bit closely 
consider greedy approach algorithm greedy partitioning unmark vertices 
partitioning geometric information choose pseudo peripheral vertex pair vertices approximately greatest distance graph cf 
starting vertex mark add rst partition 
desired number partitions repeat unmarked vertices adjacent current partition choose number unmarked neighbors 
mark add current partition 
current partition big 
unmarked vertices left choose adjacent current partition number unmarked neighbors starting vertex partition 
note choosing new vertices adjacent current partition algorithm tries keep connected kind graph growing 
known algorithm called 
closer look reveals graph growing algorithm chooses starting vertices partition greedy way 
adapted graph original works nodes elements fem mesh described follows algorithm algorithm unmark vertices 
desired number partitions vertices chosen partition choose smallest nonzero number unmarked neighbors mark neighbors add current partition 
rst vertex choose pseudo peripheral vertex mark add current partition 
repeat vertex current partition unmarked neighbor delta add current partition 
delta mark current partition big 
graph growing greedy algorithms algorithms particular graph growing ones fast additional advantage able divide graph desired number partitions directly avoiding recursive bisection 
running time essentially independent desired number 
ability divide graph number partitions attractive desired number power 
downside quality partitions measured cut size great partitioning complicated graphs tend disconnected see 
tend sensitive choice starting vertex quite fast run algorithms dioeerent starting vertices simply choose best result 
algorithm algorithm abbreviated earliest graph partitioning algorithms originally developed optimize placement electronic circuits printed circuit cards minimize number connections cards 
algorithm create partitions improves iteratively need partitions equal size 
original idea take random partition apply 
repeated times best result chosen 
small graphs delivers reasonable results quite larger problem sizes 
nowadays algorithm improve partitions algorithms 
see somewhat view problem trying improve partitions exchanging neighboring nodes 
nicely complements algorithms view problem tend ignore local characteristics 
examples kinds algorithms inertial partitioning spectral partitioning see sections resp 
important practical advances fiduccia mattheyses implemented algorithm way iteration runs jej jvj log jvj 
rst describe original algorithm discuss improvements 
introduce notation easier describe algorithm graph weighted edges graph va vb vertex amount cut size decrease moved partitioning geometric information partition va diff diff va vb vb gamma va note vertex moved neighbors change 
pair va vb vertices amount cut size changes swap vb va easily see gain gain va vb diff diff gamma describe pass algorithm algorithm va vb compute vertices 
unmark vertices 
cut size 
min jv jv unmarked vertices nd pair biggest gain negative 
mark neighbor update swapped gamma va gamma vb gamma gamma gain cut size swapped 
find smallest min swap rst pairs va va fb vb vb fa continue iterations cut size improvement achieved 
graph growing greedy algorithms phase swaps pairs vertices chosen maximize gain 
continues doing vertices smaller swapped 
important part algorithm soon improvements 
continues accepting negative gains hope gains large cut size reduced 
ability climb local minima crucial feature 
see taken 
gamma gamma gamma gamma gamma gamma gamma gamma original graph gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma swap gamma gamma gamma gamma phi phi phi phi second swap gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma result unmarked marked selected algorithm mentioned algorithm implemented takes jej time iteration 
reduction partly achieved choosing single nodes swapped pairs 
furthermore vertices bucket sorted moves associated gain value stored doubly linked list 
choosing move highest involves nding nonempty list highest updating vertex done deleting doubly linked list inserting done constant time 
variations algorithm trading execution time quality generalizing algorithm 
examples partitioning geometric information ffl exchanging vertices limit exchange xed number allow xed number exchanges negative gain 
observation largest gain achieved early 
ffl xed number iterations continuing cut size improvement achieved 
ffl evaluate vertices near boundary moving inner nodes helpful 
spectral bisection spectral bisection algorithm described section quite dioeerent algorithms described far 
geometric information operate graph mathematical representation 
algorithms point calculations main computational spectral bisection algorithm standard vector operations point numbers 
decision vertex graph takes global view problem 
method quite easy explain heuristic works obvious 
definition graph jvj vertices numbered way deg degree vertex number adjacent vertices 
laplacian matrix context obvious theta symmetric matrix row column vertex 
entries de ned follows ij gamma deg matrix zero diagonal called adjacency matrix permutation vertex numbering lead dioeerent matrix sloppy speak laplacian graph 
matrices induced dioeerent vertex numberings derived permuting rows columns share properties continue speak laplacian closer distinction necessary 
laplacian nice properties cf 
spectral bisection theorem 
real symmetric eigenvalues delta delta delta real eigenvectors real orthogonal 

eigenvalues nonnegative positive semide nite 

delta associated eigenvector 

multiplicity zero eigenvalue equal number connected components particular connected 
proof 


trivial 
follows circle theorem theorem simple fact de nition jl ij jj ng circles nonnegative real parts 
eigenvalues real nonnegative 
shows max deg gamma 
part rst show connected 
note connected irreducible irreducible nonnegative matrix ni gamma eigenvalue gammai gamma eigenvalue particular largest eigenvalue eigenvalues positive 
theorem theorem applied implies connected simple eigenvalue 
assume connected consists connected components rst numbering vertices form diagonal blocks 
oe oe oe contains rst eigenvalues 
shown connected 
delta delta delta 
connected consequently consists unconnected components see oe oe oe submatrices zero eigenvalue disconnected 
repeating argument see connected components 
equation motivates definition called algebraic connectivity 
partitioning geometric information corresponding eigenvector called fiedler vector 
named honor miroslav fiedler pioneering objects 
discoveries serves rst small motivation algorithm theorem fv connected graph fiedler vector 
real number de ne fv 
subgraph induced connected 
similarly real number subgraph induced fv connected 
note theorem independent length sign fiedler vector 
theorem imply bisection imply fiedler vector divide vertices way 
guarantees connected partition 
wo achieve choosing just random subset 
leads idea fiedler vector bisect graph 
rst describe algorithm try explain works 
algorithm spectral bisection connected graph number vertices way form laplacian matrix 
calculate second smallest eigenvalue eigenvector calculate median components choose fv fv elements equal distribute corresponding vertices partition balanced 
algorithm 
dioeerent approaches try answer question 
addition graph theoretic approach cf 
theorem look graph bisection discrete optimization problem quadratic assignment problem look physical models vibrating string net connected weights examine output certain neural net trained bisect graph 
approach discrete optimization formulation authors opinion convincing derivation spectral bisection algorithm 
spectral bisection graph jvj want partition equal sized parts designate vertex belongs part index vector sigma gamma notice function gamma denotes number cut edges gamma lie 
hand lie dioeerent partitions dioeerent sign gamma 
rewrite gamma gamma note gamma ij ax adjacency matrix jej deg gamma diagonal matrix vertex degrees diagonal diag deg cf 
de nition lx graph bisection problem formulated minimize lx subject sigma 
third condition forces sets equal size 
partitioning geometric information graph partitioning np complete just formulation really solve problem 
relax constraints bit choosing discrete values look real vector euclidean length ful lls conditions minimize lz subject see problem easy solve 
feasible set continuous problem subset feasible set discrete problem solution give lower bound hope continuous solution give approximation solution 
theorem know eigenvectors orthonormal span ne 
decompose linear combination ff vectors 
order meet restrictions place conditions ff want ff ff ff ff need ff 
need ff ff ff ff ff furthermore lz ff ff ff ff ff ff ff ff ff spectral bisection holds ff inequality follows achieve choosing nu nd correctly scaled fiedler vector nu satis es constraints solution continuous optimization problem 
fact solution unique factor gamma cf 

addition lower bound cut size bisection having solution continuous problem need map back discrete partition hope result approximation solution discrete problem 
ways 
rst method places importance sign result just map sign dealing zero elements way assigning partition 
drawback partitions need balanced 
consequently additional necessary 
second method places emphasis balance assigns largest elements partition rest partition 
easily done computing median setting gamma distributing elements way balance preserved 
chan ciarlet showed vector formed way closest ff norm balanced sigma vectors arg min sigma kp gamma zk ff note cases necessary compute eigenvector high degree accuracy 
iterative method lanczos algorithm ch 
rayleigh quotient iteration rqi sec 
iterating result suoeciently accurate decide sign elements recognize largest elements 
cheaper computing exact eigenvector 
spectral bisection weighted graphs easy generalize spectral bisection algorithm handle weighted graphs 
partitioning geometric information graph weighted edges de ne weighted laplacian ij ij ij gammaw de nition see equation lx denotes weight cut edges proceed 
graph weighted vertices subsets equal weights vector vertex weights 
diag diagonal matrix components diagonal reformulate condition 
solve problem minimize lx subject sigma relax constraints bit choosing discrete values look real vector weighted length note feasible solutions discrete problem satisfy condition ful lls conditions minimize lz subject solution relaxed equation eigenvector corresponding second smallest eigenvalue generalized eigenproblem lx diagonal positive elements diagonal problem reduced ordinary eigenproblem substituting leads ay gamma lv gamma new matrix positive semide nite structure spectral seen section advantageous divide graph parts interesting nd spectral algorithm doing 
rendl describe technique 
algorithm allows decomposition graph parts requires calculation eigenvectors spectral bisection expensive 
see spectral bisection idea described adapted divide graph parts 
hendrickson leland developed way partition graph partitions equal size eigenvectors spectral resp 

van generalized algorithm divide graph partitions unequal size 
contrary spectral bisection algorithms hypercube hop metric minimize cut size closely related size hypercube hop manhattan metric 
weight cut edge multiplied number bits binary representation subset numbers see 
models performance parallel communication hypercube dimensional mesh topologies cf 

topologies interpreted number wires message take transfered respective processors 
describe derivation 
similar slightly complicated see 
distinguish index vectors sigma gamma gamma gamma gamma considerations similar ones lead nd lx ly gives hop weight partition induced assuming multiple constraints size expressed partitioning geometric information gamma gamma gamma gamma gamma gamma gamma gamma expanding solving small linear system simpli es want solve discrete minimization problem minimize lx ly subject sigma problem dioecult solve relax discreteness condition demand solutions euclidean length get minimize lz lw subject argument similar bisection case oe see scaled eigenvectors nu nu belonging second eigenvalues solution continuous problem lower bound number hops induced orthonormal pair subspace spanned nu cos nu sin gamma nu sin nu cos solutions 
question remains solutions choose 
idea choose way resulting values closest discrete values sigma originally looking choose minimizes gamma gamma 
reduces quartic expression sin cos 
constructing cost cost evaluating minimizing independent spectral bisection usually insigni cant compared calculating eigenvectors 
recommended local minimizer random starting points 
course originally looking approximative solution discrete problem 
hurdle assignment continuous points discrete points sigma sigma 
need adhere restrictions partitions need size simply median method bisection case 
de ne distance function continuous points discrete points sigma sigma distributing points evenly minimizing sum distance known minimum cost assignment problem 
exist eoecient algorithms solve problem 
multilevel spectral bisection algorithms compute fiedler vector eigenvector associated third smallest eigenvalue forth smallest sparse symmetric matrix 
choice algorithm variation lanczos algorithm ch 

turns compared graph partitioning algorithms spectral bisection lanczos algorithm extremely slow 
speed calculation eigenvector spectral bisection algorithm 
luckily need calculate eigenvectors just sparse matrix laplacian graph 
barnard simon clever way pro connections eigenvectors graph 
idea section 
basic idea quite simple 
graph try contract new graph sense similar fewer vertices 
new graph consequently laplacian smaller cheaper calculate fiedler vector new graph 
starting point calculate fiedler vector original graph 
process termed coarsening graph smaller graph called coarser 
course idea recursively constructing smaller graphs calculate 
dioeerent sized graphs lead name algorithm multilevel spectral bisection msb 
rst rough draft eigenvector calculation msb looks unweighted graph generalization case weighted edges quite straightforward algorithm multilevel fiedler vector calculation function fiedler partitioning geometric information small calculate lanczos algorithm construct smaller graph implicitly corresponding laplacian fiedler nd initial guess calculate initial guess endif return course left important details construct smaller graph nd initial guess eoeciently calculate constructing smaller graph need de nitions definition graph subset ae called independent set respect elements connected edge 
definition called maximal independent set respect adding vertex longer independent set 
note de nition maximal independent set requires independant set maximal size maximal independent set respect exist independant subset jv jv de nitions equivalent 
easy see independent set ae maximal node adjacent node maximal independent set easily eoeciently greedy algorithm means unique dioeerent maximal independent sets typically similar size 
coarsen graph new smaller graph choose maximal independent subset vertex set new graph 
subset maximally independent set guaranteed evenly distributed 
spectral bisection grow domains vertices add edge ij domains intersect growing domain vertex done repeatedly adding neighbors vertices domain 
starting set maximal independent cycles domain growth cover graph determine case vertices connected exactly exists path vertices connecting corresponding vertices easy see resulting graph connected original connected note contrary stated growth cycles notation paths length claimed 
finding initial guess having calculated fiedler vector smaller graph face problem approximate fiedler vector bigger graph 
knowledge relationship assign values appropriate elements mathematical terms mapping vertices condensed graph vertices index vertex corresponds th vertex jv components corresponding vertices assign average values corresponding vertices adjacent mathematical formulation maximal independent element neighbor assigned value component note operation similar prolongation operation classical multigrid methods linear systems 
calculating fiedler vector estimate detail solve calculate fiedler vector estimate lanczos algorithm usual favorite extreme eigenpairs symmetric sparse matrices take advantage initial guess 
partitioning geometric information rayleigh quotient iteration rqi sec 
choosen re ne initial guess approximation accuracy demands low rqi usually take iterations converge 
algorithm rayleigh quotient iteration initial guess eigenpair set kf repeat oe lv solve gamma oei kxk oe closer look rqi algorithm reveals solve linear equation step 
matrix sparse symmetric probably inde nite ill conditioned method choice iteration 
total number matrix vector operations rqi steps combined generally 
experiments described msb rqi turned eoecient 
compared normal spectral bisection lanczos algorithm usually order magnitude faster 
algebraic multilevel msb algorithm described smaller graph constructed solely larger graph corresponding laplacian matrix implicitly build fiedler vector computed 
problem approached way tune classical multilevel algorithms linear systems 
laplacian matrix thetan construct restriction operator thetan prolongation operator thetan study relation solution smaller restricted problem original problem 
van just 
report results section 
choosing maximal independent subset matrix equivalent interpolation method section prolongation operator restriction operators choosen simple injection operator ij ffi turns leads eigenproblem matrix lp interpreted laplacian matrix new smaller graph weighted multilevel partitioning edges 
new graph shown connected repeat procedure recursively 
nice properties 
leads generalized eigenproblem 
lp laplacian weighted graph graph guaranteed connected weights edges positive 
repeated application may possible 
solution generalized eigenproblem computationally expensive 
prolongations second third fourth eigenvector contracted graph compared corresponding eigenvectors original graph 
done examining absolute values inner products normalized vectors 
notable results ffl prolongations quite rich absolute value inner product quite big 
ffl contributions eigenvectors smaller time les 
means prolonged eigenvectors approximations eigenvector original graph starting vectors rayleigh quotient iteration 
ndings included ffl method delivered better eigenvector approximations 
expensive solution generalized eigenproblem method may faster delivering nal result 
ffl quality eigenvector approximation determined eigenvalue approximation gap eigenvalue neighboring eigenvalues 
implementations msb methods constructing smaller meshes chaco example uses algorithms described section report similar nal results choice coarsening method critical 
multilevel partitioning multilevel spectral bisection algorithm described section turned eoecient 
multilevel approach obviously lot merit applied way 
partitioning geometric information psfrag replacements coarsen graph partition graph project refine graph multilevel graph partitioning msb transfer approximate information second eigenvector original graph levels improve information level nally eigenvector partition graph 
direct way simply transfer information partitions levels improve partitions level 
rough outline description successful algorithms multilevel graph partitioning 
algorithm multilevel graph bisection function ml partition small find partition way 
construct smaller approximation ml partition project partition re ne partition endif return multilevel partitioning delta delta delta delta delta delta delta delta deltaa oeae original graph weights contracted graph coarsening graph algorithm bisect graph idea partition graph parts 
family slightly dioeerent multilevel graph partitioning algorithms generic parts smaller partition ire projected way smallest graph partitioned 
describe solutions implemented software packages chaco metis 
coarsening algorithms lead graphs edge vertex weights start weighted graph 
coarsening graph methods coarser graph constructed similar ways 
nd maximal matching 
matching subset ae edges share endpoint 
matching maximal edges added 
matching new graph constructed way edge contract endpoints new vertex weight equals sum weights neighbors combined neighbors accumulated edge weights weight nonexistent edges assumed 
edge disappears 
see 
main dioeerence dioeerent implementations construction maximal matching 
simplest method suggested hendrickson leland randomized matching rm randomly selects tting edges partitioning geometric information matching maximal algorithm randomized matching rm unmark vertices set 
unmarked vertices left randomly select unmarked vertex mark unmarked neighbors randomly choose unmarked neighbor 
mark add edge look way coarser graph constructed notice edges matching lower levels 
total edge weight coarser graph equals edge weight original graph minus weight edges matching 
suggested decreasing total edge weight coarser graph lower cutsize cutsize original graph 
experiments con rmed assumption showed choice accelerated re nement process 
achieve karypis kumar slight modi cation rm algorithm called heavy edge matching hem 
choosing random neighbor line 
algorithm simply select unmarked neighbor connected heaviest edge 
problem approach vm delta delta delta delta delta delta missing heavy edge heavy edges 
vertex selected rst edge weight selected 
consequently heavier edge weight selected 
avoid gupta suggests sort edges weight choose heaviest permissible edge rst ties broken randomly 
calls method heaviest edge matching 
usually done stages coarsening process graphs considerably smaller sorting cheap 
furthermore heaviest edge matching particularly eoecient graph edges dioeerent weights 
weight appear coarsening steps 
multilevel partitioning basic strategies coupled methods improve coarser graph 
karypis kumar try decrease average degree coarser graph arguing fewer edges lead higher average edge weight turn help hem nd heavier edges 
modi ed heavy edge matching hem done choosing appropriate edge permissible edges maximal weight 
heavy triangle matching htm gupta tries contract vertices trying maximize weight connecting edges 
additionally tries keep weights coarsened vertices balanced modi ed edge weight fi gamma takes vertex weights account 
graph regarded completely connected additional edges having zero weight 
simpli es bisection nal graph 
partitioning smallest graph graph coarse usually jv say coarsening steps reduce graph little needs partitioned 
methods mentioned 
graph partitioned small eoeciency important 
try methods randomized method multiple times choose best result 
methods normally include graph growing spectral bisection just kernighan lin random starting partitions 
small graph vertices dioeerent weights 
impossible divide vertices partitions equal weight 
possible doing cause high cutsize 
advisable allow imbalance order improve quality cut 
imbalance reduced re nement steps 
program uses clever way eliminate need additional code partition smallest graph 
coarsening method tries keep weights coarsened vertices balanced simply graph normally vertices re nes 
saves partition vertices remember coarsening randomized repeats process saving currently best partition 
quality partition take partition size imbalance consideration 
small process cheaply repeated couple times best result chosen 
partitioning geometric information projecting re ning partition partition coarser graph need nd partition ner graph 
partition coarser graph ner 
vertex ner graph traced exactly vertex coarser graph vertices contracted new vertex simply copied coarser level 
having partitioned coarser graph simply assign vertices ner graph appropriate partitions 
ner graph nd better partition lower cutsize need re ne graph improving cutsize balance partitions dioeerent weight 
re nement usually done variants algorithm described section 
variant particular easily modi ed improve balance time adding term describing imbalance cost function nd vertex move 
changes include inner pass considering 
methods sections described common methods graph partitioning 
methods geometrically oriented graph cite 
methods specialized nite element meshes pdes 
tried apply general optimization techniques simulated annealing genetic algorithms partitioning problem 
nally addition software libraries mentioned programs available example party 
bibliography 
validity single processor approach achieving large scale computing capabilities 
afips proc 
volume pages 
barnard pothen simon 
spectral algorithm envelope reduction sparse matrices 
numerical linear algebra applications 
barnard simon 
fast multilevel implementation recursive spectral bisection partitioning unstructured problems 
concurrency practice experience feb 
barnard 
parallel multilevel recursive spectral bisection 
proceedings acm ieee supercomputing conference 
acm ieee 
published online cd 
berman plemmons 
nonnegative matrices mathematical sciences 
academic press 
berry hendrickson raghavan 
sparse matrix reordering schemes browsing hypertext 
renegar shub smale editors mathematics numerical analysis volume mathematics numerical analysis lectures applied mathematics pages 
ams 
online www cs utk edu berry order 
briggs 
multigrid tutorial 
siam 
chan gilbert 
teng 
geometric spectral partitioning 
technical report csl parc xerox jan 
chan ciarlet 
optimality median cut spectral bisection graph partitioning method 
siam journal scienti computing may 
chan 
sign cut version recursive spectral bisection graph partitioning algorithm 
lewis editor proceedings th siam conference applied linear algebra snowbird ut 
siam 
chartrand 
applied algorithmic graph theory 
international series pure applied mathematics 
mcgraw hill new york 
bibliography ciarlet lions 
handbook numerical analysis part finite element methods 
north holland amsterdam 
devine flaherty loy shephard 
load balancing parallel adaptive solution partial dioeerential equations 
applied numerical mathematics 
monien 
helpful sets improve graph bisections 
technical report tr rf 
informatik universit gh paderborn june 
monien 
load balancing strategies distributed memory machines 
technical report tr sfb universit gh paderborn sept 
rendl 
computational study graph partitioning 
mathematical programming 
university waterloo tech report corr 

simple eoecient automatic fem domain 
computers structures 
fiduccia mattheyses 
linear time heuristic improving network partitions 
technical report crd general electric corporate research development center ny may 
fiedler 
algebraic connectivity graphs 
mathematical journal 
fiedler 
property eigenvectors nonnegative symmetric matrices application graph theory 
mathematical journal 
fox williams 
parallel computing works 
kaufmann publishers 
freund nachtigal 
qmr quasi minimal residual method non hermitian linear systems 
numerical mathematics 
garey johnson 
computers intractability guide theory npcompleteness 
freeman 
gilbert miller 
teng 
geometric mesh partitioning implementation experiments 
siam journal scienti computing 
golub loan 
matrix computations 
johns hopkins university press baltimore london third edition 
gupta 
watson graph partitioning sparse matrix ordering package 
ibm research division watson research center box yorktown heights new york 
gupta 
fast eoeective algorithms graph partitioning sparse matrix ordering 
ibm journal research development 
hammond 
mapping unstructured grid computations massively parallel computers 
phd thesis rensselaer polytechnic institute dept computer science ny 
hendrickson leland 
multidimensional spectral load balancing 
proc 
th siam conf 
par 
proc 
sci 
comput 
hendrickson leland 
multidimensional spectral load balancing 
technical report sand sandia national laboratories 
proc 
th siam conf 
par 
proc 
sci 
comput 
hendrickson leland 
multilevel algorithm partitioning graphs 
technical report sand sandia national laboratories 
appeared proc 
supercomputing 
hendrickson leland 
empirical study static load balancing algorithms 
proceedings scalable high performance computer conference pages 
ieee 
hendrickson leland 
chaco user guide version 
sandia national laboratories albuquerque nm 
hendrickson leland 
improved spectral graph partitioning algorithm mapping parallel computations 
siam journal scienti computing 
horn johnson 
matrix analysis 
cambridge university press 
jerrum sorkin 
simulated annealing graph bisection 
technical report ecs lfcs dept computer science university edinburgh 
johnson aragon mcgeoch schevon 
optimization simulated annealing experimental evaluation part graph partitioning 
operations research nov 
karypis aggarwal kumar shekhar 
multilevel hypergraph partitioning applications vlsi domain 
technical report university minnesota department computer science 
short version th design automation conference 
bibliography karypis kumar 
metis graph partitioning sparse matrix ordering system version aug 
karypis kumar 
parallel multilevel way partitioning scheme irregular graphs 
technical report tr university minnesota department computer science 
karypis kumar 
fast high quality multilevel scheme partitioning irregular graphs 
siam journal scienti computing 
kernighan lin 
eoecient heuristic procedure partitioning graphs 
bell system technical journal 
kumar gupta karypis 
parallel computing 
benjamin cummings redwood city ca 

liu 
kuo 
huang 
cheng 
gradient method initial partition algorithm 
ieee acm int 
conf 
computeraided design pages 
ieee acm nov 

laplacians matrices graphs survey 
linear algebra applications 
miller 
teng thurston vavasis 
automatic mesh partitioning 
george gilbert liu editors graph theory sparse matrix computation volume ima volumes mathematics applications pages 
springer 
miller 
teng thurston vavasis 
geometric separators nite element meshes 
siam journal computing mar 
paige saunders 
solution sparse inde nite systems linear equations 
siam journal numerical analysis 
pellegrini 
users guide 
universit bordeaux aug 
pothen rothberg simon wang 
parallel sparse cholesky factorization spectral nested bisection ordering 
technical report rnr numerical aerospace simulation facility nasa ames research center may 
pothen simon 
liou 
partitioning sparse matrices eigenvectors graphs 
siam journal matrix analysis applications july 
pothen simon wang 
spectral nested 
technical report rnr nasa ames research center 
short version supercomputing pp 
nov 
pothen 
graph partitioning algorithms applications scienti computing 
keyes sameh editors parallel numerical algorithms 
kluwer academic press 

party partitioning library user guide version 
sfb univ paderborn 
rendl wolkowicz 
projection technique partitioning nodes graph 
annals operations research 
rothberg hendrickson 
sparse matrix ordering methods interior point linear programming 
technical report sand sandia national laboratories jan 
saad schultz 
gmres generalized minimal residual algorithm solving nonsymmetric linear systems 
siam journal scienti statistical computing 
saad 
iterative methods sparse linear system 
pws publishing boston ma 
simon 
teng 
recursive bisection 
siam journal scienti computing sept 

optimized partitioning unstructured nite element meshes 
international journal numerical methods engineering 
van 
algorithms static dynamic load balancing parallel computers 
phd thesis ku leuven nov 
walshaw 
dynamic load balancing pde solvers adaptive unstructured meshes 
research report series university leeds school computer studies dec 
walshaw cross everett johnson 
partitioning mapping unstructured meshes parallel machine topologies 
ferreira editors irregular parallel algorithms irregularly structured problems volume lncs pages 
springer 
walshaw cross everett johnson 
partitioning unstructured meshes massively parallel machines 
editor parallel computational fluid dynamics new algorithms applications pages amsterdam 
elsevier 
bibliography walshaw cross everett 
dynamic mesh partitioning uni ed optimisation load balancing algorithm 
technical report im school mathematics statistics computer science university greenwich 
walshaw cross everett 
localised algorithm optimising unstructured mesh partitions 
international journal supercomputer applications 
walshaw cross everett 
algorithm optimising mesh partitions 
technical report im school mathematics statistics computer science university greenwich jan 
williams 
performance dynamic load balancing algorithms unstructured mesh calculations 
concurrency 
