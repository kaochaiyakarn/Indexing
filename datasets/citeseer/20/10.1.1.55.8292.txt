moving objects databases issues solutions ouri wolfson bo xu sam chamberlain jiang consider database represents information moving objects location 
example database representing location taxi typical query may retrieve free currently mile michigan ave chicago pick customer 
military moving objects database applications arise context digital battlefield civilian industry arise transportation systems 
currently moving objects database applications developed ad hoc fashion 
database management system dbms technology provides potential foundation develop applications dbms currently purpose 
reason critical set capabilities needed moving objects database applications lacking existing dbms 
objective databases moving objects domino project build envelope containing capabilities top existing dbms 
describe problems proposed solutions 
consider database represents information moving objects location 
example database representing location taxi typical query may retrieve free currently mile michigan ave chicago pick customer database typical query may retrieve trucks currently mile truck abt needs assistance database representing current location objects battlefield typical query may retrieve friendly helicopters region retrieve friendly research supported part army research labs daal nsf iri darpa nato crg hughes research labs gift department electrical engineering computer science university illinois chicago il wolfson eecs uic edu fax department electrical engineering computer science university illinois chicago il eecs uic edu army research laboratory aberdeen proving ground md department electrical engineering computer science university illinois chicago il eecs uic edu helicopters expected enter region minutes 
queries may originate moving objects stationary users 
refer applications characteristics moving mod applications queries ones mentioned mod queries 
military mod applications arise context digital battlefield see civilian industry arise transportation systems 
example developed qualcomm see commercial system transportation industry enables mod functionality 
provides location management connecting vehicles trucks satellites databases 
vehicles equipped global positioning system gps automatically periodically report location 
currently mod applications developed ad hoc fashion 
database management system dbms technology provides potential foundation develop mod applications dbms currently purpose 
reason critical set capabilities needed mod applications lacking existing dbms 
discussion needed capabilities 
ffl location modeling existing dbms equipped handle continuously changing data location moving objects 
reason databases data assumed constant explicitly modified 
example salary field salary assumed hold returned response queries explicitly updated 
order represent moving objects vehicles database answer queries location vehicle location continuously updated 
unsatisfactory location updated frequently impose serious performance overhead answer queries outdated 
furthermore assuming location updates generated moving objects transmitted wireless networks frequent updating impose serious wireless bandwidth overhead 
ffl issues generally query mod applications involves spa tial objects points lines regions polygons temporal constraints 
consider example query retrieve objects intersect polygon minutes 
spatial temporal range query 
spatial range polygon temporal range time interval minutes 
similarly spatio temporal join queries retrieve pairs friendly enemy aircraft come miles time happen 
traditional query languages sql inadequate expressing queries 
spatial temporal languages studied database research community types languages studied independently mod databases integrated 
furthermore spatial temporal languages developed data models inappropriate mod applications due example modeling problem mentioned 
ffl indexing observe number moving objects database may large big cities millions inhabitants 
performance considerations answering mod queries avoid examining location moving object database 
words index location attribute 
problem straightforward spatial indexing purpose continuous change locations implies spatial index continuously updated 
clearly unacceptable solution 
ffl uncertainty imprecision location moving object inherently imprecise regardless policy update database location object stored database database location identical actual location object 
inherent uncertainty various implications database modeling querying indexing 
example range queries different kinds answers set objects may satisfy query set satisfy query 
different semantics provided queries 
approach compute probability object satisfies query 
uncertainty databases studied extensively new modeling spatio temporal capabilities needed moving objects introduce need revisit existing solutions 
additionally existing approaches deal uncertainty assume uncertainty information associated raw data stored database 
initial uncertainty obtained 
mod applications question quantify location uncertainty 
quantify tradeoff updating overhead uncertainty imprecision penalty frequently moving object update location 
handle possibility moving object disconnected send location updates 
critical set capabilities integrated adapted built top existing dbms order support moving objects databases 
objective databases moving objects domino project build envelope containing capabilities top existing dbms 
key features approach 
ffl dynamic attributes opinion key overcoming location modeling problem enable dbms predict location moving object 
moving object updates database provides current location expected locations 
example dbms knows speed route moving object compute location point time additional updates 
propose data model called moving objects spatio temporal short model 
novelty concept dynamic attribute attribute value changes continuously time progresses explicitly updated 
example location vehicle dynamic attribute consists motion information north route miles hour 
words devise higher level data abstraction object motion information location represented attribute object 
obviously motion information object change dynamic attribute needs updated cases frequently location object 
devised mechanisms incorporate dynamic attributes existing data models capabilities added existing query processing systems deal dynamic attributes 
ffl spatial temporal query language introduced temporal query language called temporal logic ftl query trigger specifications moving objects databases 
language natural intuitive formulating mod queries uses spatial operators object inside polygon temporal operators eventually 
developing algorithms processing ftl queries databases dynamic attributes 
implemented ftl prototype running top sybase top ms access 
ffl indexing dynamic attributes propose paradigm indexing dynamic attributes 
indexing problem decomposed sub problems geometric representation dynamic attribute value moving object speed initial location starting time multidimensional time space second spatial indexing geometric representation 
geometric representation subproblem concerns question construct multidimensional space map object precisely dynamic attribute value region line point space map query region space result query objects regions intersect query region 
object region updated dynamic attribute explicitly updated speed object changes continuously 
spatial indexing subproblem concerns question find intersection regions mentioned efficient way 
subproblem solved existing spatial indexing method open problem method appropriate particular geometric representation dynamic attribute values distribution 
devised solutions geometric representation subproblem value time space representation intercept slope space representation 
ffl uncertainty imprecision management extended data model query language indexing method address uncertainty problem 
data model extended enabling provision uncertainty interval dynamic attribute 
specifically point time location moving object point uncertainty interval interval computable dbms 
dbms replies query requesting location moving object answer route location error deviation miles 
bound deviation miles answer provided moving object object commits send location update deviation reaches bound 
ftl language extended 
kinds semantics may semantics incorporated processing algorithms adapted semantics 
indexing method extended enable retrieval moving objects particular region moving objects may 
addressed question determining uncertainty associated dynamic attribute bound mentioned 
proposed cost approach captures tradeoff update overhead imprecision 
location imprecision encompasses related different concepts deviation uncertainty 
deviation moving object particular point time distance actual location time database location time answer deviation distance actual location 
hand uncertainty moving object particular point time size interval object possibly 
answer uncertainty miles 
deviation cost penalty terms incorrect decision making uncertainty 
deviation uncertainty cost proportional size deviation uncertainty 
tradeoff imprecision update overhead captured relative costs uncertainty unit deviation unit unit 
cost model propose update policies establish uncertainty bound way minimizes expected total cost 
furthermore propose update policy detects disconnection moving object additional cost 
ffl simulation testbed building simulation testbed performance moving objects database application evaluated 
input simulation system set moving objects trajectories speed variations time costs deviation cost uncertainty cost communication wireless bandwidth distribution geographic area location update policy moving object 
objective determine performance mod queries answer questions objects supported average imprecision bounded wireless bandwidth allocated location updates bounded 
moving objects bound imprecision percentage bandwidth location updates 
rest organized follows 
section data model 
section discuss ftl query language 
section discuss indexing dynamic attributes 
section discuss extensions solutions address uncertainty problem 
propose update policies discuss results comparison simulation 
section prototype implementation 
section discuss relevant section discuss 
data model traditional dbms data assumed constant explicitly modified 
order represent moving objects cars database answer queries location far car license plate nearest hospital 
car location continuously updated 
unacceptable location updated frequently impose serious performance overhead answer queries outdated 
furthermore possible due disconnection object continuously update location 
propose solve continuously changing location problem representing location function time changes time passes explicit update 
example location helicopter function motion vector north miles hour 
words consider higher level data abstraction object motion vector represented attribute object 
obviously motion vector object change cases frequently location object 
propose data model called moving objects spatiotemporal short 
main contribution concept dynamic attributes attributes change continuously function time explicitly updated 
words answer query depends database contents time query entered 
contrast static attribute object attribute traditional sense changes explicit update database occurs 
formally dynamic attribute represented sub attributes function function function single variable value 
value dynamic attribute depends time defined follows 
time value update value time positive number function 
explicit update dynamic attribute may change value sub attribute function sub attribute sub attributes 
concerned dynamic attributes represent spatial coordinates model hybrid systems dynamic attributes represent example temperature fuel consumption 
moving object model location attribute dynamic attributes update value function update time representing coordinates object respectively concepts results extended motion threedimensional space 
object updates location speed changes 
straight forward objects move freely space aircraft 
inefficient may generate updates objects moving winding route turn constitute change function function 
address problem extend dynamic attribute concept include route follows 
location attribute dynamic attribute sub attributes route speed 
route pointer line spatial object indicating route object moving 
coordinates point route location moving object time time location update 
speed linear function form delta defined speed moving object gives current distance starting location function time elapsed 
location time point route distance speed delta point coordinates 
ftl language nontemporal query query pertains time retrieve objects currently inside polygon 
regular query language sql oql spatial predicates nontemporal queries moving objects 
consider example temporal query retrieve pairs objects distance stays miles enter polygon 
expressing temporal query cumbersome sql oql 
assume predicate functions time time give times time interval satisfied assume denotes current time 
query expressed follows sql oql 
retrieve moving objects time dist time dist time inside inside 
dist inside spatial methods 
dist returns distance inside indicates inside ftl query language enables natural specification queries queries pertaining states system modeled 
language system designed installed top existing dbms ftl language assumes underlying nontemporal query language provided dbms 
ftl language dependent specific underlying query language words installed top dbms 
formulas queries ftl basic temporal operators nexttime formula form satisfied state cases holds satisfied state exists state history route distance points give route distance route points 
assume straightforward compute route distance points point route distance point 
satisfied continues satisfied 
formula form nexttime satisfied state formula satisfied state history 
ftl query expressed follows retrieve dist inside inside temporal operators eventually expressed terms basic operators 
temporal operator eventually asserts satisfied state defined true temporal operator asserts satisfied states including state defined eventually ftl language uses bounded temporal operators pertain real time ffl eventually asserts formula satisfied time units 
ffl eventually asserts holds units time 
ffl asserts formula holds continuously units time 
ffl asserts exists instance units time holds continues satisfied 
system query specified syntax retrieve target list 
condition 
condition 
ftl formula 
example query retrieves objects enter polygon units time attribute price 
retrieve rice eventually inside query retrieves objects enter polygon units time stay units time 
ii retrieve eventually inside inside query retrieves objects enter polygon units time stay units time units time enter polygon 
iii retrieve eventually inside inside eventually inside developed algorithm evaluating ftl queries model 
due space limitations detailed description algorithm omitted 
see complete presentation 
indexing dynamic attributes section address issue indexing dynamic attributes 
objective enable answering range queries form retrieve objects currently inside polygon retrieve objects dynamic attribute value range time obviously examining objects 
problem straight forward spatial indexing objects continuously changing locations spatial index continuously updated clearly unacceptable solution 
identified paradigm solution 
indexing problem decomposed subproblems geometric representation moving objects indexing geometric representation 
geometric representation concerns question construct space call representation space map moving object query region line point space result query set objects region intersects query region 
sub problem indexing geometric representation addresses question find result intersection efficient way 
sub problem probably solved efficiently existing spatial access methods see survey 
far mainly addressed sub problem 
discuss representations value time representation space intercept slope representation space 
ffl value time representation space method plots functions representing way dynamic attribute changes time 
representation space method constructed axis representing time axis representing value dynamic attribute 
object mapped trajectory plots location function time 
range query form retrieve objects attributes value range time vertical line segment points see 
way answer set consists objects trajectories intersect query line segment 
ffl intercept slope representation space intercept slope query intercept slope space representation constitute answer time value query value time space representation constitute answer 
geometric representations range query 
consider object location function time vt called intercept called slope 
representation space constructed axis representing intercept axis representing slope 
object mapped point space 
range query parallelogram representation space see 
way answer set consists objects represented points inside parallelogram 
observe methods representation object space updated sub attributes location dynamic attribute explicitly updated 
argued method efficient querying efficient updating second method opposite true 
space considerations omit discussion claim 
methods works freely moving objects 
open issue find efficient geometric representations objects move routes 
uncertainty management location moving object inherently imprecise regardless policy update database location moving object object location stored database database location identical actual location object 
uncertainty various implications database modeling querying indexing 
section extend data model represent uncertainty database location subsection adapt ftl language indexing method process may queries 
subsection discuss cost approach determine update location 
data modeling order model uncertainty database location define deviation concept 
general deviation value dynamic attribute particular point time difference actual value time database value value stored database time way modeling uncertainty provide bound deviation 
point time moving object dbms know bound moving object commits send update deviation reaches bound 
bound mile dbms answer query current location answer current location deviation mile 
answer uncertainty area circle radius mile 
observe freely moving object uncertainty area circle radius mile object moving route uncertainty interval route point mile point mile ahead 
bound deviation additional sub attribute called uncertainty 
observe proposed method model deviation speed moving object speed miles hour 
similarly method model constraint indicates moving object go backwards long object uncertainty interval location time location time gamma 
problems addressed extension model omit discussion 
query language consider query retrieve objects inside polygon 
uncertainty database location different kinds semantics query may 
may semantics answer set objects possibly inside objects uncertainty interval intersects semantics set objects definitely inside objects uncertainty intervals entirely inside see 
incorporated may semantics ftl language query processing algorithm 
may uncertainty interval object uncertainty interval object 
may semantics general way dealing uncertainty problem associate probabilities answers queries 
example answer query say object inside probability object inside probability 
observe queries pertain time may queries tentative sense 
consider query retrieve airplanes come miles airport minutes 
suppose answer query contains airplane possible answer user motion vector changes way steers away airport database updated reflect change 
come miles airport minutes 
sense answer queries tentative regarded correct currently known real world knowledge motion vector change 
indexing semantics queries enriched indexing extended efficiently process queries form retrieve objects inside polygon time retrieve objects may inside polygon time 
subsection discuss extension value time representation space see section deal uncertainty 
construct plane called plane represent location attribute moving object plane set uncertainty intervals uncertainty interval time unit see 
represented line trajectory object represented plane 
words time value location attribute interval point 
range query line segment 
answer query set objects uncertainty intervals time lie inside entirety 
answer query set objects uncertainty intervals time intersect uncertainty communication tradeoffs moving objects databases database location deviates actual location moving object frequent updates query plane time 
object traveling axis 
uncertainty interval time query represented solid line interval retrieve objects time reduce deviation 
clearly tradeoff imprecision sense higher number updates lower imprecision vice versa 
model subsection imprecision captured bound deviation 
main issue addressed subsection determine bound denoted uncertainty 
take cost approach solve problem 
information cost trip information cost trip components ffl deviation cost deviation cost penalty result incorrect decision making 
observe cost deviation depends size deviation length time persists 
depends size deviation decision making clearly affected 
see depends length time deviation persists suppose query retrieves location moving object time unit 
deviation persists time units cost twice cost deviation persists single time unit reason queries pay deviation penalty 
formally moving object cost deviation time points deviation cost function denoted cost function variables maps deviation time points nonnegative number 
take penalty unit deviation unit time 
cost deviation time points cost dt deviation function time 
ffl update cost update cost denoted nonnegative number representing cost location update message sent moving object database 
update cost may differ moving object may vary single moving object trip due example changing availability bandwidth 
update cost units deviation cost 
particular update cost means ratio update cost cost unit deviation unit time means moving object system willing messages order reduce deviation unit time 
ffl uncertainty cost uncertainty cost penalty higher uncertainty conveys information answering query 
observe deviation cost uncertainty depends size uncertainty length time persists 
formally moving object cost uncertainty time points uncertainty cost function denoted cost define uncertainty unit cost penalty unit uncertainty unit time denote ratio cost unit uncertainty cost unit deviation 
cost uncertainty moving object time points cost dt value uncertainty function time 
ready define information cost trip taken moving object timestamps consecutive location update messages 
information cost half open interval cost cost cost total information cost trip cost cost cost cost time points update messages sent time point trip started time point trip ended 
descriptions update policies objective location update policies discuss set deviation bound threshold moving object uncertainty total information cost minimized 
due space limitations outline main ideas update policies 
complete discussion see 
ffl speed dead reckoning sdr policy 
trip moving object sends dbms uncertainty value selected ad hoc fashion stored uncertainty remains fixed duration trip 
object updates database deviation exceeds uncertainty update simply includes current location current speed 
ffl adaptive dead reckoning adr policy 
adr policy moving object provides update new uncertainty value th computed cost approach 
th minimizes total information cost sum update cost deviation cost uncertainty cost 
location update time order compute new uncertainty value predicts behavior deviation 
uncertainty values differ update update predicted behavior deviation different 
analysis indicates optimum uncertainty value ac approximated slope deviation update cost uncertainty unit cost 
ffl disconnection detection dead reckoning policy 
problem model moving object may disconnected unable generate location updates 
words dbms thinks updates generated deviation exceed uncertainty value actual reason moving object disconnected 
cope problem introduce third policy disconnection detecting dead reckoning 
policy uses novel technique decreases uncertainty value purpose disconnection detection 
uncertainty value continuously decreases time location update passes 
value time unit update value second time unit sdr speed example average speed update average speed trip speed predicted knowledge terrain 
comment holds policies discussed section 
update value third time unit object connected increasingly generate update 
conversely moving object generate update time update passes increasingly moving object disconnected 
policy computes minimizes total information cost sum update cost deviation cost uncertainty cost 
contrast policies observe sdr uncertainty values fixed location updates 
adr uncertainty values fixed pair consecutive updates may change pair pair 
uncertainty value decreases period time pair consecutive updates increases 
simulation results conducted numerous simulations compare information cost location update policies 
parameters simulation update unit cost cost location update message uncertainty unit cost deviation unit cost speed curve function period time gives speed moving object point time 
built simulation testbed enables compare policies terms number messages deviation uncertainty 
compared simulating policies adr sdr 
comparison done quantifying total information cost policy large number combinations parameters 
simulations indicate adr superior sdr sense lower equal information cost value update unit cost uncertainty unit cost deviation unit cost 
adr superior sense difference costs policies quantifies cost detection 
parameters combinations information cost sdr times high adr 
prototype design implemented prototype packages capabilities discussed mod applications 
prototype implements capabilities added central dbms support mod applications software moving object simulation system evaluate cost location update policies 
shown prototype subsystems query processing subsystem moving object subsystem mos policy simulation subsystem pss update policies subsystem ups 
built subsystems modular fashion independently time combined various ways different functional packages 
ffl query processing subsystem central database ftl simulation gui data generator policy evaluator sdr adr moving object subsystem query processing subsystem policy simulation subsystem update policy subsystem gps local database query gui policy triggers 
architecture domino prototype implemented data model ftl language top sybase ms windows 
query gui enter ftl queries triggers view query results 
query trigger examined possibly modified ftl system answer dbms returned user 
detailed discussion modifications queries answers underlying dbms see 
current prototype central database updated location moving objects 
intend consider case location database distributed partially replicated moving objects 
ffl moving object subsystem mos mo subsystem prototypes local system moving object 
implements update policies database triggers 
current location object kept local database updated gps fixed rate sec 
local database managed dbms supports triggers currently informix universal server 
trigger fires updates central database deviation bound reached 
trigger invokes subsystem compute new deviation bound 
ffl update policies subsystem ups subsystem implements update policies evaluation algorithms 
enables definition new policies affecting parts system 
ffl policy simulation subsystem pss pss intended evaluate different update policies terms total cost information number updates uncertainty deviation 
uses input speed curve curve gives speed function time 
simulation gui allows users enter speed curve plotting screen 
speed curve update policy update cost uncertainty unit cost ps subsystem executes simulation run 
run computes information cost single number policy curve 
policy pss averages information cost speed curves plots average function update cost simulation run executed follows 
sequence actual speeds time unit 
pss simulates moving object computer working particular update policy 
done follows 
time unit uncertainty value th database speed actual speed 
actual speed speed curve 
deviation particular point time difference integral actual speed function time integral database speed integrals taken time update 
denote sequence deviations time unit 
denote sequence uncertainty values thresholds time unit 
deviation time reaches uncertainty value pss generates update record consisting current time current location current speed uncertainty adr computed explained previous section deviation time zero 
denote sequence update records 
pss computes total cost deviation denoted compute total cost updates computes total cost uncertainty information cost policy speed curve location update ps subsystem invokes subsystem compute new deviation bound 
ps subsystem keeps speed files simulation results provides tools aggregate simulation results 
addition ps subsystem allows user modify parameters simulation run 
rest section discuss subsystems combined different functional packages 
working making packages available www 
ffl policy simulation update policies combination provides update policy simulation testbed got simulation results discussed subsection 
remember information cost update policy computed equation time interval consecutive update points 
ffl moving object update policies combination prototypes moving object real life 
generate location updates moving object 
ffl moving object update policies query processing combination query set real moving objects 
location data generated moving object 
mo subsystem updates central database deviation bound reached invokes subsystem compute new bound 
qp subsystem query central database 
ffl comprehensive simulation intend integrate current simulation testbed gis geographic information system manages geographic region model wireless bandwidth allocation region 
provide comprehensive simulation driven prototype evaluate capacity mod system answer query mobile units supported level location accuracy percentage available bandwidth location updates bandwidth necessary support accuracy objects 
evaluating performance queries triggers centralized distributed environment 
relevant best knowledge project critical issues moving objects databases systematically addressed 
furthermore issues fit neatly established field research 
research areas relevant project 
area research relevant model language temporal databases 
main difference approach temporal database works large works assume database varies discrete points time updates values database attributes constant uses interpolation functions extent 
contrast assume dynamic attributes change continuously consequently temporal data model different data model 
clear temporal extensions deal incomplete information see applicable context 
temporal languages ftl query databases 
language query processing algorithm modified handle dynamic attributes 
relevant area spatial databases see 
area defining processing spatial operators discussed section 
relevant uncertainty databases see surveys 
far know area far addressed complementary issues ones 
current addresses question uncertainty initially associate location moving object 
contrast existing works concerned management reasoning uncertainty uncertainty introduced database 
works important query processing goes may semantics 
body relevant constraint databases see survey notable systems constraint databases separately applied temporal domain spatial domain 
constraint databases framework implement dynamic attributes 
constraint adapted provide single value point time values changing time 
adapted movement routes uncertainty see 
interesting relevant approach modeling location moving objects taken 
contrast approach addresses tracking moving objects querying current locations approach pertains past histories moving objects 
modeling viewpoint different address indexing imprecision uncertainty 
relevant research concerns location management mobile users cellular architecture see 
calling mobile user personal communication service pcs infrastructure locate cell user currently located 
works address problem allocating distributing location database database gives current cell mobile user lookup time update overhead minimized 
location user granularity cell sufficient purpose calling mobile user 
network cells fixed size 
wide area networks diameter cell ranges couple miles terrestrial architecture thousands miles satellite architectures 
words pcs communication location uncertainty fixed size cell 
happens mobile users covered cellular architecture desert storm battlefield cellular network large picking customer knowing location taxi cab miles may satisfactory 
cases existing location management satisfactory 
remains done order moving objects commercial reality 
intend extend directions ffl cases mod applications may interested location moving objects point time arrival destination particular deadline 
assume database arrival information object expected arrive minutes pm 
current results apply case 
believe carry 
need adjustments order handle increasing criticality better estimation capability pm deadline approaches 
ffl extend handle uncertainty moving objects report location location sensed possibly unreliable means 
case example enemy forces battlefield 
ffl extend query processing update policies environment central database database distributed moving objects 
efficient location replication strategies need developed distributed model 
ffl study implications network qos quality service update policies query processing 
relevant qos parameters available bandwidth message loss rate average message delay ffl intend integrate current simulation testbed gis geographic information system manages geographic region model wireless bandwidth allocation region 
provide comprehensive simulation driven prototype evaluate capacity mod system answer query mobile units supported level location accuracy percentage available bandwidth location updates bandwidth necessary support accuracy objects 
evaluating performance queries triggers centralized distributed environment 
believe world dynamic place geographic distances shrinking remote locations globe accessible new applications developed moving objects databases increasingly important 
abiteboul hull vianu 
foundations databases 
addison wesley 
alonso korth 
database system issues nomadic computing 
proceedings acm sigmod international conference management data may 
badrinath imielinski 
locating strategies personal communication networks 
workshop networking personal communications applications ieee globecom dec 
brodsky segal chen 
constraint object oriented database system 
manuscript 
chamberlain 
automated information distribution bandwidth constrained environments 
milcom conference 
chamberlain 
model battle command paradigm time come 
symposium research technology june 
snodgrass 
temporal deductive databases infinite objects 
acm symposium principles database systems march 
ed 
special issue temporal databases 
data engineering dec 
egenhofer 
interaction geographic information system spatial queries 
visual languages computing 
egenhofer 
extending sql cartographic display 
cartography geographic information systems 
egenhofer 
spatial sql query presentation language 
ieee transaction knowledge data engineering 
egenhofer 
spatial query language user interface considerations 
proc 
th int 
conf 
vldb 
erwig schneider 
spatio temporal data types approach modeling querying moving objects databases 
intensive workshop spatio temporal database systems 
jajodia sripada eds 
temporal databases research practice 
springer verlag 

gadia nair 
incomplete information relation temporal databases 
eighteenth vldb aug 
grumbach scholl 
spatial constraint database 
manuscript 
buchmann 
research issues spatial databases 
sigmod rec 

spatial database systems 
vldb journal 
ho akyildiz 
local anchor scheme reducing location tracking costs pcn 
st acm international conference mobile computing networking mobicom nov 
imielinski korth 
mobile computing 
kluwer academic publishers 
jain 
lin lo mohan 
caching strategy reduce network impacts pcs 
ieee journal selected areas communications oct 
kanellakis 
constraint programming database languages 
acm symposium principles database systems may 
koubarakis 
linear constraint databases indefinite spatiotemporal information 
intensive workshop spatio temporal database systems 
stephens yesha 
optimal location broadcast sources unreliable tree networks 
ieee international conference computers communications networks 
motro 
management uncertainty database systems 
modern database systems won kim ed addison wesley 

communicating limits 
www qualcomm com omni html 
samet 
design analysis spatial data structures 
addison wesley 
samet aref 
spatial data models query processing 
modern database systems won kim ed addison wesley 
segev shoshani 
logical modeling temporal data 
proc 
acm sigmod international conf 
management data 
shivakumar jannink widom 
user profile replication mobile environments algorithms analysis simulation results 
appear acm baltzer journal special topics mobile networks applications special issue data management 
sistla wolfson chamberlain dao 
modeling querying moving objects 
proceedings thirteenth international conference data engineering icde apr 
snodgrass ahn 
temporal databases 
ieee computer sept 
wolfson jiang sistla chamberlain deng 
updating probabilistic querying motion databases 
submitted publication 
