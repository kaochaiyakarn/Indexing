meta logic reconcile reactive rational agents robert kowalski department computing imperial college london sw bz uk doc ic ac uk outline attempt reconcile traditional artificial intelligence notion logic rational agent contrary notion reactive agent acts response conditions arise environment 
purpose tools meta logic programming define observation thought action cycle agent combines ability perform resource bounded reasoning interrupted resumed time ability act necessary 
traditional notion intelligent agent artificial intelligence rational agent explicit representations goals beliefs world 
beliefs typically include beliefs actions agent perform effects actions state world 
traditional notion intelligent agent challenged years contrary notion agent reacts conditions immediate environment 
reactive agent need possess explicit representation goals world model 
shall outline attempt reconcile conflicting views 
purpose extend notion knowledge assimilation kowalski kow tools meta logic programming combine assimilation inputs reduction goals subgoals execution appropriate subgoals actions 
expressed informal simplified procedural meta logic programming style definition top level logic agent take form cycle time observe input time assimilate input reduce current goals subgoals time steps perform requisite atomic action time cycle time 
parameter adjusts resources allocated rational processing goals relation allocated making observations performing actions 
parameter relatively small agent little time think acting 
behaviour updated version title appeared meta logic logic programming apt turini eds mit press pp 

similar reactive agent 
sufficiently large agent able generate complete plan act 
behaviour similar traditional rational agent 
intermediate values agent able plan steps ahead committing particular course action 
definition cycle predicate similar procedural characterisation deliberate agent genesereth nilsson gn 
important difference procedure theirs aim give definition procedural declarative interpretation spirit logic programming 
discussing cycle predicate greater detail discuss assimilation goal reduction 
knowledge assimilation integrity constraints knowledge assimilation outlined kowalski kow deals cases ffl input demonstrated knowledge base case state knowledge base identical current state 
ffl input part knowledge base demonstrate remaining part 
case state knowledge base input part current state knowledge base 
ffl input inconsistent knowledge base 
input knowledge base need revised restore consistency 
ffl input knowledge base logically independent 
case input added knowledge base directly appropriate abductive explanation input added 
unfortunately knowledge assimilation quite different kind assimilation needs performed active resource bounded agent 
agent needs process inputs real time update knowledge base determine immediate action required respond input 
example representation sentence raining carry umbrella result agent attempting carry umbrella soon observing raining 
online processing inputs required top level cycle agent offline restructuring knowledge base conventional notion knowledge assimilation concerned 
remainder shall assume offline knowledge assimilation activity takes place parallel top level cycle agent times rate input low 
shall focus resource bounded assimilation inputs needs take place online 
example carrying umbrella rains typical kind knowledge active agent relate conditions observes actions performs 
examples readily come mind emergency press alarm signal button 
give seat needs 
pm reason stay awake go sleep 
natural formalise sentences means condition action production rules 
shall explore possibility formalised means integrity constraints 
integrity constraints database systems express obligations prohibitions states database satisfy 
conditions expressed sentences firstorder logic 
obligations prohibitions associated order sentences implicit semantics integrity constraints explicit written sentences deontic logic jones sergot js 
example formalise obligation carry umbrella raining integrity constraint holds rain holds carry self umbrella ordinary sentence knowledge base allow agent conclude carrying umbrella rains carrying umbrella 
integrity constraint sentence imposes obligation ordinary sentences establish holds independently integrity constraints 
done event putting umbrella happens starts raining preventing event putting umbrella raining 
simply add knowledge base sentence stating agent performing action 
see section assertion added knowledge base agent needs output action environment environment needs confirm attempted action successful 
distinction integrity constraints ordinary sentences intuitively clear different attempts give semantics integrity constraints formal characterisation 
deductive databases formalisations include theoremhood view lloyd topor lt integrity constraints theorems logical consequences completion database consistency view sadri kowalski sk consistent completion views integrity constraints understood epistemic reiter rei metalevel sadri kowalski sk statements database knows demonstrate 
despite differences formalisations proof procedures developed verifying integrity constraints generally treat goals satisfied similar practice 
exactly relationship interpretation production rules terms integrity constraints resembles transformation rashid ras 
exact relationship interpretation transformation needs investigated 
integrity constraints goals take operational semantics integrity constraints online assimilation inputs 
regard integrity constraints passive goals active triggered appropriate inputs 
sake simplicity assume integrity constraints stored knowledge base distinguished ordinary sentences syntax 
assume particular integrity constraints written form atomic formula complete conjunction constraints knowledge base satisfy holds 
operationally input matches unifies integrity constraint triggered resolved input appropriate instance resolvent added current search space goals 
formally simply ignoring unification define online assimilation inputs assimilate input constraint kb input input assimilate predicate expresses relationship holds states knowledge base search space goals observing input 
simplify definition assimilate matter convention lack input recorded input true 
predicate constraint expresses conjunction constraints hold input holds 
constraints assumed true 
result conventions constraint kb true true holds special case 
simplified representation integrity constraints assumes precompiled inputs trigger integrity constraints directly step intermediate deductions 
assumption simplifies definition assimilate cycle means unnecessary record forward deductions input resolved integrity constraints 
facilitates agent ability process inputs real time 
notice assumed integrity constraints written implications single atomic condition 
assumption relaxed various ways example allowing contain negative literals implications 
constraint written 

written 
false proof predicate demo resource bounded goal reduction agent needs perform formalised variant familiar demo predicate demo kb axiom kb demo kb demo kb demo kb demo kb demo kb true demo kb expresses demonstrated knowledge base kb axiom kb expresses clause represented explicitly axiom kb 
simplicity ambivalent syntax kowalski kim kk jiang jia 
considered propositional horn clause case 
non propositional case reduced propositional case standard definition unification adding clause demo kb demo kb forall substitute discussed kowalski kow 
predicate substitute holds results substituting term variable ignored processing integrity constraints 
proof procedures combine goal reduction integrity checking developed fung fun wetzel wet proposal kowalski kow 
definition non deterministic determined clause definition axiom knowledge base having needed demonstrate search necessary axiom performed non deterministic inference engine executes definition definition 
add extra argument indicate resources needed construct proof 
demo kb axiom kb demo kb demo kb demo kb demo kb demo kb true argument counts number steps proof number steps search proof 
count number steps search proof necessary represent search space explicitly 
done means deterministic definition demo predicate alternative branches search space represented means disjuncts demo kb rest definition kb demo kb rest demo kb true true demo kb true demo kb expresses search space goals reduced search space subgoals steps 
simplicity definition count resources needed select atomic subgoal find definition see example definition number steps involved executing definition may non trivial 
predicate definition kb expresses complete definition kb 
general case disjunction conditions clauses having addition having logical meaning disjunction interpreted infix list constructor terminated false 
disjunction final disjunct false 
particular clause kb just false 
abducible assumed true definition 
see actions performed agent represented abducible goals 
similarly interpreted infix list constructor terminated true 
conjunction final conjunct true 
particular defined clause condition clause taken true 
infix predicate predicate deterministically expresses logical equivalence arguments 
procedurally viewed selecting branch search space goal branch 
different deterministic definitions give rise different selection strategies turn give rise different strategies searching search space 
example definition gives rise prolog style depth search rest rest rest false rest rest rest rest rest true rest rest notice clauses definition append lists constructed clauses definition append lists constructed notice example definition distinguish abducible non abducible infix predicate simple identity defined clause 
demo predicate argument third parameter records state search space resources allocated goal reduction exhausted 
possible goals persist cycle execution demo predicate resume additional resources available cycles 
cycle predicate formulate recursive clause cycle predicate precisely formally cycle kb goals observe input assimilate kb goals input kb goals demo kb goals goals try action kb goals kb goals cycle kb goals time parameter local agent behaves internal clock time stamp inputs outputs recorded knowledge base 
sake simplicity assumed time measured terms inference steps inference step takes unit time 
simplicity assumed observing assimilating input trying atomic action take time unit 
constant amount resource available goal reduction elaborate version cycle predicate computed agent varying manner appropriate circumstances 
try action predicate analyses search space goals goals determine contains action agent try execute 
cases ffl action attempt execute succeeds 
case agent commits branches search space goals compatible successful performance action 
action recorded knowledge base 
ffl action attempt execute fails 
case branch containing action discarded 
failure action recorded knowledge base 
ffl action case search space goals unchanged 
goals 
abducible goals treated demo true replaced true 
catering abducibles done modifying definitions demo leave details reader 
case try action defined incorrectly earlier version 
try action predicate defined formally follows try action kb goals kb goals goals self act rest try act result result success goals rest alts kb self act kb try action kb goals kb goals goals self act rest try act result result failure goals kb self act false kb try action kb goals kb goals act rest goals self act rest goals goals kb kb goal try act result abducible sense definition kb 
alternatively may viewed having definition held externally environment 
second view similar query user sergot ser 
operationally calls predicate clauses select branch search space branches containing action agent try execute time 
instantiates variable act concrete value 
partially instantiated goal try act result result variable available evaluation environment 
environment instantiates variable result values success failure 
result attempted action success agent records successful performance action knowledge base 
alternative goals alts retained contain successful action part alternative plans 
proof procedure appropriate integrity constraints recognise alternatives incompatible action evaluate false discard search space 
second clause definition deals case actions fail 
branch conjunction equivalent false containing selected failed action discarded agent enters cycle search space consisting remaining alternative branches 
failed performance action recorded knowledge base form integrity constraint 
note alternatively equivalently new goals goals left current goals goals evaluation failed action false subsequent discarding selected branch performed automatically proof procedure newly added integrity constraint 
notice definitions demo try action predicates neutral respect search strategy select branches search space 
backtracking failure possible search strategies compatible definitions 
possibility employ evaluation function evaluate alternative courses action represented alternative branches search space 
evaluation function direct search promising part search space definition demo select promising action definition try action 
evaluation function need taken account determining total amount resources consumed agent cycle 
see greater detail section branch self act rest subgoal selected attempted execution time represents partial plan accomplishing agent goals 
action associated subgoal represents step plan rest represents remainder plan 
depending resource available generating plan action needed rest contain detail rest plan 
resource detail agent behaves reactively 
resource detail agent behaves deliberately 
advantage deliberation allows agent look ahead compare alternative partial plans try promising alternative 
cases agent avoid trying unproductive action eventually lead failure 
disadvantage situations need perform action urgent simply time deliberation 
unpredictable planning waste time 
value parameter determines balance deliberation reactivity 
remarked useful parameter computed value depend circumstances 
balance deliberation reactivity depends kind knowledge represented knowledge base see section 
knowledge representation matters feasibility agent architecture outlined depends crucially way knowledge represented knowledge base 
represented particular way backward reasoning performed demo predicate generates plans forward direction starting action performed current state 
conventional logic representations actions effects behave way backward reasoning corresponds reasoning backwards time forward reasoning corresponds reasoning forwards time 
consider example goal going location 
typical logic representation kind normally associated situation calculus mccarthy hayes mh event calculus kowalski sergot ks employ frame axioms persistence axioms clause simplified form holds loc agent holds loc agent holds clear agent step sentence definition demo predicate reduce goals subgoals generate plans backwards starting action 
agent able execute action generates complete plan 
need representation go agent holds loc agent holds clear agent step go agent go agent holds loc agent includes current state goal state predicate 
parameter sufficiently larger regulating rate movement location 
representation backwards reduce goals subgoals generates plans forwards starting action plan 
interrupted time action generated try executing action part rest plan generated 
notice representation conventional axioms holds loc agent agent step agent step kind event calculus required example solve condition holds loc agent definition go 
crucial matter goal agent going time destination current location represented go self holds loc self notice definition go theory gives rise brute force search starting current location practice 
representation value sufficiently large allow generation complete plan agent move random totally ignoring destination agent behave effectively choice location definition go needs take destination account 
traditional ai approaches done heuristic functions evaluate alternatives search space select promising alternatives preference promising ones 
expert system approaches hand knowledge commonly incorporated object level knowledge base 
case done simply adding extra condition definition go restrict choice location distance destination closest locations clear time extra condition specified form holds clear dist dist converted conventional logic programming form standard ways 
logic multi agent systems preliminary version resource bounded logic agent architecture described implemented multi agent environment dq 
agents placed various initial locations rectangular grid goal going initial locations different destinations 
grid obstacles created agent temporarily blocking implementation confirmed expectation planning confers advantages purely reactive behaviour 
agent having sophisticated model behaviour agents environment obstacles created agents blocking totally unpredictable 
implementation written combination prolog programming logic cycle individual agents april programming interactions agents environment 
april mccabe clark mc symbolic language grown experience concurrent logic programming languages parlog 
discussion previous section showing inputs outputs implemented input output streams containing variables suggests implementation combining prolog concurrent logic programming language appropriate logical point view 
planning value simple multi agent experiment anticipate important applications predictions reliably 
predict agent needs model agents communicate agents avoid conflicts achieve common goals 
fact purpose modelling agents earlier proposed meta logic programming solve puzzle wise men kowalski kim kk 
begun investigate argumentation resolve conflicts different agents kowalski toni kt 
proposal outlined step development logic agent architecture 
firmly logic object level represent domain knowledge metalevel control observation thought action cycle important concessions anti logic reactive agent school 
particular unpredictable rational planning waste time interferes ability act effectively timely manner 
compared purely reactive architectures logic agent model exploit reliable knowledge avoid short term actions ultimately predictably fail achieve long term goals 
extended predictable exploiting meta logic reason agents allowing agents communicate negotiate ordinated plans action 
integrating extensions simplified agent model outlined important direction research 
important extensions considered 
investigate agents combined external observer behave single agent 
investigate goal oriented behaviour emerge property behaviour single agent collection agents 
needed extensions done meta logic combining theories brogi bt 
needs developed take integrity constraints goals subgoals actions account 
second extensions related integrity constraints obtain behaviour condition action rules 
turn related logic programming representations implications represent goals 
relationships need investigated take account properties emerge agents interact multi agent systems 
partly supported fujitsu laboratories 
am grateful krzysztof apt murray shanahan franco turini helpful comments earlier draft rodney brooks alan talks alerted problem investigated 
brogi mancarella pedreschi turini 
modular logic programming 
acm transactions programming languages systems 
bt brogi turini 
fully compositional semantics algebra logic programs 

appear theoretical computer science 
dq 
knowledge assimilation multi agent systems 
msc 
thesis imperial college london 
fun fung 
theorem proving approach constraint handling applications databases 
msc 
thesis imperial college london 
gn genesereth nilsson 
logical foundations artificial intelligence 
morgan kaufmann publishers 
jia jiang 
ambivalent logic semantic basis metalogic programming proc 
eleventh international conference logic programming pages 
js jones sergot 
characterisation law computer systems normative systems perspective 
ch 
meyer wieringa editors deontic logic computer science normative system specification chapter 
wiley 
kk kowalski kim 
metalogic programming approach multiagent knowledge belief 
lifschitz editor artificial intelligence mathematical theory computation pages 
academic press 
kow kowalski 
logic problem solving 
elsevier new york 
kow kowalski 
problems promises computational logic 
lloyd editor proc 
symposium computational logic 
springer verlag lecture notes computer science 
kow kowalski 
dual form logic programming 

lecture notes workshop honour jack minker university maryland 
ks kowalski sergot 
logic calculus events 
new generation computing 
kt kowalski toni 
argument reconciliation 
proc 
workshop legal reasoning international symposium fifth generation computer systems tokyo japan 
lt lloyd topor 
basis deductive database system 
journal logic programming 
mc mccabe clark 
april agent process interaction language 
proc 
ecai workshop agent theories architectures languages 
published springer verlag 
mh mccarthy hayes 
philosophical problems standpoint artificial intelligence 
machine intelligence 
ras rashid 
semantics class stratified production system programs 
journal logic programming 
rei reiter 
asking database knows 
lloyd editor computational logic pages 
springer verlag esprit basic research series 
ser sergot 
query user facility logic programming 
degano editors integrated interactive computer systems pages 
north holland press 
sk sadri kowalski 
application general purpose database integrity 
minker editor foundations deductive databases logic programming pages 
morgan kaufmann 
wet wetzel 
scheduling new constraint logic programming framework 
msc 
thesis imperial college london 
