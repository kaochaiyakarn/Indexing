experience report contributions sfmea requirements analysis lutz robert jet propulsion laboratory california institute technology pasadena ca experience report describes lessons learned software failure modes effects analysis sfmea requirements analysis critical spacecraft software 
sfmea process successful identifying ambiguous inconsistent missing requirements 
importantly sfmea process followed backward analysis somewhat similar fault tree analysis fta identified significant unresolved requirements issues 
issues involved complex system interfaces unanticipated dependencies 
results challenge current views limitations sfmea suggest efforts researchers integrate sfmea broader fta approach merit 

problem software programs onboard spacecraft autonomously detect identify oversee recovery spacecraft faults flight 
faults threaten spacecraft success scientific mission software responds faults considered critical development team 
fault standard definition defect hardware device component incorrect step process data definition computer program 
faults cause power loss excessive temperature tank interruption uplink loss scientific engineering telemetry detected handled onboard software 
requirements analysis critical software difficult software complex appear april colorado springs author mailing address dept computer science iowa state university ames ia 
highly coupled 
software responds faults dependent distributed software hardware components example single hardware fault may affect multiple software processes subject timing constraints example software provide quick recovery functionality 
properties correct complete specification requirements hard determine hard validate 
particular inadequate software responses extreme conditions boundary cases concern 
appropriate software responses anomalous hardware behavior unanticipated states invalid data signal saturation robustness issues resolved possible requirements phase 

approach experience report describes software failure modes effects analysis sfmea followed backward analysis somewhat similar fault tree analysis fta assist analyzing software requirements critical portions spacecraft software 
approach software modules spacecraft systems cassini galileo 
goals help reduce number failure modes minimize effect remaining failure modes search unanticipated failure modes 
failure mode defined physical functional manifestation failure 
failure defined inability system component perform required functions specified performance requirements limits 
software failure modes effects analysis extension hardware failure modes effects analysis 
procedure performing hardware standardized 
comparable standard performing sfmea documented 
ex ample technique similar sfmea called software error effects analysis development rendezvous software columbus free 
critical software required 
system safety analysis handbook provides brief non procedural description sfmea 
detailed description sfmea process applied project appears section 
embedded sfmea step requirements analysis process fig 

sfmea forward searching identify cause effect relationships unexpected data software behavior causes result failure modes effects 
example outdated sensor data cause prevent software commanding needed hardware reconfiguration effect 
note cause labeled fault descriptions sfmea useful consider unexpected anomalous data behavior strictly incorrect data behavior 
especially true sfmea performed requirements analysis fault early stage means concrete deviation expectations 

backward search technique examine possibility occurrence anomaly cause produced failure mode effect 
example root node backward search outdated sensor data 
case backward search circumstances lead outdated sensor data situation failed hardware continued provide inaccurate data software 
bad data due voting logic software veto needed recovery action 
demonstrating possibility new failure mode obsolete data preventing required actions requirements specifications improved 
failure mode eliminated change software requirements 
backward search similar fault tree analysis root node cause necessarily fault event 
fault tree analysis hand takes known fault hazard root works backward determine possible causes 
difference backward search fta software fta usually applied code backward search applied software requirements 
fault tree analysis previously documented detail description provided 
note backward search requirements analysis evaluates possibility occurrence likelihood 
requirements phase development insufficient knowledge provide numerical measurement probability occurrence 
identify unexpected data analyze enabling circumstances forward search cause failure modes backward search specification requirements software unexpected data behavior contributing possibility behavior 
overview analysis process 
integrating sfmea backward search experience strength sfmea identifying previously unknown failure modes strength backward search identifying combinations events circumstances cause hypothesized fault occur complementary 
current views regarding limited effectiveness sfmea supported results integrated sfmea backward search approach 
example sfmea described considering discrepant event fault time combinations events 
integrated backward analysis sfmea helped isolate combinations events circumstances lead undesirable states 
interesting cases failure mode identified sfmea previously known failure mode 
fta performed starting known failures requirement inadequacies remained hidden 
sfmea isolated cause bad input led undesired effect bad control decision 
backward search bad input reach software identified combination events unexpected interactions lead failure mode postulated sfmea 
results indicate integrate forward search effects typical sfmea backward search contributing causes typical fta merit 
example maier describes fault tree hazard analysis derive safety requirements robot control software 
failure modes effect criticality analysis performed documented software requirements 
maier finds major benefit lies preparatory activity fault tree construction 

mcdermid describes technique software safety analysis structured approach imaginative anticipation hazards 
approach concentrates information flows develops sets guide words prompt consideration hypothetical failures 
perform sfmea backward search consistent technique perform backward search causes consider effects hypothetical failure 
interesting compare effect ordering searches success analysis 
limited experience clear order steps significant 
example unanticipated failure modes identified backward search contributing causes preceded sfmea 

sfmea requirements analysis software failure modes effects analysis commonly design analysis 
sfmea effective requirements analysis case requirements specification provided sufficient detail 
requirements document contained pages english text data tables flowcharts describing software modules 
requirements specification defined new software system 
reuse software components previous systems 
simple stand software details documented requirements stage sfmea feasible design document exists 
complex embedded application spacecraft sfmea improved quality software requirements specification understanding software problem 
particular sfmea contributions requirements analysis 

early understanding requirements 
understanding software requirements huge task complex distributed system 
sfmea helped identify constraints imposed design parts system context embedded software operated 
constraints dependencies able incorporated requirements specification 

communication 
requirements specification document written system engineer handed design development team 
clear unambiguous complete document minimizes possibility misunderstanding juncture 
sfmea assisted effort 

error removal 
requirements errors especially interface requirements errors historically source persistent errors spacecraft development escaping detection system testing 
requirements errors involve unanticipated failure modes interface dependencies difficult detect 
sfmea able identify errors prior design decisions saving subsequent time effort 
sfmea known limitations disadvantages confirmed experience 
failure analysis methods sfmea timeconsuming tedious depends domain knowledge analyst accuracy documentation 
addition hardware complete list failure modes software assembled 
sfmea manual automatic method 
sfmea approach chosen part requirements analysis process project largely contributes systems approach requirements validation 
focuses ways software contribute system reaching undesirable state 
sfmea analyzes software response hardware faults malfunctioning sensors operator errors result bad input data inappropriate commands 
sfmea analyzes effect incorrect software actions software process issuing erroneous reconfiguration commands hardware components 
sfmea pays particular attention hidden dependencies interactions cause propagation erroneous data software modules 
way requirements analysis process exploits available domain expertise 
sfmea differs causal analysis fta sfmea postulates existence bad data unexpected behavior investigates effects anomaly correct functioning software module system 
data behavior corrupted manner arrival outdated sensor data abnormal termination software module primary concern point development 
focus sfmea consequences incorrect data inappropriate software activity 
especially appropriate requirements analysis judgments particular failure scenario credible shift development progresses 
effects bad data unexpected behavior shown acceptable confidence requirements enhanced 
examples acceptable effects bad data rejected software premature termination software module leaves system consistent state 
effects bad data unexpected behavior shown unacceptable backward search confirms possibility situation occur information fed back requirements development process 
examples unacceptable effects bad data control decision resulting erroneous issuance commands abnormal termination software module results global variable updated status variable indicates change 

sfmea process section describes process sfmea forward search fig 
performed spacecraft software modules 
additional description available 
detailed descriptions backward search available 
message passing model distributed system kinds failures generally represented communication failures process failures 
accordance model kinds failures analyzed sfmea software process 
assist analysis possible failures software tables constructed data table events table 
data table involves communication failures 
provides information needed analyze data dependencies software interface errors 
events table involves software process failures 
events table provides information needed analyze effects failures possibly caused software fails function correctly 
investigation faults tables consistent current classifications defects software type table data table table 
table evaluates effect receiving bad unexpected input data behavior process analyzed effect producing bad unexpected output data behavior processes data 
input data item read received software process output data item written output software process including application commands spacecraft subsystems faults postulated 
absent data lost missing messages absence sensor input data lack input output failure receive needed data missing commands missing updates data values data loss due hardware failures failure software process sensor send data needed correct functioning software module 

incorrect data bad data flags variables set values don accurately describe spacecraft state operating environment erroneous triggers limits delay timers erroneous parameters wrong commands output wrong parameters right commands spurious unexpected signals 

timing data wrong data arrive late accurate early accurate obsolete data control decisions data age inadvertent spurious unexpected transient data 

duplicate data redundant copies data data overflow data saturation 
data data description effect item fault type critical incorrect flag set unnecessary mode value true reconfiguration flag commanded non critical mode table 
data table example fault types data table includes description fault applied relevant data item effect locally globally subsystem system 
second type table events table table 
event occurs process executes event fault types postulated 
constitutes event depends level detail documentation provided usually considered single action perform calculation sample sensor value command antenna position 
requirements broken events design stage development critical requirements specified terms actions transformations inputs outputs occur 
types event faults 
halt abnormal termination open stuck hung deadlocked point event process 

omission event fails occur process continues execution jumps skips short 

incorrect logic event behavior wrong logic wrong branch logic reversed wrong assumptions state preconditions don cares aren truly event command issued wrong implement intent requirement 

timing order event occurs wrong time wrong order event occurs early premature system proper mode receive process late sequence events incorrect event precede event doesn occur iterative events occur intermittently regularly events occur occur iteratively 
fault types events table includes description fault local global effect 
event event fault type calculate pointer incorrect logic table description effect pointer points past table preventing reconfiguration table 
events table example sfmea tables concerns possibly vulnerable areas identified 
documented sufficient detail reader determine requirements needed changed 
effort performing sfmea expended reviewing sfmea tables see software lacked robustness failures 
step contact project personnel important distinguish ambiguous incomplete documentation actual requirements flaws 
including copies relevant documentation explicit memos expert opinions final reports encouraged rapid feedback results development process 

results issues identified sfmea completed cassini spacecraft software currently development 
detection resolution requirements issues described detail illustrate successes limitations forward backward search techniques 
addition results performed sfmea thirteen sfmea performed prior spacecraft galileo described provide supplementary context 
information unavailable regarding issues resulted changes requirements early results summarized 
issues sfmea performed current spacecraft resulted changes requirements specifications 
greatest interest involving unresolved requirements issues identified sfmea 
major issues involved interface requirements software modules historically difficult area requirements validation 
case requirements analysis undertaken led change requirements 
issues failure modes involving previously unanticipated scenarios inadequately handled existing requirements 
software 
bad data sent circumstances identified range cause software veto needed bad data outdated valid recovery data indicate software software shall request error error recovery failure mode 
error condition 
search backward forward search specification requirements 
example sfmea example fig 
sfmea identified cause effect relationship cause inaccurate data sensor effect prevention needed error recovery 
specifically inaccurate input data effect veto execution software response needed 
occur input data appeared healthy reflecting obsolete state 
finding cause effect relationship sfmea led backward speculative inquiry set circumstances existed software receive seemingly healthy obsolete data 
backward search cause obsolete data healthy range current interface requirements allowed obsolete data failed sensor continue sent software 
sensor failed healthy values data continue indefinitely allowing failure mode identified sfmea 
subsequently software requirements piece software passed sensor data module changed 
new requirement states software ensure data freshness distributing data sensor passed test 
interesting note new requirement indicated sfmea software sfmea performed software side data interface 
provides example integrating sfmea backward search enabling circumstances detect hidden interface errors 
case combination sfmea backward search uncovered latent requirement readily resolved prior design 
second example requirements concern sfmea backward search illustrates subtle intertwining requirements lead robust design 
failure mode involved race condition different requests error handling 
fuel tank occurred wrong software request won race software skip milder response non consumable resources latch valves proceed drastic response consumable resources pyro valves 
failure mode detected noting sfmea persistence limits timers time detected request fault handling triggered identical software modules 
normal operations correct timers start counting different pressures 
software modules start counting concurrently sfmea cause race condition ensue sfmea effect 
sfmea cause concurrent countdown root node backward search hypothetical occurrence happen software modules detected error time 
possible combination circumstances large tank occurs just prior simultaneous enabling software programs occurs spacecraft just achieved insertion orbit planet 
finding unanticipated failure mode sfmea led requirements change staggered enabling software programs prevent consequences remote undesirable state 
provides example sfmea combined backward search successfully investigate effects multiple coincident events anomalies requirements analysis 
additional issues identified sfmea prompted easier changes requirements specification 
documentation issues resulted update requirements specification 
involved underlying inadequacy software requirements additional requirements analysis needed 
probable sufficiently close reading requirements document means informed static analysis combined early analysis operational scenarios raise issues 
numbers parentheses indicate issues category 
ffl correct clarify documentation included adding rationales requirements documenting assumptions removing ambiguous statements 
example conditions message re sent unclear 
ffl resolve inconsistencies 
example inconsistent naming flags 
ffl add rules specifying proper operational usage 
example flight maneuvers take account error recovery software executed 
ffl add missing requirements 
example requirement disable portion software initial execution missing 
remaining issues raised sfmea result changes requirements specification 
main reasons ffl cost benefit tradeoff decisions developers multiple failure scenarios merit cost change ffl sfmea analyst error agreed existing requirements sufficed ffl issues disappeared side effect updates requirements ffl requirements cited missing fact documented case cross needed ffl stylistic disagreements section document requirement belonged 
similar results cassini spacecraft earlier sfmea performed portions software galileo spacecraft 
general sfmea emphasizes systems approach software analysis software responses hardware faults effects hardware software actions sfmea able uncover hidden dependencies components 
examples issues earlier sfmea include ffl unexpected interactions distributed software processes occur 
case additional bus commands required recognized sfmea postulated new failure mode 
ffl erroneous invocation software programs instances 
example software requirement ignore transient faults missing case 
ffl unexpected interaction redundant components nearly identical copies software resident prime backup processors led failure mode 
example required hardware reconfigurations omitted service routine invoked redundant components certain time interval 
ffl unexpected propagation results occur scenario current requirements 
meant programmed delay certain commands remote unit able reissued contrary intended behavior 
ffl unstated assumptions required correct behavior documented specifications 
example precondition checked assumed true settings switches occasionally false 
backward search explicitly performed connection earlier failure modes resulted analysis effects hypothesized anomaly sfmea analysis possibility anomaly occurring backward search 
interesting see applications software similarly contain elements forward backward searches 

lessons learned application sfmea followed backward analysis spacecraft software requirements 

sfmea usually employed design validation sfmea feasible useful requirements analysis large documented system 

integrating forward search approach sfmea backward search contributing causes enhances effectiveness sfmea 
particular previously unknown failure modes multiple coincident anomalies hidden dependencies software processes 
results challenge current view sfmea limited investigating known failure modes single failures simple deviations expected behavior 

experience tends validate efforts combine forward backward search techniques 
order analysis matters currently clear merits experimental study 
results performing forward search effects backward search contributing causes resolved issue answer question order cost effective 

biggest benefit combining sfmea backward search contributing causes discovery unknown failure modes requirements analysis 
issues needed requirements analysis understand resolve 
addition requirements issues significant change content requirements specifications missing ambiguous inconsistent requirements 
requirements issues probably combinations static analysis methods formal specification formal inspections construction operational scenarios probable new failure modes readily requirements analysis methods 
large documented projects recommend sfmea combination backward search effective way remove requirements errors add robustness requirements specification 
acknowledgments authors steven tyler robert early definition sfmea process jpl 
authors anna sarah ching chen tsai john day merlin dorfman reviewers valuable suggestions 
described carried jet propulsion laboratory california institute technology contract national aeronautics space administration 
specific commercial product process service trademark manufacturer constitute imply endorsement united states government jet propulsion laboratory california institute technology 
cha leveson safety verification murphy fault tree analysis proc th int conf eng apr singapore 
mcdermid integrated tool set software safety analysis jss 
software error effects qualitative design tool ieee symp comp rel 
ieee std glossary eng terminology ieee std 
lamport lynch distributed computing models methods formal models semantics vol 
handbook theoretical computer science elsevier 
leveson system safety computers addison wesley 
lutz analyzing software requirements errors safety critical embedded systems jss appear 
maier fta support safe design embedded software safety critical systems csr th annual wkshp safety rel sys belgium 
mcdermid development hazard analysis aid software design proc compass jun gaithersburg md pp 

procedures performing failure mode effects criticality analysis mil std nov 
software failure modes effects analysis ieee trans rel aug 
software failure modes effects analysis software product assurance handbook jpl 
system safety society system safety analysis handbook july 
strategy identification development safety critical software embedded complex space systems pp 

