visual support modularization object oriented systems christoph hofmann institut fur informatik technische universitat munchen munchen introduce visual approach finding modularization object oriented systems 
regard modularization system partitioning class belongs exactly module 
modularization requires class dependencies local module possible mirrors known quality principles strong module cohesion weak module coupling 
approach kinds inter class dependencies explicitly described system specification relations classes ii global state invariants constraining state objects belonging different classes iii global system operations change objects different classes atomic step 
modularization uniquely determined general common rules system partitioning support difficult development task needed 
algorithm takes class dependencies clustering classes strong affinity dependencies visualize result dimensional graph explicitly represents class dependencies vertices edges 
visualization valuable aid developer modularization decision 
object orientation general suffers missing structuring mechanisms dividing system units call modules rest classes 
working classes developer gets lost large sponsored deutsche forschungsgemeinschaft dfg project name software systems usually consisting classes 
system structure complex dependencies classes objects possibly result intricate pointer structures constraints system state behavior 
szyperski claims modules classes separate useful concepts classes related inheritance relationships modules import export relationships essence modules objects 
general modularization major advantages breaking complex system smaller manageable intelligible units reuse developed modules distribution system assigning different modules different processors platforms 
advantages heavily depend quality modularization difficult problem 
languages modularization attempts introduce modularization objectoriented specification programming languages 
right module notion view 
object oriented programming language java example provides packages cluster classes mainly structuring code 
organizational aspect additional effect package enhanced scope definition respect inheritance package classes package classes inherit information internal classes classes outside package 
object oriented specification language uml booch allows collection classes ways object model specification system state space developer define packages general mechanism grouping modeling diagrams 
purely organizational 
furthermore composite objects objects hierarchically composed objects 
aggregation notion problematic variants state aggregation imaginable see breu clear semantics defined 
view module primarily define selfcontained system call module core 
core defined state space consisting objects classes interface explicit module operations 
system state space defined composition modules state spaces system operations specified modules operations 
gives clear semantic concept leads structuring state space partitioning provided structuring done reasonable way corresponds smaller independent intelligible parts 
introduce dimensional visualization flat object oriented system specification having modules explicitly shows class dependencies regard relevant modularization decision 
developer gets better overview general system structure dependencies 
clear system best structured modules real orthogonality local class dependencies unachievable 
apply clustering visualized model class dependencies resulting visualization may contain valuable hints modularization dependent classes depicted closer 
rest structured follows section briefly introduce view object oriented development process essentially relies modularization 
explain objectoriented system specification technique demonstrate example 
eventually show approach specification visualization demonstrate clustering technique supporting modularization 
ends 
development process step object oriented development process business oriented software applications requirements analysis data concern relevant system operations cases concerning system development identified see example jacobson 
general role software system business organisation determined development step 
treat requirements analysis assume sufficient information available development object oriented system specification 
object oriented system specification consists respective class specifications specification system global state space global system operations 
predicates called invariants constraining possible system states 
system specification objects related global mathematical relations pointers objects state 
corresponds general approach taken development method fusion coleman going global local specifications 
development step modularization monolithic model system state space partitioned partitioning classes 
note remain relations objects separate modules external modules 
resulting self contained module cores specified systems 
global system operations specified top modules operations assuming central control mechanism coordinating nondeterministic effects module cores 
phases design implementation global system operations requiring explicit coordination mechanism module cores effects enhancement module cores relations modules implementing external relations 
parallel module cores developed recursively systems starting flat specification 
specification technique scalable different abstraction levels 
interested reader referred hofmann details 
system specifications view object oriented system essentially nondeterministic state machine consisting state space initialization set nondeterministic state transitions 
state space set typed state variables combined value may restricted predicate called invariant 
state space models analysis domain statically denotes stored information user obtain system 
state transitions regarded domain operations system available user 
specification style declaratively describe operations effect predicates state variables operation input output variables 
technique quite specifications described purely mathematical logic specification language operationally relying fundamental built operations certain programming language certain hardware processor 
semantic state machine model similar reengineering approach state encapsulations girard denote programming level group global variables routines access 
contrast data type state variables operations abstractly specified algebraic laws ehrig mahr 
furthermore model hoare data type extension operations input output parameters 
specification structure formally specification state machine approach tuple phi st init op pop consisting constituents ffl finite set typed state variables 
ffl st predicate state variables denoting state invariant 
write sigma phi state space specification phi determined st ffl init predicate variables characterizing initial states 
ffl op finite set operation signatures operation name input output parameter specifications respectively 
ffl pop set operation predicates containing operation op op predicate op io assertion input output variables defined io state change respect state variables denotes state variables operation op executed consisting variables decorated quote character 
note operation specification assumes validity state invariant pre 
operation specifications rely operation predicates recursively 
fixpoint transitions denotations 
general object oriented system consists objects identity type 
regard single object system system type corresponding class specification 
state machine model system specification class specifications 
demand types class state variables constructed primitive data types pointers objects object 
set class specifications relevant object oriented system specification phi 
object oriented system uses unspecified type oid denoting infinite set object identifiers 
discuss specification constituents object oriented system detail 
state variables state variables phi follows ffl oid phi set class indexed identifier sets oid phi finite subset oid class denotes object identifiers class existent particular state 
ffl phi set class indexed state mappings phi type sigma class maps object identifiers class actual object state 
ffl rel phi set binary relations rel phi type relations model connections objects abstractly 
approach objects self contained systems 
object connections higher concept relevant system level 
development phases relations refined pointer structures objects part object states 
class define rel phi set consisting relations rel phi domain range 
note corresponding state function empty function relations rel phi empty relations 
state invariant kinds state invariants objectoriented system ffl class invariants assert corresponding states class example cardinality restriction assertion state variable key attribute 
ffl relation invariants assert single relation rel phi rely participating object identifier sets possibly object state 
prominent relation invariants cardinality constraints gamma images participating object gamma respectively 
ffl global invariants relate relation 
state specifications readable simple syntactic textual graphical specification notations essence object duke class specifications object oriented data models uml state space object oriented system 
operation signatures standard types input output types object oriented system operations elements identifier set operation specifications system operations specified global operations system state 
state component read changed 
means respect particular state variables ffl identifier sets extended reduced object identifiers corresponds object creation deletion respectively 
method object creation takes identifier oid outputs 
way determine specify identifier 
ffl state function changed different points object identifiers corresponds update respective object 
note updates individual objects specified means operations defined object class type 
ffl relations extended reduced corresponds establishing deleting connections individual objects 
example demonstrate approach object oriented specifications give sketch example specification order exposed full detail 
internal ordering system employees big departments locations 
employee order directly office supplies delivered external companies internal store distributed employees store 
object model depicted consists required classes relations 
note relation line class class means object class multiple objects class connected relation 
employee building location delivery plan int 
order ext 
order article sample order item sample order article variant delivery day department ordered delivered order order object model order note order really large system hope sufficient demonstrate approach 
concentrate ordering articles affecting classes article time time articles data changed price packing volume 
employee related holding article data time corresponding article ordered 
attribute int ord vol denoting volumes internally ordered delivered articles variant 
furthermore stores attribute vol ordered volume respective variant attribute status possible values ordered delivered delivered paid 
sets store internal orders corresponding status attributes 
example relation invariant respect relation demand attribute int ord vol equals sum volumes delivered 
formally oid int ord vol sigma jaj oid volume altogether order global invariants 
example specification system operation specify ordering article employee operation name signature theta oid employee theta theta int oid denotes data type article data describing certain properties 
ad 
proceeds sequential steps convention input output parameters character postfix respectively variant av corresponding article 
article data ad 
detected existent created 
done global operation new internal order created related av respectively operation effect 
specification predicate sequential composition steps related variable av output input ad 
av ad av av 
note abbreviation leaving state variables system 
implicitly adjoined operation predicate 
furthermore write operation name op denoting op readable notation 
example ad av stands predicate ad av denoting state variables specification 
furthermore implicit conjunct state variables affected remain unchanged 
show specification operation av 
oid init actual date av 

av 
int ord vol av int ord vol 
changes system variables oid state av 
referenced dot notation 
note line necessary keeping invariant valid 
system specification system operations altogether 
modularization visual support deal explicitly invariants global operations specification technique visualize system specifications extending object model graph notions 
depict invariants system operations red spheres object model plane green spheres respectively 
represented invariants system operations order example white graph essentially object model 
gives impression system specification 
note invariant operation vertex centered respect classes 
complete visualization example order defined modularization partitioning system variables variable belongs exactly module 
partition object oriented system respect classes class assigned exactly module corresponding system variables relations class identifier sets belong module internal variables module 
follows remain external relations outside modules connecting classes different modules 
different conjuncts system invariants global operation specifications conjuncts example possibly assigned certain module 
remain global coordination requirement specification 
said task development phases design implement mechanisms guaranteeing coordination 
normally done establishing certain communication protocols modules 
modularization requires coordination modules possible 
words find partitioning classes global system invariants operation conjuncts local module avoids intricate coordination conditions modules 
principle mirrors known quality principles strong module cohesion weak module coupling 
object oriented setting means modularization keeps global system invariants system operations local module involve external relations possible 
visualizing coordination conditions accumulated way developed clustering algorithm places classes stronger coordination closer independent ones 
clustering performed randomized adaptive layout algorithm spring embedder paradigm fruchterman reingold ideas simulated annealing kirkpatrick 
base algorithm uses physical model vertices treated currents exerting repulsive force edges handled forces attracting vertices connect bru frick 
algorithm employs concepts form simulated annealing additional heuristics achieve better faster results 
leave details necessary goals 
example order simple weighting regard desired edge length goal reach local energy minimum 
underlying algorithm leads stable results shows symmetries graph leads evenly spaced vertices low deviation edge lengths 
order suit needs changed determination desired edge length original takes constant chosen value related proportionally strength inter class dependencies 
results graph vertices representing strong dependent classes positioned closer dependent classes 
prototype framework schutz control class dependencies weighting factor relations varying influence invariants system operations 
allow variants calculating class dependencies ffl simple weighting invariant system operation increments respective relations 
done example order leaving invariants system operations getting dimensional picture 
shows stronger example order cardinality weighting building location upper triangle caused internal distribution business order employee middle caused internal ordering business general clear clusterings difference dependencies significant 
ffl cardinality weighting weighting done account cardinality assessments identifier sets relations furthermore expected execution profiles system operations additional specification input 
allows cluster classes heavy traffic results module structure respect physical distribution modules 
visualized order example expected cardinalities 
result shows strong dependency classes article upper part picture 
dependencies lower magnitude 
said modularization deals existing reusable modules 
model notion adding strong dependencies classes reusable module 
enhance clustering variants reusable modules 
introduced specification technique semantic concept state machines explicit interfaces adapted object orientation 
concept gives clear ideas systems modules correspond partitioning system classes 
sketched module oriented development process modularization module design phases 
research way specify validate modularized system hofmann 
furthermore introduced visual technique provide helpful support software engineer finding modularization modules quite independent intelligible systems 
able account module reuse distribution 
approach validated larger examples practical software engineering project 
general think specification technique separating module cores module coordination approach modules classes put right context global system operation taken isolated 
module hybrid thing core self contained located surrounding system 
core enhanced external interactions pointers external objects 
furthermore hierarchically structure system searching appropriate modules submodules reach class level regard atomic module 
specifying system state manner explicit invariants system operations able assess quality modularization 
information explicitly visualize finding module structure 
bru frick fast interactive graph visualization proc 
graph drawing 
breu hofmann klein rumpe formalization unified modeling language proc 
ecoop springer lncs 
booch rumbaugh jacobson unified modeling language version rational software url www rational com 
coleman arnold hayes objectoriented development fusion method prentice hall englewood cliffs 
duke rose smith object specification language advocated description standards computer standards interfaces pp 

ehrig mahr fundamentals algebraic specifications monographs theoretical computer science eatcs springerverlag 
fruchterman reingold graph drawing force directed placement software practice experience 
girard koschke comparison data type state encapsulation detection techniques architectural understanding proc 
th working conference reverse engineering ieee computer society press 
hoare sanders data refinement refined proceedings european symposium programming esop lncs pp 
springer 
hofmann object oriented specification development business information systems tu munchen appear 
jacobson object oriented software engineering case driven approach addisonwesley 
kirkpatrick gelatt vecchi optimization simulated annealing science 
szyperski import inheritance need modules classes proc 
ecoop springer lncs 
schutz visualization really generic approach proc 
visual data exploration analysis san jose 
