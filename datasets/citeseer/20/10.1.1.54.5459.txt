practical lineage tracing data warehouses cui jennifer widom computer science department stanford university db stanford edu consider view data lineage problem warehousing environment data item materialized warehouse view want identify set source data items produced view item 
formalize problem lineage tracing algorithm relational views aggregation 
tracing algorithm propose number schemes storing auxiliary views enable consistent efficient lineage tracing multisource data warehouse 
report performance study various schemes identifying schemes perform best settings 
results implemented lineage tracing package data warehousing system prototype stanford 
package users select view tuples interest efficiently drill examine source data produced 
data warehousing systems collect data multiple distributed sources integrate information materialized views local databases keep view contents date sources change cd ik lw wid 
users perform data analysis mining warehouse views 
view contents provide sufficient information depth analysis 
cases useful able drill interesting view data way original source data derived view data 
view data item identifying exact set base data items produced view data item termed view data lineage problem 
primary motivation supporting view data lineage enable analysis interesting potentially erroneous view data function clear benefit olap data mining environments 
application domains include scientific databases network monitoring systems 
algorithms results lineage tracing applied problems view update db materialized view schema evolution gmr data cleansing 
see discussion applications 
compute lineage view data item need view definition original source data possibly auxiliary information representing certain intermediate results view definition 
distributed multi source data warehousing environment querying sources lineage information difficult impossible sources may inaccessible expensive access expensive transfer data inconsistent views warehouse 
storing additional auxiliary information warehouse reduce entirely avoid source accesses lineage tracing 
numerous options auxiliary information store significant performance tradeoffs 
example storing copy source data warehouse improve lineage tracing avoiding remote source queries altogether significantly increases warehouse storage cost may introduce extra maintenance cost 
supported darpa air force rome laboratories contracts 
believe lineage tracing play important role data analysis warehouses 
problem enable perform tracing process consistent efficient manner warehousing environment studied best knowledge 
provide initial practical solution tracing lineage tuples set project join aspj views relational data warehouses 
contributions include 

formulate view data lineage problem develop lineage tracing algorithm relational aspj views 
tracing procedure generated automatically view definition queries procedure optimized easily standard dbms 
discuss optimizations tracing procedure special case scenarios 

restricted case spj views introduce family schemes storing auxiliary views provide consistent efficient lineage tracing distributed warehousing environment 
various schemes offer different advantages tradeoffs different schemes suitable different settings 

performance study proposed auxiliary view schemes cost model incorporates lineage tracing cost view maintenance storage costs 
identify schemes best performance settings 
results implemented view tuple lineage tracing package part data warehousing prototype stanford 
related problem tracing view data lineage related areas view update sto kel deductive databases ull scientific databases multi dimensional databases 
case problem addressed roughly includes retrieving lineage information specific type view 
papers develops complete lineage tracing solution general relational views aggregation distributed warehousing environment 
performance issue investigated depth considering lineage tracing view maintenance storage costs 
note initial lineage tracing warehousing environments forms basis 
ws proposed framework computing verifying approximate lineage view grain view weak inverse 
provide mechanism generating weak inverse view definition 
uses statistical approach reconstruct base data summary data certain knowledge constraints 
approach provides estimated lineage information ensure accuracy 
lbm presents framework explicitly storing lineage call attribution data items query results mediation architecture 
coarse grained lineage information stored queries computed identifies sources data items derived additional information timestamps source quality 
contrast approaches procedure computes exact fine grained lineage tuple relational aspj view limited amount auxiliary information procedure generated automatically view definition 
approach generalizes include relational operators union difference duplicate semantics omit extensions due space limitations please see 
warehouse sources user promising earnings daily purchases simple warehousing scenario dealt data warehouse design issues relates storage auxiliary views improve performance 
rss consider problem selecting auxiliary views indexes store order minimize total view maintenance cost 
gup provides theoretical solution finds warehouse design minimizes warehouse query cost certain constraints maintenance cost 
papers develop heuristics search algorithms large solution space 
consider problem storing auxiliary views primarily enable optimize lineage tracing process 
lineage tracing queries special form relatively small solution space 
able conduct comprehensive performance study different schemes different scenarios considering lineage tracing view maintenance storage costs 
motivating example section provide simple example illustrate lineage tracing problem introduce terminology 
shows simplified diagram financial data warehousing system solid arrows represent data flow dashed arrows represent queries 
warehouse sources 
warehouse information source tables daily ticker high low closing earnings ticker industry earnings purchases ticker date price shares daily table source stock market database say contains latest stock price information including high low closing price stock identified ticker symbol working day 
earnings table source analysis firm database say lists latest earnings share stock industry stock belongs 
purchases table source database say records stock purchases including transaction id purchase date price number shares transaction 
sample table contents appear 
warehouse materialized view 
suppose warehouse user wants monitor list promising industries industry regarded promising stock industry gaining money purchases latest closing price higher average share purchase price stock price earnings ratio 
warehouse defines materialized view promising 
view definition expressed sql relational algebra daily ticker high low closing aaa bbb ccc ddd eee fff 
earnings ticker industry earnings aaa automobile bbb computer ccc computer ddd medicine eee retail fff automobile 
purchases ticker date price shares aaa bbb ccc bbb ddd ccc 
sample data tree ff operator represents group aggregation 
sample data view contains tuples 
data lineage 
suppose user wishes learn industry listed view 
selects view tuple traces lineage see source tuples produced view tuple 
lineage result contains tables contains tuples corresponding source produced view tuple see 
section provides formal definition view data lineage procedure identify lineage tuple view 
auxiliary views 
may want store additional information enable lineage tracing 
example intermediate results group aggregate node ff ticker promising algebraic definition needed trace lineage tuples promising 
recompute relevant portion aggregate tracing tuple lineage define auxiliary materialized view node specifically lineage tracing 
mentioned may choose store auxiliary views warehouse order perform lineage tracing querying sources 
section describes number schemes auxiliary information section analyzes relative performance 
view maintenance 
user view traced auxiliary views support lineage tracing kept date sources change 
assume standard incremental view maintenance approach gms 
changes source table recorded delta table 
view maintenance changes view computed predefined query called maintenance expression 
example tuples inserted daily insertions recorded delta table daily ins 
insertions view promising computed query maintenance expression daily replaced daily ins 
deletions view computed similarly 
refresh view table applying changes view date 
compute maintenance expressions usually necessary query source tables problematic discussed earlier 
prior addressed problem adding auxiliary views ensure set views self maintainable maintained source changes view data querying sources 
introduce auxiliary views warehouse support lineage tracing warehouse maintenance cost may increase views need maintained 
auxiliary views help lineage tracing help maintain user view making entire set views self maintainable 
create view promising select industry purchases daily earnings ticker ticker ticker ticker closing earnings group ticker industry having sum price shares sum shares closing sum shares shares promising industry closing earnings cost shares ticker sum price shares cost daily earnings purchases view definitions promising daily ticker high low closing bbb purchases ticker date price shares bbb bbb earnings ticker industry earnings bbb computer lineage promising tracing view data lineage view data item exact set base data produced called lineage 
section provide formal definition data lineage problem relational views lineage tracing algorithm 
motivation problem details tracing solution 
view data lineage define concept view data lineage assume logically view contents computed evaluating algebraic view definition query tree bottom 
operator tree generates result tuple tuple results children nodes passes result upwards 
convenience formulation view relation consider relation instance separate relation 
approach allows view definitions expressed algebra tree graph limiting views handle 
focus individual operators defining lineage tuple operator result input 
definition tuple lineage operator op relational operator oe ff op tm table results applying op tables tm tuple define lineage tm op op gamma ht mi ht maximal subsets tm op ftg op ft say op gamma lineage tuple contributes op gamma extended lineage set tuples op gamma ht mi op gamma ht represents multi way union table lists hr rm hs sm rm sm definition requirement says lineage tuple sets derive exactly relational semantics know result tuple exist tuple sets 
requirement says tuple lineage fact contribute example requirement op oe base tuples satisfy selection condition contribution view tuple appear view tuple lineage 
defining maximal subsets satisfy requirements sure lineage contains exactly tuples contribute lineage fully explains tuple exists view 
motivation discussion definition appears 
defined tuple lineage individual operators proceed define tuple lineage arbitrary views 
mentioned earlier view definition expressed query tree evaluated bottom 
intuitively base tuple contributes tuple logical table corresponding intermediate node view definition tree contributes view tuple contributes formally definition tuple lineage view database base tables rm aspj view consider tuple 
tuple contributes 
op view defined suppose contributes operator op definition contributes view definition recursively 
contributes lineage gamma hr subsets rm iff contributes lineage denoted gamma 
lineage view tuple set contains base tuples contribute view tuple set gamma gamma 
example tuple lineage view consider tables view ff sum oe 
interested lineage tuple easy see tuple bi tuples hb hb contribute contribute tuples oe contribute gamma big hb igi shown 
lineage tracing procedure aggregate select project join aspj view transformed equivalent form composed ff oe operator sequences commuting combining select project join spj operators view definition tree 
call resulting form aspj canonical form call ff oe sequence aspj segment 
aspj canonical form aspj segment outermost include non trivial aggregation ff operator merged adjacent segment 
details see 
aspj view canonical form equivalent sense 
sum tuple lineage view addition lineage tuples equivalent gamma gamma see proof 
tracing lineage aspj view transform view definition aspj canonical form trace view lineage canonical form 
uniformity canonical form easier generate view lineage tracing procedures automatically tracing process efficient 
remainder assume views tracing aspj canonical form 
note example view promising aspj canonical form 
contains aspj segments ff ticker purchases industry oe daily earnings 
view defined aspj segment called level aspj view spj views special cases level aspj views 
lineage tuples level aspj view computed single relational query called lineage tracing query 
definition lineage tracing query database view tuple tq lineage tracing query iff tq gamma gamma lineage tq independent database instance similarly define tracing query view tuple set denote tq 
theorem lineage tracing query level aspj views level aspj view tm ff aggr oe delta delta delta tm tuple lineage tm computed query tq split oe cg delta delta delta tm split operator breaks table multiple tables split am tuple set lineage tracing query tq split oe delta delta delta tm proof see 
trace lineage view defined multiple levels aspj segments logically define intermediate view segment recursively trace hierarchy intermediate views top 
level tracing query level aspj view compute lineage current traced tuples respect views base tables level 
discussed earlier materialize maintain intermediate views purpose procedure lineage return ht level aspj view intermediate view base table hv tq fv concatenate lineage subview result ffi lineage return algorithm aspj view tuple lineage tracing lineage tracing recompute relevant intermediate results tracing time 
efficient incremental maintenance multi level aggregate user views generally requires materializing intermediate views lineage tracing qua assume intermediate views materialized 
presents recursive tracing procedure 
view aspj canonical form tuple procedure lineage ftg computes lineage discussed earlier assume level aspj view available base table intermediate view procedure computes lineage hv hv level view tracing query tq hv vm theorem 
computes recursively lineage tuple set concatenates results form lineage entire list view tuple sets 
example tracing lineage promising consider view promising section 
recall aspj segments illustrated 
define materialized intermediate view stocks corresponding segment shown 
view tuple compute lineage tables daily stocks earnings lineage tracing query split daily stocks earnings oe daily stocks earnings selection condition price earnings cost shares closing industry computer 
result tracing query stocks earnings shown 
stocks intermediate view trace lineage stocks source table purchases obtaining purchases 
concatenating daily purchases earnings obtain final lineage result shown 
optimizations obvious improvements basic algorithm 
example selection conditions tracing query pushed join operator significantly reduces tracing cost cases 
user view contains key base table keys traced view tuple fetch lineage directly base tables performing joins 
contents intermediate ff results stocks needed general trace lineage multi level aspj view case user view daily stocks segment stocks ticker closing earnings industry promising segment portfolio daily cost shares earnings sum price sum shares shares shares cost earnings purchases tracing promising split 
split 
tracing queries contains group attributes intermediate ff node trace view lineage node maintaining recomputing intermediate result 
auxiliary views lineage tracing recall distributed multi source warehousing environment querying sources lineage information difficult impossible sources may inaccessible expensive access expensive transfer data inconsistent views warehouse 
storing auxiliary views warehouse reduce entirely avoid source queries lineage tracing 
addition saw section auxiliary views corresponding intermediate aspj segments view definition useful efficient lineage tracing 
seen subsections wide variety possible auxiliary views maintain different performance tradeoffs different settings 
remainder focuses auxiliary view schemes relative performance restricted case spj views 
extend results level aspj views expect relatively straightforward full generality multi level views 
spj view oe delta delta delta tm tuple set traced shows generic form tracing query theorem 
assume local selection conditions view conditions involve single base table pushed oe contains join conditions 
size tends small push semijoin rewrite tracing query 
auxiliary views consider forms query trees 
course traced tuple set available tracing time define maintain auxiliary views subqueries involving consider tracing tuple set single tuple generality sets stage generalizing results multi level views practice expect warehouse tracing package permit multiple tuples traced convenience efficiency 
price closing ticker shares daily purchases view definition ticker shares aaa ccc contents view propose schemes storing auxiliary views support tracing lineage scheme specify lineage tracing procedure maintenance procedures auxiliary views original view factors performance 
maintenance procedures ffi denote delta tables discussed section insertions deletions combined denote application delta tables gms 
refer original view user view need distinguish auxiliary views 
running example simple spj view defined daily purchases source tables introduced section 
contains purchases purchase price higher current closing price including stock ticker number shares purchase 
shows view contents sample source data 
store 
extreme case store auxiliary views lineage tracing 

auxiliary views 
lineage tracing tq split oe delta delta delta 
maintenance auxiliary views 
maintenance gms ffiv oe ffit ffi delta delta delta ffi tm ffi ffi delta delta delta ffi tm delta delta delta delta delta delta tm gamma ffit scheme retrieves necessary information source tables time user poses lineage tracing query 
incurs extra storage maintenance cost leads poor tracing performance 
scheme included primarily baseline compare attractive schemes 
store base tables bt trace lineage tuple view querying sources say view self traceable 
self traceable views traced correctly source tables inaccessible inconsistent warehouse views 
easy way view self traceable store warehouse copy source table view defined local selections issue tracing queries local copies source tables lineage tracing 
refer source copies base tables bts 
auxiliary views bt 
lineage tracing tq split oe bt delta delta delta 
maintenance auxiliary views ffi bt ffit 
maintenance scheme replacing bt ticker high low closing date price shares aaa ccc lineage view lv storing base tables improve user view maintenance lineage tracing maintaining base tables fairly easy 
base tables large applying local selections source data may irrelevant view tuple lineage joins selective 
example base tables view simply copies tables daily purchases 
store lineage views lv alternative way improving tracing query performance store auxiliary view left subtree call lineage view lv contains lineage information tuples user view 

auxiliary views lv oe delta delta delta tm 
lineage tracing tq split lv 
maintenance auxiliary views ffi lv oe ffit ffi delta delta delta ffi tm ffi ffi delta delta delta ffi tm delta delta delta delta delta delta tm gamma ffit 
maintenance ffiv lv scheme significantly simplifies tracing query reduces tracing query cost 
lineage views large usually expensive maintain 
hand base tables lineage views helpful maintaining user view 
shows contents lineage view 
store split lineage tables slt views joins lineage views defined section large efficient performing semijoin lineage tracing 
solution split lineage view store set tables call split lineage tables 
note lineage view lv defined section definitions 

auxiliary views slt lv 
lineage tracing tq split oe slt delta delta delta 
maintenance auxiliary views ffi slt 
maintenance ffiv split lineage tables contain irrelevant source data tuple slt contributes view tuples 
furthermore size split lineage tables smaller lineage view 
maintenance cost similar lineage view 
note materialize lineage view lv slt scheme compute order maintain user view auxiliary views slt disadvantage slt lineage tracing queries may expensive 
shows contents split lineage tables 
example join little advantage slt scheme lv case 
slt daily ticker high low closing aaa ddd slt purchases ticker date price shares aaa ccc split lineage tables pbt daily ticker high low closing aaa ccc pbt purchases ticker date price shares aaa ccc ccc partial base tables store partial base tables pbt reconsidering bt scheme section way reduce size base tables store semijoin source table user view call semijoin result partial base table pbt 
auxiliary views pbt 
lineage tracing tq split oe pbt delta delta delta 
maintenance auxiliary views ffi pbt ffit ffi ffi 
maintenance scheme views selective join conditions pbt scheme replicates source data bt scheme benefits reduces storage requirement cost refreshing auxiliary views 
reduces tracing cost tracing query operates smaller table 
partial base tables help maintenance user view 
user view needs maintained 
partial base tables relatively cheap maintain user view contents changes 
shows contents partial base tables 
storing base table projections bp source tables known keys store auxiliary views key attributes source tables necessary attributes call base table projections bps 
scheme improves tracing query performance storing reducing view maintenance storage costs storing full source replicas 

auxiliary views bp includes key attributes attributes projected attributes involved join conditions 
lineage tracing oe bp delta delta delta bpm gamma ht tm 
maintenance auxiliary views ffi bp ffit 
maintenance scheme replacing bp note tracing procedure key 
scheme especially useful source table wide tuples view projects small fraction 
lineage tracing stored information identifies key source tuples really contribute view tuple detailed source information fetched source key bp daily ticker closing aaa bbb ccc ddd eee fff 
bp purchases ticker price shares aaa bbb ccc bbb ddd ccc 
base table projections bps ticker shares aaa ccc lineage view projection lp information 
maintenance user view easy 
bp scheme need query sources drawbacks discussed earlier 
shows contents base table projections 
storing lineage view projections lp assuming base tables known keys store projection lineage view section includes base table keys user view attributes 
call view lineage view projection lp 
note lineage view lv defined section definitions 

auxiliary views lp delta delta delta lv set attributes set key attributes table 
lineage tracing gamma ht tm 
maintenance auxiliary views ffi lp delta delta delta 
maintenance ffiv compared bp scheme lp scheme simplifies tracing query improves tracing performance 
maintenance cost lineage view projection higher base table projections 
lp requires source query step tracing process disadvantages previously discussed 
shows contents lineage view projection 
self maintainability self traceability mentioned section self traceable views traced correctly sources inaccessible inconsistent warehouse views 
analogously view self maintainability introduced section ensures views maintained querying sources 
cases sources inaccessible ensure user view auxiliary views self traceable self maintainable 
table summarizes properties respect schemes introduced far 
consider self maintainable extensions schemes lv slt pbt calling extensions lv slt pbt 
scheme bt lv slt pbt bp lp lv slt pbt self traceable 
self maintainable 
table scheme self traceability self maintainability parameter name description base value variation range workload query ratio tracing queries total operations query size tuples traced query view parameters rel num tables view join ratio joining tuples tuples cross product select ratio selected tuples tuples selection proj ratio bytes projected view tuple size bytes source parameters tuple num tuples source tables tuple size tuple size source tables bytes update size changed tuples source table update trans cost network transmission cost ms byte msg cost network setup cost ms message database configuration block size bytes block warehouse source disk cost cost read write disk block ms block table system model parameters performance study section presents simulation performance evaluation proposed auxiliary view schemes lineage tracing 
address questions including tracing maintenance cost distribution scheme 
impact parameters source table size number source tables view selectivity tracing query update ratio 
scheme performs best terms tracing time maintenance cost different settings 
system model table summarizes configuration parameters simple warehousing system architecture 
study spj views consider types operations view lineage tracing queries view maintenance 
entries table self explanatory 
assume local selection conditions pushed corresponding source tables incorporated source table size 
simplicity assume source tables view statistics 
assume warehouse source databases data block size disk access cost 
assume sources perform simple spj operations join operations nested loop index joins 
consider table scans key index lookups 
base values table baseline setting experiments varying relevant parameters time 
cost model performance analysis consider performance metrics 
lineage tracing query performance average tuple lineage tracing time metric 
second metric measures view maintenance cost including total time spent maintaining auxiliary views user view 
consider total view maintenance cost discussed earlier certain noth bt lv slt pbt bp lp lv slt pbt total resource time sec total resource time sec total resource time sec total resource time sec total resource time sec total resource time sec maintenance cost tracing query cost read refresh network cost distribution base settings noth bt lv slt pbt bp lp lv slt pbt storage cost auxiliary view schemes lineage tracing improve performance user view maintenance 
lineage query performance view maintenance cost consider database access network cost 
specifically lineage tracing resp 
view maintenance time disk cost disk os lineage tracing resp 
view change computation refresh trans cost bytes transmitted lineage tracing resp 
view maintenance msg cost network messages lineage tracing resp 
view maintenance consider total tracing query view maintenance time query update ratio 
consider size user view auxiliary views compares schemes warehouse storage requirements 
experiments results sample experiments addressing questions raised section 
experiment simulated total operations 
operation lineage tracing query tracing set view tuples view maintenance computes applies changes user view auxiliary views set source changes 
look performance schemes base settings table investigating cost distributes relevant cost components 
study impact various schemes source table size number source tables view selectivity query update ratio 
measure schemes experiments graphs admittedly difficult decipher highlight important aspects results text 
cost distribution experiment compares performance proposed schemes base settings 
shows cost distributions divided parts tracing query cost right noth bt lv slt pbt bp lp lv slt pbt source table size average tracing time tuple sec noth bt lv slt pbt bp lp lv slt pbt source table size average maintenance time tuple sec noth bt lv slt pbt bp lp lv slt pbt source table size total time sec noth bt lv slt pbt bp lp lv slt pbt source table size storage mb impact source table size view maintenance cost left 
shows storage requirement scheme including user auxiliary views 
user view fairly selective base settings resulting high variance storage requirement 
see base settings lv slt achieve low lineage tracing cost fairly low total cost 
noth highest tracing cost low maintenance cost expected conversely lv slt low tracing cost high maintenance cost 
bt pbt reasonable compromises extremes 
self maintainable extensions lv slt pbt significantly reduce network cost maintenance expense higher refresh cost higher storage requirements 
projection schemes bp lp achieve low tracing maintenance cost require queries sources network cost remains high 
impact source table size look schemes affected source table size scale 
experiment vary size source table tuples study impact tracing query maintenance costs storage requirement 
shows results 
axis represents number tuples source table axis represents relevant costs 
results tell source table size increases slt slt provide lowest tracing cost cost identical schemes bp incurs lowest maintenance total time costs 
slt bp relatively low storage requirements 
noth bt lv slt pbt bp lp lv slt pbt average tracing time tuple sec number source tables noth bt lv slt pbt bp lp lv slt pbt average maintenance time tuple sec number source tables noth bt lv slt pbt bp lp lv slt pbt total time sec number source tables noth bt lv slt pbt bp lp lv slt pbt storage mb number source tables impact number source tables impact source table number consider scale number source tables 
results observe lv performed poorly lineage tracing scaling source table size presents best tracing performance source number scale 
pbt bt bp incur lowest total cost number source tables increases lp slt lowest storage requirement 
impact view join selectivity experiment studies join selectivity user view affects schemes 
shows results 
axis represents view join ratio value varies 
see tracing performance lv lv lp degrades substantially view join ratio increases schemes sensitive 
bt bp slt pbt incur significantly lower total cost schemes experiment 
impact workload pattern final experiment studies impact workload ratio tracing queries view maintenance 
axis varies ratio extreme query ratio tracing queries extreme query ratio view maintenance 
total cost lv slt preferred high query ratios bt preferred medium query ratios bp preferred low query ratios 
noth bt lv slt pbt bp lp lv slt pbt average tracing time tuple sec join ratio noth bt lv slt pbt bp lp lv slt pbt average maintenance time tuple sec join ratio noth bt lv slt pbt bp lp lv slt pbt total time sec join ratio noth bt lv slt pbt bp lp lv slt pbt storage mb join ratio impact view join selectivity noth bt lv slt pbt bp lp lv slt pbt total tracing time sec query ratio noth bt lv slt pbt bp lp lv slt pbt total maintenance time sec query ratio noth bt lv slt pbt bp lp lv slt pbt total time sec query ratio impact workload pattern defined view data lineage problem lineage tracing algorithm relational aggregate select project join aspj views 
brief aspj view trace lineage transform view definition canonical form generate tracing procedure 
simple level aspj views procedure tracing query 
complex views algorithm applies tracing queries recursively view definition tree 
tracing queries optimized known techniques pushing selections optimize tracing procedure certain types views 
additional motivation details tracing definitions algorithms extends results set operators including difference duplicate semantics 
restricted case spj views designed schemes storing auxiliary views enable improve performance lineage tracing view maintenance warehousing environment 
compared schemes simulations identifying schemes perform best different settings 
results basis efficient data warehouse analysis debugging tool analysts browse views drill underlying source data produced view data items interest 
implemented tool lineage tracing algorithms prototype data warehousing system stanford 
includes 

extend auxiliary view schemes performance study cover arbitrary aspj views 

extend techniques relational views enabling lineage tracing complex view transformations 

lineage tracing particularly compelling lineage view tuple may involve current source data historical source data source data previous database versions 
plan explore extensions lines considering problem lineage tracing versions history 

view data lineage defined explains certain base relation tuples cause certain view tuples exist 
erroneous view tuple may exist erroneous base tuples lineage base tuples missing provide support identifying cases 
grateful sudarshan chawathe rosenthal jeff ullman vassalos janet wiener yue zhuge group colleagues helpful enlightening discussions 
cd chaudhuri dayal 
overview data warehousing olap technology 
sigmod record march 
cui widom wiener 
tracing lineage view data warehousing environment 
technical report stanford university database group november 
available www db stanford edu pub papers lineage full ps 
db dayal bernstein 
relational views 
proc 
fourth international conference large data bases pages germany september 
faloutsos jagadish sidiropoulos 
recovering information summary data 
proc 
third international conference large data bases pages athens greece august 
gray bosworth layman pirahesh 
data cube relational aggregation operator generalizing group cross tab sub totals 
proc 
twelfth international conference data engineering pages new orleans louisiana february 
gmr gupta mumick ross 
adapting materialized views redefinitions 
proc 
acm sigmod international conference management data pages san jose california may 
gms gupta mumick subrahmanian 
maintaining views incrementally 
proc 
acm sigmod international conference management data pages washington dc may 
gup gupta 
selection views materialize data warehouse 
proc 
sixth international conference database theory pages delphi greece january 
hammer garcia molina widom zhuge 
stanford data warehousing project 
ieee data engineering bulletin special issue materialized views data warehousing june 
qiu ward 
managing derived data scientific dbms 
proc 
international conference large data bases pages dublin ireland august 
ik kelley 
rdb vms developing data warehouse 
qed publishing group boston massachussetts 
kel keller 
choosing view update translator dialog view definition time 
proc 
twelfth international conference large data bases pages kyoto japan august 
lbm lee madnick 
source querying semi structured documents 
workshop web information data management pages washington dc november 
quass 
physical database design data warehousing 
proc 
thirteenth international conference data engineering pages birmingham uk april 
lw lomet widom editors 
special issue materialized views data warehousing ieee data engineering bulletin june 
quass gupta mumick widom 
making views self maintainable data warehousing 
proc 
fourth international conference parallel distributed information systems pages miami beach florida december 
qua quass 
maintenance expressions views aggregation 
proc 
workshop materialized views techniques applications pages montreal canada june 
rss ross srivastava sudarshan 
materialized view maintenance integrity constraint checking trading space time 
proc 
acm sigmod international conference management data pages montreal canada june 
sto stonebraker 
implementation integrity constraints views query modification 
proc 
acm sigmod international conference management data pages san jose california may 
ull ullman 
database knowledge base systems vol 
computer science press 
wid widom 
research problems data warehousing 
proc 
fourth international conference information knowledge management pages baltimore maryland november 
ws woodruff stonebraker 
supporting fine grained data lineage database visualization environment 
proc 
thirteenth international conference data engineering pages birmingham uk april 
zhuge garcia molina hammer widom 
view maintenance warehousing environment 
proc 
acm sigmod international conference management data pages san jose california may 
