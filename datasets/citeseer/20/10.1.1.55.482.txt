chapter shared view sharing treaty orlando lynn andrea stein henry lieberman david ungar past years researchers debating relative merits object oriented languages classes inheritance opposed prototypes delegation 
clear object oriented programming language design space dichotomy 
identified fundamental mechanisms templates empathy different independent degrees freedom 
templates create new objects image providing guarantees similarity group members 
empathy allows object act object providing sharing state behavior 
smalltalk tm language actors lieberman delegation system self hybrid take differing stands forms templates smalltalk tm trademark parcplace systems 
chapter term smalltalk refer smalltalk tm programming language 
empathy 
varieties template empathy mechanisms appropriate building wellunderstood programs extremely reliable better suited rapid prototyping solutions difficult problems 
differences languages designed application domains recast differences support anticipated vs unanticipated sharing 
ascribe ascent object oriented programming strong support extension modification 
kinds extension remain difficult 
decomposition object oriented language template empathy mechanisms degree support extension provided forms mechanisms comprise solid framework studying language design 
chapter text treaty outline basis consensus 
section discuss differences anticipated unanticipated sharing 
section defines formally fundamental terms concepts identified 
languages representing different paradigms examined examples mechanisms section 
section describes larger issues software evolution underly issues raised context seen partial solution general problems sharing 

treaty treaty mechanisms sharing knowledge behavior objects useful debated features object oriented languages 
authors chapter previously published papers new sharing mechanisms objectoriented languages prominently featured 
met occasion oopsla orlando florida discovered discussion shared common outlook clarifies reasons design choices previous languages points way research area 
call consensus treaty orlando 
intent object oriented programming provide natural straightforward way describe real world concepts allowing flexibility expression necessary capture variable nature world modeled dynamic ability represent changing situations fundamental part naturalness expression provided object oriented programming ability share data code definition objectoriented languages provide way define new object terms existing borrowing implementation behavioral description previously defined object object oriented languages simula including smalltalk flavors loops implemented sharing classes allow group original treaty text appears power weiss 
objects defined terms provide guarantees group members instances mechanisms class subclass instance impose rigid type hierarchy needlessly restricting flexibility object oriented systems particular easily permit dynamic control patterns sharing objects dynamic control particularly necessary experimental programming situations evolution software expected proceed rapidly treaty independently proposed seemingly disparate solutions problem wit lieberman proposed traditional inheritance replaced delegation idea sharing objects accomplished forwarding messages allowing object decide runtime forward message capable object giving new object ability answer message delegating object behalf scheme prototypical objects typical elephant example replace classes class elephant repository shared information ungar smith proposed prototype approach drastic simplification smalltalk model single type parent link replaces complex class subclass instance protocol approach propose explicit delegation dynamic inheritance shares essential character 
treaty allowing dynamic sharing patterns idiosyncratic behavior individual objects stein attempted delegation inheritance views pointing class subclass relationship essentially delegation dynamic inheritance new styles sharing simply shift representation previously considered classes represent real world entities groups approach gives different way providing idiosyncratic behavior dynamic sharing extensions class instance relationship treaty recognize seemingly divergent approaches share common underlying view issues sharing object oriented systems declare resolved recognize fundamental mechanisms sharing mechanisms object oriented languages implement analyzing comparing plethora linguistic mechanisms sharing provided different object oriented languages empathy ability object share behavior object explicit redefinition second ability create new object template cookie cutter guarantees part characteristics newly created object 
resolved significant differences sharing mechanisms analyzed making design choices differ independent dimensions wit static dynamic system require patterns sharing fixed 
static systems require determining sharing patterns time object created dynamic systems permit determination sharing patterns object receives message second implicit explicit system operation allows programmer explicitly direct patterns sharing objects system automatically uniformly 
third object group behavior specified entire group objects traditional classes types idiosyncratic behavior attached individual object 
conversely behavior specified guaranteed group 
resolved definitive answer set choices best reached 
different programming situations call different combinations features exploratory experimental programming environments may desirable allow flexibility dynamic explicit object sharing large relatively routine software production restricting complimentary set choices strictly static implicit group oriented may appropriate 

anticipated vs unanticipated sharing resolved systems follow natural evolution dynamic disorganized static highly optimized object representation natural evolutionary path development environment provide flexible representations tools ideally automatic adding structures class hierarchy collection example design portions thereof stabilizes 
resolved agreement shall henceforth known treaty orlando 
anticipated vs unanticipated sharing chapter distinguish kinds sharing arise object oriented systems kinds motivations introducing sharing object oriented system 
distinction important determiner preference object oriented language mechanisms 
anticipated sharing 
conceptual phase system design actual coding starts designer foresee commonalities different parts system leading desire share procedures data similar parts 
best accomplished language mechanisms provide means designer write anticipated structure shared components 
traditional simula object oriented languages classes serve mechanism encoding anticipated sharing behavior may utilized unanticipated number instances 
contrast unanticipated sharing served traditional inheritance mechanisms 
unanticipated sharing arises designer introduce new behavior object system provide may foreseen original system programmed 
designer may notice new behavior accomplished part making existing components procedures data may added amended 
sharing relationship arises components common original anticipated purposes new unanticipated purposes 
obviously new behavior anticipated forced state sharing relationships advance puts restriction kinds new behavior introduced modifying previous system 
traditional class subclass instance mechanism requires textually distinguishing static way elements intended common behavior classes expected idiosyncratic instances 
supporting unanticipated sharing important software evolution follows unpredictable paths 
language mechanism supports unanticipated sharing best new behavior introduced simply explaining system differences desired new behavior existing old behavior 
delegation dynamic inheritance accomplishes allowing new objects re behavior existing ones requiring prior specification relationship 
examples lieberman stress advantages delegation situations reasonable behavioral extensions system anticipated 
anticipated vs unanticipated sharing dribble stream records interaction previously implemented terminal stream 
original design system 
reasonable want define dribble stream record interaction previously implemented input output streams unreasonable require implementors original streams prepared advance existence dribble streams 
hand reasonable expect designer implements stream interactive terminal build object representing notion stream anticipating eventually types streams disk network streams 
silly implement disk stream delegating terminal stream common operations simply terminal stream happened implemented 
illustrates difference anticipated unanticipated sharing 
primarily issue software evolution design aesthetics indirectly language issue 
main result stein rephrased terms subclass defined stating differences procedures data superclass relation subclass superclass better suited unanticipated sharing class instance relation limits differences instance class values variables 
basic mechanisms arguments fundamental object oriented programming existed long field 
features classes prototypes inheritance delegation message passing encapsulation abstraction heart object oriented programming things relate issues soon resolved 
try settle debate mechanisms object oriented languages empathy templates 
claim fundamental defined terms object oriented languages described largely terms ways combine mechanisms 
mechanisms underlies inheritance delegation 
languages accepted object oriented way object borrow attribute variable method 
propose term empathy behavior say object object message doesn 
basic mechanisms pen pen variable draw method 
protocol responding responds borrowing response protocol 
borrows just response protocol rest time response protocol requires message sent self variable looked sent respond way 
example fig 
pen pen variable draw method 
formally say object object holds behavior response expressed function method expressed function takes self argument response expressed function behavior derived 
symmetry behavioral definition empathy may counterintuitive symmetry incarnations inheritance delegation include empathy differ relationships determined 
empathy may explicit execute environment ability specialize method lookup 
may default handle locally look execute environment self smalltalk self may dynamic static object group 
language choices responsible variety existing object oriented paradigms 
inheritance simula smalltalk preprogrammed determination default delegation paths group 
requires generation uniform groups objects 
separates traditionally methods non traditionally instance variables 
part stored class necessarily allocated independently instance 
interaction delegation second fundamental mechanism templates determines interesting controversial distinctions types object oriented languages 
template kind cookie cutter objects contains method variable definitions parent pointers needed define new object type 
object may gain lose attributes defined call template strict 
inherent behavioral definition 
behavioral definition say behaviors objects similar criterion tell implementing look code implementation 

basic mechanisms languages template copied instantiated changes new object may permissible weakening guarantee uniform behavior group 
variations strict templates discussed 
addition languages templates languages lieberman delegation system provides inherent concept group kind object 
languages self template object 
embedded generator object usually called class 
class object type contains template objects type 
class elephant object type class contains template objects type elephant 
objects cut template embedded class known instances 
traditionally class instance relationship strict strict instance template lists exactly attributes object cut template define cookie cut object define attributes template 
template strict object cut local copy attribute attributes redefined removed delegated 
class guarantees uniformity independence cookie cut instances 
relationship relaxed ways 
example minimal template cookie cutter sense created cookie cut objects define attributes 
extended instance generated minimal template added priori template type 
descendants strict instances template type 
hand extended determination empathy template mechanisms language actors runtime explicit object delegation runtime object self runtime implicit object templates nonstrict simula compile time implicit group classes strict smalltalk object creation time implicit group classes strict hybrid runtime nonstrict table various languages attributes 
instance promoted transforming class type class template original type 
class may instances 
relaxations template enforcement create variety non strict templates 
languages templates objects templates entirely non strict 
object may created template subsequently go add delete attributes transforming copy template new type object self 
case studies section describe languages exemplify language paradigms identified 
paradigm constrained actors delegation 
case studies purely dynamic empathy systems support maximally flexible set choices 
self adds concept template making grouping objects possible 
self classes remains fully dynamic flexible language 
third paradigm classical style object oriented programming simula smalltalk 
traditionally paradigm rigid inflexible manner describe language hybrid maintains structure class system allowing flexibility previous paradigms 
summary language features table 
actors lieberman delegation actor systems hewitt colleagues mit represent extreme orientation dynamic flexible control 
basic actor model provides active objects parallel message passing agha mandates particular sharing mechanism 
actual actor implementations lieberman natural delegation sharing mechanism actor philosophy encourages patterns message passing express languages require special purpose mechanisms hewitt 
dimensions treaty actor systems classified dynamic explicit object 
sharing mechanisms actors dynamic message passing run time operation invoked prior declaration 
delegation requires explicit designation recipient 
delegation accomplished special message passing protocol includes client equivalent self variable smalltalk languages part message 
actor systems notion type sharing specified object basis 
templates class instantiation mechanisms defined kernels actor languages 
course precludes delegation object creation operations actor systems implement templates objects representing classes sets 
major conceptual difference actors simula family languages arises considered fundamental 
traditional simula languages mechanisms class subclass instantiation considered fundamental 
behavior message passing operation explained terms influence variable procedure lookup 
actor systems message passing operation considered fundamental 
variable lookup explained terms sending messages object representing environment 
sharing mechanisms actor systems built top message passing 
delegation outgrowth actors languages 
templates 
object creation independent parent new object created making new empty object points object doesn desired filling details object contain 
object attributes name child delegate elephant employee real 
class defining objects classes groups objects type 
object determines unique type 

case studies delegation hierarchy 
tion creating new object creating new type object 
delegation done object object basis 
delegation entirely dynamic change time 
empathy delegation hierarchical implicit explicit 
shows delegation hierarchy 
self self designed aid exploratory programming optimizing expressiveness malleability 
essentially template language self templates matter convention language design 
new objects created cloning existing ones original object called prototype behaves way standard template described 
fig 
new elephant fred created self hierarchy 
copying existing elephant clyde 
clyde functioning prototype template 
self templates non strict objects create extend modify template defined properties 
attributes child may simply delegated parent object may handled locally delegated 
new object may additional attributes defined template creating sort extended instance 
new kinds objects created making new template cloning modifying existing object requisite properties 
way sort subclass behavioral inheritance created 
take elephant worth noting distinction concepts extended instance subclass kind language extended instance potential template new type object 

case studies add big ears ability fly 
elephant unique exact template 
patterns empathy self determined individually object 
object parent slots list objects 
example elephants object holding shared behavior walking eating elephants 
object may change contents slots wishes patterns empathy change dynamically 
parent attribute part slot patterns empathy implicit attributes contents object slots explicitly code 
self non strict objectified templates individual dynamic implicit patterns empathy foster exploratory programming 
standard inheritance hybrid standard inheritance exemplified smalltalk simula languages consists class objects contain templates generate instances instances generated classes 
new objects simply cut template variable allocated individually object methods shared template 
new class generator objects inherit templates superclasses 
operationally equivalent delegating part template 
classes may instances 
case metaclass contains template object class contains template 
limited form explicit delegation allowed rarely 
smalltalk hierarchy 
standard inheritance instances class fit exactly template description 
created objects retain properties forever subclass delegate specified superclass es instance remains member class time 
objects fig 
reflect order create flying elephant new class single instance created 
hybrid system allows traditionally static strict relationships standard inheritance dynamic flexible 
inherent reason relationships strict 
hybrid template embedded class behaves self templates allowing objects generated class template 
case studies add delete attributes 
fig 
unique flying elephant just extended instance class elephant 
course flying elephants common hybrid preclude creation new class fact language generate class automatically prototypical instance 
addition hybrid inheritance dynamic allowing runtime changes hierarchy instances distinguished classes allowing explicitly delegate share attributes 
hybrid hierarchy 
sharing software evolution issue kind behavioral extensions system accomplished modifying previously existing code central importance 
important principle conceptually small extension behavior system objects achievable small extension code 
analysis alternative mechanisms sharing proceed considering effects necessity modifications code accomplish behavioral extensions 
kinds changes perform object systems 
adding new code extending system 
editing previously existing code modifying system 
kinds changes different effects programming environment 
adding new code extend system 
preserves previous state system worst simply delete extension return previous state 
editing code problematic transformation 
destructive operation literally 
side effecting operation editing code destroys previous state system careful backup undo operations performed 
worse propensity editing operations introduce inconsistencies system 
behavioral extensions accomplished editing pieces code different places performing operations manually leaves possibility edits performed consistent manner 

sharing software evolution fact recast object oriented enterprise terms extension modification dichotomy 
true value object oriented techniques opposed conventional programming techniques things conventional techniques extend behavior adding new code cases conventional techniques require editing existing code 
objects allow new concepts added system modifying previously existing code 
methods permit adding functionality system modifying previously existing code 
classes enable behavior object part behavior modifying previously existing code 
conventional language implement data representation geometric shape list points 
display procedure representation dispatch kind shape specialized procedures follows display shape shape triangle call display triangle 
shape rectangle call display rectangle 
cause unrecognized shape error 
define triangle list points 
kind shape recognizing appending tag list points examining length list 
ask question add new shape display procedure 
conventional system involves destructively editing code insert new conditional clause display shape shape triangle call display triangle 
shape pentagon call display pentagon 

editing process leaves open possibility inconsistent edits inadvertent deletion old code mismatch protocols data representation old new clauses object oriented language contrast representation addition new object message adding new object method done modification previously existing code 
shape object get display message 
sharing software evolution respond unrecognized shape error 
define triangle inherit shape 
triangle get display message respond display triangle 
define triangle instance shape vertices 
extend system know simply adding new definition extends system 
define pentagon inherit shape 
pentagon get display message respond display pentagon 
way characterizing themes common original papers observed implementation unanticipated sharing objects simula style inheritance systems required modification existing code 
searching ways implementing unanticipated behavioral extensions modifying existing code concluded solution allow dynamic forms empathy 
time wish minimize importance language mechanisms traditional anticipated sharing believe languages seek synthesis 
search ways accomplish interesting behavioral extensions object oriented systems additive extensions code far 
find situations conceptually simple extension behavior object system require gratuitous modification existing code sign problem ought looking solution 
give example situation guide research 
occasions arise specialize extend just single object entire hierarchy 
existing object oriented language provides mechanism require modification previously existing code 
conceptually able perform changes sort additive extension 
suppose construct hierarchy geometrical objects squares triangles respond methods display 
built common base object named shape contain variables common attributes center point bounding box 
objects triangle square inherit shape 
started black white shapes certainly add color attribute shape simple extension 
leave task reproducing entire hierarchy sub objects emanating shape new colored versions 
systems programmers simply tempted add color attribute directly shape creating new colored shape object 
automat 
sharing software evolution ically extend geometric objects colored versions cost destructive editing operation 
previous black white version lost editing operation introduces possibility errors accidentally sending color command running previously existing black white program careful attention paid upward compatibility 
languages flavors object oriented extension lisp addressed issue sharing orthogonal features approach mixins inheritance multiple parents 
approach lets create new objects possessing previously unanticipated combinations behavior previously existing abstractions 
approach color mixin created independent shape properties new type object declared inherit color mixin specific shape property triangle 
approach involves steps reproducing elements shape hierarchy color versions modifications code retroactively mix color feature 
mixin feature provide true support smoothly implementing unanticipated changes black white color transition 
don moment solution problem state merely point direction believe object oriented systems evolve 
summary described sharing mechanisms templates empathy hide core object oriented programming languages 
templates allow objects share common form 
may embedded inside classes may objects 
may vary degree strictness impose system structure 
empathy allows objects share common state behavior 
patterns empathy may determined statically dynamically object group implicitly explicitly 
decomposition object oriented languages template empathy mechanisms shed light similarities differences weaknesses strengths 
bibliography agha gul agha 
actors 
mit press cambridge massachusetts 
birtwistle birtwistle dahl nygaard 
simula 
auerbach press philadelphia 
bobrow stefik bobrow stefik 
loops manual 
technical report kb vlsi knowledge systems area xerox palo alto research center 
bobrow bobrow kahn kiczales masinter stefik 
merging lisp object oriented programming 
acm sigplan notices sig pages 
hewitt carl hewitt 
control structures patterns passing messages 
patrick winston editor artificial intelligence mit perspective 
mit press cambridge massachusetts 
bibliography lalonde wilf lalonde 
exemplar smalltalk 
proceedings acm conference object oriented programming systems languages applications pages portland oregon september 
lieberman henry lieberman 
prototypical objects implement shared behavior object oriented systems 
proceedings acm conference objectoriented programming systems languages applications pages portland oregon september 
lieberman henry lieberman 
object oriented programming act 
akinori yonezawa mario tokoro editors object oriented concurrent programming 
mit press cambridge massachusetts 
antonio jr hybrid implementing classes prototypes 
master thesis technical report 
cs brown university department computer science providence rhode island july 
moon moon 
object oriented programming flavors 
acm sigplan notices sig pages 
power weiss leigh power zvi weiss editors 
addendum second acm conference object oriented programming systems languages applications volume special edition sigplan notices may 
bibliography sig acm sigplan notices special edition object oriented programming languages volume november 
stein lynn andrea stein 
delegation inheritance 
proceedings second acm conference object oriented programming systems languages applications pages orlando florida october 
stroustrup bjarne stroustrup 
programming language 
addison wesley reading massachusetts 
ungar smith david ungar randall smith 
self power simplicity 
proceedings second acm conference object oriented programming systems languages applications pages orlando florida october 
