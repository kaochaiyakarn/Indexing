new algorithm computing shortest paths weighted planar subdivisions extended cristian mata joseph mitchell practical new algorithm problem computing low cost paths weighted planar subdivision weighted polyhedral surface 
algorithm constructing relatively sparse graph pathnet links selected pairs subdivision vertices locally optimal paths 
pathnet searched paths provably close optimal approach optimal varies parameter controls sparsity pathnet 
analyze algorithm analytically experimentally 
report results set experiments comparing new algorithm standard methods 
weight function weighted length path plane path integral doe weight function path linking start goal weighted region metric associated defines distance df infimum paths weighted length 
weighted region problem wrp find optimal path weighted region metric df induced piecewise constant weight function problem natural generalization shortest path problem polygonal domain consider weight function assigns weight weight sufficiently large constant obstacles complement 
weighted region problem models minimum time path problem point robot moving terrain varied department computer science state university new york stony brook ny email cristian cs sunysb edu supported nsf ccr ccr hughes aircraft 
department applied mathematics statistics state university new york stony brook ny email ams sunysb edu partially supported nsf ccr ccr boeing computer services hughes aircraft 
types bodies water type terrain assigned weight equal reciprocal maximum speed traversal robot 
arises numerous applications involving route planning geographic data military mission planning decision support fluid flow injection :10.1.1.39.3000
assume specified triangulation having vertices face assigned integer weight ff 
allow edges triangulation weight possibly distinct triangular facets side way linear features roads modeled 
describes algorithm compute nearly optimal paths points weighted polygonal subdivisions 
call data structure built algorithm pathnet 
pathnet answer path queries pairs points subdivision 
new algorithm fully implemented tested various approaches large set data 
report experimental results 
main contributions new algorithm weighted region problem analyze effectiveness approximating optimal path 
algorithm constructing graph pathnet guaranteed contain approximately optimal path query points 
varying parameter controls density graph able get arbitrarily close optimal 
report implementation pathnet algorithm 
implementation part extensive system called wrp solve built convenient graphical user interface compare various approaches route planning weighted regions 
addition pathnet algorithm system contains implementations approaches solving wrp user freely select 
software integrated extensive military simulation system modsaf industrial collaborators hughes aircraft 
expect release wrp solve code public domain 
provide experimental results comparing pathnet approach approaches wrp 
results obtained real simulated datasets 
related numerous papers optimal route planning weighted terrain maps 
refer reader survey pointers literature 
main theoretical results known weighted region problem mitchell papadimitriou 
give algorithm continuous dijkstra method find path weighted length guaranteed factor ffl optimal ffl user specified degree precision 
time complexity algorithm delta number events continuous dijkstra algorithm complexity performing numerical search solve subproblem find ffl shortest path goes sequence edges triangulation 
show examples achieve upper bound 
numerical search done form binary search exploits local optimality condition optimal path bends snell law refraction crossing region boundary 
earliest snell law optimal route planning applications 
leads bound log ffl time needed perform search edge sequence largest integer coordinate vertex triangulation 
show yields time bound log ffl thought bit complexity problem instance 
algorithm assumes start source point fixed computes representation optimal paths start points form shortest path map 
start point moved algorithm need run new start point 
contrast new algorithm computes data structure path queries pairs points 
query time logarithmic case builds shortest path map queries new goal point 
algorithm worst case running time logarithmic ffl new algorithm linear ffl worst case dependence better new algorithm versus 
contrast algorithm new algorithm fully implemented practicality shown 
various special cases weighted region problem admit faster simpler algorithms 
example weighted subdivision rectilinear path length measured weighted length efficient algorithms single source point queries searching path preserving graph 
similarly region weights restricted edges may arbitrary nonnegative weights algorithm constructing path preserving graph similar visibility graph 
leads efficient method performing lexicographic optimization prioritizes various types regions important path length minimization 
preliminaries denote planar polygonal subdivision having convex faces 
event input subdivision nonconvex faces triangulation 
assume convenient data structure allows usual basic operations done constant time quad edge data structure possibility variant code 
denote total number vertices faces edges 
face associated integer weight ff 
weight edge integer ff assumed ff faces incident 
event input specify weight define ff ff 
path said locally optimal lo path infinitesimal perturbation result weighted length decreasing 
properties lo paths weighted regions important algorithm see proofs details 
lo path piecewise linear bend points vertices edges subdivision 
lo path bends point edge crossing edge manner obeys snell law refraction ff sin ff sin angles incidence refraction respectively ff ff denote corresponding face weights 
angle incidence refraction defined angle incoming outgoing segment normal edge 
lo path bends point edge entering edge point turning follow edge distance enters edge critical angle refraction sin gamma ff ff 
lo path incident edge angle greater critical angle pathnet algorithm pathnet algorithm constructs graph pathnet vertices subdivision 
basic idea simple discretize continuum orientations vertex evenly spaced directions approximate full range 
cones determined determine possible edge link chain segments crossing edges subdivision joining vertex critical point entry edge possible link created cone link cone 
possible link determined tracing path refraction ray orientations bounding cone advancing paths rays lock step faces obeying snell law refraction crossing refraction rays encounter topological fork edge sequence ray starts differ edge sequence ray 
sake efficiency advance rays lock step ray traced twice 
words determine longest common edge sequence prefix refraction rays bounding cone 
fork event types refraction rays incident distinct edges splitting vertex face fork splits paths 
create link edge vertex associated link pointer polygonal chain consisting line segments rays brought face segment joining entry point vertex chain represents approximation refraction path store length weight edge refer 
cone determined refraction rays vertex gets split vertex lemma exists unique locally optimal path stays refraction cone split proof 
proof follows monotonicity lemmas proven 
ut 
optionally search chain linking arbitrarily close refraction locally optimal path code simple binary search coordinate descent method 
practice may lead somewhat shorter paths better looking paths cases 
see way worst case error analysis take advantage extra optimization 
omitted subset experiments reported 
rays incident edge rays incident angle magnitude greater critical angle lemma exist locally optimal paths corresponding incidence angles gamma critical entry point edge stays refraction cone 
proof 
proof follows monotonicity lemmas proven 
ut trace critical refraction path critical entry point back cone edge sequence known critical angle determine angles incidence edge sequence point discovered trace path forward 
refer 
pointer chain stored link length recorded weight pathnet edge 
furthermore critical entry point instantiated new vertex pathnet added linked neighboring critical points endpoints 
note total kn critical entry points added pathnet 
cone determined refraction rays vertex gets split edge due critical entry point 
ray incident angle greater ray incident angle gamma possible refraction cone critical refraction paths incident rays incident angles greater gamma critical refraction path cone 
rays encounter outer boundary subdivision 
case simply cease tracing cone link pathnet 
pathnet constructed search path vertices simply running dijkstra shortestpath algorithm pathnet 
alternatively apply standard heuristic search variants dijkstra shortest path algorithm algorithm experiments reported dijkstra algorithm directly algorithm 
arbitrary start goal points point location queries locate subdivision temporarily link pathnet applying refraction ray tracing done vertex constructing search augmented pathnet yields desired path 
analysis pathnet graph kn nodes cones vertices produce link 
propagation rays defining cone truncated steps typically require practice 
follows lemma proves locally optimal path go vertices critical points cross edge times implying edge sequence crossed edges 
get worst case time complexity kn build data structure size kn 
remains prove shortest path pathnet approximates shortest weighted path points 
observe large number cones allowed vertex vertex vertex path contained single cone pathnet algorithm provides exact answers shortest path queries 
longer case number cones small 
observe cones vertex angle rays define cone begins angle multiple rays common edge sequence gets larger kw maximum finite weight minimum nonzero weight 
follows simple geometry snell law 
consider optimal path vertex vertex prove existence path lies pathnet weighted length ffl times appropriate choice ffl depend 
partitioned subpaths vertices critical entry points consider subpath call joining vertex vertex 
case subpath joining critical entry points vertex critical entry point handled similarly 
lemma exists path pathnet weighted length ffl times proof 
consider cone apex locally contains optimal subpath split point cone claim immediate angle rays time split kw ratio error path length kw 
split point cone ut proof uses induction number subpaths lemma proves base case single subpath 
induction hypothesis fewer subpaths exists path pathnet approximates factor ffl 
consider optimal path vertex vertex subpaths 
consider cone apex locally contains cone split vertex vertex done subpath link pathnet appeal induction hypothesis lemma 
assume vertex splitting vertex polygon determined refraction rays bounding cone stopping rays points exit face rays split closing polygon boundary contains splitting vertex 
details analysis somewhat tedious 
necessary analysis assume bounded minimum angle min internal angles defining face subdivision ratio maximum non infinite weight minimum non zero weight bounded 
result theorem time kn pathnet size kn constructed searched yields paths factor ffl optimal ffl min 
approach strongly motivated results approximating euclidean shortest paths obstacles clarkson mitchell spanners approximation methods devised minimum spanning trees 
algorithms order determine practicality relative effectiveness new algorithm implemented methods experimental comparison 
grid algorithm basic popular practical approach solving path planning problems varied terrain discretization uniform grid search weighted grid graph shortest paths 
method advantages complex algorithms simple implement particularly suited problems input data structure comes grid highly versatile allowing heuristic cost criteria charging turns added quite easily 
assume input array sampled values underlying weight function giving values regular grid points indexed 
pathnet algorithm assumes input polygonal subdivision weight array grid algorithm initializes weight array sampling polygonal subdivision grid points spacing fl user specified parameter 
grid data points determine grid graph vertices grid points edges link nearby grid points 
grid algorithms assume connectivity grid joining point immediate neighbors gamma gamma plus possibly diagonals 
main drawbacks grid graph solution trivial constant weight function inherent error distance estimate measure grid distance euclidean distance 
connectivity digitization bias aliasing results error factor connectivity results factor 
see discussions digitization bias problem different distance transforms address 
approach reducing grid bias increase connectivity grid 
grid algorithm implemented includes enhancement usual methods permit higher degrees connectivity connect grid points gammak gammak gamma kg reached directly error shorter edges connect effected diagonal connections 
get connectivity respectively 
allowing parameter implies goes infinity resolution fl goes zero solution fact go true optimum 
dependence 
allow fair comparison pathnet algorithm get arbitrarily close optimum increasing parameter number cones 
underlying input function polygonal subdivision form assign weights edges grid graph computing actual weighted cost direct straight line segment joining endpoints 
done simple ray tracing walk integrating segment 
edge subdivision algorithm devised implemented natural method searching weighted subdivision paths discretizing edges subdivision faces case grid method 
method implemented including mitchell implemented part system built hughes darpa alv project johansson implemented fluid flow computations injection maheshwari sack closely related conducted experiments related practical methods wrp 
basic edge subdivision algorithm follows 
edge subdivision place ffic new steiner nodes evenly spaced ffi parameter algorithm ff denotes weight edges construct weighted edges joining steiner node nodes original vertices steiner nodes appear boundary faces incident way face subdivision corresponds complete graph set vertices steiner nodes appear boundary 
faces assumed convex line segment joining pair boundary points lies entirely face assign weight delta ff ff weight face 
note shortest path joining need single edge especially weight ff face high 
edge subdivision algorithm design choices parameter ffi specify maximum number steiner points edge space points edge evenly geometric progression papadimitriou shortest paths way 
seen uneven spacing achieve provably better approximation bounds may subject experimental analysis 
approaches wrp solve system couple heuristic algorithms implemented search weighted edge graph shortest path vertices 
start goal vertices simply augment graph connecting vertices convex containing cell 
method advantage simple fast course produce paths arbitrarily bad respect optimal 
search dual graph edge weights average adjacent face weights times distance centroids faces 
method fast yield arbitrarily bad paths respect optimum 
note faces unit squares regular grid simply doing connectivity grid graph method approximation error factor bounded 
approaches currently designed system include simulated annealing approach starting seed path determined fast heuristics post processing local optimality stage sophisticated grid quadtree algorithms 
interesting implement test hybrid methods computing optimal paths best aspects grid graphs edge subdivisions implementation experimental setup wrp solve system implemented 
experiments run set sgi processors mhz running irix 
internal memory size mb kb level kb separate data instruction level caches 
times quoted experiments measured sgi 
memory intensive experiments intel pentium pro computer mhz mb memory 
design choices algorithms model weighted subdivisions grid sampled data undirected network nodes network correspond points plane edge weights represent weighted distance nodes 
nodes associated feature subdivision vertex edge face steiner point added sampling edge face subdivision 
network representation dependent search algorithm 
example edge subdivision algorithm require explicit representation links nodes face 
determining neighbors node search algorithm weighted length links done search algorithm executed 
network representation require storage storage nodes inefficient terms execution time dynamically determining neighbors node impact performance 
hand building complete representation nodes adjacency lists large sampled grid practical large number nodes links 
requirements algorithm imposes representation search network balanced fact experimental setup compare performance algorithms 
choice data structures algorithms 
advantage solution code implement search algorithm approximation algorithms 
means number elementary operations compute shortest path compare algorithms 
hand specialized implementation search methods result better performance terms space time 
datasets weighted regions problem practical applications multiple domains including decision support systems military manufacturing geographic information systems 
practice datasets weighted subdivisions vertices 
applications smaller subdivisions example manufacturing application size dataset vertices 
experiments run mix real terrain artificially generated datasets 
drawback real datasets presence features degenerate topologically inconsistent 
implementation problems accounted letting algorithms abandon computing link locally optimal path underlying data structure inconsistent 
real world datasets 
subdivisions experiments extracted elements hunter compact terrain database 
terrain database modsaf training simulator visibility shortest path computation 
weighted subdivision corresponding elements obtained assigning weights faces subdivision heuristic assigns face integer weights 
number different weights higher typically practice modsaf chosen shortest path planning challenging experiments 
sizes weighted subdivisions vary vertices vertices 
faces subdivision triangles buildings man features vertices 
complicating problem data relatively large number topologically incorrect features faces dangling edges 
simulated datasets 
artificial datasets generated methods 
method starts regular rectilinear grid randomly perturbs positions vertices constraining perturbation faces subdivision remain convex 

second method uses delaunay triangulations point sets algorithm code devillers 
set datasets vertices subdivision generated uniformly random square 
set triangulations designed yield nonuniform point distributions concentrating majority points small disks goal simulate irregular distribution points encountered applications 
artificial datasets generated variable number vertices 
larger subdivisions possible datasets incur run time penalties algorithms compare subdivisions lead data structures exceed amount internal memory available 
open question shortest path algorithms fare experimentally external memory settings 
generation start goal pairs wrp solve system allows start goal points chosen arbitrarily 
simple worst case linear time algorithm point location special code handle start goal points fall edges vertices subdivision 
start goal point pairs picked random minimum euclidean distance start goal diameter dataset 
start goal points act special vertices search network 
vertices inserted search begins deleted search ends 
time measurements include time insert special vertices time exclusive point location partially dependent search algorithm 
example inserting vertex pathnet takes time time insert vertex grid 
contrast deleting vertices standard operation involves operations algorithms implemented 
data structures choice representation subdivision network data structures influences directly performance algorithms 
effect lessened measuring time performance algorithms measured cpu clock counting number elementary operations performed algorithm shortest path search 
subdivision 
natural choice representing input subdivisions quad edge data structure 
limited operations needed fact datasets terrains implementation simplified rot flip orientation implemented 
faces vertices planar subdivision objects attributes 
vertices coordinates faces weights 
experiments edges default weight minimum weight incident faces 
possible define obstacles subdivision weight face user defined threshold 
case shortest path allowed cross obstacle face 
free cost regions implemented low unit weight faces 
applications small number weights 
example applications wrp solve air traffic control technologies uses heuristics assign different weights regions 
experiments weight values 
search network 
search network data structure designed answer efficiently membership queries node vertex planar subdivision 
hash tables store nodes efficient simple robust implementation available tcl library 
average size buckets hash tables 
speed things separate hash tables maintained objects making weighted subdivision vertices edges faces 
robustness issues pathnet algorithm assumes topologically correct consistent weighted subdivision 
subdivisions input interactively click drag 
input operation wrp solve performs topological check verify consistency new edge added data structure 
procedure solves snell law refraction crossing particularly sensitive numerical errors 
exact solution requires solving th degree polynomial 
refraction path sufficiently close subdivision vertex incorrect decision floating point rounding program go infinite loop 
address issue refraction case subproblem solved constraint crossing point small distance constant fraction edge length divided number cones endpoint path snaps edge endpoint 
results measured parameters measured parameters shortest path queries ffl number operations performed shortest path search operations counts number nodes visited search algorithm number insertion update operations heap 
ffl time spent search 
measured times elapsed time measures interval time elapsed start search search returned function gettimeofday user system times measured 
reason experiments run hardware users elapsed time prove incorrect measure 
sgi irix architecture experiments returns measurement resolution microseconds 
linux returns times resolution 
time measurements performed sgi architecture 
ffl length shortest path approximation actual euclidean length start goal parameters 
ffl number nodes network 
addition values measured methods measured pathnet algorithm additional parameters including number critical entry points number simple number chain links average degree nodes search network average number edge crossings chain 
average query time vs approximation factor pathnet achieves consistently approximation factors percent choices parameters tested datasets 
presents plot average time required process query versus approximation factor 
edge subdivision algorithm achieves approximation factors processing time 
dataset experiment delaunay triangulation vertices 
grid experiment connected 
results show contenders accurate results edge pathnet algorithms 
approximation factor obtained grid algorithm shows digitization bias higher degree grid connectivity results grid algorithm improve 
preprocessing time memory pathnet algorithm preprocessing times required build different parameter values measured 
results show building search network takes time proportional number cones 
build times depend number nodes search network see 
triangulations terrain delaunay data sets larger size grid subdivisions 
pathnet algorithm achieves approximation results shortest paths number cones relatively small 
data shows time preprocess subdivision nodes seconds 
note practical pathnet built demand preprocessing correspondingly lower 
subdivision edge algorithm average times slower approximation factor 
grid connected weaker approximation factor uses times 
amount memory pathnet algorithm proportional number cones see 
artificial datasets variation terrain data 
number operations edge pathnet algorithms perform fewer operations grid algorithm achieve approximation factor 
pathnet advantage links spanning multiple faces 
presents average number nodes visited unit distance different approximation factors 
scaling unit distance allows estimate time required complete shortest path query useful feature application time resources limited 
complementary average number operations average time required plan shortest path unit distance see 
approximation factors experiment looks correlation approximation factors number cones build pathnet 
links parameter number cones necessary achieve approximation factor respect optimal path 
axis represents number vertices 
artificial datasets number cones remains relatively constant decreases number vertices increases 
approximation factor number cones smallest number shortest path queries tested approximation factor 
example pathnet cones cases achieve approximation factor percent 
pathnet built cones achieves average percent approximation factor 
peaks plot indicate data sets require large number cones approximation factor 
useful observation behavior dataset remains values parameter 
case approximation factor achieved small number cones predictor approximation factor number cones increases 
taken new practical look problem computing low cost paths weighted terrains 
main contribution new method compute paths weighted terrains 
method fully implemented tested planar weighted regions comparisons simple natural heuristic algorithms regular grids edge subdivision 
experiments show pathnet method performs practice highly competitive methods generally yielding shorter path query time 
advantage pathnet algorithm form discretization independent scale data set 
grid edge subdivision algorithms depend choice parameters euclidean sizes features edges faces map 
worst case dependence ffl worse mitchell papadimitriou worst case dependence substantially lower terms time space complexity versus time versus space 
extensions natural 
method applies directly polyhedral surfaces weighted facets 
change implementation necessary modify ray tracing procedure compute refraction path unfolded version local geometry 
code exists soon fully tested 

method applies cases weight functions necessarily constant faces subdivision facets polyhedron 
example consider piecewise linear weight functions simple describe weight functions compute local optimality condition path crosses region boundary 
plan consider weight functions vary time 

extreme apply method unweighted constant weight case obtaining approximation shortest paths polyhedral surfaces 
problem know locally optimal path cross linear number edges edge crossed complexity kn 
actual performance practice may close linear average running time average number edges crossed cone defining rays get split practice expect add interesting experiments conducted 
particular plan conduct direct comparisons methods methods developed parallel effort maheshwari sack 
interesting compare methods performance simulated annealing approaches implemented shing rowe 
combining different heuristic methods expect ultimate winner quest better heuristics hybrid method take advantage data terms regular grids terms polygonal subdivisions 
alexander rowe 
path planning optimal construction homogeneous cost dimensional regions 
proc 
ieee internat 
conf 
robot 
autom 
chen 
tu 
shortest path queries weighted obstacles rectilinear plane 
proc 
th annu 
acm sympos 
comput 
geom pages 
clarkson 
approximation algorithms shortest path motion planning 
proc 
th annu 
acm sympos 
theory comput pages 
devillers 
robust efficient implementation delaunay tree 
report inria sophia antipolis france 
douglas 
cost path geographic information systems 
research note department geography university ottawa ottawa ontario august 
meng mitchell ntafos 
path planning weighted regions applications 
orsa comput summer 
guibas stolfi 
primitives manipulation general subdivisions computation voronoi diagrams 
acm trans 
graph 
johansson 
weighted distance model injection 
linkoping studies science technology thesis liu tek lic division applied mathematics linkoping university linkoping sweden february 
keil gutwin 
classes graphs approximate complete euclidean graph 
discrete comput 
geom 
shing rowe 
stochastic approach weighted region problem design path annealing algorithm 
technical report computer science naval postgraduate school monterey ca 
shing rowe 
stochastic approach weighted region problem ii performance enhancement techniques experimental results 
technical report computer science naval postgraduate school monterey ca 
maheshwari sack 
approximating weighted shortest paths polyhedral surfaces 
proc 
th annu 
acm sympos 
comput 
geom page appear 
longtin 
cover concealment modsaf 
proc 
fourth conference computer generated forces behavioral representation pages 

longtin 
concealed routes modsaf 
proc 
fifth conference computer generated forces behavioral representation pages 

mitchell 
algorithmic approach problems terrain navigation 
iyengar alberto elfes editors autonomous mobile robots perception mapping navigation pages 
ieee computer society press los alamitos ca 
mitchell 
shortest paths polygonal obstacles plane 
algorithmica 
mitchell papadimitriou 
weighted region problem finding shortest paths weighted planar subdivision 
acm 
mitchell payton 
planning reasoning autonomous vehicle control 
internat 
intell 
syst ii 
papadimitriou 
algorithm shortest path motion dimensions 
inform 
process 
lett 

euclidean distance transform 
linkoping studies science technology ph dissertation department electrical engineering linkoping university sweden 
rowe zyda 
solving global dimensional routing problems snell law 
proc 
ieee internat 
conf 
robot 
autom pages raleigh nc 
rowe 
efficient snell law method optimal path planning multiple twodimensional irregular homogeneous cost regions 
internat 
robot 
res 

transportation social physics law refraction 
professional 
yao 
constructing minimum spanning trees dimensional spaces related problems 
siam comput 
time query microseconds pathnet edge subdivision grid connectivity approximation factor pathnet grid edge subdivision algorithms respect shortest path query time size subdivision vertices cones cones cones cones cones cones cones cones cones cones cones cones number nodes respect size weighted subdivision data set size vertices cones cones cones cones cones cones cones cones cones cones cones time required build pathnet search graph versus number cones vertex weighted subdivision approximation factor pathnet edge subdivision grid connected number nodes visited respect approximation factor approximation factor pathnet edge subdivision grid average search time versus approximation factor normalized unit euclidean distance 
subdivision size number vertices approximation factor vs number cones maximum approximation factors pathnet algorithm versus number cones 
