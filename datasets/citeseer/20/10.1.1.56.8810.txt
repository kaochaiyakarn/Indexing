goal directed elaboration requirements meeting scheduler problems lessons learnt axel van lamsweerde robert darimont philippe massonet universit catholique de louvain partement ing informatique louvain la neuve belgium proceedings re nd ieee symposium requirements engineering york march number requirements engineering languages methods address questions questions 
objective twofold assess strengths weaknesses methodologies non trivial benchmark ii illustrate discuss number challenging issues need addressed methodologies effective supporting real complex requirements engineering tasks 
problem considered distributed meeting scheduler system methodology considered kaos goal directed language method 
issues raised case study include goal identification unachievable goals handling interfering goals impact early formal reasoning merits early reuse descriptions categories requirements traceability need link requirements assumptions potential benefits hybrid acquisition strategies 

requirements engineering encompass concurrent activities requirements acquisition alternative models target composite system elaborated requirements specification various components models fully precise possibly formalized requirements evaluation specifications analyzed correctness properties consistency completeness adequacy respect actual needs feasibility properties costs resources required 
alternative models target system selected subsequent implementation 
term composite system refers automated system environment interacts 
modeling composite systems allows interaction human automated agents explicit 
formal reasoning interactions supported fea fic 
henceforth model target composite system called requirements model 
research efforts far devoted requirements specification facet requirements engineering 
languages proposed increasingly popular spi vdm jon larch gut 
languages suited capturing requirements models restricted scope address questions 
typically data operations system envisioned specified firstorder assertions conditional equations pre postconditions invariants 
limitation languages built constructs making clear separation domain descriptions actual requirements jac 
attempts design languages methods support wider range requirements 
frameworks questions addressed addition usual questions 
possible reason formally goal satisfaction rob dar dar fea agent responsibilities fea fin dar fic dar ken dub triggering events fin dar support requirements acquisition evaluation process :10.1.1.36.7311
purpose assess current strengths weaknesses typical approach requirements acquisition specification evaluation 
assessment rich non trivial benchmark 
approach selected familiar kaos conceptual modelling language requirements elaboration strategy dar dar :10.1.1.36.7311
benchmark proposed distributed meeting scheduler system selected main reasons 
persons play different roles usually involved requirements engineering process client role domain expert role specifier role 
second system provides rich combination challenging features interfering goals real time distribution aspects multi agent cooperation communication privacy concerns optimization requirements heuristics defining near solutions space alternative decisions compromises process fairly large 
started working meeting scheduler exemplar see pot 
initial page problem statement vla obtained authors request 
focus actual process followed authors working parallel acquire significant portion requirements model 
step strat egy illustrate problems handle satisfactorily problems 
interesting challenging aspects obviously category 
strongly believe problems specific kaos approach need addressed seriously 
kaos approach requirements elaboration summarized briefly section 
section follows goal directed strategy step step discusses various issues interest representative excerpts meeting scheduler specification 
issues put perspective general discussion follows section 
requirements elaboration kaos kaos approach draws number concepts techniques artificial intelligence knowledge representation acquisition vla dar :10.1.1.36.7311
requirements models acquired instances conceptual meta model 
represented graph node captures abstraction goal action agent entity event edges capture semantic links abstractions 
formedness properties nodes links constrain instances abstractions elements requirements models 
requirements acquisition processes correspond particular ways traversing meta model graph acquire appropriate instances various nodes links constraints 
acquisition processes governed strategies telling way follow systematically graph node specific tactics acquire corresponding instances 

capturing requirements models distinction levels 
meta level defines meta concepts abstractions supported specification language goal object agent action meta rela tionships link abstractions goal reduc tion subgoals goal operationalization constraints agent assignment constraints meta attributes characterize meta concepts relationships agent load reliability assignment meta constraints constrain abstractions links weak constraint restoration action associated 
domain level defines domain specific instances meta concepts meta relationships meeting concept instance entity meta concept scheduler concept instance agent meta concept concept instance goal meta concept agenda concept instance relationship meta concept instance level specific instances domain level concepts icse program committee meeting instance meeting concept 
kaos meta model model meta level 
captures meta level knowledge domain level guide acquisition process 
example knowledge meta constraint weak constraint restoration action associated may prompt acquisition system ask user restoration action look constraint participants agendas automated image kept consistent constraint declared weak constraint 
knowledge meta level knowledge guidance provided acquire requirements fragments domain level 
principle core machine learning systems vla 
meta concepts relationships sequel see dar precise characterization :10.1.1.36.7311
object object thing interest domain instances may evolve state state 
domain object general declared specialized way entity relationship event object autonomous subordinate instantaneous object respectively 
objects characterized invariant assertions 
action action mathematical input output relation objects action applications define state transitions 
actions may caused stopped events 
characterized pre post trigger conditions 
agent agent kind object acts processor actions 
agent performs action effectively allocated agent knows object states object observable 
agents humans devices programs goal goal objective composite system meet 
objective said formulated terms states controllable agent 
goals reduced sub goals goal may achieved subgoals subgoals 
goal structure system general directed acyclic graph 
goals conflict conflict resolution tactics applied stage requirements acquisition process 
distinction achieved associated specific agents introduced purpose 
goals concern objects 
classified pattern temporal behaviour require achieve cease maintain avoid optimize type requirement express respect agents concerned 
categories reuse tactics applied retrieve generic similar goal descriptions domain knowledge base 
constraint policy constraint operational objective objective formulated terms states controllable agent 
goals operationalized constraints 
constraints turn ensured actions objects restricted conditions strengthen pre post trigger conditions invariants respectively 
alternative ways assigning responsible agents constraint captured responsibility links actual assignment agents actions ensure constraint captured corresponding performance links 
classes constraints distinguished meta model 
may violated avoid goals operationalized 
temporarily violated need specific restoration actions associated 
scenario scenario expresses typical combination actions expected take place composite system 
composed actions parallel sequential repetitive alternative combination modes 
specification language requirements models elaborated traced meta model 
language level structure outer level declaring domain level concepts terms meta level concepts links inner level expressing assertions characterize concepts 
outer declaration level entity relationship structure inner assertion level amounts typed order temporal logic equipped real time constructs koy 
language illustrated extensively section 

goal directed acquisition strategy requirements composite system acquired domain specific instances elements conceptual meta model 
instances satisfy meta constraints specified cardinality constraints meta relationships various meta level axioms 
acquisition processes guided strategies domain models 
strategies define specific ways traversing meta model graph acquire instances various nodes links 
step strategy composed finer steps question answering input validation meta constraints application tactics select preferred alternatives various meta relationship instances arise acquisition deductive inferencing property inheritance specialization links analogical reuse domain models 
domain models described specification language requirements 
organized isa inheritance hierarchies domain knowledge base reu 
kaos context contains various levels specialization goals constraints objects actions agents involved resource management systems transportation systems communication systems dam 
ultimately acquisition assistant knowledge base include rich variety domain models strategies tactics 
strategy considered mainly far goal directed 
steps 
acquisition goal structure identification objects concerned goals preliminary identification potential agents actions agents capable operationalization goals constraints refinement objects actions derivation strengthened conditions actions objects order ensure constraints identification alternative agent responsibilities actual assignment actions responsible agents 
strategy steps ordered may running concurrently notably steps 
backtracking possible step 
example information acquired responsibility identification step step may entail changes results operationalization step step 
changes step propagated succeeding steps 
tactics proposed dar step strategy :10.1.1.36.7311
example reduce goals subgoals require operation fewer potential agents achieve tactics step 

meeting scheduler case study illustrate examples actual elaboration proceeded strategy particular backtracking coroutining needed 
step strategy specific issues arose step pointed attempt independent kaos possible 
issues put perspective general discussion follows section 

goal acquisition object identification substeps repeatedly applied produce goal structure identify goals reduce goals identify conflicts refine informal definition goals formalize goals identify objects referred 
substeps proceeding parallel synchronization governed dependency links 

identifying goals substep initiated elaboration process 
consists eliciting number goals various sources available preliminary documents interviews domain knowledge giving tentative name preliminary rough informal definition classifying terms goal taxonomies defined meta level 
generic analogical goals similar systems may reused assist elicitation process 
example consider fragment initial problem statement 
purpose meeting scheduler system support organization meetings determine meeting request meeting date location intended participants effectively participate 
suggests interfering goals get meeting request satisfied maximize participant attendance 
preliminary declarations systemgoal achieve instanceof 
systemgoal maximize instanceof 
goals quite sketchy imprecise point 
names cover lot possible interpretations 
exact meaning goal get clearer clearer reduction links developed formalization attempts 
stage goal declaration expresses initial condition eventually happen goal definition formal pattern initial formulation suggest treating meeting resource instance accordingly relevant generic description fragments may retrieved knowledge base help reduction formalization process dar dam see :10.1.1.36.7311

reducing goals identifying conflicts goals appear gradually analyzed determine contribute positively negatively reduction conflict links captured accordingly 
bottom top processes followed 
bottom process questions allow higher level goals acquired goals contribute positively 
top process questions allow lowerlevel goals acquired sub goals contribute positively goal considered 
top bottomup processes applied meeting scheduler case study rationale tactic explicit 
reduction conflict identification substep meta level knowledge taxonomies reduction patterns categories may guide acquisition process 
various types goal reduction emerged case study agent driven decomposition goal reduced sub goals involve agents case driven decomposition goal reduced case analysis normal cases exceptional ones time driven decomposition goal decomposed subgoals need achieved successively time 
simple frequent type time driven decomposition corresponds reduction reduction pattern produce systemgoal achieve new declarations systemgoal achieve instanceof 
systemgoal achieve instanceof 
systemgoal achieve instanceof 
extensive library non trivial reduction templates support reduction process dam 
generic reductions proved correct proof theory temporal logic man 
benefit time generic reduction reused instantiated gets formal correctness proof free 
proofs important provide formal guarantee goal achieved subgoals achieved 

refining informal goal definitions goal gets reduced possible preliminary informal definition accurate 
example reached consensus goal tree achieve goal able write expanded version original fragment systemgoal achieve instanceof informaldef meeting request satisfied deadline associated request 
satisfying request means proposing best meeting date location intended participants fit constraints notifying solution constraints 
goal reduction specification refinement pointed lower level development swa way goal reduced impacts informal definition vice versa 
experience revealed diversity conceivable decompositions goals problem 
felt uncomfortable deciding goal decomposition adequate 
specification elaboration process consequence decomposition manifest backtracking consider alternative decomposition complete incomplete required 
situation arose times attempts formally prove correctness reductions see section 
goal reduction graph evolved iteratively rearranged explanatory parallelization purpose 
satisfaction goals functional part information robustness privacy consistency goals nonfunctional part 
evaluation transformation goal structures appears important issue 

formalizing goals identifying objects formalization started really goal reduction graph sufficiently developed stable 
goal formalization object identification proceeded parallel formalization goal leads introducing new objects time current vocabulary insufficient define goal formally 
early elaboration phases object consisted defining informally stages vocabulary sufficiently rich possible transform informal definitions formal invariants attached objects 
goal formalization guided sources knowl edge formal pattern corresponding classification done goal identification achieve avoid maintain generic formalizations goals domain knowledge base 
retrieved indexing keys goal pattern goal category meta type objects concerned dar retrieved descriptions customized instantiation meta variables appropriate adaptations resulting predicates :10.1.1.36.7311
example looking meeting copy resource may prompt goal description fragment systemgoal achieve instanceof concerns meeting initiator search knowledge base goal description concerns resource entity satisfaction category achieve pattern 
descriptions systemgoal achieve instanceof concerns resource user 
formaldef user res resource rep repository requesting res res rep res obvious meta variable instantiations resource meeting user initiator scheduled 
meta variable captures abstraction corresponds feasibility various participant constraints put altogether 
repository abstraction sense 
get systemgoal achieve instanceof concerns meeting initiator 
formaldef initiator meeting requesting feasible scheduled formal definition seen approximation start 
general approximation needs refined accordance informal definition weakening strengthening predicates adding deleting variables goal refined formalization systemgoal achieve instanceof 
concerns 

informaldef formaldef initiator meeting participant requesting feasible scheduled invited knows denotes deadline number days meeting request satisfied denotes deadline meeting date location known corresponding participant 
checking approximation informal definition led strengthen eventually conditions strengthen predicate additional requirement keeping participants informed 
parallel formalization preliminary definition meeting object elaborated accordingly entity meeting timeinterval location feasible scheduled boolean invariant meeting feasible 
scheduled 
precise invariants define meeting object difficult write point 
elaboration deferred stage process 
similarly requesting invited objects referenced formal definition goal declared relationships relationship requesting links initiator role requests card meeting role card timeinterval setof participant formalization goals raised issues believe general interest kaos approach goal reduction debugging conflict resolution change propagation stage formalization start 
discuss successively 
goals 
initial formulations tend ideal sense guaranteed composite system assumptions agent behaviour costly achieve example subgoal introduced defined follows systemgoal achieve instanceof concerns meeting participant scheduler formaldef meeting participant scheduler invited scheduling knows constraints goal ideal operationalized way guarantee intended participant communicate date constraints due time participants unreachable may react promptly 
goals achievable specify requirements met 
example possibility weaken goal formulation follows meeting participant scheduler invited scheduling knows constraints expected invited participants react prescribed deadline removed list expected participants 
alternative decisions course correspond alternative reduction nodes graph 
case companion goal maximize guarantee participants possible eventually ruled constraints missing 
higher level thinking require system ensure intended participants effectively participate 
achieve goal formalized unrealistic assumes feasibility meeting requested assessed state request 
version obtained weakening formal definition obtained goal systemgoal achieve instanceof 
concerns 

informaldef formaldef initiator meeting participant requesting scheduled feasible invited knows ii debugging goal reductions formally 
frequently case intuitive goal reductions incorrect stage trying prove correctness reductions formally 
incomplete reduction frequent error 
example goal achieve seen step initially refined subgoals formalized follows systemgoal achieve formaldef meeting participant scheduler invited scheduling knows constraints systemgoal achieve formaldef initiator meeting scheduler requesting scheduling scheduled deadend systemgoal achieve formaldef meeting participant invited knows trying prove formally assertions imply formal definition goal achieve subgoal missing proof carried 
led revised reduction systemgoal achieve missing sub goal allow proof defined follows systemgoal achieve instanceof concerns meeting initiator scheduler formaldef initiator meeting requesting sd scheduler scheduling iii handling conflicting goals 
finding clever smooth ways resolving conflicts essential tasks meeting scheduler 
example goals achieve achieve seen conflicting dynamic replanning interfere normal planning meetings multiple normal planning instances conflicting 
typical example interfering goals maintain contributes positively goal achieve time may contribute negatively maintain 
experienced elaboration adequate conflict resolution policies may represent non trivial problem dependent task elicitation process vla 
preliminary goal conflict detection resolution suggests temporal logic formalization helpful identifying various patterns conflicts determining weakest cause defining corresponding families resolution tactics 
iv propagating changes 
change goal definition propagated downwards upwards reduction links operationalization conflict concerns links 
complex document turns awkward cases 
kaos language lacks modular constructs support conceptual packages low interaction defined interfaces 
case study decided split goal graph parts satisfaction goals part goals 
allowed parallel interaction constraint common interface objects changed agreed necessity change 
language constructs support natural ways proceeding definitely needed 
goal formalization start 
top level qualitative goals general non formalizable interpretable different ways 
reduction operationalization sufficiently clear precise formalization start 
typical example high level goal maintain 
situations goal formulation formal deliberately intended capture degree freedom left appreciation agent 
example goal formalized alternative set systemgoal maximize instanceof concerns meeting initiator participant 
informaldef scheduler finds multiple solutions meeting request select best contextual situation dependent criteria left initiator appreciation 

satisfaction information consistency goals formalizable early process 
section stressed goal structure elaborated step strategy cover goals final document 
discovering implicit goals non trivial reverse engineering task 
case departed strict application strategy time time scenarios validate goal structure find new goals constraints see section 

identifying agents actions goals operationalizing goals meeting scheduler case study stages goal elaboration performed parallel preliminary stages agent action identification goal oper 
goals need converted constraints operational versions enforced agents available composite system 
operationalization requires knowledge human automated agents hand capabilities 
goal set possible agents analyst determine goal enforced appropriate control state transitions 
case goal assignable constraint reduced 
illustrate goal reduction agent identification goal operationalization may consider goal subgoals formalized section 
agent action identification 
objects referenced formal definitions ones classified instances agent meta type initiator objects control state transitions requesting invited knows relationships referenced goal applications actions may write preliminary definition fragments agent initiator request invite notify 
action request input initiator arg meeting arg output requesting pre requesting post requesting scheduler objects control state transitions meeting entities referenced goal knows relationships applications actions preliminary sketch agent scheduler notify 
action input requesting meeting arg output meeting res pre requesting scheduled post feasible scheduled feasible deadend participant objects control state transitions knows meta relationship instances link scheduler participant objects expression goal preliminary definition fragments agent participant 
constraints tuple timeinterval timeinterval invariant participant meeting invited requesting note actions defined elementary pre post conditions capture corresponding state transitions identified 
conditions refined strengthened steps strategy ensure operational constraints met 
goal operationalization 
goal achieve constraints achieve achieve 
assignable scheduler initiator agent actual responsibility assignments step strategy assignable corresponding participant agent 
just operationalization alternative alternative correspond agenda directly accessible scheduler see 
goal achieve easily operationalized constraint assignable scheduler initiator agent 
goal achieve operationalized alternative ways alternative yields achieve constraint assignable scheduler agent 
second alternative yields achieve constraint assignable initiator scheduler agents 
alternative eventually preferred contributes positively goal maximize contributes negatively goal minimize deadends 
note achieve constraint assignable scheduler agent saw way split responsibility objective scheduler participant agents participant means responsible system wrong behaviour case fails respond scheduler requests weakening constraints 
goal operationalization requires change level abstraction 
concepts involved goal formulations need mapped concrete ones possible formulate constraints actions assignable agents 
turned hard cases 
somewhat corresponds choice representation functions map objects concrete variables hoa way similar data reification jon 
illustrate consider qualitative goal systemgoal minimize participant 
reduction introduces agenda concept subgoals systemgoal maintain instanceof concerns agenda formaldef meeting participant scheduler invited scheduling knows agenda 
new maintain clearly assignable operational constraint participant agents 
formalizing constraint terms states controllable participant agents requires agenda concept represented concrete terms relationship agenda links participant role card calendar role card timeinterval timeinterval timeinterval invariant representation maintain constraint formalized follows maintain instanceof participant formaldef participant tp timeinterval free tp tp 
object action refinement strengthening formulation finer subgoals constraints may involve new objects actions defined correspondingly see agenda object discussed 
formulations may require specifications identified objects actions refined revised 
example constraint introduced implement goals specified operationalizes clause achieve operationalizes achieve maximize minimize deadends formaldef initiator meeting scheduler requesting scheduling feasible scheduled preferred feasible deadend formulation constraint called refinement meeting object introduced section entity meeting timeinterval location feasible scheduled preferred boolean invariant meeting feasible requesting requesting constraints scheduled oneof preferred 

case actions objects need strengthened order ensure constraint met composite system 
may require strengthening elementary pre postconditions introducing trigger conditions introducing new specific actions constraint satisfaction 
number inference rules proposed dar formal derivation strengthenings :10.1.1.36.7311
general principle constraint action match initial final conditions factor subsidiary conditions initial final states ensure rules action identified section strengthened follows ensure constraint specified action input requesting meeting arg output meeting res ensures pre requesting scheduled feasible scheduled preferred feasible deadend 
assigning responsibilities agents identification possible responsibility links operationalization general fairly easy number potential agents small capabilities obvious overlapping see examples suggested section 
set candidate agents assignable constraint decision actual assignment actions ensuring constraint obvious 
attributes responsibility links provided kaos meta model reliability frequently criterion select effective assignments 
cost attribute due lack appropriate cost evaluation models 
backtracking operationalization choices required select reliable operationalization agent assignment 
example operationalization goal constraints eventually selected alternative operationalization electronic agenda 
reason constraint alternative assigned participant agents lower reliability assignments alternative assigned scheduler participant agents respectively 
kaos approach felt limited assignment decision step approaches provides little support formal reasoning alternative assignments issue feel importance requirements engineering process especially new application areas decision automated obvious usual 

scenarios validation operational scenarios proved effective getting picture composite system elaboration identifying missing actions underlying implicit goals 
usually action missing typical scenario built underlying constraints goals explicit answering questions missing action 
consider example scenario 
scenario location scenario revealed actions overlooked ration process 
question action led identify new constraint completes list constraints operationalizing goal positively contributes goal avoid 

discussion meeting scheduler felt rich challenging exemplar requirements engineering research 
compared traditional examples literature offers unusual combination features real requirements documents 
covers different types requirements expressed varying levels precision functional requirements real time performance constraints privacy concerns concurrency distribution aspects optimization requirements maximizing meeting convenience minimizing interaction participants suggested heuristics defining near solutions high level objectives transparency reliability flexibility usability changeability includes open issues need resolved part requirements engineering process interfering objectives automation alternatives alternative patterns communication cooperation satisfactory behaviour automated part composite system heavily relies satisfactory behaviour agents environment part 
precise functionalities system provide quite clear 
small size respect real world documents preliminary problem statement considerably larger usual toy problems popular past 
time lends implementations potentially useful reallife situations 
problem ability address questions separate linked specification units felt major advantage goal agent oriented languages functional conceptually flat representation languages vdm 
kaos outer era declaration level allows traceability units inner temporal logic level allows formal reasoning elaboration 
applying goal directed strategy allowed trace decisions regarding definition objects actions back underlying goals 
distinction domain definitions system requirements jac helpful case study 
important separation concerns supported kaos partitioning assertions elementary invariants pre postconditions describe objects actions domain requirements consist goals operationalizing constraints strengthenings domain assertions ensure constraints 
concluded assertion fragment proper domain specific requirement led ask questions discover new constraints goals 
usefulness meta level constraints guide acquisition process specific points confirmed 
instance realized constraint fact weak constraint question triggered associated restoration action case temporary violation missing action identified trigger condition derived formal definition constraint 
suggested section benefits reusing adapting descriptions starting scratch apparent 
specification cover aspects described preliminary definition vla 
reason aspects covered details resulted long document 
writing details time consuming tedious 
unavailability syntax directed editor especially harmful respect 
reason number aspects initial problem statement capture notably usability changeability 
reason initial version specification turned significant number bugs detected trying formal proofs see example section 
shifted focus formal techniques avoiding problems particular techniques proving correctness goal reductions 
started direction building extensive library reduction templates proved correct standard temporal logic techniques 
section discussed various kaos independent problems encountered step elaboration process notably difficulty identifying right goals reductions need goals weakening formulation finding alternative reductions problem dealing conflicting goals finding reasonable compromises need occasionally restructure goal graph permit parallel elaboration disjoint types goals 
issues discuss 
granularity conceptual units 
choice granularity leaf concept impacts granularity concepts depending 
example constraint introduced section split number sub constraints agents actions enforce needed decomposed 
similarly scheduler agent split number sub agents actions assigned needed decomposed 
currently precise criteria deciding level granularity best 
need felt formulate assertions assumptions retracted specific versions system 
particular case goals constraints achievable optimistic assumptions normal behaviour agents 
example record fact participants highly reliable maintaining electronic agenda explicit assumption 
similar assumptions participants willingness respond scheduler requests communicating date constraints weakened versions 
formulation assertions explicit assumptions attached goals constraints depend possible retract specific versions system depending specification units easily pointed appropriate revision 
support sort truth maintenance kaos meta model need extended assumption meta concept dependency meta relationship 
currently working assumptions dependencies frequently encountered trying meta model process meta model modelling software processes 
mentioned section frequent recourse usage scenarios validate specification try point aspects system overlooked 
experienced typical scenarios easier identify preliminary stages acquisition goals explicit deeper understanding system gained 
scenarios may source complementary insights popular acquisition vehicle jac pot 
generated specification exhibit deficiencies fic 
viewpoints capture integration nus may provide complementary means acquiring goals objects actions 
viewpoints especially meaningful applications meeting scheduling human automated agents high 
led hybrid strategy combine goal directed scenario directed viewpoint directed acquisition tactics contribute building adequate complete consistent set requirements 

meeting scheduler problem originated number lively discussions steve fickas group university oregon 
reported partially funded commission european communities esprit project belgian scientific affairs project oasis 
dam darimont resource models kaos res 
rep rr ucl unit informatique 
dam darimont taxonomy reduction patterns res 
rep rr ucl unit informatique 
dar dardenne fickas van lamsweerde goal directed concept acquisition requirements elicitation proc 
th intl 
software specification design ieee 
dar dardenne van lamsweerde fickas goaldirected requirements acquisition science computer programming vol :10.1.1.36.7311

dub dubois ph 
du bois petit object oriented requirements analysis agent perspective proc 
ecoop th european conf 
object oriented programming springer verlag lncs 
fea feather language support specification development composite systems acm trans 
programming languages systems apr 
fea feather requirements juncture domain instance proc 
re st intl 
ieee symp 
requirements engineering jan 
fic fickas helm knowledge representation reasoning design composite systems ieee trans 
software engineering june 
fin finkelstein potts building formal specifications structured common sense proc 
th intl 
workshop software specification design ieee 
gut guttag horning larch languages tools formal specification springer verlag 
hoa hoare proof correctness data representations acta informatica vol 

jac jacobson object oriented software engineering case driven approach addison wesley 
jac jackson zave domain descriptions proc 
re st intl 
ieee symp 
requirements engineering jan 
jon jones systematic software development vdm nd edition prentice hall 
ken kent maibaum quirk formally specifying temporal constraints error recovery proc 
re st intl 
ieee symp 
requirements engineering jan 
koy specifying message passing systems temporal logic springer verlag lncs 
man manna pnueli temporal logic reactive concurrent systems 
springer verlag 
mylopoulos chung nixon representing non functional requirements process oriented approach ieee trans 
software engineering june 
nus nuseibeh kramer finkelstein expressing relationships multiple views requirements specification proc 
icse th intl 
conf 
software engineering 
pot potts takahashi anton inquiry requirements analysis ieee software march 
reu waters requirements apprentice automated assistance requirements acquisition ieee trans 
software engineering march 
rob robinson integrating multiple specifications domain goals proc 
th intl 
workshop software specification design ieee 
spi spivey notation manual nd edition prentice hall 
swa swartout balzer inevitable intertwining specification implementation communications acm vol 
july 
vla van lamsweerde learning machine learning introducing logic approach artificial intelligence vol 
wiley 
vla van lamsweerde dardenne kaos project knowledge acquisition automated specification software proc 
aaai spring symp 
series track design composite systems stanford university march 
vla van lamsweerde darimont ph 
massonet meeting scheduler system preliminary definition internal report university louvain 
