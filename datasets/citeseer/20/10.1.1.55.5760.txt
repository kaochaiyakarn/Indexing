workflow management systems generation distributed processing tools alonso mohan institute information systems eth zurich ifw zurich switzerland ibm almaden research center harry road san jose california usa workflow management systems attracted great deal attention due ability integrate heterogeneous distributed applications coherent business processing environments 
spite limitations existing products enjoying considerable success practical implementation functionality concepts studied years 
goals may changed office automation computer supported cooperative business processes re engineering basic ideas concepts remained 
mistake try see current systems applications 
today computer environments trend small computers big ones revived old dream distributed computing 
significant lack tools implementing operating maintaining systems 
existing solutions belong mainframe world slowly making way pcs workstations 
tp monitors offer perfect example trend 
long ago tp monitors large installations 
basic glue practical system 
workflow management systems hand long history tp monitors provide functionality essential distributed environment 
precisely functionality concepts ideas associated workflow management play crucial role 
chapter describes detail functionality provides insight environments business processing 
chapter basic platforms implement generic distributed systems commodity hardware software clusters personal computers workstations connected network 
continuous increase computing power storage capacity communication speed turned configurations viable cost effective alternative architectures 
matter fact necessary infrastructure place terms hardware clusters personal computers connected local area network software existing applications 
component missing necessary glue coherent autonomous heterogeneous building blocks running distributed loosely coupled systems 
federated database systems tp monitors persistent queuing standards corba process centered software engineering workflow management systems best known examples 
functionality needed environments roughly divided obvious categories interface definition communication execution guarantees development environment 
existing systems usually aim provide functionality categories tp monitors execution guarantees corba interface definition queuing systems communication platforms workflow systems developing distributed applications 
narrow focus category related products generally available stand systems 
users designers interested getting categories resort combine heavy weight solutions adversely affects performance usability 
categories needed practical system rational approach build systems incorporate categories functionality initial design avoid redundancy today solutions 
transactional services described corba standard excellent example 
reasonable implementation services tp monitor 
tp monitors provide great deal services implemented corba environments basic services distributed application 
result joining systems great deal unnecessary redundancy introduced 
number examples limited number possible combinations systems 
combinations currently implemented form 
wfms generation distributed processing tools role workflow management play computing environments immediately follows idea 
factors workflow management successful support provide developing complex applications distributed systems existing tools 
concept generalized systems turning workflow management basic technologies developing large scale distributed applications autonomous components 
workflow management evolve form taken current workflow products 
component larger tightly integrated architectures 
order happen workflow management needs reinterpreted perspective going current products business processes reengineering 
way consider workflow management high level programming language linking single control logic heterogeneous applications residing wide geographic area 
direction hinted workflow designers workflow system essentially tool programming coarse granularity 
approach basic building blocks entire applications databases spreadsheets text editors scientific tools workflow management programming tool build distributed applications building blocks transparent manner 
goal chapter describe idea detail emphasizing functionality workflow management interest generic applications 
infrastructure provided support distributed execution complex processes discussed section 
section presents basic features current systems limitations suggesting ways address 
section concludes overview areas business processing workflow technology applied 
workflow management workflow management relatively new term 
ideas concepts associated quite time 
workflow functionality early systems areas office automation transaction processing document routing image management 
technology develop full functional systems available years 
certain extent workflow management window opportunity decade organizational management trends business process reengineering 
result uncommon find product directly associated reengineering chapter amount amount ex 
un ex un ex 
un ex 
un data container data connector transition condition control connector process model basic components workflow process world 
change workflow systems diversify incorporate ideas areas 
section discusses main ideas workflow management tying business processes step generalizing applicability distributed environments 
language representation procedure workflow process seen annotated directed graph nodes represent steps execution edges represent flow control data different steps annotations capture execution logic 
forms representation possible rules instance basic concepts essentially regardless representation 
chapter follows annotated directed graph approach commercial products 
workflow language seen meta programming language basic instructions procedure calls 
main elements shown execution unit basic instruction workflow language 
compared procedure call programming language 
similarly procedure calls correspond internally defined procedure process structured block instructions block remote procedure call external application activity 
associated execution unit input output data container store inputs outputs execution unit 
state associated execution unit wfms generation distributed processing tools conditions determine execution unit start determine completed successfully 
input container output application ot nested process container execution unit start condition condition state execution unit basic building block workflow model process equivalent program 
specifies execution logic linking execution units control data connectors 
allow nesting process represented execution unit case step process 
possible states process shown 
executed inactive active start condition executing terminated finished condition evaluation conditions system events process states true false suspended true false start suspend resume forced termination restart restart forced termination state diagram process blocks allow modular process structured programming 
block equivalent series execution units bracketed 

essentially process name reused 
contrary sub processes bound parent process run time blocks instantiated compilation time 
possible associate certain semantics blocks denote specialized types structures loops case statements fork parallel operations 
activities correspond invocation external applications 
processes blocks structuring constructs effect outside chapter flow system 
activities correspond interactions external world 
manual require human intervention started automatic started human intervention 
general manual activities correspond activities require user involvement completed filling form providing information making decision 
automatic activities hand usually require user participation transactions database index calculations statistical calculations 
associated activity application set eligible users indicating application invoked users allowed execute 
shows possible states manual activity automatic activities similar slightly simpler state graph 
condition start inactive ready active condition finished true executed activity terminates forced termination start execution flow control reach activity evaluation conditions system events activity states terminated suspended resume suspend start executing false restart true restart false state diagram activity data containers provide persistent repository input parameters output execution unit 
case processes input data container collects input parameters entire process 
process starts executed input parameters distributed input containers execution units process 
execution units terminate outputs transferred output data containers output container process 
activities input data container stores parameters invoking application output data container stores application return values 
data connectors specify data flow execution units 
instance input data container process mapped different input data containers execution units process indicating data connectors variable process container corresponds variable execution unit container 
mechanism pass results produced activity inputs activity 
data containers wfms generation distributed processing tools data connectors eliminate need global variables allow execution unit define parameters 
data connectors forces workflow programmer explicitly state data flow process helps optimize data migration applications distributed wide geographic area 
control connectors indicate flow control execution units 
general control connectors execution units level nesting modularity language 
possible add control connector activities different blocks activity external process activity process 
control connector condition attached determine control connector followed 
conditions boolean expressions data data containers 
indicate certain actions take place 
case execution units types conditions considered start conditions 
specifies execution unit start execute exact meaning varies depending execution unit block process activity 
determine execution unit terminated successfully usually checking return code provided corresponding output data container 
case control connectors conditions indicate connector followed 
condition connector evaluated true execution unit taken inactive state exact action depends nature execution unit 
condition associated connector evaluates false indicates connector followed 
marking control connector false triggers procedure dead path elimination marks connectors execution units executed 
helps determine process terminated execution 
applications represent external programs invoked part execution activity 
applications registered workflow system applications installed operating system 
registration process allows workflow system establish network addresses application access permissions associated operating system runs associated paths input parameters additional information necessary invoke application remotely 
registered applications invoked linking activities 
staff represents users sets users 
similarly applications users registered workflow system 
users registered individually chapter runtime navigation server storage server env 
data audit data active instances persistent storage runtime interactions interfaces app process data server main components workflow management system grouped meaningful sets usually known roles 
roles allow system refer groups programmers managers engineers sales representatives allocating having deal individual users 
activity process defined part information specified users group users eligible execute activity start process 
architecture architectural details vary product product evolving quickly products try cope demanding environments 
possible distinguish set features common systems looking functionality needs provided 
functional description basic functionality workflow system divided major areas design development execution environment interfaces 
usually areas referred runtime control runtime interactions respectively 
design development workflow systems provide language lines described tools register users applications 
programming designing workflow process usually done graphical interface execution units represented variety wfms generation distributed processing tools selectable icons connectors directed links icons 
approach user friendly drawbacks main cumbersome visualize manipulate large complex processes 
current systems usually provide textual language specify processes cases languages adequate large scale programming 
sophisticated languages supported 
additional tools provided debugging compiling process description object code execution 
current systems provide primitive development environment key role plays component systems significantly enhanced 
execution environment divided parts persistent storage process navigation 
persistent storage provides repository necessary information system kept retrieved time 
persistent storage managed storage server 
information involved complex necessary support complex queries systems database management system purpose 
advantage relying persistent storage possible recover failures losing data forward recovery provides means maintain record execution processes 
features open interesting possibilities programming distributed applications 
instance fact execution persistent implies failures require repeat entire process execution resumed point left failure occurred 
possible subdivide persistent storage areas data stored audit trail active instances environment information 
audit trail contains information executed processes 
business environments provides information necessary evaluate organization performance system evolution potential bottlenecks supporting data mining analysis techniques 
active instances correspond persistent state processes executed queried monitoring tools provided user interface 
environment information corresponds staff applications 
locate applications determine invocation method locate users determine access rights 
process navigation performed navigation server wfm engine 
mainly consists evaluating conditions specified activities control connectors activating deactivating control connectors triggering status changes execution units events place system 
usually operations performed transactions underlying storage server 
chapter workflow system supports types interfaces users application interfaces 
users interact workflow system worklist acts repository activities assigned user 
interface simple list manual activities waiting selected user sophisticated dynamic interface audit trail querying information regarding executed processes 
worklist created user logs updated time new activity ready execution updates sent environment information kept date regarding users connected system time location 
applications handled location basis 
users usually connect system pc workstation 
locations application interface applications started users decide execute activity 
possible application interfaces locations users connected 
allows instance connect mainframes specialized workstations execute automatic activities wide area networks 
type connections allowed supported depends largely intended product collaboration tool lan environment production tool conjunction oltp line transaction processing olap line analytical processing systems 
runtime architecture current workflow management systems serve platforms executing distributed applications designed business rules 
functionality provide business processes generic distributed applications 
case tp monitors workflow systems slowly evolving specialized multi platform distributed operating systems 
generic example existing architectures shows architecture flowmark 
workflow systems built top database management system 
case flowmark database object store represented oss db act storage server 
systems relational databases instance microsoft sql server uses oracle inconcert informix oracle sybase engines 
navigation server represented fms component usually implemented client database navigation steps involve getting information database 
wfms generation distributed processing tools fms fms oss db pec rtc pec rtc app app pec app rtc oss objectstore server fms flowmark server rtc runtime client pec program execution client app application program network run time architecture ibm flowmark rest system components execution process connected navigation servers connected 
connections need lan take place wan mobile clients 
common configuration application user interface location user accesses system 
allows user access corresponding worklist execute activities locally course requires application locally installed 
represented runtime client rtc program execution client pec application app 
correspond user interface application interface application invoked respectively 
possible configure nodes host application interface specialized applications 
configuration plays important role automatic activities involved instance series transactions executed database server 
process execution way execution proceeds workflow system best illustrated example example follows architecture runtime interactions flowmark 
execution unit ready execution result navigation step 
case processes reach active state starting activities set ready necessary input data transferred corresponding input data containers 
case activities reach ready state navigator performs role staff resolution chapter ss ns ui ai app 
start activity 
db update 
commit transaction 
start program 
start application 
activity running 
api call 
data request 
db query 
query results 
requested data 
api call return 
application terminates 
program terminated 
db update 
commit activities 
activity terminated ss storage server ns navigation server ui user interface ai application interface app application steps involved execution activity determine users eligible execute activity updates worklists users including activity new workitem 
activity automatic activity immediately changes active state navigator locates node activity executed 
corresponding application invoked activity switches executing 
manual activities hand wait user selects activity execution 
case exchange messages different components shown 
manual activities appear worklist users eligible execute 
user selects activity user interface sends start activity message navigator 
navigator reacts message steps 
activity deleted worklists users sending message worklists indicating activity longer available 
second transaction started storage server retrieve information related corresponding application 
information allows navigator determine application interface responsible executing activity 
possible application reside locations 
requires interaction user application usually invoked user location simple heuristics select appropriate location load balancing overhead pre established priorities 
wfms generation distributed processing tools application interface selected start program message sent 
third final step navigator sends activity running message user interface activity selected status activity updated progress execution monitored user interface 
communication application workflow system takes place api calls application interface 
application interfaces multi threaded able cope applications executed simultaneously location 
receiving start program message application interface spawns thread particular application thread start application 
initial parameters passed application invoked sent application interface start program message 
application may request additional information input data container issuing api calls application interface 
calls received application interface forward data request message navigator 
navigator receiving request executes transaction storage server forwards requested data application interface 
application interface completes api call returning data application 
application terminates application interface sends program terminated message navigator values returned application 
navigator message triggers execution transaction store values returned application appropriate output data container 
navigator proceeds perform corresponding navigation steps check condition activity false status activity set terminated true activity status set finished outgoing control connectors evaluated forth 
final step navigator sends activity terminated message user interface indicating selected activity completed execution 
message results activity deleted worklist 
workflow management systems key features successful workflow product availability scalability industrial strength design :10.1.1.44.6642:10.1.1.101.5199
availability workflow systems mission critical processes 
scalability support large organizations 
industrial chapter strength applicability greatly reduced 
problem obvious requirements exceed current database transaction processing technology considered state art corporate computing 
consequence robustness technological maturity reached transaction processing area lacking workflow systems 
spite initial success current systems need developed areas availability goal current systems central tool coordination mission critical processes 
candidates current workflow systems large corporations number potential users tens thousands number concurrent process hundreds thousands number sites connected wfms thousands distributed wide geographic area heterogeneous systems 
environments availability key feature 
fortunately failures workflow system masked redundancy inherent architecture 
instance common application installed nodes 
available may possible invoke application different node 
applies components storage server 
workflow system acts execution engine driven storage server currently implemented systems centralized database 
centralized database sooner bottleneck single point failure 
certainly possible rely underlying database provide necessary degree availability 
approach significant disadvantages 
place database techniques usually product primary backup database 
practice tie workflow architecture particular database conflict distributed heterogeneous nature system 
require backup individual system single remote backup entire system distributed wide area network 
solution fairly expensive provide way cope heterogeneity storage servers reasonable expect workflow clusters database storage server 
second place granularity database solutions fine mainly pages log records ignores semantics application 
advantage having defined application limited set interactions lost 
availability achieved wfms generation distributed processing tools backup backup backup backup backup backup process process process process process process workflow clients workflow server wfs object oriented database system relational database system database system wfs wfs wfs flexible backup architecture workflow systems price 
pay price adjustable parameter system flexible possible 
way address concerns provide backup architecture database independent uses knowledge semantics workflow operations optimize exchange information primary backup allows adjust degree availability system 
purpose standard database techniques hot standby cold standby safe safe 
approaches combined provide flexible mechanism high availability workflow systems 
process categories defined normal important critical 
critical processes safe hot standby policy critical processes resume execution immediately failure 
important processes safe cold standby approach execution resumed failures delay necessary update backup 
normal processes backup strategy execution resumed failure repaired exchange normal processes create extra overhead workflow system 
degree availability set process instance level longer possible primary backup locations process 
reason achieve database independence single backup system 
storage server act primary backup depending particular process instance shown 
backup mechanism implemented part standard communications storage servers 
difficulty primary chapter backup may different schemas instance relational database object oriented database 
problem solved relying semantic information workflow language define canonical representation component workflow process uniquely identified 
passing information primary backup done canonical representation 
practice means primary reports state changes components process opens opportunity optimize storage communication overhead 
addition backup architecture allows perform load balancing system moving execution process location effectively provides way migrate processes sets basis scalable architectures 
scalability due part emphasis placed cooperation workflow products designed small groups mind 
ways workflow systems victims success users realized potential workflows engines applied large scale environments designed 
design issues aside main problem current systems terms scalability rely centralized database implement storage server introducing serious bottleneck architecture 
course advantages centralized approach lightweight clients centralized monitoring auditing simpler synchronization mechanisms design simplicity 
general centralized database results scalability problems performance limitations 
usually concern business processes workflow system execute automatic activities distributed system 
problems addressed ways distributed execution centralized control providing way tie workflow systems storage server bigger system 
approach largely research proposal solution currently adopted products 
idea distributed execution pioneered prototype 
execution process takes place information carrier 
information carrier object migrates location location execution proceeds 
contains information relevant execution process allow navigation take place consulting wfms generation distributed processing tools data information carrier 
similar approach followed exotica flowmark message queue manager 
exotica node functions independently interaction nodes persistent messages trigger step execution 
basic idea partition process definition independent subsets distributed nodes execution may take place 
contrast information carrier information moves node node navigation takes place exotica node stores locally information needs perform navigation process 
approach followed prototype systems 
greatly reduces communication overhead nodes solves additional problems related monitoring state detection 
independently form navigation takes place advantage distributed approach need centralized database avoided eliminates performance scalability bottleneck 
resulting architecture increases resilience failures crash single node execution active processes 
possible combine distributed approach backup mechanism described provide scalability availability 
alternative distributed execution identical independent systems 
primitive form approach successfully environments tolerate load 
processes entirely independent shared resources corporate databases instance capable supporting accumulated load possible identical systems executing part total load 
approach allows linear growth really address fundamental problems way independent systems communicate 
sophisticated solution mechanisms described increasing availability system 
critical processes important processes replicated system 
copy backup purposes possible migrate execution processes primary locations load primary increases 
way scalability problem just matter providing locations processes run 
locations share environment information easily replicated sites change 
links different locations necessary backup architecture communication navigation servers allow navigation server invoke subprocess different location 
chapter idea process migration remote invocation requires reliable communications different locations 
distributed applications workflow systems usually rely persistent queuing provide basic guarantees exchange information 
basic features current systems difficult implement solutions existing problems 
step evolution workflow system provide industrial strength database tp monitors 
industrial strength new system needs time evolve resolve design inconsistencies limitations lack flexibility initial versions 
evolution period products stable functionality defined reaching degree maturity reliable understood accepted users 
workflow systems reached state 
demands placed existing workflow systems go capabilities cases customer profile designers mind quite different actual users 
limitations scalability availability discussed obvious examples glaring limitations 
product specific related history product evolved document management system tools available time designed position market 
examples abound inability subprocesses due way data handled scalability problems due underlying database architectural limitations due communication system excessive emphasis modeling philosophy forth 
limitations quickly corrected products start gain wider customer base experience users provides necessary feedback 
set limitations common systems easy solution need addressed workflow system claim reached reasonable degree maturity 
open questions mentioned exception handling 
environments number concurrent instances may hundreds thousands instance weeks complete exceptions affecting single processes occur 
occasionally behavior active instances needs modified accommodate changes organization 
types changes currently satisfactorily supported 
difficulty pose derives wfms generation distributed processing tools way process instances stored 
ways doing compiled program collection database entries 
created modifying implicit explicit script easy matter 
possible exception may appear execution coded part behavior process 
exceptions expected behavior solved aborting entire process invoking subprocesses hopefully solve situation creates considerable overhead user 
ideally exceptions handled uniform way allowing user access process definition necessary changes resume execution process 
requires flexible handling process definition rescheduling activities modified reusing results affected modification mapping state old process state new process 
existing systems rigid provide capabilities 
important issue interaction external applications 
current systems usually possible suspend execution external application corresponding activity suspended entire process aborted 
possible control side effects application may cause 
result failures rollback processes fairly complex issue user 
currently problems solved manual intervention detecting problem left user systems 
tighter integration desirable 
may achieved standard interfaces persistent queues way ensuring reliable asynchronous communication autonomous systems 
third issue related industrial strength ability express logical units workflow language 
transactional concepts 
extensive literature advanced transaction models touched areas related workflow management :10.1.1.48.6517
transactions excellent abstraction encapsulate behavior atomicity isolation part proven extremely useful developing widely accepted theory transaction management 
current commercial workflow systems incorporate transactional notions indications change 
workflow environment transactions play significant role system component 
persistence workflow systems achieved database feature change 
interactions databases require transactions shown 
nature environment requires transactions execution guarantees provided 
problems distributed commitment atomicity arise dis chapter tributed environment arise workflow system 
problems addressed concepts successfully implemented tp monitors 
addition transactions may play significant role workflow language 
pointed ideas proposed advanced transaction models workflow environments compensation alternative execution spheres control atomicity mention 
workflow system seen ubiquitous programming environment implementing applications targeted advanced transaction models 
example transaction may influence workflow language transactions tp monitor provides transactional 
transactional extension possible bracket sets instructions usually service invocations transaction specify case transaction commits aborts 
idea sophisticated concepts applied workflow language similar fashion allow programmer workflow processes specify example units atomicity compensation expanding activities alternative execution paths case exceptions 
evolution workflow management systems section discusses motivates workflow management technology applied evolve main idea workflow technology basis programming distributed heterogeneous environments 
distributed environments mentioned chapter workflow management strongly tied evolution distributed computing 
distributed environments require categories functionality discussed interface definition communication execution guarantees development environments 
existing products far providing categories slowly converging systems provide functionality integrated efficient manner 
systems workflow concepts basic tools programming distributed systems 
wfms generation distributed processing tools characteristics distributed environment easily derived target architecture existing systems 
quick look manuals products implementations corba standard tp monitors queuing systems workflow tools reveals striking similarities architecture 
cases system succinctly described shown 
resource manager client server service provider distributed system external components generic architecture distributed system general client represents user program invoking services provided distributed system 
client usually resides outside distributed system interacts defined set apis 
server cases simple proxy actual service provider resource manager 
acts common interface server applications cases form wrapping 
corba instance server simply object adaptor takes care enforcing common interface 
corba calls server resource manager actual implementation objects 
resource manager application performs operations requested client 
instance resource managers usually databases 
way generic architecture practice common products 
general system reacts client invocations instance workflow process started method object invoked service call takes place 
result invocation service provider locates resources necessary satisfy request example locating server rerouting request recording invocation triggering side actions forwards appropriate server turn translate request call corresponding resource manager 
resource manager terminates results returned client retracing previous steps 
obviously simplification happens real systems optimizations variations basic mechanism 
main concepts similar systems points emergence common platform distributed computing 
natural expect large class applications workflow concepts new context way build applications distributed systems 
chapter programming heterogeneous distributed environments environment described wealth computer tools perform individual tasks 
workflow management simply provides way integrate tools meaningful system combining necessary process basis individual applications service providers workflow system language specify interactions service providers 
scientific data management offers example idea applied area different business processes 
scientific applications known size volume data involved 
scientific data added problem multiple formats information represented multiple transformation subjected 
existing research scientific data management overlooks fact scientific data seldom raw 
cases data undergoes complex successive transformations part sophisticated models physical phenomena 
transformations source derived data interpreted correctly knowledge created 
matters worse transformations models may evolve precise knowledge available 
support tracking data dependencies evolution lacking current systems 
number solutions proposed pointing workflow concepts way cope problems 
consider instance model shown typical example scientific data handled 
purpose model study changes erosion patterns vegetation characteristics area 
model divided parts 
erosion model takes information slopes area soil characteristics vegetation cover produce estimate erosion terrain 
note soil information obtained directly available data 
slope information readily available requires elevation samples processing get desired information 
done models digital elevation models slope models shown 
data vegetation changes result vegetation evolution model 
model takes inputs primitive raw data soil map derived applying models 
discharge model involves interpolating rainfall records calculating storm coverage applying flow analysis algorithm define showing flow water point 
wfms generation distributed processing tools slope length slope angle vegetation cover elevation samples satellite images topo map soil erosion digital elevation reconstruction vegetation change data rainfall spatial models storm discharge model precipitation model vegetation model erosion model slope analysis rainfall records vegetation samples vegetation evolution model spatial interpolation soil samples estimated rainfall scientific modeling workflow process workflow systems provide tools necessary capture modeling activities 
viewed workflow process control flow follows modeling logic data flow corresponds outputs particular algorithms inputs set algorithms 
workflow system purpose helps solve problems posed scientific data 
start execution persistent distributed different nodes provides considerable degree reliability second opens opportunity parallelize distribute expensive computations network computers 
auditing monitoring tools workflow system keep track step execution data produced 
questions lineage data set produced data dependencies data sets algorithms involved model easily answered consulting audit data workflow system 
complex tasks automatic change propagation triggering execution process inputs changes maintaining data consistency performed automatically system information recorded process 
ideas applied variety scientific environments require small modifications workflow engine 
possible chapter build basic system current commercial workflow products 
important consequence example workflow concepts play role control tools particular type high performance computations performed network workstations 
provided algorithms individual steps place workflow system language build meta programs existing programs distributed environment execute 
notion workflow management traced back prototypes research carried years ago 
propose earliest ancestors project office talk 
see roots workflow management imaging companies 
database community workflow ideas proposed form advanced transaction models 
workflow management coalition suggests areas direct influence development workflow management today image processing document management electronic mail directories groupware transactional systems project support applications business process re engineering structured system design tools 
popular workflow modeling paradigms traced back early artificial intelligence speech theory 
general need workflow functionality identified long ago different communities realized potential offered computers communications 
instance just decade similar ideas discussed areas office office automation groupware computer supported cooperative 
new ideas advances technology allow take workflow concepts original goals 
workflow management system viewed meta programming tool autonomous heterogeneous applications basic instructions 
possibilities approach clearly seen area business process reengineering workflow management systems provided efficient way designing complex distributed applications reusing existing components 
example discussed regarding scientific computing shows ideas successfully applied areas turning workflow management key component systems 
functionality described chapter tied business processes 
today commonly workflow wfms generation distributed processing tools model discussed programming language workflow system playing roles developing execution environment 
execution environment common shown applications attention received candidate basic computer infrastructures near 
efforts tp monitors corba queuing systems addressing crucial aspects execution environments 
workflow management viewed effort direction 
focus business process helped create initial market allowed gain important experience usage workflow systems 
step extrapolate ideas areas combine workflow technology going efforts distributed computing arrive generation distributed processing tools 
part done context exotica project ongoing ibm almaden research center 
grateful past current members exotica project el abbadi agrawal kamath contributions project 
part current research projects database research group eth zurich 
grateful claus hagen hans jorg schek helpful discussions workflow management systems 
refer specific ibm products chapter drawn ibm product plans contents chapter 
opinions expressed 
primer california 
alonso el abbadi 
cooperative modeling applied geographic research international journal intelligent cooperative information systems pages 
alonso agrawal el abbadi process synchronization workflow management systems th ieee symposium parallel chapter distributed processing october new orleans louisiana usa 
alonso 
schek 
database technology workflow environments informatik informatique journal swiss computer science society april 
alonso agrawal el abbadi kamath mohan 
advanced transaction models workflow contexts proceedings th international conference data engineering new orleans louisiana usa feb march 
alonso agrawal el abbadi mohan kamath 
exotica persistent message architecture distributed workflow proceedings ifip wg working conference information systems development decentralized organizations 
trondheim norway august 
alonso kamath agrawal el abbadi mohan 
exotica workflow management system mobile disconnected clients international journal distributed parallel databases 
vol 
pp 
july 
alonso kamath agrawal el abbadi mohan failure handling large scale workflow management systems ibm technical report rj almaden research center 
barbara rusinkiewicz 
managing dynamic workflows distributed environment journal database management idea group publishing 
pernici 
design requirements office systems 
acm transactions office information systems april 
breitbart 
schek sheth weikum merging application centric data centric approaches support transaction oriented multi system workflows acm sigmod record september 
bonner database benchmark high throughput workflow management proceedings fifth international conference extending database technology edbt avignon france march 
wfms generation distributed processing tools bussler 
user mobility workflow management systems 
proceedings telecommunications information networking conference tina melbourne australia february 
chen dayal transactional nested process management system proceedings th international conference data engineering february march new orleans louisiana usa 
eder liebhart workflow recovery proceedings st international conference cooperative information systems coopis belgium june 
ellis gibbs rein groupware issues experiences communications acm cacm january 

object framework business applications proceedings th edbt avignon france march 
elmagarmid ed 
transaction models advanced database applications morgan kaufmann 
fisher gilbert 
distributed system supporting flexible office procedures control language ieee computer society office automation symposium pages gaithersburg md april 

move workflow provokes business process scrutiny software magazine pages april 
garc ia molina gawlick klein salem modeling long running activities nested sagas bulletin ieee technical committee data engineering march 
gawlick 
high performance tp monitors need develop 
georgakopoulos hornick framework enforceable specification extended transaction models transactional workflows international journal intelligent cooperative information systems september 
georgakopoulos hornick manola customizing transaction models mechanisms programmable environment supporting reliable workflow automation ieee transactions knowledge data engineering april 
chapter georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure distributed parallel databases vol 
april pp 
gray reuter 
transaction processing concepts techniques morgan kaufman 
qiu ward 
managing derived data scientific dbms proceedings th international conference large databases dublin ireland 
hagen kombination von und im th workshop grundlagen von may 
hammer reengineering manifesto business revolution new york 

workflow model workflow management coalition tc december 
hsu 
special issues workflow extended transaction systems bulletin ieee technical committee data engineering june march 
ibm flowmark managing workflow version ibm document 
sh march 
ben shaul kaiser paradigm decentralized process modeling kluwer academic publishers boston 
kamath alonso mohan 
providing high availability large workflow management systems proceedings fifth international conference extending database technology edbt avignon france march 
katz design large object server supporting earth system science researchers aaas workshop advances data management scientist engineer boston massachussetts usa february pages 
hinrichs klein 
experiences domino office procedure system proceedings ecscw amsterdam september 
wfms generation distributed processing tools leymann 
supporting business transactions partial backward recovery workflow management systems gi buro technik und wissenschaft btw springer verlag dresden germany 
lyon tandem remote data facility proceedings ieee compcon 
medina mora wong flores enterprise integration technology bulletin ieee technical committee data engineering june 
vossen weske workflow management dna sequencing proceedings st international conference cooperative information systems coopis belgium june 
mohan tutorial state art workflow management system research products th international conference extending database technology avignon march acm sigmod international conference management data montreal june 
mohan 
survey dbms research issues supporting large tables proceedings data organization algorithms pages chicago il 
mohan distributed commit protocols recoverable messaging queuing bulletin ieee technical committee data engineering march 
nodine zdonik cooperative transaction hierarchies transaction model support design applications proceedings th international conference large databases brisbane australia august 
special issue tp monitors distributed transaction management bulletin ieee technical committee data engineering march 
object management group common object request broker architecture specification john wiley 

schek weikum implementation performance multi level transaction management multidatabase environment proc 

int 
workshop research issues data engineering distributed object management taipei taiwan 
chapter silver guide workflow software visual comparison today leading products bis strategic decisions 
maxwell matsumoto irwin business process environment supporting collaborative planning journal collaborative computing spring 
th getting workflow datamation october 
transarc writing applications transarc 
enc 
tsichritzis 
form management communications acm july 
wachter reuter contract model 
weikum kotz dittrich mentor project steps enterprise wide workflow management proceedings th international conference data engineering february march new orleans usa 
workflow management coalition members glossary workflow management coalition specification 
technical report workflow management coalition november 
accessible www aiai ed ac uk wfmc 

office automation evolution revolution sloan management review spring 
