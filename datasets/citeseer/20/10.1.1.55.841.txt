genetic algorithms solve np complete problems kenneth de jong william spears george mason university navy center applied research ai gmu edu spears aic nrl navy mil strategy genetic algorithms gas solve np complete problems 
key aspect approach taken exploit observation np complete problems equally difficult general computational sense better ga representations leading successful gas np complete problems 
np complete problem mapped polynomial time strategy described consists identifying canonical np complete problem gas solving np complete problems indirectly mapping canonical problem 
initial empirical results support claim boolean satisfiability problem sat canonical problem npcomplete problems poor ga representations solved efficiently mapping sat problems 

approach discussing comparing ai problem solving strategies categorize terms strong weak methods 
generally weak method property wide applicability assumptions problem domain suffer combinatorially explosive solution costs scaling larger problems 
state space search algorithms random search familiar examples weak methods 
frequently scaling problems avoided making sufficiently strong assumptions problem domain exploiting assumptions problem solving method 
expert systems fall category require large amounts domain problem specific knowledge order efficiently find solutions enormously complex spaces 
difficulty strong methods course limited domain applicability leading generally significant redesign applying related problems 
characterizations tend feel trapped sense give significant performance achieve generality vice versa 
increasingly clear methodologies fall extremes offer similar ways possibility powerful general problem solving methods 
approaches mind genetic algorithms gas neural networks nns 
similar sense achieve power generality demanding problems mapped particular representation order solved 
fairly natural mapping exists impressive robust performance results 
hand mapping awkward strained approaches behave traditional weak methods yielding mediocre unsatisfying results scaling 
observations suggest general issues deserve study 
need understand severe mapping problem large classes problems effective mappings exist 
clearly spend large amounts time effort constructing mapping new problem aren better traditional strong methods 
second major issue involves achieving better understanding relationship gas nns 
representation issues performance characteristics significantly different 
classes problems handled effectively approach 
step exploring issues 
focuses gas applied large known class combinatorially explosive problems np complete problems 
parallel effort underway nns solve np complete problems 
conclusive study completed describe preliminary results compare performance gas nns family difficult np complete problems 

np complete problems complexity theory np denotes set decision problems solvable non deterministic polynomial time algorithm 
denotes set decision problems solvable deterministic polynomial time algorithm 
np problems considered hard sense currently solvable deterministic polynomial time 
open question np canonical example problem np boolean satisfiability problem sat arbitrary boolean expression variables exist assignment variables expression true 
familiar examples include job shop scheduling bin packing traveling salesman problems 
concept np completeness comes observation problem np transformed equivalent sat problem polynomial time cooke theorem reverse polynomial time transformation may exist 
problems np way transformations form equivalence class equally hard problems called np complete problems garey 
np complete problems computationally equivalent complexity theoretic sense appear equivalent respect map ga nn representations 
example case gas sat problem natural representation finding effective representations bin packing job shop scheduling traveling salesman problems quite difficult dejong goldberg grefenstette smith davis oliver goldberg 
observations suggest intriguing strategy 
suppose able identify np complete problem effective representation methodology interest gas nns develop efficient problem solver particular case 
np complete problems don effective representations solved transforming canonical problem solving transforming solution back original 
explored strategy detail gas sat canonical np complete problem 
similar effort underway nns date 

genetic algorithms boolean satisfiability problems order apply gas particular problem need select internal string representation solution space define external evaluation function assigns utility candidate solutions 
components critical success failure gas problem interest 
selected sat choice canonical np complete problem appears highly desirable string representation binary strings length th bit represents truth value th boolean variable boolean variables boolean expression 
hard imagine representation better suited gas fixed length binary context independent sense meaning bit unaffected changing value bits dejong 

choosing payoff function somewhat thought selecting evaluation function 
simplest natural function assigns payoff candidate solution string values specified string result boolean expression evaluating true 
moment thought suggests problems interest payoff function support formation useful intermediate building blocks 
real problem domain partial solutions sat interest critical components ga approach 
approach providing intermediate feedback transform boolean expression conjunctive normal form cnf define payoff total number top level conjuncts evaluate true 
intuitive sense general perform transformations polynomial time introducing large number additional boolean variables turn combinatorially increase size search space 
alternative assign payoff individual clauses original expression combine way generate total payoff value 
context natural approach define value true value false define value simple expressions follows val val val 
min val 
val val 
max val 
val boolean expression broken parsed basic elements systematic mechanism assigning payoff 
unfortunately astute reader probably noticed mechanism better original assigns payoff values individual clauses entire expression 
minor change mechanism generate differential payoffs val 
ave val 
val suggestion smith smith intuitively justified arguing reward nearly true clauses 
example solutions boolean expression assigned payoffs follows payoff ave max ave max ave max ave max notice correct solutions lines assigned payoff incorrect solutions lines line gets higher payoff got half right 
approach successfully smith initially adopted experiments 
number features payoff function left uncomfortable led careful examination 
fairly obvious property ave evaluate clauses payoff function invariant standard boolean transformations 
example violates associativity law val val ave ave ave ave attempted construct alternative differential payoff functions ideal property payoff invariance success 
argue weaker form invariance adequate gas truth invariance 
mean payoff function assign value typically set values correct solutions boolean expression map incorrect solutions set values typically value correct ones 
boolean transformations occur gas searching solutions actual values assigned non solutions importance fact useful differential payoff support construction partial solutions 
unfortunately proposed payoff function guarantee second weaker property truth invariance example shows de morgan max see table left side right side notice lines solutions lines assigned payoff de morgan law applied 
general shown payoff assign value non solutions frequently assigns values potentially give higher payoff non solutions 
careful analysis indicates problems arise de morgan laws involved introducing terms form 
suggests simple fix preprocess boolean expression systematically applying de morgan laws remove constructs 
suggests interesting opportunity 
constructs form 
computed correctly take values 
de morgan laws convert constructs introduce additional differential payoff 
converting forms equivalent reducing scope simple variables 
fortunately conversion cnf process linear complexity done quickly efficiently 
summary feel addition preprocessing step effective payoff function applying gas boolean satisfiability problems 
payoff function properties assigns payoff value candidate solution actual solution assigns values range value receive differential payoff basis near clauses satisfied 

possible improvements payoff function way view problems discussed previous section note undesirable effects due fact choosing evaluate clauses ave max broken natural symmetry sense clauses differential payoffs assigned clauses assigned 
interesting observation evaluating nodes raising ave integer power truth preserving assuming preprocessing step described additional beneficial effects 
effect reducing asymmetry reducing average score assigned false clause 
addition increases differential payoff clauses nearly true 
hand approaches infinity function ave behaves min means lost differential payoff property 
suggests interesting optimization experiment determine useful value initial results section 

experimental results 
implementation details experiments performed lucid common lisp implementation gas 
cases population size held fixed standard point crossover operator applied rate mutation rate selection performed baker sus algorithm baker 
having formulated sat optimization problem interesting issues concerning convergence solution 
candidate evaluates know solution search terminated 
conversely strong motivation continue search solution nearly true expressions generally interest person formulating problem 
difficulty course particular run guarantee solution reasonable amount time due increasing homogeneity population search proceeds 
approach take extra measures guarantee continuing diversity increasing mutation selection ranking introducing crowding factors 
unfortunately additional side effects need studied controlled 
chosen simpler approach 
de jong measure population homogeneity allele convergence dejong measure exceeds ga restarted new random population 
consequently experimental data subsequent sections evaluation counts reflect ga restarts 
technique bit drastic appears quite practice 
number evaluations trials required find solution vary quite bit run due stochastic effects results represent data averaged independent runs 

initial sat experiments set experiments involves constructing families boolean expressions control size difficulty problem 
family selected consists peak tp expressions form 

exactly solutions 
varying number boolean variables observe gas perform size search space increases exponentially number solutions remains fixed 
presents results varying search spaces ranging size 
clear differential payoff function working intended gas locate solutions tp problems difficulty 
things bit difficult changed problem slightly turning solutions false peak fp follows 

previous solution correct correct solution 
evals variables log search space log evals variables log search space performance gas tp problems presents results applying gas fp family ranging 
see gas difficulty finding correct solution presence false peaks 
dealing problems known polynomial time algorithms particularly interested log log graphs 
notice tp fp problems sub linear curve generated indicating expected substantial improvement systematic search 
form sublinear curves take give indication speedup systematic search obtained gas 
example curves logarithmic form polynomial time algorithm sat 
additional discussion curves occur section data 
initial encouraging results eager apply gas naturally arising boolean expressions 
difficult find examples hard sat problems including evals variables log search space log evals variables log search space performance gas fp problems smith smith 
chosen look np complete problems possible sources 
selected family hamiltonian circuit problems 

solving hamiltonian circuit problems hamiltonian circuit hc problem consists finding tour directed graph touches nodes exactly 
clearly graph fully connected easy task 
edges removed problem difficult general problem known np complete 
attempting solve problem directly gas raises representation issues case traveling salesman problems dejong grefenstette 
difficult construct polynomial time transformation hc problems sat problems 
example transformation 
definition hc problem implies solution node exactly input edge output edge 
tour violates constraint solution 
equivalent boolean expression simply conjunction terms indicating valid edge combinations node 
example consider node node output edges input edge 
output edge constraints exclusive db de db de 
input edge transforming hc problems sat problems described simply cd 
assignments edge variables indicate edges tour value indicating edge included value 
transformation computed polynomial time solution hc problem exists boolean expression satisfiable 
wish systematically study performance gas series increasingly difficult hc problems 
clearly complexity case function number nodes number directed edges 
number nodes problems small number edges nearly fully connected approximately edges interesting 
feel problems approximately edges general difficult problems 
addition achieve degree uniform difficulty allow direct comparison results previous section wanted problems exactly solution 
consequently defined family hc problems experiments 
consider graph nodes labeled consecutive integers 
suppose node directed edges nodes larger labels node 
nodes directed edges nodes larger labels including 
node directed edge back node 
complete tour consists node labels increasing order reach node 
node travel back 
edges directed clear legal tour 
intuitively instances hc problems difficult 
tour exists instance 
addition large number solutions complete tours scattered search space 
illustrates corresponding sat payoff function looks hc problem type nodes 
summary experimental framework consists varying number nodes range sat payoff function node hc problem value generating directed graph form described containing approximately edges exactly solution 
hc problems transformed equivalent sat problem transformation described generating search space sizes ranging gas solve corresponding sat problems turn describes legal hc tour 
presents results experiments 
notice succeeded generating significantly difficult sat problems number evaluations required find solution order magnitude higher earlier tp fp problems 
difficult problems log log plot sub linear 

improvements sat payoff function pleased results far curious effects ave evals variables log search space log evals variables log search space performance gas hc problems payoff function integer values reasons discussed section 
hypothesis initial increases value improve performance certain point performance drop ave began closely approximate min 
evals variables log search space 
tp problems ave ave ave ave ave evals variables log search space 
fp problems ave ave ave ave ave evals variables log search space 
hc problems ave ave ave ave ave performance gas ave tested hypothesis re running gas families problems tp fp hc varying compared performance original results 
presents results experiments 
somewhat surprisingly optimum appeared 
accordingly adopted value remaining experimental performed 

empirical evidence implicit parallelism nice theoretical results holland original analysis power gas implicit paral theorem sets lower bound speedup systematic sequential search holland 
suggests worst case gas search cube root search space order find solution general better 
unexpected benefits experimental results substantial empirical evidence just speedups sat problems 
summarizes performance gas families sat problems ave payoff function 
noted earlier log log curves appear sub linear 
get better feeling form curves tried fit linear quadratic curves data 
families sat problems quadratic form produces better fit coefficients quadratic form calculate observed speedup 
results follows tp speedup fp speedup hc speedup clearly easier problems tp fp performing better predicted lower bound 
particularly intriguing empirical results match theoretical results hc family deliberately constructed class difficult single solution problems 

current activities 
parallelization experiments reported constrained lucid common lisp 
lisp easy automate process generating lisp code various sat families problems lucid lisp compiler imposes internal limits size complexity functions compile 
hit limits attempting generate payoff functions hc problems nodes 
process switching genesis system implementation gas grefenstette avoid log evals variables log search space tp problems log evals variables log search space fp problems log evals variables log search space hc problems summary performance gas ave limitations 
side benefit conversion experiments run order magnitude faster 
ga sites genesis step added advantage creating additional ga testbed ga community 
exciting parallelism 
genesis converted butterfly machine nrl 
butter fly mimd machine nodes 
preliminary results suggests machine result order magnitude speedup execution time 

np complete factorization problem ga performed tp fp hc problems argue problems simply interesting tp fp problems somewhat artificial exists specialized algorithms hc problems perform gas examples shown 
needed point evaluate robustness approach problem known np complete specialized algorithms developed 
example problem come cryptography community 
cryptography systems prime numbers factorization rivest 
hoey hoey devised algorithm converting factorization decision problem equivalent sat problem 
example problem form bit factor converted boolean expression variables clauses literals 
problems interest cryptographic complexity theory communities generally highly intractable 
plan set extensive experiments completed conversions described previous section 

comparison simulated annealing mentioned earlier examining neural networks nns solve np complete problems 
particular developed method simulated annealing class nns mcclelland solve sat problems 
details methodology experimental highlights worth mentioning 
sa remarkably tp problem producing correct solutions constant time regardless size tp problem 
case sa essentially greedy algorithms results surprising 
secondly sa appear reasonably competitive ga hc problems consistently outperformed examples run far see 
quadratic fits hc data seen far nn speedup approximately ga speedup reported earlier comprehensive report experiments near 
evals variables log search space sa ga log evals variables log search space sa ga gas sas hc problems 
presents series initial results regarding strategy gas solve np complete problems 
strategy avoids ga representation difficulties associated various np complete problems mapping sat problems effective ga representation exists 
initial results support view gas effective robust search procedure np complete problems sense may outperform highly tuned problem specific algorithms gas easily applied broad range np complete problems performance characteristics worse theoretical lower bound speedup 
sets stage direct comparison gas nns np complete problems 
feel comparisons important encourage research community develop additional results problems interest 
baker james 

reducing bias inefficiency selection algorithm proc 
int conference genetic algorithms applications 
davis lawrence 
job shop scheduling genetic algorithms proc 
int conference genetic algorithms applications 
de jong 

analysis behavior class genetic adaptive systems doctoral dissertation dept computer communication sciences university michigan ann arbor 
de jong 

genetic algorithms year perspective proc 
int conference genetic algorithms applications 
garey michael david johnson 
computers intractability guide theory npcompleteness freeman san francisco ca 
goldberg david robert jr 

alleles loci traveling salesman problem proc 
int conference genetic algorithms applications 
goldberg david 

genetic algorithms search optimization machine learning addisonwesley publishing grefenstette john 

genesis system genetic search procedures 
proceedings conference intelligent systems machines 
grefenstette john 

genetic algorithms traveling salesman problem proc 
int conference genetic algorithms applications 
hoey dan navy center applied research artificial intelligence 
private communication 
holland john 

adaptation natural artificial systems university michigan press 
mcclelland james david rumelhart 
explorations parallel distributed processing mit press cambridge ma 
oliver smith holland 
study permutation crossover operators traveling salesman problem proc 
int conference genetic algorithms applications 
rivest 
method obtaining digital signatures public key cryptosystems cacm 
smith gerald 

adaptive genetic algorithms boolean satisfiability problem unpublished 
smith derek 
bin packing adaptive search proc 
int conference genetic algorithms applications 
