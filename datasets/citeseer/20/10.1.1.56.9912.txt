ieee transactions knowledge data engineering vol 
september incremental recomputation active relational expressions qian gio wiederhold database updates small incremental compared database contents 
desirable recomputations active relational expressions views derived data integrity constraints active queries monitors performed incrementally 
efficient algorithm incremental recomputation active relational expressions finite differencing techniques 
database updates modeled incremental changes database relations algorithm derives update propagation minimal incremental relational expressions need recomputation 
algorithm applications maintenance materialized views derived data checking integrity constraints evaluation active queries monitors 
keywords active queries derived data finite differencing incremental recomputation integrity constraints monitors updates views database management systems need perform various forms recomputation active relational expressions face database updates 
example derived data materialized views extensively object oriented database systems support engineering software environments 
essential keep derived data materialized views date order remain usable speeding query processing 
maintenance derived data materialized views requires recomputation relevant base relations change 
important ways building semantics database systems integrity constraints 
ensure validity database semantics integrity constraints re evaluated constrained relations updated 
active object oriented database systems active queries monitors provide means keep users database administrators informed changes specific expressions respond specific situations user supplied procedures 
clear recomputation active queries situation expressions avoidable relations interest modified 
naive recomputation active relational expressions costly cause failure meet performance requirements 
major reason enforcement integrity constraints including derived data materialized views widely supported existing sys supported part defense advanced research projects agency contract knowledge base management systems rome air development center contract knowledge software assistant 
qian kestrel institute avenue palo alto ca gio wiederhold department computer science stanford university stanford ca 
tems issue performance 
key challenge active systems provide adequate monitoring facilities 
updates usually small incremental compared database contents 
safe assume values active relational expressions properly maintained point updates occur 
possible desirable perform recomputation active relational expressions incrementally 
finite differencing effective program optimization technique replaces repeated costly global computations efficient local incremental modifications 
efficient algorithm incremental recomputation active relational expressions finite differencing 
updates modeled types incremental changes relations set tuples deleted set tuples inserted 
algorithm derives minimal incremental changes arbitrary relational algebra expressions propagating incremental changes relations 
organized follows 
section gives brief account related research 
basic notations terminologies provided section 
incremental recomputation algorithm subject section 
discuss applications algorithm conclude section 
ii 
related interest incremental recomputation active relational expressions arises areas research 
problem maintaining derived data materialized views stonebraker proposed incremental recomputation ideas compiling updates maintain views 
koenig paige applied finite differencing techniques context functional data model transactions causing database updates known 
deriving incremental expressions explicitly transactions compiled inserted code enforce incremental recomputation 
developed incremental recomputation algorithms subclass project select join views 
information transactions filter irrelevant updates 
research integrity constraint checking focused deriving incremental formulas evaluate transaction executions information constraints transactions involved 
nicolas developed simplification methods derive incremental formulas certain syntactic classes constraints single statement transactions 
methods guarantee derived formulas similar classes constraints evaluated transaction execution 
designed algorithm handle ieee transactions knowledge data engineering vol 
september multiple updates arbitrary order constraints 
constraint checking replaced maintaining derived data various incremental recomputation techniques applicable 
development object oriented active database systems led renewed interest database monitors 
represents early attempt efficiently detecting monitoring conditions affected updates 
incremental recomputation situations represented project select join expressions developed monitoring facility active database 
framework monitoring database objects demonstrated support incremental recomputation active relational expressions 
iii 
notation terminology incremental recomputation algorithm works relational database setting 
objects interest relations relational expressions relational algebra 
suppose relations formula involving attributes constants arithmetic comparison operators list attributes relational operators consider include ffl select oe ffl project ffl cartesian product theta ffl union ffl difference gamma addition intersection natural join operators taken shorthand specific forms relational expressions 
relational expressions formed relations mentioned relational operators 
need partial operators order express incremental changes relational expressions ffl disjoint union phi equal ordinary union disjoint 
defined 
ffl contained difference psi equal ordinary difference gamma subset defined 
relations databases modeled sets tuples 
distinguish types relations base relations stored relations virtual relations 
updates operate base relations cause tuples deleted inserted 
stored virtual relations computed base relations virtual relations materialized 
denote effect updates relations set tuples deleted called set set tuples inserted called set relation set denoted set denoted 
notations extend arbitrary relational expressions 
take old new represent value relation update respectively new old psi phi old phi psi polarity subexpressions relational expression positive negative 
subexpression scope difference operator contained second operand operator 
positive negative scopes odd number difference operators 
loss generality assume relation occurrence relational expressions consider achieved renaming 
relational expression relation occurring denotes expression obtained replacing expression iv 
incremental recomputation suppose relational expression rn computed relations rn database update value needs recomputed may avoid brute force recomputation new finding minimal set tuples deleted inserted old computing available words interested deriving incremental expressions represent terms incremental relations extreme way take old gamma new new gamma old respectively new old new old new 
help incremental expressions expensive compute new derived incremental expressions cheaper evaluate recomputation scratch 
derivation achieved propagating incremental changes formulate update propagation process minimal complete set transformation rules 
incremental recomputation algorithm amounts repeated applications transformation rules 
propagation rules select rules 
oe psi oe psi oe 
oe phi oe phi oe project rules 
psi psi gamma gamma 
phi phi gamma product rules 
psi theta theta psi theta 
phi theta theta phi theta union rules 
psi psi gamma 
phi phi gamma difference rules 
psi gamma gamma psi gamma 
gamma psi gamma phi 
phi gamma gamma phi gamma 
gamma phi gamma psi intersection rules 
psi psi 
phi phi join rules qian wiederhold incremental recomputation active relational expressions 
psi psi 
phi phi difference operator binary operator commutative 
formulating transformation rules need distinguish cases incremental changes occur second operand 
commutative binary operators list transformation rules propagating incremental changes operand 
rules case immediate 
theorem propagation rules 
propagation rule defined defined proof prove theorem cases basic relational operators 
rules operators follow 

select rules 
suppose psi defined 
obviously oe oe 
oe psi oe defined equal oe psi 
similar arguments apply second select rule 

project rules 
suppose psi defined 
gamma gamma subset psi gamma gamma defined 
psi equal gamma turn equal gamma equivalence follows fact equal psi gamma 
second project rule straightforward 

product rules 
suppose psi defined 
obviously theta theta theta psi theta defined equal psi theta similar arguments apply second product rule 

union rules 
psi defined gamma psi gamma defined equal psi arguments apply second union rule 

difference rules 
suppose defined 
gammat psi gammat defined equal gammat psi defined disjoint gamma gamma phi defined equal gamma psi 
difference rules similar 
example suppose database update causes set tuples deleted relation active relational expression need maintain gamma oe expression old expression new obtained replacing psi incremental expression derived repeatedly applying propagation rules new gamma oe psi gamma oe psi oe gamma oe phi oe gamma oe phi oe number transformation arrow indicates transformation rule applied 
oe 
relational expression obtained applying sequence zero propagation rules relational expression say transformed denoted propagation rules intended applied repeatedly order factor incremental changes relations relational expressions illustrated example 
theorem explains effect repeated applications propagation rules serves basis incremental recomputation algorithm 
theorem relational expression contains relation positive polarity psi psi phi phi relational expressions involving respectively 
negative polarity psi phi phi psi relational expressions involving respectively 
furthermore transformation process terminates 
proof prove theorem induction structure base case claim obvious 
suppose form gamma occurs positive negative induction hypothesis psi psi phi phi relational expressions involving respectively 
applying difference rules get psi phi phi psi relational expressions involving respectively 
situation negative proven way 
arguments cases similar 
propagation rule application strictly reduces nesting levels partial operator update propagation process terminates 
theorem essentially gives completeness propagation rules 
quite obvious set rules minimal 
ready incremental recomputation algorithm 
relational expression rn mentions relations rn algorithm computes utilizing version 
dual version obtained exchanging psi phi 
ieee transactions knowledge data engineering vol 
september incremental recomputation algorithm input ffl relational expression rn ffl incremental relations output incremental expression algorithm positive phi phi phi negative psi phi psi return psi gamma phi 
example consider active relational expression example 
suppose addition changes set tuples inserted algorithm derive oe gamma gamma gamma oe gamma looks complicated new beneficial incremental relations smaller size corresponding relations 
theorem incremental relations contribute exactly sets positive relations sets negative relations 
intuitively algorithm computes propagating contributions incremental relations collecting time 
correctness algorithm illustrated 
theorem incremental recomputation algorithm correct 
proof loss generality assume positive negative 
show incremental expression computed algorithm correct 
notice incremental relations contribute exactly words tuple inserted phi psi 
phi psi phi psi phi psi psi phi psi phi phi psi phi phi psi relational expression phi psi exactly output algorithm replacing psi gamma phi 
result algorithm minimal sense contained disjoint gamma easy see algorithm terminates runs time polynomial length input expression round loop computes expression length number times loop body gets executed 
matter fact loop body takes linear time project operations involved 
discussion incremental recomputation algorithm gives simple efficient method deriving incremental expressions incremental relations 
output algorithm fed conventional query optimizers optimization opportunities 
algorithm guarantee derived incremental expressions cheaper evaluate recomputation scratch 
reason inherent difficulty project operator incremental recomputation 
simple inspection propagation rules see incremental expressions right side cheaper expressions left side rules project rules 
cost derived incremental expressions closely related positions project operators active relational expressions 
general want push project operators inward possible 
reason combinatorial interaction base incremental relations 
best illustrated example 
general fewer updates affect active relational expressions interaction base incremental relations advantageous incremental recomputation 
addition relative benefit incremental brute force recomputation depends heavily sizes incremental relations 
optimization component database system equipped appropriate cost model choice specific situations 
incremental recomputation algorithm abstracted updates base relations sets sets 
orthogonal issue arises frequently literature caused confusion incremental relations computed 
information transactions cause database updates feasible way compute runtime transaction commit time 
hand know transactions cause database updates able decide certain incremental expressions empty update irrelevant evaluated accessing base relations better able compute transaction compile time 
enables perform incremental recomputation parallel transaction execution augment transaction code necessary recomputation 
matter methods computing incremental relations easily combined algorithm derive incremental expressions 
incremental recomputation algorithm direct applications areas database management systems 
application incremental maintenance derived data materialized views 
derived data materialized views relations values defined relational expressions terms base relations qian wiederhold incremental recomputation active relational expressions defined relations 
base relations change may utilize algorithm compute tuples deleted inserted defined relations recomputing definitional expressions scratch 
application area integrity constraint enforcement 
suppose constraint expressed order logic 
fact true equally represented fxj 
equivalence relational calculus relational algebra find relational expression equivalent fxj assuming course safe 
constrained relations change just need ensure empty 
consequence updates contribute effect validity constraint 
notice orthogonal issue discussed extremely important want compute transaction execution order avoid expensive aborting operation 
growing interest advanced database management systems object oriented databases active databases 
important feature systems ability respond changes user specified situations notifying users triggering procedures 
underlying databases relational monitoring situations best expressed relational expressions 
efficiency requirement evaluation usually high especially real time systems 
building algorithm monitoring facilities significant performance enhancement expected 
summary incremental recomputation active relational expressions essential database functionalities 
complete set propagation rules efficient incremental recomputation algorithm derives update propagation minimal incremental relational expressions need recomputation 
compared existing approaches separated problem incremental recomputation arbitrary relational expressions issue computing incremental base relations 
algorithm uniformly applies expressions relational algebra transformational framework 
algorithm rely availability transactions information transactions easily incorporated optimization 
acknowledgment authors tore risch peter ladkin valuable comments helpful discussions 
bernstein clarke fast maintenance semantic integrity assertions redundant aggregate data proceedings sixth international conference large data bases 
larson tompa efficiently updating materialized views proceedings acm sigmod international conference management data 
buneman efficiently monitoring relational databases acm transactions database systems september 
mccune naqvi compiling programs order formulas advances database theory vol gallaire minker 
nicolas editors plenum press 
hudson king project database support software environments ieee transactions software engineering june 
katz chang managing change cad database proceedings thirteenth international conference large data bases 
koenig paige transformational framework automatic control derived data proceedings seventh international conference large data bases 
mccarthy dayal architecture active data base management system proceedings acm sigmod international conference management data 
nicolas logic improving integrity checking relational data bases acta informatica 
paige applications finite differencing database integrity control query transaction optimization advances database theory vol gallaire minker 
nicolas editors plenum press 
paige koenig finite differencing computable expressions acm transactions programming languages systems july 
qian effective method integrity constraint simplification proceedings fourth international conference data engineering 
risch monitoring database objects proceedings fifteenth international conference large data bases 
rosenthal chakravarthy situation monitoring active databases proceedings fifteenth international conference large data bases 
stonebraker implementation integrity constraints views query modification proceedings acm sigmod international conference management data 
wiederhold barsalou chaudhuri managing objects relational framework technical report stan cs department science stanford university 
