event algebra specifying scheduling workflows munindar singh greg meredith christine tomlinson paul attie microelectronics computer technology research development division west center drive austin tx usa mcc com cs utexas edu heterogeneous systems arise preexisting legacy information systems integrated way preserve autonomy past applications 
workflows semantically appropriate units activity environments 
involve variety tasks best represented different extended transaction models combinations thereof 
approach workflows efficiently scheduled 
novel contribution event algebra dependencies characterizing workflows declaratively expressed 
show symbolically process dependencies determine events occur 
approach represent dependencies compactly reason efficiently 
design implementation heterogeneous information systems poses special problems task scheduling management 
heterogeneous systems consist number differently constructed applications databases interoperate coherently 
involve variety system human activities composite tasks heterogeneous environments best thought workflows :10.1.1.109.5175
traditional transaction model defines acid transactions named properties currently department computing imperial college london 
currently school computer science florida international university miami 
proceedings fourth international conference database systems advanced applications dasfaa ed 
tok wang ling singapore april fl world scientific publishing pte atomicity consistency isolation durability 
properties naturally realized syntactic correctness criterion serializability 
acid transactions proved extremely valuable traditional homogeneous single node databases suited heterogeneous systems 
mutual commit protocols required ensure atomicity problematic 
inefficient implement distribution impossible implement autonomous legacy applications 
technical political reasons usually impossible violate autonomy local systems 
second semantic requirements heterogeneous applications quite complicated need sophisticated task structuring 
number extended transaction models proposed 
typically extended models generalize acid model different directions 
propose transaction model 
describe general approach declaratively specify schedule intertask dependencies 
dependencies formalize scheduling aspects large variety combinations workflow transaction models including known literature 
approach express primitives klein capture chrysanthis ramamritham 
klein shows serializability requirements extended nested transactions captured approach go details 
broad approach similar previous temporal logic event scheduling 
main contribution algebra yields succinct representations dependencies leads efficient scheduling events 
emphasize contribution inventing new formalism 
formalism loosely pratt 
choose formalism formalisms past scheduling approaches facilitates derivation stronger results 
crucial enhancements defined pratt syntax complement events semantics admissibility derive key results 
enhancements results obtain 
presentation carefully isolate admissibility basic semantics motivate carefully show exactly necessary 
task transaction characterized skeletal description captured agent 
description includes events state transitions significant purposes coordination 
approach applies set significant events 
typical set database transactions start commit abort 
done added visible 
agent task interfaces scheduling system 
informs system uncontrollable events abort requests permission controllable ones commit 
triggered system causes appropriate events start task 
agent may intercept requests sent remote procedure calls task implementation explicitly informed transitions task requires reprogramming conceptually simpler 
theory sensitive detail 
shows example task agents borrowed rusinkiewicz sheth 
dependencies constraints monitoring system user tasks meet minimal requirements identify corrupted task instances 
mediate interactions heterogeneous components ensure different components violate prespecified protocols interaction 
describe algebra events designed representing reasoning dependencies 
syntax basic semantics language motivate additional features job 
show may syntactic procedures residuation workflow scheduling lastly may schedule algebra 
action algebra formal language algebra actions due pratt 
user system dba sophisticated user typically supplied graphical notation specifying workflows translated formal language 
event symbols atoms language 
pratt introduce original event symbol symbol corresponding complement 
return event complementation section 
means defined 
syntax action expressions formed syntactic definitions 
sigma set significant event symbols gamma alphabet language event expressions 
syntax sigma gamma syntax sigma implies gamma syntax gamma syntax implies delta syntax implies syntax implies je syntax dependency expression dependency system set dependencies 
require alphabet closed event complementation 
definition theta alphabet theta gamma gamma theta iff theta gamma alphabet expression defined set events mentioned complements 
specifically definition gamma gamma gamma fe gamma fe gamma gamma gamma ffi delta semantics semantics terms computations traces 
trace sequence events system 
important associate expressions possible computations ffl specify desirable computations ffl determine event schedules realize computations 
convenience overload event symbols events denote concatenation variously sequence expressions traces 
usage unambiguous 
semantic context ef means trace event occurs followed event gamma gamma gamma set possible traces gamma 
trace oe gamma expression oe means trace oe satisfies expression gives intension denotation expression foe oe 
semantics foe mentioned oeg gamma semantics semantics delta foe oe semantics je semantics hy phi phi phi phi phi phi start done crash abort commit aborted committed executing submitted executing ims transaction omega omega omega omega omega oe failed succeeded executing executing fail succeed start typical application abort aborted abort hy start done phi phi phi phi phi phi committed executing executing prepared commit rda transaction example task agents semantics gamma atom denotes set traces event occurs 
delta denotes concatenation traces denotation denotes union sets lastly je denotes intersection sets semantics validates various useful properties operators associativity delta distributivity delta example gamma fe fg 
fe ee ef fe ef ef fef eef verify eje 
semantics gives formal meaning algebraic expressions language 
semantics seeks associate expression set traces realized 
version story 
capture important aspects execution framework 
constraints apply event instances quite intuitive 
ffl event excludes complementary event computation 
ffl event occurs computation 
traces satisfy constraints termed legal 
traces example clearly illegal specific instances 
event instance precludes complement complements instances type 
similarly different event instances type occur computation 
restriction enables interpretation complement events formally independent symbols semantically complementary 
event abort rda task agent complement event commit 
formal reasoning need event symbol interpreted commit automatically obtain event symbol interpreted abort 
observation examples 
example gamma fe fg 
restricting legal traces informally defined fe ef fe ef feg ef 
verify eje 
running examples dependencies due klein known literature 
klein notation 
means occurs occurs 
klein means events happen precedes restricting legal traces 
precisely captured see example 
similarly precisely captured delta see example 
example 
legal trace satisfies 

satisfies satisfy satisfies iff occurs legal occur satisfy 
contain constraint relative order example 
delta legal trace 
satisfies occur satisfies satisfies iff occur legal occur satisfy 
satisfy delta requires initial part satisfy remainder satisfy words precede may tempted define universe set contain legal traces 
prevents proving soundness equations residuation introduced section core approach 
ultimately restrict set possible traces properly capture aspects subtle manner definition admissibility see section 
highlight main reasons admissibility convince reader modifying formalism introduce needed restrictions technical development 
motivating example workflow specification assumes restriction legal traces 
example consider workflow attempts buy airline ticket book car traveler 
task effect 
assume booking canceled cancel compensates book ticket buy compensated 
assume subtasks rda transactions 
simplicity assume book cancel commit 
desired workflow may specified conjunction dependencies 
buy starts book start 
delta book commits buy commit 
compensate book cancel book commits buy start cancel 
workflow may formally defined set significant events different task agents set dependencies events 
set dependencies component crucial 
scheduling events enforce dependencies expression dependency identifies set event traces true description 
scheduler implemented ensure trace realized satisfies stated dependencies 
scheduler meet converse requirement roughly trace satisfies stated dependencies may generated events order submission scheduler able realize trace satisfies dependencies 
example acceptable traces workflow example include 
reader readily verify traces satisfy dependencies example 



important component state scheduler determined dependencies enforcing specify traces supposed allow 
events occur possible traces get narrowed 
event occurs conditions occurs 
scheduler accepts event requested task agent event arises 
triggers event task agent accord 
rejects complement event complement requested task agent 
dependency order guarantee satisfaction scheduler keep track current state attain state labeled 
fruitful consider state scheduler evolves trying enforce dependency 
example shows state changes dependencies 
delta 


complement events happens 
necessarily satisfied 
happens happen 
happens happen permitted mean precedes 
similarly 
scheduler permit happen right away happens followed happens followed requirements kind example formalized lead solution scheduling problem intimately related operation residuation 
section explore intuition motivate definition residuation 
set equations capture desired properties residuation develop proofs soundness entails adding admissibility models section 
residuation event scheduler decide event occur 
expository ease consider case event attempted task agent scheduler decide accept 
interesting cases covered section 
key factors decision accept event 
proper informally refers traces meet legality requirements section satisfy stated dependencies 

occur initial part currently remaining part traces dependency true 
accepting leave scheduler state may ffl prevent proper traces ffl generate improper traces 
motivation set traces satisfy dependency characterizes state scheduler 
event executed denote set traces permissible words replace reflect fact occurred 
set ffl delta relative contains improper traces ffl delta relative contains proper traces gamma gamma gamma gamma gamma gamma gamma psi gamma gamma gamma gamma gamma gamma gamma psi delta gamma gamma gamma gamma gamma gamma gamma psi hhj gamma gamma gamma gamma gamma gamma gamma psi 
scheduler states transitions represented symbolically equations residuation extremely exciting represented expression represented expression efficiently computed states scheduler represented symbolically transitions processed algebraically 
operation computing resulting set traces corresponds residuation algebra 
define residuation operator 
residuation operator formally consequently specify workflows formed dependency 
reasoning workflows 
semantics fv uv usage algorithm scheduling events general expression event 
model theoretic definition 
definition clearly meets criteria motivated proper proper traces may generated 
possible characterize residuation symbolically set equations rewrite rules 
equations assume expression form scope delta operator 
holds conjunctive normal form cnf disjunctive normal form dnf obtained repeated application distribution laws 
equations atom sequence expression 
expressions event symbols 
simplicity identify equation equation equation delta equation equation je equation delta equation equation gamma equation delta gamma equation delta gamma example verify state label edge labels yields label state 
instance delta delta 
similarly 
need represent automaton dependency explicitly efficiently compute transition function needed 
observation gamma means events scheduled independently dependencies mention 
combined equation entails modularity dependencies 
words compute result workflow set dependencies event dependency separately essentially ignoring dependencies mention event 
observation gamma gamma gamma ff fg theorem equations sound 
soundness equations follows directly 
equations require admissibility formalize 
formal proofs developed 
admissibility admissible traces ffl event repeated ffl event complement occur ffl event complement occur 
intuitively traces characterize eventual behavior environment collection tasks significant events scheduled 
theta set admissible traces alphabet theta 
identify definition oe maximal theta theta iff theta theta oe oe definition theta foe oe maximal theta theta ae theta oe oe key idea admissibility follows 
recall roughly residuation determines residuated expression allows immediate execution event residuated 
determines remain done ignore aspect time 
suppose event occurs event sequence expression know occurred residuated 
happen right away prevent altogether eventually happen followed instance option clearly violates requirement imposed option violates assumption events repeated 
option precluded semantic definitions require sequence containing satisfied traces occurs 
option precluded set admissible traces exclude repeated occurrences events 
appropriately generalized formalized argument proof soundness equation 
similar proof constructed equation 
dependency associated state environment evaluated 
state environment changes events occur 
scheduler permit events immediate execution violate asserted dependencies 
admissibility capture key property environment instances events repeated event complement occur trace 
way understanding follows 
initially admissible traces possible 
event occurs shrinks set admissible traces event complement occur 
effect attach expression current context evaluation 
understanding meanings expressions role residuation expressions interchangeable respect set admissible traces allow exactly subset set admissible traces 
result expressions different denotations may interchangeable certain evaluation contexts 
proofs soundness remaining equations notion interchangeability equivalence 
formalization argument involves formalizing admissible sets characterizing shrinkage admissible sets events occur defining notion equivalence derived admissibility 
show desired equations sound equality replaced equivalence 
required show notion equivalence defined equivalent expressions interchanged loss satisfiability 
technical development deferred 
back scheduling shown algebraically represent dependencies compute possible transitions scheduler 
briefly discuss events may scheduled 
ways apply algebra 
relationship scheduling algorithm algebra similar proof search strategies logic logic 
case scheduling system determine trace satisfies dependencies 
assign different values event literals accepting rejecting 
example satisfying dependency 
scheduler may choose path initial state 
scheduler reject reject event submitted 
similarly scheduler satisfying 
reject occurred 
sole dependency scheduler decide reject event 
may acceptable behaviors user point view satisfy 
face problem finding heuristics ensure events unnecessarily rejected 
useful risk rejecting events unnecessarily avoid unbounded delays heuristic 
example 
attempted scheduler may accept immediately delay deciding 
case forced reject attempted case delay submitted allow occur order event scheduling depends main aspects ffl resolution dependencies apply event ffl attributes semantic properties events underlying workflow 
scheduler take decision accept reject trigger event dependency violated decision 
constraint event conjunction constraints due different dependencies 
argued section dependencies mentioning event directly relevant scheduling 
general need consider events caused events caused 
semantic event attributes introduced attie 
primitive attributes identified ffl events called forcible events system initiate 
ffl rejectable events system prevent 
ffl delayable events system delay 
events really attempted scheduler notified occurrence fact 
example consider tasks shown 
scheduler may trigger start unilaterally trigger commit 
reject delay commit delay reject abort 
attributes events constrain options available scheduler 
certain schedules right may unacceptable leave scheduler state may forced violate dependency 
define secure state case 
scheduler transition target state secure 
example dependency 
abort state labeled secure 
transition labeled initial state disabled 
secure 
example dependency 
start state labeled secure 
scheduler eventually cause fire 
brevity ease exposition describe algebra fits approach 
implemented scheduler somewhat different 
distributes events arranges appropriate message flows 
details messages algebra 
pathset approach maintains current state dependency 
attempts find viable set paths conditions hold ffl path begins current state dependency ends secure state ffl events mentioned paths occur relative order ffl event occurs path complement occurs path ffl event occurs path pathset contains path dependency involving event ffl event mentioned path attempted agent rejectable attempted event delayable 
consequently viable pathset events scheduled appropriate partial order 
viable pathset tried computed event attempted scheduler learns event occurred system 
example dependencies abort start pathset initial states viable 
scheduler execute trigger 
compute trigger closed viable pathset case fhe fi fig 
discussion comparisons idea defining admissible traces appears novel approach 
admissibility able obtain notion residuation intimately related eager scheduling events dependencies 
notion residuation closely related standard pratt specialized scheduling 
standard notion residuation obvious manner yield kinds equations give 
events repeated admissible traces appear handle task agents loops 
require event instance repeated 
new event instances scheduler generating unique event ids time agent executes event 
restart dependencies appropriately relevant instance 
lack space discuss details 
treatment event complementation requires formal complement significant event 
event complement atoms formal language corresponding model theoretic entities occur traces 
events intuitively thought having complements 
example abort commit usually complements start forget usually complements 
superfluous sense formal complement event causes harm instantiated 
complement required event optional 
optional events typically just twoway branch associated task agent abort commit 
task agent multiway split complement event effect join events alternatives 
quite rare practice agents include significant events 
captured adding additional dependencies obvious manner 
approach syntactically simple enables easy requirements capture 
approaches rely fine syntactic variations dependencies nested operators require confusing 
approach involves unintuitive semantic assumptions available aspect problem gain expressiveness efficiency 
generates smaller representations simple compensate dependencies size size 
demonstrated working prototype theory 
implemented scheduler distributed somewhat different pathset approach described 
approach merits 
provably correct 
yields succinct representations interesting dependencies arise practice including representing 
simplicity algebra facilitates capturing various requirements 
yields distributed implementation easily centralized important factor heterogeneous distributed environments formal theory particular equations residuation constitute algebraic approach scheduling events satisfy stated dependencies assuming dependencies mutually consistent enforceable 
dependencies specifications lazy characterize traces acceptable unacceptable entire computations 
approach scheduling eager attempts execute events soon possible accounts conditions event may executed change state execution bring 
required resulting computations satisfy initially specified dependencies 
purposes workflow scheduling approach goes action algebra approaches 
paul attie munindar singh amit sheth marek rusinkiewicz 
specifying enforcing intertask dependencies 
proceedings th vldb conference august 
chrysanthis ramamritham 
acta saga continues 


chapter 
dayal hsu ladin 
transactional model long running activities 
proceedings th vldb conference september 
ahmed elmagarmid editor 
database transaction models advanced applications 
morgan kaufmann 
hector garcia molina kenneth salem 
sagas 
proceedings acm sigmod conference management data 
georgakopoulos mark hornick amit sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases september 
jim gray andreas reuter 
transaction processing concepts techniques 
morgan kaufmann 
roger 
extended transaction processing dependency rules 
proceedings ride ims workshop 
won kim editor 
modern database systems object model interoperability 
addisonwesley 
johannes klein 
advanced rule driven transaction management 
proceedings ieee compcon 
vaughan pratt 
action logic pure induction 
van eijck editor logics ai european workshop jelia lncs pages 
springer verlag september 
marek rusinkiewicz amit sheth 
specification execution transactional workflows 


munindar singh michael huhns 
automating workflows service provisioning integrating ai database technologies 
ieee expert october 
special issue best selected papers proceedings th ieee conference artificial intelligence applications march 
munindar singh greg meredith christine tomlinson paul attie 
algebraic approach workflow scheduling 
technical report carnot microelectronics computer technology austin tx july 
munindar singh christine tomlinson 
workflow execution distributed events 
proceedings th international conference management data december 
munindar singh christine tomlinson darrell woelk 
relaxed transaction processing 
proceedings acm sigmod may 
research prototype demonstration 
