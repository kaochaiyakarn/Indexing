directed hypergraphs applications giorgio gallo longo sang nguyen stefano pallottino deal directed hypergraphs tool model solve classes problems arising operations research computer science 
concepts connectivity paths cuts defined 
extension main duality results special class hypergraphs 
algorithms perform visits hypergraphs find optimal paths studied detail 
applications arising propositional logic graphs relational data bases transportation analysis 
january revised october research supported part nazionale tecnologia dell informazione national research council italy part research national research council canada 
dipartimento di informatica universit di pisa italy partement informatique de recherche op universit de montr canada hypergraphs generalization graphs widely deeply studied berge quite proved successful tool represent model concepts structures various areas computer science discrete mathematics 
deal directed hypergraphs 
different names labelled graphs graphs directed hypergraphs introduced literature way deal particular problems arising computer science combinatorial optimization see example nilsson martelli montanari levi sirovich boley maier nilsson montanari martelli ullman nguyen pallottino 
directed hypergraphs explicitly introduced torres ar oz longo gallo longo nguyen pallottino 
addition particular instances directed hypergraphs dowling gallier ausiello sacc nguyen pallottino gallo ausiello italiano italiano 
remaining organised follows 
general presentation directed hypergraphs section introduces concept connection hypergraphs defines paths hyperpaths 
section introduces cuts cutsets relation connectivity 
sections develop algorithms visit hypergraphs solve classes minimum path problems defined hypergraphs 
applications studied section 
particular shown hypergraph concepts algorithms elegant powerful tools model solve problems arise areas propositional logic dowling gallier gallo graphs martelli montanari levi sirovich nilsson montanari martelli data bases maier ullman ausiello sacc urban transportation nguyen pallottino 

directed hypergraphs hypergraph pair set vertices nodes em set hyperedges 
clearly hypergraph standard graph 
size standard graph uniquely defined size hypergraph depends cardinality hyperedges define size sum cardinalities hyperedges size 
worth noting correspondence hypergraphs boolean matrices 
matrix ij ij may considered incidence matrix hypergraph row associated vertex column hyperedge directed hyperedge hyperarc ordered pair possibly empty disjoint subsets vertices tail head 
tail head hyperarc denoted respectively 
directed hypergraph hypergraph directed hyperedges 
directed hypergraphs simply called hypergraphs 
example hypergraph illustrated fig 

note hyperarc empty head 
fig 
hypergraph incidence matrix 
directed graphs incidence matrix hypergraph matrix ij defined follows see fig 
ij 
clearly correspondence hypergraphs matrices 
backward hyperarc simply arc hyperarc ith fig 

forward hyperarc simply arc hyperarc ith fig 

fig 
arc arc 
graph hypergraph hypergraph hyperarcs arcs 
graph hypergraph hyperarcs arcs 
bf graph bf hypergraph hypergraph hyperarcs arcs arcs 
hypergraph define symmetric image hypergraph 
note symmetric image graph graph viceversa 
note possible transform general hypergraph bf graph adding dummy node hyperarc arc arc replacing hyperarc backward forward hyperarc see fig 

fig 
transformation hyperarc arc arc fs bs denote forward star backward star node respectively 
graphs graphs particular relevance applications 
introduced times literature various names 
labelled graphs dowling gallier gallo represent horn formulae graphs introduced tools analyze deductive data bases ausiello sacc ausiello italiano italiano study leontiev substitution matrices leontiev flow problems jeroslow martin wang graphs studied context urban transit problems nguyen pallottino applications graphs analysis graphs reported gallo longo nguyen pallottino 
torres ar oz introduced hypergraphs graphs called directed hypergraphs rule hypergraphs respectively represent deduction properties data bases paths hypergraphs 

paths hyperpaths connection path st length hypergraph sequence nodes hyperarcs st nodes origin destination st respectively say connected st said cycle particular true simple path hyperarcs distinct simple path elementary nodes distinct 
similarly may define simple elementary cycles 
path said cycle free contain subpath cycle 
fig 
path fig 
node connected node node 
elementary path connecting drawn thick line 
consider hypergraph 
path hyperpath st minimal hypergraph ii iii connected means cycle free simple path 
say path hyperpath symmetric image bf path bf hyperpath hypergraph time path path node connected connected bf connected node path path bf path xy exists fig 
path graph path 
hypergraph fig 
path note cycle contained simple path node node 
contrary hypergraph fig 
path path connecting node origin contains cycle 
proposition trivially holds proposition path st hyperarc node hyperarc reduction arc 
reduction hypergraph graph obtained replacing hyperarc reductions 
clearly hypergraph may reductions shall denote set reductions analogous way possible define reductions bf reductions hypergraphs 
note bf reduction hypergraph standard digraph 
say node super connected node hypergraph connected reduction hb say super connected need connected note graphs concepts connection super connection coincide 
definitions connection introduced generalized follows set nodes say node connected connected bf connected super connected hypergraph connected connected bf connected super connected hypergraph obtained addition new origin node arc similarly define connection set nodes single origin node 
cuts cutsets hypergraph distinguished nodes source sink respectively 
cut st partition subsets cut st cutset st set hyperarcs cutset may empty see instance cut graph fig 

cardinality cut cardinality cutset 
fig 
cuts indicated cardinality st st st cardinality 
note necessarily disconnected removing hyperarcs cutset 
example fig 
removing cutset st disconnect removing cutset st connection lost remains connected connected remove cutset st st st st fig 
cut st disconnects source sink theorems relate cuts connection hypergraphs 
theorem graph cut st cardinality exists proof assume cut st empty cutset st exists node arc exist property node connected see proposition 
clearly st empty node belong repeating argument may eventually conclude belongs contradiction 
assume connected define set nodes connected st necessarily cut cardinality existence arc cut imply connection theorem hypergraph cut st cardinality exists super connected proof st cut cardinality 
consider reduction hb obtained replacing hyperarc arc condition reduction possible hyperarc node head belong belongs cutset hypothesis empty 
theorem connected super connected 
super connected reduction exists connected theorem proof completed 
theorems generalize hypergraphs property holding standard digraphs removal arcs cutset disconnects sink source 
unfortunately nice properties hold hypergraphs restrict attention graphs 
particular known equivalent facts hold standard digraphs minimum cardinality path digraph equal maximum number disjoint cutsets 
minimum cardinality cut digraph equal maximum number disjoint paths 
properties hold hypergraphs theorems show hold weaker form graphs 
theorem graph inequalities hold min st st path maximum number disjoint cutsets min st st path 
proof inequality follows directly fact due theorem cutset contain arc path number disjoint cutsets exceed cardinality path 
second inequality proved follows 
denote set nodes exists path si cardinality clearly minimum cardinality paths 
cuts disjoint cutsets arc tail node head may exist arc belong cutset 
completes proof 
theorem graph inequalities hold max number disjoint paths min st st cutset max number disjoint 
proof transform standard digraph arc unique arc choice arbitrary 
easy check cutset st corresponds cutset st st st set disjoint paths corresponds set disjoint paths maximum number disjoint paths larger maximum number disjoint paths known max flow min cut theorem digraphs max number disjoint paths max number disjoint paths min st st cutset min st st cutset 
second inequality follows directly fact due theorem cutset contain arc path completes proof 
examples show strict inequalities may hold cases 
fig 
graph minimum cardinality paths maximum number disjoint cutsets minimum cardinality paths 
fig 
graph fig 
maximum number disjoint paths minimum cardinality cuts maximum number disjoint paths 
fig 
section show problem finding minimum cardinality cut np hard case graphs 

visit hypergraph consider problem visiting hypergraph starting origin node finding nodes connected connected super connected simplest case find hypergraph nodes connected procedure visit described finds nodes returns set paths connecting paths define tree rooted described predecessor functions pe points node precedes hyperarc path pv points arc bs precedes node path 
procedure visit pv pe pv nil repeat select remove fs pe pe pv pv procedure 
easy check visit runs size time 
fact initialization phase runs time node inserted removed candidate set hyperarc examined time hyperarc selected 
consider case connection 
procedure visit returns set paths containing nodes connected paths define tree rooted notice case predecessor function pv necessary 
fact definition path hyperarc belongs path nodes tail belong path 
shall maintain second predecessor function pe 
function defines particular tree trees contained tree returned procedure 
connection function pe node function introduced node gives cardinality path tree defined pe pv 
motivation introducing function clear section 
counter provide hyperarc number nodes tail removed stress fact functions pe essential computation tree statements involving written italics 
procedure visit pv pe pv nil repeat select remove fs pe pv pv pe procedure 
procedure visit runs size time 
fact hyperarc selected times time head examined 
node inserted removed 
similar way possible define procedure visit finds set paths terminal node nodes connected 
note visit starts origin paths visit start destination paths retain linear time complexity 
define bf visit 
unfortunately problem performing visit easy hypergraph graph graph case bf path simply path path 
procedure checks node super connected node general hypergraph 
procedure true select remove hb visit hb pv false procedure 
runs size time number possible reductions quite efficient branch bound scheme solve problem easily derived second algorithm satisfiability problem gallo 

weighted hypergraphs 
weighting functions weighted hypergraph hyperarc assigned real weight vector 
depending particular application components may represent costs lengths capacities sake simplicity shall consider scalar weights 
path vp weighting function mean node function wp assigns weights nodes depending weights hyperarcs 
wp weight path chosen weighting function 
shall restrict weighting functions wp wp depends hyperarcs precede path hyperarcs belonging paths contained typical example kind weighting function cost cp defined sum weights hyperarcs preceding node cp cp ep sy sy clearly cp ep cost function usual cost graph setting problem finding minimum cost path natural generalization minimum cost path problem 
note weights equal cost cardinality 
relevant class weighting functions weight node written function weights hyperarcs entering nodes tails wp min fp bs function weights nodes fp wp non decreasing function wp 
weighting functions called additive weighting functions 
particular case graphs paths property arc entering node case wp fp 
particular additive weighting functions literature context relevant applications hypergraphs distance value 
path vp distance nodes vp connected dp defined recursive equations dp dp min max dp bs length hyperarc graphs equation dp max dp 
case unit hyperarc lengths distance called depth 
gallo introduced depth function graphs context satisfiability analysis propositional horn formulae 
note case procedure visit function breadth search strategy finds minimum depth tree size time 
value vp defined jeroslow martin wang context leontiev flow problem case graphs solution recursive equations vp vp bs cost arc non negative real coefficient 

minimum weight paths section addresses problem finding minimum weight path weighted hypergraph 
problem viewed natural generalization shortest path problem standard digraphs 
unfortunately general minimum weight path problem hypergraphs np hard 
fact italiano proved particular problem finding minimum cardinality paths graph np hard 
particular cases exist problem easy solve 
example weighting functions additive exactly case standard shortest path problem digraphs 
shall restrict case additive weighting functions 
furthermore shall assume arc weights non negative cycles non decreasing 
non decreasing cycle cycle real restriction case nodes weight zero node weight condition ensures node weight decreased cycle plays role non negative cycles condition digraphs 
provide deeper understanding condition apply distance function value function 
case fc maximum weights nodes belonging condition get 
derived non negativity condition cycle weights standard assumption dealing shortest paths digraphs 
quite different case value function 
get 

true real 
obtained gain free condition stated jeroslow martin wang 
consider problem finding set minimum weight paths origin nodes connected generalization known shortest path tree problem 
problem strictly related finding solution generalized bellman equations min bs 
procedure sbt finds solution minimum weight tree rooted cycle free set minimum weight paths connecting nodes connected 
connected sbt returns 
visit btree computed sbt described predecessor function pv 
procedure sbt repeat select remove fs fs pv procedure 
counter hyperarc represents number nodes belonging removed previous iteration currently counter permits reduce substantially number updating operations fact checking values nodes belonging time node selected done node removed 
correctness sbt directly follows fact termination equations satisfied number iterations finite time weight updated new tree tree twice ii number consecutive iterations lead change node weights bounded clearly complexity sbt depends implementation candidate set cost needed evaluate function sake simplicity shall assume computed time case applications 
shall consider different implementations queue fifo selection policy unordered list heap selection minimum weight element 
notation introduced gallo pallottino shall call corresponding versions sbt sbt queue sbt dijkstra sbt heap respectively 
consider sbt queue 
cost initialization time 
operation selection removal insertion unit cost 
classical shortest path algorithms easily prove implemented queue node selected processed times 
hyperarc examined times due fact nodes examined nodes longer belong scanning costs time evaluation time testing condition 
algorithm sbt queue runs size time 
worth noting condition non decreasing cycles tighter needed fact correctness sbt queue operations negative cycle detected negative cycle mean decreasing cycle leads cyclic improvements node weights 
note sbt queue easily modified order detect negative cycles simply bounding number improvements weight single node 
consider case iteration node min selected 
case known assumption non negative arc weights standard digraphs dijkstra theorem generalized additional assumption dijkstra theorem easily extended hypergraphs theorem min minimum weights corollary node removed 
consequence corollary statement fs dropped longer necessary decrease counters 
complexity sbt dijkstra sbt heap directly follow corollary algorithm sbt dijkstra runs max size time total cost node selections removals total cost processing hyperarcs evaluation scanning size 
algorithm sbt heap runs size logn time time value node updated heap updated cost logn 
case graphs algorithm sbt heap runs max size time arc produces weight improvement cost updating heap 
jeroslow martin wang algorithm find optimal values node graph 
algorithm generalizes bellman ford moore algorithm runs size fast sbt queue slower sbt dijkstra 

application hypergraphs 
satisfiability set atomic propositions true false denote proposition true proposition false 
set clauses form meaning propositions true propositions true 
case clause true false true clause false 
disjunction called consequence clause conjunction called implicant 
allow case consequence replaced case implicant replaced clause easily converted disjunctive form truth evaluation function false true 
truth evaluation clauses true said satisfiable unsatisfiable 
satisfiability problem sat defined follows input set propositions set clauses output satisfiable 
case instances truth evaluation satisfies desired 
particularly important case clause contains atomic proposition 
clause called horn clause 
known sat np complete cook garey johnson 
np complete np hard variants sat clause contains atomic propositions max sat maximization number satisfied clauses equivalently minimisation number clauses dropped order remaining clauses satisfiable 
notable exception case contains horn clauses 
case satisfiability problem horn sat polynomial fact solved linear time itai dowling gallier 
unfortunately sat remains np hard jaumard 
horn sat set instances sat clauses horn clauses 
instance sat associate hypergraph node element hyperarc 

clause clearly definition horn sat graph 
note labelled graphs introduced dowling gallier represent horn sat instances direct interpretation graphs 
theorem instance sat satisfiable associated hypergraph cut tf cardinality 
proof satisfiable truth assignment exists clauses true 
consider cut tf true false 
claim tf cardinality fact existence hyperarc imply existence clause false 
tf cut cardinality 
easy check function true false truth assignment clauses true 
direct consequence theorem results sections horn sat equivalent problem finding path graph 
visit solve instance horn sat linear time 
visit bears strong resemblance linear algorithm horn sat proposed dowling gallier 
similarly easily check solve instances sat 
interesting consequence theorem theorem max sat solved finding minimum cardinality cut corresponding hypergraph 
proof proof follows directly theorem fact minimum cardinality cutset provides minimum number hyperarcs removed max sat np hard theorem implies np hardness minimum cardinality capacity cut hypergraphs 

graphs graph digraph arc assigned label property arcs common tail 
arc arc shares label arc arc arc literature different notations different authors 
particularly relevant nilsson nodes defined nodes nodes type ingoing arcs martelli montanari nodes defined nodes nodes type outgoing arcs 
definition adopted general include particular cases 
connection node node graph minimal set arcs ii union paths graph viewed graph set nodes arc set arcs label 
easy see connection graph path corresponding graph 
nilsson martelli montanari levi sirovich martelli montanari studied problem finding minimum cost connection nodes graph arc assigned real cost 
respect framework problem finding minimum length path graph considered section 
interesting note problems considered literature lead acyclic graphs 
case algorithms section simplified acyclic graph corresponding graph pre processed order nodes inverse topological order node pre ordering accomplished procedure acyclic generalization classical procedure described knuth proposed longo 
procedure acyclic select remove bs return acyclic return acyclic procedure 
number nodes repetitions follow node scanned maintained counter initially equal sum cardinalities heads arcs having node tail 
node inserted set candidate nodes implemented queue 
procedure acyclic checks graph acyclic 
case acyclic label satisfying conditions assigned node arc examined procedure runs size 
acyclic graph nodes satisfy conditions 
procedure acyclic shortest tree acyclic graphs adaptation graphs procedure sbt described section conditions exploited finds shortest path starting root node ordering 
procedure acyclic pv fs bs pv procedure 
procedure acyclic selects nodes inverse topological order 
arc considered improvement path originating node shortest path known node belonging 
node arc selected leading complexity size 

relational data bases years substantial amount research devoted analysis relational data bases graph related techniques martin maier ullman ausiello sacc smith yang 
relational data base rdb represented set relations certain domain attribute values set functional dependencies 
functional dependencies studied means types generalized graphs fd graphs implication graphs deduction graphs set attributes rdb 
functional dependency subsets defines uniquely value attributes value attributes 
set functional dependencies inference rules allows derive new facts explicitly stored data base 
typical inference rules see yang reflexivity ii transitivity iii conjunction 
set functional dependencies need solve problems find functional dependency derived inference rules set attributes find closure respect find largest set belongs derived show briefly hypergraphs provide natural unifying formalism deal problems arising analysis functional dependencies rdb 
set functional dependencies attribute set represented hypergraph 
easy see path corresponds sequence implications rules ii iii 
example path fig corresponds derivation starting implication relationships attributes denoted natural numbers 
fig 
path representation sequence implications 
procedure visit solves problems size size time 
cases set visit initialized set nodes visited procedure set nodes connected problem answer derivable problem answer 
set singleton functional dependency type directed hypergraphs representing sets functional dependencies type graphs 
interesting case studied ausiello sacc ausiello italiano italiano problems sets functional dependencies defined graph algorithms solution 
algorithms natural interpretation terms hypergraph algorithms 

urban transit application analysis passenger distribution transit system interesting application graphs nguyen pallottino 
transit system modelled special network transit lines superimposed ground network 
transit line circuit close alternating sequence nodes representing line stops arcs representing vehicle line segments 
ground network formed nodes representing geographical points stops urban area arcs representing walking paths centroids stops 
node ground network set lines node connected corresponding nodes lines belonging leaving arc boarding arc example fig 

node leaving arcs boarding arcs line line line fig 
served lines 
local standpoint consider passenger waiting wishes reach destination expected travel time 
problem consists determining optimal subset called attractive set boarding carrier lines arriving expected travel time minimized 
consider notation frequency line combined frequency lines set probability carrier serving line arrive carriers serving lines expected travel time destination line including waiting time average waiting time general travel times composed walking times vehicle travel times waiting times associated transfers line occur sequel trip 
times lengths associated arcs network lengths vehicle arcs corresponding carrier travel times lengths walking arcs walking times lengths leaving arcs set 
waiting times associated boarding arcs value boarding arc corresponding line line depends subset lines considered 
boarding arcs lines belonging length average waiting time 
reasonable hypotheses distribution passenger carrier arrivals stops results obtained expected travel time destination set selected optimal set subset minimizes expected travel time min 
travel times known optimal set easily local greedy algorithm 
algorithm works follows sort lines non decreasing order travel times iteratively insert lines line nguyen pallottino 
global problem determining expected travel times origin destination solve expected travel times optimal sets stops computed simultaneously 
purpose graphs introduced represent transit networks boarding arcs corresponding may modelled boarding arc length 
resulting graph said full arc exists 
called contained arc contained arcs treated implicitly keep size graph reasonable level 
graph contained arcs omitted 
problem finding expected travel times destination equivalent finding shortest paths terminating graph section mentioned visits easy organized destination node origin nodes true shortest paths 
transportation problem generalized bellman equations written weighted average distances defined separately stops nodes 
set stops min xy fs min fs min fs vs similar procedures sbt shortest tree procedures developed solve equations 
type queue dijkstra procedures described nguyen pallottino 
ausiello sacc graph algorithms functional dependency manipulation acm 
ausiello sacc strongly equivalent directed hypergraphs analysis design algorithms combinatorial problems ausiello eds annals discrete mathematics 
ausiello sacc minimal representation directed hypergraphs siam comput 
ausiello italiano dynamic maintenance directed hypergraphs theor 
comp 
sci 

berge graphs hypergraphs north holland amsterdam 
berge minimax theorems normal hypergraphs balanced hypergraphs survey annals discrete mathematics 
berge hypergraphs combinatorics finite sets north holland amsterdam 
boley directed recursive hypergraphs new representation language artificial intelligence 
cook complexity theorem proving procedures proc 
th acm symp 
theory computing 
dowling gallier linear time algorithms testing satisfiability propositional horn formulae logic programming 
formal aspects relational model inform 
systems 
gallo longo nguyen pallottino gli un la di 
gallo pallottino shortest path methods unifying approach math 
progr 
study 
gallo algorithms testing satisfiability propositional formulae logic programming 
garey johnson computers intractability guide theory npcompleteness freeman san francisco ca 
montanari martelli dynamic programming graph searching algebraic approach assoc 
comp 
mach 
itai complexity herbrand theorem tech 
rept 
dept comp 
sci israel inst 
technology 
italiano line maintenance minimal directed hypergraphs proc 
italiano di informatica world science press 
jaumard complexity maximum satisfiability problem horn formulas inf 
proc 
letters 
jeroslow martin wang leontiev flows problems tech 
rept school business university chicago 
knuth art computer programming addison wesley reading ma 
levi sirovich generalized graphs artificial intelligence 
longo una degli di dip 
informatica univ pisa 
maier minimum covers relational data base model assoc 
comp 
mach 
martelli montanari additive graphs proc 
ijcai 
martin computer data base organization prentice hall englewood cliffs nj 
nguyen pallottino dei ad un di degli ricerca 
nguyen pallottino equilibrium traffic assignment large scale transit network eur 
oper 
res 
nguyen pallottino hyperpaths shortest hyperpaths combinatorial optimization ed lecture notes mathematics springer verlag berlin 
nilsson problem solving methods artificial intelligence mcgraw hill new york ny 
nilsson principles artificial intelligence morgan kaufmann los altos ca 
smith database design composing fully normalized tables dependency diagram commun 
acm 
torres ar oz combinatorial models searching knowledge bases acta 
ullman principles database systems computer science press rockville md 
yang relational databases prentice hall englewood cliffs nj 
yang deduction graphs algorithm applications ieee 
software engng 
