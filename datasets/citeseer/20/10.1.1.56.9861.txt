timed asynchronous system model cristian christof fetzer dept computer science ucsd la jolla ca gamma cse propose formal definition timed asynchronous system model describe extensive measurements actual message process scheduling delays hardware clock drifts confirm model adequately describes current distributed systems built networked workstations give explanation practically needed services consensus leader election implementable time free asynchronous system model implementable timed model 
depending underlying communication process management services interprocess communication messages certain distributed systems classified synchronous asynchronous 
communication certainty synchronous system means message sent correct process correct destination process received processed destination bounded time 
achieved practice hard real time scheduling flow control techniques guarantee existence constant upper bounds message transmission process scheduling delays assuming rate failures occur system bounded 
bounded failure rate assumption allows system designers space time redundancy mask lower level communication failures provide abstraction certain communication 
assumptions existence bounds communication process scheduling delays rate failures system research partially supported air force office scientific research 
authors contacted mail cs ucsd edu chronous 
vast majority distributed systems encountered practice asynchronous 
published research asynchronous systems known time free model characterized properties services time free specification describes outputs state transitions occur response inputs placing bounds time takes outputs state transitions occur interprocess communication reliable message sent non crashed processes eventually delivered destination process processes crash failure semantics processes access hardware clocks 
time free model observer distinguish correct slow crashed processes services importance practice consensus election membership implementable 
different model asynchronous systems called timed asynchronous model avoid confusion time free model 
timed model assumes services timed specification prescribes outputs state transitions occur response inputs time intervals client expect outputs transitions occur interprocess communication unreliable datagram service omission performance failure semantics processes crash performance failure semantics processes access hardware clocks run linear envelope real time bound exists rate communication process failures occur system 
model intuition adequately describes existing distributed systems built networked workstations contrast time free model timed model allows practically needed services clock synchronization membership consensus election atomic broadcast implemented 
assume existence hardware clocks timed services time free model may appear general timed model 
workstations currently market high precision quartz clocks presence clocks timed model practical restriction 
true services encountered practice unix processes udp response time promises true services de facto timed higher level abstraction depends worst case human user fixes timeout deciding failure 
requirement services timed processes access hardware clocks timed model general model practical point view 
fact failure semantics interprocess communication time free model stronger timed model time free model exist system runs correct processes disconnected entire run timed model allows runs correct processes permanently disconnected 
time free model excludes possibility correct processes partitioned arbitrary lengths time timed model allows partitioning naturally modeled occurrence sufficiently omission performance communication failures 
characteristic timed model reflects natural way situations communication partitions observed hours days weeks real systems especially wide area networks internet 
practical point view timed model general time free allows partitions modeled naturally assumptions services timed processes access hardware clocks restrictive practical point view 
goal propose formal definition timed asynchronous system model provide extensive measurements actual message process scheduling delays clock drifts confirm model adequately describes current run mill distributed systems built networked workstations give intuitive explanation practically important services consensus leader election implementable time free asynchronous system model implementable timed model 
related distributed system models classified assume network topology synchrony failure model message buffering 
taxonomy timed asynchronous model characterized follows ffl network topology process knows complete set processes send messages process 
problem routing messages irregular topologies assumed solved lower level routing protocol 
ffl synchrony services timed processes access local hardware clocks drift rates real time bounded 
timed service specifications allow definition timeout delays message transmission process scheduling delays 
ffl failure model processes suffer crash performance failures communication service suffer omission performance failures 
ffl message buffering finite message buffers non fifo delivery messages 
buffer overflows block senders result communication omission failures 
timed asynchronous system model introduced named 
refined renamed avoid confusion time free model 
particular introduces system stability predicates conditional timeliness properties capture intuition long system stable number failures affecting system certain threshold system progress bounded time 
tuned systems expected alternate long periods stability short periods unstability failure rate raises assumed threshold 
introduced progress assumptions extension timed asynchronous system model progress assumption states unstable period exists time interval bounded length system stable 
progress assumptions allow solve problems consensus originally specified unconditional termination conditions opposed conditional timeliness properties 
highlight similarities differences exist synchronous timed asynchronous system models compares properties fundamental synchronous asynchronous services membership atomic broadcast 
introduced notion fail awareness systematic means transforming synchronous service specifications fail aware specifications implementable timed asynchronous systems 
progress assumptions require infinitely majority set processes stable certain amount time certain similarity global stabilization requirement postulates eventually system permanently stabilize sense exist time messages processes timely 
progress assumptions certain similarity failure detectors mechanisms adding synchrony time free model certain failure detector classes provide desired behavior observation system eventually stabilizes 
quasi synchronous model approach define model synchronous systems time free asynchronous systems 
requires bounded known processing speeds bounded known message delivery times bounded known drift rates correct clocks bounded known load patterns bounded known deviations local clocks 
model allows properties px non assumption coverage non zero probability bound postulated px violated run time 
comparison timed asynchronous system model assumes coverage coverage value assumptions load patters deviation local clocks 
model timed asynchronous system consists finite set processes linked datagram service 
processes run nodes physical network see 
lower level software nodes network implement datagram service 
processes said remote run distinct nodes local 
process access local hardware clock 
process management service runs node uses clock manage alarm clocks allow local processes request awakened desired 
denote processes denote real times denote clock times denote messages 
subscripts needed 
hardware clocks processes run node access node hardware clock 
clock consists computer node network hardware clock process processes timed asynchronous system access local hardware clocks communicate datagram messages network 
oscillator counting register incremented ticks oscillator 
tick increments clock value positive constant called clock granularity 
correct clocks monotonically increasing 
denote rt set ct set clock values 
clock process function real time rt ct denotes value displayed clock real time local processes access clock remote processes access different clocks 
imprecision oscillator temperature changes aging hardware clock usually drifts real time 
drift rate correct clocks bounded maximum drift rate constant ae clock correct time times measured passage realtime duration error ae gammas ae ae ae bound drift rate causes correct clock narrow linear envelope realtime see 
measurements modern operating systems solaris provide processes access hardware clocks subject adjustments 
clocks ideally suited implement calibrated hardware clock 
example solaris provides function get high resolution time returns clock value expressed nanoseconds 
particular clocks affected erroneous operator requested clock adjustments cause hardware clock failures 
current workstation technology granularity hardware clock typically ns constant ae order gamma dt dt dt real time clock time dt dt dt drift rate process hardware clock ae ae 
gamma measured drift rate uncalibrated unsynchronized hardware clocks sun workstations dependable systems laboratory ucsd period weeks 
shows drift rate hardware clocks respect set externally synchronized clocks approximate real time 
average drift rate hardware clocks stayed constant measured period 
spikes graph due adjustments external synchronization algorithm set externally synchronized clocks due changes drift rate hardware clocks 
measured drift rate hardware clocks period days 
drift rate determined hour 
spikes graphs due measuring errors 
clock calibration means changing average drift rate clock zero 
calibrating hardware clock allows decrease maximum drift rate orders magnitude gamma gamma example clock calibration allowed reduce measured average drift protocols calibrated hardware clocks ae ae ae small quantity ignore terms ae 
example equate ae gamma gamma ae gamma ae gamma ae 
simplicity assume clock granularity negligible 
assume hardware clock failures detected transformed process crash failure 
assume non crashed process correct hardware clock 
time clock realtime td send deliver process sends unicast message real time receives real time transmission delay td gamma datagram service datagram service provides primitives transmitting unicast see broadcast messages see 
primitives ffl send send unicast message process ffl broadcast broadcast processes including sender ffl deliver upcall initiated datagram service deliver message sent process simplify specification datagram service assume datagram message uniquely identified 
words messages different sent process different points time contents 
msg denote set messages 
predicates denote datagram related events ffl deliver datagram service delivers message sent real time say process receives time clock realtime broadcast td td deliver deliver process sends broadcast message receives receives transmission delays td gamma td gamma ffl send transmits unicast message real time invoking primitive send 
ffl broadcast transmits broadcast message real time invoking primitive broadcast 
requirements datagram service follows ffl real messages delivered 
datagram service delivers identifies sender sent earlier time deliver send broadcast 
ffl message unique sender delivered destination process 
deliver deliver message sends see broadcasts see receive call send receive times denote st rt respectively 
transmission delay td defined td delta rt gamma st send time stamp st receive time stamp rt defined st delta st rt delta rt 
function sender returns sender sender send broadcast 
destination dest message set processes sent dest send broadcast 
assume message sent remote processes transmission delay ffi min td ffi min transmission delay message sent local processes smaller ffi min assume size message greater upper bound 
example maximum message size udp datagram service kbytes 
datagram service ensure existence upper bound transmission delay messages 
services model timed define way time delay ffi chosen actual message sent broadcast delivered ffi message transmission delay ffi td ffi called timely 
transmission delay greater ffi td ffi say suffers performance failure late 
require safety invariants protocol designed timed asynchronous system model true independently choice ffi choice timeout delay crucial protocol stability progress see examples safety stability timeliness properties 
determination ffi ensures stability progress typically requires measurement protocol specific transmission delays 
measurements ms ms ms ms ms kb kb kb kb measured distributions round trip times round trips different message sizes 
message transmission delays increase message size see depend message transmission pattern protocol see 
solution problem ffi ffi min dependent size messages 
simplicity assume ffi ffi min constant 
valid assumption message size bounded 
demonstrate transmission delays protocol dependent measured transmission times experienced local leadership service 
measurement involved process periodically broadcasting messages processes sending immediate replies broadcast message receiving reply spends time processing receiving reply 
transmission delays successive replies increase processing time preceding replies 
distribution transmission delays shows peaks replying processes see 
measurements chose timeout delay ffi ms service 
ms ms ms ms distribution transmission delays unicast messages sent local leader election protocol 
distribution replies 
summary asynchronous datagram service assumed omission performance failure semantics lose message fail deliver message timely manner neglect probability message delivered service corrupted 
broadcast messages allow asymmetric performance omission failures sense processes receive broadcast message timely manner processes receive late 
ae ffi small quantities equate gamma ae ffi ae ffi ffi 
process management service process modes see ffl executing standard program code ffl crashed process stopped executing code lost previous state ffl recovering executing state initialization code creation restarts crash 
process crashed recovering said 
events cause process transition modes specified see ffl start created starts recovering mode ffl crash crash time example underlying operating system crashes 
ffl ready transitions mode finished initializing state ffl recover restarts crash recovering mode 
define predicate crashed true iff crashed time recovering crashed recover crash start crash ready process modes transitions 
process set alarm clock awakened specified clock time 
requests awakened clock time process management service awake shows value note alarm clock implement timer allows define alarm time relative current time specifying absolute time 
predicates specify behavior alarm clocks ffl requests real time awakened real time ffl wakeup process management service wakes real time previously specified alarm clock time process crashes process management service forgets alarm times set crashing 
require process awakened set alarm clock time hardware clock shows previously requested awakened crashed awakened wakeup crashed wakeup 
earliest smallest real time call real alarm time specified event 
consider process management process alarm time real time wakeup holds 
delay gamma called scheduling delay experienced process process management service ensure existence upper bound scheduling delays 
timed service services timed model define scheduling timeout delay oe actual scheduling delays smaller oe 
say process suffers performance failure awakened oe time units specified real alarm time see 
said timely 
process suffers performance failure real time exists alarm time caused wakeup event pf ail delta gamma oe wakeup crashed 
formally define predicate timely true iff timely timely delta pf ail crashed wakeup wakeup process timely awakened oe real time units real alarm time corresponding specified alarm clock time process suffers performance failure oe awakened real time oe 
measurements implement alarm clocks unix family operating systems select system call 
call allows specify maximum interval process waits specified events kernel returns 
unix tries awake process specified time interval expires internal timer 
timer typically resolution ms 
scheduling delay ms 
shows distribution scheduling delays experienced process executing membership protocol 
measurements selected scheduling timeout delay ms membership protocol 
ms ms ms distribution shows difference time process awakened time requested awakened 
measurements 
summary timed model assumes processes crash performance failure semantics processes recover crashes 
ae oe small quantities equate gamma ae oe ae oe oe 
extensions core timed asynchronous system model assumes datagram service process management service local hardware clocks 
introduce optional extensions model stable storage progress assumptions 
extensions reasonable network workstations 
systems need access stable storage 
progress assumption states infinitely majority processes stable bounded amount time 
progress assumptions valid local area network systems necessarily valid large scale systems connected wide area networks 
service specifications need progress assumption enable implementation timed asynchronous systems 
stable storage processes lose memory state crash 
allow processes store information crashes introduce extension timed asynchronous system model local stable storage service 
service provides primitives local process ffl store addr val asks value val stored address addr ffl read addr val asks read value stored address addr 
stored value addr undefined value returned 
predicates denote invocation primitives store addr val read addr val respectively 
stable storage service guarantees address process reads returns value stored address read val store val 
store val store 
stable storage service implemented top unix unix file system 
implementation service performance described 
stability progress assumptions timeliness requirements encountered specification protocols designed timed asynchronous system model conditional sense system stability predicate true system achieve see 
conditional timeliness requirements express set processes sp stable failures affecting sp bounded rate occurrence servers sp guarantee progress bounded amount time 
call set sp stable partition iff ffl processes sp timely ffl bounded number messages sent processes sp protocol round delivered timely manner ffl partition message late messages arrive sp concept stable partition formalized stability predicate defines set processes sp forms stable partition time interval 
multiple reasonable definitions stability predicates examples stable predicate majority stable predicate 
formally define stability predicate delta partition introduced informally 
formalize generalize notions connectedness introduced 
processes connected time interval iff timely messages sent processes delivered ffi time units 
denote fact connected predicate connected connected delta msg jm timely timely msg gammam fp qg st sender fp dest td ffi process delta disconnected process iff message receives transmission delay delta ffi time units 
common situation processes delta disconnected network overloaded processes slow 
fail aware datagram service classify messages transmission delay greater delta ffi slow messages transmission delay ffi fast 
messages transmission delay ffi delta classified slow fast 
predicate delta disconnected denote delta disconnected delta deliver sender td delta say non empty set processes delta partition interval iff processes connected processes delta disconnected processes delta partition delta connected delta disconnected 
example utility stability predicate consider atomic broadcast protocol designed achieve group agreement semantics messages possibly lost late re sent times 
group processes forms delta partition sufficiently long time group progress successfully broadcasting messages time 
progress assumptions lifetime distributed system local area network characterized long periods exists majority processes stable 
stability periods alternate short instability periods 
observation introduced concept progress assumptions show classical services consensus originally specified unconditional termination requirements implementable extended timed model 
progress assumption states system infinitely stable exists constant time exists majority processes sp sp forms stable partition 
measurements measured behavior processes running sun workstation dependable systems lab period day normal load conditions see 
set processes average delta stable 
average distance delta stable periods ms 
typical behavior experienced unstable phase processes slow 
membership service allows fast processes continue progress temporarily removing slow process es membership 
note progress assumption requires majority processes form stable partition sufficient processes delta stable 
ms ms ms ms ms distribution time delta stable periods processes delta ms oe ms 
typical failure behavior observed consecutive stability periods process slow 
communication time synchronous systems communication measuring passage time certain correct process hear time am alive message failed 
communication uncertainty characterizes timed asynchronous systems communication time difficult possible 
illustrate processes communicate measuring passage time timed asynchronous system sketch processes ensure time leader 
uses locking mechanism facilitates communication time local clocks synchronized 
mechanism ensures sends information message process determine consulting local hardware clock realtime longer information contained knows receives uses information bounded duration sent 
concreteness consider pseudo code 
process sends message informing leader duration clock time units transmission delay delta real time units 
process calculate upper bound transmission delay determine fail aware datagram service introduced calculates upper bound transmission delay messages round trip messages 
delivers fast transmission delay delta 
process uses fast sets variable leadership expires exactly duration time units reception local clock time rt process waits duration ae delta ae clock time units leader factor ae necessary hardware clocks drift apart ae 
process fp qg leader iff function leader 
evaluates true called value hardware clock argument leader delta leader 

process leader time leader transmission delay delta leader duration local clock time units receiving sent waits duration ae delta ae local clock time units leader 
possibility impossibility issues address section issue problems election consensus implementable actual distributed computing systems allow deterministic solution model extent core timed const time duration delta boolean leader time return true return false process time fa leader duration ae delta ae select event wakeup select process time select event fa fast rt fast rt duration endif select pseudo code uses communication time enforce eventually leader ensuring leader time 
model 
fix ideas election problem illustrate issues 
leader problem deterministic solution depends exact specification problem underlying system model allows communication time progress assumptions 
termination vs conditional timeliness conditions commonly agreed rigorous specification election problem 
example specifies election problem time free system model follows real time exists leader tf infinitely exists leader real time exists real time process leader problems specified timed systems strong unconditional termination conditions requiring eventually happens 
conditional timeliness condition 
require system stabilizes priori known duration happen bounded time 
delta stable predicate earlier generalize specifications election highly available leadership problem timed asynchronous systems follows real time exists leader tt majority processes delta stable time interval exists process leader 
specification tf implementable time free systems process allowed crash tt implementable timed systems 
explain consider time free system contains processes implement tf solve problem process leader real time stays leader crashes time remaining processes detect crashed elect new leader time satisfy requirement tf 
processes communicate messages find run indistinguishable remaining processes crashed leader words find run requirements tf violated 
implementability tt timed asynchronous system explained follows 
ensure property processes decide current leader crashed just slow 
process leader bounded amount time demoted see section 
processes just wait certain amount time exchanging messages sure leader demoted 
particular processes able decide remote process crashed impossible time free timed asynchronous system models 
second system stable majority timely processes communicate timely fashion 
sufficient elect processes leader bounded amount time ensure timeliness requirement satisfied 
note specification tf implementable core timed model process allowed crash 
explain consider run process communicate process datagram service drops messages 
process leader construct run crashed indistinguishable remaining processes satisfy tf 
exist processes leaders times respectively construct run indistinguishable processes leaders point realtime communicate process 
communication time important fault tolerance interesting question tt implemented time free systems 
notion stability defined time free systems sketch alternative result tt implementable timed system hardware clocks removed process crash omission failures occur 
note processes access local hardware clocks determine upper bound transmission delay messages leader enforce bounded time known processes 
particular means interprocess communication time free model explicit messages 
proof sketched tf implementable time free model applies timed system model hardware clocks 
essential understand access local clocks run linear envelope real time enable communication time allows circumvent timed model impossibility result stated time free model 
progress assumptions observation tf deterministic solution core timed model implementable practical network workstations 
reason timed asynchronous system model allows principle runs system stable actual production systems encounters practice behavior extremely ffi oe assumed chosen 
mentioned earlier system alternate long stability periods relatively short instability periods 
describe systems reasonable progress assumption see section assume existence system infinitely stable time units 
progress assumption ensures solution tt elects leader infinitely 
progress assumption implies solution tt solution tf 
service specifications defined asynchronous services implementable timed model conditional timeliness conditions termination conditions tf 
general need progress assumptions enable implementation services conditional timeliness conditions timed asynchronous systems services implementable core timed system model 
furthermore progress assumptions reasonable local area systems necessarily valid wide area systems frequently partition long time 
included progress assumptions part core timed asynchronous system model 
rigorous definition timed asynchronous system model 
measurements performed network workstations dependable systems laboratory unpublished measurements labs aware believe timed asynchronous system model accurate description actual distributed computing systems 
particular believe set problems solvable timed model extended progress assumptions close approximation set problems solvable systems workstations linked reliable possibly local area networks 
timed asynchronous system model interesting practical point view raises interesting theoretical questions 
example allow solve different problems time free model minimum message complexity solve problem different models allows communication time 
open questions respect relation timed model extended progress assumption time free model extended failure detector 
example question failure detectors implementable timed asynchronous systems 
far shown perfect failure detector implementable timed system extended progress assumption 
amir wool 
evaluating quorum systems internet 
proc 
th int symp fault tolerant computing pages sendai japan june 
chandra hadzilacos toueg charron bost 
impossibility group membership 
proceedings fifteenth acm symposium principles distributed computing pages may 
chandra toueg 
unreliable failure detectors asynchronous systems 
proceedings th acm symposium principles distributed computing pages aug 
cristian 
probabilistic clock synchronization 
distributed computing 
earlier version ibm research report san jose rj 
cristian 
understanding fault tolerant distributed systems 
communications acm feb 
cristian 
group majority strict agreement timed asynchronous distributed systems 
proc 
th int 
symposium fault tolerant computing pages sendai japan june 
cristian 
synchronous asynchronous group communication 
communications acm apr 
cristian strong dolev 
atomic broadcast simple message diffusion byzantine agreement 
information computation april 
early version ftcs june 
cristian mishra 
implementation performance stable storage service unix 
proceedings th symposium reliable distributed systems pages niagara lake canada oct 
cristian schmuck 
agreeing processor group membership asynchronous distributed systems 
technical report cse ucsd 
dolev dwork stockmeyer 
minimal synchronism needed distributed consensus 
journal acm jan 
fetzer cristian 
possibility consensus asynchronous systems 
proceedings pacific rim int symp 
fault tolerant systems newport beach ca dec 
fetzer cristian 
fail aware failure detectors 
proceedings th symposium reliable distributed systems lake canada oct 
fetzer cristian 
fail aware membership services 
technical report cse xxx ucsd 
fetzer cristian 
fail awareness approach construct fail safe applications 
technical report cs ucsd nov 
fetzer cristian 
fail awareness timed asynchronous systems 
proceedings th acm symposium principles distribute computing philadelphia may 
fetzer cristian 
highly available local leader service 
technical report cs ucsd nov 
fischer lynch paterson 
impossibility distributed consensus faulty process 
journal acm apr 
lamport lynch 
distributed computing models methods 
handbook theoretical computer science pages 
elsevier science publishers 
postel 
user datagram protocol 
technical report rfc usc information sciences institute 
marzullo 
election vs consensus asynchronous systems 
technical report tr cornell university feb 
suciu fetzer 
determining userlevel transmission delay networks workstations 
technical report cs ucsd dec 
almeida 
away traditional fault tolerant real time system models 
ieee bulletin dec 
rodrigues 
amp highly parallel atomic multicast protocol 
sigcomm pages austin tx sep 
