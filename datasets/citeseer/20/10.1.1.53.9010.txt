computer immunology stephanie forrest steven hofmeyr anil somayaji dept computer science university new mexico albuquerque nm forrest cs unm edu communications acm appear march natural immune systems protect animals dangerous foreign pathogens including bacteria viruses parasites 
role body analogous computer security systems computing 
differences living organisms computer systems article argues similarities compelling point way improved computer security 
improvements achieved designing computer immune systems important properties illustrated natural immune systems 
include multi layered protection highly distributed detection memory systems diversity detection ability individuals inexact matching strategies sensitivity new foreign patterns 
give overview immune system relates computer security 
illustrate ideas examples 
immune system comprised cells molecules 
recognition foreign protein called antigen occurs immune system detectors including cells cells anti currently leave mit artificial intelligence laboratory 
source basic immunology computer scientist overview immunology www cs unm edu imm html immune system html 
infect recognize destroy overview immune system 
infections shown red bacteria viruses parasites recognized immune system detectors cells cells antibodies shown blue green molecular bonds form 
infections eliminated general purpose scavenger cells indicated thin line surrounding detector antigen complex 
bodies bind antigen 
binding detector antigen determined physical chemical properties binding regions 
binding highly specific detector recognizes limited set structurally related antigen 
detector antigen bind complex set events takes place usually resulting elimination antigen scavenger cells called details antigen bound cleared depend type detectors involved 
illustrates highly simplified view immune system 
striking feature immune system processes generates detectors identifies eliminates foreign material remembers patterns previous infections highly parallel distributed 
reason immune system mechanisms complicated highly robust failure individual components attacks immune system 
analogy computer security problems biological processes recognized early term computer virus introduced 
spafford argued computer viruses form artificial life authors investigated analogy epidemiology spread computer viruses networks 
current methods protecting computers viruses kinds intrusions largely failed take advantage known natural biological systems protect infection 
initial direction included virus detection method cell censoring thymus integrated approach virus detection incorporating ideas different biological systems :10.1.1.48.3258
early efforts regarded largely novelties principles illustrate widely adopted 
traditionally described problem solved immune system problem distinguishing self dangerous nonself eliminating 
self taken internal cells molecules body nonself foreign material particularly bacteria parasites viruses 
problem protecting computer systems malicious intrusions similarly viewed problem distinguishing self nonself 
case nonself unauthorized user foreign code form computer virus worm unanticipated code form trojan horse corrupted data 
distinguishing self nonself natural immune systems difficult reasons 
components body constructed basic building blocks nonself particularly proteins 
proteins important constituent cells immune system processes various ways including fragments called peptides short sequences amino acids 
second size problem solved large respect available resources 
example estimated vertebrate immune system needs able detect different patterns different genes construct entire immune modern view emphasizes immune system role eliminating infection addition tolerance self emphasis similarly important computer security problem 
system body 
difficulty discrimination task shown fact immune system occasionally mistakes 
diseases provide examples immune system confusing self 
computer security problem difficult 
legitimate changes self new users new programs paths intrusion periphery networked computer clearly defined periphery individual animal 
firewalls attempt construct periphery limited success 
natural immune system distinguishing features believe provide important clues construct robust computer security systems 
features include multi layered protection distributed detection diversity different systems inexact detection ffl multi layered protection 
body provides layers protection foreign material including passive barriers skin membranes physiological conditions ph temperature generalized inflammatory responses adaptive responses including cell cellular cell mechanisms 
computer security systems monolithic sense define periphery inside activity trusted 
basic defense mechanism violated rarely backup mechanism detect violation 
example computer security system relies encryption protect data mechanism noticing encryption system broken 
ffl detection distributed 
immune system detection memory systems highly distributed centralized control initiates manages response 
success arises highly localized interactions individual detectors effectors variable cell division death rates allow immune system resources cells needed ability tolerate kinds failures including deletion entire organs spleen 
ffl copy detection system unique 
individual population unique set protective cells molecules 
computer security involves protecting multiple sites multiple copies software multiple computers network 
environments way avoid detection site sites vulnerable 
better approach provide protected location unique set detectors unique version software 
site compromised sites remain secure 
ffl detection previously unseen foreign material 
immune system protected diseases effective noticed new forms infection 
immune systems remember previous infections mount response seen 
call secondary response 
case novel infection immune system initiates primary response evolving new detectors specialized infection 
process slower secondary response provides essential capability lacking computer security systems 
virus intrusion detection methods scan known patterns virus signatures leaves systems vulnerable attack novel means 
exceptions include anomaly intrusion detection systems cryptographic checksums 
ffl detection imperfect antigen matched preexisting detector 
immune system uses strategies confront problem learning primary response distributed detection single individual populations individuals 
high system wide reliability achieved relatively low cost time space minimal communication components 
take build computer immune system features 
system sophisticated notions identity protection afforded current operating systems provide generalpurpose protection system augment current computer security systems 
basic components stable definition self prevention detection subsequent elimination dangerous foreign activities infections memory previous infections method recognizing new infections method protecting immune system attack 
want cast problem computer security framework distinguishing self nonself task define mean self mean nonself 
want define self terms memory access patterns single host tcp ip packets entering leaving single host collective behavior local network computers network traffic router instruction sequences executing stored program user behavior patterns keyboard typing patterns 
immune system evolved recognition machinery focus peptides protein fragments 
consider different paths intrusion 
example quite different recognition systems immune system cell mediated response aimed viruses intra cellular infections response primarily directed bacteria extra cellular material 
computers self need multiple ways provide comprehensive protection 
want definition self tolerant legitimate changes including editing files new software new users changes user habits routine activities system administrators 
time want notice unauthorized changes files viral software unauthorized users insider attacks 
computer security parlance desire system low false positive rates false negatives 
generally possible get perfect discrimination legitimate illegitimate activities 
bias multi layered protection adaptive responses willing tolerate false negatives false positives false negatives layer true positives 
examples applying ideas immunology today computer security problems intrusion detection method distributable change detection algorithm 
examples highlight important question analogies biology computer science applied 
case analogy direct 
examples incorporate basic principles elucidated earlier support vision guides 
analogy immunology computer security rich goes examples 
example kephart exploit analogy completely different ways 
analogy immunology contributes important point view achieve computer security potentially lead systems built quite different sets assumptions biases past 
intrusion detection system processes initial step defining self realistic computing environment developing intrusion detection system networked computers 
discrimination characteristic structure compact universal protected system 
immune system choice base discrimination patterns peptides limits effectiveness 
example protect body radiation 
proteins component living matter generally differ self nonself provide distinguishing characteristic 
appropriate way define self computer 
earlier intrusion detection monitors behavior individual users decided concentrate system processes 
peptide computer system defined terms short sequences system calls executed privileged processes networked operating system 
preliminary experiments limited testbed intrusions anomalous behavior show short sequences system calls currently sequences length provide compact signature self distinguishes normal abnormal behavior 
strategy intrusion detection system build database normal behavior program interest 
database specific particular architecture software version configuration local administrative policies usage patterns 
stable database constructed program particular environment database monitor program behavior 
sequences system calls form set normal patterns database sequences database indicate anomalies 
terms immune system host small network hosts different databases defining self 
analogous types tissue body expresses somewhat different set proteins 
patterns comprising self uniformly distributed protected system 
stages proposed system 
stage scan traces normal behavior build database characteristic normal patterns observed sequences system calls 
shown sidebar 
parameters system calls ignored trace forked subprocesses individually 
second stage scan traces contain abnormal behavior matching trace patterns stored database 
pattern seen occur normal database recorded mismatch see sidebar 
current implementation tracing analysis performed offline 
mismatches observable distinguish normal abnormal 
observe number mismatches encountered test trace aggregate information ways 
example shows mismatch rate time successful exploit 
normal databases discriminate normal abnormal behavior 
date constructed databases normal behavior different unix programs sendmail wu ftpd linux version ftpd lpr 
comparing normal database program sendmail traces normal behavior different program ls observe mismatches length foreign ls trace 
observe clear detection common intrusions programs mismatch rates generally range length trace 
results suggest short sequences system calls provide compact signature normal behavior signature high probability perturbed intrusions 
method provide cryptographically strong completely reliable discriminator normal abnormal behavior simpler proposed position trace anomalous signature successful syslog exploit sendmail sunos 
normal database generated sequences length 
axis measures position anomalous trace units system calls 
axis shows mismatches recorded anomalous trace compared normal database 
axis unit measure total number mismatches past system calls trace called locality frame 
position trace locality frame records mismatches observed positions gamma methods potentially provide lightweight real time tool continuously checking executing code 
appealing feature code runs frequently checked frequently code seldom executed infrequently checked 
system resources devoted protecting relevant code segments 
large variability individual systems currently configured patched conjecture databases different sites differ meet principle uniqueness stated earlier 
important reason provide behavioral signature identity computer harder falsify example ip address 
results quite preliminary great deal additional testing development needed system built ideas deployed 
distributed change detection second example borrows closely mechanisms immune system 
cells important class detector cells immune system 
different kinds cells plays role immune response 
cells binding regions detect antigen fragments peptides 
binding regions created pseudo random genetic process think analogously generating random strings 
binding regions called receptors created randomly high probability cells detect self peptides 
immune system solves problem sending nonfunctional cells organ called thymus mature 
stages cell maturation censoring process cells bind self proteins circulating thymus destroyed 
cells fail bind self allowed mature leave thymus part active immune system 
process called negative selection illustrated 
circulation cell binds antigen sufficient concentration recognition event said occurred triggering complex set events leads elimination antigen 
immature cells thymus self proteins bind die self tolerant cell death censoring cells thymus 
cell censoring process thought defining protected collection data self proteins terms complementary patterns nonself proteins 
principle design distributable change detection algorithm interesting properties 
suppose collection digital data call self wish monitor changes 
activity pattern intrusion detection algorithm described compiled program file data 
algorithm works follows 
generate set detectors fail match self 

detectors monitor protected data 

detector activated change occurred location change known 
details specified implementable algorithm detectors represented 
match defined 
detectors generated 
efficient algorithm 
questions explored detail give highlights :10.1.1.48.3258
computer immune system binding detectors foreign patterns modeled string matching pairs strings 
self defined set strings logically segmenting protected data equal size substrings detector defined string length substring 
perfect match strings equal length means location string symbols identical 
perfect matching rare immune system 
partial matching symbol strings defined hamming distance edit distance plausible rule called contiguous bits 
rule regions contiguous matches 
looks contiguous matches symbols corresponding positions 
strings say match true agree contiguous locations 
detectors generated ways 
general method works matching rule apparently immune system 
simply generate detectors random compare self eliminating match self 
contiguous bits rule defined random generating procedure quite inefficient roughly exponential size self 
efficient algorithms dynamic programming methods allow generate detectors linear time certain matching rules 
total number detectors required detect nonself contiguous bits matching rule order magnitude size self 
algorithm interesting properties 
easily distributed detector covers small part nonself 
set negative detectors split multiple sites reduce coverage site provide system wide coverage 
achieve similar system wide coverage positive detection interesting note immature cells entering thymus complete maturation process functioning cells 
known deletion attributed negative selection thought sizable 
gross simplification 
actual number heavily dependent self set organized false negative rate willing tolerate choice matching rule 
see careful analysis :10.1.1.48.3258
expensive nearly complete set positive detectors needed site resulting multiple copies detection system sites communicate frequently coordinate results 
second point algorithm tolerate noise depending details matching function defined 
consequently algorithm applicable dynamic noisy data intrusion detection example instance cryptographic applications efficient change detection methods exist 
algorithm feasibility originally shown problem computer virus detection dos environments :10.1.1.48.3258
protected data dos system files self set generated logically segmenting com files equal size substrings binary characters detectors bit strings generated randomly contiguous bits matching rule thresholds ranging infections generated various file viruses 
example self set consisted self strings protected essentially reliability detectors 
similar results obtained boot sector viruses 
returning principles discussed earlier intrusion detection system part multi layered system example sitting cryptographic user authentication systems 
distributed sites example algorithm 
databases normal behavior generated empirically local operating conditions different site unique protection 
focusing anomaly intrusion detection trivially meets requirement sensitive new forms attack 
concrete illustrations principles immunology incorporated computer security framework 
examples represent initial steps larger intellectual vision robust distributed protection systems computers 
ignored important complexities immune system incorporated achieve goal 
example hard imagine implement truly distributed protection adopting immune system strategy self replicating components complex molecular signaling mechanisms control immune response 
aspect analogy specified involves circulation pathways immune cells migrate body 
generally biological mechanisms incorporated computational systems including evolution neural models viruses parasites relevant computer security problem 
near hope integrate negative selection algorithm intrusion detection augmenting system immune system features 
article stressed similarities important differences computers living systems 
success analogy ultimately rest ability identify correct level abstraction preserving essential information processing perspective discarding 
complicated fact natural immune systems process cells molecules computer immune systems handling kinds data 
case computer vision system input data system principle processed natural system photons sound waves 
deciding exactly draw analogy difficult task certainly different strategies tried 
chosen model peptides sequences system calls model binding string matching 
possible choices hope explore 
building open read mmap mmap open read mmap open read mmap read mmap mmap mmap mmap open mmap open read checking open read mmap mmap open mmap mmap mmap open mmap open mmap mmap misses sequence databases system calls unix processes 
trace system calls produces database normal patterns contains unique sequences 
example anomalous trace constructed replacing read mmap shown read 
detected checking phase anomalous trace contains subsequences appear normal database 
sidebar database normal patterns build database normal patterns collect trace system calls emitted normally running process 
slide window size trace recording unique symbol sequence 
technique goes various names including embedding gram analysis 
illustrated trace system calls window size resulting database unique sequences 
method differs slightly described gives significantly better results 
database normal behavior constructed new behavior monitored anomalies tracing system calls checking existing database 
symbol change read mmap position causes mismatches checking procedure 
important consideration choose normal behavior define normal database 
experimented methods synthetic actual 
case trace running process exercise set synthetic commands 
example suite artificial email messages exercise sendmail results highly compact database different sequences length 
test suite useful replicating results comparing performance different settings kinds controlled experiments 
actively collecting traces normal behavior live user environments 
data difficult collect hard evaluate provide important information system perform realistic settings including data false positive rates 
example initial studies lpr live environment observed growth database size anticipated month trial database roughly doubled size distinct sequences month due network access errors loaded conditions 
acknowledgments authors gratefully acknowledge support national science foundation iri office naval research defense advanced research projects agency interval research mit artificial intelligence laboratory santa fe institute 
people contributed important ideas suggestions including ackley brooks haeseleer minar opera perelson sanchez shrobe smith 
prepared hightower 
data generated help rogers longstaff computer emergency response team cert 
cohen 
computer viruses 
computers security 
denning 
intrusion detection model 
ieee transactions software engineering february 
haeseleer forrest helman 
immunological approach change detection algorithms analysis implications 
proceedings ieee symposium computer security privacy 
ieee press 
forrest hofmeyr somayaji longstaff 
sense self unix processes 
proceedings ieee symposium computer security privacy 
ieee press 
forrest perelson allen :10.1.1.48.3258
self nonself discrimination computer 
proceedings ieee symposium research security privacy los alamitos ca 
ieee computer society press 
travers 
immune system health disease 
current biology london nd edition 
kephart white chess 
computers epidemiology 
ieee spectrum 
kephart sorkin arnold chess tesauro white 
biologically inspired defenses computer viruses 
ijcai 
international joint conference artificial intelligence 
ko fink levitt 
automated detection vulnerabilities programs execution monitoring 
proceedings th annual computer security applications conference pages december 
murray 
application epidemiology computer viruses 
computers security 
perelson 
predicting size antibody combining region consideration efficient self non self discrimination 
proceedings national academy science 
spafford 
computer viruses form artificial life 
langton taylor farmer rasmussen editors artificial life ii pages 
addisonwesley redwood city ca 
