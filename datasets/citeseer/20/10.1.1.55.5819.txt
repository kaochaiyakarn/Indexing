coupling cohesion object oriented systems johann eder kappel michael institut fur informatik universitat klagenfurt 
klagenfurt austria email eder ifi uni ac institut fur informatik universitat linz 
linz austria email ifs uni linz ac institut fur universitat linz 
linz austria email dke uni linz ac object oriented system development gaining wide attention research environments industry 
severe problem encountered quickly increasing complexity systems lack adequate criteria guidelines designs 
cope problem imperative better understand properties characteristics object oriented systems 
extend concepts coupling cohesion developed initially procedure oriented systems object oriented systems 
coupling describes interdependency methods object classes respectively 
cohesion describes binding elements method object class respectively 
introduce comprehensive taxonomy coupling cohesion properties object oriented systems provide guidelines improving properties 
cr classification software object oriented programming soft ware coding standards software management software quality assurance software design methodologies additional keywords phrases coupling cohesion object oriented design guidelines building quality systems driving goal software engineering efforts decades 
key qualities system support maintainability extendibility understandability reusability 
object oriented languages development environments go long way providing features building maintainable extendible understandable reusable systems 
features object oriented languages support encapsulation information hiding userdefined classes message passing inheritance polymorphism 
features development environments support predefined class libraries application frameworks standardized protocols naming conventions development tools browsers inspectors 
object oriented languages development environments panacea building object oriented quality systems 
example problem encountered quickly increasing complexity object oriented systems due objects inter object relationships systems 
needed addition object oriented language development environment guidelines check lists metrics help design development object oriented systems essential building procedure oriented systems 
increasing awareness problem object community 
guidelines methods object oriented system development emerged independently 
design metrics take idiosyncratic features object oriented designs account emerged 
common objective design metrics try quantify coupling cohesion properties objectoriented system investigation 
example authors identify complexity measures influence coupling cohesion object oriented systems 
metric centered view notions coupling cohesion re discovered literature design characteristics influencing properties object oriented quality systems 
coupling cohesion primary attributes led procedure oriented quality systems 
coupling measure interdependencies different modules cohesion measure binding elements single module 
rated designed procedure oriented system low coupling properties terms interdependencies modules high cohesion properties terms strong bindings elements single module 
days coupling cohesion adapted ada tasking data type system development 
stated coupling cohesion significantly influence maintainability understandability modifiability serve guide development quality systems 
despite growing awareness coupling cohesion best knowledge exists thorough discussion coupling cohesion properties object oriented systems literature 
goal fill gap 
introduce comprehensive taxonomy coupling cohesion properties object oriented systems provide guidelines improving properties 
consciously try quantify various coupling cohesion properties placing ordinal scale 
due reasons 
firstly try reinvent coupling cohesion properties scratch adapt existing research area procedure oriented systems data type systems 
realm quantifiable computable metrics investigated 
secondly importantly far empirical results basis coupling cohesion metric verified 
serious give numbers experimental backing 
adapting coupling cohesion properties procedure oriented systems considerations place 
firstly opposed procedure oriented systems module subject interest object oriented systems exist subjects interest methods object classes 
secondly coupling cohesion properties various subjects interest independent 
example coupling properties methods different object classes highly influence coupling properties object classes 
enhancement coupling cohesion concepts object oriented systems main contribution 
research described motivated project mood methods object oriented development siemens austria austria major software development companies 
aim project provide generic object oriented software life cycle model emphasizes software quality assurance reusability 
organized follows section introduce subjects interest terms coupling cohesion characteristics object oriented systems 
section analyze coupling quality various relationships methods object classes 
section studies cohesion properties methods object classes uncovers interdependencies coupling cohesion 
section section elaborate extent existing guidelines improve coupling cohesion quality 
section concludes points research 
basic concepts object oriented systems able talk coupling cohesion object oriented systems identify basic building blocks systems possible relationships advance 
widely definitions object oriented languages systems stems peter wegner 
object oriented language support basic concepts object object class inheritance 
object consists set instance variables representing internal state object set methods representing external behavior object 
put words object encapsulation state behavior 
object class seen kind template specifying state behavior set similar objects created instances object class create method run time program 
object classes basic means object oriented design development 
definition object class principle encapsulation data type approach principle information hiding distinguishing visible hidden parts object class definition 
visible part called specification interface object class general consists set method specifications 
hidden part called implementation object class consists implementation methods definition instance variables 
consider class variables class methods 
object class may related classes inheritance relationship case inherits instance variables methods 
object class related object class inheritance relationship called direct subclass object class indirect subclass exists class direct subclass direct indirect subclass object class called subclass object class direct indirect subclass conversely object class called superclass object class subclass objects instances subclasses called members inheritance single direct superclass called single inheritance inheritance multiple direct superclasses called multiple inheritance 
inheritance relationship transitive reflexive anti symmetric 
directed acyclic graph built inheritance relationship called inheritance hierarchy 
deliberately term inheritance hierarchy precise term inheritance graph commonly accepted literature 
basic concepts principles object oriented paradigm message passing object identity considered talking object oriented quality systems 
object communicates object sending message adhering principle information hiding message passing means access alter object state 
message passing implies second kind relationship interaction relationship 
interaction relationship defined methods place deduced object classes methods specified turn 
inheritance relationship strongly interferes interaction relationship definitions necessary able introduce interaction relationship 
define notions overriding polymorphism dynamic binding static class 
overriding refers redefinition inherited instance variables methods subclasses 
polymorphism means method may invoked objects different classes 
dynamic binding means binding method invocation code executed takes place run time depends actual class object method invoked 
static class variable domain variable defined compile time 
contrast dynamic class variable actual class object referenced variable run time 
due polymorphism variable static class object class may members run time 
due overriding method may signatures implementations class initially defined subclass 
signature method consists name method names domains input parameters domain return value 
changing signature subclass comes changing names domains number parameters 
say method implemented object class initially defined signature implementation overridden say method defined object class implemented superclasses concerning interaction relationship class object classes restrict attention methods implemented object class related object class interaction relationship concerning methods implemented implemented implementation method invoked object referenced variable static class superclass subclass implemented subclass class superclass chain subclass explanations place 
consider direct interactions 
transitive closure interaction relationship due transitive method invocations treated section 
definition interaction relationship takes static dynamic classes account 
course encountered interaction relationships potential relationships occur need occur run time 
line initial incentive possible relationships possible dependencies investigated 
special case definition interaction relationship relationship may exist object classes inherit 
example method implemented method implemented subclass related interaction relationship concerning implementation method invoked object referenced variable static class superclass subclass superclass implemented class superclass chain subclass 
interaction relationship defined object classes methods 
sake simplicity interaction relationship interaction coupling discussed methods place second step extended object classes cf 
section 
third relationship relevant terms coupling properties possible concept object identity means object unique identifier change time 
possible object may objects instance variables objects identifiers 
objects may objects 
object class related object class component relationship domain instance variable note purpose investigating coupling properties need distinguish relationships restricted sense part hierarchies component relationships general sense general independent objects 
contrary interaction relationship consider direct component relationships 
analysis methods object classes identified basic building blocks considering coupling cohesion object oriented systems 
methods basic means invocation similar modules procedure oriented systems 
note term module original literature coupling cohesion synonymous procedure subroutine similar programming units 
object classes basic units encapsulation basic building blocks definition 
contrast consider objects coupling cohesion characteristics 
remember coupling cohesion primarily investigated realm object oriented design implies modeling object classes individual objects 
furthermore necessary consider complex building blocks subsystems 
subsystem consists set object classes cooperate fulfill certain functionality 
subsystems seen complex object classes usually inheritance 
discussion coupling cohesion characteristics object classes easily extended subsystems recursively applying rules defined classes 
sections deal methods object classes instance variables 
methods object classes primary subjects interest terms coupling cohesion properties instance variables necessary means exhibit properties 
style syntax examples 
coupling coupling defined time realm procedure oriented systems 
stevens define coupling measure strength association established connection module 
strong coupling complicates system module harder understand change correct highly interrelated modules 
complexity reduced designing systems weakest possible coupling modules 
previous section defined object oriented equivalent module method 
similar modules methods coupled invocation sharing data 
may interaction relationship cf 
section 
methods object classes analyzed terms relationships terms coupling properties 
object classes may component relationships inheritance relationships addition interaction relationships cf 
section 
relationships different dimensions coupling properties may deduced object oriented systems ffl interaction coupling ffl component coupling ffl inheritance coupling coupling dimensions induces behavior class depends behavior class related relationships mentioned 
put words information case changes knows change 
degree coupling described complex explicit information 
scale low coupling described small simple explicit inter relationship methods object classes 
general low coupling correlates software quality terms better maintainability reusability 
high coupling described large complex implicit inter relationship making maintenance nightmare reuse impossible 
study coupling dimensions turn 
interaction coupling methods coupled interaction terms invocation sharing data 
interaction coupling similar classical definition coupling modules adopt various degrees classical coupling describe interaction coupling 
analyze interaction coupling objectoriented systems differs classical notion coupling 
difference mainly stems interrelated facts 
firstly methods belong object classes 
implies object classes may interaction coupled 
secondly interaction coupled methods may belong object class 
implies distinguish interaction different classes interaction single class 
consider degrees interaction coupling turn worst best redefine object oriented systems necessary 

content content coupling worst form coupling 
means method directly accesses parts internal structure implementation method 
method know exactly internals methods change method may influence 
object oriented paradigm general encapsulation information hiding particular prohibit method directly accesses implementation method hidden instance variables different class 
content coupling may occur programmer uses features object oriented languages break information hiding property 
example friend option allows access hidden private protected parlance instance variables different object classes 

common coupling rated common methods communicate unstructured global shared data space 
common coupling better content coupling implicit communication channels collected common area 
pathological form coupling number possible connections methods polynomial locality principle software design considered 
encapsulation information hiding prohibit common coupling 
aware object oriented language supports unstructured globally visible data space 
rate coupling pool variables smalltalk external see variables provide structured shared data space varying visibility 

external external coupling improves common coupling structuring global shared data space 
locality principle violated deficiencies common coupling remain 
encapsulation information hiding prohibit external coupling methods different classes 
may occur object oriented systems languages provide globally visible variables 
example public instance variables trellis owl pool variables smalltalk 
happens methods class 
may find external coupling interaction methods class may access instance variables similar global variables modules 
passing data may implemented shared instance variables explicit parameters 
note general consider passing information different invocations methods object instance variables external coupling 
instance variables invented 
coupling rated external instance variables represent state object 
instance variables contain transient data data relevant execution method relevant invocation method 
data may reinitialized invocation outside 
transient data represented local variables method passed methods parameters 
global data modules transient data instance variables avoided 
define set instance variables object class minimal contain data representing static state object class 
methods class external coupled 
note methods different classes inherit may public instance variables classes passing transient data worse form external coupling 
kinds external coupling avoided 
example consider definition object class employee note assume object classes string date defined class employee string name instance variables private string address int date birthdate int age date void private method public float void age today birthdate float method know age employee compute salary call private method accessing instance variable age 
instance variable age represents transient data calling method external coupled method 
avoid external coupling return computed age return value calling method 
external coupled methods distinguish methods instance variables implemented class implemented classes superclass define coupling method method inherited external ffl implemented defined exchange data instance variables inherited explicit parameters 
kind coupling particularly occurs class information inherited external coupled methods 
ffl implemented defined communicate public instance variables inherited superclass subclass obvious inherited external coupling methods worse external coupling methods complicates maintenance 
inherited variables directly accessed inherited external coupling uses instance variables pass transient data breaks encapsulation information hiding object class superclasses 
example assume example object class employee subclass person inherits instance variables name birthdate age method 
coupling method defined employee method defined person rated inherited external communicate inherited instance variable age 
coupling worse previous example 

control methods control coupled communicate exclusively parameter passing implies content common external coupled method controls internal logic method 
control inversion worst form control coupling called method determines execution sequence calling method 
control coupling prohibited object oriented concepts 
interaction methods different classes may control coupled 
control coupling avoided change implementation method may cause hidden changes behavior control coupled methods 
control coupling prohibited object oriented paradigm polymorphism dynamic binding aid avoiding control coupling 
passing flag controls method execution polymorphism dynamic binding employed 

stamp methods stamp coupled analogy classical coupling control coupled data structures passed parameters parts data structure suffice 
essence stamp coupling follows method depends externally defined data structure changed data structure changes change influence method 
stamp coupling rephrased object oriented systems exist kinds stamp coupling 
kind stamp coupling similar classical definition stamp coupling 
definition method depends domain parameters 
domain parameter may object class basic data type complex data type type constructors tuple array set 
depending domain parameter basic data values complex data values objects may passed parameters 
complex data value passed parameter stamp coupling occurs parts complex data value suffice 
case analogous classical definition stamp coupling 
objects passed parameters similar problem may occur 
recall object may consist objects 
object called composite object constructed component objects 
investigate question object passed parameter merely components relevant method 
object passed method uses just object components object classify interaction stamp coupled 
object passed parameter call data coupling see 
improve stamp coupling data coupling object replaced components possible particular components necessary 
note rare cases replacement object components may leave extensibility difficult 
situation occurs components object currently needed method object extended additional component component requested object passed parameter change interface necessary 
exist solutions mentioned problem 
example adding new method appropriate parameters just possible solution 
example consider class employee defined additional instance variable sales object class sales statistics instance variable method input parameter employee object 
method take employee object parameter leads stamp coupling value relevant instance variable sales particular employee lead data coupling 
second kind stamp coupling uncovers dependencies method domain instance variables class 
definition instance variables external method 
sight may look strange consider interaction methods instance variables 
leads rules better organization methods 
value instance variable basic data value complex data value object depending domain instance variable 
method directly accesses instance variable needs parts value method changed domain instance variable changed due optimization purposes 
key idea improving kind stamp coupling distinguish methods directly access instance variables internal data structure class methods 
design hide internal data structure possible outside object class methods inside object class 
suggest design read methods write methods called access methods instance variable methods means access variables 
internal data structure object class changed access methods updated 
example consider class matrix methods multiplication 
coupling method multiplication implementation matrix data structure lower method accesses elements matrix access operation higher multiplication directly accesses instance variables 
considering representation matrix changed sparse matrices access methods changed multiplication method 
idea restricting access instance variables explicit access methods new 
advocated important object oriented design guideline realized object oriented languages trellis owl 
note exist design rules area software reuse leading factoring methods object class directly access instance variables class 
increase interaction coupling classes 
trade various design goals designer decide goal prefer case case basis 
take inheritance methods instance variables account 
stamp coupling method inherited instance variables called inherited stamp coupling 
worse stamp coupling method instance variables defined class 
due commonly accepted understanding directly accessing inherited instance variables subclasses breaks encapsulation information hiding 

data methods data coupled communicate parameters parameters relevant 
data coupling best form coupling methods interact 
data coupled methods minimize maintenance effort due great restriction change propagations 

direct coupling theoretical optimum interaction coupling direct coupling methods directly depend object classes interaction coupled 
change method directly demand change method change method object class necessary 
component coupling opposed interaction coupling object classes methods involved component coupling concerns object classes 
component relationship classes defined class domain instance variable class cf 
section 
context component coupling extend notion component define object class component object class appears appears 
domain instance variable 
domain parameter input output method 
domain local variable method 
domain parameter input output method invoked method component coupling reveals coupling class class compile time happen run time component coupled subclass call kind coupling potential coupling 
component coupled potentially component coupled subclasses note component coupling languages smalltalk needs special consideration primitives smalltalk integers booleans object classes practically class component coupled primitives 
primitives stable shouldn care object class component coupled dependent primitives 
course component coupling usually implies interaction coupling 
interaction coupling focused information exchanged methods classes respectively complex information component coupling analyze explicit coupling classes case component relationship realized instance variables 
explicit object oriented languages class level implementation part specification part class definition 
coupling grateful david pointed 
second case explicit specification part class definition specifying signatures methods 
component coupling third case local variables 
explicit method declaration local variables explicit class level 
fourth case worse 
example cascading messages object returned method immediately receiver message 
object class receiver declared actual class 
considerations define degrees component coupling worst highest best lowest 

hidden coupling classes rated hidden shows specification implementation object implementation method give examples situations hidden coupling occur refer cascading message problem stated 
similar problem encountered return value method invocation immediately input parameter method invocation 
languages require class object declared actual class 
hidden coupling causes problems coupling classes implicit 
compare hidden coupling global variables procedure oriented systems responsible common coupling modules 
consider change class maintenance process change signature method 
presence hidden coupling programmer search implementations methods classes detect change may influence change propagated respectively 
possibility avoid hidden coupling disallow cascading messages example suggested implicitly law demeter disallow return values parameters domains declared 
restrictive way overcome hidden coupling declare classes specification part actual class definition 
example consider class employee defined additional instance variable project employee currently working additional method returns number colleagues current project 
implementation may follows int return count coupling classes employee hidden shows specification implementation method count invoked object class object returned method invoked project object referenced instance variable 
improvements implementation terms coupling properties demonstrated examples 

scattered rate classes scattered coupled domain definition local variable instance variable implementation included specification detect component coupled necessary check implementation classes get domains instance variables worse check implementation methods detect domains local variables 
class changed implementations classes checked order discover classes may influenced 
example consider previous example classes employee hidden coupled due implementation method 
implementation may improved disallowing cascading messages follows int return count introducing local variables disallowing cascading messages coupling classes employee improved hidden scattered 

specified rate classes specified coupled included specification component specified coupling overcomes problems hidden scattered coupling specifying related component classes class single place 
possible determine classes coupled browsing implementation 
browsing implementation impossible source code available 
object oriented languages signatures methods provided class shown specification set methods provided called suffered interface classes domains input parameters return values methods ones specified coupled suggest addition suffered interface required interface part specification class 
required interface class comprises classes components specifying methods component classes invoked narrows required interface lowers degree coupling 
example previous example classes employee scattered coupled 
may improve coupling property specified coupling changing specification employee follows class employee suffered interface corresponds public int int required interface available class project int class count exist object oriented specification languages provide mechanisms specify required interface collaborators uses relationship calling relationships invocation diagrams 
know object oriented language modula supports suffered required interface specifications export import declarations module level 

nil theoretical optimum direct component coupling classes interaction coupling 
advantage recognize classes completely independent class maintained knowledge class 
inheritance coupling similar component coupling inheritance coupling concerns object classes 
classes inheritance coupled class direct indirect subclass 
inheritance important features object oriented methods languages 
supports reuse subclassing specialization factoring generalization common information independent classes common superclass 
glance contradictory inheritance gaining better reusability goal low coupling 
key idea resolve contradiction twofold 
firstly inheritance may lower coupling objectoriented system factoring 
class invokes method objects class component coupled method factored common superclass overridden respectively component coupled 
coupling improved number classes coupled reduced 
secondly exist different degrees inheritance coupling 
show lowest degree inheritance coupling coupling coincides better reusability 
furthermore considering inheritance coupling necessary improving quality system implemented 
possible gain interaction component coupling properties sacrificing quality inheritance hierarchy inheritance coupling considered 
inheritance coupling different interaction coupling component coupling exhibit coupling property subclasses superclasses implicitly coupling property interaction coupled object class inheritance hierarchy 
meaning class interaction coupled class root inheritance hierarchy inheritance hierarchy changed subclasses added inherited instance variables methods modified degree inheritance coupling reveals extent changes inheritance hierarchy impose changes detailed discussion interdependencies various coupling dimensions see section 
discuss various degrees inheritance coupling worst highest best lowest 
note assume simplicity loss generality access methods instance variable exist 
change instance variable subclass reflected corresponding change signature implementation access methods 

modification modification coupling worst case inheritance coupling addition defining new information inherited information changed arbitrarily deleted 
depending kind modification distinguish signature modification implementation modification signature modification coupling subclass superclass rated signature modification implementation signature inherited method changed restriction inherited methods deleted relationship pure implementation relationship inheritance solely code reuse 
inheritance hierarchy signature modification difficult maintain extend soon may complex 
counts worse fact impairs polymorphism strong typing interaction related classes 
assume class invokes method object class assume furthermore signature changed subclass arbitrarily 
due polymorphic variables happen run time invokes object class object assumes invocation due signature modification issues run time type error 
conclude inheritance coupling signature modification avoided case 
part class definition class class classes inheritance coupled component coupled instance variable domain instance variable class example consider class stack inheriting class array 
array implement stack internal data structure methods array semantically meaningful stack method array exist stack methods array inherited private deleted suffered public interface stack 
stack array signature modification coupled 
improve coupling definition stack include instance variable domain array inheriting array 
implementation modification coupling subclass superclass rated implementation modification implementation inherited method changed restriction 
degree inheritance coupling better previous signature method changed arbitrarily methods deleted 
implementation modification coupling avoided semantics method may changed completely subclasses semantics methods invoking inherited method may changed implicitly 

refinement refinement coupling better modification coupling addition defining new information inherited information changed due predefined rules 
depending kind refinement distinguish signature refinement implementation refinement signature refinement coupling subclass superclass rated signature refinement modification coupled signature inherited method changed due predefined rule changing intended semantics signature refinement may adhere covariant rule contravariant rule subclassing 
covariant rule domains input parameters return value may replaced subclasses 
contravariant rule domains input parameters may replaced superclasses domain return value may replaced subclass 
general signature refinement covariant style avoided may break polymorphism strong typing interaction related classes 
situations semantics problem domain best described terms inheritance covariant style 
situations polymorphic variables methods avoided avoid run time type errors 
example consider parts definition object class person subclass employee person class person age simplicity assume 
existence enumeration type public void class employee public person age public void employees may active austria subclass employee class person refines signatures inherited access operations age covariant style 
employee person signature refinement coupled covariant style 
implementation refinement coupling subclass superclass rated implementation refinement signatures inherited methods changed implementation inherited method changed due predefined rules intended semantics kept 
kind inheritance coupling necessary implementation inherited method refined subclass 
language features support implementation refinement example super language smalltalk inner language beta daemons language clos 
super changed implementation inherited method invoke method implementation defined superclass 
concept super enforce implementation refinement inner concept daemons enforce 
inner original implementation method specify place code refinement placed compiler 
invoked object subclass refined code code defined superclasses gets executed 
similar holds true daemons 
name suggests may specified subclasses refine implementation superclass 
invoked object subclass daemons get executed original implementation original implementation executed 
original implementation executed daemons get executed reverse order daemons 
note exist object oriented languages eiffel possible change implementation method arbitrarily time refine signature method 
languages exhibit implementation modification coupling signature refinement coupling 

extension inheritance coupling subclass superclass rated extension coupled subclass adds methods instance variables modifies refines inherited ones 
extension coupling best kind inheritance coupling inheritance coupling 
extension coupling achieved superclass semantically generalization subclasses methods superclass invoked objects subclasses inspecting intermediate subclasses 
example assume employee extension coupled subclass person 
methods defined person employee objects checking modified refined definition employee 

nil inheritance relationship classes inheritance coupling rated nil 
interplay coupling dimensions far investigated interaction coupling component coupling inheritance coupling isolation 
subsection reveal interplay coupling dimensions 
particular show means illustrative example additional coupling relationships derived ones transitive method invocations account 
recall interaction coupling component coupling describe similar phenomenon 
interaction coupling reveals kind interaction methods object classes 
component coupling investigates explicit interaction specified 
terms interplay inheritance coupling sufficient choose interaction coupling component coupling investigated detail 
chosen interaction coupling 
interplay interaction coupling inheritance coupling relevant run time 
due inheritance overriding polymorphic variables additional interaction couplings methods object classes respectively derived 
computing derived couplings compile time global analysis code required feasible tedious cumbersome task 
show relevance analysis means example 
precise description problem introduce predicates subclassof invokes 


inheritance relationship interaction relationship 
predicate implements holds class implements method implementation may define new method override inherited method 

predicate isa holds direct subclass predicate isa denotes transitive closure predicate isa denotes transitive reflexive closure isa 

predicate invokes true method implemented invokes method object referenced variable static class defined direct interaction relationship informally section 
give formal definition predicates implements isa invokes 
note icw stands interaction coupled 
predicate icw object class method object class method holds exists class invokes holds implements holds isa holds ii isa holds isa isa hold predicate implements hold 
indirect interaction relationship methods classes holds implemented may invoked method invoked method implemented extend predicate icw respect 
predicate icw holds exists class icw icw hold 
demonstrate applicability usefulness introduced predicates consider example 
depicts inheritance relationships object classes interaction relationships due method invocations 
coupling predicates may deduced summarized table 
predicates derivations implements implements implements implements implements implements gamma invokes gamma invokes gamma isa gamma isa gamma invokes gamma isa gamma invokes implements isa icw gamma invokes implements isa icw gamma invokes implements isa icw gamma coupling gamma invokes isa implements icw gamma invokes isa implements icw gamma coupling gamma coupling gamma coupling gamma icw icw icw gamma 
icw icw icw 
icw icw icw table coupling predicates discuss entry table restrict attention interesting derived coupling reveals interaction coupled method different invocation paths invoking different methods hand interaction coupled case occurs invokes member object consequence implementation class gets executed invokes method class turn 
hand interaction coupled case occurs invokes instance turn invokes member object redefined implementation class gets executed 
lessons learned example twofold 
firstly transitive closure interaction coupling inheritance coupling leads complex graph obvious sight object classes interaction coupled 
secondly due overriding polymorphic variables may occur exist different invocation paths methods 
objects classes may exhibit different run time behavior different times initially method invoked 
summarizing important conduct global analysis classes object oriented system terms coupling properties possible may reveal hidden couplings may cause problems maintaining extending system hand 
cohesion cohesion defined realm procedure oriented systems degree connectivity elements single module 
cohesion recognized important software quality criteria 
modules strong cohesion particular functional cohesion easier maintain furthermore greatly improve possibility reuse 
module strong cohesion represents exactly task problem domain elements contribute single task 
elements module statements subfunctions possibly modules 
recall object oriented counterparts module methods classes 
elements method statements local variables instance variables accessed directly access functions methods 
methods object classes analyzed 
elements object class methods instance variables 
distinguish cohesion method cohesion object class 
distinguish cohesiveness elements directly defined class cohesiveness inherited directly defined elements 
kinds cohesion may defined object oriented systems ffl method cohesion ffl class cohesion ffl inheritance cohesion sequel study cohesion relationships turn 
method cohesion stated realm coupling holds true cohesion 
methods equal modules high degree bracket pieces code implementing functionality adopt various degrees classical cohesion describe method cohesion 
contrast coupling change various notions classical cohesion considerably 
degrees classical cohesion adapted method cohesion summarized worst best 
detailed discussion interested reader referred original 

coincidental elements method common method 

logical elements similar functionality input output handling error handling collected method 

temporal elements method logical cohesion performed time 

procedural elements method connected control flow 

communicational elements method connected control flow operate set data 

sequential elements method communicational cohesion connected sequential control flow 

functional elements method sequential cohesion elements contribute single task problem domain 
functional cohesion best form method cohesion fully supports principle locality minimizes maintenance efforts 
discussion class cohesion inheritance cohesion assume methods functional cohesion 
reason order determine class inheritance cohesion investigate relationship methods instance variables 
low cohesive methods access instance variables fake high degree class inheritance cohesion 
class cohesion class cohesion describes binding elements defined object class considering inherited instance variables inherited methods 
ignoring inheritance object class resembles data type cohesion data types analyzed detail embley build classification various degrees class cohesion redefine definitions object oriented systems 
data types procedure oriented systems provide functionality data types modules data types 
contrast code object oriented systems general method bound class 
procedure oriented systems data types argue functionality factor data types object oriented systems consider methods assigned classes 
crucial difference data types notion embley classes implied concept object identity 
single data type export different domains object class describes exactly set objects object uniquely identified system defined object identifier 
depending cohesiveness class objects represent single semantic meaningful data abstraction related data abstractions 
discuss various degrees class cohesion worst lowest best highest 

separable cohesion class rated separable objects represent multiple unrelated data abstractions combined object 
case instance variables methods class partitioned sets method set uses instance variables invokes methods different set 
particular cohesion object class rated separable method access instance variable invokes method class instance variable referenced class methods 
class separable cohesion split classes representing single data abstraction single semantic concept 
example consider object class employee defined extension class employee int method takes projects input parameter computes accumulated revenue 
accesses instance variable employee invoke method employee 
cohesion employee separable strength 
improve cohesion method factored different object class class 
note syntactical criteria partitioning object class disjunctive sets instance variables methods detect separable cohesion useful aid applicable cases 
example definition object class consists solely instance variables access methods object class syntactically partitioned disjunctive subsets represents single semantic concept 
contrarily method print defined prints values instance variables pure syntactical analysis classify cohesion class separable combine unrelated data abstractions 

multifaceted cohesion class rated multifaceted objects represent multiple related data abstractions accessed method 
separable cohesion detected syntactical analysis class definition 
multifaceted cohesion look semantics class elements 
similar separable cohesive classes multifaceted class covers different semantic concepts 
method instance variables invokes methods different semantic concepts cohesion corresponding class rated separable 
semantic analysis necessary determining multifaceted cohesion 
known data modeling concepts formed entity relationship modeling data normalization may purpose 
able apply data normalization theory adapt definition multifaceted cohesion follows 
cohesion class rated multifaceted set instance variables class interpreted relation schema second normal form 
put words instance variables describe ore semantic concepts 
dependent part user defined key 
separable method defined instance variables exists 
multifaceted class split classes representing exactly semantic concept set instance variables second normal form instance variable moved class referenced instance variable 
method leads multifaceted cohesion assigned possibly reimplemented newly created classes 
depends problem domain class method assigned 
example consider object class reorder class reorder item int discount int quantity public bool method computes revenue expected determining difference price item discount multiplying difference quantity reordered item 
interpret set instance variables attributes relation schema attributes form key relation schema 
assume discount depends items 
second normal form violated 
definition reorder multifaceted cohesion 
improve cohesion instance variable discount moved class class string name real discount public real discount 
non delegated cohesion class rated non delegated separable multifaceted method uses instance variables describe component respective class 
may data normalization theory detect non delegated cohesion analysis multifaceted cohesion 
purpose adapt definition non delegated cohesion follows 
cohesion object class rated non delegated set instance variables interpreted relation schema third normal form 
put words exist instance variables describe data abstraction represented class component 
overcome non delegated cohesion non delegated methods instance variables delegated component classes defined 
example consider object class employee class employee string name date birthdate project employee public float bool interpret set instance variables attributes relation schema attribute name key relation schema 
attributes birthdate depend directly attribute name 
attribute depends directly project referenced transitively name third normal form violated 
definition employee non delegated cohesion 
improve cohesion instance variable method delegated object class project class project employee date date public bool unfortunately obvious example place methods 
placement methods raises questions concerning visibility possible invocation methods 
method delegated component class mainly uses instance variables component class consider method visible clients inspected class class consideration 
way organize invocation delegated method clients inspected class receive handle component object able directly invoke method component object 
solution desirable means inspected class exhibits parts implementation components 
furthermore solution may increase number classes clients inspected class interact 
component coupling client class component class may worse 
possibility organize invocation components methods hide component structure completely client classes access methods component classes called propagation methods inspected class 
solution recommended law demeter lieberherr 
law states method class may invoke methods classes domains instance variables domains input parameters objects newly created may receivers messages 
essentially law prohibits method invocation objects returned method 
goal law demeter decrease coupling different object classes restricting object classes specific class may communicate 
decrease component coupling traded increase interaction coupling client classes inspected class inspected class component class respectively 
method component class visible client class propagation method implemented inspected class 
client class calls propagation method calls corresponding method component class turn 
increase interaction coupling propagation methods introduce tramp data data passed client class inspected class component class inspected class 
tramp data increases interaction coupling client class inspected class change definition data implies change inspected class data 
sight exists contradiction law demeter goal avoid non delegated cohesion 
introduces propagation methods non delegated methods reduce component coupling factors non delegated methods component classes increase class cohesion side effect reduce interaction coupling 
solution overcome dilemma consider situation semantic point view 
component structure describes relationship conceptually different objects revealed semantic data modeling favorable reveal component hierarchy order avoid propagation methods tramp data 
component structure mainly implementation detail solution propagation methods appropriate 

concealed cohesion class rated concealed separable multifaceted non delegated cohesion exists useful data abstraction concealed data abstraction represented class 
modules concealed cohesion resembles piece inline code factored subroutine function 
analogy class concealed cohesion includes instances variables referencing methods may regarded class 
factoring parts advantages 
firstly structure inspected class intuitive concise increasing class cohesion 
secondly permits new class reused component classes 
factoring concealed class implies instance variables factored replaced instance variable referencing object new class 
methods inspected class referencing factored instance variables factored 
methods decide place new class leave inspected class discussion non delegated cohesion 
example consider object class employee instance variables name 
instance variables describing various dates may factored new class date instance variables day month year 
respective instance variables class employee replaced instance variables birthdate 
candidates new classes hand instance variables complex domains hand sets instance variables methods rarely instance variables 
kind cluster analysis may exhibit candidates 
creating new class keep mind class best cohesion characteristic possible 

model model cohesion highest degree classification 
cohesion class rated model class represents single semantically meaningful concept containing methods delegated classes containing concealed classes 
interesting note semantically similar notion informational strength defined myers realm module oriented systems 
module interpreted implementation data type 
classical function oriented notion cohesion bit myers defines module informational strength functions functional cohesion set data 
inheritance cohesion class cohesion inspects binding newly defined elements class inheritance cohesion takes inheritance hierarchy account 
describes binding newly defined elements inherited elements 
transitively inherited direct indirect superclasses inheritance cohesion evaluates cohesion immediate class superclass relationship inspects inheritance hierarchy 
inheritance cohesion strong hierarchy generalization hierarchy sense conceptual modeling weak inheritance hierarchy merely code sharing unrelated classes 
aim newly defined subclass exhibit single semantic concept may classification inheritance cohesion defined class cohesion 
outlook introduced comprehensive taxonomy coupling cohesion characteristics object oriented systems 
contrast classical notion coupling cohesion single concept module subjects interest methods object classes realm object oriented systems 
addition important concept inheritance considerably influencing structure objectoriented system taken account 
leads interrelated dimensions coupling cohesion respectively interaction coupling component coupling inheritance coupling method cohesion class cohesion inheritance cohesion 
goal define qualitative criteria coupling cohesion improve quality object oriented systems 
deliberately aim metrics quantitative criteria 
reason aspects important 
firm belief current state art object oriented quality assessment important uncover various aspects quality criteria 
criteria commonly accepted metrics automatic quality assessors may developed 
furthermore deals coupling cohesion properties 
software quality depend exclusively properties various factors method fan fan reuse inheritance polymorphism mention just 
reach comprehensive assessment software quality factors considered 
case conflicting goals individual problem dependent decisions taken 
take performance considerations account defining various degrees coupling cohesion 
reason coupling cohesion criteria evaluating object oriented designs place 
designs may tuned implementation performance reasons 
research expands mainly areas 
firstly comprehensive analysis existing object oriented design guidelines concerning influence coupling cohesion quality help unifying consolidating various approaches designs 
secondly soon common understanding coupling cohesion characteristics reached tools partially automatic assessment coupling cohesion properties developed 
confidence tools aid designing object oriented software useful means searching class libraries identifying related object classes 
lastly long term goal comprises investigation quality criteria object oriented systems interdependencies coupling cohesion characteristics defined 
authors grateful dieter merkl roland david georg valuable comments earlier versions 
normalization object oriented conceptual schemes proceedings conference advanced information systems engineering caise ed 
rolland bodart pp 
springer lncs 
automated quality assessor ada object oriented designs proc 
th ieee national aerospace electronics conference vol 
pp 
piscataway 
essays object oriented software engineering vol prentice hall 
boehm brown quantitative evaluation software quality ieee nd international conference software engineering pp 

booch object oriented analysis design applications nd edition benjamin cummings 
budd object oriented programming addison wesley 
cardelli semantics multiple inheritance journal information computation vol 
pp 

cardelli modula language definition acm sigplan notices vol 
pp 
august 
chidamber kemerer metric suite object oriented design object oriented programming systems languages applications oopsla special issue sigplan notices vol 
oct 
chidamber kemerer metric suite object oriented design ieee transactions software engineering vol 
pp 
june 
coad yourdon object oriented design prentice hall 
date relational database selected writings addison wesley 
ellis stroustrup annotated manual addisonwesley 
embley cohesion coupling data types th international phoenix conference computers communications pp 
ieee computer society press arizona 
embley assessing quality data types written ada international conference software engineering pp 
ieee computer society press 
engels kappel object oriented systems development new approach solve old problems proceedings ifip world congress vol iii ed 
duncan krueger north holland 
goldberg smalltalk interactive programming environment addison wesley 
henderson sellers harrison workshop report pragmatic theoretical directions object oriented software metrics oopsla oops messenger vol 
pp 
october 
hitz measuring product attributes object oriented systems european software engineering conference esec sept appear 
hong class normalization approach design object oriented databases proc tools usa technology object oriented languages systems pp 

hood working group hood hierarchical object oriented design user manual issue european space agency sept 
jean experience teaching ood ada software acm sigsoft software engineering notes vol 
pp 
oct 
johnson foote designing reusable classes journal objectoriented programming vol 
pp 

saake hartmann sernadas troll language object oriented specification information systems acm transactions information systems appear 
kappel object behavior diagrams proceedings th international conference data engineering pp 
ieee computer society press kobe japan april 
kappel process model object oriented development technical report mood workshop objectoriented software development process ecoop utrecht july 
keene object oriented programming common lisp programmers guide common lisp object system addison wesley 
korson mcgregor understanding object oriented unifying paradigm communications acm vol 
pp 

lehrmann madsen ller pedersen nygaard object oriented programming beta programming language addison wesley 
lieberherr holland object oriented programming objective sense style object oriented programming systems languages applications oopsla special issue sigplan notices ed 
meyrowitz vol 
pp 
nov 
lieberherr holland assuring style object oriented programming ieee software pp 
sept 
lieberherr xiao formal foundations object oriented data modeling ieee transactions knowledge data engineering vol 
pp 
june 
lieberherr silva xiao adaptive object oriented programming graph customization communications acm cacm vol 
pp 
may 
liskov wing new definition subtype relation proc th european conference object oriented programming ecoop ed 
nierstrasz pp 
springer lncs kaiserslautern 
markowitz shoshani correctness representing extended er structures relational model proceedings acm sigmod int 
conf 
management data pp 
portland 
merkl tjoa kappel structuring library reusable software components artificial neural network proc nd international conference achieving quality software venice oct 
meyer object oriented software construction prentice hall 
meyer tools new culture lessons design eiffel class library communications acm vol 
pp 

meyer eiffel language prentice hall 
design aspects supporting software reuse software reuse ed 
hall pp 
springer 
moreau object oriented graphical information systems research plan evaluation metrics journal systems software vol 
pp 

moreau programming environment evaluation methodology object oriented systems part methodology journal object oriented programming pp 
may june 
moreau programming environment evaluation methodology object oriented systems part ii test case applications journal object oriented programming pp 
september oct 
myers composite structured design van nostrand reinhold 
nielsen task coupling cohesion ada ada letters vol 
pp 
july august 
nierstrasz survey object oriented concepts object oriented concepts databases applications ed 
kim lochovsky pp 
acm press addison wesley 
nierstrasz gibbs tsichritzis component oriented software development communications acm vol 
pp 

page jones practical guide structured systems development yourdon press 
page jones comparing techniques means encapsulation communications acm vol 
pp 
sept 
smalltalk methodological approach software quality proc 
esprit putting technology pp 
north holland 
schaffert trellis owl object oriented programming systems languages applications oopsla special issue sigplan notices ed 
meyrowitz vol 
pp 
dec 
snyder inheritance development encapsulated software components research directions object oriented programming ed 
shriver wegner pp 
mit press 
stevens myers constantine structured design ibm systems journal vol 
pp 

kappel und fur software bericht des gi workshops software magdeburg brd sept 
software complexity model object oriented systems journal decision support systems 
wegner dimensions object language design object oriented programming systems languages applications oopsla special issue sigplan notices vol 
pp 
dez 

wirfs brock wilkerson variables limit reusability journal object oriented programming pp 
may june 
wirfs brock wilkerson wiener designing object oriented software prentice hall 
yourdon constantine structured design prentice hall 
