design implementation runtime re ection communication middleware dynamictao case manuel rom fabio kon roy campbell department computer science university illinois urbana champaign kon rhc cs uiuc edu choices cs uiuc edu dynamictao communication middleware systems provide solid basis construction distributed applications 
unfortunately usually lack mechanisms runtime recon guration 
performance distributed applications greatly ected dynamic changes characteristics environment memory cpu network availability 
existing communication middleware react front changes 
times applications knowledge decide front environmental change knowledge middleware allow recon guration 
developed dynamictao corba compliant re ective orb supports runtime recon guration 
dynamictao maintains explicit representation internal structure uses carry dynamic customization safely 

dynamic recon guration important long running applications environmental conditions change rapidly 
cases feasible application customize system restart 
achieving best results applications underlying middleware continuously tuned adapt changes environment 
existing middleware research supported national science foundation nsf 
manuel rom supported fulbright ramon foundation 
fabio kon supported part capes brazilian research agency proc 
support dynamic recon guration customization limiting application performance manageability robustness mechanisms provided middleware 
customization support available typically limited static customization 
possible choose variety mechanisms application built design time customization started start time customization 
consider example mobile computer moves lan wireless environment 
result available bandwidth error characteristics change signi cantly 
ideally middleware adopt bandwidth conserving mechanisms compressing requests trading cpu bandwidth 
re ection techniques possible create middleware layer adapt environmental changes 
applications optimized protocols policies having adapt 
adaptation pushed supporting middleware 
contents 
provide detailed explanation re ective orb section 
section discusses system architecture section dynamic con guration mechanism section consistency preservation section security safety section 
section describes bene ts automatic recon guration provides example 
discuss related section section conclude section 
dynamictao con gurable middleware infrastructure implemented re ective orb 
implementing new orb scratch opted tao developed washington university saint louis starting point 
tao uses strategy design pattern encapsulate di erent aspects orb internal engine 
uses strategies aspects concurrency request demultiplexing scheduling connection management 
orb obtains strategies selected factories 
tao primarily targeted avionics hard real time systems environment parameters known priori 
tao customized di erent kinds applications con guration le 
static customization done startup time 
noted wide range applications ected dynamic changes environment memory availability network bandwidth cpu load 
performance applications running mobile devices dealing multimedia distributed parallel computing improved greatly di erent strategies di erent environmental conditions 
dynamictao supports recon guration assuring orb engine kept consistent 
achieved reifying dynamictao internal structure keeping explicit representation orb internal components dynamic interactions 
rei cation allows orb change speci strategies having restart execution 

architecture rei cation dynamictao achieved collection entities known component con 
component con holds dependencies certain component system components 
process running dynamictao orb contains component con instance called 
responsible maintaining instances orb servants running process 
addition instance orb contains customized component con called 
contains hooks implementations dynamictao strategies attached 
hooks mounting points servant configurator process boundary servant configurator 

reifying dynamictao structure 
speci strategy implementations available orb 
illustrates rei cation mechanism process containing single instance orb 
necessary individual strategies component con store dependencies orb instances strategies 
con may store client requests depend strategies 
information possible manage strategy recon guration consistently explain section 
component implementations packed dynamically loadable libraries linked orb process runtime 
organized categories representing di erent aspects orb internal engine associated dynamictao hooks di erent types servant components 
implementations intend support category type checking ansi runtime type information rtti 
dynamictao architectural framework depicted gure 
persistent repository stores category implementations 
ers methods manipulating browsing creating deleting categories implementations category 
network broker receives recon guration requests network forwards dynamic service con 
contains shown gure supplies common operations dynamic con gu local file system ace service repository ace service config network broker persistent repository administration panel dynamic service configurator process boundary data command flow servant configurator 
dynamictao components 
ration components runtime 
delegates functions speci component con certain 

dynamic configuration dynamic service con exports corba idl interface remote local objects con gure components registered 
shows idl interface 
allow non corba applications recon gure system dynamic service con ers interface 
light weight socket network broker ers functionality idl interface 
interface speci es operations performed implementations categories hooks con gurable components orb servants 
rst operations interface inspect dynamic structure domain retrieve information di erent abstractions 
load implementation dynamically loads starts implementation persistent repository hook implementation attaches hook components domain 
methods allow operations loaded implementations 
upload implementation allows external entity send implementation code stored local persistent repository 
interface typedef sequence typedef sequence list loaded implementations list categories list implementations string get usage string string get impl info string string get comp info string string get hooked implementation string string list domain components list hooks string string get hooked comp string string short load implementation string string string params void hook implementation string string string void suspend implementation string void resume implementation string void remove implementation string void configure implementation string string void upload implementation string string void delete implementation string 
interface delete implementation delete implementations stored orb persistent repository 

orb consistency goal minimal orb core running orb strategies servants dynamically updated 
supporting orb recon guration introduces important issues exist dealing static startup con guration 
changing implementation runtime implies checking possible dependencies loaded implementations category dependencies clients old implementations nally con icts implementations category running orbs 
initial state new strategy may depend nal state old strategy going replaced 
recon guration operations executed immediately execution leave state orb inconsistent 
rest section provides speci details consistency issues related dynam switching strategy deleting strategy con operations 
aspects controlled orb remains stable operation completes 
changing strategy implies steps 
check new strategy implementation compatible remaining implementations 
implies checking strategies running orb cases strategies category orbs 
possible changing implementation certain orb requires changing implementations remote orbs implementations part distributed protocol 
second implementation may need transfer state new going replace 
consider changes strategy implementation ect client requests processed 
greatly depends category implementation 
case marshalling unmarshalling strategies example changes immediately ect subsequent request 
case concurrency strategies changing implementation ects new clients 
example switching thread pool strategy concurrency strategy requires special care 
code strategy replaced immediately unloaded 
true time request completed associated thread returns thread pool code thread pool memory 
problem solved keeping information threads currently processing client requests destroying connections complete 
thread destroyed thread pool strategy unloaded 
problem occurs replaces thread pool strategy 
may incoming connection requests enqueued strategy waiting thread take 
solution memento pattern encapsulate old strategy state object passed new strategy 
cases possible replace remove strategy existing clients 
solution adopted keep di erent implementations strategy loaded orb time 
old clients old strategies new clients new 
keep counter strategy garbage collection get rid old strategies longer 
dynamictao ers version control allow having di erent implementations category loaded memory time 
time component implementation loaded dynamictao assigns version number 
implementation referenced concatenating name component category version number generated dynamictao version number verify newest implementation speci category 
entities older implementations confusion 

security safety allowing remote con guration re ective orbs address issues security safety carefully 
security refers mechanisms applied identify principals want modify orb safety implies new code attached orb capable crashing 
controlling access critical factor determining security applications infrastructure 
modifying con guration dynamictao servants malicious intruder easily compromise correctness application get access classi ed information protected resources 
operations list domain components get info may available broad group trusted principals 
operations load implementation hook implementation restricted limited group principals administration privileges application system 
corba security service control access sensitive operations requiring authentication 
encrypt parameters sent method invocations socket network broker security controlled ssl authenticate principals encrypt message contents 
possible authenticate principal con guration interface guarantees implementation new strategy new servant run safely crash entire orb 
trusted principal note dynamictao change security policies bringing additional exibility security service 
hook faulty implementation crash orb 
order support safety extended dynamictao enable execution java code inside implemented jvm 
component provided limited access orb system services 
component crashes ect orb components 
jvm example safe execution environment mobile agents care orb recon guration implementing exible security policies active capabilities 
created component containing sun java virtual machine dynamically loaded attached 
servant orb component wishing run java code obtain jvm contacting 

automatic recon guration automatic recon guration comprises set mechanisms monitor behavior orb trigger modi cations needed 
bene ts automatic recon guration classi ed major categories optimization customization error recovery 
optimization aims providing best performance conditions running components 
achieved analyzing environmental conditions applying heuristics decide recon guration 
customization concerned critical changes environment software hardware 
optimization allows component run faster customization allows component new environment allows component manageability 
example user inserts pcmcia card laptop extra hardware capabilities added mobile computer 
aware changes available hardware resources applications utilize di erent algorithms policies protocols suitable new environment 
error recovery comprises detecting faulty behavior replacing faulty components improving robustness 
dynamictao maintains explicit representation internal structure easier replace component malfunction detected 
mobile computer connected ethernet lan may automatically detect wired connection broken 
system switch radio connection 
case pro table dynamically load new communication strategy optimized di erent characteristics wireless connections 

related limitations existing corba implementations led corba extensions dealing speci aspects real time group communication fault tolerance 
goal provide generic infrastructure different kinds customization performed 
research groups addressed problem middleware customization di erent approaches 
aspectix open exible architecture adds exibility corba 
extends orb interface ering means dynamic recon guration 
fragmented object model client interacts fragment global object fragment implementation interface fragment interface global object con gured pro les turn specify aspects supported fragment implementations 
aspect speci semantics associated 
aspects compared dynamictao category implementations di erence dynamictao implementations added aspectix aspects 
fragment implementation support speci ed aspect fragment containing aspects replaced 
distributed adaptive run time dart provides framework applications modify internal behavior behavior services 
dart ers set services facilitate development distributed applications 
distinguishes internal application adaptation adaptive methods adaptation application environment re ective methods 
case adaptive methods applications er implementations methods 
special entity called selector chooses ective invocation 
turn re ective methods allow adaptation runtime environment 
calling re ective method call redirected set meta level objects manage run time services 
dart manager compared dynamictao stores adaptation information applications policies 
recon guration triggered controlled events maintain consistency 
entities known policies knowledge required recon gure applications 
policies dart manager access applications meta objects associated 
comera com extensible remote architecture provides framework microsoft com allows users modify aspects communication middleware run time 
relies custom interface exported com architecture design allows user speci ed components 

ongoing research group currently developing distributed operating system ers integrated architecture adaptation change fundamental premise adaptability fundamental goal 
project investigates creation generic framework development adaptive applications re ective orb described 
part ongoing dynamictao extending set orb aspects subject re ection 
plan implement category type checking support strong exible security produce minimal orbs run pdas embedded systems 

communication middleware proved helpful tool implementing distributed applications 
main drawback lack mechanisms modify implementation dynamically 
recon guration allows applications run different environments highly optimized manner 
developed re ective orb architecture possible safely change behavior middleware runtime 
allows tighter integration re ective orb applications running top 
part ongoing extending aspects dynamictao orb engine subject re ection 
infrastructure development adaptive applications 
acknowledgment 
authors ashish comments 
gamma helm johnson vlissides 
design patterns elements objectoriented software 
addison wesley 
harrison levine schmidt 
design performance realtime corba object event service 
proceedings oopsla 
acm october 
hauck becker geier meier 
aspectix aspect oriented corba compliant orb architecture 
proceedings ifip international conference distributed systems platforms open distributed processing middleware september 
kon campbell 
supporting automatic con guration component distributed systems 
proceeedings th usenix conference object oriented technologies systems coots san diego ca may 
kon campbell carvalho moore ballesteros 
re ective component operating system rapidly changing environments 
proceedings ecoop workshop re ective objectoriented programming systems brussels belgium july 
ma eis 
adding group communication fault tolerance corba 
proceedings usenix conference object oriented technologies 
usenix association june 
ma eis schmidt 
constructing reliable distributed communication systems corba 
ieee communications magazine february 
qian campbell 
dynamic agent security architecture mobile computers 
proceedings international conference parallel distributed computing networks australia december 

lea 
dart distributed adaptive run time 
proceedings ifip international conference distributed systems platforms open distributed processing middleware september 
schmidt 
applying patterns develop extensible orb middleware 
ieee communications magazine 
appear available www cs wustl edu schmidt ace papers html 
sane campbell 
re ective orbs supporting robust time critical distribution 
ecoop workshop re ective real time object oriented systems june 
sane campbell 
middleware 
proceedings ieee international conference distributed computing systems icdcs may 
wang 
lee 
comera com extensible remoting architecture 
proceedings th conference object oriented technologies systems coots 
usenix april 
