copying collector daniel daniel cis ucsc edu ira pohl pohl cis ucsc edu center computer information sciences university california santa cruz ca february garbage collection extremely useful programming language feature currently absent 
benefits garbage collection include convenience safety programmer responsible freeing dynamically allocated storage 
reclamation schemes improve efficiency compacting objects memory improving locality reducing paging 
reclamation techniques efficient manual reclamation important classes data structures 
presents copying collector supports polymorphism require indirection object table 
memory reclamation scheme philosophically consistent design goals programming language penalized features 
report includes performance measurements prototype implementation 
garbage collection gc programming environment feature removes programmer responsibility freeing dynamically allocated storage 
fundamental component lisp smalltalk system 
garbage collection provided imperative object oriented languages eiffel mey modula cdg 
widespread belief community gc useful beneficial 
superficially valid reasons gc part desirable feature ep 
consensus kind garbage collection appropriate 
alternatives include conservative collection bw partially conservative collection bar bar non conservative copying mark collection ede 
examine alternatives copying collector 
section explains garbage collection difficult problem 
section considers related 
section introduces copying collector 
section discusses efficiency appears proc 
usenix conference april washington dc usa 
system section concludes advantages limitations system 
difficulty gc garbage collection works garbage collector scans program global state searching pointers dynamically allocated objects 
entails examining stack registers global data 
time collector locates pointer traces data structure reachable pointer 
object reachable pointer live 
unreachable dynamically allocated objects garbage deallocated 
mark sweep garbage collection object marked visited 
accessible objects marked sweep phase visits objects deallocates unmarked ones 
copying garbage collection bak lh fy ung object visited copied new memory space 
traversal old memory space recycled en masse 
garbage collectors face main problems locating global pointer locating pointer object 
alternatives traditional garbage collection schemes tagged pointers 
collector examines value stack example tag indicates value pointer integer 
pointers inside objects tagged 
solves problems identified previous section 
unfortunately gc proponents tags inconsistent philosophy 
tagged integers reduced range lower efficiency require hardware support 
data standard libraries tagged reducing efficiency penalizing users language 
alternatively objects may allocated segregated memory pools integers allocated pools 
model pointer 
pointers collected objects precisely identifiable values 
added level indirection reduces efficiency integer arithmetic unacceptable solution 
object table pointers precisely identifiable exactly direct pointers table 
pointers programmer manipulates indirect object table 
objects motion affect application 
solution adds level indirection pointer dereference 
ungar eliminating object table smalltalk system improved efficiency dramatically ung 
object table implementation garbage collection yield satisfactory efficiency 
alternative conservative collection 
technique need differentiate pointers integers 
quantity pointer assumed pointer 
conservative collectors normally move objects 
type collection described 
choice discuss garbage collection pointer tracking 
forms basis collector described 
related conservative collection simplest way accomplish automatic storage reclamation general programs conservative garbage collection bw 
conservative gc requires virtually compiler support 
variation traditional mark sweep storage reclamation differentiate pointers integers 
allocation request satisfied due insufficient free storage memory allocator invokes reclamation pass 
mark trace phase collector examines stack registers global data searching values refer dynamically allocated objects 
value may pointer integer type data interpreted pointer 
perceived pointers constitute roots garbage collection 
objects marked 
marked object conservatively scanned possible pointers 
perceived pointers followed objects marked objects pointers examine 
marked objects superset actual reachable data 
mark phase collector examines dynamically allocated object 
unmarked object deallocated 
memory allocators mark sweep collection add header footer allocated object containing actual size memory block 
pointer dynamically allocated object allocator determine size memory block knu 
advantage conservative collection require compiler assistance 
integers look pointers retains inaccessible storage 
conservative collection precludes compaction pointers altered 
partially conservative garbage collection bartlett describes garbage collector conservative stack copying free store bar 
collector intended primarily scheme adapted programs 
allocator allocates memory consecutive uniform size chunks memory called pages page size unrelated hardware page size 
pages assigned spaces page space indicated associated space identifier 
special spaces current space space fulfill roles space space standard copying collector algorithm 
collection moves live objects current space space sets current space equal space 
page space equal current space space currently free 
algorithm garbage collects half free store pages 
space set current space plus modulo large number 
living objects copied pages labeled space value 
initially collector conservatively scans stack registers appropriate global data looking roots 
conservative garbage collection algorithms assumes value stack pointer pointer 
referent root moved root integer 
objects moved current space space having space identifiers associated pages set space value 
finding roots collector scans promoted objects looking pointers objects current space 
scan conservative 
scheme collector uses tags identify pointers collector requires programmer provide function locate pointers 
object current space compactly copied space 
forwarding pointer left old copy pointer led object updated new address 
garbage collection complete objects space scanned pointers current space 
algorithm moved copied living objects sets current space space resumes interrupted allocation request 
collector originally non generational intended scheme bartlett added generations support bar 
generations implemented page counters 
collect objects user provides function identify internal pointers 
collection collector calls function get offsets internal pointers 
traverses internal pointers copies objects 
described bar collector consider fact pointer may point derived class object 
support flavor polymorphism 
copying collector problems implementing gc identifying global pointers identifying pointers objects 
flavor polymorphism compounds problems allowing pointer particular static type point objects different dynamic types 
complete solution address solve problems context polymorphic type hierarchies 
scheme described section compatible existing code libraries efficient encapsulated fully consistent flavor polymorphism 
type accurate hd meaning value interprets pointer statically typed pointer 
contrasts conservative collection interprets integers pointers 
copy collector characteristics 
ffl system modular encapsulated flexible 
application may communicate memory manager configure appropriately 
number collectors allocators exist concurrently application disjoint data structures 
ffl allocator fast 
allocation requests compile inline vax instructions executed common case 
supports chunks 
ffl collector copying collector collects compacts pass 
ffl components small simple efficient 
cases efficient standard manual memory allocator global new delete operators malloc free 
prototype collector implemented application code outside compiler 
implementation compiler underway 
system consists components memory allocator gc related members collected types example overloaded new delete operators smart pointer str types 
memory allocator strategy allocator fast block allocation scheme described app 
uses variation supports spaces 
chunk large block allocator satisfies allocation requests 
space linked list chunks 
active space currently satisfying allocation requests known space 
chunk exhausted allocator may collection obtain new chunk continue allocating 
allocator chooses policy decision outside scope 
allocator encapsulated class called 
common term malloc preclude confusion ansi ame library routine name 
discussion noun allocator denotes instance class 
individual objects individually freed dynamically allocated blocks headers 
entire space deallocated returning chunks low level allocator 
allocator constructed function pointer collection routine 
runs space takes steps 
flip allocating new space 
invoke garbage collection calling gc function pointer return 
free old space 
resume interrupted allocation request 
transparent application programmer 
allocator static member base class collected data structure 
overloaded new operator class obtains memory 
implementation allocator implementations differ detect current chunk exhausted 
performs explicit bound check allocation 
uses virtual memory protection suggested appel app avoid explicit test 
write protects page chunk allocates write fault occurs 
writes object force fault 
versions allocator respectively called testing version faulting version 
experiments reported ede show cases write faulting efficient justify added complexity 
locating pointers root data structure pointer stack register global data 
collector uses auxiliary data structures track roots 
prototype implementation roots data structure class objects parameterized type behave smart pointers str 
nodes type roots type example programmer currently manipulate local variables type node objects type node 
collector implemented compiler programmer appear normal pointers smart pointers generated 
root classes currently generated parameterized define macros templates es available 
collector compiler macros templates required 
remainder roots parameterized class objects 
root converted normal pointer type 
dereferenced normal pointer 
roots constructors destructors track lifetimes 
roots collection located data structures 
roots global static variables auto variables 
roots tracked stack 
root created address pushed stack destroyed address popped 
roots particular contained dynamic objects tracked stack 
addresses kept doubly linked list 
generally multiple stacks doubly linked lists created class polymorphic type hierarchy 
fact important discussion omitted clarity 
stackable roots global root created root allocated runtime stack root address pushed stack 
global local roots program traversing stack 
stack implemented ways linked lists arrays 
array implementation separate array root pointers tracks addresses roots 
root construction destruction push pop addresses arrays respectively 
linked list implementation list threaded runtime stack global data non auto roots 
root consists words pointer link 
representative runtime organization shown 
presents single root stack implemented linked list doubly linked roots 
doubly linked roots dynamically allocated roots data structure may lifo lifetimes tracked stack 
collector tracks non stackable foreign roots doubly linked list 
doubly linked list permits deletion list element support non lifo insertion removal 
roots distinct type 
dynamic roots objects type type dr called insert doubly linked list created doubly linked roots 
stacked roots list kind root 
collector find lists 
dynamic objects global data system stack stack root runtime organization copying collector 
linked list implementation root stack shown 
doubly linked roots shown 
copying current implementation requires collected type virtual function 
function copies object stores forwarding pointer old copy 
updates pointer led object object address recursively copies descendents 
sample function shown 
explicit type conversion required function safe necessary reasons explained ede 
object copied pointer led object updated new address 
object derived class type pointer requires conversion derived base 
conversion presence multiple inheritance may change value pointer 
preserve type safety ensure conversion safe overloaded type pointer object 
ensures class node node left right virtual void node void node register node node return done 
new node copy object set forward ptr left left left copy children right right right copy children copy function node type 
static type information available correct pointer conversion 
derived class copy function type pointer lead object 
simple derived class node class shown functions 
collection collector nonincremental copying 
invoked allocator allocation request satisfied 
collector traverses root stacks visits root 
root initiates depth copying collection call root 
collected returns control allocator 
collector scheme attribute collected characteristic object 
contrasts languages modula cdg tracked attribute pointer 
shows necessary members garbage collected type prototype implementation 
demonstrates definition garbage collected type 
programmer manipulate node pointers 
smart pointers type node 
final item coded programmer root pointer member function 
required collection occurs pointers stack updated 
example shown 
macro save constructs root pointer 
unfortunately current implementations cfront prohibit address 
implementation macro class public node node center virtual void node virtual void void node new safe implicit conversion void new conversion needed 
overloaded functions derived node type 
compiler dependent 
member functions directly indirectly cause collections require omitting recommended 
efficiency overview dynamic memory management organization impact code satisfying important efficiency criterion 
code collector efficient 
tests reported compiled optimization enabled processor cfront ultrix compiler 
comparison purposes tests run sun sparcstation running sunos cfront indicated 
analyzing performance individual components examine operations ffl allocating object ffl creating destroying roots stacked doubly linked supplied gc define private static static void gc struct forward forward fa void void fa forward void return fa forward public void operator new return get void operator delete void necessary members collected type 
ffl collecting data structure allocator time measurements shown graph obtained follows 
allocators compared testing version faulting version standard operator new memory allocator malloc 
allocator allocate byte objects shown 
allocation byte initialized object 
fair uninitialized dynamically allocated objects rare 
test repeatedly allocates new objects fixed amount memory obtained 
test run obtain bytes 
custom allocators parameterized internal chunk size 
chunks bytes tested 
timing information obtained wait system call 
times reported user time plus system time 
vertical bars show confidence intervals 
data graph show little difference versions custom allocator 
roughly times faster standard allocator 
faulting allocator chunks slower configurations due overhead handling frequent write faults 
space efficiency context space overhead memory obtained operating system available application 
examination process break allocations indicates space allocator wastes 
unix break unix trademark bell laboratories 
coded application programmer node class node 
required application 
normal constructors destructor node virtual void node invoke parameterized macro define root class root node coded application programmer node node define static data required gc defining garbage collected class 
void node node 
defining garbage collected class member function 
program dynamic storage space limit 
grows higher addresses program obtains memory operating system 
sbrk system call argument zero returns current break changing 
total memory obtained operating system allocator shown 
tests standard allocator roughly space efficient 
general overhead depends request size 
requests equal slightly larger power allocator suffers severe fragmentation obtaining bytes operating system provide bytes application 
objects slightly smaller power overhead small 
roots creating destroying root creating root means allocating constructing pointer variable 
global static variables created program 
efficiency constructing contributes little efficiency program 
critical roots allocated stack including local variables value function parameters function return values struct node sizeof node static heap void operator new size return heap get size void operator delete void char data object allocator tests 
temporaries 
creating pointer stack normally requires instructions decrementing stack pointer initializing root 
stack pointer allocation performed subtraction local variables function 
destroying variable normally requires instructions stack pointer restored normal function return sequence 
replacing pointer root adds instructions maintaining stack initialize root null 
normal pointer variable root pointer component left uninitialized 
root destructor requires instruction 
compilers tests move unnecessary value expression value 
creating initializing destroying root take instructions takes compilers 
figures table show performance root allocation destruction 
table efficiency creating roots compared simple pointers 
operation time create initialize destroy pointers create initialize destroy roots create initialize destroy startup termination function call overhead time pointer time root time predicted creating roots order times expensive creating pointers 
requires machine instructions root required simple pointer 
multiple roots created destroyed multiple local variables type root 
unsophisticated compiler optimize construction destruction 
compiler safely eliminate mov set list head mov restore old list head 
obvious code construct destroy time amount requested test chunks test chunks test chunks fault chunks fault chunks fault chunks new time allocate touch byte requests sparcstation means custom memory allocator fault version uses write faulting avoid test test version explicit bound check roots instructions optimization reduces instructions 
collecting garbage collection pass visits root copies node reachable root 
garbage collection includes processing flip plus deep copy data structure 
flip constant time fast 
deleting space fast tens instructions hundreds 
deeply copying data structure requires virtual function call pointer allocation copy object 
difficult estimate amount time take application defines copy constructor 
calls allocator take instructions fault occurs 
chunks faults rare megabyte copied 
byte objects benchmarked require instructions copy 
objects copied expense significant 
key copying collection wait collect objects died 
way copying fast 
comparison purposes collector benchmarked collecting graph byte nodes sparcstation 
results shown table 
total break expansion mbyte amount requested test chunks test chunks fault chunks fault chunks new total memory allocated sparcstation 
advantages reclaiming dynamically allocated objects difficult 
collector inaccessible memory recycled live objects compacted 
increases programmer productivity removing application programmer responsibility deallocating data 
compaction may reduce paging improve virtual memory performance 
copying collector allocators fix size free store 
allocator closely track actual amount memory required collection chunk 
behavior allocators trivially emulated large chunk size disallowing expansion 
collector demonstrates new way tracking roots data structure 
allocating initializing roots stack frame requires approximately memory simple pointer allocation initialization 
roots initialized uninitialized roots lead errors 
iterative code list traversal roots constructed loop suffers performance penalty scheme 
allocator supplied package fast 
measurements show allocator supplied system faster allocator provided standard libraries 
unsurprising copying collection permits efficient allocation 
table collector efficiency measurements nodes bytes data bytes forwarding pointer bytes data structure gamma nodes requires bytes 
operation time complete sparcstation collect null root chunk data build binary tree gamma nodes build collect tree time copy gamma binary nodes time node minus overhead nodes copied second kbytes copied second limitations problem implementation copying collection objects individually deallocated 
deallocation individual objects destructors called collected objects 
programmer provides collected class destructor surprised destructor invoked 
examining dead objects increases efficiency copying collectors 
explains collection copying collectors proportional number living objects number dead plus living objects 
copying collection preferred seen disadvantage 
disadvantage divergence style 
koenig observed destructors forbidden copy collected objects koe 
system support arrays collected objects supports arrays pointers collected objects 
policy decision objects collected type dynamically allocated 
allows garbage collector avoid checking see object dynamically allocated 
global static object simulated global root object 
non dynamic objects supported cost reduced collection efficiency 
collector scheme working foreign roots 
destructors called collected objects foreign doubly linked root inside object reclaimed copying garbage collection 
collected object contained object root continue exist containing object deallocated 
objects containing foreign roots reclaimed way manually 
prototype system prevent programmer creating dumb pointers 
dumb pointers track lists 
currently enable application programmer prevent creation dumb pointers class 
compiler implementation issue 
summary efficient management dynamic data difficult 
simple cases deallocation safe efficient simple 
reclamation generalized dynamic graph data structures requires edge traversal identify unused blocks 
blocks reused objects scattered memory causing excessive paging unnecessarily large amount backing store 
predominant classes reclamation algorithms mark sweep copying 
normally able recognize pointers collected objects 
sweep collectors take pass mark living objects pass deallocate inaccessible ones 
pass may compact objects 
conservative collectors implemented compiler support 
collectors need differentiate pointers integers 
reclaim inaccessible memory 
copying collector implementation 
collector lists trees dags cyclic graphs 
incorporates fast allocation novel way tracking roots require tagged pointers integers 
collector proportional amount living data objects die highly efficient 
copying collector known author requires tags object table supports polymorphic type hierarchies 
implementation collector requires modifications compiler require assistance programmer 
version compiler require changes language 
collector efficient 
system composed encapsulated data structures making appropriate object oriented imperative programming language 
collector shows way garbage collection efficient non invasive part programming language 
scheme efficiency reclaiming data structure depends exclusively complexity data structure 
system accomplished 
added efficient reasonably convenient automatic storage reclamation 
organization garbage collection remains philosophy language 
developed platform research new techniques algorithms particularly copying collection virtual memory issues 
availability prototype collector publicly available 
robust easy implementation available anonymous ftp 
proposed language changes accomplish gui unclear standardization committee adopt proposal 
longer report describes obtained anonymous ftp ucsc edu 
pub tr ucsc crl ps includes printed copy source code implements prototype 
printed copies technical report available 
write jean mcknight technical librarian center computer engineering information sciences university california santa cruz ca internet jean cis ucsc edu ame ansi standard 
american national standard 
app andrew appel 
garbage collection faster stack allocation 
information processing letters june 
bak baker 
list processing real time serial computer 
communications acm april 
bar joel bartlett 
compacting garbage collection ambiguous roots 
technical report digital equipment western research laboratory palo alto california february 
bar joel bartlett 
copying garbage collection picks generations 
technical report tn dec wrl october 
bw hans juergen boehm mark weiser 
garbage collection uncooperative environment 
software practice experience september 
cdg cardelli donahue glassman jordan kalsow nelson 
modula report 
technical report digital systems research center olivetti research center palo alto ca 
ede daniel 
dynamic storage reclamation 
technical report ucsc crl university california santa cruz june 
thesis 
ep daniel ira pohl 
case garbage collection august 
workshop garbage collection object oriented programming languages conjunction oopsla ecoop 
es margaret ellis bjarne stroustrup 
annotated manual 
addison wesley publishing february 
fy fenichel 
lisp garbage collector virtual memory systems 
communications acm november 
gr adele goldberg david robson 
smalltalk language implementation 
addison wesley publishing reading ma 
gui ron february 
usenet comp lang article re smart pointers stupid people 
hd richard hudson amer diwan 
copying collector modula smalltalk 
private communication 
knu donald knuth 
art computer programming volume 
addison wesley reading mass 
second ed 
koe andrew koenig 
objects reclaimed copying collector destructors 
private communication 
lh henry lieberman carl hewitt 
real time garbage collector lifetimes objects 
communications acm june 
mey bertrand meyer 
object oriented software construction 
prentice hall 
ste guy jr steele 
common lisp language 
digital press burlington ma 
str bjarne stroustrup 
evolution 
usenix workshop proceedings pages santa fe nm november 
usenix association 
ung david ungar 
generation scavenging non disruptive high performance storage reclamation algorithm 
acm sigplan sigsoft symposium practical software development environments pages pittsburgh pa april 
association computing machinery 
ung david michael ungar 
design evaluation high performance smalltalk system 
mit press cambridge ma 
