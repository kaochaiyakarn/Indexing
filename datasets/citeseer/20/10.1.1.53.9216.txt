high level flexible framework implementing multi user user interfaces dewan rajiv choudhary purdue university developed high level flexible framework supporting construction multi user user interfaces 
framework generalized editing interaction model allows users view programs active data concurrently edited multiple users 
consists novel components including refinement uims architecture distributed graphics architecture explicitly addresses multi user interaction abstractions shared active variables interaction variables allow users applications exchange information set default collaboration rules designed keep collaboration awareness low multiuser programs small powerful set primitives overriding rules 
framework allows users dynamically added removed multi user session different users different user interfaces interact application modules interacting particular user execute local workstation programmers incrementally trade automation flexibility 
implemented framework part system called suite 
motivates describes illustrates framework concrete example suite discusses implemented kinds systems compares related discusses shortcomings suggests directions 
categories subject descriptors computer communication networks distributed systems distributed applications distributed databases software engineering tools techniques user interfaces software engineering programming environments interactive programming languages language constructs input output models principles user machine systems human factors informa tion systems applications office automation text processing text editing general terms design human factors languages additional key words phrases computer supported cooperative groupware editing user interface management systems 
modern powerful bitmapped workstations connected high speed networks offer opportunity build interactive programs supporting collaboration multiple possibly geographically dispersed users 
easy imagine variety programs including debugger allowing multiple programmers debug program budget spreadsheet allowing multiple managers balance budget project management tool allowing authors address department computer sciences purdue university lafayette 
research supported part national science foundation iri part software engineering research center purdue university national science foundation industry university cooperative research center nsf 
ecd 
dewan choudhary implementing multi user interfaces different members project team display modify status project program demonstrator allowing users demonstrate program group users browser allowing teacher browse text book group students design tool allowing designers compose design document 
multi user programs potential automating significant amount cooperative carried current organizations 
potential benefits multi user programs known time multi user programs developed far 
reason current lack programs user interfaces difficult implement 
single user user interfaces user interfaces perform interaction tasks displaying data parsing input reporting errors code intensive 
addition perform collaboration tasks dynamically making breaking connections possibly remote users multiplexing input demultiplexing output multiple users informing users input entered users helping users coordinate interaction providing concurrency access control 
result simplest multi user programs person talk program require substantial code 
idea providing high level flexible support implementation user interfaces programs attractive 
idea requires design application independent model multi user interaction high level flexible framework supporting model 
single user user interface design shown single user editing model user interfaces large variety contemporary single user interactive programs including spreadsheets language oriented editors form editors document editors machine language interpreters command interpreters debuggers 
single user user interface generation shown possible design high level flexible framework supporting model 
extended works editing basis high level flexible framework supporting implementation multi user programs 
framework novel concepts user interface architecture supports new user interface architecture refinement user interface architecture distributed graphics architecture adapted explicitly address multi user interaction 
architecture architecture divides interactive program application object defines functional core program uims user interface management system manages user interface program 
addition divides uims multiple dialogue managers manages interaction particular user program 
furthermore distributed graphics architecture allows interactive component dialogue manager execute local host 
shared active variables interaction variables supports new abstractions shared active variables interaction variables allow application objects users communicate 
abstractions extensions existing abstractions supported single user frameworks shared active variable active variable displayed manipulated multiple users interaction variables interaction variable interaction object automatically created user framework dewan choudhary implementing multi user interfaces coupled corresponding interaction variables created users 
incremental collaboration awareness offers default collaboration scheme supporting programs programs completely unaware interacting multiple users 
offers flexible primitives support collaboration opaque programs programs completely override default collaboration scheme 
importantly offers small powerful set constructs controlling different aspects collaboration offer collaboration aware programs intermediate points complete collaboration transparency collaboration 
result allows incrementally trade automation flexibility tailor aspects default collaboration scheme necessary offer desired collaboration scheme 
framework extension single user framework developed part single user suite provides high level flexible support implementing single user editor user interfaces 
implemented framework top single user suite developing new system called multi user suite supporting development multi user editor programs 
focus extensions single user framework supported single user suite 
concrete example multi user suite describe extensions 
describe current extensions single user suite describe subset extensions defines basic framework extensions added 
particular report ongoing works parameterized coupling concurrency control access control undo redo models framework described 
brief description preliminary versions concepts described appeared conference publication 
brief description preliminary version parameterized coupling model 
remainder organized follows 
section describes collaboration functions issues requirements addressed 
section gives overview single user suite 
section major portion 
motivate describe major components design show single user editing system single user suite extended support multi user interaction 
section describes implementation design multi user suite 
section shows suite implement different classes multi user applications 
section compares approach shared window systems related 
section discusses approach extend single user systems editing systems 
section summarizes results discusses potential directions 

collaboration functions issues requirements collaboration functions large number functions performed support multi user interface 
functions presentation control functions need performed support single user interface performed support multi user interface special case 
addition functions performed allow multiple users interface 
refer interaction functions collaboration functions 
address collaboration functions 
assume multi user framework designed extending single user framework called basis supports dewan choudhary implementing multi user interfaces interaction functions 
address specific collaboration functions connecting disconnecting users connecting disconnecting users multi user programs demultiplexing calls directing calls multiple users multiplexing input gathering input multiple users access control allowing authorized users execute command offered multi user program coupling informing user input value entered user concurrency control preventing users entering conflicting input values collaboration awareness user interface displaying information offering commands allow users coordinate activities forking programs invoking single user multi user programs multi user session 
complete list collaboration functions subject research 
important collaboration functions scope multi user undo redo multi user multi media support 
collaboration issues important issues arise design framework supporting collaboration functions multi user program basis kind single user framework basis multi user framework 
multi user architecture kind architecture supported framework 
specifically kind modules supported framework processes execute hosts distributed system execute environments 
multi user abstractions kind data structures supported allow users programs communicate 
multi user programming user interface kind programming user interface provided allow programs users respectively manipulate abstractions 
collaboration requirements approaches resolving issues 
instance possible basis variety single user frameworks ranging low level window systems high level editing systems workspaces 
important identify set collaboration requirements resolve design choices 
identified collaboration requirements experience developing variety multi user programs term environment refer properties display printer search paths user session maintained operating system inherited programs invoked session 
precise definition term relative underlying operating system 
multi user suite implemented unix operating system uses unix definition term 
dewan choudhary implementing multi user interfaces dynamic binding framework allow user dynamically added removed multiuser session created multi user program allowing busy users participate multi user session phases needed 
user interface independence framework allow different users program different user interfaces interact program 
particular allow users see different screen images allowing instance scroll different parts document different access rights supporting roles different sets locks supporting concurrency control interact different environments allowing users different workstations file systems collaborate 
concurrent scheduling framework allow modules interacting different users scheduled independently preventing modules starving allowing execute concurrently multiprocessor 
error independence local user interface error execution erroneous command results shared users cause failures connections users program 
flexible placement distributed multi user session users flexibility choosing modules implement user interfaces execute 
particular flexibility placing local workstations getting local response 
collaboration transparency framework support collaboration transparent programs programs unaware instances interact multiple users 
supporting programs framework offer automation collaboration functions supported programs contain code specifying multi user aspects interaction 
similarly support user interfaces multi user user interfaces display information require command useful single user case 
supporting user interfaces system support multi user programs increasing overhead programs 
particular single user multi user program completely unaware interacting multi user program 
collaboration awareness framework support collaboration aware programs allowing programs exercise control way collaboration tasks performed 
similarly support collaboration aware user interfaces 
incremental awareness framework allow collaboration transparent programs user interfaces easily incrementally transformed collaboration aware programs user interfaces supporting term interface different related ways 
user interface user mean user interface offered particular user program user interface multi user program mean combined user interfaces individual users programs user interface suite mean aspects user interfaces suite multi user programs common programs 
usages consistent popular usages term 
dewan choudhary implementing multi user interfaces high level specification low level implementation various collaboration tasks program 
compatibility framework allow instances programs developed basis multiple users promoting reuse existing programs 
behaviors instances programs created single user basis multi user framework identical single users 
designed approach meeting requirements 
describe basis approach extended basis support multi user interaction 

basis possible basis variety single user frameworks including conventional programming languages pascal window systems toolkits interviews high level specification systems uide include model application data 
choice basis constrained requirements 
particular requirement user interface independence implies framework support sharing application data sharing user interfaces manipulate implying basis understands application data 
high level specification systems satisfy requirement 
reason chose single user suite representative class systems basis multi user framework 
implies multi user suite directly support multi user versions single user interfaces created single user suite 
particular directly support multi user versions arbitrary existing user interfaces arbitrary graphical user interfaces currently supported single user suite 
single user suite successor system developed author part dissertation university wisconsin 
give brief summary main concepts design system 
detailed descriptions concepts motivation supporting papers single user suite 
introduce section running example motivate illustrate concepts design single user multi user suite 
single user suite differs traditional interactive environments important ways 
users suite run programs create temporary processes instantiate create persistent large grained objects 
object network wide file name executes address space perform arbitrary computations written conventional programming language respond messages possibly remote objects 
user connect disconnect dialogue manager start terminate interactive session 
dialogue manager corresponds uims model implements user interface object 
provided system offers textual simple graphical user interfaces interact possible indirectly creating multi user versions single user interfaces developed systems shown 
single user suite mean version suite supports single user programs 
system support creation multi user applications consisting communicating single user programs shown 
dewan choudhary implementing multi user interfaces object 
object connected user dialogue manager 
rest refer object connected dialogue manager application object simply application need distinguish dialogue manager 
suite offers programmers abstractions defining user interface object 
abstractions include active variables interaction variables attributes value groups object windows 
active variable application variable value displayed user changed interaction variable 
interaction variable user local version active variable object created user connects object 
updated object show result edited user input new value committed user update value corresponding active variable 
attribute interaction property interaction variable determine instance presentation variable callbacks invoked edited user 
value group group related interaction variables stores attributes shared variables 
inheritance relation defined value groups allows specific value group inherit attributes general 
object window rectangular area screen displays textual graphical presentations interaction variables 
refer interaction variables attributes value groups windows interaction entities created interacting users 
interaction entities created interacting user managed dialogue manager application 
dialogue managers offer application objects users procedural user interface respectively create manipulate interaction entities 
procedural interface consists suite calls procedures invoked objects dialogue managers perform operations interaction entities suite callbacks procedures invoked dialogue managers applications response user actions 
suite calls consist mainly creation deletion calls calls allow applications create delete displays interaction variables include dm submit dm remove calls create delete interaction variables dm engage dm engage specific calls create displays data structures anonymous named object window dm call deletes displays 
attribute setting retrieving calls calls consist dm setattr dm getattr calls define retrieve respectively value attribute value group 
value setting retrieving calls calls include dm update dm getvalue calls update retrieve respectively value active variable dm dm dm calls append insert delete respectively sequence element 
interaction entities light weight objects systems interviews colab rendezvous called interaction objects systems 
suite represented conventional data structures heavy weight objects 
course dialogue manager server point view callback invoked application call call invoked application callback 
take application client point view 
suite calls prefixed dm executed dialogue managers 
dewan choudhary implementing multi user interfaces message call dm message call displays text message user 
suite call application connected dialogue manager op 
suite callbacks inform application actions performed user 
consist mainly load callback invoked user starts editing session application optional unload callback invoked user terminates editing session application validate callbacks check user changes interaction variables semantic consistency update callbacks invoked user commits semantically correct changes 
dialogue manager displays windows including object windows defined application displaying interaction variables menu window invoking commands error window displaying error reports message window displaying messages 
user choose windows mapped screen 
dialogue manager provides structure editing interface edit interaction variables 
illustrate user procedural interfaces suite abstractions example suite program budget example editor budget 
user command budget example name budget create new instance called budget program 
different user command dm name dm load budget create new dialogue manager called dm connect newly created application 
dialogue manager creates object windows budget comments displaying active variables application 
displays object window budget budget managed application object window comments placeholder description application list comments modifications budget 
user select placeholder display application description window 
changes data structures change single user interaction dewan choudhary implementing multi user interfaces salary travel fields budget commit changes executing accept command menu window 
application responds commitment changes recomputing budget updating display screen 
shows main components program budget example 
line program special comment telling suite types active variables program 
load procedure callback invoked dialogue manager user starts session application 
suite calls define nature session 
invokes dm submit create interaction variables dialogue manager 
arguments dm submit specify location name type respectively associated active variable 
invokes dm setattr calls define attributes value groups 
dm setattr call defines update callback value type budget updates dependent fields value invokes dm update refresh display value 
second dm setattr call defines select callback variable invoked user selects value 
procedure invokes operating system command display description budget 
callbacks take arguments name interaction variable modified selected second pointer value variable 
dm setattr call tells suite integer values displayed scrollbars 
load callback invokes dm engage calls ask suite display graphics window budget text window comments 
single user suite allowed user interact particular application time 
section describe basis multi user framework satisfies requirements 
illustrate multi user framework example single user suite built basis supports concepts active variables attributed interaction variables user commits changes dewan choudhary implementing multi user interfaces dmc editable budget define overhead typedef struct int salary travel equipment int total budget string budget void name val char name budget val ifdef debug dm message starts endif val val salary val travel overhead val total val salary val travel val equipment val val dm update budget val ifdef debug dm message terminates endif void name val char name budget val system readme load dm submit budget dm submit string dm submit dm setattr type budget dm setattr value dm setattr type int dm engage specific budget graphical dm engage specific comments text dm engage specific comments text 
single user collaboration transparent program user interface commands initiate terminate sessions edit commit values interaction variables callbacks inform applications user invocation commands calls create delete interaction variables set retrieve values attributes display messages 
approach independent exact set types active variables interaction variables attributes interaction variables user interface commands calls callbacks supported basis 
section details suite show sections concrete examples multi user programs 
frameworks properties best knowledge editor systems single user suite single user frameworks features 
parts approach applied single user frameworks satisfy properties discussed section 
dewan choudhary implementing multi user interfaces 
multi user framework multi user framework allows multiple users concurrently edit object 
refer object multi user object program executed multi user program 
strictly speaking extensions support multi session objects programs multi user objects programs user simultaneously start multiple editing sessions object 
rest terms user session interchangeably need explicitly distinguish 
describe major components framework multi user architecture set variable grained abstractions allowing users multi user object communicate programming user interface allow programs users respectively manipulate abstractions 
sections describe multi user abstractions architecture respectively sections discuss multi user programming user interfaces 
section describes parts interfaces support collaboration transparency compatibility section describes parts support collaboration awareness 

multi user abstractions abstractions supported multi user suite direct extensions corresponding abstractions supported single user suite 
include abstraction shared active variable application variable displayed modified multiple users 
single user suite users directly view modify values active variables 
view modify values interaction variables updated application 
single user suite interaction variables grouped value groups attributes determine format view interaction properties variables 
multi user suite creates object message single user suite windows users multi user applications provides commands manipulate interaction variables value groups windows 
approach defining sharing semantics interaction entities create single logical set interaction variables value groups windows users application approach consistent requirement user interface independence forces users share single interaction state 
framework creates separate logical sets interaction entities different users application 
particular creates separate interaction variables users sharing active variable allowing independently edit values 
similarly creates separate set value groups associated attributes users application allowing independently define formats views interaction properties interaction variables separate set windows users allowing independently set size position interaction properties windows 
naturally windows physically replicated workstations users 
interaction entities physically replicated support caching 
dewan choudhary implementing multi user interfaces coupling editable object dm setattr dm dm setattr current dm setattr dm dm setattr current variable variable user user interaction shared variable manager manager dialogue dialogue interaction active multi user suite approach creating separate sets interaction entities different users preclude coupling values corresponding interaction entities created different users 
discussed framework provides default coupling scheme coupling aware primitives override scheme 
particular allows users couple values corresponding interaction entities supporting see see interaction 
hand approach supports interaction creates single interaction state users application 

multi user architecture research shared window systems identified main architectures multi user application centralized architecture creates single copy application executed single operating system process replicated architecture creates local copy application user 
architectures serious disadvantages 
centralized architecture meet requirement flexible placement 
particular support local placement user interface modules execute central process 
result requires broadcast potentially graphical output 
meet requirement error independence local error user crash central process terminating session 
meet requirement concurrent scheduling single schedulable thread created users 
meet requirement environment independence central process associated single environment 
replicated architecture meets requirements flexible placement concurrent scheduling error independence creates separate process user executes protected address space central operating system process contains independently scheduled threads discussed 
dewan choudhary implementing multi user interfaces independently scheduled executed local workstation user 
executes semantic operations multiple times copy application desirable multiple invocations semantic operation may perform computationally expensive operations multiple times attempt read file simultaneously attempt write data file multiple times access files available workstations send mail message multiple times 
developed new multi user architecture overcome problems existing architectures 
multi user suite user interaction multi user application managed separate dialogue manager manages interaction entities created user 
dialogue managers different users multi user application separate suite objects run separate heavyweight system processes scheduled independently possibly concurrently underlying operating system separate address spaces access rights environments placed different hosts 
independently dynamically placed created connected disconnected application users 
single user suite provided system perform interaction functions application 
addition perform collaboration functions application 
architecture regarded combination centralized replicated architectures supports central semantic component application object local user interface components dialogue managers 
suffer disadvantages centralized replicated architectures meets requirements 
clearly meets requirement dynamic binding flexible placement concurrent scheduling 
meets requirement error independence errors users affect state dialogue managers crash dialogue managers users 
furthermore consistent requirement user interface independence allows dialogue managers execute different access rights environments 
architecture semantic actions executed central application component 
suite multi user architecture allows user interface tasks performed locally computation tasks 
comparison replicated architecture allows user interface computation tasks performed locally requiring user wait communication delays involved receiving output 
architecture user wait communication delays involved receiving results displays formatted locally dialogue managers 
preliminary experience shows delays perceptible size result typically small comparison display important results produced infrequently users execute long transactions commit input values 
instance size budget smaller size graphical representation new values budget output users commit changes budget input event 
application programmer explicitly writes collaboration aware code coordinates replicas application discussed 
dewan choudhary implementing multi user interfaces 
default collaboration scheme met requirements compatibility collaboration transparency designing default collaboration scheme supports multi user applications retaining programming user interfaces basis 
describe main components 
creating connecting applications retain interface single user suite instantiating object connecting dialogue manager 
continuing budget example user execute command budget example name budget create instance budget 
different users users pd execute commands dm name dm pd load budget dm name dm load budget respectively start interactive sessions application 
commands creates dialogue manager connects application 
single user case suite calls invoked application directed single dialogue manager suite callbacks defined application invoked single dialogue manager 
user commands modified state local dialogue manager possibly application 
multi user case multiple dialogue managers associated suite calls callbacks 
user commands coupled affect state remote dialogue managers 
rules decide default semantics original single user calls callbacks user commands multi user situation 
access control access control rule users application equal access corresponding interaction entities created dialogue managers 
callback invoked dialogue manager user invokes action triggers call 
multi user interaction dewan choudhary implementing multi user interfaces support rule framework distinguish different users absence application provided information 
continuing example rule implies pd edit versions budget invoke callback update value application 
demultiplexing calls single rule applies suite callbacks multiple rules address targets suite calls 
describe rules need classify calls responses calls executed callbacks invoked response user commands requests calls initiated application 
retrievals calls return results dialogue managers actions calls ask dialogue managers set perform operations 
value updating calls calls change values interaction variables 
consider responses 
particular consider responses value update calls addressed value update rule discussed 
response rule response value updating call directed current dialogue manager dialogue manager invoked callback 
rule assumes suite call private response request dialogue manager user dialogue manager interested 
motivate illustrate rule consider suite calls load update callback defined 
dm submit dm setattr suite calls invoked load callback directed dialogue manager invoked callback creating object windows interaction variables interaction entities dialogue manager application 
similarly dm message call invoked update callback directed dialogue manager invoked callback 
user pd updates budget debugging messages displayed 
consider requests suite calls initiated application object 
handle action requests differently retrieval requests shown rules 
action request rule action request refers dialogue managers connected application 
response request associated distinguished dialogue manager 
alternative choose dialogue managers 
alternative perform action single dialogue manager interacting application violating requirement compatibility 
alternative non deterministically choose dialogue manager 
alternative behavior application non deterministic confusing 
alternative choose previous dialogue manager dialogue manager invoked callback 
experience suite offer call requests action returns value 
dewan choudhary implementing multi user interfaces user pd commits new value building suite applications shows request typically unrelated callback 
action request rule assumption requests public broadcast users 
retrieval request rule retrieval request refers dialogue manager dialogue manager chosen non deterministically system 
choose dialogue managers violate requirement compatibility 
choose multiple dialogue managers collaboration transparent retrieval request return single value 
comparison previous dialogue manager dialogue manager lead better performance users interacting remote sites system choose dialogue manager nearest application 
alternatives cause application behave non deterministically dialogue manager copies interaction entity retrieved identical 
instance behavior application retrieves value titled attribute value group budget non deterministic copies attribute 
coupling rules allow copies interaction entities displayed different users different 
alternative return value interaction entity cached application 
approach efficient applicable interaction entity cached 
lead non deterministic behavior dialogue manager copies interaction entities identical values may different value cached 
demultiplexing rule describes multiplexing value update calls related value coupling rule 
value update rule suite call commit new value active variable updates dialogue manager copies interaction variables active variable 
coupling dewan choudhary implementing multi user interfaces value coupling rule changes users local copies active variables corresponding copies variables maintained dialogue managers users commits changes 
value update coupling rules allow changes agent user application shared agents agent commits 
users commit changes accepting applications commit invoking value update calls 
rules consistent approach sharing adopted traditional transaction systems allow users read committed values 
illustrate rules consider happened user pd committed new value equipment field budget 
suite assigned value copy data structures maintained user dialogue manager 
single user case invoked update handler inform application change computed new values dependent fields called dm update update copies fields kept dialogue managers 
attribute coupling rule changes users attributes value groups shared users 
window coupling rule changes users size position properties window shared users 
rules allow users independently change format viewing properties interaction entities affecting displays users 
instance allow user pd change format copy budget field size copies windows affecting displays user 
distinguish values attributes expect users typically share values formatting non state attributes 
concurrency control concurrency control rule active variable locked user starts modifying local copy unlocked commits value 
active variable locked user users allowed change copies 
motivate rule consider alternatives defining default concurrency control rule 
alternative users explicitly lock unlock groups active variables 
approach requires collaboration aware commands inconsistent requirement collaboration transparency 
alternative lock active variables user starts modifying 
rule conservative allows user active time dialogue supported application multi threaded 
instance allow users pd concurrently edit budget field comment respectively 
rule lock active variable allow multiple users simultaneously modify copies 
rule increase useful concurrency value coupling rule commitment copies overwrites uncommitted values copies processed application 
rules specify default collaboration scheme supported suite 
designed meet collaboration requirements consistent allow existing single user applications dewan choudhary implementing multi user interfaces reasonable way multiple users keep collaboration awareness low typical multi user applications 
describe facilities provided suite allowing applications incrementally tailor collaboration scheme 

collaboration aware primitives approach supporting customization default collaboration scheme application programmers directly modify extend modules provided system described section implement 
approach supported suite instantiates separate set system modules application allowing default collaboration scheme customized differently different applications 
approach sufficient meet requirement incremental awareness supports low level implementations collaboration schemes high level specifications 
framework offers small powerful set high level flexible primitives allowing application exercise control collaboration functions performed 
primitives allow application demultiplex calls variety groups dialogue managers allowing display results selected users couple values input different users identify users different dialogue managers kept operating system allowing implement access concurrency control tailor processing user inform user identities users program fork programs hosts environments dialogue managers users set retrieve states environments dialogue managers allowing provide environment specific processing disable default coupling concurrency control schemes allowing completely override default processing functions program uses primitives aware fact multiple users interacting 
refer primitives collaboration aware primitives 
primitives designed meet goal incremental awareness 
allow programs completely aware collaboration completely implement collaboration functions 
addition provide ways programs increasingly aware collaboration 
allow programs independently override default implementations various collaboration functions allowing implement function incrementally illustrated various versions example application described 
version section overrides default demultiplexing output adds collaboration awareness user interface version section implements access control version section overrides default program invocation scheme provided operating system version section overrides default coupling scheme 
dewan choudhary implementing multi user interfaces second allow programs incrementally override default implementation specific collaboration function completely replacing new implementation 
instance version example program section disable default output demultiplexing output calls 
similarly version section changes default coupling scheme displayed data structures 
allow programs incrementally aware details implementing specific collaboration function 
particular allow program aware name group users specific users group identities specific sessions dialogue managers users group 
supporting incremental awareness framework allows programs incrementally trade automation flexibility tailor aspects default collaboration scheme necessary offer desired collaboration scheme 
motivate describe illustrate primitives 

generic groups identified section useful groups dialogue managers suite operation may directed current 
groups group parameterized session group 
refers users current user may target suite call instance displays message users new user starts session application 
parameterized integer refers nth session list sessions sorted started 
group may instance applications dcs multi user debugger built check user session application particular user allowed enter conference 
suite allows operation explicitly invoked groups dialogue managers 
instance addition default dm message call provides calls dm message current dm message dm message dm message dm message 
suite operations invoked dialogue manager groups current executed callbacks 
modified update callback illustrate calls void name val char name budget val ifdef debug dm message starts endif 
val dm update budget val dm message budget updated ifdef debug dm message terminates endif dm message calls allow users application debug application 
dm message call alerts users change budget modified creating collaboration aware user interface application 
user pd commits new dewan choudhary implementing multi user interfaces value budget user informed change 
groups generic groups defined independently specific applications users 
dynamic groups formed execution time change user action 
discuss primitives allow applications target suite calls application defined groups possibly static properties applications dialogue managers owner 

user defined groups suite provides procedural interactive primitives creating user defined groups 
application may invoke procedure gm new group users gm add user group existing group gm delete user group existing group gm remove existing group 
procedures processed special global object called group manager 
group manager allows users interactively create remove groups add delete group members 
suite allows operation invoked dialogue managers users user defined group 
instance provides dm message group call takes argument name user defined group prints message dialogue managers users group 
facility creating user defined groups supported unix operating systems 
suite user defined groups groups heavyweight groups associated access rights modified users special privileges 
suite groups intended lightweight groups created manipulated dynamically arbitrary applications users 
access groups defined operating system collaboration groups suite allows group operations commands refer special prefix 
illustrates interactive definition group consisting existing unix access group user lane 
user displays current set suite groups edits template define new group executes accept command commit group 
point applications users refer group 
instance application execute call generic groups dewan choudhary implementing multi user interfaces user defined groups dm message group suite hello suite users display message users group 
programs generic groups programs groups tied particular set groups ported directly suite system support groups 
ported suite systems define groups differently 
instance multi user program refers suite group ported systems include different sets users group 

specific users sessions multi user application may need aware identities specific users various reasons 
may want implement access control 
instance example application may wish allow selected users add comments 
may want tailor processing input displaying output user 
instance example application may wish user favourite editor displaying application description 
furthermore may want create collaboration aware user interfaces inform user identities users 
suite supports user aware primitives 
allows suite operations invoked dialogue managers invoked particular user 
instance provides dm message uid call asks dialogue managers particular user display message 
allows applications determine users interacting 
supports dm operation get identity user dialogue manager 
operations invoked various groups dialogue managers supported suite 
instance application invoke dm callback get identities users dialogue managers current dialogue manager 
illustrate user awareness adding callbacks example application invoked suite check addition new comment allowed invoked suite inform application new comment 
callbacks dewan choudhary implementing multi user interfaces outlined char seq name child name index char seq name child name unsigned index dm current return char return comment insertion allowed void seq name child name index char seq name child name unsigned index dm setattr child name dm current dm setattr child name checks access rights user labels comment name user read users current user 
multi user application may need aware properties specific user sessions represented dialogue managers 
instance example application may wish editor specified dynamically user interaction session 
suite provides session aware primitives 
provides dm family calls returns identifiers various groups dialogue managers allows operation invoked dialogue manager named identifiers 
instance provides dm message call targeted dialogue manager specified argument 

program execution single user applications multi user applications need execute programs dynamically 
instance multi user command interpreter may need execute program response user command 
single user case reasonable execute single instance program environment application application bound single user 
result calls system provided operating system usually sufficient support program execution 
multi user case program execution flexible discussed 
continuing example multi user command interpreter assume program invoked single user program unix program 
executing program inappropriate user awareness dewan choudhary implementing multi user interfaces multiple users command interpreter wish start editor 
executing environment invoking application usually inappropriate general different users multi user application different environments distinct environment application 
hand program invoked multi user program suite budget example program executing environment invoker usually appropriate single instance interact multiple users associated user environment 
general approach supporting flexible invocation single user programs multi user application aware environments users section allowing invoke operating system calls system multiple times appropriate environments 
approach overhead invoking programs high invoker construct suitable environment user letting inherit existing program 
multi user application simply wishes invoke program environments users 
suite provides dm system family calls invoke programs environment different groups dialogue managers application 
result possible change system call calls allow multiple users view output single user program shown void name val char name string val dm system readme dm system call invokes program user environment user 
dm system calls useful invoking non suite single user programs suite single user programs dialogue managers 
instance example application create new instance budget example connect users new application simply executing system budget example name budget dm system dm load budget flexible program forking dewan choudhary implementing multi user interfaces giving application capability asking dialogue manager execute programs raises access control problem allows application execute malicious programs rights users program 
plan address problem allowing users restrict programs dialogue managers execute 

user environments example aware users environments different environment 
aware specific properties environment simply executes command current user environment 
general multi user application may need directly refer specific properties environments users reasons 
may need execute command uses properties user environment user connected application 
instance example application may wish display message displays past current users application new user joins conversation value budget committed 
second access control may allow execute command user environment 
instance user application may rights execute program 
application may need compose properties multiple environments 
instance user example application may search path application may wish search path user display invoking 
suite provides additional operations support environment aware applications 
provides dm getenv dm operations set get properties various groups users 
modified procedure illustrates operations void name val char name string val char display display dm getenv current display sprintf cmd display readme display system cmd operations defined dm system dm getenv dm direct extensions corresponding operating system operations 
multi user system implemented top collaboration unaware operating system operations access information users directly processed operating system know user application 
control operations suite provides operations disable enable default coupling locking schemes data structure primitives described coupling aware concurrency aware program override default coupling concurrency control schemes 
illustrate consider example application 
suppose wishes override default coupling scheme allowing users suite group share changes budget informing users incrementally changes budget users 
disable default coupling scheme data structure flexible feedback model provided single user suite receive incremental changes data structure invoke dm update group update callback data structure manually couple interaction variables shown dewan choudhary implementing multi user interfaces void name val char name budget val dm update group name budget suite val suppose application wishes implement concurrency control scheme lets user explicitly lock unlock data structure 
override default locking scheme data structures define lock unlock commands facility provided single user suite defining application specific commands lock unlock user interaction variable setting readonly attribute true false 

implementation implementation multi user suite extension implementation single user suite 
implementation single user suite consisted dialogue compiler compile declarative dialogue specifications build symbol table type declarations single user dialogue managers managed various interaction entities supported single user suite library routines dm setattr applications communicate dialogue managers simply forwarded requests dialogue manager 
dialogue compiler directly reused multi user suite added new types dialogue specifications 
library routines dialogue manager extended various ways 
group manager added support user defined groups 
dialogue manager multi user application performs additional functions 
exchanges coupling information dialogue managers connected object 
second locks unlocks interaction variables exchanges locking unlocking information peers 
implements new operations described control operations dm dm dm system operations 
implementation operations dm dm system simply invokes corresponding operating system operations 
dialogue manager unaware identities peers send messages directly 
sends application object distributes peers 
routing messages dialogue managers application object easy ensure coupling messages received order dialogue manager locking unlocking done atomically 
library routines linked multi user object perform additional functions 
implement multiplexing suite operations various dialogue managers 
second route distribute coupling locking unlocking messages dialogue managers 
maintain list session identifiers dialogue managers connected object performing functions 
maintain information order dialogue managers connected object identifiers users dialogue managers support session user groups respectively 
group manager creates user defined groups maps name groups names users belonging groups 
suite object provides procedural multi user interactive interface 
client group manager registers group manager maintains cache group definitions 
group definition changes group manager informs clients new definition dewan choudhary implementing multi user interfaces update caches 

examples budget example multi user applications implemented suite 
section describe examples show different classes multi user applications implemented framework 
show examples suite programs allow users concurrently edit shared data structures communicate messages users allow users share results computations extend existing programs developed single user suite 
shows user interface simple text editor allowing users concurrently edit text string 
shows implementation suite 
shown program responsible creating string active variable 
suite handles collaboration tasks program connecting users application creating local buffers interaction variables text string coupling buffers implementing concurrency control 
multi user text editor trivial representative class multi user data structure editors 
shows complex example class 
editors differ types active variables display illustrated figures 
shows user interface person talk program allows users talk different windows prevents user typing wrong window 
shows implementation program 
previous programs program aware interacting multiple users 
load callback keeps count number times called allows users connect user interface multi user text editor dmc editable string string text load dm submit text text string dm engage text implementation multi user text editor dewan choudhary implementing multi user interfaces program 
creates separate text buffers user user text buffer read user 
shows user interface simple mail program shows implementation 
program creates interaction variables user outgoing message list received messages 
programs program completely implements coupling interaction variables 
disables default coupling incoming outgoing messages different users couples outgoing messages user lists incoming messages users 
defines update procedure outgoing message explicitly inserts message list incoming messages destination user 
user interface multi user outline editor dmc editable outline typedef struct unsigned num struct section sec arr subsection typedef struct section string name string contents subsection subsections section typedef struct unsigned num section sec arr outline outline outline load dm submit outline outline outline dm engage outline implementation multi user outline editor user interface person talk program dewan choudhary implementing multi user interfaces dmc editable string string usera userb int talkers load talkers talkers dm submit usera usera string dm submit userb userb string talkers dm setattr view userb dm setattr view usera dm engage specific usera usera text dm engage specific userb userb text implementation person talk program programs support sharing data entered users 
shows user interface simple spreadsheet allows users share results computed program 
allows users enter list named numbers computes sum values 
shows code program 
mail program defines update procedure process input users 
procedure computes displays results routing information users 
shows example multi user command interpreter shows implementation 
program displays list user commands outputs responds entry new command updating corresponding output appending new entry list 
uses existing command interpreter compute output command facilities provided operating system create pipes programs 
simulates user interface existing command interpreter setting attribute causes dialogue manager automatically commit command user hits return key 
command interpreter example class suite multi user programs extend single user programs user interface mail program dewan choudhary implementing multi user interfaces dmc editable msgs typedef struct string text msg typedef struct unsigned num msg msg arr msgs msg outgoing msgs incoming struct passwd pwd char name val char name string val pwd val null struct passwd return null char return unknown user void send name val char name msg val dm uid pwd pw uid incoming msg val load outgoing dm dm submit outgoing outgoing msg dm submit incoming incoming msgs dm setattr view outgoing dm setattr view outgoing send dm setattr view outgoing dm engage outgoing dm engage incoming implementation mail program developed suite 
illustrated user interface single user program recreated possible suite allow program multi user support provided 
general task difficult illustrated suite provides high level primitives generating user interfaces 
mentioned suite create arbitrary user interfaces currently support generation highly graphical user interfaces provided vlsi editors 
shown trivial examples different classes multi user applications emphasize structure suite programs implement 
discussion section easy see complex representatives classes implemented 
instance easy see talk program support arbitrary number users mail program support mail headers browsing spreadsheet support arbitrary computations 
section shows suite easily implement variety multi user applications illustrating automation flexibility provided approach 
lines code shown replace thousands lines code required implement applications manually 

related multi user suite closely related variety works addressing multi user interaction including database systems shared window systems group toolkits shared object systems 
differences framework systems arise mainly differing design goals 
particular systems designed meet set requirements section 
briefly describe works discuss dewan choudhary implementing multi user interfaces user interface multi user spreadsheet dmc editable typedef struct string name int number element typedef struct unsigned num element elm arr list int total compute name list char name list int total num total list elm arr number dm update total int total load dm submit list list dm submit total total int dm setattr type compute dm setattr type element number dm setattr type element number dm engage specific list object graphical dm engage specific total object graphical implementation multi user spreadsheet dewan choudhary implementing multi user interfaces user interface multi user command interpreter dmc editable typedef struct string cmd result typedef struct unsigned num cmd arr init init void execute cmd name val char cmd name string val int index char output name char result cmd name cmd index sprintf output name result index execute command capture output result val dm update output name string result dm init load dm submit dm setattr type string dm setattr type string execute dm setattr view dm setattr type cmd dm setattr type cmd dm setattr type dm setattr type dm engage implementation multi user command interpreter relationship framework 

database systems suite multi user framework related database systems 
suite object traditional database stores data structures read modified multiple users suite shared active variable similar shared database entity 
invoking commit command suite similar completing transaction database systems locking suite variables similar locking read write sets database transaction 
invoking update callbacks suite application objects similar executing triggers active databases 
dewan choudhary implementing multi user interfaces differences database systems suite multi user framework stem fact designed support non interactive transactions query languages designed support interactive transactions editing model 
result database systems provide equivalents suite interaction variables multi user architecture user interface component programming interface update callbacks 

shared screen window systems shared screen systems shared window systems rapport shared extensions single user screen window systems 
systems allow client program display copies screen window different users program implemented centralized replicated architectures 
suite dynamically create destroy copies interaction entities shared screens windows user breaks connection program offer client programming interface collecting input demultiplexing output multiple users implement concurrency control 
suite support collaboration transparent programs including existing single user programs developed single user counterparts 
furthermore suite supports collaboration aware primitives including primitives broadcasting messages users 
main difference systems suite manage low level interaction entities windows screens 
shared screen window systems greatly increase power interactive systems 
extend lowlevel user interface tools perform collaboration tasks direct clients tools clients higher level tools low level tools 
instance shared window system perform collaboration tasks direct clients window system clients large number toolkits user interface management systems developed top window system 
systems suffer important limitation 
manage low level interaction entities create multiple copies interaction entities defined higher level user interface software toolkits uimss 
result force users share entities supporting near interaction 
instance shared window system forces users share scrollbars notion scrollbar defined higher level toolkits 
high level system suite suffer limitations creates multiple versions interaction entities defined lower level layers toolkit window system 
systems differ suite related respects 
support centralized architecture replicated architecture suite supports hybrid architecture 
default collaboration scheme provided different 
distinguish retrievals actions responses requests value updates calls 
collaboration aware primitives supported collaboration aware shared window system known suite different 
supports primitives mainly allow applications explicitly overcome problems replicated architectures described section 
specifically primitives designed allow replicas application synchronize share non global data limit side effects execute parallel 
include equivalents dewan choudhary implementing multi user interfaces collaboration aware primitives provided suite primitives allow broadcast call users 
section discuss concepts design multi user suite multiuser frameworks single user window systems flexible 

groupkit groupkit multi user framework uses single user toolkit basis 
designed support replicated architecture access control floor control dynamic binding overlaying cursors annotations displays created single user applications 
offers predefined classes transform single user application developed basis multi user application 
classes directly programmer subclassed provide application specific functionality 
set predefined groupkit classes correspond suite default collaboration scheme extending classes corresponds suite collaboration aware primitives 
main differences frameworks developed independently suite groupkit knowledge application data model 
result offers support sharing data sharing presentations fine grained concurrency control 
second suite supports replicated architecture 
third offer analogues suite collaboration primitives primitives broadcasting values users 
hand offers overlays currently supported suite 

shared object systems multi user programs supported colab rendezvous provide shared object systems building programs 
systems allow computation interaction entities interactive program implemented set communicating fine grained objects provide mechanisms keeping objects created different users consistent 
colab colab supports abstraction association object representations called associates facility sharing state associates association 
association define special methods called broadcast methods invoked members association 
facility transform single user program multi user program replacing object single user program association marking methods association broadcast methods creating associate association user program 
care taken ensure broadcast method invoked association invoke broadcast methods 
separate process created user multi user program executes workstation user stores associates created user 
colab similar suite respects 
colab suite support collaboration aware multi user programs 
colab association corresponds suite shared active variable associate association corresponds copy active variable created dialogue manager 
invoking colab broadcast method analogous invoking suite call dialogue managers invoking colab non broadcast method analogous invoking suite call current dialogue manager 
dewan choudhary implementing multi user interfaces colab differs suite important ways 
offer equivalents suite default collaboration rules support collaboration transparent programs 
second support equivalents session user session id user defined groups 
result possible invoke method useful subsets association 
suite colab supports replicated architecture 
rendezvous rendezvous supports alternative multi user object oriented framework closer suite developed independently time suite 
colab rendezvous distinguishes objects view objects 
define underlying data define data viewed manipulated users 
multi user program rendezvous creates single process stores objects defined program 
user multi user program creates view process stores view objects created user 
process view processes created multiuser program lightweight processes execute single address space 
similarities rendezvous suite multi user framework 
rendezvous view processes correspond suite application objects dialogue managers respectively 
rendezvous view objects correspond suite shared active variables corresponding interaction variables 
rendezvous suite allow coupling semantic values coupling presentations 
differences rendezvous suite 
rendezvous view process created user executes central site address space corresponding process suite dialogue manager created user executes address space residing possibly workstation user 
result rendezvous support error access environment independence flexible placement 
suite interaction variable created automatically suite dm submit call rendezvous view implemented programmer 
rendezvous support equivalents suite collaboration aware primitives primitives broadcast values 

applying approach systems approach designed specifically extending basis properties described section aspects extend single user systems properties 
briefly consider interactive programming languages window systems toolkits 

interactive programming languages programming languages offer synchronous calls pascal read write calls programming user interfaces 
concepts directing calls various groups creating runtime agent user querying setting user environment executing programs applied languages 
useful provide instance calls pascal 
groupings proposed section applicable appropriate context 
current groups longer valid conventional languages support notion callback 
dewan choudhary implementing multi user interfaces group appropriate input call targeted group block long time system nondeterministically chooses instance user away terminal 
appropriate define current user input value allowing instance program read data item user read previous item 
case input call useful queue values input different users define values queue ensuring starvation 
default concurrency control rule ensure instant user pending input 
particular ensure input stream locked user submits input unlocked commits input buffer hitting return key 
default target groups input output routines defined 
aspects approach applied unconventional languages ez support editing synchronous constructs 
ez offers edit construct displays arbitrary ez data structure user provides user editing interface enter value data structure returns user exits editor 
construct cross primitives offered conventional languages suite 
conventional read primitive synchronous suite dm submit primitive submits variable editing 
ez supports synchronous constructs default user groups described conventional synchronous constructs appropriate 
conventional languages support coarse grained concurrency control mechanism 
supports editing data structures support suite fine grained concurrency control scheme ensures different users edit different parts data structure submitted editing application 

window systems toolkits suite window systems toolkits support asynchronous callbacks calls 
result suite default collaboration rules groupings directly applied allow instance client update current user window response refresh request 
may useful apply aspects approach systems address user interaction lower level 
mentioned systems create separate sets interaction entities defined lower layers create separate sets interaction entities defined higher layers 
shared window system create separate sets scrollbar resources toolkit create separate sets suite value groups 
window system toolkit concept state interaction entity may different application concept state 
consider comments window budget application 
window system consider displayed state bitmap displayed window toolkit implementing window text widget consider state value text buffer displayed buffer application consider value comments data structure 
result useful lower level systems distinguish instance calls update state update formatting properties state 
furthermore coupling concurrency control rules supported systems interaction entities operations defined higher level user interface software 
instance multi user suite shared window system lock scrollbar user starts moving concept scrollbar moving dewan choudhary implementing multi user interfaces defined higher level software 

multi user programs necessary automating large amount time people spend group activities 
multi user suite designed support easy construction programs 
far programmers purdue university minnesota create experimental multi user applications including multi user line printer tool allows users view edit line printer queues multi user talk program multi user command interpreter multi user visitor tool allows members organization schedule meetings visitors view manipulate information multi user expense service allows group users display manipulate common expenditures multi user employee service manages records employees organization multi user serc tool allows multiple users display modify project budget information purdue software engineering research center serc multi user library service allows users borrow return books multi user voting tool allows users vote issue multi user spreadsheet multi user query interface database management system multi user debugger multi user rcs tool allows users view edit state version control system multi user tool allows users browse test programs multi user code inspector allows users annotate documents 
experience building initial versions earlier multi user applications helped identify issues design multi user suite choose approaches addressing 
motivated design specific example multi user tool 
possible general statements design describing kind multi user applications support 
ellis describe alternate taxonomies classifying multi user applications time space taxonomy application level taxonomy 
classifies applications considerations support collaboration face face distributed locations support synchronous realtime collaboration asynchronous collaboration 
suite collaboration aware primitives allow suite support applications variety synchronization needs including pure synchronous pure asynchronous applications 
ability suite support distributed interaction depends interaction tasks performed locally turn depends factors including collaboration awareness application 
application collaboration aware may need process user events suitable distributed interaction 
abstractions programming interface designed keep collaboration awareness low multi user applications 
tools implemented year far demonstrations 
code inspector initial pilot studies researchers university minnesota 
initial experience suggests advantages collaborative code inspection traditional manual inspection 
intend integrate software engineering tools mentioned flexible environment collaborative software engineering intend promoting distributed collaborative development suite tools researchers purdue university minnesota 
part nsf effort developing collaboratory 
dewan choudhary implementing multi user interfaces application level taxonomy characterizes multi user applications functionality 
divides applications various groups including message systems multi user editors computer conferencing systems coordination systems 
multi user suite easily implement collaborative aspects applications 
experimental applications built fall classes 
illustrate consider final version budget application described 
message systems allows users exchange messages multi user editors allows users edit shared data structures coordination systems automatically triggers users actions informing interested users 
applications built combine features variety multi user systems 
collaborative aspects diverse applications relatively easy implement suite implemented aspects applications typically contained little code customize collaboration 
tools built average half semester student time learn suite design tool integrate existing single user tool implementing part semantic component tool 
automation supported suite illustrated example applications described provide functionality variety multi user applications lines code 
framework described initial step high level system supporting wide range multi user applications 
incomplete ways address semantics multi user undo redo 
currently investigating appropriate rules defining default semantics multi user undo redo undo redo aware primitives overriding semantics 
second support user customization collaboration scheme 
instance allow user disable default concurrency control mechanism 
requires programmers write non trivial code override collaboration scheme 
currently investigating design comprehensive parameterized collaboration model allows users programmers exercise control collaboration scheme simply specifying values high level collaboration parameters 
model allow users interactively dynamically tailor collaboration scheme programmers write collaboration aware code minutes days weeks 
developed parameterized coupling model framework described associates coupling parameters interaction variables windows value groups 
currently investigating parameterized concurrency control access control undo redo models similarly framework 
experience developing current set multi user applications guide defining parameters 
collaboration parameters consistent idea incremental awareness define intermediate degree collaboration awareness collaboration transparency awareness collaboration aware primitives described 
single user suite high level system supports limited set presentation schemes userinterface commands comparison lower level systems window systems toolkits 
particular offers limited facilities creating graphical displays instance support collaborative drawing tool 
useful apply aspects multi user approach lower level systems evaluate practicality idea 
study necessary determine responsibilities implementing collaboration functions divided various layers interactive system 
approach layer implement mechanisms sharing interaction entities defines provide dewan choudhary implementing multi user interfaces mechanisms higher level layers determine policies lower level mechanisms 
needed support high level abstractions supporting audio video collaboration 
riedl describes initial approach offering audio collaboration suite 
necessary explore suite system support groupkit overlays mmm multi user workstations extensible message filtering rules provided object lens decision support negotiation support modules scs coop multi user hypertext systems abc hyper trellis 
kind reported necessary identify various design decisions taken related works multi user frameworks fundamental principles multi user framework support relationships principles designing multi user frameworks 
main contributions identifies new set requirements multi user framework including dynamic binding user interface independence concurrent scheduling error independence flexible placement incremental awareness 
motivates describes illustrates framework meets requirements 
framework contains novel components including refinement uims architecture explicitly addresses multi user interaction abstractions shared active variables interaction variables set default collaboration rules designed keep collaboration awareness low multi user applications small powerful set collaboration aware primitives allow programs demultiplex output multiplex input invoke programs users environments couple corresponding interaction entities offer access control concurrency control collaboration aware user interfaces 
compares framework multi user frameworks identifying key similarities differences systems 
discusses aspects framework extend variety single user interactive systems showing aspects applicable high level system low level system asynchronous system synchronous system 
acknowledgments collaboration aware primitives described motivated applications developed lane john riedl 
lane implemented primitives 
robert susan graham michael van de pan language editing system integrated development environments proc 
th acm symp 
software development environments december pp 

len bass erik hardy reed little robert incremental development user interfaces proceedings ifip tc wg working conference engineering human computer interaction napa valley august north holland pp 

dewan choudhary implementing multi user interfaces michel beaudoin lafon alain transparency awareness real time groupware system rapport de recherche university de paris sud centre orsay laboratoire de recherche en informatique october 
eric bier steve freeman mmm user interface architecture shared editors single screen proceedings th acm siggraph symposium user interface software technology november pp 

choudhary undo redo collaborative user interfaces ph thesis proposal purdue university department computer science october 
terrence crowley paul baker harry raymond tomlinson infrastructure building shared multimedia applications proc 
acm conference computer supported cooperative october pp 

davies maurer preece presentation metaphors large hypermedia systems journal microcomputer applications pp 

productive projects teams house publishing new york 
dewan tour suite user interface software proceedings rd acm siggraph symposium user interface software technology october pp 

dewan eric object model conventional operating systems usenix computing systems dec pp 

dewan marvin solomon approach support automatic generation user interfaces acm transactions programming languages systems october pp 

dewan rajiv choudhary primitives programming multi user interfaces proceedings th acm siggraph symposium user interface software technology november pp 

dewan rajiv choudhary flexible user interface coupling collaborative systems proceedings acm chi conference april pp 

dewan inheritance model supporting flexible displays data structures software practice experience july pp 
dewan flexible coordination collaborative software engineering proceedings nsf workshop coordination theory collaboration technology june pp 

dewan principles designing multi user user interface development environments languages proceedings ifip tc wg working conference engineering human computer interaction finland august 
dewan designing implementing multi user applications case study software practice experience december 
janet drake john riedl wei tek tsai distributed collaborative software inspection tool design prototype early trial proceedings th aerospace sciences conference january 
dewan choudhary implementing multi user interfaces ellis simon gibbs gail rein groupware issues experiences cacm january pp 

engelbart teleconferencing features proceedings fall compcon september pp 

ahuja horn lucco rapport multimedia conferencing system software overview proceedings nd ieee conference computer workstations march pp 

james foley won kim kovacevic kevin murray defining user interfaces high level abstraction ieee software january pp 

christopher fraser syntax directed editing general data structures proceedings acm sigplan symposium text manipulation sigplan notices june 
fraser hanson high level language facilities low level services conference record popl pp 

phil shared distributed group environment second annual technical conference mit january clyde suh andrew whinston structured discourse scientific collaboration journal organizational computing appear 
foley configurable applications graphics employing satellites cages computer graphics spring pp 

scott hudson roger king generator direct manipulation office systems acm transactions office information systems april pp 

dan olsen jr thomas mcneill david mitchell workspaces architecture editing collections objects acm chi proceedings may pp 


lai malone object lens spreadsheet cooperative proceedings conference computer supported cooperative 
keith william nowicki structured graphics distributed systems acm transactions graphics january pp 

keith experiment integrated multimedia conferencing proceedings conference computer supported cooperative december pp 

collaboration awareness support collaboration transparency requirements generation shared window systems proceedings acm chi april pp 

mark linton john vlissides paul calder composing user interfaces interviews ieee computer february pp 

mantei backer sellen buxton milligan wellman experiences media space proceedings chi april pp 

minneman bly managing trois study multi user drawing tool distributed design proceedings chi april pp 

dewan choudhary implementing multi user interfaces morgenstern active databases paradigm enhanced computing environments proceedings th international conference large data bases pp 

newman wolfe webb wilson brief overview dcs distributed conferencing system proceedings summer usenix conference june pp 

teresa nixon kara jagannathan srinivasan dewan bharat bhargava building user interface raid database system suite system proceedings ieee international conference systems integration june 
david notkin interactive structure oriented computing ph thesis technical report cmu cs department computer science carnegie mellon university february 
john patterson ralph hill steven scott rendezvous architecture synchronous multi user applications proceedings conference computer supported cooperative october pp 

john patterson comparing programming demands single user multi user applications proceedings th acm conference user interface software technology november pp 

pfaff user interface management systems springer verlag englewood cliffs nj 
ramamoorthy shekhar cooperative approach large knowledge systems proceedings sixth ieee international conference data engineering february pp 

riedl continuous media discrete objects multimedia computer supported collaborative proceedings workshop multimedia information systems february 
mark roseman saul greenberg groupkit groupware toolkit building real time conferencing applications proceedings acm conference computer supported cooperative appear november 
rosenberg update national science funding collaboratory cacm december 
sarin irene greif computer real time conferencing systems ieee computer october pp 

scheifler gettys window system acm transactions graphics aug pp 

jeffrey editing paradigm user interaction ph thesis technical report university washington department computer science august 
john sibert william hurley teresa object oriented user interface management system computer graphics february 
john smith smith abc hypermedia system artifact collaboration proceedings third acm conference hypertext december 
mark stefik gregg foster daniel bobrow kenneth kahn stan lucy suchman computer support collaboration problem solving meetings cacm january pp 

dewan choudhary implementing multi user interfaces david stotts richard furuta dynamic adaptation hypertext structure proceedings third acm conference hypertext december 
sutton sprague study display generation management interactive business applications tech 
rept 
rj ibm san jose research laboratory november 
