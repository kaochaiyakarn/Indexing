progress database fangzhen lin ray reiter department computer science university toronto toronto canada email fl ai toronto edu reiter ai toronto edu www cs toronto edu way think strips mapping databases databases sense suppose want know world action represented strips operator ff done world represented strips database find simply perform operator ff applying ff elementary add delete revision operators 
describe process progressing database response action ff 
consider general problem progressing initial database response sequence actions 
appeal situation calculus axiomatization actions addresses frame problem reiter 
setting considerably general strips 
results concerning progression mixed 
surprising bad news general characterize progressed database appeal second order logic 
news useful special cases compute progressed database order logic efficiently 
relate results progression strips systems providing semantics systems terms purely declarative situation calculus axiomatization actions effects 
view strips mechanism computing progression initial situation calculus database effects action 
illustrate idea describing different strips mechanisms proving correctness respect situation calculus specifications 
revises combines results appeared lin reiter 
fellow canadian institute advanced research way think strips mapping databases databases sense suppose want know world action represented strips operator ff done world represented strips database find simply perform operator ff applying ff elementary add delete revision operators 
describe process progressing database response action ff cf 
rosenschein pednault 
resulting database describes effects action world represented initial database 
may convenient possible describe effects actions simple process progressing initial world description 
shall see go strips systems progression surprisingly complicated 
consider general problem progressing initial database response sequence actions 
appeal situation calculus axiomatization actions addresses frame problem reiter lin reiter 
setting considerably general strips 
results concerning progression mixed 
surprising bad news general characterize progressed database appeal second order logic 
news useful special cases compute progressed database order logic efficiently 
relate results progression strips systems providing semantics systems terms purely declarative situation calculus axiomatization actions effects 
view strips mechanism computing progression initial situation calculus database effects action 
illustrate idea describing different strips mechanisms proving correctness respect situation calculus specifications 
need progress database arises robotics setting 
approach controlling robot address called projection problem answer query denotes situation resulting performing sequence actions initial situation done regression cf 
waldinger pednault reiter reduce projection problem entailment initial database consisting sentences initial situation unfortunately regression suffers number drawbacks application 
robot functioning long period sequence con way database practitioners think database updates abiteboul 
fact strips action database update paradigms essentially 
accordingly database updates strips actions generalizations 
database perspective see reiter 
actions performed initial situation extremely long regressing sequence computationally expensive 

similarly long initial world state rearranged significantly final steps regression entirely unnecessary 

significantly robotics perceptual actions scherl levesque lead new facts added database 
facts true current situation immediately perceptual action old database facts true reasoning databases containing mixed facts facts current initial situations complicated know satisfactory way 
way addressing problems regression periodically progress robot database 
particular perceptual action accompanied progression database coupled addition perceived fact resulting database 
envisage database progression computations done line time robot busy performing physical actions moving 
logical preliminaries language situation calculus order sorted sorts situation situations action actions object 
domain independent predicates functions constant sort situation denoting initial situation binary function denoting situation resulting performing action situation binary predicate oss meaning action possible executable situation binary predicate situation theta situation 
means reached sequence executable actions 
assume finite number situation independent predicates arity object finite number situation independent functions arity object object finite number fluents predicate symbols arity object theta situation 
denote secondorder extension foundational axioms situation calculus lin reiter need induction situations reiter 
restrict situation calculus particular situation 
example initial database finite set sentences mention situation terms mention oss 
purpose situation term st define st subset mention situation terms st quantify situation variables mention oss 
formally smallest set satisfying 
st provided mention situation term 

st st provided fluent right arity terms right sort 

st oe variables sort object action respectively 
definition may odd want sentences st propositions situation st fortunately shall st st ground term simple variable sort situation 
shall st denote second order extension st predicate variables arity object 
second order sentence quantifies predicate variable arity object theta situation 
formally st smallest set satisfying 
formula st st 
st provided predicate variable arity object terms sort object 

st oe variables sort object action respectively predicate variable arity object 
basic action theories assume action theory form cf 
reiter lin reiter sigma ss ap una ffl sigma set foundational axioms situations 
ffl ss set successor state axioms form oss oe phi fluent phi ffl ap set action precondition axioms form oss psi action psi ffl una set unique names axioms actions different actions action oe delta delta delta ffl initial database finite set order sentences shall give example action theory moment 
briefly explain foundational axioms sigma independent particular applications 
sigma contains axioms structure situations 
formally sigma consists set axioms oe oe oe oss notice similarity sigma peano arithmetic 
axioms unique names assumptions eliminate finite cycles merging 
third axiom second order induction amounts domain closure axiom says stated free variables formula assumed prenex universally quantified 
variables lower case roman character constants upper case 
situation obtained repeatedly applying axioms define inductively 
sigma place axioms structure situations appear 
needed want show usually induction state constraint form entailed action theory 
purpose temporal projection particular progression shall see exactly effect gamma sigma formula sequence ground action terms iff ss ap una follows directly proposition 
proposition model gamma gamma sigma model 
gamma domains sorts action object interpret situation independent predicates functions 
sequence ground action terms fluent variable assignment iff gamma proof observation sentence gamma sigma ss ap una mentions equality atom arguments sort situation unique names axioms situations 
follows gamma model gamma sigma model ss ap una conditions proposition satisfied 
loss generality assume gamma model ss ap una denotation symbol interpretation gamma construct structure follows 
domains gamma sorts action object 
domain dom sit sort situation smallest subset situation domain gamma 
gamma dom sit discussion induction situation calculus see reiter 
means satisfies variable assignment 
oe dom sit ff element action domain gamma gamma ff oe dom sit exactly domain sorts action object gamma situation domain subset gamma complete specification describe interprets function predicate symbols 

interprets situation independent function predicate symbols including equality predicate exactly gamma 
interprets equality predicate situation terms dom sit exactly gamma 
interprets oss fluents domain exactly gamma domain 

specify interprets relation situations 
smallest set properties oe dom sit ff oe oss oe ff oe 

oe oe oe dom sit oe oe 
oe oe 
oe oe 
prove model sigma ss ap una proposition follows 

consider sentence form oe oe mention oe mention equality atom situation arguments oe quantify situations 
gamma model oe gamma interpret oss fluents situation independent function predicate symbols identically elements domain domain sort situation subset gamma sentence ss ap una form oe follows model ss ap una gamma 
remains prove model sigma 
satisfies unique names axioms situations gamma 
satisfies induction axiom says situation domain smallest set containing closed function true situation domain 
hard see defined satisfies axioms sigma 
conditions proposition follow properties example basic action theory 
example educational database reiter 
fluents ffl enrolled st course student st enrolled course course situation ffl grade st course grade grade st course grade situation situation independent predicates ffl prereq pre course pre prerequisite course course course 
ffl better grade grade grade grade better grade grade 
database transactions ffl register st course register student st course course 
ffl change st course grade change grade student st course course grade 
ffl drop st course drop student st course course 
setting axiomatized follows 
ss consists successor state axioms oss oe enrolled st register st enrolled st drop st oss oe grade st change st grade st change st ap consists action precondition axioms oss register st pr prereq pr oe grade st pr better oss change st rue oss drop st enrolled st initial database finite set axioms initial situation example john sue prereq enrolled sue enrolled john enrolled john formal foundations ff ground simple action enroll sue ff denote situation term ff 
progression ff response ff properties 
ff set sentences situation ff ff ff 
queries ff equivalent suitable formal sense sigma ss ap una ff words ff acts new initial database respect possible evolutions theory ff 
define progression introduce equivalence relation structures 
structures language domains sorts action object 
define ff iff conditions hold 
interpret predicate function symbols take arguments sort situation identically 

agree fluents ff predicate fluent variable assignment oe oe ff iff oe ff clear ff equivalence relation 
ff agrees ff fluents situation independent predicates functions free vary interpretation situations 
particular interpret oss differently 
simple lemma 
lemma ff formula ff variable assignment oe oe iff oe 
definition set sentences ff ff progression initial database ff wrt iff structure model ff iff model ff notice define new database logical equivalence 
allow new database contain second order sentences shall see order logic expressive purposes 
proposition ff progression initial database ff model model sigma ss ap una ff proposition ff progression initial database ff model sigma ss ap una ff exists model 
interpret situation independent predicate function symbols identically 

variable assignment oe predicate fluent oe ff iff oe ff proof model sigma ss ap una ff model ff model sigma ss ap una ff easily seen desired properties 
propositions conclude sigma ss ap una ff agree situations ff ff really characterize result progressing initial database response action ff 
furthermore theorem says new database exists entails set sentences ff theorem ff progression initial database ff sentence ff ff iff 
proof lemma ff 
ff proposition 
theorem informs ff strongest post condition cf 
pednault dijkstra scholten pre condition respect action ff 
pednault shows definition progression general finite set order sentences ff theorem result applies definition 
section shall extend result show ff need set order sentences ff progression order definable glance fact progression expressed order logic may obvious light theorem fact includes secondorder induction axiom 
mentioned section purpose progression equivalent gamma sigma finite set order sentences 
shall construct basic action theory structures properties 

satisfy exactly set sentences ff 
model ff follow definition progression initial database ff ff suppose ff assumption ff set sentences ff ff contradicts definition progression 
proceed construct basic action theory associated structures 
consider theory unary fluent binary fluent action constant symbol constant symbol unary function symbol succ 
una 
ap oss 
ss consists pair axioms oss oe oss oe succ succ oe see intuitive meaning successor state axioms think constant symbol number unary function succ successor function 
holds holds predecessor happen truth value 
purpose keep track truth values previous situation 
construct structure 
standard model arithmetic respect sort object 
domain object set nonnegative numbers mapped number succ mapped successor function 


claim model sa suppose 
satisfies properties 
ss 
similarly successor state axiom succ delta delta delta 
contradiction 
model ff show model sentence sa iff 
skolem theorem cf 
kleene page firstorder structure sentence sa iff succ succ isomorphic isomorphic sort object 
particular 
revise structure 
domains sorts action object interpret situation independent predicates functions 

oss 

sigma una 
truth values fluents truth values variable assignment oe oe standard number oe succ oe 
oe nonstandard number oe succ oe 
notice isomorphic sort object respect peano arithmetic nonstandard number domain domain 
truth values fluents fluent variable assignment oe oe iff oe 

inductively variable assignment oe oe truth values fluents determined successor state axioms truth values fluents oe truth values fluents determined successor state axioms truth values fluents define truth values fluents situation follows fact oss 
clear sa follows satisfy set sentences sa show satisfies successor state axioms 
construction need prove satisfies successor state axioms instantiated action oss oe oss oe succ succ oe show need prove 
follows construction existence nonstandard numbers domain show second need prove succ succ oe cases 
follows construction 

succ succ succ gamma hold 
succ holds 
nonstandard number hold 
furthermore succ nonstandard number hold 
succ oe holds 
satisfies successor state axioms instantiated ss means satisfy sentences sa view discussion example see new database sa captured set order sentences 
progression second order definable show appealing second order logic progression exists 
introduce notation 
finite set ss successor state axioms define instantiation ss action term situation term st written ss st sentence fluent oss st oe st phi st oss oe phi successor state axiom ss formula lifting situation st written st result replacing fluent atom form st new predicate variable arity object example enrolled john enrolled john john john 
lemma simple properties lifting 
sentence mention st st 

sentence st st situation independent sentence 

mention quantifiers situations st state main theorem section theorem ff union una sentence ss ff oss psi ff 
new predicate variables introduced lifting 

psi ff sentence oss ff psi ff instance axiom ap corresponding action ff 

ss ff oss psi ff result replacing oss ff psi ff ss ff 
ff progression ff wrt proof clear sentences ff ff structure 
need show ff iff model ff suppose model ff lemma ff ff lemma ff suppose ff variable assignment oe oe ss ff oss psi ff construct structure lifting defined generally preserve logical equivalence 
example logically equivalent 
fortunately shall lifting sentences preserve logical equivalence 

universe interpret situation independent function predicate symbols identically 

fluent lifted ff oe iff oe 
ss ap 
psi ff fluent variable assignment oe oe ff iff oe ff clear exists 
claim ff cases 
psi ff follows construction fluent variable assignment oe oe ff iff oe ff 
psi ff ap ap oss ff psi ff oss ff 
ss fluent variable assignment oe oe ff iff oe phi ff phi successor state axiom ss psi ff construction oe psi ff oe ss ff oss psi ff fluent variable assignment oe oe oe predicate variable oe ff iff oe phi ff variable assignment oe oe oe predicate variable phi ff construction oe phi ff iff oe phi ff see fluent variable assignment oe oe ff iff oe ff follows ff construction fact una ss ap una proposition model ff transitivity ff ff concludes proof ff defined progressed database 
clear theorem holds initial database finite set second order sentences principle theorem repeatedly applied progress initial database response sequence actions 
new database ff defined theorem unwieldy 
simplified unique names axioms una shall see example 
example consider educational database 
instantiation successor state axioms drop sue ss drop sue conjunction sentences ff drop sue ff ff oss ff oe enrolled st ff ff register st enrolled st ff drop st oss ff oe grade st ff ff change st grade st ff change st unique names axioms sentences simplified oss ff oe enrolled st ff enrolled st sue st oss ff oe grade st ff grade st ap oss ff enrolled sue ss ff oss psi ff conjunction sentences enrolled sue oe enrolled st ff enrolled st sue st enrolled sue oe grade st ff grade st ss ff oss psi ff john sue john john sue prereq sue oe enrolled st ff st sue st sue oe grade st ff st equivalent john sue prereq john john sue enrolled st ff st sue st grade st ff st equivalent john sue prereq john john sue enrolled st ff st sue st equivalent john sue prereq enrolled john ff enrolled john ff enrolled sue ff enrolled st ff st order representation ff una sentences john sue prereq enrolled john ff enrolled john ff enrolled sue ff order progression theorem informs particular progression entails set order sentences ff view may wonder define progression set order sentences ff entailed basically pednault definition side step negative result general progression captured order logic 
reasons 
definition purely syntactic arbitrary quality 
justifies prior assumption progression order definable especially view fact notions example transitive closure 
ideally purely semantic characterization intuitions database progression see leads 
secondly show quite general action theories progression defined terms order entailments may lose information sense order sentence situation ff may consequence gamma ff result general action theories show priori obvious order definition progression warranted 
unfortunately able find result basic theories actions comparable convinced conjecture arbitrary basic action theory arbitrary ground action ff ff set order sentences ff entailed basic action theory ground action term ff order sentence oe oe entailed gamma ff gamma ff true conjecture establish definition progression terms order entailments weak 
important class order sentences weaker definition progression entirely adequate 
specifically addressing projection problem order progression sufficient 
proposition suppose oe sequence ground action terms 
gamma ff ff ff oe ff iff gamma ff ff ff oe ff proof soundness completeness regression described reiter 
specifically sentences form ff ff oe ff reiter shows regression operator determine order sentence oe ff gamma oe ff ff oe ff reiter shows iff una ff oe iff una ae ff ff oe iff definition ff oe iff remarks proof proposition gamma ff oe iff 
progression relatively complete initial databases previous section showed general progression definable second order logic 
interesting important special cases progression order definable 
section consider cases 
say relatively complete respect situation independent propositions set situation independent sentences set sentences fluent form pi pi situation independent formula free variables theorem action theory relatively complete initial database ff ground action term oss ff 
set una situation ff phi ff progression ff 
phi successor state axiom ss 
phi ff result replacing phi ff occurrence pi pi corresponding axiom replacement performed fluent mentioned phi ff 
proof denote set sentences theorem clearly set order sentences ff easy see ff conversely clear theorem ff clearly progressed database ff theorem relatively complete 
theorem repeatedly applied progress relatively complete initial database response sequence executable actions 
notice new database include una situation independent axioms axioms simplify phi ff 
example consider educational database example 
suppose initial database consists axioms john sue better prereq enrolled st st john st sue grade st st sue relatively complete oss ff ff drop john 
axiom enrolled see pi enrolled st formula st john st sue successor state axiom enrolled example see phi enrolled st condition enrolled st true formula register st enrolled st drop st phi enrolled st ff formula drop john register st st john st sue drop john drop st unique names axioms una simplified st john st sue john st unique names axioms simplified st sue obtain axiom ff enrolled st ff st sue similarly grade st ff st sue progression drop john una sentences john sue better prereq enrolled st ff st sue grade st ff st sue progression context free case section consider progression respect context free action theories 
successor state axiom context free iff form oss oe fl fl gamma fl fl gamma situation independent formulas free variables successor state axioms educational database context free 
successor state axiom oss oe broken drop fragile broken repair successor state axiom context free oss oe dead explode bomb close dead assume 
set situation independent sentences sentences form oe sigmaf situation independent formula 
example ontable oe ontable fragile oe broken form 

coherent sense fluent oe oe situation means axioms form encode situation independent sentences situation independent sentence oe oe iff situation oe 

ss set context free successor state axioms 

ff ground action term possible initially oss ff 

fluent consistency condition reiter satisfied ap una oss fl fl gamma successor state axiom form 
consistency condition deserves brief explanation 
pednault schubert reiter provides solution frame problem absence state constraints syntactically transforms pair effect axioms fluent successor state axiom effect axioms assumed syntactic forms oss fl oe oss fl gamma oe general fl fl gamma may situation dependent 
reiter applies explanation closure idea schubert obtain frame axioms oss oe fl oss oe fl gamma successor state axiom oss oe fl fl gamma logically equivalent conjunction sentences consistency condition holds 
notice consistency condition sense violated oss fl fl gamma derive immediate inconsistency effect axioms 
easy verify fluent educational database satisfies consistency condition 
assumptions compute ff theorem construct set initially empty sentences follows 
situation independent 
fluent add sentences fl ff oe ff fl gamma ff oe ff 
fluent oe add sentence fl gamma ff oe ff 
fluent oe add sentence fl ff oe ff theorem afore mentioned assumptions una progression ff proof theorem 
show una una trivially 
suppose show cases 
situation independent 
trivial 


successor state axiom oss ff fl ff oe ff assumption oss ff fl ff oe ff 


successor state axiom oss ff oe fl gamma ff fl ff oe ff consistency condition oss ff oe fl gamma ff oe ff fl gamma ff oe ff 


successor state axiom oss ff oe fl gamma ff oe ff fl gamma ff oe ff oe fl gamma ff oe ff 


successor state axiom oss ff oe fl ff oe ff fl ff oe ff oe fl ff oe ff 
construction proves una set sentences ff theorem ff una prove converse show model una model ff suppose model una construct follows 
domains sorts action object interpret situation independent predicates functions 

fluent interprets follows variable assignment oe oe oe oe oe 
similarly variable assignment oe oe oe oe 
variable assignment oe assigned truth value steps oe iff oe ff 
notice coherence assumption construction welldefined 

interprets oss ap interprets truth values fluents reachable situations ss 
sigma 
done proposition 
clearly show ff fluent suppose successor state axiom oss ff oe ff fl ff fl gamma ff variable assignment oe suppose oe ff 
oss ff successor state axiom cases 
oe fl ff 
implies oe fl ff 
fl ff oe ff model oe ff 

oe fl gamma ff 
oe construction oe ff sentence oe oe suppose 
construction contains fl gamma ff oe ff 
oe ff 
similarly oe ff oe ff 
ff remarks worth noticing 
new database syntactic form process iterated 

computation efficient size bounded sum size twice number fluents 
emphasize results section depend fact initial database certain specific form 
fact result pednault shows context free actions arbitrary progression guaranteed yield finite order theories 
strips strips introduced fikes nilsson logical semantics problematic 
proposals literature lifschitz erol nau subrahmanian bacchus yang 
common reliance meta theoretic operations logical theories capture add delete lists strips operators clear exactly operations correspond declaratively especially applied logically incomplete theories 
sequel shall provide semantics systems terms purely declarative situation calculus axiomatization actions effects 
view strips mechanism computing progression initial situation calculus database effects action 
shall illustrate idea describing different strips mechanisms proving correctness respect situation calculus specifications 
lifschitz define operator description triple sentence order language strips delete list add list sets sentences strips world description set sentences strips strips system consists 
world description called initial world description 
binary relation strips theta strips 
set op symbols called operators treatment strips lifschitz provide relation 

family operator descriptions ff ff ff ff op operator ff associated world description ff successor world description defined ff gamma ff ff successor world description ff admissible iff ff standard entailment relation order language strips case admissibility simply corresponds fact precondition ff entailed initial world description case standard view strips operator ff applicable 
intuitions strips standard prefer leave open interpretation entailment relation 
semantics strips systems indirect define certain classes theories situation calculus show associate suitable strips systems theories 
strips systems associated situation calculus theories account strips assigned semantics 
leaves strips systems associated situation calculus theory semantics strips systems full generality currently coherent semantics anyway 
versions strips strips systems derive apply restricted class situation calculus action theories successor state axioms particular syntactic form define 
successor state axiom strongly context free iff form oss oe delta delta delta am delta delta delta function symbols sort action necessarily distinct 
sequences distinct variables include variables remaining variables existentially quantified respectively 
empty sequence 
notice strongly context free successor state axioms special cases context free successor state axioms defined section 
successor state axioms running blocks world example strongly context free 
successor state axiom context free strongly context free oss oe ontable ontable pickup action parameter 
strips systems shall characterize languages function symbols sort object constants 
consider ground action term ff strongly context free successor state axiom fluent relativized initial situation ff affect truth value fluent successor situation ff 
unique names axioms actions assumption successor state axioms strongly context free relativized axiom logically equivalent sentence form oss ff oe ff delta delta delta delta delta delta tuples constants obtained mentioned ground action term ff 
assume action ff possible initial situation oss ff equivalent ff delta delta delta delta delta delta example blocks world provide running example rest actions ffl move move block block block provided clear block top block ffl move block table block provided clear table block clear 
ffl movetotable move block block table provided clear fluents ffl clear block blocks top state ffl block touching block state ffl ontable block table state setting axiomatized follows action precondition axioms oss move clear clear oss clear clear ontable oss movetotable clear successor state axioms oss oe clear move move movetotable movetotable clear move oss oe move movetotable move oss oe ontable movetotable ontable consider generic ground action move 
corresponding instances fluents clear ontable logically equivalent clear move clear move ontable move ontable generic ground actions movetotable obtain clear clear ontable ontable clear movetotable clear movetotable ontable movetotable ontable strips open world context free strips point departure action theory sigma ss ap una properties 
function symbols sort object second order language possesses constants 

situation dependent sentence ground fluent literal form fluent constants sort object 

contains unique names axioms constants sort object pair distinct constant names sort object axiom 
contains pair complementary literals consistent 

successor state axiom ss strongly context free 

progressing respect ff ground action term ff possible initially oss ff 
fluent consistency condition satisfied 
easy tedious verify fluent example satisfies condition 
keeping intuition strips systems mechanisms progressing situation calculus databases want characterize result progressing effects ground action ff case action theories kind 
done theorem 
set sentences 
initialize situation 

fluent instance successor state axiom add sentence ff 
ground instance add sentence ff tuple constants different 
invoke unique names axioms constants sort object 
add sentence ff recall language expressed 
ground instance add sentence ff tuple constants different 
invoke unique names axioms constants sort object 
theorem resulting set enjoys property una progression action ff 
situation dependent sentences ground literals contains pair complementary literals 
follows serve new initial database purposes iterating progression mechanism 
interpret construction set strips operator 
imagine suppressing situation argument ground literals ask sequence deletions additions ground literals performed situation suppressed version order obtain situation suppressed version situation argument ff suppressed sentences 
deletions additions necessary achieve situation suppressed transformation define delete add lists strips operator ff 
easy see deletions additions applied situation suppressed version yields situation suppressed version fluent instance successor state axiom 
delete sentences 
delete sentences 
add sentences 
add sentences clear define strips system associated operator ff 
language strips situation suppressed version 
initial world description 
ordinary logical entailment world description sentence oe strips oe iff oe 

ff precondition situation suppressed version right hand side equivalence ff situation calculus action precondition axiom 
see section relevant definitions 
take self evident meant formally language obtained suppressing objects sort situation language 
fluent include ff add delete lists literals specified obtaining situation suppressed version knowledge strips variant strips specifically provides incomplete database ground literals provably correct respect logical specification 
example continuing blocks world example read strips operator schema move instances successor state axioms example move clear clear clear clear clear 
clear clear clear 
operator description schemas movetotable obtained way clear clear ontable clear ontable clear 
clear ontable clear 
movetotable clear clear clear ontable 
clear clear ontable 
rcf strips relational context free strips version strips derives action theories form sigma ss ap una properties 
function symbols sort object second order language possesses constants 

contains sentence form fluent delta delta delta notice schemas standing family operators obtained instantiating variables schema constants situation calculus language 
tuples constant symbols sort object 
situation dependent sentences notice initial databases form special cases relatively complete databases defined section 
case permitted case axiom false 
example agent hand initially empty holding false initially block block block 
contains unique names axioms constants sort object 

successor state axiom ss strongly context free 

progressing respect ff ground action term ff possible initially oss ff notice single sentence logically equivalent delta delta delta oe notice positive instances trivially determine sentence 
sufficient represent database form say computational purposes set positive instances claim versions strips suppressing situation argument 
relational databases fact unique names assumption condition defining properties relational database reiter 
relational tables just ground instances fluents 
bear mind logically database consists table axiom unique names axioms 
previous section want characterize result progressing effects ground action ff case action theories kind 
appeal results section 
consider context free successor state axiom fluent relativized initial situation assumption syntactic form equivalent ff delta delta delta delta delta delta delta delta delta different tuples unique names axioms constant symbols sort object sentence logically equivalent ff delta delta delta delta delta delta set sentences 
initialize situation 

fluent add sentence resulting set enjoys property una progression action ff theorem 
syntactic form serve new initial database purposes iterating progression mechanism 
interpret construction set strips operator 
imagine representing situation dependent sentences delta delta delta situation suppressed relational database ground instances 
emphasize representation merely shorthand sentence 
ask sequence deletions additions ground literals performed situation suppressed relational database version order obtain situation suppressed relational version deletions additions necessary achieve transformation corresponding representation define delete add lists strips operator ff 
easy see deletions additions applied yield situation suppressed relational database representation fluent 
delete sentences 
add sentences clear define strips system associated operator ff 
language strips situation suppressed version 
initial world description see section relevant definitions 

sentence oe strips oe iff oe 
world description relational database form fluents sentences mention fluent ground atoms fluent 
translation relational database part full logical form follows consists sentences mention fluent sentences form delta delta delta ground instances fluent 
ff precondition situation suppressed version right hand side equivalence ff situation calculus action precondition axiom 

fluent include ff add delete lists literals specified obtaining situation suppressed relational database representation example consider actions fluents axioms example treat setting instance rcf strips situation calculus specification 
case read rcf strips operator schema move instances successor state axioms example move clear clear clear 
clear clear 
operator description schemas movetotable obtained way clear clear ontable clear ontable 
clear 
movetotable clear 
clear clear ontable 
pednault adl prior literature similar progression semantics strips systems pednault 
pednault relates strips database initial situation situation calculus axiomatization 
interpretation database situation suppressed situation calculus theory distinguishes approach pednault databases order structures 
pednault strips mapping order structures order structures mapping defined addition deletion tuples applied relations structure 
adl pednault generalization strips just mapping structures 
lifschitz strips mapping order theories possibly second order theories mapping effected add delete lists sentences applied theory 
problem adl view strips provide feasible mechanism applying strips operator case database logically incomplete theory strips section 
case model theory mapped adl operator transformed structure set transformed structures represents effect adl operator 
infinitely models finite number plentiful adl unattractive strips mechanism 
contrast focus strips mechanisms operate logical theories operate single sentential representations models 
summary problems progression widespread notion database ai literatures full generality surprisingly complex idea 
explored properties progression related strips systems 
summarize take main contributions 

argued need progressing database perspective strips purposes cognitive robotics 

semantically defined notion progression shown general capture second order logic required 
shown determine second order sentence progression arbitrary finite second order initial database 

explored special cases progression order definable case relatively complete initial databases arbitrary successor state axioms case limited form open world initial database context free successor state axioms 
cases gave efficient procedures computing progression 
hand pednault shown context free successor state axioms initial database arbitrary finite order theory progression need finitely order axiomatizable 

view strips mechanism progressing situation calculus theory semantics best understood suitable situation calculus axiomatization actions effects 
intuition possible formulate various strips systems prove correctness respect progression semantics 
done just different strips systems rcf strips 
connection strips particular interest provides limited form logical incompleteness database 
knowledge strips variant strips specifically provides incomplete database ground literals provably correct respect logical specification 

completely mechanical process obtain strips operators action precondition successor state axioms situation calculus axiomatization domain 
similarly rcf strips 
words purely declarative situation calculus specifications compiled appropriate strips systems 
reiter solution frame problem provides algorithm computing successor state axioms effect axioms specifying causal laws domain modeled 
words describe action precondition axioms domain causal laws 
axioms automatically transformed suitable strips operators domain assuming successor state axioms initial situation right syntactic forms 
results suggests variety topics research 
cases progression done order logic 
case concerns actions finitary effects fluent action changes fluent truth value finite number instances 
special cases progression need explored 
connection etzioni proposed extension strips accommodate sensing actions actions obtain plan execution time information world 
levesque observed resulting planner suffers number limitations drawbacks stemming primarily lack declarative specification system 
happens situation calculus account sensing actions exists scherl levesque 
accordingly possible incorporate sensing actions notion progression generalize strips include actions 
possible prove correctness version strips respect progression semantics rcf strips 

considered systems compute full result progression 
example computational purposes may better compute part progression relevant goals interest 
example blocks world includes fluent colors blocks need progress fluent goals colors 
open problem partial progressions specified computed principled way 

connection rcf strips relational databases section suggests natural generalization strips operators allow arbitrary relational algebra operators just adds deletes defining operator effects 
done appropriate semantics defined terms situation calculus axiomatization relaxes context free restriction successor state axioms section 
connection pednault adl provides just generalized relational strips relational algebra 

sense progressing database ff amounts forgetting initial situation situations reachable ff view progression leads interesting notion means knowledge base forget contents investigated lin reiter 
generous advice feedback wish members university toronto cognitive robotics group yves lesp erance hector levesque daniel marcu richard scherl 
research funded government canada national sciences engineering research council institute robotics intelligent systems 
abiteboul 
updates new frontier 
second international conference database theory pages new york 
springer 
bacchus yang 
downward refinement efficiency hierarchical problem solving 
artificial intelligence 
dijkstra scholten 
predicate calculus program semantics 
springer verlag new york 
erol nau subrahmanian 
complexity domain independent planning 
proceedings tenth national conference artificial intelligence aaai pages 
american association artificial intelligence menlo park ca 
etzioni hanks weld draper lesh williamson 
approach planning incomplete information 
proceedings third international conference principles knowledge representation reasoning kr pages 
fikes nilsson 
strips new approach theorem proving problem solving 
artificial intelligence 
kleene 
mathematical logic 
john wiley sons 
lesp erance levesque lin marcu reiter scherl 
foundations logical approach agent programming 
wooldridge muller tambe editors intelligent agents volume ii proceedings workshop agent theories architectures languages atal pages 
springer verlag new york 
levesque 
planning presence sensing 
technical report dept computer science univ toronto 
levesque reiter lesp erance lin scherl 
golog logic programming language dynamic domains 
journal logic programming special issue reasoning action change appear 
lifschitz 
semantics strips 
reasoning actions plans proceedings workshop pages 
morgan kauffmann publishers 
june july oregon 
lin reiter 
progress database logical foundations 
proceedings fourth international conference principles knowledge representation reasoning kr pages 
lin reiter 
state constraints revisited 
journal logic computation special issue actions processes 
lin reiter 
progress database ii strips connection 
proceedings fourteenth international joint conference artificial intelligence ijcai ijcai distributed morgan kaufmann san mateo ca pages 
lin reiter 
forget 
greiner subramanian editors working notes aaai fall symposium relevance pages 
american association artificial intelligence menlo park ca november 
pednault 
mathematical theory plan synthesis 
phd thesis department electrical engineering stanford university stanford ca 
pednault 
synthesizing plans contain actions context dependent effects 
computational intelligence 
pednault 
adl exploring middle ground strips situation calculus 
proceedings international conference principles knowledge representation reasoning kr pages 
morgan kaufmann publishers 
foo 
williams 
expressibility propositions 
logique analyse pages vol 
reiter 
logical reconstruction relational database theory 
brodie mylopoulos schmidt editors conceptual modelling perspectives artificial intelligence databases programming languages pages 
springer new york 
reiter 
frame problem situation calculus simple solution completeness result goal regression 
lifschitz editor artificial intelligence mathematical theory computation papers honor john mccarthy pages 
academic press san diego ca 
reiter 
proving properties states situation calculus 
artificial intelligence 
reiter 
specifying database updates 
journal logic programming 
rosenschein 
plan synthesis logical perspective 
proceedings ijcai pages 
scherl levesque 
frame problem knowledge producing actions 
proceedings eleventh national conference artificial intelligence aaai aaai press menlo park ca 
schubert 
monotonic solution frame problem situation calculus efficient method worlds fully specified actions 
loui carlson editors knowledge representation defeasible reasoning pages 
kluwer academic press boston ma 
waldinger 
achieving goals simultaneously 
michie editors machine intelligence pages 
ellis horwood edinburgh scotland 
