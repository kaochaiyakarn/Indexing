appears proceedings fourth international working conference dynamic modelling information systems september noordwijkerhout netherlands mobile modular workflow model architecture stefan jablonski digital equipment gmbh ait karlsruhe karlsruhe tel fax mail jablonski dec com 
workflows characterized multiple aspects functional aspect describes executed behavioral aspect tells execute workflow organizational aspect determines agents perform workflow informational aspect defines data flow workflows 
workflow model follows separation various aspects 
major principle workflow model modularity prerequisite reusability extensibility robustness ease 
briefly introduce architecture workflow management system implements various aspects workflow model 
keywords 
workflow management workflow model architecture workflow management system 

design cooperative information systems complex task needs methodological support 
combines methods techniques organization theory behavioral theory decision theory database theory 
techniques necessary order obtain complete formal conceptual model information system 
model necessary order support human understanding system process optimization automated execution support 
modeling information systems focused data related features information systems 
data analyzed order obtain conceptual database scheme dataflow captured mellor 
modeling system dynamics specification processes control flow neglected fairly theory driven practical real world problem modeling petri net approaches 
introduce approach process modeling tailored model business processes office environments 
specifically looking area cooperative information systems processes supposed support collaborative settings 
cooperative information systems characterized main challenges discussed integration different process categories response continuous change requests incorporation new features new control constructs new address university erlangen department computer science vi database systems erlangen tel fax mail jablonski informatik uni erlangen de 
cooperative information systems specified processes relevant executed strictly defined rules loosely defined activities performed merely follow vague guidelines 
challenge cope process categories simultaneously exist concurrently office environments 
example travel claim reimbursement process strictly defined process people act precisely exactly defined rules jablonski 
step process deal negotiation clarify certain receipts accepted 
kind process characterized conversational team 
user friendly system solution support categories processes users switch execution environments order execute 
current application systems characterized rapidly changing business processes 
continuously business processes redesigned order cope changing market requirements 
change management supported model accurately describes business process uniquely presents feature business process 
having fulfilled conditions process maintenance supported optimally 
third characteristic challenge cooperative information systems stems fact models application systems continuously getting complex 
new modeling constructs requested simplify models handy readable 
example new control flow constructs macros demanded describe control flow compact manner 
dynamics cooperative information systems reflected issues discussed requires modular process model 
meyer meyer states modularity software prerequisite called external quality factors correctness robustness extendibility reusability compatibility efficiency portability verifiability integrity ease 
see easily robustness extendibility reusability requirements directly derived preceding discussion cooperative information systems 
goes mentioning factors verifiability integrity ease mandatory modeling approaches 
introduces approach process modeling modular process model called mobile model separates elements application system aspects perspectives functional behavioral organizational informational 
modularity model application system obtained alleviates change management allows customize extend aspects individually meet requirements certain problem areas 
especially extendibility approach allows model application system completely application specific aspects added needed 
main advantage approach principle modularity sustained consistently guarantee advantages modular software mentioned 
approach process modeling workflow management supports feature consistency cf 
section 
part comprehensive project link business process re engineering workflow management wfm investigated 
wfm systems wfmss considered provide execution infrastructure business process reengineering identify new platform process execution distributed environments 
deals artefacts relevant level business process modeling 
mobile name new version abs workflow model described papers 
intended talk pure logic artefacts introduced look logic oriented cf 
section profound logic needed final implementation approach klein 
criteria approach measured logic driven completeness modeling issues ease reusability coherence 
going introduce model example section clarify term process extensively point 
process widely spread term everybody interprets differently 
adopt discussions definition humphrey feiler 
processes defined sets partially ordered steps intended reach goal 
process composed process elements 
fine grained atomic process element process step 
curtis processes characterized aspects perspectives sections discussing aspects introduced context mobile workflow model 
section presents architecture mobile workflow management system deploys model introduced 
section discusses related 
section concludes 

introductory example perspectives process introduced section define people involved process cooperate 
functional aspect declares done behavioral aspect says done organizational aspect denotes informational aspect describes information exchanged cooperating agents 
order give idea aspects introduced act combination discuss example depicted process process travel claim executed 
refined process steps submit travel claim approve travel claim process element client 
process steps implemented applications executable pieces code programs process elements implemented process elements process steps 
process steps submit travel claim approve travel claim implemented program system travel claim system 
order complicate shown refinements process element client 
processes process elements process steps constitute functional aspect 
course execution defined control flow constructs process elements steps 
instance example components process process travel claim executed sequentially 
control flow constructs discussed connection behavioral aspect processes section 
organizational aspect process described agents attached processes process elements process steps 
agents supposed execute particular piece perspective aspect characterization functional processes performed 
behavioral processes performed 
organizational performs processes 
informational information produced consumed processes 
associated 
example manager perform process step approve travel claim financial clerk execute process element client 
fourth aspect introduced section informational aspect defined local data process process element process step data flow connectors process components subcomponents process element 
identification person posting travel claim client id identification trip trip id person wants input process process travel claim 
trip id passed subcomponents process client id transferred process step submit travel claim 
process step submit travel claim travel claim defined identification tc id passed remaining steps process local data variable tc id 
note informational aspect simplified order convey principle idea clearly 
example process travel claim aspects introduced example discussed broadly want give overview execution process organized 
process initiated input parameters transferred subcomponents executed precedence structure defined 
process elements steps determined executed corresponding agents resolved 
notified process elements steps executed 
process elements performed determining components executed firstly process steps executed calling applications associated 

functional perspective workflows processes process elements process steps distinguished probably modeled differently 
reusability hardly support 
just possible reuse process process modifying description concretely converted process element 
reusability possible map processes process elements process steps workflows 
concept needed describe process related elements 
artefact reused arbitrary context 
consequently workflow recursive structure workflow may consist workflows 
approve travel claim submit travel claim client travel claim system fin 
clerk group client manager client process travel claim client cl trip id client id tc id shows workflow process travel claim consists called subworkflows submit travel claim approve travel claim client process travel claim subworkflows 
shown subworkflow client composed subworkflows return approved travel claim client transfer money 
outermost workflow workflow called top level workflow 
workflows containing workflows called composite workflows 
workflows composed workflows called elementary 
applications referenced elementary workflows 
implement functionality elementary workflow 
applications consist programs transactional steps tp monitors command procedures executable piece code called wrapper pieces code accessible wfms 
modeling point view applications regarded specialized form workflow things show interface workflows dealt equally 
main groups applications distinguished legacy applications non legacy applications 
legacy applications characterized fact modified 
inherited past system states treated 
non legacy applications easier cope 
tailored specific needs wfm incorporated workflow 
want discuss workflows applications functional aspect 
publications separate technological aspect covers integration applications workflows bussler jablonski bussler jablonski 
procedures programming languages workflows black boxes signature determined type workflow types parameters externalized 
feature supports reusability workflows absolute requirement modern software development 
objective populate public libraries workflows maximum synthesis reached workflow design tsichritzis 
main classes workflows distinguished prescriptive workflows 
eligible sub workflow instances precedence structure known priori 
descriptive workflows 
instances participating sub workflows known determined processing 
types known priori 
conventional office procedures process travel claim examples prescriptive workflows step execution known advance 
design tasks examples descriptive workflows workflow types needed describe certain problem known concrete way processing adequate workflow instances known 
generally workflow type defined follows workflow type workflow name formal workflow parameters workflow parameter conditions workflow body formal workflow parameters input output parameters workflow type workflow parameter conditions describe conditions fulfilled actual non terminal symbols written small letters terminal symbols written capital letters 
order increase grammar workflow language omit colons semi colons periods 
workflow parameters 
instance describe parameters mandatory parameters optional 
workflow body represents kernel workflow 
aspects discuss workflow body classified sections workflow body functional aspect behavioral aspect organizational aspect informational aspect various parts workflow body refined stepwise sections 
prescriptive workflows prescriptive workflows specified declaring subworkflow application instances participate workflow 
done functional aspect functional aspect subworkflows workflow type workflow variable constraints constraint name parameter defines type subworkflows specified obviously multiple subworkflow instances type declared workflow 
subworkflow instance restricted constraints constraints 
typical constraints time limits subworkflows define long execution subworkflow may take constraints allow certain subworkflows start specific time day 
relevant want show applications defined elementary workflows technological aspect applications application type application variable constraints constraint name parameter case technological aspect subsection workflow body 
example definition workflow type process travel claim respect functional aspect shown workflow type process travel claim 
subworkflows submit travel claim submit travel claim approve travel claim approve travel claim client client interesting notice process travel claim new workflow type specified submit travel claim approve travel claim client existing workflow types referenced new workflow specification 
commercial wfmss unfortunately possible define new workflow type definition new workflow type 
perspective software engineering advisable 
descriptive workflows sort processes design characterized knowing knowing exactly detail 
descriptive workflows supposed cope problem 
examples clarify need descriptive workflows negotiations modeled workflow types suggesting asking answering agreeing disagreeing 
brainstorming session workflow types articulate idea articulate assumption essential 
workflow types sufficient set framework negotiations brainstorming sessions respectively known instances needed eventually order model concrete scenario 
going negotiations need workflows type disagreeing cumbersome negotiations unfortunately workflow type agreeing cf 
section 
descriptive workflows characterized knowing workflow instances needed eventually able perceive types instances needed principally cf 
example negotiation 
modeling approach discussed vague fuzzy doubt principal argue neglect completely 
important arguments favor approach consistency tracking 
set workflow types principally consistency sustained better workflow types excluded 
tracking workflow execution easier workflow types applied know 
intensional modeling beech promises suitable approach descriptive workflows 
contrast prescriptive workflows modeled extensionally extensions instances defined priori 
intensional modeling provides intensional framework workflow execution workflow types needed solving specific problem declared statement goal purpose workflow 
mandatory control flow restrictions specified cf 
section tsichritzis logical foundation descriptive workflows 
demonstrates descriptive workflows specified 
subworkflows workflow negotiate specified type level 
multiple instances created execution 
control constructs defined type level obeyed instances 
specification descriptive workflow specify descriptive workflows applications functional aspect technological aspect extended sections intensional framework descriptive workflow modeling defined rules instantiation rule says instances derived declared workflow types control flow rule says instances put precedence structure defined control flow constructs 
suggest answer ask commit agree participants negotiate functional aspect subworkflows workflow type workflow variable constraints constraint name parameter subworkflows workflow type description constraints constraint name parameter technological aspect applications application type application variable constraints constraint name parameter applications application type description constraints constraint name parameter subworkflow application description need purpose attached description 
supports process finding right workflow instances perform certain function 
fer tsichritzis approaches specify intensional artefacts goals described mandatory features shown 
case descriptive workflows applications constraints applied instances created 
example specify workflow type negotiate described section workflow type negotiate 
subworkflows suggest commit agree ask answer 
behavioral perspective interdependencies interrelationships subworkflows behavioral aspect characterized control flow synonymously flow control 
flow control determines workflows performed 
flow control specified terms execution rules determining sequence perform workflows 
note control flow specified subworkflows common 
term workflow subworkflow discussion interpretation unique 
flow control determines resources executing workflows cooperating collaborating 
wide range cooperation collaboration respectively 
prescriptive descriptive control types distinguished 
tightly fixed forms control define way workflows executed cooperation collaboration takes place loosely described forms control merely establish ordering framework workflows 
framework opens degrees freedom workflow processing 
actual execution workflows comply framework 
section introduce meaning graphic textual representation flow control statements 
section semantics flow control statements discussed 
section presents comprehensive example 
control flow types flow control specified behavioral aspect workflow definition 
concrete syntax behavioral aspect control flow control expression control expression control predicate control term control expression control term control predicate control construct control name parameter control term control expression workflow variable workflow variable control construct repeat 
major features derived syntax firstly multiple courses processing may specified defining multiple control flows control expression 
control flows performed independently 
multiple control expressions combined logical conjunction 
secondly control construct introduced remainder subsection associated control function control name defines constraints control construct 
instance typical constraint enforces control construct executed time limit 
case sequential execution workflows means workflow starts execution specified time limit terminated execution regarded having failed 
distinguish prescriptive descriptive flow control 
case prescriptive descriptive flow control applicable prescriptive descriptive workflows cf 
section vice versa 
types workflows target types flow control 
prescriptive flow control basic forms prescriptive flow control serial execution alternative execution parallel execution 
explained subsection 
serial execution serial execution restrictive form ordering subworkflows 
exclusively course processing possible strictly sequential execution 
types prescriptive workflows bubbles arcs notation common popular description workflows presenting sample workflows terms notation 
shows example workflow witch enforces strictly sequential processing subworkflows execution sequence bc mandatory 
notation denote history execution notation similar notation introduced bernstein describing execution histories transactions database systems 
cond script version example workflow type 
control flow convenience language transformation valid workflows sequencing associative allow generalize notation 
multiple workflows specified brackets express multiple sequential relationships multiple independent control flows 
transformation supported alternative execution order processing strictly determined workflows alternative execution branches specified alternating courses mutually exclusive joined eventually 
conditions attached alternative branches logically disjoint constructs programming languages 
depicts example workflows alternative courses execution 
executed depending condition cond evaluated true false 
cond problem specific condition alternative 
workflow type 
control flow cond looping iterative processing sequences workflows enabled alternative execution 
course construct goto construct known programming languages necessary 
intend introduce construct user interface internally 
popular forms loops self explanatory control constructs introduced cond repeat cond represents empty workflow 
support extended notation control construct alternative execution simplify specification complex control flows cond cond cond cond cond cond cond parallel execution third form prescriptive execution control parallel execution introduced 
case workflows activated concurrently 
shows example subworkflows composite workflow executed parallel 
workflow type 
control flow parallel execution associative transformation valid workflows generalized notation parallel execution defined descriptive flow control specification descriptive flow control different types conditions introduced temporal existence conditions 
elaborated klein approved attie types dependencies adequate necessary describe usual protocols synchronization computing agents 
case agents materialized workflows 
contrast prescriptive flow control specification results unique concrete template processing descriptive flow control merely characterizes equivalence classes processing 
temporal conditions denote temporal relationship workflows existence conditions describe mandatory existential dependencies 
temporal condition deadline type temporal flow control form workflow type 
control flow called deadline workflow respect time 
statement expresses executed processed 
forbidden executed parallel 
rules describe permissible executions hasn started executed 
hasn started terminated executed 
need executed 
need executed 
sequences execution valid bc 
empty sequence allowed deadline rule demand execute participating workflows 
recall modeling construct deadline express dependencies workflows 
mixed temporal constraint bearing name 
construct denotes specific point time delimits occurrence events general execution workflows special case 
regarded artefact belongs execution policies cf 
section 
workflow executed temporal deadline regarded having failed 
totally different language construct indicate workflow execution failed workflows just executed specific relationships workflows 
workflows called disabled 
disabled different having failed cf 
section 
specification descriptive control produces class equivalent valid processing scenarios 
graphical notation deadline equivalent sequences execution fulfill deadline semantics shown 
alternative execution sequences form called set valid execution sequences deadline condition 
valid sequence shows piece semantics expressed deadline condition 
sequences show complete semantics temporal condition 
demonstrates sequences alternatives parallelism available declaration workflows drastically get cumbersome 
observation applies forthcoming discussions delay existence conditions 
condition type deadline generalization deadline construct defined 



execute arbitrary starts execution 
sample example academic area explains deadline control flow construct 
somebody wants doctorate apply admittance 
withdraw application rejected examining board far begun oral examination meaning execution sequences obvious 
see sequences prevented 
adequate control function cf 
section additionally defined executed executed 
temporal condition delay delay second form temporal flow control workflow type 
control flow workflow delayed workflow finished executed 
means processed executed finished decides execute 
need executed 
need executed 
order know workflow processed specific variable see section details 
sequences execution valid bc 
notation delays delay condition shown 
condition type delay deadline delay conditions look equal semantics reasons coming existence significantly different cf 
section 
case delay executed long indicating condition holds 
condition dependent application oriented matters directly workflow case deadline situation quite different occurrence determines delimits abruptly chance executed 
application delay condition start procedure airplane discussed workflow 
workflow stands take workflow models boarding procedure 
boarding terminated take take place bc 
boarding take place example non intended intermediate take occur having wait boarding case boarding disabled 
case flight canceled bad conditions take done boarding finished 
flight canceled boarding started executed 
generalized notation delay control flow construct derived 




delayed executed promised execute performed 
existence condition existence conditions formulated follows workflow type 
control flow execution enforced executed 
disabled executed disabled 
executed execution optional 
bc cb permissible sequences execution 
depicts graphic notation existence conditions 
condition type existence example workflow represents scenario dealing demonstration prototype 
workflow comprises done order set demonstration 
workflow stands matters necessary announce demo 
principally matter announcement takes place firstly demo set firstly bc cb 
obvious demo set announcement 
announcement demo prepared 
example shows outcome existence condition dependent ability execute workflow knowledge executed allows initiate execution workflow knowledge reflected system 
generalization existence control flow construct shown 



execute executed 
examples primitives introduced nested replacing workflow placeholder control construct 
example substituted deadline dependency substituted parallel execution execution semantics follows deadline construct performed execute parallel 
note workflow subworkflows level 
example placeholders delay primitive substituted respectively execute existence relationship performed workflows performed 
set prescriptive descriptive control flow constructs introduced far decent basis definition additional problem specific control flow constructs macros cf 
section 
control flow specification descriptive workflows descriptive workflows workflow instances workflow types referenced control constructs 
instances types generated order implement functionality workflow 
control defined workflow types instances types obey control order specified type level 
example instances workflow type workflow type obey control flow specification example model fragment sample workflow depicted 
generally existence dependency defined subworkflows ask answer negotiate workflow type negotiate 
control flow ask answer 
questions asked answers obey existence dependencies specified 
control specification type level descriptive control types allow specify unstructured forms interactions negotiation 
conveys global idea accomplished 
macros having provided basic set primitives control flow specification kinds problem specific control types formulated 
want examples 
example called skip macro introduced 
means workflow skipped certain condition holds 
cond defines semantics skip macro 
control flow construct parallel execution motivates interesting language construct regarded special case parallel execution 
assume workflow executed multiple times necessarily sequentially concurrently 
way execution achieved loop way execution new construct introduced 
appropriate notation look 
executed problem specific condition prescribes hardly expressed dot notation 
language construct form execution called repetition 
appropriate notation repetition cond 
depends implementation flow control upper lower bound repetition specified 
implementation dependent instances workflow generated 
restrictive types implementation allow generate instances execution repetition dynamic implementations allow generate new instances execution 
cond generally denotes condition function controlling going instantiated 
things cond related number instances created time frame delimits creation instances 
example justifies meaning replication construct assembly different parts ordered 
hard determine priori different parts needed assembly different stocks vary 
part ordered order part workflow called 
done loop parts ordered sequentially unnecessarily extends latencies 
waste time bother personnel block ordering parts 
obvious easily situation modeled repetition construct natural way execution time saved 
application specific control flow constructs built basic set control flow constructs introduced 
example means workflows workflows executed interesting control flow construct 
execute workflows arbitrary order sequentially powerful control flow construct 
note main advantage macros simplification model application system application specific compact control flow constructs shall reduce modeling effort drastically 
semantics control flow types state transition diagrams workflows order describe semantics execution model workflows state transition diagrams 
states workflow execution introduced workflow states listed associated executed workflow executed 
note execution happens atomically timely extension fail 
needed simplified discussion model 
disabled workflow permitted executed 
blocked workflow currently executable 
enabled workflow ready executed 
assume workflow states enabled disabled blocked executed cf 

issuing operation enable state transition blocked enabled happens 
disable sets state workflow enabled blocked disabled 
execute transforms state workflow enabled executed 
blocked sets workflow state enabled back state blocked 
mentioned operations permissible ones applicable situations described 
setting state workflow executed causes instantiation workflow 
disabled executed final states 
state transition diagram workflows basic version notice introduced states sufficient showing basic semantics model explaining implementation issues timely extension workflow execution taken consideration refine state executed operation execute 
operation split operations start finish recommended add operations pause resume order achieve handy system 
new operations requires new states started finished paused 
depicts extended state transition diagram workflows 
state finished introduced executed longer final state finished replaces 
state transition diagram workflows extended version problem specifically operations added 
error recovery reflected complete version state transition diagram workflows 
blocked disabled executed enabled block execute disable disable enable blocked disabled started enabled block start disable disable enable paused finished pause resume finish semantics specification illustrate semantics control constructs introduced section going show eligible state transitions occur processing control constructs 
semantics diagram consists parts middle part workflows states state transitions depicted 
top diagram user actions shown bottom part system actions described 
user action involved system actions occur instantaneously 
triggered user action initiated time slot 
time proceeds left right 
order keep diagrams simple readable alternative execution sequences depicted separate diagrams 
assume compound workflow consists subworkflows going executed 
order simplify description simplified state diagrams workflows cf 

subworkflows workflow disabled executed final state processing workflow terminates 
serial execution initially workflow enabled 
having started enabled automatically 
processed workflow terminates 
alternative execution cond firstly blocked 
depending condition cond enabled system automatically executed eventually 
workflow disabled automatically 
parallel execution workflow workflow execute execute independently 
enabled execute disabled blocked user action system action enable execute executed enabled execute disabled blocked user action system action cond enable disable executed enabled execute disabled blocked user action system action cond enable disable executed enabled execute execute disabled blocked user action system action executed deadline workflows skipped disabling 
workflow executed workflow executed disabled automatically system 
enabled execute disabled blocked user action system action executed execute enabled disable disabled blocked user action system action executed execute enabled execute disabled blocked user action system action executed disable enabled disable disabled blocked user action system action executed disable enabled disable disabled blocked user action system action executed execute enabled disabled blocked user action system action executed disable disable enabled disabled blocked user action system action executed disable execute delay pragmatic point view absolutely significant difference deadline construct delayed workflow executed knowing delaying workflow disabled executed 
disabled executed possibly execute 
existence case existence conditions new feature model introduced 
existence condition says execute executed 
means executed enabled execute disabled blocked user action system action executed execute enable enabled disabled blocked user action system action executed disable enable execute enabled disable disabled blocked user action system action executed execute enable enabled disabled blocked user action system action executed disable enable disable enabled disable disabled blocked user action system action executed execute enabled disabled blocked user action system action executed disable enable enabled execute disabled blocked user action system action executed execute enable execute enabled disable disabled blocked user action system action executed disable enabled disabled blocked user action system action executed disable disable executed executed eventually 
existence condition imply time order execution workflows 
order capture semantics modeling means extended 
introduce execute 
order express workflow executed promised execute eventually 
case executes justified existence 
scenario promised execute eventually finished 
executes executed eventually 
prescribe achieved implementation guarantee 
example subsection demonstrate comprehensive example consists prescriptive descriptive elements 
purpose example set meeting process initiated manager 
preparing step performed secretary collecting dates vacant meeting rooms 
potential participants meeting negotiate date location 
participants agreed date location room reserved secretary participants invited 
meeting data md exchanged workflows 
contain information meeting place date potential participants 
example shows prescriptive workflows searching room reserving pretty loosely structured descriptive workflows needed simultaneously scenario 
specification step negotiate demonstrates workflow type declarations order build framework negotiation 
instance somebody making commitment vague suggestion follow question asked answer follow 
note statements valid pairs instances suggest commit belong topic 
course multiple suggest commit pairs created called talk different topics 
pairs independent 
notice bubbles node negotiate representing workflow types instances 
potentially arbitrary number instances generated order solve problem agreeing date place meeting 
example setting meeting example nicely demonstrates advantages approach 
structured negotiation oriented types processes modeled framework 
usually different systems wfms conferencing system required implement application scenario described 
account types processes share data contribute goal set meeting integration types systems extended wfms proposed te participants reserve room prepare secretary setting meeting secretary secretary suggest answer ask commit agree participants manager negotiate advantageous 
side effect integration user deal interface interface extended wfms supports user acceptance 

organizational perspective far elaborated workflow functionally structured workflow execution controlled 
investigate organizational issues section 
particularly tackle problem execute workflow 
fundamental issues discussed bussler bussler jablonski bussler jablonski detail organizational issues realm process engineering comprehensive manner 
major organizational concepts introduced organizations notification synchronization organizational policies 
altogether facilitate association actors tasks workflows need executed 
organization organization basic concept enactment organizational aspect 
principle absolutely workflow independent exists wfms deployed 
describes entity type entity instance enterprise 
organization built organizational structure organizational population 
able anticipate organizational structures relevant enterprises support definition arbitrary organizational structures 
propose general organizational objects organizational relationships describe 
kinds organizational objects distinguished agent types non agent types 
typical examples agent types humans employees mechanical machines server processes regarded agent types 
non agent types characterized grouping effect 
departments divisions roles task force examples types 
organizational relationships interrelate organizational objects 
examples organizational relationships member plays role manager assigned 
organizational objects organizational relationships characterized specific properties 
things context workflow execution capabilities managers interest important know particular manager allowed approve local international travels 
interesting property organizational relationship valid 
example assignment task force valid long profit certain level 
fill organizational structure defining instances altogether called organizational population 
language constructs specify organizational structure organizational population 
organization organization name organizational object types object type name organizational relationships relationship type name organizational object instances object type name object instance name organizational relationship instances relationship type name relationship instance name note specification organization part workflow specification 
example define organizational object type manager declare list people instances object type 
organization organizational object types manager organizational object instances manager lynn bryan joseph retrieve agents organization called agent selections defined 
function operating organization returns active elements organization perform certain task 
example managers agent selection retrieves agents eligible play role manager group selects agents belong group composed agent selections consists multiple agent selections connected set operators 
instance managers group selects managers group simplified language construct facilitates definition agent selections agent selection agent selection name formal agent selection parameters returns agent selection implementation scope define exactly agent 
just want mention expression consist multiple combined set operators program code retrieves directly agents organization repository 
notification synchronization order inform agents notification provided bussler jablonski bussler jablonski 
notifications contain indications order execution context clear resource 
notifications organized called lists 
agent associated multiple lists 
maintain list role able play 
entry appears list associated action performed 
means execute application authorize initialize composite workflow 
different situations context different workflows specialized notifications 
example recommended synchronous notification time critical 
simplified language construct specify different forms notification agent notification agent name notification name description going details notification name describes specific form notification mail 
description defines form notification applied 
see normally agent notified 
items supposed executed agent knows anybody received corresponding entry list 
specific synchronization mechanism take care items synchronized correct number agents execute particular piece bussler jablonski bussler jablonski 
examples shed light issue synchronization 
scenario multiple members accounting department informed particular task workflow execution due 
financial clerk supposed perform probably clerk responded fastest request 
clerk decided corresponding item erased lists clerks notified 
organizational policies able define organizational policies 
organizational policy relates notification synchronization workflow 
way agents determined eligible responsible execute workflow 
due complexity omit complete syntax organizational policies 
merely want say organizational policy agent selections notification synchronization conditionally assigned workflows 
example partially show agents sales department determined allowed sign project contract small project budget manager sales dept vp sales dept 
project small manager sales department eligible sign contract corresponding vice president vp sign 
example shows parameters actual context workflow execution budget organizational policies 
actual context information historical information important organizational policies 
allows express workflow executed agent executed workflow days ago example 
note far defined context organizational polices happened externally definition workflow 
important reasons bussler jablonski 
better reusability workflow definitions organizational policy definitions security important issues 
specification workflow declaration organizational policies allowed 
organizational policies independently specified 
policy server cf 
section take additional information optionally assign right organizational policies 
workflow definition extended language construct organizational aspect organizational policies policy name parameter want give examples organizational policies specifically discuss versions agent assignments workflows 
primitive directly assigns agents workflow 
particular section organizational policies get user linda get user bryan assigning agents linda bryan workflow denotes workflow performed 
feasible principal solution pretty inflexible 
people agents change status assignments workflows revisited valid 
example agent left assignments directly agent updated 
check assignments validity time consuming cumbersome task cause severe integrity violations 
overcome drawbacks stemming static assignment agents roles introduced 
roles attached workflows expressing workflows executed agents able play roles attached 
specific scenario workflow executed role secretary 
agents currently able play role permitted perform workflow 
role assignment resistant changes organization 
example case person qualified secretary leaves workflow descriptions referring secretary role changed persons able play role 
roles sufficient cope situations agent assignments tasks 
organizational policies comprise conditional assignments relate historical actual execution information powerful express important application scenarios 

informational perspective informational aspect processes deals data production data consumption workflows data flow workflows 
refer jablonski comprehensive discussion data flow distributed systems 
area wfm classes data distinguished control data production data 
production data exist wfm control data come existence deployment wfms 
production data comprise data essential application area 
example travel claim forms cad drawings production data 
control data minimal set data exchanged workflows order indicate production data set workflow applications execute 
control data pointers production data applications called workflows 
example elementary workflows control data pointers cad drawings exchanged indicating applications called elementary workflows cad drawings 
introduce language construct declare informational aspect workflow informational aspect local variables data type data variable data flow pre conversions conversion name parameter workflow variable parameter post conversions conversion name parameter workflow local variables defined local variables 
actual calling parameters workflow available functions subworkflows referenced inside workflow 
data flow defined extra section data flow explained examples 
data flow occurs subworkflows subworkflows 
data flow subworkflow takes place subworkflows local data surrounding actual parameters 
depending data input output data subworkflow data transmitted subworkflow subworkflow back 
example demonstrates typical situations workflow type workflow type integer integer 
subworkflows workflow type workflow workflow type workflow local data integer string ss data flow workflow ss workflow ss workflow type workflow type integer string 
workflow type workflow type string integer 
see data flow occurs workflow type workflow workflow workflow type 
data flow workflow workflow ss 
shown far meaning purpose conversion name header conversion function 
need conversion functions adjust data exchanged different workflows 
instance workflows want exchange budget data 
workflow counts budget second workflow uses dm currency 
conversion function executed workflow convert budget computable workflows 
see data exchanged super subworkflow subworkflows 
trip id transmitted surrounding workflow subworkflows 
tc id passed subworkflow submit travel claim subworkflows approve travel claim client 
interesting effects data management realm wfm impact control flow 
illustrate observation consider workflows workflow workflow belong independent top level workflows 
assuming workflows access data element exclusively interdependence workflows created 
exclusive data access enforces serialized execution workflow workflow 

implementation section introduces architecture mobile workflow management system 
distinguish build time architecture section run time architecture section 
refer bussler jablonski schuster details architecture studied 
currently skeleton mobile wfms implemented components implemented black boxes defined interfaces functionality 
components control server policy server implemented 
subsequently going implement remaining components 
build time architecture build time architecture consists major components mobile build time area mobile repository 
mobile build time area composed subcomponents workflow definition organization definition data function definition 
workflow definition workflows designed graphic script level applications defined wrappers written programs macros control flow constructs specified 
discussed section definition organization separated definition workflows 
enterprises presume organizational database available 
module organization definition maintain link preexisting database mobile repository 
ideal environment data functions organized global dictionary 
elements dictionary available wfms 
ideal infrastructure normally provided separated subcomponent define data functions order prepare link global dictionary 
mobile build time architecture mobile repository regarded huge class library stores workflow relevant information 
having repository available specification new workflow resembles configuration step programming step 
shows specification new workflow type take place 
repository supports reusability mobile artefacts significantly 
specification mobile workflows mobile class libraries run time architecture mobile run time architecture consists major blocks mobile kernel mobile shell altogether define mobile execution engine 
controller component mobile kernel interprets workflow specifications stored mobile repository represents communication medium mobile build time architecture mobile run time architecture 
mobile kernel responsible drive execution workflows 
evaluates workflow descriptions order workflow definition mobile build time area organization definition function data definition mobile repository submit tc approve tc client manager client tcs fi ll main submit tc delete approve tc roles store resources applications workflows main main main manager client engineer secretary employee muller muller miller clark schneider smith maier 
tcs 
find workflows execute 
mobile kernel surrounded mobile shell 
consists multiple servers provide functionality needed execute aspects mobile workflow model 
policy server resolves roles policies determines agents workflow execution 
application server links application programs executed context elementary workflows 
data server provides connection external data management systems order link control data production data 
notification server handles dialogue kernel agents lists agents notified kernel notified agents intentions 
synchronization agents required synchronization server called 
execution workflows starts determination subworkflows executed 
subworkflows interface data transmitted 
policy server called order find execute workflow 
notification server informs agents upcoming tasks synchronization server coordinates agents 
subworkflow finished controller determines subworkflows executed terminates execution 
subworkflows applications called elementary workflows 
mobile run time architecture 
related section cite related covers broad spectrum different approaches 
course comparison approaches approach introduced pretty uneven approaches emphasize aspects fundamental 
intend compare approach approaches tackle process modeling want compare approaches deal process modeling process execution 
approach 
model organizational information system consists workflows processes positions persons users organizational groups things 
elements aiming functional organizational aspects process modeling 
approach promising workspace list notification server policy server application server controller mobile shell program agent agent agent data server workspace list synchronization server mobile repository program program workspace list workspace list bottleneck limitation predefined set objects available reconstruct problem space 
contrast approach allows introduce define arbitrary user defined objects expressing organizational issues defining behavior 
instance reports relationship relate objects organizational groups 
particular application area requires relationship organizational objects support 
observation applies jablonski 
nicely copes integration existing applications workflows informational aspect process modeling considered 
tackled static way 
organizational aspects considered 
behavioral aspect limited prescriptive courses processing 
workflow model described model group communication processes 
represents simple powerful model workflow management 
lacking structured way workflow definition nesting reuse workflows issue 
control aspects modeled condition action pairs definition behavior pretty cumbersome simple cases serial execution expressed 
logical correctness specification difficult proof 
organizational point view roles known 
defined separately independently workflow violate security bussler 
interoperability workflows designed independently possible roles differently workflows 
interesting approach process modeling 
relationship domain processes business processes enterprise workflow shown nicely 
model enterprise workflows equal workflows introduced procedural rules describe control flow workflows 
called functional entities represent resources executed pieces 
allow specify descriptive types control flow 
specification policies possible limited manner 
number approaches wfm literature mccarthy sarin 
approaches called wfms merely deal behavioral aspect processes breitbart georgakopoulos rusinkiewicz 
approaches extended transaction management put category wfm attie klein 
prefer sustain distinction approaches wfmss 
see close relationships fields want clearly separate 
agree mutual leverage fields seen jablonski 

outlook detailed functional behavioral organizational informational aspect mobile workflow model 
briefly architecture mobile workflow management system mobile workflow model 
want emphasize modularity main feature model extendibility robustness ease qualities achieved 
implemented prototypes build time run time architecture mobile workflow management system 
utilize knowledge gained developing mobile various customer projects 
interesting realize applying experience specifically strictly principle modularity eases process finding workflow model workflow architecture specific problem scenarios commercial wfms products projects 
steps complete implementation mobile investigate issue reliability context mobile investigate link business process modeling workflow modeling 

attie singh rusinkiewicz sheth 

specifying enforcing intertask dependencies 
proc 
th vldb beech 
intensional concepts object database model 
proc 
oopsla pp 
bernstein hadzilacos goodman 

concurrency control recovery database systems 
reading ma addison wesley 
breitbart 
schek sheth weikum 

merging application centric data centric approaches support transaction oriented multi system workflows 
sigmod record vol 

bussler 
capability modeling 
proc 
international conference enterprise integration modeling technology hilton head sc usa bussler jablonski 

approach integrate workflow modeling organization modeling enterprise 
proc 
third ieee workshop enabling technologies infrastructure collaborative enterprises wet ice wv bussler jablonski 

implementing agent coordination workflow management systems active database systems 
international workshop research issues data engineering active database systems houston tx 
curtis kellner 

process management 
communications acm vol 
pp 


workflow model 

ed research networks distributed applications elsevier science publishers 
northholland amsterdam pp 
georgakopoulos hornick manola brodie 

extended transaction environment workflows distributed object computing 
ieee data engineering vol 
hsu 

execution model workflow management system 
proc 
workshop high performance transaction processing systems asilomar ca 

extended transaction processing dependency rules 
proc 
ride ims vienna 
humphrey feiler 

software process development enactment concepts definitions 
tech 
rep sei tr 
pittsburgh software engineering institute carnegie mellon university 
jablonski 
data flow management distributed cim systems 
proc 
rd international conference data knowledge systems manufacturing engineering lyon france pp 
jablonski 
transaction support workflow management 
proc international workshop high performance transaction systems asilomar ca 
jablonski ruf 

event oriented management function data distributed systems 
proc 
nd international working conference dynamic modeling information systems washington usa pp 
fer 
framework version cooperation control 
proc 
nd symposium database systems advanced applications dasfaa tokyo japan 

database query language processing preliminary data cooperating groups oberweis 
eds proceedings btw springer verlag pp 


processing dynamic interactions cooperative databases 
proc 
th annual hawaii international conference systems sciences hicss 
klein 
advanced rule driven transaction management 
proc 
ieee compcon 
european development enterprise integration part overview 
proc 
international conference enterprise integration modeling technology hilton head sc usa mccarthy sarin 

workflow transactions inconcert 
ieee data engineering vol 
meyer 
object oriented software construction prentice hall englewood cliffs nj 
organizational integration information system design process 
proc 
th conference advanced information systems engineering manchester uk schuster jablonski bussler 

client server architecture implementation workflow management systems 
proc 
international conference parallel distributed information systems austin texas 
sheth rusinkiewicz 

transactional workflows 
ieee data engineering vol mellor 
object oriented systems analysis modeling world data prentice hall englewood cliffs usa 
tsichritzis nierstrasz 
application development objects 

eds information technology organizational systems northholland amsterdam pp 
yourdon 
modern structured design prentice hall englewood cliffs 
