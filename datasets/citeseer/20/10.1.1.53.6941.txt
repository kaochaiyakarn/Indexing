information systems deriving incremental production rules deductive data stefano ceri jennifer widom dipartimento di elettronica informazione department computer science politecnico di milano stanford university piazza leonardo da vinci stanford ca milano italy usa ceri polimi widom cs stanford edu show production rule mechanism provided active database systems quickly easily implement logic rule interface deductive database systems 
deductive rules specify derived relations datalog built predicates stratified negation deductive rules compiled automatically production rules 
materialized approach derived relations stored database production rules automatically incrementally propagate base relation changes derived relations 
non materialized approach production rules compute derived relations demand 
considerable amount research focused adding rules database systems 
divisible areas deductive database systems active database systems 
deductive database systems logic programming style rules provide powerful user interface provided database query languages cgt min ull 
active database systems production style forward chaining rules provide automatic execution database operations response certain events conditions hw 
rapid emergence production rule capabilities research prototypes number commercial database systems upcoming sql standard believe active databases widely available practice 
believe production rules database systems treated low level mechanism implement higher level functionality cer 
show production rules easily implement high level interface provided deductive databases 
possible quickly support deductive capabilities widely available systems 
deductive databases distinction base extensional data derived intensional data 
assume data stored relations 
base relations created manipulated users usual way 
derived relations defined deductive rules specified language analogous datalog ull framework includes built predicates stratified negation 
derived relations materialized case partially performed authors ibm almaden research center san jose ca 
milano partially supported esprit project idea 
stanford partially supported reid polly anderson faculty scholar fund equipment ibm 
stored database kept consistent base relations defined non materialized case stored database computed base relations needed 
framework deductive rule compiled automatically set production rules 
main result concerns materialized derived relations 
context generated production rules triggered changes base relations may affect value derived relations productions rules automatically modify derived relations accordingly 
modifications performed incrementally exploiting available information base relation changes avoiding complete recomputation derived relations 
adapt approach derived relations 
context generated production rules triggered queries referencing derived relations production rules automatically compute necessary derived relations 
known optimization techniques computation magic sets br incorporated generated production rules 
materialized approach generated production rules encode specific strategy computing derived relations framework easily adapted different strategies 
strong similarity strategy generated production rules semi naive evaluation cgt ull 
semi naive evaluation incremental method relies deltas changes previous database state current state 
database production rule languages provide mechanism accessing deltas directly efficiently 
contributions provide automatic method exploiting access deltas provided production rules eliminating need hard code access deductive rule processing 
related substantial bodies active deductive databases limited research date focused connecting approaches 
shown deductive databases extended support active behavior bj hd tan relates converse problem considered 
rdl system forward chaining production style rule processing implement deductive database language 
goal rdl efficient deductive database system 
underlying implementation rule triggering rule language deductive 
case illustrate deductive rules supported existing facilities active database system 
considerably improves extends initial area wid 
approach take materialized derived relations production rules propagate base relation changes derived relations incrementally 
research considered problem incrementally maintaining derived data includes ap dt gms hd ny uo 
similar approaches applied integrity constraint maintenance nic cw incremental nature computation results assumption previous database state satisfies constraints 
pioneering incremental maintenance deductive data ny proposes approach materialized derived relations counter maintained derived tuple encoding number derivations 
algorithms counters efficiently maintain derived relations base relations modified 
similar approach derivation counting described gms 
dt actual derivations tuples encoded auxiliary information stored derived relations 
changes base relations considered respect auxiliary information propagated derived relations 
contrast approaches method require auxiliary information derived relations maintained incrementally behavior provided production rules 
absence auxiliary information enables maintain derived relations active database rules modifications underlying database system 
methods gms hd require auxiliary information papers propose algorithms effectively undo redo derivations similar effect production rules materialized derived relations unique derivations 
uo special internal events defined describe transitions derived relations rules incremental evaluation events 
ap technique belief revisions procedures defined deducing effect insertions deletions data rules database represents current belief 
context procedures ap different approach similarities treatment stratification 
cw describe method deriving production rules incrementally maintain materialized views views specified subset sql 
overlap sql views derived relations specified datalog overlap methods cw methods 
particular views defined safe cw correspond derived relations unique derivations simplifications introduced safe views cw carry see section 
handle derived relations defined recursively may defined multiple deductive rules 
furthermore give fully incremental approach derived relations multiple derivations generalizing improving results cw considerably 
note mechanism cw involves handling complexities limitations views defined sql complexities limitations issue 
outline section describes initial language deductive rules excluding negation presents running example 
section describes language production rules rule language starburst 
section contains core results method translating deductive rules initial language production rules incrementally starburst rule language developed experiment approach applied database production rule languages 
maintain materialized derived relations proof method correct 
section extends results deductive rules stratified negation 
section explains generated production rules simplified derived relations known unique derivations 
section describes approach non materialized derived relations 
section concludes describes 
deductive rules initial language deductive rules datalog built predicates negation 
extend results stratified negation section 
description brief somewhat informal thorough treatments deductive database rule languages see br cgt ull 
database consist set relations designated base relations designated derived relations 
users may perform arbitrary retrieval modification operations base relations sql select insert delete update 
users may perform retrieval operations derived relations data derived relations specified exclusively deductive rules 
general form deductive rule rule name jn pm km requirements ffl names derived relation 
ffl name base derived relations 
ffl pm built predicates 
predicate evaluable database query language allowed 
considering starburst database system standard sql predicates user defined predicates 
ffl right hand side rhs rule constants specified value variable names 
ffl left hand side lhs rhs rule constants variable names appear rhs expressions constants variables 
expression evaluable database query language allowed 
starburst standard sql expressions user defined expressions 
ffl number type arguments match schema relations 
derived data consider relations similar approach certainly support derived values stored relational attributes 
simplicity treat update operations deletes followed inserts see section extension directly handle updates straightforward 
recursion allowed relations may appear multiple times rhs 
rules standard deductive interpretation cgt ull consider set tuples relations satisfying conditions 
rhs constants match values corresponding tuple fields 

rhs variables assigned values corresponding tuple fields variable assigned unique value common variables hold value predicates pm satisfied 
set tuples satisfying conditions corresponding tuple defined variable assignments condition relation note deductive rules include predicates expressions infinite derived relations possible 
exclude infinite derived relations framework 
case materialized derived relations case non materialized derived relations effect infinite derived relations non terminating execution generated production rules systems produces error 
note allow users create duplicate tuples base relations derived relations duplicates 
convenience abbreviate generic deductive rule specified rule name argument list say denoted predicates pm conjoined single predicate 
language predicates includes logical 
running example introduce simple example 
consider base relations station city state train city city station contains cities train stations brevity assume attribute city key relation 
train contains pairs cities direct train service city second city city form key relation 
consider derived relations route city city reach cal city route contains pairs cities train route city second city 
route transitive closure train 
reach cal contains cities possible reach city california train 
deductive rules define derived relations rt route train rt route route route rc reach cal station california rc reach cal route reach cal example include features deductive rule language excluding complex expressions sufficiently comprehensive illustrate approach 
production rules section introduces starburst rule system active database extension starburst prototype dbms supporting language production rules 
developed context specific research project starburst rule language representative sql production rule languages 
addition starburst rule language formally defined implemented wf proposal triggers sql permitting prove correctness approach experiment methods running system 
methods certainly adapted database production rule languages ultimately sql 
introduce convenient shorthand notation subset starburst rule language rule generation methods 
describe actual language supported starburst explain shorthand notation maps language 
describe starburst rule processing model provide examples 
examples appear 
details starburst rule system wf 
notation starburst production rules rely notion transitions database state changes resulting execution sequence data manipulation operations 
rules triggered effect transitions 
triggered rule actions perform additional data manipulation operations creating additional transitions 
details rule processing semantics deferred section 
shorthand notation expressing production rules generated methods follows rule name fins old fins old names symbols satisfy requirements introduced section deductive rules 
addition tagged ins del exactly tagged ins del may tagged old 
meaning rule 
suppose rule contain old tagged ins 
ins tag relation indicates rule triggered transition insertions relation rule triggered rule action retrieves set tuples relations inserted tuples 
rhs rule specified constants match values corresponding tuple fields 

rhs variables assigned values corresponding tuple fields variable assigned unique value predicates pm satisfied 
set tuples retrieved rule action inserts tuple defined variable assignments condition relation tuple 
informally corresponds application deductive rule semantics section 
tagged del ins tuple defined deleted relation inserted 
tagged del ins rule triggered deletions insertions deleted tuples inserted tuples 
relation tagged old current value rule uses value preceding rule triggering transition 
rules starburst starburst rule system syntax creating rule create rule name relation triggering operations condition action precedes rule list follows rule list triggering operations inserted deleted updated 
optional condition arbitrary sql predicate 
methods rule conditions 
action arbitrary sequence sql data manipulation operations 
optional precedes follows clauses partially order set rules rule specifies rule precedes list specifies follows list priority direct transitive ordering specified rules relative priority arbitrary 
included rule priority specifications shorthand notation method exploit rule priorities seen 
rule conditions actions may refer current state database top level nested sql select operations 
addition rule conditions actions may refer transition tables logical relations reflecting changes occurred rule triggering transition 
rules consider net effect transitions defined wf 
transition transition table inserted rule refers tuples rule relation inserted transition 
transition tables deleted new updated old updated similar 
note transition tables correspond exactly notion deltas discussed section 
starburst rules fairly complex sql syntax simpler notation introduced purposes section maps directly starburst rules 
production rule defined shorthand notation automatically produce starburst rule structure create rule rule name inserted deleted insert ins select expression delete hd del select expression rule triggering operation depends tagged ins del operation performed rule action depends tagged ins del del sql select operation produces tuples defined conditions described 
select operation transition table inserted deleted place relations may old 
ins select expression identical del select expression distinct clause added duplicate tuples inserted 
note starburst rules currently support direct access old relation values values computed transition tables see cw 
omit details deriving select expressions 
methods translating deductive rule rhs sql select operations cgt ull detailed modification methods appropriate wid 
examples section convince reader translation somewhat tedious specify straightforward 
additional examples translation appear appendix 
note sql operations multi attribute available sql implementations equivalent expressions standard sql substituted 
rule processing starburst rules processed rule processing points 
automatic rule processing point transaction may additional user specified processing points transaction 
describe rule execution arbitrary processing point 
rule conditions omit description rule processing 
state change resulting user generated database operations executed rule processing point start transaction creates relevant transition set rules triggered transition 
triggered rule chosen set execution 
rule chosen triggered rule priority action executed 
execution action rules triggered triggering operation occurred composite transition created initial transition subsequent execution action 
rule triggered triggering operation occurred transition created action 
new set triggered rules rule chosen execution triggered rule priority rule processing continues fashion 
arbitrary point rule processing rule triggered triggering operation occurred composite transition time executed executed triggered triggering operation occurred transition start transaction 
effect semantics rule considers database modification exactly 
values transition tables rule conditions actions reflect rule triggering transition 
rule processing terminates triggered rules 
examples examples relations introduced section 
consider production rule expressed shorthand notation rc ins ins reach cal ins station california rule triggered insertions relation station 
action inserts relation reach cal cities inserted station state field california 
corresponding production rule starburst notation create rule rc ins station inserted insert reach cal select distinct city inserted state california city select reach cal second example consider production rule expressed notation rt del del route del route old route rule triggered deletions relation route 
action deletes route tuple attribute corresponds tuple deleted route second attribute corresponds tuple pre transition value route second attribute matches attribute 
corresponding production rule starburst notation create rule rt del route deleted delete route city city 
select deleted city route city deleted old route deleted city route city surprisingly see section examples correspond production rules generated framework deductive rules section 
maintaining derived relations consider materialized approach derived relations stored database 
deductive rule number production rules generated 
shorthand notation describe production rules practice generated directly starburst notation 
assume initially derived relations deductive rules defined database created relevant base relations empty 
users create modify data base relations modifications propagated derived relations 
section explain derived relations deductive rules added relations non empty 
consistency derived relations base relations maintained entirely production rules 
derived relations consistent start transaction production rules ensure consistent transaction propagating transaction base relation modifications relevant derived relations 
recall section production rules processed automatically transaction 
consistency desired points transaction commands issued invoke rule processing points 
clarity simplicity remainder assume tuples inserted deleted base relations 
users may perform updates treated deletes followed inserts 
extending approach handle updates directly quite straightforward see section 
generating production rules consider generic deductive rule rule production rules generated 
deletion rules rule del del old del old 
re insert rule ri ins del 
insertion rules rule ins ins ins rules partially ordered starburst precedes follows clauses deletion rules priority re insert rule priority insertion rules 
explain rules prove correctness section digress briefly describe notion derivations 
tuple derived relation derivations 
derivation represented tree node tree tuple leaf nodes starburst supports commands invoke rule processing subset production rules wid 
feature transaction propagate base relation modifications certain derived relations leaving derived relations transaction rule processing 
rhs rule may violate syntactic requirements contains complex expressions 
expression equivalently replaced new variable conjoined predicate base relation tuples interior nodes derived relation tuples root node derived tuple non leaf node parent tuple deduced child tuples application deductive rule recall interpretation deductive rules section 
derivation tree complete description tuple derived relation produced tuples base relations 
simple illustration consider deductive rule suppose base relation contains tuples 
derivation tree tuple derived relation consider set production rules 
deletion rules execute delete tuples deletions rhs relations 
intuitively tuple deleted rhs relation derivation tuple rule deleted tuple longer valid 
time deletion rule executes deletes tuples derivation relies application rule tuple deleted deletion rule deletes tuples trigger additional deletion rules including del appears rhs 
note time deletion rules execute tuples stored consistent previous pre transition state rhs relations current state 
identify correct values tuples deleted necessary pre transition values rhs relations specified old 
tuples derived relations may multiple derivations 
consequently deletion rules may delete tuple derivations longer valid tuple may derivations valid 
execution deletion rules re insert rule inserts tuples deleted deletion rules remain valid derivations 
rule executes re inserts deleted tuples step derivations 
tuples inserted rule trigger considered insertion rules explain 
insertion rules execute 
insert tuples insertions rhs relations 
intuitively tuple inserted rhs relation may create new derivations new tuples time insertion rule executes inserts tuples derivation relies application rule tuple inserted insertion rule inserts tuples trigger additional insertion rules including ins appears rhs 
described production rules generated single deductive rule 
suppose multiple deductive rules 
multiple deductive rules may share lhs relations may share rhs relations may mutually recursive features handled automatically rule generation mechanism 
production rules generated described deductive rule 
entire set rules partially ordered deletion rules highest priority re insert rules middle priority insertion rules lowest priority 
need order rules group 
rule processing consists phases phase tuples deleted derived relations second phase deleted tuples re inserted derived relations third phase additional tuples inserted derived relations 
generated production rules incremental rule modifies data derived relations modifications data base derived relations 
reflected fact rhs generated rule notation relation tagged ins del practice amount modified data expected substantially amount existing data making incremental rules efficient 
fact amount modified data large incremental rules effectively delete recompute derived data 
example consider deductive rules introduced section rt route train rt route route route rc reach cal station california rc reach cal route reach cal notation production rules generated rt del del route del train rt del del route del route old route rt del del route old route del route rc del del reach cal del station california rc del del reach cal del route old reach cal rc del del reach cal old route del reach cal rt ri ins route del route train rt ri ins route del route route route rc ri ins reach cal del reach cal station california rc ri ins reach cal del reach cal route reach cal rt ins ins route ins train rt ins ins route ins route route general approach clear understandable reader fully grasp intricacies production rule behavior interaction point 
readers interested skeptical details encouraged read correctness proof section 
achieved efficiently non materialized approach see section may appropriate materialized approach frequent large modifications expected 
rt ins ins route route ins route rc ins ins reach cal ins station california rc ins ins reach cal ins route reach cal rc ins ins reach cal route ins reach cal production rules ordered rules group priority rules second group priority rules third group 
transitivity rules group priority rules third group 
corresponding rules starburst notation appendix 
correctness theorem consider arbitrary derived relations dm defined arbitrary base relations arbitrary deductive rules ae ae production rules generated described section 
suppose dm consistent initially arbitrary tuples deleted inserted rule processing invoked ae ae rule processing terminates dm consistent new values proof denote modifications denote modifications denote dm rule processing denote dm consistent assumption consistent consistent show rule processing modifies dm proof derivation trees recall section proceeds steps step show tuple deleted rule processing second step show tuple deleted rule processing inserted rule processing 
straightforward see rule processing insert tuples steps complete proof 
deletions tuple derivation tree valid consider tree prove induction depth deleted rule processing 
base case depth 
children base tuples derived children deductive rule valid deleted 
production rule del generated triggered deletion deletes induction depth 
children base derived tuples derived children deductive rule valid children deleted base tuple derived tuple subtree valid children deleted base tuple production rule del generated triggered deletion rule processing guaranteed terminate derived relations consistent new base relations finite 
deletes children derived tuple subtree valid induction hypothesis deleted rule processing production rule del generated triggered deletion deletes insertions tuple deleted rule processing consider derivation tree prove induction depth inserted rule processing 
base case depth 
children base tuples derived children deductive rule case production rule ri generated triggered deletion re inserts case valid inserted 
production rule ins generated triggered insertion inserts induction depth 
children base derived tuples derived children deductive rule note derived child tuple deleted deleted consider case tuple derived child tuples deleted production rule ri generated triggered deletion re inserts derived child tuples deleted induction hypothesis inserted rule processing 
consider point rule processing inserted production rule ins generated triggered insertion inserts consider case tuple valid children inserted base tuple derived tuple subtree valid children inserted base tuple production rule ins generated triggered insertion inserts children derived tuple subtree valid induction hypothesis inserted rule processing production rule ins generated triggered insertion inserts stratified negation deductive database rule languages include negation relations appearing rhs deductive rule appear positively initial language negatively 
abbreviated syntax general form deductive rule negation rule name requirements deductive rules section safety requirement cgt ull ffl rhs rule variables appear negated relation appear positive relation 
rules standard deductive interpretation closed world assumption cgt ull consider set tuples positive relations satisfying conditions 
rhs constants match values corresponding tuple fields 

rhs variables assigned values corresponding tuple fields variable assigned unique value predicate satisfied 
set tuples satisfying conditions variable assignments condition constants construct tuple negated relation negated relation contain corresponding tuple tuple defined variable assignments condition relation guarantee unique values derived relations deductive database rule languages negation require set rules stratified cgt ull 
set rules stratified derived relations corresponding deductive rules partitioned strata ffl rule stratum rhs negated relation base relation derived relation belonging stratum ffl rule stratum rhs positive relation base relation derived relation belonging stratum effect stratification derived relations associated stratum completely computed derived relations lower strata computed strata computed ascending order 
extend method handle deductive rules stratified negation 
illustrative purposes running example section extended include third derived relation unconnected city city unconnected contains pairs cities cities train stations route city second city 
unconnected defined deductive rule uc unconnected station station route entire set deductive rules stratified derived relations route reach cal rules rt rt rc rc stratum derived relation unconnected rule uc stratum 
extended notation adding negation deductive rules requires notation production rules extended accordingly 
rule extended notation denoted rule name fins old fins old rhs relation tagged ins del may tagged 
translation production rules notation starburst production rules proceeds follows 
starburst rule generated described section ignoring relations tagged 
relation tagged conjunct added clause select expression rule action exists select old pred predicate pred conjunction equalities attributes corresponding constants attributes positive relations 
example consider production rule extended notation uc pi ins unconnected ins station station route intuitively new station inserted rule inserts unconnected new station city cities route pair unconnected 
corresponding production rule starburst notation create rule uc pi station inserted insert unconnected select distinct inserted city station city inserted station inserted city station city 
select unconnected exists select route inserted city route city station city route city handling multiple strata consider set deductive rules derived relations strata 
production rules generated deductive rules ordered compute strata derived relations order 
production rules generated deductive rules stratum specified precede production rules generated deductive rules stratum 
derived relations materialized effect production rules stratum processed rules treat derived relations strata base relations 
requirements stratification need describe production rule generation single stratum treating rhs derived relations stratum includes negated derived relations base relations 
generating production rules stratum assume initially derived relations deductive rules defined database created relevant base relations empty 
section explain derived relations deductive rules added relations non empty 
consider generic deductive rule negation rule production rules generated 
negated insertion rules rule ni del old old old ins old 
positive deletion rules rule pd del old del old old old 
re insert rule ri ins del 
negated deletion rules rule nd ins del 
positive insertion rules rule pi ins ins rules partially ordered rules group priority rules group 
understand behavior rules observe triggers rules group operations rule actions perform 
triggered insertions negated deletes 
triggered deletions positive deletes 
triggered deletions inserts 
triggered deletions negated inserts 
triggered insertions positive inserts recursion involving negated relations due stratification see execution rule group trigger rule group rule processing consists phase group rules phase tuples deleted derived relation insertions negated relations 
phase tuples deleted derived relation deletions positive relations 
phase tuples multiple derivations reinserted derived relation explained section 
phase tuples inserted derived relation deletions negated relations 
phase tuples inserted derived relation insertions positive relations 
notice negated deletion rules group clause addition del 
eliminate cases tuple deleted re inserted user rules computing derived relations lower stratum 
multiple deductive rules handled section production rules generated described deductive rule 
entire set rules partially ordered rules group deductive rule precede rules group deductive rule 
need order rules group recall rules strata ordered rules stratum priority rules stratum 
example consider deductive rule negation introduced derived relation unconnected uc unconnected station station route production rules generated uc ni del unconnected old station old station ins route uc pd del unconnected del station old station old route uc pd del unconnected old station del station old route uc ri ins unconnected del unconnected station station route uc nd ins unconnected station station del route route uc pi ins unconnected ins station station route uc pi ins unconnected station ins station route production rules ordered rules group priority rules group 
corresponding rules starburst notation appendix 
production rules production rules derived relations route reach cal section rules corresponding stratum rules route reach cal corresponding stratum 
rules specified lower priority rules route reach cal starburst net effect insertion followed deletion net effect deletion followed insertion deletion insertion see wf 
correctness correctness proof similar theorem 
explained section consider stratum separately proof considers stratum derived relations lower strata treated base relations 
assume negation base relations 
proof notion derivation tree extended leaf represents presence base relation tuple denoted absence base relation tuple denoted theorem consider arbitrary derived relations dm defined arbitrary base relations arbitrary deductive rules may include negation base relations 
ae ae production rules generated described section 
suppose dm consistent initially arbitrary tuples deleted inserted rule processing invoked ae ae rule processing terminates dm consistent new values proof theorem denote modifications denote modifications denote dm rule processing denote dm consistent assumption consistent consistent show rule processing modifies dm step show tuple deleted rule processing second step show tuple deleted rule processing inserted rule processing 
straightforward see rule processing insert tuples steps complete proof 
deletions tuple derivation tree valid consider tree prove induction depth deleted rule processing 
base case depth 
children base tuples derived children deductive rule valid deleted inserted 
production rule pd generated triggered deletion deletes production rule ni generated triggered insertion deletes induction depth 
children base derived tuples derived children deductive rule valid inserted call production rule ni generated triggered insertion deletes valid deleted base tuple derived tuple subtree valid proof proceeds exactly induction step theorem 
insertions tuple deleted rule processing consider derivation tree prove induction depth inserted rule processing 
base case depth 
children base tuples derived children deductive rule case production rule ri generated triggered deletion re inserts case valid inserted deleted re inserted 
production rule pi generated triggered insertion inserts production rule nd generated triggered deletion inserts induction depth 
children base derived tuples derived children deductive rule deleted call production rule nd generated triggered deletion inserts proof proceeds exactly induction step theorem 
simplifications unique derivations re insert rules generated approach due fact tuples derived relations may multiple derivations 
suppose derived relation know tuple guaranteed derivation 
re insert rules need generated deductive rules re insert rules insert tuples 
second simplification unique derivations distinct eliminated insert select expressions generated rule actions duplicates produced 
notion derived relation unique derivations corresponds directly notion safe materialized views cw 
cw static criteria determining sql view safe view definition key information base relations 
show criteria adapted determine derived relation unique derivations 
direct adaptation applies derived relations defined nonrecursive deductive rule extending criteria multiple recursive rules left 
addition brevity consider negation criteria cw negatively nested subqueries adapted negation 
derived relation defined deductive rule recursion negation 
bound attributes call computed follows 
initialize contain attributes rhs relations place corresponds variable appearing lhs joined lhs variable equality predicate 

add attributes rhs relations place corresponds constant variable equated constant predicate 
general views safe equivalently derived relations unique derivations indication materialized approach realized efficiently 

repeat unchanged add attributes rhs relations place corresponds variable corresponds attribute joined attribute equality predicate 
add attribute rhs relation includes key relation 
results cw derived relation guaranteed unique derivations bound attributes include key relation rhs derived relations demand consider non materialized case derived relations computed needed order execute queries 
simplest approach query submitted derived relations derived relations materialized entirety base relations query executed derived relations deleted 
sophisticated approaches portions derived relations needed execute query computed 
consider simple approach sophisticated approaches discussed section 
suppose query submitted non materialized derived relations defined set stratified deductive rules base relations additional derived relations dm execute query materialize derived relations requires materializing dm order production rules know dm derived relations materialized maintain special relation called materialize say dm explicitly named 
mechanisms knowing relations materialized possible see 
query processor receives query inserts materialize tuples name relations dm invokes rule processing 
rule processing completes query executed contents relation materialize derived relations dm deleted 
note approach inefficient entire contents derived relations dm computed processing query contains selection conditions approach efficient various known optimizations see section 
consider standard generic deductive rule including negation identical production rules generated materialized approach section additional rule start generated 
role start perform application deductive rule inserting initial tuples existing relations 
insertions trigger production rules necessary complete computation start triggered insertions relation materialize condition checks tuple naming inserted 
action start insert operation intuitively corresponds efficiency rule processing invoked rules compute dm start ins start action insert operation generated insertion production rules sections transition tables clause omitted 
multiple deductive rules production rules described section additional start rule generated 
production rules ordered described section start rules highest priority 
outline correctness argument approach full details omitted 
query derived relations deductive rules relevant base relations time submitted 
show execution start rules followed execution production rules generated materialize consistent see consider hypothetical transaction materialized approach start base derived relations empty 
user portion tuples inserted bring relevant base relations state production rules generated processed modify derived relations insertions results section derived relations consistent consider query submitted derived relations empty 
key observation start rules insert derived relations exactly data inserted production rules responding base relation insertions 
initial insertions rule processing query identical 
rule processing query terminates derived relations consistent suggested relation materialize start rules initiate computation derived relations approaches possible 
example query processor execute insert operations corresponding actions start rules invoke rule processing 
database production rule language includes rules triggered select operations postgres sufficient flexibility rule processing compute derived relations invoked directly response query intervention query processor 
interesting note behavior production rule execution non materialized approach computes derived relations strategy similar semi naive evaluation 
computation identical production rules totally ordered rule applied iteration rules 
derived relations selection conditions important advantage non materialized approach deductive databases query derived relations query includes selection condition selection condition may sufficient compute portion derived data 
example query requests tuples derived relation attr necessary compute guarantee tuples attr produced 
number methods developed computing partial derived data selection conditions notably magic sets technique br 
methods rewrite deductive rules selection condition evaluate new set deductive rules standard mechanism semi naive evaluation 
rewriting approaches optimize method non materialized derived relations query selection condition submitted deductive rules rewritten magic sets production rules generated new deductive rules 
requires generating production rules query pattern adornment see ull 
production rules parameterized instantiated query selection condition replacing parameters appropriate constant values 
non empty relations materialized approach materialized approach assumed production rules generated deductive rules installed database created base derived relations empty 
database created user may want define new derived relations deductive rules existing base derived relations 
mechanism similar approach non materialized derived relations bring new materialized derived relations date existing relations 
suppose new deductive rule defined derived relation production rules generated described section 
rules installed insert operation executed operation generated action rule start non materialized approach 
user adds multiple new deductive rules new derived relations insert operation executed new deductive rule 
insertions trigger new production rules necessary ensure rule processing new derived relations consistent existing relations 
correctness argument approach directly parallels correctness argument non materialized derived relations 
note mechanism add new deductive rules existing derived relations 
described complete framework production rule mechanism provided active database system support deductive database system 
derived relations specified deductive rules built predicates stratified negation deductive rules compiled automatically production rules 
materialized approach derived relations stored database production rules maintain consistency derived relations base relations 
non materialized approach production rules compute derived relations needed queries 
approaches derived relations computed incrementally 
concurrency control purposes transaction executed creates new derived relations production rules performs insert operations ensures consistency presence transactions 
approaches provide mechanism quickly effectively supporting deductive rules environment provides production rules 
currently realizing context esprit project idea 
project includes prototype core database engine supports production rules derived data specified datalog language translated automatically production rules cm 
framework generates correct production rules set deductive rules 
certain classes deductive rules possible generate efficient production rules 
example described section key information determine derived relations unique derivations 
includes exploring optimizations key information combining eliminating production rules removing extraneous clauses rule actions 
concentrated specific method computing derived data 
discussed section number alternative methods derivations may counted ny gms auxiliary information may maintained dt alternative derivations may checked derived tuples deleted uo 
methods aimed avoiding re insert approach recall sections 
useful contribution encode different methods production rules study relative performance 
treated updates deletes followed inserts 
plan modify approach treat updates directly 
general updates base relations result deletes followed inserts derived relations cw 
modifying framework straightforward consists adding productions rules triggered updates transition tables old updated new updated deleted inserted 
considering key information cases may able generate production rules propagate updates base relations directly updates derived relations 
considered distinct approaches derived data materialized non materialized 
materialized approach derived data maintained times non materialized approach derived data maintained 
interested exploring intermediate approach initially derived data materialized derived data materialized response queries deleted 
existing derived data may may kept consistent base data new derived data computed new base data needed 
represents lazy approach materialization deductive data derived data conventional views 
appendix starburst rules section create rule rt del train deleted delete route city city 
select city city deleted create rule rt del route deleted delete route city city 
select deleted city route city deleted old route deleted city route city create rule rt del route deleted delete route city city 
select route city deleted city old route deleted route city deleted city create rule rc del station deleted delete reach cal city select city deleted state california create rule rc del route deleted delete reach cal city select deleted city deleted old reach cal deleted city reach cal city create rule rc del reach cal deleted delete reach cal city select route city route deleted route city deleted city create rule rt ri route deleted insert route select distinct deleted city deleted city deleted train deleted city train city deleted city train city deleted city deleted city 
select route follows rt del rt del rt del rc del rc del rc del create rule rt ri route deleted insert route select distinct deleted city deleted city deleted route route deleted city city deleted city city city city deleted city deleted city 
select route follows rt del rt del rt del rc del rc del rc del create rule rc ri reach cal deleted insert reach cal select distinct deleted city deleted station deleted city station city station state california deleted city select reach cal follows rt del rt del rt del rc del rc del rc del create rule rc ri reach cal deleted insert reach cal select distinct deleted city deleted route reach cal deleted city route city route city reach cal city deleted city select reach cal follows rt del rt del rt del rc del rc del rc del create rule rt ins train inserted insert route select distinct city city inserted city city 
select route follows rt ri rt ri rc ri rc ri create rule rt ins route inserted insert route select distinct inserted city route city inserted route inserted city route city inserted city route city 
select route follows rt ri rt ri rc ri rc ri create rule rt ins route inserted insert route select distinct route city inserted city route inserted route city inserted city route city inserted city 
select route follows rt ri rt ri rc ri rc ri create rule rc ins station inserted insert reach cal select distinct city inserted state california city select reach cal follows rt ri rt ri rc ri rc ri create rule rc ins route inserted insert reach cal select distinct inserted city inserted reach cal inserted city reach cal city inserted city select reach cal follows rt ri rt ri rc ri rc ri create rule rc ins reach cal inserted insert reach cal select distinct route city route inserted route city inserted city route city select reach cal follows rt ri rt ri rc ri rc ri starburst rules section create rule uc ni route inserted delete unconnected city city 
select city city old station old station inserted city inserted city city inserted city follows rt ins rt ins rt ins rc ins rc ins rc ins create rule uc pd station deleted delete unconnected city city 
select deleted city station city deleted old station exists select old route deleted city route city station city route city follows uc ni create rule uc pd station deleted delete unconnected city city 
select station city deleted city old station deleted exists select old route station city route city deleted city route city follows uc ni create rule uc ri unconnected deleted insert unconnected select distinct deleted city deleted city deleted station station deleted city city deleted city city deleted city deleted city 
select unconnected exists select route deleted city route city deleted city route city follows uc pd uc pd create rule uc nd route deleted insert unconnected select distinct city city station station deleted city deleted city city deleted city city city 
select unconnected exists select route city route city city route city follows uc ri create rule uc pi station inserted insert unconnected select distinct inserted city station city inserted station inserted city station city 
select unconnected exists select route inserted city route city station city route city follows uc nd create rule uc pi station inserted insert unconnected select distinct station city inserted city station inserted station city inserted city 
select unconnected exists select route station city route city inserted city route city follows uc nd cochrane elena helpful comments initial draft stefano paraboschi useful discussions 
ap apt 

maintenance stratified databases viewed belief revision system 
proceedings sixth acm sigact sigmod sigart symposium principles database systems pages san diego california march 
bj bayer jonker 
framework supporting triggers deductive databases 
proceedings international workshop rules database systems edinburgh scotland august 
br bancilhon ramakrishnan 
amateur recursive query processing strategies 
proceedings acm sigmod international conference management data pages washington may 
ceri tanca zicari 
integrating object oriented data modeling rule programming paradigm 
proceedings acm sigmod international conference management data pages atlantic city new jersey may 
cer ceri 
declarative approach active databases 
proceedings eighth international conference data engineering invited pages phoenix arizona february 
ceri fraternali paraboschi tanca 
automatic generation production rules integrity maintenance 
appear acm transactions database systems 
cgt ceri gottlob tanca 
logic programming databases 
springer verlag berlin 
cm ceri 
specification chimera 
technical report idea dd politecnico di milano milan italy may 
cw ceri widom 
deriving production rules constraint maintenance 
proceedings sixteenth international conference large data bases pages brisbane australia august 
cw ceri widom 
deriving production rules incremental view maintenance 
proceedings seventeenth international conference large data bases pages barcelona spain september 
dayal hanson widom 
active database systems 
kim editor modern database systems object model interoperability 
acm press new york 
dt dong topor 
incremental evaluation datalog queries 
proceedings international conference database theory berlin germany october 
gms gupta mumick subrahmanian 
maintaining views incrementally 
proceedings acm sigmod international conference management data washington may 
haas starburst mid flight dust clears 
ieee transactions knowledge data engineering march 
hd harrison dietrich 
condition monitoring active deductive database 
journal information systems 
hd harrison dietrich 
integrating active deductive rules 
proceedings international workshop rules database systems pages edinburgh scotland august 
hw hanson widom 
overview production rules database systems 
knowledge engineering review june 
de simon 
making deductive databases practical technology step forward 
proceedings acm sigmod international conference management data pages atlantic city new jersey may 

efficient computation difference consecutive database states 
proceedings international conference deductive object oriented databases pages munich germany december 
min minker 
foundations deductive databases logic programming 
morgan kaufmann san mateo california 
nic 
nicolas 
logic improving integrity checking relational data bases 
acta informatica 
ny 
nicolas 
outline deductive dbms 
proceedings ifip world conference 
north holland 
stonebraker goh potamianos 
rules procedures caching views data base systems 
proceedings acm sigmod international conference management data pages atlantic city new jersey may 
simon de 
implementing high level active rules top relational dbms 
proceedings eighteenth international conference large data bases pages vancouver british columbia august 
tan tanca 
re action deductive databases 
proceedings second international workshop intelligent cooperative information systems pages como italy october 
urban 
implementation evaluation integrity maintenance rules object oriented databases 
proceedings eighth international conference data engineering pages phoenix arizona february 
ull ullman 
principles database knowledge base systems volumes ii 
computer science press rockville maryland 
uo olive 
method change computation deductive databases 
proceedings eighteenth international conference large data bases pages vancouver british columbia august 
widom cochrane lindsay 
implementing set oriented production rules extension starburst 
proceedings seventeenth international conference large data bases pages barcelona spain september 
wolfson dewan stolfo yemini 
incremental evaluation rules relationship parallelism 
proceedings acm sigmod international conference management data pages denver colorado may 
wf widom finkelstein 
set oriented production rules relational database systems 
proceedings acm sigmod international conference management data pages atlantic city new jersey may 
wid widom 
deduction starburst production rule system 
ibm research report rj ibm almaden research center san jose california may 
wid widom 
starburst rule system language design implementation applications 
ieee data engineering bulletin special issue active databases december 
