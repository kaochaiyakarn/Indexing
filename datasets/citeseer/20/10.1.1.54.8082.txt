chimera hypertext heterogeneous software environments kenneth anderson richard taylor james whitehead jr department information computer science university california irvine irvine california fax mail taylor ics uci edu emerging software development environments characterized heterogeneity composed diverse object stores user interfaces tools 
presents approach providing hypertext services heterogeneous setting 
central notions approach include 
anchors established respect interactive views objects objects 
composable ary links established anchors different views objects stored distinct object bases 
viewers objects may implemented different programming languages afforded client server architecture 
multiple concurrently active viewers enable multimedia hypertext services 
describes approach presents architecture supports 
experience chimera prototype relationship systems described 
categories subject descriptors multimedia information systems software engineering tools techniques document preparation hypertext hypermedia general terms design experimentation additional key words phrases heterogeneous hypertext hypertext system architectures link servers separation concerns software development environments 
software development environments sdes develop maintain diverse collection highly interrelated material sponsored advanced research projects agency number mda 
content information necessarily reflect position policy government official endorsement inferred 
permission copy fee part material granted provided copies distributed direct advantage acm copyright notice title publication date appear notice copyright permission association computing machinery 
copy republish requires fee specific permission 
fl acm xxx xx xxxx software objects 
large software systems may example consist multiple versions requirements specifications designs prototypes code test information scripts documentation 
connections components complex 
establishing exploring connections major tasks development program understanding maintenance 
researchers recognized size complexity systems place severe cognitive load software engineers leads errors high levels system abstraction requirements design 
suggested attributes hypertext excellent technology capturing visualizing relations sde 
providing hypertext capabilities sde allows engineer freely associate objects regard type objects stored 
relationships accessed time convenient user interface allows engineer easily navigate excellent taken place area clear single system date effectively addressed technical challenges posed task 
believe technical features need hypertext systems intended support sde activities heterogeneous object editor viewer support 
sdes contain wide variety tools developing manipulating objects 
different kinds editors different types objects 
sdes increasingly include multiple viewers single objects viewer presents different aspects object recognize software engineering community argue conventional object management systems appropriate technology capturing relations free object association allowed 
purpose argue point 
perspective engineers prefer hypertext approach examine approach may supported 
overlap list fifteen assumptions listed leggett discussing hypermedia large 
arrived list independently view indication approach contributions significant value outside domain software development environments 
different depiction styles 
software development teams give favorite tools exchange hypertext functionality 
monolithic approach providing hypertext services sde ineffective 
ideally editors viewers environment able hypertext services respond hypertext events 
anchors specialized particular views 
different viewers single object may strikingly different depictions viewer may depiction information synthesized separate objects anchors naturally necessarily associated views objects 
multiple view concurrent active displays 
software developer typically engaged examining changing different related objects supportive provide system enables views simultaneously views may object actions views may autonomous concurrent 
links heterogeneous object managers 
sdes manage wide variety objects different types possessing different object management constraints large scale sdes support multiple heterogeneous object managers 
essential able establish links objects managed different repositories 
action specifications anchors links 
different users different abilities training may collaborating project sde useful provide programmable actions anchors links actions example determined function selected anchor particular view particular link traversal requested 
scalable composable links 
hierarchy abstraction key tools engineers employ undertaking large scale problems 
hypertext support sdes similarly provide capabilities dealing large complex aggregations information 
ary links 
software development involves situations pieces information jointly represent single concept sense grouped 
claim hypertext support sde applications provide capabilities form ary links 
multiple contexts 
process software development involves stages including cycles different types information important term viewer denote tools capable visually depicting object may include interactive editing capabilities 

software team members different roles different stages 
hypertext support sdes able take account current stage software development process enable engineers quickly access critical information 
describes set concepts satisfy set requirements prototype implements described concepts 
notion viewers objects heart conceptualization 
postulate environment types objects display editing object requires viewer 
viewers type manage display decision 
developed set interfaces viewer announces hypertext system anchors defines view object 
view specific anchors participate links 
links may considered objects right may viewers associated define additional anchors 
anchors participate links doing provide hierarchical composition 
approach brings limitations requirements 
order techniques interfaces value viewers sde programmed utilize hypertext system application program interface api 
viewers responsible maintaining time associations anchors announce hypertext system objects process artifacts button window display views 
heterogeneous environments multilingual distributed generic architecture implementation client server multilingual remote procedure call rpc mechanism utilized 
prototype implementation chimera utilizes object management system university massachusetts persistence server data structures 
illustrate concepts chimera system discuss application graphical views flight simulator instrument panel hyperlinked statements requirements document maintained framemaker fl chiron user interface development management system chiron university california irvine graphical viewer instrument panel 
remainder organized follows 
sections basic concepts conceptual architecture particular implementation plans 
discuss related conclude 
merriam webster th collegiate dictionary individual organ part consisting tissues diverse genetic constitution 
framemaker registered trademark frame technology 
chimera concept example 
chimera hypertext concepts shown left 
viewers combined object produce distinct views 
anchor added view combined link 
right example hyperweb presents data file stored file operating system displayed different viewers 
viewer displays data spreadsheet creating spreadsheet view data file viewer displays data chart creating chart view data 
distinct anchors indicated black box spreadsheet black underline chart 
anchors stored chimera database data file 
anchors members link 
attribute value pairs indicated avoid visual clutter 
set objects set viewers set links set anchors set views object chart viewer spreadsheet viewer displays displays reads reads viewers views link anchor anchor anchor anchor hypertext concepts chimera flexible set hypertext concepts map domain software development environments 
concepts include objects viewers views anchors links attribute value pairs see 
remainder section define concept provide example illustrates applied software development environment 
objects objects named persistent entities internal structure unknown irrelevant chimera 
viewers viewers named active entities display objects 
operations provided viewer specific viewer type objects displays 
typically viewers provide browsing creation editing functionality objects domain 
views views denote pair viewer object note object may displayed viewer participate multiple views 
views contain anchors 
anchors anchors defined managed viewers context view 
anchor tags portion view item interest 
anchors tailored viewer particular view object displayed 
hypertext systems require direct anchor object mappings anchors embedded objects chimera anchors may represent purely visual component button interface element 
creating anchors view object underlying object may left unmodified usable tools unaware chimera existence 
links link set anchors 
links relate portions views 
links class objects chimera viewer constructed display 
anchors may created link views included links 
manner chimera supports links links important abstraction supports construction large complex 
attribute value pairs 
instance chimera hypertext concept arbitrary number attributevalue pairs associated 
attribute value pair consists associated strings string con tains attribute name value 
attributevalue pairs commonly hypertext systems provide run time semantics behavior hypertext entities 
example uses attributes include providing access anchor user created link viewers filtering displays show certain types links 
collection objects viewers views anchors links attributes chimera hyperweb 
hyperweb similar leggett hypermedia halasz hypertext 
example 
chimera hypertext concepts demonstrated term project senior level software engineering project class 
project students augmented flight simulator program distributed chiron design requirements documents created framemaker efficiently accessed link traversal 
heart flight simulator data types adts representing state aircraft including aircraft pitch roll heading altitude speed 
gauges flight simulator cockpit visualize information adts updated simulator flight equations 
chiron performs visualization 
application adts considered chimera objects chiron considered chimera viewer gauges chiron produces chimera views 
flight simulator requirements design documents written framemaker 
documents considered chimera objects 
framemaker allows users access edit documents framemaker chimera viewer 
display requirements document represents chimera view display design document 
anchors created display section titles documents 
students added buttons flight simulator gauge marked requirements design respectively 
buttons visualize portion adt represented gauge visual indication chimera anchors created gauge view 
gauge requirements anchor put link anchor top requirements document section describing gauge 
single click requirements button takes engineer running flying simulator requirements gauge requirements document 
design anchor similarly linked design document 
artificial horizon gauge demonstrates value chimera view concept 
gauge produces visualization synthesis information objects pitch adt roll adt 
gauge represents distinct view gauges views just show values adts separately 
students able add anchor buttons views 
object application directly corresponds artificial horizon view engineer able link gauge appropriate requirements document 
chimera anchors defined view object anchors added multiple simultaneous views object 
conceptual architecture section outlined chimera hypertext concepts gave short example mapping reasonably complex software development project 
section sketches conceptual architecture supports concepts 
architecture adopts client server approach providing hypertext services 
term chimera architecture see 
client server approach adopted help meet challenges heterogeneous sde users 
client server approach allows multiple users different machines access hyperweb dynamically changing set viewers hypertext events originate viewer propagate potentially server 
server supports multilingual approach clients written different programming languages accessing server language specific api 
server keeps process object file sizes code manage hyperweb centralized server 
discuss components chimera architecture chimera server chimera clients process invoker external tools systems populate sde 
chimera server primary responsibilities chimera server follows 
ffl provide services allow clients access chimera hypertext concepts 
ffl manage persistence hyperweb 
object manager chimera server map instances chimera hypertext concepts persistent store 
chimera server responsible persistent storage client object data 
ffl receive route generate hypertext events server provide means clients register interest subset events 
set hypertext events left undefined conceptual architecture existence important point 
chimera api viewer viewer chimera api viewer viewer viewer example instance chimera conceptual architecture 
chimera clients consisting viewers access chimera server provide hypertext services users 
note restrictions number clients number viewers client viewer appear multiple clients 
process invoker invoke chimera clients directed chimera server 
chimera clients access external systems environment graphics server sound server 
entities separate unix processes read write information repository file system object manager 
viewer specific persistent data viewer specific persistent data chimera internal database rpc chimera client chimera client communicates external system chimera server process invoker invokes read write read write read write rpc rpc ffl manage connected client 
instance chimera server know viewers running view viewer viewer ready receive hypertext events 
process invoker process invoker responsible spinning chimera clients 
occurs chimera server determines needs send hypertext event viewer running 
process invoker maintains mapping viewer names executable programs chimera server sends process invoker viewer name process invoker invokes executable program operating system services 
chimera client chimera client includes viewers libraries needed communicate chimera server 
viewer client responsible 
map supplied maintained administrator chimera hyperweb 
ffl definition concepts object view 
viewer determine precise meaning concepts context 
typically straightforward ambiguity may arise especially respect versions objects 
ffl definition concept anchor 
includes identifying elements view anchors attached anchors created deleted presence anchor indicated attributes assigned anchor 
viewer may choose implement functionality different ways uniform interaction style guaranteed issues facing designers open hypertext systems 
ffl mapping function anchor identifier received chimera server time anchor created specific region object display 
potentially troublesome user remember hypertext functionality invoked viewer 
design trade involving ease open systems customized interfaces 
believe requiring single standard style restrictive prevent existing viewers participating chimera 
hand possible provide set reusable components developers utilize simultaneously simplifies task writing viewers promotes uniform authoring display interaction styles 
ffl event handler respond hypertext events chimera server 
ffl communicating chimera server 
includes registering hypertext events indicating current view may change viewer asked user display different object accessing services related chimera hypertext concepts letting chimera server know ready receive hypertext events provides time newly invoked client initialize server sends hypertext events 
ffl providing mechanism persistent storage object data 
external systems viewers chimera client may directly interface user may require external tools may user interface management system interface 
chimera place restrictions external systems accessed clients clients communicate users 
implementation architecture constructed prototype chimera validate concepts section conceptual architecture section 
prototype support example described section applications prototype constructed sun unix operating system ada programming languages 
section describe design choices mapping conceptual architecture working prototype discuss issues concerning prototype performance size statistics 
chimera server chimera server realizes cases exceeds goals set section 
discuss goal roughly order section paragraphs 
heart chimera server lies set ada packages implement chimera hypertext concepts adts 
chimera server coordinates access set adts responding remote procedure calls chimera clients 
clients invoked users process invoker typically contain viewer multiple viewers client allowable 
chimera server handle multiple clients run multiple users time 
filtering information maintained viewer connected chimera server 
anchors links filtered different sets concepts provided different users view 
users select level filtering received viewer provides interface default filtering level anchors links particular view accessible 
filtering level user anchors links created user particular view accessible 
functionality allows chimera provide support multiple contexts single hyperweb 
eventually plan implement system ownership permissions modeled unix file permissions 
anchors links readable user accessible particular view 
extend chimera support multiple contexts allowing user different roles gain access different sets anchors links 
active link maintained user connected chimera server 
active link mechanism provided chimera server allow modeless link creation 
typical hypertext systems link creation occurs mode 
user indicates new link desired adds typically anchors link continues working 
chimera user create empty links select links active add anchors active link time 
user time select link active link 
note viewers required active link mechanism 
provided convenience function attempt foster common interaction styles chimera viewers 
viewer forgo active link mechanism register links modify independent viewers 
mapped unix directories chimera server stores temporary run time files persistent state adts 
adts save state information object management system 
users select hyperweb want access resource file located home directories chimera server reads start 
chimera server currently supports fourteen hypertext events clients register interest see 
events range reporting changes hyperweb addition deletion hypertext concepts link traversal events active link events 
clients provide variety information server 
information includes viewer client ready receive hypertext events hypertext events viewer interested view viewer 
server knows chimera open hypertext system functionality guaranteed viewers 
exist viewer developer decides include particular viewer 
client assumed interest event contacts chimera server 
event name associated information server disconnect new viewer viewer identifier delete viewer viewer identifier new object object identifier delete object object identifier new view view identifier delete view view identifier new anchor anchor identifier delete anchor anchor identifier new link link identifier delete link link identifier modify link link identifier link traversal anchor identifier active link link identifier chimera hypertext events viewer invoked invocation policy attribute associated viewer 
policy server send link traversal event view currently displayed connected viewer 
viewer invocation policy invoked subsequent link traversal events sent 
viewers display multiple views opening new window closing previous view opening new 
alternative invocation policy time causes server invoke process invoker new instance viewer time link traversal occurs view 
process invoker process invoker rpc server chimera server sends messages wants particular viewer invoked 
chimera server sends viewer name process invoker maps executable program shell script invokes 
invocation currently handled having process invoker unix fork command start child process 
child process calls unix command replaces child process specified executable program begins run 
map process invoker uses determine executable program run read start stored hyperweb user accessing 
information map file entered manually text editor current implementation 
limitations implicit fixed implementations 
overcome providing tools manage process invoker map file altering process invoker detect changes map file run time 
chimera client major benefit client server architecture chimera clients may written language 
api chimera server particular language required language construct chimera clients 
advantage api approach low level rpc details passing messages chimera server completely hidden clients api 
clients invoke subprograms register anchor traverse link api converts subprograms calls parameters appropriate rpc messages ships chimera server 
api passes back return values server calling client 
conversion straight forward includes creating new rpc buffer marshaling parameters buffer making actual rpc call retrieving return values buffer deallocating rpc buffer 
chimera supports clients written ada apis languages 
clients written apis 
api works writing complete 
addition engineers ibm new york developed tcl bindings result send rpc messages chimera server 
tcl bindings represent complete api chimera receive hypertext events chimera server 
progress develop tcl api built top api 
ada api creates tasks viewer 
task handles sending messages chimera server second task handles receiving hypertext events server 
tasks operate independently maintain separate unix sockets 
allows multiple connections chimera server single unix process 
ada api proven successfully client server systems notable simultaneous connection viewer chimera server chiron server sound server 
api allows programs chimera services single unix process 
sockets maintained api requiring application writers take responsibility scheduling message transmission event reception 
programs api windows produce user interface support added receive chimera events xt event loop 
chimera events handled callback mechanism 
date separate programs written simultaneously chimera clients single unix process 
external systems writing viewers media types integrated chimera system 
viewers briefly described 
framemaker framemaker program integrated chimera system modifying executable image 
wrapper program translates chimera hypertext concepts framemaker built hypertext concepts 
custom framemaker macros written anchor creation link traversal messages received wrapper 
xvi public domain vi clone xvi integrated chimera group senior students class project software engineering project course 
existing vi editing functions normally hypertext functionality accessed graphical control panel written motif toolkit 
chimera services accessed api 
link traversals xvi cause different buffer opened new file referenced link 
flight simulator described earlier flight simulator simulation aircraft 
written ada chiron flight simulator features gauge separate thread control 
ada api easily allows multiple threads hypertext functionality operate independently single unix process 
mpeg ambitious term project software engineering project course mpeg viewer allows anchors defined mpeg movies 
anchors may defined sections frame may duration frame entire movie 
authoring support allows anchors defined frame copied frame frame 
authors may single step movie adjust anchors individual frames best fit 
anchors may added active link frame 
mpeg viewer created extending public domain mpeg player api 
result course viewer allows anchors defined sections gif image 
public domain gif viewer augmented api display hypertext control panel written motif toolkit 
control panel varies depending gif viewer author mode view mode 
link traversals cause new process invoked view linked gif file 
sound player sound player presents list sounds anchors attached 
link traversals particular anchor causes sound player play associated sound 
sound player uses chiron user interface ada api hypertext functionality sun sound server sound capability making simultaneously client separate servers 
button button simple viewer displays window containing button 
anchor associated button 
anchor may member graphics interchange format copyright property incorporated 
gif fl service mark property incorporated 
link restriction enforced particular viewer placeholder section document 
viewer noteworthy view associated underlying object participate chimera hyperweb 
metrics chimera api consists approximately entry points 
ada api library kilobytes size 
api library chimera server megabytes size uses approximately megabytes memory executing 
metrics performance chimera anecdotal 
user perspective link traversal running viewers occurs instantaneously 
link traversal leads non running viewer noticeable delay unix spins new process 
newly invoked viewer initialized completion link traversal occurs quickly 
conducted performance experiment integrated framemaker client 
set link traversal framemaker documents chimera framemaker internal hypertext functionality 
user noticed difference time took complete traversal despite fact chimera link traversal involved passing rpc messages unix processes framemaker link traversal handled completely framemaker 
versioning version control mechanisms important hypertext system wishes support software engineering activities non trivial fashion 
chimera exception mechanism versioning research priority 
brief discussion preliminary approach 
chimera intentionally offers support storing application objects hypertext data repository version control responsibility shared chimera client applications 
example chimera undoubtedly create relations source code files 
version control responsibility files rest existing revision control system rcs 
responsibility versioning relations files reside chimera 
concept chimera shall capable multiple versions 
raises significant issues consistency maintenance concept instance changed 
example anchor deleted removed links belongs requiring new version links 
issue consistency maintenance versions maintained external versioning system versions maintained chimera 
resolving issue providing mechanism flexible multi concept version naming requires new class concept chimera configuration 
configuration contain snapshot current versions hyperweb subset 
external object versions mapped configuration 
anticipated parallel version paths supported chimera class configuration concept 
explicit mechanisms need exist support creation new branches new branch created transparent 
merging paths require special utility resolve conflicts prompting user guidance necessary 
collaborative hyperweb construction chimera currently support collaborative building linked real time multiple users user aware user actions due limitations conceptual architecture addressed current implementation restriction chimera server hyperweb 
major limitation current conceptual architecture chimera server maintain data stored hyperweb managing chimera clients connect 
needed separation concerns new component hyperweb server added conceptual architecture 
new component relieves chimera server data management activities 
involves moving adts implement chimera hypertext concepts chimera server hyperweb server 
chimera server component free concentrate supporting client access multiple hyperweb servers multiple 
postulate environment hyperweb server hyperweb multiple chimera servers managing collaborative user access real time hyperweb servers 
sets servers need handle links created ensure notification changes information space propagated connected users 
anticipate chimera server support access distributed objects employing universal resource url style object naming mechanism existing transfer protocol access remote objects 
writing chimera supports collaborative building limited manner single hyperweb viewers participating collaboration register appropriate hypertext events chimera server managing particular hyperweb 
limited fact users modify link time notification user actions occurs actions taken place 
related substantial evolution hypertext functionality decade significant efforts apply hypertext software development problem similar systems described discussed chronological order appearance chosen historical importance close relation impact design chimera 
dexter hypertext model dexter hypertext model dexter framework comparing hypertext systems developed result nist workshops 
attempts provide standard hypertext terminology describe important abstractions hypertext systems 
system developed dexter devise dexter extended 
dexter defines layers run time layer storage layer component layer 
storage layer sits middle interfaces run time layer presentation specifications component layer anchors 
storage layer creates network components types atomic composite link 
atomic components contain data stored component layer tools run time layer 
addition atomic components contain anchors index directly data allow data linked 
composite components allow scalable constructed 
link components contain specifiers describe atomic composite components linked 
chimera completely modeled dexter 
instance chimera handle presence links zero anchors dangling links 
dexter constructs widely criticized 
chimera notion view adequately modeled composite component chimera view contains information object viewed viewer create view 
composite component hand contains atomic components contain data 
dexter anchors created directly data referenced atomic components chimera anchors created views objects data 
additional level abstraction possible dexter 
fact believe dexter model case object atomic component displayed differently viewers viewer accessing different set anchors links 
chimera view concept handles example easily dexter way specify 
viewer free define anchors respect view including objects exist run time graphical widget 
believe dexter unable specify type anchor graphical widget lies domain dexter presentation specifications anchors created dexter respect specifications 
virtual notebook system virtual notebook system vns built college medicine support collaborative biomedical research distributed hypertext services heterogeneous computing environment 
vns implemented set group servers distributed network 
store text graphics link information 
users typically store data local machine access information stored machine 
vns gatekeeper integrate external tools vns information tools copied stored 
interesting aspect vns users may share data share links 
users see page view different links 
link information user stored separately data page 
page constructed dynamically user link information page retrieved displayed 
chimera able provide functionality link filtering go step anchor filtering allows users see different anchors shared view 
vns contrast chimera requires system information stored database control 
integration vns concerned providing ability copy information external tool vns database 
point external tool taken loop vns handles display data 
integration chimera concerned getting viewer communicate chimera server 
chimera attempt display viewer objects 
sun link service sun link service ls commercial product defined protocol extensible loosely coupled hypertext system 
application integrates ls loading library implements protocol 
library allows communication ls control process facilitates communication link aware applications 
applications provide call back procedures ls receive link related messages 
links binary stored database managed ls control process 
chimera link service differ aspects 
ls promotes applications creating anchors underlying object data model 
chimera anchors created view object object 
allows chimera viewer store anchor information separately object objects refers 
links hidden ls application retrieve links manipulate 
case chimera links retrieved appropriate viewer displayed variety ways 
enables creation hierarchical 
chimera links ary 
approach creating flexible hyperbase support notion extensibility 
joint university aalborg hypermedia research laboratory 
system simple framework provides built classes perform basic hyperbase features concurrency control notification control access control version control search query 
user takes initial framework extends built classes produce hyperbase system tailored hypermedia applications user environment 
object oriented language implement server key extensibility allows new data objects methods added runtime turns produces environment conducive rapid prototyping 
chimera approach differs greatly approach 
authors assert fixed hypermedia model hinders development new tools forcing developers compromises applications match existing model 
approach implicit assumption developers hypermedia systems want develop system certain set tools system different set tools require different hypermedia model 
iterations approach user ends hypermedia systems believe incompatible 
objects managed systems linked objects systems presumably effort required update applications data model data model non trivial 
implicit assumption simply tenable software development environment extremely heterogeneous 
counter productive introduce diversity environment addition multiple potentially incompatible hypermedia systems 
assumption objects hypermedia system stored single database 
assumption valid software development environment multiple heterogeneous object management systems exist desirable link objects stored diverse object repositories 
chimera provides flexible hypermedia model developed specifically needs tools software development environment 
greatly reduces chance specific tool model provided chimera able participate chimera hyperweb 
fact chimera hypermedia model designed assumption chimera enter environment pre existing tools eventually integrated 
model flexible possible 
microcosm microcosm open hypertext system developed university southampton 
link service attempts keep aspects system hypertext model messages passed applications microcosm microcosm response messages open tailorable 
microcosm aware applications send selections action pairs microcosm document control system dcs 
dcs sends message chain filters act message blocking passing modifying way 
special type filter linkbase finding source link message attaches destination link message 
message emerges filter chain link dispatcher presents user actions contained resulting message 
microcosm integrate non aware microcosm viewers shared clipboard 
worst case situation rarely applications users want microcosm contain hooks needed integrate microcosm 
microcosm applied situations involving megabytes information handle multiple sets links set data swapping various linkbases filter chain 
distinctions chimera microcosm 

microcosm uses message api chimera uses multi lingual programmer api 
microcosm messages tagged ascii format 
filters act tags ascii message recognize ignore tags 
addition filter introduce tag associated data message 
contrast details chimera message format hidden chimera clients chimera api chimera server message adt 
abstraction allows chimera developers freely change format messages affecting rest system 
allows message format simple ascii text complex ada variant record needed effectively support semantics chimera api 
freedom change message formats available microcosm approach potentially integrate tools system modify participating tool programmer api 
chimera approach integrating non aware viewers create wrapper proxy program uses chimera api mechanism non aware viewer communicate external systems 

microcosm aware applications provide hypertext functionality menu interface 
promotes common interaction style viewers may prevent applications graphical user interface participating system 
chimera prescribe restrict viewer interface way idea software development environment developers tolerate inconsistency interface return powerful tool chimera hyperweb 

microcosm analogous concept chimera view concept 
document microcosm userdefined physical type 
physical type associated viewer 
particular document destination link traversal microcosm invokes associated viewer specified document 
chimera view concept independent particular data element stored 
allows chimera greater flexibility handling multiple views single object handles easily case single view consists data accessed multiple sources 
system prototype hypermedia research laboratory hrl texas university engaged building hypermedia systems sp 
time hrl built series hyperbase systems hb support data storage requirements hypermedia systems 
sp defines flexible hypertext model 
applications manage components persistent selections created 
persistent selections attached anchors associated links 
links create association sets modeled underlying hyperbase 
matches chimera hypertext concepts fairly 
difference multiple persistent selections associated single anchor 
chimera viewer wanted associate multiple regions view anchor necessarily mapping function anchors regions view complex 
typically chimera viewers map region anchor equivalent mapping persistent selection anchor sp 
distinctive feature hrl anchors links class executing programs provide wide range run time semantics 
allows user interaction hypertext services handled anchor link processes burden client applications 
handled virtue fact anchors links supplied classes default set behaviors applications subclass modify desired 
sp hb provide sophisticated environment represents attempt providing hypermedia inthe large 
differences chimera hrl 
instance chimera state support multi user collaboration shared hyperweb 
additional differences outlined 
ffl chimera taken different approach respect anchors links 
objects managed viewers chimera server respectively opposed class processes 
allows anchors specifically tailored viewer placing burden viewer developers implement functionality new viewer 
allows links handled consistent manner price implementing special link behaviors chimera server 
ffl sp requires applications object manager hb store application data allows sp support versioning application data hypertext information 
chimera contrast places restrictions viewers requiring viewer cooperation provide reliable versioning 
ffl chimera associates anchors views sp associates anchors persistent selections refer directly application data 
enables chimera combined viewer mechanism chiron provide greater flexibility displaying anchor supporting ability viewers concurrently providing different views object anchors presentation separated chiron application code 
similar sp notion context 
sp depending context different sets anchors links available application displaying object 
contexts handled chimera combined attributevalue pairs filtering anchors links chimera server particular view 
ffl sp links ordinary objects anchors defined participate hierarchical webs 
chimera appears scalability advantage 
chimera variety contributions software engineering environments hypertext technology including simultaneous satisfaction requirements described 
essence contributions key concepts separations concerns provision effective set server capabilities demonstrated ability simultaneously satisfy wide variety objectives single system 
concepts separations include view specific anchors separating object anchor persistency link persistency 
viewers define anchors hypertext server responsibility management links 
allowing viewers define anchors permits variety types anchors defined may implemented non invasive ways 
database objects user interface part chimera concepts 
concepts defined media independent manner scalability supported 
chimera server interface supports multiple concurrent clients written multiple programming languages demonstrates commercial black box tools integrated provided support minimal interprocess communication built prototype system chimera validate concepts architecture 
addition believe approach value outside sde domain aid tasks ethnographic studies building digital libraries 
open potentially troublesome issues approach exist 
viewers define anchors viewers may heterogeneous lack consistent user interface hypertext occur 
troublesome sde point view observation relations indicated hypertext links addition relations maintained environment object managers 
may yield number problems including maintaining consistency face change object stores 
hand realistic assume existence single object manager responsible maintaining relations environment originate quick dynamic user discretionary hypertext link creation careful specification design complex project master database strongly typed artifacts 
broad research issue heterogeneous world determining maintain consistency various relation link managers 
partial solution approach intend pursue automatic creation maintenance hyperlinks object manager relations case hypertext style navigation om store enabled 
problematic attempt go direction hyperlinks om relations limitations current om systems 
additional key research activities include determining appropriate mechanisms supporting access controls project line personnel records accessible unauthorized versioning support collaborative hyperweb creation 
acknowledgments authors acknowledge jonathan grudin rebecca grinter palen ziv reading early draft providing comments reviewers helpful suggestions hugh davis wendy hall providing detailed information microcosm link service 
addition authors gratitude extended students software engineering project course experiences fine tuned chimera helped explore issues integration existing software 
basili 
software errors complexity empirical investigation 
communications acm january 
gallo thomas 
overview pcte pcte 
sigsoft software engineering notes november 
conklin 
hypertext survey 
ieee computer september 
freeze gris 
hypertext selecting reusable software components 
proceedings hypertext san antonio texas december 
davis hall heath hill wilkins 
integrated information environment open hypermedia systems 
proceedings acm conference hypertext milano italy november 
davis knight hall 
light hypermedia link services study third party application integration 
proceedings acm conference hypertext edinburgh scotland september 
delisle schwartz 
neptune hypertext system cad applications 
proceedings acm sigmod pages washington dc may 


software factory principles architecture experiments 
ieee software march 
hurst ji 
hyperweb framework hypermedia environments 
proceedings acm sigsoft fifth symposium software development environments washington december 
garg scacchi 
hypertext system manage software life cycle documents 
ieee software may 
garzotto schwabe 
hdm model design hypertext applications 
proceedings hypertext pittsburgh pennsylvania november 
gr trigg 
design issues dexter hypermedia system 
communications acm february 
halasz mayer 
dexter hypertext model 
communications acm february 
halasz 
reflections notecards issues generation hypermedia systems 
communications acm july 
hall hill davis 
microcosm link service technical briefing 
proceedings hypertext seattle washington november 
hardman van rossum 
amsterdam hypermedia model adding time context dexter model 
communications acm february 

specifying software requirements complex systems new techniques application 
ieee transactions software engineering se january 
hicks leggett 
version control hypertext systems 
report tamu hrl texas university july 
leggett 
extensible hypertext architecture 
acm transactions information systems october 

issues encountered flexible software development environment lessons learned arcadia project 
proceedings acm sigsoft fifth symposium software development environments tyson corner virginia december 
leggett 
viewing dexter open eyes 
communications acm february 

multimedia object retrieval environment 
proceedings hypertext seattle washington november 
levine osterweil 
multi lingual interprocess communications system software environment implementation 
submitted publication 
nielsen 
hypertext hypermedia 
academic press san diego california 
pearl 
sun link service protocol open linking 
proceedings hypertext pittsburgh pennsylvania november 

hb hyperbase management system open distributed hypermedia system architectures 
phd thesis texas university college station texas august 
leggett hicks 
hb initial design implementation hyperbase management system 
technical report tamu hrl hypertext research lab texas university october 
shipman iii 
distributed hypertext collaborative research virtual notebook system 
proceedings hypertext pittsburgh pennsylvania november 
smith smith 
abc hypermedia system artifact collaboration 
proceedings hypertext san antonio texas december 
steinberg ziv 
software visualization yosemite national park 
proceedings annual hawaii international conference system sciences january 
streitz haake lemke schuler 
cooperative hypermedia authoring environment 
proceedings acm conference hypertext milano italy november 
tarr clarke 
object management system software engineering environments 
acm sigsoft proceedings symposium foundations software engineering los angeles california december 
taylor johnson 
separations concerns chiron user interface development management system 
proceedings conference human factors computing systems pages amsterdam april 
association computing machinery 
taylor johnson anderson 
separations concerns chiron user interface development management system 
uci ics technical report tr department information computer science university california irvine march 
thomas 
tool integration pact environment 
proceedings eleventh international conference software engineering pittsburgh pa may 
tichy 
design implementation evaluation revision control system 
proceedings sixth international conference software engineering pages tokyo japan september 
leggett 
extensibility develop dynamic open distributed hypertext systems 
proceedings acm conference hypertext milano italy november 
