storing retrieving keys table cross indexing teahan ian witten department computer science university waikato hamilton new zealand phone fax email wjt waikato ac nz waikato ac nz dictionary storage structure described particularly locating partially specified key letters certain positions 
operation returns entire set matching keys just efficient searching full key 
structure supports finding seeking regular expressions sorting 
compact depending method representing sparse sets involved may provide compression original dictionary 
dictionary easily reconstructed structure 
search algorithms suited parallel implementation 

describes data structure called cross index storing keys table retrieving 
basic idea create set letter letter position maximum key length 
example set letter letter position contains entries keys set seventh position contains keys seventh letter 
particular key accessed retrieving sets letters letter positions key intersecting 
structure compact form smith steen build crossword compiler useful wide range applications 
appropriate representation sets compression dictionary achieved conventional compression methods keys retrieved 
structure suited number operations occur doing fact name cross index short crossword index 
example crossword style searches length key known letters accomplished rapidly resulting set matching words 
retrieval operation generalized accommodate regular expression anagram searching 
sorting keys possible structure 
data structure presents significant opportunities parallel searching explored 
organized follows 
section describes cross index data structure gives algorithms inserting searching reconstructing keys sorting table regular expression anagram look terms set operations 
representing individual sets data structure crucial design issue 
simplest representation bitmap methods take advantage sparseness sets efficient terms space time 
reviewed section 
section gives detailed example cross index store word english dictionary including statistics different methods storing sets 
section compares methods indexing 

cross index data structure table stored set keys strings letters drawn predetermined alphabet 
information may associated key immaterial structure describe 
number letters alphabet maximum key length 
structure consists array ak sets 
set contains elements number keys stored table 
associated key key index arbitrary integer may example chosen incrementing counter keys added structure 
key index letter position set contains integer keys different lengths length represented 
ways doing 
terminate keys null character requires extra sets 
second store sets keys particular length effect creating key length letter requires extra sets 
data structure supports various basic operations manipulate table 
insert key 
key index inserted setting ith element set letter position key 
locate key 
key located intersecting set key length represents terminating character sets letter position key sought 
result set key indexes match 
reconstruct key index find set contains set length key find set contains set letter position key express cost operations cost intersecting sets union sets inserting element set testing respectively 
cost inserting key table kc cost locating key expression hides efficiency achieved size set intersected generally decreases rapidly 
cost reconstructing key index data structure supports sophisticated operations 
locate partially specified key 
keys include don care letters located intersecting sets known letters letter positions including length key just efficient searching full key 
general regular expression style searches may performed data structure 
example expressions contain unspecified sequences cat may located recursively testing appearance substring cat possible letter position 
general procedure works follows 
set maintained candidate matching keys position regular expression position candidate keys 
point execution set contains keys positions match positions regular expression 
character regular expression position ordinary letter candidate set intersected cross index set contains keys letter position procedure invoked recursively incremented 
character regular expression wild card character unix left unchanged procedure invoked recursively positions incremented 
character regular expression wild string character unix procedure invoked recursively times possible value greater case candidate set position incremented 
case reflects fact skipping wild string character regular expression corresponds skipping number characters key 
procedure ends positions reach respective strings termination regular expression matches candidate set 
sort table 
table sorted procedure calls recursively position key 
accomplished follows 
start position key initialize current set keys sorted entire table 
letter alphabet lexicographic order find candidate keys contain letter current position 
collect set continue recursively set incrementing current position recursive call 
point recursion candidate keys contain letters just current key position invariant preserved recursive call 
locate 
find key set reject key indexes constructed 
union sets associated letters key 
letter key set constructed key indexes contain letter times 
sets copies particular letter available anagram added reject keys 
set difference taken set key indexes set rejects key 
series operations may performed sequentially pipelining set matching key indexes operation 
example find set key sort resulting list alphabetically 
seek expressions contain specified sequences 
find words containing cat dog determines set cat uses starting point search dog 
method applied problem searching multiple keys relational database tables 
result search key prime search key 
possible subsets structure independently facilitating design parallel algorithms 
example way increasing speed set intersection partition sets subsets approximately equal size intersect subset parallel 

representing sparse sets simplest way store sets involved cross index bitmaps 
table keys maximum length involves ak bitmaps size nk bits words bits table set average number bits set implies compression techniques reduce storage requirements significantly 
assuming uniform distribution theoretical limit storing subset size set elements log bits large approximately log trade storage requirements efficient set operations bitmaps 
compression techniques seriously impact union intersection operations underpin searching sorting algorithms 
representation supports rapid intersection may permit efficient testing individual bits required key reconstruction algorithm 
complex data structures need completely re built member added set appropriate static tables 
representations time taken test bit set elements may constant array hash table representations proportional log tree representations explicit pointers proportional data structure size close theoretical limit log lists trees explicit pointers 
time intersection may proportional array representations combined size data structures list tree representations number elements smaller sets hash table representations 
time insert element data structure ranges constant array representations log list representations trees explicit pointers time needed re build entire structure may considerable computing perfect hash function 

bitmap storing sets plain bitmaps requires bits expensive storage 
cost performing intersection union bitmaps high requiring bit operations 
operations supported fast hardware time complexity 

lists indexes alternative lists integers represent indexes bits differences indexes 
half bits set economical represent bits 
straightforward list fixed sized integers bit bitmap contains nk values consumes nk log bits 
methods compressing sparse sets lists including run length coding klein huffman coding moffat zobel combination fraenkel klein 

block coding developed technique represent difference list items encoding difference parts unary part followed binary part moffat zobel 
represented consecutive run written plain binary 
unary part binary part number encoded xb 
choosing parameter judiciously individual bitmap block code achieves near optimal compression long bits uniformly randomly distributed 
best value turns case size representation small additive constant optimal value moffat zobel 
bitmaps bits chosen independently method far optimal 
list approaches provide effective means compressing sparse sets improve time needed perform operations set 
time test particular element set proportional set size size universe 
union intersection operations lists containing elements require comparisons 

run length coding set contains runs consecutive bits promising method store list lengths run 
fixed number bits store lengths interpolation search perl employed providing rapid means testing union intersection operations list encoding methods described 

partitions bit vectors method storing sets partition blocks approximately equal length bookstein klein 
blocks vector length built ith bit ith partition original set contains bits 
vector followed bit vectors partitions non empty 
method compresses original set contains bits 

partitions lists indexes bit vector store partition bookstein klein suggested storing list offsets bit 
reduces storage required cost extra time spent membership intersection operations 

bitmap trees partitioning technique extended repeating create tree bit vectors subtrees pruned away contain bits 
approach onedimensional version quadtrees commonly graphics attributed 
size bitmap tree uniformly distributed elements studied analytically 
derives expression expected size terms parameters branching factor tree number levels stored turns economical store top levels 
concludes optimal branching factor 
densities expected size tree times information theoretic bound log achieve near optimal storage requirements block code discussed randomly distributed sets bitmap trees achieve compression range densities robust nonuniform bit distributions block codes 
non uniformities occur dictionary applications keys cross index structure sorted 

pruning bitmap trees bitmap trees improved pruning bits original set handled efficiently hierarchical approach storing separate list choueka 
inefficient bits stored bitmap tree 
example subtree flagged having bits case need stored bit case stored literally binary code length log bits subtree depth bits case subtree recorded 
way reducing size bitmap tree find level bit occurs prune higher storing level number 
repeated lower levels global value stored indicate level pruning ceases 
compressing tree added advantage reducing number nodes tested union intersection membership operations 
branching factor need level tree 
fact imagine optimizing branching factor level exhaustively searching possible combinations 
structure questionable utility complicated union intersection operations caused mismatching partition sizes tree depths 
need store size partition subtree node adds appreciable storage overhead particularly lower levels may nodes 
problems ameliorated restricting partition size powers 
table number bits set cross index chambers dictionary 
bitmap trees pointers number nodes tested intersecting bitmap trees just size trees intersection quite rapid 
test individual bit full tree traversed bit reached 
number bits counted level order determine size level location lower parts tree 
possible savings space discussed address problem providing rapid access lower levels tree pointers appear possible solve problem keeping space requirements reasonable bounds 
bitmap trees testing individual bits takes time proportional size data structure depth 
pointers stored leaves tree accessed time proportional depth increases storage requirements substantially 

median trees different approach median tree described 

method initially store cardinality set lower upper bounds median 
set partitioned equal sized subsets size odd subsets differ size medians partitions stored 
repeated recursively partition elements original set included 
approach lead greater storage efficiency bitmap tree approach retaining robustness nonuniform data distribution 
small saving space achieved arithmetic coding witten encode medians cost retrieval time 
bitmap trees time taken intersection union proportional size data structure generally little faster median trees compact 

median trees pointers median tree shares bitmap tree disadvantage able index quickly lower levels membership operations take time proportional size tree 
problem overcome fairly small cost extra storage number bits store medians level tree 
level medians stored maximum number bits required represent median level 
number recorded level conveniently done unary consecutive bits followed bit 
tree indexed directly membership queries take time proportional tree depth log 
hashing developed techniques finding minimal perfect hash functions offer possible representation sparse sets 
hash function maps set keys integers case addresses table 
collision occurs key lands address 
perfect hash function ensures collisions set keys 
minimal perfect hash function ensures unused addresses hash table 
minimal perfect hash function maps th element set th address hash table called order preserving 
hash functions store sparse sets membership queries extremely fast constant access time intersection takes time proportional size smaller set union takes time proportional size larger set 
operations require repeated intersection sparse sets dissimilar sizes hashing give substantial time reductions size sets progressively decreases 
numerous algorithms proposed produce perfect hash functions methods method bits ratio bits key original text pointers bitmaps plain bitmap empty sets removed lists block code run length coding partitions bit vectors lists indexes bitmap trees pointers way tree way way tree way tree way tree way tree bitmap trees pointers way tree depth way tree depth way tree depth way tree depth median trees way pointers pointers perfect hash czech partitioned czech partitioned fox table storage chambers dictionary different methods representing sets method pointers space kbytes time cpu secs way bitmap tree depth way bitmap tree depth way bitmap tree depth way bitmap tree depth partition lists indexes partition size median tree run length coding interpolation sort block code way bitmap tree binary search original text table time search retrieve keys chambers dictionary producing minimal perfect hash functions large sparse sets 
class methods produces order preserving hash functions developments reduced storage requirements hashed sets log close optimal czech 
class methods produce hash functions order preserving techniques available approach optimum storage requiring just bits key reasonable computation times large sets fox 

hashing partitioning methods require considerably storage needed block encoded list bitmap tree median tree 
space taken hash function integer keys hashed may reduced array partitioning technique described teahan 

example cross indexing methods representing sparse sets described cross index chambers dictionary 
contains words totaling characters alphabet letters longest word characters 
table shows number elements sets letter letter position 
word length set line table gives distribution word lengths character words character ones 
largest sets appear row common letter words having position having second position 
table shows number bits required store chambers dictionary various methods representing sets 
comparison ratio storage required original text letter stored equivalent bit number pointers index directly start word shown column 
number bits key shown column 
methods require storage median trees way bitmap trees compress original text 
surprisingly methods outperform block coding optimal method sets uniform distributions 
keys dictionary stored alphabetical order consequently runs bits sets 
table shows time took search retrieve randomly selected keys different methods 
time measured cpu seconds vax 
comparison time took binary search original ascii text pointers shown bottom row table 
surprisingly worst methods block coding way bitmap tree pointers 
fastest method way bitmap tree depth pointers just times slower binary search original text 
second column lists storage kilobytes transferred table 
comparison indexing methods determine cross indexing supports operations sorting regular expression searching compare methods indexing keys table 
obvious method store keys sorted list 
variable length keys requires bits storage average key length bits needed pointer 
searching key table requires logn character comparisons 
contrast cross indexing slower depending method represent sets may slightly storage 
cost searching key cost intersecting sets quickly reduces intersection number matching indexes reduced 
results table show data structure way bitmap tree nearly times slower binary search sorted list 
insertion faster requiring just bit operations 
approach tree structure binary tree knuth trie knuth fredkin sedgewick median split tree 
efficient sorting searching particular keys approaches support anagram regular expression searching scanning tree 
operations regular expression searching approximate matching pattern matched contains errors faster cross indexing methods parallel algorithms may reduce cost searches 
example search keys match chambers dictionary cross indexing takes approximately seconds vax compared seconds egrep 
different approach store keys text file pattern matching algorithm search file 
wu manber describe agrep utility exact string matching algorithm devised baeza yates gonnet 
utility capable searching multiple patterns patterns wildcards regular expressions patterns arbitrary number errors 
state running time searching regular expressions nk number characters file number errors 
approach initialization cost involved setting dictionary applied text file involve searching text 
permuted dictionaries witten means performing regular expression searches 
word stored possible rotated positions word hello appears hell lo hel llo permuted dictionary stored hello main dictionary 
dictionary searched quickly binary search 
witten estimate take mbytes store uncompressed permuted dictionary words include dictionary equivalent mbytes chambers dictionary containing words 
compares mbytes shown table required store cross index partitioned lists indexes 
cross indexing supports anagram searching 
searching different word silent takes approximately seconds vax 
bentley describes different method generating word 
method involves computing signature word dictionary rearranging letters alphabetical order 
words stored signature sorted order signature 
word easily computing word signature locating sorted file 
approach fast involve substantial initialization cost compute sort signatures 
dictionary size doubled signatures need stored 
gives information interesting word problems multiple word 
cross indexing effective applied problems involve searching keys containing unknown letters 
applications require type search include crossword solving compilation spelling correction playing scrabble 
practical programs problems variety different indexing strategies 
simple method split dictionary separate lists containing words length search linearly 
table illustrates drawback word length requires linear search words 
systems reduce dividing list sublists letter alphabet list holding words contain letter total word lists 
apart problem storing multiple copies word alleviated pointers lists large example letter words contain letter 
obvious extension approach cross index 
possibility kind trie 
appel jacobson dawg compact version trie storing indexing dictionary scrabble playing program 
techniques expensive presence blank tiles greatly increases number moves possible turn 
time spent searching increases accordingly 
fact possible tell program holds blank tile noticeable delay move 
program gets blanks simultaneously slip coma seconds 
appel jacobson cross index fact return list possible matches search quicker perform set intersections exact search 
tries widely applied problem searching close matches knuth partridge james muth 
murphy describes stepwise technique constructing tries optimize error digital search problem digits key may erroneous concludes problem finding optimal tree np complete 
spelling correction systems hashing peterson trigrams general ngrams riseman hanson 
difficult apply indexing strategies diversity operations cross indexing supports 
smith steen proposed bitmap approach similar cross indexing crossword compiler 
separate bitmaps word length compact 
novel approaches crossword compilation involve precedence relationships horn clauses integer programming wilson 
problem evaluating effectiveness different methods highlighted rankin proposed standard measuring crossword compilation efficiency 
greatest advantage cross index data structure different operations may applied suitable applications solving cryptic crossword puzzles require diverse operations locating parts words anagram searching 

summary cross indexing new method storing retrieving keys table 
ideally suited crossword style searches keys known length contain unknown letters 
supports wide range useful algorithms 
remarkably advantages achieved data structure consumes space original dictionary keys dispenses need 
structure advantages keys need stored key recovered quickly index 
partially specified expressions efficiently 
crossword style searching particular easily performed 
anagram searching possible 
table sorted 
cross index structure multiple parallel searching searching series subsets parallel combining results multiple cross indexing searches parallel example searching multiple keys database pipelining result search 
appel jacobson 
world fastest scrabble program 
comm 
association computing machinery may baeza yates gonnet 
comm 
association computing machinery october 

crossword compilation horn clauses 
computer journal 
ranking 
proposed standard measuring crossword compilation 
computer journal 
bentley 
programming pearls 
addison wesley reading massachusetts 
bookstein klein 
compression correlated bit vectors 
information systems 
czech havas 
optimal algorithm generating minimal perfect hash functions 
research report tr university queensland australia 
choueka fraenkel klein segal 
improved hierarchical bit vector compression document retrieval systems 
proc 
th acm conference pisa italy september 
acm new york 

computer 
scientific american october 
fox heath chen 
practical minimal perfect hash functions large databases 
comm 
association computing machinery january 
fraenkel klein 
novel compression sparse bit strings preliminary report 
combinatorial algorithms words edited apostolico galil nato asi series springer verlag berlin 
fredkin 
trie memory 
comm 
association computing machinery 

huffman coding bit vector compression 
information processing letters 

evaluation hierarchical bit vector compression technique 
information processing letters 
klein bookstein deerwester 
storing text retrieval systems cd rom compression encryption considerations 
acm trans 
information systems 
knuth 
art computer programming vol 
iii searching sorting 
addison wesley reading massachusetts 
wormald czech havas 
family generators minimal perfect hash functions 
research report tr dimacs rutgers university piscataway nj 

computer construction crossword puzzles precedence relationships 
artificial intelligence 
moffat zobel 
parameterised compression sparse bitmaps 
proc acm sigir copenhagen june 
murphy 
unifying framework trie design heuristics 
information processing letters 
muth 
correcting human error alphanumeric terminal input 
information processing management 
partridge james 
natural information 
int man machine studies march 
perl itai 
interpolation search log log search 
comm 
association computing machinery july 
peterson 
computer programs detecting correcting spelling errors 
comm 
association computing machinery december 
teahan witten 
storing sparse sets theory practice 
th australian conference combinatorial mathematics computing adelaide july 
riseman hanson 
contextual postprocessing system error correction binary ngrams 
ieee transactions computers may sedgewick 
algorithms 
addison wesley reading massachusetts second edition 

median split trees fast lookup technique frequently occuring keys 
comm 
association computing machinery november 
smith steen 
prototype crossword compiler 
computer journal 
teahan 
minimal perfect hash functions 
new zealand computer science research students conference hamilton october 

ii 

mannheim 
cited jakobsson 
wilson 
crossword compilation integer programming 
computer journal 
witten bell nevill 
indexing compressing full text databases cd rom 
information science 
witten neal cleary 
arithmetic coding data compression 
comm 
association computing machinery 
wu manber 
comm 
association computing machinery october 
