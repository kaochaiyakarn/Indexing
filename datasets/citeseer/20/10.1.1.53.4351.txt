dynamic programming frame efficient parsing manuel ferro universidad de la departamento de campus de la spain dc fi es david centro ramon para en santiago km santiago de spain cirp es miguel alonso pardo universidad de la departamento de campus de la spain alonso dc fi es years seen renewal interest consideration dynamic programming compiler technology 
due compactness representations turning paradigm common way dealing highly redundant computations occurring instance natural language processing logic programming interpretation related phenomena non determinism domain ordering 
usual find practical studies real interest techniques approaches better adapted case 
justify consideration dynamic programming definite clause context free grammar parsing highlighting parallelism reached cases 
focus computational properties suggesting simple decision guide reader interested applying technology 

highly redundant computations usual deal complex grammar formalisms 
claim motivate parsing techniques encode trees computations kind shared structure 
major areas application natural language processing nlp dynamic programming known long time logic programming 
dynamic programming initially proposed address shortcomings classic prolog evaluation poor termination complexity properties rendered unsuitable practical purposes 
theory strategies give exponential reduction complexity traditional parsing resolution techniques lack comparison frame proposals leads describe compilation schema basis naive approaches backtracking 
aim illustrate practical suitability dynamic programming deal grammatical formalisms horn continuum goes context free languages horn clause logic 
obtain uniform understanding computational behavior syntactic phenomena establish formal framework parsing 
choose context logical push automaton notion operational model generalizing classic concept push automaton full order horn logic allows parsing strategies expressed unique device 
seek cast light compilation schema dynamic programming approach suitable case 
problem posed context nlp representative domain embracing parsing formalisms continuum considered 
effect parsers nlp usually classified categories ffl line approaches producing kind preliminary grammatical skeleton typically context free grammar cfg system filter undesirable analysis account finer language structure 
ffl line systems applying linguistic restrictions parsing time case definite clause grammars dcgs 
cases sharing computations affects performance 
may allow better factorization filter parse trees fully exploit declarative power formalism dealing possible infinite number structures 
section establish formal testing framework 
sections respectively give survey representative parsing strategies cases offline line locating testing framework 
section include experimental results 
section 
top architectures ak gamma ak ak delta delta delta ak ak delta delta delta ak categories recognized 
bottom architectures ak gammaa ak delta delta delta ak ak delta delta delta ak categories th position recognized 
meaning symbols 
common framework introduce common parsing device testing extending original notion 
generalization operational model described authors 
defined sigma delta theta denumerable ordered set variables finite set functional symbols sigma finite set extensional predicate symbols delta finite set predicate symbols represent literals stored stack initial predicate final predicate theta finite set transitions 
stack automaton finite sequence items bp st oe top left algebra terms delta oe substitution current position input string bp position input string began look configuration st state driver controlling evaluation 
transitions kinds ffl horizontal gamma 

applicable stacks ae iff exists general unifier mgu oe mgu oe aoe fact extensional database 
obtain new stack coe aeoe 
ffl pop bd gamma 

applicable stacks form ae iff oe mgu ae oe aoe fact extensional database 
result new stack coe ae aeoe 
ffl push gamma 

apply stacks ae iff oe mgu oe aoe fact extensional database 
obtain stack coe oe ae 
items sigma control condition operate transition 
order deal context free grammars sufficient substitute notion unification matching oe ae ae identity transitions 
typically control predicate fag represent case condition lookahead string 
dynamic programming introduced collapsing stack representations fixed number items adapting transitions order deal items 
correctness completeness compatibility computations new frame assured relation classic push devices talk concept dynamic frame 
allows index parse order disregard computational lexical analyzer separating task parse focusing syntactic phenomena reducing search 
relies concept itemset associating set items token input string represents state parsing process point scan 
shall bp chain pop transitions 
usually dynamic frames practical interest superscript denotes number top stack elements generate items 
standard dynamic frame stack components backtracking technique simulate nondeterminism denoted correctness complete ness relation trivial transitions formal model depend worst case elements stack 
case different pop transitions information available element top stack 
order solve lack information redefine behavior transitions items follows ffl horizontal case gamma 
coe oe mgu 
ffl pop case bd gamma 
gamma 
oe mgu doe gamma 
coe dynamic transition generated pop transition 
applicable item computed top generated share syntactic context 
ffl push case gamma 
cb coe oe mgu 
provides best sharing properties proved correctness guaranteed weakly predictive parsing strategies typically pure bottomup approaches mixed strategies including predictive phase static dynamic complemented bottom construction parse 

line parsers compare context free parsing schema grammatical formalism skeleton line approaches different dynamic frames 
considered basic parser generators environment implementation classic earley algorithm system 
correspond respectively classic top approach backtracking dynamic prediction mixed strategy static prediction lalr extended automaton taken ice environment 
chosen ice efficient representative family unrestricted lr context free parsers includes systems sdf glr tomita algorithm 
locate parsing schema testing frame introduce categories rule fl nk meaning shall detail case 
real unification parser built notion affix grammar 
assimilated dcg parser functional symbols allowed 
permit take account known parsing systems available nlp 

top architecture symbol shows categories right hand side rule fl recognized shown fig 

obtain set transitions characterize parsing strategy 
gamma 

bp gamma 
bp 
bp gamma 
bp 
nk bp bp gamma 
briefly interpret follows 
requires recognition axiom represent 
selects leftmost unrecognized category 
body fl sequence new categories recognized 

recognition fl return calling rule fl state represented operative sense approach 

earley approach precedent case earley algorithm requires interpretation symbols states operative sense items 
addition category shall consider associated symbols respectively indicate recognized recognized 
parsing scheme defined transitions 
gamma 

gamma 

bp gamma 
bp 
nk bp bp bp gamma 
bp 
bp bp gamma 
informally explain esp ree sentence ree sentence phr tree tree np tree vp tree sentence phr tree tree sentence tree pp tree np np rd noun rd word number np pr rd pronoun rd word number np np det wrd wrd determiner wrd word number gender noun wrd word number gender np np tree tree np tree pp tree pp pp prep rd ree preposition rd word np ree vp vp verb rd ree verb rd word number np ree 
guideline grammar 
states axiom represent 
requires recognition represent 
selects leftmost unrecognized category 
body fl recognized 
push show recognized 

recognition parse advances term fl 
bottom strategy static control introduce ice parser included 
symbol expresses categories righthand side fl position recognized shown fig 

set transitions defines generalized lalr automaton follows 
nk bp st gamma 
nk st nk bp st faction st token reduce fl 
st bp st gamma 
gamma bp st faction st token shift st 
bp st gamma 
bp st st st 
bp st gamma 
st bp st faction st shift st 
bp st gamma 
st bp st faction st shift st 
gamma 
st faction token shift st action goto shift reduce known concepts lr parsing 
interpret transitions follows 
pushes nk indicate body fl recognized 

parser advances refutation 
literals body fl recognized recognized 

pushes literal assuming needed recognition 

begins recognition fl 
states axiom 
line parsers go deep influence dynamic programming considering complex grammatical formalisms 
take dcg extensions context free parsing strategies previously tested 
precise shall consider environment representative typical top evaluator implementation earley deduction scheme system simple unification oriented extension ice 
chosen representative family lr inference environments 
previous introducing experimental results locate architecture unified framework 
deal clauses fl form gammaa nk logical terms 
introduce vector variables occurring fl predicate symbol positional meaning predicate symbol dependent particular evaluation strategy instances serve temporary information storage structures remaining subgoals evaluation 
intuitively interpretation evaluation schema analogous considered line parsers replacing notions matching recognition axiom category rule unification refutation query goal clause respectively 

top architecture simulation top strategy transitions 
gamma 

bp gamma 
bp 
bp gamma 
bp 
nk bp bp gamma 
instance indicates literals th literal body fl proved 

earley approach case earley deduction set transitions 
gamma 

gamma 

bp gamma 
bp 
nk bp bp bp gamma 
bp 
bp bp gamma 
interpretation instances preceding case 
meaning atoms analogous context free case 
respectively indicate term dcg proved proved 
items value cfg cfg dcg dcg 
tests 
bottom strategy static control introduce evaluation scheme transitions 
nk bp st gamma 
nk st nk bp st faction st token reduce fl 
st bp st gamma 
gamma bp st faction st token shift st 
bp st gamma 
bp st st st 
bp st gamma 
st bp st faction st shift st 
bp st gamma 
st bp st faction st shift st 
gamma 
st faction token shift st control conditions built actions driver lalr automaton built context free skeleton dcg 
skeleton obtained original program keeping functors clauses order obtain terminals extensional database variables heads intensional account arity 
idea driver cut evaluation conflicts arising coincidence logical terms signatures proof process 

experimental results show dynamic programming improves efficiency compilation schema shall focus aspects number computations contrasted classic backtracking techniques simple comparison different parsing strategies 
supported lot different tests considered example illustrate discussion order facilitate understanding 
syntax simple subset nominal sentences english 
henceforth take guideline example dcg shown fig 

simplify explanation assume lexical information directly recovered specialized tagger name corresponding attribute allows focus syntactic phenomena 
third clause definition predicate np instances variable wrd value current input token syntax wrd word 
similarly recover number gender respectively key words number gender 
context free skeleton defined rules sentence sentence np vp sentence sentence pp np noun np pronoun np determiner noun np np pp pp preposition np vp verb np chosen input strings form see father son father number repetitions substring son father 
number different parses increases exponentially number allowing study compilation schema highly redundant computations appears 
items value cfg dcg cfg 
tests pure top parsing tests performed dynamic frames earley ice ice earley ice 
tests interest earley classic algorithm naturally described tests place due top architecture completeness tests obtained alternative adaptation parsing scheme original tool dynamic programming 
tests dcg case obtained excluding functional symbols facility available 
avoid distortion results testing grammar chosen way number items cfg corresponding dcg 
effect absence clauses common context free skeleton fact example functional symbols exclusively constructive sense permits attain goal 
results alternative implementation include functional symbols 
items value earley cfg earley deduction dcg 
tests earley strategies results related shown fig 
fig 
respectively 
case earley algorithm results shown fig 

cases dynamic programming highlights better computational behavior respect classic approaches addition simple view shows best results correspond mixed strategy static predictions earley classic top parsing 
tests dynamic programming parsing sole context free backbone dcg shown fig 
fig 
respectively 
natural dynamic frame parsing model obtain figures 
benefit due shown 
looking figures realize case lowest increment achieved number generated items going cfg dcg 
particular results dcgs proves efficiency cut unification conflicts resolution 
apparently bad behavior tests extended cfgs 
effect natural consequence reduced number prediction computations due structure grammar claimed 
items value earley cfg cfg cfg 
comparing strategies cfgs 
reviews formal framework encompassing architectures considered computational properties best known parsing schema continuum horn formalisms 
exemplified problem computational sharing frame nondeterminism usual showing practical interest dynamic programming regardless parsing scheme chosen 
secondary outcome corroborate superiority claimed proved bottom parsers top mixed strategies 
frequently performance shown top architecture practical systems due efficiency backtracking manage search space 
case indexing permits limit difference bottom case increasing efficiency 
parallelism existing results practical dynamic programming extremes continuum considered leads argue extension formalisms continuum middle sensitive grammars 
items value dcg dcg earley deduction dcg 
comparing strategies dcgs 
acknowledgments partially supported feder european union fd government spain hf de galicia 
aho ullman 
theory parsing translation compiling volume 
prenticehall englewood cliff new jersey 
de la 
automates piles programmation 
phd thesis university paris vii france 
earley 
efficient context free parsing algorithm 
communications acm 
heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 
lang 
uniform formal framework parsing 
tomita editor current issues parsing technology pages 
kluwer academic publishers 
meijer 
project extended affix grammars nijmegen 
attribute grammars applications 
nilsson 
aid alternative implementation dcgs 
new generation computing 
pereira warren 
parsing deduction 
proc 
st annual association computational linguistics pages cambridge massachusetts 
rekers 
parser generation interactive environments 
phd thesis university amsterdam amsterdam netherlands 

lr inference inference systems fixed mode logic programs lr parsing 
international logic programming symposium pages mit press cambridge massachussets usa 
tomita 
efficient parsing natural language 
fast algorithm practical systems 
kluwer academic publishers norwell massachusetts 
vijay shankar weir 
equivalence extensions context free grammars 
mathematical systems theory 

efficient incremental parsing contextfree languages 
phd thesis university nice 
isbn france 
alonso 
lalr extension dcgs dynamic programming 
martn vide editor mathematical computational analysis natural language volume pages 
john benjamins publishing amsterdam netherlands 
alonso 
operational model parsing fixed mode dcgs 
proc 

int 
conf logical aspects computational linguistics pages nancy france 
