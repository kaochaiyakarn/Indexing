hierarchies generalized kronecker trees forms decision diagrams regular layouts marek rolf drechsler portland state university dept electr 
portland oregon tel fax ee edu faculty electrical engineering eindhoven university technology box mb eindhoven netherlands eb ele tue nl institute computer science albert university freiburg germany informatik uni freiburg de presents hierarchies canonical exor trees forms decision diagrams 
hierarchy generalizes kronecker generalized kronecker representations introducing new canonical exor forms 
propose call new forms exor forms including kro grm forms honor russian scientist discovered forms attributed reed muller invented 
new representations forms synthesis quasi minimum esop circuits new diagrams represent large functions optimal synthesis highly testable multilevel circuits technologies especially fine grain field programmable gate arrays 
second hierarchy generalizes extends universal akers array expansions shannon neighborhoods inputs outputs 
diagrams called lattice diagrams 
years decision diagrams dds representation processing binary logic functions 
processing speed relatively small memory requirements dds widely logic synthesis verification simulation 
modern design automation systems binary decision diagrams bdds main internal representation functions meaningful operations executed 
dds originate binary decision trees binary expansion trees shannon trees turn fundamental expansion theorem shannon applied node tree 
node related input variable function 
known diagrams reduced ordered means variables nodes tree ordered way branches 
bdds important disadvantage large functions practical interest represented number nodes tree large 
early research representation boolean functions consisted generalising concept binary tree follow approach 
exists hierarchy exor representations investigated previously 
call green hierarchy original green investigated level forms interlinked forms corresponding trees diagrams 
representations stage logic synthesis technology independent exor synthesis phase followed exor related technology mapping 
hierarchy expansions xn xn phi xn short phi called shannon xn delta xn phi xn short phi called positive xn delta xn phi xn short phi called negative replaced negative cofactor variable replaced positive cofactor variable phi applying recursively expansions subset function cofactors respect level variable function second level variable cofactors third level cofactors various types binary decision trees created 
characterized representations uniform way generalizations 
concepts shannon trees positive trees negative trees kronecker trees reed muller trees pseudo kronecker trees pseudo reed muller trees corresponding decision diagrams flattened level canonical forms discussed 
addition free kronecker trees pd nd nodes disregarding order variables expansions discussed 
tree level different variables expansions occur 
order variables branch different diagrams called non ordered 
similarly define free binary decision trees leading free bdds free positive trees leading free 
free kronecker trees lead free defined investigated 
kronecker dds generalised general data structures 
diagrams arithmetic operations addition multiplication binary logic operations 
diagrams find applications verification digital systems solving general problems discrete mathematics 
propose approach generalization kronecker diagrams generalization uses binary operators useful logic synthesis 
generalized kronecker trees forms decision diagrams unify kronecker generalized reed muller representations proposed 
representations better previously proposed previous representations allow create grm forms flattening 
generalizations representations proposed creating enhanced green hierarchy 
flattened forms design minimized exclusive sum products esop circuits multi level representations design multi level exor circuits exor related technology mapping adjusted exor custom vlsi standard cell fpga technologies 
new representations circuits obtained worse exor circuits obtained previously known representations including 
section ii various kinds trees multi variable nodes introduced 
review concept generalized kronecker trees introduce generalized kronecker diagrams pseudo generalizations lines pseudo kronecker representations created extend kronecker representations 
section iii extended green hierarchies representations 
section iv presents lattice diagrams hierarchy 
diagrams map logic functions regular grid dimensional space allow efficiently realize kinds functions especially totally symmetrical partially symmetrical nearly symmetrical multi output functions functions don cares multi output boolean relations 
section concludes 
ii 
family generalized kronecker trees canonical forms decision diagrams definition 
generalised kronecker tree multi branch tree created follows set input variables partitioned disjoint nonempty subsets union subsets forms initial set 
subset includes just single variable tree reduces special case kro tree 
subset includes variables tree corresponds special case grm 
sets ordered corresponds level tree 
level nd pd expansion selected nodes set involves single variable expansion polarity variables applied nodes level set multi variable formula expansion introduced time generalizes formula generalized reed muller expansion xn phi phi phi phi xn phi phi phi phi gamma xn gamma xn phi phi xn denotes variable negation assigning variable negation variable create gamma different expansion formulas 
called polarity expansion expansion certain polarity 
nd pd nd pd pd nd level level level polarity polarity grm expansion grm expansion example pseudo generalized kronecker tree expansion formula function xm xn grm expansion respect variables xm coefficients replaced subfunctions sf remaining variables xm xm xn sf xm xn phi sf xm phi sf xn phi phi xm xn phi sf xm xn phi sf xm xn phi xm gamma gamma xm xn phi phi xm xn called data functions sf calculated coordinates vector cv gamma theta fv fv xm xn vector cofactors respect variables set fx 
theta nonsingular matrix columns products literals gamma particular polarity expansion forms specified 
columns matrix linearly independent respect bit bit operation example see 
definition 
pseudo generalised kronecker tree tree multi variable expansion nodes created follows set input variables partitioned disjoint nonempty subsets union subsets forms initial set subset just single variable special case considered 
node tree level variable subset grm expansion variables performed 
example 
example pseudo generalised kronecker tree 
level tree shannon expansion variable second level grm grm expansions set variables third level pd nd expansions variable output function node shown edges bottom node correspond inputs node respective expansion type functions taken set expansion literals shown near input edge 
label corresponds function pd nd 
label nd 
label pd nodes denoted denote shannon expansions equation shannon expansion inclusive operator replaced expansion exor operator 
done functions disjoint 
nodes pd denote positive expansion equation nodes nd denote negative expansion equation 
observe uses variable negation pd uses positive literal variable nd uses negative literal variable 
circuit realisation multiplexer 
realisation pd includes input input exor gate called exor gate 
realisation nd includes input gate inverted input control variable called inhibition gate exor gate 
called inhibition exor gate 
gates exist fine grain fpgas modern vlsi libraries 
notation multi variable grm nodes described 
observe number expansion name polarity grm natural number corresponding binary number called polarity rightmost corresponds positive polarity single variable corresponds negative polarity variable leftmost ones correspond positive polarities variables variable term variables expansion node grm described formula sf phix sf phix sf phix sf notation sf denotes function sf arguments set variables applied argument function grm expansion node grm polarity described formula sf phi sf phi sf phi sf observed concept pseudo extended allowing second level tree mixture single variable variable expansion nodes 
expansions called mixed pseudo 
instance grm node replaced level tree node variable pd nodes variable example created 
definition 
mixed pseudo generalised kronecker tree multi branch tree created follows 
set input variables partitioned disjoint subsets blocks variables 
multi variable set apply root node level arbitrary grm expansion variables create subtree single variable expansions variables ordered sets assumed 
single variable level tree combination nd pd nodes applied 
general category free trees 
definition 
free generalised kronecker tree multi branch tree created follows 
node tree arbitrary size subset input variables selected 
single variable sets pd nd node created multi variable sets grm expansion variables polarity calculated 
levels associated variables sets various local orders partitions variables may exist branches 
definition 
ordered generalised kronecker tree multi branch tree created free tree additional constraint branch order variables 
sets variables different branches may different sizes overlap order 
instance branch set fx second set fx third set fx branch sets fx fx fx fx schemata various types shown 
presents various types ordered generalized kronecker trees 
scheme free 
appreciate various orders variables branches 
canonical exor forms obtained flattening respective trees 
flattening means finding terms paths root leafs 
way exor level expression created equivalent tree canonical form 
canonical exor decision diagrams obtained combining isomorphic nodes nodes correspond subfunctions removing nodes sense redundant 
instance node inputs originating node removed 
similarly node inputs originating node removed 
transformations pd nd nodes applied single variable nodes 
multi variable node generalizations applied multi variable nodes 
transformations generalize transformations 
way definitions flattened forms decision diagrams obtained analogously 
example 
example demonstrates function fi better 
fi shannon node variable top grm node cofactor fi expansion variables grm node cofactor fi expansion variables expansion diagram fi delta phi delta phi delta phi bc delta phi delta phi delta phi delta phi delta grm nodes nodes variables variable nodes variables shared 
observe fi polarity fi polarity 
shown possible smaller diagram fi change polarity require variables lead extra exor nodes nodes variable nodes 
similarly changing polarities lead diagrams nodes solution 
worse entire diagram worse having expansion 
similarly shown variable top general exists better equal fi 
example 
example demonstrates function fk free better ordered 
free fk shannon node variable top grm node cofactor fk expansion variables grm node cofactor fk expansion variables expansion diagram fk delta phi delta phi delta phi bc delta phi delta phi delta phi delta phi xy delta grm nodes nodes variables node shared 
observe fk order variables fb cg fx vg fk order fx yg fb vg 
shown changing orders orders fb cg fx vg bring trees higher node costs calculate cost variable node standard nodes 
instance standard node solution fk delta phi delta phi delta phi bc delta phi delta phi delta xy phi phi delta phi bc delta similarly shown possible changes orders subtrees order subtrees result higher total node costs 
examples forms special properties superiority respect respect respect created theorem 
way hierarchy fig 
created 
mutual relationships instance investigated positive answers 
method create examples forms trees investigate relations families create expression form want prove superiority create multi output function outputs form product terms single outputs product equal product term form 
idea separating variables kronecker type variables grm type variables canonical exor representation introduced allows create fast esop minimizers algorithmic ideas introduced function represented flat vector tree dag 
concepts applied synthesis easily testable level exor circuits 
obviously addition expansion forms kro grm new canonical expansion forms resulting flattening new trees 
furthermore variants non ordered sets considered 
esop circuits exor level circuits constraints imposed products literals best exor circuits canonical 
research devoted synthesis minimal esop circuits far exact solution obtained small number input variables 
quality exor circuits obtained expansions proposed significantly better corresponding pseudo search space larger search space grm expansions 
case variables possible search exhaustively variables large size new space 
practical usefulness proposed esop minimization method extensions depend quality search heuristics partition order input variables 
iii 
enhancing green hierarchy new representations table shows relationships canonical trees canonical expressions decision diagrams created trees applying reduction rules 
table adds new exor representations forms table 
noticed known exor representations included instance papers included 
goal compare new representations exor representations popularly known thoroughly investigated past 
non canonical representation included 
shows set theoretical relationships known reed muller defined new classes canonical forms 
observe illustrate new families forms stand grm name useful practically long composite names generalized pseudo mixed kronecker reed muller introduced pd pd pd pd pd pd pd nd pd pd pd nd pd nd nd nd nd schemata various types ordered generalized kronecker trees pd nd nd nd nd scheme free generalized kronecker tree type tree expression generated decision diagram tree generated tree shannon tree minterm expansion binary decision diagram bdd positive tree positive polarity functional decision reed muller diagram fdd reed muller tree fixed polarity reed muller reed muller decision diagram kronecker tree kronecker expansion kro ordered kronecker functional decision diagram pseudo reed muller tree pseudo reed muller expansion pseudo reed muller decision diagram pseudo kronecker tree pseudo kronecker pseudo kronecker decision expansion diagram pkdd free kronecker tree free kronecker free kronecker decision expansion fke diagram generalised kronecker generalised kronecker generalised kronecker tree expansion decision diagram pseudo generalised pseudo generalised pseudo generalised kronecker kronecker tree kronecker expansion decision diagram mixed pseudo generalised mixed pseudo generalised mixed pseudo generalised kronecker tree kronecker expansion kronecker decision diagram ordered generalised ordered generalised ordered generalised kronecker tree kronecker expansion kronecker decision diagram free generalised free generalised free generalised kronecker tree kronecker expansion kronecker decision diagram table relations canonical exor trees expressions decision diagrams esop 
kro grm set theoretical relationship known new classes exor canonical forms type tree lattice diagram functions generated tree type regular layout shannon tree universal akers array nearly symmetric positive tree functional nearly symmetric lattice diagram reed muller tree reed muller nearly symmetric lattice diagram kronecker tree ordered kronecker lattice diagram pseudo reed muller tree pseudo reed muller lattice diagram nearly symmetric pseudo kronecker tree pseudo kronecker lattice diagram free kronecker tree free kronecker lattice diagram generalised kronecker generalised kronecker tree lattice diagram pseudo generalised pseudo generalised kronecker kronecker tree lattice diagram mixed pseudo generalised mixed pseudo generalised kronecker tree kronecker lattice diagram ordered generalised ordered generalised kronecker tree kronecker lattice diagram free generalised free generalised kronecker tree kronecker lattice diagram boolean ternary boolean ternary decision diagram lattice diagram table relations canonical exor trees lattice diagrams esop esop green hierarchy exor canonical expansions 
new families included respective restricted families shown diagram instance families sets limited gamma variables 
families important practical point view 
similarly examples create functions prove proper inclusion relations illustrated table true instance better better 
interesting open question family expansions equal known class esop circuits properly included esop suggest 
guess authors close esop experimentation answer question 
case flattening optimal new diagrams lead better esop circuits obtained flattening known diagrams lead high quality esop minimization programs 
iv 
lattice diagrams regular lattice layouts 
akers introduced called universal akers arrays 
regular lattices look bdds symmetric functions 
nodes multiplexers shannon expansions 
multiplexer obtains data input north east directs output south west 
diagonal lines inputs control variables 
proven binary function realized structure exponential number levels necessary means control variables diagonal buses repeated times 
way implement function repeat variable subsequently variables interspersed 
cal subcategory arrays variable interval arrays 
arrays akers universal unnecessarily large calculated worst case functions 
efficient procedures finding order repeated variables functions shown approach inefficient 
idea akers array point view technologies connections short delays equal predictable late arriving variables close output similarly plas logic synthesis combined layout special stage placement routing necessary 
showed interesting properties universal non universal arrays utilized develop new design methods efficient computer algorithms 
progress hardware software technologies approach quite different example lattice realizes output input function 
small rectangle universal grm expansion module corresponding control diagonal buses data inputs 
numbers squares correspond levels lattice 
predictability equality delays appreciated akers 
want design universal array functions inefficient nearly functions 
create logic layout functions generator gives efficient results real life functions symmetrical ones 
argue need realize functions shown contrast randomly generated worst case functions functions real life decomposable 
functions decomposable easy realizable functions exist practice 
analysis realizations arithmetic symmetric unate standard benchmark functions new technologies substantially generalized concept akers array ways 
assuming shannon expansion subset pd nd expansions 
allow linearly independent expansions boolean ternary expansions expansions 

consider kronecker pseudo kronecker mixed decision diagram concepts reed muller logic generalize concepts 
addition take diagram ideas boolean ternary decision diagrams introduced expansion types mixed free 

allow powerful neighborhood geometries 
having inputs outputs node call lattices consider regular lattice diagrams node inputs outputs diagrams inputs outputs node diagrams inputs outputs node lattices valued logic boolean ternary decision diagrams 
lattices valued logic pairs binary control variables 
instance lattice realizations lattices valued logic triplets binary control variables 
similarly create higher neighborhood geometries believe practical keep number neighbors small 
essence neighborhoods patents published works 

allow mix control variables diagonal buses 
permits realize free diagrams 
table presents new lattices 
counterparts known new trees 
column includes type functions array type recommended 
theory lattice table implement multi output binary function write rows 
practice arrays nearly symmetric third column nearly symmetric functions done universal repeating variable consecutive levels making variable interval arrays 
variable consecutive levels trick practically changes lattice tree upper levels area wasteful 
changing lattice tree done better introduced methods 
symmetric nearly symmetric functions lattices nearly symmetric third column better choices types arrays 
universal akers array variable interval arrays new arrays demonstrate better array created 
choice appropriate array type function remains difficult problem solved moment dispose just examples heuristics know best solutions 
theory need just powerful array type assume design algorithm select best expansions variable ordering case versus bdd fdd 
creating heuristic algorithm general arrays difficult create algorithm restricted type array 
simpler arrays better layout assuming shannon expansions multiplexers allows design function pass transistors regular small grid layout bidirectional pass transistors technologies 
example lattice shown 
input variables variables control various grm expansions level realized universal grm expansion modules introduced variables control various grm expansions level input variables output functions possible lattice connections nodes previous layers 
output functions realized subset second third level nodes 
particular structure type variables paired allow realize arbitrary functions resorting variable interval array 
kind array variables paired grm theoretically universal give results strongly functions 
adding single variable layers pd nd expansions array power greatly improved 
symmetric functions restricted array may better 
calculation data input functions lattice nodes type expansions lattice neighborhoods performed technique logic solving equations structure linearly independent logic 
technique general adopted non binary logics 
contrast li logic equations solution resulting non singularity matrix structural equations general case solutions 
equations galois field 
solutions evaluated best taken 
solutions backtrack structure expansions blocks input variables executed 
selection order usually repeated variables done concept best separation different value repeated variable maps 
problems variable ordering variable partitioning known long logic synthesis tough ones important time difficult variables repeated 
hopefully contrast worst case randomly generated functions real life benchmark functions repetitions variables 
especially easy weakly specified functions boolean relations 
generalisation dds done ways combined create various representations 
ffl 
replacing single type expansion realised nodes shannon tree called shannon expansion type expansion ffl 
allowing types expansions level expansion tree ffl 
allowing freedom ordering variables branches tree including case ordering ffl 
generalizing trees directed acyclic graphs combining non isomorphic tree nodes requiring repetitions variables lattices real repetitions add power diagrams consecutive repetitions levels variable interval arrays modified diagrams repetitions 
ffl 
creating generalised expansions sets variables single variables 
combination generalisation types binary tree create canonical trees flattened level expressions expansions forms decision diagrams corresponding regular layouts 
generalized types decision diagram representations introduced investigated theoretically implemented cad tools mention exor logic 
remain analysed evaluated experimentally 
types may result dimensions generalization defined 
consider known green hierarchy representations exor boolean functions new representations worse known ones terms complexity 
previous results field including free kro diagrams expected representations find important applications logic synthesis esop circuits fine grain fpgas representation large functions 
interesting check new forms improve known canonical exor forms symmetric functions 
definitely lattices proved superior universal akers arrays realizing totally symmetric functions partially symmetric functions easily functions variables require repetitions structure 
general proposed methods combined curtis decompositions problem decompose remains general open 
observe generalizations proposed oriented binary logic synthesis expansions binary logic 
line ideas extended multiple valued logic general multivalued operations extending exor operators linearly independent logic methods applied 
diagrams lattices introduced generalized integer arithmetic rational arithmetic realized continuous logic arithmetic operators general linearly independent operations 
word level expansions derived careful reader papers 
word level expansions generalization types create trees forms diagrams lattices layouts lines 
lattices proposed continuous logic mv logic 
researches applications technology basic philosophy explained custom logic layout synthesis develop new types fpgas 
akers rectangular logic array trans 
ieee vol 
pp 
august 
bryant graph algorithms boolean function manipulation ieee transactions computers pp 

concurrent logic cli series field programmable gate arrays preliminary information dec rev 
wang xu regular representation mapping fine grain fpgas accepted iscas 
dill ganguly new linearly independent galois field reed muller logic submitted reed muller 
heuristic simplification algorithm generalised reed muller expressions proc 
reed muller pp 

drechsler theobald becker efficient representation manipulation switching functions ordered kronecker functional decision diagrams proc 
design automation conference pp 

drechsler pseudo kronecker expressions symmetric functions proc 
vlsi design 

drechsler becker new data structure verification proc 
european design test conf pp 

green families reed muller canonical forms intern 
electr pp 
february 
ho free kronecker decision diagrams application atmel fpga mapping proc 
euro dac euro vhdl pp 
september grenoble france 
tsai marek multilevel logic synthesis arithmetic functions proc 
dac pp 

panda somenzi symmetry detection dynamic variable ordering decision diagrams proc 
dac pp 

learning methods tree search combinatorial optimizer proc 
ieee intern 
phoenix conf 
computers comm scottsdale arizona march pp 

johnson canonical multi valued input reed muller trees forms proc 
rd nasa symp 
vlsi design oct moscow idaho pp 

generalised orthonormal expansion functions multiple valued inputs applications proc 
pp 

new canonical forms valued logic internal report department electrical engineering portland state university 
fundamental theorem exor circuits proc 
reed muller pp 

xor canonical forms switching functions proc 
reed muller pp 

schaefer multi level logic synthesis kronecker boolean ternary decision diagrams incompletely specified functions computer aided design test dagstuhl 
schaefer multi level logic synthesis kronecker boolean ternary decision diagrams incompletely specified functions vlsi design vol 
nos 
pp 

fundamental theorems families forms binary linearly independent logic proc 
reed muller pp 

ross goldman song application esop minimisation machine learning knowledge discovery proc 
reed muller pp 

drechsler canonical exor form includes generalized reed muller forms kronecker reed muller forms submitted rm 
drechsler ordered shared linearly independent decision diagrams incompletely specified functions submitted 
marek wang zhang decomposition multi valued relations accepted nova may 
xu lattice diagrams reed muller logic realization regular layouts predictable timing submitted reed muller 
drechsler logic layout synthesis technology mapping linearly independent expansions fat regular lattices submitted 
high speed field programmable analog array architecture design fpga berkeley california february 
field programmable analog array continuous fuzzy multi valued logic applications proc 
th pp 
boston may 
ross taylor pattern theory engineering paradigm algorithm design final technical report wl tr wright laboratories usaf wl oh august 
ho minimal multi level realisation switching functions kronecker functional decision diagrams proc 
intern 
workshop logic synthesis 
representation logic functions exor operators proc 
reed muller pp 

wada multi level logic synthesis pseudo kronecker decision diagrams local transformation proc 
reed muller pp 

editor logic synthesis optimisation kluwer academic publishers 
exact minimisation exor expressions bdds proc 
reed muller pp 

schaefer synthesis multi level multiplexer circuits incompletely specified boolean functions mapping multiplexer fpgas ieee trans 
cad vol 
november 
pp 

schubert multilevel logic synthesis functional decision diagrams proc 
ieee euro dac pp 

song mv minimisation exclusive sum products expressions multiple valued input incompletely specified functions proc 
may pp 

song comprehensive approach logic synthesis physical design dimensional logic arrays proc 
dac san diego june pp 

song new design methodology dimensional logic arrays vlsi design special issue decomposition vlsi design ed vol 

symbolic logic russian vol 
pp 
vol 
pp 

