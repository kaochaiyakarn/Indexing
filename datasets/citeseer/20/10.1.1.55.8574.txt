reflexivity interface corba roberto ierusalimschy renato rodriguez departamento de informatica puc rio rio de janeiro brazil roberto inf puc rio br bindings corba construction stubs translate language call corba invocation 
shows alternative way build binding reflexive facilities interpreted language 
corba bindings binding allows program manipulate corba objects way manipulates local objects 
conventional bindings corba dynamic invocation interface mapping dynamic character dynamic type system language 
way program immediate access corba component need stubs pre defined idl headers 
concept reusable components increasingly important development software 
years corba gaining momentum main standards interface components 
corba implementations available include support distributed applications 
corba proposal strongly notion object interfaces described idl interface description language 
development mappings called bindings idl different programming languages allows client server implemented convenient language 
currently standard bindings corba programming languages java smalltalk stubs 
approach object interface program uses compiled stub linked program 
program calls method corba object fact calls stub function 
function marshals parameters actual corba invocation results converting appropriate data types host language 
describe luaorb binding extension language lua corba 
usual binding defines mappings lua idl types 
bindings mapping dynamic nature lua dynamic invocation interface corba stubs 
binding programmer wants invoke method corba object just writes call regular syntax method calls lua 
luaorb intercepts call dynamically maps parameter types lua idl actual invocation maps results back lua 
luaorb user transparent access available corba server objects local objects 
need predefine idl headers stubs object 
needs done new object types added system object interface changes compatible way 
achieve flexibility luaorb uses special features corba interface repository ir dynamic invocation interface dii 
interface repository maintains description interfaces available server objects machine readable form automatically queried luaorb new method invocation 
information system checks type compatibility uses dynamic invocation interface build execute actual call 
interpreted languages important role software development process 
languages useful rapid prototyping technique increasingly adopted development new systems mainly tool requirement acquisition 
interesting explore possibility components prototyping interpreted language saving time development readily available program parts 
interesting explore interpreted languages gluing factor construction new programs available modules 
luaorb specially attractive gluing function allows applications dynamically transparently configured reconfigured 
fulfills command center concept proposed siegel console user able freely interact corba object server 
section gives overview programming language lua emphasis reflexive facilities 
section covers relevant aspects corba 
section explains reflexive facilities lua implement luaorb 
related discussed section section reserved final remarks 
extension language lua lua generic configuration language integrates strong data description facilities reflexivity simple syntax 
currently lua products prototypes academic institutions companies 
traditional side lua procedural language usual control structures ifs function definitions parameters local variables 
conventional side lua provides functions order values dynamically created associative arrays called tables lua single unifying data structuring mechanism 
notion main program lua lua embedded language works embedded host client 
lua provided library functions linked host applications 
library api provides functions execute piece code lua write read lua variables register functions called lua code 
fallbacks specified called lua know proceed 
way lua augmented cope different domains 
lua dynamically typed 
variables handle values type 
operation performed checks correctness argument types 
basic types number floats string lua provides data types nil functions table 
type nil single value called nil main property different value 
type provided allow arbitrary host data stored lua variables 
valid operations values type assignment equality test 
typically values store pointers created functions passed back functions behaving data type lua 
functions lua class values functions manipulated value language 
function definition creates value type function assigns value global variable 
value function values stored variables passed arguments functions returned results 
type table implements associative arrays function clone local new new table local nil new return new 
example lua code 
arrays indexed integers strings reals tables function values 
associative arrays powerful language construct algorithms simplified point triviality required data structures algorithms searching implicitly provided language 
typical data containers ordinary arrays sets bags symbol tables directly implemented tables 
tables implement records simply field names indices 
lua supports representation providing name syntactic sugar name 
example lua code shows implementation clone function lua function receives table returns shallow clone piece code shows interesting features lua 
comments written ada starting 
expression appears line creates new empty table 
line line function traverse indices table function takes arguments table traversed previous index table 
returns index arbitrary order value worth noticing functions lua may return multiple values 
loop local variable runs indices runs values 
values assigned new table respective indices line 
records structures represented lua tables function provides easy way browse structures traversing fields 
explicit type checking needed primitive function type may returns string describing type argument 
tables created special expressions called constructors 
simplest constructor expression returns new empty table 
expression exp exp 
creates new table stores field ni result expi 
typical example creation point point constructors built lists syntax exp exp 
expression creates new table stores field result expi 
assignment days sunday monday tuesday wednesday thursday friday saturday expression days result string tuesday 
functions class values table fields refer functions 
property allows implementation interesting object oriented facilities easier syntactic sugar 
method definitions written function object foo params equivalent object foo function self params function created stored table object indexed string foo 
function hidden parameter called self 
method call written receiver foo params translated receiver foo receiver params words function fetched table table passed argument function giving expected meaning parameter self 
complete treatment lua object oriented facilities scope interested reader refer 
part reflexive nature lua provided fallbacks 
fallbacks allow programmers change normal behavior lua especially abnormal conditions accessing absent field table calling non function value 
semantics fallbacks quite similar exception handling resumption dynamic nature lua allows cases statically typed language issue error compile time 
despite semantic similarities fallbacks lua quite different common exception handling 
fallbacks efficient implementation frequently emulate facilities inheritance overloading 
shows inheritance emulated fallbacks 
form inheritance delegation field object value inherited function inherit field field parent return nil local parent type table return field return nil index inherit 
fallbacks implement inheritance 
object parent link object parent stored field parent object 
referring back line sets index fallback function inherit 
lua attempts access field absent table fallback mechanism call inherit 
function checks object parent table line 
accesses desired field table line may invoke recursive index fallback value field parent chain ends 
need test line parent field accessed line may absent may cause fallback call 
scheme allows endless variations 
instance methods inherited fields starting underscore 
forms multiple inheritance implemented 
fallbacks type error construction key interesting facilities 
typical example consider statement obj foo explained equivalent obj foo obj usually obj table obj foo field foo table 
obj need table instance 
cases user defined fallback may called fallback responsible providing sensible value expression obj foo raising error 
value function function called parameters obj fallback called handle invocation non function value 
corba corba standard provides communication facilities applications distributed environment 
communication corba objects mediated object request broker orb 
client interact broker idl stubs dynamic invocation interface 
idl interface description language syntax describing object interfaces 
specifications written idl compiled client stubs called simply stubs server stubs called skeleton programs client program directly linked idl stub 
client perspective stub acts local object 
transparently stub marshals operation parameters converts formats suitable transmission acting interface orb 
idl skeleton program corresponding server side implementation idl interface 
orb receives request skeleton provides callback method implementation 
server completes request skeleton passes results back client stub returns results client program exception information 
worth noting similarities model rpc model 
main points idl interface compiled different languages 
objects written different languages may coexist system interacting exchanging information 
allow interoperability target language define mapping idl interfaces types 
dynamic invocation interface dii generic facility invoking operation runtime defined parameter list 
dynamic invocation performs steps identifies receiver object retrieves interface type builds invocation request invokes request receives results 
shows example interaction corba objects dynamic invocation 
steps analyzed details working language 
object known possible acquire meta data describes object interface 
corba offers reflexive mechanisms objects provide information 
source meta data interface repository ir 
ir corba object stores interface descriptions corba servers machine readable form 
object accessed corba object standard idl interface 
example method get interface client object orb get interface lookup name describe create list add item add value create request invoke request create create repeat 
example dynamic invocation 
offered corba object access object interface description 
description represented object returned method get interface 
object entry point navigating interface repository 
complete method definition possible create argument list method call 
argument list composed data structure called named value list defined corba 
structure list pairs names values 
values turn tagged unions containing type description tag actual value 
way lists represent method signature supporting form dynamic typing 
request dii represented corba contains name method argument named value list place return value tagged union 
request object created invoking orb method create request 
actual invocation request object performed different ways ffl invoke method call sends request obtains results ffl send oneway method call sends datagram 
case response needed ffl send deferred method call sends request returns control program poll response calling get response poll response 
server point view dii idl static interface completely transparent 
particularly service available idl accessed pseudo object object interface defined idl necessarily implemented orb object 
manipulated dii 
dynamic invocation 
dii provides extra level flexibility necessary applications desktops operating systems 
hand authors state problems related dii weak type checking run time performance penalty 
problem exists stub mechanism 
corba object interface changed clients updated run time type errors arise 
fact stubs static interface low level variant dii jobs 
run time performance penalty greatly reduced minimization number queries interface repository instance caching queries 
practice easy task applications incorporate new objects dii 
dii offers support applications access new object types difficulty building method calls 
dii activity involves querying constructing complex structures particularly structured arguments results method call sequences structures structures structured fields 
traditional bindings programming static interfaces simpler results robust code developer 
binding corba lua definition mapping lua corba tried respect common lua 
corba objects way lua objects 
reach goal reflexive characteristics lua fully applied 
lua works embedded language binding corba relevant clients applications servers 
lua binding addresses issues related client side 
reason approach generation corba skeletons lua little sense lua implement methods server object interesting topic 
corba objects accessed lua object generation stubs necessary interesting 
corba objects accessible lua need previous declarations dynamic typing 
achieve goal binding built dii 
fallbacks lua binding intercepts method call dynamically maps parameters types lua idl actual invocation maps results back lua 
mapping parameter types done coercing lua values idl types vice versa result types 
binding specifies coercions performed 
interesting notice mapping done dynamic type descriptions actual types lua ar dynamic invocation orb interface orb core luaorb client application lua console gui user repository interface lua scripts 
architecture luaorb client application 
accessed lua api formal types method parameters accessed interface repository 
lua binding implemented library called luaorb 
resulting architecture integrating luaorb library application orb illustrated 
corba objects explain corba objects lua example idl interface 
step distributed object create local representation called proxy 
create proxy object implements nameserver function server nameserver called orb tries find server desired interface previously activated 
find active server tries activate order orb registered server interface 
way orb finds object desired interface proxy object created identifier object returned application 
function returns nil 
proxy created services related object requested 
example code print ip address mail server domain 
example shows lua user handles corba objects way handles lua objects 
notice lua table host dynamically mapped idl structure host called 
coercion allowed long lua table fields idl structure 
coercion works re interface nameserver typedef sequence string seq struct host string domain string subdomain string host string seq string service string domain string subdomain string host string host 

example idl interface 
domain name puc rio br subdomain name inf host names server mail domain name subdomain name host names error server domain host domain domain name subdomain subdomain name host host names print server host 
remote object 
list lua tables automatically converted array records instance 
dynamic nature coercion small changes idl interface reordering removing struct fields changes short float array sequence affect uses lua 
interesting note mechanisms provided luaorb allow corba lower level direct access interface repository dynamic construction calls 
repository interface directly accessed luaorb standard corba object 
dynamic calls built lua function call calls function dynamic parameter list described table similar lisp function apply 
binding implementation mechanisms supplied binding implementation creation proxy objects invocation methods corba objects 
explained proxies created calls function 
implementation function basically direct mapping equivalent function orb api 
returned value lua proxy host language 
code fragment describe execution method call print server host explained section expression server host equivalent server server host server table index operation expression triggers fallback 
fallback handler defined luaorb returns internal function string associated closure 
lua calls function passing arguments server proxy table host argument faulty call 
information luaorb asks interface repository idl interface nameserver method called 
case description method parameters context information result exceptions retrieved ir 
error signalled 
actual lua parameters method description hand parameter list dynamic call built 
lua parameters coerced types idl description conversion possible run time error generated 
example lua table host converted describes structure host 
method invoked 
luaorb checks exception raised 
exceptions method returned value result parameters converted lua values returned client application 
exception raised 
related corba language bindings including bindings smalltalk java school strongly static invocation interface 
support access dii support low abstraction level 
languages statically typed exception smalltalk inherently difficult bind dii facilities higher level language constructs 
smalltalk binding dynamic characteristics language generate stubs run time 
feature smalltalk clients flexible clients static compiled stubs 
binding static idl descriptions stubs 
corba binding non statically typed language 
luaorb built top dii extends functionality tcl enabling tcl scripts send requests corba objects 
distinctly luaorb forces client programmer know details dii dii transparent 
instance structures dii explicitly built way binding dii 
query interface repository programmer explicitly specify types invocation 
works proposed special languages dynamic interaction corba 
offers abstraction integrate different models network management corba snmp 
designed generic object shell interpreter 
main functionality operation invocation corba objects 
luaorb standard corba components interface repository dynamic invocation interface 
supports implementation servers luaorb 
important note lua specifically designed interact corba 
luaorb hand binding corba pre existing interpreted language lua 
lua reflexive mechanisms allow binding integrates corba objects language natural way 
type mechanism shown flexible represent idl types natural way 
final remarks luaorb library fully implemented visibroker corba compliant implementation 
moment luaorb tested applications network management system cooperative cad system done far results stand 
result new approach implementation language bindings corba object model dynamic type descriptions build binding 
model adopted languages support reflexivity dynamic typing 
lua binding seen evaluation effective integrating potential corba ways quite different known bindings 
addressed problems related dii 
discussed adoption dii give rise new generation distributed applications problems dii complexity building requests weak type checking run time performance penalty 
luaorb solves problem raising abstraction level dii level common method calls 
weak type checking problem solved luaorb automatic mapping lua idl types 
run time performance penalty greatly reduced caching queries interface repository 
preliminary tests performance penalty remote call compared call static pre compiled stub 
support offered luaorb possible fulfill command center concept proposed siegel 
accordance author client applications generic command centers proceed configure invoke actions users want dii 
exactly provided lua console embedded application luaorb 
siegel states application architecture necessary step transition monolithic applications user centric distributed computing 
acknowledgments partially supported cnpq brazilian research council capes 
jagannathan 
tcl interface orbix dynamic invocation interface 
www edu dice iss html 
ban 
generic management model corba snmp 
phd thesis university zurich ibm zurich research laboratory switzerland 
bentley 
programming pearls 
addison wesley 
birrell nelson 
implementing remote procedure calls 
acm trans 
computer systems feb 

um sobre entre 
master thesis dep 
inform atica puc rio rio de janeiro brazil 
figueiredo ierusalimschy 
lua extensible embedded language 
dr dobb journal dec 
goldberg robson 
smalltalk language implementation 
addison wesley 
gomes ierusalimschy 
reactivity pro activeness virtual prototyping 
tools methods concurrent engineering 
appear 
goodenough 
handling issues proposed notation 
comm 
acm dec 
ierusalimschy de figueiredo 
lua extensible extension language 
software practice experience 
javasoft mapping idl java feb 

geib 
generic object oriented dynamic environment corba 
technical report universite de lille 

corba design patterns 
john wiley sons 
zahavi 
essential corba 
john wiley sons 
object management group framingham ma 
common object request broker architecture specification revision jul 

client server programming java corba 
john wiley sons 
rodriguez ierusalimschy moura 
oes de com 

siegel 
corba fundamentals programming 
john wiley sons 
sun microsystems 
rpc remote procedure call protocol specification version jun 
rfc 
software visibroker programmer guide version 
www com pdf 
