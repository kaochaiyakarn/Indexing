parallel virtual machine efficient scheme compilation marc feeley james miller brandeis university waltham ma programs compiled gambit scheme compiler achieve performance twice fastest available scheme compilers 
gambit easily ported retaining high performance simple virtual machine pvm 
pvm allows wide variety machineindependent optimizations supports parallel computation construct 
pvm conveys high level information bidirectionally machine independent front compiler machine dependent back making easy implement number common back optimizations difficult achieve virtual machines 
pvm similar real computer architectures option efficiently gather dynamic measurements virtual machine usage 
measurements performance prediction ports architectures design decisions related proposed optimizations object representations 
primary interest efficient mechanisms implementing symbolic computation currently available mimd machines 
having done area scheme language augmented mechanism extending results realm compiled scheme code 
purpose undertook implementation new scheme compiler gambit intention creating simple environment experiments wide range hardware platforms range implementation techniques 
major design goals gambit outset 
code generation multiple target machines spanning common cisc computers dec vax motorola mc risc computers hp precision research supported part open software foundation hewlett packard nsf equipment cda 
marc feeley study leave universit de montr eal 
architecture mips motorola bbn monarch 
purposes important compiler simple yield high performance system 
rejected existing compiler scheme systems orbit liar mainly difficulty modifying compilation strategy large systems 

high performance output programs 
concerned program development features 
example allow user interrupt execution program aborting 

support task creation synchronization implicit data operations possibly augmented control constructs 
construct provides features compatibly features scheme language initial focus 
interested exploring parallel control data constructs 
second goals somewhat odds believe architectural comparisons architecture independent implementation techniques important results research 
chosen build compiler easily virtual machine may result efficient compiled code 
fortunately experience gambit indicates chosen virtual machine result noticeable performance penalties 
pvm parallel virtual machine designing virtual machine tried avoid pair twin hazards seen virtual machines compilation 
hand virtual machines mit code objects scheme close source language machine independent front compiler unable express important optimizations virtual machine instruction set 
places major burden back responsible analysis virtual machine code task nearly difficult original compilation task 
hand virtual machines multilisp scheme byte code match actual target machine source language 
result complex back attempts recover data control flow information virtual machine simple back produces poor code 
parallel virtual machine pvm intended fall kinds machines 
allow back specify wide range architectural details virtual machine including description primitive procedures available target machine number general purpose registers 
result think pvm set virtual machines depending back description 
specific virtual machine close target machine common abstraction hides precise details front 
pvm remains close source language small instruction set closely matches scheme language 
pvm viewed bidirectional communication medium front back ends compiler 
traditional role virtual machine course convey information front back 
pvm conveys information reverse direction ffl number general registers 
ffl procedure calling convention 
ffl format closures 
ffl enumeration description primitive procedures 
ffl machine specific declarations 
view bidirectional communication important component gambit organization 
communication supported language describing implementation level objects basis pvm abstraction 
types objects manipulated language primitive procedures data objects stack frames argument parameter blocks 
corresponding means name primitive procedure slots data structure slots stack frame argument parameter number 
particular level abstraction convenient front back ends 
example back front ends agree discuss stack slots positive integers units scheme objects increasing objects pushed stack 
clearly convenient front back easily translate appropriate offsets base register account number bytes argument direction stack growth choice stack discipline target machine 
operands pvm classes operands shown naturally divide storage disjoint areas registers current stack frame global variables heap storage constant area code area 
easy track values exception mem operands removes traditional aliasing problem 
stack heap pointer directly visible 
stack accessible indexing virtual frame base pointer modified part procedure call mechanism 
heap accessed implicitly allocating objects explicitly indexing relative existing heap allocated objects 
making stack pointer heap pointer invisible allow back number optimizations target architecture 
mem operand gives access heap storage allows nesting operands base component 
front uses access closed variables operand meaning reg general purpose register stk th slot current stack frame glob name global variable mem base offset indexed base operand offset constant obj object constant lbl program label loc parallelism support see section pvm operands leave data structure accesses general apply instruction 
result ability nest operands mem back ends support 
note operands source values 
values stored obj lbl operands 
instructions sequential computation pvm instruction set provides small set general instructions efficiently encode operation scheme programs 
compilers gambit represents program set basic blocks 
representation apparent pvm code 
basic block headed code label followed code data operations block ends branch instruction 
current instruction set sequential computation consists kinds code labels data manipulating instructions branch instructions 
important part gambit communication mechanism description set procedures known primitives supported back 
primitives available general procedure call mechanism open coded apply cond instructions 
front requires back supply specific minimal set primitive operations back fact specify procedure primitive 
description primitive indicates arity strictness 
indicates open coded return placeholder value 
list unbounded arity strict argument returns placeholder set car 
arity strict argument second returns placeholder 
pvm handling stack frames unusual described section 
size parameter label branch instructions support mechanism described detail section 
description sequential instructions follows 
shows simple program iterative factorial pvm code code generated mc 
comparison code compilers included appendix label size simple label may appear jump cond instructions 
declare standard bindings define fact iterative factorial loop ans ans loop ans virtual machine code mc code label proc bmi entry point jsr arity error copy obj reg cond reg obj move beq label apply reg reg reg asr apply reg obj reg subq cond reg obj move bne label copy reg reg move jump reg jmp sample program gambit output label size cont continuation label similar return address architectures 
objects returned scheme program calls call architectural feature support fully tail recursive behavior 
label size proc desc procedure label desc defining number range arguments expected 
instruction modifies stack registers account discrepancy desc number arguments passed specified jump instruction arrive 
label size proc desc closed closure label similar procedure label label may appear closure object created closures 
apply prim operand loc apply primitive procedure prim operands store result loc discard loc specified 
copy operand loc copy value operand location specified loc 
closures description 
create closure objects 
closure object contains code label number data slots 
description specifies location closure object stored closure label code closure operands stored closure data slots 
cond prim operand lbl lbl size conditional branch value prim applied operands false branch lbl lbl specify simple labels 
jump operand size jump simple continuation label specified value operand 
jump operand size nargs jump address specified operand 
instruction states nargs placed appropriate argument passing locations 
value operand procedure label closure object primitive procedure object 
stack frames pvm deals stack frame novel manner supplying current stack frame size label cond jump instructions 
approach avoids problems inherent virtual machines purely top stack pointer purely frame pointer 
stack pointer leads varying offsets stack slot inefficient code machines lacking explicit stack instructions 
frame base leaves top stack unknown garbage collection time requires update instructions entry exit basic block 
actual instruction set pvm frame pointer frame size information prefer think machine having stack pointer frame pointer 
frame size specifies distance stack pointer frame pointer pointer recomputed 
jump cond instructions cause stack pointer recalculated label instructions recalculate frame pointer 
basic block stack pointer updated offsets stk operands encountered covers active part stack frame 
choice stack pointer frame pointer discipline specific back see section 
take advantage fact front produces pvm code entire basic block native code generation 
instruction front calculates tight bound size stack frame knowledge slots referenced current instruction block 
supplies information back easily implement mechanisms pointer model single pointer model frame base frame top stack 
single pointer models derived pointer model realizing ffl frame current size size entry current basic block known code generation time 
ffl frame sizes single pointer specify pointers 
calling convention second novel aspect virtual machine design implementation calling convention 
pvm imposes specific mechanism allows back choose appropriate mechanism general procedure calls 
front generate pvm instructions procedure calls load argument values registers stack locations specified back 
procedure closure labels back responsible emitting code necessary move arguments placement caller location required callee 
number arguments passed runtime compared number parameters required procedure 
cases front analyze procedure call sufficiently avoid general mechanism produce optimized code simple labels procedure closure labels target address 
procedure label simple label implies stack reformatting operations 
calling convention jumps simple labels essentially control front jumps procedure closure labels control back 
back specifies particular 
arguments passed number arguments call 
front generate code prior jump instruction 
front restricts choices combinations registers stack slots 

register contains value returned procedures 

parameters located label instruction executed 
procedure closure labels modify stack registers back specifies values located reorganization taken place 
closure label back specifies location pointer closure object front generate pvm instructions access data slots 
front restricts registers stack slots 
back decides argument count passed jump instruction destination procedure closure label 
decision internal back needed accomplish moving arguments locations passed caller locations expected destination code 
code included back expansion jump label instructions 
class procedures scheme programs class procedures take short digression discuss mechanism gambit uses implement 
general procedures carry values free variables traditional name closure refer representation procedure free variables 
procedures free variables represented simply address code implements pvm primitive procedure object procedure label 
gambit allocates closures heap 
consist back dependent header region typically instructions executed closure invoked followed storage values free variables needed procedure 
entry storage area contains value free variable known immutable pointer variable storage location 
shows closure object created code shown see appendix implementation details 
runtime storage allocation required closures expensive compared procedure representations gambit attempts minimize number closures created 
front performs combined data control flow analysis discover procedure calls invoke procedure 
calls located standard lambda lifting performed net effect add free variables parameter list procedure modify procedure calls pass values arguments 
procedure free variable represented procedure label 
second technique minimize size closures possibly eliminate entirely subdivide free variables referenced 
global variables need stored closure values directly accessible runtime gambit supports top level environment 
similarly variables known constant values declaration data flow analysis eliminated list free variables stored closure 
storage area closure contains values formal parameters lexical parents referenced body procedure compiler infer constant values 
closures created closures instruction 
instruction allows multiple closures simultaneously provide mutually recursive procedures 
considering creation closures occur atomically define adder lambda code pvm corresponding mc body adder 
responsible creating closure represent value lambda expression pvm label proc bmi jsr pvm stk reg lea allocate move move length type addq unused word move sp store stk move eb store jsr opcode lea move destination move data slot pvm copy stk reg move sp pvm jump reg cmp gc check bcc jsr jmp code body lambda expression pvm label proc closed move sp reg subq closure pointer move arity test bmi jsr pvm copy mem reg reg move load move data slot pvm apply reg reg reg add pvm jump reg jmp adder closure generator length type unused jsr code address slot value closure adder mc respect particular garbage collection allows efficient implementation back ends 
concrete consider scheme program adder shown pvm code 
pvm code body adder includes instruction closures stk reg creates closure object shown stores stack stk 
closure contains space value initialized contents reg value happens closure label body lambda expression label 
second form jump instruction calling procedures specifies number arguments passed 
back responsible emitting code stores argument count arrives appropriate destination address 
case closure destination encoded closure object back dependent manner closures instruction 
back arrange jump closure indirect jump simple procedure direct 
furthermore address closure available code closure label needed values free variables stored closure 
pvm specify interface jump instruction destination label back ends implementation decision 
shown header closure objects short instruction sequence jumps destination label stores address closure data area known register target machine jump link instruction jsr mc 
declarations scheme implementations gambit provides declaration mechanism allows programmers tell compiler may violate certain assumptions basic language 
example gambit declaration standard bindings allows compiler assume global variables names primitive operations fact primitives 
allows front generate apply cond jump instruction primitive directly referencing global variable required language definition 
similarly declaration allows compiler generate code standard numeric operations assumes numbers small integers suppresses overflow detection 
declarations standard bindings relevant front available back ends 
declarations meaningful back ends 
gambit permit back affect code emitted front current set declarations maintained front 
example primitive usable apply instruction declaration effect 
case front asks back primitive specifying declarations currently effect 
back responds simply operation available 
parallelism pvm introduced far sequential subset pvm 
major goals efficiently support mechanism parallel computing 
mechanism parent spawns child task uses placeholder allow parent task refer value computed child 
earlier systems supporting futures major cost associated spawning task arising need create separate thread control placeholder time child task spawned 
pvm additional instructions operand type parallel computation efficient 
model inspired conversations halstead brief mention 
label size task define task label marks task 
task label place simple label 
jump task label spawns new possibly parallel task execute code task label corresponding done instruction 
label parent task continues execution new task spawned 
label size define label specifies task resume execution spawns new task 
done current task deliver result 
instructions translated back provide mechanism earlier systems provide lazy futures 
lazy futures treat task spawning special kind procedure call 
task called leaves marker stack processor recreate parent task pvm performed task label 
processor effectively executing behalf child task parent task suspended 
processor decide resume parent task processor splits stack marker allocates placeholder begins executing code parent task placeholder represent value computed child task 
pvm provides direct support operation 
procedure supplied runtime system understands format stack markers code supporting task termination 
control child task returns stack marker created task label child return normal procedure processor resumed parent task store result placeholder look processor parent task resume 
pvm occurs done instruction executed 
addition support spawning terminating tasks pvm provides support underlying placeholder data type operand annotation 
gambit compiles code parallel back places appropriate operands potentially placeholders 
appropriate operands includes strict operands specified back apply cond instructions destination operand jump instructions 
information supplied back front determine result primitive procedure placeholder information suppress generation value 
optimization techniques gambit employs number standard optimizations front back ends 
section enumerates current set optimizations discussion primarily completeness 
expect add additional optimizations 
front optimizations ffl preferentially allocating temporary values registers 
ffl direct jump simple label calling known procedures 
ffl tracking multiple homes variables 
ffl keeping values registers long possible tracking register contents saving stack lazily 
entails merging variable home information conditional branches 
ffl lambda lifting 
optimizing pvm code optimizations performed pvm code completely independent source language target machine 
ffl branch cascade removal replacing branch instruction destination 
ffl reordering basic blocks maximize number fall throughs 
ffl dead code removal 
ffl common code elimination 
back optimizations addition traditional back optimizations branch gambit stack discipline abstraction optimize allocation deallocation stack frames 
easy front stk operands exclusively stack manner stores slots stored higher slot 
front consequently machines push pop instructions mc back incrementally allocates frame pushing values stack slot number stk operands increases 
similarly frame incrementally deallocated popping values frame size decreases 
machines lacking instructions mips back uses frame top pointer implementation 
allows frame allocated deallocated single instruction basic block conveniently filling branch delay slot machines 
approaches examined kinds virtual machines typically implementing lisp systems byte codes syntax trees register transfer languages 
pvm belongs class represents particular engineering approach design intermediate language 
section compares pvm virtual machines scheme community 
byte codes number known scheme implementations byte code interpreter indiana university scheme descendants texas instruments pc scheme halstead multilisp 
interpreted systems developed byte coding provides important features speed dispatch hardware platforms code space compression opcodes static instruction frequency statistics intermediate representation compilation byte code leaves desired 
byte code systems mentioned pure stack machine 
important hardware platforms stack process compiling native code byte code requires recovering higher level information intermediate values removed generating byte code 
furthermore creation byte code program produce information variable referencing patterns essential permit efficient hardware registers equivalent compiled code 
code trees interpreted scheme systems implement system code scheme byte coding problematic byte coded programs natural representation scheme aside course byte strings 
appealing alternative represent program syntax tree components similar pairs vectors standard scheme 
approach taken mit derived actual instruction set scheme vlsi chip university massachusetts boston scheme system 
type code node tree derived syntactic expression special form combination represents program 
leaves tree constants variable 
representation easier deal scheme program byte codes faster interpret original list structure program provided read 
major advantages code tree representation easily converted back program equivalent original scheme program derived 
systems equivalence variety debugging tools code inspectors pretty printers 
fact argues syntax tree intermediate code compilation representation provides information commonly referenced variables results data control flow analysis 
register transfer languages earlier representations envisioned intermediate representations compilation surprising serve purpose poorly 
familiar intermediate languages designed specifically purpose mit rtl register transfer language llm psl macros 
mit rtl ad hoc language evolved machine description language version early compiler part liar compiler 
presently rtl consists primarily assign commands similar copy apply commands pvm test commands similar cond pvm special purpose instructions call compiler support routines runtime system frame adjust commands commands generate procedure headers 
internally liar gambit back module provides description target machine front compiler 
liar front responsible compilation decisions gambit consequently description lower level detail 
consists information addressing granularity machine number bits type codes data mappings front special purpose registers target machine physical registers 
front liar relies directly manipulates virtual machine registers dynamic link register return addresses stack pointer free pointer heap pointer set memory locations variables shared interpreter 
addition front supports notion register sets providing back general purpose procedures allocating deallocating liveness tracking groups registers specified back 
example allow back separate general purpose floating point processor registers 
primary interface front back ends liar rule language 
front generates rtl instructions matched rules provided back 
permits precise nature liar virtual machine remain undefined enabling variety back ends written 
unfortunately front changes rtl instructions emits change rule sets back examined modified individually 
pvm regular structure hand allows construction back handles complete virtual machine isolated changes gambit front 
pvm implementations back ends gambit similar structures case dispatches pvm instruction operand types updating back accommodate changes pvm straightforward 
register transfer language llm developed inria language larger language pvm rtl 
instructions including number redundant ones providing control aspects diverse garbage collection file system operations 
implementing machine major undertaking suitable environment quick port new architecture operating system essential 
furthermore low level control specified llm requires front elaborate leaves little room optimizations back 
current status time writing completed gambit implementation mc final debugging stages port mips machines 
port nearing completion 
preliminary performance figures comparing gambit orbit mit liar compiler shown 
table indicates mc implementation achieves performance wide range benchmarks 
implementation includes option efficiently gathering dynamic usage statistics discussed appendix addition preliminary version scheme compiler inspired bartlett 
back generates portable code performance characteristics capable producing separately compilable modules 
result currently compiling small scheme programs 
plans major goal create back stock mimd parallel machine 
early prototype versions encouraged results 
gambit control data flow analysis appear sufficiently general allow explore number mechanisms reducing cost touch operations dominate performance parallel scheme systems 
part plan complete gambit back 
involves implementation separate compilation facility designed 
measurements single module system indicate performance half native code produced gambit consider advantage having single back supports number hosts outweigh performance degradation 
separate compilation design number areas performance may degrade plan examine detail 
preliminary results indicate may interesting consider compiling imperative languages pascal pvm 
particularly interested combining pvm compiler pvm back 
early experiment indicated pvm optimization procedure calls generated code compiled compiler outperformed equivalent hand coded program compiled compiler 
plan see holds closer investigation 
authors scheme implementors helped understand systems gambit david kranz chris hanson bill joel bartlett clinger 
bert halstead contributed useful ideas comments respect parallel implementation gambit 
especially grateful chris hanson bill mit scheme team help comparing code various compilers help efforts port mips 
efforts allowed gather performance figures included 
harold abelson gerald jay sussman julie sussman 
structure interpretation computer programs 
mit press 
joel bartlett 
scheme portable scheme compiler 
technical report digital equipment western research lab 
john batali edmund chris hanson shrobe richard stallman gerald jay sussman 
scheme architecture system chip 
paul jr editor proc 
mit conference advanced research vlsi mass 
artech house 
william campbell 
interpreter scheme exercise object oriented design 
submitted software engineering journal british computer society 

la machine llm 
rapport interne du projet vlsi inria may 
corresponds version 
richard gabriel 
performance evaluation lisp systems 
research reports notes computer systems series 
mit press cambridge ma 
martin griss anthony hearn 
portable lisp compiler 
software practice experience 
halstead 
multilisp language concurrent symbolic computation 
acm trans 
prog 
languages systems pages october 
robert halstead david kranz eric mohr 
mul high performance parallel lisp 
sigplan symposium language design implementation june 
jack holloway guy lewis steele jr gerald jay sussman alan bell 
scheme chip 
technical report ai memo mass inst 
technology artificial intelligence laboratory 
kranz orbit optimizing compiler scheme 
symposium compiler construction pages 
acm sigplan june 
mass inst 
technology cambridge ma 
mit scheme scheme release 
james miller 
parallel processing system mit scheme 
phd thesis mass inst 
technology august 
available mit lcs tr 
james miller 
implementing scheme parallel processing system 
international journal parallel processing october 
james miller christopher hanson 
ieee draft standard programming language scheme 
ieee 
forthcoming 
james miller guillermo 
free variables class environments 
journal lisp symbolic computation appear 
guillermo 
liar algol compiler scheme 
bachelor thesis mass inst 
technology 
guy lewis steele jr rabbit compiler scheme 
master thesis mass inst 
technology 
performance measurements code comparison detailed analysis explanation gambit performance scope 
appendix provides brief sketch performance results compares code generated gambit mit liar compiler orbit compiler 
shows results running clinger version gabriel benchmark programs 
part figures need explanation 
points may help reader better interpret motorola mc gambit orbit liar cc boyer theta theta browse theta theta theta theta theta theta deriv theta theta destruct theta theta div iter theta theta div rec theta theta puzzle theta theta theta tak theta theta theta theta theta theta traverse theta theta triangle theta theta theta mips gambit orbit liar cc scc tak theta theta theta theta theta theta theta theta triangle theta theta theta theta note timings gambit absolute seconds 
times relative gambit 
performance comparison 
measurements mc family taken hewlett packard system mhz mc cpu megabytes memory local disk 
measurements hp ux time functions deliver estimate user cpu time units milliseconds 
system time time garbage collection included numbers 
measurements taken full multi user operating mode single user logged 

measurements mips cpu taken digital equipment decstation megabytes memory local disks running preliminary release cmu mach operating system 
measurements mach timing functions omit system garbage collection time taken multi user conditions 

column labeled scc contains timings joel bartlett scheme compiler august 
column labeled cc contains measurements benchmarks hand coded compiled switch optimization vendor supplied compiler cc 

benchmarks executed times mean reported 
experience measured times repeatable percent 

benchmarks run supplied clinger differences 
systems declaration supplied caused arithmetic performed mode exact integers overflow detection 
addition benchmark compiled written enclosed expression allow compiler take advantage flow analysis performs 
best timings compiler recorded 
unable find consistent pattern explain form program perform better compiler 

number procedures routinely benchmarks performance dominate performance entire benchmark 
particularly noticeable case get put operations boyer benchmark 
order compensate wrote specialized version procedures symbol string gensym get put 
details code system dependent require non standard procedures algorithms systems 
turn detailed look actual code produced compilers 
shows results compiling mc scheme program gambit version orbit version liar beta release define reverse map define loop pair 
loop cdr cons car loop code slightly modified presentation purposes 
converted instruction sequences system private assembler notation standard motorola syntax 
addition code compilers includes interspersed words garbage collector interrupt handlers 
removed code easier read 
affect performance executed usual case 
pretend undertaken detailed study code compilers 
examination number programs discussions implementors david kranz orbit chris hanson guillermo liar supply observations account large part differences output code 
comments apply gambit mc mips back ends object representation gambit low bits data item type tag representing type liar reverse map entry point entry sp sp sp cont return adr reverse map cmp interrupt check interrupt clr arg move arg bra loop loop cmp interrupt check interrupt move pair 
cmp beq label move result lea deallocate frame return rts label pea continuation setup cont arg car move move move jump jmp arg continuation cmp interrupt check interrupt move arg cons result move move move move arg cdr move move bra loop jump loop orbit entry point entry sp cont return adr move sp save move sp move arg move arg bra loop jump loop move result lea sp sp deallocate frame return arg move sp jmp cmp null 
bne bra move sp save move sp save pea setup cont move arg car move sp jump arg jmp jsr temp move cons result move sp move sp arg cdr move move arg temp lea sp sp deallocate frame loop move list 
cmp bne bra gambit entry point entry cont return adr beq arg count jsr arity error move pair 
bne bra jump loop move arg move cons result move sp move move sp arg cdr move move move sp arg move sp restore cont cmp heap overflow 
bcc jsr heap overflow pair 
bne move sp save cont move sp save move sp save move sp save move arg car move lea setup cont move sp jump arg jmp move result jmp return code comparison tags chosen optimize car cdr pairs direct jumps procedures 
orbit uses low bits type tag chooses 
liar uses top bits type tag representing orbit liar single object represent empty list gambit distinguishes objects counts false 
free pointer alignment gambit keeps free pointer byte aligned times potentially wasting space large numbers small objects created 
orbit liar maintain quad byte alignment 
consing gambit performs consing line code expansion liar 
orbit performs call external procedure order allow gc checking done allocation occurs 
gc detection gambit detects need garbage collection performing test basic block allocation occurs 
orbit places test code performs allocation liar tests entry procedure entry continuation point 
gambit garbage collector fully functional back ends 
code measurements reflect full cost detecting need gc benchmarks invoked garbage collector 
interrupt testing gambit test interrupts assumes stand environment program development environment 
changed parallel implementations order allow timer interrupts produce fair scheduler 
liar combines garbage collection interrupt check single short code sequence executed start procedure continuation 
know handled orbit 
unknown procedure call calling procedure identified compile time gambit loads arguments continuation argument count registers stack hold arguments 
procedure may called manner procedure label code compare number arguments passed number parameters expected move arguments trap appropriate 
liar passes arguments continuation stack 
uses elaborate mechanism distinguishes calls procedures named variables top level compilation unit procedure calls interpreter supplies number trampolines combine arity test runtime argument motion 
explanation part mechanism 
orbit passes arguments registers continuation stack 
mechanism similar somewhat simpler liar arity checking 
compatibility orbit compiler distinct language closely related scheme 
benchmarks run scheme compatibility mode performance cost clearly understood 
rewrote tak compared actual code differences native version scheme compatibility mode version 
noticeable cost implementation shared gambit liar 
coding primitive procedure pair 
orbit bit type tags distinguish pairs empty list optimize list 
operation 
pair 
expensive orbit compared compilers 
pvm usage statistics mc back allows programs compiled way gathers measurements dynamic usage pvm instructions types operands 
information performance analysis allow choose parts actual implementation pvm deserve careful optimization 
mechanism simple efficient basic block constructed front counts number kind pvm instruction operand class basic block 
back creates counter basic block generates code increment counter block entered runtime 
run counters recreate statistics 
resulting code runs slower unmeasured code allowing sizable programs measured analyzed 
see synopsis dynamic measurements taken running gabriel version boyer moore theorem prover benchmark 
operand usage frequency reg stk obj lbl glob mem instruction usage frequency copy label apply cond jump closures detailed instruction breakdown label apply cond simple car pair continuation cdr null procedure cons eq dynamic measurements boyer benchmark gathering measurements version boyer enclosed expression 
accounts lack global variable 
procedures put get dominate performance benchmark implemented 
comments results 
label operands appear directly jump instruction source operand instruction example may stored local variable 
benchmark labels appeared exclusively time context 
primary direct jumps branch arms conditional conditional isn tail position expression 
conditionals boyer appear tail position don know common general scheme code 
breakdown label code interesting shows dynamic execution frequency various types label 
recall simple labels continuations generate code runtime associated 
procedure label requires arity check may require moving values argument locations parameter locations 
apply instruction front request open coding primitive back supports 
shows breakdown primitive procedure operations occur boyer runs 
table shows open coded primitives account run time actual statistics contain numbers primitives 
fact deal detail omitted tables presentation tractable 
cond conditionals 
case boyer predicates encountered open coded versions pair null eq 
remaining predicates open coded remaining open coded predicates occur time 
