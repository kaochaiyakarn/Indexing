copyright wolfgang keller 
permission granted europlop copies conference 
page object relational access layers roadmap missing links patterns wolfgang keller ea wien austria email com com homepages designing software connect object oriented business system relational database tedious task 
object orientation relational paradigm differ quite bit 
application maps paradigms needs designed respect performance maintainability cost name just requirements 
luckily numerous patterns object relational access layers looking body pattern literature find patterns mined generative pattern language problem domain 
provides systematic roadmap patterns field fills pot holes road full pattern language object relational access layers providing missing patterns links 
large scale business systems follow layer architecture 
provide user interface layer top business object layer 
business objects need persistent persistence layer 
views business objects controller models user interface persistence layer application kernel phoenix persistence service structure layered architecture business systems 
want pure object orientation implement business system decide database paradigm system 
today choice object oriented database systems oodbms object relational access layers top relational database relational database access layer lead called representational business object layer 
see kel 
copyright wolfgang keller 
permission granted europlop copies conference 
page object relational databases plus access layer 
write kinds applications don practical experience kind databases 
functionality covered options depicted 
relational database access layer object relational access layer object access layer object oriented database system oodbms relational database dbms view interface object oriented languages smalltalk java 
different kinds database access layers contains patterns patterns help design understand object relational access layers 
fills pot holes road full generative pattern language object relational access layers provides missing patterns links existing patterns names rest patterns mined 
roadmap pattern language roadmap structures pattern language 
object relational access layers draw roadmap fields decisions designing object relational access layer 
copyright wolfgang keller 
permission granted europlop copies conference 
page object identifier proxy object manager transaction object designing object layer single table aggregation foreign key aggregation mapping aggregation inheritance tree table class table inheritance path table mapping objects tables mapping inheritance foreign key association association table mapping associations optimizing performance overflow table optimizing table structures queries controlled redundancy narrow views short views cluster read bundled write store forward optimizing general design flat file write building access layer layered architecture business systems layer persistence subsystem physical views host access physical views accessing relational databases multilayer class moving attributes tuple layer class broker central broker architecting object relational access layer plus local roadmap representing objects tables table design time roadmap object relational access layer patterns architecting object relational access layer describes structure object relational persistence subsystem global context layered architecture business systems 
architecture consists layers object layer contains infrastructure persist business objects tuple layer encapsulates relational database 
patterns designing object layer accessing relational databases 
task mapping objects tables 
come design moving attributes tuple layer 
notational conventions groups patterns marked bold face 
single patterns marked underlined 
copyright wolfgang keller 
permission granted europlop copies conference 
page having worked way patterns usually find performance system needs improved see patterns optimizing performance 
building access layer tell organize tasks object relational access layer 
forces driving language set forces adapted accessing relational databases kel 
forces relational access layers functionality versus cost mandatory features object oriented database systems listed lot optional features 
mandatory features known expensive implement optional ones harder 
balance features incorporate object relational access layer budget users willing spend 
separation concerns versus cost database programming complex objectoriented programming languages 
mapping concept add just combined complexity 
easiest way separate application programming database programming separate object oriented database aspects relational database aspects 
able exploit known patterns problem domains 
cost separated layers pay increased maintainability easier performance tuning 
performance database tuning locking strategies clever caching crucial achieve acceptable performance business information system 
database orders magnitude slower main processor running oo language map tuning concentrate database access 
tuning iterative process 
optimize database access may change access layer architecture behavior physical parameters storage system table layout api access database 
flexibility versus complexity database tuning crucial want encapsulation database allows frequent changes underlying data model upper layers software application kernel access layer remain untouched 
unfortunately flexible system complex 
legacy systems seldom develop business information systems scratch 
connect legacy systems allowed touch 
usually supersede complete legacy code big bang strategies risky expensive structure legacy data rarely fits needs structure 
may bridge generations database technologies 
keep application maintainable encapsulate legacy access 
particular strong force reengineering projects 
copyright wolfgang keller 
permission granted europlop copies conference 
page application style database driven business information systems types information systems 
relational database persistence mechanism disaster 
examples 
cad applications cad applications manipulate large sets complex interrelated objects 
transactions long 
cad designer typically checks design works hours checks back data store 
building applications top relational database object relational database mapping doomed fail 
simple pointer dereferencing working storage faster factor joins 
relational databases intended long transactions zero collision rate 
case tools case tools characteristics similar cad systems 
ibm negative experience ad cycle repository prominent example happens applications implemented top relational database 
check check persistence applications examples generalized applications complex interrelated objects allow direct manipulation allow user check database longer period time 
systems built non relational data stores 
check build applications map objects relations 
architecting object relational access layer list requirements relational database want fully objectoriented application kernel list typical functionality objectoriented database 
object oriented database system manifesto atk contains comprehensive list functionality want provide see table object relational access layer 
manifesto mandatory features object relational access layers covered complex objects programming language business objects smalltalk java rdbms plus access layer 
object identity see object identity pattern encapsulation programming language types classes programming language class type hierarchies programming language plus patterns mapping objects tables 
overriding overloading late binding programming language copyright wolfgang keller 
permission granted europlop copies conference 
page manifesto mandatory features object relational access layers covered computational completeness programming language extensibility programming language plus patterns mapping objects tables 
persistence access layer plus relational database rdbms 
secondary storage management rdbms concurrency rdbms plus patterns transaction control locking strategies 
recovery rdbms ad hoc query facility access layer top rdbms table core responsibilities object oriented database management system functionality listed table comes object oriented programming language 
challenge object oriented programming language objects persistent giving ability survive termination actual process parallel processes 
requirements typical requirements find databases 
see database book explanation dat 
forces driving architecture forces driving architecture naturally ones drive language architecture represents top level design decisions object relational access layer 
copyright wolfgang keller 
permission granted europlop copies conference 
page local roadmap layered architecture business systems layer persistence subsystem physical views host access architecting object relational access layer local roadmap architecting object relational access layer pattern list layered architecture business systems architecture business systems 
see ren discussion pattern form bus general discussion layered architectures layers 
layer persistence subsystem structure persistence subsystem 
physical views provide easy interface physical database tables 
see kel query objects pattern bra 
host access link database access layer transaction host database server 
patterns pattern layer persistency subsystem problem way structure object oriented database object relational access layer 
forces remember discussion separation concerns versus cost database programming complex storage subsystems complex known abstractions 
object oriented programming languages proven concepts 
complexity 
mapping concept dividing subsystems easily sum nightmare complexity 
easiest way separate concepts object orientation database programming separate object oriented database aspects relational database aspects 
able exploit wellknown patterns problem domains 
cost separated layers pay increased maintainability easier performance tuning 
copyright wolfgang keller 
permission granted europlop copies conference 
page application style force 
able adapt object persistence subsystem different application styles mentioned 
great difference intend write transaction oriented system system best described check check persistence 
possible integration legacy data sources effects design 
solution build system subsystems form layered structure 
upper layer called object layer encapsulates concepts object orientation lower layer called storage manager offers high level interface top physical storage devices file system 
relational database context just physical storage device 
structure persistence subsystem object layer storage manager physical storage system layer structure persistency subsystem object oriented programming languages assign responsibilities object oriented database system manifesto atk layers 
object layer object layer encapsulates concepts object orientation 
responsibilities complex objects object identity encapsulation types classes class type hierarchies overriding overloading late binding computational completeness extensibility ad hoc query facility 
object oriented programming languages part requirements listed table 
storage manager storage manager provides interface physical storage subsystem 
responsibilities persistence secondary storage management concurrency recovery ad hoc query facility 
database part requirements listed table 
exception ad hoc query facility 
ad hoc query facility database concept wrap level object oriented language order offer user equivalent sql 
deal form object sql called object query language oql odmg layers 
discussion lead form pattern 
paradigms need mapped come architecture consists layers 
layers contain respective abstractions paradigms copyright wolfgang keller 
permission granted europlop copies conference 
page upper layer paradigm want map needs code call lower layer code broker patterns see moving attributes tuple layer consequences manageability complexity approach breaks problem manageable parts cutting halves storage manager new problem kind component long lasting design history 
application style adapt persistence subsystem different application styles plugging different storage managers 
need adapt transactional legacy systems influence storage manager object layer 
variants object relational access layer variant object oriented database 
architectural sketch poet quite evident 
poet object oriented database uses relational database plus access layer storage subsystem 
object oriented database relational database storage manager build object relational access layer 
rest term tuple layer storage subsystem relational databases store objects 
persistence subsystem object layer tuple layer relational database layer structure object relational access layer related patterns concepts layers bus 
patterns solutions problems build access layer 
copyright wolfgang keller 
permission granted europlop copies conference 
page known uses object oriented databases object relational access layers built way 
cited poet poe arbitrary example 
example uses pattern object relational access layer product top top 
project solutions follow architecture bar hah kel sta wal 
architecture hei 
distinguishes object layer database layer brokers layers calls impedance mismatch resolvers 
pattern host access example build object relational access layer alongside legacy applications host computer 
suites applications old transaction applications new object oriented applications host database access layer single source host computer 
shelf access layer products constructed top odbc interface 
combine transaction system running host remote sql server way things handled 
problem connect object relational access layer host computer running transaction system 
forces performance versus straightforward design straightforward design provides access relational database host computer run host remote sql server 
unfortunately fast offer possibilities tuning transaction system 
single source want access layer modules host applications client applications 
integration legacy systems want add legacy data sources ims db databases flat files 
solution write queries communication agent bundled write 
install communication agent host computer query packets executes control host transaction monitor 
send back packet containing query results return codes access layer modules host computer 
copyright wolfgang keller 
permission granted europlop copies conference 
page structure tuple layer interface object layer interface query manager query query query query client communication agent ims tm access module host access layer database 
client host host communication agent access module access module connecting object relational access layer host transaction system kel structure see shows similarities differences compared normal object relational access layer remote database driver odbc similar interface tuple layer remains unchanged 
insert client host communication agent tuple layer 
client communication agent bundles write queries see bundle manager bundled write pattern 
client communication agent object buffers requests execute told 
communication agent host side receives bundle requests executes calling access modules buffers results sends back bundle results 
client communication agent checks return codes delivers results necessary 
install communication agent dispatcher write host transaction ims tm cics 
copyright wolfgang keller 
permission granted europlop copies conference 
page host communication agent call host access layer modules implement functionality client query objects query objects proxies host access layer modules 
host access layer modules access database 
consequences performance versus straightforward design solution offers reasonable performance see independent productive systems bar sta single source host database modules object oriented client applications conventional host applications 
project write host access layer normally justified gains productivity result host access layer host applications 
integration legacy systems straightforward wrap data source relational database host access layer modules 
related patterns pattern application proxies gof sense query objects client proxies host access layer modules 
communication agents host client implement bundled write 
known uses hypo project bar kel uses pattern phoenix project 
offers separate mainframe interface byproduct standard access layer product 
phoenix project sta host access layer written copyright wolfgang keller 
permission granted europlop copies conference 
page designing object layer forces driving design object layer main force driving design object layer features versus cost come expensive features complex queries nested parallel transactions implementing come cheap 
local roadmap object identifier proxy object manager transaction object designing object layer local roadmap designing object layer pattern list patterns need construct object layer described papers 
object identifier represent object individuality relational database 
see bro 
doubt today pattern 
concept described clearly object oriented database system manifesto atk gives definition object identity context object oriented databases 
definition applicable object relational access layers 
proxy prevent related objects loaded touch object relations 
see gof unofficial version crossing bro scott meyers smart pointers mey 
see class hei section 
object manager preserve object identity 
see view cache pattern kel object manager pages max plus unofficial version crossing bro 
understand interactions object manager transaction objects objects object relational access layer replacing term object manager view cache term object logical copyright wolfgang keller 
permission granted europlop copies conference 
page view 
transaction object handle transactions user code level 
solution see pattern accessing relational databases kel fact adapted saw object relational access layers odmg standard odmg see hei chapter database object protocol provide uniform protocol persistent objects 
derive 
application base classes 
narrow views short views kel patterns considered designing ad hoc query capabilities access layer 
basic relationship patterns plus odmg standard odmg show implement object relationships 
mapping relationships relational databases treated mapping objects tables 
accessing relational databases forces driving design tuple layer mapping objects tables treated separate fragment language remaining field decisions tuple layer design query interface dominant forces ease versus power interface interface easy 
hand complexity database interface stems power 
interface databases encapsulation easy powerful project 
object relational access layers live moderate complexity layer queries persistent objects 
forced sql database queries directly rare cases 
copyright wolfgang keller 
permission granted europlop copies conference 
page local roadmap relational database access layer hierarchical views transaction object view factory physical view query broker overflow table controlled redundancy narrow views short views encapsulates encapsulates encapsulates encapsulates refined refined coupled physical views view cache refined refined refined roadmap accessing relational databases kel 
merely patterns object relational access layers 
take fully fledged relational access layer surrogate object relational access layer interesting see patterns moving language 
object manager pattern language equivalent view cache 
view cache moving layer 
programming language persistent objects analogous hierarchical views 
persistent object factory equivalent view factory relational database access layers 
transaction object exists verbatim moved layer object layer 
see kel kel 
query broker relational database access layers substituted patterns need move attributes tuple layer 
physical views core abstraction tuple layer 
copyright wolfgang keller 
permission granted europlop copies conference 
page performance optimization patterns physical views object relational access layers complemented patterns mapping objects tables patterns optimizing performance pattern list pattern remains tuple layer physical views known query bra 
want real luxury add additional layer logical views implement cluster read moving attributes tuple layer set patterns dealing question move attribute values border layers object relational access layer object layer tuple layer 
forces driving way move attributes way move attributes objects queries tuple layer tuple layer objects attributes influenced programming language 
private variables private smalltalk methods get hold private instance techniques code generation hand written methods object layer methods persistent objects need implement 
called push approach objects pushing content lower layer 
smalltalk offers rich possibilities get information objects regardless public private code quantity code code write access layers resemble meta system see reflection pattern bus 
generic mapper encapsulate mapping meta information pull objects information lower layer queries generated mapping meta information runtime 
local roadmap multilayer class moving attributes tuple layer class broker central broker local roadmap moving attributes tuple layer copyright wolfgang keller 
permission granted europlop copies conference 
page pattern list multilayer class pattern provides solution question design communication layers extraordinary effort 
generating code access database separate methods 
methods tuple layer directly decoupling 
pattern rated resort pattern plop col 
resort pattern broad absence better solutions 
legend calls structure multilayer class 
shaded parts denote methods attributes upper layer object layer 
dashed parts show lower layer tuple layer members object method protocol lower level protocol called database contain needed push attributes pattern provides proven solution example polar framework hypo framework bar kel things way 
bobby woolf shepherd simply 
class broker way things smalltalk way concentrating mapping class separate broker class see unofficial version bro 
similar pattern described strong layering 
impedance mismatch resolvers form class brokers 
see hei section class broker called foo object fetch attributes 
call tuple layer physical views obtain data database 
copyright wolfgang keller 
permission granted europlop copies conference 
page central broker way things reflexive languages smalltalk build central broker evaluates classes meta information uses pull attributes push query objects generated mapping meta info 
top top uses approach 
central broker singleton gof mapping objects tables mapping objects tables kel stand pattern language fragment answers questions object oriented constructs inheritance aggregation relations mapped semantics relational databases :10.1.1.40.6841
local roadmap single table aggregation foreign key aggregation mapping aggregation inheritance tree table class table inheritance path table mapping objects tables mapping inheritance foreign key association association table mapping associations local roadmap mapping objects tables forces driving mapping performance optimization forces driving mapping performance optimization patterns papers mapping objects tables bro kel hei accessing relational databases kel 
space permit include patterns full section contains brief overview 
performance major consideration object relational build access layer 
usable layer fast 
tradeoffs read write update performance 
flexibility maintenance cost cases conflict complexity flexible build system complex expensive 
performance improved redundancy collide versus maintenance cost normal forms relational model dat 
space consumption database collides performance application 
copyright wolfgang keller 
permission granted europlop copies conference 
page need query processing force influence collides performance optimal mappings 
example building data warehouse implies separating data data needed fast online processing 
potential integration legacy system database collide best performing mapping add complexity integrate existing table structures 
pattern list single table aggregation foreign key association map aggregation relational tables 
inheritance tree table class table inheritance path table map inheritance hierarchy classes database tables foreign key association map association relational tables association table map associations relational tables 
objects blobs solves problems pattern 
find patterns kel level detail bro 
optimizing performance finished cut application feel need improve performance 
general pattern bit offer real help 
simply fact hard time assign name performance optimization indicator general rule pattern 
problem optimize performance application database 
forces forces wish optimal performance hand complexity cost optimal access layer hand 
tradeoffs include memory usage caching versus slow see kel kel extensive lists :10.1.1.40.6841
solution try reduce database traffic disk minimum yields maintainable application reasonable cost solution contains balancing forces solution ready solution 
deeper analysis factors cause bad performance leads series patterns split categories 
copyright wolfgang keller 
permission granted europlop copies conference 
page optimizing table structures queries achieved series performance patterns tune performance depending business objects structure access behavior 
patterns deal optimizing table structures access behavior 
result applying usually lost project 
optimizing general design set performance patterns incorporate static design architecture access layer 
patterns deal optimizing access layer structural design performance take layer project kind tuning done 
local roadmap optimizing performance overflow table optimizing table structures queries controlled redundancy narrow views short views cluster read bundled write store forward optimizing general design flat file write local roadmap optimizing performance pattern list category optimizing table structures queries documented kel manage read write object clusters single page database access parent child relation 
overflow table followed pattern advice denormalized relation 
objects dependent objects number integrated parent object table 
copyright wolfgang keller 
permission granted europlop copies conference 
page controlled redundancy manage read object clusters single page database access need read data parent object table 
narrow views kind database object level views filling list boxes 
short views speed filling list boxes prevent unnecessary data loaded list box 
category optimizing general design published cluster read provide high performance access large chunks data object relational access layer 
bundled write speed process writing dirty objects database 
store forward data wait transfer remote database shorten waiting time 
flat file write write large volume data wait database insertion 
patterns pattern cluster read example programming task needs large volume data time 
know structure data moment enter case process 
look invoice example explained detail accessing relational database pattern language kel 
consider want build high speed online browser large invoices 
copyright wolfgang keller 
permission granted europlop copies conference 
page customer order logical data model article invoice order xy customer application kernel view article quantity article quantity mapped part order processing system idea read invoice object dereference customer proxy dereference order position proxies plus proxies product 
require calls database network consuming milliseconds 
problem provide high performance access large chunks data object relational access layer 
forces performance versus complexity cost relational databases missing concept clusters multiple records allows reading larger chunks data tables time support level query languages sql 
building able handle larger chunks date clusters increase complexity access layer 
solution write stored procedure access layer module contains series sql queries get exactly data want time 
copyright wolfgang keller 
permission granted europlop copies conference 
page structure case code tuple layer record level cache object manager cluster read query application kernel object layer database series queries calls calls may cache result records may deposit objects object manager calling cluster read query call cluster read operation usually module tuple layer directly application kernel 
module deposits results record level cache object manager 
create objects results place directly object manager depending complexity mapping 
example resolved applying cluster read pattern example yield database request plus reduced number database accesses depending physical structure database 
consequences performance database calls potentially network get rid lots call overhead 
pattern speed complex cases 
orthogonality persistent language interface pattern introduces new kind call application kernel interface direct call cluster read 
somewhat persistence orthogonal nice perspective interface 
maintenance hack cluster reads directly physical database scheme get maintenance problem physical structure database changes 
affordable usually need dozen cluster reads large scale applications 
copyright wolfgang keller 
permission granted europlop copies conference 
page related patterns cluster read form request bundling resembles bundled write 
uses exactly idea logical views pretty common host transaction systems handle large amounts data single cases 
cluster read may optimization patterns overflow tables 
known uses reading data clusters request bundling ubiquitous 
basic idea clustering storage subsystems 
pattern form phoenix persistence subsystem sta ea 
complex stored procedures similar reasons 
pattern bundled write example write long transaction user code level 
run code load objects database object manager cache 
manipulate objects say dirty objects object manager 
start naive traversal object manager telling object write database result calls database call overheads discussed cluster read pattern 
happy waiting 
problem speed process writing dirty objects database 
forces performance implementing bundling absolutely necessary matter discussing implementation cost 
don performance reasonable 
solution pick statements generated query objects physical views send database single packet statements copyright wolfgang keller 
permission granted europlop copies conference 
page structure commit 
tuple layer bundle manager object manager application kernel object layer database calls way write query write query resets queues starts bundled query starts queues starts starts calling cluster read query tuple layer needs support bundling write requests 
bundle manager needs reset start operations 
result handling needn complicated expect result update insert statement error code 
example resolved bundled write pattern result single bundled statement issued database resulting improved performance 
consequences performance reasonable 
way call pattern applied client server environment 
cost bundle manager straightforward adds little code 
related patterns cluster read form bundling request 
interesting questions identical implementation cluster read bundled write 
answer request result read want immediately time access layer decides execute query get objects 
flush object manager transaction bundled write occurs wait dirty objects written single logical transaction 
copyright wolfgang keller 
permission granted europlop copies conference 
page known uses object relational access layers pattern top hypo project kel pattern store forward example imagine object relational access layer committing transaction contains changed objects need written central remote database 
updates take say seconds bundled write don want keep user waiting long time 
communication protocol communication protocol client database server database access layer database large sets dirty objects need stored problem prevent long waiting times user changed objects forces performance update statements processed near optimal performance database user likes wait seconds 
come way improve performance felt user 
correctness hand necessary objects transaction committing written central database start new transaction 
case user wait 
security keeping data administered server safer keeping personal computer minutes 
hand probability pc crashes higher probability somebody form write form hand 
users tolerant computers 
cost complexity solution planning affordable simple 
copyright wolfgang keller 
permission granted europlop copies conference 
page solution store data local buffer give control back user 
separate thread execution forward data buffer user works task 
structure communication protocol communication protocol client database server database access layer database thread thread bundle manager store forward buffer user process thread stores data written local buffer 
background process thread example bundle manager forwards remote database 
consequences performance user acceptance system store data locally speed gain come close processing rate computer working 
fast business systems 
correctness sure transaction user working collide data stored forward 
object sets contain common objects flush client cache risk time stamp collision 
security keeping data pc seconds save cases host give bad time 
cost complexity store forward schemes simple cost affordable 
bundled write example bundle manager separate thread synchronized application 
effort 
variants replicated databases store forward scheme order properly 
implement store forward schemes synchronized flat files 
store data local database forwarding job second thread forwarding 
copyright wolfgang keller 
permission granted europlop copies conference 
page related patterns pattern combined bundled write 
known uses pattern extensively fat client banking application sta 
phoenix uses forwarding error protocols case database connection broken 
pattern flat file write example imagine write batch job processes life insurance policies 
process policies night batches 
means milliseconds policy 
analysis number tables update indicates policy cause inserts relational database ms update seconds updates powerful host computer 
problem handle output database database far slow 
forces performance relational database advantages situations relational database system simply slow glance don want go back hierarchical database systems system just support batch job 
loading relational database flat file usually order magnitude faster individual inserts updates 
correctness versus performance results correct afford lock large regions database days afford allow errors 
cost complexity solution normal hardware reasonable cost 
solution write records transaction secured flat file vsam load database file 
note solution works inserts 
case updates merge file file contains unloaded content database 
copyright wolfgang keller 
permission granted europlop copies conference 
page structure batch step writes flat file database access layer database large sets objects need inserted database batch step loads database flat file flat file write load batch job consequences performance performance problem solved cases 
correctness batch refer data processing pending updates flat files result lost updates 
cost complexity design database access layer able redirect output flat files 
straightforward expensive implement 
related patterns see pattern specialized version store forward 
fast way store data form final forward final destination relational database 
known uses large scale batch jobs pattern 
phoenix project batch job described example 
insurance projects far 
building access layer set existing patterns object relational access layers deals questions software development process 
provide solutions questions best 
copyright wolfgang keller 
permission granted europlop copies conference 
page local roadmap building access layer representing objects tables table design time local roadmap building access layer pattern list patterns literature table design time bro best design relational database oo development 
representing objects tables bro map object structure relational database schema 
seeing trouble large projects central database group owns object relational mapping process process patterns 
copyright wolfgang keller 
permission granted europlop copies conference 
page problem solution index language architecting object relational access layer problem solution pattern name source architecture business systems 
build layered architecture consisting layers user interface layer domain object layer plus persistence layer 
layered architecture business systems ren structure persistence subsystem 
build system consisting subsystems form layered structure 
upper layer called object layer encapsulates concepts lower layer called storage manager offers high level interface top physical storage devices file system 
layer persistency subsystem provide easy interface physical database tables 
encapsulate table view wrapper class 
classes encapsulate overflow tables database optimization techniques 
provide uniform interface derive wrapper classes protocol class 
physical views kel link database access layer transaction host database server 
communication agent client host computer request bundling 
see page 
host access copyright wolfgang keller 
permission granted europlop copies conference 
page designing object layer problem solution pattern name source represent object individuality relational database 
assign objects synthetic key accompanies object birth destruction 
bury key object 
object identifier bro atk prevent related objects loaded touch object relations 
smart pointer proxy containing object identifier plus memory pointer instantiated null proxy instantiated 
proxy gof bro mey 
preserve object identity 
create cache objects database client process 
base cache container maps object identifiers pointers objects proxies 
object manager pages max bro handle transactions user code level 
transaction object 
give operations commit rollback 
transaction object kel accessing relational databases problem solution pattern name source provide easy interface physical database tables 
encapsulate table view wrapper class 
classes encapsulate overflow tables database optimization techniques 
provide uniform interface derive wrapper classes protocol class 
physical views known query kel bra copyright wolfgang keller 
permission granted europlop copies conference 
page moving attributes tuple layer problem solution pattern name source move object attributes layers system 
extend single class layers forming multilayer class 
unambiguously assign member class layer naming convention 
relieve multilayer class lower layer responsibilities possible encapsulate separate classes 
prefer call dependencies inheritance 
multilayer class col move objects attributes layers system 
create object upper layer object responsibility move attributes 
class broker bro move object attributes layers system 
create object upper layer objects responsibility move attributes 
central broker top top mapping objects tables problem solution pattern name source map aggregation relational tables 
put aggregated objects attributes table aggregating object single table aggregation kel map aggregation relational tables :10.1.1.40.6841
separate table aggregated object 
insert object identifier table object identity table aggregating object foreign key link aggregated object foreign key aggregation kel copyright wolfgang keller :10.1.1.40.6841
permission granted europlop copies conference 
page problem solution pattern name source map inheritance hierarchy classes database tables 
union attributes objects inheritance hierarchy columns single database table 
null values fill unused fields record 
inheritance tree table kel map inheritance hierarchy classes database tables :10.1.1.40.6841
map attributes class separate table 
insert object identifier table link derived classes rows parent table corresponding rows 
class table kel map inheritance hierarchy classes database tables :10.1.1.40.6841
map attributes class separate table 
add attributes classes class inherits class table 
inheritance path table kel map association relational tables :10.1.1.40.6841
insert owner object oid dependent objects table 
oid may represented database key object identifier 
foreign key association kel map associations relational tables :10.1.1.40.6841
create separate table containing object identifiers foreign keys object types participating association 
map rest object types tables suitable mapping patterns kel :10.1.1.40.6841
association table kel map objects relational database :10.1.1.40.6841
table containing fields synthetic oid second variable length blob contains data object holds 
streaming unload object data blob 
objects blobs kel copyright wolfgang keller :10.1.1.40.6841
permission granted europlop copies conference 
page optimizing performance problem solution pattern name source manage read write object clusters single page database access parent child relation 
fill parent entities database page child entities records reach physical page limit 
kel followed pattern advice denormalized relation 
objects dependent objects number integrate parent object table 
second table overflow table contains physical database page full child entities records 
overflow table kel manage read object clusters single page database access need read data parent object table 
replicate parts parent entity child entity need case 
replicate stable data subject frequent updates 
controlled redundancy kel kind database object level views filling list boxes 
views list boxes contain data needed list box primary key access object intend select list box 
narrow views kel speed filling list boxes prevent unnecessary data loaded list box 
load data chunks allow reasonable response time 
rule thumb records system 
equivalent twice number lines list box 
short views kel provide high performance access large chunks data object relational access layer 
write stored procedure access layer module contains series sql queries get exactly data want time 
cluster read copyright wolfgang keller 
permission granted europlop copies conference 
page problem solution pattern name source speed process writing dirty objects database 
pick statements generated query objects physical views send database single packet statements bundled write data wait transfer remote database 
shorten waiting time 
store data local buffer give control back user 
separate thread execution forward data buffer user works task 
store forward write data wait database inserts 
write records transaction secured flat file vsam load database file 
flat file write building access layer problem solution pattern name source map object structure relational database schema creating table persistent userdefined object object model rest see bro representing objects tables bro best design relational database oo development 
design tables object model implemented architectural prototype application full stage production table design time bro copyright wolfgang keller 
permission granted europlop copies conference 
page glossary glossary terms familiar people shiny new stuff confronted old world host systems 
cics cics general purpose online transaction processing oltp software system ibm 
cics application server runs range operating systems small desktops large mainframes meets transaction processing needs thousands terminals client server environment workstations lans 
cics transaction system takes care security integrity data looking resource scheduling making effective resources 
cics integrates basic software services required oltp online transaction processing applications 
details see www software ibm com ts cics host ibm mainframe computer environments host mainframe computer usually referred large server 
context mainframe intelligent dumb workstations attached host provider services 
mean host servers workstations clients 
server client relationship programming model independent contextual usage host source whatis com ims ims family products ibm 
ims db hierarchical database system see dat information 
ims tm tm transaction monitor online transaction processing system cics just product line 
mainframe shops started cics ims shops 
run systems 
details see www software ibm com data ims odbc open database connectivity odbc standard open application programming interface api accessing database 
odbc statements program access files number different databases including access excel text 
addition odbc software separate module driver needed database accessed 
main proponent supplier odbc programming support microsoft 
odbc closely aligned open standard structured query language sql call level interface 
allows programs sql requests access databases having know proprietary interfaces databases 
odbc handles sql request converts request individual database system understands 
source whatis com persistence ability objects survive termination process created 
words property programming language created objects variables continue exist retain values runs program recovery event application system failure example power loss computer system shuts system restarts uncompleted progress time shutdown including changes data backed point system consistent state 
called recovery 
transaction monitor program manages sequence events part transaction called transaction monitor 
transaction completes successfully database changes said committed transaction complete changes rolled back 
ibm cics product transaction mean instance program serves particular transaction request 
source whatis com transac htm copyright wolfgang keller 
permission granted europlop copies conference 
page vsam virtual sequential access method file management system ibm larger operating systems including primary mainframe operating system mvs multiple virtual storage called os 
vsam enterprise create access records file sequential order entered 
save access record key example name employee 
corporations developed programs ibm mainframes run programs access vsam files called data sets 
vsam succeeded earlier ibm file access methods sam sequential access method indexed sequential access method 
today vsam provided support legacy applications ibm emphasizes db relational database product customers database products oracle sybase computer sciences companies 
source whatis com atk malcolm atkinson fran ois bancilhon david dewitt klaus dittrich david maier stanley zdonik object oriented database system manifesto 
deductive object oriented databases proceedings international conference deductive object oriented databases dood pp 
bar christian wolfgang keller christian objekt unter ber internal technical report hypo bank nchen 
bra john brant joseph yoder reports collected papers plop europlop conferences washington university department computer science technical report wucs february 
bro kyle brown bruce crossing pattern language integration white knowledge systems 
shortened version contained john vlissides james coplien norman eds pattern languages program design addison wesley 
bus frank buschmann meunier hans rohnert peter michael stal pattern oriented software architecture system patterns wiley 
col jens decoupling object oriented systems collection patterns sd gmbh kg munich available www sdm de col jens wolfgang keller ein zur juli august pp 

col jens wolfgang keller multilayer class collected papers plop europlop conferences washington university department computer science technical report wucs february 
dat date database systems sixth edition addison wesley 
gof erich gamma richard helm ralph johnson john vlissides design patterns elements reusable object oriented software addison wesley 
hah wolfgang hahn andreas eine zu informatik spektrum heft pp 
springer verlag hei peter building scalable database applications addison wesley 
copyright wolfgang keller 
permission granted europlop copies conference 
page kel wolfgang keller mapping objects tables pattern language proceedings european pattern languages programming conference germany siemens technical report sw fb :10.1.1.40.6841
kel wolfgang keller jens relational database access layers pattern language collected papers plop europlop conferences washington university department computer science technical report wucs february 
kel wolfgang keller jens accessing relational databases pattern language robert martin dirk riehle frank buschmann eds pattern languages program design 
addison wesley 
kel wolfgang keller christian klaus wagner object oriented data integration running generations database technology parallel chaudhri mary loomis eds object databases practice prentice hall 
max john distributed virtual environment synchronous collaboration simultaneous technical report institute manufacturing information systems engineering 
mey scott meyers effective addison wesley 
james noble basic relationship patterns proceedings european pattern languages programming conference germany siemens technical report sw fb 
odmg rick cattell ed 
object database standard odmg morgan kaufmann publishers 
poe frank thelen rg beckert poet sql object factory technical overview www poet com sql tech htm poet gmbh ren klaus wolfgang keller layer architecture manfred broy ernst klaus monika schmidt eds 
software architectures design patterns business applications technical report tum technische universit nchen 
mauricio silva sergio carvalho john patterns layered objectoriented applications proceedings european pattern languages programming conference germany siemens technical report sw fb 
sta herbert michael der von phoenix internal technical documentation ea vienna 
sta herbert personal communications 
top object people version white www com 
top object people version user manual 
wal kim walden jean marc seamless object oriented software architecture prentice hall 
ed yourdon whitehead jim karin paul mainstream objects analysis design approach business prentice hall 
