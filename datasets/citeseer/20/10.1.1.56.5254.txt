tung dybvig reliable interactive programming modules sho huan simon tung mis edu tw department management information systems national institute technology taiwan kent dybvig dyb cs indiana edu computer science department indiana university bloomington usa received october revised june keywords modules linking loading interactive programming programming environments 

interactive programming convenient programming style supports fast prototyping debugging results loss modularity security 
article addresses problem supporting reliable modular interactive programming 
module system designed interactive introduced 
module system supports separate compilation automatic updating module interfaces program development 
allows programmer obtain fresh program state reliable testing eliminating need reload entire program 

modular programming facilitates large scale program development system maintenance providing clean way programs organized enforcing barriers program pieces 
module systems supporting batch oriented programming style module program compiled separately linked modules execution 
discovery error programmer modifies modules program integrity resulting executable maintained recompiling dependent pieces software utilities unix program 
interactive programming environments allow programmers alter existing definitions entering new definitions directly system 
preliminary version article acm conference lisp functional programming 
reliable interactive programming modules automatic maintenance module interfaces traditional interactive programming environments provide interactive modifications module interfaces propagated subsequent execution interactive system inherently unreliable reducing utility interactive programming environment 
module systems designed interactive programming languages environments address module consistency problem 
different related problem program text system state consistency problem 
interactive imperative languages changes variables objects caused evaluation expression interactive session may affect subsequent evaluation module interfaces affected 
result program text point interactive programming session relied understand program behavior 
problem module consistency problem modular programming interactive imperative languages confusing unreliable 
approach taken solve module consistency problem design module system levels meta level base level 
meta level provides set language constructs defining modules relationships modules 
base level describe actual computation 
program development connection meta level base level achieved extending variable lookup semantics base level 
fully developed applications meta level unnecessary compiled away 
program text system state consistency problem addressed extending meta level system additional syntactic constructs force programmer write programs reinitialized reliably 
result module system achieves convenience interactive programming reliability batch style modular programming 
remainder article organized follows 
section reviews related 
section presents semantics module system minimal base language shows module system solves module consistency problem 
section discusses problems caused side effects interactive programming presents extended module system solves program text system state consistency problem 
section describes implementation module system 
section presents 
tung dybvig 
related friedman felleisen module system designed consideration interactive programming 
interactive languages require late binding flexible program development 
restricting exported values procedures friedman felleisen support various late binding techniques defining modules importing items 
ultimate goal allow arbitrary load orders modules permit interactive extension redefinition bindings modules 
goal entirely achieved interactively added bindings access lexical variables module 
restriction strong acceptable 
scheme implementations support class environments 
class environment captures current lexical environment point class environment created 
eval access allow expressions variables evaluated dynamically class environment form modular programming supported 
class environments inherently dynamic nature module interfaces fully determined run time 
common lisp package system uses symbol tables represent modules 
symbols defined external package exported 
various mechanisms available access import exported symbols 
package system low level implementation fully developed static modules 
association symbols packages fixed read time changed recompiling affected code undesirable interactive programming system 
furthermore information hiding enforced package system 
queinnec designed module system lisp 
design goals system support separate compilation control visibility resources 
module available defined loaded 
module definition phase module top level environment established imported bindings free variables module 
module loading phase module body evaluated 
system imported variables bound early module definition phase 
requires module dependency acyclic defeats possibilities flexible interaction 
curtis proposed module system designed largescale programming scheme 
proposal module isolated scope may nested inside modules 
modules anonymous 
communicate sharing items specified interfaces 
interfaces named environments may contain syntax bindings value bindings 
address problem fitting reliable interactive programming modules system scheme interactive programming style 
talk modern lisp dialect contains module system metaobject protocol transparent interface extensive set libraries 
talk module system designed support easy efficient application delivery 
executable talk application contains separately compiled modules libraries 
talk distinguishes compilation execution dependencies 
compilation units automatically excluded delivered executable 
process program development talk adheres closely traditional execute model 
standard ml statically scoped functional programming language secure polymorphic type system 
module extension standard ml associates module environments signature containing interface module structure containing implementation module 
ml type system limits flexibility interactive language difficult support arbitrary module load order 
modula modula ada conventional modular languages 
modula separates definition module implementation requires correspondence components 
modula differs modula allowing implementation module associated interface specifications 
facility allows exporting different levels detail implementation different importing modules 
ada supports generic packages 
generic packages instantiated statically declarations 
systems support interactive programming 

module system modular programming languages define module terms subcomponents import specification public variables values private variables values 
module hides details implementation private variables provides services exporting public variables receives services binding free variable module imported variables variables defined module 

syntax semantics addition supporting import private public definitions module system features ffl provides flavor benefits lexical scoping tung dybvig con gamma constants ide identifiers stmt statements exp expressions module import public private lambda imp syntax ffl supports mutually referential modules allows arbitrary module load orders ffl permits interactive extension redefinition module bindings 
presents syntax simple language imp extends call value calculus modular programming constructs 
imp intended semantic foundation module systems interactive call value programming languages 
syntax imp divided levels meta level base level 
meta level consists module private public statements 
statements support interactive operations user perform define bindings modules relationships modules 
statement allows user test program evaluating expressions environments associated module 
base level consists constants variables abstractions applications 
expressions merely calculus expressions describe actual computation performed program 
remainder section assume base level contains assignment operators concerned primarily scoping variables assignments affect scoping 
reliable interactive programming modules ae env ide environments ide 
env theta env theta ide module environments constant values ffl expressed values imp semantic domains presents semantic domains imp domains include environments module environments constant values expressed values 
environments functions map identifiers variables expressed values 
module environments functions map identifiers module names modules 
module components private environment public environment imports 
imports module consist zero identifiers names modules 
expressed values include constant values function values 
function values take module environment implicit argument 
concept free versus bound variables essential semantics imp calculus 
expression value bound variable determined locally value free variable obtained surrounding context 
similarly module free variables obtain values definitions module imported modules 
rules determining free variables imp expression mirror calculus 
rules meta level constructs straightforward imp module statement contains free variables variable occurs free expression part private public statement occurs free statement 
presents semantic functions imp assume initial environment represented ae maps identifier undefined value initially module environment maps identifier triple consisting initial environment private bindings initial environment public bindings empty set indicating imported modules 
module statement allows import module defined modified 
private public statement evaluates expressions returns new module environment contains new binding corresponding module private public environment 
statements return sequence consisting new module environment undefined value 
statement evaluates subexpression module environment module name initial lexical environment 
returns tung dybvig notations sequence formation kth member sequence ae ae injection domain projection domain semantic functions stmt 
theta con exp ide env module import private mae public mae mae mae mae lookup ae lambda mae strict ffl ae ffl mae mae mae imp semantic functions sequence consisting unchanged module environment value 
expression value display purposes interactive environment 
consecutive meta level statements evaluated passing module environment returned statement 
addition modifying module private bindings public bindings imports directly features semantics lambda expressions applications variables essential semantics imp language reliable interactive programming modules ffl semantics enforces call value evaluation 
indicated strict function semantic function abstractions 
ffl lexical environment closed procedure value abstraction 
ffl name module abstraction evaluated closed procedure value abstraction 
ffl module environment closed provided dynamically implicit argument procedure applied 
ffl value variable determined lexical environment module name module environment 
module name may may current module name 
search variable value starts lexical environment followed private public bindings module corresponding module name followed public bindings modules imported module 
variable referenced imported defined locally search terminates undefined value 
essence semantics bindings free occurrences variables procedure determined dynamically time module environment 
dynamic search confined components private environment public environment imports module procedure created 
user modify bindings imports module program free occurrences variables module sensitive modifications 
addition bound occurrences variables determined lexical environment 
resulting semantics preserves lexical scoping providing flexible interactive capabilities 
presents auxiliary functions lookup 
direct implementation functions inefficient technique section allows variable lookup semantics imp language implemented efficiently 
semantics imp requires variables looked dynamically module import list 
confused kind dynamic lookup required support dynamic object oriented programming languages 
distinction imp bindings static program evaluation meta level statements alter scoping bindings may change run time dynamic object oriented programming languages method code applied different types objects 
distinction basis efficient mechanism described section 
tung dybvig lookup ide env ide ide ide lookup ae ae undefined undefined undefined ae undefined irst rest undefined rest auxiliary functions 
examples simplify presentation scope control mechanisms imp chosen calculus base language 
section assume imp extended various scheme constructs primitives 
presents example imp program 
example involves modules 
module defines exports square procedure initially incorrect 
module imports module uses square procedure define distance procedure calculates distance point origin 
user test individual procedures statements 
realizing definition square incorrect user redefine square procedure test 
example demonstrates procedure may redefined interactively new definition available automatically modules procedure 
presents example imp program 
example involves modules 
triangle rectangle export area procedure 
compute area module import area procedure triangle module rectangle module module statement 
example demonstrates module import may modified interactively reliable interactive programming modules module import public square lambda module import public distance lambda sqrt square square distance public square lambda distance interactive redefinition program development 
illustrates potential problem regarding name conflicts imported variables compute area module different area procedures triangle module rectangle module simultaneously 
problem solved general import specification 
definition module compute area import triangle rectangle rec area area declares public bindings module triangle area binding module rectangle imported module compute area area renamed rec area 
third example 
example uses modules example adds compare module exports procedure computes distance point origin 
call distance 
indirectly calls square procedure defined module square procedure locally defined compare module 
example demonstrates importance definition time module name look free variables 
time module name look free variables exported procedures call 
erroneously return example 
example uses mutually referential modules import export implement mutually recursive 
odd 
procedures 
note tung dybvig module triangle import public triangle area lambda module rectangle import public rectangle area lambda module compute area import triangle private compute area compute lambda area compute area compute module compute area import rectangle compute area compute modifying imports statement refer imported variables addition variables locally defined module 
support mutually referential modules greatly increases flexibility especially constructing large libraries interact nontrivial ways 

program text system state consistency interactive programming session programmer typically loads program interactive environment repeatedly tests modifies program enhance functionality eliminate errors 
process value program run affected earlier changes set public private variables changes definitions public private values changes system state resulting assignments public private variables data structure mutations 
variable semantics imp guarantees changes variable resolve proper locations 
guarantee values locations consistent reliable interactive programming modules module import public square lambda module import public distance lambda sqrt square square module compare import public compare 
lambda 
distance private compare square lambda compare 
lexical principle program text sample interactive session demonstrates 
immediately definition fun call fun returns 
redefining op fun returns 
incorrectly reflects current program text values op expected values 
value op incorrect op bound value op redefinition op effect caching old value op 
value incorrect altered call fun reset second call 
general proper reinitialization program state test run subsequent runs occur contaminated state 
problem easily overlooked programmer may draw erroneous behavior program running contaminated state 
approaches may solve problems 
reevaluate variable definitions including rely altered bindings 
essentially traditional batch oriented programming style 
approach provide undo redo facilities programmer interlisp 
programmer required keep track dependencies variable definitions undo redo selected ones manually 
process burdensome error prone 
fur tung dybvig module import odd public 
lambda odd 
gamma module odd import public odd odd 
lambda 
gamma odd 
odd 
mutually referential modules thermore side effects expensive undo 
third approach system keep track dependencies definitions 
variable redefined user system automatically affected definitions 
unfortunately doing difficult simple dependency analysis may lead unnecessary recomputation thorough analysis may result total overhead simply reloading program 
chosen rely combination syntactic restrictions programming conventions solve program text system state consistency problem 
syntactic restrictions force variable occur run time public private variable definition time op 
accomplished requiring initialization expression public private variable lambda expression 
furthermore bindings established public private definitions immutable assignment operators base language assigning public private variables 
restrictions effectively guarantee program text system state consistency prevent modules maintaining local state 
local state supported assignable private variables established new meta level private 
construct 
private 
establishes bindings assignable variables leaving values uninitialized 
reliable interactive programming modules 
private op 
private fun op op lambda set 
cons op op 
fun 
private op gamma 
fun consistency problems presents revised meta level syntax imp language 
convention private 
variables initialized explicitly coded initialization procedures responsibility invoking initialization routines rests programmer 
programming environment detect report uninitialized private 
variables 
ensure consistency programming environment reset private 
variables changes public private private 
definitions 
restrictions result inherent loss functionality 
suppose wish export value variable allow assignable modules 
simply export procedures procedure lambda assignment procedure lambda set 

similarly suppose wish export variable giving value proc lambda arg may assigned lambda arg 
define private put set 
proc exported initialization procedure export value lambda arg value restrictions side benefit encourage programmers write programs easily analyzed compilers programmers code assign variable insulated single module 
programmer compiler simply scan module determine variables assignable determine types values assigned variables 
furthermore restrictions naturally lead assignment procedures ensure new value range acceptable values 
example assignable tung dybvig module import public expr private expr private 
revised imp syntax variable take positive values assignment procedure written lambda positive 
set 
error results safer readable easily analyzed code 
benefit definition time computation involving potentially order dependent variable disappears 
computation contained explicitly defined initialization procedures associated module 
modules loaded arbitrary order programmer order invocation initialization procedures 
incorrect ordering typically result uninitialized variables error reported programming environment 

implementation preceding sections design module system supports reliable interactive programming 
section discusses user interface issues techniques implementing system efficiently 

module structure syntax imp enforce module structure 
allows statements module interleaved statements modules 
flexibility needed support interactive programming structured approach writing modules generally preferable 
module syntactic form group definitions module reliable interactive programming modules module stack import list private 
stack public init stack module stack import list private 
stack stack public stack init stack possible break large module module forms 
module system disallows load time computation different pieces module loaded arbitrary order 
aid program analysis may preferable require module wholly contained module form 

user interface order provide convenient interactions programmer module system interactive user interface typically form read eval print loop repl module sensitive 
simple design repl prompt represent name current module 
expressions definitions entered prompt module evaluated module environment module 
current module changed module request 
syntactic form unnecessary module specifier public private private 
forms 
similar involved design window user interface associates module file edit window 
interactive user interface provide mechanism eliminating modules bindings modules 

module linkage semantics module system requires free variable bindings determined dynamically 
property provides necessary flexibility interactive programming 
naive implementation semantics result unacceptable performance 
implementation keeps track import export relations modules uses double indirections implicit incremental link step interactive modification resolve bindings free variables 
describe section indirections needed fully developed tung dybvig module cpu import memory private 
bus size public init cpu lambda set 
bus size init memory public lambda expt bus size module memory import cpu private 
size private 
mem public init memory lambda set 
size 
set 
mem vector error cpu memory code 
linker keeps track variable bindings free variables module maintaining module environments public variables private variables free variables 
public private environments associate variables locations contain values 
environments associate free variables locations contain pointers locations values pointers locations local imported variables 
binding public private environment module allocated public private definition linked system 
similarly binding free variable environment module allocated expression containing free variable linked 
linker associates binding free variable environment location appropriate local imported variable 
run time error signaled free variable associated location time referenced 
figures depict implementation modules cpu memory import 
module primitives imports system primitives expt reliable interactive programming modules procedure environments cpu public environment init cpu private environment bus size procedure undefined free variable environment bus size expt init mem environments memory public environment init mem free variable environment size procedure procedure private environment size mem procedure environments primitives public environment expt mem procedure procedure procedure module linkage tung dybvig assumed implicitly imported cpu memory 
interfaces modules modified freely 
possible modifications include changing module imports adding binding modifying existing binding 
support modifications free variable environments affected modules updated user interaction changes dependencies modules 
example local definition added memory pointer cpu replaced pointer local 
extreme circumstances amount relinking required high 
practice appear problem 

compiling developed programs application fully developed ready put production meta level language internal module structure need longer supported 
particular double indirections required support interactive modifications eliminated 
compiling developed programs straightforward 
public private variable renamed composite name reflecting defining module original variable name 
example variable module renamed 
variables named top level variables top level variables name conflicts avoided 
similarly free variable converted appropriate top level variable 
calls small local imported procedures integrated time especially important avoid apparent overhead resulting assignment procedures described section 
code separate modules compiled separately long sufficient information recorded module determine set variables exports 
straightforward extend allow separately compiled fully developed modules combined modules interactive development 

interactive programming systems offer convenience flexibility greatly speed program development 
modular programming allows programmer create structured programs interfaces modules simplify coding increase reliability program part 
static nature traditional module systems nature traditional interactive programming systems inherently odds 
module system described article intended support inter reliable interactive programming modules active modular programming 
important feature module system module free variable bindings automatically updated reflect interactive modifications module local imported variables 
restrictions disallowing definition time variable requiring assignable private variables initialized explicitly feature allows interactive environment accurately reflect current program text support load order independence reinitialization reloading 
language described article separated meta level defining modules interfaces base level defining executable code 
meta level features available base level language performance fully developed programs unaffected existence features 
authors oscar waddell comments earlier draft article carl bruggeman scheme typesetting code 

harold abelson gerald sussman julie sussman 
structure interpretation computer programs 
mit press mcgrawhill 

luca cardelli james donahue glassman mick jordan bill kalsow greg nelson 
modula report 
technical report dec systems research center 

pavel curtis james 
module system scheme 
proceedings acm conference lisp functional programming 

harley davis pierre 
talking modules delivery 
proceedings acm conference lisp functional programming pages 

feldman 
program maintaining computer programs 
unpublished article 

daniel friedman matthias felleisen 
closer look export import statements 
computer language 

robert harper robin milner mads tofte 
definition standard ml 
technical report ecs lfcs department computer science university edinburgh 
tung dybvig 
david macqueen 
modules standard ml 
proceedings acm conference lisp functional programming pages 

christian queinnec julian 
modules macros lisp 
eleventh international conference computer science society pages 
plenum publishing 

ren rodr iguez bruce duba matthias felleisen 
trust read eval print loop 
unpublished manuscript 

guy steele jr common lisp language 
digital press second edition 

warren teitelman larry masinter 
interlisp programming environment 
ieee computer 

sho huan simon tung 
merging interactive modular objectoriented programming 
phd thesis indiana university bloomington 

government department defense 
programming language ada manual 
lecture notes computer science vol 


niklaus wirth 
programming modula 
springer verlag 
