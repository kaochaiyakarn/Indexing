dime direct manipulation environment evolutionary development software arun lakhotia center advanced computer studies university southwestern louisiana lafayette la usa arun cacs edu presents overview dime environment direct manipulation environment developed author 
presents dime vision catalogue evolutionary transformations program transformations programmers software maintenance scenarios may programmer software maintenance 
dime system provide programmers programmers provide computer users simple intuitive powerful way transform data click mouse 
place programmer finger tips speaking rigorous formal transformations creating composing analyzing modifying architecture software system 
dime programmer radically architecture software system just click drag drop guarantee external behavior system unchanged 
software different engineering artifacts new software system created modifying actual components old systems 
mechanical electrical electronic components new submarine created totally new material scavenging similar components old submarine software components scavenged old submarine 
dime environment direct manipulation environment currently development provide capability modify software mouse direct manipulation user interface 
dime environment place programmers finger tips speaking rigorous formal transformations creating copyright ieee 
published proceedings iwpc june italy 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

composing analyzing modifying architecture software system 
dime programmer able radically architecture software system just point click drag drop guarantee external behavior system remain unchanged 
theoretical foundation dime consists catalogue evolutionary transformations transformations performed programmers software evolution 
catalogue transformation compiled analyzing author journal containing record programming activities span years quite similar catalogue restructuring transformations developed earlier griswold 
innovation dime project lies attaching evolutionary transformations mouse clicks 
calls development additional formalism infer parameters transformations context transformation applied minimal hints provided user 
rest organized follows 
section introduces dime vision 
section presents catalogue evolutionary transformations 
section highlights issues developing direct manipulation interface 
comparison dime research efforts section 
concluding remarks include status dime project expected impact anticipated challenges section 
vision dime environment revolutionize way programmers develop manipulate programs 
integrating robustness formal methods ease internet web browsers macintosh windows desktop dime place sophisticated program transformations programmers finger tips literally available click mouse 
desktops macintosh windows provide iconic representation files directories point interface moving copying deleting renaming printing files directories multiple views contents directory point click navigate directory mechanisms search files directories various parameters 
dime provide similar point click access components software system 
directory source code files functions variables statements types makefiles components software system represented icons 
program component relation components may different views 
instance function may shown icon shown name summary information size date change shown complete code 
call relation may shown directed graph nested tree structure 
programmer perform commonly complex operations just pointing clicking 
instance renaming function akin renaming file 
icon function name 
rename function click name type new name 
environment automatically rename function calls function scope rules 
similarly mouse operations select cut paste drag drop lead meaningful manipulations programs 
extract reusable piece code hidden big function selecting relevant code fragment dragging dropping file 
system automatically identify parameters new function introduce call new function 
similarly global variable local variable dragging variable dropping declaration section function 
just web browsers provide mechanisms move documents links traversal history navigation web dime provide mechanisms navigation software system 
architecture modelling technologies dime programmer view system 
programmer navigate system clicking objects relationships 
programmer may navigate program task interaction paths function call paths data flow paths name 
integration coarse grain architecture analysis techniques fine grain formal methods arm programmer powerful mechanism radically architecture software system 
instance programmer may coarse grain analysis identify tightly coupled components fine grain analysis de couple components 
similarly coarse grain analysis may identify repeated patterns code may replaced appropriate function calls fine grain analysis 
evolutionary transformations main theoretical challenge project development catalogue transformations evolving structure program 
transformations programmers day day activity reorganize restructure re architect source code influencing external behavior program 
transformations may interspersed behavior modifying changes performed alter design system 
transformations architecture software system 
rest section summarize catalogue transformations structural evolution 
transformations catalogue identified analyzing lines journal author programming activities past years 
programming activities recorded undertaken development systems notably transformations representative operations performed programmers supported fact principle similar restructuring transformations earlier griswold 
word transformation broadly mathematical mapping 
transformations modify program structure particular wedge provides insight program structure modifying 
transformation fold 
fold transformation creates function set statements replaces statements call function 
fold transformation called lambda lifting developed burstall darlington context functional programming subsequently studied logic programs :10.1.1.19.4684
griswold extract function transformation extends structured single entry single exit imperative programs 
extended transformation arbitrary imperative programs 
sequence statements folded identified folding function poses challenges 
decide variables parameters functions variables local variables equivalent determining variables universally quantified existentially quantified determine parameter passed value 
visit www cacs edu arun wolf procedure sale pay profit days integer cost float var sale int array var pay float var profit float process boolean var integer total sale total pay float readln sale process true total sale total pay days total sale total sale sale total pay total pay sale sale total pay total pay pay total pay days profit total sale cost sample non cohesive code 
function uses input compute different outputs 
computation depend flag passed parameter 
function id representative code interleaved computations 
figures function restructured collection functions object architecture 
functions representing methods computing different outputs extracted meaning preserving transformations wedge split fold 
transformation unfold 
unfold transformation replaces function call statements body called function 
transformation analogous unfold transformation functional logic programs difference imperative domain transformation account various types conventions 
transformation inline 
inline transformation unfolds function places called 
griswold var expr binding expr transformations correspond inline unfold transformations respectively 
transformation split 
split transformation splits single entry single exit region regions containing computations relevant set statements containing remaining computations 
transformation introduces new variables renames variables composes new regions computation remains unchanged 
feasible split region way transformation leaves region unchanged 
split fold transformations provide method extracting interleaved computations separate functions changing external behavior system 
transformation uses program slicing identify computations related 
transformation move 
move transformation moves statement statements control flow function 
move transformation analogous griswold move expr transformation 
optimizing compilers move transformation move invariant computation loop reorder computations reduce need temporary variables 
transformation 
transformation pushes statement function call sites 
statement may moved point function called point completion call 
ensure external behavior remains unchanged parameters affected function may changed computation involving local variable pushed 
transformation pushdown 
pushdown transformation pushes statement call site body called function 
doing sites function called may affected 
just transformation transformation may influence parameters called function order procedure sale pay profit days integer cost float var sale int array var pay float var profit float process boolean var integer total sale total pay float readln sale process true total sale total pay days total sale total sale sale total pay total pay sale sale total pay total pay pay total pay days profit total sale cost sdc seed procedure sale pay profit days integer cost float var sale int array var pay float var profit float process boolean var integer total sale total pay float readln sale process true total sale total pay days total sale total sale sale total pay total pay sale sale total pay total pay pay total pay days profit total sale cost wedge selection code extracted function 
user selects seed 
system highlights seed 
sdc defines single entry single exit region bound slice 
user selects sdc 
system identifies statements influencing seed region defined sdc 
step user selects readln statement seed intent separate user interface computation 
ensure external behavior system remains unchanged 
transformation rename 
rename transformation changes name program component function variable type file 
changes name definition component places component referenced 
rename transformation analogous griswold rename variable transformation 
transformation reorder 
reorder transformation changes order parameters function 
reordering applied function definition call sites 
transformation 
transformation changes scope variable instance changes global variable parameter 
transformation may influence parameters function global variable converted parameter local variable parameter local variable converted global variable 
reorder transformation griswold catalogue may performed move expr transformation 
catalogue explicit transformation operation 
transformation group 
group transformation collects set variables structure record 
group transformation valuable migrating fortran iv programs fortran procedural languages 
transformation valuable re architecting programs especially written domain experts trained computer scientists 
group transformation analogous bindings transformations griswold 
transformation 
transformation decomposes structure creates variable fields 
transformation may decompose structure represent cohesive grouping 
accessing evolutionary transformations mouse dime project major innovation providing access rigorous formal transformations click mouse 
important component project associate transformations mouse clicks 
procedure sale pay profit days integer cost float var sale int array var pay float var profit float process boolean var integer total sale total pay float read input days sale process true total sale total pay days total sale total sale sale total pay total pay sale sale total pay total pay pay total pay days profit total sale cost procedure read input days integer var sale int array int array var integer readln sale new function completion function extraction input subsequent steps code selected extracted converted function 
selected code replaced call function 
selected code interleave code decision place call straightforward 
user selected steps sdc selected seeds shown 
contains result steps 
procedure sale pay profit days integer cost float var sale int array var pay float var profit float process boolean read input days sale process true pay compute avg pay days sale profit compute profit cost sale procedure read input days integer var sale int array var integer readln sale function compute pay days integer sale int array float var total pay float integer total pay days total pay total pay sale sale total pay total pay return total pay function compute sale days integer sale int array float var total sale float integer total sale days total sale total sale sale return total sale function compute avg pay days integer sale int array float var total pay integer pay float total pay compute pay days sale pay total pay days return pay function compute profit cost float sale int array float var total sale profit float total sale compute sale days sale profit total sale cost return profit final result restructuring program 
annotations indicate restructuring steps respect previous figures function created 
create functions steps required separating interleaved computations 
achieved duplicating code segment 
mouse operations macintosh windows desktops may classified categories follows selection select object add selection object action move cut paste drag drop user defined operation types operations performed menu selection 
action operations operate objects identified objects current selection 
need access transformations mouse introduces need additional formalism needed uses formal transformations 
easy dime require user specify parameters transformation completely 
infer parameters hints seeds provided user 
additional formalism needed identify parameters automatically 
transformation example formalism designed explicitly purpose identifying parameters split fold 
transformation wedge 
wedge transformation bounds slice single entry single exit region called single definite control sdc see details 
figures show transformations interactively extracting interleaved computations 
original function low cohesion 
subsequent steps function restructured sequence wedge split fold transformations 
step computations related set seed statements extracted converted function 
final program object architecture computation data hidden single function 
restructuring step figures consists activities 
user selects set seed statements 

help system user selects computation extracted function system highlights seed statements 
user picks sdc 
system selects computation extracted applying wedge transformation seed sdc 

system replaces selected code call new function 
seed statements need contiguous code 
selected code interleaved code system may duplicate code 
case system generates parameters new function places function call external behavior function changed due duplication code 
system guarantee external behavior remain unchanged system create new function call 
figures show details performing activities 
user selects readln statement seed procedure entry sdc 
result wedge transformation shown 
example taken 
details intermediate steps formal definition transformations may thesis 
related works significant amount program transformations development program specifications evolution specifications specification directed evolution programs works require specification program explicitly represented usually formal language 
transformations propose may classified structural evolution transformation 
transformations operate directly program 
transformations modify behavior program treat program specification 
focus structural transformation structure program 
structural evolution transformations previously studied griswold notkin bull datta redo project 
griswold notkin studied transformations scheme imperative structured language 
bull datta redo project developed general frameworks describe transformations 
frameworks quite similar software refinery called reasoning code base management system cbms 
provide capability expressing reengineering transformations 
jain formalized method constructing complex logic programs annotating control flow simpler programs 
proposes software environment constructing maintaining logic programs catalogue simple programs list behavior preserving transformations 
transformations preserve program computes alter computes 
contrast preserve program computes may alter computed 
operate structure program related research syntax directed editors 
structural operations provided editors aware program structure sensitive semantics 
lies difference 
transformations oriented program structure semantics directed aware semantics program structure 
interest syntax directed editors due www phenomenon 
netscape composer editor example syntax directed editor 
programming visit www reasoning com environments visual basic visual java development kit symantec cafe provide rudimentary syntax directed editing mouse 
tools give appearance drag drop editing similar propose operations provide semantic content 
effort intentional programming ip microsoft research directed developing new paradigm programming 
encoding actions rigid syntax programming languages currently programmer encode intentions syntax free structure 
structure syntax free may correspond external ascii representation 
program ip paradigm hierarchy intentions 
higher level intentions defined terms low level intentions 
lowest level intentions map notion statements traditional languages 
ip paradigm intentions explicitly modelled provide trace programmer design decisions 
move existing code ip paradigm require identifying encoding hierarchy intentions task require significant effort 
structural evolution transformations correspond transforming intentions ip paradigm 
evolutionary model may provide bridge current paradigm ip paradigm 
transformations legacy code may moved ip paradigm incrementally 
dime environment aid reengineering design existing systems extracting reusable components existing systems 
dime architectural transformations enable programmers operate legacy systems reengineer objectoriented architectures 
example dime drop transformations programmer separate kernel software system user interface 
similar transformations may collect code segments operating data structures 
programmer may throw away old user interface package kernel reusable component 
dime environment currently development 
far developed algorithms necessary performing transformations 
challenges path executing vision 
formidable challenge developing algorithms performing control data flow analysis programs reasonable time reasonable precision 
difficult need incrementally update analysis program modified 
faced issues griswold notkin developed formalism incrementally updating analyses developed architectural design reduced cost keeping various analyses consistent 
concluded analysis cost large system prohibitively expensive 
developing tool help programmer planning restructuring task perform restructuring 
dime project investigating compromise providing automated support fully automated support 
approach pursued split test feasibility transformation transformation change meaning parts local global 
system verify transformation feasible local information typically information procedure function 
verify develop constraints satisfied globally information outside function order transformation feasible 
unsolved may simplified global constraints programmer verify 
acknowledgments idea direct manipulation user interface program restructuring triggered bruce lewis army 
author jean christophe contribution development concepts 
partially supported contract department defense department army army research office 
contents necessarily reflect position policy funding agencies official endorsement inferred 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
aitken de moor richter 
transformation intentional programming 
www research microsoft com ip overview ps sept 
baker 
finding duplication near duplication large software systems 
proceedings second working conference reverse engineering wcre toronto pages los alamitos ca july 
ieee computer society press 
bowen breuer lano 
compendium formal techniques software maintenance 
iee bcs software engineering journal september 
bull 
software maintenance program transformation wide spectrum language 
phd thesis school engineering computer science university durham durham uk 
burstall darlington :10.1.1.19.4684
transformation system developing recursive programs 
acm jan 
datta 
automated adaptation programs 
phd thesis wright state university 


context sensitive formal transformation restructuring programs 
master thesis center advanced computer studies university southwestern louisiana lafayette louisiana dec 
dershowitz manna 
evolution programs automatic program modification 
ieee trans 
softw 
eng nov 
feather 
survey classification program transformation approaches techniques 
meertens editor program specification transformation pages 
north holland 
feather 
detecting interference merging specification evolutions 
proceedings th international workshop software specification design pittsburgh pennsylvania pages 
computer society press ieee 
griswold 
program restructuring aid software maintenance 
phd thesis university washington july 
griswold chen 
tool support planning restructuring data abstraction large systems 
proceedings acm sigsoft symposium foundations software engineering fse san francisco ca pages oct 
griswold notkin 
automated assistance program restructuring 
acm transactions software engineering july 
griswold notkin 
architectural tradeoffs meaning preserving program restructuring tool 
ieee trans 
softw 
eng apr 
harris yeh 
extracting architectural features source code 
automated software engineering 
jain 
program maps relating structurally enhanced logic programs 
phd thesis case western university department computer engineering science 
johnson feather 
building evolution transformation library 
proceedings th international conference software engineering pages 
johnson feather 
evolution transformations construct specifications 
automating software design pages 
aaai press 
lakhotia 
unified framework software subsystem classification techniques 
journal systems software mar 
lakhotia 

restructuring programs statements functions 
journal information software technology page appear 
mili desharnais mili 
calculus program modifications 
acm software engineering notes may 
muchnick 
advanced compiler design implementation 
morgan kaufmann publishers san francisco ca 

program transformation systems 
computing surveys 
reasoning systems palo alto ca 
refine user guide 
reps generating language environments 
mit press 
rugaber wills 
understanding interleaved code 
automated software engineering june 
stevens myers constantine 
structured design 
ibm systems journal 
neal 
structure editors environments 
academic press 
tamaki sato 
unfold fold transformations logic programs 
proceedings second international conference logic programming sweden pages 
tip 
survey program slicing techniques 
program 
lang 
